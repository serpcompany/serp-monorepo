[
  {
    "owner": "swiftlang",
    "repo": "swift",
    "content": "TITLE: Dumping Swift AST via Command Line\nDESCRIPTION: Command to print the Abstract Syntax Tree (AST) after parsing phase using swiftc compiler\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -dump-ast -O file.swift\n```\n\n----------------------------------------\n\nTITLE: Using Value Types (Structs) in Swift Arrays for Performance\nDESCRIPTION: Recommends using value types (like the `PhonebookEntry` struct) within Swift `Array`s for better performance. Value types avoid the overhead associated with NSArray bridging and can reduce reference counting operations compared to using reference types (classes), especially if the value type itself does not contain reference types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Don't use a class here.\nstruct PhonebookEntry {\n  var name: String\n  var number: [Int]\n}\n\nvar a: [PhonebookEntry]\n```\n\n----------------------------------------\n\nTITLE: Generating Optimized LLVM IR\nDESCRIPTION: Command to print the LLVM IR after all LLVM optimization passes\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -emit-ir -O file.swift\n```\n\n----------------------------------------\n\nTITLE: Using Weak References to Break Reference Cycles\nDESCRIPTION: This example demonstrates how using weak references prevents memory leaks. When variables are set to nil, the instances are properly deinitialized since the reference cycle is broken.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/3.txt#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar john: Person?\nvar unit4A: Apartment?\n\njohn = Person(name: \"John Appleseed\")\nunit4A = Apartment(unit: \"4A\")\n\njohn!.apartment = unit4A\nunit4A!.tenant = john\n\njohn = nil\n// Prints \"John Appleseed is being deinitialized\"\nunit4A = nil\n// Prints \"Apartment 4A is being deinitialized\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Swift String in C++\nDESCRIPTION: Demonstrates creating Swift Strings from C++ string literals and using String methods like hasPrefix. Swift::String conforms to StringLiteralConvertible, allowing implicit construction from string literals.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_63\n\nLANGUAGE: c++\nCODE:\n```\nswift::String string = \"Hello world\";\n\nstring.hasPrefix(\"Hello\"); // Implicit construction of swift::String.\n```\n\n----------------------------------------\n\nTITLE: Manually Compiling Swift Generics PDF\nDESCRIPTION: This snippet provides a manual method to compile the Swift Generics PDF. It shows the sequence of commands to run pdflatex and bibtex multiple times to ensure all references and citations are properly resolved.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Generics/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd docs/Generics/\npdflatex generics\nbibtex generics\npdflatex generics\npdflatex generics\n```\n\n----------------------------------------\n\nTITLE: Conforming Types to the Differentiable Protocol in Swift\nDESCRIPTION: Illustrates how types conform to the proposed `Differentiable` protocol. It shows `Float` conforming directly (with `TangentVector` being `Self`) and a custom struct `Perceptron` conforming using the `@memberwise` attribute, which directs the compiler to synthesize the necessary requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nextension Float: Differentiable {\n    typealias TangentVector = Self\n}\nstruct Perceptron: @memberwise Differentiable {\n    var weight: SIMD64<Float>\n    var bias: Float\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Differentiable for Optional in Swift\nDESCRIPTION: Extension that makes Optional conform to Differentiable when its wrapped value is Differentiable. Defines a custom TangentVector struct and implements the required move(by:) method for optionals.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// enum Optional<Wrapped>\nextension Optional: Differentiable where Wrapped: Differentiable {\n    public struct TangentVector: Differentiable, AdditiveArithmetic {\n        public typealias TangentVector = Self\n        @differentiable\n        public var value: Wrapped.TangentVector?\n        @differentiable\n        public init(_ value: Wrapped.TangentVector?) { self.value = value }\n        ...\n    }\n\n    public mutating func move(by offset: TangentVector) {\n        if let value = offset.value {\n            self?.move(by: value)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Copy-on-Write using Swift Array for a Tree\nDESCRIPTION: This code modifies the previous `Tree` struct to achieve Copy-on-Write (COW) semantics by wrapping its node content within a Swift `Array`. Since `Array` itself implements COW, copying the `Tree` struct becomes an O(1) operation, as only the array reference (and its metadata) is copied initially. The actual tree data is copied only if the array is mutated when it has multiple references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nstruct Tree: P {\n  var node: [P?]\n  init() {\n    node = [thing]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using `willSet` and `didSet` Observers Together in Swift\nDESCRIPTION: This snippet defines a stored variable `currentURL` with both `willSet` and `didSet` observers. `willSet` uses an explicitly named parameter `newValue` to access the incoming value and perform an action (canceling a request) before the assignment. `didSet` performs an action (sending a new request) after the assignment is complete.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nvar currentURL : URL {\n  willSet(newValue) {\n    if newValue != currentURL {\n      cancelCurrentRequest()\n    }\n  }\n  didSet {\n    sendNewRequest(currentURL)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: C++ to Swift Virtual Function Mapping\nDESCRIPTION: Demonstrates the challenges of mapping C++ virtual functions with pointer parameters to Swift protocol methods using inout parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nclass Incrementer {\npublic:\n  virtual void incrementBoth(int *value1, int *value2) = 0;\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Incrementer {\n  func incrementBoth(_ value1: inout Int, _ value2: inout Int)\n}\n\nstruct MyIncrementer: Incrementer {\n  func incrementBoth(_ value1: inout Int, _ value2: inout Int) {\n    // The language requires that `value1` and `value2` don't alias.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Swift Enum with Raw Value from C++\nDESCRIPTION: This snippet demonstrates constructing a Swift raw-value enum from a string literal in C++. The static 'init' method returns an Optional, indicating if the string corresponds to a valid enum case. Shows handling both existing and missing cases; outputs depend on input strings. Bridged enums and Optionals required.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_25\n\nLANGUAGE: c++\nCODE:\n```\nvoid constructRoute() {\n  swift::Optional<Airport> arrivingTo = Airport::init(\"LAX\");\n  // arrivingTo is now Airport::LosAngeles\n  \n  auto departingFrom = Airport::init(\"HTX\");\n  // departingFrom is none\n}\n```\n\n----------------------------------------\n\nTITLE: Using ContiguousArray for Reference Types without NSArray Bridging\nDESCRIPTION: Advises using `ContiguousArray<T>` instead of `Array<T>` when storing an array of reference types (like instances of class `C`) if bridging to `NSArray` is not necessary. `ContiguousArray` guarantees contiguous memory storage and avoids the potential performance overhead associated with `Array`'s Objective-C bridging capabilities.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass C { ... }\nvar a: ContiguousArray<C> = [C(...), C(...), ..., C(...)]\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Protocol Conformance in Swift\nDESCRIPTION: Demonstrates conditional conformance using `Array`. The `Array` type conforms to the `Equatable` protocol only `where` its `Element` type also conforms to `Equatable`. An accompanying `==` operator overload implementing the comparison logic is shown. This feature was accepted in SE-0143 and implemented in Swift 4.2.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nextension Array : Equatable where Element : Equatable { }\n\nfunc ==<T : Equatable>(lhs: Array<T>, rhs: Array<T>) -> Bool { ... }\n```\n\n----------------------------------------\n\nTITLE: Fine-Grained Usage of try with Expressions and Arrays (Swift)\nDESCRIPTION: Highlights how to precisely scope the `try` keyword within expressions and array literals in Swift, affecting how much of a statement is considered for error catching and when compile-time errors are triggered. The snippet demonstrates both valid and invalid approaches for marking throwing calls, particularly their placement relative to operators and collection elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Ok.\nlet x = (try stream.readInt()) + (try stream.readInt())\n\n// Semantic error: the try only covers the parenthesized expression.\nlet x2 = (try stream.readInt()) + stream.readInt()\n\n// The try applies to the first array element.  Of course, the\n// developer could cover the entire array by writing the try outside.\nlet array = [ try foo(), bar(), baz() ]\n\n```\n\n----------------------------------------\n\nTITLE: Using Differentiable Function Types in Swift\nDESCRIPTION: Shows how differentiable functions are first-class values identified by `@differentiable` or `@differentiable(linear)` in the function type. It demonstrates the implicit conversion of a regular function `addOne` to these differentiable function types, subject to compile-time checks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nfunc addOne(_ x: Float) -> Float { x + 1 }\nlet _: @differentiable (Float) -> Float = addOne\nlet _: @differentiable(linear) (Float) -> Float = addOne\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Protocol Implementation Changes in Swift Library Evolution\nDESCRIPTION: Shows how protocol implementation behavior can change between library versions when adding new requirements and default implementations. Illustrates potential issues with recompilation changing behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolutionManifesto.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Library, version 1\nprotocol MagicType {}\nprotocol Wearable {}\nfunc use<T: MagicType>(_ item: T) {}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Client, version 1\nstruct Amulet : MagicType, Wearable {}\nuse(Amulet())\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Library, version 2\nprotocol MagicType {\n  @available(dishwasherOS 2.0, *)\n  func equip()\n}\nextension MagicType {\n  @available(dishwasherOS 2.0, *)\n  func equip() { print(\"Equipped.\") }\n}\n\nprotocol Wearable {}\nextension Wearable where Self: MagicType {\n  @available(dishwasherOS 2.0, *)\n  func equip() { print(\"You put it on.\") }\n}\n\nfunc use<T: MagicType>(_ item: T) { item.equip() }\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameters Using Separate Parameter Fields in Swift\nDESCRIPTION: Demonstrates how to document parameters individually using separate Parameter fields in Swift documentation comments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DocumentationComments.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Parameter x: ...\n- Parameter y: ...\n```\n\n----------------------------------------\n\nTITLE: Using defer for Resource Cleanup in Swift\nDESCRIPTION: Demonstrates using the defer statement for ensuring proper resource cleanup in Swift. The example shows how to open a file, defer its closing action, and process it line by line. The defer statement guarantees that the close action will be executed when the scope exits.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nif exists(filename) {\n    let file = open(filename, O_READ)\n    defer close(file)\n\n    while let line = try file.readline() {\n        // ...\n    }\n\n    // close occurs here, at the end of the formal scope.\n}\n```\n\n----------------------------------------\n\nTITLE: Isolating an Entire Class to MainActor in Swift\nDESCRIPTION: This code demonstrates how to isolate an entire class to the MainActor, which automatically makes the type Sendable because the actor protects all mutable state. This approach ensures all properties and methods are accessed only on the main thread.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/mutable-global-variable.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nclass MyModel {\n  static let shared = MyModel()\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Through String Bytes in UTF-8 Encoding\nDESCRIPTION: Shows how Swift strings can be accessed as bytes, demonstrating the UTF-8 encoding of a string by iterating through its byte representation and displaying the numeric values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nfor x in \"bump\".bytes {\n  print(x)\n}\n98\n117\n109\n112\n```\n\n----------------------------------------\n\nTITLE: Function Subtyping with Throwing Functions in Swift\nDESCRIPTION: Illustrates how non-throwing functions are subtypes of throwing functions, allowing them to be used interchangeably. It also shows how to pass a non-throwing function as an argument to a function expecting a throwing function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nfunc rachel() -> Int { return 12 }\nfunc donna(_ generator: () throws -> Int) -> Int { ... }\n\ndonna(rachel)\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays and Demonstrating Value Copying in Swift\nDESCRIPTION: This Swift code snippet creates a variable array 'x' with three integer elements and then assigns it to another variable 'y'. The purpose is to illustrate Swift's value semantics: 'y' gets a distinct copy of 'x', and subsequent mutations to either variable will not affect the other until copy-on-write is triggered. No external libraries or special dependencies are required. The main parameters are array values assigned to 'x', and the output is the creation of two variables containing the same initial data but independent thereafter. This snippet is intended for conceptual demonstration rather than practical use.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nvar x = [1,2,3]\nvar y = x\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Output File Map in JSON\nDESCRIPTION: JSON configuration file that maps Swift source files to their corresponding output files including object files, dependencies, swift dependencies and diagnostics. Used to control where the compiler outputs different file types for each source file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Driver.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"/path/to/src/foo.swift\": {\n    \"object\": \"/path/to/build/foo.o\",\n    \"dependencies\": \"/path/to/build/foo.d\",\n    \"swift-dependencies\": \"/path/to/build/foo.swiftdeps\",\n    \"diagnostics\": \"/path/to/build/foo.dia\"\n  },\n  \"/path/to/src/bar.swift\": {\n    \"object\": \"/path/to/build/bar.o\",\n    \"dependencies\": \"/path/to/build/bar.d\",\n    \"swift-dependencies\": \"/path/to/build/bar.swiftdeps\",\n    \"diagnostics\": \"/path/to/build/bar.dia\"\n  },\n  \"\": {\n    \"swift-dependencies\": \"/path/to/build/main-build-record.swiftdeps\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the Generic 'for...in' Loop in Swift\nDESCRIPTION: Shows the basic syntax of Swift's generic `for...in` loop. This construct iterates over any type `s` that conforms to the `SequenceType` protocol, processing each element `x` within the loop body.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfor x in s {\n  doSomethingWith(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Functions with Implied Differentiable Constraints in Swift\nDESCRIPTION: Demonstrates how Swift's type inference automatically adds implicit generic constraints for function types marked with @differentiable, making the parameter types and result type conform to Differentiable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_48\n\nLANGUAGE: swift\nCODE:\n```\n// With all explicit generic constraints:\nfunc foo<T: Differentiable, U: Differentiable, V: Differentiable>(\n    _ f: @differentiable (T, U) -> V\n) {\n    ...\n}\n\n// With implied constraints:\n//     where T: Differentiable, U: Differentiable, V: Differentiable\nfunc foo<T, U, V>(_ f: @differentiable (T, U) -> V) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Explicit Access Modifiers in Swift Extensions\nDESCRIPTION: This example shows the preferred way to specify access modifiers in Swift extensions for the standard library. The recommended approach is to apply access modifiers to individual declarations rather than to the extension itself, making the access level of each definition immediately clear.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\npublic extension String {\n  // 😢👎\n  func blanch() { ... }\n  func roast() { ... }\n}\n\nextension String {\n  // 😊👍\n  public func blanch() { ... }\n  public func roast() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Use-After-Consume Error in Swift\nDESCRIPTION: This code demonstrates the error that occurs when attempting to use a value after its lifetime has ended (use-after-consume).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n  %1 = load [copy] %0   // producer\n  %2 = copy_value %1    // interior use of %1\n  %3 = move_value %1    // consuming use of %1\n  %4 = copy_value %1    // ERROR: use of %1 outside %1's lifetime\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Escaping Closures in Swift\nDESCRIPTION: Illustrates the difference between escaping and non-escaping closures in Swift. Escaping closures are created when binding a closure to a variable, while non-escaping closures are typically used in function arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nlet f: () -> () = { ... } // Escaping closure\n// Contrasted with:\n({ ... })() // Non Escaping closure\nx.map { ... } // Non Escaping closure\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Toolchain on macOS\nDESCRIPTION: Commands for installing a built Swift toolchain into the system or user directory on macOS. Includes steps for installing both the main toolchain and debug symbols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C /\n  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx.tar.gz -C ~/\n```\n\nLANGUAGE: sh\nCODE:\n```\n  $ sudo tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C /\n  $ tar -xzf swift-LOCAL-YYYY-MM-DD-a-osx-symbols.tar.gz -C ~/\n```\n\n----------------------------------------\n\nTITLE: Scoped Try Expressions in Swift\nDESCRIPTION: Shows how to scope try expressions tightly using parentheses and array literals for more precise error handling control.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet x = (try stream.readInt()) + stream.readInt()\n\nlet array = [ try foo(), bar(), baz() ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Tail-Allocated Arrays with tail_addr in Swift SIL\nDESCRIPTION: The tail_addr instruction is used to project the address of an element in a tail-allocated array. It is similar to index_addr but aligns the resulting address to the tail-element type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_44\n\nLANGUAGE: Swift\nCODE:\n```\n%2 = tail_addr %0 : $*T, %1 : $Builtin.Int<n>, $E\n```\n\n----------------------------------------\n\nTITLE: Using Typealiases within Swift Protocols\nDESCRIPTION: Demonstrates the use of `typealias` inside a protocol (`Sequence`) to define a simpler alias (`Element`) for a nested type (`Iterator.Element`). This improves readability by allowing `SomeSequence.Element` instead of `SomeSequence.Iterator.Element`. This feature was accepted in SE-0092 and released with Swift 3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Sequence {\n  associatedtype Iterator : IteratorProtocol\n  typealias Element = Iterator.Element   // rejoice! now we can refer to SomeSequence.Element rather than SomeSequence.Iterator.Element\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Overload Set Mapping Example\nDESCRIPTION: Demonstrates how C++ overload sets with const reference and rvalue reference can be mapped to Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nstruct Tensor { ... };\n\nvoid processTensor(const Tensor&);\nvoid processTensor(Tensor&&);\n```\n\nLANGUAGE: swift\nCODE:\n```\nstruct Tensor { ... }\n\nfunc processTensor(_: Tensor) {\n  // call `void processTensor(Tensor&&)`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Value-Type Tree Structure in Swift\nDESCRIPTION: This snippet defines a `Tree` structure using value types (`struct`) and protocols (`protocol P`) to represent nodes. Copying an instance of this `Tree` (e.g., during assignment or function argument passing) involves copying the entire structure, which can be expensive due to potential allocations, deallocations, and reference counting overhead for nested content.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {}\nstruct Node: P {\n  var left, right: P?\n}\n\nstruct Tree {\n  var node: P?\n  init() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Convenience Constructor for Swift String Bridged via ExpressibleByStringLiteral\nDESCRIPTION: This C++ constructor enables direct initialization of a Swift String from a C string literal thanks to Swift's conformance to ExpressibleByStringLiteral. The constructor calls a static 'init' method and assigns the result. Prerequisite: the type must conform to ExpressibleByStringLiteral in Swift and be properly bridged. Typical use is bridging string literals from C++ to Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\n   String(const char *value) {\n     *this = String::init(value);\n   }\n```\n\n----------------------------------------\n\nTITLE: Module Qualified Names Usage in Swift\nDESCRIPTION: Demonstrates using module-qualified names to access module declarations and types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc playChess(_ blackPlayer : Chess.Player, whitePlayer : Chess.Player) {\n    var board = Board() // refers to Chess.Board\n}\n```\n\n----------------------------------------\n\nTITLE: Apply SIL Instruction\nDESCRIPTION: Transfers control to a function with arguments. Handles function application including generic substitutions and error handling via nothrow attribute.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_96\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'apply' '[nothrow]'? sil-actor-isolation-callee?\n                      sil-actor-isolation-caller? sil-value\n                      sil-apply-substitution-list?\n                      '(' (sil-value (',' sil-value)*)? ')'\n                      ':' sil-type\n\n%r = apply %0(%1, %2, ...) : $(A, B, ...) -> R\n// Note that the type of the callee '%0' is specified *after* the arguments\n// %0 must be of a concrete function type $(A, B, ...) -> R\n// %1, %2, etc. must be of the argument types $A, $B, etc.\n// %r will be of the return type $R\n\n%r = apply %0<A, B>(%1, %2, ...) : $<T, U>(T, U, ...) -> R\n// %0 must be of a polymorphic function type $<T, U>(T, U, ...) -> R\n// %1, %2, etc. must be of the argument types after substitution $A, $B, etc.\n// %r will be of the substituted return type $R'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Types in Swift\nDESCRIPTION: Shows how to define a custom error type using an enum that conforms to the Error protocol. Includes examples of error cases with and without associated values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nenum HomeworkError : Error {\n    case Overworked\n    case Impossible\n    case EatenByCat(Cat)\n    case StopStressingMeWithYourRules\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Function with Constraints in Swift\nDESCRIPTION: Example of a generic function with two collection parameters that have the same element type, where the element type conforms to Equatable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo<C1: Collection, C2: Collection>(c1: C1, c2: C2)\n  where C1.Element: Equatable, C1.Element == C2.Element\n{ }\n```\n\n----------------------------------------\n\nTITLE: Converting Class Methods to Initializers with swift_name\nDESCRIPTION: Demonstrates how to use `swift_name` with \"init\" base name on class methods to import them as initializers. This works for methods returning `instancetype` or the containing static type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_28\n\nLANGUAGE: objc\nCODE:\n```\n+ (Action *)makeActionWithHandler:(void(^)(void))handler\n  __attribute__((swift_name(\"init(handler:)\")));\n+ (instancetype)makeActionWithName:(NSString *)name\n  __attribute__((swift_name(\"init(name:)\")));\n```\n\nLANGUAGE: swift\nCODE:\n```\n/* non-inherited */ init(handler: () -> Void)\ninit(name: String)\n```\n\n----------------------------------------\n\nTITLE: SIL Function with OSSA Annotated Block Arguments in Swift SIL (Swift)\nDESCRIPTION: This example demonstrates a function declaration in SIL that uses Ownership SSA (OSSA) by specifying ownership conventions (@owned and @guaranteed) for block arguments. Parameters, both in signature and block, must have the proper ownership to align with SIL memory management strategies. Requires an OSSA-compatible toolchain and explicit type/ownership annotations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nsil [ossa] @baz : $@convention(thin) (@owned String, @guaranteed String) -> () {\nbb0(%0 : @owned $String, %1 : @guaranteed $String):\n  ...\n\n```\n\n----------------------------------------\n\nTITLE: Using 'final' for Direct Dispatch in Swift Classes\nDESCRIPTION: Demonstrates the use of the `final` keyword to enable direct dispatch, optimizing performance. Class `C` is marked `final`, preventing inheritance and allowing direct calls to its members. Property `D.array1` is marked `final`, preventing overrides and enabling direct access. In contrast, `D.array2` without `final` uses dynamic dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfinal class C {\n  // No declarations in class 'C' can be overridden.\n  var array1: [Int]\n  func doSomething() { ... }\n}\n\nclass D {\n  final var array1: [Int] // 'array1' cannot be overridden by a computed property.\n  var array2: [Int]      // 'array2' *can* be overridden by a computed property.\n}\n\nfunc usingC(_ c: C) {\n  c.array1[i] = ... // Can directly access C.array without going through dynamic dispatch.\n  c.doSomething()   // Can directly call C.doSomething without going through virtual dispatch.\n}\n\nfunc usingD(_ d: D) {\n  d.array1[i] = ... // Can directly access D.array1 without going through dynamic dispatch.\n  d.array2[i] = ... // Will access D.array2 through dynamic dispatch.\n}\n```\n\n----------------------------------------\n\nTITLE: String Collection Conformance with Character Indexing\nDESCRIPTION: An extension that makes String conform to BidirectionalCollection by implementing the required subscript to return Character elements from the characters view, showing how users can add the missing functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nextension String : BidirectionalCollection {\n  subscript(i: Index) -> Character { return characters[i] }\n}\n```\n\n----------------------------------------\n\nTITLE: Slicing Swift Strings with Range Operations\nDESCRIPTION: Demonstrates various ways to slice Swift strings using ranges, including standard ranges, open-ended ranges, and direct range indexing. Shows how slice replacement can resize the string.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\ns[r.start...r.end]\n// r2 : String = \"awe\"\ns[r.start...]\n// r3 : String = \"awesome\"\ns[...r.start]\n// r4 : String = \"Strings are \"\ns[r]\n// r5 : String = \"awe\"\ns[r] = \"hand\"\ns\n// s : String = \"Strings are handsome\"\n```\n\n----------------------------------------\n\nTITLE: Generated C++ Static Initializer Methods for Swift Struct Initializers\nDESCRIPTION: This C++ class definition demonstrates how multiple Swift initializers are mapped to static C++ 'init' methods. The default constructor is explicitly deleted to prevent unlabelled construction. Static overloads allow creating instances with either three float components or a single float. Requires the corresponding Swift type to be bridged and header inclusion.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\nclass Color {\npublic:\n  Color() = delete;\n\n  static Color init(float red, float green, float blue);\n  static Color init(float white);\n};\n```\n\n----------------------------------------\n\nTITLE: Throwing an error in Swift\nDESCRIPTION: Demonstrates how to throw an error in Swift using the proposed syntax. It checks if time elapsed exceeds a threshold and throws a HomeworkError if so.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nif timeElapsed() > timeThreshold { throw HomeworkError.Overworked }\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Class Hierarchy\nDESCRIPTION: Shows how to define a class hierarchy in Swift that will be bridged to C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\npublic class Vehicle {\n}\npublic final class Bicycle: Vehicle {\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generics and Specialization in Swift\nDESCRIPTION: This example demonstrates defining and using a generic class `MyStack<T>` and a generic function `myAlgorithm<T>`. When the compiler has visibility into the generic definitions and knows the concrete types used at the call site (like `Int` in this case), it can perform *specialization*, generating optimized versions of the code specifically for `Int`, eliminating generic overhead.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nclass MyStack<T> {\n  func push(_ element: T) { ... }\n  func pop() -> T { ... }\n}\n\nfunc myAlgorithm<T>(_ a: [T], length: Int) { ... }\n\n// The compiler can specialize code of MyStack<Int>\nvar stackOfInts: MyStack<Int>\n// Use stack of ints.\nfor i in ... {\n  stack.push(...)\n  stack.pop(...)\n}\n\nvar arrayOfInts: [Int]\n// The compiler can emit a specialized version of 'myAlgorithm' targeted for\n// [Int]' types.\nmyAlgorithm(arrayOfInts, arrayOfInts.length)\n```\n\n----------------------------------------\n\nTITLE: Using `didSet` Observer for Post-Assignment Actions in Swift\nDESCRIPTION: This snippet shows a stored variable `backgroundColor` with a `didSet` observing accessor. The code within the `didSet` block (calling `refresh()`) is executed immediately after a new value has been successfully stored in `backgroundColor`, providing a concise way to react to changes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nvar backgroundColor : Color {\n  didSet {\n    refresh()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking String Prefixes and Suffixes in Cocoa and Swift\nDESCRIPTION: Demonstrates how to check if a string has a certain prefix or suffix in both Cocoa (Objective-C) and Swift. The Swift API uses more modern naming conventions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_17\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (BOOL)hasPrefix:(NSString *)aString;\n- (BOOL)hasSuffix:(NSString *)aString;\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc startsWith(_ prefix: String)\nfunc endsWith(_ suffix: String)\n```\n\n----------------------------------------\n\nTITLE: Importing C++ Namespace as Swift Enum (CppButton Module)\nDESCRIPTION: Illustrates Option 1 for C++ interop: mapping the C++ 'widgets' namespace from the 'CppButton' module to an empty Swift enum named 'widgets'. The 'Button' class is represented as a nested struct.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// C++ module `CppButton` imported to Swift.\n\nenum widgets {\n  struct Button {}\n}\n```\n\n----------------------------------------\n\nTITLE: Allocating Stack Memory using alloc_stack in SIL\nDESCRIPTION: The `alloc_stack` instruction allocates uninitialized memory on the stack sufficient to hold a value of type `T`. It returns the address of the allocated memory ($*T). Options include `[dynamic_lifetime]` for unverifiable lifetimes, `[lexical]` for source-level lexical variables, `[var_decl]` for source-level variables, and `[moveable_value_debuginfo]` for debug info considerations with non-copyable or movable types. It must be paired with a `dealloc_stack` instruction. The allocated memory is not retainable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_0\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'alloc_stack' alloc-stack-option* sil-type (',' debug-var-attr)*\nalloc-stack-option ::= '[dynamic_lifetime]'\nalloc-stack-option ::= '[lexical]'\nalloc-stack-option ::= '[var_decl]'\nalloc-stack-option ::= '[moveable_value_debuginfo]'\n\n%1 = alloc_stack $T\n// %1 has type $*T\n```\n\n----------------------------------------\n\nTITLE: Providing Example for Non-Optional API Change in Swift - Swift\nDESCRIPTION: This snippet is a placeholder for an example demonstrating the workaround needed when an Objective-C API makes something non-optional in Swift 4. The snippet contains only a commented line indicating a 'FIXME', and does not perform any functionality yet. Intended for illustrative or instructional purposes, it requires future implementation to serve as a complete example.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Swift3Compatibility.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// FIXME: example\n```\n\n----------------------------------------\n\nTITLE: Illustrating Default Dynamic Dispatch in Swift Classes\nDESCRIPTION: This snippet defines two classes, `A` and `B` (where `B` inherits from `A`), to demonstrate Swift's default dynamic dispatch mechanism. Calls to `a.doSomething()` and access to `a.aProperty` within the `usingAnA` function are resolved at runtime using vtable lookups. The `dynamic` keyword explicitly opts into Objective-C message sending for `doSomethingElse()`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass A {\n  var aProperty: [Int]\n  func doSomething() { ... }\n  dynamic func doSomethingElse() { ... }\n}\n\nclass B: A {\n  override var aProperty {\n    get { ... }\n    set { ... }\n  }\n\n  override func doSomething() { ... }\n}\n\nfunc usingAnA(_ a: A) {\n  a.doSomething()\n  a.aProperty = ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Objective-C Methods with NSError Parameters as Throwing Functions in Swift\nDESCRIPTION: Shows how Objective-C methods using the common `NSError **` pattern for error reporting are imported into Swift as `throws` functions. The `NSError **` parameter is typically removed. Demonstrates the stripping of suffixes like 'AndReturnError' or 'WithError' from the base name when the error parameter is the first argument, resulting in cleaner Swift function names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_12\n\nLANGUAGE: objective-c\nCODE:\n```\n- (BOOL)performDelicateActivity:(NSOperation *)operation error:(NSError **)error;\n- (BOOL)performDelicateActivityAndReturnError:(NSError **)error activityBody:(BOOL(^)(void))activityBody;\n- (BOOL)performTheUsualActivityWithError:(NSError **)error;\n- (BOOL)performYetAnotherActivity:(NSError **)error;\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc performDelicateActivity(_ operation: NSOperation) throws\nfunc performDelicateActivity(_ activityBody: () -> Bool) throws\nfunc performTheUsualActivity() throws\nfunc performYetAnotherActivity() throws\n```\n\n----------------------------------------\n\nTITLE: Using Resilient Enum in C++\nDESCRIPTION: Demonstrates how to use a resilient enum in C++, including handling the unknown default case.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_30\n\nLANGUAGE: c++\nCODE:\n```\nusing namespace DateTime;\nvoid test(const DateFormatStyle &style) {\n  switch (style) {\n  case DateFormatStyle::medium:\n    ...\n    break;\n  case DateFormatStyle::full:\n    ...\n    break;\n  case DateFormatStyle::unknownDefault: // just like Swift's @unknown default\n    // Some case value added in a future version of enum.\n    break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Derivatives using @derivative in Swift\nDESCRIPTION: Illustrates how to provide a custom derivative implementation for an existing function (`expf` from Glibc) using the `@derivative` attribute. The custom function returns both the original function's value and its differential (a linear function representing the derivative).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport Glibc\n\n@derivative(of: expf)\nfunc _(_ x: Float) -> (value: Float,\n                       differential: @differentiable(linear) (Float) -> Float) {\n    let y = expf(x)\n    return (value: y, differential: { v in v * y })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Person and Apartment Classes with Strong Reference Cycle\nDESCRIPTION: This snippet demonstrates how strong reference cycles can occur between two class instances that hold strong references to each other. The Person class has an apartment property and the Apartment class has a tenant property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/3.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass Person {\n    let name: String\n    var apartment: Apartment?\n    \n    init(name: String) {\n        self.name = name\n    }\n    \n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nclass Apartment {\n    let unit: String\n    var tenant: Person?\n    \n    init(unit: String) {\n        self.unit = unit\n    }\n    \n    deinit {\n        print(\"Apartment \\(unit) is being deinitialized\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RangeReplaceableCollectionType Protocol in Swift\nDESCRIPTION: This snippet defines the RangeReplaceableCollectionType protocol which extends MutableCollectionType to enable structural mutation. It allows replacing a range of elements with elements from a different collection, potentially changing the total number of elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol RangeReplaceableCollectionType : MutableCollectionType {\n  mutating func replaceSubrange<\n    C: CollectionType where C.Iterator.Element == Self.Iterator.Element\n  >(\n    _ subRange: Range<Index>, with newElements: C\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Swift Optional Type Casting Behavior\nDESCRIPTION: Demonstrates how Swift's type checking operator (`is`) handles optional types (`Optional<T>`). It shows that casting implicitly adds or removes optional wrappers as needed. Non-optional types cast to optionals if they cast to the inner type. Non-nil optionals cast to another type if their unwrapped value can be cast. `nil` optionals always cast successfully to other optional types but fail to cast to non-optional types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// T and U are any two distinct types (possibly optional)\n// NO is any non-optional type\nlet t: T\nlet u: U\nlet no: NO\n// Casting freely adds/removes optional wrappers\nt is Optional<T> == true\nt is Optional<Optional<T>> == true\nOptional<T>.some(t) is T == true\nOptional<Optional<T>>.some(.some(t)) is T == true\n// Non-optionals cast to optionals iff they cast to the inner type\nno is Optional<U> == no is U\nOptional<NO>.some(no) is Optional<U> == no is U\n// Non-nil optionals cast to a different type iff the inner value does\nOptional<T>.some(t) is U == t is U\nOptional<Optional<T>>.some(.some(t)) is U == t is U\n// Nil optionals always cast to other optional types\nOptional<T>.none is Optional<U> == true\n// Nil optionals never cast to non-optionals\nOptional<T>.none is NO == false\n```\n\n----------------------------------------\n\nTITLE: Running Swift Benchmark Driver with Various Options\nDESCRIPTION: Example commands showing different ways to run the Swift Benchmark Driver with various options like setting iteration counts, sample sizes, filtering by tags, and listing available tests.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_O --num-iters=1 --num-samples=1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_Onone --list\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_Osize Ackermann\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_O --tags=Dictionary\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_O --skip-tags=unstable,skip,validation\n```\n\n----------------------------------------\n\nTITLE: Mutating Swift Properties in C++\nDESCRIPTION: Demonstrates how to mutate Swift properties in C++ using the withMutable... methods and lambdas.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_40\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Shapes-Swift.h\"\n\nvoid updatePosition(Shapes::Rectangle &shape, double value) {\n  shape.withMutablePosition([&](auto &position) {\n    position.withMutableX(  [&](auto &x)        { x += value; }\n    position.withMutableY(  [&](auto &y)        { y += value; }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Associated Type Constraints in Swift Protocols\nDESCRIPTION: Illustrates how to add arbitrary requirements using a `where` clause on an associated type (`SubSequence`) within a protocol (`Sequence`). This specific example constrains the `Element` type of the `SubSequence`'s `Iterator` to be the same as the main `Sequence`'s `Iterator` `Element`. This feature was accepted in SE-0142 and released with Swift 4.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Sequence {\n  associatedtype Iterator : IteratorProtocol\n  ...\n  associatedtype SubSequence : Sequence where SubSequence.Iterator.Element == Iterator.Element\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing GPIO and Blinking LED in Swift for Raspberry Pi Pico\nDESCRIPTION: Swift code to initialize the GPIO port for the Pico's built-in LED and blink it in a loop. It uses C functions from the Pico SDK, demonstrating the integration of Swift with the embedded platform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/IntegratingWithSDKs.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@main\nstruct Main {\n  static func main() {\n    let led = UInt32(PICO_DEFAULT_LED_PIN)\n    gpio_init(led)\n    gpio_set_dir(led, /*out*/true)\n    while true {\n      gpio_put(led, true)\n      sleep_ms(250)\n      gpio_put(led, false)\n      sleep_ms(250)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating ABI Breakage with Struct Implementation Change in Swift\nDESCRIPTION: This Swift snippet shows a potential modification to the `Point2D` struct, changing its internal representation from Cartesian coordinates (`x`, `y`) to polar coordinates (`r`, `theta`). This change would break the ABI for clients who inlined the previous `distance(to:)` method (shown in the prior snippet), as that method relied on the existence of `x` and `y` properties, demonstrating the need for restrictions on `@inlinable` functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\npublic struct Point2D {\n  var r, theta: Double\n  public init(x: Double, y: Double) { /*...*/ }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Demonstrating is_unique Reference Counting Safeguards in SIL\nDESCRIPTION: This snippet provides a sequence of SIL instructions that demonstrates how retains and releases interact with a call to _swift_isUniquelyReferenced, which is the runtime interface for uniqueness checking used in Swift's copy-on-write optimizations. The example highlights that, for correctness, the ARC optimizer must not remove the apparently redundant retains/releases clustered around is_unique, since the function may mutate or release the reference. It is essential for understanding safety constraints imposed on LLVM ARC optimization. The input is X (the reference), and the output is preservation of reference safety across runtime uniqueness checking.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_6\n\nLANGUAGE: SIL\nCODE:\n```\nretain X\\nretain X\\n_swift_isUniquelyReferenced(X)\\nrelease X\\nrelease X\\n\n```\n\n----------------------------------------\n\nTITLE: Print Debugging with LLVM Streams in C++\nDESCRIPTION: Demonstrates how to use LLVM streams and dump methods to print debug information for complex types like std::vector<CanType>. This technique allows for custom formatting of debug output.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_36\n\nLANGUAGE: cpp\nCODE:\n```\nauto &e = llvm::errs();\ne << \"canTypes = [\";\nllvm::interleaveComma(canTypes, e, [&](auto ty) { ty.dump(e); });\ne << \"]\\n\";\n```\n\n----------------------------------------\n\nTITLE: Defining the CollectionType Protocol in Swift\nDESCRIPTION: Defines the `CollectionType` protocol, which represents stable sequences with addressable positions. It refines `SequenceType` and adds requirements for an associated `Index` type (conforming to `ForwardIndexType`), `startIndex` and `endIndex` properties, and subscript access `subscript(i: Index)` for retrieving elements by index.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nprotocol CollectionType : SequenceType {\n  typealias Index : ForwardIndexType             // a position\n  subscript(i: Index) -> Iterator.Element {get}\n\n  var startIndex: Index {get}\n  var endIndex: Index {get}\n}\n```\n\n----------------------------------------\n\nTITLE: Allocating Heap Boxes for Value Types using alloc_box in SIL\nDESCRIPTION: The `alloc_box` instruction allocates a reference-counted `@box` on the heap to hold a value of type `T`. It returns the box reference ($@box T), initialized with a retain count of 1 but uninitialized storage. The `project_box` instruction accesses the value's address. Releasing the box destroys the contained value (if initialized); `dealloc_box` must be used for uninitialized boxes. The `[moveable_value_debuginfo]` option affects debug info generation for non-copyable or movable types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_5\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'alloc_box' alloc-box-option* sil-type (',' debug-var-attr)*\nalloc-box-option ::= moveable_value_debuginfo\n\n%1 = alloc_box $T\n//   %1 has type $@box T\n```\n\n----------------------------------------\n\nTITLE: Swift Inout Parameters in C++\nDESCRIPTION: Demonstrates how Swift inout parameters are mapped to C++ reference types and how to use them.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'MyModule'\nfunc swapTwoInts(_ a: inout Int, _ b: inout Int)\n```\n\nLANGUAGE: c++\nCODE:\n```\n// C++ interface snippet\nvoid swapTwoInts(swift::Int &a, swift::Int &b) noexcept;\n\n// C++\n#include \"MyModule-Swift.h\"\n\nvoid testSwap() {\n  swift::Int x = 0, y = 42;\n  MyModule::swapTwoInts(x, y);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Throwing Functions in Swift\nDESCRIPTION: Demonstrates how to declare functions that can throw errors using the 'throws' keyword. It shows the syntax for both regular and curried functions, and explains how 'throws' affects the function's type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo() -> Int {          // This function is not permitted to throw.\nfunc bar() throws -> Int {   // This function is permitted to throw.\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc baz() throws {\n\n// Takes a 'callback' function that can throw.\n// 'fred' itself can also throw.\nfunc fred(_ callback: (UInt8) throws -> ()) throws {\n\n// These are distinct types.\nlet a : () -> () -> ()\nlet b : () throws -> () -> ()\nlet c : () -> () throws -> ()\nlet d : () throws -> () throws -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc jerry(_ i: Int)(j: Int) throws -> Int {\n```\n\n----------------------------------------\n\nTITLE: Multi-Layer Perceptron Implementation in Swift\nDESCRIPTION: A feed-forward neural network implementation using TensorFlow, consisting of three dense layers with relu and softmax activations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_62\n\nLANGUAGE: swift\nCODE:\n```\nimport TensorFlow\n\nstruct MultiLayerPerception: Layer, @memberwise Differentiable {\n    var dense1 = Dense<Float>(inputSize: 784, outputSize: 100, activation: relu)\n    var dense2 = Dense<Float>(inputSize: 100, outputSize: 30, activation: relu)\n    var dense3 = Dense<Float>(inputSize: 30, outputSize: 10, activation: softmax)\n\n    @differentiable\n    func callAsFunction(_ input: Tensor<Float>) -> Tensor<Float> {\n        dense3(dense2(dense1(input)))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Public Members in Swift\nDESCRIPTION: This snippet demonstrates how to mark members that might be considered 'protected' in other languages as public in Swift. It emphasizes that while these members are publicly accessible, they can be documented as intended for overriding rather than general use.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControl.md#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\npublic func methodIntendedForOverriding() {\n    // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining global_addr Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for global_addr which creates a reference to the address of an initialized global variable, optionally specifying a dependency on initialization via a token.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_85\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'global_addr' sil-global-name ':' sil-type ('depends_on' sil-operand)?\n\n%1 = global_addr @foo : $*Builtin.Word\n%3 = global_addr @globalvar : $*Builtin.Word depends_on %2\n// %2 has type $Builtin.SILToken\n```\n\n----------------------------------------\n\nTITLE: Using Try Expression for Error Handling in Swift\nDESCRIPTION: Demonstrates various ways to use the try keyword for marked propagation in Swift, including statement-level and expression-level error handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nif try stream.readBool() {\n\n    let x = try stream.readInt() + stream.readInt()\n\n    var y = stream.readFloat()\n\n    try y += stream.readFloat()\n}\n```\n\n----------------------------------------\n\nTITLE: Template for a Swift Benchmark Test File - Swift\nDESCRIPTION: Provides a template for implementing a single-file Swift benchmark, featuring import statements, the definition of benchmark metadata, and a sample run function. Dependencies include TestsUtils and the BenchmarkInfo/type system provided by the benchmarking infrastructure. The template guides developers on where to place user code, how to verify work completion, and how to structure the benchmark function for performance measurement. Customization is needed for test-specific setup, work, and result validation logic. The benchmark is structured to support automatic calibration by the benchmark driver.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\n// YourTestName benchmark\n//\n// rdar://problem/00000000\nimport TestsUtils\n\npublic let benchmarks = [\n  BenchmarkInfo(\n    name: \"YourTestName\",\n    runFunction: run_YourTestName,\n    tags: [.regression])\n]\n\n@inline(never)\npublic func run_YourTestName(n: Int) {\n    # Declare variables\n\n    for i in 1...n {\n        # Perform work\n\n        # Verify work was done; break otherwise\n    }\n\n    # Assert with CheckResults that work was done\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Subobject Clobbering with Swift Point Coordinates\nDESCRIPTION: This code snippet demonstrates the subobject clobbering problem in Swift when swapping coordinates of a point. It shows how using full-value accesses can lead to lost changes when accessing overlapping entities.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nswap(&point.x, &point.y)\n```\n\n----------------------------------------\n\nTITLE: Class Hierarchy with VTable Implementations Example\nDESCRIPTION: Example showing how class method dispatch is represented in SIL using vtables for a simple inheritance hierarchy. The example demonstrates how methods are overridden and how vtables reference the least-derived visible method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_35\n\nLANGUAGE: sil\nCODE:\n```\nclass A {\n  func foo()\n  func bar()\n  func bas()\n}\n\nsil @A_foo : $@convention(thin) (@owned A) -> ()\nsil @A_bar : $@convention(thin) (@owned A) -> ()\nsil @A_bas : $@convention(thin) (@owned A) -> ()\n\nsil_vtable A {\n  #A.foo: @A_foo\n  #A.bar: @A_bar\n  #A.bas: @A_bas\n}\n\nclass B : A {\n  func bar()\n}\n\nsil @B_bar : $@convention(thin) (@owned B) -> ()\n\nsil_vtable B {\n  #A.foo: @A_foo\n  #A.bar: @B_bar\n  #A.bas: @A_bas\n}\n\nclass C : B {\n  func bas()\n}\n\nsil @C_bas : $@convention(thin) (@owned C) -> ()\n\nsil_vtable C {\n  #A.foo: @A_foo\n  #A.bar: @B_bar\n  #A.bas: @C_bas\n}\n```\n\n----------------------------------------\n\nTITLE: Using C++ Classes with Precise Destruction Requirements in Swift\nDESCRIPTION: Shows how to use annotated C++ classes in Swift to maintain precise destruction semantics for RAII types, with examples of concrete and generic usage patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_24\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\n[[swift::requires_precise_destruction]]\nclass PickyCxxClass {\npublic:\n  ~PickyClass() { ... }\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct PickyCxxClass {\n  // The destructor is not imported as a declaration into Swift, however,\n  // it is mapped to a value witness function, and it is called when the\n  // lifetime of the object ends, like in C++.\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc testConcreteType() {\n  var c = PickyCxxClass()\n  print(\"Hello\")\n  // `c` will be deallocated here.\n}\n\nfunc testTypeParameter<T>(_ t: T.self) {\n  var c = T()\n  // `c` can be deallocated here, even if `c` is a `PickyCxxClass`.\n  print(\"Hello\")\n  // `c` can also be deallocated here.\n}\n\ntestTypeParameter(PickyCxxClass.self)\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Different String Segmentations in Swift\nDESCRIPTION: Shows how Swift strings support different segmentation strategies for various purposes like display, collation, and search. Each segmentation provides a different view of the string's characters based on Unicode rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfor c in s { print(\"Extended Grapheme Cluster: \\(c)\") }\nExtended Grapheme Cluster: f\nExtended Grapheme Cluster: o\nExtended Grapheme Cluster: o\nfor c in s.collationCharacters {\n      print(\"Collation Grapheme Cluster: \\(c)\")\n    }\nCollation Grapheme Cluster: f\nCollation Grapheme Cluster: o\nCollation Grapheme Cluster: o\nfor c in s.searchCharacters {\n      print(\"Search Grapheme Cluster: \\(c)\")\n    }\nSearch Grapheme Cluster: f\nSearch Grapheme Cluster: o\nSearch Grapheme Cluster: o\n```\n\n----------------------------------------\n\nTITLE: Case-Insensitive String Comparison in Swift\nDESCRIPTION: Demonstrates a potential implementation of case-insensitive string comparison in Swift, combining toLower() with default comparison.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\n{ $0.toLower() == $1.toLower() }\n```\n\n----------------------------------------\n\nTITLE: Swift Function Overloading with Expose Attribute\nDESCRIPTION: Shows how to handle Swift function overloading in C++ using the @expose attribute to provide different C++ names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@expose(C++, greetPersonIn)\nfunc greet(person: String, in city: String) {\n  print(\"Hello \\(person)! Welcome to \\(city)!\")\n}\n\n@expose(C++, greetPersonFrom)\nfunc greet(person: String, from hometown: String) {\n  print(\"Hello \\(person)!  Glad you could visit from \\(hometown).\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Struct with a Static Method\nDESCRIPTION: This Swift snippet defines a struct including a static method that returns a Rectangle. Static methods in Swift can be accessed from C++ as static member functions. Demonstrates pattern for providing type-level operations or factories from Swift to C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'Geometry'\nstruct Rectangle {\n  var left, right: Point\n\n  static func computeDeviceScreenSize() -> Rectangle {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Stored Variable with Type Inference in Swift\nDESCRIPTION: This snippet shows how Swift can infer the type of a stored variable (`count` inferred as `Int`) when an initial value (10) is provided, allowing the explicit type annotation to be omitted.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar count = 10\n```\n\n----------------------------------------\n\nTITLE: Defining Central Namespace Enum in Synthetic Swift Module\nDESCRIPTION: Proposes an improvement to Option 1: defining the 'widgets' enum in a separate, synthesized Swift module named 'CppNamespaces'. This centralizes the namespace structure, avoiding duplicate enum definitions in modules importing C++ code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module `CppNamespaces` synthesized by the C++ importer.\n\nenum widgets {}\n```\n\n----------------------------------------\n\nTITLE: Example of Compiler-Synthesized Differentiable Conformance in Swift\nDESCRIPTION: Example of a struct that uses the @memberwise attribute to automatically synthesize Differentiable conformance. The compiler generates the required methods and properties based on differentiable stored properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nstruct Model: @memberwise Differentiable {\n    var weight: SIMD4<Double>\n    var bias: Double\n    let metadata1: Float\n    let metadata2: Float\n    let usesBias: Bool\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating private(set) and internal(set) Accessor Syntax in Swift\nDESCRIPTION: Shows how to restrict a property's setter to a more restrictive access level than its getter, using private(set) or internal(set) modifiers before the var keyword.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControl.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nprivate(set) var\ninternal(set) var\n```\n\n----------------------------------------\n\nTITLE: Using `willSet` Observer with Implicit Parameter for Pre-Assignment Actions in Swift\nDESCRIPTION: This snippet demonstrates a stored variable `accountName` with a `willSet` observing accessor. The code within `willSet` uses the implicit parameter name `value` to access the incoming new value and perform validation (asserting it's not \"root\") before the assignment occurs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nvar accountName : String {\n  willSet {\n    assert(value != \"root\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Differentiable Function in Swift (Swift)\nDESCRIPTION: This Swift code snippet demonstrates how to declare a function as differentiable using the @differentiable attribute, where the function uses standard library calls (sin, cos) and prints the result. The intended use is for teaching activity analysis, showing which values depend on input, contribute to output, and require differentiation, with the function taking a Float and returning a Float. The key parameter is x, and the output is the evaluated and printed result. Requires Swift with differentiable programming feature enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable\nfunc f(_ x: Float) -> Float {\n    let result = sin(x) * cos(3)\n    print(result)\n    return result\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Private Extension in Swift\nDESCRIPTION: Example of setting an explicit access modifier on an extension to change the default access level of members within that extension. Members cannot have broader access than this new default.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControl.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprivate extension\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct with Multiple Initializers in Swift\nDESCRIPTION: This snippet declares a Swift struct with two initializers: one taking three labeled Float arguments and another taking a single labeled Float. The struct properties are set accordingly in each initializer. Demonstrates Swift syntax for initializer labels and property assignment. No external dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstruct Color {\n  let red, green, blue: Float\n  \n  public init(red: Float, green: Float, blue: Float) {\n    self.red = red\n    self.green = green\n    self.blue = blue\n  }\n  public init(white: Float) {\n    self.red = white\n    self.green = white\n    self.blue = white\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generalized Existentials in Swift\nDESCRIPTION: This example shows the potential use of generalized existentials in Swift, allowing the use of protocols with Self constraints or associated types as types, and constraining associated types of an existential.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_37\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol IteratorProtocol {\n  associatedtype Element\n  mutating func next() -> Element?\n}\n\nlet it: IteratorProtocol = ...\nit.next()   // if this is permitted, it could return an \"Any?\", i.e., the existential that wraps the actual element\n\nlet strings: Any<Sequence where .Iterator.Element == String> = [\"a\", \"b\", \"c\"]\n\ntypealias AnySequence<Element> = Any<Sequence where .Iterator.Element == Element>\nlet strings: AnySequence<String> = [\"a\", \"b\", \"c\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Resilient Inlinable Switch for Non-Frozen Enums in Swift\nDESCRIPTION: This code snippet demonstrates the Curiously Recursive Inlinable Switch Pattern (CRISP) used in the Swift standard library to handle non-frozen enums in inlinable code while maintaining ABI compatibility. It shows the implementation of the round(_:) function for FloatingPointRoundingRule.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n@_transparent\npublic mutating func round(_ rule: FloatingPointRoundingRule) {\n  switch rule {\n  case .toNearestOrAwayFromZero:\n    _value = Builtin.int_round_FPIEEE${bits}(_value)\n  case .toNearestOrEven:\n    _value = Builtin.int_rint_FPIEEE${bits}(_value)\n  // ...\n  @unknown default:\n    self._roundSlowPath(rule)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Throwing Errors with the throw Statement (Swift)\nDESCRIPTION: Showcases direct usage of the `throw` statement to raise errors in Swift, including custom error enums and NSError. This snippet assumes the presence of a defined error type and demonstrates how to programmatically interrupt control flow with an error. Key parameters are the thrown error instances (must conform to Error), and limitations include that this may only be performed inside functions marked with `throws`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nif timeElapsed > timeThreshold {\n    throw HomeworkError.Overworked\n}\n\nthrow NSError(domain: \"whatever\", code: 42, userInfo: nil)\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Enum in Swift\nDESCRIPTION: A simple enum declaration for a Color type with multiple cases. This demonstrates the basic syntax for creating symbolic enums similar to C enums.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nenum Color {\n  case Red, Green, Blue, Black, White\n}\n\nvar c : Color = .Red\nswitch c {\ncase .Red:\n  ...\ncase .Green:\n  ...\ncase .Blue:\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Standard Library Differential Operators in Swift\nDESCRIPTION: Demonstrates the usage of standard library differential operators, specifically `derivative(of:)`. It takes a `@differentiable` function `f` and returns its derivative function `dfdx`. Calling `dfdx(3)` computes the derivative of `f` at `x=3`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// In the standard library:\n//\n//     func derivative<T: FloatingPoint, R>(\n//         of body: @escaping @differentiable (T) -> R\n//     ) -> (T) -> R where T.TangentVector: FloatingPoint\n\n@differentiable\nfunc f(_ x: Float) -> Float {\n    x * x\n}\nlet dfdx = derivative(of: f)\ndfdx(3) // 6\n```\n\n----------------------------------------\n\nTITLE: String Replacement and Manipulation\nDESCRIPTION: Methods for replacing substrings, handling character ranges, and string folding operations with locale support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_28\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSString *)stringByFoldingWithOptions:(NSStringCompareOptions)options locale:(NSLocale *)locale;\n- (NSString *)stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange;\n```\n\n----------------------------------------\n\nTITLE: Defining the SequenceType Protocol in Swift\nDESCRIPTION: Defines the core `SequenceType` protocol in Swift. It requires conforming types to specify an associated `Iterator` type (which must conform to `IteratorProtocol`) and implement a `makeIterator()` method that returns an instance of this iterator, enabling element traversal.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprotocol SequenceType {\n  typealias Iterator : IteratorProtocol\n  func makeIterator() -> Iterator\n}\n```\n\n----------------------------------------\n\nTITLE: Adding String Collection Conformance in Swift\nDESCRIPTION: A trivial extension that some developers use to make String conform to BidirectionalCollection without implementing any additional functionality, demonstrating how users work around the missing conformance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nextension String : BidirectionalCollection {}\n```\n\n----------------------------------------\n\nTITLE: VJP Function Type Signature in Swift\nDESCRIPTION: Shows the type signature format for a vector-Jacobian product (VJP) function, demonstrating how it returns both the original result and a pullback function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n//  (T0, ...)      ->  (U,    (U.TangentVector)   -> (T0.TangentVector, ...))\n//   ^                  ^      ^~~~~~~~~~~~~~~        ^~~~~~~~~~~~~~~~~~~~~\n//  original args   result     derivative wrt result    derivative wrt args\n```\n\n----------------------------------------\n\nTITLE: Using Unmanaged<T> for Manual Reference Counting in Swift\nDESCRIPTION: Demonstrates how to use Unmanaged<T> to disable automatic reference counting for a specific reference. It shows the proper usage within a withExtendedLifetime block to ensure the referenced object stays alive.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nwithExtendedLifetime(Head) {\n\n  // Create an Unmanaged reference.\n  var Ref: Unmanaged<Node> = Unmanaged.passUnretained(Head)\n\n  // Use the unmanaged reference in a call/variable access. The use of\n  // _withUnsafeGuaranteedRef allows the compiler to remove the ultimate\n  // retain/release across the call/access.\n\n  while let Next = Ref._withUnsafeGuaranteedRef { $0.next } {\n    ...\n    Ref = Unmanaged.passUnretained(Next)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Help Flags for Clang/Swiftc (sh)\nDESCRIPTION: Shows shell commands to access frontend-specific help options for the Clang (`clang -cc1 --help`) and Swift (`swiftc -frontend --help`) compilers. These flags relate to the compiler's internal frontend stages. Requires the respective compilers to be installed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nclang -cc1 --help\n```\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -frontend --help\n```\n\n----------------------------------------\n\nTITLE: Proposed Swift Option Set Pattern Using Struct of Bools\nDESCRIPTION: The proposed Swift representation of option sets as structs of Boolean fields, which better aligns with Swift's type system philosophy.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nstruct NSStringCompareOptions {\n  var CaseInsensitiveSearch,\n      LiteralSearch,\n      BackwardsSearch,\n      AnchoredSearch,\n      NumericSearch,\n      DiacriticInsensitiveSearch,\n      WidthInsensitiveSearch,\n      ForcedOrderingSearch,\n      RegularExpressionSearch : Bool = false\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Protocol Conformance Error with Actor Isolation in Swift\nDESCRIPTION: This example shows an error scenario where a @MainActor struct conforms to a protocol with a method that becomes actor-isolated, which can cause data races.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/conformance-isolation.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {\n  func f()\n}\n\n@MainActor\nstruct MyData: P {\n  func f() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C Function Pointers in Swift\nDESCRIPTION: Example showing how C function pointers are imported into Swift, particularly focusing on the qsort function. Swift uses @convention(c) closures to maintain memory layout compatibility with C function pointers, and handles nullability through optionals.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\nvoid qsort(\n  void *base,\n  size_t nmemb,\n  size_t size,\n  int (*compar)(const void *, const void *));\n\nvoid qsort_annotated(\n  void * _Nonnull base,\n  size_t nmemb,\n  size_t size,\n  int (* _Nonnull compar)(const void * _Nonnull, const void * _Nonnull));\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nfunc qsort(\n  _ base: UnsafeMutableRawPointer!,\n  _ nmemb: Int,\n  _ size: Int,\n  _ compar: (@convention(c) (UnsafeRawPointer?, UnsafeRawPointer?) -> CInt)!\n)\n\nfunc qsort_annotated(\n  _ base: UnsafeMutableRawPointer,\n  _ nmemb: Int,\n  _ size: Int,\n  _ compar: @convention(c) (UnsafeRawPointer, UnsafeRawPointer) -> CInt\n)\n```\n\n----------------------------------------\n\nTITLE: SIL Struct Forwarding and Ownership Consistency Example (Swift SIL)\nDESCRIPTION: This snippet explores ownership forwarding in struct construction instructions—it shows valid and invalid cases where struct instructions forward owned or guaranteed values, requiring all ownerships to be compatible. Incompatible mixing of owned and guaranteed values in a single struct is flagged as an error by the SIL verifier.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n      bb1(%1 : @owned $A, %2 : @guaranteed $A, %3 : $Int):\n        %4 = struct $S1 (%1, %3)   // owned\n        %5 = struct $S1 (%2, %3)   // guaranteed\n        %6 = struct $S2 (%1, %2)   // ERROR!\n\n```\n\n----------------------------------------\n\nTITLE: Comparing Unicode-Equivalent Strings in Swift\nDESCRIPTION: Demonstrates Swift's Unicode awareness through canonical equivalence. It initializes two `String` variables, `n1` and `n2`, both representing the character \"ñ\". `n1` uses the decomposed form (U+006E followed by U+0303), while `n2` uses the precomposed form (U+00F1). The comparison `n1 == n2` evaluates to `true`, showing that Swift treats canonically equivalent strings as equal.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n|swift| var n1 = \":look1:`\\\\u006E\\\\u0303`\\ :aside:`Multiple code points, but only one Character`\"\n`// n1 : String =` **\"ñ\"**\n|swift| var n2 = \"\\\\u00F1\"\n`// n2 : String =` **\"ñ\"**\n|swift| n1 == n2\n`// r0 : Bool =` **true**\n```\n\n----------------------------------------\n\nTITLE: Unmanaged Retaining with unmanaged_retain_value in SIL\nDESCRIPTION: Has the same local semantics as retain_value but is valid in ownership qualified SIL and is not intended to be statically paired at compile time. Used to implement unmanaged constructs. Not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_110\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'unmanaged_retain_value' sil-value\n\nunmanaged_retain_value %0 : $A\n```\n\n----------------------------------------\n\nTITLE: Defining the OptionSet Protocol in Swift\nDESCRIPTION: The proposed OptionSet protocol that encapsulates bitwise operations for option sets, providing intersection, union, negation, and set checking operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nprotocol OptionSet : Equatable {\n  // Set intersection\n  @infix func &(_:Self, _:Self) -> Self\n  @infix func &=(_: inout Self, _:Self)\n\n  // Set union\n  @infix func |(_:Self, _:Self) -> Self\n  @infix func |=(_: inout Self, _:Self)\n\n  // Set xor\n  @infix func ^(_:Self, _:Self) -> Self\n  @infix func ^=(_: inout Self, _:Self)\n\n  // Set negation\n  @prefix func ~(_:Self) -> Self\n\n  // Are any options set?\n  func any() -> Bool\n\n  // Are all options set?\n  func all() -> Bool\n\n  // Are no options set?\n  func none() -> Bool\n}\n```\n\n----------------------------------------\n\nTITLE: Building Swift Standard Library for WebAssembly using Pre-built Compiler (Console)\nDESCRIPTION: This console command builds only the Swift standard library for WebAssembly, skipping the time-consuming build steps for LLVM, Swift compiler, and CMark. It requires specifying the path to a pre-built Swift development snapshot toolchain via the `SWIFT_TOOLS_PATH` environment variable and passes native tool paths to the `build-script`. This is useful for faster iteration when only the standard library needs rebuilding.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WebAssembly.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ SWIFT_TOOLS_PATH=path/to/swift-development-snapshot/usr/bin\n$ ./utils/build-script \\\n    --skip-build-llvm \\\n    --skip-build-swift \\\n    --skip-build-cmark \\\n    --build-wasm-stdlib \\\n    --native-swift-tools-path=\"$SWIFT_TOOLS_PATH\" \\\n    --native-clang-tools-path=\"$SWIFT_TOOLS_PATH\" \\\n    --native-llvm-tools-path=\"$SWIFT_TOOLS_PATH\"\n```\n\n----------------------------------------\n\nTITLE: Optimized Recursive Character Search in Strings with Swift\nDESCRIPTION: Shows an optimized version of the recursive character search algorithm that avoids inefficient string slicing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nextension String {\n  // add optional argument tracking progress through the string\n  func containsCharacter(_ x: Character, atOrAfter idx: Index? = nil) -> Bool {\n    let idx = idx ?? startIndex\n    return idx != endIndex\n      && (self[idx] == x || containsCharacter(x, atOrAfter: index(after: idx)))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Failing Swift Array Cast Due to Element Type Mismatch\nDESCRIPTION: Provides a specific example where casting an `Array<Any>` to `Array<Int>` using the conditional cast operator `as?` fails. The failure occurs because not all elements within the source array can be successfully cast to the target element type (`Int`); specifically, the `\"string\"` element cannot be cast to `Int`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nlet a: Array<Any> = [Int(7), \"string\"]\na as? Array<Int> // Fails because \"string\" cannot be cast to `Int`\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Comparable Function in Swift\nDESCRIPTION: This snippet demonstrates how to define a generic 'min' function in Swift that works with any type conforming to the Comparable protocol. The function compares two values of the same type and returns the smaller one.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc min<T : Comparable>(x: T, y: T) -> T {\n  if y < x { return y }\n  return x\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring throwing and non-throwing functions in Swift\nDESCRIPTION: Demonstrates the proposed syntax for declaring functions that can throw errors and those that cannot, using the 'throws' keyword.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// This function is not permitted to throw.\nfunc foo() -> Int {\n    // Therefore this is a semantic error.\n    return try stream.readInt()\n}\n\n// This function is permitted to throw.\nfunc bar() throws -> Int {\n    return try stream.readInt()\n}\n\n// 'throws' is written before the arrow to give a sensible and\n// consistent grammar for function types and implicit () result types.\nfunc baz() throws {\n    if let byte = try stream.getOOB() where byte == PROTO_RESET {\n        reset()\n    }\n}\n\n// 'throws' appears in a consistent position in function types.\nfunc fred(_ callback: (UInt8) throws -> ()) throws {\n    while true {\n        let code = try stream.readByte()\n        if code == OPER_CLOSE { return }\n        try callback(code)\n    }\n}\n\n// It only applies to the innermost function for curried functions;\n// this function has type:\n//   (Int) -> (Int) throws -> Int\nfunc jerry(_ i: Int)(j: Int) throws -> Int {\n    // It's not an error to use 'throws' on a function that can't throw.\n    return i + j\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Differentiable Protocol Requirements in Swift\nDESCRIPTION: Demonstrates how to use the @differentiable attribute on protocol requirements and implement them in conforming types. The example shows a Layer protocol with a differentiable callAsFunction method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_27\n\nLANGUAGE: Swift\nCODE:\n```\npublic protocol Layer: Differentiable {\n    associatedtype Input: Differentiable\n    associatedtype Output: Differentiable\n    @differentiable // w.r.t. `input` and `self`\n    func callAsFunction(_: Input) -> Output\n}\nstruct Perceptron: @memberwise Differentiable, Layer {\n    var weight: SIMD4<Float>\n    var bias: Float\n\n    func callAsFunction(_ input: SIMD4<Float>) -> Float {\n        (weight * input).sum() + b\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining existential_metatype Instruction in SIL\nDESCRIPTION: Defines the 'existential_metatype' instruction which obtains the metatype of the concrete value inside an existential container. Takes a protocol value or address and returns its concrete type's metatype.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_106\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'existential_metatype' sil-type ',' sil-operand\n\n%1 = existential_metatype $P.Type, %0 : $P\n// %0 must be a value of class protocol or protocol composition\n//   type $P, or an address of address-only protocol type $*P\n// %1 will be a $P.Type value referencing the metatype of the\n//   concrete value inside %0\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Error Enum Conforming to Error (Swift)\nDESCRIPTION: Illustrates how to create a custom error type as an enum conforming to the `Error` protocol in Swift. This pattern is Swift's idiomatic way of grouping related error cases, optionally parameterized by associated values. Dependencies include the definition of any involved types (e.g., Cat) and adherence to the Error protocol; outputs are error cases usable in throw statements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nenum HomeworkError : Error {\n    case Overworked\n    case Impossible\n    case EatenByCat(Cat)\n    case StopStressingMeWithYourRules\n}\n\n```\n\n----------------------------------------\n\nTITLE: Catching errors in Swift using do-catch\nDESCRIPTION: Shows the proposed do-catch syntax for handling errors in Swift, including a specific catch clause and a catch-all clause.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\ndo {\n    // ...\n} catch HomeworkError.Overworked {\n    // a conditionally-executed catch clause\n\n} catch _ {\n    // a catch-all clause\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Copy-on-Write Mutation in SIL\nDESCRIPTION: Illustrates a typical Copy-on-Write (COW) mutation sequence in SIL, including uniqueness check, conditional copying, and mutation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_46\n\nLANGUAGE: sil\nCODE:\n```\n  (%uniq, %buffer) = begin_cow_mutation %immutable_buffer : $BufferClass\n  cond_br %uniq, bb_uniq, bb_not_unique\nbb_uniq:\n  br bb_mutate(%buffer : $BufferClass)\nbb_not_unique:\n  %copied_buffer = apply %copy_buffer_function(%buffer) : ...\n  br bb_mutate(%copied_buffer : $BufferClass)\nbb_mutate(%mutable_buffer : $BufferClass):\n  %field = ref_element_addr %mutable_buffer : $BufferClass, #BufferClass.Field\n  store %value to %field : $ValueType\n  %new_immutable_buffer = end_cow_mutation %buffer : $BufferClass\n```\n\n----------------------------------------\n\nTITLE: Ending Unpaired Memory Access in Swift Intermediate Language (SIL)\nDESCRIPTION: The end_unpaired_access instruction ends an unpaired memory access. It uses the same scratch buffer as the corresponding begin_unpaired_access and must have identical enforcement level.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_51\n\nLANGUAGE: sil\nCODE:\n```\nend_unpaired_access [dynamic] %0 : $*Builtin.UnsafeValueBuffer\n```\n\n----------------------------------------\n\nTITLE: Training Neural Network with Swift Differentiation\nDESCRIPTION: Example showing how to train a deep learning model using Swift's automatic differentiation. The code demonstrates computing gradients and updating model parameters using an optimizer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_56\n\nLANGUAGE: swift\nCODE:\n```\nfor _ in 0..<1000 {\n    let 𝛁model = gradient(at: classifier) { classifier -> Tensor<Float> in\n        let ŷ = classifier(x)\n        let loss = softmaxCrossEntropy(logits: ŷ, labels: y)\n        print(\"Loss: \\(loss)\")\n        return loss\n    }\n    optimizer.update(&classifier, along: 𝛁model)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining partial_apply Instruction in SIL\nDESCRIPTION: Specifies the syntax and format for the 'partial_apply' instruction which creates closures by partially applying functions to arguments. The instruction includes options for callee guarantees, isolation, and stack allocation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_100\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'partial_apply' partial-apply-attr* sil-value\n                      sil-apply-substitution-list?\n                      '(' (sil-value (',' sil-value)*)? ')'\n                      ':' sil-type\npartial-apply-attr ::= '[callee_guaranteed]'\npartial-apply-attr ::= '[isolated_any]'\npartial-apply-attr ::= '[on_stack]'\n\n%c = partial_apply %0(%1, %2, ...) : $(Z..., A, B, ...) -> R\n// Note that the type of the callee '%0' is specified *after* the arguments\n// %0 must be of a concrete function type $(Z..., A, B, ...) -> R\n// %1, %2, etc. must be of the argument types $A, $B, etc.,\n//   of the tail part of the argument tuple of %0\n// %c will be of the partially-applied thick function type (Z...) -> R\n\n%c = partial_apply %0<A, B>(%1, %2, ...) : $(Z..., T, U, ...) -> R\n// %0 must be of a polymorphic function type $<T, U>(T, U, ...) -> R\n// %1, %2, etc. must be of the argument types after substitution $A, $B, etc.\n//   of the tail part of the argument tuple of %0\n// %r will be of the substituted thick function type $(Z'...) -> R'\n```\n\n----------------------------------------\n\nTITLE: Potential Future Access Control in Swift\nDESCRIPTION: This snippet illustrates potential future directions for access control in Swift, including limiting capabilities with modifiers like 'final(public)' to restrict subclassing or overriding outside the current module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControl.md#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nfinal(public) class RestrictedClass {\n    // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Derivative Function for expf in Swift\nDESCRIPTION: Example showing how to create a derivative function for the C standard library's expf function. The derivative function computes both the original exponential value and its differential.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_38\n\nLANGUAGE: swift\nCODE:\n```\nimport Glibc\n\n@derivative(of: expf)\nfunc _(_ x: Float) -> (value: Float,\n                       differential: @differentiable(linear) (Float) -> Float) {\n    let y = expf(x)\n    return (value: y, differential: { v in v * y })\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Forward-Mode AD with an Embedded Swift DSL\nDESCRIPTION: This Swift code demonstrates a basic implementation of forward-mode automatic differentiation using an embedded domain-specific language (DSL). It defines a generic struct `RealWithDerivative` that holds both a value and its derivative, constrained to `FloatingPoint` types. Operator overloading for `+` and `*` is used to compute the results and propagate derivatives according to the sum and product rules, respectively. The example initializes a variable `x` with a value and an initial derivative (dx/dx = 1) and calculates the value and derivative of the expression `x*x + x*x*x`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nstruct RealWithDerivative<T: FloatingPoint> {\n    var value: T\n    var derivative: T = 0\n}\nextension RealWithDerivative {\n    static func + (lhs: Self, rhs: Self) -> Self {\n        RealWithDerivative(\n            value: lhs.value + rhs.value,\n            derivative: lhs.derivative + rhs.derivative)\n    }\n    static func * (lhs: Self, rhs: Self) -> Self {\n        RealWithDerivative(\n            value: lhs.value * rhs.value,\n            derivative: lhs.derivative * rhs.value + lhs.value * rhs.derivative)\n    }\n}\n\nvar x = RealWithDerivative(value: 3, derivative: 1)\n// Original:   x^2 + x^3 = 3^2 + 3^3 = 36.\n// Derivative: 2x + 3x^2 = 2*3 + 3(3)^2 = 33.\nvar result = x*x + x*x*x\nprint(result)\n// RealWithDerivative<Double>(value: 36.0, derivative: 33.0)\n```\n\n----------------------------------------\n\nTITLE: Using @frozen Attribute with Swift Structs for ABI Stability\nDESCRIPTION: Applying the `@frozen` attribute to an ABI-public struct restricts future changes to guarantee layout and prevent adding/removing/reordering stored instance properties, ensuring binary compatibility. It also forbids changing stored properties to computed (or vice versa), adding/removing `lazy`, adding observing accessors, or adding/changing/removing property wrappers. Static members of `@frozen` structs are not subject to these restrictions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@frozen\n```\n\n----------------------------------------\n\nTITLE: Parallel Matrix Multiplication Using Async in Swift\nDESCRIPTION: This snippet implements a parallel matrix multiplication algorithm using async and futures in Swift. It recursively divides the matrices into smaller blocks for parallel computation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfunc ParallelMatMul(_ a: Matrix, _ b: Matrix) -> Matrix {\n  assert(a.size == b.size, \"size mismatch!\")\n\n  if a.size < 65 { return SerialMatMul(a, b) }\n\n  var product = Matrix(a.size)\n  let half = a.size/2\n  let a11 = a.slice(half, 0,    0)\n  let a12 = a.slice(half, 0,    half)\n  let a21 = a.slice(half, half, 0)\n  let a22 = a.slice(half, half, half)\n  let b11 = b.slice(half, 0,    0)\n  let b12 = b.slice(half, 0,    half)\n  let b21 = b.slice(half, half, 0)\n  let b22 = b.slice(half, half, half)\n\n  let c11_1 = async((a11, b11), callback: ParallelMatMul)\n  let c11_2 = async((a12, b21), callback: ParallelMatMul)\n  let c12_1 = async((a11, b12), callback: ParallelMatMul)\n  let c12_2 = async((a12, b22), callback: ParallelMatMul)\n  let c21_1 = async((a21, b11), callback: ParallelMatMul)\n  let c21_2 = async((a22, b21), callback: ParallelMatMul)\n  let c22_1 = async((a21, b12), callback: ParallelMatMul)\n  let c22_2 = async((a22, b22), callback: ParallelMatMul)\n\n  let c11 = c11_1.await() + c11_2.await()\n  let c12 = c12_1.await() + c12_2.await()\n  let c21 = c21_1.await() + c21_2.await()\n  let c22 = c22_1.await() + c22_2.await()\n\n  product.update(c11, 0,    0)\n  product.update(c12, 0,    half)\n  product.update(c21, half, 0)\n  product.update(c22, half, half)\n  return product\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Structure with Mutable Properties\nDESCRIPTION: Shows how to define a Swift structure with properties that can be mutated, which will be bridged to C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_39\n\nLANGUAGE: swift\nCODE:\n```\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Rectangle {\n  var position: Point\n  var size: Size\n}\n\nfunc updatePosition(shape: inout Rectangle, by value: Double) {\n  shape.position.x += value // mutate `position.x` inside of given shape\n  shape.position.y += value // mutate `position.y` inside of given shape\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating IteratorProtocol Refining SequenceType (Hypothetical) in Swift\nDESCRIPTION: Shows a hypothetical definition where `IteratorProtocol` refines `SequenceType` (indicated by `: SequenceType`). This illustrates the conceptual relationship that every iterator is itself a volatile sequence, although current language limitations prevent enforcing this conformance directly in the protocol definition. Iterators conforming to `SequenceType` would return `self` from `makeIterator()`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nprotocol IteratorProtocol **: SequenceType** {\n  typealias Element\n  mutating func next() -> Element?\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Merge Sort Implementation using Async in Swift\nDESCRIPTION: Demonstrates parallel merge sort implementation using async/await pattern with thread safety guarantees.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfunc mergeSort<T : Comparable>(array: ArraySlice<T>) -> [T] {\n\n  if array.count <= 16  { return Array(array).sorted() }\n\n  let mid = array.count / 2\n  let left  = array[0..<mid]\n  let right = array[mid..<array.count]\n\n  let lf = async(left,  callback: mergeSort)\n  let lr = async(right, callback: mergeSort)\n\n  return merge(lf.await(), lr.await())\n}\n```\n\n----------------------------------------\n\nTITLE: Using Renamed and Overloaded Initializers from C++\nDESCRIPTION: This C++ snippet demonstrates construction of a Swift struct with renamed and overloaded initializers from C++. The 'init' static method is used for one initializer, while the 'initFromFahrenheit' method allows disambiguation. Requires the Weather Swift module bridged and inclusion of the generated header. Both usage patterns for initializers are shown.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Weather-Swift.h\"\nusing namespace Weather;\n\nvoid makeSunnyDay() {\n  auto morningTemperature = Celsius::init(25);\n  auto noonTemperature    = Celsius::initFromFahrenheit(90);\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C++ Class Template as Swift Generic Struct\nDESCRIPTION: This snippet demonstrates how a C++ class template is imported as a Swift generic struct and used with specific type arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_64\n\nLANGUAGE: swift\nCODE:\n```\nstruct ClassTemplate<T> {}\n\nfunc useClassTemplate() {\n  var x = ClassTemplate<Int32>() // OK, uses `ClassTemplate<int>`.\n}\n```\n\n----------------------------------------\n\nTITLE: Enum with Payloads in Swift\nDESCRIPTION: An enum with associated values (payloads) which demonstrates how Swift enums can contain values of different types while maintaining type safety. Pattern matching in switch statements ensures the correct payload type is used.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nenum Pattern {\n  case Solid(Color)\n  case Outline(Color)\n  case Checkers(Color, Color)\n}\n\nvar p : Pattern = .Checkers(.Black, .White)\nswitch p {\ncase .Solid(var c):\n  print(\"solid \\(c)\")\ncase .Outline(var c):\n  print(\"outlined \\(c)\")\ncase .Checkers(var a, var b):\n  print(\"checkered \\(a) and \\(b)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C functions as instance methods\nDESCRIPTION: Demonstrates using the self: parameter label to import C functions as instance methods in Swift. This shows how to create instance methods for structs with different mutability behaviors based on pointer constness.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_21\n\nLANGUAGE: objc\nCODE:\n```\ntypedef struct {\n  int value;\n} Counter;\n\n__attribute__((swift_name(\"Counter.printValue(self:)\")))\nvoid CounterPrintValue(Counter c);\n__attribute__((swift_name(\"Counter.printValue2(self:)\")))\nvoid CounterPrintValue2(const Counter *c);\n__attribute__((swift_name(\"Counter.resetValue(self:)\")))\nvoid CounterResetValue(Counter *c);\n```\n\nLANGUAGE: swift\nCODE:\n```\nstruct Counter {\n  var value: Int32 { get set }\n}\n\nextension Counter {\n  func printValue()\n  func printValue2()\n  mutating func resetValue()\n}\n```\n\n----------------------------------------\n\nTITLE: Building Swift Driver with build-script\nDESCRIPTION: Example of a dry-run build-script invocation showing commands required to build and install the standalone Swift driver. Demonstrates clean, build, and install steps with specific toolchain configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\n$ utils/build-script --release-debuginfo --dry-run --swift-driver --install-swift-driver\n```\n\n----------------------------------------\n\nTITLE: Basic Module Import in Swift\nDESCRIPTION: Demonstrates basic module importing syntax for bringing in complete modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Chess\nimport Foundation\n```\n\n----------------------------------------\n\nTITLE: Parameterized Formatting for CustomStringConvertible Types in Swift\nDESCRIPTION: Illustrates how types with multiple formatting options provide a format(...) method with parameters (such as radix, width, and precision) for customized output. This allows objects like numbers to present their string representations in various numeric bases, widths, or precisions. No extra dependencies are needed, but the type must support the required parameters. Input: the object and formatting parameters. Output: a formatted string. Limitation: Must implement all relevant formatting parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprint(offset)\nprint(offset.format()) // equivalent to previous line\nprint(offset.format(radix: 16, width: 5, precision: 3))\n```\n\n----------------------------------------\n\nTITLE: Defining Custom LLDB Command with Python\nDESCRIPTION: Defines a Python function `custom_step` within the LLDB interactive interpreter. This function uses the LLDB Python API (`lldb.frame`, `lldb.thread`) to print the value of the `rax` register and then perform a single instruction step.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n>>> def custom_step():\n...   print \"rax =\", lldb.frame.FindRegister(\"rax\")\n...   lldb.thread.StepInstruction(True)\n...\n>>> ^D\n```\n\n----------------------------------------\n\nTITLE: Defining the IteratorProtocol in Swift\nDESCRIPTION: Defines Swift's actual `IteratorProtocol`. It requires an associated `Element` type and a single mutating `next()` method. This method returns the next element as an Optional (`Element?`), efficiently combining element retrieval and advancement, returning `nil` only when the sequence is exhausted.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nprotocol IteratorProtocol {\n  typealias Element\n  mutating func next() -> Element?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Struct with a Mutating Method\nDESCRIPTION: This Swift code defines a struct representing a 2D point and includes a mutating method to move the point by given deltas. The 'moveBy' method modifies internal state by adjusting x and y. The struct can be bridged and called from C++. Dependencies: none; represents a typical value-type mutability pattern in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'Geometry'\nstruct Point {\n  var x = 0.0, y = 0.0\n  mutating func moveBy(x deltaX: Double, y deltaY: Double) {\n    x += deltaX\n    y += deltaY\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining readnone Side Effect Functions with @_effects - Swift\nDESCRIPTION: Illustrates the usage of the @_effects(readnone) attribute to annotate a Swift function that behaves as a pure function with no externally observable side effects. The attribute allows the optimizer to treat repeated calls with identical arguments as equivalent, potentially enabling call elimination optimizations. No external dependencies required. Input is an integer index; output is an integer value from a local array. Limitation: Only allowed for functions that do not involve object lifetime changes or global side effects.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@_effects(readnone)\nfunc lookup(_ i: Int) -> Int {\n  let a = [7, 3 ,6, 9]\n  return a[i]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Enum with Switch Statement\nDESCRIPTION: A simple enum with cases and a function that uses a switch statement to handle all cases. This demonstrates the familiar C-like usage of enums with Swift's exhaustive pattern matching.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nenum Foo { case A, B, C, D }\n\nfunc use(_ x:Foo) {\n  switch x {\n  case .A:\n  case .B:\n  case .C:\n  case .D:\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formal Access to Struct and Class Properties using SIL - Swift\nDESCRIPTION: This snippet demonstrates SIL operations for formal accesses to struct and class properties. It shows how an object is allocated, a property base address is obtained, and a formal access scope is defined and utilized via begin_access/end_access. Dependencies include basic SIL instructions such as alloc_ref, ref_element_addr, begin_access, struct_element_addr, load, and end_access. The inputs are object and property types; outputs are loaded values from memory. Intended to illustrate the relationship between storage roots, access bases, and formal memory access markers in SIL, this can be used for exclusivity enforcement and analyses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n  struct S {\n    var field: Int64\n  }\n  class C {\n    var prop: S\n  }\n\n  %root    = alloc_ref $C\n  %base    = ref_element_addr %root : $C, #C.prop\n  %access  = begin_access [read] [static] %base : $*S\n  %address = struct_element_addr %access : $*S, #.field\n  %value   = load [trivial] %address : $*Int64\n  end_access %access : $*S\n```\n\n----------------------------------------\n\nTITLE: Mutating Iteration Example in Swift\nDESCRIPTION: Shows a mutating iteration pattern using the 'inout' keyword, which allows modifications to collection elements in-place. This is a 'mutating' operation on MutableCollection that provides direct access to modify each element.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfor inout employee in company.employees {\n  employee.respected = true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Inheritance with Swift Protocols\nDESCRIPTION: Demonstrates how to use Swift protocols and protocol composition to achieve functionality similar to multiple inheritance. Shows the creation of base protocols, protocol inheritance, default implementations through protocol extensions, and multiple protocol conformance in structs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/multiple-inheritance.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Utensil { \n    var name: String { get }\n} \n\nprotocol ServingUtensil: Utensil {\n    func serve()\n} \n\nextension ServingUtensil {\n    func serve() { /* Default implementation. */ }\n}\n\nprotocol Fork: Utensil {\n    func spear()\n}\n\nprotocol Spoon: Utensil {\n    func scoop()\n}\n\nstruct CarvingFork: ServingUtensil, Fork { /* ... */ }\nstruct Spork: Spoon, Fork { /* ... */ }\nstruct Ladle: ServingUtensil, Spoon { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Storing Weak References with store_weak in SIL\nDESCRIPTION: Initializes or reassigns a weak reference. Decrements the weak reference count of the original value and increments the weak reference count of the new value if non-nil. Requires [init] for uninitialized references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_62\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'store_weak' sil-value 'to' '[init]'? sil-operand\n\nstore_weak %0 to [init] %1 : $*@sil_weak Optional<T>\n// $T must be an optional wrapping a reference type\n```\n\n----------------------------------------\n\nTITLE: Defining a Read-Only Computed Property in Swift\nDESCRIPTION: This snippet defines `area` as a read-only computed property within the `Rect` struct. It only provides a getter to calculate the area using `self.width` and `self.height`. The `get` keyword is omitted as shorthand syntax for read-only properties. Attempting to set `area` results in a compile-time error.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n  var area : Int {\n    return self.width * self.height\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift inout Parameter Usage\nDESCRIPTION: Shows how to use Swift's inout parameters for modifying values, demonstrating the safer approach with strict access control and initialization guarantees.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc increment(_ value: inout Int) {\n  value += 1\n}\n\nstruct TwoInts {\n  var x: Int = 0\n  var y: Int = 0\n}\n\nfunc caller() {\n  var ints = TwoInts()\n  increment(&ints.x)\n  // ints.x is 1\n  // ints.y is 0\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C functions as instance properties\nDESCRIPTION: Shows how to use swift_name with the getter: prefix and self: label to import C functions as instance properties of a specific type. This creates a more object-oriented API for Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_22\n\nLANGUAGE: objc\nCODE:\n```\n__attribute__((swift_name(\"getter:Counter.absoluteValue(self:)\")))\nint CounterGetAbsoluteValue(Counter c);\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension Counter {\n  var absoluteValue: Int32 { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Generic ZipIterator in Swift (Proposed Syntax)\nDESCRIPTION: Introduces a proposed syntax for variadic generics in Swift. It defines a `ZipIterator` that accepts a parameter pack `... Iterators`, each conforming to `IteratorProtocol`. It uses `...` for pack expansion to define the `Element` typealias (a tuple), store iterators (`var (...iterators)`), and call `next()` on each iterator (`iterators.next()...`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\npublic struct ZipIterator<... Iterators : IteratorProtocol> : Iterator {  // zero or more type parameters, each of which conforms to IteratorProtocol\n  public typealias Element = (Iterators.Element...)                       // a tuple containing the element types of each iterator in Iterators\n\n  var (...iterators): (Iterators...)    // zero or more stored properties, one for each type in Iterators\n  var reachedEnd = false\n\n  public mutating func next() -> Element? {\n    if reachedEnd { return nil }\n\n    guard let values = (iterators.next()...) else {   // call \"next\" on each of the iterators, put the results into a tuple named \"values\"\n      reachedEnd = true\n      return nil\n    }\n\n    return values\n  }\n}\n\npublic struct ZipSequence<...Sequences : Sequence> : Sequence {\n  public typealias Iterator = ZipIterator<Sequences.Iterator...>   // get the zip iterator with the iterator types of our Sequences\n\n  var (...sequences): (Sequences...)    // zero or more stored properties, one for each type in Sequences\n\n  // details ...\n}\n```\n\n----------------------------------------\n\nTITLE: SIL Ownership Annotation Example for @owned (Swift SIL)\nDESCRIPTION: This example shows a SIL function operating under Ownership SSA, demonstrating explicit ownership handling for an @owned String parameter. The snippet illustrates how a value can be 'consumed' by either destroy_value or passed to a store. Accurate ownership annotations and correct usage of destroy or store instructions are required.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n    sil [ossa] @foo : $@convention(thin) (@owned String, @inout String) -> () {\n    bb0(%0 : @owned $String, %1 : $*String):\n      cond_br %cond, bb1, bb2\n    bb1:\n      destroy_value %0        // \"consumed\" by destroying\n      ...\n    bb2:\n      store %0 to [assign] %1 // consumed by storing to memory\n\n```\n\n----------------------------------------\n\nTITLE: Access Markers in SIL for Nested Access\nDESCRIPTION: SIL representation showing how access markers are generated for nested access. Demonstrates the begin_access and end_access markers that track memory access within function calls with inout parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_5\n\nLANGUAGE: sil\nCODE:\n```\nsil @takesTwoInouts : $@convention(thin) (@inout Int, @inout Int) -> ()\n\nsil @hasNestedAccess : $@convention(thin) (@inout Int) -> () {\nbb0(%0 : $*Int):\n  %innerAccess  = begin_access [modify] %0 : $*Int\n  %conflicting  = begin_access [modify] %0 : $*Int\n  %f = function_ref @takesTwoInouts\n  apply %f(%innerAccess, %conflicting)\n    : $@convention(thin) (@inout Int, @inout Int) -> ()\n  end_access %conflicting : $*Int\n  end_access %innerAccess : $*Int\n  //...\n}\n\n%var = alloc_stack $Int\n%outerAccess  = begin_access [modify] %var : $*Int\n%f = function_ref @hasNestedAccess\napply %f(%outerAccess) : $@convention(thin) (@inout Int) -> () {\nend_access %outerAccess : $*Int\n```\n\n----------------------------------------\n\nTITLE: Using Argument Labels for Special Cases in Swift Initializers - Swift\nDESCRIPTION: These code snippets display correct and special-case usage of argument labels for initializers in Swift. Labels such as 'bitPattern' or 'truncatingBitPattern' are leveraged when they convey essential information that normal patterns lack. The examples highlight both label omission for normal cases and label inclusion for distinct behaviors during type conversions. No dependencies required.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// Normal case: result has same value as argument (traps on overflow)\nInt(aUInt)\n\n// Special: interprets the sign bit as a high bit, changes value\nInt(bitPattern: aUInt)\n\n// Special: keeps only the bits that fit, losing information\nInt32(truncatingBitPattern: anInt64)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Platform Variable for Shell Commands in Swift Development\nDESCRIPTION: This shell command sets a platform variable based on the operating system for use in subsequent build commands. It detects if the system is macOS or Linux.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nplatform=$([[ $(uname) == Darwin ]] && echo macosx || echo linux)\n```\n\n----------------------------------------\n\nTITLE: Redefining AnyObject using Existential Class Constraint in Swift\nDESCRIPTION: Proposes replacing the magical `AnyObject` protocol with a `typealias` representing an existential (`protocol<>`) constrained to reference types (`class`). This aligns `AnyObject` with the generalized class constraints concept discussed in SE-0156 (Swift 4).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\ntypealias AnyObject = protocol<class>\n```\n\n----------------------------------------\n\nTITLE: Comparing Poor vs. Good Type Organization in Swift\nDESCRIPTION: This example demonstrates the contrast between poorly organized and well-organized Swift type definitions. The good example shows how to properly structure a type by separating the core type definition from its extensions, organizing protocol conformances into dedicated extensions, and grouping related functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// BAD (a jumbled mess)\nstruct Foo: RandomAccessCollection, Hashable {\n  var count: Int { ... }\n  \n  struct Iterator: IteratorProtocol { /* hundreds of lines */ }\n \n  class _Storage { /* even more lines */ }\n  \n  static func _createStorage(_ foo: Int, _ bar: Double) -> _Storage { ... }\n  \n  func hash(into hasher: inout Hasher) { ... }\n  \n  func makeIterator() -> Iterator { ... }\n  \n  /* more stuff */\n  \n  init(foo: Int, bar: Double) { \n    _storage = Self._createStorage(foo, bar) \n  }\n\n  static func ==(left: Self, right: Self) -> Bool { ... }\n  \n  var _storage: _Storage\n}\n\n// GOOD\nstruct Foo {\n  var _storage: _Storage\n  \n  init(foo: Int, bar: Double) { ... }\n}\n\nextension Foo {\n  class _Storage { /* even more lines */ }\n\n  static func _createStorage(_ foo: Int, _ bar: Double) -> _Storage { ... }\n}\n\nextension Foo: Equatable {\n  static func ==(left: Self, right: Self) -> Bool { ... }\n}\n\nextension Foo: Hashable {\n  func hash(into hasher: inout Hasher) { ... }\n}\n \nextension Foo: Sequence {\n  struct Iterator: IteratorProtocol { /* hundreds of lines */ }\n  \n  func makeIterator() -> Iterator { ... }\n  ...\n}\n\nextension Foo: RandomAccessCollection {\n  var count: Int { ... }\n  ...\n}\n\nextension Foo {\n  /* more stuff */\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing String Facade Pattern in Swift\nDESCRIPTION: Demonstrates a potential string facade design using a generic wrapper around Unicode implementation. Shows how StringFacade could abstract lower-level Unicode details while providing high-level string processing APIs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nstruct StringFacade<U: Unicode> : BidirectionalCollection {\n\n  // ...APIs for high-level string processing here...\n  \n  var unicode: U // access to lower-level unicode details\n}\n\ntypealias String = StringFacade<StringStorage>\ntypealias Substring = StringFacade<StringStorage.SubSequence>\n```\n\n----------------------------------------\n\nTITLE: C++ to Swift Function Parameter Mapping\nDESCRIPTION: Example of how C++ pointer parameters can be mapped to Swift inout parameters in imported headers, showing potential interoperability patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nvoid incrementBoth(int *value1, int *value2);\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc incrementBoth(_ value1: inout Int, _ value2: inout Int)\n```\n\n----------------------------------------\n\nTITLE: Non-Nullable C Pointer Imported to Swift\nDESCRIPTION: The Swift translation of a C function with a _Nonnull pointer. The pointer is imported as a non-optional UnsafeMutablePointer in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfunc fetch(_ ptr: UnsafeMutablePointer<CInt>) -> CInt\n```\n\n----------------------------------------\n\nTITLE: Extend Lifetime Instruction in SIL\nDESCRIPTION: Specifies the extend_lifetime instruction that indicates a value's linear lifetime extension point, used by OSSALifetimeCompletion for maintaining lifetime boundaries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_34\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'extend_lifetime' sil-operand\n\n// Indicate that %0's linear lifetime extends to this point\nextend_lifetime %0 : $X\n```\n\n----------------------------------------\n\nTITLE: Using SwiftStdlib Availability Macros\nDESCRIPTION: Demonstrates the preferred use of SwiftStdlib version macros instead of explicit OS version lists for availability annotations. This approach reduces errors and simplifies future updates.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nextension String {\n  // 😵‍💫👎\n  @available(macOS 10.15.4, iOS 13.4, watchOS 6.2, tvOS 13.4, *)\n  public func fiddle() { ... }\n\n  // 😎👍\n  @available(SwiftStdlib 5.2, *)\n  public func fiddle() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Incorrect Usage of Protocol as Type in Swift\nDESCRIPTION: This example demonstrates the error that occurs when using a protocol name directly as a type without the `any` keyword. In this case, 'Collection' is used as a parameter type, which is incorrect because constraint types cannot be used directly for values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/existential-any.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc sillyFunction(collection: Collection) { // error\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Upcasting Differentiable Functions in Swift\nDESCRIPTION: This snippet demonstrates how differentiable function values can be implicitly converted to less differentiable or non-differentiable function types, showcasing the subtyping relationships.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_46\n\nLANGUAGE: swift\nCODE:\n```\nfunc addOne(_ x: Float) -> Float { x + 1 }\nlet f0: @differentiable(linear) (Float) -> Float = addOne\nlet f1: @differentiable (Float) -> Float = f0\nlet f2: (Float) -> Float = f1\n```\n\n----------------------------------------\n\nTITLE: Copying Unowned References with unowned_copy_value in SIL\nDESCRIPTION: Creates an unowned reference by incrementing the unowned reference count. Only valid in opaque values mode and lowered by AddressLowering to store_unowned. Wraps the operand in an instance of @sil_unowned.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_66\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'unowned_copy_value' sil-operand\n\n%1 = unowned_copy_value %0 : $T\n// %1 will be an @owned value of type $@sil_unowned T.\n// $T must be a reference type\n// $@sil_unowned T must be address-only\n```\n\n----------------------------------------\n\nTITLE: Function Entry with Typed Arguments in Swift SIL (Swift)\nDESCRIPTION: This snippet provides an example of a function entry block in SIL, including basic block argument declarations with explicit types and ownership conventions. Required dependencies include SIL-aware tools or compilers that recognize ownership annotations and function argument mapping to Swift types. Inputs include an Int and a guaranteed String parameter, facilitating precise memory and value management.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n    sil @foo : $@convention(thin) (Int, @guaranteed String) -> () {\n    bb0(%0 : $Int, %1 : @guaranteed $String):\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Sending Parameter Solution for Data Race Prevention\nDESCRIPTION: Shows how to use the 'sending' parameter modifier to ensure only one task has access to the MyModel instance at a time, preventing concurrent access.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sending-closure-risks-data-race.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass MyModel {\n  static func perform(model: sending MyModel) {\n    Task {\n      model.update()\n    }\n  }\n\n  func update() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Calling Functions with UnsafePointer Parameters in Swift\nDESCRIPTION: Examples showing how to declare a function taking an UnsafePointer<Float> parameter and the different ways to call it, including using array literals which are lifetime-extended for the duration of the call.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerInteropLanguageModel.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc zim(_ x: UnsafePointer<Float>)\n\nvar x: Float = 0.0\nvar p: UnsafePointer<Float> = nil\nzim(nil)\nzim(p)\nzim(&x)\nzim([1.0, 2.0, 3.0])\n```\n\n----------------------------------------\n\nTITLE: Importing C functions as static methods\nDESCRIPTION: Shows how to import C functions as static methods of a specific type in Swift. This allows for better organization of related functionality when bridging from C to Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_20\n\nLANGUAGE: objc\nCODE:\n```\n__attribute__((swift_name(\"NSSound.beep()\")))\nvoid NSBeep(void);\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension NSSound {\n  static func beep()\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Decorated Capture References in Swift Closures\nDESCRIPTION: Examples of using decorated capture references for unowned and weak captures of self in Swift closures. This syntax allows for concise specification of capture semantics directly at the point of use.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nbutton1.setAction { unowned(self).tapOut() }\nbutton2.setAction { if (weak(self)) { weak(self).swapIn() } }\n```\n\n----------------------------------------\n\nTITLE: Declaring and Calling Functions with UnsafeRawPointer Parameters in Swift\nDESCRIPTION: Examples showing how to declare a function taking an UnsafeRawPointer parameter and the various ways to call it, including with array literals that need type annotation due to a type checker limitation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerInteropLanguageModel.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc zang(_ x: UnsafeRawPointer)\n\nvar x: Float = 0.0, y: Int = 0\nvar p: UnsafePointer<Float> = nil, q: UnsafePointer<Int> = nil\nzang(nil)\nzang(p)\nzang(q)\nzang(&x)\nzang(&y)\nlet doubles = [1.0, 2.0, 3.0]\nlet ints = [1, 2, 3]\nzang(doubles)\nzang(ints)\n\nzang([1.0, 2.0, 3.0] as [Double])\nzang([1, 2, 3] as [Int])\n```\n\n----------------------------------------\n\nTITLE: Extending Public Struct with Protocol Conformance in Swift\nDESCRIPTION: This snippet extends the public struct Y to conform to protocol P. It shows that when an extension is @public, the conformance and required methods must also be public.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@public\nextension Y : P {     // This extension is @public, so\n  @public func f() {} // Y's conformance to P is also, and\n  func g() {}         // thus f must be @public too\n}\n```\n\n----------------------------------------\n\nTITLE: Lowered SIL for Callback Bridging and Region Isolation - swift\nDESCRIPTION: Shows a sequence of SIL instructions resulting from bridging Objective-C callbacks to Swift async. This example specifically demonstrates stack allocation, method lookup, async continuations, block storage, existential handling, and the use of 'merge_isolation_region' to maintain isolation relationships between values that can't be automatically inferred. Useful for understanding the compiler's internal treatment of async bridging and memory isolation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n%5 = alloc_stack $CallbackData                  // users: %26, %25, %31, %16, %7\\n%6 = objc_method %0 : $Klass, #Klass.loadData!foreign : (Klass) -> () async throws -> CallbackData, $@convention(objc_method) (Optional<@convention(block) (Optional<CallbackData>, Optional<NSError>) -> ()>, Klass) -> () // user: %20\\n%7 = get_async_continuation_addr [throws] CallbackData, %5 : $*CallbackData // users: %23, %8\\n%8 = struct $UnsafeContinuation<CallbackData, any Error> (%7 : $Builtin.RawUnsafeContinuation) // user: %14\\n%9 = alloc_stack $@block_storage Any            // users: %22, %16, %10\\n%10 = project_block_storage %9 : $*@block_storage Any // user: %11\\n%11 = init_existential_addr %10 : $*Any, $CheckedContinuation<CallbackData, any Error> // user: %15\\n// function_ref _createCheckedThrowingContinuation<A>(_:)\n%12 = function_ref @$ss34_createCheckedThrowingContinuationyScCyxs5Error_pGSccyxsAB_pGnlF : $@convention(thin) <τ_0_0> (UnsafeContinuation<τ_0_0, any Error>) -> @out CheckedContinuation<τ_0_0, any Error> // user: %14\\n%13 = alloc_stack $CheckedContinuation<CallbackData, any Error> // users: %21, %15, %14\\n%14 = apply %12<CallbackData>(%13, %8) : $@convention(thin) <τ_0_0> (UnsafeContinuation<τ_0_0, any Error>) -> @out CheckedContinuation<τ_0_0, any Error>\\ncopy_addr [take] %13 to [init] %11 : $*CheckedContinuation<CallbackData, any Error> // id: %15\\nmerge_isolation_region %9 : $*@block_storage Any, %5 : $*CallbackData // id: %16\\n// function_ref @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned CallbackData?, @unowned NSError?) -> () with result type CallbackData\\n%17 = function_ref @$sSo12CallbackDataCSgSo7NSErrorCSgIeyByy_ABTz_ : $@convention(c) (@inout_aliasable @block_storage Any, Optional<CallbackData>, Optional<NSError>) -> () // user: %18\\n%18 = init_block_storage_header %9 : $*@block_storage Any, invoke %17 : $@convention(c) (@inout_aliasable @block_storage Any, Optional<CallbackData>, Optional<NSError>) -> (), type $@convention(block) (Optional<CallbackData>, Optional<NSError>) -> () // user: %19\\n%19 = enum $Optional<@convention(block) (Optional<CallbackData>, Optional<NSError>) -> ()>, #Optional.some!enumelt, %18 : $@convention(block) (Optional<CallbackData>, Optional<NSError>) -> () // user: %20\\n%20 = apply %6(%19, %0) : $@convention(objc_method) (Optional<@convention(block) (Optional<CallbackData>, Optional<NSError>) -> ()>, Klass) -> ()\n```\n\n----------------------------------------\n\nTITLE: Clonable Protocol Implementation Example\nDESCRIPTION: Comprehensive example showing implementation of Clonable protocol with class inheritance and struct usage\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Clonable.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Clonable {\n   func clone() -> Self { /* see below */ }\n}\n\nclass FooValue : Clonable  {}\n\nclass Bar {}\n\nclass Foo : Clonable {\n    var count : Int\n    var [clone] myValue : FooValue\n    var somethingIJustReferTo : Bar\n}\n\nstruct Baz {\n    var [clone] partOfMyValue : Foo\n    var anotherPart : Int\n    var somethingIJustReferTo : Bar\n}\n```\n\n----------------------------------------\n\nTITLE: Derivative Implementation with Differential Calculation\nDESCRIPTION: Implementation of derivative calculation at a specific point, marked as differentiable with respect to the input parameter. Returns the tangent vector of the result type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_70\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable(wrt: x)\nfunc derivative<T: FloatingPoint, U: Differentiable>(\n    at x: T, of body: @differentiable (T) -> U) -> U\n) -> U.TangentVector where T: FloatingPoint, T == T.TangentVector {\n    valueWithDifferential(at: x, of: body).differential(T(1))\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Swift String to Standard C++ String\nDESCRIPTION: Shows how to convert a swift::String object to a std::string using std::to_string function, which can then be used with standard C++ code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_64\n\nLANGUAGE: c++\nCODE:\n```\nvoid printSwiftString(const swift::String &swStr) {\n  std::string str = std::to_string(swStr);\n  std::cout << \"swift string is \" << str << \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Observing Variable Changes using Stored and Computed Pair in Swift\nDESCRIPTION: This snippet demonstrates a pattern for adding custom behavior upon setting a variable's value before introducing observing accessors. It uses a private stored variable (`_backgroundColor`) for storage and a public computed variable (`backgroundColor`) whose setter modifies the stored variable and calls `refresh()`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nvar _backgroundColor : Color\nvar backgroundColor : Color {\n  get {\n    return _backgroundColor\n  }\n  set {\n    _backgroundColor = value\n    refresh()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SIL Value Naming and Operand Grammar in Swift SIL (Swift)\nDESCRIPTION: This snippet documents the formal grammar for naming and referencing values and operands in SIL. It covers naming conventions, signature usage, and operand structure. The grammar reflects how values are defined, used, and passed between instructions, fundamental for constructing correct SIL code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nsil-identifier ::= [A-Za-z_0-9]+\nsil-value-name ::= '%' sil-identifier\nsil-value ::= sil-value-name\nsil-value ::= 'undef'\nsil-operand ::= sil-value\nsil-operand ::= sil-value ':' sil-type\n```\n\n----------------------------------------\n\nTITLE: Declaring Arrays with Value and Reference Semantics in Swift\nDESCRIPTION: Shows how to declare arrays with explicit value and reference semantics for their elements. Includes examples of complex array types and function return types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar x : Int[42]         // an array of 42 integers\nvar y : Int[val 42]     // an array of 42 integers\nvar z : Int[ref 42]     // an array of 42 integers-on-the-heap\nvar z : Int[ref 2][42]  // an array of 2 references to arrays\nref a : Int[42]         // a reference to an array of 42 integers\n\nvar f : () -> ref Int[42] // a closure returning a reference to an array\nvar b : ref Int[42]       // equivalent to \"ref b : Int[42]\"\n\nvar x : Array<Int,42>               // an array of 42 integers\nvar y : Array<val Int,42>           // an array of 42 integers\nvar z : Array<ref Int,42>           // an array of 42 integers-on-the-heap\nvar z : Array<ref Array<Int,42>, 2> // an array of 2 references to arrays\nref a : Array<Int,42>               // a reference to an array of 42 integers\nvar f : () -> ref Array<Int,42>     // a closure returning a reference to an array\nvar b : ref Array<Int,42>           // equivalent to \"ref b : Int[42]\"\n```\n\n----------------------------------------\n\nTITLE: Acceptable Short Type and Parameter Names in Generic Functions - Swift\nDESCRIPTION: Shows examples where single-character type parameters and standard abbreviations such as 'lhs' and 'rhs' are acceptable for binary operators and symmetric functions. These are established conventions within Swift's standard library. The snippet is focused on function signatures and binary operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfunc swap<T>(lhs: inout T, rhs: inout T)\nfunc +(lhs: Int, rhs: Int) -> Int\nfunc swap<T>(lhs: inout T, rhs: inout T)\n\n```\n\n----------------------------------------\n\nTITLE: Adding Commands to an LLDB Breakpoint\nDESCRIPTION: Adds commands to LLDB breakpoint 2. When hit, it increments a debugger variable `$n` and immediately continues execution (`c`). This is useful for counting how many times a breakpoint is hit without stopping each time.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_16\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br com add 2\n> p int $n = $n + 1\n> c\n> DONE\n```\n\n----------------------------------------\n\nTITLE: Accessing String Indices with Different Segmentation Schemes\nDESCRIPTION: Shows how each segmentation scheme in Swift strings provides its own IndexType, allowing direct indexing with different indexing schemes based on specific needs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nvar i = s.searchCharacters.startIndex\n// r2 : UInt8 = UInt8(83)\n```\n\n----------------------------------------\n\nTITLE: Using Wrapping Integer Arithmetic in Swift\nDESCRIPTION: This code demonstrates the use of Swift's wrapping arithmetic operators (`&+`, `&-`, `&*`). These operators allow integer operations to wrap around on overflow instead of trapping, which can be beneficial in performance-critical code where overflow checks are unnecessary or the wrapping behavior is desired and well-defined (e.g., `Int.max &+ 1` results in `Int.min`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\na: [Int]\nb: [Int]\nc: [Int]\n\n// Precondition: for all a[i], b[i]: a[i] + b[i] either does not overflow,\n// or the result of wrapping is desired.\nfor i in 0 ... n {\n  c[i] = a[i] &+ b[i]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @frozen Attribute with Swift Enums for Exhaustivity\nDESCRIPTION: Explains that marking an ABI-public enum as `@frozen` prevents adding new cases or reordering existing ones in future library versions. This guarantees clients that the set of cases is exhaustive, enabling optimizations like omitting default cases in switch statements. Adding or removing `@frozen` itself is forbidden.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@frozen\n```\n\n----------------------------------------\n\nTITLE: Basic Embedded Swift Compilation Command\nDESCRIPTION: Shows the basic command structure for compiling Swift source files in Embedded mode with a target triple.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ swiftc -target <target triple> -enable-experimental-feature Embedded -wmo \\\n  input1.swift input2.swift ... -c -o output.o\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Operators in Swift\nDESCRIPTION: This snippet defines custom infix and postfix operators in Swift. It includes a custom infix operator '%%%' and two postfix operators '=>' and '=->'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/foo_swift_module.printed.comments.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nfunc %%% (lhs: Int, rhs: Int) -> Int\npostfix func =-> (lhs: Int) -> Int\npostfix func => (lhs: Int) -> Int\n```\n\n----------------------------------------\n\nTITLE: Importing a Specific Clang Submodule in Swift\nDESCRIPTION: This Swift code snippet demonstrates how to import a specific submodule (`GL3`) from a Clang module (`OpenGL`). Clang submodules allow hierarchical organization within C/Objective-C libraries exposed to Swift. Importing a specific submodule makes only its declarations available, potentially improving clarity and compile times compared to importing the entire top-level module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nimport OpenGL.GL3\n```\n\n----------------------------------------\n\nTITLE: Accessing Instance vs. Static Members and Metatypes in Swift\nDESCRIPTION: Defines a struct `S` with an instance variable `ivar` and a static variable `svar`. It demonstrates that `ivar` is accessed through an instance (`S().ivar`), while `svar` is accessed through the type itself (`S.svar` or `S.self.svar`). It also shows that `type(of:)` applied to an instance returns the type's metatype (`S.self`), illustrating the concept of metatypes representing types at runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct S {\n  let ivar = 2\n  static let svar = 1\n}\nS.ivar // Error: only available on an instance\nS().ivar // 2\ntype(of: S()) == S.self\nS.self.svar // 1\nS.svar // Shorthand for S.self.svar\n```\n\n----------------------------------------\n\nTITLE: Defining the Differentiable Protocol in Swift\nDESCRIPTION: The core Differentiable protocol definition that enables differentiable programming in Swift. It requires an associated TangentVector type and a move(by:) method for updating values based on derivatives.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol Differentiable {\n    /// A type that can be used to represent derivatives with respect to a\n    /// value whose type is `Self`. Mathematically, this is equivalent to the\n    /// tangent bundle of the differentiable manifold represented by the\n    /// differentiable type.\n    associatedtype TangentVector: Differentiable & AdditiveArithmetic\n        where TangentVector == TangentVector.TangentVector\n\n    /// Moves `self` by the given offset. In Riemannian geometry, this is\n    /// equivalent to exponential map, which moves `self` on the geodesic\n    /// surface by the given tangent vector.\n    mutating func move(by offset: TangentVector)\n}\n```\n\n----------------------------------------\n\nTITLE: ExpressibleByStringLiteral Protocol Definition\nDESCRIPTION: Shows the standard library definition of ExpressibleByStringLiteral protocol, which enables types to be initialized with string literals.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Literals.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol ExpressibleByStringLiteral\n  : ExpressibleByExtendedGraphemeClusterLiteral {\n\n  /// A type that represents a string literal.\n  ///\n  /// Valid types for `StringLiteralType` are `String` and `StaticString`.\n  associatedtype StringLiteralType: _ExpressibleByBuiltinStringLiteral\n\n  /// Creates an instance initialized to the given string value.\n  ///\n  /// - Parameter value: The value of the new instance.\n  init(stringLiteral value: StringLiteralType)\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Extension Implementation in Swift\nDESCRIPTION: Demonstrates current approach to providing default implementations using protocol extensions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_26\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Bag {\n  associatedtype Element : Equatable\n  func contains(element: Element) -> Bool\n\n  func containsAll<S: Sequence where Sequence.Iterator.Element == Element>(elements: S) -> Bool\n}\n\nextension Bag {\n  func containsAll<S: Sequence where Sequence.Iterator.Element == Element>(elements: S) -> Bool {\n    for x in elements {\n      if contains(x) { return true }\n    }\n    return false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending a Type for Custom String Conversion in Swift\nDESCRIPTION: This snippet demonstrates how to extend a type (e.g., Person) to conform to the CustomStringConvertible protocol, enabling its use with string literals and print functions. The minimal extension simply declares conformance, while an override of format() customizes the textual output. No additional dependencies are required. Inputs are the type to be extended; the output is the string representation via print or interpolation. Limitations: format() must return a String, and more advanced formatting requires further protocol adoption.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nextension Person : CustomStringConvertible {}\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension Person : CustomStringConvertible {\n  func format() -> String {\n    return \"\\(lastName), \\(firstName)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generic RNN Implementation in Swift\nDESCRIPTION: A generic implementation of a recurrent neural network that can work with any RNN cell type conforming to the RNNCell protocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_66\n\nLANGUAGE: swift\nCODE:\n```\nstruct RNN<Cell: RNNCell>: Layer {\n    typealias Input = [Cell.TimeStepInput]\n    typealias Output = [Cell.TimeStepOutput]\n\n    var cell: Cell\n\n    init(_ cell: @autoclosure () -> Cell) {\n        self.cell = cell()\n    }\n\n    @differentiable(wrt: (self, input))\n    func callAsFunction(_ input: [Cell.TimeStepInput]) -> [Cell.TimeStepOutput] {\n        var currentHiddenState = zeroState\n        var timeStepOutputs: [Cell.TimeStepOutput] = []\n        for timeStep in input {\n            let output = cell(input: timeStep, state: currentHiddenState)\n            currentHiddenState = output.state\n            timeStepOutputs.append(output.output)\n        }\n        return timeStepOutputs\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating partial_apply Borrow Scope in Swift\nDESCRIPTION: This snippet shows how partial_apply [on_stack] defines borrow scopes for its non-trivial arguments, ending at the destruction of the closure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n%3 = partial_apply [on_stack] %f(%1, %2)    -+ borrow scope for %1 and %2\n%4 = convert_function %3 to $SomeFuncType    |\ndestroy_value %4                            -+ %1 and %2 must be alive until here\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unsafe Type Usage in Swift Function\nDESCRIPTION: This example demonstrates the use of a function (malloc) that involves an unsafe type (UnsafeMutableRawPointer), triggering a memory safety warning.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-memory-safety.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc evilMalloc(size: Int) -> Int {\n  // use of global function 'malloc' involves unsafe type 'UnsafeMutableRawPointer'\n  return Int(bitPattern: malloc(size))\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Multiple `defer` Statements in Swift\nDESCRIPTION: This Swift snippet illustrates the execution order of multiple `defer` statements within the same scope. Deferred actions are executed in the reverse order of their appearance; thus, `close(file2)` will run before `close(file1)`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nlet file1 = open(\"hello.txt\")\ndefer close(file1)\nlet file2 = open(\"world.txt\")\ndefer close(file2)\n...\n// file2 will be closed first.\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Methods to Curried Functions in Swift\nDESCRIPTION: Demonstrates how struct methods in Swift can be converted to curried functions, which is proposed as a way to handle C++ pointers to member functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_45\n\nLANGUAGE: swift\nCODE:\n```\n// A normal user-defined struct.\nstruct Point {\n  var x: Double\n  var y: Double\n\n  func distanceTo(_ line: Line) -> Double { ... }\n}\n\nvar distanceToFunc: (Point) -> (Line) -> Double = Point.distanceTo\n```\n\n----------------------------------------\n\nTITLE: Manual Initializer Inheritance in Swift Classes\nDESCRIPTION: This example shows how to manually inherit initializers in Swift subclasses. Since Swift doesn't inherit initializers by default, the subclass explicitly declares the initializer and delegates to the superclass implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass C : A {\n  var value = \"Hello\"\n\n  init(x: Int) {\n    super.init(x) // superclass delegation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C++ vector to Swift array\nDESCRIPTION: Illustrates how C++'s std::vector<T> is bridged to Swift's Array<T> at the interop boundary, despite having different memory layouts. The example shows a function that takes and returns a vector of integers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_69\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nstd::vector<int> IncrementVectorValues(std::vector<int> v);\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\n// Note: no C++ vectors!\nfunc IncrementVectorValues(_ v: [CInt]) -> [CInt]\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Using the imported C++ API in Swift.\n\nfunc callIncrementVectorValues() -> CInt {\n  var xs: [CInt] = IncrementVectorValues([10, 20, 30])\n  return xs[0] // = 11.\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Protocol Members via Generic Parameters, Opaque Types, and Protocol Types in Swift\nDESCRIPTION: Demonstrates the three ways to access protocol members in Swift: through generically constrained parameters, opaque result types, and protocol types directly. All three approaches allow accessing members like 'description' from CustomStringConvertible.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/existential-member-access-limitations.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// An appropriately constrained generic parameter.\nfunc foo<T: CustomStringConvertible>(arg: T) {\n  let description: String = arg.description\n}\n\ndo {\n  // An appropriately constrained opaque result type.\n  func foo() -> some CustomStringConvertible { true }\n\n  let description: String = foo().description\n}\n\n// The protocol type.\nfunc foo(arg: CustomStringConvertible) {\n  let description: String = arg.description\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Propagating and Handling Errors with try (Swift)\nDESCRIPTION: Presents various uses of the `try` keyword in Swift for error propagation in function scopes, showing required placements of `try` before potentially throwing calls and nuances around expression scoping. The snippet expects prior definition of functions like loadFile and a context marked with `throws`; failure to appropriately annotate will cause compiler errors, demonstrating enforcement of disciplined error handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nfunc readStuff() throws {\n    // loadFile can throw an error.  If so, it propagates out of readStuff.\n    try loadFile(\"mystuff.txt\")\n\n    // This is a semantic error; the 'try' keyword is required\n    // to indicate that it can throw.\n    var y = stream.readFloat()\n\n    // This is okay; the try covers the entire statement.\n    try y += stream.readFloat()\n\n    // This try applies to readBool().\n    if try stream.readBool() {\n    // This try applies to both of these calls.\n    let x = try stream.readInt() + stream.readInt()\n    }\n\n    if let err = stream.getOutOfBandError() {\n    // Of course, the programmer doesn't have to mark explicit throws.\n    throw err\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Converting Between NSRange and Swift String Indices\nDESCRIPTION: Demonstrates proposed syntax for converting between NSRange and Swift string indices to improve Objective-C interoperability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nlet nsr = NSRange(i..<j, in: s) // An NSRange corresponding to s[i..<j]\nlet iToJ = Range(nsr, in: s)    // Equivalent to i..<j\n```\n\n----------------------------------------\n\nTITLE: Implementing Differentiable Class Methods in Swift\nDESCRIPTION: Demonstrates how to implement and override differentiable methods in a class hierarchy. The example shows a Superclass with a differentiable method foo and a Subclass overriding it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\nclass Superclass {\n    @differentiable\n    func foo(_ x: SIMD8<Float>) -> Float {\n        x.sum()\n    }\n}\n\nclass Subclass: Superclass {\n    @differentiable\n    override func foo(_ x: SIMD8<Float>) -> Float {\n        (x * x).sum()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Swift Arrays in C++\nDESCRIPTION: Demonstrates how to iterate through elements of a swift::Array using a C++ range-based for loop.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_68\n\nLANGUAGE: c++\nCODE:\n```\nfor (auto language : languages)\n  std::cout << std::to_string(language) << \"\\n\";\n```\n\n----------------------------------------\n\nTITLE: Training Loop for Linear Regression Model in Swift\nDESCRIPTION: Implementation of a training loop for the perceptron model using gradient descent optimization with configurable learning rate and iteration count.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_61\n\nLANGUAGE: swift\nCODE:\n```\nlet iterationCount = 160\nlet learningRate: Float = 0.00003\n\nvar model = Perceptron(weights: .zero, bias: 0)\n\nfor i in 0..<iterationCount {\n    var (loss, 𝛁loss) = valueWithGradient(at: model) { model -> Float in\n        var totalLoss: Float = 0\n        for (x, y) in data {\n            let pred = model(x)\n            let diff = y - pred\n            totalLoss = totalLoss + diff * diff / Float(data.count)\n        }\n        return totalLoss\n    }\n    𝛁loss.weight *= -learningRate\n    𝛁loss.bias *= -learningRate\n    model.move(by: 𝛁loss)\n    if i.isMultiple(of: 10) {\n        print(\"Iteration: \\(iteration) Avg Loss: \\(loss / Float(data.count))\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: LLDB Commands for SIL Debugging\nDESCRIPTION: Collection of LLDB commands for debugging and inspecting SIL code during compiler development.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_10\n\nLANGUAGE: lldb\nCODE:\n```\np Inst->dump()\n```\n\nLANGUAGE: lldb\nCODE:\n```\np getFunction()->dump()\n```\n\nLANGUAGE: lldb\nCODE:\n```\np getFunction()->dump(\"myfunction.sil\")\n```\n\nLANGUAGE: lldb\nCODE:\n```\np Func->viewCFG()\n```\n\n----------------------------------------\n\nTITLE: Extending and Mutating a String in Swift\nDESCRIPTION: Shows how to extend the `String` type with a custom method `addEcho` that modifies the string in place by appending itself using the `+=` operator. It then calls this method on the variable `s`, demonstrating string mutability by changing its value from \"Yo\" to \"YoYo\".\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n|swift| extension String {\n          func addEcho() {\n            self += self\n          }\n        }\n|swift| :look1:`s.addEcho()`\\ :aside:`s is modified in place`\n|swift| s\n`// s: String =` :emph:`\"YoYo\"`\n```\n\n----------------------------------------\n\nTITLE: Non-Sendable Singleton Pattern in Swift\nDESCRIPTION: This code demonstrates a singleton pattern using a static constant, but with a class that doesn't conform to Sendable. Even though the variable is a constant, the referenced object could have mutable state, making it unsafe for concurrent access.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/mutable-global-variable.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass MyModel {\n  static let shared = MyModel()\n\n  // mutable state\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying C++ Library Dependency to Android Device\nDESCRIPTION: Command to push the C++ shared library from the Android NDK to the device. This is required for Swift applications on Android.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Android.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ adb push /path/to/android-ndk-r27c/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android/libc++_shared.so /data/local/tmp\n```\n\n----------------------------------------\n\nTITLE: Implementing Format Methods for Swift String Interpolation\nDESCRIPTION: Demonstrates a proposed approach for using lightweight, discoverable formatting methods within string interpolations. This allows for more flexible and readable formatting of values directly in the interpolation syntax.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n\"Column 1: \\(n.format(radix:16, width:8)) *** \\(message)\"\n\n\"Something with leading zeroes: \\(x.format(fill: zero, width:8))\"\n```\n\n----------------------------------------\n\nTITLE: Creating C++ Module Definition\nDESCRIPTION: Defines a module map file to expose C++ code to Swift, specifying the header file and C++ requirement.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/GettingStartedWithC++Interop.md#2025-04-23_snippet_0\n\nLANGUAGE: modulemap\nCODE:\n```\nmodule CxxTest {\n    header \"CxxTest.hpp\"\n    requires cplusplus\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating begin_borrow and end_borrow in Swift\nDESCRIPTION: This code demonstrates how begin_borrow defines a borrow scope for its operand, which ends at an end_borrow instruction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n%2 = begin_borrow %1          -+ borrow scope for %1\n// ...                         |\nend_borrow %2                 -+ %1 must be alive until here\n```\n\n----------------------------------------\n\nTITLE: Implementing Pullback and Gradient Operators in Swift\nDESCRIPTION: Defines operators that compute pullbacks and gradients for differentiable functions, essential for reverse-mode automatic differentiation commonly used in machine learning applications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_55\n\nLANGUAGE: swift\nCODE:\n```\nfunc valueWithPullback<T, R>(\n    at x: T, of body: @differentiable (T) -> R\n) -> (value: R,\n      pullback: @differentiable(linear) (R.TangentVector) -> T.TangentVector) {\n    let (value, df) = valueWithDifferential(at: x, of: body)\n    return (value, transpose(of: df))\n}\n\nfunc valueWithGradient<T, R: FloatingPoint>(\n    at x: T, of body: @differentiable (T) -> R\n) -> (value: R, gradient: T.TangentVector) where R.TangentVector: FloatingPoint {\n    let (value, pullback) = valueWithPullback(at: x, of: body)\n    return (value, pullback(R.TangentVector(1)))\n}\n\nfunc gradient<T, R: FloatingPoint>(\n    at x: T, of body: @differentiable (T) -> R\n) -> T.TangentVector where R.TangentVector: FloatingPoint {\n    return valueWithGradient(at: x, of: body).gradient\n}\n\nfunc gradient<T, R: FloatingPoint>(\n    of body: @escaping @differentiable (T) -> R\n) -> (T) -> T.TangentVector where R.TangentVector: FloatingPoint {\n    return { x in gradient(at: x, of: body) }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating a Naive Iterator Protocol Design in Swift\nDESCRIPTION: Presents a hypothetical `NaiveIteratorProtocol` design with separate methods for getting the current element (`current()`), advancing (`advance()`), and checking for exhaustion (`isExhausted`). This design is contrasted with Swift's actual `IteratorProtocol` to highlight potential issues with buffering or trapping in volatile sequences.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprotocol NaiveIteratorProtocol {\n  typealias Element\n  var current() -> Element      // get the current element\n  mutating func advance()       // advance to the next element\n  var isExhausted: Bool         // detect whether there are more elements\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Initial Inlinable Struct Method in Swift\nDESCRIPTION: This Swift snippet defines a public struct `Point2D` with Cartesian coordinates `x` and `y`. An extension adds an `@inlinable` public method `distance(to:)` which calculates the Euclidean distance between two points. This example is used to illustrate potential ABI fragility if the struct's internal representation changes, as the method directly accesses `x` and `y`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\npublic struct Point2D {\n  var x, y: Double\n  public init(x: Double, y: Double) { /*...*/ }\n}\n\nextension Point2D {\n  @inlinable public func distance(to other: Point2D) -> Double {\n    let deltaX = self.x - other.x\n    let deltaY = self.y - other.y\n    return sqrt(deltaX*deltaX + deltaY*deltaY)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing struct field names with swift_name\nDESCRIPTION: Demonstrates how to rename struct fields when imported into Swift using the swift_name attribute. This allows for more idiomatic property naming in Swift without changing the original C structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_25\n\nLANGUAGE: objc\nCODE:\n```\nstruct SPKSpaceflightBooking {\n  const SPKLocation * _Nullable destination;\n  bool roundTrip __attribute__((swift_name(\"isRoundTrip\")));\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\nstruct SPKSpaceflightBooking {\n  var destination: UnsafePointer<SPKLocation>?\n  var isRoundTrip: Bool\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Preposition Suffixes for Parameter Roles in Swift Function Names - Swift\nDESCRIPTION: The snippet demonstrates use of prepositions appended to function names to clarify the role of the first parameter, following Swift's API guidelines. The code focuses on how prepositions like 'To' and 'Of' can signal the relationship between parameters. No dependencies are required, and the pattern should be used when the parameter's purpose is ambiguous.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// origin of measurement is aPosition\naPosition.distanceTo(otherPosition)\n\n// we're not \"indexing x\"\nif let position = aSet.indexOf(x) { ... }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Swift Arrays with C++ Initializer Lists\nDESCRIPTION: Shows how to create Swift arrays with various element types using C++ initializer lists. Swift::Array conforms to ArrayLiteralConvertible, allowing array literal syntax.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_67\n\nLANGUAGE: c++\nCODE:\n```\nswift::Array<int> intArray = {};\n\nswift::Array<swift::String> languages = { \"Swift\", \"C++\", \"Objective-C\" };\n```\n\n----------------------------------------\n\nTITLE: Defining Opaque Result Type Mangling in Swift\nDESCRIPTION: Specifies the mangling rules for opaque result types in Swift 5.1 and later. Includes syntax for direct opaque types and those with specific declarations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\n#if SWIFT_VERSION >= 5.1\n  type ::= 'Qr'                         // opaque result type (of current decl, used for the first opaque type parameter only)\n  type ::= 'QR' INDEX                   // same as above, for subsequent opaque type parameters, INDEX is the ordinal -1\n  type ::= opaque-type-decl-name bound-generic-args 'Qo' INDEX // opaque type\n\n  opaque-type-decl-name ::= entity 'QO' // opaque result type of specified decl\n#endif\n```\n\n----------------------------------------\n\nTITLE: Applying Availability Attributes in Swift Standard Library\nDESCRIPTION: Shows the preferred approach for applying @available attributes to individual declarations rather than to entire extensions. This style improves clarity and is enforced by the ABI checker.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// 😢👎\n@available(SwiftStdlib 5.2, *)\nextension String {\n  public func blanch() { ... }\n  public func roast() { ... }\n}\n\n// 🥲👍\nextension String {\n  @available(SwiftStdlib 5.2, *)\n  public func blanch() { ... }\n\n  @available(SwiftStdlib 5.2, *)\n  public func roast() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Array from a Sequence with Separators in Swift\nDESCRIPTION: Defines a generic Swift function `array(withSeparator:)` that operates on any `SequenceType`. It iterates through the input `source` sequence, using its iterator, and builds an array (`result`) containing the sequence's elements interleaved with the provided `separator` element. This exemplifies generic sequence processing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Return an array containing the elements of `source`, with\n// `separator` interposed between each consecutive pair.\nfunc array<S: SequenceType>(\n  _ source: S,\n  withSeparator separator: S.Iterator.Element\n) -> [S.Iterator.Element] {\n  var result: [S.Iterator.Element] = []\n  var iterator = source.makeIterator()\n  if let start = iterator.next() {\n    result.append(start)\n    while let next = iterator.next() {\n      result.append(separator)\n      result.append(next)\n    }\n  }\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Diagnostic Format Specifiers - Plaintext\nDESCRIPTION: This snippet contains various format specifier directives used in Swift compiler diagnostics to dynamically format messages. These tokens -- such as %0, %1, %select{a|b|c}0, %s0, and %% -- are inserted into diagnostic message strings and replaced at runtime depending on values provided through the compiler's diagnostic engine. The intent is to provide flexibility and grammar-correctness in diagnostic output, supporting parameterized messages, pluralization, conditional branches, and literal percent signs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n%0, %1, etc\n%select{a|b|c}0\n%s0\n%error\n%%\n```\n\n----------------------------------------\n\nTITLE: Implementing SIL Differentiability Witness Example\nDESCRIPTION: Demonstrates a concrete example of a SIL differentiability witness for an identity function, including JVP and VJP entries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_45\n\nLANGUAGE: sil\nCODE:\n```\nsil_differentiability_witness hidden [normal] [parameters 0] [results 0] <T where T : Differentiable> @id : $@convention(thin) (T) -> T {\n  jvp: @id_jvp : $@convention(thin) (T) -> (T, @owned @callee_guaranteed (T.TangentVector) -> T.TangentVector)\n  vjp: @id_vjp : $@convention(thin) (T) -> (T, @owned @callee_guaranteed (T.TangentVector) -> T.TangentVector)\n}\n```\n\n----------------------------------------\n\nTITLE: Annotating C++ Methods that Return Inner Pointers\nDESCRIPTION: Shows how to annotate C++ member functions that return pointers to internal data, helping Swift understand the memory ownership relationship and extend the lifetime of the containing object.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_26\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nclass Employee {\nprivate:\n  std::string company_;\npublic:\n  [[swift::returns_inner_pointer]]\n  std::string *mutable_company() const { return &_company; }\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc test() {\n  var employee: Employee = ...\n  var company = employee.mutable_company()\n\n  // ... any amount of code...\n\n  // `employee` is destroyed at the end of the scope because of the `mutable_company` call.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Objective-C Methods and Properties into Swift (UIView Example)\nDESCRIPTION: Illustrates the import of an Objective-C method (`convertPoint:toView:`) and a property (`constraints`) with its associated setter method (`addConstraint:`) from `UIView` into Swift. It shows parameter label changes (`convert(_:to:)`) and how property accessors are handled, noting that `addConstraint:` retains its name rather than being shortened by 'omit needless words'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_11\n\nLANGUAGE: objective-c\nCODE:\n```\n@interface UIView : UIResponder\n- (CGPoint)convertPoint:(CGPoint)point toView:(nullable UIView *)view;\n\n@property (readonly) NSArray<NSLayoutConstraint *> *constraints;\n- (void)addConstraint:(NSLayoutConstraint *)constraint;\n@end\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass UIView {\n  func convert(_ point: CGPoint, to view: UIView?) -> CGPoint\n\n  var constraints: [NSLayoutConstraint] { get }\n  func addConstraint(_ constraint: NSLayoutConstraint) // rather than add(_:)\n}\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Unsafe Behavior with 'unsafe' Expression in Swift\nDESCRIPTION: This example shows how to use the 'unsafe' expression to acknowledge memory-unsafe code within a given expression.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-memory-safety.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc evilMalloc(size: Int) -> Int {\n  return unsafe Int(bitPattern: malloc(size))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Option Subsets as Static Functions\nDESCRIPTION: Example showing how option subsets can be expressed as static functions of the option set type, providing convenience combinations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nstruct NSAlignmentOptions : OptionSet {\n  var AlignMinXInward,\n      AlignMinYInward,\n      AlignMaxXInward,\n      AlignMaxYInward,\n      AlignWidthInward,\n      AlignHeightInward : Bool = false\n\n  // convenience combinations\n  static func NSAlignAllEdgesInward() {\n    return NSAlignmentOptions(AlignMinXInward: true,\n                              AlignMaxXInward: true,\n                              AlignMinYInward: true,\n                              AlignMaxYInward: true)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Concurrency Safe Implementation Using nonisolated(nonsending)\nDESCRIPTION: This fixed version uses the nonisolated(nonsending) specifier to ensure the async method runs on the caller's actor (in this case, the Main actor). This eliminates data race risks by ensuring all access to the Person instance remains serialized.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sending-risks-data-race.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass Person {\n  var name: String = \"\"\n    \n  nonisolated(nonsending)\n  func printNameConcurrently() async {\n    print(name)\n  }\n}\n\n@MainActor\nfunc onMainActor(person: Person) async {\n  await person.printNameConcurrently()\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Copies with `inout` Parameters in Swift\nDESCRIPTION: This snippet demonstrates how to use `inout` parameters to modify a value (like an array) in place within a function, thereby avoiding the Copy-on-Write overhead associated with passing by value and mutating a local copy. The `&` syntax is used at the call site to pass the variable as `inout`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nfunc append_one_in_place(a: inout [Int]) {\n  a.append(1)\n}\n\nvar a = [1, 2, 3]\nappend_one_in_place(&a)\n```\n\n----------------------------------------\n\nTITLE: Declaring and Calling Functions with UnsafeMutablePointer Parameters in Swift\nDESCRIPTION: Examples showing how to declare a function taking an UnsafeMutablePointer<Float> parameter and the different ways to call it, including passing nil, a pointer variable, an inout expression, or an inout array.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerInteropLanguageModel.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(_ x: UnsafeMutablePointer<Float>)\n\nvar x: Float = 0.0\nvar p: UnsafeMutablePointer<Float> = nil\nvar a: [Float] = [1.0, 2.0, 3.0]\nfoo(nil)\nfoo(p)\nfoo(&x)\nfoo(&a)\n```\n\n----------------------------------------\n\nTITLE: Extending Fixed-Arity Zip Function for Three Arguments in Swift\nDESCRIPTION: Shows the code duplication necessary to support zipping three sequences without variadic generics. A new struct (`Zip3Sequence`) and function overload mirroring the two-argument version are required, highlighting the limitations of fixed-arity generics for such patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\npublic struct Zip3Sequence<Sequence1 : Sequence,\n                           Sequence2 : Sequence,\n                           Sequence3 : Sequence> : Sequence { ... }\n\npublic func zip<Sequence1 : Sequence, Sequence2 : Sequence, Sequence3 : Sequence>(\n              sequence1: Sequence1, _ sequence2: Sequence2, _ sequence3: sequence3)\n            -> Zip3Sequence<Sequence1, Sequence2, Sequence3> { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Unsafe Async in Swift\nDESCRIPTION: This snippet shows the implementation of the async function as a wrapper around unsafeAsync. It includes an annotation for the compiler to verify thread safety at the call site.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@_semantics(\"swift.concurrent.async\")\npublic func async<RetTy, ArgsTy>(args: ArgsTy, callback: @escaping (ArgsTy) -> RetTy) -> Future<RetTy> {\n  return unsafeAsync(args, callback: callback)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class-Based Linked List Node in Swift\nDESCRIPTION: This code defines a `Node` class for implementing a linked list. Being a class, instances are reference types, and Swift automatically manages their lifetime using reference counting. Accessing properties like `elem.next` involves incrementing and decrementing reference counts, which can introduce performance overhead, especially in tight loops like traversing the list.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Node {\n  var next: Node?\n  var data: Int\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Combining libFuzzer with Address Sanitizer in Swift\nDESCRIPTION: Shows how to compile Swift code with multiple sanitizers enabled simultaneously. This example combines libFuzzer with Address Sanitizer for more comprehensive testing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/libFuzzerIntegration.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n% swiftc -sanitize=fuzzer,address -parse-as-library myfile.swift\n```\n\n----------------------------------------\n\nTITLE: Retroactive Protocol Refinement in Swift\nDESCRIPTION: This example demonstrates a proposed feature for retroactive protocol refinement, where one protocol can be made to conform to another, potentially allowing types conforming to one protocol to automatically conform to another.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_35\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol P {\n  func foo()\n}\n\nprotocol Q {\n  func bar()\n}\n\nextension Q : P { // Make every type that conforms to Q also conforms to P\n  func foo() {    // Implement `P.foo` requirement in terms of `Q.bar`\n    bar()\n  }\n}\n\nfunc f<T: P>(t: T) { ... }\n\nstruct X : Q {\n  func bar() { ... }\n}\n\nf(X()) // okay: X conforms to P through the conformance of Q to P\n```\n\n----------------------------------------\n\nTITLE: Implementing Derivative Operators for Floating-Point Functions in Swift\nDESCRIPTION: Defines differential operators that compute directional derivatives for differentiable functions with floating-point parameters, building on the core valueWithDifferential operator.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_54\n\nLANGUAGE: swift\nCODE:\n```\nfunc valueWithDerivative<T: FloatingPoint, R>(\n    at x: T, of body: @differentiable (T) -> R\n) -> (value: R, derivative: R.TangentVector) where T.TangentVector: FloatingPoint {\n    let (value, df) = valueWithDifferential(at: x, of: body)\n    return (value, df(T.TangentVector(1)))\n}\n\nfunc derivative<T: FloatingPoint, R>(\n    at x: T, of body: @differentiable (T) -> R\n) -> R.TangentVector where T.TangentVector: FloatingPoint {\n    valueWithDerivative(at: x, of: body).derivative\n}\n\nfunc derivative<T: FloatingPoint, R>(\n    of body: @escaping @differentiable (T) -> R\n) -> (T) -> R.TangentVector where T.TangentVector: FloatingPoint {\n    return { x in derivative(at: x, of: body) }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Protocol Requirements with @_implements in Swift\nDESCRIPTION: Demonstrates the use of @_implements attribute to provide separate implementations for requirements with the same name from different protocols. This allows a conforming type to offer distinct implementations for each protocol requirement.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P { func foo() }\n\nprotocol Q { func foo() }\n\nstruct S : P, Q {\n  @_implements(P, foo())\n  func foo_p() {}\n  @_implements(Q, foo())\n  func foo_q() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Conditional Conformance to Generic Adaptor Types in Swift\nDESCRIPTION: Illustrates conditional conformance with a generic `SequenceAdaptor`. The adaptor conforms to `Collection` only when its underlying sequence `S` conforms to `Collection`, and similarly conforms to `MutableCollection` only when `S` conforms to `MutableCollection`. This pattern allows generic wrappers to adopt protocols based on the capabilities of the types they wrap.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nstruct SequenceAdaptor<S: Sequence> : Sequence { }\nextension SequenceAdaptor : Collection where S: Collection { ... }\nextension SequenceAdaptor : MutableCollection where S: MutableCollection { }\n```\n\n----------------------------------------\n\nTITLE: Marking Functions as Differentiable in Swift\nDESCRIPTION: Demonstrates the use of the `@differentiable` attribute to mark function declarations as differentiable. Examples include a simple `cubed` function and a `callAsFunction` method within the `Perceptron` struct extension.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable\nfunc cubed(_ x: Float) -> Float {\n    x * x * x\n}\nextension Perceptron {\n    @differentiable\n    func callAsFunction(_ input: SIMD64<Float>) -> Float {\n        (weight * input).sum() + bias\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Struct with Renamed C++ Overloaded Initializers in Swift\nDESCRIPTION: This Swift struct sample shows application of the '@expose' attribute to rename a specific initializer for C++ bridging. The struct defines two initializers, one positional and one labeled (fromFahrenheit), and exposes the second with a different C++ name to avoid overload ambiguity. Dependencies include the '@expose' attribute and Swift module context.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'Weather'\nstruct Celsius {\n  var temperatureInCelsius: Double\n\n  // FEEDBACK: could provide a constructor here?\n  // NOTE: concern about encouraging people not to use labels\n  init(_ t: Double) { self.temperatureInCelsius = t }\n\n  // FEEDBACK: could the compiler construct the 'initFromFahrenheit' c++ name?\n  @expose(c++, initFromFahrenheit)\n  init(fromFahrenheit fahrenheit: Double) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Inlinable Attribute in Swift\nDESCRIPTION: The `@inlinable` attribute indicates that a function's body may be exposed to other modules, allowing the compiler to inline it across module boundaries for optimization. It is recommended over `@_transparent` if mandatory inlining before diagnostics is not strictly required.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TransparentAttr.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@inlinable\n```\n\n----------------------------------------\n\nTITLE: Using @_objcImplementation Extension for Objective-C Compatibility in Swift\nDESCRIPTION: Demonstrates how to implement Objective-C interfaces and categories in Swift using the @_objcImplementation attribute. This allows for creating Swift implementations that are fully compatible with Objective-C, supporting subclassing from Objective-C code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n@_objcImplementation extension ClassName\n```\n\nLANGUAGE: swift\nCODE:\n```\n@_objcImplementation(CategoryName) extension ClassName\n```\n\n----------------------------------------\n\nTITLE: Move Intrinsic Function Implementation in Swift\nDESCRIPTION: Defines the 'move' intrinsic function which explicitly transfers ownership of a value. While simple in appearance, it has special compiler semantics for controlling value ownership and variable initialization state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nfunc move<T>(_ value: T) -> T {\n  return value\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Function Arguments in Swift Function Declarations - Swift\nDESCRIPTION: This snippet illustrates different approaches to breaking function argument lists that exceed the 80-character limit in Swift function declarations. It explains the problems with placing multiple arguments on the same line after a break and demonstrates the recommended formatting, which places each argument on its own indented line for clarity. Key parameters include generic constraints and functions as arguments. No external dependencies are required. The snippet does not execute but enforces a visual/structural guideline for code contributions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// BAD (completely unreadable)\n@inlinable public func foobar<Result>(_ arg1: Result, arg2: Int, _ arg3: (Result, Element) throws -> Result) rethrows -> Result {\n  ...\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// BAD (arg2 is easily missed)\n@inlinable \npublic func foobar<Result>(\n  _ arg1: Result, arg2: Int,             // ☹️\n  _ arg3: (Result, Element) throws -> Result\n) rethrows -> Result {\n```\n\nLANGUAGE: swift\nCODE:\n```\n// GOOD\n@inlinable\npublic func foobar<Result>(\n  _ arg1: Result, \n  arg2: Int, \n  _ arg3: (Result, Element) throws -> Result\n) rethrows -> Result {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Hopping to Executor in Swift SIL - swift\nDESCRIPTION: This instruction ensures execution of subsequently required instructions on the correct actor's executor in an '@async' Swift function. It verifies executor-binding on the operand, suspends and enqueues to the right executor if the current one doesn't match. Operand types supported include 'Builtin.Executor' and types conforming to the Actor protocol, with lowering handled by the SIL pipeline.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'hop_to_executor' sil-operand\\n\\nhop_to_executor %0 : $T\\n\\n// $T must be Builtin.Executor or conform to the Actor protocol\n```\n\n----------------------------------------\n\nTITLE: Declaring a Stored Variable with Type Annotation in Swift\nDESCRIPTION: This snippet shows the basic declaration of a stored variable named `count` explicitly annotated with the `Int` type. Stored variables require storage allocation (global symbol, object slot, or stack space) and must be initialized before use.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar count : Int\n```\n\n----------------------------------------\n\nTITLE: Importing C functions as computed properties\nDESCRIPTION: Demonstrates how to import C getter and setter functions as Swift computed properties using the swift_name attribute with getter: and setter: prefixes. This creates a more Swift-like API for accessing global state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_19\n\nLANGUAGE: objc\nCODE:\n```\n__attribute__((swift_name(\"getter:globalCounter()\")))\nint getGlobalCounter(void);\n__attribute__((swift_name(\"setter:globalCounter(_:)\")))\nvoid setGlobalCounter(int newValue);\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar globalCounter: Int32 { get set }\n```\n\n----------------------------------------\n\nTITLE: Swift Method Call Resolution Examples\nDESCRIPTION: This code snippet shows examples of method call resolution in Swift, demonstrating how the compiler matches method calls to their declarations based on argument labels.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/KeywordArguments.rst#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nc.foo:bar:bas: // Finds c.foo:bar:bas: (not c.foo or c.foo:bas:bar:)\nc.foo:bas:bar: // Finds c.foo:bas:bar:\nc.foo          // Finds c.foo\n```\n\n----------------------------------------\n\nTITLE: Closure Parameter Naming for Swift Higher-Order Methods - Swift\nDESCRIPTION: Demonstrates the convention for naming closure parameters, particularly 'body', in Swift's higher-order functions linked to collection traversal. This is used when the closure is intended to perform side effects. Code illustrates canonical use within forEach and map methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nfunc map<U>(_ transformation: T->U) -> [U] // not this one\n\nfunc forEach<S: SequenceType>(_ body: (S.Iterator.Element) -> ())\n\n```\n\n----------------------------------------\n\nTITLE: Adding Observing Accessors to an Inherited Property in Swift\nDESCRIPTION: This snippet defines `TrackingColored`, a subclass of `ColorBase`. Instead of fully overriding the inherited `color` property, it adds a `willSet` observer to it. This `willSet` logic (storing `prevColor`) executes *before* the superclass's setter (including its `didSet` observer) is called. This adds behavior without replacing the inherited storage or accessors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nclass TrackingColored : ColorBase {\n  var prevColor : Color?\n\n  var color : Color {\n    willSet {\n      prevColor = color\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Integration Example\nDESCRIPTION: Shows how to import and use C++ functions in Swift code with a wrapper struct.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/GettingStartedWithC++Interop.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport CxxTest\n\npublic struct CxxInterop {\n\n    public func callCxxFunction(n: Int32) -> Int32 {\n        return cxxFunction(n: n)\n    }\n}\n\nprint(CxxInterop().callCxxFunction(n: 7))\n```\n\n----------------------------------------\n\nTITLE: Specifying Fix-Its in Diagnostic Expectations - Plaintext\nDESCRIPTION: This snippet shows how to annotate a source line with an expected compiler error and associated fix-it, using comment syntax recognized by the Swift diagnostic verifier. The fix-it is expressed in double curly braces, indicating a text insertion or replacement at a specific column. The syntax supports precision in automated testing of diagnostics and their automated suggestions. No runtime dependencies are needed, but the Swift diagnostic verifier must parse this syntax to fulfill test expectations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nlet r : Int i = j // expected-error{{consecutive statements}} {{12-12=;}}\n```\n\n----------------------------------------\n\nTITLE: Function Overloading with Throwing Functions in Swift\nDESCRIPTION: Demonstrates that functions cannot be overloaded solely based on whether they throw, but can be overloaded if a parameter is a throwing function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo() {\nfunc foo() throws {\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo(_ callback: () throws -> Bool) {\nfunc foo(_ callback: () -> Bool) {\n```\n\n----------------------------------------\n\nTITLE: Converting Standard C++ Vector to Swift Array\nDESCRIPTION: Shows how to convert a std::vector to a swift::Array using the explicit constructor of swift::Array, which copies the elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_71\n\nLANGUAGE: c++\nCODE:\n```\nauto swiftIntArray = swift::Array<int>(cxxVector);\n```\n\n----------------------------------------\n\nTITLE: Memory Layout Differences in Swift Structs\nDESCRIPTION: Shows how Swift handles memory layout differently from C, demonstrating size and stride concepts with a struct example.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct SwiftStructWithPadding {\n  var x: Int16\n  var y: Int8\n}\n\nprint(MemoryLayout<SwiftStructWithPadding>.size) // 3\nprint(MemoryLayout<SwiftStructWithPadding>.stride) // 4\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Differentiable Function Type Conversions in Swift\nDESCRIPTION: This snippet shows various type conversions between differentiable and non-differentiable function types in Swift, illustrating the subtyping relationships and conversion rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_45\n\nLANGUAGE: swift\nCODE:\n```\nfunc addOne(_ x: Float) -> Float { x + 1 }\nlet _: @differentiable (Float) -> Float = addOne // Okay!\nlet _: @differentiable(linear) (Float) -> Float = addOne // Okay!\n\nlet _: @differentiable(linear) (Float) -> Float = coshf(_:)\n// Error: `coshf(_:)` is from a different module and has not been marked with\n// `@differentiable`.\n\nfunc mySin(_ x: Float) -> Float { sin(x) * 2 }\nlet _: @differentiable (Float) -> Float = mySin // Okay!\nlet _: @differentiable(linear) (Float) -> Float = mySin\n// Error: When differentiating `mySin(_:)` as a linear map, `sin` is not linear.\n\nfunc addOneViaInt(_ x: Float) -> Float { Float(Int(x) + 1) }\nlet _: @differentiable (Float) -> Float = addOneViaInt\n// Error: When differentiating `addOneViaInt(_:)`, `Int(x)` is not differentiable.\n```\n\n----------------------------------------\n\nTITLE: Deallocating Stack Memory Allocated with alloc_stack in Swift SIL - swift\nDESCRIPTION: The 'dealloc_stack' instruction deallocates memory that was previously allocated with 'alloc_stack', requiring that the memory be either destroyed or left uninitialized before execution. The operand must refer to a result of an 'alloc_stack' instruction, maintaining correct stack discipline.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'dealloc_stack' sil-operand\\n\\ndealloc_stack %0 : $*T\\n// %0 must be of $*T type\n```\n\n----------------------------------------\n\nTITLE: Implementing Differentiable for Array in Swift\nDESCRIPTION: Extension that makes Array conform to Differentiable when its elements are Differentiable. Defines a custom TangentVector struct and implements the required move(by:) method for arrays.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n// struct Array<Element>\nextension Array: Differentiable where Element: Differentiable {\n    // Note: `Array.TangentVector` cannot be `Array` because `Array.+` is used for\n    // concatenation and therefore cannot satisfy the `AdditiveArithmetic`\n    // conformance constraint.\n    public struct TangentVector: Differentiable, AdditiveArithmetic {\n        public typealias TangentVector = Self\n        @differentiable\n        public var elements: [Element.TangentVector]\n        @differentiable\n        public init(_ elements: [Element.TangentVector]) { self.elements = elements }\n        ...\n    }\n\n    public mutating func move(by offset: TangentVector) {\n        for i in indices {\n            self[i].move(by: Element.TangentVector(offset.elements[i]))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Parameterized Extensions in Swift\nDESCRIPTION: Demonstrates how extensions could be parameterized, allowing structural pattern matching on types and extending generic types with specific element types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nextension<T> Array where Element == T? {\n  var someValues: [T] {\n    var result = [T]()\n    for opt in self {\n      if let value = opt { result.append(value) }\n    }\n   return result\n  }\n}\n\nextension<T> Sequence where Element == T? {\n  var someValues: [T] {\n    var result = [T]()\n    for opt in self {\n      if let value = opt { result.append(value) }\n    }\n   return result\n  }\n}\n\nextension<T> Array<T?> {\n  var someValues: [T] {\n    var result = [T]()\n    for opt in self {\n      if let value = opt { result.append(value) }\n    }\n   return result\n  }\n}\n\nextension Array<String> {\n  func makeSentence() -> String {\n    // uppercase first string, concatenate with spaces, add a period, whatever\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a Swift Enum Case from C++\nDESCRIPTION: This snippet shows how to create (construct) a value of a Swift enum (CompassDirection) from C++. The static case method is used as a value constructor after proper header inclusion. Example demonstrates swift-to-C++ enum value import.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_21\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Navigation-Swift.h\"\n\nvoid testConstructEnumValue() {\n  auto direction = CompassDirection::north();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring C++ Standard Requirements\nDESCRIPTION: Sets up C++17 as the minimum standard for building Swift, with checks to ensure the user-provided C++ standard is not below the minimum requirement. Also disables C++ extensions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Use C++17.\nset(SWIFT_MIN_CXX_STANDARD 17)\n\n# Unset CMAKE_CXX_STANDARD if it's too low and in the CMakeCache.txt\nif($CACHE{CMAKE_CXX_STANDARD} AND $CACHE{CMAKE_CXX_STANDARD} LESS ${SWIFT_MIN_CXX_STANDARD})\n  message(WARNING \"Resetting cache value for CMAKE_CXX_STANDARD to ${SWIFT_MIN_CXX_STANDARD}\")\n  unset(CMAKE_CXX_STANDARD CACHE)\nendif()\n\n# Allow manually specified CMAKE_CXX_STANDARD if it's greater than the minimum\n# required C++ version\nif(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${SWIFT_MIN_CXX_STANDARD})\n  message(FATAL_ERROR \"Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the minimum C++ standard ${SWIFT_MIN_CXX_STANDARD}\")\nendif()\n\nset(CMAKE_CXX_STANDARD ${SWIFT_MIN_CXX_STANDARD} CACHE STRING \"C++ standard to conform to\")\nset(CMAKE_CXX_STANDARD_REQUIRED YES)\nset(CMAKE_CXX_EXTENSIONS NO)\n```\n\n----------------------------------------\n\nTITLE: Case Conversion in Cocoa and Swift\nDESCRIPTION: Demonstrates uppercase and lowercase conversion methods in Cocoa and Swift. Swift uses more concise naming conventions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_24\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSString *)uppercaseString;\n- (NSString *)uppercaseStringWithLocale:(NSLocale *)locale;\n- (NSString *)lowercaseString;\n- (NSString *)lowercaseStringWithLocale:(NSLocale *)locale;\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc toUpper() -> String\nfunc toLower() -> String\n```\n\n----------------------------------------\n\nTITLE: Conceptual Request Evaluation Chain for Dependency Tracking (Text)\nDESCRIPTION: Depicts a hypothetical sequence of request evaluations within the Request-Evaluator system, starting with a 'dependency source' (`TypeCheckSourceFileRequest`) and leading to a 'dependency sink' (`DirectLookupRequest`). This illustrates how the system automatically associates sinks with the active source scope (`File.swift`) to record dependency information for incremental compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/RequestEvaluator.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nTypeCheckSourceFileRequest(File.swift) -> ... -> DirectLookupRequest(Foo, \"bar\")\n```\n\n----------------------------------------\n\nTITLE: Basic Higher-Order Derivative Function Call in Swift\nDESCRIPTION: Demonstrates calling multiple derivative operators on a function that raises x to the power of 3. Shows the nested structure of derivative calls.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_68\n\nLANGUAGE: swift\nCODE:\n```\nlet f = derivative(of: derivative(of: derivative(of: { x in pow(x, 3.0) })))\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift's Non-mutating Functions\nDESCRIPTION: This example shows how Swift's non-mutating functions provide stronger guarantees than C++ const member functions, disallowing mutation of self.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_42\n\nLANGUAGE: swift\nCODE:\n```\nstruct Example {\n  private var value: Int = 0\n  mutating func mutatingFunction() { value = 42 }\n  func nonMutatingFunction() {\n    // value = 42 // would not compile\n    print(value) // OK\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Concatenation in Cocoa and Swift\nDESCRIPTION: Compares string concatenation methods between Cocoa and Swift. Swift provides both operator-based and method-based approaches.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_21\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSString *)stringByAppendingString:(NSString *)aString;\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc + (lhs: String, rhs: String) -> String\nfunc += (lhs: inout String, rhs: String)\nfunc append(_ suffix: String)\n```\n\n----------------------------------------\n\nTITLE: Defining Function Type with Pack Parameter in SIL\nDESCRIPTION: Example of a function type in SIL that takes a pack as a parameter. The @pack_in attribute is used to indicate that the pack is passed by address.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_10\n\nLANGUAGE: SIL\nCODE:\n```\n%fn : $@convention(thin) (@pack_in Pack{Int, Float}) -> ()\n```\n\n----------------------------------------\n\nTITLE: Accessing String Length and Characters in Swift\nDESCRIPTION: Demonstrates how to access string length and individual characters in Swift, as an alternative to NSString's length and characterAtIndex: methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nfor j in 0...s.bytes.length {\n  doSomethingWith(s.bytes[j])\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Using nonisolated Methods for Protocol Conformance in Swift\nDESCRIPTION: Making actor-isolated methods usable from anywhere by marking them as nonisolated, which restricts them from accessing actor-specific state or operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/conformance-isolation.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nstruct MyData: P {\n  nonisolated func f() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Assign By Wrapper Instruction in SIL\nDESCRIPTION: Specifies the assign_by_wrapper instruction for delegated assignments, supporting property wrapper initialization and assignment operations through delegate functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_36\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'assign_by_wrapper' sil-operand 'to' mode? sil-operand ',' 'init' sil-operand ',' 'set' sil-operand\n\nmode ::= '[init]' | '[assign]' | '[assign_wrapped_value]'\n\nassign_by_wrapper %0 : $S to %1 : $*T, init %2 : $F, set %3 : $G\n```\n\n----------------------------------------\n\nTITLE: C++ Interface for Swift Class Hierarchy\nDESCRIPTION: Demonstrates the C++ interface generated for the Swift class hierarchy, preserving inheritance relationships.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_34\n\nLANGUAGE: c++\nCODE:\n```\nclass Vehicle { ... };\nclass Bicycle final : public Vehicle {};\n```\n\n----------------------------------------\n\nTITLE: Objective-C Block Callback and Swift Async Bridging Example - objc\nDESCRIPTION: Demonstrates Objective-C class and method definitions for a callback-based API and illustrates bridging them into Swift's async/await paradigm via a Swift extension and lowering to SIL. Shows usage of completion blocks carrying results, and highlights how region isolation is maintained between non-Sendable value origins and their return paths.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_12\n\nLANGUAGE: objc\nCODE:\n```\n// objc code\\n@interface CallbackData : NSObject\\n@end\\n\\n@interface Klass : NSObject\\n\\n- (void)loadDataWithCompletionHandler:(void (^)(CallbackData * _Nullable, NSError * _Nullable))completionHandler;\\n\\n@end\\n\\n// swift code\\nextension Klass {\\n  func loadCallbackData() async throws -> sending CallbackData {\\n    try await loadData()\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal Members in Public Types in Swift Standard Library\nDESCRIPTION: Example showing how to declare internal implementation details within public types using the leading underscore rule. This ensures these members are recognized as implementation details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControlInStdlib.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\npublic struct Dictionary {\n  var _representation: _DictionaryRepresentation\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Differentiable Protocol Requirements in Swift\nDESCRIPTION: Shows how to override a differentiable protocol requirement with a more specific @differentiable attribute in a protocol hierarchy. The example defines Module and Layer protocols with different differentiability specifications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\npublic protocol Module: Differentiable {\n    associatedtype Input\n    associatedtype Output: Differentiable\n    @differentiable(wrt: self)\n    func callAsFunction(_: Input) -> Output\n}\n\npublic protocol Layer: Module where Input: Differentiable {\n    @differentiable(wrt: (self, input))\n    func callAsFunction(_: Input) -> Output\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive Protocol Constraints in Swift\nDESCRIPTION: Demonstrates how to require an associated type to conform to its enclosing protocol, which is currently not possible but proposed as a feature.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Sequence {\n  associatedtype Iterator : IteratorProtocol\n  ...\n  associatedtype SubSequence : Sequence   // currently ill-formed, but should be possible\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Composition Syntax in Swift\nDESCRIPTION: Examples of protocol composition syntax using protocol<> and proposed Any<> alternatives.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_27\n\nLANGUAGE: Swift\nCODE:\n```\nvar x: protocol<NSCoding, NSCopying>\ntypealias Any = protocol<>\nvar x: Any<NSCoding, NSCopying>\n```\n\n----------------------------------------\n\nTITLE: Using Swift Properties in C++\nDESCRIPTION: Demonstrates how to access and modify Swift properties from C++ using getter and setter methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_38\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Weather-Swift.h\"\n#include <iostream>\n\nvoid printWeatherInformation(const Weather::WeatherInformation &info) {\n  std::cout << \"Temperature (C): \" << info.getTemperature() << \"\\n\";\n  std::cout << \"Temperature (F): \" << info.getTemperatureInFahrenheit() << \"\\n\";\n}\n\nvoid updateWeather(Weather::WeatherInformation &info) {\n  info.setTemperature(25);\n}\n```\n\n----------------------------------------\n\nTITLE: Single-line vs. Multi-line Argument Formatting in Function Declarations - Swift\nDESCRIPTION: This snippet contrasts single-line and multi-line formatting in Swift function parameter lists. It suggests that while arguments that fit within the line limit may remain on one line, it is acceptable—and sometimes preferable—for clarity to place each argument on its own line. Examples use a generic parsing function with custom constraints and demonstrate consistent spacing and indentation. The snippet serves as an instructional formatting guideline.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// GOOD:\n@_alwaysEmitIntoClient\ninternal func _parseIntegerDigits<Result: FixedWidthInteger>(\n  ascii codeUnits: UnsafeBufferPointer<UInt8>, radix: Int, isNegative: Bool\n) -> Result? {\n  ...\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// ALSO GOOD:\n@_alwaysEmitIntoClient\ninternal func _parseIntegerDigits<Result: FixedWidthInteger>(\n  ascii codeUnits: UnsafeBufferPointer<UInt8>, \n  radix: Int, \n  isNegative: Bool\n) -> Result? {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Runtime Error Object Handling Entry Points (Symbols)\nDESCRIPTION: Lists internal runtime functions for managing Swift's `ErrorType` existential, which uses a special representation, particularly for bridging with `NSError`/`CFError` on Objective-C platforms (`ObjC-only`). Includes functions for allocation (`_swift_allocError`), deallocation (`_swift_deallocError`), reference counting (`_swift_errorRetain`, `_swift_errorRelease`), retrieving the underlying value (`_swift_getErrorValue`), and bridging (`_swift_bridgeErrorTypeToNSError`). `ABI TODO` notes planned `_unsynchronized` and `_n` variants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_4\n\nLANGUAGE: Symbols\nCODE:\n```\n00000000000268e0 T _swift_allocError\n0000000000026d50 T _swift_bridgeErrorTypeToNSError\n0000000000026900 T _swift_deallocError\n0000000000027120 T _swift_errorRelease\n0000000000027100 T _swift_errorRetain\n0000000000026b80 T _swift_getErrorValue\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unique Underlying Type Requirement for Opaque Types in Swift\nDESCRIPTION: This snippet demonstrates the requirement for functions with opaque return types to have a unique underlying type across all return statements. It shows both incorrect and correct implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/opaque-type-inference.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(bar: Bool) -> some Equatable { // error: function declares an opaque return type, but the return statements in its body do not have matching underlying types\n  if bar {\n    return \"hello, world!\" // note: return statement has underlying type 'String'\n  } else {\n    return 1 // note: return statement has underlying type 'Int'\n  }\n}\n\nfunc bar(baz: Bool) -> some Equatable { // OK, both branches of the if statement return a value of the same underlying type, Int.\n  if baz {\n    return 100\n  } else {\n    return 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Standard Library Bridging Functions for std::vector\nDESCRIPTION: Functions provided by Swift's C++ support module that convert between std::vector and Swift Array types. These functions handle the necessary type conversions for bridging.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_71\n\nLANGUAGE: swift\nCODE:\n```\n// Swift standard library, C++ support module.\n\nfunc StdVectorToArray<T>(_ vector: std.vector<T>) -> [T]\nfunc ArrayToStdVector<T>(_ array: [T]) -> std.vector<T>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Metatype Types (`.Type`, `.Protocol`) and Generics in Swift\nDESCRIPTION: Illustrates the types of metatypes in Swift and their interaction with generics. For a struct `S`, `S.self` has type `S.Type`. For a protocol `P`, `P.self` has type `P.Protocol`. The `type(of:)` function returns the metatype of an instance. A generic function `f<G>` shows that the metatype `G.self` always has the type `G.Type`, even when `G` represents a protocol type like `P`, where `G.Type` becomes another name for `P.Protocol`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Metatype of a struct type\nstruct S: P {}\nS.self is S.Type // always true\nS.Type.self is S.Type.Type // always true\nlet s = S()\ntype(of: s) == S.self // always true\ntype(of: S.self) == S.Type.self\n\n// Metatype of a protocol (or other existential) type\nprotocol P {}\nP.self is P.Protocol // always true\n// P.Protocol is a metatype, not a protocol, so:\nP.Protocol.self is P.Protocol.Type // always true\nlet p = s as! P\ntype(of: p) == P.self // always true\n\n// Metatype for a type bound to a generic type variable\nf(s) // Bind G to S\nf(p) // Bind G to P\nfunc f<G>(_ g: G) {\n   G.self is G.Type // always true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining _BuiltinInOutWritebackConvertible Protocol in Swift\nDESCRIPTION: Protocol definition for more complex inout conversions requiring writeback operations. This protocol extends the functionality of _BuiltinInOutAddressConvertible by adding methods to create, convert, and commit writeback values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nprotocol _BuiltinInOutWritebackConvertible {\n  /// The original type from which inout conversions are allowed to the\n  /// conforming type.\n  typealias InOutType\n\n  /// The type of the temporary writeback whose address is used to construct\n  /// the converted value.\n  typealias WritebackType\n\n  /// Get the initial value the writeback temporary should have on entry to\n  /// the call.\n  class func _createWriteback(inout InOutType) -> WritebackType\n\n  /// Create a value of the conforming type using the address of the writeback\n  /// temporary.\n  class func _convertFromWritebackAddress(_ p: Builtin.RawPointer) -> Self\n\n  /// Write the writeback temporary back to the original value.\n  class func _commitWriteback(inout InOutType, WritebackType)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Value Semantics with Copy-on-Write in Swift\nDESCRIPTION: This example demonstrates Swift array's value semantics through copy-on-write behavior. When an array is assigned to another variable and then modified, the original array remains unchanged.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Arrays.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar a = [1, 2, 3]\nlet b = a\na[1] = 42\nprint(b[1]) // prints \"2\"\n```\n\n----------------------------------------\n\nTITLE: Capturing Property Values in Swift Closures\nDESCRIPTION: Example of capturing a specific property value instead of the entire object in a Swift closure. This can help avoid retain cycles and allows choosing between instantaneous or current property values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nbutton3.setAction { capture(self.model).addProfitStep() }\n```\n\n----------------------------------------\n\nTITLE: LeNet-5 CNN Implementation in Swift\nDESCRIPTION: Implementation of the LeNet-5 convolutional neural network architecture for handwritten digit classification using TensorFlow.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_63\n\nLANGUAGE: swift\nCODE:\n```\nimport TensorFlow\n\nstruct LeNet: Layer, @memberwise Differentiable {\n    var conv1 = Conv2D<Float>(filterShape: (5, 5, 1, 6), padding: .same, activation: relu)\n    var pool1 = AvgPool2D<Float>(poolSize: (2, 2), strides: (2, 2))\n    var conv2 = Conv2D<Float>(filterShape: (5, 5, 6, 16), activation: relu)\n    var pool2 = AvgPool2D<Float>(poolSize: (2, 2), strides: (2, 2))\n    var flatten = Flatten<Float>()\n    var fc1 = Dense<Float>(inputSize: 400, outputSize: 120, activation: relu)\n    var fc2 = Dense<Float>(inputSize: 120, outputSize: 84, activation: relu)\n    var fc3 = Dense<Float>(inputSize: 84, outputSize: 10, activation: softmax)\n\n    @differentiable\n    func callAsFunction(_ input: Tensor<Float>) -> Tensor<Float> {\n        let convolved = pool2(conv2(pool1(conv1(input))))\n        return fc3(fc2(fc1(flatten(convolved))))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Throwing Functions in Swift\nDESCRIPTION: Demonstrates how to document errors thrown by functions using the Throws field, which should describe the types of errors and their triggering conditions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DocumentationComments.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- Throws: ...\n```\n\n----------------------------------------\n\nTITLE: Using Swift Property Attribute for C++ Getter/Setter Pairs\nDESCRIPTION: This example shows how to use a custom attribute in C++ to explicitly request property synthesis in Swift, handling cases where getter and setter types don't match exactly.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_44\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\n// New attribute.\n#define SWIFT_PROPERTY(type, name) __attribute__((swift_property(#type, #name)))\n\nclass Manager {\npublic:\n  std::string_view getName() const SWIFT_PROPERTY(std::string, name);\n  void setName(std::string newName) SWIFT_PROPERTY(std::string, name);\n\n  std::span<const Employee> getReports() const;\n  void setReports(std::vector<Employee> newReports);\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct Manager {\n  // Property is synthesized as requested by the annotation.\n  public var name: std.string { get set }\n\n  // Property is not synthesized because getter and setter operate on\n  // different types.\n  public func getReports() -> std.span<const<Employee>>\n  public func setReports(_ newReports: std.vector<Employee>)\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Moveonly Array Structure in Swift\nDESCRIPTION: Example of declaring a moveonly context for Array type, demonstrating how to handle non-copyable types in generic contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nmoveonly struct Array<Element> {\n  // Element and Array<Element> are not assumed to be copyable here\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Performance Constraints on SIL Functions in Swift (BNF)\nDESCRIPTION: Defines attributes for specifying function-level performance constraints, including 'no_locks', 'no_allocation', and the boolean '[perf_constraint]'. They restrict which runtime behaviors (like taking locks or performing allocations) are allowed, affecting both optimizer and code generator. Use in safety- or real-time-critical code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_17\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[' performance-constraint ']'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nperformance-constraint :: 'no_locks'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nperformance-constraint :: 'no_allocation'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[perf_constraint]'\n```\n\n----------------------------------------\n\nTITLE: Declaring a Generic Dictionary Class in Swift\nDESCRIPTION: This code shows the declaration of Swift's generic Dictionary class with two type parameters: Key (which must conform to Hashable) and Value. This demonstrates how Swift implements generic types with constraints on type parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass Dictionary<Key : Hashable, Value> {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Shared Function Parameters in Swift\nDESCRIPTION: Example of marking function parameters as 'shared', indicating they are accessed as read-only during the function execution. This enables operations like comparison on non-copyable types without claiming ownership.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc ==(left: shared String, right: shared String) -> Bool {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Compilation Target Flags\nDESCRIPTION: Complete set of flags required for cross-compilation, including target specification, system root, and SDK location.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CrossCompilationModel.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n1. -target\n2. -sysroot\n3. -sdk\n```\n\n----------------------------------------\n\nTITLE: Declaring a Protocol Type Variable in Swift\nDESCRIPTION: Demonstrates declaring a variable with a protocol type in Swift, creating an existential type. This shows how a protocol name can be used as a type annotation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/nominal-types.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nlet value: MyProtocol\n```\n\n----------------------------------------\n\nTITLE: Explaining Recursive Function Rules with Opaque Return Types in Swift\nDESCRIPTION: This snippet illustrates the rules for recursive functions with opaque return types. It shows examples of invalid recursive implementations and a correct implementation that satisfies the requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/opaque-type-inference.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(_ x: Int) -> some Equatable { // error: function declares an opaque return type, but has no return statements in its body from which to infer an underlying type\n  // Not allowed because there aren't any non-recursive returns to infer the underlying type from.\n  return foo(x+1)\n}\n\nstruct EquatableWrapper<T: Equatable>: Equatable { var value: T }\nfunc foo() -> some Equatable { // error: function opaque return type was inferred as 'EquatableWrapper<some Equatable>', which defines the opaque type in terms of itself\n  // Not allowed because the use of EquatableWrapper creates an infinitely recursive underlying type: EquatableWrapper<EquatableWrapper<EquatableWrapper<...>>>...>\n  return EquatableWrapper(value: foo())\n}\n\nfunc bar(_ x: Int) -> some Equatable { // OK, the underlying type can be inferred from the second return statement.\n  if x > 0 {\n    return bar(x-1)\n  } else {\n    return x\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Swift Libraries to Android Device\nDESCRIPTION: Series of adb commands to push the Swift standard library and dependencies to an Android device. These are required for running Swift applications on the device.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Android.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswiftCore.so /data/local/tmp\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswiftAndroid.so /data/local/tmp\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswiftSwiftOnoneSupport.so /data/local/tmp\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswiftRemoteMirror.so /data/local/tmp\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswift_Concurrency.so /data/local/tmp\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswift_RegexParser.so /data/local/tmp\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libswift_StringProcessing.so /data/local/tmp\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libdispatch.so /data/local/tmp\n$ adb push build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift/android/libBlocksRuntime.so /data/local/tmp\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching Examples in Swift\nDESCRIPTION: Examples demonstrating string pattern matching operations using a unified matcher protocol, including string literals, regex, and character set matching.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nif let found = s.firstMatch(%\"searchString\") { ... }\nif let found = s.firstMatch(someRegex) { ... }\n\nfor m in s.allMatches((%\"searchString\"), case: .insensitive) { ... }\nfor m in s.allMatches(someRegex) { ... }\n\nlet items = s.split(separatedBy: \", \")\nlet tokens = s.split(separatedBy: CharacterSet.whitespace)\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Copy-on-Write (COW) Box in Swift\nDESCRIPTION: This snippet presents a custom implementation of Copy-on-Write semantics using a final `Ref<T>` class to hold the actual data and a `Box<T>` struct as the value-type wrapper. The `Box`'s `value` property setter checks if the underlying `Ref` instance is uniquely referenced using `isKnownUniquelyReferenced` before mutating. If not unique, it creates a new `Ref` instance with the new value, effectively copying the data.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nfinal class Ref<T> {\n  var val: T\n  init(_ v: T) { val = v }\n}\n\nstruct Box<T> {\n  var ref: Ref<T>\n  init(_ x: T) { ref = Ref(x) }\n\n  var value: T {\n    get { return ref.val }\n    set {\n      if !isKnownUniquelyReferenced(&ref) {\n        ref = Ref(newValue)\n        return\n      }\n      ref.val = newValue\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reference Counting Example: Original Loop in Swift IL\nDESCRIPTION: A simple loop example in SIL (Swift Intermediate Language) showing retain/release operations inside a loop that could potentially be optimized by hoisting them outside the loop.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_7\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  br bb1\n\nbb1:\n  strong_retain %0 : $Builtin.NativeObject\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject\n  cond_br ..., bb2, bb3\n\nbb2:\n  cond_br ..., bb1, bb4\n\nbb3:\n  br bb5\n\nbb4:\n  br bb5\n\nbb6:\n  return ...\n```\n\n----------------------------------------\n\nTITLE: Using Unowned References to Break Reference Cycles\nDESCRIPTION: This snippet shows how to use an unowned reference to prevent a reference cycle between Customer and CreditCard instances. When the john variable is set to nil, both instances are properly deinitialized.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/3.txt#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar john: Customer?\n\njohn = Customer(name: \"John Appleseed\")\njohn!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)\n\njohn = nil\n// Prints \"John Appleseed is being deinitialized\"\n// Prints \"Card #1234567890123456 is being deinitialized\"\n```\n\n----------------------------------------\n\nTITLE: NSDocument Subclass Example in Swift\nDESCRIPTION: Demonstrates potential initialization issues when subclassing Objective-C classes like NSDocument without proper initializer implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InitializerInheritance.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass MyDocument : NSDocument {\n  var title: String\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Integer Formatting with Radix and Padding in Swift\nDESCRIPTION: Provides a protocol and a struct for formatting integers with custom radix, fill, and width parameters, demonstrating advanced stream-based formatting. CustomStringConvertibleInteger defines arithmetic requirements and a flexible format method. RadixFormat writes integers in the desired radix, filling and padding as needed. Input: integer and formatting options. Output: formatted value written to a stream or as a TextOutputStreamable. Dependencies: TextOutputStreamable, ExpressibleByIntegerLiteral, Comparable, and SignedNumber. Limitation: User must implement required numeric methods for custom types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nprotocol CustomStringConvertibleInteger\n  : ExpressibleByIntegerLiteral, Comparable, SignedNumber, CustomStringConvertible {\n  func %(lhs: Self, rhs: Self) -> Self\n  func /(lhs: Self, rhs: Self) -> Self\n  constructor(x: Int)\n  func toInt() -> Int\n\n  func format(_ radix: Int = 10, fill: String = \" \", width: Int = 0)\n    -> RadixFormat<This> {\n\n    return RadixFormat(this, radix: radix, fill: fill, width: width)\n  }\n}\n\nstruct RadixFormat<T: CustomStringConvertibleInteger> : TextOutputStreamable {\n  var value: T, radix = 10, fill = \" \", width = 0\n\n  func writeTo<S: TextOutputStream>(_ target: [inout] S) {\n    _writeSigned(value, &target)\n  }\n\n  // Write the given positive value to stream\n  func _writePositive<T:CustomStringConvertibleInteger, S: TextOutputStream>(\n    _ value: T, stream: [inout] S\n  ) -> Int {\n    if value == 0 { return 0 }\n    var radix: T = T.fromInt(self.radix)\n    var rest: T = value / radix\n    var nDigits = _writePositive(rest, &stream)\n    var digit = UInt32((value % radix).toInt())\n    var baseCharOrd : UInt32 = digit <= 9 ? '0'.value : 'A'.value - 10\n    stream.append(String(UnicodeScalar(baseCharOrd + digit)))\n    return nDigits + 1\n  }\n\n  func _writeSigned<T:CustomStringConvertibleInteger, S: TextOutputStream>(\n    _ value: T, target: [inout] S\n  ) {\n    var width = 0\n    var result = \"\"\n\n    if value == 0 {\n      result = \"0\"\n      ++width\n    }\n    else {\n      var absVal = abs(value)\n      if (value < 0) {\n        target.append(\"-\")\n        ++width\n      }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid and Invalid Index Usage in Swift Collections\nDESCRIPTION: Illustrates the properties of `startIndex` and `endIndex` in Swift collections. Comparing `startIndex` and `endIndex` (e.g., `c.startIndex != c.endIndex`) is valid for checking non-emptiness. However, attempting to access an element using `c[c.endIndex]` is an error because `endIndex` represents the position *after* the last valid element.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nif c.startIndex != c.endIndex { } // OK\nc[c.endIndex]                     // Oops! (index out-of-range)\n```\n\n----------------------------------------\n\nTITLE: Non-Minimal Generic Signature with Redundant Constraints\nDESCRIPTION: An example of a non-minimal generic signature that contains redundant constraints. Both C1.Element: Equatable and C2.Element: Equatable are redundant given the other constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n<C1, C2 where C1: Collection, C2: Collection, C1.Element: Equatable,\n C1.Element == C2.Element, C2.Element: Equatable>\n```\n\n----------------------------------------\n\nTITLE: Consuming Iteration Example in Swift\nDESCRIPTION: Demonstrates a consuming iteration pattern using the 'owned' keyword, which takes ownership of each element from a sequence. This style is used when working with non-copyable types or when elements need to be transferred to another collection.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfor owned employee in company.employees {\n  newCompany.employees.append(employee)\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Erasure and Contextual Naming Conventions in Swift - Swift\nDESCRIPTION: This snippet demonstrates specific prefix and suffix naming conventions like 'Any', 'Custom', 'InPlace', 'with', 'Pointer', and 'unsafe', used within the Swift Standard Library for type erasure, protocol specialization, mutating methods, closure execution, reference-like semantics, and unsafe operations, respectively. It shows function and type declarations illustrating these conventions. No special dependencies are required except a basic Swift environment.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nextension Set {\n  func union(_ other: Set) -> Set\n  mutating func unionInPlace(_ other: Set)\n}\n\ns.withCString {\n  let fd = fopen($0)\n  ...\n} // don't use that pointer after the closing brace\n\n```\n\n----------------------------------------\n\nTITLE: Importing C Structs in Swift\nDESCRIPTION: Shows how C structs are mapped to Swift structs with stored properties for regular fields and computed properties for bitfields. Swift automatically generates default and elementwise initializers for these imported structs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_23\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\nstruct Point {\n  int x;\n  int y;\n};\n\nstruct Line {\n  struct Point start;\n  struct Point end;\n  unsigned int brush : 4;\n  unsigned int stroke : 3;\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nstruct Point {\n  var x: CInt { get set }\n  var y: CInt { get set }\n  init()\n  init(x: CInt, y: CInt)\n}\n\nstruct Line {\n  var start: Point { get set }\n  var end: Point { get set }\n  var brush: CUnsignedInt { get set }\n  var stroke: CUnsignedInt { get set }\n\n  // Default initializer that sets all properties to zero.\n  init()\n\n  // Elementwise initializer.\n  init(start: Point, end: Point, brush: CUnsignedInt, stroke: CUnsignedInt)\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over String Characters in Swift\nDESCRIPTION: Shows how to iterate over characters in a Swift String using indices() method, providing similar functionality to NSString's range methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nfor i in someString.indices() {\n  doSomethingWith(someString[i])\n}\n\nvar (i, j) = someString.indices().bounds\nwhile (i != j) {\n  doSomethingElseWith(someString[i])\n  ++i\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Return Values in Swift\nDESCRIPTION: Shows how to document the return value of a function or method using the Returns field. Multiple Returns items can be specified but only the last one appears in Xcode QuickHelp.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DocumentationComments.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Returns: ...\n```\n\n----------------------------------------\n\nTITLE: Including CMake Utilities and Enabling Swift for Host Compiler\nDESCRIPTION: Includes various CMake utilities and checks if Swift language is available for the host compiler build. If Swift compiler is found, it enables Swift language support for the build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# First include general CMake utilities.\ninclude(SwiftUtils)\ninclude(CheckSymbolExists)\ninclude(CMakeDependentOption)\ninclude(CheckLanguage)\ninclude(GNUInstallDirs)\ninclude(SwiftCompilerCapability)\ninclude(FetchContent)\n\n# Enable Swift for the host compiler build if we have the language. It is\n# optional until we have a bootstrap story.\ncheck_language(Swift)\nif(CMAKE_Swift_COMPILER)\n  # we are not interested in logging any Swift module used\n  # when configuring the build system -- those are not useful\n  # since they will not contribute to the build of the compiler itself\n  unset(ENV{SWIFT_LOADED_MODULE_TRACE_FILE})\n\n  enable_language(Swift)\n  set(DEFAULT_SWIFT_MIN_RUNTIME_VERSION \"${CMAKE_Swift_COMPILER_VERSION}\")\nelse()\n  message(WARNING \"Swift compiler not found on path.\n  Cannot build compiler sources written in Swift.\n  If this is unexpected, please pass the path to the swiftc binary by defining the `CMAKE_Swift_COMPILER` variable.\")\n  set(DEFAULT_SWIFT_MIN_RUNTIME_VERSION)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Span Usage Example\nDESCRIPTION: Demonstrates how C++ span functions are imported into Swift using the mutable and const span types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_81\n\nLANGUAGE: c++\nCODE:\n```\nstd::span<int> GetMutableIntSpan();\nstd::span<const int> GetConstIntSpan();\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc GetMutableIntSpan() -> std.mutable_span<Int>\nfunc GetConstIntSpan() -> std.const_span<Int>\n```\n\n----------------------------------------\n\nTITLE: C Nullability Annotations Imported to Swift\nDESCRIPTION: The Swift translation of C functions with nullability annotations. Both functions with manually marked pointers and functions using assume_nonnull are imported identically in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nfunc Func1(\n  _ x: UnsafeMutablePointer<CInt>,\n  _ y: UnsafeMutablePointer<CInt>,\n  _ z: UnsafeMutablePointer<CInt>?\n)\n\nfunc Func2(\n  _ x: UnsafeMutablePointer<CInt>,\n  _ y: UnsafeMutablePointer<CInt>,\n  _ z: UnsafeMutablePointer<CInt>?\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Local Ephemeral Bindings in Swift\nDESCRIPTION: Examples of the proposed syntax for creating local inout and shared bindings. This allows abstracting over storage without using closures, enabling direct access to mutable storage or shared access to values without copying.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ninout root = &tree.root\n\nshared elements = self.queue\n```\n\n----------------------------------------\n\nTITLE: Declaring Consuming Methods in Swift\nDESCRIPTION: Example of marking a method as 'consuming', which causes 'self' to be passed as an owned value. This allows methods to consume the instance they're called on, useful for implementing move semantics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nconsuming func moveElements(into collection: inout [Element]) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Swift Protocol for C++ Class Template\nDESCRIPTION: This snippet demonstrates how to synthesize a Swift protocol for a C++ class template to enable generic usage across specializations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_66\n\nLANGUAGE: swift\nCODE:\n```\nprotocol MyClassTemplateProtocol {\n  associatedtype T\n  func func1(_ t: T)\n}\n\nstruct MyClassTemplate<T> : MyClassTemplateProtocol {}\n\nfunc useGeneric<SomeSpecialization>(_ classTemplate: SomeSpecialization, _ t: SomeSpecialization.T)\n  where SomeSpecialization: MyClassTemplateProtocol\n{\n  classTemplate.func1(t)\n}\n\nfunc useConcrete() {\n  var classTemplate = MyClassTemplate<Int32>()\n  classTemplate.func1(0)\n  useGeneric(classTemplate, 0)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Copy-on-Write (COW) in Swift Arrays\nDESCRIPTION: This snippet illustrates Swift's Copy-on-Write (COW) mechanism for arrays. Assigning array `c` to `d` does not immediately copy the underlying data. A copy only occurs when `d` is mutated (e.g., by appending an element), ensuring that `c` remains unchanged.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar c: [Int] = [ ... ]\nvar d = c        // No copy will occur here.\nd.append(2)      // A copy *does* occur here.\n```\n\n----------------------------------------\n\nTITLE: Default Implementation of Mutating Operation\nDESCRIPTION: Example showing how a mutating version of an operation can be implemented using its non-mutating counterpart.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc opInPlace(x: inout T, y: U) {\n  x = op(x, y)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Default Generic Arguments in Swift Types\nDESCRIPTION: Shows how a generic type (`Promise`) can define a default type (`Error`) for one of its generic parameters (`Reason`). This allows omitting the type argument when declaring variables (`p1`) if the default is sufficient, while still allowing explicit specification (`p2`) or type inference (`p3`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\npublic final class Promise<Value, Reason=Error> { ... }\n\nfunc getRandomPromise() -> Promise<Int, Error> { ... }\n\nvar p1: Promise<Int> = ...\nvar p2: Promise<Int, Error> = p1     // okay: p1 and p2 have the same type Promise<Int, Error>\nvar p3: Promise = getRandomPromise() // p3 has type Promise<Int, Error> due to type inference\n```\n\n----------------------------------------\n\nTITLE: Declaring Swift Wrapper Typedef in Objective-C\nDESCRIPTION: This snippet shows how to declare a swift_wrapper typedef in Objective-C. It defines a SecretResourceID typedef and two associated constants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_6\n\nLANGUAGE: Objective-C\nCODE:\n```\ntypedef NSString * _Nonnull SecretResourceID __attribute__((swift_wrapper(struct)));\n\nextern SecretResourceID const SecretResourceTreasureChest;\nextern SecretResourceID const SecretResourceBankVault;\n```\n\n----------------------------------------\n\nTITLE: Swift NSDate Instantiation with Objective-C Interop\nDESCRIPTION: Example of constructing an Objective-C NSDate object using Swift constructor syntax, demonstrating interoperability between Swift and Objective-C initialization patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nNSDate()\n```\n\n----------------------------------------\n\nTITLE: Ending Memory Access in Swift Intermediate Language (SIL)\nDESCRIPTION: The end_access instruction ends a memory access started by begin_access. It can be marked as 'abort' for init or deinit accesses that didn't complete the described transition.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_49\n\nLANGUAGE: sil\nCODE:\n```\nend_access %0\n```\n\n----------------------------------------\n\nTITLE: C Typedef Mapping to Swift\nDESCRIPTION: This snippet shows how C typedefs are mapped to Swift, including both simple typedefs and the special case of anonymous struct typedefs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_30\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\n// An ordinary typedef.\ntypedef int Money;\n\n// A special case pattern that is mapped to a named struct.\ntypedef struct {\n  int x;\n  int y;\n} Point;\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\ntypealias Money = Int\n\nstruct Point {\n  var x: CInt { get set }\n  var y: CInt { get set }\n  init()\n  init(x: CInt, y: CInt)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe Function Usage in Swift\nDESCRIPTION: This snippet shows an example of using an unsafe function (unsafeBitCast) that triggers a memory safety warning.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-memory-safety.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc getPointee<T>(_ pointer: UnsafeMutablePointer<Int>, as type: T.Type) -> T {\n  // reference to unsafe global function 'unsafeBitCast'\n  return unsafeBitCast(pointer.pointee, to: type)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Class-Only Protocols in Swift\nDESCRIPTION: Shows how to mark a protocol as class-only using the AnyObject keyword. This allows the compiler to optimize based on the knowledge that only classes can adopt the protocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Pingable: AnyObject { func ping() -> Int }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Reference Semantics Operations in Swift\nDESCRIPTION: This code illustrates the behavior of types with reference semantics through various function examples. It shows how copies of a reference share a target object, allowing mutations made via one copy to be visible as side-effects through the others.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ValueSemantics.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc f1(_ x: T) {\n   x.mutate()\n   return x\n}\n\nfunc f2(_ x: T) -> T {\n   var y = x\n   y.mutate()  // mutation through a copy of x\n   return x    // is visible through x\n}\n\nfunc f2a(_ x: T) -> T {\n   var y : T\n   y = x\n   y.mutate()  // mutation through a copy of x\n   return x    // is visible through x\n}\n\nfunc g(_ x : T) { x.mutate() }\n\nfunc f3(_ x: T) -> T {\n   g(x)        // when x is passed to a function, mutation\n   return x    // through the parameter is visible through x\n}\n```\n\n----------------------------------------\n\nTITLE: Usage Example of Synthesized Conversion APIs in Swift\nDESCRIPTION: Demonstrates how the proposed synthesized conversion APIs for C++ classes could be used in Swift code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_52\n\nLANGUAGE: swift\nCODE:\n```\n// Usage example.\n\nfunc useBasePtr(_ basePtr: UnsafePointer<Base>) { ... }\nfunc useDerivedPtr(_ derivedPtr: UnsafePointer<Derived>) { ... }\n\nfunc testDowncast() {\n  var d = Derived()\n  useBasePtr(d.asBase)\n\n  // or:\n  useBasePtr(Base.upcast(from: &d))\n}\n\nfunc testUpcast(_ basePtr: UnsafePointer<Base>) {\n  if let derivedPtr: UnsafePointer<Derived> = Derived.downcast(from: basePtr) {\n    useDerivedPtr(derivedPtr)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Optional Casting Changes in Swift\nDESCRIPTION: This snippet shows how casting to more optional types and extracting optionals from Any containers is now allowed, unlike in Swift 5.3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nlet a = 7\n// Swift 5.3: error: cannot downcast to a more optional type\n// Specification: returns true\na is Int?\n// Swift 5.3: error: cannot downcast to a more optional type\n// Specification: returns false\na is Optional<Double>\n\nlet b: Int? = 7\nlet c: Any = b\n// Swift 5.3: error: cannot downcast to a more optional type\n// Specification: returns true\nc is Int?\n```\n\n----------------------------------------\n\nTITLE: Swift Function with Primitive Types in C++\nDESCRIPTION: Shows how to call a Swift function that takes primitive types as parameters from C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'MyModule'\nfunc myFunction(x: float, _ c: Int) -> Bool\n```\n\nLANGUAGE: c++\nCODE:\n```\n// C++\n#include \"MyModule-Swift.h\"\n\nint main() {\n  return !MyModule::myFunction(2.0f, 3); // myFunction(float, swift::Int) -> bool\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Parameter Vector Structure in C\nDESCRIPTION: Illustrates the layout of generic parameter vectors in Swift metadata, including type metadata references and protocol witness tables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeMetadata.rst#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct GenericParameterVector {\n  TypeMetadata *T, *U, *V;\n};\n```\n\nLANGUAGE: c\nCODE:\n```\nstruct GenericParameterVector {\n  TypeMetadata *T, *U, *V;\n  RuncibleWitnessTable *T_Runcible;\n  FungibleWitnessTable *U_Fungible;\n  AnsibleWitnessTable *U_Ansible;\n};\n```\n\n----------------------------------------\n\nTITLE: Generic Collection Type Constraints Example\nDESCRIPTION: Demonstrates same-type constraints between multiple Collection types where their Element types must be Equatable and equivalent.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n<C1, C2, C3 where C1: Collection, C2: Collection, C3: Collection,\n C1.Element: Equatable, C1.Element == C2.Element, C1.Element == C3.Element>\n```\n\n----------------------------------------\n\nTITLE: Implementing @get_subobject_addr Method in Swift Array\nDESCRIPTION: Demonstrates the implementation of a @get_subobject_addr method in a Swift Array struct. This method returns the address of a subobject stored in the array's storage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: ArrayStorage\n\n  @get_subobject_addr\n  func getElementAddr(_ index: Int) -> UnsafeMutablePointer<T> {\n    return storage.elementAddrAt(index)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NSStringCompareOptions with the OptionSet Protocol\nDESCRIPTION: Example of a struct conforming to the OptionSet protocol with automatic derivation of protocol requirements and demonstration of operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nstruct NSStringCompareOptions : OptionSet {\n  var CaseInsensitiveSearch,\n      LiteralSearch,\n      BackwardsSearch,\n      AnchoredSearch,\n      NumericSearch,\n      DiacriticInsensitiveSearch,\n      WidthInsensitiveSearch,\n      ForcedOrderingSearch,\n      RegularExpressionSearch : Bool = false\n}\n\nvar a = NSStringCompareOptions(CaseInsensitiveSearch: true,\n                               BackwardsSearch: true)\nvar b = NSStringCompareOptions(WidthInsensitiveSearch: true,\n                               BackwardsSearch: true)\nvar c = a & b\n(a & b).any() // => true\nc == NSStringCompareOptions(BackwardsSearch: true) // => true\n```\n\n----------------------------------------\n\nTITLE: Improved C String Interoperability API for Swift Strings\nDESCRIPTION: Defines new APIs for converting between C strings and Swift Strings, including initialization from null-terminated UTF-8 and other Unicode encodings, and a method for working with the string's contents as a C string pointer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nextension String {\n  /// Constructs a `String` having the same contents as `nulTerminatedUTF8`.\n  ///\n  /// - Parameter nulTerminatedUTF8: a sequence of contiguous UTF-8 encoded \n  ///   bytes ending just before the first zero byte (NUL character).\n  init(cString nulTerminatedUTF8: UnsafePointer<CChar>)\n  \n  /// Constructs a `String` having the same contents as `nulTerminatedCodeUnits`.\n  ///\n  /// - Parameter nulTerminatedCodeUnits: a sequence of contiguous code units in\n  ///   the given `encoding`, ending just before the first zero code unit.\n  /// - Parameter encoding: describes the encoding in which the code units\n  ///   should be interpreted.\n  init<Encoding: UnicodeEncoding>(\n    cString nulTerminatedCodeUnits: UnsafePointer<Encoding.CodeUnit>,\n    encoding: Encoding)\n    \n  /// Invokes the given closure on the contents of the string, represented as a\n  /// pointer to a null-terminated sequence of UTF-8 code units.\n  func withCString<Result>(\n    _ body: (UnsafePointer<CChar>) throws -> Result) rethrows -> Result\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Compiler Command with SIL Debugging\nDESCRIPTION: Example command for enabling SIL-based debugging information in the Swift compiler output.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nswiftc -g -Xfrontend -sil-based-debuginfo -O test.swift -o a.out\n```\n\n----------------------------------------\n\nTITLE: Running Swift Compiler with LSAN in Docker Environment\nDESCRIPTION: Commands to set up the environment and run the Swift compiler (swiftc) with LeakSanitizer in the Docker container. This setup helps reproduce and diagnose memory leaks in the compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nexport LD_LIBRARY_PATH=/opt/swift/5.8.1/usr/lib/swift/linux\n/home/build-user/build/buildbot_incremental_lsan/swift-linux-x86_64/./bin/swiftc <many arguments>\n```\n\n----------------------------------------\n\nTITLE: Documenting Parameters Using Parameters Section in Swift\nDESCRIPTION: Shows how to document multiple parameters using a Parameters section in Swift documentation comments. This format allows grouping all parameters under a single section.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DocumentationComments.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Parameters:\n  - x: ...\n  - y: ...\n  - z: ...\n```\n\n----------------------------------------\n\nTITLE: Basic Swift Module Import in C++\nDESCRIPTION: Demonstrates how to import a Swift module into C++ code using the generated header file and access functions through the module namespace.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'MyModule'\nfunc myFunction();\n```\n\nLANGUAGE: c++\nCODE:\n```\n// C++\n#include \"MyModule-Swift.h\"\n\nint main() {\n  MyModule::myFunction(); // calls into Swift.\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @usableFromInline Attribute in Swift\nDESCRIPTION: The @usableFromInline attribute makes internal entities available at link time in the module's binary, allowing them to be referenced from inlinable functions or frozen structs while maintaining proper availability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n@usableFromInline\n```\n\n----------------------------------------\n\nTITLE: Importing Objective-C Boolean Properties into Swift\nDESCRIPTION: Demonstrates the special rule for importing Objective-C properties of type `BOOL` or `Boolean`. The Swift property name defaults to the getter's name rather than the Objective-C property name, accommodating the convention of prefixing boolean getters with 'is'. The example shows `isContrivedExample` and `hasAnotherForm` being imported directly with those names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_14\n\nLANGUAGE: objective-c\nCODE:\n```\n@property(getter=isContrivedExample) BOOL contrivedExample;\n@property BOOL hasAnotherForm;\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar isContrivedExample: Bool { get set }\nvar hasAnotherForm: Bool { get set }\n```\n\n----------------------------------------\n\nTITLE: Impact of open Keyword on Swift Class ABI Stability\nDESCRIPTION: Mentions the `open` keyword in relation to ABI stability when modifying classes. Adding a designated initializer or overriding members might be restricted if the class is `open`, as external subclasses could be affected by these changes, potentially breaking compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nopen\n```\n\n----------------------------------------\n\nTITLE: Controlling Optimization Mode with @_optimize\nDESCRIPTION: Demonstrates how to use the @_optimize attribute to control the compiler's optimization mode for a specific function body. This attribute is analogous to command-line flags -Onone, -Osize, and -Ospeed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n@_optimize(none)\n```\n\nLANGUAGE: swift\nCODE:\n```\n@_optimize(size)\n```\n\nLANGUAGE: swift\nCODE:\n```\n@_optimize(speed)\n```\n\n----------------------------------------\n\nTITLE: Struct to AnyObject Casting in Swift\nDESCRIPTION: This snippet shows how casting a struct to AnyObject now succeeds via __SwiftValue boxing, whereas it previously caused a compiler crash in Swift 5.3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nstruct S {}\nlet s = S()\n// Swift 5.3: Compiler crash (in asserts build)\n// Specification:  Succeeds via __SwiftValue boxing\ns as? AnyObject\n```\n\n----------------------------------------\n\nTITLE: Calling a Swift Static Method from C++\nDESCRIPTION: This C++ code calls a bridged Swift static method from C++. The method computes a screen size and returns a Rectangle object. Requires inclusion of the generated Geometry-Swift.h header. Shows how static computation methods from Swift can be directly invoked in C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_18\n\nLANGUAGE: c++\nCODE:\n```\n// C++ use site:\n#include \"Geometry-Swift.h\"\n\nint main() {\n  auto screenSize = Geometry::Rectangle::computeDeviceScreenSize();\n  // Use screen size...\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Echo Server Implementation using Tasks and Streams in Swift\nDESCRIPTION: Example of a concurrent program using Tasks and Streams to create an echo server. Demonstrates stream communication between threads with type safety.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet input  = Stream<String>()\nlet output = Stream<String>()\n\nfunc echoServer(_ inp : Stream<String>,\n                out : Stream<String>) {\n  while true { out.push(inp.pop()) }\n}\n\ncreateTask((input, output), callback: echoServer)\n\nfor val in [\"hello\",\"world\"] {\n  input.push(val)\n  print(output.pop())\n}\n```\n\n----------------------------------------\n\nTITLE: Listing LLDB Breakpoints and Hit Counts\nDESCRIPTION: Displays a list of all currently set LLDB breakpoints, including their properties like name, location, resolved status, hit count, and enabled status. Useful for checking how many times ignored breakpoints were hit.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_21\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br list\n```\n\n----------------------------------------\n\nTITLE: Comparing String Code Points in Swift\nDESCRIPTION: Shows that while canonically equivalent strings are considered equal (`n1 == n2`), their underlying sequences of Unicode code points may differ. Accessing the `codePoints` property of `n1` and `n2` (representing \"ñ\" in decomposed and precomposed forms, respectively) and comparing them results in `false`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n|swift| n1.codePoints == n2.codePoints\n`// r0 : Bool =` **false**\n```\n\n----------------------------------------\n\nTITLE: Swift Task Class Implementation with NSObject Inheritance\nDESCRIPTION: Example showing how to override an Objective-C initializer in a Swift subclass by implementing a constructor that calls the superclass initialization method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nclass Task : NSObject {\n  constructor () {\n    super.constructor() // invokes -[NSObject init]\n\n    // perform initialization\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Characters from a Set in Cocoa and Swift\nDESCRIPTION: Demonstrates how to find characters from a set in a string for both Cocoa and Swift. The Swift version is more generic, using a closure for matching.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_19\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet;\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc find(_ match: (Character) -> Bool) -> Range<String.IndexType>\n```\n\n----------------------------------------\n\nTITLE: Swift Global Symbol Patterns\nDESCRIPTION: Comprehensive patterns for global symbol mangling in Swift, including type metadata, descriptors, and runtime records.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nglobal ::= type 'N'                    // type metadata (address point)\nglobal ::= type 'Mf'                   // 'full' type metadata (start of object)\nglobal ::= type 'MP'                   // type metadata pattern\nglobal ::= type 'Ma'                   // type metadata access function\nglobal ::= type 'ML'                   // type metadata lazy cache variable\nglobal ::= nominal-type 'Mr'           // generic type completion function\n```\n\n----------------------------------------\n\nTITLE: Unconstrained Generic Free Functions in Swift - Swift\nDESCRIPTION: Here, free functions such as 'min' and 'print' are used to show cases where no obvious 'self' exists or when unconstrained generic functionality is essential. These patterns are appropriate for APIs where instance context is not meaningful. The demonstration is purely syntactic and does not require any additional dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nmin(x, y, z)\nprint(x)\n-sin(x)\n\n```\n\n----------------------------------------\n\nTITLE: Declaring and Initializing a Stored Variable in Swift\nDESCRIPTION: This snippet demonstrates declaring a stored variable `count` with an explicit type `Int` and an initial value of 10. Providing an initial value at the declaration site ensures the variable is initialized before use, which is mandatory for global variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar count : Int = 10\n```\n\n----------------------------------------\n\nTITLE: Defining Set Operations in Swift\nDESCRIPTION: Example of Set struct implementation showing basic set operations like contains, subset checks, and set operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Set<Element> {\n  public func contains(_ x: Element) -> Bool                // x ∈ A, A ∋ x\n  public func isSubsetOf(_ b: Set<Element>) -> Bool         // A ⊆ B\n  public func isStrictSubsetOf(_ b: Set<Element>) -> Bool   // A ⊂ B\n  public func isSupersetOf(_ b: Set<Element>) -> Bool       // A ⊇ B\n  public func isStrictSupersetOf(_ b: Set<Element>) -> Bool // A ⊃ B\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Annotation Inference Example\nDESCRIPTION: Shows how the Swift compiler could infer nullability annotations from C++ header implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_82\n\nLANGUAGE: c++\nCODE:\n```\nclass Example {\npublic:\n  int *get_mutable_value() { return &value; }\n  // The Swift compiler infers that the return type is `int * _Nonnull` because\n  // the function never returns nullptr.\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Function Parameters with Value and Reference Semantics in Swift\nDESCRIPTION: Shows how to declare function parameters with explicit value and reference semantics. Explains the behavior of passing arguments to these parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc baz(\n    _ x: Int      // x is passed by-value\n  , val y: Int  // just like \"y: Int\"\n  , ref z: Int  // allocate z on the heap\n\n  , q: SomeClass               // passing a reference\n  , ref r: SomeClass           // just like \"var r: SomeClass\"\n  , val s: SomeClonableClass) // Passing a copy of the argument\n```\n\n----------------------------------------\n\nTITLE: Array Count Semantic Annotation in Swift\nDESCRIPTION: Example of using @_semantics attribute to annotate an array count method for optimizer recognition.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@public @_semantics(\"array.count\")\nfunc getCount() -> Int {\n  return _buffer.count\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Inner Pointers from C++ Member Functions in Swift\nDESCRIPTION: Demonstrates the challenge of using pointers returned from C++ member functions in Swift, showing how Swift's memory model can invalidate these pointers and how to handle this with annotations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_25\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\nclass Employee {\nprivate:\n  std::string company_;\npublic:\n  std::string *mutable_company() { return &company_; }\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct Employee {\n  func mutable_company() -> UnsafeMutablePointer<std.string>\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc test() {\n  var employee: Employee = ...\n  var company = employee.mutable_company()\n\n  // HAZARD: `employee` could have been moved to a different location in memory\n  // by now, invalidating the `company` pointer.\n  company.pointee = \"A\"\n\n  print(employee)\n\n  // HAZARD: `employee` can be deallocated here, however, `company` is still\n  // accessible.\n  company.pointee = \"B\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Protocol Conformance in Swift\nDESCRIPTION: This example demonstrates a proposed feature for private protocol conformances, where a public type could conform to a public protocol internally within a module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_33\n\nLANGUAGE: Swift\nCODE:\n```\npublic protocol P { }\npublic struct X { }\nextension X : internal P { ... } // X conforms to P, but only within this module\n```\n\n----------------------------------------\n\nTITLE: Using Pattern Matching to Declare Stored Variables in Swift\nDESCRIPTION: This snippet illustrates how variables formed during pattern matching within a `switch` statement are also considered stored variables. If `optVal` matches the `.Some` case, `actualVal` is declared as a stored variable and bound to the associated value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nswitch optVal {\ncase .Some(var actualVal):\n  // do something\ncase .None:\n  // do something else\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Derivative for sinf in Swift\nDESCRIPTION: Shows how to make the C standard library's sinf function differentiable by defining a derivative retroactively.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_40\n\nLANGUAGE: swift\nCODE:\n```\n#if canImport(Darwin)\nimport func Darwin.sinf\n#else\nimport func Glibc.sinf\n#endif\n\n// Imported:\n//     public func sinf(Float) -> Float\n\n@derivative(of: sinf)\npublic func _(_ x: Float) -> (\n    value: Float, \n    differential: @differentiable(linear) (Float) -> Float\n) {\n    (value: sinf(x), differential: { v in cosf(x) * v })\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Conditional Statement in Swift\nDESCRIPTION: A simple Swift code example that creates a constant, checks if it's positive, and prints a message accordingly. It demonstrates basic variable declaration and conditional logic in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/diagnostics/test-docs/nominal-types.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet x = 42\nif x > 0 {\n  print(\"positive\")\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an Objective-C Method with `NSError**` as `throws` in Swift\nDESCRIPTION: This Swift code shows the proposed imported signature for the preceding Objective-C method. The `NSError**` parameter is removed, and the function is marked with `throws`, integrating it with Swift's native error handling mechanism.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nfunc dataFromRange(\n    _ range: NSRange,\n    documentAttributes dict: NSDictionary\n) throws -> NSData\n```\n```\n\n----------------------------------------\n\nTITLE: Virtual Initializer Inheritance Examples in Swift\nDESCRIPTION: Illustrates how virtual initializer requirements can be satisfied through inheritance and different implementation patterns in subclasses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InitializerInheritance.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nclass F3A : E3 {\n  init withTitle(title: String) {\n    super.init(withTitle: title)\n  }\n\n  // okay: inherited ``init()`` from E3 satisfies requirement for virtual init()\n}\n\nclass F3B : E3 {\n  // error: requirement for virtual init() not satisfied, because it is neither defined nor inherited\n}\n\nclass F3C : E3 {\n  @virtual init() {\n    super.init(withTitle: \"TSPL\")\n  }\n\n  // okay: satisfies requirement for virtual init().\n}\n```\n\n----------------------------------------\n\nTITLE: Allocating Reference Type Objects using alloc_ref in SIL\nDESCRIPTION: The `alloc_ref` instruction allocates an object of a given reference type `T`, initializing it with a retain count of 1. It returns the allocated object ($T). Options include `[stack]` to suggest stack allocation (paired with `dealloc_stack_ref`), `[objc]` to use Objective-C allocation, `[bare]` for objects without header usage (no ref-counting/metadata), and `[tail_elems]` to reserve space for tail-allocated arrays. The `[objc]` and `[tail_elems]` options are mutually exclusive.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_3\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'alloc_ref'\n                      ('[' 'bare' ']')?\n                      ('[' 'objc' ']')?\n                      ('[' 'stack' ']')?\n                      ('[' 'tail_elems' sil-type '*' sil-operand ']')*\n                      sil-type\n\n%1 = alloc_ref [stack] $T\n%1 = alloc_ref [tail_elems $E * %2 : Builtin.Word] $T\n// $T must be a reference type\n// %1 has type $T\n// $E is the type of the tail-allocated elements\n// %2 must be of a builtin integer type\n```\n\n----------------------------------------\n\nTITLE: Same-type Constraint Sets Example 3\nDESCRIPTION: Third possible set of constraints to establish type equivalence between three Collection Element types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nC1.Element == C3.Element, C2.Element == C3.Element\n```\n\n----------------------------------------\n\nTITLE: Using @inlinable with Swift Enum Initializers\nDESCRIPTION: Clarifies that enum initializers are treated similarly to top-level functions regarding ABI stability. They permit the same modifications and can be marked `@inlinable` under the standard restrictions for inlinable functions without breaking binary compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n@inlinable\n```\n\n----------------------------------------\n\nTITLE: Fix-It Range and Replacement Syntax in Diagnostic Verification - Plaintext\nDESCRIPTION: These snippets describe the precise syntax for specifying code insertions and deletions (fix-its) in diagnostic verification comments. Insertions are written with identical start and end column positions, while deletions use empty replacement text. The bolded notation is used by the verification tool to assert correct fix-it suggestions when running compiler tests. Usage requires no dependencies aside from the Swift diagnostic verifier tool.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n{{3-3=@objc }}\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n{{3-9=}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Tool Paths for Swift Build in CMake\nDESCRIPTION: Sets paths for LLVM, Clang, and Swift tools that are executable on the build machine. Also includes an option for the WASI sysroot path.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_38\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_NATIVE_LLVM_TOOLS_PATH \"\" CACHE STRING\n    \"Path to the directory that contains LLVM tools that are executable on the build machine\")\n\nset(SWIFT_NATIVE_CLANG_TOOLS_PATH \"\" CACHE STRING\n    \"Path to the directory that contains Clang tools that are executable on the build machine\")\n\nset(SWIFT_NATIVE_SWIFT_TOOLS_PATH \"\" CACHE STRING\n   \"Path to the directory that contains Swift tools that are executable on the build machine\")\n\nset(SWIFT_WASI_SYSROOT_PATH \"\" CACHE PATH\n  \"Path to the directory that contains WASI Sysroot\")\n```\n\n----------------------------------------\n\nTITLE: C++ Header Definition\nDESCRIPTION: Header file defining the C++ function interface that will be exposed to Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/GettingStartedWithC++Interop.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#ifndef CxxTest_hpp\n#define CxxTest_hpp\n\nint cxxFunction(int n);\n\n#endif\n```\n\n----------------------------------------\n\nTITLE: Processing Swift Compiler Trace CSV with xsv (Shell)\nDESCRIPTION: Illustrates how to use the `xsv` command-line tool to process the CSV trace file generated by `-trace-stats-events`. The example pipes the file content (`cat`) through `xsv search` to filter for 'DeclsDeserialized' counters, `xsv sort` to order results numerically and in reverse by `CounterDelta`, and `xsv table` for formatted output.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ cat /tmp/stats/trace-1518219460129597-swift-frontend-test-test.swift-x86_64_apple_macosx10.13-o-Onone-1471252712.csv \\\n   | xsv search --select CounterName DeclsDeserialized \\\n   | xsv sort --reverse --numeric --select CounterDelta \\\n   | xsv table\nTime   Live  IsEntry  EventName       CounterName                CounterDelta  CounterValue  EntityName  EntityRange\n43279  0     entry    emit-SIL        Sema.NumDeclsDeserialized  360           517           _           [test.swift:1:17 - line:1:17]\n40032  0     entry    typecheck-decl  Sema.NumDeclsDeserialized  91            91            foo         [test.swift:1:1 - line:1:32]\n41324  735   exit     typecheck-decl  Sema.NumDeclsDeserialized  40            156                       [test.swift:1:13 - line:1:29]\n40432  0     entry    typecheck-decl  Sema.NumDeclsDeserialized  25            116           _           [test.swift:1:17 - line:1:17]\n43712  206   exit     emit-SIL        Sema.NumDeclsDeserialized  18            535           _           [test.swift:1:17 - line:1:17]\n41448  97    exit     typecheck-fn    Sema.NumDeclsDeserialized  1             157           _           [test.swift:1:17 - line:1:17]\n```\n\n----------------------------------------\n\nTITLE: Mapping C++ Getters and Setters to Swift Properties\nDESCRIPTION: This snippet demonstrates how C++ getters and setters can be mapped to Swift properties, showing both the C++ class and its Swift equivalent.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_43\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nclass Employee {\npublic:\n  const std::string &getName() const;\n  void setName(std::string newName);\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct Employee {\n  public var name: std.string { get set }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Implementation details of the imported API.\n\nstruct Employee {\n  // const std::string &getName();\n  private func _getName() -> UnsafePointer<std.string>\n\n  // void setName(std::string newName);\n  private mutating func _setName(_ newName: std.string)\n\n  // Swifty API.\n  public var name: std.string {\n    _read {\n      yield _getName().pointee\n    }\n    set {\n      _setName(newValue)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Readonly Function using @_effects(readonly) in Swift\nDESCRIPTION: This snippet demonstrates the use of the `@_effects(readonly)` attribute in Swift. This attribute signifies that the function `lookup2` only reads memory and has no other observable side effects, allowing the compiler to potentially eliminate calls to it if the return value is unused. The function accesses an array using an index from a class instance property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n```swift\n@_effects(readonly)\nfunc lookup2(_ instance: SomeClass) -> Int {\n  let a = [7, 3 ,6, 9]\n  return a[instance.i]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Error Handling Function Example in Swift\nDESCRIPTION: Example showing how throwing functions are handled in Swift, demonstrating the subtyping rules that allow passing non-throwing functions to contexts expecting throwing functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/CallingConvention.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// foo() expects its argument to follow the conventions of a\n// function that's capable of throwing.\nfunc foo(_ fn: () throws -> ()) throwsIf(fn)\n\n// Here we're passing foo() a function that can't throw; this is\n// allowed by the subtyping rules of the language.  We'd like to be\n// able to do this without having to introduce a thunk that maps\n// between the conventions.\nfunc bar(_ fn: () -> ()) {\n  foo(fn)\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Enum with Unlabeled Associated Value\nDESCRIPTION: Example showing an enum declaration with an unlabeled associated value of type Int. The code demonstrates that unlabeled associated values don't generate properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nenum Foo {\n  case init(_: Int)\n\n  // No property for the associated value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BorrowScope Concept/Protocol in Swift for SIL\nDESCRIPTION: Proposes a `BorrowScope` concept or protocol to identify instructions or values that introduce a borrow scope, such as `BeginBorrowInst`, `LoadBorrowInst`, and guaranteed `Argument`s. An alternative implementation using an extension function like `Value.introducesBorrowScope` is also considered due to the dual nature of Arguments (guaranteed or owned). Status: To-do.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nBorrowScope // Concept/Protocol (Proposed)\n// or\nValue.introducesBorrowScope // Extension Function (Proposed)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Buffered Iterator Wrapper in Swift\nDESCRIPTION: Provides a generic `BufferedIterator` struct implementation that wraps any type conforming to `IteratorProtocol`. It conforms to the proposed `BufferedIteratorProtocol`, caching the last retrieved element in the `latest` property and demonstrating how an existing iterator could be adapted to provide buffering.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n/// Add buffering to any IteratorProtocol I\nstruct BufferedIterator<I : IteratorProtocol>\n  : BufferedIteratorProtocol {\n\n  public init(_ baseIterator: I) {\n    self._baseIterator = baseIterator\n  }\n  public func next() -> Element? {\n    latest = _baseIterator.next() ?? latest\n    return latest\n  }\n  public private(set) var latest: I.Element?\n  private var _baseIterator: I\n}\n```\n\n----------------------------------------\n\nTITLE: Module Name Conflict Example in Swift\nDESCRIPTION: Illustrates potential naming conflicts between modules and types, and how they are resolved.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Example 1:\nimport Foundation\nimport struct BuildingConstruction.Foundation\n\nvar firstSupport = Foundation.SupportType() // from the struct or from the module?\n\n\n// Example 2:\nimport Foundation\nimport BuildingConstruction\n\nFoundation.SupportType() // from the class or from the module?\n```\n\n----------------------------------------\n\nTITLE: Reference to Bridge Object Conversion in Swift SIL\nDESCRIPTION: Creates a BridgeObject from a reference and spare bits word, preserving reference identity when converting back.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_176\n\nLANGUAGE: swift\nCODE:\n```\n%2 = ref_to_bridge_object %0 : $C, %1 : $Builtin.Word\n```\n\n----------------------------------------\n\nTITLE: Converting Thick to Objective-C Metatypes in SIL\nDESCRIPTION: Instruction for converting a thick metatype to an Objective-C class metatype. The type must be a class, class protocol, or class protocol composition type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_180\n\nLANGUAGE: sil\nCODE:\n```\n%1 = thick_to_objc_metatype %0 : $@thick T.Type to $@objc_metatype T.Type\n```\n\n----------------------------------------\n\nTITLE: Defining the MutableCollectionType Protocol in Swift\nDESCRIPTION: Defines the `MutableCollectionType` protocol, which enables in-place modification of collection elements. It refines `CollectionType` by adding a `set` accessor to the subscript requirement (`subscript(i: Index) -> Iterator.Element { get set }`), allowing elements at specific indices to be updated.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nprotocol MutableCollectionType : CollectionType {\n  subscript(i: Index) -> Iterator.Element { get **set** }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a String Variable in Swift\nDESCRIPTION: Demonstrates the basic declaration and initialization of a `String` variable `s` in Swift. The accompanying comment indicates the inferred type (`String`) and the assigned value (`\"Yo\"`), illustrating that `String` is a first-class type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n|swift| var s = \"Yo\"\n`// s:` :emph:`String` `= \"Yo\"`\n```\n\n----------------------------------------\n\nTITLE: Higher-Order Function Lowering Example in Swift\nDESCRIPTION: Example demonstrating how Swift handles reabstraction when passing functions with generic parameters. Shows an add1 function being passed to a generic apply function that must handle indirect parameter passing due to opaque layout requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABIStabilityManifesto.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc add1(_ i: Int) -> Int { return i+1 }\nfunc apply<T,U>(_ f: (T) -> U, _ x: T) -> U { return f(x) }\n```\n\n----------------------------------------\n\nTITLE: Implementing Differentiable for Dictionary in Swift\nDESCRIPTION: Extension that makes Dictionary conform to Differentiable when its values are Differentiable. Defines a custom TangentVector struct and implements the required move(by:) method for dictionaries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// struct Dictionary<Key: Hashable, Value>\nextension Dictionary: Differentiable where Value: Differentiable {\n    public struct TangentVector: Differentiable, AdditiveArithmetic {\n        public typealias TangentVector = Self\n        @differentiable\n        public var elements: [Key: Value.TangentVector]\n        @differentiable\n        public init(_ elements: [Key: Value.TangentVector]) {\n            self.elements = elements\n        }\n        ...\n    }\n\n    public mutating func move(by offset: TangentVector) {\n        for i in indices {\n            self[i].move(by: Value.TangentVector(offset.elements[i]))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Integration with C++ Vector\nDESCRIPTION: Swift code showing integration with C++ vector type, including collection protocol conformance, mutation using C++ algorithms, and Swift collection operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityStatus.md#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// main.swift\nimport CxxTypes\nimport CxxStdlib\n\n// We can extend C++ types in Swift.\nextension V : RandomAccessCollection {\n  public var startIndex: Int { 0 }\n  public var endIndex: Int { size() }\n}\n\n// Create a vector with some data.\nvar numbers = V(4)\nstd.fill(numbers.beginMutating(), numbers.endMutating(), 41)\n\n// Transform it using C++.\nstd.transform(numbers.beginMutating(), numbers.endMutating(),\n              numbers.beginMutating()) { (element: Int) in\n  return element + 1\n}\n\n// Loop over it in Swift.\nfor (index, element) in numbers.enumerated() {\n  print(\"v[\\(index)] = \\(element)\")\n}\n\n// We can also use anything in RandomAccessCollection, such as map and zip.\nlet strings = numbers.map { \"\\($0)\" }\nfor (s, n) in zip(strings, numbers) {\n  print(\"\\(s) = \\(n)\")\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding a Read-Only Computed Property with a Stored Property in Swift\nDESCRIPTION: This code defines a base class `Base` with a read-only computed property `color`. The subclass `Colorful` overrides `color` by declaring it as a stored property. This allows instances of `Colorful` to have their own mutable `color` value, replacing the computed behavior from the superclass.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nclass Base {\n  var color : Color {\n    return .Black\n  }\n}\n\nclass Colorful : Base {\n  var color : Color\n}\n\nvar object = Colorful(.Red)\nobject.color = .Blue\n```\n\n----------------------------------------\n\nTITLE: Basic Derivative Function Example in Swift\nDESCRIPTION: Demonstrates a simple differentiable function definition and derivative calculation using the @differentiable attribute and derivative operator.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable\nfunc f(_ x: Float) -> Float {\n    x * x\n}\nlet dfdx = derivative(of: f)\ndfdx(3) // 6\n```\n\n----------------------------------------\n\nTITLE: Inout-to-Pointer Conversion in Swift\nDESCRIPTION: Demonstrates creating a temporary pointer using inout parameter conversion with the & operator. The pointer is only valid for the duration of the function call.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/temporary-pointers.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(bar: UnsafePointer<Int>) { /*...*/ }\nvar x: Int = 42\nfoo(bar: &x)\n```\n\n----------------------------------------\n\nTITLE: Using Concrete Same-Type Requirements in Swift Extensions\nDESCRIPTION: Illustrates how a constrained extension could use a same-type constraint to make a type parameter equivalent to a concrete type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nextension Array where Element == String {\n  func makeSentence() -> String {\n    // uppercase first string, concatenate with spaces, add a period, whatever\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NSNumber Casting Behavior in Swift\nDESCRIPTION: This snippet illustrates changes in NSNumber casting behavior, including consistency between optimized and unoptimized builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nlet a = NSNumber()\n// true in 5.3 for optimized builds; false for unoptimized builds\nprint((a as? NSNumber) != nil)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ARC Pairing and Loop Hoisting in SIL\nDESCRIPTION: This code snippet illustrates the basic structure of a loop in Swift Intermediate Language (SIL) with explicit retain and release operations on a reference (%x) within a loop body. The example is used to analyze when it is safe to move retains/releases outside the loop for optimization via ARCLoopHoisting. The snippet does not require external dependencies but assumes the reader understands SIL instructions: br (branch), apply (function call), cond_br (conditional branch), retain, release, and basic block syntax. The primary input is the reference %x, and the output is the optimized movement of retain/release around the loop to maintain correct lifetimes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_2\n\nLANGUAGE: SIL\nCODE:\n```\nbb0:\\n  br bb1\\n\\nbb1:\\n  retain %x                    (1)\\n  apply %f(%x)\\n  apply %f(%x)\\n  release %x                   (2)\\n  cond_br ..., bb1, bb2\\n\\nbb2:\\n  return ...\\n\n```\n\n----------------------------------------\n\nTITLE: Fix-It Set Disjunction in Diagnostic Verifier Syntax - Plaintext\nDESCRIPTION: This snippet illustrates complex expectation logic using juxtaposed and disjunctive fix-its in Swift compiler diagnostic tests. The syntax combines fix-it ranges ({{1-1=a}}, {{2-2=b}}) with '||' (logical OR), expressing that alternate fix-it sets are acceptable matches for a diagnostic under test. The comment {{none}} enforces that only the specified fix-its are present. This allows for thorough and expressive testing of fix-it combinations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n{{1-1=a}} {{2-2=b}} || {{2-2=c}} {{3-3=d}} {{none}}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Soundness Problem in Objective-C Initialization\nDESCRIPTION: This code snippet illustrates the soundness problem in Objective-C's initialization rules, where a subclass can be instantiated using a superclass initializer without properly initializing its own instance variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/ClassConstruction.rst#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface SuperClass\n- initSuperClass\n@end\n\n@interface Subclass : Superclass\n- (void)subclassMethod\n@end\n\n@implementation Subclass : Superclass\nchar* name;                      // never initialized\n\n- (void)print { printf(name); } // oops\n@end\n\nmySubclassInstance = [[Subclass alloc] initSuperClass]\n```\n\n----------------------------------------\n\nTITLE: Allocating Reference Type Objects Dynamically using alloc_ref_dynamic in SIL\nDESCRIPTION: The `alloc_ref_dynamic` instruction allocates an object of class type `T` or a subclass thereof, determined dynamically by the provided metatype value operand (%0). The object is initialized with a retain count of 1. It supports the `[objc]` and `[tail_elems]` options similar to `alloc_ref`. It returns the allocated object ($T).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_4\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'alloc_ref_dynamic'\n                      ('[' 'objc' ']')?\n                      ('[' 'tail_elems' sil-type '*' sil-operand ']')*\n                      sil-operand ',' sil-type\n\n%1 = alloc_ref_dynamic %0 : $@thick T.Type, $T\n%1 = alloc_ref_dynamic [objc] %0 : $@objc_metatype T.Type, $T\n%1 = alloc_ref_dynamic [tail_elems $E * %2 : Builtin.Word] %0 : $@thick T.Type, $T\n// $T must be a class type\n// %1 has type $T\n// $E is the type of the tail-allocated elements\n// %2 must be of a builtin integer type\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread-Safe Caching with Thread Local Storage in Swift\nDESCRIPTION: This code snippet demonstrates the usage of thread local storage (TLS) in the Swift standard library for caching expensive computations or operations in a thread-safe manner. It outlines the steps required to add new members to the _ThreadLocalStorage struct.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n1. Add the new member to `_ThreadLocalStorage` and a static `getMyNewMember` method to access it. `getMyNewMember` should be implemented using `getPointer`.\n2. If the member is not trivially initializable, update `_initializeThreadLocalStorage` and `_ThreadLocalStorage.init`.\n3. If the field is not trivially destructable, update `_destroyTLS` to properly destroy the value.\n```\n\n----------------------------------------\n\nTITLE: Swift Extension Example\nDESCRIPTION: Example of Swift extensions adding functionality to a Rect structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_52\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'Geometry'\nstruct Rect {\n  var x, y, width, height: Double\n}\n\nextension Rect {\n  init(size: Int) {\n    self.init(x: 0, y: 0, width: size, height: size)\n  }\n  \n  func squareThatFits() -> Rect {\n    let size = max(width, height)\n    return Rect(x: x, y: y, width: size, height: size)\n  }\n}\n\nextension Rect: `CustomDebugStringConvertible` {\n  var debugDescription: String {\n    return \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Isolating a Singleton Variable to MainActor in Swift\nDESCRIPTION: This code shows how to isolate a static singleton instance to the MainActor, making it safe for concurrent access. The MainActor ensures that all access to the variable happens on the main thread.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/mutable-global-variable.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass MyModel {\n  @MainActor\n  static let shared = MyModel() \n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect attempt to call actor-isolated method from nonisolated context\nDESCRIPTION: This function attempts to call a MainActor-isolated method from a synchronous nonisolated context, which will produce a compiler error since it could lead to data races.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/actor-isolated-call.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc runUpdate(model: MyModel) {\n  model.update()\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Borrow Introducers and Enclosing Values in Swift\nDESCRIPTION: This code demonstrates the relationship between borrow introducers and enclosing values for different types of instructions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n                           Borrow Introducer    Enclosing Value\n                           ~~~~~~~~~~~~~~~~~    ~~~~~~~~~~~~~~~\n%1 = load [copy] %0          -                    none\n%2 = begin_borrow %1         %2                   %1\n%3 = begin_borrow %2         %3                   %2\n%4 = struct $S (%3)          %3                   %3\n```\n\n----------------------------------------\n\nTITLE: Defining RandomAccessIndexType Protocol in Swift\nDESCRIPTION: This snippet defines the RandomAccessIndexType protocol which extends BidirectionalIndexType with efficient measurement capabilities between indices and the ability to advance an index by a specific number of steps.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol RandomAccessIndexType : BidirectionalIndexType {\n  func distance(to other: Self) -> Distance\n  func advanced(by n: Distance) -> Self\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Option Properties in Swift\nDESCRIPTION: Demonstrates the declaration of static option properties with boolean flags and variable assignment using bitwise OR operation. Shows a pattern commonly used for option/flag enumeration in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\n    // Implicitly-generated static properties\n    static val Foo = MyOptions(Foo: true)\n    static val Bar = MyOptions(Bar: true)\n    static val Bas = MyOptions(Bas: true)\n  }\n\n  var x: MyOptions = .Foobar | .Bas\n```\n\n----------------------------------------\n\nTITLE: Implementing Wrappers for C++ Classes with Throwing Special Member Functions\nDESCRIPTION: Demonstrates how to wrap C++ classes with throwing constructors or destructors in a way that can be safely imported into Swift, by exposing these operations as regular APIs that can potentially throw.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\n// Can't be imported in Swift.\nclass MyThrowingType {\npublic:\n  MyThrowingType() { if(...) throw ...; }\n  ~MyThrowingType() { if(...) throw ...; }\n  void method();\n};\n\n// Can be imported in Swift.\nclass MyThrowingTypeWrapper {\nprivate:\n  std::unique_ptr<MyThrowingType> value_;\npublic:\n  MyThrowingTypeWrapper(): value_(nullptr) {}\n  void init() /* can throw */ { value_ = std::make_unique<MyThrowingType>(); }\n  void deinit() /* can throw */ { value_ = nullptr; }\n  void method() { value_.method(); }\n};\n```\n\n----------------------------------------\n\nTITLE: SIL Borrowed Value Lifetime with @guaranteed Annotation (Swift SIL)\nDESCRIPTION: This snippet exemplifies a value borrowed from an @owned parameter with begin_borrow, showing its valid lifetime from borrow to end_borrow and the subsequent destruction. It requires proper block argument setup, correct use of begin_borrow/end_borrow instructions, and accurate ownership convention annotations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n    bb0(%0 : @owned $String):\n      %1 = begin_borrow %0   // %1 is borrowed from the enclosing value %0\n      ...\n      end_borrow %1          // %0 must be kept alive until here\n      destroy_value %0\n\n```\n\n----------------------------------------\n\nTITLE: Select_enum Instruction: Data-driven Case Selection\nDESCRIPTION: The select_enum instruction performs a data-flow based selection of a value based on an enum's case, equivalent to a control-flow switch_enum but without branching.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_144\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'select_enum' sil-operand sil-select-case*\n                    (',' 'default' sil-value)?\n                    ':' sil-type\n\n%n = select_enum %0 : $U,      \n  case #U.Case1!enumelt: %1,           \n  case #U.Case2!enumelt: %2, /* ... */ \n  default %3 : $T\n\n// $U must be an enum type\n// #U.Case1, Case2, etc. must be cases of enum $U\n// %1, %2, %3, etc. must have type $T\n// %n has type $T\n```\n\n----------------------------------------\n\nTITLE: Defining OS Version Availability Check Builtin\nDESCRIPTION: Defines the signature for the `availability.osversion` builtin function used to implement `#available` checks in Swift. It takes major, minor, and patch version components as `Builtin.Word` and returns a `Builtin.Int1` (boolean) indicating if the current OS version meets or exceeds the specified version.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\navailability.osversion(major: Builtin.Word, minor: Builtin.Word, patch: Builtin.Word) -> Builtin.Int1\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for generate-xcode Script (sh)\nDESCRIPTION: Runs the `utils/generate-xcode` script with the `--help` flag to show its usage information, available options, and a description of its functionality. Useful for understanding how to customize the Xcode project generation. Requires the Swift source checkout.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nutils/generate-xcode --help\n```\n\n----------------------------------------\n\nTITLE: Constructing Swift Optionals in C++\nDESCRIPTION: Demonstrates different ways to construct Swift Optional values in C++, including default construction and value initialization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_47\n\nLANGUAGE: c++\nCODE:\n```\nauto x = swift::Optional<int>();         // x is none\n```\n\nLANGUAGE: c++\nCODE:\n```\nswift::Optional<int> y = 0;              // y is some(0)\n```\n\nLANGUAGE: c++\nCODE:\n```\nswift::Optional<double> a = nullptr;     // a is none\n```\n\nLANGUAGE: c++\nCODE:\n```\nswift::Optional<float> b = std::nullopt; // b is none\n```\n\n----------------------------------------\n\nTITLE: Defining the ForwardIndexType Protocol in Swift\nDESCRIPTION: Defines the `ForwardIndexType` protocol, required for the `Index` type associated with `CollectionType`. It mandates conformance to `Equatable`, an associated `Distance` type (conforming to `SignedIntegerType`), and a `successor()` method to retrieve the next index value, enabling forward traversal.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nprotocol ForwardIndexType : Equatable {\n  typealias Distance : SignedIntegerType\n  func successor() -> Self\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Swift Optional Values in C++\nDESCRIPTION: Demonstrates how to extract values from Swift Optionals in C++ using value() and operator*.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_49\n\nLANGUAGE: c++\nCODE:\n```\nvoid getXOrDefault(const swift::Optional<int> &x) {\n  return x.hasValue() ? *x : 42;\n}\n```\n\n----------------------------------------\n\nTITLE: Unchecked Type Conversions in SIL\nDESCRIPTION: Instructions for performing unchecked type conversions including upcasts, pointer conversions, and reference casts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_165\n\nLANGUAGE: sil\nCODE:\n```\n%1 = upcast %0 : $D to $B\n```\n\nLANGUAGE: sil\nCODE:\n```\n%1 = address_to_pointer %0 : $*T to $Builtin.RawPointer\n```\n\nLANGUAGE: sil\nCODE:\n```\n%1 = pointer_to_address %0 : $Builtin.RawPointer to [strict] $*T\n```\n\nLANGUAGE: sil\nCODE:\n```\n%1 = unchecked_ref_cast %0 : $A to $B\n```\n\nLANGUAGE: sil\nCODE:\n```\nunchecked_ref_cast_addr $A in %0 : $*A to $B in %1 : $*B\n```\n\nLANGUAGE: sil\nCODE:\n```\n%1 = unchecked_addr_cast %0 : $*A to $*B\n```\n\nLANGUAGE: sil\nCODE:\n```\n%1 = unchecked_trivial_bit_cast %0 : $Builtin.NativeObject to $Builtin.Word\n```\n\nLANGUAGE: sil\nCODE:\n```\n%1 = unchecked_bitwise_cast %0 : $A to $B\n```\n\nLANGUAGE: sil\nCODE:\n```\n%1 = unchecked_value_cast %0 : $A to $B\n```\n\n----------------------------------------\n\nTITLE: Conceptual Swift Implementation of Array Casting Logic\nDESCRIPTION: Presents a conceptual Swift function `arrayCast` that simulates the behavior of casting an `Array<T>` to an `Optional<Array<U>>`. This function iterates through each element `t` of the source array, attempts to cast it to type `U` using `as?`. If successful, the cast element `u` is appended to the result array. If any element fails to cast, the function immediately returns `nil`. If all elements cast successfully, it returns the resulting `Array<U>` wrapped in an `Optional`. This illustrates that array casting requires all elements to be castable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc arrayCast<T,U>(source: Array<T>) -> Optional<Array<U>> {\n  var result = Array<U>()\n  for t in source {\n    if let u = t as? U {\n      result.append(u)\n    } else {\n      return nil\n    }\n  }\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Final Method Solution for Generic Methods in Swift\nDESCRIPTION: Shows how to make individual generic methods final while allowing class inheritance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass MyClass {\n  final func write<T>(t: T) { /* implementation */ }\n}\n\nlet instance: MyClass = ... // could be MyClass, or a subclass\ninstance.write(t: 42) // ✅\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Optional Depth Preservation in Swift Casting\nDESCRIPTION: Shows how Swift casting preserves the 'optional depth' of a `.none` value within nested optionals when casting between different optional types (e.g., `T????` to `U????`). It illustrates the ambiguity resolution rule: match the source optional depth if the target type allows it, otherwise use the greatest possible depth within the target type. The examples use `as!` for forced casting and `as?` for optional casting, noting that `as?` adds an additional layer of optionality to the result.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Depth preservation\n// The `.none` here has type `T?` with optional depth 1\nlet t1: T???? = .some(.some(.some(.none)))\n// This `.none` has type `T????` with optional depth 4\nlet t4: T???? = .none\n// Result has optional depth 1, matching source\nt1 as! U???? // Produces .some(.some(.some(.none)))\nt1 as! U??? // Produces .some(.some(.none))\nt1 as! U?? // Produces .some(.none)\nt1 as! U? // Produces .none\n// Result has optional depth 2, because 4 is not possible\nt4 as! U?? // Produces .none\n// Remember that `as?` adds a layer of optional\n// These casts succeed, hence the outer `.some`\nt1 as? U???? // Produces .some(.some(.some(.some(.none))))\nt1 as? U??? // Produces .some(.some(.some(.none)))\nt1 as? U?? // Produces .some(.some(.none))\nt1 as? U? // Produces .some(.none)\nt4 as? U?? // Produces .some(.none)\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Weak Reference Structure in C for Swift Runtime\nDESCRIPTION: Defines the core Reference structure used for Swift's weak reference implementation. The structure contains fields for the referent object, an optional reference queue, and reserved space for runtime use.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstruct Reference {\n  void *Referent; // must be non-null upon registration\n  struct ReferenceQueue *Queue; // must be valid or null\n  size_t Reserved[2];\n};\n\nvoid swift_registerReference(struct Reference *reference,\n                             size_t flags);\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Constants in Swift\nDESCRIPTION: Shows how let constants could be allowed to have generic parameters, producing differently-typed values depending on usage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nlet π<T : ExpressibleByFloatLiteral>: T = 3.141592653589793238462643383279502884197169399\n```\n\n----------------------------------------\n\nTITLE: Enum with Payload and Pattern Matching\nDESCRIPTION: An enum with both simple cases and a case with a String payload, shown with pattern matching in a switch statement. This demonstrates how Swift extends traditional enums with payload capabilities.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nenum Foo { case A, B, C, D, Other(String) }\n\nfunc use(_ x:Foo) {\n  switch x {\n  case .A:\n  case .B:\n  case .C:\n  case .D:\n  case .Other(var s):\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift COW-Optimized Assignment Operator Implementation\nDESCRIPTION: Demonstrates a Copy-on-Write optimized version of the assignment operator that checks for unique references before mutation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc *op*\\**=** (lhs: **inout** X, rhs: Y) {\n  if isUniquelyReferenced(&lhs) {\n    lhs.\\ *mutateInPlace*\\ (rhs)\n  }\n  else {\n    lhs = *expression creating a new X object*\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing and Ending Borrowed Scopes in Swift SIL\nDESCRIPTION: Illustrates the use of begin_borrow and end_borrow instructions in SIL to define the lifetime of borrowed values with guaranteed ownership. Dependencies include knowledge of SIL ownership rules and base value scope enforcement. Inputs feature owned values; outputs maintain safe borrowing and destruction according to ownership invariants. This snippet enforces that lifetimes are not inadvertently shortened by optimization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_6\n\nLANGUAGE: sil\nCODE:\n```\nsil [ossa] @guaranteed_values : $@convention(thin) (@owned Klass) -> () {\nbb0(%0 : @owned $Klass):\n  %1 = begin_borrow %0 : $Klass\n  cond_br ..., bb1, bb2\n\nbb1:\n  ...\n  end_borrow %1 : $Klass\n  destroy_value %0 : $Klass\n  br bb3\n\nbb2:\n  ...\n  end_borrow %1 : $Klass\n  destroy_value %0 : $Klass\n  br bb3\n\nbb3:\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Hypothetical `throwsIf` Syntax for Higher-Order Polymorphism in Swift\nDESCRIPTION: This Swift code snippet illustrates a *hypothetical* future extension using `throwsIf(fn)` syntax. This would allow a higher-order function like `map` to be declared as throwing only if its function argument `fn` is itself a throwing function, enabling polymorphism over throwing behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nfunc map<T, U>(_ array: [T], fn: T -> U) throwsIf(fn) -> [U] {\n    ...\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Adding MainActor isolation to the calling function\nDESCRIPTION: One way to fix the error is by adding the @MainActor attribute to the function that calls the actor-isolated method, ensuring it runs on the proper actor.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/actor-isolated-call.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nfunc runUpdate(model: MyModel) {\n  model.update()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing makeUnique Method with @make_unique Attribute\nDESCRIPTION: Demonstrates the implementation of a makeUnique method with the @make_unique attribute for copy-on-write optimization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: ArrayStorage\n\n  @makeunique\n  mutating func makeUnique() {\n    if (isUniquelyReferenced(&storage))\n      return\n    storage = storage.copy()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ObjectiveCBridgeable Numeric Example in Swift\nDESCRIPTION: Demonstrates numeric type bridging between Swift and Objective-C using NSNumber, showing how Int can be cast to AnyObject and then to Double.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet a = 1 // Int\n// After the next line, b is an Optional<AnyObject>\n// holding a reference to an NSNumber\nlet b = a as? AnyObject\n// NSNumber is bridgeable to Double\nlet c = b as? Double\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint with Ignore Count (LLDB)\nDESCRIPTION: Sets a breakpoint on the function `GlobalARCOpts::run` but instructs LLDB to ignore the first 4 times it is hit. Execution will only stop on the 5th hit.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_19\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br set -i 4 -n GlobalARCOpts::run\n```\n\n----------------------------------------\n\nTITLE: Using Initializers in Swift Protocols with NSCoding Example\nDESCRIPTION: This example demonstrates how to properly use initializers in protocols through virtual initializers. This ensures that all subclasses also conform to the protocol by inheriting and implementing the required initializers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nprotocol NSCoding {\n  init withCoder(coder: NSCoder)\n}\n\nclass A : NSCoding {\n  @virtual init withCoder(coder: NSCoder) { /* ... */ }\n}\n\nclass B : A {\n  // either error (due to missing initWithCoder) or synthesized initWithCoder:\n}\n```\n\n----------------------------------------\n\nTITLE: Associated Type Inference in Swift Protocols\nDESCRIPTION: This snippet demonstrates associated type inference in Swift, where the compiler infers the associated type 'Element' based on the implementation of the 'next()' method in the conforming type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_36\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol IteratorProtocol {\n  associatedtype Element\n  mutating func next() -> Element?\n}\n\nstruct IntIterator : IteratorProtocol {\n  mutating func next() -> Int? { ... }  // use this to infer Element = Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Move-Only C++ Classes for Swift Integration\nDESCRIPTION: Example of C++ move-only classes definition with deleted copy constructors and assignments, but enabled move operations. Includes a simple File class that manages a file descriptor and a composite TwoFiles class.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_27\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\n// `File` is a move-only C++ class.\nclass File {\nprivate:\n  int file_descriptor_;\npublic:\n  File(std::string_view filename);\n  File(const File &) = delete;\n  File(File &&) = default;\n  ~File();\n\n  File& operator=(const File &) = delete;\n  File& operator=(File &&) = default;\n\n  std::string ReadAll();\n};\n\n// `TwoFiles` is move-only because it is composed of move-only parts.\nstruct TwoFiles {\n  File firstFile;\n  File secondFile;\n};\n```\n\n----------------------------------------\n\nTITLE: Swift Constructor Delegation Example\nDESCRIPTION: Demonstrates how to implement constructor delegation in Swift with multiple constructors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nconstructor(title : String, date : NSDate = NSDate()) {\n  self.title = title\n  self.date = date\n}\n\nconstructor(date : NSDate = NSDate()) {\n  /*self.*/constructor(title:\"Task created on \" + date.description(),\n                         date:date)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Runtime Library Source Files\nDESCRIPTION: Creates an object library target 'swiftRuntime' with a comprehensive list of source files that implement the Swift runtime functionality. These source files handle various aspects of the Swift runtime including memory management, type metadata, and platform-specific implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftRuntime OBJECT\n    \"${PROJECT_SOURCE_DIR}/CompatibilityOverride/CompatibilityOverride.cpp\"\n    AnyHashableSupport.cpp\n    Array.cpp\n    AutoDiffSupport.cpp\n    Bincompat.cpp\n    BytecodeLayouts.cpp\n    Casting.cpp\n    CrashReporter.cpp\n    Demangle.cpp\n    DynamicCast.cpp\n    Enum.cpp\n    EnvironmentVariables.cpp\n    ErrorObjectCommon.cpp\n    ErrorObjectNative.cpp\n    Errors.cpp\n    ErrorDefaultImpls.cpp\n    Exception.cpp\n    Exclusivity.cpp\n    ExistentialContainer.cpp\n    Float16Support.cpp\n    FoundationSupport.cpp\n    FunctionReplacement.cpp\n    GenericMetadataBuilder.cpp\n    Heap.cpp\n    HeapObject.cpp\n    ImageInspectionCommon.cpp\n    ImageInspectionMachO.cpp\n    ImageInspectionELF.cpp\n    ImageInspectionCOFF.cpp\n    ImageInspectionStatic.cpp\n    ImageInspectionWasm.cpp\n    SymbolInfo.cpp\n    KeyPaths.cpp\n    KnownMetadata.cpp\n    LibPrespecialized.cpp\n    Metadata.cpp\n    MetadataLookup.cpp\n    Numeric.cpp\n    Once.cpp\n    Paths.cpp\n    Portability.cpp\n    ProtocolConformance.cpp\n    RefCount.cpp\n    ReflectionMirror.cpp\n    RuntimeInvocationsTracking.cpp\n    SwiftDtoa.cpp\n    SwiftTLSContext.cpp\n    ThreadingError.cpp\n    Tracing.cpp\n    AccessibleFunction.cpp\n    Win32.cpp)\n```\n\n----------------------------------------\n\nTITLE: Module Re-export Declaration in Swift\nDESCRIPTION: Shows syntax for re-exporting modules and selective re-export of specific declarations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@exported import AmericanCheckers\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Associatedtypes in Swift Protocols\nDESCRIPTION: Shows how associatedtypes in protocols could be allowed to carry generic parameters, supporting all constraints including where clauses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Wrapper {\n  associatedtype Wrapped<T>\n  \n  static func wrap<T>(_ t: T) -> Wrapped<T>\n}\n\nenum OptionalWrapper {\n  typealias Wrapped<T> = Optional<T>\n  \n  static func wrap<T>(_ t: T) -> Optional<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Tightly Coupled Default Arguments in Swift Functions - Swift\nDESCRIPTION: This snippet provides examples of grouping closely related defaulted function arguments, such as file and line parameters, either on the same line or each on its own. It advises on acceptable practices for tightly coupled function arguments that track caller source position. The snippet covers function declarations with default parameter values and shows that both compact and more spread-out formatting are valid. No dependencies required, serves instructional formatting use.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// OK\ninternal func _preconditionFailure(\n  _ message: StaticString = StaticString(),\n  file: StaticString = #file, line: UInt = #line\n) -> Never {\n  ...\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Also OK\ninternal func _preconditionFailure(\n  _ message: StaticString = StaticString(),\n  file: StaticString = #file, \n  line: UInt = #line\n) -> Never {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: String Constructors and Initialization\nDESCRIPTION: Various initialization methods for creating strings from different source types including other strings, characters, and formatted data.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_29\n\nLANGUAGE: objective-c\nCODE:\n```\n- (instancetype)init;\n- (instancetype)initWithString:(NSString *)aString;\n+ (instancetype)string;\n+ (instancetype)stringWithString:(NSString *)string;\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Protocol in Swift\nDESCRIPTION: This snippet demonstrates a proposed syntax for generic protocols in Swift, allowing protocols to be parameterized. It shows a 'ConstructibleFromValue' protocol that can be constructed from a specified type T.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol ConstructibleFromValue<T> {\n  init(_ value: T)\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Safety Example with inout Slices\nDESCRIPTION: Code demonstrating memory safety requirements for inout slice operations\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InoutCOWOptimization.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar arr = [1,2,3]\nfunc mutate(_ x: inout Int[]) -> Int[] {\n  x = [3...4]\n  return arr[0...2]\n}\nmutate(&arr[0...2])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating User-Defined Conversions and Type Inference in Swift\nDESCRIPTION: This code example demonstrates Swift's type inference system handling user-defined conversions. It shows a struct X with two conversion methods to String and Int, a function f that takes an Int and a String parameter, and a function call that requires the solver to determine appropriate conversions for arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nstruct X {\n  // user-defined conversions\n  func [conversion] __conversion () -> String { /* ... */ }\n  func [conversion] __conversion () -> Int { /* ... */ }\n}\n\nfunc f(_ i : Int, s : String) { }\n\nvar x : X\nf(10.5, x)\n```\n\n----------------------------------------\n\nTITLE: Defining Selector-Style Function Declarations in Swift\nDESCRIPTION: This snippet shows how selector-style function declarations are defined and matched in Swift. It demonstrates the required keyword argument syntax and the ordering rules for selector pieces.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/KeywordArguments.rst#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo(_ x: Int) bar(y: String) bas(z: UnicodeScalar) {}\nfoo(1, \"two\", '3')              // doesn't match; no keywords\nfoo(x: 1, bar: \"two\", bas: '3') // doesn't match; first keyword provided\nfoo(1, bar: \"two\", bas: '3')    // matches\n\nfunc foo(_ x: Int) foo(y: String) foo(z: UnicodeScalar) {}\nfoo(1, foo: \"two\", foo: '3') // matches\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Protocol Metatypes in Swift\nDESCRIPTION: This example shows how protocol metatypes work in Swift. It defines a protocol P with instance and static requirements, implements it in a struct S, and demonstrates accessing properties both directly and through protocol casting, showing the difference between instance and metatype protocol conformance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {\n   var ivar: Int { get }\n   static svar: Int { get }\n}\nstruct S: P {\n   let ivar = 1\n   static let svar = 2\n}\nS().ivar // 1\nS.self.svar // 2\n(S() as! P).ivar // 1\n(S.self as! P.Type).svar // 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Swift Instruction Pass Simplify Function\nDESCRIPTION: Create a new Swift file in the InstructionPasses directory and implement the simplify function conforming to the SILCombineSimplifyable protocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nfunc simplify() -> SILCombineSimplifyable\n```\n\n----------------------------------------\n\nTITLE: Defining prev_dynamic_function_ref Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for prev_dynamic_function_ref which creates a reference to a previous implementation of a dynamically replaced SIL function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_83\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'prev_dynamic_function_ref' sil-function-name ':' sil-type\n\n%1 = prev_dynamic_function_ref @function : $@convention(thin) T -> U\n// $@convention(thin) T -> U must be a thin function type\n// %1 has type $T -> U\n```\n\n----------------------------------------\n\nTITLE: Specialized Generic VTable Example\nDESCRIPTION: Example of a vtable declaration for a specialized generic class type. This shows how SIL handles vtables for bound generic types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_36\n\nLANGUAGE: sil\nCODE:\n```\nsil_vtable $G<Int> {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C++ subscript operator to Swift\nDESCRIPTION: Demonstrates how C++'s operator[] is mapped to Swift's subscript, using a MyCxxContainer class as an example. The Swift implementation uses _read and _modify accessors to forward memory addresses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_67\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nclass MyCxxContainer {\npublic:\n  const double& operator[](int i) const;\n  double& operator[](int i);\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct MyCxxContainer {\n  public subscript(_ i: Int) -> Double { get set }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Implementation details of the imported API.\n\nstruct MyCxxCollection {\n  // const double& operator[](int i) const;\n  private func _operatorBracketsConst(_ i: Int) -> UnsafePointer<Double>\n\n  // double& operator[](int i);\n  private func _operatorBrackets(_: Int) -> UnsafeMutablePointer<Double>\n\n  // Swifty API.\n  public subscript(_ i: Int) -> Double {\n    _read {\n      yield _operatorBracketsConst(i).pointee\n    }\n    _modify {\n      yield &_operatorBrackets(i).pointee\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Actor-Based Concurrency in Swift\nDESCRIPTION: This example demonstrates the implementation of the Actor model in Swift for concurrent programming. It includes a Collector actor and a Sieve actor for prime number calculation using message passing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nclass Collector : Actor<Int> {\n  var numbers = ContiguousArray<Int>()\n  override func accept(_ x: Int) { numbers.append(x) }\n}\n\nclass Sieve : Actor<Int> {\n  var div: Int\n  var next: Actor<Int>\n\n  init(div d: Int, next n: Actor<Int>) {\n    div = d\n    next = n\n  }\n\n  override func accept(_ x: Int) {\n    if x != div && x % div == 0 { return }\n    next.send(x)\n  }\n}\n\nvar col = Collector()\nvar head: Actor<Int> = col\n\nfor i in 2..<limit { head = Sieve(div: i, next: head) }\n\nfor i in 2..<(limit * limit) { head.send(i) }\n\nprint(col.numbers.sort())\n```\n\n----------------------------------------\n\nTITLE: Defining Read-Only Property in Swift Class\nDESCRIPTION: Example showing a read-only property implementation in a Window class, demonstrating computed property getter without a setter.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/MutationModel.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass Window {\n  var title: String { // title is not writable\n    get {\n      return somethingComputed()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Single-Payload Enum with Tag Bit\nDESCRIPTION: Example of a single-payload enum that requires a tag bit because the data type has no extra inhabitants, showing how the tag bit is set for no-data cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nenum IntOrInfinity { => LLVM <{ i64, i1 }>\n  case NegInfinity    => <{ i64, i1 }> {    0, 1 }\n  case Int(Int)       => <{ i64, i1 }> { %Int, 0 }\n  case PosInfinity    => <{ i64, i1 }> {    1, 1 }\n}\n\nIntOrInfinity.Int(    0) => <{ i64, i1 }> {     0, 0 }\nIntOrInfinity.Int(20721) => <{ i64, i1 }> { 20721, 0 }\n```\n\n----------------------------------------\n\nTITLE: Proposed Generic Sequence Protocol in Swift\nDESCRIPTION: This snippet illustrates a proposed syntax for a generic Sequence protocol and its usage in a function parameter. It demonstrates the desire for specifying types that conform to Sequence with a specific Element type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_32\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Sequence<Element> { ... }\n\nfunc foo(strings: Sequence<String>) {  /// works on any sequence containing Strings\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Final Class Solution for Generic Methods in Swift\nDESCRIPTION: Demonstrates using a final class to allow generic methods by preventing subclassing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfinal class MyClass {\n  func write<T>(t: T) { /* implementation */ }\n}\n\nlet instance: MyClass = ... // can only be MyClass\ninstance.write(t: 42) // ✅\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Enumeration with Several Cases\nDESCRIPTION: This Swift enumeration (CompassDirection) defines four directions as enum cases. When bridged to C++, each case is represented by a corresponding static variable or method for value construction. No dependencies. Used to illustrate enum mapping between Swift and C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'Navigation'\nenum CompassDirection {\n  case north\n  case south\n  case east\n  case west\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Protocol in Swift\nDESCRIPTION: Core protocol definition for Unicode-compliant string types in Swift. Specifies required associated types and properties for encoding, code units, and Unicode scalar access.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Unicode \n  : Comparable, BidirectionalCollection where Element == Character {\n  \n  associatedtype Encoding : UnicodeEncoding\n  var encoding: Encoding { get }\n  \n  associatedtype CodeUnits \n    : RandomAccessCollection where Element == Encoding.CodeUnit\n  var codeUnits: CodeUnits { get }\n  \n  associatedtype UnicodeScalars \n    : BidirectionalCollection where Element == UnicodeScalar\n  var unicodeScalars: UnicodeScalars { get }\n\n  associatedtype ExtendedASCII \n    : BidirectionalCollection where Element == UInt32\n  var extendedASCII: ExtendedASCII { get }\n\n  var unicodeScalars: UnicodeScalars { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed Case Initializer Syntax for Result Enum in Swift\nDESCRIPTION: Demonstration of the proposed case initializer syntax for the Result type, where cases are declared with initializer-like syntax including labeled parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nenum Result<Wrapped> {\n  case init(success: Wrapped)\n  case init(error: Error)\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Public Protocol Declaration\nDESCRIPTION: Example showing a public protocol with both public and non-public requirements. Demonstrates how public requirements must be satisfied by public declarations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n@public protocol P {\n  @public func f() { g() }\n  func g()\n}\n\nstruct X : P { // OK, X is not @public, so neither is its\n```\n\n----------------------------------------\n\nTITLE: Binding Memory to Types with bind_memory in Swift SIL\nDESCRIPTION: The bind_memory instruction binds a region of memory to a specific type. It takes a raw pointer, a size, and a type, and returns a token representing the previous memory state for use in rebinding operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_46\n\nLANGUAGE: Swift\nCODE:\n```\n%token = bind_memory %0 : $Builtin.RawPointer, %1 : $Builtin.Word to $T\n```\n\n----------------------------------------\n\nTITLE: Generic Constraints with Protocol Types in Swift\nDESCRIPTION: Illustrates how protocol types cannot be used in generic contexts requiring protocol conformance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/protocol-type-non-conformance.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc declareAnimalSpecies<T: Animal>(_ animal: T) {\n    animal.makeNoise()\n    print(\"My species is known as \\(T.species)\")\n}\n\nlet dog = Dog()\ndeclareAnimalSpecies(dog)\n// Prints:\n// \"Woof\"\n// \"My species is known as Canus familiaris\"\ndeclareAnimalSpecies(animal)\n// error: protocol type 'Animal' cannot conform to 'Animal'...\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Enumeration with Raw String Values\nDESCRIPTION: This Swift snippet declares an enum (Airport) with a raw value type of String. Each case is assigned a raw string, enabling construction and raw value access in bridged C++. No dependencies beyond Swift's raw-value enum feature and proper bridging.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'Airport'\nenum Airport : String {\n  case LosAngeles   = \"LAX\"\n  case SanFrancisco = \"SFO\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Superclass Initializers in Swift Subclass\nDESCRIPTION: This code snippet shows a proposed syntax for explicitly exposing superclass initializers in a Swift subclass without writing complete forwarding functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/ClassConstruction.rst#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n@inherit init(x:y:z) // one possible syntax\n```\n\n----------------------------------------\n\nTITLE: Detecting Host System SDK and Architecture\nDESCRIPTION: Detects the host system SDK and architecture based on CMAKE_SYSTEM_NAME and CMAKE_SYSTEM_PROCESSOR if not explicitly provided. This auto-detection supports a wide range of platforms including Linux, Windows, macOS, and various BSD variants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# If SWIFT_HOST_VARIANT_SDK not given, try to detect from the CMAKE_SYSTEM_NAME.\nif(SWIFT_HOST_VARIANT_SDK)\n  set(SWIFT_HOST_VARIANT_SDK_default \"${SWIFT_HOST_VARIANT_SDK}\")\nelse()\n  if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Linux\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"LINUX\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"FreeBSD\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"FREEBSD\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"OpenBSD\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"OPENBSD\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"CYGWIN\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"CYGWIN\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"WINDOWS\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Haiku\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"HAIKU\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Android\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"ANDROID\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"OSX\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"WASI\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"WASI\")\n  elseif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Emscripten\")\n    set(SWIFT_HOST_VARIANT_SDK_default \"EMSCRIPTEN\")\n  else()\n    message(FATAL_ERROR \"Unable to detect SDK for host system: ${CMAKE_SYSTEM_NAME}\")\n  endif()\nendif()\n\n# If SWIFT_HOST_VARIANT_ARCH not given, try to detect from the CMAKE_SYSTEM_PROCESSOR.\nif(SWIFT_HOST_VARIANT_ARCH)\n  set(SWIFT_HOST_VARIANT_ARCH_default \"${SWIFT_HOST_VARIANT_ARCH}\")\nelse()\n  if(CMAKE_SYSTEM_PROCESSOR MATCHES \"x86_64|AMD64|amd64\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"x86_64\")\n  elseif(CMAKE_SYSTEM_PROCESSOR MATCHES \"aarch64|ARM64|arm64\")\n    if(SWIFT_HOST_VARIANT_SDK_default STREQUAL \"OSX\")\n      set(SWIFT_HOST_VARIANT_ARCH_default \"arm64\")\n    else()\n      set(SWIFT_HOST_VARIANT_ARCH_default \"aarch64\")\n    endif()\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"ppc64\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"powerpc64\")\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"ppc\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"powerpc\")\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"ppc64le\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"powerpc64le\")\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"s390x\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"s390x\")\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" MATCHES \"armv5|armv5te\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"armv5\")\n  # FIXME: Only matches v6l/v7l - by far the most common variants\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"armv6l\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"armv6\")\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" MATCHES \"armv7l|armv7-a\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"armv7\")\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"IA64\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"itanium\")\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" MATCHES \"(x86|i686)\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"i686\")\n  elseif(\"${CMAKE_SYSTEM_PROCESSOR}\" STREQUAL \"wasm32\")\n    set(SWIFT_HOST_VARIANT_ARCH_default \"wasm32\")\n  else()\n    message(FATAL_ERROR \"Unrecognized architecture on host system: ${CMAKE_SYSTEM_PROCESSOR}\")\n  endif()\nendif()\n\nset(SWIFT_HOST_VARIANT_SDK \"${SWIFT_HOST_VARIANT_SDK_default}\" CACHE STRING\n    \"Deployment sdk for Swift host tools (the compiler).\")\nset(SWIFT_HOST_VARIANT_ARCH \"${SWIFT_HOST_VARIANT_ARCH_default}\" CACHE STRING\n    \"Deployment arch for Swift host tools (the compiler).\")\n```\n\n----------------------------------------\n\nTITLE: Using `defer` for Resource Cleanup in Swift\nDESCRIPTION: This Swift code demonstrates the use of the `defer` statement to ensure a file resource is closed when the current scope (`if` block) is exited. The `close(file)` action is deferred until the end of the scope, guaranteeing execution even if an error occurs within the `while` loop.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nif exists(filename) {\n    let file = open(filename, O_READ)\n    defer close(file)\n\n    while let line = try file.readline() {\n    ...\n    }\n\n    // close occurs here, at the end of the formal scope.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Rethrowing Map Extension (Swift)\nDESCRIPTION: Demonstrates how to declare an extension on Array that introduces a map function marked as `rethrows`, showing that it can throw errors only if its functional argument also throws. Requires understanding of Swift function declaration syntax and generics. The method takes a throwing transformation function as input and outputs an array of mapped values, leveraging type-safe error propagation; dependencies include Swift's standard library and appropriate type constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension Array {\n    func map<U>(_ fn: ElementType throws -> U) rethrows -> [U]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Exclusive Escaping Behavior with @_effects(escapes ->) in Swift\nDESCRIPTION: This snippet shows the `@_effects(escapes <from> -> <to>)` attribute variant. It indicates that the `from-selection` (`s.b`) *can* escape to the `to-selection` (`return`), but other values (like the global `g`) might also escape to the same destination. This signifies a non-exclusive escape path.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nvar g: Class\n\n@_effects(escapes s.b -> return)\nfunc foo1(_ s: Str, _ cond: Bool) -> Class {\n  return cond ? s.b : g\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Swift Array to Standard C++ Vector\nDESCRIPTION: Demonstrates how to convert a swift::Array to a std::vector by using the vector's constructor with iterators from the Swift array.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_70\n\nLANGUAGE: c++\nCODE:\n```\nauto cxxVector = std::vector<int>(intArray.begin(), intArray.end());\n```\n\n----------------------------------------\n\nTITLE: Basic Differential Struct Example in Swift\nDESCRIPTION: A simple example showing how a differential struct is generated for a function with a sin operation. The struct captures the differential functions needed for the derivative calculation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nfunc f(_ x: Float) -> Float {\n  let a = sin(x)\n  return 2 * x // only active in one result!\n}\n\nstruct f_bb0_DF_src_0_wrt_0 {\n  var df_sin: (Float) -> Float\n  var df_mul: (Float) -> Float\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C Unions in Swift\nDESCRIPTION: Shows how C unions are imported as Swift structs with computed properties that all access the same underlying storage. Swift provides initializers for each member type to help with proper initialization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_25\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\nunion IntOrFloat {\n  int i;\n  float f;\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nstruct IntOrFloat {\n  var i: CInt { get set } // Computed property.\n  var f: CFloat { get set } // Computed property.\n  init(i: CInt)\n  init(f: CFloat)\n  init()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Copyable Protocol for Optional Types in Swift\nDESCRIPTION: This code snippet shows how to extend Optional to conform to the proposed Copyable protocol with a conditional conformance based on whether the wrapped type is also Copyable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// Optionals are copyable if the payload type is copyable.\nextension Optional : Copyable where T : Copyable  {}\n```\n\n----------------------------------------\n\nTITLE: Swift Code Example Demonstrating Type Conversion Issues\nDESCRIPTION: Illustrates a Swift code example that would trigger type conversion constraints in the solver. This example shows how function arguments and return values create type relationships that must be resolved.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n  func f(_ i : Int, s : String) { }\n  func g() -> (f : Float, x : X) { }\n\n  f(g())\n```\n\n----------------------------------------\n\nTITLE: RNN Cell Protocol Definition in Swift\nDESCRIPTION: Protocol definition for a recurrent neural network cell, specifying the required associated types and methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_64\n\nLANGUAGE: swift\nCODE:\n```\nprotocol RNNCell: Layer\nwhere Input == RNNCellInput<TimeStepInput, State>,\n      Output == RNNCellOutput<TimeStepOutput, State> {\n    associatedtype TimeStepInput: Differentiable\n    associatedtype TimeStepOutput: Differentiable\n    associatedtype State: Differentiable\n    var zeroState: State { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing globals as static members with swift_name\nDESCRIPTION: Demonstrates how to use swift_name to import global variables as static members of a specific type. This helps organize related functionality and creates a more object-oriented API in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_17\n\nLANGUAGE: objc\nCODE:\n```\n__attribute__((swift_name(\"SpacecraftCoordinates.earth\")))\nextern const struct SPKSpacecraftCoordinates SPKSpacecraftCoordinatesEarth;\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension SpacecraftCoordinates {\n  static var earth: SpacecraftCoordinates { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Example - Move Only Value Usage with Error\nDESCRIPTION: Demonstrates incorrect usage of a move-only value where a borrowed value is consumed, resulting in a compiler error.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nfunc doSomething(@_noImplicitCopy _ x: Klass) -> () { // expected-error {{'x' is borrowed and cannot be consumed}}\n  x.doSomething()\n  let x2 = x // expected-note {{consuming use}}\n  x2.doSomething()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Swift Functions with Multiple Argument Labels\nDESCRIPTION: This snippet demonstrates two ways of declaring Swift functions with multiple argument labels. The first function uses separate labels for each argument, while the second uses a single line with multiple labeled parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/KeywordArguments.rst#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo(_ a: Int) bas(b: Int) bar(c: Int)\n\nfunc foo(_ a: Int, bar: Int, bas: Int)\n```\n\n----------------------------------------\n\nTITLE: Defining a C++ Class within a Namespace (CppTextbox Module)\nDESCRIPTION: This C++ code snippet shows a header file belonging to a hypothetical 'CppTextbox' module. It defines a simple class named 'Textbox' within the same 'widgets' namespace as used in the 'CppButton' module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\n// C++ header in module `CppTextbox`.\n\nnamespace widgets {\nclass Textbox {};\n}\n```\n\n----------------------------------------\n\nTITLE: Indexing Array Addresses with index_addr in Swift SIL\nDESCRIPTION: The index_addr instruction returns the address of the nth element in an array, given a base address and an index. It requires the address to reference a contiguous array and has undefined behavior for out-of-bounds indexing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_43\n\nLANGUAGE: Swift\nCODE:\n```\n%2 = index_addr %0 : $*T, %1 : $Builtin.Int<n>\n```\n\n----------------------------------------\n\nTITLE: Swift Task Class Constructor Implementation\nDESCRIPTION: Shows Swift's unified constructor approach with default arguments replacing multiple initializers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nclass Task {\n  var title : String\n  var date : NSDate\n\n  constructor(title : String = \"Task\", date : NSDate = NSDate()) {\n    self.title = title\n    self.date = date\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Differentiable Function in Swift\nDESCRIPTION: Example showing a differentiable function declaration using @differentiable attribute to mark a function as differentiable. The function computes the cube of a floating point number.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable\nfunc cubed(_ x: Float) -> Float {\n    return x * x * x\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Non-mutating Iteration Example in Swift\nDESCRIPTION: Demonstrates the default iteration style for Collections without explicit ownership modifiers. When the sequence type conforms to Collection, Swift uses non-mutating iteration by default as the optimal approach.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfor employee in company.employees {\n  if !employee.respected { throw CatastrophicHRFailure() }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining value_metatype Instruction in SIL\nDESCRIPTION: Defines the 'value_metatype' instruction which obtains a reference to the dynamic metatype of a given value. Takes a value or address of type T and returns a value of type T.Type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_105\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'value_metatype' sil-type ',' sil-operand\n\n%1 = value_metatype $T.Type, %0 : $T\n// %0 must be a value or address of type $T\n// %1 will be of type $T.Type\n```\n\n----------------------------------------\n\nTITLE: Swift SIL Block Instruction Iteration\nDESCRIPTION: Example showing how to iterate through instructions in a SIL basic block and type check for specific instruction types using Swift's native syntax.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/README.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n  for inst in block.instructions {\n    if let cfi = inst as? CondFailInst {\n      // ...\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Int32 Struct and Addition Operator using Builtin\nDESCRIPTION: Shows how Swift's `Int32` type is implemented as a struct wrapping a compiler intrinsic (`Builtin.Int32`). It also demonstrates how the addition operator (`+`) for `Int32` is defined using another intrinsic (`Builtin.add_Int32`), illustrating that fundamental types are defined in the standard library, not built directly into the compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// From the Swift standard library:\n\nstruct Int32 {\n  internal var _value: Builtin.Int32\n\n  // Note: `Builtin.Xyz` types are only accessible to the standard library.\n}\n\nfunc +(lhs: Int32, rhs: Int32) -> Int32 {\n  return Int32(_value: Builtin.add_Int32(lhs._value, rhs._value))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a libFuzzer Entry Point in Swift\nDESCRIPTION: Shows how to create the required entry point function for libFuzzer testing in Swift. The function must be annotated with @_cdecl(\"LLVMFuzzerTestOneInput\") and receive raw pointer data that can be processed for testing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/libFuzzerIntegration.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@_cdecl(\"LLVMFuzzerTestOneInput\")\npublic func test(_ start: UnsafeRawPointer, _ count: Int) -> CInt {\n  let bytes = UnsafeRawBufferPointer(start: start, count: count)\n  // TODO: Test the code using the provided bytes.\n  return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Example of prev_dynamic_function_ref Usage in Swift Code\nDESCRIPTION: Demonstrates how prev_dynamic_function_ref is generated in SIL from Swift code that uses dynamic replacement and calls the previous implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_84\n\nLANGUAGE: swift\nCODE:\n```\n@_dynamicReplacement(for: test_dynamically_replaceable())\nfunc test_replacement() {\n  test_dynamically_replaceable() // calls previous implementation\n}\n```\n\nLANGUAGE: sil\nCODE:\n```\nsil [dynamic_replacement_for \"test_dynamically_replaceable\"] @test_replacement : $@convention(thin) () -> () {\nbb0:\n  %0 = prev_dynamic_function_ref @test_replacement : $@convention(thin) () -> ()\n  %1 = apply %0() : $@convention(thin) () -> ()\n  %2 = tuple ()\n  return %2 : $()\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Property Values with Virtual Initializers\nDESCRIPTION: This example shows a class with default property values that could have a compiler-synthesized virtual initializer. This approach can eliminate boilerplate code for simple subclasses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nclass D2 : A {\n  var floating = 3.14159\n\n  /* compiler-synthesized */\n  @virtual init(x: Int) {\n    super.init(x)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Runtime Objective-C Bridging Entry Points (Symbols)\nDESCRIPTION: Lists internal runtime functions specifically designed for Objective-C interoperability (`ObjC-only`). These handle bridging Swift types to and from Objective-C, particularly for types that don't have a direct (verbatim) representation (`_swift_bridgeNonVerbatimToObjectiveC`, `_swift_bridgeNonVerbatimFromObjectiveCConditional`). Also includes functions to check bridgability (`_swift_isBridgedNonVerbatimToObjectiveC`) and get the bridged type (`_swift_getBridgedNonVerbatimObjectiveCType`). An `ABI TODO` suggests decoupling these from the core runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_8\n\nLANGUAGE: Symbols\nCODE:\n```\n0000000000003c80 T _swift_bridgeNonVerbatimFromObjectiveCConditional\n00000000000037e0 T _swift_bridgeNonVerbatimToObjectiveC\n00000000000039c0 T _swift_getBridgedNonVerbatimObjectiveCType\n0000000000003d90 T _swift_isBridgedNonVerbatimToObjectiveC\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Runtime Build Options - CMake\nDESCRIPTION: Sets up CMake build configuration for Swift runtime libraries with support for multiple SDKs and architectures. Includes options for cross-compilation, deployment version targeting, and compiler configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_79\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_ENABLE_NEW_RUNTIME_BUILD \"Build Swift runtimes with new build system\" OFF)\nif(SWIFT_ENABLE_NEW_RUNTIME_BUILD)\n  message(STATUS \"New runtime build enabled\")\n\n  add_custom_target(PopulateRuntimeSourceDir\n    COMMAND \"${CMAKE_COMMAND}\" -P \"${CMAKE_CURRENT_SOURCE_DIR}/Runtimes/Resync.cmake\"\n    COMMENT \"Copying sources into new runtime build\")\n\n  foreach(sdk ${SWIFT_SDKS})\n    foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES})\n      # Provide a mechanism to skip building one of these runtimes\n      if(SWIFT_SKIP_${sdk}_${arch}_RUNTIME)\n        message(STATUS \"Skipping: ${arch}-${sdk} runtime build\")\n        continue()\n      endif()\n      set(stdlib_target \"swift-stdlib-${SWIFT_SDK_${sdk}_LIB_SUBDIR}-${arch}\")\n      if(${SWIFT_SDK_${sdk}_${arch}_CACHE})\n        set(stdlib_cache_file_flag -C ${SWIFT_SDK_${sdk}_${arch}_CACHE})\n      endif()\n\n      set(stdlib_target_triple ${SWIFT_SDK_${sdk}_ARCH_${arch}_TRIPLE})\n      if(SWIFT_SDK_${sdk}_DEPLOYMENT_VERSION)\n        string(APPEND stdlib_target_triple ${SWIFT_SDK_${sdk}_DEPLOYMENT_VERSION})\n        set(stdlib_deployment_version_flag -DCMAKE_OSX_DEPLOYMENT_TARGET=${SWIFT_SDK_${sdk}_DEPLOYMENT_VERSION})\n      endif()\n\n      ExternalProject_Add(\"${stdlib_target}-core\"\n        SOURCE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/Runtimes/Core\"\n        DEPENDS PopulateRuntimeSourceDir\n        CMAKE_ARGS\n          -DCMAKE_INSTALL_LIBDIR:FILEPATH=lib\n          -DCMAKE_Swift_COMPILER_WORKS:BOOLEAN=YES\n          -DBUILD_SHARED_LIBS:BOOLEAN=YES\n          ${stdlib_cache_file_flag}\n          ${stdlib_deployment_version_flag}\n          -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}\n          -DCMAKE_INSTALL_PREFIX:FILEPATH=<INSTALL_DIR>\n          -DCMAKE_Swift_COMPILER:FILEPATH=$<IF:$<BOOL:${CMAKE_CROSSCOMPILING}>,${CMAKE_Swift_COMPILER},$<PATH:REPLACE_FILENAME,$<TARGET_FILE:swift-frontend>,swiftc>>\n          -DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}\n          -DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}\n          -DCMAKE_Swift_COMPILER_TARGET:STRING=${stdlib_target_triple}\n          -DCMAKE_C_COMPILER_TARGET:STRING=${stdlib_target_triple}\n          -DCMAKE_CXX_COMPILER_TARGET:STRING=${stdlib_target_triple}\n          -DCMAKE_COLOR_DIAGNOSTICS:BOOLEAN=${CMAKE_COLOR_DIAGNOSTICS}\n          -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM}\n          -DSwiftCore_INSTALL_NESTED_SUBDIR=YES\n          -DSwiftCore_ENABLE_CONCURRENCY=YES)\n      if(NOT ${CMAKE_CROSSCOMPILING})\n        add_dependencies(\"${stdlib_target}-core\" swift-frontend)\n      endif()\n\n      ExternalProject_Get_Property(\"${stdlib_target}-core\" INSTALL_DIR)\n\n      ExternalProject_Add(\"${stdlib_target}-StringProcessing\"\n        SOURCE_DIR\n          \"${CMAKE_CURRENT_SOURCE_DIR}/Runtimes/Supplemental/StringProcessing\"\n        DEPENDS \"${stdlib_target}-core\"\n        INSTALL_DIR \"${INSTALL_DIR}\"\n        INSTALL_COMMAND \"\" # No install story set up yet\n        CMAKE_ARGS\n          -DBUILD_SHARED_LIBS=YES\n          -DCMAKE_Swift_COMPILER_WORKS:BOOLEAN=YES\n          -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}\n          -DCMAKE_INSTALL_PREFIX:FILEPATH=${INSTALL_DIR}\n          -DCMAKE_Swift_COMPILER:FILEPATH=$<IF:$<BOOL:${CMAKE_CROSSCOMPILING}>,${CMAKE_Swift_COMPILER},$<PATH:REPLACE_FILENAME,$<TARGET_FILE:swift-frontend>,swiftc>>\n          -DCMAKE_C_COMPILER:FILEPATH=${CMAKE_C_COMPILER}\n          -DCMAKE_CXX_COMPILER:FILEPATH=${CMAKE_CXX_COMPILER}\n          -DCMAKE_Swift_COMPILER_TARGET:STRING=${stdlib_target_triple}\n          -DCMAKE_C_COMPILER_TARGET:STRING=${stdlib_target_triple}\n          -DCMAKE_CXX_COMPILER_TARGET:STRING=${stdlib_target_triple}\n          -DCMAKE_COLOR_DIAGNOSTICS:BOOLEAN=${CMAKE_COLOR_DIAGNOSTICS}\n          -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM})\n    endforeach()\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Number Differentiation in Swift\nDESCRIPTION: Demonstrates implementation of differentiable complex numbers including initialization and conjugate operations. Shows how to make custom numeric types differentiable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\nstruct Complex<Base: FloatingPoint>: Numeric {\n    var real: Base\n    var imaginary: Base\n\n    @differentiable(linear where Base: Differentiable, Base == Base.TangentVector)\n    init(real: Base = 0, imaginary: Base = 0) {\n        self.real = real\n        self.imaginary = imaginary\n    }\n\n    ...\n}\n\nextension Complex: @memberwise Differentiable where Base: Differentiable, Base == Base.TangentVector {}\n\nextension Complex {\n    @differentiable(where Base: Differentiable, Base == Base.TangentVector)\n    func complexConjugate() -> Complex {\n        Complex(real: real, imaginary: -imaginary)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tuple Values in SIL\nDESCRIPTION: The tuple instruction creates a loadable tuple value by aggregating multiple loadable values. It supports two notations: one for simple tuples without labels, and another for tuples with keyword arguments or variadic fields.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_122\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'tuple' sil-tuple-elements\nsil-tuple-elements ::= '(' (sil-operand (',' sil-operand)*)? ')'\nsil-tuple-elements ::= sil-type '(' (sil-value (',' sil-value)*)? ')'\n\n%1 = tuple (%a : $A, %b : $B, ...)\n// $A, $B, etc. must be loadable non-address types\n// %1 will be of the \"simple\" tuple type $(A, B, ...)\n\n%1 = tuple $(a:A, b:B, ...) (%a, %b, ...)\n// (a:A, b:B, ...) must be a loadable tuple type\n// %1 will be of the type $(a:A, b:B, ...)\n```\n\n----------------------------------------\n\nTITLE: Specifying SIL Function Effect Grammar in Swift SIL (Swift)\nDESCRIPTION: This snippet presents the grammar rules for declaring effects—such as memory or escape effects—within a SIL function. It itemizes optional effect blocks, argument or global effects, and supporting projection paths. This requires understanding of function effect semantics and the available effect types in SIL; annotations can designate specific argument or global memory effects for optimization and analysis.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\neffects ::= '[' argument-name ':' argument-effect (',' argument-effect)*']'\neffects ::= '[' 'global' ':' global-effect (',' global-effect)*']'\nargument-name ::= '%' [0-9]+\n\nargument-effect ::= 'noescape' defined-effect? projection-path?\nargument-effect ::= 'escape' defined-effect? projection-path? '=>' arg-or-return  // exclusive escape\nargument-effect ::= 'escape' defined-effect? projection-path? '->' arg-or-return  // not-exclusive escape\nargument-effect ::= side-effect\n\nglobal-effect ::= 'traps'\nglobal-effect ::= 'allocate'\nglobal-effect ::= 'deinit_barrier'\nglobal-effect ::= side-effect\n\nside-effect ::= 'read' projection-path?\nside-effect ::= 'write' projection-path?\nside-effect ::= 'copy' projection-path?\nside-effect ::= 'destroy' projection-path?\n\narg-or-return ::= argument-name ('.' projection-path)?\narg-or-return ::= '%r' ('.' projection-path)?\ndefined-effect ::= '!'    // the effect is defined in the source code and not\n                          // derived by the optimizer\n\nprojection-path ::= path-component ('.' path-component)* \npath-component ::= 's' [0-9]+        // struct field\npath-component ::= 'c' [0-9]+        // class field\npath-component ::= 'ct'              // class tail element\npath-component ::= 'e' [0-9]+        // enum case\npath-component ::= [0-9]+            // tuple element\npath-component ::= 'v**'             // any value fields\npath-component ::= 'c*'              // any class field\npath-component ::= '**'              // anything\n```\n\n----------------------------------------\n\nTITLE: Using the Swift Generic Context Type Trait\nDESCRIPTION: Demonstrates the use of swift::isUsableInGenericContext to check which C++ types can be used in Swift generic contexts. Shows examples with primitive types and Swift proxies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_73\n\nLANGUAGE: c++\nCODE:\n```\nstatic_assert(swift::isUsableInGenericContext<int> == true);\nstatic_assert(swift::isUsableInGenericContext<swift::String> == true);\n\nstatic_assert(swift::isUsableInGenericContext<std::string> == false);\n```\n\n----------------------------------------\n\nTITLE: Modifying Generic Signature Mangling with @_preInverseGenerics\nDESCRIPTION: Shows how to use @_preInverseGenerics to change the way generic signatures are mangled, specifically for handling invertible protocols like Copyable and Escapable. This helps maintain ABI compatibility when adopting noncopyable generics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\n@_preInverseGenerics\nfunc foo<T: ~Copyable>(_ t: borrowing T) {}\n\n// In 'bug.swift', the function above without the attribute would be:\n//\n//   $s3bug3fooyyxRi_zlF ---> bug.foo<A where A: ~Swift.Copyable>(A) -> ()\n//\n// With the attribute, the above becomes:\n//\n//   $s3bug3fooyyxlF ---> bug.foo<A>(A) -> ()\n//\n// which is exactly the same symbol for the function below.\n\nfunc foo<T>(_ t: T) {}\n```\n\n----------------------------------------\n\nTITLE: Basic Collection Index Access in Swift\nDESCRIPTION: Demonstrates basic collection element access syntax in Swift using index-based subscripting. Shows how collection access requires both the collection and index, unlike C++ iterators.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/IndexInvalidation.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nC[I]\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Generics in Swift\nDESCRIPTION: Shows how generic types could be nested within other generic types, which is currently not supported by the compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nstruct X<T> {\n  struct Y<U> { }\n}\n```\n\n----------------------------------------\n\nTITLE: Indicating On-Stack Pack Metadata Allocation using alloc_pack_metadata in SIL\nDESCRIPTION: The `alloc_pack_metadata` instruction, inserted late in SIL lowering during IRGen, signals that the subsequent instruction might involve on-stack allocation of pack metadata. It functions notionally as a stack allocation and requires a corresponding `dealloc_pack_metadata`. This instruction is only valid in Lowered SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_2\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'alloc_pack_metadata' $()\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Tensor Transposes in Swift\nDESCRIPTION: Demonstrates implementation of tensor transposition and matrix multiplication transposes. Shows how to handle more complex mathematical operations in the differentiable programming context.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_33\n\nLANGUAGE: swift\nCODE:\n```\nextension Tensor where Scalar: FloatingPoint & Differentiable {\n    @transpose(of: transposed, wrt: self)\n    func _() -> Tensor {\n        self.transposed()\n    }\n}\n\n@transpose(of: matmul(_:_:), wrt: 0)\nfunc _<T: FloatingPoint & Differentiable>(y: Tensor<T>, v: Tensor<T>) -> Tensor<T> {\n    matmul(v, y.transposed())\n}\n\n@transpose(of: matmul(_:_:), wrt: 1)\nfunc _<T: FloatingPoint & Differentiable>(x: Tensor<T>, v: Tensor<T>) -> Tensor<T> {\n    matmul(x.transposed(), v)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Extensible Enum in Swift\nDESCRIPTION: This snippet demonstrates how the Objective-C extensible enum is imported into Swift. It becomes an @objc enum with cases and a static property for the aliased case.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n@objc enum TimeOfDay: Int {\n  init?(rawValue: Int)\n  var rawValue: Int { get }\n\n  case morning\n  case afternoon\n  case night\n\n  static var evening: TimeOfDay { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C++ Vector Types Header\nDESCRIPTION: Header file demonstrating C++ vector type definition that can be imported into Swift. Uses std::vector and type alias.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityStatus.md#2025-04-23_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n// cxx-types.h (mapped to CxxTypes module in module.modulemap)\n#include <algorithm>\n#include <vector>\n\nusing V = std::vector<long>;\n```\n\n----------------------------------------\n\nTITLE: Defining Customer and CreditCard Classes with Unowned References\nDESCRIPTION: This code demonstrates using an unowned reference to break a reference cycle. The CreditCard class has an unowned reference to its Customer since a credit card must always have an owner.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/3.txt#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass Customer {\n    let name: String\n    var card: CreditCard?\n    \n    init(name: String) {\n        self.name = name\n    }\n    \n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nclass CreditCard {\n    let number: UInt64\n    unowned let customer: Customer\n    \n    init(number: UInt64, customer: Customer) {\n        self.number = number\n        self.customer = customer\n    }\n    \n    deinit {\n        print(\"Card #\\(number) is being deinitialized\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Memory Addresses with copy_addr in Swift SIL\nDESCRIPTION: The copy_addr instruction loads a value from one memory address and assigns a copy to another address. It can be used with optional [take] and [init] attributes to modify its behavior for different scenarios.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_40\n\nLANGUAGE: Swift\nCODE:\n```\ncopy_addr [take] %0 to [init] %1 : $*T\n```\n\n----------------------------------------\n\nTITLE: Basic C++ Pointer Parameter Example\nDESCRIPTION: Demonstrates a simple C++ function declaration with a pointer parameter, illustrating the basic syntax and lack of inherent safety guarantees.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nvoid increment(int *value);\n```\n\n----------------------------------------\n\nTITLE: Closure-Free VJP Implementation with Pullback Struct\nDESCRIPTION: Shows a more accurate implementation without closures, using a struct to contain pullback functions and separate pullback function definition. Includes struct definition and associated VJP and pullback functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Struct containing pullback functions.\n// Partially-applied to `@pb_f` in `@vjp_f`.\nstruct f_bb0_PB_src_0_wrt_0 {\n  let pb_sin: (Float) -> Float\n  let pb_cos: (Float) -> Float\n  let pb_mul: (Float) -> (Float, Float)\n}\n\n// VJP: replaces all function applications with VJP applications.\nsil @vjp_f : $(Float) -> (Float, (Float) -> Float) {\nbb0(%x):\n  (%y1, %pb_sin) = apply @vjp_sin(%x)\n  (%y2, %pb_cos) = apply @vjp_cos(%x)\n  (%y3, %pb_mul) = apply @vjp_mul(%y1, %y2)\n  // Partially-apply to get a pullback.\n  %pb_struct = struct $f_bb0_PB_src_0_wrt_0 (%pb_sin, %pb_cos, %pb_mul)\n  %pb = partial_apply @pb_f(%pb_struct)\n  // Return tuple of original result and pullback.\n  %result = tuple (%y3, %pb)\n  return %result\n}\n\n// Pullback: apply pullbacks to adjoint values.\nsil @pb_f : $(Float, f_bb0_PB_src_0_wrt_0) -> (Float) {\nbb0(%dy3, %pb_struct):\n  // All \"adjoint values\" in the pullback are zero-initialized.\n  // %dx = 0, %dy1 = 0, %dy2 = 0\n  %pb_mul = struct_extract %pb_struct, #pb_mul\n  (%dy1, %dy2) += %pb_mul(%dy3)\n  %pb_cos = struct_extract %pb_struct, #pb_cos\n  (%dx) += %pb_cos(%dy2)\n  %pb_sin = struct_extract %pb_struct, #pb_sin\n  (%dx) += %pb_sin(%dy1)\n  return %dx\n}\n```\n\n----------------------------------------\n\nTITLE: Using _fixLifetime for Memory Safety\nDESCRIPTION: Demonstrates the use of _fixLifetime to guarantee the lifetime of a value when its physical memory layout is being inspected. This prevents premature deallocation while bits are still being used.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nvar x = ...\ndefer { _fixLifetime(x) } // Guarantee at least lexical lifetime for x\nlet theBits = unsafeBitCast(&x, ...)\n... // use of theBits in ways that may outlive x if it weren't for the _fixLifetime call\n```\n\n----------------------------------------\n\nTITLE: Applying Generalized Class Constraints in Swift\nDESCRIPTION: Illustrates generalizing the `class` constraint beyond protocol definitions. It shows applying `: class` to an associated type `A` within protocol `P` and to a generic type parameter `T` in function `foo`. This restricts these types to be reference types. This is related to SE-0156 and was released with Swift 4.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol P {\n  associatedtype A : class\n}\n\nfunc foo<T : class>(t: T) { }\n```\n\n----------------------------------------\n\nTITLE: Illustrating Formal Access with Optional Chaining in Swift\nDESCRIPTION: This example demonstrates the sequence of formal accesses (FA) that occur when using optional chaining and compound assignment in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\n// left is a variable of optional struct type\n// right is a variable of type Int\nleft?.member += right\n```\n\n----------------------------------------\n\nTITLE: Phi Argument Passing with Branches in Swift SIL (Swift)\nDESCRIPTION: This example illustrates the use of phi arguments in SIL basic blocks, where branching instructions supply operands to a common block with arguments (mimicking phi nodes). Dependencies include properly matching branch operands and block argument types. Inputs are conditioned values, and output is the selected value passed via %phi to the return terminator.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n      cond_br %cond, bb1, bb2\n    bb1:\n      br bb3(%1)\n    bb2:\n      br bb3(%2)\n    bb3(%phi : $Builtin.Int):\n      return %phi\n\n```\n\n----------------------------------------\n\nTITLE: C Pointer Function Imported to Swift\nDESCRIPTION: The Swift translation of the C function with pointers. Note how C pointers are imported as implicitly unwrapped optionals in Swift, as they might potentially be null.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nfunc AddSecondToFirst(_ x: UnsafeMutablePointer<CInt>!, _ y: UnsafePointer<CLong>!)\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct with Default Initializer in Swift\nDESCRIPTION: This Swift snippet defines a simple struct with default property values. The implicit default initializer allows instantiating the struct (either in Swift or, after bridging, in C++) with properties auto-initialized to zero. No dependencies are required. The struct exposes width and height as integer properties, both initialized at declaration. Inputs and outputs involve direct property manipulation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct ScreenSize {\n    var width = 0\n    var height = 0\n}\n```\n\n----------------------------------------\n\nTITLE: CMake Standalone Build Process for Swift Benchmarks\nDESCRIPTION: Series of commands to build Swift benchmarks using CMake without build-script. Shows how to create a build directory, configure with CMake, and build with Ninja.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir build; cd build\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ cmake [path to swift src]/benchmark -G Ninja -DSWIFT_EXEC=[path to built swiftc]\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ninja swift-benchmark-macosx-$(uname -m)\n```\n\n----------------------------------------\n\nTITLE: Swift Async Function Symbols\nDESCRIPTION: Mangled symbols for async functions and their associated resume functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\n$s7example1fyyYaF\n$s7example1fyyYaKF\n$s5Actor02MyA0C17testAsyncFunctionyyYaKFTY0_\n```\n\n----------------------------------------\n\nTITLE: Protocol Conformance Syntax in SIL\nDESCRIPTION: Syntax for protocol conformance declarations in SIL. This includes normal conformances, inherited conformances, specialized conformances, and dependent conformances.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_38\n\nLANGUAGE: sil\nCODE:\n```\nprotocol-conformance ::= normal-protocol-conformance\nprotocol-conformance ::= 'inherit' '(' protocol-conformance ')'\nprotocol-conformance ::= 'specialize' '<' substitution* '>'\n                         '(' protocol-conformance ')'\nprotocol-conformance ::= 'dependent'\nnormal-protocol-conformance ::= identifier ':' identifier 'module' identifier\n```\n\n----------------------------------------\n\nTITLE: Getting Async Continuation for Suspension using get_async_continuation in SIL\nDESCRIPTION: The `get_async_continuation` instruction initiates the suspension process within an `@async` function. It produces an `UnsafeContinuation<T>` or `UnsafeThrowingContinuation<T>` (if `[throws]` is specified) value, where `T` must be a loadable type. This continuation must be consumed by an `await_async_continuation` terminator on all paths. Between these instructions, the function cannot return, throw, yield, unwind, or initiate nested suspensions. The continuation must be resumed exactly once.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_7\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'get_async_continuation' '[throws]'? sil-type\n\n%0 = get_async_continuation $T\n%0 = get_async_continuation [throws] $U\n```\n\n----------------------------------------\n\nTITLE: Default Protocol Implementation in Swift\nDESCRIPTION: Shows how default implementations can be provided in protocols with associated types and generic constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_25\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Bag {\n  associatedtype Element : Equatable\n  func contains(element: Element) -> Bool\n\n  func containsAll<S: Sequence where Sequence.Iterator.Element == Element>(elements: S) -> Bool {\n    for x in elements {\n      if contains(x) { return true }\n    }\n    return false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an actor-isolated class in Swift\nDESCRIPTION: A simple class definition with MainActor isolation. This model has an update method that can only be safely called from the main actor.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/actor-isolated-call.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nclass MyModel {\n  func update() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Single-Case Enum Layout\nDESCRIPTION: Examples of enums with only one case, showing how they are represented either as empty types (if the case has no associated data) or with the same layout as their data type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nenum EmptyCase { case X }             // => empty type\nenum DataCase { case Y(Int, Double) } // => LLVM <{ i64, double }>\n```\n\n----------------------------------------\n\nTITLE: TextOutputStreamable Adapter Implementation\nDESCRIPTION: Implementation of a TextOutputStreamable adapter that wraps an underlying streamable object and provides uppercase conversion functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nstruct UpperStreamable<UnderlyingStreamable : TextOutputStreamable> {\n  var base: UnderlyingStreamable\n\n  func writeTo<T: TextOutputStream>(_ target: [inout] T) {\n    var adaptedStream = UpperStream(target)\n    self.base.writeTo(&adaptedStream)\n    target = adaptedStream.base\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Data Structures in Swift\nDESCRIPTION: Defines two Swift structs, `Point` containing two Float properties (x, y) and `PointPair` containing two `Point` properties (p1, p2). These serve as examples of nested structures of real numbers for which derivatives can be considered.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct Point {\n    var x, y: Float\n}\n\nstruct PointPair {\n    var p1, p2: Point\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Comparable Protocol with SortOrder Enum in Swift\nDESCRIPTION: This code snippet proposes a modification to Swift's Comparable protocol by introducing a SortOrder enum and a compared(to:) method instead of using binary operators. This approach provides better support for string comparisons with additional options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nenum SortOrder { case before, same, after }\n\nprotocol Comparable : Equatable {\n  func compared(to: Self) -> SortOrder\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: List Enum with Indirect Case in Swift\nDESCRIPTION: Example of how an indirect case would be declared with the proposed case initializer syntax, showing compatibility with recursive data structures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nenum List<Element> {\n  case empty\n  indirect case init(element: Element, rest: List<Element>)\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Closure Implementation with partial_apply Example\nDESCRIPTION: Demonstrates how local functions in Swift that capture context are lowered to SIL using partial_apply. The example shows a function 'foo' with a nested function 'bar' and how it's transformed with closure creation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_101\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(_ x:Int) -> Int {\n  func bar(_ y:Int) -> Int {\n    return x + y\n  }\n  return bar(1)\n}\n```\n\nLANGUAGE: sil\nCODE:\n```\nfunc @bar : $@convention(thin) (Int, @box Int, *Int) -> Int {\nentry(%y : $Int, %x_box : $@box Int, %x_address : $*Int):\n  // ... body of bar ...\n}\n\nfunc @foo : $@convention(thin) Int -> Int {\nentry(%x : $Int):\n  // Create a box for the 'x' variable\n  %x_box = alloc_box $Int\n  %x_addr = project_box %x_box : $@box Int\n  store %x to %x_addr : $*Int\n\n  // Create the bar closure\n  %bar_uncurried = function_ref @bar : $(Int, Int) -> Int\n  %bar = partial_apply %bar_uncurried(%x_box, %x_addr) \n    : $(Int, Builtin.NativeObject, *Int) -> Int\n\n  // Apply it\n  %1 = integer_literal $Int, 1\n  %ret = apply %bar(%1) : $(Int) -> Int\n\n  // Clean up\n  release %bar : $(Int) -> Int\n  return %ret : $Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Concurrency Source Files\nDESCRIPTION: Defines the C++ and Swift source files that make up the concurrency runtime implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_RUNTIME_CONCURRENCY_C_SOURCES\n  ../CompatibilityOverride/CompatibilityOverride.cpp\n  Actor.cpp\n  AsyncLet.cpp\n  Clock.cpp\n  GlobalExecutor.cpp\n  ConcurrencyHooks.cpp\n  EmbeddedSupport.cpp\n  Error.cpp\n  ExecutorBridge.cpp\n  ExecutorChecks.cpp\n  Setup.cpp\n  Task.cpp\n  TaskAlloc.cpp\n  TaskStatus.cpp\n  TaskGroup.cpp\n  TaskLocal.cpp\n  ThreadingError.cpp\n  TracingSignpost.cpp\n  AsyncStream.cpp\n  linker-support/magic-symbols-for-install-name.c\n)\n\nset(SWIFT_RUNTIME_CONCURRENCY_SWIFT_SOURCES\n  Actor.swift\n  AsyncLet.swift\n  CheckedContinuation.swift\n  Errors.swift\n  Executor.swift\n  ExecutorBridge.swift\n  ExecutorAssertions.swift\n  AsyncCompactMapSequence.swift\n  AsyncDropFirstSequence.swift\n  AsyncDropWhileSequence.swift\n  AsyncFilterSequence.swift\n  AsyncFlatMapSequence.swift\n  AsyncIteratorProtocol.swift\n  AsyncMapSequence.swift\n  AsyncPrefixSequence.swift\n  AsyncPrefixWhileSequence.swift\n  AsyncSequence.swift\n  AsyncThrowingCompactMapSequence.swift\n  AsyncThrowingDropWhileSequence.swift\n  AsyncThrowingFilterSequence.swift\n  AsyncThrowingFlatMapSequence.swift\n  AsyncThrowingMapSequence.swift\n  AsyncThrowingPrefixWhileSequence.swift\n  PartialAsyncTask.swift\n  GlobalActor.swift\n  GlobalConcurrentExecutor.swift\n  MainActor.swift\n  PriorityQueue.swift\n  SourceCompatibilityShims.swift\n  Task.swift\n  Task+PriorityEscalation.swift\n  Task+TaskExecutor.swift\n  TaskCancellation.swift\n  TaskGroup.swift\n  TaskGroup+Embedded.swift\n  DiscardingTaskGroup.swift\n  TaskLocal.swift\n  TaskSleep.swift\n  AsyncStreamBuffer.swift\n  AsyncStream.swift\n  AsyncThrowingStream.swift\n  Clock.swift\n  ContinuousClock.swift\n  SuspendingClock.swift\n  TaskSleepDuration.swift\n  DummyExecutor.swift\n  CooperativeExecutor.swift\n  PlatformExecutorDarwin.swift\n  PlatformExecutorLinux.swift\n  PlatformExecutorWindows.swift\n)\n```\n\n----------------------------------------\n\nTITLE: Extracting Executor from Actor or Executor in Swift SIL - swift\nDESCRIPTION: Extracts a 'Builtin.Executor' instance from an actor or an executor operand, primarily for use in runtime calls. The operand is guaranteed and not consumed, and these instructions are intended to be lowered away before IR generation so that only 'Builtin.Executor' reaches code generation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'extract_executor' sil-operand\\n\\n%1 = extract_executor %0 : $T\\n// $T must be Builtin.Executor or conform to the Actor protocol\\n// %1 will be of type Builtin.Executor\n```\n\n----------------------------------------\n\nTITLE: TensorFlow Model Training Example\nDESCRIPTION: Demonstrates integration with TensorFlow library to create and train a neural network using differentiable programming.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport TensorFlow\n\nlet model = Sequential {\n    Dense<Float>(inputSize: 784, outputSize: 100, activation: relu)\n    Dense<Float>(inputSize: 100, outputSize: 30, activation: relu)\n    Dense<Float>(inputSize: 30, outputSize: 3, activation: identity)\n}\n\nvar classifier = Model()\nlet optimizer = SGD(for: classifier, learningRate: 0.02)\nContext.local.learningPhase = .training\nlet x: Tensor<Float> = ...\nlet y: Tensor<Int32> = ...\n\nfor _ in 0..<1000 {\n    let 𝛁model = gradient(at: classifier) { classifier -> Tensor<Float> in\n        let ŷ = classifier(x)\n        let loss = softmaxCrossEntropy(logits: ŷ, labels: y)\n        print(\"Loss: \\(loss)\")\n        return loss\n    }\n    optimizer.update(&classifier, along: 𝛁model)\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Value Construction and Dot Syntax\nDESCRIPTION: Examples of constructing enum values both with full type qualification and using dot syntax when the type can be inferred from context.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nvar red = Color.Red\nvar zero = IntOrInfinity.Int(0)\nvar inf = IntOrInfinity.PosInfinity\n\nvar inf : IntOrInfinity = .PosInfinity\nreturn inf.min(.NegInfinity)\n```\n\n----------------------------------------\n\nTITLE: Defining Class Existential Container Layout with C Struct - C\nDESCRIPTION: Defines the layout of a class-constrained existential container using a C struct, for Swift protocols or protocol compositions with class requirements. The struct holds a heap object pointer and an array of witness tables, omitting the fixed buffer and metadata for greater efficiency in the class case. When no witness tables are present, the layout reduces to a single heap object pointer, ensuring ABI compatibility with Objective-C's 'id' and 'id <Protocol>' types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nstruct ClassExistentialContainer {\n  HeapObject *value;\n  WitnessTable *witnessTables[NUM_WITNESS_TABLES];\n};\n```\n\n----------------------------------------\n\nTITLE: Moving Declarations Between Modules with @_originallyDefinedIn\nDESCRIPTION: Illustrates how to use the @_originallyDefinedIn attribute to move declarations from one module to another without breaking clients. This changes name mangling to maintain compatibility with existing code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n@available(toasterOS 42, *)\n@_originallyDefinedIn(module: \"ToasterKit\", toasterOS 57)\nenum Toast {\ncase underdone\ncase perfect\ncase burnt\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n@available(toasterOS 42, bowlOS 54, mugOS 54, *)\n@_originallyDefinedIn(module: \"ToasterKit\", toasterOS 57, bowlOS 69, mugOS 69)\nenum Toast { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Swift Existential Types in C++\nDESCRIPTION: C++ class representation for Swift existential types like 'any Hashable'. It uses an opaque existential buffer to store the value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nclass swift::OpaqueExistential {\n  // approximate layout.\n  alignas(8) char buffer[8*5]; // opaque existential is stored here (inline or boxed by Swift)\n};\nclass swift::any<swift::Hashable>: public swift::OpaqueExistential {\n};\n```\n\n----------------------------------------\n\nTITLE: Meaningful Parameter Names for Documentation in Swift - Swift\nDESCRIPTION: This function demonstrates the significance of using descriptive, even for unlabeled parameters, to improve both code documentation and generated interfaces. Accompanying comments illustrate best documentation practices and postconditions for the function. The mutating method 'reserveCapacity' is typical for array or buffer management.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n/// Reserve enough space to store `minimumCapacity` elements.\n///\n/// PostCondition: `capacity >= minimumCapacity` and the array has\n/// mutable contiguous storage.\n///\n/// Complexity: O(`count`)\nmutating func reserveCapacity(_ minimumCapacity: Int)\n\n```\n\n----------------------------------------\n\nTITLE: Implementing move(by:) for Types Where Self is TangentVector\nDESCRIPTION: An extension that provides a default implementation of move(by:) for types where the TangentVector is the same as the type itself, implementing the method using the addition operator.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\npublic extension Differentiable where Self == TangentVector {\n    mutating func move(by offset: TangentVector) {\n        self += offset\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Swift Enum Raw Value from C++\nDESCRIPTION: This C++ code retrieves the raw string value from a bridged Swift enum using the 'getRawValue' method. The result is used in standard C++ output. Prerequisites: Airport enum defined and bridged, inclusion of 'Airport-Swift.h', using correct namespaces.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_24\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Airport-Swift.h\"\nusing namespace Airport;\n\nvoid printAirport(Airport dest) {\n  swift::String airportCode = dest.getRawValue();\n  std::cout << \"landing at \" << airportCode << \"\\n\";\n}\n```\n\n----------------------------------------\n\nTITLE: Identity Cast Example in Swift\nDESCRIPTION: Demonstrates basic identity casting in Swift using Int type. Shows how is, as?, and as! operators behave when casting a value to its own type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet a: Int = 7\na is Int // true\na as? Int // Succeeds\na as! Int == a // true\n```\n\n----------------------------------------\n\nTITLE: Customizing Objective-C Method Names with swift_name Attribute\nDESCRIPTION: Demonstrates using the `swift_name` attribute to give an Objective-C method a custom name when imported into Swift. The attribute value must specify the full Swift function name including parameter labels.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_26\n\nLANGUAGE: objc\nCODE:\n```\n- (void)doSomethingToFoo:(Foo *)foo bar:(int)bar\n  __attribute__((swift_name(\"doSomethingImportant(to:bar:)\")));\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc doSomethingImportant(to foo: UnsafeMutablePointer<Foo>, bar: Int32)\n```\n\n----------------------------------------\n\nTITLE: Importing BOOL-Returning Method as `throws` in Swift\nDESCRIPTION: This Swift code demonstrates the clean import signature for the `validateForDelete:` Objective-C method. The method name is simplified, the `BOOL` return type is implicitly handled by the `throws` mechanism, and the function is marked `throws`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nfunc validateForDelete() throws\n```\n```\n\n----------------------------------------\n\nTITLE: Importing C++ call operator to Swift\nDESCRIPTION: Shows how C++'s operator() is mapped to Swift's callAsFunction, using a MultiplyIntDouble class as an example. This mapping can handle call operators of std::function, function_ref, and similar types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_68\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nclass MultiplyIntDouble {\npublic:\n  double operator()(int x, double y);\n};\n```\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct MultiplyIntDouble {\n  public func callAsFunction(_ x: Int, _ y: Double) -> Double { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed Free Functions for C++ Class Conversions in Swift\nDESCRIPTION: Presents a proposal for free functions to handle upcasts and downcasts between C++ classes in Swift, to be implemented in the Swift standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_53\n\nLANGUAGE: swift\nCODE:\n```\n// C++ support module in the Swift standard library.\n\npublic func cxxUpcast<Source, Destination>(\n  _ source: UnsafePointer<Source>,\n  to type: Destination.Type\n) -> UnsafePointer<Destination>\n\npublic func cxxDowncast<Source, Destination>(\n  _ source: UnsafePointer<Source>,\n  to type: Destination.Type\n) -> UnsafePointer<Destination>\n\npublic func cxxDynamicDowncast<Source, Destination>(\n  _ source: UnsafePointer<Source>,\n  to type: Destination.Type\n) -> UnsafePointer<Destination>?\n```\n\n----------------------------------------\n\nTITLE: Initializing Arrays with Reference and Value Types in Swift\nDESCRIPTION: Demonstrates creating arrays with reference (ref) and value (val) semantics for their elements. Shows how val and ref can be used to explicitly specify semantics for generic type parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nvar rv = new Array<ref Int>       // Create a vector of Ints-on-the-heap\nvar vv = new Array<val SomeClass> // Create a vector that owns its SomeClasses\n```\n\n----------------------------------------\n\nTITLE: String Extension for Debug and Streamable Output in Swift\nDESCRIPTION: Demonstrates how String conforms to CustomDebugStringConvertible by producing an EscapedStringRepresentation, which wraps the value in quotes and escapes special characters for debugging output. Also extends String to conform to TextOutputStreamable, enabling it to write its content to a TextOutputStream efficiently. Dependencies: CustomDebugStringConvertible, TextOutputStreamable, EscapedStringRepresentation struct. Input: String instance or stream; output: quoted or raw string written to the stream. Limitation: Escaping logic must handle all cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nextension String : CustomDebugStringConvertible {\n  func debugFormat() -> EscapedStringRepresentation {\n    return EscapedStringRepresentation(self)\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nstruct EscapedStringRepresentation : TextOutputStreamable {\n  var _value: String\n\n  func writeTo<T: TextOutputStream>(_ target: [inout] T) {\n    target.append(\"\\\"\")\n    for c in _value {\n      target.append(c.escape())\n    }\n    target.append(\"\\\"\")\n  }\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension String : TextOutputStreamable {\n  func writeTo<T: TextOutputStream>(_ target: [inout] T) {\n    target.append(self) // Append yourself to the stream\n  }\n\n  func format() -> String {\n    return self\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Error Enum in Swift\nDESCRIPTION: This snippet demonstrates how the Objective-C error enum is imported into Swift. It becomes a struct conforming to Error with a nested Code enum and static properties for each case.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nstruct VagueFailure: Error {\n  @objc enum Code: Int {\n    init?(rawValue: Int)\n    var rawValue: Int { get }\n\n    case badness\n    case worseness\n    case worstness\n\n    typealias ErrorType = VagueFailure\n  }\n\n  static var badness: VagueFailure.Code { get }\n  static var worseness: VagueFailure.Code { get }\n  static var worstness: VagueFailure.Code { get }\n\n  static var errorDomain: String { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Tensor Usage Example in Swift\nDESCRIPTION: Shows how the mapped Tensor API would be used in Swift code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfunc useTensor() {\n  var x = Tensor()\n  processTensor(x)\n  processTensor(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Values with copy_value in SIL\nDESCRIPTION: Performs a copy of a loadable value and returns the copy. The returned copy is completely independent of the operand. For ownership qualified functions, a copy_value produces a +1 value that must be consumed at most once along any path.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_112\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'copy_value' sil-operand\n\n%1 = copy_value %0 : $A\n```\n\n----------------------------------------\n\nTITLE: Shortcut TangentVector Synthesis in Swift\nDESCRIPTION: Demonstrates the shortcut synthesis where TangentVector becomes a type alias for Self when specific conditions are met.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nstruct Point<T: Real>: @memberwise Differentiable, @memberwise AdditiveArithmetic {\n    // `x` and `y` are the \"differentiation properties\".\n    var x, y: T\n\n    // The compiler synthesizes:\n    //\n    //     typealias TangentVector = Self\n}\n```\n\n----------------------------------------\n\nTITLE: Using Swift Class Hierarchy in C++\nDESCRIPTION: Shows how to use the bridged Swift class hierarchy in C++, including implicit casting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_35\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Transport-Swift.h\"\n\nusing namespace Transport;\n\nvoid doSomethingWithVehicle(Transport::Vehicle vehicle) {\n  ...\n}\n\nvoid useBicycle() {\n  auto bike = Bicycle::init();\n  doSomethingWithVehicle(bike);\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Substring Operations in Swift Loops\nDESCRIPTION: Shows potential optimization challenges with substring operations in loops, comparing same type copied storage and different type shared storage approaches.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfor _ in 0..<lots { \n  someFunc(takingString: bigString[bigRange]) \n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet substring = bigString[bigRange]\nfor _ in 0..<lots { someFunc(takingString: substring) }\n```\n\n----------------------------------------\n\nTITLE: Generating Objective-C Class Reference Code\nDESCRIPTION: Shows how the Objective-C compiler generates code to reference a Swift stub class, including class reference initialization and message sending.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ObjCInterop.md#2025-04-23_snippet_1\n\nLANGUAGE: objc\nCODE:\n```\n[SwiftStubClass class]\n```\n\n----------------------------------------\n\nTITLE: Defining Autodiff Function Kind Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for different kinds of functions associated with differentiable programming.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nAUTODIFF-FUNCTION-KIND ::= 'f'        // JVP (forward-mode derivative)\nAUTODIFF-FUNCTION-KIND ::= 'r'        // VJP (reverse-mode derivative)\nAUTODIFF-FUNCTION-KIND ::= 'd'        // differential\nAUTODIFF-FUNCTION-KIND ::= 'p'        // pullback\n```\n\n----------------------------------------\n\nTITLE: ObjectiveCBridgeable Array Example in Swift\nDESCRIPTION: Shows how Swift arrays can be cast to Foundation NSArray instances using ObjectiveCBridgeable protocol conformance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet a = [1, 2, 3] // Array<Int>\nlet b = a as? AnyObject // casts to NSArray\n```\n\n----------------------------------------\n\nTITLE: Flexible String Comparison with Ranges in Swift\nDESCRIPTION: Shows various ways to compare strings with ranges applied to different operands, demonstrating the flexibility of the slicing approach.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// apply range on argument rather than target\nfoo.compare(bar[start..<end])\n// apply range on both\nfoo[start..<end].compare(bar[start1..<end1])\n// compare two strings ignoring first character\nfoo.dropFirst().compare(bar.dropFirst())\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-copyable File Handle in Swift\nDESCRIPTION: Example of a non-copyable file handle type that manages resource cleanup through deinit, demonstrating proper resource management with moveonly types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nmoveonly struct File {\n  var descriptor: Int32\n\n  init(filename: String) throws {\n    descriptor = Darwin.open(filename, O_RDONLY)\n\n    // Abnormally exiting 'init' at any point prevents deinit\n    // from being called.\n    if descriptor == -1 { throw ... }\n  }\n\n  deinit {\n    _ = Darwin.close(descriptor)\n  }\n\n  consuming func close() throws {\n    if Darwin.fsync(descriptor) != 0 { throw ... }\n\n    // This is a consuming function, so it has ownership of self.\n    // It doesn't consume self in any other way, so it will\n    // destroy it when it exits by calling deinit.  deinit\n    // will then handle actually closing the descriptor.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Swift Files with SDK for macOS and iOS\nDESCRIPTION: These commands demonstrate how to compile Swift files using the Swift compiler with specific SDKs for macOS and iOS platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\n# Compile a file to an executable for your local machine.\nxcrun -sdk macosx /path/to/swiftc MyFile.swift\n\n# Say you are trying to compile a file importing an iOS-only framework.\nxcrun -sdk iphoneos /path/to/swiftc -target arm64-apple-ios13.0 MyFile.swift\n```\n\n----------------------------------------\n\nTITLE: Defining SIL Processing Stage Syntax (Grammar)\nDESCRIPTION: Describes the grammar for specifying the SIL processing stage within a SIL file using either `sil_stage raw` or `sil_stage canonical`. This declaration indicates whether the contained SIL is in its initial state post-SILGen (raw) or has undergone mandatory optimizations and diagnostics (canonical). Only one such declaration is allowed per file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_0\n\nLANGUAGE: grammar\nCODE:\n```\ndecl ::= sil-stage-decl\nsil-stage-decl ::= 'sil_stage' sil-stage\n\nsil-stage ::= 'raw'\nsil-stage ::= 'canonical'\n```\n\n----------------------------------------\n\nTITLE: C Functions with Nullability Annotations\nDESCRIPTION: C header demonstrating both individual nullability annotations and the assume_nonnull pragma that applies _Nonnull to all pointers by default, reducing annotation burden.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nvoid Func1(int * _Nonnull x, int * _Nonnull y, int * _Nullable z);\n\n#pragma clang assume_nonnull begin\n\nvoid Func2(int *x, int *y, int * _Nullable z);\n\n#pragma clang assume_nonnull end\n```\n\n----------------------------------------\n\nTITLE: Safe Pointer Usage with withUnsafePointer in Swift\nDESCRIPTION: Shows the correct way to work with temporary pointers using withUnsafePointer, providing a safe scope for pointer operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/temporary-pointers.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar x = 42\nwithUnsafePointer(to: &x) { ptr in\n  // Do something with ptr, but don't allow it to escape this closure!\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing Values with release_value in SIL\nDESCRIPTION: Destroys a loadable value by releasing any retainable pointers within it. It's a no-op for trivial types, equivalent to strong_release for reference types, and unowned_release for @unowned types. Not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_116\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'release_value' sil-operand\n\nrelease_value %0 : $A\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Type Metadata Initialization Functions\nDESCRIPTION: Symbol listings for Swift runtime functions that are called when instantiating type metadata at runtime. These functions handle the initialization of different kinds of type metadata including classes, enums, and structs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n000000000001e3e0 T _swift_allocateGenericClassMetadata\n000000000001e620 T _swift_allocateGenericValueMetadata\n0000000000022be0 T _swift_initClassMetadata_UniversalStrategy\n000000000001c100 T _swift_initEnumMetadataMultiPayload\n000000000001bd60 T _swift_initEnumMetadataSingleCase\n000000000001bd60 T _swift_initEnumMetadataSinglePayload\n0000000000022a20 T _swift_initStructMetadata\n0000000000024230 T _swift_initializeSuperclass\n0000000000028b60 T _swift_instantiateObjCClass\n```\n\n----------------------------------------\n\nTITLE: Implementing Instance Method Transposes in Swift\nDESCRIPTION: Shows how to implement transposes for instance methods with various parameter configurations including self parameter. Demonstrates both instance and static method implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\nextension MyType {\n    func foo<T: Differentiable & AdditiveArithmetic>(_ x: T, _ y: T, _ z: T) -> T\n        where T == T.TangentVector { ... }\n}\n\nextension MyType {\n    @transpose(of: foo)\n    func _<T: Differentiable & AdditiveArithmetic>(_ v: T) -> (x: T, y: T, z: T)\n        where T == T.TangentVector { ... }\n    \n    @transpose(of: foo, wrt: 0)\n    func _<T: Differentiable & AdditiveArithmetic>(y: T, z: T, v: T) -> T\n        where T == T.TangentVector { ... }\n    \n    @transpose(of: foo, wrt: (0, 2))\n    func _<T: Differentiable & AdditiveArithmetic>(y: T, v: T) -> (x: T, z: T)\n        where T == T.TangentVector { ... }\n    \n    @transpose(of: foo, wrt: self)\n    static func _<T: Differentiable & AdditiveArithmetic>(x: T, y: T, z: T, v: T) -> MyType\n        where T == T.TangentVector { ... }\n    \n    @transpose(of: foo, wrt: (self, 0, 2))\n    static func _<T: Differentiable & AdditiveArithmetic>(y: T, v: T) -> (self: MyType, x: T, z: T)\n        where T == T.TangentVector { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing Observing Accessors (willSet/didSet) in Swift Classes\nDESCRIPTION: Explains that adding or removing observing accessors (`willSet` or `didSet`) to/from an existing property in a class is permitted under ABI stability rules. This is considered equivalent to modifying the body of the property's setter and does not break binary compatibility for classes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nwillSet\n```\n\nLANGUAGE: swift\nCODE:\n```\ndidSet\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift C-Like Enum Layout\nDESCRIPTION: Examples of C-like enums (with no associated data) showing how Swift uses the minimal number of bits necessary to represent all cases, with tag values assigned in declaration order.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nenum EnumLike2 { // => LLVM i1\n  case A         // => i1 0\n  case B         // => i1 1\n}\n\nenum EnumLike8 { // => LLVM i3\n  case A         // => i3 0\n  case B         // => i3 1\n  case C         // => i3 2\n  case D         // etc.\n  case E\n  case F\n  case G\n  case H\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Example Code for @_effects(releasenone) in Swift\nDESCRIPTION: Defines classes `SomeObject` and `SomeOtherObject`, and a global variable `global`. `SomeOtherObject` has a deinitializer that modifies the global state. This setup is used in subsequent examples to illustrate the behavior and constraints of the `releasenone` effect.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass SomeObject {\n  final var x: Int = 3\n}\n\nvar global = SomeObject()\n\nclass SomeOtherObject {\n  var x: Int = 2\n  deinit {\n    global = SomeObject()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Swift Class with Reference Counting in C++\nDESCRIPTION: Shows how to use a bridged Swift class in C++ with automatic reference counting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_32\n\nLANGUAGE: c++\nCODE:\n```\n#include \"People-Swift.h\"\n\nusing namespace People;\n\nvoid doSomething(Person p) {\n  ...\n}\n\nvoid createAndUsePerson() {\n  Person p = createRandomPerson();\n\n  doSomething(p); // 'p' is copied. Person referenced by p is referenced twice.\n  // Destructor for copy of 'p' is called. Person referenced by p is referenced once.\n\n  // Destructor for 'p' gets called here. Person referenced by p is deallocated.\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Structure Types in C++\nDESCRIPTION: Shows how Swift structures are represented in C++ and how to construct instances using the static init method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'Weather'\nstruct WeatherInformation {\n  var temperature: Int\n}\n```\n\nLANGUAGE: c++\nCODE:\n```\n// C++ use site.\n#include \"Weather-Swift.h\"\n\nint main() {\n   auto weather = Weather::WeatherInformation::init(/*temperature=*/ 25);\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Casting with Private Conformances in Swift\nDESCRIPTION: This snippet shows the potential issues with dynamic casting when using private conformances, highlighting the ambiguity in determining when a cast should succeed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_34\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo(value: Any) {\n  if let x = value as? P { print(\"P\") }\n}\n\nfoo(X())\n```\n\n----------------------------------------\n\nTITLE: Illustrating Formal vs. Lowered Function Types (Swift)\nDESCRIPTION: Provides an example of a Swift function declaration to illustrate the difference between a formal type and its corresponding lowered SIL type. The formal type `((Int, String), any P) -> ()` is lowered to `(Int, @guaranteed String, @in_guaranteed any P) -> ()` in SIL, showing tuple argument flattening and the addition of calling convention information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(a: (Int, String), b: any P) { }\n```\n\n----------------------------------------\n\nTITLE: C Struct Memory Layout in Swift\nDESCRIPTION: Shows how C structs maintain their original memory layout when imported into Swift, with size and stride being equal.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\nstruct CStructWithPadding {\n  int16_t x;\n  int8_t y;\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nstruct CStructWithPadding {\n  var x: Int16\n  var y: Int8\n}\n\nprint(MemoryLayout<CStructWithPadding>.size) // 4\nprint(MemoryLayout<CStructWithPadding>.stride) // 4\n```\n\n----------------------------------------\n\nTITLE: Declaring Instance Variables with Value and Reference Semantics in Swift\nDESCRIPTION: Demonstrates how to declare instance variables with explicit value and reference semantics in structs and classes. Explains the behavior of these variables when the containing object is copied.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Foo {\n    var x: Int  // x is stored by-value\n    val y: Int  // just like \"var y: Int\"\n    ref z: Int  // allocate z on the heap\n\n    var q: SomeClass          // q is a reference to SomeClass\n    ref r: SomeClass          // just like \"var r: SomeClass\"\n    val s: SomeClonableClass // clone() s when Foo is copied\n}\n\nclass Bar : Clonable {\n    var x: Int  // x is stored by-value\n    val y: Int  // just like \"var y: Int\"\n    ref z: Int  // allocate z on the heap\n\n    var q: SomeClass          // q is stored by-reference\n    ref r: SomeClass          // just like \"var r: SomeClass\"\n    val s: SomeClonableClass // clone() s when Bar is clone()d\n}\n```\n\n----------------------------------------\n\nTITLE: Using Swift Enum Representing C++ Namespace (Single Import)\nDESCRIPTION: Shows a Swift usage example after importing only the 'CppButton' module using the empty enum strategy (Option 1). Direct access to 'Button' fails, requiring qualification with the enum namespace ('widgets.Button').\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Usage example: everything works well when we import only `CppButton`.\n\nimport CppButton\n\nfunc makeButton() {\n  var b1 = Button() // error: no such type\n  var b2 = widgets.Button() // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Selective Module Import in Swift\nDESCRIPTION: Shows how to selectively import specific declarations from modules rather than importing everything.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport func Chess.createGreedyPlayer\nimport class Foundation.NSRegularExpression\n```\n\n----------------------------------------\n\nTITLE: Splitting Strings in Cocoa and Swift\nDESCRIPTION: Demonstrates string splitting methods in Cocoa and Swift. Swift provides more flexible options based on modern language practices.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_22\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSArray *)componentsSeparatedByString:(NSString *)separator;\n- (NSArray *)componentsSeparatedByCharactersInSet:(NSCharacterSet *)separator;\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc split(_ maxSplit: Int = Int.max()) -> [String]\nfunc split(_ separator: Character, maxSplit: Int = Int.max()) -> [String]\n```\n\n----------------------------------------\n\nTITLE: Using Swift Static Property in C++\nDESCRIPTION: Demonstrates how to access and modify a Swift static property from C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_42\n\nLANGUAGE: c++\nCODE:\n```\n#include \"GlobalSettings-Swift.h\"\n\nint main(const char *argv[], int argc) {\n  if (!GlobalSettings::Config::getBinaryName().isEmpty())\n    GlobalSettings::Config::setBinaryName(swift::String::init(argv[0]));\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FooClassDerived Class\nDESCRIPTION: Defines a derived class that inherits from FooClassBase and conforms to FooProtocolDerived, implementing required methods and properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  FooClassDerived.  Bbb.\nclass FooClassDerived : FooClassBase, FooProtocolDerived {\n  var fooProperty1: Int32\n  var fooProperty2: Int32\n  var fooProperty3: Int32 { get }\n  func fooInstanceFunc0()\n  func fooInstanceFunc1(_ a: Int32)\n  func fooInstanceFunc2(_ a: Int32, withB b: Int32)\n  func fooBaseInstanceFuncOverridden()\n  class func fooClassFunc0()\n  init!()\n  convenience init!(float f: Float)\n\n  /// Aaa.  fooProtoFunc.  Bbb.\n  /// Ccc.\n  func fooProtoFunc()\n\n  /// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.\n  /// Ccc.\n  func fooProtoFuncWithExtraIndentation1()\n\n  /**\n   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.\n   * Ccc.\n   */\n  func fooProtoFuncWithExtraIndentation2()\n  class func fooProtoClassFunc()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Move Operations in Swift\nDESCRIPTION: Hypothetical syntax demonstration for move operations in Swift using the <- operator, showing how values could be moved between variables without necessarily preserving the source value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ValueSemantics.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nvar tmp <- lhs\nlhs <- rhs\nrhs <- tmp\n```\n\n----------------------------------------\n\nTITLE: Public Access Control in Swift with `@_transparent`\nDESCRIPTION: The `public` access control specifier makes a declaration accessible from any source file in any module. A `public` function marked `@_transparent` must only reference other `public` symbols, as its implementation might be inlined into other modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TransparentAttr.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\npublic\n```\n\n----------------------------------------\n\nTITLE: UsableFromInline Access Control in Swift with `@_transparent`\nDESCRIPTION: The `@usableFromInline` attribute allows an `internal` declaration to be used in `public` or `@inlinable` code within the same module, potentially exposing it across module boundaries. A function marked `@usableFromInline` and `@_transparent` must only reference `public` symbols. `@_transparent` does not imply `@usableFromInline`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TransparentAttr.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n@usableFromInline\n```\n\n----------------------------------------\n\nTITLE: Handling Swift Keywords in C Function Names\nDESCRIPTION: Demonstrates how C functions with names that are Swift keywords are imported and used in Swift code by escaping the keyword with backticks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\n// The name of this function is a keyword in Swift.\nvoid func();\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\n// The name of the function is still `func`, but it is escaped to make the\n// keyword into an identifier.\nfunc `func`()\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Swift user.\n\nfunc test() {\n  // Call the C function declared above.\n  `func`()\n}\n```\n\n----------------------------------------\n\nTITLE: ARM64 Register Allocation Table\nDESCRIPTION: Defines the special purpose registers including frame pointer (x29/fp), link register (x30/lr), stack pointer (sp), and vector registers (v0-v15) used for floating point/SIMD operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/CallingConventionSummary.rst#2025-04-23_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\nx29 / fp   - Frame pointer\nx30 / lr   - Link register\nsp         - Stack pointer\nv0-v7      - Floating point/SIMD arguments 1-8 (also for return)\nv8-v15     - Callee-saved registers (lower 64-bits only)\n```\n\n----------------------------------------\n\nTITLE: Plaid Function Type State Annotation Example\nDESCRIPTION: An example of how Plaid annotates functions with typestate transitions, showing a precondition that 'self' starts in ClosedFile state and a postcondition that it transitions to OpenFile state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/TypeState.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaid\nCODE:\n```\npublic void open() [ClosedFile>>OpenFile]\n```\n\n----------------------------------------\n\nTITLE: Optimizing Loop with makeUnique and getElementAddr Calls in Swift\nDESCRIPTION: Shows how the optimizer transforms a loop using makeUnique and getElementAddr methods, demonstrating the potential for hoisting the makeUnique call out of the loop.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfunc memset(A: inout [Int], value: Int) {\n  for i in 0 .. A.size {\n    makeUnique(&A)\n    addr = getElementAddr(i, &A)\n    addr.pointee = value\n    f()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ABI Implications of @objc Attribute on Swift Enums\nDESCRIPTION: Highlights that adding or removing the `@objc` attribute from an enum is a forbidden change under ABI stability rules. This modification affects the enum's memory representation and interaction with Objective-C, breaking binary compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@objc\n```\n\n----------------------------------------\n\nTITLE: String Slicing in Swift\nDESCRIPTION: Demonstrates how to perform string slicing operations in Swift, which replaces NSString's substring methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\ns[beginning...ending] // [s substringWithRange: NSMakeRange(beginning, ending)]\ns[beginning...]       // [s substringFromIndex: beginning]\ns[...ending]          // [s substringToIndex: ending]\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Swift Program for Android\nDESCRIPTION: Example of a basic Swift program that prints \"Hello, Android\" to the console. This is the Swift source code that will be compiled for Android.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Android.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprint(\"Hello, Android\")\n```\n\n----------------------------------------\n\nTITLE: Using Initializer Syntax with Nominal Types in Swift\nDESCRIPTION: Demonstrates the initializer syntax used with nominal types in Swift. This is a capability specific to nominal types that allows creating values using the type name followed by parentheses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/nominal-types.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nMyType()\n```\n\n----------------------------------------\n\nTITLE: Implementing swap for Generic Types in Swift\nDESCRIPTION: Implementation of the generic swap function that exchanges two values using initialization and assignment. This algorithm works the same way regardless of whether T is a value or reference type because any reference copies are encapsulated within the algorithm.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ValueSemantics.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc swap<T>(_ lhs : [inout] T, rhs : [inout] T)\n{\n    var tmp = lhs   // big 3: initialization - ref copy in tmp\n    lhs = rhs       // big 3: assignment     - ref copy in lhs\n    rhs = tmp       // big 3: assignment     - no ref copies remain\n}\n```\n\n----------------------------------------\n\nTITLE: RawRepresentable Protocol Definition\nDESCRIPTION: The definition of Swift's RawRepresentable protocol which models the relationship between a Swift enum and its raw type, allowing conversion between an enum value and its raw representation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nprotocol RawRepresentable {\n  /// The raw representation type.\n  typealias RawType\n\n  /// Convert the conforming type to its raw type.\n  /// Every valid value of the conforming type should map to a unique\n  /// raw value.\n  func toRaw() -> RawType\n\n  /// Convert a value of raw type to the corresponding value of the\n  /// conforming type.\n  /// Returns None if the raw value has no corresponding conforming type\n  /// value.\n  class func fromRaw(_:RawType) -> Self?\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding with a Stored Property and Observing Accessors in Swift\nDESCRIPTION: This snippet defines `MemoryColorful`, a subclass of `Base`. It overrides the read-only computed `color` property from `Base` with a stored `color` property. Additionally, it adds a `willSet` observer to the new stored property to record the previous color value in the `oldColors` array before a new value is assigned.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nclass MemoryColorful : Base {\n  var oldColors : Array<Color> = []\n\n  var color : Color {\n    willSet {\n      oldColors.append(color)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Launching LLDB for Swift Compiler Debugging\nDESCRIPTION: Demonstrates how to launch LLDB from the command line to debug the Swift compiler. This method allows for full control over the debugging process using LLDB commands.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\nlldb -- /path/to/swift-frontend <args>\n```\n\n----------------------------------------\n\nTITLE: Extending Class with Additional Methods in Swift\nDESCRIPTION: Extends the BaseInHead class with additional functionality through class and instance methods named doItInCategory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nextension BaseInHead {\n  class func doItInCategory()\n  func doItInCategory()\n}\n```\n\n----------------------------------------\n\nTITLE: Eliminating Unused Calls to Readonly Functions in Swift\nDESCRIPTION: This snippet shows an example of calling the `lookup2` function (presumably marked `@_effects(readonly)`) where the return value is ignored (`_ = ...`). Because the function is marked as readonly, the compiler is permitted to completely eliminate this call as it has no side effects and its result is not used.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n```\n_ = lookup2(i)  // can be completely eliminated\n```\n```\n\n----------------------------------------\n\nTITLE: Type Properties Example - Trivial Point Struct\nDESCRIPTION: Demonstrates a trivial type example using a Point struct with two Double fields. This type can be copied by simply copying its bits and requires no special destruction semantics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABIStabilityManifesto.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Point {\n    let x: Double\n    let y: Double\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Error Enum in Objective-C\nDESCRIPTION: This snippet shows how to declare an error enum in Objective-C using the ns_error_domain attribute. It defines a VagueFailureCode enum with three cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\nenum VagueFailureCode __attribute__((ns_error_domain(VagueFailureDomain))) : long {\n  VagueFailureBadness,\n  VagueFailureWorseness,\n  VagueFailureWorstness\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Generic Signature Mangling (BNF)\nDESCRIPTION: Specifies the BNF-like syntax for mangling Swift generic signatures. The mangling starts with optional counts of generic parameters per depth ('z' for zero, index for N+1 parameters; multiple counts represent multiple depths), followed by requirements ('R' prefix, repeated for each requirement), and ends with 'r'. Requirements specify protocol conformance ('type-param protocol-name'), base class constraints ('type-param type' where type starts with 'C' or 'S'), or same-type constraints ('type-param 'z' type') for generic parameters or their associated types ('type-param').\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_13\n\nLANGUAGE: bnf\nCODE:\n```\ngeneric-signature ::= (generic-param-count+)? ('R' requirement*)? 'r'\ngeneric-param-count ::= 'z'       // zero parameters\ngeneric-param-count ::= index     // N+1 parameters\nrequirement ::= type-param protocol-name // protocol requirement\nrequirement ::= type-param type          // base class requirement\n                                         // type starts with [CS]\nrequirement ::= type-param 'z' type      // 'z'ame-type requirement\n\n// Special type mangling for type params that saves the initial 'q' on\n// generic params\ntype-param ::= generic-param-index       // generic parameter\ntype-param ::= 'w' generic-param-index assoc-type-name // associated type\ntype-param ::= 'W' generic-param-index assoc-type-name+ '_'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Array Element Swapping with Direct Memory Access in Swift\nDESCRIPTION: This code snippet demonstrates how mixed addressors allow direct swapping of array elements by obtaining memory addresses of individual elements. The example shows the expansion of a swap operation that accesses unique buffer references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nswap(&array[i], &array[j])\n\n// Expanded:\narray.transitionToUniquelyReferenced()\nlet address_i = array.buffer.storage + i\narray.transitionToUniquelyReferenced()\nlet address_j = array.buffer.storage + j\nswap(address_i, address_j)\n```\n\n----------------------------------------\n\nTITLE: Declaring VTables in Swift Intermediate Language (SIL)\nDESCRIPTION: Syntax for declaring vtables in SIL which map class methods to their implementations. These tables are used for dynamic dispatch of class methods. The example shows vtable declarations for classes in an inheritance hierarchy.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_34\n\nLANGUAGE: sil\nCODE:\n```\ndecl ::= sil-vtable\nsil-vtable ::= 'sil_vtable' identifier '{' sil-vtable-entry* '}'\nsil-vtable ::= 'sil_vtable' sil-type '{' sil-vtable-entry* '}'\n\nsil-vtable-entry ::= sil-decl-ref ':' sil-linkage? sil-function-name\n```\n\n----------------------------------------\n\nTITLE: Podcast Speed Prediction Model\nDESCRIPTION: Implements an intelligent podcast speed adjustment system using differentiable programming concepts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nenum PodcastCategory {\n    case comedy\n    case news\n    ...\n}\n\nenum PodcastSection {\n    case advertisement\n    case introduction\n    case body\n    case conclusion\n}\n\nstruct PodcastState {\n    let category: PodcastCategory\n    let section: PodcastSection\n}\n\nstruct PodcastSpeedModel {\n    var minSpeed, maxSpeed: Float\n    var categoryMultipliers: [PodcastCategory: Float]\n    var sectionMultipliers: [PodcastSection: Float]\n\n    /// Returns a podcast speed multiplier prediction for the given podcast category\n    /// and section.\n    func prediction(for state: PodcastState) -> Float {\n        let speed = categoryMultipliers[state.category] * sectionMultipliers[state.section]\n        if speed < minSpeed { return minSpeed }\n        if speed > maxSpeed { return maxSpeed }\n        return speed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C Global Variables into Swift as var/let\nDESCRIPTION: This Swift code displays how C global variables are imported. The mutable C global `NumAlpacas` (`int`) is imported as a Swift variable (`var`) of type `CInt`. The constant C global `NumLlamas` (`const int`) is imported as a Swift constant (`let`) of type `CInt`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nvar NumAlpacas: CInt\nlet NumLlamas: CInt\n```\n\n----------------------------------------\n\nTITLE: Opening Existentials in Swift\nDESCRIPTION: This snippet demonstrates a proposed 'open existential' operation in Swift, which allows type-safe use of existentials with Self or associated type constraints in function parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_38\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Equatable {\n  func ==(lhs: Self, rhs: Self) -> Bool\n  func !=(lhs: Self, rhs: Self) -> Bool\n}\n\nlet e1: Equatable = ...\nlet e2: Equatable = ...\nif e1 == e2 { ... } // error: e1 and e2 don't necessarily have the same dynamic type\n\nif let storedInE1 = e1 openas T { // T is the type of storedInE1, a copy of the value stored in e1\n  if let storedInE2 = e2 as? T {  // Does e2 have type T? If so, copy its value to storedInE2\n    if storedInE1 == storedInE2 { ... } // Okay: storedInT1 and storedInE2 are both of type T, which we know is Equatable\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Swift with Different Debug Configurations\nDESCRIPTION: These commands show various ways to build Swift with different debug configurations using build-script, allowing for optimized or debug builds of different components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\n# optimized Stdlib + debug Swiftc + optimized Clang/LLVM\nutils/build-script --release-debuginfo --debug-swift # other flags...\n\n# debug Stdlib + optimized Swiftc + optimized Clang/LLVM\nutils/build-script --release-debuginfo --debug-swift-stdlib # other flags...\n\n# optimized Stdlib + debug Swiftc (except typechecker) + optimized Clang/LLVM\nutils/build-script --release-debuginfo --debug-swift --force-optimized-typechecker\n\n# Last resort option, it is highly unlikely that you will need this\n# debug Stdlib + debug Swiftc + debug Clang/LLVM\nutils/build-script --debug # other flags...\n```\n\n----------------------------------------\n\nTITLE: Specializing Methods with @_specialize and @_specializeExtension in Swift\nDESCRIPTION: Shows how to use @_specializeExtension in conjunction with @_specialize to add specializations of existing methods in downstream libraries. This can improve performance for specific type combinations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n// Module A\n@usableFromInline\ninternal struct S<T> {\n  @inlinable\n  internal func doIt() { /* body */ }\n}\n\n// Module B\nimport A\n\n@_specializeExtension\nextension S { // ok\n  @_specialize(exported: true, target: doIt(), where T == Int)\n  public func specializedDoIt() {}\n}\n\n// Module C\nimport A\nimport B\n\nfunc f(_ s: S<Int>) {\n  s.doIt() // will call specialized version of doIt() where T == Int from B\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExtractInstruction Protocol in Swift for SIL\nDESCRIPTION: Proposes an `ExtractInstruction` protocol to classify instructions that extract elements from aggregate values, like `StructExtractInst` and `TupleExtractInst`. Further details are required. Status: To-do.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nExtractInstruction // Protocol (Proposed)\n```\n\n----------------------------------------\n\nTITLE: Non-mutating Iteration Example in Swift\nDESCRIPTION: Shows a non-mutating iteration pattern using the 'shared' keyword, which visits elements without modifying the collection. This is a 'nonmutating' operation on Collection that simply references the existing elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nfor shared employee in company.employees {\n  if !employee.respected { throw CatastrophicHRFailure() }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Parameter Naming in Swift Generic Types - Swift\nDESCRIPTION: This snippet emphasizes meaningful type parameter naming for generic types by using role-descriptive identifiers instead of single letters. For example, 'Key' and 'Value' replace less informative names like 'K' and 'V'. No dependencies needed; applies during generic type definition.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct Dictionary<Key, Value> { // *not* Dictionary<K, V>\n\n```\n\n----------------------------------------\n\nTITLE: Illustrating Missing Designated Initializer Issues in Swift\nDESCRIPTION: This code snippet highlights a potential memory safety issue addressed by the `@_hasMissingDesignatedInitializers` attribute (though the attribute itself isn't shown here). Class `B` inherits from `A` but only overrides the *public* designated initializer `init(visible:)`. If `B` were allowed to inherit the convenience initializer `init(hi:)` (which calls the *non-public* designated initializer `init(invisible:)`), the property `B.x` would remain uninitialized, leading to a safety hole. The attribute signals this possibility when non-public designated initializers exist.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n```swift\n// Lib.swift\nopen class A {\n  init(invisible: ()) {}\n\n  public init(visible: ()) {}\n  public convenience init(hi: ()) { self.init(invisible: ()) }\n}\n\n// Client.swift\nclass B : A {\n  var x: String\n\n  public override init(visible: ()) {\n    self.x = \"Garbage\"\n    super.init(visible: ())\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Global Variable Storage using alloc_global in SIL\nDESCRIPTION: The `alloc_global` instruction initializes the storage for a specified global variable (`@foo`). It ensures the global is allocated exactly once; calling it on an already initialized global results in undefined behavior. The instruction takes the SIL name of the global variable as an operand.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_6\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'alloc_global' sil-global-name\n\nalloc_global @foo\n```\n\n----------------------------------------\n\nTITLE: ABI Stability of Static Properties in @frozen Swift Structs\nDESCRIPTION: Clarifies that the strict ABI stability restrictions applied to instance properties of `@frozen` structs do not extend to `static` properties. Static members behave similarly to top-level functions and variables regarding ABI stability, allowing more flexibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstatic\n```\n\n----------------------------------------\n\nTITLE: Marking Disfavored Overloads using Swift Attributes - Swift\nDESCRIPTION: Demonstrates how to use the @_disfavoredOverload attribute with initializers in Swift to influence overload resolution. The attribute encourages the type checker to avoid certain overloads unless no other suitable options exist, solving issues with undesired default literal types. No external dependencies are required. Inputs are constructors accepting StringProtocol or a specific key type; output is a preferred initializer path during type inference. Limitations include reliance on internal compiler rules, discouraged for long-term API design.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nextension LocalizedStringKey: ExpressibleByStringLiteral { ... }\n\nextension Text {\n  // We want `Text(\"foo\")` to use this initializer:\n  init(_ key: LocalizedStringKey) { ... }\n\n  // But without @_disfavoredOverload, it would use this one instead,\n  // because that lets it give the literal its default type:\n  @_disfavoredOverload init<S: StringProtocol>(_ str: S) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Function and Differentiable Reference in Swift\nDESCRIPTION: This snippet demonstrates a generic function definition and a reference to it as a differentiable function type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n@_silgen_name(\"generic\")\nfunc generic<T>(_ x: T) -> T {\n  return x\n}\nlet _: @differentiable (Float) -> Float = generic\n```\n\n----------------------------------------\n\nTITLE: Invoking Swift Frontend with Custom Arguments\nDESCRIPTION: Example of how to manually invoke swift-frontend with custom argument files for whole-module optimization. This shows a typical workflow for advanced compiler usage with file lists and optimization flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nxcrun swift-frontend @args.txt \\\n  -filelist input-files.txt \\\n  -output-filelist output-files.txt \\\n  -O -whole-module-optimization \\\n  -emit-assembly\n```\n\n----------------------------------------\n\nTITLE: Declaring Functions with Various Documentation Styles in Swift\nDESCRIPTION: Demonstrates different ways to document Swift functions, including block comments, line comments, and mixed documentation styles.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n/**\n * Aaa.  fooFuncWithComment1.  Bbb.\n * Ccc.\n *\n * Ddd.\n */\nfunc fooFuncWithComment1()\n\n/*!\n  Aaa.  fooFuncWithComment2.  Bbb.\n */\nfunc fooFuncWithComment2()\n\n/**\n * Aaa.  fooFuncWithComment3.  Bbb.\n */\n/**\n * Ccc.\n */\nfunc fooFuncWithComment3()\n\n/**\n * Aaa.  fooFuncWithComment4.  Bbb.\n */\n/// Ddd.\nfunc fooFuncWithComment4()\n\n/// Aaa.  fooFuncWithComment5.  Bbb.\n/// Ccc.\n///\n/// Ddd.\nfunc fooFuncWithComment5()\n```\n\n----------------------------------------\n\nTITLE: Implementing Variadic Generic Apply Function with Tuple Splatting in Swift (Proposed Syntax)\nDESCRIPTION: Illustrates a potential `apply` function using proposed variadic generics and tuple splatting syntax (`...`). It takes a function `fn` accepting variadic arguments (`Args...`) and a tuple `args` containing those arguments. It calls `fn` by expanding the tuple `args` into individual arguments using `args...`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\nfunc apply<... Args, Result>(fn: (Args...) -> Result,    // function taking some number of arguments and producing Result\n                           args: (Args...)) -> Result {  // tuple of arguments\n  return fn(args...)                                     // expand the arguments in the tuple \"args\" into separate arguments\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing type names with swift_name\nDESCRIPTION: Shows how to use the swift_name attribute to give custom Swift names to C/Objective-C types. This allows for more Swift-friendly naming conventions without changing the original C/Objective-C code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_16\n\nLANGUAGE: objc\nCODE:\n```\n__attribute__((swift_name(\"SpacecraftCoordinates\")))\nstruct SPKSpacecraftCoordinates {\n  double x, y, z, t; // space and time, of course\n};\n\n// Usually seen as NS_SWIFT_NAME.\n```\n\nLANGUAGE: swift\nCODE:\n```\nstruct SpacecraftCoordinates {\n  var x, y, z, t: Double\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating const_cast in C++ Member Functions\nDESCRIPTION: This snippet shows how const-qualified member functions in C++ can still mutate object state using const_cast, which is difficult to detect statically.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_39\n\nLANGUAGE: c++\nCODE:\n```\nclass SneakyMutation {\nprivate:\n  int value = 0;\npublic:\n  void mutateSneakily() const { opaqueMutator(this); }\n  void setValue(int newValue) { value = newValue; }\n};\n\n// in a different file:\nvoid opaqueMutator(const SneakyMutation* sm) {\n  const_cast<SneakyMutation*>(sm)->setValue(42);\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ObjC Option Set Pattern with NSStringCompareOptions\nDESCRIPTION: Example of the traditional NS_OPTIONS idiom in Objective-C, where option sets are represented as enums with bit-pattern constants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_0\n\nLANGUAGE: objc\nCODE:\n```\n// ObjC\ntypedef NS_OPTIONS(NSUInteger, NSStringCompareOptions) {\n  NSCaseInsensitiveSearch = 1,\n  NSLiteralSearch = 2,\n  NSBackwardsSearch = 4,\n  NSAnchoredSearch = 8,\n  NSNumericSearch = 64,\n  NSDiacriticInsensitiveSearch = 128,\n  NSWidthInsensitiveSearch = 256,\n  NSForcedOrderingSearch = 512,\n  NSRegularExpressionSearch = 1024\n};\n```\n\n----------------------------------------\n\nTITLE: CustomDebugStringConvertible Protocol for Debug Printing in Swift\nDESCRIPTION: Defines the CustomDebugStringConvertible protocol, enabling types to specify their own debug representations for REPL and debugger output. The debugFormat() method returns a value conforming to TextOutputStreamable (defaults to String), and types can customize this as needed. Requires no extra dependencies. Input: type instance; output: debug-format string. Limitations: Should match the actual structure for optimal debugging.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n/// A thing that can be printed in the REPL and the Debugger\nprotocol CustomDebugStringConvertible {\n  typealias DebugRepresentation : TextOutputStreamable = String\n\n  /// Produce a textual representation for the REPL and\n  /// Debugger.\n  func debugFormat() -> DebugRepresentation\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Value Dependencies with mark_dependence in SIL\nDESCRIPTION: Marks that a value depends on another value (base). Operations that would destroy the base must not be moved before instructions using the result. The base and value must not be identical. Additional attributes can mark nonescaping dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_68\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction :: 'mark_dependence' mark-dep-option? sil-operand 'on' sil-operand\nmark-dep-option ::= '[nonescaping]'\nmark-dep-option ::= '[unresolved]'\n\n%2 = mark_dependence %value : $*T on %base : $Builtin.NativeObject\n```\n\n----------------------------------------\n\nTITLE: Defining Key Path and Autodiff Function Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for key path operations, autodiff functions, and related thunks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= entity generic-signature? type type* 'TK' // key path getter\nglobal ::= entity generic-signature? type type* 'Tk' // key path setter\nglobal ::= entity generic-signature? type type* 'Tkmu' // key path unapplied method\nglobal ::= entity generic-signature? type type* 'TkMA' // key path applied method\nglobal ::= type generic-signature 'TH' // key path equality\nglobal ::= type generic-signature 'Th' // key path hasher\nglobal ::= global generic-signature? 'TJ' AUTODIFF-FUNCTION-KIND INDEX-SUBSET 'p' INDEX-SUBSET 'r' // autodiff function\nglobal ::= global generic-signature? 'TJV' AUTODIFF-FUNCTION-KIND INDEX-SUBSET 'p' INDEX-SUBSET 'r' // autodiff derivative vtable thunk\nglobal ::= from-type to-type 'TJO' AUTODIFF-FUNCTION-KIND // autodiff self-reordering reabstraction thunk\nglobal ::= from-type 'TJS' AUTODIFF-FUNCTION-KIND INDEX-SUBSET 'p' INDEX-SUBSET 'r' INDEX-SUBSET 'P' // autodiff linear map subset parameters thunk\nglobal ::= global to-type 'TJS' AUTODIFF-FUNCTION-KIND INDEX-SUBSET 'p' INDEX-SUBSET 'r' INDEX-SUBSET 'P' // autodiff derivative function subset parameters thunk\n```\n\n----------------------------------------\n\nTITLE: Defining FooRuncingOptions OptionSet in Swift\nDESCRIPTION: Declares an OptionSet struct with Int raw values and static properties for individual options that can be combined using bitwise operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  FooRuncingOptions.  Bbb.\nstruct FooRuncingOptions : OptionSet {\n  init(rawValue: Int)\n  let rawValue: Int\n  static var enableMince: FooRuncingOptions { get }\n  static var enableQuince: FooRuncingOptions { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Lifetime Production in Swift\nDESCRIPTION: This snippet shows different ways to produce owned values in Swift, including function arguments, function calls, copy operations, and load instructions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nbb0(%0: @owned $C):\n  %1 = apply %f() : @convention(thin) () -> @owned D\n  %2 = copy_value %x\n  %3 = load [copy] %a\n  ...\n```\n\n----------------------------------------\n\nTITLE: Invalid function overloading based on throws in Swift\nDESCRIPTION: Demonstrates that overloading functions solely based on whether they throw is not allowed in the proposed Swift error handling system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo() { ... }        // called in contexts that cannot throw\nfunc foo() throws { ... } // called in contexts that can throw\n```\n\n----------------------------------------\n\nTITLE: Swift SIL Implementation of Async Function with Continuation\nDESCRIPTION: The SIL representation of an async function using get_async_continuation and await_async_continuation to implement coroutine suspension and resumption, showing how continuations are created and awaited.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nsil @waitForCallback : $@convention(thin) @async () -> Int {\nentry:\n  %cc = get_async_continuation $Int\n  %closure = function_ref @waitForCallback_closure\n    : $@convention(thin) (UnsafeContinuation<Int>) -> ()\n  apply %closure(%cc)\n  await_async_continuation %cc, resume resume_cc\n\nresume_cc(%result : $Int):\n  return %result\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Memory Safety in Swift Addressors with Buffer Retention\nDESCRIPTION: This code shows a solution to the memory safety issue with addressors by retaining the buffer for the duration of the operation, ensuring that any interleaving modifications will create a new buffer rather than invalidate the address.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Project the array element.\nlet address = array.subscript.mutableAddress(0)\n\n// Remember the new buffer value and keep it retained.\nlet newArrayBuffer = array.buffer\nretain(newArrayBuffer)\n```\n\n----------------------------------------\n\nTITLE: Declaring a SIL Function With Effects in Swift SIL (Swift)\nDESCRIPTION: This example shows an external SIL function declaration with attached argument and global effects. It demonstrates how to annotate memory or escape effects for specific arguments and declare global side-effects, facilitating advanced optimization and analysis. Requires proper SIL attribute and grammar support, and names/types must reflect those in the originating Swift code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nsil @foo : $@convention(thin) (@guaranteed String) -> String {\n[%0: escape v** => %r.v**]\n[global: read,copy]\n}\n```\n\n----------------------------------------\n\nTITLE: Annotated Value Activity Analysis for Differentiability (Swift)\nDESCRIPTION: These Swift code samples illustrate how activity analysis annotates function parameters and local variables according to whether they are varied, useful, or active (and thus need derivatives). Asterisks highlight variables' roles, aiding AD implementers in determining which paths require propagation of derivatives. The code showcases @differentiable functions with annotated identifiers, but not actual Swift syntax. Used for documentation and AD developer orientation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n// Varied values are surrounded by asterisks.\n// These values depend on the input (`x`).\n@differentiable\nfunc f(_ **x**: Float) -> Float {\n    let **sinx** = sin(**x**)\n    let cos3 = cos(3)\n    let **result** = **sinx** * cos3\n    print(**result**)\n    return **result**\n}\n\n// Useful values are surrounded by asterisks.\n// These values contribute to the output (`result`).\n@differentiable\nfunc f(_ **x**: Float) -> Float {\n    let **sinx** = sin(**x**)\n    let **cos3** = cos(**3**)\n    let **result** = **sinx** * **cos3**\n    print(**result**)\n    return **result**\n}\n\n// Active values are surrounded by asterisks.\n// These values are varied and useful, and thus need a derivative.\n@differentiable\nfunc f(_ **x**: Float) -> Float {\n    let **sinx** = sin(**x**)\n    let cos3 = cos(3)\n    let **result** = **sinx** * cos3\n    let void = print(result)\n    return **result**\n}\n```\n\n----------------------------------------\n\nTITLE: Proposed Lowercase Case Naming Convention for Swift Enums\nDESCRIPTION: Examples of how the proposed lowercase naming convention would apply to cases without associated values, making them more consistent with other property-like declarations in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nenum ComparisonResult {\n  case descending, same, ascending\n}\n\nenum Bool {\n  case true, false\n}\n\nenum Optional<Wrapped> {\n  case nil\n  case init(_ some: Wrapped)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Implementation Protocol with Public Access in Swift\nDESCRIPTION: Example of using a public protocol with a leading underscore to work around compiler limitations. The protocol serves as an implementation detail that's not intended for direct use by stdlib clients.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControlInStdlib.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Workaround. \npublic protocol _Pointer { \n  // ... \n}\n\n// Symbol intended for use outside stdlib. \npublic struct UnsafeRawPointer: _Pointer {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking C++ Interop Version in Swift Context\nDESCRIPTION: Example demonstrating how to guard breaking changes using LangOpts to check the C++ interop version in the Swift context.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityContributorGuide.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nif (SwiftContext.LangOpts.isCxxInteropCompatVersionAtLeast(version::getUpcomingCxxInteropCompatVersion())) {\n  // ... breaking change ...\n}\n```\n\n----------------------------------------\n\nTITLE: Error Propagation with Out-Parameters in Objective-C\nDESCRIPTION: Shows error handling using out-parameters in Objective-C, where error information is passed through a double-pointer parameter.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\n- (BOOL) readKeys: (NSArray<NSString*>**) strings error: (NSError**) err {\n  while (1) {\n    NSString *key;\n    if ([self readKey: &key error: err]) {\n      return TRUE;\n    }\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Try with Autorelease Pool in Swift\nDESCRIPTION: Demonstrates how to use try expressions within statement-like functions such as autoreleasepool.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nautoreleasepool {\n    let string = parseString(try)\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unsafe Usage of @unowned References in Swift\nDESCRIPTION: This example shows a potentially unsafe usage pattern with @unowned references where the oldWindow reference might become invalid. It illustrates why care must be taken with unowned references since accessing them after the referent is destroyed causes an assertion failure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc moveToWindow(_ newWindow : Window) {\n  var oldWindow = self.window   // an @unowned back reference\n  oldWindow.hide()              // might remove the UI's strong reference\n  oldWindow.remove(self)\n  newWindow.add(self)\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Struct Layout Examples\nDESCRIPTION: Examples of Swift struct layouts showing how Swift structs are represented in LLVM IR. This demonstrates how Swift differs from C layout by allowing fields to be placed in tail padding and how empty structs are handled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// LLVM <{ i64, i8 }>\nstruct S {\n  var x: Int\n  var y: UInt8\n}\n\n// LLVM <{ i8, [7 x i8], <{ i64, i8 }>, i8 }>\nstruct S2 {\n  var x: UInt8\n  var s: S\n  var y: UInt8\n}\n\n// LLVM <{}>\nstruct Empty {}\n\n// LLVM <{ i64, i64 }>\nstruct ContainsEmpty {\n  var x: Int\n  var y: Empty\n  var z: Int\n}\n```\n\n----------------------------------------\n\nTITLE: Helper Methods for Object Slicing in Swift\nDESCRIPTION: Shows how helper methods could be added to improve the ergonomics of object slicing in Swift when working with C++ APIs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_49\n\nLANGUAGE: swift\nCODE:\n```\n// Manually written overlay for a C++ API.\n\nextension Base {\n  public init(_ other: Derived) {\n    self = UnsafeRawPointer(&other).load(as: Base.self)\n  }\n  public init(_ other: UnsafePointer<Derived>) {\n    self =  UnsafeRawPointer(other).load(as: Base.self)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Error.self Self-Conformance in Swift\nDESCRIPTION: This snippet demonstrates that Error.self now fully self-conforms, which was not the case in Swift 5.3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Swift 5.3: Prints \"false\"\n// Specification: prints \"true\"\nprint(Error.self is Error.Type)\n```\n\n----------------------------------------\n\nTITLE: ABI Implications of @objc Attribute on Swift Protocols\nDESCRIPTION: Specifies that making a non-`@objc` protocol `@objc` or vice versa is a forbidden change as it fundamentally alters the protocol's representation and interaction with Objective-C, breaking ABI. However, adding a new optional requirement to an existing `@objc` protocol is permitted.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n@objc\n```\n\n----------------------------------------\n\nTITLE: Implementing a Swift Result Builder with Custom Methods\nDESCRIPTION: A complete example of a result builder structure with all possible building methods. This shows the required and optional methods that enable transforming various Swift statement kinds into a builder result, including support for expressions, conditionals, loops, and availability checks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/result-builder-methods.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@resultBuilder\nstruct ExampleResultBuilder {\n  /// The type of individual statement expressions in the transformed function,\n  /// which defaults to Component if buildExpression() is not provided.\n  typealias Expression = ...\n\n  /// The type of a partial result, which will be carried through all of the\n  /// build functions.\n  typealias Component = ...\n\n  /// The type of the final returned result, which defaults to Component if\n  /// buildFinalResult() is not provided.\n  typealias Result = ...\n\n  /// Required by every result builder to build combined results from\n  /// statement blocks.\n  static func buildBlock(_ components: Component...) -> Component { ... }\n\n  /// If declared, provides contextual type information for statement\n  /// expressions to translate them into partial results.\n  static func buildExpression(_ expression: Expression) -> Component { ... }\n\n  /// Enables support for `if` statements that do not have an `else`.\n  static func buildOptional(_ component: Component?) -> Component { ... }\n\n  /// With buildEither(second:), enables support for 'if-else' and 'switch'\n  /// statements by folding conditional results into a single result.\n  static func buildEither(first component: Component) -> Component { ... }\n\n  /// With buildEither(first:), enables support for 'if-else' and 'switch'\n  /// statements by folding conditional results into a single result.\n  static func buildEither(second component: Component) -> Component { ... }\n\n  /// Enables support for..in loops in a result builder by combining the\n  /// results of all iterations into a single result.\n  static func buildArray(_ components: [Component]) -> Component { ... }\n\n  /// If declared, this will be called on the partial result of an 'if\n  /// #available' block to allow the result builder to erase type\n  /// information.\n  static func buildLimitedAvailability(_ component: Component) -> Component { ... }\n\n  /// If declared, this will be called on the partial result from the outermost\n  /// block statement to produce the final returned result.\n  static func buildFinalResult(_ component: Component) -> Result { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Option Set Enum in Objective-C\nDESCRIPTION: This snippet shows how to declare an option set enum in Objective-C using the flag_enum attribute. It defines a PetsAllowed enum with three cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_4\n\nLANGUAGE: Objective-C\nCODE:\n```\nenum PetsAllowed __attribute__((flag_enum)) : long {\n  PetsAllowedNone = 0,\n  PetsAllowedDogs = 1 << 0,\n  PetsAllowedCats = 1 << 1\n};\n```\n\n----------------------------------------\n\nTITLE: Using CGColorCreate with Array Argument in Swift\nDESCRIPTION: Demonstrates passing a Swift Array to a C function expecting a const pointer argument. This allows for natural Swift syntax when working with C APIs that take array parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nlet rgb = CGColorSpaceCreateCalibratedRGB()\nlet cyan = CGColorCreate(rgb, [0, 1, 1])\n```\n\n----------------------------------------\n\nTITLE: Building Benchmarks with SwiftPM and LLBuild\nDESCRIPTION: Command to build Swift benchmarks using SwiftPM and LLBuild through build-script, which compiles the toolchain and then builds benchmarks for different optimization levels.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nswift-source$ swift/utils/build-script --swiftpm --llbuild --install-swift --install-swiftpm --install-llbuild --toolchain-benchmarks\n```\n\n----------------------------------------\n\nTITLE: Beginning Memory Access in Swift Intermediate Language (SIL)\nDESCRIPTION: The begin_access instruction starts an access to target memory. It specifies the type of access (init, read, modify, deinit) and enforcement level. The instruction must be applied to a root address derivation and ended with a corresponding end_access.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_48\n\nLANGUAGE: sil\nCODE:\n```\n%1 = begin_access [read] [unknown] %0 : $*T\n// %0 must be of $*T type.\n```\n\n----------------------------------------\n\nTITLE: SIL Attributes for @get_subobject_addr Method in Swift\nDESCRIPTION: Shows the low-level SIL attributes for a method marked with @get_subobject_addr. These attributes specify the method's effects on self and non-self state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@_effects(argonly)\n@selfeffects(preserve_unique, nowrite, nocapture, norelease,\n             projects_subobject_addr)\nfunc getElementAddr(_ index: Int) -> T {}\n```\n\n----------------------------------------\n\nTITLE: Optimized Hoisted ARC Loop in SIL After Pair Elimination\nDESCRIPTION: This final snippet in the series illustrates the canonical optimized form after retaining/releases have been hoisted outside the loop using ARCLoopHoisting. A single retain precedes the loop, and a single release follows. The transformation assures the same lifetime semantics as the unoptimized loop but minimizes inside-loop ARC overhead. No external dependencies are needed—all logic is based on SIL control flow and ARC semantics on %x.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_5\n\nLANGUAGE: SIL\nCODE:\n```\nbb0:\\n  retain %x                    (8)\\n  br bb1\\n\\nbb1:\\n  apply %f(%x)\\n  apply %f(%x)\\n  cond_br ..., bb1, bb2\\n\\nbb2:\\n  release %x                   (9)\\n  return ...\\n\n```\n\n----------------------------------------\n\nTITLE: Swift Optional Chaining Example\nDESCRIPTION: Shows Swift optional chaining syntax for mutating optional values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_50\n\nLANGUAGE: swift\nCODE:\n```\nfunc getXPerhaps() -> [Int]? { ... }\n\nvar x = getXPerhaps()\nx?.append(42);  // append `42` to x when it's not nil\n```\n\n----------------------------------------\n\nTITLE: Conflict Between Isolated Conformance and Sendable Requirements\nDESCRIPTION: This example illustrates the incompatibility between actor-isolated conformances and Sendable requirements. Even when executing on the correct actor, an isolated conformance cannot satisfy a Sendable requirement as it would allow the conformance to cross isolation boundaries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/isolated-conformances.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc acceptSendableP<T: P & Sendable>(_ value: T) { }\n\n@MainActor func useIsolatedConformanceOnMainActor(myType: MyType) {\n  acceptSendableP(myType) // error: main-actor-isolated conformance of 'MyType' to 'P' cannot satisfy conformance requirement for 'Sendable' type parameter 'T'\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Invalid Class Assignment Method Example\nDESCRIPTION: Shows an invalid implementation of assignment methods in a class, demonstrating why explicit assignment methods are not allowed in class types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass Foo {\n  let x: Int\n  required init(x: Int) { self.x = x }\n\n  func advanced(_ amount: Int) -> Self {\n    return Self(x: self.x + amount)\n  }\n\n  // Error, because we can't reseat self in a class method\n  func =advanced(amount: Int) {\n    self = Self(x: self.x + amount)\n    // This would also be inappropriate, since it would violate value\n    // semantics:\n    // self.x += amount\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Actual C Enum Mapping to Swift Struct\nDESCRIPTION: This snippet demonstrates how C enums are actually mapped to Swift structs, preserving the flexibility and runtime behavior of C enums.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift: actual mapping.\n\nstruct HomeworkExcuse: Equatable, RawRepresentable {\n  init(_ rawValue: CUnsignedInt)\n  init(rawValue: CUnsignedInt)\n  var rawValue: CUnsignedInt { get }\n  typealias RawValue = CUnsignedInt\n}\nvar EatenByPet: HomeworkExcuse { get }\nvar ForgotAtHome: HomeworkExcuse { get }\nvar ThoughtItWasDueNextWeek: HomeworkExcuse { get }\n```\n\n----------------------------------------\n\nTITLE: Applying Leading Underscore Rule to Variables, Functions and Typealiases in Swift\nDESCRIPTION: Examples demonstrating the standard library's leading underscore naming convention for internal symbols. These names indicate that the symbols are not part of the public API intended for users.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControlInStdlib.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar _value: Int\nfunc _bridgeSomethingToAnything(_ something: AnyObject) -> AnyObject\ntypealias _InternalTypealias = HeapBuffer<Int, Int>\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Initializers for Enum Cases in Swift\nDESCRIPTION: Example of how Optional currently uses initializers to provide more intuitive access to its Some and None cases, demonstrating the common pattern of adding boilerplate to make enums more usable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nextension Optional {\n  init(_ value: Wrapped) {\n    self = .Some(value)\n  }\n\n  init() {\n    self = .None\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Trimming Characters in Cocoa and Swift\nDESCRIPTION: Shows how to trim characters from a string in Cocoa and Swift. The Swift version uses a more flexible closure-based approach.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_25\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSString *)stringByTrimmingCharactersInSet:(NSCharacterSet *)set;\n```\n\nLANGUAGE: Swift\nCODE:\n```\ntrim trim(match: (Character) -> Bool) -> String\n```\n\n----------------------------------------\n\nTITLE: Using Extended Namespace Enum via Synthetic Module\nDESCRIPTION: Demonstrates Swift usage with the improved Option 1 (synthetic module and extensions). After importing 'CppButton' and 'CppTextbox' (which implicitly bring in 'CppNamespaces'), accessing 'widgets.Button' works without ambiguity because 'widgets' is now a single, extended enum.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n// Usage example.\n\nimport CppButton\nimport CppTextbox\n// Implicitly injected: import CppNamespaces\n\nfunc makeButton() {\n  var b1 = Button() // error: no such type\n  var b2 = widgets.Button() // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Array Elements in C++\nDESCRIPTION: Shows how to set elements in a Swift Array using the setElementAtIndex method in C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_44\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Swift-Swift.h\"\n\nvoid updateArrayElement(swift::Array<swift::String> &elements) {\n  elements.setElementAtIndex(0, \"hello world!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Swift UI Integration with C++\nDESCRIPTION: Demonstrates how to use imported C++ functions within a SwiftUI view.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/GettingStartedWithC++Interop.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport SwiftUI\nimport CxxTest\n\nstruct ContentView: View {\n    var body: some View {\n        Text(\"CxxTest function result: \\(cxxFunction(7))\")\n            .padding()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Declaration for Swift-Interoperable Function\nDESCRIPTION: Shows the C++ declaration for a Swift function that uses @_silgen_name, demonstrating the pattern for calling Swift functions from C/C++ code with the appropriate calling convention.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nSWIFT_CC(swift) SWIFT_RUNTIME_STDLIB_INTERNAL\nvoid _destroyTLS(void *);\n\n// ... C code can now call _destroyTLS on a void * ...\n```\n\n----------------------------------------\n\nTITLE: Pointer Conversion in Swift\nDESCRIPTION: Illustrates how Swift currently handles pointer conversion between different types using memory rebinding.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_50\n\nLANGUAGE: swift\nCODE:\n```\n// Pointer conversion example in existing Swift language.\n\nvar basePtr: UnsafePointer<Base> = ...\nbasePtr.withMemoryRebound(to: Derived.self) {\n  // In this closure, `$0` has type `UnsafePointer<Derived>` and\n  // aliases `basePtr`.\n  $0.doBaseStuff()\n  $0.doDerivedStuff()\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing C++ and Swift Destruction Semantics\nDESCRIPTION: Comparison between C++ and Swift regarding when destructors are called, highlighting how C++ guarantees precise destruction points while Swift has more flexible lifetime rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_23\n\nLANGUAGE: c++\nCODE:\n```\n// A pure C++ program.\n\nclass PickyCxxClass {\npublic:\n  ~PickyCxxClass() { ... }\n};\n\nvoid test1() {\n  PickyClass c;\n  printf(\"Hello\");\n  // `c`'s destructor is guaranteed to be called exactly here.\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\n// A pure Swift program, similar to the C++ program above.\n\nstruct SwiftStruct { ... }\n\nfunc test1() {\n  var s = SwiftStruct()\n  // `s` can be deallocated here.\n  print(\"Hello\")\n  // `s` can also be deallocated here.\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Protocol Conformance Functions\nDESCRIPTION: Symbol listings for Swift runtime functions responsible for protocol conformance registration and checking. These functions manage the runtime relationship between types and protocols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n0000000000002ef0 T _swift_registerProtocolConformances\n0000000000003060 T _swift_conformsToProtocol\n```\n\n----------------------------------------\n\nTITLE: Diagnostic Entry Format in SourceKit Responses\nDESCRIPTION: JSON schema for diagnostic entries in editor request responses. Details the structure of error messages, including severity, location, description, and optional fix suggestions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.severity>:         (UID)   // severity of error\n    <key.offset>:           (int64) // error location\n    <key.description>:      (string) // error description\n    [opts] <key.fixits>:    (array) [fixit+] // one or more entries for fixits\n    [opts] <key.ranges>:    (array) [range+] // one or more entries for ranges\n    [opts] <key.diagnostics>: (array) [diagnostic+] // one or more sub-diagnostic entries\n    [opts] <key.educational_note_paths>: (array) [string+] // one or more absolute paths of educational notes, formatted as Markdown\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Protocol in Swift\nDESCRIPTION: Defines a simple protocol named `P` with no requirements. According to the documentation, this definition implicitly creates an existential type, also named `P` (a protocol witness type), which can hold any instance of a type conforming to `P`. This snippet serves as the basis for discussing protocol witness types and their casting behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {}\n```\n\n----------------------------------------\n\nTITLE: Selective Module Re-export in Swift\nDESCRIPTION: Demonstrates how to selectively re-export specific declarations from a module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@exported import class AmericanCheckers.Board\n```\n\n----------------------------------------\n\nTITLE: Expression Type Checking Timing Output\nDESCRIPTION: Sample output from -debug-time-expression-type-checking showing timing for individual expression analysis.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n0.20ms  test.swift:17:16\n1.82ms  test.swift:18:12\n6.35ms  test.swift:19:8\n0.11ms  test.swift:22:5\n0.02ms  test.swift:24:10\n0.02ms  test.swift:30:16\n```\n\n----------------------------------------\n\nTITLE: Configuring swiftImmediate Static Library with CMake\nDESCRIPTION: Defines a static library build target 'swiftImmediate' with source files and LLVM component dependencies. Sets up linking with required Swift modules including Frontend, IDE, IRGen, SILGen, and SILOptimizer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Immediate/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftImmediate STATIC\n  SwiftMaterializationUnit.cpp\n  Immediate.cpp\n  LLVM_LINK_COMPONENTS\n    executionengine\n    linker\n    mcjit\n    orcjit\n    orctargetprocess\n    jitlink\n    transformutils)\ntarget_link_libraries(swiftImmediate PRIVATE\n  swiftFrontend\n  swiftIDE\n  swiftIRGen\n  swiftSILGen\n  swiftSILOptimizer)\n```\n\n----------------------------------------\n\nTITLE: Compile-Time Error When Calling Mutating Method on Const Value in C++\nDESCRIPTION: This code demonstrates a compile-time C++ error when attempting to mutate a Swift struct declared as const. Moving a Point's coordinates is not permitted if the object is const, as the generated C++ method preserves Swift's mutability constraints. No dependencies beyond C++ const correctness enforcement.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\nint main() {\n  const auto point = Point();\n  point.moveBy(1.0, 2.0);\n  //` reports a compile time error.`\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Extensions with Direct Property Initialization\nDESCRIPTION: This example demonstrates initializing properties directly in an extension. This approach works only if the extension is in the same resilience domain as the original type definition, otherwise it could lead to incomplete initialization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nextension A {\n  init(i: Int, j: Int) {\n    x = i + j    // initialize x\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining String Creation from UTF-8 Literal in SIL\nDESCRIPTION: Defines the `string.makeUTF8` SIL operation used to convert a built-in UTF-8 encoded string literal into a String object. It takes a pointer to the start of the data, the count of UTF-8 code units, and a flag indicating if the content is purely ASCII.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nstring.makeUTF8(start: RawPointer, utf8CodeUnitCount: Word, isASCII: Int1) -> String\n```\n\n----------------------------------------\n\nTITLE: Applying the @_effects Attribute in Swift\nDESCRIPTION: Demonstrates the basic syntax for applying the `@_effects` attribute to a Swift function. In this example, the `readonly` tag indicates the function depends on program state but does not modify it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@_effects(readonly) func foo() { .. }\n```\n\n----------------------------------------\n\nTITLE: Declaring Opened Pack Element Archetype in SIL\nDESCRIPTION: Syntax for declaring an opened pack element archetype in SIL. This is used to work with element types of a pack with statically unknown elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_11\n\nLANGUAGE: SIL\nCODE:\n```\n@pack_element(\"<uuid>\") T\n```\n\n----------------------------------------\n\nTITLE: Handling Complex NSError Import Scenarios and Return Type Transformation in Swift\nDESCRIPTION: Illustrates more complex scenarios for importing Objective-C methods with `NSError **` parameters. Shows how overloading interacts with error handling imports and highlights a case where the `NSError **` parameter is *not* removed but replaced by a `Void` parameter (`error: ()`) if suffix stripping isn't applied. Also demonstrates how the return type can be transformed (e.g., `nullable NSString *` returning method becomes `throws -> String` when error handling is inferred).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_13\n\nLANGUAGE: objective-c\nCODE:\n```\n- (nullable NSString *)fetchDisplayNameOfResource:(NSURL *)resource;\n- (nullable NSString *)fetchDisplayNameOfResource:(NSURL *)resource error:(NSError **)error;\n- (nullable NSString *)fetchDisplayNameOfMyFavoriteSong;\n- (nullable NSString *)fetchDisplayNameOfMyFavoriteSongAndReturnError:(NSError **)error;\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc fetchDisplayName(ofResource: URL) -> String?\nfunc fetchDisplayName(ofResource: URL, error: ()) throws -> String\nfunc fetchDisplayNameOfMyFavoriteSong() -> String?\nfunc fetchDisplayNameOfMyFavoriteSongAndReturnError() throws -> String\n```\n\n----------------------------------------\n\nTITLE: C++ Interface for Swift Structure with Properties\nDESCRIPTION: Shows the C++ interface generated for the Swift structure with properties, including getter and setter methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_37\n\nLANGUAGE: c++\nCODE:\n```\nclass WeatherInformation {\npublic:\n  WeatherInformation() = delete;\n\n  swift::Int getTemperature() const;\n  void setTemperature(swift::Int);\n\n  swift::Int getTemperatureInFahrenheit() const;\n\nprivate:\n  // opaque storage representation for the Swift struct.\n};\n```\n\n----------------------------------------\n\nTITLE: Swift Inheritance Example Classes C1-C3\nDESCRIPTION: Demonstrates further inheritance patterns with classes extending B1, B2, and B3, showing how initializer inheritance varies based on parent class implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InitializerInheritance.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass C1 : B1 {\n  init withTitle(title: String) { // subobject initializer\n    super.init(withTitle:title)\n  }\n\n  init withTitle(title: String) initialCount(Int) { // subobject initializer\n    counter = initialCount\n    super.init(withTitle:title)\n  }\n}\n\nclass C2 : B2 {\n  init withTitle(title: String) initialCount(Int) { // subobject initializer\n    super.init(withTitle: title, initialCount:initialCount)\n  }\n\n  // inherits A's init(), B2's init withTitle(String)\n}\n\nclass C3 : B3 {\n  init withInitialCount(initialCount: Int) { // subobject initializer\n    super.init(withInitialCount: initialCount)\n  }\n\n  // inherits B3's init withStringCount(str: String)\n  // does not inherit A's init()\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Def-Use Access Chain with Phi Nodes in SIL\nDESCRIPTION: Example of a valid def-use access chain with an access base defined in bb0, a memory operation in bb3, and access projections including index_addr and struct_element_addr on the path.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nclass A {}\n\nstruct S {\n  var field0: Int64\n  var field1: Int64\n}\n```\n\nLANGUAGE: sil\nCODE:\n```\nbb0:\n  %base    = ref_tail_addr %ref : $A, $S\n  %idxproj = index_addr %tail : $*S, %idx : $Builtin.Word\n  %p0 = address_to_pointer %idxproj : $*S to $Builtin.RawPointer\n  cond_br _, bb1, bb2\n\nbb1:\n  %pcopy = copy_value %p0 : $Builtin.RawPointer\n  %adr1  = pointer_to_address [strict] %pcopy : $Builtin.RawPointer to $*S\n  %p1    = address_to_pointer %adr1 : $*S to $Builtin.RawPointer\n  br bb3(%p1 : $Builtin.RawPointer)\n\nbb2:\n  br bb3(%p0 : $Builtin.RawPointer)\n\nbb3(%p3 : $Builtin.RawPointer):\n  %adr3 = pointer_to_address [strict] %p3 : $Builtin.RawPointer to $*S\n  %field = struct_element_addr %adr3 : $*S, $S.field0\n  load %field : $*Int64\n```\n\n----------------------------------------\n\nTITLE: Implementing cycle_length for Value Types in Swift\nDESCRIPTION: Implementation of a generic cycle_length algorithm that measures the length of a cycle of states. This version works specifically with mutable value types by making one copy and performing in-place mutation of the state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ValueSemantics.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc cycle_length<State>(\n  _ s : State, mutate : ([inout] State) -> ()\n) -> Int\n  requires State : EqualityComparable\n{\n    State x = s     // one copy                // 1\n    mutate(&x)      // in-place mutation\n    Int n = 1\n    while x != s {                            // 2\n         mutate(&x) // in-place mutation\n         ++n\n    }\n    return n\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Generic Array Creation Function in Swift\nDESCRIPTION: Demonstrates calling the previously defined `array(withSeparator:)` function. It uses the string \"Swift\" (which conforms to `SequenceType`) as the source and \"|\" as the separator, converts the resulting character array back to a string, and prints it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet s = String(array(\"Swift\", withSeparator: \"|\"))\nprint(s)        // \"S|w|i|f|t\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Protocol Conformance in Swift\nDESCRIPTION: This example shows how a 'Real' struct could conform to the 'ConstructibleFrom' protocol for both Float and Double types, demonstrating multiple conformances for a single type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_31\n\nLANGUAGE: Swift\nCODE:\n```\nstruct Real { ... }\nextension Real : ConstructibleFrom<Float> {\n  init(_ value: Float) { ... }\n}\nextension Real : ConstructibleFrom<Double> {\n  init(_ value: Double) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C++ Function Template with @_must_specialize Attribute\nDESCRIPTION: This snippet demonstrates how to import a C++ function template into Swift using the @_must_specialize attribute to enforce specialization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_60\n\nLANGUAGE: swift\nCODE:\n```\n@_must_specialize\nfunc functionTemplate<T>(_ t: T)\n```\n\n----------------------------------------\n\nTITLE: Error When Using Isolated Conformance in Non-isolated Context\nDESCRIPTION: This example shows the error that occurs when trying to use a Main Actor-isolated conformance in a non-isolated context. The compiler prevents this unsafe usage, requiring the calling function to also be isolated to the same actor.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/isolated-conformances.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc acceptP<T: P>(_ value: T) { }\n\n/*nonisolated*/ func useIsolatedConformance(myType: MyType) {\n  acceptP(myType) // error: main actor-isolated conformance of 'MyType' to 'P' cannot be used in nonisolated context\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic and Valid Swift Imports of C++ Pointer Functions\nDESCRIPTION: Example showing why certain bridging operations are not possible. The first approach attempts to bridge a pointer to std::vector to a pointer to Swift Array, which is problematic due to ownership and storage issues.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_75\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\n// We can't bridge types like in the example below, it is not implementable.\n// The underlying C++ function returns a vector with unclear ownership semantics,\n// but we need to return a pointer to a Swift Array.\n// If the bridging code allocates the Swift Array on the heap, what would own it?\n// If the bridging code does not allocate a new Array, where does it get the\n// storage from?\nfunc GetPtrToVector() -> UnsafePointer<[CInt]>\n\n// OK.\nfunc GetPtrToVector() -> UnsafePointer<std.vector<CInt>>\n```\n\n----------------------------------------\n\nTITLE: Using 'issafe' Wrapper for Explicit Safety Marking in Swift\nDESCRIPTION: This code demonstrates the proposed 'issafe' wrapper that allows developers to explicitly mark a code region as safe, taking responsibility for thread safety while maintaining the reentrant status of the containing function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc logger(_ x : Int) {\n\n  // I know what I'm doing!\n  issafe {\n    glob = x\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiler Options for Dumping LLVM IR (Swift/Shell)\nDESCRIPTION: Shows various command-line options passed to the Swift compiler (`swiftc`) via `-Xllvm` to control the dumping of LLVM Intermediate Representation (IR). These options allow printing the IR before/after specific or all LLVM passes and filtering the output by function name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -print-before=$PASS_ID\n```\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -print-before-all\n```\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -print-after-all\n```\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -filter-print-funcs=$FUNC_NAME_1,$FUNC_NAME_2,...,$FUNC_NAME_N\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Conformance Mangling in Swift\nDESCRIPTION: Specifies the mangling rules for protocol conformances, including context, type, and module information. Covers standard, generic, and property behavior conformances.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_38\n\nLANGUAGE: swift\nCODE:\n```\nprotocol-conformance-context ::= protocol module generic-signature?\n\nprotocol-conformance ::= type protocol-conformance-context\n\nprotocol-conformance ::= type protocol\n\nprotocol-conformance ::= context identifier protocol identifier generic-signature?  // Property behavior conformance\n```\n\n----------------------------------------\n\nTITLE: Declaring Standalone Types with Value and Reference Semantics in Swift\nDESCRIPTION: Shows how to declare standalone types with explicit value and reference semantics. This can be used in type declarations without variable names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nref Int                 // an Int on the heap\nval SomeClonableClass  // a value of SomeClonableClass type\n\nvar y: val Int               // just like \"var y: Int\"\nvar z: ref Int               // z is allocated on the heap.\nvar s: val SomeClonableClass // a unique value of type SomeClonableClass\n```\n\n----------------------------------------\n\nTITLE: Basic Block Terminators in SIL\nDESCRIPTION: Collection of terminator instructions that end basic blocks, including unreachable, return, throw, yield, unwind, br, and cond_br.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_185\n\nLANGUAGE: sil\nCODE:\n```\nunreachable\n```\n\nLANGUAGE: sil\nCODE:\n```\nreturn %0 : $T\n```\n\nLANGUAGE: sil\nCODE:\n```\nthrow %0 : $T\n```\n\nLANGUAGE: sil\nCODE:\n```\nthrow_addr\n```\n\nLANGUAGE: sil\nCODE:\n```\nunwind\n```\n\nLANGUAGE: sil\nCODE:\n```\nbr label (%0 : $A, %1 : $B, ...)\n```\n\nLANGUAGE: sil\nCODE:\n```\ncond_br %0 : $Builtin.Int1, true_label (%a : $A, %b : $B, ...), false_label (%x : $X, %y : $Y, ...)\n```\n\n----------------------------------------\n\nTITLE: Task Class Implementation with Designated Initializers\nDESCRIPTION: Demonstrates the Objective-C pattern of designated and secondary initializers in a Task class implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface Task\n@property NSString *title;\n@property NSDate *date;\n\n- (id)initWithTitle:(NSString *)aTitle date:(NSDate *)aDate;\n- (id)initWithTitle:(NSString *)aTitle;\n- (id)init;\n@end\n\n@implementation Task\n- (id)initWithTitle:(NSString *)aTitle date:(NSDate *)aDate {\n  title = aTitle;\n  date = aDate;\n  return self;\n}\n\n- (id)initWithTitle:(NSString *)aTitle {\n  return [self initWithTitle:aTitle date:[NSDate date]];\n}\n\n- (id)init {\n  return [self initWithTitle:@\"Task\"];\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: SIL Operations for inout Handling\nDESCRIPTION: SIL-level operations for managing the INOUT bit state during retain/release operations\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InoutCOWOptimization.rst#2025-04-23_snippet_5\n\nLANGUAGE: sil\nCODE:\n```\n%former = inout_retain %b : $ClassType\ninout_release %b : $ClassType, %former : $Builtin.Int1\nstrong_retain %b : $ClassType\ncopy_addr [inout] %a to [init] %b\n```\n\n----------------------------------------\n\nTITLE: Implementing @initialize_subobject Method in Swift Array\nDESCRIPTION: Shows the implementation of an @initialize_subobject method in a Swift Array struct. This method appends an element to the array, assuming unique storage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: ArrayStorage\n\n  @initialize_subobject\n  func appendAssumingUniqueStorage(_ elt: T) {\n    storage.append(elt)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Producers in Forward-Extended Lifetimes\nDESCRIPTION: This snippet shows how forward-extended lifetimes can have multiple producers when using forwarding aggregate instructions or phi arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n%1 = load [copy] %a1     // producer           -+\n%2 = load [copy] %a2     // producer            |  forward-extended lifetime\n%3 = struct $S (%1, %2)                         |\n%4 = destroy_value %3                          -+\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutating Methods in Swift Struct\nDESCRIPTION: Example of a Number struct with both read-only and mutating methods, showing proper method attribution and value type mutation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/MutationModel.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct Number {\n  init(x: Int) { name = x.toString() }\n\n  func getValue() {              // read-only method\n    return Int(name)\n  }\n  mutating func increment() {  // mutating method\n    name = (Int(name)+1).toString()\n  }\n  var name: String\n}\n```\n\n----------------------------------------\n\nTITLE: Per-Library Availability Checking in Swift\nDESCRIPTION: Demonstrates how version-based availability checking could work with individual libraries rather than OS versions. Shows syntax for conditional compilation and version-dependent features.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolutionManifesto.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// Client code\n@available(Magician 1.5)\nclass CrystalBallView : MagicView { /*...*/ }\n\nfunc scareMySiblings() {\n  if #available(Magician 1.2) {\n    summonDemons()\n  } else {\n    print(\"BOO!!\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Class with Availability Attributes\nDESCRIPTION: This snippet defines a Swift class named MaybeAvailable with various methods annotated with @available attributes. These attributes specify macOS version compatibility, deprecation, and obsolescence for different methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print-availability.h.module.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nclass MaybeAvailable {\n  @available(macOS 10.1, *)\n  class func method1()\n  @available(macOS 10.1, *)\n  func method1()\n  @available(macOS 10.1, *)\n  class func method2()\n  @available(macOS 10.1, *)\n  func method2()\n  @available(macOS, deprecated: 10.10)\n  class func method3()\n  @available(macOS, deprecated: 10.10)\n  func method3()\n  @available(macOS, introduced: 10.1, deprecated: 10.10, obsoleted: 10.11)\n  class func method4()\n  @available(macOS, introduced: 10.1, deprecated: 10.10, obsoleted: 10.11)\n  func method4()\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Object Initializer in Swift\nDESCRIPTION: Demonstrates the syntax and implementation of a complete object initializer with Self return type, along with a subobject initializer example in class A.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InitializerInheritance.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass A {\n  var title: String\n\n  init() -> Self { // complete object initializer\n    self.init(withTitle:\"The Next Great American Novel\")\n  }\n\n  init withTitle(title: String) { // subobject initializer\n    self.title = title\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Derivative Operator in Swift\nDESCRIPTION: Implementation of the derivative operator function that takes a differentiable function and returns another differentiable function. Uses generic types constrained to FloatingPoint and Differentiable protocols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_69\n\nLANGUAGE: swift\nCODE:\n```\nfunc derivative<T: FloatingPoint, U: Differentiable>(\n    _ f: @differentiable (T) -> U\n) -> @differentiable (T) -> U where T: FloatingPoint, T == T.TangentVector {\n    { x in differential(at: x, of: f) }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Thread Safety Issues with Reference Counting in Swift\nDESCRIPTION: This example shows how atomic reference counting operations alone are insufficient for thread safety. Two threads simultaneously creating and storing new Bird instances can lead to race conditions where an object is deallocated twice.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\n\nlet queue = DispatchQueue.global(qos: .default)\n\nclass Bird {}\nvar single = Bird()\n\nqueue.async {\n  while true { single = Bird() }\n}\nwhile true { single = Bird() }\n```\n\n----------------------------------------\n\nTITLE: Array Element Swap Implementation\nDESCRIPTION: Demonstrates the expanded implementation of swapping array elements with buffer management and transitions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Original:\nswap(&array[i], &array[j])\n\n// Expanded:\n\n// Project array[i].\narray.transitionToUniquelyReferenced()\nlet address_i = array.buffer.storage + i\nlet newArrayBuffer_i = array.buffer\nretain(newArrayBuffer_i)\n\n// Project array[j]. Note that this transition is guaranteed\n// to have to do a structural copy.\narray.transitionToUniquelyReferenced()\nlet address_j = array.buffer.storage + j\nlet newArrayBuffer_j = array.buffer\nretain(newArrayBuffer_j)\n\n// Perform the mutations.\nswap(address_i, address_j)\n\n// Balance out the retains.\nrelease(newArrayBuffer_j)\nrelease(newArrayBuffer_i)\n```\n\n----------------------------------------\n\nTITLE: Compiling Swift Files in Batch Mode\nDESCRIPTION: This command shows how to compile Swift files in batch mode, which runs one frontend job per CPU. Each job parses all input files but compiles a batch of primary files, improving performance over single-file mode.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswiftc -enable-batch-mode *.swift\n```\n\n----------------------------------------\n\nTITLE: Recursive Character Search in Strings with Swift\nDESCRIPTION: Demonstrates a recursive algorithm for character search in strings, highlighting potential performance issues with substring slicing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nextension String {\n  func containsChar(_ x: Character) -> Bool {\n    return !isEmpty && (first == x || dropFirst().containsChar(x))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Typealiases in Swift\nDESCRIPTION: Demonstrates how typealiases could be allowed to carry generic parameters, acting as aliases without introducing new types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\ntypealias StringDictionary<Value> = Dictionary<String, Value>\n\nvar d1 = StringDictionary<Int>()\nvar d2: Dictionary<String, Int> = d1 // okay: d1 and d2 have the same type, Dictionary<String, Int>\n```\n\n----------------------------------------\n\nTITLE: Defining ConditionallyBridgedToObjectiveC Protocol in Swift\nDESCRIPTION: Protocol definition for types that conditionally bridge to Objective-C. This protocol extends BridgedToObjectiveC and adds methods to check if bridging is possible and to conditionally bridge from Objective-C.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Arrays.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprotocol _ConditionallyBridgedToObjectiveC : _BridgedToObjectiveC {\n    class func _isBridgedToObjectiveC() -> Bool\n    class func _conditionallyBridgeFromObjectiveC(_: _ObjectiveCType) -> Self?\n}\n```\n\n----------------------------------------\n\nTITLE: ElementaryFunctions Protocol with Derivatives in Swift\nDESCRIPTION: Implementation of derivative functions for elementary mathematical operations in Swift, including sqrt, cos, asinh, exp, exp10, log, and pow functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_41\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol ElementaryFunctions {\n    static func sqrt(_ x: Self) -> Self\n    static func cos(_ x: Self) -> Self\n    static func asinh(_ x: Self) -> Self\n    static func exp(_ x: Self) -> Self\n    static func exp10(_ x: Self) -> Self\n    static func log(_ x: Self) -> Self\n    static func pow(_ x: Self, _ y: Self) -> Self\n    ...\n}\n\npublic extension ElementaryFunctions\nwhere Self: Differentiable & FloatingPoint, Self == Self.TangentVector {\n    @inlinable\n    @derivative(of: sqrt)\n    static func _(_ x: Self) -> (value: Self, differential: @differentiable(linear) (Self) -> Self) {\n        (sqrt(x), { dx in (1 / 2) * (1 / sqrt(x)) * dx })\n    }\n\n    @inlinable\n    @derivative(of: cos)\n    static func _(_ x: Self) -> (value: Self, differential: @differentiable(linear) (Self) -> Self) {\n        (cos(x), { dx in -sin(x) * dx })\n    }\n\n    @inlinable\n    @derivative(of: asinh)\n    static func _(_ x: Self) -> (value: Self, differential: @differentiable(linear) (Self) -> Self) {\n        (asinh(x), { dx in 1 / (1 + x * x) * dx })\n    }\n\n    @inlinable\n    @derivative(of: exp)\n    static func _(_ x: Self) -> (value: Self, differential: @differentiable(linear) (Self) -> Self) {\n        let ret = exp(x)\n        return (ret, { dx in ret * dx })\n    }\n\n    @inlinable\n    @derivative(of: exp10)\n    static func _(_ x: Self) -> (value: Self, differential: @differentiable(linear) (Self) -> Self) {\n        let ret = exp10(x)\n        return (ret, { dx in exp(10) * ret * dx })\n    }\n\n    @inlinable\n    @derivative(of: log)\n    static func _(_ x: Self) -> (value: Self, differential: @differentiable(linear) (Self) -> Self) {\n        (log(x), { dx in 1 / x * dx })\n    }\n\n    @inlinable\n    @derivative(of: pow)\n    static func _(_ x: Self, _ y: Self) -> (value: Self, differential: @differentiable(linear) (Self, Self) -> Self) {\n        (pow(x, y), { (dx, dy) in\n            let l = y * pow(x, y-1) * dx\n            let r = pow(x, y) * log(x) * dy\n            return l + r\n        })\n    }\n\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating load_borrow in Swift\nDESCRIPTION: This snippet shows how load_borrow creates a borrow scope for a memory location, preventing mutations during the scope.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n%2 = load_borrow %addr    -+ borrow scope for memory value at %addr\n// ...                     |\nend_borrow %2             -+ memory at %addr must not be mutated until here\n```\n\n----------------------------------------\n\nTITLE: Using Statement-like Functions with Error Handling in Swift\nDESCRIPTION: Demonstrates how statement-like functions like `autoreleasepool` interact with Swift's error handling model, highlighting the redundant requirement to mark both the function call and internal throwing expressions with `try`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nautoreleasepool {\n    foo()\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\ntry autoreleasepool {              // 'try' is required here...\n    let string = try parseString() // ...and here.\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Ensuring Once Execution for Initialization using swift_once (Swift Convention)\nDESCRIPTION: This runtime function is used for lazy initialization of global variables. It takes a `Builtin.RawPointer` to a word-sized, zero-initialized memory location and a function closure using the `thin` calling convention. `swift_once` guarantees that the provided closure is executed exactly once across the process's lifetime before returning, using the pointed-to memory for synchronization. Referencing memory not managed by `swift_once` or initialized non-zero results in undefined behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n@convention(thin) (Builtin.RawPointer, @convention(thin) () -> ()) -> ()\n```\n\n----------------------------------------\n\nTITLE: Building Swift Benchmarks with build-script\nDESCRIPTION: Command to build Swift benchmarks for iOS, watchOS, and tvOS platforms using the build-script utility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ swift/utils/build-script --ios --watchos --tvos\n```\n\n----------------------------------------\n\nTITLE: Nonuniformity of Options and Option Subsets in ObjC vs Swift\nDESCRIPTION: Comparison of how option sets and their subsets are handled differently in ObjC versus the proposed Swift approach, highlighting a potential design issue.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\n// ObjC\ntypedef NS_OPTIONS(unsigned, MyOptions) {\n  Foo = 0x01,\n  Bar = 0x02,\n  Bas = 0x04,\n\n  Foobar = 0x03,\n};\n\nMyOptions x = Foobar | Bas;\n```\n\n----------------------------------------\n\nTITLE: Defining Non-differentiable Parameters in Swift Function Types\nDESCRIPTION: Demonstrates how to mark specific parameters as non-differentiable using the @noDerivative attribute within differentiable function types, allowing selective differentiation of parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_50\n\nLANGUAGE: swift\nCODE:\n```\nlet f0: @differentiable (Float, Float) -> Float = { $0 * $1 }\nlet f1: @differentiable(linear) (Float, Float) -> Float = { $0 + $1 }\nlet f2: @differentiable(linear) (Float, @noDerivative Float) -> Float = { $0 * $1 }\nlet f3: @differentiable (@noDerivative Int, Float, @noDerivative Int) -> Float = {\n  $0 ? Float($1) + $2 : 0\n}\n```\n\n----------------------------------------\n\nTITLE: Virtual Initializer Subclass Examples in Swift\nDESCRIPTION: Shows different approaches to implementing virtual initializers in subclasses, including error cases and proper implementations with title property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InitializerInheritance.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nclass E1 : D {\n  var title: String\n\n  // error: E1 must provide init()\n}\n\nclass E2 : D {\n  var title: String\n\n  @virtual init() {\n    title = \"Unnamed\"\n    super.init()\n  }\n\n  // okay, init() is available here\n}\n\nclass E3 : D {\n  var title: String\n\n  @virtual init() -> Self {\n    self.init(withTitle: \"Unnamed\")\n  }\n\n  init withTitle(title: String) {\n    self.title = title\n    super.init()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dispatch in Protocol Extensions Example\nDESCRIPTION: Demonstrates the current behavior of dynamic dispatch in protocol extensions versus direct struct implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol P {\n  func foo()\n}\n\nextension P {\n  func foo() { print(\"P.foo()\") }\n  func bar() { print(\"P.bar()\") }\n}\n\nstruct X : P {\n  func foo() { print(\"X.foo()\") }\n  func bar() { print(\"X.bar()\") }\n}\n\nlet x = X()\nx.foo() // X.foo()\nx.bar() // X.bar()\n\nlet p: P = X()\np.foo() // X.foo()\np.bar() // P.bar()\n```\n\n----------------------------------------\n\nTITLE: Finding Substrings and Accessing Characters in Swift\nDESCRIPTION: Illustrates that `String` acts as a container type. It uses a `find` method (conceptual for Swift 1.0 design) to locate the substring \"awe\" within \"Strings are awesome\", returning a `Range<StringIndex>`. It then demonstrates accessing the `Character` ('a') at the starting index of this range using subscripting (`s[r.start]`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n|swift| var s = \"Strings are awesome\"\n`// s : String = \"Strings are awesome\"`\n|swift| var r = s.find(\"awe\")\n`// r : Range<StringIndex> = <\"...are a̲w̲e̲some\">`\n|swift| s[r.start]\n`// r0 : Character =` :look:`Character(\"a\")`\\ :aside:`String elements have type Character (see below)`\n```\n\n----------------------------------------\n\nTITLE: String Collections Function Declaration\nDESCRIPTION: Function declaration showing concrete type constraints where multiple Collection types must have String elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfunc manyStrings<C1: Collection, C2: Collection, C3: Collection>(\n       c1: C1, c2: C2, c3: C3)\n  where C1.Element == String, C1.Element == C2.Element,\n        C1.Element == C3.SubSequence.Element\n{ }\n```\n\n----------------------------------------\n\nTITLE: Decoding Swift Symbol Manglings\nDESCRIPTION: This snippet shows the mapping between Swift symbol manglings and their corresponding function declarations. It includes various types of functions and language features.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/simplified-manglings.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n_TTWurGV23interface_type_mangling18GenericTypeContextx_S_18GenericWitnessTestS_FS1_23closureInGenericContextu_RxS1_rfqd__T_ ---> protocol witness for GenericWitnessTest.closureInGenericContext<A>(_:) in conformance <A> GenericTypeContext<A>\n_TTWurGV23interface_type_mangling18GenericTypeContextx_S_18GenericWitnessTestS_FS1_g31closureInGenericPropertyContextwx3Tee ---> protocol witness for GenericWitnessTest.closureInGenericPropertyContext.getter in conformance <A> GenericTypeContext<A>\n_TTWurGV23interface_type_mangling18GenericTypeContextx_S_18GenericWitnessTestS_FS1_16twoParamsAtDepthu0_RxS1_rfTqd__1yqd_0__T_ ---> protocol witness for GenericWitnessTest.twoParamsAtDepth<A, B>(_:y:) in conformance <A> GenericTypeContext<A>\n_TFC3red11BaseClassEHcfzT1aSi_S0_ ---> BaseClassEH.init(a:)\n_TFe27mangling_generic_extensionsR_S_8RunciblerVS_3Foog1aSi ---> Foo<A>.a.getter\n_TFe27mangling_generic_extensionsR_S_8RunciblerVS_3Foog1bx ---> Foo<A>.b.getter\n_TTRXFo_iT__iT_zoPs5Error__XFo__dT_zoPS___ ---> thunk for @callee_owned () -> (@unowned (), @error @owned Error)\n_TFE1a ---> _TFE1a\n_TFC4testP33_83378C430F65473055F1BD53F3ADCDB71C5doFoofT_T_ ---> C.doFoo()\n_TTRXFo_oCSo13SKPhysicsBodydVSC7CGPointdVSC8CGVectordGSpV10ObjectiveC8ObjCBool___XFdCb_dS_dS0_dS1_dGSpS3____ ---> thunk for @callee_unowned @convention(block) (@unowned SKPhysicsBody, @unowned CGPoint, @unowned CGVector, @unowned UnsafeMutablePointer<ObjCBool>) -> ()\n_T0So13SKPhysicsBodyCSC7CGPointVSC8CGVectorVSpy10ObjectiveC8ObjCBoolVGIxxyyy_AbdFSpyAIGIyByyyy_TR ---> thunk for @callee_owned (@owned SKPhysicsBody, @unowned CGPoint, @unowned CGVector, @unowned UnsafeMutablePointer<ObjCBool>) -> ()\n_T04main1_yyF ---> _()\n_T03abc6testitySiFTm ---> testit(_:)\n_T04main4TestCACSi1x_tc6_PRIV_Llfc ---> Test.init(x:)\n_$S3abc6testityySiFTm ---> testit(_:)\n_$S4main4TestC1xACSi_tc6_PRIV_Llfc ---> Test.init(x:)\n_TTSf0os___TFVs17_LegacyStringCore15_invariantCheckfT_T_ ---> specialized _LegacyStringCore._invariantCheck()\n_TTSf2o___TTSf2s_d___TFVs17_LegacyStringCoreCfVs13_StringBufferS_ ---> specialized _LegacyStringCore.init(_:)\n_TTSf2do___TTSf2s_d___TFVs17_LegacyStringCoreCfVs13_StringBufferS_ ---> specialized _LegacyStringCore.init(_:)\n_TTSf2dos___TTSf2s_d___TFVs17_LegacyStringCoreCfVs13_StringBufferS_ ---> specialized _LegacyStringCore.init(_:)\n_$s4main1fSiyYaFTQ0_ ---> f()\n_$s4main1fSiyYaFTY0_ ---> f()\n```\n\n----------------------------------------\n\nTITLE: Non-trivial Non-bitwise Movable Type Example\nDESCRIPTION: Illustrates a struct with a weak reference that is neither trivial nor bitwise movable. Weak references require side table updates when the object is moved.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABIStabilityManifesto.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct WeakContainer {\n    weak var reference: SomeClass?\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Internal Module-Scope Variables in Swift Standard Library\nDESCRIPTION: Example of applying the leading underscore rule to module-scope internal variables. This naming convention indicates the variable is not intended for user consumption.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControlInStdlib.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar _internalStdlibConstant: Int { ... }\n```\n\n----------------------------------------\n\nTITLE: Metatype Syntax in Swift\nDESCRIPTION: Shows the syntax for representing a metatype in Swift, which is a non-nominal type. This example represents the type of the Int type itself.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/nominal-types.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nInt.Type\n```\n\n----------------------------------------\n\nTITLE: Compiler Error Message for Swift Data Race Risk\nDESCRIPTION: This shows the compiler error message produced when attempting to send a non-Sendable value across concurrency domains. The error explains the risk of data races between nonisolated and Main actor-isolated uses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sending-risks-data-race.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nawait person.printNameConcurrently()\n            |- error: sending 'person' risks causing data races\n            `- note: sending main actor-isolated 'person' to nonisolated instance method 'printNameConcurrently()' risks causing data races between nonisolated and main actor-isolated uses\n```\n\n----------------------------------------\n\nTITLE: Always Inline Attribute in Swift\nDESCRIPTION: The `@inline(__always)` attribute is a hint to the Swift compiler to always attempt to inline the function, regardless of optimization level or other heuristics. Unlike `@_transparent`, it doesn't guarantee inlining before dataflow diagnostics and allows stepping through the function in the debugger.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TransparentAttr.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@inline(__always)\n```\n\n----------------------------------------\n\nTITLE: Conditional Objective-C Interoperability Support\nDESCRIPTION: Conditionally adds Objective-C interoperability source files when Objective-C interop is enabled. These files provide Swift-Objective-C bridging functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(SwiftCore_ENABLE_OBJC_INTEROP)\n  target_sources(swiftRuntime PRIVATE\n    SwiftValue.mm\n    ReflectionMirrorObjC.mm\n    ObjCRuntimeGetImageNameFromClass.mm)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using Proposed Result Initializers in Swift\nDESCRIPTION: Example of how the proposed Result enum with case initializers would be used, demonstrating the initializer construction syntax and pattern matching.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet success = Result(success: 1)\nlet error = Result(error: SillyError.JazzHands)\n```\n\n----------------------------------------\n\nTITLE: Implementing getElement and getSize Methods with @get_subobject Attribute\nDESCRIPTION: Demonstrates the implementation of getElement and getSize methods with the @get_subobject attribute for optimizing access to subobjects.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: ArrayStorage\n  var size : Int\n\n  @get_subobject\n  func getElement(_ index: Int) -> T {\n    return storage.elementAt(index)\n  }\n\n  @get_subobject\n  func getSize() -> Int {\n    return size\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Operations for Swift Runtime in C\nDESCRIPTION: Defines core operations for manipulating references in Swift's runtime: reading a reference atomically, writing a new referent to a reference, and unregistering a reference from the runtime system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid *swift_readReference(struct Reference *reference);\n\nvoid swift_writeReference(struct Reference *reference,\n                          void *newReferent);\n\nvoid swift_unregisterReference(struct Reference *Reference);\n```\n\n----------------------------------------\n\nTITLE: Defining an Objective-C Method with `NSError**` Parameter\nDESCRIPTION: This Objective-C code shows a typical method signature from the Cocoa framework (`NSAttributedString`) that uses an `NSError**` out-parameter to report errors. This pattern is common in Objective-C APIs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_11\n\nLANGUAGE: objective-c\nCODE:\n```\n```objc\n- (NSData *)dataFromRange:(NSRange)range\n       documentAttributes:(NSDictionary *)dict\n                    error:(NSError **)error;\n```\n```\n\n----------------------------------------\n\nTITLE: Reprojection Solution for Subobject Clobbering\nDESCRIPTION: This code demonstrates the reprojection technique to solve subobject clobbering. It reloads the current value before writing back modified subobjects, which prevents lost changes at the cost of extra full-value loads.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar point0 = point\nvar x = point0.x\nvar point1 = point\nvar y = point1.y\nswap(&x, &y)\npoint1 = point      // reload point1\npoint1.y = y\npoint = point1\npoint0 = point      // reload point0\npoint0.x = x\npoint = point0\n```\n\n----------------------------------------\n\nTITLE: Converting Differentiable Functions with @noDerivative Parameters in Swift\nDESCRIPTION: This snippet shows how a differentiable function can be converted to a function with more parameters marked as @noDerivative, illustrating the flexibility in differentiable function type conversions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_47\n\nLANGUAGE: swift\nCODE:\n```\nfunc addOne(_ x: Float) -> Float { x + 1 }\nlet f0: @differentiable (Float, Float, Float) -> Float = addOne\nlet f1: @differentiable (@noDerivative Float, Float, Float) -> Float = f0\nlet f2: @differentiable (@noDerivative Float, Float, @noDerivative Float) -> Float = f1\n```\n\n----------------------------------------\n\nTITLE: Documentation Field Extensions in Swift\nDESCRIPTION: Lists various documentation field extensions that appear as highlighted items in Xcode QuickHelp. These extensions can be used to provide additional context and metadata about the code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DocumentationComments.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- Attention: ...\n- Author: ...\n- Authors: ...\n- Bug: ...\n- Complexity: ...\n- Copyright: ...\n- Date: ...\n- Experiment: ...\n- Important: ...\n- Invariant: ...\n- Note: ...\n- Postcondition: ...\n- Precondition: ...\n- Remark: ...\n- Remarks: ...\n- Requires: ...\n- See: ...\n- Since: ...\n- Todo: ...\n- Version: ...\n- Warning: ...\n```\n\n----------------------------------------\n\nTITLE: Core Differentiation Transform Algorithm\nDESCRIPTION: Pseudocode describing the main logic for processing differentiability witnesses and differentiable function instructions. It handles the generation of JVP and VJP functions, looks up differentiable declaration attributes, and processes minimal superset witnesses. The algorithm includes error handling for non-differentiable operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_21\n\nLANGUAGE: pseudocode\nCODE:\n```\n- For all differentiability witnesses in the current SIL module:\n    - If the witness is missing the JVP function, generate a JVP function and fill it in.\n    - If the witness is missing the VJP function, generate a VJP function and fill it in.\n- Add all `differentiable_function` instructions from the current SIL module to a worklist.\n- While the `differentiable_function` worklist is not empty, pop the next one.\n    - If `differentiable_function` has JVP and VJP values, do nothing. It is already canonical.\n    - If `differentiable_function` is missing JVP and VJP:\n        - If the `differentiable_function`'s original function operand is an `differentiable_function_extract [original]` instruction, get the operand of that instruction. Do `differentiable_function_extract [jvp/vjp]` instruction from that operand to get the JVP/VJP. Continue.\n        - Otherwise, get the \"original function reference\" (`function_ref`, `witness_method`, or `class_method` instruction) underlying the `differentiable_function`'s original function operand.\n        - Look up a `@differentiable` declaration attribute on the \"original function reference\" whose parameter indices are a minimal superset of the `differentiable_function`'s parameter indices.\n            - If no such attribute exists, create an empty attribute with the `differentiable_function`'s parameter indices.\n        - Process the minimal superset SIL differentiability witness:\n            - If the attribute is missing the JVP function, generate a JVP function.\n            - If the attribute is missing the VJP function, generate a VJP function.\n        - Produce a reference to the JVP/VJP to fill in the `differentiable_function` instruction.\n```\n\n----------------------------------------\n\nTITLE: Default Witness Table Declaration Syntax in SIL\nDESCRIPTION: Syntax for declaring default witness tables which encode protocol requirements with resilient default implementations. These tables support evolving protocols without breaking existing code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_40\n\nLANGUAGE: sil\nCODE:\n```\ndecl ::= sil-default-witness-table\nsil-default-witness-table ::= 'sil_default_witness_table'\n                              identifier minimum-witness-table-size\n                              '{' sil-default-witness-entry* '}'\nminimum-witness-table-size ::= integer\n```\n\n----------------------------------------\n\nTITLE: Applying @usableFromInline to Internal Properties in Swift Structs\nDESCRIPTION: Explains that the `@usableFromInline` attribute can be added to an `internal` property of a struct (even a `@frozen` one), with appropriate availability versioning. This allows the property to be used in inlinable code within the module and permits promoting it to `public` later without breaking ABI.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@usableFromInline\n```\n\n----------------------------------------\n\nTITLE: Defining differentiable_function Instruction in Swift SIL\nDESCRIPTION: Describes the differentiable_function instruction used to create a @differentiable function from an original function and optional derivative functions. It specifies parameter indices and derivative function operands.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_196\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'differentiable_function'\n                    sil-differentiable-function-parameter-indices\n                    sil-value ':' sil-type\n                    sil-differentiable-function-derivative-functions-clause?\n\nsil-differentiable-function-parameter-indices ::=\n    '[' 'parameters' [0-9]+ (' ' [0-9]+)* ']'\nsil-differentiable-derivative-functions-clause ::=\n    'with_derivative'\n    '{' sil-value ':' sil-type ',' sil-value ':' sil-type '}'\n\ndifferentiable_function [parameters 0] %0 : $(T) -> T \n  with_derivative {%1 : $(T) -> (T, (T) -> T), %2 : $(T) -> (T, (T) -> T)}\n```\n\n----------------------------------------\n\nTITLE: Defining Generalized Supertype Constraints for Associated Types in Swift\nDESCRIPTION: Demonstrates the concept of generalized supertype constraints within a protocol `P`. It defines an associated type `Derived` that must be a subtype of another associated type `Base`, where `Base` itself is generic. This allows abstracting over various supertype relationships (class/subclass, protocol/conformance, etc.).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol P {\n  associatedtype Base\n  associatedtype Derived: Base\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Struct Values in SIL\nDESCRIPTION: The struct instruction creates a value of a loadable struct type by aggregating multiple loadable values. It requires the struct type and operands corresponding to the physical 'var' fields of the struct.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_128\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'struct' sil-type '(' (sil-operand (',' sil-operand)*)? ')'\n\n%1 = struct $S (%a : $A, %b : $B, ...)\n// $S must be a loadable struct type\n// $A, $B, ... must be the types of the physical 'var' fields of $S in order\n// %1 will be of type $S\n```\n\n----------------------------------------\n\nTITLE: Access Path Examples for Struct Element Access\nDESCRIPTION: Example showing how AccessPath represents access to a struct field. The path includes just the field index (#1) to indicate the second field.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nstruct S {\n  var field0: Int64\n  var field1: Int64\n}\n\n%eltadr = struct_element_addr %access : $*S, #.field1\n\nPath: (#1)\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Structure with Properties\nDESCRIPTION: Demonstrates how to define a Swift structure with stored and computed properties that will be bridged to C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\nstruct WeatherInformation {\n  var temperature: Int\n\n  var temperatureInFahrenheit: Int {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SIL Instruction: load\nDESCRIPTION: Loads a value from memory at a given address. Supports different ownership kinds (trivial, copy, take) in OSSA. The type must be loadable and the memory must be initialized.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_26\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'load' load-ownership-kind? sil-operand\nload-ownership-kind ::= 'trivial'\nload-ownership-kind ::= 'copy'\nload-ownership-kind ::= 'take'\n\n%1 = load %0 : $*T\n```\n\n----------------------------------------\n\nTITLE: Swift Template Usage Examples\nDESCRIPTION: Shows different ways to call C++ templates from Swift code with explicit type specifications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_57\n\nLANGUAGE: swift\nCODE:\n```\nvar x = 42\n\n// Calls `functionTemplate<int>`.\nfunctionTemplate<Int>(x)\n\n// Calls `functionTemplate<const int *>`.\nfunctionTemplate<CxxConstPointer<Int>>(&x)\n\n// Calls `functionTemplate<int &>`.\nfunctionTemplate<CxxRef<Int>>(&x)\n```\n\n----------------------------------------\n\nTITLE: Defining differentiable_function_extract Instruction in Swift SIL\nDESCRIPTION: Describes the differentiable_function_extract instruction used to extract the original function or a derivative function from a @differentiable function. It specifies the syntax and possible extractees.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_198\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'differentiable_function_extract'\n                    '[' sil-differentiable-function-extractee ']'\n                    sil-value ':' sil-type\n                    ('as' sil-type)?\n\nsil-differentiable-function-extractee ::= 'original' | 'jvp' | 'vjp'\n\ndifferentiable_function_extract [original] %0 : $@differentiable (T) -> T\ndifferentiable_function_extract [jvp] %0 : $@differentiable (T) -> T\ndifferentiable_function_extract [vjp] %0 : $@differentiable (T) -> T\ndifferentiable_function_extract [jvp] %0 : $@differentiable (T) -> T \n  as $(@in_constant T) -> (T, (T.TangentVector) -> T.TangentVector)\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Class with Reference Counting\nDESCRIPTION: Demonstrates how to define a Swift class that will be bridged to C++ with automatic reference counting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\nclass Person {\n  let name: String\n  init(name: String) {\n    self.name = name\n    print(\"\\(name) is being initialized\")\n  }\n  deinit {\n    print(\"\\(name) is being deinitialized\")\n  }\n}\n\nfunc createRandomPerson() -> Person {\n  return Person(name: getRandomName())\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Error Handling with NSError\nDESCRIPTION: Demonstrates Objective-C's approach to error handling using NSError out-parameters in an initializer method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_5\n\nLANGUAGE: objc\nCODE:\n```\n- (instancetype)initWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error;\n```\n\n----------------------------------------\n\nTITLE: Optimized SIL Code Example\nDESCRIPTION: Shows the equivalent Swift Interface Language code after optimizations for tensor processing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfunc processTensorByConstRef(_: UnsafePointer<Tensor>)\n\nfunc processTensorByRvalueRef(_: UnsafeMutablePointer<Tensor>)\n\nfunc useTensor() {\n  var x = Tensor()\n  processTensorByConstRef(x)\n  processTensorByRvalueRef(x) // Automatically move the value because it is obviously not used anymore.\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with Explicit Reference and Value Semantics in Swift\nDESCRIPTION: Illustrates the rules for declaring variables with explicit ref or val qualifiers, and how they interact with the val- or ref-ness of generic type parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nref x : T // always declares a ref\nval x : T // always declares a val\nvar x : T // declares a val iff T is a val\n```\n\n----------------------------------------\n\nTITLE: Thread Safety Type Example\nDESCRIPTION: Example showing the Copyable type constraint used for thread-safe data passing. This type constraint ensures values can be safely copied across thread boundaries via gateways.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nCopyable\n```\n\n----------------------------------------\n\nTITLE: Illustrating Valid @_effects(releasenone) Usage (Local Object) in Swift\nDESCRIPTION: Shows another valid use case for `@_effects(releasenone)` in Swift. This function allocates and deallocates an object (`notExternallyVisibleObject`) locally. Since the object and its potential deallocation effects are not visible outside the function, it adheres to the `releasenone` contract.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n@_effects(releasenone)\nfunc validReleaseNoneFunction(x: Int) -> Int {\n  var notExternallyVisibleObject = SomeObject()\n  return x +  notExternallyVisibleObject.x\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol-based Type Conversions in Swift - Swift\nDESCRIPTION: Shows the exception to the preferred type conversion guideline: the use of conversion methods as protocol requirements, which makes them valid even though they mimic method-based conversions. The snippet defines a protocol for integer conversion. It needs a declaration context supporting Swift protocols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nprotocol IntConvertible {\n  func toInt() -> Int // OK\n}\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating _fastPath Compound Probabilities\nDESCRIPTION: Illustrates how _fastPath probabilities compound in nested conditionals, affecting compiler optimization decisions for different execution paths. This affects inlining and code layout decisions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nif _fastPath(...) {\n  // 90% of the time we execute this: aggressive inlining\n  ...\n  return\n}\n// 10% of the time we execute this: very conservative inlining\n...\nif _fastPath(...) {\n  // 9% of the time we execute this: very conservative inlining\n    ...\n    return\n}\n\n// 1% of the time we execute this: very conservative inlining\n...\nreturn\n```\n\n----------------------------------------\n\nTITLE: Unsafe Nonisolated Capture\nDESCRIPTION: Demonstrates how to opt out of concurrency checking using nonisolated(unsafe) when manual synchronization is implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sendable-closure-captures.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nclass MyModel {\n  func log() { ... }\n}\n\nfunc capture(model: MyModel) async {\n  nonisolated(unsafe) let model = model\n  callConcurrently {\n    model.log()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String-to-Pointer Conversion in Swift\nDESCRIPTION: Shows how to create a temporary pointer from a String that points to a buffer containing UTF-8 code units. The pointer is only valid during the function call.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/temporary-pointers.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(bar: UnsafePointer<Int8>) { /*...*/ }\nvar x: String = \"hello, world!\"\nfoo(bar: x)\n```\n\n----------------------------------------\n\nTITLE: Building swift-tools-core-support with CMake and Ninja on Windows\nDESCRIPTION: This snippet configures and builds the swift-tools-support-core project using CMake and Ninja. It sets various dependencies including SQLite3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_16\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B S:\\b\\5 ^\n  -D BUILD_SHARED_LIBS=YES ^\n  -D CMAKE_BUILD_TYPE=RelWithDebInfo ^\n  -D CMAKE_INSTALL_PREFIX=C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr ^\n  -D CMAKE_C_COMPILER=S:/b/1/bin/clang-cl.exe ^\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\n  -D dispatch_DIR=S:\\b\\2\\cmake\\modules ^\n  -D Foundation_DIR=S:\\b\\3\\cmake\\modules ^\n  -D SQLite3_INCLUDE_DIR=S:\\Library\\sqlite-3.28.0\\usr\\include ^\n  -D SQLite3_LIBRARY=S:\\Library\\sqlite-3.28.0\\usr\\lib\\SQLite3.lib ^\n  -G Ninja ^\n  -S S:\\swift-tools-support-core\n\nninja -C S:\\b\\5\n```\n\n----------------------------------------\n\nTITLE: Bridging std::pair Between C++ and Swift\nDESCRIPTION: Demonstrates how a C++ std::pair pointer is imported into Swift as a tuple pointer when the memory layouts match.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_78\n\nLANGUAGE: c++\nCODE:\n```\nstd::pair<int, int> *GetPairPtr();\n```\n\nLANGUAGE: swift\nCODE:\n```\nUnsafeMutablePointer<(Int, Int)> GetPairPtr()\n```\n\n----------------------------------------\n\nTITLE: Mutation Access Pattern Implementation\nDESCRIPTION: Demonstrates the implementation of mutation access patterns using yield and continuation mechanisms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// An addressing, yielding mutator\nmutate {\n  withUnsafePointer(&resource) {\n    yield &$0.memory\n  }\n}\n\n// A pinning mutator\nmutate {\n  var slice = makeSlice()\n  let token = pin()\n  yield &slice\n  unpin(token)\n  writeBackSlice(slice)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C Function 'Add' into Swift with Type Mapping\nDESCRIPTION: This Swift code shows the generated interface for the C function `Add` when imported. C types `int`, `long`, and `double` are mapped to their Swift typealiases `CInt`, `CLong`, and `CDouble` respectively. By default, imported C functions do not have argument labels for their parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nfunc Add(_ x: CInt, _ y: CLong) -> CDouble\n```\n\n----------------------------------------\n\nTITLE: Swift Protocol Extension Example\nDESCRIPTION: Example of Swift protocol extensions providing implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_54\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Shape {\n  var area: double { get }\n}\nextension Rect: Shape {\n  var area: double { width * height }\n}\nextension Shape {\n  func fits(inArea otherArea: double) -> Bool {\n    area < otherArea\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using None Ownership and Address Destruction in Swift SIL\nDESCRIPTION: Provides a SIL example for handling values with None ownership, demonstrating standard SSA usage alongside destroy_addr for address types. Relies on knowledge about Swift SIL's type system, address semantics, and invariants distinct from Ownership SSA invariants. Function receives Int and Klass address types; destroys the Klass memory address and safely returns the Int value. Invalid operations (like loading from destroyed address) are commented, highlighting separation of ownership rules from other memory invariants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_8\n\nLANGUAGE: sil\nCODE:\n```\nsil @none_values : $@convention(thin) (Int, @in Klass) -> Int {\nbb0(%0 : $Int, %1 : $*Klass):\n\n  // %0, %1 are normal SSA values that can be used anywhere in the function\n  // without breaking Ownership SSA invariants. It could violate other\n  // invariants if for instance, we load from %1 after we destroy the object\n  // there.\n  destroy_addr %1 : $*Klass\n\n  // If uncommented, this would violate memory lifetime invariants due to\n  // the ``destroy_addr %1`` above. But this would not violate the rules of\n  // Ownership SSA since addresses exist outside of the guarantees of\n  // Ownership SSA.\n  //\n  // %2 = load [take] %1 : $*Klass\n\n  // I can return this object without worrying about needing to copy since\n  // none objects can be arbitrarily returned.\n  return %0 : $Int\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FooStruct1 with Pointer Type in Swift\nDESCRIPTION: Declares a struct with Int32 and Double properties, default and parameterized initializers, and a typedef for a mutable pointer to this struct.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct FooStruct1 {\n  var x: Int32\n  var y: Double\n  init()\n  init(x: Int32, y: Double)\n}\ntypealias FooStruct1Pointer = UnsafeMutablePointer<FooStruct1>\n```\n\n----------------------------------------\n\nTITLE: Equivalent Explicit Capture Declarations in Swift Closures\nDESCRIPTION: Demonstration of how decorated capture references are equivalent to adding explicit capture declarations at the top of the closure. This shows the underlying mechanism of the proposed syntax.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nbutton1.setAction {\n  capture @unowned _V1 = self\n  _V1.tapOut()\n}\nbutton2.setAction {\n  capture @weak _V2 = self\n  if (_V2) { _V2.swapIn() }\n}\nbutton3.setAction {\n  capture _V3 = self.model\n  _V3.addProfitStep()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol Conformance with Mixed Access Levels in Swift\nDESCRIPTION: This snippet demonstrates a struct X conforming to protocol P with mixed access levels for its methods. It shows how non-@public methods can be used within a conformance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc f() {}  // conformance to P, and therefore f\nfunc g() {}  // can be non-@public\n```\n\n----------------------------------------\n\nTITLE: Pack Element Operations in SIL\nDESCRIPTION: Grammar definitions for pack element manipulation instructions including open_pack_element, pack_element_get, and pack_element_set. These instructions handle pack indexing and element access operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_163\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'open_pack_element' sil-value 'of' generic-parameter-list+ 'at' sil-apply-substitution-list ',' 'shape' sil-type ',' 'uuid' string-literal\n```\n\nLANGUAGE: sil\nCODE:\n```\n%addr = pack_element_get %index of %pack : $*Pack{Int, repeat each T} as $*Int\n```\n\nLANGUAGE: sil\nCODE:\n```\npack_element_set %addr : $*@pack_element(\"...\") each U into %index of %pack : $*Pack{Int, repeat each T}\n```\n\n----------------------------------------\n\nTITLE: Referencing the NSEnumerator API Design in Swift Context\nDESCRIPTION: Shows the structure of the `NSEnumerator` API from Objective-C, mentioned as an influence on Swift's iterator design. It features a single `nextObject()` method that returns the next element or `nil` when exhausted, combining advancement and retrieval.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass NSEnumerator : NSObject {\n  func nextObject() -> AnyObject?\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Function Convention Types in SIL\nDESCRIPTION: Shows the syntax for specifying function conventions in SIL using the @convention attribute. This attribute indicates how a function is represented and called, including thin functions, thick functions with context, blocks, C functions, and method implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@convention(convention)\n```\n\n----------------------------------------\n\nTITLE: Usage Example of UnsafePointer Approach\nDESCRIPTION: Shows how the UnsafePointer approach would be used in Swift code, highlighting limitations with immutable values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc caller() {\n  var x = 42\n  printInt(&x) // OK\n\n  let y = 42\n  printInt(y) // error: type mismatch: `Int` is not an `UnsafePointer<Int>`\n  printInt(&y) // error: can't apply `&` to an immutable value\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Generic Requirements in Swift\nDESCRIPTION: Shows how to implement linearity generic requirements for transpose functions. Demonstrates adding constraints to make generic parameter types conform to Differentiable & AdditiveArithmetic.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo<T, U, V>(_ x: T, _ y: U, _ z: V) -> W { ... }\n\n// Transpose with respect to `x` and `z`, requiring that `T` and `V` to conform\n// to `Differentiable & AdditiveArithmetic` and equal their corresponding\n// `TangentVector` types.\n@transpose(of: foo, wrt: (x, z))\nfunc _<\n    T: Differentiable & AdditiveArithmetic,\n    U,\n    V: Differentiable & AdditiveArithmetic\n>(_ y: U, _ v: W) -> (x: T, z: V)\n    where T.TangentVector == T, V.TangentVector == V { ... }\n```\n\n----------------------------------------\n\nTITLE: Modifying lazy Attribute on Stored Properties in Swift Classes\nDESCRIPTION: Unlike `@frozen` structs, adding or removing the `lazy` attribute from a stored property in a class *is* a permitted change under Swift's ABI stability rules. This flexibility exists because class instance access is indirected through references, decoupling the layout from client code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nlazy\n```\n\n----------------------------------------\n\nTITLE: Implementing Designated and Convenience Initializers in Objective-C and Swift\nDESCRIPTION: Demonstrates how Objective-C initializers are imported into Swift, showing the transformation of designated and convenience initializers using the CorporateEmployee class example.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_8\n\nLANGUAGE: objc\nCODE:\n```\n@interface CorporateEmployee : NSObject\n- (instancetype)initWithName:(NSString *)name manager:(nullable CorporateEmployee *)manager __attribute__((objc_designated_initializer));\n- (instancetype)initCEOWithName:(NSString *)name;\n- (instancetype)initTimCookHimself;\n@end\n\n// Usually seen as NS_DESIGNATED_INITIALIZER.\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass CorporateEmployee {\n  init(name: String, manager: CorporateEmployee?)\n  convenience init(ceoWithName: String)\n  convenience init(timCookHimself: ())\n}\n```\n\n----------------------------------------\n\nTITLE: Def-Use Chain Traversal from Allocated Class Reference to Property Access - Swift\nDESCRIPTION: This SIL snippet maps the use-def chain starting with a reference allocation to an addressable property, including upcasting, bridging operations, and final address computation for property access. It employs alloc_ref, upcast, branch, ref_to_bridge_object, and bridge_object_to_ref instructions to demonstrate reference root concept, merges via phi nodes, and the path to a reference base accessed by ref_element_addr. The chain ensures the result can be uniquely tracked even through type casts and value merging, which is crucial for identifying access bases and verifying exclusivity.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass A {\n  var prop0: Int64\n}\nclass B : A {\n}\n\nbb0:\n  %root = alloc_ref $B\n  cond_br _, bb1, bb2\n\nbb1:\n  %a1 = upcast %root : $B to $A\n  br bb3(%a1 : $A)\n\nbb2:\n  %a2 = upcast %root : $B to $A\n  br bb3(%a2 : $A)\n\nbb3(%a : $A):\n  %bridge = ref_to_bridge_object %a : $A, %bits : $Builtin.Word\n  %ref = bridge_object_to_ref %bridge : $Builtin.BridgeObject to $A\n  %base = ref_element_addr %ref : $A, #A.prop0\n```\n\n----------------------------------------\n\nTITLE: Converting C Enum Values in Swift\nDESCRIPTION: This snippet demonstrates how to convert C enum values to integers and back in Swift, using the RawRepresentable protocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\n// Converting enum values to integers and back.\n\nvar south: CardinalDirection = .South\n// var southAsInteger: CUnsignedInt = south // error: type mismatch\nvar southAsInteger: CUnsignedInt = south.rawValue // = 3\nvar southAsEnum = CardinalDirection(rawValue: 3) // = .South\n```\n\n----------------------------------------\n\nTITLE: C Open and Closed Enums with Swift Mapping\nDESCRIPTION: This snippet shows how C enums explicitly marked as open or closed are mapped to Swift enums, demonstrating the different behaviors for extensible and fixed sets of cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_28\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\n// An open enum: we expect to add more kinds of input devices in future.\nenum InputDevice {\n  Keyboard,\n  Mouse,\n  Touchscreen,\n} __attribute__((enum_extensibility(open)));\n\n// A closed enum: we think we know enough about the geometry of Earth to\n// confidently say that these are all cardinal directions we will ever need.\nenum CardinalDirection {\n  East,\n  West,\n  North,\n  South,\n} __attribute__((enum_extensibility(closed)));\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nenum InputDevice: CUnsignedInt, Hashable, RawRepresentable {\n  init?(rawValue: CUnsignedInt)\n  var rawValue: CUnsignedInt { get }\n  typealias RawValue = CUnsignedInt\n  case Keyboard\n  case Mouse\n  case Touchscreen\n}\n\n@frozen\nenum CardinalDirection: CUnsignedInt, Hashable, RawRepresentable {\n  init?(rawValue: CUnsignedInt)\n  var rawValue: CUnsignedInt { get }\n  typealias RawValue = CUnsignedInt\n  case East\n  case West\n  case North\n  case South\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Thin to Thick Functions in SIL\nDESCRIPTION: Instruction for converting a thin function pointer with no context into a thick function value with ignored context. The conversion may be eliminated if context is proven unnecessary.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_179\n\nLANGUAGE: sil\nCODE:\n```\n%1 = thin_to_thick_function %0 : $@convention(thin) T -> U to $T -> U\n```\n\n----------------------------------------\n\nTITLE: Defining the @c attribute syntax in Swift\nDESCRIPTION: Shows the two possible forms of the @c attribute syntax that can be applied to top-level functions, static methods in non-generic classes, enums, and structs to export them to C.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/AttrC.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@c\n@c(asmname)\n```\n\n----------------------------------------\n\nTITLE: Guard Statement Formatting Styles in Swift - Swift\nDESCRIPTION: This snippet provides two acceptable formatting styles for guard statements in Swift: placing the statement and action on a single line or using a multiline block for the body. The guard statement is used for early exit when a condition is not met, here returning false if `foo` is nil. The example is language-specific to Swift and demonstrates flexibility in case-by-case formatting with guard.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// OK\nguard let foo = foo else { return false }\n```\n\nLANGUAGE: swift\nCODE:\n```\n// Also OK\nguard let foo = foo else {\n  return false\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Index API Methods in Swift\nDESCRIPTION: Shows the standard methods for obtaining and manipulating collection indices in Swift, including startIndex, endIndex, and index navigation methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/IndexInvalidation.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nC.startIndex\nC.endIndex\nI.successor()\nI.predecessor()\n```\n\n----------------------------------------\n\nTITLE: Configuring Benchmark Threading Options in CMake\nDESCRIPTION: Sets up CMake variables for multithreaded and single-file benchmark options. Defines whole module optimization with 4 threads for multithreaded configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BENCHOPTS_MULTITHREADED\n    \"-whole-module-optimization\" \"-num-threads\" \"4\")\nset(BENCHOPTS_SINGLEFILE \"\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Opaque Type Declaration and Initialization in Swift\nDESCRIPTION: This snippet shows correct and incorrect ways to declare properties and functions with opaque return types. It illustrates the requirement for initializers or getters for properties, and return statements for functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/opaque-type-inference.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nlet x: some Equatable // error: property declares an opaque return type, but has no initializer expression from which to infer an underlying type\nlet y: some Equatable = 42 // OK\nlet z: some Equatable { // Also OK\n  return \"hello, \" + \"world!\"\n}\n\nfunc foo() -> some Equatable { // error: function declares an opaque return type, but has no return statements in its body from which to infer an underlying type\n  fatalError(\"Unimplemented\")\n}\n\nfunc bar() -> some Equatable { // OK\n  fatalError(\"Unimplemented\")\n  return 42\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Method Transposes in Swift\nDESCRIPTION: Demonstrates how to implement transposes for static methods with different parameter configurations. Shows transpose implementations for all parameters and specific parameter combinations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\nextension MyType {\n    static func foo<T: Differentiable & AdditiveArithmetic>(_ x: T, _ y: T, _ z: T) -> T\n        where T == T.TangentVector { ... }\n}\n\nextension MyType {\n    // Transpose with respect to all parameters, making `foo(_:_:_:)` linear with\n    // with respect to all parameters.\n    @transpose(of: foo)\n    static func _<T: Differentiable & AdditiveArithmetic>(_ v: T) -> (x: T, y: T, z: T)\n        where T == T.TangentVector { ... }\n    \n    // Transpose with respect to original parameter `x`, making `foo(_:_:_:)` \n    // linear with respect to `x`.\n    @transpose(of: foo, wrt: 0)\n    static func _<T: Differentiable & AdditiveArithmetic>(y: T, z: T, v: T) -> T\n        where T == T.TangentVector { ... }\n    \n    // Transpose with respect to original parameters `x` and `z`, making\n    // `foo(_:_:_:)` linear with respect to `x` and `z`.\n    @transpose(of: foo, wrt: (0, 2))\n    static func _<T: Differentiable & AdditiveArithmetic>(y: T, v: T) -> (x: T, z: T)\n        where T == T.TangentVector { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Buffer Release and Mutation Pattern\nDESCRIPTION: Demonstrates the pattern of releasing array buffers and performing mutations while handling memory safety.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nrelease(array.buffer)\narray.buffer = ...\n\n// Perform the mutation.  These changes will be silently lost, but\n// they at least won't be using deallocated memory.\noperate(address, 0)\n\n// Release the \"new\" buffer.\nrelease(newArrayBuffer)\n```\n\n----------------------------------------\n\nTITLE: TextOutputStream Uppercase Adapter Implementation\nDESCRIPTION: Example implementation of a TextOutputStream adapter that converts text to uppercase before writing to the underlying stream.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct UpperStream<UnderlyingStream:TextOutputStream> : TextOutputStream {\n  func append(_ x: String) { base.append(x.toUpper()) }\n  var base: UnderlyingStream\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Function Mangling with Inverse Requirements in Swift\nDESCRIPTION: Illustrates how Swift mangles functions within types that have inverse requirements. Shows how extension mangling is used to maintain ABI compatibility between declarations in the nominal type versus its extension.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nstruct R<A: ~Copyable> {\n    func f1() {} // uses extension mangling, just like `f3`\n\n    func f2() where A: Copyable {}\n  }\n\n  extension R where A: ~Copyable {\n    func f3() {}\n\n    func f4() where A: Copyable {} // uses entity mangling, just like `f2`\n  }\n\n  extension R where A: Copyable {\n    // 'f5' is mangled equivalent to 'f2' and 'f4' modulo its identifier.\n    func f5() {}\n  }\n```\n\n----------------------------------------\n\nTITLE: Swift Function Signature Demangling\nDESCRIPTION: Examples of mangled Swift function names and their demangled representations, including differentiable functions, async functions, and generic functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\n$s4test3fooyyS2f_SfYktYaYbYjrXEF ---> test.foo(@differentiable(reverse) @Sendable (Swift.Float, @noDerivative Swift.Float) async -> Swift.Float) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n$SSSTf4pd44444_pf ---> function signature specialization <Arg[0] = [Constant Propagated Float : 44444], Return = > of Swift.String\n```\n\n----------------------------------------\n\nTITLE: Swift Public Type Declaration Example\nDESCRIPTION: Demonstrates usage of public types in external modules with import statements. Shows how the @public modifier makes types visible outside their declaring module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nimport Satchel\ntypealias SwingMe = Bag<Cat>\n```\n\n----------------------------------------\n\nTITLE: QuickSort Implementation with Slices\nDESCRIPTION: Example implementation of QuickSort showing how implicit inout on recursive calls forces O(N) copies\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InoutCOWOptimization.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Sliceable {\n  ...\n  @mutating\n  func quickSort(_ compare: (StreamType.Element, StreamType.Element) -> Bool) {\n    let (start, end) = (startIndex, endIndex)\n    if start != end && start.succ() != end {\n      let pivot = self[start]\n      let mid = partition(by: {!compare($0, pivot)})\n      self[start...mid].quickSort(compare)\n      self[mid...end].quickSort(compare)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C++ Namespace as Swift Enum (CppTextbox Module)\nDESCRIPTION: Illustrates Option 1 for C++ interop: mapping the C++ 'widgets' namespace from the 'CppTextbox' module to an empty Swift enum named 'widgets'. The 'Textbox' class is represented as a nested struct. This demonstrates how Option 1 can lead to conflicting definitions for the 'widgets' enum.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n// C++ module `CppTextbox` imported to Swift.\n\nenum widgets {\n  struct Textbox {}\n}\n```\n\n----------------------------------------\n\nTITLE: Building ARMv7 Object Files\nDESCRIPTION: Examples of building ARMv7 object files in both Mach-O and ELF formats using the Swift compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# To build an ARMv7 Mach-O object file:\n$ swiftc -target armv7-apple-none-macho -enable-experimental-feature Embedded -wmo \\\n  input1.swift input2.swift ... -c -o output.o\n\n# To build an ARMv7 ELF object file:\n$ swiftc -target armv7-none-none-eabi -enable-experimental-feature Embedded -wmo \\\n  input1.swift input2.swift ... -c -o output.o\n```\n\n----------------------------------------\n\nTITLE: Defining BridgedToObjectiveC Protocol in Swift\nDESCRIPTION: Protocol definition for types that can be bridged to Objective-C. It specifies required methods for converting Swift types to Objective-C types and back, including _bridgeToObjectiveC() and _forceBridgeFromObjectiveC().\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Arrays.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprotocol _BridgedToObjectiveC {\n    typealias _ObjectiveCType: AnyObject\n    func _bridgeToObjectiveC() -> _ObjectiveCType\n    class func _forceBridgeFromObjectiveC(_: _ObjectiveCType) -> Self\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FooClassWithClassProperties\nDESCRIPTION: Defines a class with class properties (static properties) that have explicit memory management attributes similar to FooClassPropertyOwnership.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_24\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooClassWithClassProperties : FooClassBase {\n  unowned(unsafe) class var assignable: @sil_unmanaged AnyObject!\n  unowned(unsafe) class var unsafeAssignable: @sil_unmanaged AnyObject!\n  class var retainable: AnyObject!\n  class var strongRef: AnyObject!\n  @NSCopying class var copyable: AnyObject!\n  weak class var weakRef: @sil_weak AnyObject!\n  class var scalar: Int32\n  init!()\n  convenience init!(float f: Float)\n}\n```\n\n----------------------------------------\n\nTITLE: Using swift_private attribute in Objective-C\nDESCRIPTION: Demonstrates how to use the swift_private attribute in Objective-C to prepend '__' to names when imported into Swift. This technique allows for more idiomatic Swift implementations while preserving the original API.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_15\n\nLANGUAGE: objc\nCODE:\n```\n@interface Example : NSObject\n- (instancetype)initWithValue:(int)value __attribute__((swift_private));\n@property(readonly) int value __attribute__((swift_private));\n@end\n\n// Usually seen as NS_REFINED_FOR_SWIFT\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass Example: NSObject {\n  init(__value: Int32)\n  var __value: Int32 { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Beginning Unpaired Memory Access in Swift Intermediate Language (SIL)\nDESCRIPTION: The begin_unpaired_access instruction starts a memory access similar to begin_access, but with an additional scratch buffer operand for unique identification. It must be ended with end_unpaired_access unless flagged as no_nested_conflict.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_50\n\nLANGUAGE: sil\nCODE:\n```\n%2 = begin_unpaired_access [read] [dynamic] %0 : $*T, %1 : $*Builtin.UnsafeValueBuffer\n// %0 must be of $*T type.\n```\n\n----------------------------------------\n\nTITLE: Generic vs Non-Generic Type Definitions in Swift\nDESCRIPTION: Demonstrates how to simplify generic type definitions by using protocol types directly.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/protocol-type-non-conformance.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Instead of...\nstruct Habitat<T: Animal> {\n    var animal: T\n}\n// ...consider:\nstruct Habitat {\n    var animal: Animal\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying and Running Swift Executable on Android Device\nDESCRIPTION: Commands to push the compiled Swift executable to an Android device and run it with the necessary library path configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Android.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ adb push hello /data/local/tmp\n$ adb shell LD_LIBRARY_PATH=/data/local/tmp /data/local/tmp/hello\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Formal Access for Swap Operation with Array Indexing in Swift\nDESCRIPTION: This snippet shows the sequence of formal accesses (FA) that occur during a swap operation between indexed elements of two object arrays in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nswap(&leftObject.array[i], &rightObject.array[j])\n```\n\n----------------------------------------\n\nTITLE: Extending FooClassBase with Internal and Public Methods\nDESCRIPTION: Extends FooClassBase with internal and public class and instance methods. These methods return AnyObject.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_23\n\nLANGUAGE: Swift\nCODE:\n```\nextension FooClassBase {\n  class func _internalMeth1() -> AnyObject!\n  func _internalMeth1() -> AnyObject!\n}\nextension FooClassBase {\n  class func _internalMeth2() -> AnyObject!\n  func _internalMeth2() -> AnyObject!\n  class func nonInternalMeth() -> AnyObject!\n  func nonInternalMeth() -> AnyObject!\n}\nextension FooClassBase {\n  class func _internalMeth3() -> AnyObject!\n  func _internalMeth3() -> AnyObject!\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Line Breaks in Delimited Lists and Function Calls - Swift\nDESCRIPTION: This snippet demonstrates the convention for placing line breaks in delimited lists within function signatures and calls (such as after '(' and before ')'). It specifies when to break lines: always after open/close delimiters in signatures, but optionally for closing delimiters within function bodies. This is intended to improve readability and reduce missed arguments in long lists. No functional code is provided; serves instructional purposes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// GOOD:\nfunc foo<S: Sequence, T>(\n  input: S,\n  transform: (S.Element) -> throws T\n) -> [S.Element] {     // Note: there *must* be a line break before the ')'\n  ...\n  someLongFunctionCall(\n    on: S,\n    startingAt: i,\n    stride: 32)        // Note: the break before the closing paren is optional\n}\n```\n\n----------------------------------------\n\nTITLE: Code Completion Response Structure\nDESCRIPTION: Defines the response format for code completion requests, containing an array of completion results.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{\n    <key.results>: (array) [completion-result*]  // array of zero or more completion-result dictionaries\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing SIMD Vector Differentiation in Swift\nDESCRIPTION: Shows implementation of differentiable SIMD vectors including operations and conformance to Differentiable protocol. Demonstrates vector space operations in the context of automatic differentiation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_37\n\nLANGUAGE: swift\nCODE:\n```\nextension SIMD where Self: Differentiable, TangentVector: SIMD, Scalar: BinaryFloatingPoint, Self == Self.TangentVector {\n    @transpose(of: *, wrt: 0)\n    @transpose(of: *, wrt: 1)\n    static func _(v: Self, x: Self) -> Self {\n        v * x\n    }\n}\n\nextension SIMD${n}: AdditiveArithmetic where Scalar: BinaryFloatingPoint {}\n\nextension SIMD${n}: Differentiable\nwhere Scalar: Differentiable & BinaryFloatingPoint,\n      Scalar.TangentVector : BinaryFloatingPoint {\n    public typealias TangentVector = SIMD${n}\n}\n\nextension SIMDScalar where Self: Differentiable & BinaryFloatingPoint {\n    @transpose(of: subscript)\n    func _(index: Int) -> SIMD${n}<Self> {\n        var result = SIMD${n}<Self>.zero\n        result[index] = self\n        return result\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating String Value Semantics in Swift\nDESCRIPTION: Defines a `Cave` class with a `say` method that takes a `String`, modifies its local copy using `addEcho`, stores it, and returns it. The example demonstrates `String` value semantics: passing `s` (\"Hey\") to `c.say(s)` doesn't change the original `s` because a copy is passed. Similarly, modifying the returned string `t` doesn't affect the `lastSound` stored in the `Cave` instance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n|swift| class Cave {\n          // Utter something in the cave\n          func say(_ msg: String) -> String {\n            :look1:`msg.addEcho()`\\ :aside:`Modifying a parameter is safe because the callee sees a copy of the argument`\n            self.lastSound = msg\n            :look1:`return self.lastSound`\\ :aside:`Returning a stored value is safe because the caller sees a copy of the value`\n          }\n\n          var lastSound: String   // a Cave remembers the last sound made\n        }\n|swift| var c = Cave()\n`// c: Cave = <Cave instance>`\n|swift| s = \"Hey\"\n|swift| var t = :look1:`c.say(s)`\\ :aside:`this call can't change s...`\n`// t: String = \"HeyHey\"`\n|swift| s\n`// s: String =` :look:`\"Hey\"`\\ :aside:`...and it doesn't.`\n|swift| :look1:`t.addEcho()`\\ :aside:`this call can't change c.lastSound...`\n|swift| [s, c.lastSound, t]\n`// r0: [String] = [\"Hey\",` :look:`\"HeyHey\"`\\ :aside:`...and it doesn't.`\\ `, \"HeyHeyHeyHey\"]`\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Pack Type Indexing in Swift SIL\nDESCRIPTION: This snippet illustrates the structural type matching rules for pack indexing in Swift SIL. It shows an example of a pack type and a projected element type that would be considered structurally well-typed for a dynamic_pack_index operation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_50\n\nLANGUAGE: swift\nCODE:\n```\nPack{Optional<Int>, Optional<Float>, repeat Optional<each T>}\n```\n\nLANGUAGE: swift\nCODE:\n```\n$*Optional<@pack_element(\"1234\") U>\n```\n\n----------------------------------------\n\nTITLE: Illustrating Valid @_effects(releasenone) Usage (Global Write) in Swift\nDESCRIPTION: Provides an example of a Swift function correctly marked with `@_effects(releasenone)`. This function modifies global state (`global.x`), which is permitted under `releasenone` as it doesn't involve an externally visible object release.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@_effects(releasenone)\nfunc validReleaseNoneFunction(x: Int) -> Int {\n  global.x = 5\n  return x + 2\n}\n```\n\n----------------------------------------\n\nTITLE: Super Method SIL Instruction\nDESCRIPTION: Looks up a method in the superclass of a class or class metatype instance for native Swift methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_93\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'super_method' sil-method-attributes?\n                      sil-operand ',' sil-decl-ref ':' sil-type\n\n%1 = super_method %0 : $T, #Super.method : $@convention(thin) U -> V\n// %0 must be of a non-root class type or class metatype $T\n// #Super.method must be a reference to a native Swift method of T's\n// superclass or of one of its ancestor classes\n// %1 will be of type $@convention(thin) U -> V\n```\n\n----------------------------------------\n\nTITLE: Select_enum_addr Instruction: Address-based Case Selection\nDESCRIPTION: The select_enum_addr instruction is the address-only counterpart to select_enum, selecting a value based on the case of an enum stored at a memory address.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_145\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'select_enum_addr' sil-operand sil-select-case*\n                    (',' 'default' sil-value)?\n                    ':' sil-type\n\n%n = select_enum_addr %0 : $*U,      \n  case #U.Case1!enumelt: %1,           \n  case #U.Case2!enumelt: %2, /* ... */ \n  default %3 : $T\n\n// %0 must be the address of an enum type $*U\n// #U.Case1, Case2, etc. must be cases of enum $U\n// %1, %2, %3, etc. must have type $T\n// %n has type $T\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Swift Struct via Default Constructor in C++\nDESCRIPTION: This C++ code shows how to construct a Swift struct that has a default Swift initializer, from C++. The variable 'size' is created using the default constructor, which sets width and height to 0. Requires prior bridging of Swift types to C++ and correct header inclusion. Demonstrates cross-language usage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nvoid constructScreenSize() {\n  auto size = ScreenSize();\n  // size.width and size.height is 0\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing NSError Out-Parameter Methods with swift_name\nDESCRIPTION: Shows how to use the `swift_name` attribute with methods following the NSError out-parameter convention. The attribute can be used to drop parameters while still respecting the error handling transformation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_27\n\nLANGUAGE: objc\nCODE:\n```\n- (BOOL)doSomethingRiskyAndReturnError:(NSError **)error\n  __attribute__((swift_name(\"doSomethingRisky()\"));\n- (BOOL)doSomethingContrived:(NSString *)action error:(NSError **)outError\n  __attribute__((swift_name(\"doSomethingContrived(_:error:)\")));\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc doSomethingRisky() throws\nfunc doSomethingContrived(_ action: String, error: ()) throws\n```\n\n----------------------------------------\n\nTITLE: C Function with Nullable Pointer Parameter\nDESCRIPTION: A C function declaration using Clang's _Nullable qualifier to explicitly indicate that the pointer may be null. This annotation affects how the function is imported into Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nint fetch_or_zero(int * _Nullable ptr);\n```\n\n----------------------------------------\n\nTITLE: Defining copyable_to_moveonlywrapper Instruction in Swift SIL\nDESCRIPTION: Describes the copyable_to_moveonlywrapper instruction used to convert a copyable value to a move-only wrapped value. It explains the semantic behavior and its use in initializing move-only bindings from copyable values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_202\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'copyable_to_moveonlywrapper'\n```\n\n----------------------------------------\n\nTITLE: Defining Tuple-Style Function Declarations in Swift\nDESCRIPTION: This snippet demonstrates how tuple-style function declarations are defined and matched in Swift. It shows various examples of valid and invalid function calls, including positional and keyword arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/KeywordArguments.rst#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo(_ x: Int, y: Int) {}\nfoo(1, 2) // matches\nbar(1, 2) // doesn't match\n\nfunc foo(_ x: Int, y: String, z: UnicodeScalar) {}\nfoo(1, \"two\", '3')          // matches\nfoo(1, \"two\", z: '3')       // matches\nfoo(1, y: \"two\", '3')       // invalid, positional arg after keyword arg\nfoo(1, z: '3', y: \"two\")    // matches\nfoo(z: '3', x: 1, y: \"two\") // matches\nfoo(z: '3', q: 1, y: \"two\") // doesn't match; no keyword 'q'\nfoo(1, \"two\", '3', x: 4)    // doesn't match; 'x' already given positionally\nfoo(1, \"two\", z: '3', z: '4') // doesn't match; multiple 'z'\n```\n\n----------------------------------------\n\nTITLE: Accessing Collection Elements via Subscripting in Swift\nDESCRIPTION: Demonstrates the standard syntax for accessing an element within a collection `c` at a specific `Index` position `i`. The expression `c[i]` utilizes the subscript requirement defined in the `CollectionType` protocol to retrieve the element.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet ith = c[i]\n```\n\n----------------------------------------\n\nTITLE: Switching on Loadable Enums with switch_enum in Swift SIL\nDESCRIPTION: Shows how to access values from a loadable enum by dispatching on its discriminator using the switch_enum terminator, which combines case testing and payload extraction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_137\n\nLANGUAGE: sil\nCODE:\n```\nenum Foo { case A(Int), B(String) }\n\nsil @switch_foo : $(Foo) -> () {\nentry(%foo : $Foo):\n  switch_enum %foo : $Foo, case #Foo.A!enumelt: a_dest, case #Foo.B!enumelt: b_dest\n\na_dest(%a : $Int):\n  /* use %a */\n\nb_dest(%b : $String):\n  /* use %b */\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SIL Output After SILGen Phase\nDESCRIPTION: Command to print the Swift Intermediate Language (SIL) immediately after SIL generation phase\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -emit-silgen -O file.swift\n```\n\n----------------------------------------\n\nTITLE: Protocol and Struct Type Association Example in Swift\nDESCRIPTION: Demonstrates a protocol with an associated type requirement and a conforming struct, used to illustrate phase transition dependencies in type checking.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/DeclarationTypeChecker.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {\n  typealias Assoc\n}\n\nstruct X<T> : P {\n\n}\n\nfunc foo(_ x: X<Int>.Assoc) { }\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Protocol and Conforming Class\nDESCRIPTION: Declares an internal protocol _InternalProt and a class that conforms to it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_24\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol _InternalProt {\n}\nclass ClassWithInternalProt : _InternalProt {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Higher-Order Function with Throws Condition in Swift\nDESCRIPTION: Example of a map function that conditionally throws based on its function argument using throwsIf syntax. Demonstrates how higher-order functions can be polymorphic with respect to throwing behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nfunc map<T, U>(_ array: [T], fn: T throws -> U) throwsIf(fn) -> [U] {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Property with Implicit Setter Parameter in Swift\nDESCRIPTION: This snippet demonstrates a computed property `maxY` within a struct (contextually `Rect`). It includes a getter and a setter. The setter uses the implicit parameter name `value` for the new value being assigned, omitting the explicit parameter declaration like `set(newValue)`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n  var maxY : Int {\n    get {\n      return y + height\n    }\n    set {\n      y = value - height\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Currying Differentiable Functions in Swift\nDESCRIPTION: Shows how to curry differentiable functions, allowing transformation from a first-order differentiable function to an equivalent nested structure of differentiable functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_52\n\nLANGUAGE: swift\nCODE:\n```\nfunc curry<T, U, V>(\n    _ f: @differentiable (T, U) -> V\n) -> @differentiable (T) -> @differentiable (U) -> V {\n    { x in { y in f(x, y) } }\n}\n```\n\n----------------------------------------\n\nTITLE: Full-Value Access Code Expansion Showing Subobject Clobbering\nDESCRIPTION: This snippet shows the expanded code when using full-value accesses to swap two properties of a struct. It demonstrates how changes to point.y are lost due to the write-back implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar point0 = point\nvar x = point0.x\nvar point1 = point\nvar y = point1.y\nswap(&x, &y)\npoint1.y = y\npoint = point1\npoint0.x = x\npoint = point0\n```\n\n----------------------------------------\n\nTITLE: Implementing AnyGenerator Factory Pattern in Swift\nDESCRIPTION: Example demonstrating a factory initialization pattern that cannot be directly implemented in Swift, requiring a workaround using a struct wrapper. Shows the limitations of Swift's initialization system when dealing with type erasure patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/InitializerProblems.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass AnyGenerator<Element> : GeneratorType {\n  init<\n    WrappedGenerator: GeneratorType\n  where\n    WrappedGenerator.Element == Element\n  >(wrapped: WrappedGenerator) -> AnyGenerator {\n    return AnyGeneratorImpl(wrapped)\n  }\n  // other generator stuff\n}\n\nclass AnyGeneratorImpl<WrappedGenerator: GeneratorType> :\n    AnyGenerator<WrappedGenerator.Element> {\n  var wrapped: WrappedGenerator\n  init(wrapped: WrappedGenerator) {\n    self.wrapped = wrapped\n  }\n  // other generator stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Container Element Mutation Example in Swift\nDESCRIPTION: Example showing how container element mutation currently forces expensive copies due to COW behavior\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InoutCOWOptimization.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nx[0].mutate()\n```\n\n----------------------------------------\n\nTITLE: Labeling Subsequent Parameters to Clarify Role in Swift Functions - Swift\nDESCRIPTION: This snippet highlights the Swift convention of using argument labels to clarify roles for parameters beyond the first, as seen in standard library methods. The examples show both typical usage requiring labels and exceptional cases (like 'swap' or 'min') where labels are omitted due to the inherent clarity provided by parameter order. The context is specific to methods manipulating collections or sequences.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nx.replaceSubrange(r, with: someElements)\n\np.initializeFrom(q, count: n)\n\nswap(&a, &b)                                                    // OK\nlet topOfPicture = min(topOfSquare, topOfTriangle, topOfCircle) // OK\n\n```\n\n----------------------------------------\n\nTITLE: Defining Opaque Return Type Mangling for ObjC Runtime in Swift\nDESCRIPTION: Specifies the mangling rules for opaque return types used specifically for Objective-C class runtime name purposes in Swift 5.4 and later.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\n#if SWIFT_VERSION >= 5.4\n  type ::= 'Qu'                         // opaque result type (of current decl, first param)\n                                        // used for ObjC class runtime name purposes.\n  type ::= 'QU' INDEX\n#endif\n```\n\n----------------------------------------\n\nTITLE: Indexing Dependency Structure\nDESCRIPTION: Defines the structure of dependency objects returned in indexing responses, representing imported modules and other file dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n```\ndependency ::=\n{\n    <key.kind>:        (UID)    // UID for the kind (import of a swift module, etc.).\n    <key.name>:        (string) // Displayed name for dependency.\n    <key.filepath>:    (string) // Path to the file.\n    [opt] <key.hash>:  (string) // Hash associated with this dependency.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Nullable C Pointer Imported to Swift\nDESCRIPTION: The Swift translation of a C function with a _Nullable pointer. The pointer is imported as an optional UnsafeMutablePointer in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfunc fetch_or_zero(_ ptr: UnsafeMutablePointer<CInt>?) -> CInt\n```\n\n----------------------------------------\n\nTITLE: NSNumber to Any Casting in Swift\nDESCRIPTION: This snippet shows how casting NSNumber to Any now succeeds, whereas it previously caused a runtime crash in Swift 5.3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nlet a = NSNumber()\n// Swift 5.3: Runtime crash (both optimized and unoptimized builds)\n// Specification: Succeeds\nprint(a is Any)\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Class with Availability Attributes\nDESCRIPTION: This code snippet defines a Swift class 'MaybeAvailable' with methods using @available attributes to specify macOS version compatibility, deprecation, and obsolescence. It demonstrates various uses of the @available attribute for both instance and class methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print-availability.h.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nclass MaybeAvailable {\n  @available(macOS 10.1, *)\n  class func method1()\n  @available(macOS 10.1, *)\n  func method1()\n  @available(macOS 10.1, *)\n  class func method2()\n  @available(macOS 10.1, *)\n  func method2()\n  @available(macOS, deprecated: 10.10)\n  class func method3()\n  @available(macOS, deprecated: 10.10)\n  func method3()\n  @available(macOS, introduced: 10.1, deprecated: 10.10, obsoleted: 10.11)\n  class func method4()\n  @available(macOS, introduced: 10.1, deprecated: 10.10, obsoleted: 10.11)\n  func method4()\n}\n```\n\n----------------------------------------\n\nTITLE: Array Implementation with COW Buffer\nDESCRIPTION: Example showing how to declare a COW buffer property using the @cow attribute\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InoutCOWOptimization.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass ArrayBuffer { /* ... */ }\n\nstruct Array {\n  @cow var buffer : ArrayBuffer\n}\n```\n\n----------------------------------------\n\nTITLE: Building Swift Standard Library for Android\nDESCRIPTION: Shell command for building the Swift standard library for Android using the build script. This configures the build for Android architecture with specific NDK path and Swift toolchain.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Android.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ NDK_PATH=path/to/android-ndk-r27c\n$ SWIFT_PATH=path/to/swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a-ubuntu22.04/usr/bin\n$ git checkout swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a\n$ utils/build-script \\\n    -R \\\n    --android \\\n    --android-ndk $NDK_PATH \\\n    --android-arch aarch64 \\\n    --android-api-level 21 \\\n    --stdlib-deployment-targets=android-aarch64 \\\n    --native-swift-tools-path=$SWIFT_PATH \\\n    --native-clang-tools-path=$SWIFT_PATH \\\n    --build-swift-tools=0 \\\n    --build-llvm=0 \\\n    --skip-build-cmark\n```\n\n----------------------------------------\n\nTITLE: Method Overloading Solution for Generic Methods in Swift\nDESCRIPTION: Shows how to replace generic methods with concrete type overloads.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass MyClass {\n  func write(t: Int) { /* implementation */ }\n  func write(t: Double) { /* implementation */ }\n}\n\nlet instance: MyClass = ... // could be MyClass, or a subclass\ninstance.write(t: 42) // ✅\n```\n\n----------------------------------------\n\nTITLE: Implementing checked_cast_addr_br Terminator in Swift Intermediate Language\nDESCRIPTION: Defines the checked_cast_addr_br terminator which performs indirect type conversion with different consumption models. It operates on address types and branches to success or failure destinations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_193\n\nLANGUAGE: sil\nCODE:\n```\nsil-terminator ::= 'checked_cast_addr_br'\n                    sil-prohibit-isolated-conformances?\n                    sil-cast-consumption-kind\n                    sil-type 'in' sil-operand 'to'\n                    sil-stype 'in' sil-operand ','\n                    sil-identifier ',' sil-identifier\nsil-cast-consumption-kind ::= 'take_always'\nsil-cast-consumption-kind ::= 'take_on_success'\nsil-cast-consumption-kind ::= 'copy_on_success'\n\nchecked_cast_addr_br take_always $A in %0 : $*@thick A to $B in %2 : $*@thick B, bb1, bb2\n// $A and $B must be both address types\n// bb1 must take a single argument of type $*B\n// bb2 must take no arguments\n```\n\n----------------------------------------\n\nTITLE: Differential Function Type Declaration in Swift\nDESCRIPTION: Code annotation showing the linear differentiable function type declaration in Swift, which is a subtype of regular differentiable functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable(linear)\n```\n\n----------------------------------------\n\nTITLE: Case Initializers with Unlabeled Parameters in Swift\nDESCRIPTION: Example of how case initializers could be declared with unlabeled parameters for types like Optional that have a natural \"primary\" case.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nenum Optional<Wrapped> {\n  case nil\n  case init(_ some: Wrapped)\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Any Contents to Protocol Type in Swift\nDESCRIPTION: This snippet demonstrates how casting Any contents to a protocol type now succeeds, addressing issue #44608.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {}\nclass Foo: P {}\nlet optionalFoo: Foo? = Foo()\nlet any: Any = optionalFoo\n// Swift 5.3: Prints \"false\"\n// Specification: prints \"true\"\nprint(any as? P)\n```\n\n----------------------------------------\n\nTITLE: Handling Array Mutation with Non-Const Pointer Arguments in Swift\nDESCRIPTION: Demonstrates how Swift handles array mutation when passing arrays to C functions expecting non-const pointer arguments. The copy-on-write behavior ensures that only the passed array is modified.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nfunc loadFloatsFromData(_ data: NSData) {\n  var a: [Float] = [0.0, 0.0, 0.0, 0.0]\n  var b = a\n\n  // Should only mutate 'b' without affecting 'a', so its backing store\n  // must be uniqued\n  data.getBytes(&b, sizeof(Float.self) * b.count)\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Future Features with Availability\nDESCRIPTION: Shows how to properly annotate features under development that haven't shipped yet using SwiftStdlib version macros instead of explicit placeholder versions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// 😵‍💫👎\n@available(macOS 9999, iOS 9999, watchOS 9999, tvOS 9999, *)\npublic struct FutureFeature {\n  ...\n}\n\n// 😎👍\n@available(SwiftStdlib 6.3, *) // Or whatever\npublic struct FutureFeature {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Differentiable Stored Property in Swift\nDESCRIPTION: Shows how to mark stored properties as differentiable in a public struct.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\npublic struct Vector: @memberwise Differentiable {\n    @differentiable // Okay, though the compiler has synthesized it.\n    public var x, y: Float\n}\n```\n\n----------------------------------------\n\nTITLE: Two-Phase Initialization Example in Objective-C\nDESCRIPTION: Shows inheritance-based initialization behavior in Objective-C where subclass methods can be called before initialization completes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface A : NSObject {\n  NSString *_description;\n}\n- (id)init;\n- (NSString*)description;\n@end\n\n@implementation A\n- (id)init {\n  self = [super init]\n  if (self) {\n    _description = [self description];\n  }\n  return self;\n}\n\n- (NSString *)description {\n  return @\"A\";\n}\n@end\n\n@interface B : A\n@property NSString *title;\n@end\n\n@implementation B\n- (id)init {\n  self = [super init]\n  if (self) {\n    self->title = @\"Hello\";\n  }\n  return self;\n}\n\n-(NSString *)description {\n  return self->title;\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Generic Type Instantiation with Self-Conforming Protocols in Swift\nDESCRIPTION: This example shows how generic types interact with self-conforming protocols. When instantiating a generic type with a protocol existential, the protocol must conform to itself for the code to be valid.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyGenericType<T: P> {\n  init(_ value: T) { ... }\n}\nlet a : P\nlet b : MyGenericType(a)\n```\n\n----------------------------------------\n\nTITLE: Example of Cyclic Type Alias Definitions (Swift)\nDESCRIPTION: Illustrates a simple example of ill-formed Swift code containing a circular dependency through type aliases (`A` depends on `B`, and `B` depends on `A`). The Request-Evaluator aims to detect such cycles and provide appropriate diagnostics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/RequestEvaluator.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ntypealias A = B\ntypealias B = A\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Access Control for Derivative Functions in Swift\nDESCRIPTION: This snippet shows how access modifiers on derivative functions control the scope of differentiability. It includes examples from three different files to illustrate how the access level affects the derivative calculation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_43\n\nLANGUAGE: swift\nCODE:\n```\n// File A.swift:\ninternal func foo(_ x: Float) -> Float {\n    x * x\n}\nlet dfdx_A = derivative(at: 3, of: foo)\n// dfdx_A ==> 6\n\n// File B.swift:\n@derivative(of: foo)\nfileprivate func _(_ x: Float) -> (\n    value: Float, \n    differential: @differentiable(linear) (Float) -> Float\n) {\n    (value: foo(x), differential: { _ in 42 })\n}\nlet dfdx_B = derivative(at: 3, of: foo)\n// dfdx_B ==> 42\n\n// File C.swift:\nlet dfdx_C = derivative(at: 3, of: foo)\n// dfdx_C ==> 6\n```\n\n----------------------------------------\n\nTITLE: UI Thread Interaction with Async in Swift\nDESCRIPTION: Example of UI programming with async operations, showing progress animation control.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n@IBAction func onClick(_ sender: AnyObject) {\n\n  progress.startAnimating()\n```\n\n----------------------------------------\n\nTITLE: Retaining Values with retain_value in SIL\nDESCRIPTION: Retains a loadable value, which retains any references it holds. This is a no-op for trivial types, equivalent to strong_retain for reference types, and unowned_retain for @unowned types. This instruction is not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_108\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'retain_value' sil-operand\n\nretain_value %0 : $A\n```\n\n----------------------------------------\n\nTITLE: Implementing checked_cast_br Terminator in Swift Intermediate Language\nDESCRIPTION: Defines the checked_cast_br terminator which performs runtime type checking/conversion. It branches to one destination with the converted value on success or another destination on failure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_192\n\nLANGUAGE: sil\nCODE:\n```\nsil-terminator ::= 'checked_cast_br' sil-checked-cast-exact?\n                    sil-prohibit-isolated-conformances?\n                    sil-type 'in'\n                    sil-operand 'to' sil-type ','\n                    sil-identifier ',' sil-identifier\nsil-checked-cast-exact ::= '[' 'exact' ']'\nsil-prohibit-isolated-conformances ::= '[' 'prohibit_isolated_conformances' ']'\n\nchecked_cast_br A in %0 : $A to $B, bb1, bb2\nchecked_cast_br *A in %0 : $*A to $*B, bb1, bb2\nchecked_cast_br [exact] A in %0 : $A to $A, bb1, bb2\n// $A and $B must be both object types or both address types\n// bb1 must take a single argument of type $B or $*B\n// bb2 must take no arguments\n```\n\n----------------------------------------\n\nTITLE: C++ Function Import Behind the Scenes\nDESCRIPTION: Shows how a C++ function is imported in Swift with its original C++ data types. This represents what happens behind the scenes during the bridging process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_70\n\nLANGUAGE: c++\nCODE:\n```\n// C header imported in Swift, behind the scenes:\n\nfunc _cxx_IncrementVectorValues(std.vector<CInt> v) -> std.vector<CInt>\n```\n\n----------------------------------------\n\nTITLE: Proposing a BufferedIteratorProtocol Extension in Swift\nDESCRIPTION: Proposes a hypothetical `BufferedIteratorProtocol` that refines `IteratorProtocol`. It adds a `latest` property to allow access to the most recently returned element, illustrating how buffering capabilities could be layered onto Swift's iteration model if deemed necessary.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol BufferedIteratorProtocol\n  : IteratorProtocol {\n  var latest: Element? {get}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Diagnostic Database Generation\nDESCRIPTION: Creates custom commands to generate diagnostic strings and database files from source definitions. The process includes copying diagnostic files, converting definitions to strings, and serializing them into a database format. Finally sets up installation rules for the generated files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/localization/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(diagnostic_witness \"${CMAKE_BINARY_DIR}/share/swift/diagnostics/generated\")\n\nadd_custom_command(\n  OUTPUT\n    ${diagnostic_witness}\n  COMMAND\n    ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/diagnostics/ ${CMAKE_BINARY_DIR}/share/swift/diagnostics/\n  COMMAND\n    \"${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/swift-def-to-strings-converter\"\n      --output-directory ${CMAKE_BINARY_DIR}/share/swift/diagnostics/\n  COMMAND\n    \"${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/swift-serialize-diagnostics\"\n      --input-file-path ${CMAKE_BINARY_DIR}/share/swift/diagnostics/en.strings\n      --output-directory ${CMAKE_BINARY_DIR}/share/swift/diagnostics/\n  COMMAND\n    ${CMAKE_COMMAND} -E touch ${diagnostic_witness}\n  DEPENDS\n    swift-def-to-strings-converter\n    swift-serialize-diagnostics\n)\n\nadd_custom_target(diagnostic-database DEPENDS ${diagnostic_witness})\n\nadd_dependencies(swift-frontend diagnostic-database)\n\nswift_install_in_component(\n  DIRECTORY ${CMAKE_BINARY_DIR}/share/swift/diagnostics/\n  DESTINATION \"share/swift/diagnostics\"\n  COMPONENT compiler\n  FILES_MATCHING\n  PATTERN \"*.db\"\n  PATTERN \"*.yaml\"\n  PATTERN \"*.strings\"\n)\n```\n\n----------------------------------------\n\nTITLE: Indexing Request Structure\nDESCRIPTION: Details the request format for indexing source code, which returns information about the structure and content of the code including references and declarations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{\n    <key.request>:          (UID) <source.request.indexsource>\n    [opt] <key.sourcetext>: (string)   // Source contents.\n    [opt] <key.sourcefile>: (string)   // Absolute path to the file.\n    [opt] <key.compilerargs> [string*] // Array of zero or more strings for the compiler arguments\n                                       // e.g [\"-sdk\", \"/path/to/sdk\"]. If key.sourcefile is provided,\n                                       // these must include the path to that file.\n    [opt] <key.hash>: (string)         // Known hash for the indexed file, used to determine whether\n                                       // the file has changed since the last time it was indexed.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Floating Point Operators with Transposes\nDESCRIPTION: Shows implementation of transposes for basic floating-point operations including addition and multiplication. Demonstrates how these operations are made differentiable in the standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\nextension FloatingPoint \n    where Self: Differentiable & AdditiveArithmetic, Self == TangentVector\n{\n    @transpose(of: +)\n    static func _(_ v: Self) -> (Self, Self) { (v, v) }\n\n    @transpose(of: *, wrt: 0)\n    @transpose(of: *, wrt: 1)\n    static func _(lhs: Self, rhs: Self) -> Self { lhs * rhs }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Struct Fields by Address in SIL\nDESCRIPTION: The struct_element_addr instruction derives the address of a physical field within a struct value given the address of the struct in memory. It requires the struct address operand and a declaration reference to the field.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_130\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'struct_element_addr' sil-operand ',' sil-decl-ref\n\n%1 = struct_element_addr %0 : $*S, #S.field\n// %0 must be of a struct type $S\n// #S.field must be a physical 'var' field of $S\n// %1 will be the address of the selected field of %0\n```\n\n----------------------------------------\n\nTITLE: Selective Declaration Import in Swift\nDESCRIPTION: Shows various ways to selectively import specific types of declarations from modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport class AppKit.NSWindow\nimport func AppKit.NSApplicationMain\nimport var AppKit.NSAppKitVersionNumber\nimport typealias AppKit.NSApplicationPresentationOptions\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Deterministic Hashing\nDESCRIPTION: Commands showing how to run benchmarks with deterministic hashing enabled (which is required for stable results) or explicitly allowing non-deterministic hashing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ env SWIFT_DETERMINISTIC_HASHING=1 ./Benchmark_O --num-iters=1 --num-samples=1\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_O --num-iters=1 --num-samples=1 --allow-nondeterministic-hashing\n```\n\n----------------------------------------\n\nTITLE: Standard Library Type Symbol Mapping\nDESCRIPTION: Mapping of mangled symbols to Swift standard library types like Array, String, Optional and numeric types\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/simplified-manglings.txt#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n_TtSa ---> Array\n_TtSb ---> Bool\n_TtSc ---> UnicodeScalar\n_TtSd ---> Double\n_TtSf ---> Float\n_TtSi ---> Int\n_TtSq ---> Optional\n_TtSS ---> String\n_TtSu ---> UInt\n```\n\n----------------------------------------\n\nTITLE: Eliminating Redundant Calls to readnone Functions - Swift\nDESCRIPTION: Demonstrates the optimizer's ability to replace redundant calls to a @_effects(readnone) Swift function with a variable assignment, leveraging the function's lack of observable side effects. No extra dependencies required. Input is a call to lookup with parameter i; output is a reassignment of its result. Limitation: Assumes no intervening side effects influence the function's output.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet a = lookup(i)\n// some other code, including memory writes\nlet b = a\n```\n\n----------------------------------------\n\nTITLE: Setting Up Operator Precedence in Swift\nDESCRIPTION: This snippet defines a precedence group named 'High' and associates custom operators with it. It sets the associativity to left and places it higher than BitwiseShiftPrecedence.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/foo_swift_module.printed.comments.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nprecedencegroup High {\n  associativity: left\n  higherThan: BitwiseShiftPrecedence\n}\ninfix operator %%% : High\npostfix operator =>\npostfix operator =->\n```\n\n----------------------------------------\n\nTITLE: Defining a C++ Class within a Namespace (CppButton Module)\nDESCRIPTION: This C++ code snippet shows a header file belonging to a hypothetical 'CppButton' module. It defines a simple class named 'Button' within the 'widgets' namespace.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// C++ header in module `CppButton`.\n\nnamespace widgets {\nclass Button {};\n}\n```\n\n----------------------------------------\n\nTITLE: Deallocating Pack Memory Allocated with alloc_pack in Swift SIL - swift\nDESCRIPTION: This instruction deallocates memory allocated for a value pack using 'alloc_pack'. Pack elements must be destroyed or uninitialized prior to this call. Only operands that originate from 'alloc_pack' are valid, and correct deallocation is required for stack discipline.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'dealloc_pack' sil-operand\\n\\ndealloc_pack %0 : $*Pack{Int, Float, repeat each T}\\n// %0 must be the result of `alloc_pack $Pack{Int, Float, repeat each T}`\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol Conformance with Properties\nDESCRIPTION: Example of a struct implementing the Bitset protocol, showing proper property and subscript implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/MutationModel.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct BS {\n  var count: Int    // ok; an lvalue or an rvalue is fine\n\n  var intValue : Int {\n    get {\n      return 3\n    }\n    set {\n      ignore(value)\n    }\n  }\n\n  subscript(i: Int) -> Bool {\n    return true   // Error: needs a 'set' clause to yield an lvalue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SIL Instruction: begin_borrow\nDESCRIPTION: Creates a new guaranteed ownership value from an owned or guaranteed value. Valid only in Ownership SSA form functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_30\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'begin_borrow' '[lexical]'? sil-operand\n\n%1 = begin_borrow %0 : $T\n```\n\n----------------------------------------\n\nTITLE: Borrowed Value Declaration in SIL\nDESCRIPTION: Defines the syntax and semantics for borrowing values in Swift Intermediate Language, specifying how enclosing values are handled for reborrow or forwarded guaranteed phi arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_32\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'borrowed' sil-operand 'from' '(' (sil-operand (',' sil-operand)*)? ')'\n\nbb1(%1 : @owned $T, %2 : @reborrow $T):\n  %3 = borrowed %2 : $T from (%1, %0)\n  // %0 is an enclosing value, defined in a block, which dominates bb1\n  // %3 has type $T and guaranteed ownership\n```\n\n----------------------------------------\n\nTITLE: Verifying List Format for Benchmark_O in Swift\nDESCRIPTION: Demonstrates how to use the --list option to display benchmarks in the pre-commit list and verify tag formatting. This checks that certain benchmarks are included/excluded based on default skip tags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O --list | %FileCheck %s \\\nRUN:                      --check-prefix LISTPRECOMMIT \\\nRUN:                      --check-prefix LISTTAGS\nLISTPRECOMMIT: #,Test,[Tags]\nLISTPRECOMMIT-NOT: Existential.\nLISTPRECOMMIT: {{[0-9]+}},AngryPhonebook\nLISTTAGS-SAME: ,[\nLISTTAGS-NOT: TestsUtils.BenchmarkCategory.\nLISTTAGS-SAME: String, api, validation\nLISTTAGS-SAME: ]\n```\n\n----------------------------------------\n\nTITLE: Defining Macro Expansion Mangling in Swift\nDESCRIPTION: Specifies the mangling rules for macro expansions in Swift. Different types of macros (attached, freestanding, etc.) have specific mangling patterns to uniquely identify them.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\nmacro-discriminator-list ::= macro-discriminator-list? file-discriminator? macro-expansion-operator INDEX\n\n  macro-expansion-operator ::= decl-name identifier 'fMa' // attached accessor macro\n  macro-expansion-operator ::= decl-name identifier 'fMr' // attached member-attribute macro\n  macro-expansion-operator ::= identifier 'fMf' // freestanding macro\n  macro-expansion-operator ::= decl-name identifier 'fMm' // attached member macro\n  macro-expansion-operator ::= decl-name identifier 'fMp' // attached peer macro\n  macro-expansion-operator ::= decl-name identifier 'fMc' // attached conformance macro\n  macro-expansion-operator ::= decl-name identifier 'fMe' // attached extension macro\n  macro-expansion-operator ::= decl-name identifier 'fMq' // attached preamble macro\n  macro-expansion-operator ::= decl-name identifier 'fMb' // attached body macro\n  macro-expansion-operator ::= decl-name identifier 'fMu' // uniquely-named entity\n\n  file-discriminator ::= identifier 'Ll'     // anonymous file-discriminated declaration\n```\n\n----------------------------------------\n\nTITLE: Defining Private Structs with Custom Initializers in Swift\nDESCRIPTION: Declares two private structs with identical structure - each having a default initializer, a value-based initializer, and a value property of type Int32.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nstruct __PrivS1 {\n  init()\n  init(value: Int32)\n  var value: Int32\n}\nstruct __PrivS2 {\n  init()\n  init(value: Int32)\n  var value: Int32\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project from Ninja Build using generate-xcode (sh)\nDESCRIPTION: Executes the `utils/generate-xcode` script, passing the path to a Ninja build directory (`<build dir>`, e.g., `../build/Ninja-RelWithDebInfoAssert`) as an argument. This script generates an `Swift.xcodeproj` file in the parent directory, allowing developers to use Xcode for editing and debugging based on the Ninja build configuration. Requires a prior successful Ninja build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nutils/generate-xcode <build dir>\n```\n\n----------------------------------------\n\nTITLE: Creating a Single-File Swift Benchmark - Python\nDESCRIPTION: Shows how to use the create_benchmark.py script to scaffold a new single-file Swift benchmark. The script automates file creation, updates build file lists (CMakeLists.txt), and registers the test in main.swift. Needs Python and proper permissions to execute the script, and expects the benchmark name as the first argument. Produces a .swift file following the project template and updates build infrastructure accordingly.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\nswift-source$ ./swift/benchmark/scripts/create_benchmark.py YourTestNameHere\n```\n\n----------------------------------------\n\nTITLE: JVP Function Type Signature in Swift\nDESCRIPTION: Shows the type signature format for a Jacobian-vector product (JVP) function, demonstrating how it returns both the original result and a differential function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n//  (T0, ...)      ->  (U,    (T0.TangentVector, ...) -> (U.TangentVector))\n//   ^                  ^      ^~~~~~~~~~~~~~~~~~~~~      ^~~~~~~~~~~~~~~\n//  original args   result      derivative wrt args    derivative wrt result\n```\n\n----------------------------------------\n\nTITLE: Self-Conforming Protocols Example in Swift\nDESCRIPTION: This code snippet demonstrates the concept of self-conforming protocols in Swift. It shows a generic function and struct that accept a parameter conforming to protocol P, and attempts to pass a P existential value to them, which requires P to be self-conforming.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nfunc f<T:P>(t: T) { .. use t .. }\nlet a : P = something\nf(a)\n```\n\n----------------------------------------\n\nTITLE: Default TangentVector Synthesis Example in Swift\nDESCRIPTION: Demonstrates the default synthesis of a TangentVector structure for a generic type Foo with differentiable variables. Shows how the compiler automatically generates the TangentVector type and move(by:) implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nstruct Foo<T: Differentiable, U: Differentiable>: @memberwise Differentiable {\n    // `x` and `y` are the \"differentiable variables\".\n    var x: T\n    var y: U\n    let customFlag: Bool\n\n    // The compiler synthesizes:\n    //\n    //     struct TangentVector: Differentiable, AdditiveArithmetic {\n    //         var x: T.TangentVector\n    //         var y: U.TangentVector\n    //     }\n    //\n    //     mutating func move(by offset: TangentVector) {\n    //         x.move(by: offset.x)\n    //         y.move(by: offset.y)\n    //     }\n}\n```\n\n----------------------------------------\n\nTITLE: String Literal SIL Instruction\nDESCRIPTION: Creates a reference to a string in the global string table, returning a pointer to null-terminated string data. Supports utf8, utf16, and objc_selector encodings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_89\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'string_literal' encoding string-literal\nencoding ::= 'utf8'\nencoding ::= 'utf16'\nencoding ::= 'objc_selector'\n\n%1 = string_literal \"asdf\"\n// %1 has type $Builtin.RawPointer\n```\n\n----------------------------------------\n\nTITLE: Importing C Anonymous Structs in Swift\nDESCRIPTION: Demonstrates how Swift handles unnamed and anonymous structs from C by generating synthetic names and providing appropriate access to fields, including both direct access to anonymous fields and through containers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_24\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\nstruct StructWithAnonymousStructs {\n  struct {\n    int x;\n  };\n  struct {\n    int y;\n  } containerForY;\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\nstruct StructWithAnonymousStructs {\n  struct __Unnamed_struct___Anonymous_field0 {\n    var x: CInt\n    init()\n    init(x: CInt)\n  }\n  struct __Unnamed_struct_containerForY {\n    var y: CInt\n    init()\n    init(y: CInt)\n  }\n  var __Anonymous_field0: StructWithAnonymousStructs.__Unnamed_struct___Anonymous_field0\n  var x: CInt\n  var containerForY: StructWithAnonymousStructs.__Unnamed_struct_containerForY\n\n  // Default initializer that sets all properties to zero.\n  init()\n\n  // Elementwise initializer.\n  init(\n    _ __Anonymous_field0: StructWithAnonymousStructs.__Unnamed_struct___Anonymous_field0,\n    containerForY: StructWithAnonymousStructs.__Unnamed_struct_containerForY\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Property Lens Usage in Swift\nDESCRIPTION: Demonstration of how property lenses could be used to create abstract references to properties, showing potential syntax for property access abstraction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nlet prop = Widget.weight\n```\n\n----------------------------------------\n\nTITLE: Loading Weak References with load_weak in SIL\nDESCRIPTION: Loads a weak reference, incrementing the strong reference count of the referenced object. Returns an Optional<T> that contains null if the object has begun deallocation. Can optionally take the reference with [take].\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_60\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'load_weak' '[take]'? sil-operand\n\nload_weak [take] %0 : $*@sil_weak Optional<T>\n// $T must be an optional wrapping a reference type\n```\n\n----------------------------------------\n\nTITLE: Deinitializing Existential Value in Swift SIL\nDESCRIPTION: Defines the deinit_existential_value instruction in Swift SIL, which undoes the partial initialization performed by init_existential_value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_150\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'deinit_existential_value' sil-operand\n\ndeinit_existential_value %0 : $P\n// %0 must be of a $P opaque type for non-class protocol or protocol\n// composition type P\n```\n\n----------------------------------------\n\nTITLE: C++ Employee Class Definition for String Bridging\nDESCRIPTION: Example C++ header showing how annotations can be used to control string bridging behavior. One method returns a string that should be bridged to Swift's String, while another explicitly keeps std::string.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_76\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nclass Employee {\npublic:\n  std::string DebugDescription() const;\n  [[swift::import_as_std_string]] std::string SerializedAsProtobuf() const;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing Option Set Enum in Swift\nDESCRIPTION: This snippet demonstrates how the Objective-C option set enum is imported into Swift. It becomes a struct conforming to OptionSet with static properties for each non-zero case.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nstruct PetsAllowed: OptionSet {\n  init(rawValue: Int)\n  var rawValue: Int\n\n  static var dogs: PetsAllowed { get }\n  static var cats: PetsAllowed { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Private and Public OptionSet Structs in Swift\nDESCRIPTION: Declares a private option set and a public option set with Int raw values. The public option set includes a private case and a deprecated Swift 3 compatibility property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nstruct __PrivNSOptions : OptionSet {\n  init(rawValue: Int)\n  let rawValue: Int\n  typealias RawValue = Int\n  typealias Element = __PrivNSOptions\n  typealias ArrayLiteralElement = __PrivNSOptions\n  static var A: __PrivNSOptions { get }\n}\nstruct NSOptions : OptionSet {\n  init(rawValue: Int)\n  let rawValue: Int\n  typealias RawValue = Int\n  typealias Element = NSOptions\n  typealias ArrayLiteralElement = NSOptions\n  static var __privA: NSOptions { get }\n  @available(swift, obsoleted: 3, renamed: \"__privA\")\n  static var __PrivA: NSOptions { get }\n  static var B: NSOptions { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol with Required Method in Swift\nDESCRIPTION: Creates a protocol that requires conforming types to implement the lala() method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.module.printed.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Superproto {\n  func lala()\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Instruction: Creating Enum Values\nDESCRIPTION: The enum instruction constructs loadable enum values for a specific case, optionally including payload data of the appropriate type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_139\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'enum' sil-type ',' sil-decl-ref (',' sil-operand)?\n\n%1 = enum $U, #U.EmptyCase!enumelt\n%1 = enum $U, #U.DataCase!enumelt, %0 : $T\n// $U must be an enum type\n// #U.DataCase or #U.EmptyCase must be a case of enum $U\n// If #U.Case has a data type $T, %0 must be a value of type $T\n// If #U.Case has no data type, the operand must be omitted\n// %1 will be of type $U\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Signature Mangling in Swift\nDESCRIPTION: Specifies the mangling rules for generic signatures, including requirements, generic parameters, and parameter counts. Covers both single and multiple generic parameter cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_40\n\nLANGUAGE: swift\nCODE:\n```\ngeneric-signature ::= requirement* generic-param-marker 'l'     // one generic parameter\ngeneric-signature ::= requirement* generic-param-marker* 'r' GENERIC-PARAM-COUNT* 'l'\n\ngeneric-param-marker ::= generic-param-pack-marker\ngeneric-param-marker ::= generic-param-value-marker\n\ngeneric-param-pack-marker ::= 'Rv' GENERIC_PARAM-INDEX   // generic parameter pack marker\n\n#if SWIFT_RUNTIME_VERSION >= 6.TBD\n  generic-param-value-marker ::= type 'RV' GENERIC-PARAM-INDEX // generic parameter value marker\n#endif\n\nGENERIC-PARAM-COUNT ::= 'z'                // zero parameters\nGENERIC-PARAM-COUNT ::= INDEX              // N+1 parameters\n```\n\n----------------------------------------\n\nTITLE: Implementing switch_value Terminator in Swift Intermediate Language\nDESCRIPTION: Defines the switch_value terminator instruction syntax which conditionally branches based on an integer value. It requires a builtin integer operand and multiple case destinations with an optional default destination.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_186\n\nLANGUAGE: sil\nCODE:\n```\nsil-terminator ::= 'switch_value' sil-operand\n                     (',' sil-switch-value-case)*\n                     (',' sil-switch-default)?\nsil-switch-value-case ::= 'case' sil-value ':' sil-identifier\nsil-switch-default ::= 'default' sil-identifier\n\nswitch_value %0 : $Builtin.Int<n>, case %1: label1, \n                                   case %2: label2, \n                                   ...,            \n                                   default labelN\n\n// %0 must be a value of builtin integer type $Builtin.Int<n>\n// `label1` through `labelN` must refer to block labels within the current\n//   function\n// FIXME: All destination labels currently must take no arguments\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Runtime and Standard Library Options in CMake\nDESCRIPTION: Sets various CMake options for Swift runtime and standard library features, including leak checking, function counters, and debug preconditions in release builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_51\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_RUNTIME_ENABLE_LEAK_CHECKER\n  \"Should the runtime be built with support for non-thread-safe leak detecting entrypoints\"\n  FALSE)\n\noption(SWIFT_ENABLE_RUNTIME_FUNCTION_COUNTERS\n  \"Enable runtime function counters and expose the API.\"\n  FALSE)\n\noption(SWIFT_ENABLE_STDLIBCORE_EXCLUSIVITY_CHECKING\n  \"Build stdlibCore with exclusivity checking enabled\"\n  FALSE)\n\noption(SWIFT_STDLIB_ENABLE_DEBUG_PRECONDITIONS_IN_RELEASE\n  \"Enable _debugPrecondition checks in the stdlib in Release configurations\"\n  FALSE)\n```\n\n----------------------------------------\n\nTITLE: Creating a Parameterized GYB Template for Testing Nested Dictionaries in Swift\nDESCRIPTION: A GYB template example that generates Swift code with varying numbers of nested dictionaries based on parameter N. This template is used with the scale-test tool to analyze how compiler performance scales with increasingly complex nested structures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nprivate let _: [Any?] = [[\n%for i in range(0, N):\n  \"A\": [\n    \"B\" : \"C\",\n%end\n%for i in range(0, N):\n    ]\n%end\n]]\n```\n\n----------------------------------------\n\nTITLE: Defining and Instantiating a Generic Swift Struct\nDESCRIPTION: This Swift code defines a generic struct `Generator<T>` containing a function property `fn` of type `() -> T`. It also declares a variable `intGen` which is an instance of `Generator<Int>`. This example demonstrates how the type of `intGen.fn` (formally `() -> Int`) is lowered in SIL using the abstraction pattern of its unsubstituted type `() -> T`, resulting in a different SIL type than a standalone `() -> Int` function might have.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct Generator<T> {\n  var fn : () -> T\n}\nvar intGen : Generator<Int>\n```\n\n----------------------------------------\n\nTITLE: Copy-on-Write Performance Issue Example\nDESCRIPTION: This snippet demonstrates a common operation that can suffer from performance issues with copy-on-write types when using full-value accesses, as the temporary copy will never have a unique reference and force unnecessary structural copies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nwindow.name += \" (closing)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Public Struct with Protocol Conformance in Swift\nDESCRIPTION: This snippet shows a public struct Y conforming to protocol P1. It demonstrates that when a type is @public, its conformance to a protocol is also public.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@public struct Y : P1 {} // Y is @public so its\n                           // conformance to P1 is, too.\n```\n\n----------------------------------------\n\nTITLE: Showing SILFunctionArguments in Canonical SIL\nDESCRIPTION: This snippet displays the SILFunctionArgument list for the `foo` closure's definition in Canonical SIL. At this stage, the arguments directly correspond to the SILFunctionType parameters, showing two direct arguments (#0: Int, #1: T).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILFunctionConventions.md#2025-04-23_snippet_2\n\nLANGUAGE: sil\nCODE:\n```\n```\nSILFunctionArguments: (#0: Int, #1: T) -> (Int, T)\n```\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking Based on SourceKit Library Type in CMake\nDESCRIPTION: Conditionally links the executable with either sourcekitdInProc or sourcekitd library based on the SWIFT_SOURCEKIT_USE_INPROC_LIBRARY flag. This determines whether to use the in-process library version.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/complete-test/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_SOURCEKIT_USE_INPROC_LIBRARY)\n  target_link_libraries(complete-test PRIVATE sourcekitdInProc)\nelse()\n  target_link_libraries(complete-test PRIVATE sourcekitd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Resilient Inline-allocated Swift URL in C++\nDESCRIPTION: C++ class representation for a resilient inline-allocated Swift value type like URL. The value is stored in an opaque inline buffer with a pointer for alignment calculation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nclass Foundation::URL {\n  ...\n  uintptr_t pointer;         // pointer has alignment to compute buffer offset?\n  alignas(N) char buffer[M]; // Swift value is stored here.\n};\n```\n\n----------------------------------------\n\nTITLE: Adding @dynamicCallable Attribute to Swift Enums and Classes\nDESCRIPTION: States that adding the `@dynamicCallable` attribute to an existing enum or class is a permitted change according to Swift's ABI stability rules. This allows instances of the type to be called like functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n@dynamicCallable\n```\n\n----------------------------------------\n\nTITLE: Implementing JVP and Differential Functions in Swift SIL\nDESCRIPTION: SIL pseudocode showing how the Swift compiler implements automatic differentiation by generating a JVP function and its corresponding differential function. The example demonstrates the creation of a differential struct to store intermediate differentiation functions and how they're applied to compute tangent values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n// Struct containing differential functions.\n// Partially-applied to `@df_f` in `@jvp_f`.\nstruct f_bb0_DF_src_0_wrt_0 {\n  var df_sin: (Float) -> Float\n  var df_cos: (Float) -> Float\n  var df_mul: (Float, Float) -> Float\n}\n\n// JVP: replaces all function applications with JVP applications.\nsil @jvp_f : $(Float) -> (Float, (Float) -> Float) {\nbb0(%x):\n  (%y1, %df_sin) = apply @jvp_sin(%x)\n  (%y2, %df_cos) = apply @jvp_cos(%x)\n  (%y3, %df_mul) = apply @jvp_mul(%y1, %y2)\n  // Partially-apply to get a differential.\n  %df_struct = struct $f_bb0_DF_src_0_wrt_0 (%df_sin, %df_cos, %df_mul)\n  %df = partial_apply @df_f(%df_struct)\n  // Return tuple of original result and differential.\n  %result = tuple (%y3, %df)\n  return %result\n}\n\n\n// Differential: apply differentials to tangent values.\nsil @df_f : $(Float, f_bb0_DF_src_0_wrt_0) -> (Float) {\nbb0(%dx, %df_struct):\n  %df_sin = struct_extract %df_struct, #df_sin\n  %dy1 = apply %df_sin(%dx)\n  %df_cos = struct_extract %df_struct, #df_cos\n  %dy2 = apply %df_cos(%dx)\n  %df_mul = struct_extract %df_struct, #df_mul\n  %dy3 = apply %df_mul(%dy1, %dy2)\n  return %dy3\n}\n```\n\n----------------------------------------\n\nTITLE: Enum with Methods and Constructor\nDESCRIPTION: An enum with associated methods and a constructor, demonstrating that Swift enums can contain the same nested declarations as structs, including methods and constructors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nenum IntOrInfinity {\n  case NegInfinity, Int(Int), PosInfinity\n\n  constructor() {\n    this = .Int(0)\n  }\n\n  func min(_ x:IntOrInfinity) -> IntOrInfinity {\n    switch (self, x) {\n    case (.NegInfinity, _):\n    case (_, .NegInfinity):\n      return .NegInfinity\n    case (.Int(var a), .Int(var b)):\n      return min(a, b)\n    case (.Int(var a), .PosInfinity):\n      return a\n    case (.PosInfinity, .Int(var b)):\n      return b\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Valid Class Method Implementation\nDESCRIPTION: Demonstrates the correct way to implement methods that return new instances in a class, which can work with the implicit assignment operator generation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nclass Foo {\n  let x: Int\n  required init(x: Int) { self.x = x }\n\n  func advanced(_ amount: Int) -> Self {\n    return Self(x: self.x + amount)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling LLDB Types Log for Debugging Swift Integration\nDESCRIPTION: This command enables the LLDB 'types' log, which reports on SwiftASTContext construction and related errors. The log output is written to a specified file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\n(lldb) log enable -f /tmp/lldb-types-log.txt lldb types\n```\n\n----------------------------------------\n\nTITLE: Guaranteed Value Forwarding with Struct Extract in Swift SIL\nDESCRIPTION: Demonstrates guaranteed value forwarding using struct_extract within a borrow scope, showing safe field access without copying.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nsil @accessLHSStateAndHandOff : $@convention(thin) (@owned KlassPair) -> @owned State {\nbb0(%0 : @owned $KlassPair):\n  %1 = begin_borrow %0 : $KlassPair\n  %2 = struct_extract %1 : $KlassPair, #KlassPair.lhs\n  %3 = ref_element_addr %2 : $Klass, #Klass.state\n  %4 = load [copy] %3 : $*State\n  end_borrow %1 : $KlassPair\n  %handOff = function_ref @handOff : $@convention(thin) (@owned KlassPair) -> ()\n  apply %handOff(%0) : $@convention(thin) (@owned KlassPair) -> ()\n  return %4 : $State\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Stored Properties in Swiftinterfaces with @_hasStorage\nDESCRIPTION: This snippet demonstrates the `@_hasStorage` attribute within a `@frozen` struct `S`. This attribute explicitly marks the property `x` as a stored property in the swiftinterface file. This distinction is crucial for the compiler to correctly determine the memory layout of `@frozen` types, differentiating stored properties (`x`) from computed properties (`y`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n```swift\n@frozen struct S {\n  @_hasStorage var x: Int { get set } // stored\n  var y: Int { get set } // computed\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Standard C++ String to Swift String\nDESCRIPTION: Demonstrates how to convert an std::string to a swift::String using the explicit constructor of swift::String.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_65\n\nLANGUAGE: c++\nCODE:\n```\nvoid setSwiftString(swift::String &other, const std::string &str) {\n  other = swift::String(str);\n}\n```\n\n----------------------------------------\n\nTITLE: Pattern Matching with Proposed Case Initializers in Swift\nDESCRIPTION: Example of how pattern matching would work with the proposed case initializer syntax, using initializer-like matching in switch statements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nswitch result {\ncase Result(success: let success):\n  ...\ncase Result(error: let error):\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Target for Shims Copy\nDESCRIPTION: Creates a custom target for copying Swift to C++ shims and configures installation rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/PrintAsClang/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(\"copy_swiftToCxx_shims\"\n    DEPENDS \"${output_dir}\" \"${outputs}\"\n    COMMENT \"Copying Swift to C++ shims to ${output_dir}\")\n\nswift_install_in_component(FILES ${datafiles}\n                           DESTINATION \"lib/swift/swiftToCxx\"\n                           COMPONENT compiler)\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Structs for Complex Key Path Example in Swift\nDESCRIPTION: This code snippet extends the previous example by adding structs D and E with computed properties and subscripts. It demonstrates how more complex key paths involving computed properties and subscripts are represented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/KeyPaths.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct D {\n  var computed: E { get set }\n}\n\nstruct E {\n  subscript(b: B) -> F { get }\n}\n```\n\n----------------------------------------\n\nTITLE: TextOutputStreamable Extension for Uppercase Conversion\nDESCRIPTION: Extension to TextOutputStreamable protocol that adds convenience methods for uppercase conversion using the UpperStreamable adapter.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nextension TextOutputStreamable {\n  typealias Upcased : TextOutputStreamable = UpperStreamable<This>\n  func toUpper() -> UpperStreamable<This> {\n    return Upcased(self)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Struct Layout in Swift\nDESCRIPTION: Example showing how a Swift struct with a Bool flag and tuple pair is mapped to typed layout on a 64-bit platform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/CallingConvention.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct FlaggedPair {\n  var flag: Bool\n  var pair: (MyClass, Float)\n}\n```\n\n----------------------------------------\n\nTITLE: Using @_specialize for Generic Function Optimization in Swift\nDESCRIPTION: This example demonstrates how to use the @_specialize attribute to optimize generic code by instructing the compiler to create specialized implementations for specific types. The example shows a Game class with a generic parameter T constrained to Pingable protocol, with a specialization for Int type that significantly improves performance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/UnsupportedOptimizationAttributes.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n/// ---------------\n/// Framework.swift\n\npublic protocol Pingable { func ping() -> Self }\npublic protocol Playable { func play() }\n\nextension Int : Pingable {\n  public func ping() -> Int { return self + 1 }\n}\n\npublic class Game<T : Pingable> : Playable {\n  var t : T\n\n  public init (_ v : T) {t = v}\n\n  @_specialize(where T == Int)\n  public func play() {\n    for _ in 0...100_000_000 { t = t.ping() }\n  }\n}\n\n/// -----------------\n/// Application.swift\n\nGame(10).play()\n```\n\n----------------------------------------\n\nTITLE: Adding Non-Public Protocol Conformance to Public Struct in Swift\nDESCRIPTION: This snippet demonstrates adding a non-public conformance to protocol P2 for the public struct Y. It shows that conformances can have different access levels than the type itself.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nextension Y : P2 {}   // Y's conformance to P2 is non-@public\n```\n\n----------------------------------------\n\nTITLE: Implementing Swift Class Types in C++\nDESCRIPTION: C++ class representation for Swift class types. The base class contains a pointer to the underlying Swift instance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nclass BaseClass {\nprivate:\n  void *_opaquePointer; // Swift class instance pointer is stored here.\n}; \nclass Vehicle: public BaseClass {\npublic:\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Code Motion Across RC Identity Preserving Instructions - Swift\nDESCRIPTION: This snippet demonstrates equivalent code motion enabled by RC identity preservation within SIL. Retaining a value after a chain of unary instructions is valid, as the effect on the reference count is unchanged from retaining before, provided the instructions in question are RC identity preserving. This concept is crucial for safe and effective ARC and enables optimizations in the Swift compiler. No external dependencies are required, beyond the use of SIL conventions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_1\n\nLANGUAGE: sil\nCODE:\n```\n%b = unary_instruction %a\n%c = unary_instruction %b\nretain_value %c\n```\n\n----------------------------------------\n\nTITLE: Initializing Error Existential in Swift SIL\nDESCRIPTION: Demonstrates two ways of initializing an Error existential container in Swift SIL: the general way using alloc_existential_box and a faster path for NSError using init_existential_ref.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_146\n\nLANGUAGE: swift\nCODE:\n```\nbb(%nserror: $NSError):\n  // The slow general way to form an Error, allocating a box and\n  // storing to its value buffer:\n  %error1 = alloc_existential_box $Error, $NSError\n  %addr = project_existential_box $NSError in %error1 : $Error\n  strong_retain %nserror: $NSError\n  store %nserror to %addr : $NSError\n\n  // The fast path supported for NSError:\n  strong_retain %nserror: $NSError\n  %error2 = init_existential_ref %nserror: $NSError, $Error\n```\n\n----------------------------------------\n\nTITLE: Defining Entity Mangling in Swift\nDESCRIPTION: Specifies the mangling rules for various Swift entities including types, constructors, closures, and other language constructs. This section defines how different kinds of declarations are uniquely identified in the binary.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nentity ::= nominal-type                    // named type declaration\n  entity ::= context entity-spec static? curry-thunk?\n\n  static ::= 'Z'\n  curry-thunk ::= 'Tc'\n\n  label-list ::= empty-list            // represents complete absence of parameter labels\n  label-list ::= ('_' | identifier)*   // '_' is inserted as placeholder for empty label,\n                                       // since the number of labels should match the number of parameters\n\n  // The leading type is the function type\n  entity-spec ::= label-list type file-discriminator? 'fC'      // allocating constructor\n  entity-spec ::= label-list type file-discriminator? 'fc'      // non-allocating constructor\n  entity-spec ::= type 'fU' INDEX            // explicit anonymous closure expression\n  entity-spec ::= type 'fu' INDEX            // implicit anonymous closure\n  entity-spec ::= 'fA' INDEX                 // default argument N+1 generator\n  entity-spec ::= entity 'fa'                // runtime discoverable attribute generator\n  entity-spec ::= 'fi'                       // non-local variable initializer\n  entity-spec ::= 'fP'                       // property wrapper backing initializer\n  entity-spec ::= 'fW'                       // property wrapper init from projected value\n  entity-spec ::= 'fD'                       // deallocating destructor; untyped\n  entity-spec ::= 'fZ'                       // isolated deallocating destructor; untyped\n  entity-spec ::= 'fd'                       // non-deallocating destructor; untyped\n  entity-spec ::= 'fE'                       // ivar destroyer; untyped\n  entity-spec ::= 'fe'                       // ivar initializer; untyped\n  entity-spec ::= 'Tv' NATURAL               // outlined global variable (from context function)\n  entity-spec ::= 'Tv' NATURAL 'r'           // outlined global read-only object\n  entity-spec ::= 'Te' bridge-spec           // outlined objective c method call\n\n  entity-spec ::= decl-name label-list function-signature generic-signature? 'F'    // function\n  entity-spec ::= label-list type file-discriminator? 'i' ACCESSOR                  // subscript\n  entity-spec ::= decl-name label-list? type 'v' ACCESSOR                           // variable\n  entity-spec ::= decl-name type 'fp'                                               // generic type parameter\n  entity-spec ::= decl-name type 'fo'                                               // enum element (currently not used)\n  entity-spec ::= decl-name label-list? type generic-signature? 'fm'   // macro\n  entity-spec ::= context macro-discriminator-list  // macro expansion\n  entity-spec ::= identifier 'Qa'                                                   // associated type declaration\n```\n\n----------------------------------------\n\nTITLE: Modeling Move-Only Values with Forwarding Uses in Swift SIL\nDESCRIPTION: Demonstrates Swift SIL code for managing move-only values using owned ownership. Requires understanding of SIL, Swift reference counting (ARC), and basic IR concepts. Functions illustrate how values are copied, consumed, and destroyed along various control flow paths using copy_value, checked_cast_br, enum, and destroy_value instructions. Inputs include Swift class instances; outputs handle typecase and ownership transitions per function path constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_5\n\nLANGUAGE: sil\nCODE:\n```\n// testcase.swift.\nfunc doSomething(x : Klass) -> OtherKlass? {\n  return x as? OtherKlass\n}\n\n// testcase.sil. A possible SILGen lowering\nsil [ossa] @doSomething : $@convention(thin) (@guaranteed Klass) -> () {\nbb0(%0 : @guaranteed Klass):\n  // Definition of '%1'\n  %1 = copy_value %0 : $Klass\n\n  // Consume '%1'. This means '%1' can no longer be used after this point. We\n  // rebind '%1' in the destination blocks (bbYes, bbNo).\n  checked_cast_br Klass in %1 : $Klass to $OtherKlass, bbYes, bbNo\n\nbbYes(%2 : @owned $OtherKlass): // On success, the checked_cast_br forwards\n                                // '%1' into '%2' after casting to OtherKlass.\n\n  // Forward '%2' into '%3'. '%2' can not be used past this point in the\n  // function.\n  %3 = enum $Optional<OtherKlass>, case #Optional.some!enumelt, %2 : $OtherKlass\n\n  // Forward '%3' into the branch. '%3' can not be used past this point.\n  br bbEpilog(%3 : $Optional<OtherKlass>)\n\nbbNo(%3 : @owned $Klass): // On failure, since we consumed '%1' already, we\n                          // return the original '%1' as a new value '%3'\n                          // so we can use it below.\n  // Actually destroy the underlying copy (``%1``) created by the copy_value\n  // in bb0.\n  destroy_value %3 : $Klass\n\n  // We want to return nil here. So we create a new non-payloaded enum and\n  // pass it off to bbEpilog.\n  %4 = enum $Optional<OtherKlass>, case #Optional.none!enumelt\n  br bbEpilog(%4 : $Optional<OtherKlass>)\n\nbbEpilog(%5 : @owned $Optional<OtherKlass>):\n  // Consumes '%5' to return to caller.\n  return %5 : $Optional<OtherKlass>\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Swift Code with libFuzzer Support\nDESCRIPTION: Demonstrates the basic compilation command for a Swift file with libFuzzer integration. Uses -sanitize=fuzzer to link libFuzzer and enable code coverage, and -parse-as-library to omit the main symbol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/libFuzzerIntegration.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n% swiftc -sanitize=fuzzer -parse-as-library myfile.swift\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Components in CMake\nDESCRIPTION: Configures the installation of various Swift components, including the main Swift executables, symbol graph extractor, API digester, and other tools. It also handles the installation of the Swift driver if it exists.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/driver/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(compiler swift-frontend)\nswift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift${CMAKE_EXECUTABLE_SUFFIX}\"\n                           DESTINATION \"bin\"\n                           COMPONENT compiler)\nswift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swiftc${CMAKE_EXECUTABLE_SUFFIX}\"\n                           DESTINATION \"bin\"\n                           COMPONENT compiler)\nswift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-symbolgraph-extract${CMAKE_EXECUTABLE_SUFFIX}\"\n                           DESTINATION \"bin\"\n                           COMPONENT compiler)\nswift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-api-digester${CMAKE_EXECUTABLE_SUFFIX}\"\n                           DESTINATION \"bin\"\n                           COMPONENT compiler)\nswift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-cache-tool${CMAKE_EXECUTABLE_SUFFIX}\"\n                           DESTINATION \"bin\"\n                           COMPONENT compiler)\nswift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-synthesize-interface${CMAKE_EXECUTABLE_SUFFIX}\"\n                           DESTINATION \"bin\"\n                           COMPONENT compiler)\nadd_dependencies(autolink-driver swift-frontend)\nswift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-autolink-extract${CMAKE_EXECUTABLE_SUFFIX}\"\n                           DESTINATION \"bin\"\n                           COMPONENT autolink-driver)\n\nif(EXISTS \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-driver${CMAKE_EXECUTABLE_SUFFIX}\" AND EXISTS \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-help${CMAKE_EXECUTABLE_SUFFIX}\")\n  swift_install_in_component(PROGRAMS \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-driver${CMAKE_EXECUTABLE_SUFFIX}\"\n                             DESTINATION \"bin\"\n                             COMPONENT compiler)\n  swift_install_in_component(PROGRAMS \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-help${CMAKE_EXECUTABLE_SUFFIX}\"\n                             DESTINATION \"bin\"\n                             COMPONENT compiler)\n  swift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swiftc-legacy-driver${CMAKE_EXECUTABLE_SUFFIX}\"\n                             DESTINATION \"bin\"\n                             COMPONENT compiler)\n  swift_install_in_component(FILES \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-legacy-driver${CMAKE_EXECUTABLE_SUFFIX}\"\n                             DESTINATION \"bin\"\n                             COMPONENT compiler)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Swift Compiler Error for Unsafe Static Variable\nDESCRIPTION: The Swift compiler output when building code with complete concurrency checking enabled. It shows the error and suggestions for fixing a non-isolated mutable static variable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/mutable-global-variable.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n| struct Constants {\n|   static var value = 10\n|              |- error: static property 'value' is not concurrency-safe because it is nonisolated global shared mutable state\n|              |- note: convert 'value' to a 'let' constant to make 'Sendable' shared state immutable\n|              |- note: add '@MainActor' to make static property 'value' part of global actor 'MainActor'\n|              `- note: disable concurrency-safety checks if accesses are protected by an external synchronization mechanism\n```\n\n----------------------------------------\n\nTITLE: Using 'private'/'fileprivate' for Implicit 'final' and Direct Dispatch\nDESCRIPTION: Illustrates how using `private` (on class `E`) or `fileprivate` (on property `F.myPrivateVar`) restricts visibility to the current file. This allows the Swift compiler to potentially infer `final` if no overriding declarations exist within the file, thus enabling direct calls (`e.doSomething()`) and accesses (`f.myPrivateVar`) instead of slower dynamic dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprivate class E {\n  func doSomething() { ... }\n}\n\nclass F {\n  fileprivate var myPrivateVar: Int\n}\n\nfunc usingE(_ e: E) {\n  e.doSomething() // There is no sub class in the file that declares this class.\n                  // The compiler can remove virtual calls to doSomething()\n                  // and directly call E's doSomething method.\n}\n\nfunc usingF(_ f: F) -> Int {\n  return f.myPrivateVar\n}\n```\n\n----------------------------------------\n\nTITLE: Strong Copy of Unowned Value in Swift Intermediate Language (SIL)\nDESCRIPTION: The strong_copy_unowned_value instruction safely converts an unowned reference to a strong reference. It asserts the object's strong reference count is positive, increments it, and returns a new strong reference.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_56\n\nLANGUAGE: sil\nCODE:\n```\n%1 = strong_copy_unowned_value %0 : $@unowned T\n// %1 will be a strong @owned value of type $T.\n// $T must be a reference type\n```\n\n----------------------------------------\n\nTITLE: Overriding a Computed Property with Another Computed Property in Swift\nDESCRIPTION: This snippet defines `MaybeColorful`, a subclass of `Base`. It overrides the computed `color` property inherited from `Base` with a new computed property. The new getter provides custom logic (returning green randomly or the superclass's color via `super.color`), and the new setter prevents changes, demonstrating how to replace inherited computed behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nclass MaybeColorful : Base {\n  var color : Color {\n    get {\n      if randomBooleanValue() {\n        return .Green\n      } else {\n        return super.color\n      }\n    }\n    set {\n      print(\"Sorry, we choose our own colors here.\")\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Xcode Project for Swift Benchmarks\nDESCRIPTION: Commands to generate and open an Xcode project for working on Swift benchmarks using SwiftPM's project generation capabilities.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nswift-source/swift/benchmark$ swift package generate-xcodeproj\ngenerated: ./swiftbench.xcodeproj\nswift-source/swift/benchmark$ open swiftbench.xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Using Mutable Data Members in C++ Const Member Functions\nDESCRIPTION: This example demonstrates how mutable data members in C++ allow const-qualified member functions to modify object state, which is easily detectable statically.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_40\n\nLANGUAGE: c++\nCODE:\n```\nclass SneakyMutation {\nprivate:\n  mutable int value = 0;\npublic:\n  void mutateSneakily() const { value = 42; }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining String Creation from UTF-16 Literal in SIL\nDESCRIPTION: Defines the `string.makeUTF16` SIL operation used to convert a built-in UTF-16 encoded string literal into a String object. It requires a pointer to the start of the data and the count of UTF-16 code units.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nstring.makeUTF16(start: RawPointer, utf16CodeUnitCount: Word) -> String\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Parameter Index and Layout Constraint Mangling in Swift\nDESCRIPTION: Specifies the mangling rules for generic parameter indexes and layout constraints used in generic signatures. Includes various layout types and size/alignment specifications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_42\n\nLANGUAGE: swift\nCODE:\n```\nGENERIC-PARAM-INDEX ::= 'z'                // depth = 0,   idx = 0\nGENERIC-PARAM-INDEX ::= INDEX              // depth = 0,   idx = N+1\nGENERIC-PARAM-INDEX ::= 'd' INDEX INDEX    // depth = M+1, idx = N\nGENERIC-PARAM-INDEX ::= 's'                // depth = 0,   idx = 0; Constrained existential 'Self' type\n\nLAYOUT-CONSTRAINT ::= 'N'  // NativeRefCountedObject\nLAYOUT-CONSTRAINT ::= 'R'  // RefCountedObject\nLAYOUT-CONSTRAINT ::= 'T'  // Trivial\nLAYOUT-CONSTRAINT ::= 'C'  // Class\nLAYOUT-CONSTRAINT ::= 'D'  // NativeClass\nLAYOUT-CONSTRAINT ::= 'E' LAYOUT-SIZE-AND-ALIGNMENT  // Trivial of exact size\nLAYOUT-CONSTRAINT ::= 'e' LAYOUT-SIZE  // Trivial of exact size\nLAYOUT-CONSTRAINT ::= 'M' LAYOUT-SIZE-AND-ALIGNMENT  // Trivial of size at most N bits\nLAYOUT-CONSTRAINT ::= 'm' LAYOUT-SIZE  // Trivial of size at most N bits\nLAYOUT-CONSTRAINT ::= 'U'  // Unknown layout\nLAYOUT-CONSTRAINT ::= 'B' // BridgeObject\nLAYOUT-CONSTRAINT ::= 'S' // TrivialStride\n\nLAYOUT-SIZE ::= INDEX // Size only\nLAYOUT-SIZE-AND-ALIGNMENT ::= INDEX INDEX // Size followed by alignment\n```\n\n----------------------------------------\n\nTITLE: SIL Instruction: store_borrow\nDESCRIPTION: Stores a borrowed value to a stack location. The stack location must be alloc_stack and the stored value remains alive until end_borrow.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_29\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'store_borrow' sil-value 'to' sil-operand\n\n%2 = store_borrow %0 to %1 : $*T\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Type Metadata Lookup Functions\nDESCRIPTION: Symbol listings for Swift runtime functions responsible for looking up metadata for types requiring runtime instantiation or initialization. These functions handle structural types, generics, classes, and metadata for imported C and Objective-C types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n0000000000023230 T _swift_getExistentialMetatypeMetadata\n0000000000023630 T _swift_getExistentialTypeMetadata\n0000000000023b90 T _swift_getForeignTypeMetadata\n000000000001ef30 T _swift_getFunctionTypeMetadata\n000000000001eed0 T _swift_getFunctionTypeMetadata1\n000000000001f1f0 T _swift_getFunctionTypeMetadata2\n000000000001f250 T _swift_getFunctionTypeMetadata3\n000000000001e940 T _swift_getGenericMetadata\n0000000000022fd0 T _swift_getMetatypeMetadata\n000000000001ec50 T _swift_getObjCClassMetadata\n000000000001e6b0 T _swift_getResilientMetadata\n0000000000022260 T _swift_getTupleTypeMetadata\n00000000000225a0 T _swift_getTupleTypeMetadata2\n00000000000225d0 T _swift_getTupleTypeMetadata3\n0000000000028bc0 T _swift_getInitializedObjCClass\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Functions with Various Parameters in Swift\nDESCRIPTION: Defines several functions with different parameter patterns, return types, and documentations, including anonymous parameters and multiple parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  fooFunc1.  Bbb.\nfunc fooFunc1(_ a: Int32) -> Int32\nfunc fooFunc1AnonymousParam(_: Int32) -> Int32\nfunc fooFunc3(_ a: Int32, _ b: Float, _ c: Double, _ d: UnsafeMutablePointer<Int32>!) -> Int32\n```\n\n----------------------------------------\n\nTITLE: Defining metatype Instruction in SIL\nDESCRIPTION: Defines the 'metatype' instruction which creates a reference to the metatype object for a given type T. The result has type T.Type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_104\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'metatype' sil-type\n\n%1 = metatype $T.Type\n// %1 has type $T.Type\n```\n\n----------------------------------------\n\nTITLE: Pure Function Type Attributes Example\nDESCRIPTION: Example showing a @pure closure attribute that restricts closure capture to pure values only. This is a proposed feature that enforces purity constraints on closures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n@pure closure\n```\n\n----------------------------------------\n\nTITLE: Calling a Mutating Swift Method from C++\nDESCRIPTION: In this C++ code, a Swift struct (Point) is constructed and a mutating method 'moveBy' is called, demonstrating member method invocation across language boundaries. Correct header and namespace inclusion are required. After mutation, x and y values are printed. Marked as valid only if the bridged Swift type is mutable (not const).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_15\n\nLANGUAGE: c++\nCODE:\n```\n// C++ use site:\n#include \"Geometry-Swift.h\"\nusing namespace Geometry;\n\nint main() {\n  auto point = Point();\n  point.moveBy(1.0, 2.0);\n  std::cout << \"The point is now at \" << point.getX() << \", \" << point.getY() << \"\\n\";\n  // Prints \"The point is now at 1.0, 2.0\"\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint Ignore Count Based on Hit Count (LLDB)\nDESCRIPTION: Sets a breakpoint on `GlobalARCOpts::run` with an ignore count of 84. This value is typically determined by first observing the hit count (e.g., 85 hits from `br list`) and setting the ignore count to one less, allowing the debugger to stop just before a specific invocation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_22\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br set -i 84 -n GlobalARCOpts::run\n```\n\n----------------------------------------\n\nTITLE: Using Non-Escapable mark_dependence_addr in Swift SIL\nDESCRIPTION: Shows how a non-Escapable mark_dependence_addr with the nonescaping attribute extends the lifetime of the base value through loaded values and their copies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_73\n\nLANGUAGE: sil\nCODE:\n```\nmark_dependence_addr [nonescaping] %address : %*NonescapableType on %base\n%dependent_value = load %address\n%copied_value = copy_value %dependent_value\napply %f(%dependent_value)\ndestroy_value %base\n```\n\n----------------------------------------\n\nTITLE: JVP and Differential Function Generation in SIL (SIL)\nDESCRIPTION: This SIL code illustrates the canonical process for generating the JVP (Jacobian-vector product) and associated differential function from an original function. The snippet shows that each function application is replaced with its JVP form, and the return value bundles the primary result and a closure representing the derivative computation. The closure computes the propagation of tangent information through the JVPs of component operations. Inputs: x (Float), dx (tangent). Outputs: (Float, function(Float)->Float). Intended for implementers of AD passes in SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_13\n\nLANGUAGE: sil\nCODE:\n```\n// JVP: replaces all function applications with JVP applications.\nsil @jvp_f : $(Float) -> (Float, (Float) -> Float) {\nbb0(%x):\n  (%y1, %df_sin) = apply @jvp_sin(%x)\n  (%y2, %df_cos) = apply @jvp_cos(%x)\n  (%y3, %df_mul) = apply @jvp_mul(%y1, %y2)\n  // Return tuple of original result and differential.\n  return (%y3, { %dx in\n    %dy1 = apply %df_sin(%dx)\n    %dy2 = apply %df_cos(%dx)\n    %dy3 = apply %df_mul(%dy1, %dy2)\n    return %dy3\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Extensible Enum in Objective-C\nDESCRIPTION: This snippet shows how to declare an extensible enum in Objective-C using the enum_extensibility attribute. It defines a TimeOfDay enum with four cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\nenum TimeOfDay __attribute__((enum_extensibility(open))) : long {\n  TimeOfDayMorning,\n  TimeOfDayAfternoon,\n  TimeOfDayNight,\n  TimeOfDayEvening = TimeOfDayNight\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Metatype Operations Functions\nDESCRIPTION: Symbol listings for Swift runtime functions that operate on metatypes, including dynamic type operations, type name retrieval, and class type checking. These functions provide runtime type information and operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n0000000000000b60 T _swift_getDynamicType\n0000000000022fb0 T _swift_getObjectType\n00000000000006f0 T _swift_getTypeName\n00000000000040c0 T _swift_isClassType\n0000000000003f50 T _swift_isClassOrObjCExistentialType\n0000000000004130 T _swift_isOptionalType\n00000000000279f0 T _swift_objc_class_usesNativeSwiftReferenceCounting\n000000000002b340 T _swift_objc_class_unknownGetInstanceExtents\n000000000002b350 T _swift_class_getInstanceExtents\n0000000000004080 T _swift_class_getSuperclass\n```\n\n----------------------------------------\n\nTITLE: Defining SIL Linkage Syntax\nDESCRIPTION: This code snippet defines the syntax for SIL linkage specifiers. It lists all possible linkage types used in SIL to control the visibility and linking behavior of objects across different SIL modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_33\n\nLANGUAGE: sil\nCODE:\n```\nsil-linkage ::= 'public'\nsil-linkage ::= 'non_abi'\nsil-linkage ::= 'package'\nsil-linkage ::= 'package_non_abi'\nsil-linkage ::= 'hidden'\nsil-linkage ::= 'shared'\nsil-linkage ::= 'private'\nsil-linkage ::= 'public_external'\nsil-linkage ::= 'package_external'\nsil-linkage ::= 'hidden_external'\n```\n\n----------------------------------------\n\nTITLE: Implementing Virtual Initializers with the @virtual Attribute\nDESCRIPTION: This snippet demonstrates defining virtual initializers with the @virtual attribute. Virtual initializers are required for dynamic instantiation of objects when the concrete type is only known at runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass A {\n  @virtual init(x: Int) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Differentiable Function Declaration in Swift\nDESCRIPTION: Shows how to declare a differentiable function using the @differentiable attribute.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable // differentiable with respect to 'x'\nfunc silly(_ x: Float, _ n: Int) -> Float {\n    print(\"Running 'silly' on \\(x) and \\(n)!\")\n    return sin(cos(x))\n}\n```\n\n----------------------------------------\n\nTITLE: Demangling Swift Symbol Names using swift_stdlib_demangleName (Swift Convention)\nDESCRIPTION: This function demangles a given Swift mangled symbol name. It takes a pointer to the mangled name (`string`) and its `length`, and outputs the demangled name as a `Swift.String` via the `@out` parameter. It uses the `thin` calling convention. An `ABI TODO` notes plans to decouple this from the standard library `Swift.String` implementation and rename it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n@convention(thin) (string: UnsafePointer<UInt8>,\n                   length: UInt,\n                   @out String) -> ()\n```\n\n----------------------------------------\n\nTITLE: Extracting Dynamic Elements from Tuple Packs in SIL\nDESCRIPTION: The tuple_pack_extract instruction extracts a value at a dynamic index from a tuple value. It is only valid in opaque values mode and is lowered by AddressLowering to tuple_pack_element_addr.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_124\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'tuple_pack_extract' sil-value 'of' sil-operand 'as' sil-type\n\n%value = tuple_pack_extract %index of %tuple : $(repeat each T) as $@pack_element(\"01234567-89AB-CDEF-0123-000000000000\") U\n// %index must be of $Builtin.PackIndex type\n// %tuple must be of tuple type\n// %addr will be the result type specified by the 'as' clause\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Breakpoint for SIL Instruction Removal (LLDB)\nDESCRIPTION: Sets an LLDB breakpoint in the SIL instruction list removal function (`SILInstruction.cpp`, line 63) that stops execution specifically when a `strong_retain` instruction (`ValueKind::StrongRetainInst`) is being removed. This helps pinpoint optimizations modifying retain instructions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_13\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br set -c 'I->getKind() == ValueKind::StrongRetainInst' -f SILInstruction.cpp -l 63\n```\n\n----------------------------------------\n\nTITLE: Illustrating Formal Access for Swap Operation in Swift\nDESCRIPTION: This example demonstrates the sequence of formal accesses (FA) that occur during a swap operation between two object arrays in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nfunc swap<T>(lhs: inout T, rhs: inout T) {}\n\n// object is a variable of class type\nswap(&leftObject.array, &rightObject.array)\n```\n\n----------------------------------------\n\nTITLE: Running Swift Tests with utils/run-test\nDESCRIPTION: These commands show how to run Swift tests using the utils/run-test script, which builds test dependencies before running tests. It includes examples for running all tests and filtering tests.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\n# Rebuild all test dependencies and run all tests under test/.\nutils/run-test --lit ../llvm-project/llvm/utils/lit/lit.py \\\n  ../build/Ninja-RelWithDebInfoAssert/swift-macosx-$(uname -m)/test-macosx-$(uname -m)\n\n# Rebuild all test dependencies and run tests containing \"MyTest\".\nutils/run-test --lit ../llvm-project/llvm/utils/lit/lit.py \\\n  ../build/Ninja-RelWithDebInfoAssert/swift-macosx-$(uname -m)/test-macosx-$(uname -m) \\\n  --filter=\"MyTest\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Base Class with Methods in Swift\nDESCRIPTION: Defines a base class with both instance and class methods that take Int32 parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.module.printed.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nclass BaseInHead {\n  class func doIt(_ arg: Int32)\n  func doIt(_ arg: Int32)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing try_apply Terminator in Swift Intermediate Language\nDESCRIPTION: Defines the try_apply terminator which calls a function that may throw errors. It transfers control to normal or error destinations depending on how the called function returns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_194\n\nLANGUAGE: sil\nCODE:\n```\nsil-terminator ::= 'try_apply' sil-value\n                      sil-apply-substitution-list?\n                      '(' (sil-value (',' sil-value)*)? ')'\n                      ':' sil-type\n  'normal' sil-identifier, 'error' sil-identifier\n\ntry_apply %0(%1, %2, ...) : $(A, B, ...) -> (R, @error E),\n  normal bb1, error bb2\nbb1(%3 : R):\nbb2(%4 : E):\n\n// Note that the type of the callee '%0' is specified *after* the arguments\n// %0 must be of a concrete function type $(A, B, ...) -> (R, @error E)\n// %1, %2, etc. must be of the argument types $A, $B, etc.\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Variadic Parameters Mangling\nDESCRIPTION: Swift symbol mangling for functions with variadic parameters of various types. These examples show how Swift encodes functions with different combinations of variadic array parameters and regular parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\n_T08mangling14varargsVsArrayySi3arrd_SS1ntF ---> mangling.varargsVsArray(arr: Swift.Int..., n: Swift.String) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T08mangling14varargsVsArrayySaySiG3arr_SS1ntF ---> mangling.varargsVsArray(arr: [Swift.Int], n: Swift.String) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T08mangling14varargsVsArrayySaySiG3arrd_SS1ntF ---> mangling.varargsVsArray(arr: [Swift.Int]..., n: Swift.String) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T08mangling14varargsVsArrayySi3arrd_tF ---> mangling.varargsVsArray(arr: Swift.Int...) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T08mangling14varargsVsArrayySaySiG3arrd_tF ---> mangling.varargsVsArray(arr: [Swift.Int]...) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S8mangling14varargsVsArray3arr1nySid_SStF ---> mangling.varargsVsArray(arr: Swift.Int..., n: Swift.String) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S8mangling14varargsVsArray3arr1nySaySiG_SStF ---> mangling.varargsVsArray(arr: [Swift.Int], n: Swift.String) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S8mangling14varargsVsArray3arr1nySaySiGd_SStF ---> mangling.varargsVsArray(arr: [Swift.Int]..., n: Swift.String) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S8mangling14varargsVsArray3arrySid_tF ---> mangling.varargsVsArray(arr: Swift.Int...) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S8mangling14varargsVsArray3arrySaySiGd_tF ---> mangling.varargsVsArray(arr: [Swift.Int]...) -> ()\n```\n\n----------------------------------------\n\nTITLE: Example of dynamic_function_ref Usage in Swift Code\nDESCRIPTION: Demonstrates how dynamic_function_ref is generated in SIL from Swift code that uses a dynamically replaceable function, showing both the declaration and the call site.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_82\n\nLANGUAGE: swift\nCODE:\n```\ndynamic func test_dynamically_replaceable() {}\n\nfunc test_dynamic_call() {\n  test_dynamically_replaceable()\n}\n```\n\nLANGUAGE: sil\nCODE:\n```\nsil [dynamically_replacable] @test_dynamically_replaceable : $@convention(thin) () -> () {\nbb0:\n  %0 = tuple ()\n  return %0 : $()\n}\n\nsil @test_dynamic_call : $@convention(thin) () -> () {\nbb0:\n  %0 = dynamic_function_ref @test_dynamically_replaceable : $@convention(thin) () -> ()\n  %1 = apply %0() : $@convention(thin) () -> ()\n  %2 = tuple ()\n  return %2 : $()\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Version Request/Response\nDESCRIPTION: JSON format for retrieving SourceKit protocol version information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>: (UID) <source.request.protocol_version>\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.version_major>: (int64) // The major version number in a version string\n    <key.version_minor>: (int64) // The minor version number in a version string\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existential Address in Swift SIL\nDESCRIPTION: Defines the open_existential_addr instruction in Swift SIL, which obtains the address of the concrete value inside an existential container.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_151\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'open_existential_addr' sil-allowed-access sil-operand 'to' sil-type\nsil-allowed-access ::= 'immutable_access'\nsil-allowed-access ::= 'mutable_access'\n\n%1 = open_existential_addr immutable_access %0 : $*P to $*@opened P\n// %0 must be of a $*P type for non-class protocol or protocol composition\n//   type P\n// $*@opened P must be a unique archetype that refers to an opened\n// existential type P.\n// %1 will be of type $*@opened P\n```\n\n----------------------------------------\n\nTITLE: Multiple Captures in Swift Closures\nDESCRIPTION: Example of multiple captures in a Swift closure, demonstrating how identical forms are merged to the same capture declaration. This ensures proper type refinement and eliminates redundant computation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nresetButton.setAction {\n  log(\"resetting state to \" + capture(self.state))\n  capture(self.model).setState(capture(self.state))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Diagnostic Comment Expectation Markers - Plaintext\nDESCRIPTION: This snippet demonstrates how to use specially formatted comments in source code to denote expected diagnostics (such as errors) when running the Swift compiler with the -verify flag. The comment format allows specification of diagnostic kind, match count, location, expected message substring, and associated fix-its. The example shows how an error expected on the same line is expressed, informing the verification tool to expect a message that includes 'invalid redeclaration of \\'y\\''. No dependencies are required besides the Swift compiler with the -verify feature enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n// expected-error {{invalid redeclaration of 'y'}}\n```\n\n----------------------------------------\n\nTITLE: Uniqueness Check and Reference Counting Interaction\nDESCRIPTION: Example showing how moving retain operations across uniqueness checks can change program semantics by affecting the result of uniqueness checks and potentially introducing unnecessary copies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_15\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  // refcount(%0) == n\n  is_unique %0 : $Builtin.NativeObject\n  // refcount(%0) == n\n  strong_retain %0 : $Builtin.NativeObject\n  // refcount(%0) == n+1\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid @_effects(releasenone) Usage (Argument Read) in Swift\nDESCRIPTION: Presents a Swift function that is *not* suitable for `@_effects(releasenone)`. Although it doesn't explicitly release objects, it reads state (`y.x`) reachable from its arguments, potentially depending on or interacting with external state in ways disallowed by `releasenone`'s constraints (though the primary violation illustrated later is external release).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfunc notAReleaseNoneFunction(x: Int, y: SomeObject) -> Int {\n  return x + y.x\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying @warn_unqualified_access on Swift Protocol Requirements\nDESCRIPTION: States that adding or removing the `@warn_unqualified_access` attribute on a function requirement within a protocol is a permitted change under ABI stability rules. This attribute affects compile-time warnings but not the binary interface.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n@warn_unqualified_access\n```\n\n----------------------------------------\n\nTITLE: Differentiable Computed Property in Swift\nDESCRIPTION: Example of making a computed property differentiable using the @differentiable attribute.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nextension Float {\n    @differentiable\n    var reciprocal: Float {\n        1 / self\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring swiftShims Interface Library with CMake\nDESCRIPTION: CMake commands to create and configure an interface library 'swiftShims' with language-specific include paths, compile definitions, and compiler options. This setup handles both build-time and install-time configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftShims/swift/shims/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftShims INTERFACE)\ntarget_include_directories(swiftShims INTERFACE\n  $<$<COMPILE_LANGUAGE:C,CXX>:$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../../>$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}>>\n  $<$<COMPILE_LANGUAGE:Swift>:$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}/swift/shims>>)\ntarget_compile_definitions(swiftShims INTERFACE\n  $<$<AND:$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>,$<COMPILE_LANGUAGE:C,CXX>>:SWIFT_STATIC_STDLIB>)\ntarget_compile_options(swiftShims INTERFACE\n  \"$<$<AND:$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xcc -DSWIFT_STATIC_STDLIB>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xcc -fmodule-map-file=\\\"$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/module.modulemap>$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_LIBDIR}/swift/shims/module.modulemap>\\\">\")\n```\n\n----------------------------------------\n\nTITLE: Swift @dynamicCallable Method Requirements\nDESCRIPTION: Implementation requirements for dynamicallyCall(withArguments:) and dynamicallyCall(withKeywordArguments:) methods. The withArguments version must work with ExpressibleByArrayLiteral types, while withKeywordArguments must handle ExpressibleByDictionaryLiteral types with string-literal conforming keys.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/dynamic-callable-requirements.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@dynamicCallable\nprotocol DynamicCallableExample {\n    func dynamicallyCall(withArguments args: [Any]) -> Any\n    func dynamicallyCall(withKeywordArguments args: KeyValuePairs<String, Any>) -> Any\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Memory Addresses with destroy_addr in Swift SIL\nDESCRIPTION: The destroy_addr instruction destroys the value in memory at a given address. For non-trivial types, it is equivalent to loading the value and releasing it, but can be used with address-only types as well.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_41\n\nLANGUAGE: Swift\nCODE:\n```\ndestroy_addr %0 : $*T\n```\n\n----------------------------------------\n\nTITLE: VJP Function Implementation in Swift SIL\nDESCRIPTION: Demonstrates the implementation of a Vector-Jacobian Product (VJP) function that replaces regular function applications with VJP applications. Returns a tuple containing the original result and a pullback function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nsil @vjp_f : $(Float) -> (Float, (Float) -> Float) {\nbb0(%x):\n  (%y1, %pb_sin) = apply @vjp_sin(%x)\n  (%y2, %pb_cos) = apply @vjp_cos(%x)\n  (%y3, %pb_mul) = apply @vjp_mul(%y1, %y2)\n  // Return tuple of original result and pullback.\n  return (%y3, { %dy3 in\n    // All \"adjoint values\" in the pullback are zero-initialized.\n    // %dx = 0, %dy1 = 0, %dy2 = 0\n    (%dy1, %dy2) += %pb_mul(%dy3)\n    (%dx) += %pb_cos(%dy2)\n    (%dx) += %pb_sin(%dy1)\n    return %dx\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring an Isolated Protocol Conformance with @MainActor in Swift\nDESCRIPTION: This example demonstrates how to declare a protocol conformance that is isolated to the Main Actor. The class MyType conforms to protocol P, and both the class and the conformance are isolated to the Main Actor, meaning the conformance can only be used when executing on the Main Actor.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/isolated-conformances.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {\n  func f()\n}\n\n@MainActor\nclass MyType: @MainActor P {\n  /*@MainActor*/ func f() {\n    // must be called on the main actor\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Non-Escaping Arguments with @_effects(notEscaping) in Swift\nDESCRIPTION: These examples illustrate how to use `@_effects(notEscaping)` to inform the compiler that certain arguments or parts of arguments do not escape the function's scope. It uses projection paths (`s.b`, `s.v**`, `s.**`) including field names and wildcards (`v**`, `**`) to precisely specify which references are guaranteed not to escape, enabling potential optimizations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nstruct Inner {\n  let i: Class\n}\nstruct Str {\n\tlet a: Inner\n\tlet b: Class\n}\n\n@_effects(notEscaping s.b)    // s.b does not escape, but s.a.i can escape\nfunc foo1(_ s: Str) { ... }\n\n@_effects(notEscaping s.v**)  // s.b and s.a.i do not escape\nfunc foo2(_ s: Str) { ... }\n\n@_effects(notEscaping s.**)   // s.b, s.a.i and all transitively reachable\n                              // references from there do not escape\nfunc foo3(_ s: Str) { ... }\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Sccache via Snap on Linux (sh)\nDESCRIPTION: Installs the optional build caching tool Sccache using the Snap package manager on Linux distributions that support it (like Ubuntu). The `--candidate` flag installs the latest version from the candidate channel, and `--classic` allows classic confinement necessary for Sccache. Requires `sudo` privileges. This is not suitable for Docker environments without systemd.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo snap install sccache --candidate --classic\n```\n\n----------------------------------------\n\nTITLE: Declaring a Struct with Reference Semantics in Swift\nDESCRIPTION: Shows how to create a struct with reference semantics by using ref qualifiers for its properties, while highlighting potential issues with this approach.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nstruct XPair\n{\n   constructor() {\n       // These Xs are notionally **part of my value**\n       first = new X\n       second = new X\n   }\n   ref first : X\n   ref second : X\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting SIL Instructions with Builder in Swift\nDESCRIPTION: Provides a static method `Builder.insert(after:, insertFunc:)` for inserting SIL instructions. This utility is particularly useful for inserting instructions immediately after another instruction, even if the preceding instruction is a potential terminator. It relates to `SILBuilderWithScope::insertAfter()` in C++. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nstatic Builder.insert(after:, insertFunc: (Builder) -> ())\n```\n\n----------------------------------------\n\nTITLE: Array Element Access Optimization Example in Swift\nDESCRIPTION: Example demonstrating how pure value types can enable compiler optimizations for array element access, even with unknown function calls.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfunc add(_ arr: Array<Int>, i: Int) -> Int {\n  let e1 = arr[i]\n  unknownFunction()\n  let e2 = arr[i]\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Tuple Types with Equatable Protocol in Swift\nDESCRIPTION: Example showing how tuple types could theoretically be extended to conform to protocols using variadic generics and conditional conformances.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_23\n\nLANGUAGE: Swift\nCODE:\n```\nextension<...Elements : Equatable> (Elements...) : Equatable {   // extending the tuple type \"(Elements...)\" to be Equatable\n}\n```\n\n----------------------------------------\n\nTITLE: Code Transformation Test in Swift\nDESCRIPTION: This snippet demonstrates a code transformation test for String Localization refactoring. It includes the original code, commands to run the refactoring, and the expected output after transformation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo() {\n  print(\"Hello World!\")\n}\n// RUN: rm -rf %t.result && mkdir -p %t.result\n// RUN: %refactor -localize-string -source-filename %s -pos=2:14 > %t.result/localized.swift\n// RUN: diff -u %S/Outputs/localized.swift.expected %t.result/localized.swift\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo() {\n  print(NSLocalizedString(\"Hello World!\", comment: \"\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating COW Value Lifetime in SIL\nDESCRIPTION: Demonstrates the lifecycle of a Copy-on-Write (COW) value in SIL, showing transitions between mutable and immutable states.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_48\n\nLANGUAGE: sil\nCODE:\n```\n  %b1 = alloc_ref $BufferClass\n  // The buffer %b1 is mutable\n  %b2 = end_cow_mutation %b1 : $BufferClass\n  // The buffer %b2 is immutable\n  (%u1, %b3) = begin_cow_mutation %b1 : $BufferClass\n  // The buffer %b3 is mutable\n  %b4 = end_cow_mutation %b3 : $BufferClass\n  // The buffer %b4 is immutable\n...\n```\n\n----------------------------------------\n\nTITLE: Comparing String Ranges in Swift\nDESCRIPTION: Demonstrates the ambiguity of using range arguments in string comparison methods and proposes a clearer slicing operation approach.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfoo.compare(bar, range: start..<end)\n```\n\nLANGUAGE: swift\nCODE:\n```\nfoo[start..<end].compare(bar)\n```\n\n----------------------------------------\n\nTITLE: Defining Meet Operations for Ownership Kinds in Swift SIL\nDESCRIPTION: These examples define the 'meet' operation (moving down) within the Ownership Kind lattice. Meeting `None` with any other kind yields that other kind. Meeting incompatible kinds like `Unowned` and `Owned`, or `Owned` and `Guaranteed`, results in `Any`, representing an unknown or conflicting ownership state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNone meet OtherOwnershipKind -> OtherOwnershipKind\nUnowned meet Owned -> Any\nOwned meet Guaranteed -> Any\n```\n\n----------------------------------------\n\nTITLE: TextOutputStreamable Protocol in Swift for Streamed String Conversion\nDESCRIPTION: Declares the TextOutputStreamable protocol, which enables types to write themselves directly to a TextOutputStream for efficient streaming. It depends on CustomStringConvertible and provides a default format() that returns the instance itself. Input: TextOutputStream target; output: writes to the stream. Limitation: writeTo must be properly implemented for custom types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nprotocol TextOutputStreamable : CustomStringConvertible {\n  func writeTo<T: TextOutputStream>(_ target: [inout] T)\n\n  // You'll never want to reimplement this\n  func format() -> PrintRepresentation {\n    return self\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing 'AndReturnError' Method as `throws` in Swift\nDESCRIPTION: This Swift code shows how the `duplicateAndReturnError:` Objective-C method would be imported. The name remains `duplicateAndReturnError`, the error parameter is removed, and the function is marked `throws`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nfunc duplicateAndReturnError() throws -> NSDocument\n```\n```\n\n----------------------------------------\n\nTITLE: Witness Table Declaration Syntax in SIL\nDESCRIPTION: Syntax for declaring witness tables in SIL which encode information for dynamic dispatch of generic types. These tables are essential for runtime protocol conformance and method dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_37\n\nLANGUAGE: sil\nCODE:\n```\ndecl ::= sil-witness-table\nsil-witness-table ::= 'sil_witness_table' sil-linkage?\n                      normal-protocol-conformance '{' sil-witness-entry* '}'\n```\n\n----------------------------------------\n\nTITLE: Casting Optional<T> as Any to Protocol Type in Swift\nDESCRIPTION: This snippet shows how casting Optional<T> as Any to a protocol type now succeeds, addressing issue #47129.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {}\nclass C: P {}\nlet c: C? = C()\nlet a = c as? Any\n// Swift 5.3: prints \"false\"\n// Specification: prints \"true\"\nprint(a is P)\n```\n\n----------------------------------------\n\nTITLE: Swift Enum Definition - FooEnum1\nDESCRIPTION: Definition of FooEnum1 struct implementing RawRepresentable and Equatable protocols with UInt32 raw value type. Includes initializers and raw value property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct FooEnum1 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\n```\n\n----------------------------------------\n\nTITLE: Deinitializing Existential Address in Swift SIL\nDESCRIPTION: Defines the deinit_existential_addr instruction in Swift SIL, which undoes the partial initialization performed by init_existential_addr.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_149\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'deinit_existential_addr' sil-operand\n\ndeinit_existential_addr %0 : $*P\n// %0 must be of a $*P address type for non-class protocol or protocol\n// composition type P\n```\n\n----------------------------------------\n\nTITLE: Defining Global Symbol Mangling in Swift\nDESCRIPTION: Specifies how global symbols related to value witnesses are mangled in Swift's ABI. These rules define mangling for outlined operations like destroy, storing enum tags, destructive enum projection, and getting enum tags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nglobal ::= generic-signature? type 'WOH' // Outlined destroy, not using value witness\n  global ::= generic-signature? type 'WOi` // Outlined store enum tag\n  global ::= generic-signature? type 'WOj` // Outlined enum destructive project\n  global ::= generic-signature? type 'WOg` // Outlined enum get tag\n```\n\n----------------------------------------\n\nTITLE: SROA Struct Splitting with Debug Information\nDESCRIPTION: Demonstrates how Scalar Replacement of Aggregates (SROA) splits struct types and maintains debug information using fragments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_3\n\nLANGUAGE: sil\nCODE:\n```\nalloc_stack $Pair, var, name \"pair\"\n// -->\nalloc_stack $Int, var, name \"pair\", type $Pair, expr op_fragment:#Pair.a\nalloc_stack $Int, var, name \"pair\", type $Pair, expr op_fragment:#Pair.b\n// -->\nalloc_stack $Builtin.Int64, var, name \"pair\", type $Pair, expr op_fragment:#Pair.a:op_fragment:#Int._value\nalloc_stack $Builtin.Int64, var, name \"pair\", type $Pair, expr op_fragment:#Pair.b:op_fragment:#Int._value\n```\n\n----------------------------------------\n\nTITLE: Automating Program Reduction Judgement with creduce - Shell\nDESCRIPTION: This shell script acts as a test predicate for use with `creduce`, assessing whether a regression persists as a program is minimized. It compares instruction counts for the same input file under two toolchain versions, marking the reduction 'interesting' if the difference exceeds a threshold. Dependencies include two installed toolchains, the `count_instructions` function, and the required input file. The script expects predefined file locations for the input and toolchains; outputs and flow are entirely directed by exit codes (0 for interesting, 1 for not interesting). This approach assumes reliable and deterministic metric collection for performance or regression detection.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\\nINPUT=test.swift\\nOLD=${HOME}/old-toolchain/usr/bin/swift\\nNEW=${HOME}/new-toolchain/usr/bin/swift\\nTHRESHOLD=50000000\\nVOLD=$(count_instructions ${OLD} -frontend -c ${INPUT})\\nVNEW=$(count_instructions ${NEW} -frontend -c ${INPUT})\\nVDIFF=$((${VNEW} - ${VOLD}))\\nif [ ${VDIFF} -gt ${THRESHOLD} ]\\nthen\\n  # Interesting\\n  exit 0\\nelse\\n  # Not interesting\\n  exit 1\\nfi\n```\n\n----------------------------------------\n\nTITLE: Configuring Lit Testing Arguments for Swift\nDESCRIPTION: Sets up command-line arguments and environment variables for running the Lit testing tool. This includes path configurations, test resource directories, and various feature flags for different testing modes and sanitizers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(LIT \"${LLVM_MAIN_SRC_DIR}/utils/lit/lit.py\")\n\nset(SWIFT_LIT_ARGS \"\" CACHE STRING \"Arguments to pass to lit\")\n\nset(SWIFT_LIT_ENVIRONMENT \"\" CACHE STRING \"Environment to use for lit invocations\")\n\nif(NOT SWIFT_INCLUDE_TOOLS)\n  if(SWIFT_RUN_TESTS_WITH_HOST_COMPILER)\n    precondition(CMAKE_Swift_COMPILER MESSAGE \"Can only run tests if a Swift compiler is specified\")\n    get_filename_component(SWIFT_COMPILER_DIR \"${CMAKE_Swift_COMPILER}\" DIRECTORY)\n    precondition(SWIFT_COMPILER_DIR)\n    # We assume that we are building against a toolchain where all tools are\n    # next to swiftc.\n    list(APPEND SWIFT_LIT_ARGS\n      \"--path=${SWIFT_COMPILER_DIR}\")\n  else()\n    list(APPEND SWIFT_LIT_ARGS\n      \"--path=${SWIFT_NATIVE_LLVM_TOOLS_PATH}\"\n      \"--param\" \"swift_native_llvm_tools_path=${SWIFT_NATIVE_LLVM_TOOLS_PATH}\"\n      \"--path=${SWIFT_NATIVE_CLANG_TOOLS_PATH}\"\n      \"--param\" \"swift_native_clang_tools_path=${SWIFT_NATIVE_CLANG_TOOLS_PATH}\"\n      \"--path=${SWIFT_NATIVE_SWIFT_TOOLS_PATH}\"\n      \"--param\" \"swift_native_swift_tools_path=${SWIFT_NATIVE_SWIFT_TOOLS_PATH}\"\n      )\n  endif()\n  if(SWIFT_BUILD_STDLIB)\n    # If building only static stdlib, use `swift_static` resources directory.\n    if(NOT SWIFT_BUILD_DYNAMIC_STDLIB AND SWIFT_BUILD_STATIC_STDLIB)\n      list(APPEND SWIFT_LIT_ARGS\n           \"--param\" \"test_resource_dir=${SWIFTSTATICLIB_DIR}\")\n    else()\n      list(APPEND SWIFT_LIT_ARGS\n           \"--param\" \"test_resource_dir=${SWIFTLIB_DIR}\")\n    endif()\n  endif()\nendif()\n\noption(SWIFT_TEST_USE_LEAKS \"Run Swift stdlib tests under leaks\" FALSE)\nif (SWIFT_TEST_USE_LEAKS)\n  list(APPEND SWIFT_LIT_ARGS \"--param\" \"leaks-all\")\nendif()\n\nif (SWIFT_ENABLE_ARRAY_COW_CHECKS)\n  list(APPEND SWIFT_LIT_ARGS\n       \"--param\" \"array_cow_checks\")\nendif()\n\nif(NOT CMAKE_CFG_INTDIR STREQUAL \".\")\n  list(APPEND SWIFT_LIT_ARGS\n       \"--param\" \"build_mode=${CMAKE_CFG_INTDIR}\")\nendif()\n\nif (LLVM_USE_SANITIZER STREQUAL \"Address\")\n  set(SWIFT_ASAN_BUILD TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Instance Variable Initializers in Swift\nDESCRIPTION: Demonstrates how to provide default initializers for instance variables in a Swift class, which are automatically called during object initialization without requiring explicit constructor code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nclass Task {\n  var title : String = \"Title\"\n  var date : NSDate = NSDate()\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Transparent SIL Functions in Swift (BNF)\nDESCRIPTION: Documents the '[transparent]' attribute, marking a function to always be inlined and lose source context information post-inlining. Used for small helper functions or those with semantics best realized inline. No external dependencies; interpreted by SIL pipeline. Marks a function declaration that should not prevent inlining at any optimization stage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_2\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[transparent]'\n```\n\n----------------------------------------\n\nTITLE: Building swift-driver with CMake and Ninja on Windows\nDESCRIPTION: This snippet configures and builds the swift-driver project using CMake and Ninja. It sets various Swift-related dependencies including TSC, LLBuild, Yams, and ArgumentParser.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_21\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B S:\\b\\9 ^\n  -D BUILD_SHARED_LIBS=YES ^\n  -D CMAKE_BUILD_TYPE=Release ^\n  -D CMAKE_INSTALL_PREFIX=C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr ^\n  -D CMAKE_MT=mt ^\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\n  -D dispatch_DIR=S:\\b\\2\\cmake\\modules ^\n  -D Foundation_DIR=S:\\b\\3\\cmake\\modules ^\n  -D TSC_DIR=S:\\b\\5\\cmake\\modules ^\n  -D LLBuild_DIR=S:\\b\\6\\cmake\\modules ^\n  -D Yams_DIR=S:\\b\\7\\cmake\\modules ^\n  -D ArgumentParser_DIR=S:\\b\\8\\cmake\\modules ^\n  -G Ninja ^\n  -S S:\\swift-driver\n\nninja -C S:\\b\\9\n```\n\n----------------------------------------\n\nTITLE: Assignment Instruction in SIL\nDESCRIPTION: Defines the assign instruction for abstract assignment of values to memory locations, used in Raw SIL before definitive initialization analysis determines the actual operation type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_35\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'assign' sil-value 'to' sil-operand\n\nassign %0 to %1 : $*T\n// $T must be a loadable type\n```\n\n----------------------------------------\n\nTITLE: Interacting with Resilient Swift Structures from C++\nDESCRIPTION: This C++ function demonstrates usage of a resilient Swift struct ('Foundation::URL') from C++. The struct is boxed and interacted with using static initializers, method calls, and property access. Requires the Foundation-Swift header and proper namespace usage. Inputs involve string initialization and method access (isFileURL, absoluteURL); output is printed to standard out.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Foundation-Swift.h\"\nusing namespace Weather;\n\nvoid workWithURL() {\n  auto url = Foundation::URL::init(\"https://swift.org\");\n  std::cout << \"Is File URL:\" << url.isFileURL() << \"\\n\";\n  auto absoluteURL = URL.absoluteURL();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Swift compiler options for deprecated declaration warnings\nDESCRIPTION: This snippet demonstrates how to use Swift compiler options to treat DeprecatedDeclaration warnings as errors. These commands can be used to enforce stricter code quality standards.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/deprecated-declaration.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -Werror DeprecatedDeclaration file.swift\nswiftc -warnings-as-errors -Wwarning DeprecatedDeclaration file.swift\n```\n\n----------------------------------------\n\nTITLE: Using sccache for Swift Build Artifact Caching (Bash)\nDESCRIPTION: This snippet demonstrates how to install and use sccache to cache Swift build artifacts, improving build times for repeated compilations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DevelopmentTips.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install sccache\n./swift/utils/build-script MY_ARGS --sccache\nexport SCCACHE_CACHE_SIZE=\"50G\"\nsccache --stop-server && sccache --start-server\nsccache --show-stats\n```\n\n----------------------------------------\n\nTITLE: Witness Table Entry Syntax in SIL\nDESCRIPTION: Syntax for entries in a witness table, including base protocol entries, method entries, associated type entries, and associated conformance entries. These define how a type conforms to a protocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_39\n\nLANGUAGE: sil\nCODE:\n```\nsil-witness-entry ::= 'base_protocol' identifier ':' protocol-conformance\nsil-witness-entry ::= 'method' sil-decl-ref ':' sil-function-name\nsil-witness-entry ::= 'associated_type' identifier\nsil-witness-entry ::= 'associated_conformance'\n                      '(' identifier ':' identifier ')' ':' protocol-conformance\n```\n\n----------------------------------------\n\nTITLE: Defining Objective-C Bridging in Swift Mangling\nDESCRIPTION: Specifies the mangling rules for bridged Objective-C method calls. This includes patterns for parameters and return values that need bridging between Swift and Objective-C.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_23\n\nLANGUAGE: text\nCODE:\n```\nbridge-spec ::= bridged-kind bridged-param* bridged-return '_'\n\n  bridged-param ::= 'n' // not bridged parameter\n  bridged-param ::= 'b' // bridged parameter\n\n  bridged-return ::= 'n' // not bridged return\n  bridged-return ::= 'b' // bridged return\n\n  bridged-kind ::= 'm' // bridged method\n  bridged-kind ::= 'a' // bridged property (by address)\n  bridged-kind ::= 'p' // bridged property (by value)\n```\n\n----------------------------------------\n\nTITLE: Creating Strong References from Weak Values with strong_copy_weak_value in SIL\nDESCRIPTION: Creates a strong reference from a weak reference value. Only valid in opaque values mode and lowered by AddressLowering to load_weak. Returns Optional.some with incremented reference count if object exists, or Optional.none otherwise.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_61\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'strong_copy_weak_value' sil-operand\n\n%1 = strong_copy_weak_value %0 : $@sil_weak Optional<T>\n// %1 will be a strong @owned value of type $Optional<T>.\n// $T must be a reference type\n// $@sil_weak Optional<T> must be address-only\n```\n\n----------------------------------------\n\nTITLE: Swift Basic Name Mangling Patterns\nDESCRIPTION: Core patterns for mangled names in Swift, showing different prefixes used across Swift versions and embedded Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nmangled-name ::= '$s' global  // Swift stable mangling\nmangled-name ::= '@__swiftmacro_' global // Swift mangling for filenames\nmangled-name ::= '_T0' global // Swift 4.0\nmangled-name ::= '$S' global  // Swift 4.2\nmangled-name ::= '$e' global  // Embedded Swift (unstable)\n```\n\n----------------------------------------\n\nTITLE: Defining is_unique Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for is_unique instruction which checks whether an address points to a uniquely referenced memory object, returning 1 if the reference count is 1 and 0 otherwise.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_74\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'is_unique' sil-operand\n\n%1 = is_unique %0 : $*T\n// $T must be a reference-counted type\n// %1 will be of type Builtin.Int1\n```\n\n----------------------------------------\n\nTITLE: Applying Stack Protection for Functions in SIL (BNF)\nDESCRIPTION: Specifies the '[stack_protection]' attribute for detecting stack-related buffer overflows using compiler-injected guard code. Should be used with functions manipulating critical stack data. Ensures run-time detection of unsafe stack writes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_9\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[stack_protection]'\n```\n\n----------------------------------------\n\nTITLE: Implementing Non-resilient Fixed-layout Swift String in C++\nDESCRIPTION: C++ class representation for a non-resilient fixed-layout Swift value type like String. The value is stored in an opaque inline buffer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nclass swift::String {\n  ...\n  alignas(8) char buffer[24]; // Swift value is stored here.\n}\n```\n\n----------------------------------------\n\nTITLE: SourceKit Variable Type Collection Command\nDESCRIPTION: Command line instruction for testing variable type collection using sourcekitd-test utility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\n$ sourcekitd-test -req=collect-var-type /path/to/file.swift -- /path/to/file.swift\n```\n\n----------------------------------------\n\nTITLE: Understanding Raw Identifiers in Swift\nDESCRIPTION: Examples of mangled symbols for functions with special characters or reserved words as identifiers, which Swift allows through backtick escaping.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_27\n\nLANGUAGE: Swift\nCODE:\n```\n_$s15raw_identifiers0020foospace_liaADEDGcjayyF ---> raw_identifiers.`foo space`() -> ()\n_$s15raw_identifiers0018_3times_pgaIGJCFbhayyF ---> raw_identifiers.`3 times`() -> ()\n_$s15raw_identifiers0019test_yeaIIBCEapkagayyF ---> raw_identifiers.`test +`() -> ()\n_$s15raw_identifiers0020pathfoo_yuEHaaCiJskayyF ---> raw_identifiers.`path://foo`() -> ()\n_$s15raw_identifiers10FontWeightO009_100_FpEpdyyFZ ---> static raw_identifiers.FontWeight.`100`() -> ()\n```\n\n----------------------------------------\n\nTITLE: Structuring Skipped Message for Unnecessary Compilation Tasks\nDESCRIPTION: Illustrates the format of a 'skipped' message, used when the driver determines a command doesn't need to run. It's similar to a 'began' message but without the 'pid' key.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DriverParseableOutput.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\\n \"kind\": \"skipped\",\\n \"name\": \"compile\",\\n \"inputs\": [\"/src/foo.swift\"],\\n \"outputs\": [\\n    {\\n      \"type\": \"object\",\\n      \"path\": \"/build/foo.o\"\\n    },\\n    {\\n      \"type\": \"swiftmodule\",\\n      \"path\": \"/build/foo.swiftmodule\"\\n    },\\n    {\\n      \"type\": \"diagnostics\",\\n      \"path\": \"/build/foo.dia\"\\n    },\\n ],\\n \"command_executable\": \"swift\",\\n \"command_arguments\": [\"-frontend\", \"-c\", \"-primary-file\", \"/src/foo.swift\", \"/src/bar.swift\", \"-emit-module-path\", \"/build/foo.swiftmodule\", \"-emit-diagnostics-path\", \"/build/foo.dia\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Using @_semantics Attribute for Optimizer Recognition in Swift\nDESCRIPTION: This Swift code snippet illustrates the use of the `@_semantics` attribute. It marks the `getCount` function (likely part of Swift's Array implementation) with the semantic tag \"array.count\". This attribute allows the Swift optimizer to identify specific standard library functions and apply targeted optimizations, even before inlining, preserving high-level semantic information crucial for optimizations like bounds check elimination or copy-on-write optimization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerDesign.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n  @public @_semantics(\"array.count\")\n  func getCount() -> Int {\n    return _buffer.count\n   }\n```\n\n----------------------------------------\n\nTITLE: Metadata Documentation Markdown Block\nDESCRIPTION: Documentation block explaining principles of metadata allocation and initialization in Swift runtime, including handling of recursive dependencies, state management, and initialization phases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeMetadata.rst#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nMetadata Allocation and Initialization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to support recursive dependencies between type metadata,\nthe creation of type metadata is divided into two phases:\n\n- allocation, which creates an abstract metadata, and\n- initialization, which advances the metadata through the progression\n  of states.\n\nAllocation cannot fail.  It should return relatively quickly and\nshould not make any metadata requests.\n\nThe initialization phase will be repeatedly executed until it reaches\ncompletion.  It is only executed by one thread at a time.\nCompiler-emitted initialization functions are given a certain amount\nof scratch space that is passed to all executions; this can be used\nto skip expensive or unrepeatable steps in later re-executions.\n```\n\n----------------------------------------\n\nTITLE: Raw Value Enums in Swift\nDESCRIPTION: Examples of enums with explicit raw values in Swift. Shows auto-incrementing integer values and explicitly defined values for various types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nenum Color : Int {\n  case Black   // = 0\n  case Cyan    // = 1\n  case Magenta // = 2\n  case White   // = 3\n}\n\nenum Signal : Int32 {\n  case SIGKILL = 9, SIGSEGV = 11\n}\n\nenum NSChangeDictionaryKey : String {\n  // All raw values are required because String is not\n  // ExpressibleByIntegerLiteral\n  case NSKeyValueChangeKindKey = \"NSKeyValueChangeKindKey\"\n  case NSKeyValueChangeNewKey = \"NSKeyValueChangeNewKey\"\n  case NSKeyValueChangeOldKey = \"NSKeyValueChangeOldKey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resilient Enum in Swift\nDESCRIPTION: Shows how to define a resilient enumeration in Swift, which can handle unknown cases in future versions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nenum DateFormatStyle {\n  case medium\n  case full\n}\n```\n\n----------------------------------------\n\nTITLE: Array Element Projection and Copy Pattern\nDESCRIPTION: Shows the pattern of projecting array elements, retaining buffers, and handling copies with potential memory implications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Project the array element.\nlet address = array.subscript.mutableAddress(0)\n\n// Remember the new buffer value and keep it retained.\nlet newArrayBuffer = array.buffer\nretain(newArrayBuffer)\n\n// Copy the value. Note that arrayCopy uses the same buffer that\n// 'address' points into.\nlet arrayCopy = array\nretain(arrayCopy.buffer)\n\n// Perform the mutation.\noperate(address, 0)\n\n// Release the \"new\" buffer.\nrelease(newArrayBuffer)\n```\n\n----------------------------------------\n\nTITLE: Merging Isolation Regions in Ownership SSA in Swift SIL - swift\nDESCRIPTION: The 'merge_isolation_region' instruction signals that all operand regions must be considered the same, typically to track dependencies across Sendable and non-Sendable values in unsafe code scenarios. It is applicable only in Ownership SSA, aiding region isolation logic by linking artificial region dependencies that cannot be inferred by default. This is especially important in bridging between Objective-C block-based APIs and Swift async functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction :: 'merge_isolation_region' (sil-operand ',')+ sil-operand\\n\\n%2 = merge_isolation_region %first : $*T, %second : $U\\n%2 = merge_isolation_region %first : $*T, %second : $U, %third : $H\n```\n\n----------------------------------------\n\nTITLE: Defining destroy_not_escaped_closure Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for destroy_not_escaped_closure which checks if a closure context has escaped by verifying its reference count is exactly 1, then destroys the context and returns the escape status.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_77\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'destroy_not_escaped_closure' sil-operand\n\n%1 = destroy_not_escaped_closure %0 : $@callee_guaranteed () -> ()\n// %0 must be an escaping swift closure.\n// %1 will be of type Builtin.Int1\n```\n\n----------------------------------------\n\nTITLE: Defining FooClassDerived Class in Swift\nDESCRIPTION: Declares a derived class that inherits from FooClassBase and implements FooProtocolDerived, including properties, methods, and protocol implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  FooClassDerived.  Bbb.\nclass FooClassDerived : FooClassBase, FooProtocolDerived {\n  var fooProperty1: Int32\n  var fooProperty2: Int32\n  var fooProperty3: Int32 { get }\n  func fooInstanceFunc0()\n  func fooInstanceFunc1(_ a: Int32)\n  func fooInstanceFunc2(_ a: Int32, withB b: Int32)\n  func fooBaseInstanceFuncOverridden()\n  class func fooClassFunc0()\n  init!()\n  convenience init!(float f: Float)\n\n  /// Aaa.  fooProtoFunc.  Bbb.\n  /// Ccc.\n  func fooProtoFunc()\n\n  /// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.\n  /// Ccc.\n  func fooProtoFuncWithExtraIndentation1()\n\n  /**\n   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.\n   * Ccc.\n   */\n  func fooProtoFuncWithExtraIndentation2()\n  class func fooProtoClassFunc()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Mangling Rules in Swift\nDESCRIPTION: This snippet outlines the mangling rules for various types in Swift, including associated types, generic types, existential types, tuples, and opaque types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_33\n\nLANGUAGE: Swift\nCODE:\n```\ntype ::= associated-type\ntype ::= any-generic-type\ntype ::= existential-layout                         // existential type\ntype ::= existential-layout requirement '_' requirement* 'XP'   // constrained existential type\ntype ::= type-list 't'                     // tuple\ntype ::= type generic-signature 'u'        // generic type\ntype ::= 'x'                               // generic param, depth=0, idx=0\ntype ::= 'q' GENERIC-PARAM-INDEX           // dependent generic parameter\ntype ::= type assoc-type-name 'qa'         // associated type of non-generic param\ntype ::= assoc-type-name 'Qy' GENERIC-PARAM-INDEX  // associated type\ntype ::= assoc-type-name 'Qz'                      // shortcut for 'Qyz'\ntype ::= assoc-type-list 'QY' GENERIC-PARAM-INDEX  // associated type at depth\ntype ::= assoc-type-list 'QZ'                      // shortcut for 'QYz'\ntype ::= opaque-type-decl-name bound-generic-args 'Qo' INDEX // opaque type\n\ntype ::= pack-type 'Qe' INDEX              // pack element type\n\ntype ::= pattern-type count-type 'Qp'      // pack expansion type\ntype ::= pack-element-list 'QP'            // pack type\ntype ::= pack-element-list 'QS' DIRECTNESS // SIL pack type\n\npack-element-list ::= type '_' type*\npack-element-list ::= empty-list\n\n#if SWIFT_RUNTIME_VERSION >= 5.2\n  type ::= type assoc-type-name 'Qx' // associated type relative to base `type`\n  type ::= type assoc-type-list 'QX' // associated type relative to base `type`\n#endif\n\n#if SWIFT_RUNTIME_VERSION >= 5.7\n  type ::= symbolic-extended-existential-type-shape type* retroactive-conformance* 'Xj'\n#endif\n\nprotocol-list ::= protocol '_' protocol*\nprotocol-list ::= empty-list\n\nassoc-type-list ::= assoc-type-name '_' assoc-type-name*\n\nassociated-type ::= substitution\nassociated-type ::= type identifier 'Qa' // associated type\n\nassoc-type-name ::= identifier                // associated type name without protocol\nassoc-type-name ::= identifier protocol 'P'   //\n\nempty-list ::= 'y'\n```\n\n----------------------------------------\n\nTITLE: Non-Differentiable Type Conversion Error\nDESCRIPTION: Shows compiler error when attempting to differentiate through non-differentiable type conversions between Double and Int.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_58\n\nLANGUAGE: swift\nCODE:\n```\nlet d = derivative(at: 1.0) { x in\n    Double(Int(x)) + 2\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint on Function Name (LLDB)\nDESCRIPTION: Sets a simple LLDB breakpoint that triggers whenever the function `GlobalARCOpts::run` is entered.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_15\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br set -n GlobalARCOpts::run\n```\n\n----------------------------------------\n\nTITLE: Implementing Protocol-Based Benchmark in Swift\nDESCRIPTION: Example of a protocol-based benchmark that stresses different protocol implementations. This pattern is useful when comparing different implementations of the same protocol or interface.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/1.txt#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport TestsUtils\n\nprotocol P {\n  func doIt() -> Int\n}\n\nstruct DirectImpl: P {\n  func doIt() -> Int { return 42 }\n}\n\nclass ClassImpl: P {\n  func doIt() -> Int { return 42 }\n}\n\npublic let benchmarks = [\n  BenchmarkInfo(name: \"ProtocolDirectCall\", runFunction: run_ProtocolDirectCall),\n  BenchmarkInfo(name: \"ProtocolClassCall\", runFunction: run_ProtocolClassCall),\n]\n\n@inline(never)\npublic func run_ProtocolDirectCall(_ N: Int) {\n  let p: P = DirectImpl()\n  var sum = 0\n  for _ in 1...N {\n    for _ in 1...1000 {\n      sum += p.doIt()\n    }\n  }\n  blackHole(sum)\n}\n\n@inline(never)\npublic func run_ProtocolClassCall(_ N: Int) {\n  let p: P = ClassImpl()\n  var sum = 0\n  for _ in 1...N {\n    for _ in 1...1000 {\n      sum += p.doIt()\n    }\n  }\n  blackHole(sum)\n}\n```\n\n----------------------------------------\n\nTITLE: Re-exporting Module Declarations with @_exported in Swift\nDESCRIPTION: This example demonstrates the `@_exported` attribute in Swift. Module `N` imports module `M` using `@_exported import M`. This makes all public declarations from `M` (like `f()`) available as if they were declared directly in `N`. Consequently, module `P`, which imports `N`, can access `f()` via `N.f()`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n```swift\n// module M\npublic func f() {}\n\n// module N\n@_exported import M\n\n// module P\nimport N\nfunc g() {\n  N.f() // OK\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Function Signature Mangling in Swift\nDESCRIPTION: This snippet outlines the mangling rules for function signatures in Swift, including result types, parameter types, and various function attributes like async, sendable, and throws.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_31\n\nLANGUAGE: Swift\nCODE:\n```\nfunction-signature ::= result-type params-type async? sendable? throws? differentiable? function-isolation? sending-result? // results and parameters\n\nresult-type ::= type\nresult-type ::= empty-list                 // shortcut for ()\n\nparams-type ::= type 'z'? 'h'?             // tuple in case of multiple parameters or a single parameter with a single tuple type\n                                           // with optional inout convention, shared convention. parameters don't have labels,\n                                           // they are mangled separately as part of the entity.\nparams-type ::= empty-list                 // shortcut for no parameters\n\n#if SWIFT_RUNTIME_VERSION >= 5.5\n  async ::= 'Ya'                             // 'async' annotation on function types\n  sendable ::= 'Yb'                          // @Sendable on function types\n  function-isolation ::= type 'Yc'          // Global actor on function type\n#endif\nthrows ::= 'K'                             // 'throws' annotation on function types\n#if SWIFT_RUNTIME_VERSION >= 6.0\n  throws ::= type 'YK'                     // 'throws(type)' annotation on function types\n  function-isolation ::= type 'YA'         // @isolated(any) on function type\n  sending-result ::= 'YT'                  // -> sending T\n#endif\n#if SWIFT_RUNTIME_VERSION >= 6.2\n  function-isolation :== 'YC'              // nonisolated(nonsending) on function type\n#endif\ndifferentiable ::= 'Yjf'                   // @differentiable(_forward) on function type\ndifferentiable ::= 'Yjr'                   // @differentiable(reverse) on function type\ndifferentiable ::= 'Yjd'                   // @differentiable on function type\ndifferentiable ::= 'Yjl'                   // @differentiable(_linear) on function type\ntype-list ::= list-type '_' list-type*     // list of types\ntype-list ::= empty-list\n\n                                                // FIXME: Consider replacing 'h' with a two-char code\nlist-type ::= type identifier? 'Yk'? 'z'? 'h'? 'n'? 'Yi'? 'd'? 'Yt'?  // type with optional label, '@noDerivative', inout convention, shared convention, owned convention, actor 'isolated', variadic specifier, and compile-time constant\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in Swift Mangling\nDESCRIPTION: This snippet defines the grammar for indexes used in Swift mangling. It provides a way to encode numbers in contexts that can't end in a digit, optimized for smaller numbers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\nindex ::= '_'                              // 0\nindex ::= natural '_'                      // N+1\nnatural ::= [0-9]+\n```\n\n----------------------------------------\n\nTITLE: Code Completion Testing Example with sourcekitd-test\nDESCRIPTION: Shows how to test code completion functionality using the sourcekitd-test command-line tool, specifying the offset position in a file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n```\n$ sourcekitd-test -req=complete -offset=<offset> <file> [-- <compiler args>]\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Compiler Flags\nDESCRIPTION: Sets up compiler warning flags based on platform and compiler type, including special handling for MSVC, Cygwin, and OpenBSD.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_COMPILER_IS_MSVC_LIKE)\n  list(APPEND SWIFT_RUNTIME_CXX_FLAGS \"/W3\")\nelse()\n  list(APPEND SWIFT_RUNTIME_CXX_FLAGS \"-Wall\")\nendif()\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"CYGWIN\")\n  list(APPEND SWIFT_RUNTIME_CORE_CXX_FLAGS \"-mcmodel=large\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\")\n  list(APPEND SWIFT_RUNTIME_CORE_CXX_FLAGS \"-xc++\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Enum with Implicit Property Generation in Swift\nDESCRIPTION: Example enum declaration demonstrating how the proposal would automatically generate properties for associated values, including non-optional properties for values present in all cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\npublic enum Example {\n  case init(foo: Int, alwaysPresent: String)\n  case init(bar: Int, alwaysPresent: String)\n}\n```\n\n----------------------------------------\n\nTITLE: String Mapping and Decomposition\nDESCRIPTION: Methods for canonical and compatibility mapping operations on strings, including composition and decomposition.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_27\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSString *)decomposedStringWithCanonicalMapping;\n- (NSString *)precomposedStringWithCanonicalMapping;\n- (NSString *)decomposedStringWithCompatibilityMapping;\n- (NSString *)precomposedStringWithCompatibilityMapping;\n```\n\n----------------------------------------\n\nTITLE: Illustrating Closure Application (apply) in Lowered SIL\nDESCRIPTION: This SIL snippet shows the application of the closure using the `apply` instruction in Lowered SIL. It demonstrates how the applied arguments now include the pointer for the indirect result (`%indirectResult: *T`) at index #0 and the direct argument `i` at index #1.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILFunctionConventions.md#2025-04-23_snippet_6\n\nLANGUAGE: sil\nCODE:\n```\n```\n%directResult = apply %closure(#0: %indirectResult: *T, #1: i)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining FooStruct2 with Type Aliases in Swift\nDESCRIPTION: Declares a struct similar to FooStruct1 with two type aliases, demonstrating different approaches to type aliasing in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nstruct FooStruct2 {\n  var x: Int32\n  var y: Double\n  init()\n  init(x: Int32, y: Double)\n}\ntypealias FooStructTypedef1 = FooStruct2\nstruct FooStructTypedef2 {\n  var x: Int32\n  var y: Double\n  init()\n  init(x: Int32, y: Double)\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Type Metadata Demangling\nDESCRIPTION: Examples of mangled Swift type metadata and their demangled representations, including actors, task groups, and generic types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\n$sScA ---> Swift.Actor\n$sScGySiG ---> Swift.TaskGroup<Swift.Int>\n```\n\n----------------------------------------\n\nTITLE: Non-Sendable Type Capture Example\nDESCRIPTION: Demonstrates an error case when attempting to capture a non-Sendable type in a @Sendable closure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sendable-closure-captures.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass MyModel {\n  func log() { ... }\n}\n\nfunc capture(model: MyModel) async {\n  callConcurrently {\n    model.log()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Strong Release Operation in Swift Intermediate Language (SIL)\nDESCRIPTION: The strong_release instruction decrements the strong reference count of a heap object. If the count reaches zero, the object is destroyed. This instruction is not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_53\n\nLANGUAGE: sil\nCODE:\n```\nstrong_release %0 : $T\n// $T must be a reference type.\n```\n\n----------------------------------------\n\nTITLE: Importing Modules with Different Techniques in Swift\nDESCRIPTION: Demonstrates two different approaches to importing modules: a regular import of an explicit module and an @_exported import of a submodule which re-exports the imported declarations to clients of the current module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/FooHelper.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport FooHelper.FooHelperExplicit\n@_exported import FooHelper.FooHelperSub\n```\n\n----------------------------------------\n\nTITLE: Objective-C Super Method SIL Instruction\nDESCRIPTION: Performs an Objective-C message send using objc_msgSuper() for superclass method calls.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_94\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'super_method' sil-method-attributes?\n                      sil-operand ',' sil-decl-ref ':' sil-type\n\n%1 = super_method %0 : $T, #Super.method!foreign : $@convention(thin) U -> V\n// %0 must be of a non-root class type or class metatype $T\n// #Super.method!foreign must be a reference to an ObjC method of T's\n// superclass or of one of its ancestor classes\n// %1 will be of type $@convention(thin) U -> V\n```\n\n----------------------------------------\n\nTITLE: Using Readonly and Releasenone for Initializers in Swift\nDESCRIPTION: This snippet shows an initializer marked with both `@_effects(readonly)` and `@_effects(releasenone)`. This combination is necessary in specific cases where an initializer takes an owned argument (`c: C`) but does not effectively release it from the caller's perspective (e.g., by storing it). Explicitly adding `releasenone` confirms this intention, even though `readonly` normally implies it, preventing the optimizer from incorrectly removing the initializer call.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n    @_effects(readonly) @_effects(releasenone)\n    init(_ c: C) { self.c = c }\n```\n\n----------------------------------------\n\nTITLE: Swift Compiler Resource Directory Flag\nDESCRIPTION: Flag used to control compiler resource location, which contains Swift shims and other compiler-specific resources.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CrossCompilationModel.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-resource-dir\n```\n\n----------------------------------------\n\nTITLE: Basic Generic Function Example in Swift\nDESCRIPTION: Example showing how function purity optimization could work with generic types in Swift. Shows potential for loop optimization when function effects are known.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nfunc bar<T>(t: T) {...}\n\nfunc foo<T>(t: T, N: Int) {\n  for _ in 1...N {\n    bar(t)\n    bar(t)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending @usableFromInline Internal Types with @_specializeExtension in Swift\nDESCRIPTION: Demonstrates how to use @_specializeExtension to extend @usableFromInline internal types from foreign modules. This allows adding methods and specializations to types that would otherwise be inaccessible.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// Module A\n@usableFromInline\ninternal struct S<T> { /* ... */ }\n\n// Module B\nimport A\n\n@_specializeExtension\nextension S { // OK\n  // add methods here\n}\n\nextension S /* or A.S */ { // error: cannot find 'S' in scope\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring Structs in SIL\nDESCRIPTION: The destructure_struct instruction splits a struct into its constituent fields. It takes a struct operand and produces multiple results corresponding to the struct's fields.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_131\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'destructure_struct' sil-operand\n\n(%elt1, ..., %eltn) = destructure_struct %0 : $S\n// %0 must be a struct of type $S\n// %eltN must have the same type as the Nth field of $S\n```\n\n----------------------------------------\n\nTITLE: Illustrating Subclass Override Issue with Protocol Extension Defaults in Swift\nDESCRIPTION: Presents a scenario where a superclass `C` conforms to protocol `P` using a default implementation from an extension. A subclass `D` attempts to override the implementation (`foo`), which is currently problematic, potentially leading to static dispatch (`p.foo()` calls the extension method). The proposal suggests allowing `override` and enabling dynamic dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol P {\n  func foo()\n}\n\nextension P {\n  func foo() { print(\"P\") }\n}\n\nclass C : P {\n  // gets the protocol extension's\n}\n\nclass D : C {\n  /*override not allowed!*/ func foo() { print(\"D\") }\n}\n\nlet p: P = D()\np.foo() // gotcha: prints \"P\" rather than \"D\"!\n```\n\n----------------------------------------\n\nTITLE: Creating Static Objects in SIL\nDESCRIPTION: The object instruction constructs a statically initialized object. It can only appear as the final instruction in a global variable static initializer list. It supports tail-allocated elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_132\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'object' sil-type '(' (sil-operand (',' sil-operand)*)? ')'\n\nobject $T (%a : $A, %b : $B, ...)\n// $T must be a non-generic or bound generic reference type\n// The first operands must match the stored properties of T\n// Optionally there may be more elements, which are tail-allocated to T\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks with Configuration Options in Swift\nDESCRIPTION: Demonstrates running a benchmark with specific iteration count, sample time, and minimum samples. Tests the logging format for benchmark execution results including headers and performance metrics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O AngryPhonebook --num-iters=1 \\\nRUN:                             --sample-time=0.000001 --min-samples=7 \\\nRUN:              | %FileCheck %s --check-prefix NUMITERS1 \\\nRUN:                              --check-prefix LOGHEADER \\\nRUN:                              --check-prefix LOGBENCH\nLOGHEADER-LABEL: #,TEST,SAMPLES,MIN(μs),MAX(μs),MEAN(μs),SD(μs),MEDIAN(μs)\nLOGBENCH: {{[0-9]+}},\nNUMITERS1: AngryPhonebook,7\nNUMITERS1-NOT: 0,0,0,0,0\nLOGBENCH-SAME: ,{{[0-9]+}},{{[0-9]+}},{{[0-9]+}},{{[0-9]+}},{{[0-9]+}}\n```\n\n----------------------------------------\n\nTITLE: String Processing Examples in Swift\nDESCRIPTION: Examples of low-level string processing operations including prefix matching and parsing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nif let firstLetter = input.dropPrefix(alphabeticCharacter) {\n  somethingWith(input) // process the rest of input\n}\n\nif let (number, restOfInput) = input.parsingPrefix(Int.self) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Assertion Configuration in Swift Standard Library\nDESCRIPTION: Explains how the builtin 'assertion_configuration' works to support disabling assertions at compile time. This mechanism allows conditionally enabling/disabling code in SIL libraries based on compile-time settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_103\n\nLANGUAGE: swift\nCODE:\n```\nfunc assert(...) {\n  if Int32(Builtin.assert_configuration() == 0) {\n    _assertionFailure(message, ...)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding a Read-Write Property with a Computed Property in Swift\nDESCRIPTION: This code defines `ColorBase` with a read-write property `color` (potentially stored or computed) that has a `didSet` observer. The subclass `BrightlyColored` overrides `color` with its own computed property. The subclass's setter accesses the superclass's implementation via `super.color` and conditionally assigns to it, thereby controlling whether the superclass's `didSet` observer is triggered.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nclass ColorBase {\n  var color : Color {\n    didSet {\n      print(\"I've been painted \\(color)!\")\n    }\n  }\n}\n\nclass BrightlyColored : ColorBase {\n  var color : Color {\n    get {\n      return super.color\n    }\n    set(newColor) {\n      // Prefer whichever color is brighter.\n      if newColor.luminance > super.color.luminance {\n        super.color = newColor\n      } else {\n        // Keep the old color.\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Expanded Memory Unsafe Operation with Addressors in Swift\nDESCRIPTION: This shows the expanded sequence of operations that occur with the previous code, demonstrating how the address becomes invalid when the array is reassigned, resulting in a dangling pointer passed to the operate function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nvar array: [Int] = [1,2,3,4]\nlet address = array.subscript.mutableAddress(0)\narray = []\noperate(address, 0)\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Definitions in Swift\nDESCRIPTION: This snippet illustrates how Swift handles duplicate function definitions for both tuple-style and selector-style declarations. It shows which declarations are considered duplicates and which are allowed to coexist.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/KeywordArguments.rst#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// Error: Duplicate definition of foo(Int, Int) -> ()\nfunc foo(_ a: Int, b: Int) {}\nfunc foo(_ x: Int, y: Int) {}\n\n// OK, no duplicates\nfunc foo(_ x: Int) bar(y: Int) bas(z: Int)\nfunc foo(_ x: Int) bar(y: Int) zim(z: Int)\nfunc foo(_ x: Int) bas(y: Int) bar(z: Int)\nfunc foo(_ x: Int) bar(y: Int) bas(z: Float)\n\n// OK, not duplicates\nfunc foo(_ x: Int, bar: Int)\nfunc foo(_ x: Int) bar(x: Int)\n```\n\n----------------------------------------\n\nTITLE: Explicit Differentiable Function Conversion - Swift\nDESCRIPTION: Example showing explicit conversion from a normal function to a differentiable function type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet function: (Float) -> Float = { x in x }\n// Explicit conversion.\nlet diffFunction: @differentiable (Float) -> Float = function\n```\n\n----------------------------------------\n\nTITLE: Tuning Optimization Modes for SIL Functions in Swift (BNF)\nDESCRIPTION: Defines optimization attributes '[Onone]', '[Ospeed]', and '[Osize]', allowing override of the global optimization level for individual functions. Accepts only one attribute per function. Inputs: SIL function, desired optimization mode. Output: function is compiled with mode-specific optimizations, e.g., no-optimization, speed, or size.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_12\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[' sil-function-optimization ']'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-inlining ::= 'Onone'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-inlining ::= 'Ospeed'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-inlining ::= 'Osize'\n```\n\n----------------------------------------\n\nTITLE: Defining Identifiers in Swift Mangling\nDESCRIPTION: This snippet defines the grammar for identifiers in Swift mangling. It includes rules for regular identifiers and operators, specifying how they are encoded and what characters are allowed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\nidentifier ::= natural identifier-start-char identifier-char*\nidentifier ::= 'o' operator-fixity natural operator-char+\n\noperator-fixity ::= 'p'                    // prefix operator\noperator-fixity ::= 'P'                    // postfix operator\noperator-fixity ::= 'i'                    // infix operator\n\noperator-char ::= 'a'                      // & 'and'\noperator-char ::= 'c'                      // @ 'commercial at'\noperator-char ::= 'd'                      // / 'divide'\noperator-char ::= 'e'                      // = 'equals'\noperator-char ::= 'g'                      // > 'greater'\noperator-char ::= 'l'                      // < 'less'\noperator-char ::= 'm'                      // * 'multiply'\noperator-char ::= 'n'                      // ! 'not'\noperator-char ::= 'o'                      // | 'or'\noperator-char ::= 'p'                      // + 'plus'\noperator-char ::= 'q'                      // ? 'question'\noperator-char ::= 'r'                      // % 'remainder'\noperator-char ::= 's'                      // - 'subtract'\noperator-char ::= 't'                      // ~ 'tilde'\noperator-char ::= 'x'                      // ^ 'xor'\noperator-char ::= 'z'                      // . 'zperiod'\n```\n\n----------------------------------------\n\nTITLE: Library Compilation Commands for Embedded Swift\nDESCRIPTION: Demonstrates the compilation commands for building libraries and client code in Embedded Swift, showing how to generate and use .swiftmodule files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Build the library, only as a .swiftmomodule. Notice that we never build the .o or .a for the library.\n$ swiftc -target <target> -enable-experimental-feature Embedded -wmo \\\n  a.swift b.swift -module-name MyLibrary -emit-module -emit-module-path ./MyLibrary.swiftmodule\n\n# Build the client, \"-I .\" add the current directory to the module search path list\n$ swiftc -target <target> -enable-experimental-feature Embedded -wmo \\\n  client.swift -I . -c -o client.o\n```\n\n----------------------------------------\n\nTITLE: Generic Signature Representation in Swift\nDESCRIPTION: The generic signature representation for the example function, showing the generic parameters and their constraints in Swift's internal format.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n<C1, C2 where C1: Collection, C2: Collection, C1.Element: Equatable,\nC1.Element == C2.Element>\n```\n\n----------------------------------------\n\nTITLE: Setting CLANG_COMPILER_VERSION Cache Variable in CMake\nDESCRIPTION: Defines a CMake cache variable `CLANG_COMPILER_VERSION` of type STRING. This variable stores the internal version of the Clang compiler being used or targeted. It defaults to an empty string.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nset(CLANG_COMPILER_VERSION \"\" CACHE STRING\n    \"The internal version of the Clang compiler\")\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Runtime Memory Allocation Entry Points (Symbols)\nDESCRIPTION: Provides a list of internal Swift runtime functions related to memory management. These include entry points for allocating and deallocating heap objects (`_swift_allocObject`, `_swift_deallocObject`), reference-counted boxes (`_swift_allocBox`, `_swift_deallocBox`), buffers (`_swift_bufferAllocate`), initializing stack objects (`_swift_initStackObject`), and slow paths for allocation/deallocation (`_swift_slowAlloc`, `_swift_slowDealloc`). These are considered internal implementation details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_1\n\nLANGUAGE: Symbols\nCODE:\n```\n000000000001cb30 T _swift_allocBox\n000000000001cb30 T _swift_allocEmptyBox\n000000000001c990 T _swift_allocObject\n000000000001ca60 T _swift_bufferAllocate\n000000000001ca90 T _swift_bufferHeaderSize\n000000000001cd30 T _swift_deallocBox\n000000000001d490 T _swift_deallocClassInstance\n000000000001cd60 T _swift_deallocObject\n000000000001cd60 T _swift_deallocUninitializedObject\n000000000001d4c0 T _swift_deallocPartialClassInstance\n000000000001d400 T _swift_rootObjCDealloc\n000000000001c960 T _swift_slowAlloc\n000000000001c980 T _swift_slowDealloc\n000000000001ce10 T _swift_projectBox\n000000000001ca00 T _swift_initStackObject\n```\n\n----------------------------------------\n\nTITLE: Implementation of Async Function with Continuation in Swift\nDESCRIPTION: Example Swift code demonstrating the use of withUnsafeContinuation to create a suspend point in an async function. This function waits for a callback to complete and returns the result.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc waitForCallback() async -> Int {\n  return await withUnsafeContinuation { cc in\n    registerCallback { cc.resume($0) }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: End Initialization of Let Reference in Swift Intermediate Language (SIL)\nDESCRIPTION: The end_init_let_ref instruction marks the point where all let-fields of a class are initialized. It returns a new SSA value for the reference to ensure correct handling of let-field immutability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_55\n\nLANGUAGE: sil\nCODE:\n```\n%1 = end_init_let_ref %0 : $T\n// $T must be a reference type.\n```\n\n----------------------------------------\n\nTITLE: Differentiable Perceptron Implementation\nDESCRIPTION: Shows implementation of a perceptron neural network model with differentiable parameters and training loop using gradient descent.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct Perceptron: @memberwise Differentiable {\n    var weight: SIMD2<Float> = .random(of: -1..<1)\n    var bias: Float = 0\n\n    @differentiable\n    func callAsFunction(_ input: SIMD2<Float>) -> Float {\n        (weight * input).sum() + bias\n    }\n}\n\nvar model = Perceptron()\nlet andGateData: [(x: SIMD2<Float>, y: Float)] = [\n    (x: [0, 0], y: 0),\n    (x: [0, 1], y: 0),\n    (x: [1, 0], y: 0),\n    (x: [1, 1], y: 1),\n]\nfor _ in 0..<100 {\n    let (loss, 𝛁loss) = valueWithGradient(at: model) { model -> Float in\n        var loss: Float = 0\n        for (x, y) in andGateData {\n            let ŷ = model(x)\n            let error = y - ŷ\n            loss = loss + error * error / 2\n        }\n        return loss\n    }\n    print(loss)\n    model.weight -= 𝛁loss.weight * 0.02\n    model.bias -= 𝛁loss.bias * 0.02\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SWIFT_ENABLE_SWIFT_IN_SWIFT Option in CMake\nDESCRIPTION: Defines a CMake build option `SWIFT_ENABLE_SWIFT_IN_SWIFT`. This boolean option, defaulting to ON, enables the use of Swift source files within the Swift compiler project itself.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_ENABLE_SWIFT_IN_SWIFT \"Enable Swift sources in Swift compiler\" ON)\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for Swift-Pico SDK Integration\nDESCRIPTION: CMake file that sets up the build process for a Swift application using the Pico SDK. It includes SDK initialization, Swift compiler invocation, and linking of Swift code with Pico libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/IntegratingWithSDKs.md#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\ninclude($ENV{PICO_SDK_PATH}/external/pico_sdk_import.cmake)\n\nproject(swift-blinky)\npico_sdk_init()\nexecute_process(COMMAND xcrun -f swiftc OUTPUT_VARIABLE SWIFTC OUTPUT_STRIP_TRAILING_WHITESPACE)\n\nadd_executable(swift-blinky)\nadd_custom_command(\n    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/_swiftcode.o\n    COMMAND\n        ${SWIFTC}\n        -target armv6m-none-none-eabi -Xcc -mfloat-abi=soft -Xcc -fshort-enums\n        -Xfrontend -function-sections -enable-experimental-feature Embedded -wmo -parse-as-library\n        $$\\( echo '$<TARGET_PROPERTY:swift-blinky,INCLUDE_DIRECTORIES>' | tr '\\;' '\\\\n' | sed -e 's/\\\\(.*\\\\)/-Xcc -I\\\\1/g' \\)\n        $$\\( echo '${CMAKE_C_IMPLICIT_INCLUDE_DIRECTORIES}'             | tr ' '  '\\\\n' | sed -e 's/\\\\(.*\\\\)/-Xcc -I\\\\1/g' \\)\n        -import-bridging-header ${CMAKE_CURRENT_LIST_DIR}/BridgingHeader.h\n        ${CMAKE_CURRENT_LIST_DIR}/Main.swift\n        -c -o ${CMAKE_CURRENT_BINARY_DIR}/_swiftcode.o\n    DEPENDS\n        ${CMAKE_CURRENT_LIST_DIR}/BridgingHeader.h\n        ${CMAKE_CURRENT_LIST_DIR}/Main.swift\n)\nadd_custom_target(swift-blinky-swiftcode DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/_swiftcode.o)\n\ntarget_link_libraries(swift-blinky\n    pico_stdlib hardware_uart hardware_gpio\n    ${CMAKE_CURRENT_BINARY_DIR}/_swiftcode.o\n)\nadd_dependencies(swift-blinky swift-blinky-swiftcode)\npico_add_extra_outputs(swift-blinky)\n```\n\n----------------------------------------\n\nTITLE: Plaid Language Type State Declaration Example\nDESCRIPTION: An example from the Plaid language showing how typestates are defined with syntax similar to type definitions. Demonstrates a File type with OpenFile and ClosedFile states that each have different available methods and properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/TypeState.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaid\nCODE:\n```\nstate File {\n  val filename;\n}\n\nstate OpenFile case of File = {\n  val filePtr;\n  method read() { ... }\n  method close() { this <- ClosedFile; }\n}\n\nstate ClosedFile case of File {\n  method open() { this <- OpenFile; }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Method SIL Instruction\nDESCRIPTION: Looks up a method based on the dynamic type of a class or class metatype instance. Can be optimized through devirtualization if static type is known or method is final.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_91\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'class_method' sil-method-attributes?\n                      sil-operand ',' sil-decl-ref ':' sil-type\n\n%1 = class_method %0 : $T, #T.method : $@convention(class_method) U -> V\n// %0 must be of a class type or class metatype $T\n// #T.method must be a reference to a Swift native method of T or\n// of one of its superclasses\n// %1 will be of type $U -> V\n```\n\n----------------------------------------\n\nTITLE: Defining Differentiability Witness Mangling in Swift\nDESCRIPTION: Specifies the mangling pattern for differentiability witnesses, including generic signature, differentiability kind, and index subsets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= global generic-signature? 'WJ' DIFFERENTIABILITY-KIND INDEX-SUBSET 'p' INDEX-SUBSET 'r' // differentiability witness\n```\n\n----------------------------------------\n\nTITLE: Defining begin_cow_mutation Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for begin_cow_mutation which checks for unique references and returns both the uniqueness status and a reference that can be used to mutate the object safely for copy-on-write operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_75\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'begin_cow_mutation' '[native]'? sil-operand\n\n(%1, %2) = begin_cow_mutation %0 : $C\n// $C must be a reference-counted type\n// %1 will be of type Builtin.Int1\n// %2 will be of type C\n```\n\n----------------------------------------\n\nTITLE: Illustrating Potential Overlapping Conditional Conformances Issue in Swift\nDESCRIPTION: Shows a potential issue with conditional conformances where `SequenceAdaptor` might gain conformance to `Collection` through two different conditional extensions (one `where S: Collection`, another `where S: SomeOtherProtocolSimilarToCollection`). This ambiguity of multiple conformances to the same protocol needs careful handling or rejection by the compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nextension SequenceAdaptor : Collection where S: SomeOtherProtocolSimilarToCollection { } // trouble: two ways for SequenceAdaptor to conform to Collection\n```\n\n----------------------------------------\n\nTITLE: C++ Implementation\nDESCRIPTION: Implementation of the C++ function that will be called from Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/GettingStartedWithC++Interop.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"CxxTest.hpp\"\n\nint cxxFunction(int n) {\n    return n;\n}\n```\n\n----------------------------------------\n\nTITLE: SIL Attributes for @set_subobject Method in Swift\nDESCRIPTION: Demonstrates the low-level SIL attributes for a method marked with @set_subobject. These attributes specify the method's effects on self and non-self state, including release of objects.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@_effects(argonly, T.release)\n@selfeffects(preserve_unique, nocapture)\nfunc setElement(@nowrite e: T, index: Int) {\n}\n```\n\n----------------------------------------\n\nTITLE: Deallocating Partial Class Reference in SIL\nDESCRIPTION: Deallocates a partially-initialized class instance with specific rules for initialization state of properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_21\n\nLANGUAGE: sil\nCODE:\n```\ndealloc_partial_ref %0 : $T, %1 : $U.Type\n// $T must be a class type\n// $T must be a subclass of U\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAssembly-Specific Options for Swift Build in CMake\nDESCRIPTION: Sets an option to enable WASI threads support when building the Swift Standard Library for WebAssembly.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_42\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_ENABLE_WASI_THREADS\n  \"Build the Standard Library with WASI threads support\"\n  FALSE)\n```\n\n----------------------------------------\n\nTITLE: Implementing Result Type with Helper Methods in Swift\nDESCRIPTION: Example of boilerplate methods added to a Result enum to provide initializers and accessor properties for the Success and Error cases, showing the common pattern that motivates the proposal.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension Result {\n  init(success: Wrapped) {\n    self = .Success(success)\n  }\n  init(error: Error) {\n    self = .Error(error)\n  }\n\n  var success: Wrapped? {\n    switch self {\n    case .Success(let success): return success\n    case .Error: return nil\n    }\n  }\n  var error: Error? {\n    switch self {\n    case .Success: return nil\n    case .Error(let error): return error\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dangling Pointer Warnings with @_nonEphemeral in Swift\nDESCRIPTION: Shows how the @_nonEphemeral attribute is used to warn about potential dangling pointers when initializing UnsafePointer with temporary conversions. It also demonstrates cases where non-ephemeral pointers are allowed for static and global properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nfunc baz() {\n  var x = 0\n\n  // warning: Initialization of 'UnsafePointer<Int>' results in a dangling pointer\n  let ptr = UnsafePointer(&x)\n\n  // warning: Initialization of 'UnsafePointer<Int>' results in a dangling pointer\n  let ptr2 = UnsafePointer([1, 2, 3])\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nvar global = 0\n\nstruct S {\n  static var staticVar = 0\n}\n\nfunc baz() {\n  let ptr = UnsafePointer(&global) // okay\n  let ptr2 = UnsafePointer(&S.staticVar) // okay\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Reference Counted Types in C++\nDESCRIPTION: Demonstrates how to import a C++ class with custom reference counting as a reference type in Swift using the import_reference attribute along with retain and release attributes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserManual.md#2025-04-23_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#define SWIFT_CXX_REF_MYREFOBJECT   \\\n    __attribute__((swift_attr(\"import_reference\")))   \\\n    __attribute__((swift_attr(\"retain:incRef\")))   \\\n    __attribute__((swift_attr(\"release:decRef\")))\n\nclass SWIFT_CXX_REF_MYREFOBJECT MyReferenceObject {\nprivate:\n  int referenceCount; // the custom reference count.\n};\n\n/// Increment the reference count for the given object.\nvoid incRef(MyReferenceObject *object);\n\n/// Decrement the reference count for the given object. When it reaches zero,\n/// the object is deallocated.\nvoid decRef(MyReferenceObject *object);\n```\n\n----------------------------------------\n\nTITLE: Getting Async Continuation Address in Swift SIL - swift\nDESCRIPTION: Begins suspension of an '@async' Swift function, binding a specific uninitialized memory address to receive the resumed value. The operand must be an address of the appropriately lowered type and must remain allocated and unmodified until the related 'await_async_continuation'. Throws variants are supported, and any unauthorized access to the underlying memory before resumption is undefined behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'get_async_continuation_addr' '[throws]'? sil-type ',' sil-operand\\n\\n%1 = get_async_continuation_addr $T, %0 : $*T\\n%1 = get_async_continuation_addr [throws] $U, %0 : $*U\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Transformation for Range-Based Refactoring in C++\nDESCRIPTION: This code shows the implementation of the performChange method for the Extract Expression refactoring. It creates a new variable declaration and replaces the original expression with a reference to the new variable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nbool RefactoringActionExtractExprBase::performChange() {\n  llvm::SmallString<64> DeclBuffer;\n  llvm::raw_svector_ostream OS(DeclBuffer);\n  OS << tok::kw_let << \" \";\n  OS << PreferredName;\n  OS << TyBuffer.str() <<  \" = \" << RangeInfo.ContentRange.str() << \"\\n\";\n  Expr *E = RangeInfo.ContainedNodes[0].get<Expr*>();\n  EditConsumer.insert(SM, InsertLoc, DeclBuffer.str());\n  EditConsumer.insert(SM,\n                      Lexer::getCharSourceRangeFromSourceRange(SM, E->getSourceRange()),\n                      PreferredName)\n  return false; // Return true if code change aborted.\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Function Demonstrating Type Attribute Challenges with @unowned in Swift\nDESCRIPTION: This snippet demonstrates why making @unowned a type attribute would be problematic in Swift, particularly with generic functions. It shows how semantics would be inconsistent between generic and non-generic code if @unowned were treated as a type attribute.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo<T>(x : T) {\n  var y = x\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining copy_block Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for copy_block which performs a copy of an Objective-C block, potentially producing a different value if the block is copied from stack to heap.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_78\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction :: 'copy_block' sil-operand\n\n%1 = copy_block %0 : $@convention(block) T -> U\n```\n\n----------------------------------------\n\nTITLE: Implementing NSArray Bridging in Swift\nDESCRIPTION: Defines conversion functions and wrapper class for bridging between Swift Arrays and NSArray\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/BridgingContainerProtocolsToClassClusters.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass NSArrayOf<ArrayT: Array where ArrayT.Element : class> : NSArray {\n  /* ...implement NSArray methods... */\n}\n\nextension NSArray {\n  @conversion_to\n  func __conversion_to<\n    ArrayT: Array where ArrayT.Element : class\n  >(arr: ArrayT) -> NSArray {\n    return NSArrayOf<ArrayT>(arr)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning Swift Repository via HTTPS (sh)\nDESCRIPTION: Clones the main Swift repository from GitHub using HTTPS into a directory named `swift`, navigates into it, and then runs the `update-checkout` utility script with the `--clone` flag. This script clones all associated dependency repositories using HTTPS. This method is suitable for read-only access or users unfamiliar with setting up SSH keys.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/swiftlang/swift.git swift\ncd swift\nutils/update-checkout --clone\n```\n\n----------------------------------------\n\nTITLE: Objective-C Protocol Metatype Self-Conformance in Swift\nDESCRIPTION: This snippet shows how Objective-C protocol metatypes now fully self-conform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nlet a = NSObjectProtocol.self\nprint(a is NSObjectProtocol.Type)\n```\n\n----------------------------------------\n\nTITLE: Primary Associated Type Protocol Solution in Swift\nDESCRIPTION: Demonstrates using primary associated types in protocols to enable type-safe dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nprotocol MyProtocol<T>: AnyObject {\n    associatedtype T\n    func write(t: T)\n}\n\nfunc usingProtocolAsExistential(p: any MyProtocol<Int>) {\n    p.write(t: 42) // ✅\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Method Overloading Solution in Swift\nDESCRIPTION: Shows how to use method overloading in protocols instead of generic methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nprotocol MyProtocol: AnyObject {\n    func write(t: Int)\n    func write(t: Double)\n}\n\nfunc usingProtocolAsExistential(p: any MyProtocol) {\n    p.write(t: 42) // ✅\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregate Time per Optimization Pass in Swift Counters DB\nDESCRIPTION: This SQL query calculates the total duration spent by each distinct optimization transformation (pass). It achieves this by summing the `Duration` column for rows representing module-level instruction counters (`C.counter = 'inst'`, `C.kind = 'module'`) stored in the `Counters` table, grouped by the transformation name (`C.Transform`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect C.Transform, sum(C.Duration)\nfrom Counters C\nwhere C.counter = 'inst' and C.kind = 'module'\ngroup by C.Transform;\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Type Mangling Rules\nDESCRIPTION: Specifies the mangling rules for various Swift types, including generic types, standard substitutions, and special function types. This snippet defines the grammar for type mangling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\nany-generic-type ::= substitution\nany-generic-type ::= context decl-name 'C'     // nominal class type\nany-generic-type ::= context decl-name 'O'     // nominal enum type\nany-generic-type ::= context decl-name 'V'     // nominal struct type\nany-generic-type ::= context decl-name 'XY'    // unknown nominal type\nany-generic-type ::= protocol 'P'              // nominal protocol type\n\nany-generic-type ::= standard-substitutions\n\nstandard-substitutions ::= 'S' KNOWN-TYPE-KIND       // known nominal type substitution\nstandard-substitutions ::= 'S' NATURAL KNOWN-TYPE-KIND    // repeated known type substitutions of the same kind\n\nKNOWN-TYPE-KIND ::= 'A'                    // Swift.AutoreleasingUnsafeMutablePointer\nKNOWN-TYPE-KIND ::= 'a'                    // Swift.Array\nKNOWN-TYPE-KIND ::= 'B'                    // Swift.BinaryFloatingPoint\nKNOWN-TYPE-KIND ::= 'b'                    // Swift.Bool\nKNOWN-TYPE-KIND ::= 'c' KNOWN-TYPE-KIND-2  // Second set of standard types\nKNOWN-TYPE-KIND ::= 'D'                    // Swift.Dictionary\nKNOWN-TYPE-KIND ::= 'd'                    // Swift.Float64\nKNOWN-TYPE-KIND ::= 'E'                    // Swift.Encodable\nKNOWN-TYPE-KIND ::= 'e'                    // Swift.Decodable\nKNOWN-TYPE-KIND ::= 'F'                    // Swift.FloatingPoint\nKNOWN-TYPE-KIND ::= 'f'                    // Swift.Float32\nKNOWN-TYPE-KIND ::= 'G'                    // Swift.RandomNumberGenerator\nKNOWN-TYPE-KIND ::= 'H'                    // Swift.Hashable\nKNOWN-TYPE-KIND ::= 'h'                    // Swift.Set\nKNOWN-TYPE-KIND ::= 'I'                    // Swift.DefaultIndices\nKNOWN-TYPE-KIND ::= 'i'                    // Swift.Int\nKNOWN-TYPE-KIND ::= 'J'                    // Swift.Character\nKNOWN-TYPE-KIND ::= 'j'                    // Swift.Numeric\nKNOWN-TYPE-KIND ::= 'K'                    // Swift.BidirectionalCollection\nKNOWN-TYPE-KIND ::= 'k'                    // Swift.RandomAccessCollection\nKNOWN-TYPE-KIND ::= 'L'                    // Swift.Comparable\nKNOWN-TYPE-KIND ::= 'l'                    // Swift.Collection\nKNOWN-TYPE-KIND ::= 'M'                    // Swift.MutableCollection\nKNOWN-TYPE-KIND ::= 'm'                    // Swift.RangeReplaceableCollection\nKNOWN-TYPE-KIND ::= 'N'                    // Swift.ClosedRange\nKNOWN-TYPE-KIND ::= 'n'                    // Swift.Range\nKNOWN-TYPE-KIND ::= 'O'                    // Swift.ObjectIdentifier\nKNOWN-TYPE-KIND ::= 'P'                    // Swift.UnsafePointer\nKNOWN-TYPE-KIND ::= 'p'                    // Swift.UnsafeMutablePointer\nKNOWN-TYPE-KIND ::= 'Q'                    // Swift.Equatable\nKNOWN-TYPE-KIND ::= 'q'                    // Swift.Optional\nKNOWN-TYPE-KIND ::= 'R'                    // Swift.UnsafeBufferPointer\nKNOWN-TYPE-KIND ::= 'r'                    // Swift.UnsafeMutableBufferPointer\nKNOWN-TYPE-KIND ::= 'S'                    // Swift.String\nKNOWN-TYPE-KIND ::= 's'                    // Swift.Substring\nKNOWN-TYPE-KIND ::= 'T'                    // Swift.Sequence\nKNOWN-TYPE-KIND ::= 't'                    // Swift.IteratorProtocol\nKNOWN-TYPE-KIND ::= 'U'                    // Swift.UnsignedInteger\nKNOWN-TYPE-KIND ::= 'u'                    // Swift.UInt\nKNOWN-TYPE-KIND ::= 'V'                    // Swift.UnsafeRawPointer\nKNOWN-TYPE-KIND ::= 'v'                    // Swift.UnsafeMutableRawPointer\nKNOWN-TYPE-KIND ::= 'W'                    // Swift.UnsafeRawBufferPointer\nKNOWN-TYPE-KIND ::= 'w'                    // Swift.UnsafeMutableRawBufferPointer\nKNOWN-TYPE-KIND ::= 'X'                    // Swift.RangeExpression\nKNOWN-TYPE-KIND ::= 'x'                    // Swift.Strideable\nKNOWN-TYPE-KIND ::= 'Y'                    // Swift.RawRepresentable\nKNOWN-TYPE-KIND ::= 'y'                    // Swift.StringProtocol\nKNOWN-TYPE-KIND ::= 'Z'                    // Swift.SignedInteger\nKNOWN-TYPE-KIND ::= 'z'                    // Swift.BinaryInteger\n\nKNOWN-TYPE-KIND-2 ::= 'A'        // Swift.Actor\nKNOWN-TYPE-KIND-2 ::= 'C'        // Swift.CheckedContinuation\nKNOWN-TYPE-KIND-2 ::= 'c'        // Swift.UnsafeContinuation\nKNOWN-TYPE-KIND-2 ::= 'E'        // Swift.CancellationError\nKNOWN-TYPE-KIND-2 ::= 'e'        // Swift.UnownedSerialExecutor\nKNOWN-TYPE-KIND-2 ::= 'F'        // Swift.Executor\nKNOWN-TYPE-KIND-2 ::= 'f'        // Swift.SerialExecutor\nKNOWN-TYPE-KIND-2 ::= 'G'        // Swift.TaskGroup\nKNOWN-TYPE-KIND-2 ::= 'g'        // Swift.ThrowingTaskGroup\nKNOWN-TYPE-KIND-2 ::= 'I'        // Swift.AsyncIteratorProtocol\nKNOWN-TYPE-KIND-2 ::= 'i'        // Swift.AsyncSequence\nKNOWN-TYPE-KIND-2 ::= 'J'        // Swift.UnownedJob\nKNOWN-TYPE-KIND-2 ::= 'M'        // Swift.MainActor\nKNOWN-TYPE-KIND-2 ::= 'P'        // Swift.TaskPriority\nKNOWN-TYPE-KIND-2 ::= 'S'        // Swift.AsyncStream\nKNOWN-TYPE-KIND-2 ::= 's'        // Swift.AsyncThrowingStream\nKNOWN-TYPE-KIND-2 ::= 'T'        // Swift.Task\nKNOWN-TYPE-KIND-2 ::= 't'        // Swift.UnsafeCurrentTask\n\nprotocol ::= context decl-name\nprotocol ::= standard-substitutions\n\ntype ::= 'Bb'                              // Builtin.BridgeObject\ntype ::= 'BB'                              // Builtin.UnsafeValueBuffer\n#if SWIFT_RUNTIME_VERSION >= 5.5\n  type ::= 'Bc'                              // Builtin.RawUnsafeContinuation\n  type ::= 'BD'                              // Builtin.DefaultActorStorage\n  type ::= 'Be'                              // Builtin.Executor\n#endif\n#if SWIFT_RUNTIME_VERSION >= 5.9\n  type ::= 'Bd'                              // Builtin.NonDefaultDistributedActorStorage\n#endif\ntype ::= 'Bf' NATURAL '_'                  // Builtin.Float<n>\ntype ::= 'Bi' NATURAL '_'                  // Builtin.Int<n>\ntype ::= 'BI'                              // Builtin.IntLiteral\n#if SWIFT_RUNTIME_VERSION >= 5.5\n  type ::= 'Bj'                              // Builtin.Job\n#endif\ntype ::= 'BP'                              // Builtin.PackIndex\ntype ::= 'BO'                              // Builtin.UnknownObject (no longer a distinct type, but still used for AnyObject)\ntype ::= 'Bo'                              // Builtin.NativeObject\ntype ::= 'Bp'                              // Builtin.RawPointer\ntype ::= 'Bt'                              // Builtin.SILToken\ntype ::= type 'Bv' NATURAL '_'             // Builtin.Vec<n>x<type>\ntype ::= type type 'BV'                    // Builtin.FixedArray<N, T>\ntype ::= 'Bw'                              // Builtin.Word\ntype ::= function-signature 'c'            // function type (escaping)\ntype ::= function-signature 'X' FUNCTION-KIND // special function type\ntype ::= bound-generic-type\ntype ::= type 'Sg'                         // optional type, shortcut for: type 'ySqG'\ntype ::= type 'Xo'                         // @unowned type\ntype ::= type 'Xu'                         // @unowned(unsafe) type\ntype ::= type 'Xw'                         // @weak type\ntype ::= impl-function-type 'XF'           // function implementation type (currently unused)\ntype ::= type 'Xb'                         // SIL @box type (deprecated)\ntype ::= type-list 'Xx'                    // SIL box type\ntype ::= type-list type-list generic-signature 'XX'\n                                           // Generic SIL box type\ntype ::= type 'XD'                         // dynamic self type\ntype ::= type 'm'                          // metatype without representation\ntype ::= type 'XM' METATYPE-REPR           // metatype with representation\ntype ::= type 'Xp'                         // existential metatype without representation\ntype ::= type 'Xm' METATYPE-REPR           // existential metatype with representation\ntype ::= 'Xe'                              // error or unresolved type\n\n#if SWIFT_RUNTIME_VERSION >= 6.TBD\n  type ::= '$' 'n'? INDEX                    // integer type\n#endif\n\nbound-generic-type ::= type 'y' (type* '_')* type* retroactive-conformance* 'G'   // one type-list per nesting level of type\nbound-generic-type ::= substitution\n\nFUNCTION-KIND ::= 'f'                      // @thin function type\nFUNCTION-KIND ::= 'U'                      // uncurried function type (currently not used)\nFUNCTION-KIND ::= 'K'                      // @auto_closure function type (noescape)\n```\n\n----------------------------------------\n\nTITLE: Traversing Borrow Scopes with BorrowUtils in Swift\nDESCRIPTION: Utilities located in `BorrowUtils.swift` facilitate the traversal of borrow scopes in OSSA SIL. Key components include `BorrowingInstruction` for finding scopes during def-use walks, `BeginBorrowValue` for use-def walks, `gatherBorrowIntroducers` for finding current scopes via use-def walks, and `gatherEnclosingValues` for finding outer lifetimes enclosing the current scope via use-def walks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\nBorrowUtils.swift:\n  BorrowingInstruction\n  BeginBorrowValue\n  gatherBorrowIntroducers\n  gatherEnclosingValues\n```\n\n----------------------------------------\n\nTITLE: Using @unsafe Attribute for Unsafe Protocol Conformance in Swift\nDESCRIPTION: This snippet demonstrates the use of the @unsafe attribute to acknowledge that a type or conformance is unsafe.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-memory-safety.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyType: @unsafe CustomStringConvertible {\n  @unsafe var description: String {\n    \"I am unsafe!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Began Message for Swift Compiler Task\nDESCRIPTION: Illustrates the structure of a 'began' message, indicating the start of a compilation task. It includes details such as PID, inputs, outputs, and the command being executed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DriverParseableOutput.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"kind\": \"began\",\\n  \"name\": \"compile\",\\n  \"pid\": 12345,\\n  \"process\": {\\n    \"real_pid\": 12345\\n  },\\n  \"inputs\": [\"/src/foo.swift\"],\\n  \"outputs\": [\\n     {\\n       \"type\": \"object\",\\n       \"path\": \"/build/foo.o\"\\n     },\\n     {\\n       \"type\": \"swiftmodule\",\\n       \"path\": \"/build/foo.swiftmodule\"\\n     },\\n     {\\n       \"type\": \"diagnostics\",\\n       \"path\": \"/build/foo.dia\"\\n     },\\n  ],\\n  \"command_executable\": \"swift\",\\n  \"command_arguments\" : [\"-frontend\", \"-c\", \"-primary-file\", \"/src/foo.swift\", \"/src/bar.swift\", \"-emit-module-path\", \"/build/foo.swiftmodule\", \"-emit-diagnostics-path\", \"/build/foo.dia\"]\\n}\n```\n\n----------------------------------------\n\nTITLE: Showing @guaranteed Phi Argument in SIL\nDESCRIPTION: This snippet illustrates the use of an @guaranteed phi argument in SIL. It shows how the incoming values can be either borrow introducers or forwarded guaranteed values. The phi argument does not produce a new lifetime but is viewed as an interior use of another enclosing borrow scope.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_30\n\nLANGUAGE: sil\nCODE:\n```\n      cond_br %cond, bb1, bb2\n    bb1:\n      %2 = begin_borrow %0                                  -+ forward-extended\n      %3 = struct_extract %2, #S.a     // interior use       |   borrow scope\n      br bb3(%2, %3)                                         |\n    bb2:                                                     |\n      %4 = begin_borrow %0                                   |\n      %5 = struct_extract %2, #S.b     // interior use       |\n      br bb3(%4, %5)                                         |\n    bb3(%p1 : @reborrow $C, %p2 : @guaranteed $D):           |\n      %6 = borrowed %p1 from (%0)                            |\n      %7 = borrowed %p2 from (%p1)     // interior use       |\n      %8 = ref_element_addr %7, #D.f   // interior use       |\n      end_borrow %6                                         -+\n```\n\n----------------------------------------\n\nTITLE: Collection Protocol Definition\nDESCRIPTION: Example protocol definition showing requirement signature components including inheritance, associated types, and constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Collection: Sequence where SubSequence: Collection {\n  associatedtype Index\n  associatedtype Indices: Collection where Indices.Element == Index\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Memory Effect Constraints for SIL Functions in Swift (BNF)\nDESCRIPTION: Lists attributes for marking function side-effect constraints, including 'readonly', 'readnone', 'readwrite', and 'releasenone'. These are used by the optimizer to reason about potential memory and reference side effects, enabling optimizations and safe transformations. Should match function body effects precisely.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_13\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[' sil-function-effects ']'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-effects ::= 'readonly'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-effects ::= 'readnone'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-effects ::= 'readwrite'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-effects ::= 'releasenone'\n```\n\n----------------------------------------\n\nTITLE: Creating FooRuncingOptions OptionSet\nDESCRIPTION: Implements an OptionSet struct called FooRuncingOptions with Int raw values and two option constants: enableMince and enableQuince.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  FooRuncingOptions.  Bbb.\nstruct FooRuncingOptions : OptionSet {\n  init(rawValue: Int)\n  let rawValue: Int\n  static var enableMince: FooRuncingOptions { get }\n  static var enableQuince: FooRuncingOptions { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift IRGen Static Library in CMake\nDESCRIPTION: This CMake snippet configures the Swift IRGen static library. It specifies the source files, LLVM components to link, and both interface and private library dependencies. The library is named 'swiftIRGen' and includes a wide range of source files related to IR generation for various Swift language features.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/IRGen/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftIRGen STATIC\n  AllocStackHoisting.cpp\n  APIGen.cpp\n  ClassLayout.cpp\n  DebugTypeInfo.cpp\n  EnumPayload.cpp\n  ExtraInhabitants.cpp\n  Fulfillment.cpp\n  GenArchetype.cpp\n  GenArray.cpp\n  GenBuiltin.cpp\n  GenCall.cpp\n  GenCast.cpp\n  GenClangDecl.cpp\n  GenClangType.cpp\n  GenClass.cpp\n  GenConstant.cpp\n  GenControl.cpp\n  GenCoro.cpp\n  GenCoverage.cpp\n  GenConcurrency.cpp\n  GenDistributed.cpp\n  GenDecl.cpp\n  GenDiffFunc.cpp\n  GenDiffWitness.cpp\n  GenEnum.cpp\n  GenExistential.cpp\n  GenFunc.cpp\n  GenHasSymbol.cpp\n  GenHeap.cpp\n  GenInit.cpp\n  GenIntegerLiteral.cpp\n  GenKeyPath.cpp\n  GenMeta.cpp\n  GenObjC.cpp\n  GenOpaque.cpp\n  GenPack.cpp\n  GenPointerAuth.cpp\n  GenPoly.cpp\n  GenProto.cpp\n  GenReflection.cpp\n  GenStruct.cpp\n  GenThunk.cpp\n  GenTuple.cpp\n  GenType.cpp\n  GenValueWitness.cpp\n  IRABIDetailsProvider.cpp\n  IRGen.cpp\n  IRGenDebugInfo.cpp\n  IRGenFunction.cpp\n  IRGenMangler.cpp\n  IRGenModule.cpp\n  IRGenSILPasses.cpp\n  IRGenRequests.cpp\n  IRGenSIL.cpp\n  IRSymbolVisitor.cpp\n  Linking.cpp\n  LoadableByAddress.cpp\n  LocalTypeData.cpp\n  MetadataLayout.cpp\n  MetadataRequest.cpp\n  Outlining.cpp\n  PackMetadataMarkerInserter.cpp\n  StructLayout.cpp\n  SwiftTargetInfo.cpp\n  TBDGen.cpp\n  TBDGenRequests.cpp\n  TypeLayout.cpp\n  TypeLayoutDumper.cpp\n  TypeLayoutVerifier.cpp\n\n  LLVM_LINK_COMPONENTS\n    target\n    targetparser\n    transformutils\n    irprinter\n)\ntarget_link_libraries(swiftIRGen INTERFACE\n  clangCodeGen\n  clangAST)\ntarget_link_libraries(swiftIRGen PRIVATE\n  swiftAST\n  swiftLLVMPasses\n  swiftSIL\n  swiftSILGen\n  swiftSILOptimizer)\n\nset_swift_llvm_is_available(swiftIRGen)\n```\n\n----------------------------------------\n\nTITLE: Usage Example for Current UnsafePointer-Based Approach\nDESCRIPTION: Example demonstrating how to work with move-only C++ classes in Swift using the UnsafePointer approach. Shows method calls, moving objects to different memory locations, and accessing composite objects.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\n// Usage example.\n\nfunc useOneFile(_ f: UnsafeMutablePointer<File>) {\n  // var f2 = f.pointee // compile-time error: can only call a method on 'pointee'.\n  print(f.pointee.ReadAll()) // OK\n\n  // Move `f` to a different memory location.\n  var f2 = UnsafeMutablePointer<File>.allocate(capacity: 1)\n  f2.moveInitialize(from: f, count: 1)\n  // `f` is left uninitialized now.\n\n  print(f2.pointee.ReadAll()) // OK\n  f2.deallocate() // OK\n  // The file is closed now.\n}\n\nfunc useTwoFiles(_ files: UnsafeMutablePointer<TwoFiles>) {\n  // Like `print(files.first.ReadAll())`, if it was possible to compile it:\n  files.pointee.withUnsafePointerToFirst { print($0.ReadAll()) }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing swiftConcurrencyInternalShims Interface Library in CMake\nDESCRIPTION: Creates an interface library for Swift concurrency internal shims, configures its include directories using the current source directory, and sets up installation parameters. The library is exported as part of SwiftCoreTargets and included in the SwiftCore_runtime component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Concurrency/InternalShims/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftConcurrencyInternalShims INTERFACE)\ntarget_include_directories(swiftConcurrencyInternalShims INTERFACE\n  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n\ninstall(TARGETS swiftConcurrencyInternalShims\n  EXPORT SwiftCoreTargets\n  COMPONENT SwiftCore_runtime)\n```\n\n----------------------------------------\n\nTITLE: Building swift-corelibs-foundation with CMake and Ninja on Windows - Batchfile\nDESCRIPTION: This configuration and build batch script sets up swift-corelibs-foundation with CMake, passing explicit library/include paths and feature flags for Windows dependencies (libcurl, ICU, libxml2) and build options. It then triggers compilation and installation with Ninja. Requires all supporting libraries to be present at the specified paths, a previously built swift-corelibs-libdispatch, and compatible CMake/Ninja tools.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_9\n\nLANGUAGE: Batchfile\nCODE:\n```\ncmake -B S:\\\\b\\\\3 ^\\n  -D CMAKE_BUILD_TYPE=RelWithDebInfo ^\\n  -D CMAKE_INSTALL_PREFIX=C:\\\\Library\\\\Developer\\\\Toolchains\\\\unknown-Asserts-development.xctoolchain\\\\usr ^\\n  -D CMAKE_C_COMPILER=S:/b/1/bin/clang-cl.exe ^\\n  -D CMAKE_MT=mt ^\\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\\n  -D CURL_LIBRARY=\"S:/Library/libcurl-development/usr/lib/libcurl.lib\" ^\\n  -D CURL_INCLUDE_DIR=\"S:/Library/libcurl-development/usr/include\" ^\\n  -D ICU_I18N_LIBRARY_RELEASE=S:\\\\library\\\\icu-67\\\\usr\\\\lib\\\\icuin67.lib ^\\n  -D ICU_ROOT=S:\\\\Library\\\\icu-67\\\\usr ^\\n  -D ICU_UC_LIBRARY_RELEASE=S:\\\\Library\\\\icu-67\\\\usr\\\\lib\\\\icuuc67.lib ^\\n  -D LIBXML2_DEFINITIONS=\"/DLIBXML_STATIC\" ^\\n  -D LIBXML2_LIBRARY=S:\\\\Library\\\\libxml2-development\\\\usr\\\\lib\\\\libxml2s.lib ^\\n  -D LIBXML2_INCLUDE_DIR=S:\\\\Library\\\\libxml2-development\\\\usr\\\\include\\\\libxml2 ^\\n  -D ENABLE_TESTING=NO ^\\n  -D dispatch_DIR=S:\\\\b\\\\2\\\\cmake\\\\modules ^\\n  -G Ninja ^\\n  -S S:\\\\swift-corelibs-foundation\\n\\nninja -C S:\\\\b\\\\3\n```\n\n----------------------------------------\n\nTITLE: Referencing copy_value Instruction in SIL\nDESCRIPTION: Reference to the copy_value instruction documentation, which is relevant for understanding how non-copyable types interact with copy operations in SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n[copy_value](Instructions.md#copy_value)\n```\n\n----------------------------------------\n\nTITLE: Swift SIL Implementation of Async Function with Inlined Closure\nDESCRIPTION: A more optimized SIL representation where the closure has been inlined into the waitForCallback function, showing how continuations are passed to callback functions and then awaited.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nsil @waitForCallback : $@convention(thin) @async () -> Int {\nentry:\n  %cc = get_async_continuation $Int\n  %registerCallback = function_ref @registerCallback\n    : $@convention(thin) (@convention(thick) () -> ()) -> ()\n  %callback_fn = function_ref @waitForCallback_callback\n  %callback = partial_apply %callback_fn(%cc)\n  apply %registerCallback(%callback)\n  await_async_continuation %cc, resume resume_cc\n\nresume_cc(%result : $Int):\n  return %result\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying lazy Attribute on Stored Properties in Swift Structs\nDESCRIPTION: Describes the ABI stability rule for the `lazy` keyword on stored properties within structs. Adding or removing `lazy` from a stored property is not permitted for `@frozen` structs after deployment, as it changes the instance layout and thus breaks ABI compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlazy\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamically Replaceable and Replacement Functions in SIL (BNF)\nDESCRIPTION: Presents attributes for dynamic replacement, including '[dynamically_replacable]', and indicating which function is replaced via '[dynamic_replacement_for identifier]' or '[objc_replacement_for identifier]'. This enables runtime function replacement (dynamic patching). Key for features like hot-swapping. Only valid for functions intended to be replaced during execution. Inputs: SIL function declarations, outputs: replacement or replaced functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_5\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[dynamically_replacable]'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[dynamic_replacement_for' identifier ']'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[objc_replacement_for' identifier ']'\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Complex Generic Type Extension Mangling\nDESCRIPTION: Swift symbol mangling for complex generic type extensions with multiple constraints. These examples show how Swift encodes extension methods on collections and Foundation types with complex generic constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\n_T0s13_UnicodeViewsVss22RandomAccessCollectionRzs0A8EncodingR_11SubSequence_5IndexQZAFRtzsAcERpzAE_AEQZAIRSs15UnsignedInteger8Iterator_7ElementRPzAE_AlMQZANRS13EncodedScalar_AlMQY_AORSr0_lE13CharacterViewVyxq__G ---> (extension in Swift):Swift._UnicodeViews<A, B><A, B where A: Swift.RandomAccessCollection, B: Swift.UnicodeEncoding, A.Index == A.SubSequence.Index, A.SubSequence: Swift.RandomAccessCollection, A.SubSequence == A.SubSequence.SubSequence, A.Iterator.Element: Swift.UnsignedInteger, A.Iterator.Element == A.SubSequence.Iterator.Element, A.SubSequence.Iterator.Element == B.EncodedScalar.Iterator.Element>.CharacterView\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T010Foundation11MeasurementV12SimulatorKitSo9UnitAngleCRszlE11OrientationO2eeoiSbAcDEAGOyAF_G_AKtFZ ---> static (extension in SimulatorKit):Foundation.Measurement<A where A == __C.UnitAngle>.Orientation.== infix((extension in SimulatorKit):Foundation.Measurement<__C.UnitAngle>.Orientation, (extension in SimulatorKit):Foundation.Measurement<__C.UnitAngle>.Orientation) -> Swift.Bool\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S10Foundation11MeasurementV12SimulatorKitSo9UnitAngleCRszlE11OrientationO2eeoiySbAcDEAGOyAF_G_AKtFZ ---> static (extension in SimulatorKit):Foundation.Measurement<A where A == __C.UnitAngle>.Orientation.== infix((extension in SimulatorKit):Foundation.Measurement<__C.UnitAngle>.Orientation, (extension in SimulatorKit):Foundation.Measurement<__C.UnitAngle>.Orientation) -> Swift.Bool\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Function Declaration vs Objective-C External Calling\nDESCRIPTION: An example showing a Swift function and how it might be incorrectly accessed from Objective-C if one assumed compatibility with the platform's default calling convention.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/CallingConvention.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// In Swift:\nfunc foo(_ x: Int, y: Double) -> MyClass { ... }\n\n// In Objective-C:\nextern id _TF4main3fooFTSiSd_CS_7MyClass(intptr_t x, double y);\n```\n\n----------------------------------------\n\nTITLE: Defining Value Witness and Field Offset Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for value witness tables, field offsets, and resilient enum tag indices.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= type 'WV'                   // value witness table\nglobal ::= entity 'Wvd'                // field offset\nglobal ::= entity 'WC'                 // resilient enum tag index\n```\n\n----------------------------------------\n\nTITLE: Running a Swift libFuzzer Test\nDESCRIPTION: Demonstrates how to execute the compiled Swift fuzzer. The fuzzer runs continuously, generating test cases and executing the test function with the generated input.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/libFuzzerIntegration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n% ./myfile\n```\n\n----------------------------------------\n\nTITLE: Creating Alias for Custom LLDB Python Command\nDESCRIPTION: Creates an LLDB command alias named `cs`. When `cs` is entered, it executes `script custom_step()`, effectively providing a shorthand for calling the custom Python function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_29\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) command alias cs script custom_step()\n```\n\n----------------------------------------\n\nTITLE: Handling Partially Undefined Structures with `debug_value undef` and Fragments in SIL\nDESCRIPTION: This SIL code sequence illustrates managing debug information for a structured variable named \"pair\" of type `$Pair`. It uses `debug_value` with `op_fragment` expressions to assign values to individual members (`pair.a`, `pair.b`). Subsequently, `debug_value undef` with `op_fragment` marks a specific member (`pair.a`) as undefined/optimized away. A later `debug_value undef` without a fragment marks the entire `pair` variable as undefined. Finally, a new value (`%1`) is assigned to `pair.a`, showing how fragments can update parts of a potentially partially undefined structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_9\n\nLANGUAGE: sil\nCODE:\n```\n... // pair = ?\ndebug_value %0 : $Int, var, name \"pair\", type $Pair, expr op_fragment:#Pair.a // pair.a = x\ndebug_value %0 : $Int, var, name \"pair\", type $Pair, expr op_fragment:#Pair.b // pair.b = x\n... // pair = (x, x)\ndebug_value undef : $Pair, var, name \"pair\", expr op_fragment:#Pair.a // pair.a = <optimized out>\n... // pair = (?, x)\ndebug_value undef : $Pair, var, name \"pair\" // pair = <optimized out>\n... // pair = ?\ndebug_value %1 : $Int, var, name \"pair\", type $Pair, expr op_fragment:#Pair.a // pair.a = y\n... // pair = (y, ?)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Enum Layout in Swift\nDESCRIPTION: Example showing how a Swift enum with multiple cases including class and float payloads is mapped to typed layout.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/CallingConvention.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nenum Sum {\n  case Yes(MyClass)\n  case No(Float)\n  case Maybe\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring FooEnum1X Variable in Swift\nDESCRIPTION: Declares a global read-only variable of type FooEnum1 with associated documentation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  FooEnum1X.  Bbb.\nvar FooEnum1X: FooEnum1 { get }\n```\n\n----------------------------------------\n\nTITLE: Swift Memory Optimization Example\nDESCRIPTION: Demonstrates how Swift optimizes memory usage by reusing impossible bit patterns for additional data storage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// This enum takes 1 byte in memory, which has 256 possible bit patterns.\n// However, only 2 bit patterns are used.\nenum Foo {\n  case A\n  case B\n}\n\nprint(MemoryLayout<Foo>.size) // 1\nprint(MemoryLayout<Foo?>.size) // also 1: `nil` is represented as one of the 254 bit patterns that are not used by `Foo.A` or `Foo.B`.\n```\n\n----------------------------------------\n\nTITLE: Importing C functions as initializers\nDESCRIPTION: Demonstrates how to use swift_name with init to import C factory functions as initializers in Swift. This creates a more Swift-like API for constructing objects and values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_23\n\nLANGUAGE: objc\nCODE:\n```\n__attribute__((swift_name(\"Counter.init(initialValue:)\")))\nCounter CounterCreateWithInitialValue(int value);\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension Counter {\n  /* non-inherited */ init(initialValue value: Int32)\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Leading Underscore Rule to Initializers in Swift\nDESCRIPTION: Examples showing how to apply the leading underscore rule to initializers by prefixing either the parameter label or internal parameter name with an underscore.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControlInStdlib.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\npublic struct Foo {\n  init(_count: Int) {}\n  init(_ _otherInitializer: Int) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Struct and Class Hierarchy for Key Path Example in Swift\nDESCRIPTION: This code snippet defines a hierarchy of structs and classes (A, B, C) to demonstrate how key paths are represented in memory. Each type includes a padding field and a reference to the next type in the hierarchy.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/KeyPaths.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct A {\n  var padding: (128 x UInt8)\n  var b: B\n}\n\nclass B {\n  var padding: (240 x UInt8)\n  var c: C\n}\n\nstruct C {\n  var padding: (384 x UInt8)\n  var d: D\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Non-destructive Move Implementation - Option 1\nDESCRIPTION: Implementation of non-destructive moves in Swift using swaps with default-initialized values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol DefaultInitializable {\n  init()\n}\n\npublic moveonly func cxxMove<T: DefaultInitializable>(_ value: inout T) -> T {\n  var result = T()\n  swap(&value, &result)\n  return result\n}\n\npublic moveonly func cxxMove(_ value: inout T, replacingWith newValue: T) -> T {\n  var result = newValue\n  swap(&value, &result)\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Gateway Annotation for Thread Creation in Swift\nDESCRIPTION: Demonstrates how to create a gateway annotation that marks functions creating new threads. The annotation ensures arguments conform to the Copyable protocol and the executed code is reentrant.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n@_semantics(\"swift.concurrent.launch\")\npublic func createTask<ArgsTy>(args : ArgsTy, callback : (ArgsTy) -> Void) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Visualizing the Ownership Kind Lattice in Swift SIL\nDESCRIPTION: This ASCII diagram illustrates the 3-level lattice structure of Ownership Kinds in Swift SIL. It shows the relationships between `None` (Top), `Owned`, `Guaranteed`, `Unowned` (Mid-level), and `Any` (Bottom). This lattice defines the 'meet' (moving down) and 'join' (moving up) operations used for validating ownership constraints between values and operands.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n          +------+\n+-------- | None | ---------+\n|         +------+          |\n|            |              |\nv            v              v             ^\n+-------+  +-----+------+  +---------+    |\n| Owned |  | Guaranteed |  | Unowned |    +--- Value Ownership Kinds and\n+-------+  +-----+------+  +---------+         Ownership Constraints\n|            |              |\n|            v              |         +--- Only Ownership Constraints\n|         +-----+           |         |\n+-------->| Any |<----------+         v\n          +-----+\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Class Types for TBAA\nDESCRIPTION: This snippet shows the syntax for defining Swift class types used in Type Based Alias Analysis (TBAA). It demonstrates how different class types and their relationships are represented in SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_51\n\nLANGUAGE: swift\nCODE:\n```\n$C\n```\n\nLANGUAGE: swift\nCODE:\n```\n$B\n```\n\nLANGUAGE: swift\nCODE:\n```\n$D\n```\n\nLANGUAGE: swift\nCODE:\n```\n$C<Int>\n```\n\nLANGUAGE: swift\nCODE:\n```\n$C<Float>\n```\n\nLANGUAGE: swift\nCODE:\n```\n$C<T>\n```\n\n----------------------------------------\n\nTITLE: Nested ADT Representation in Swift\nDESCRIPTION: An example of how complex hierarchical enumerations in C can be better represented as nested ADTs in Swift, showing nested enum types and a parent enum with associated cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nenum Reptile { case Lizard, Snake }\nenum Mammal { case Cat, Dog }\nenum Pet {\n  case Reptile(Reptile)\n  case Mammal(Mammal)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Requirement Mangling in Swift Generic Signatures\nDESCRIPTION: Specifies the mangling rules for various types of requirements in generic signatures, including protocol, base class, same-type, and layout constraints. Covers requirements on generic parameters and associated types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_41\n\nLANGUAGE: swift\nCODE:\n```\nrequirement ::= protocol 'R' GENERIC-PARAM-INDEX                  // protocol requirement\nrequirement ::= protocol assoc-type-name 'Rp' GENERIC-PARAM-INDEX // protocol requirement on associated type\nrequirement ::= protocol assoc-type-list 'RP' GENERIC-PARAM-INDEX // protocol requirement on associated type at depth\nrequirement ::= protocol substitution 'RQ'                        // protocol requirement with substitution\n#if SWIFT_RUNTIME_VERSION >= 6.0\nrequirement ::= 'Ri' INDEX GENERIC-PARAM-INDEX                    // inverse requirement on generic parameter where INDEX is the bit number\nrequirement ::= substitution 'RI' INDEX                           // inverse requirement with substitution\nrequirement ::= assoc-type-name 'Rj' INDEX GENERIC-PARAM-INDEX    // inverse requirement on associated type\nrequirement ::= assoc-type-list 'RJ' INDEX GENERIC-PARAM-INDEX    // inverse requirement on associated type at depth\n#endif\nrequirement ::= type 'Rb' GENERIC-PARAM-INDEX                     // base class requirement\nrequirement ::= type assoc-type-name 'Rc' GENERIC-PARAM-INDEX     // base class requirement on associated type\nrequirement ::= type assoc-type-list 'RC' GENERIC-PARAM-INDEX     // base class requirement on associated type at depth\nrequirement ::= type substitution 'RB'                            // base class requirement with substitution\nrequirement ::= type 'Rs' GENERIC-PARAM-INDEX                     // same-type requirement\nrequirement ::= type assoc-type-name 'Rt' GENERIC-PARAM-INDEX     // same-type requirement on associated type\nrequirement ::= type assoc-type-list 'RT' GENERIC-PARAM-INDEX     // same-type requirement on associated type at depth\nrequirement ::= type substitution 'RS'                            // same-type requirement with substitution\nrequirement ::= type 'Rl' GENERIC-PARAM-INDEX LAYOUT-CONSTRAINT   // layout requirement\nrequirement ::= type assoc-type-name 'Rm' GENERIC-PARAM-INDEX LAYOUT-CONSTRAINT    // layout requirement on associated type\nrequirement ::= type assoc-type-list 'RM' GENERIC-PARAM-INDEX LAYOUT-CONSTRAINT    // layout requirement on associated type at depth\nrequirement ::= type substitution 'RM' LAYOUT-CONSTRAINT                           // layout requirement with substitution\n\nrequirement ::= type 'Rh' GENERIC-PARAM-INDEX                     // same-shape requirement (only supported on a generic parameter)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift SIL Optimizer Static Library in CMake\nDESCRIPTION: Creates a static library for the Swift SIL Optimizer component and sets up its dependencies. The library is linked with swiftSIL and configured with LLVM availability settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftSILOptimizer STATIC\n  SILOptimizer.cpp)\ntarget_link_libraries(swiftSILOptimizer PRIVATE\n  swiftSIL)\nset_swift_llvm_is_available(swiftSILOptimizer)\n```\n\n----------------------------------------\n\nTITLE: Object Slicing in Swift\nDESCRIPTION: Demonstrates how object slicing, a C++ concept, could be implemented in Swift using unsafe pointers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_48\n\nLANGUAGE: swift\nCODE:\n```\nvar derived: Derived = ...\nvar base: Base = UnsafeRawPointer(&derived).load(as: Base.self)\n```\n\n----------------------------------------\n\nTITLE: Defining a Substituted Generic Function Type in Swift SIL\nDESCRIPTION: Example of a SIL function type with a pattern signature and substitutions. This shows how to express that values use a particular generic abstraction pattern, with substitutions for Array<Int>.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@substituted <T: Collection> (@in T) -> @out T.Element for Array<Int>\n```\n\n----------------------------------------\n\nTITLE: Swift Foreign Type Import\nDESCRIPTION: Example of how C++ types are imported and used in Swift code\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_52\n\nLANGUAGE: swift\nCODE:\n```\nstruct __CxxTemplateInst12MagicWrapperI11MagicNumberE {\n  var t: MagicNumber\n}\nstruct MagicNumber {}\ntypealias WrappedMagicNumber = __CxxTemplateInst12MagicWrapperI11MagicNumberE\n```\n\n----------------------------------------\n\nTITLE: Defining Option Types and Extensions for String Sensitivity - Swift\nDESCRIPTION: This code defines supporting types and default parameterization facilities required for the proposed String API enhancements in Swift. It introduces a StringSensitivity enum for case/diacritic/width distinctions and extends Locale and Unicode with static variables and methods, including a 'frobnicated' function that demonstrates multiple option parameters with default values. Dependencies include the definition of the Locale and Unicode types and supporting methods. Input parameters control the sensitivity and locale of string operations; expected output is a transformed string. Limitations include the use of ellipses as placeholders for actual implementation details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nenum StringSensitivity {\n  case sensitive\n  case insensitive\n}\n\nextension Locale {\n  static var currentLocale: Locale { ... }\n}\n\nextension Unicode {\n  // An example of the option language in declaration context,\n  // with nil defaults indicating unspecified, so defaults can be\n  // driven by the presence/absence of a specific Locale\n  func frobnicated(\n    case caseSensitivity: StringSensitivity? = nil,\n    diacritic diacriticSensitivity: StringSensitivity? = nil,\n    width widthSensitivity: StringSensitivity? = nil,\n    in locale: Locale? = nil\n  ) -> Self { ... }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_TOOLS_ENABLE_LTO Cache Variable in CMake\nDESCRIPTION: Defines a CMake cache variable `SWIFT_TOOLS_ENABLE_LTO` to control the use of Link Time Optimization (LTO) for Swift host tools (like the compiler). It defaults to OFF but can be set to 'full' or 'thin' to enable specific LTO types. This setting does not affect target libraries like the standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_TOOLS_ENABLE_LTO OFF CACHE STRING \"Build Swift tools with LTO. One\n    must specify the form of LTO by setting this to one of: 'full', 'thin'. This\n    option only affects the tools that run on the host (the compiler), and has\n    no effect on the target libraries (the standard library and the runtime).\")\n```\n\n----------------------------------------\n\nTITLE: Extending Central Namespace Enum in Imported Swift Module (CppTextbox)\nDESCRIPTION: Shows how the Swift import of the 'CppTextbox' module would work with the synthetic module approach. It imports 'CppNamespaces' and uses a Swift extension to add the 'Textbox' struct to the centrally defined 'widgets' enum.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n// C++ module `CppTextbox` imported to Swift.\n\nimport CppNamespaces\n\nextension widgets {\n  struct Textbox {}\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Main Entry Point\nDESCRIPTION: Main Swift file demonstrating C++ function call integration in a command-line application.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/GettingStartedWithC++Interop.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport CxxTest\n\npublic struct CxxInterop {\n    public static func main() {\n        let result = cxxFunction(7)\n        print(result)\n    }\n}\n\nCxxInterop.main()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Property Type Inference and Recursion in Swift\nDESCRIPTION: This code snippet illustrates the challenge of inferring property types from initial values and the potential for recursion. It shows how circular dependencies can arise in property declarations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/DeclarationTypeChecker.rst#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nvar x = y + z\nvar y = 1\nvar z = x + y\n```\n\n----------------------------------------\n\nTITLE: Diagnostic Format Specifiers for Decl Arguments - Plaintext\nDESCRIPTION: This snippet lists format specifiers specific to diagnostic parameters of type Decl within Swift diagnostics. Each directive achieves precise message customization, such as prefixing with declaration kind, extracting just the base name, or combining kind and base. Usage of these specifiers instructs the compiler on how to format references to different code entities in messages, especially function and property declarations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n%kind0\n%kindonly0\n%base0\n%kindbase0\n```\n\n----------------------------------------\n\nTITLE: Switching on Address-Only Enums in Swift SIL\nDESCRIPTION: Demonstrates how to test and extract data from address-only enums using switch_enum_addr for control flow and unchecked_take_enum_data_addr for data projection.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_138\n\nLANGUAGE: sil\nCODE:\n```\nenum Foo<T> { case A(T), B(String) }\n\nsil @switch_foo : $<T> (Foo<T>) -> () {\nentry(%foo : $*Foo<T>):\n  switch_enum_addr %foo : $*Foo<T>, case #Foo.A!enumelt: a_dest, \n    case #Foo.B!enumelt: b_dest\n\na_dest:\n  %a = unchecked_take_enum_data_addr %foo : $*Foo<T>, #Foo.A!enumelt\n  /* use %a */\n\nb_dest:\n  %b = unchecked_take_enum_data_addr %foo : $*Foo<T>, #Foo.B!enumelt\n  /* use %b */\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Any Containing Optional<Any> to Error in Swift\nDESCRIPTION: This snippet demonstrates how casting Any containing Optional<Any> to Error now succeeds, addressing issue #51469.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyError: Error { }\nlet a: Any? = MyError()\nlet b: Any = a\n// Swift 5.3: Prints false\n// Specification: prints true\nprint(b is Error)\n```\n\n----------------------------------------\n\nTITLE: Defining FooEnum2 RawRepresentable Struct in Swift\nDESCRIPTION: Declares a struct implementing RawRepresentable and Equatable protocols with UInt32 as its raw value type, similar to FooEnum1 but without documentation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct FooEnum2 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\n```\n\n----------------------------------------\n\nTITLE: Strong Retain Operation in Swift Intermediate Language (SIL)\nDESCRIPTION: The strong_retain instruction increases the strong retain count of a heap object. It is not available in OSSA (Ownership SSA) form of SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_52\n\nLANGUAGE: sil\nCODE:\n```\nstrong_retain %0 : $T\n// $T must be a reference type\n```\n\n----------------------------------------\n\nTITLE: Conceptual Swift Implementation of Set and Dictionary Casting\nDESCRIPTION: Shows conceptual Swift functions `setCast` and `dictionaryCast` illustrating the logic for casting `Set<T>` to `Optional<Set<U>>` and `Dictionary<K,V>` to `Optional<Dictionary<K2,V2>>` respectively. Similar to array casting, these functions iterate element-wise (or key-value pair-wise), attempting to cast each component. If any component cast fails, the function returns `nil`. Otherwise, it returns the newly constructed collection wrapped in an Optional. It's noted that the resulting Set or Dictionary might contain fewer items if distinct source items become equal after casting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nfunc setCast<T,U>(source: Set<T>) -> Optional<Set<U>> {\n  var result = Set<U>()\n  for t in source {\n    if let u = t as? U {\n      result.append(u)\n    } else {\n      return nil\n    }\n  }\n  return result\n}\n\nfunc dictionaryCast<K,V,K2,V2>(source: Dictionary<K,V>) -> Optional<Dictionary<K2,V2>> {\n  var result = Dictionary<K2,V2>()\n  for (k,v) in source {\n    if let k2 = k as? K2, v2 = v as? V2 {\n      result[k2] = v2\n    } else {\n      return nil\n    }\n  }\n  return result\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Linear Regression Perceptron in Swift\nDESCRIPTION: A basic perceptron implementation for linear regression using SIMD64 vectors. The structure is differentiable and includes weights and bias parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_60\n\nLANGUAGE: swift\nCODE:\n```\nstruct Perceptron: @memberwise Differentiable {\n    var weights: SIMD64<Float>\n    var bias: Float\n\n    @differentiable\n    func callAsFunction(_ input: SIMD64<Float>) -> Float {\n        weights.dot(input) + bias\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using @_implicitSelfCapture for Closure Self Capture in Swift\nDESCRIPTION: Illustrates the usage of @_implicitSelfCapture attribute to allow access to 'self' inside a closure without explicit capture, even when 'Self' is a reference type. This can simplify closure syntax in certain scenarios.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nclass C {\n  func f() {}\n  func g(_: @escaping () -> Void) {\n    g({ f() }) // error: call to method 'f' in closure requires explicit use of 'self'\n  }\n  func h(@_implicitSelfCapture _: @escaping () -> Void) {\n    h({ f() }) // ok\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Code Completion Request Structure\nDESCRIPTION: Details the structure for code completion requests, including required parameters like source location and optional parameters like compiler arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{\n    <key.request>:          (UID) <source.request.codecomplete>\n    [opt] <key.sourcetext>: (string)   // Source contents.\n    [opt] <key.sourcefile>: (string)   // Absolute path to the file.\n    <key.offset>:           (int64)    // Byte offset of code-completion point inside the source contents.\n    [opt] <key.compilerargs> [string*] // Array of zero or more strings for the compiler arguments,\n                                       // e.g [\"-sdk\", \"/path/to/sdk\"]. If key.sourcefile is provided,\n                                       // these must include the path to that file.\n    [opt] <key.not_recommended> [bool] // True if this result is to be avoided, e.g. because\n                                       // the declaration is unavailable.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Representing Function Type Conversion Constraints in Swift Type System\nDESCRIPTION: This snippet demonstrates the notation used to represent a conversion constraint between two function types in Swift's type system. It shows how a constraint between complex types is broken down into simpler constraints between their components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nA -> B <c C -> D\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Locator Path Example in Swift Type System\nDESCRIPTION: Shows the complete locator path used by the Swift type system to identify overload sets and conversion members in the constraint solver. This path is crucial for tracking the derivation steps during constraint resolution.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n  function application -> apply argument -> tuple element #1 -> conversion member\n```\n\n----------------------------------------\n\nTITLE: Defining Class Allocating and Initializing Entry-points in Swift SIL\nDESCRIPTION: These snippets provide SIL code for a class initializer with both allocating and initializing entry-points. The allocating entry-point performs reference allocation before invoking the initializing entry-point, highlighting the split of concerns in class initialization. Expected dependencies include the Swift runtime and knowledge of how classes map to SIL with entry-point mangling, and that initializing entry-points are intended for direct calls from super-class initializers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILInitializerConventions.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// MyClass.__allocating_init(final:)\nsil hidden [exact_self_class] [ossa] @$s4test7MyClassC5finalACSi_tcfC : $@convention(method) (<...>, @thick MyClass.Type) -> @owned MyClass {\nbb0(%0 : $Int, %1 : $@thick MyClass.Type):\n  %2 = alloc_ref $MyClass\n  // function_ref MyClass.init(final:)\n  %3 = function_ref @$s4test7MyClassC5finalACSi_tcfc : $@convention(method) (Int, @owned MyClass) -> @owned MyClass\n  %4 = apply %3(%0, %2) : $@convention(method) (Int, @owned MyClass) -> @owned MyClass // user: %5\n  return %4 : $MyClass\n}\n\n// MyClass.init(final:)\nsil hidden [ossa] @$s4test7MyClassC5finalACSi_tcfc : $@convention(method) (Int, @owned MyClass) -> @owned MyClass {\nbb0(<...>, %1 : @owned $MyClass):\n  %4 = mark_uninitialized [rootself] %1 : $MyClass\n  \n  // ... initialize MyClass ...\n  \n  %11 = copy_value %4 : $MyClass\n  destroy_value %4 : $MyClass\n  return %11 : $MyClass\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating mark_dependence Borrow Scope in Swift\nDESCRIPTION: This code demonstrates how mark_dependence [nonescaping] defines a borrow scope for its base operand, ending at the destruction of the result.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\n%3 = mark_dependence %2 on %1   -+ borrow scope for %1\n%4 = upcast %3 to $C             |\ndestroy_value %4                -+ %1 must be alive until here\n```\n\n----------------------------------------\n\nTITLE: Traversing OSSA Lifetimes with OwnershipUtils in Swift\nDESCRIPTION: Utilities in `OwnershipUtils.swift` aid in traversing OSSA lifetimes. Includes `computeLinearLiveness` (computes range from immediate uses), `computeInteriorLiveness` (computes range from all transitive uses), `InteriorUseWalker` (def-use walker for transitive uses, handling projections and inner scopes), and `OwnershipUseVistor` (categorizes uses by ownership effect for walkers).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nOwnershipUtils.swift:\n  computeLinearLiveness\n  computeInteriorLiveness\n  InteriorUseWalker\n  OwnershipUseVistor\n```\n\n----------------------------------------\n\nTITLE: Swift Virtual Initializer Example\nDESCRIPTION: Shows an example of virtual initializer limitations where dynamic dispatch through a metatype is not guaranteed to be safe.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InitializerInheritance.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass D {\n  init() { }\n}\n\nfunc f(_ meta: D.Type) {\n  meta() // error: no guarantee that an arbitrary of subclass D has an init()\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative span Implementation in Swift\nDESCRIPTION: Shows a more ergonomic way to import std::span as two separate generic structs in Swift based on constness.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_80\n\nLANGUAGE: swift\nCODE:\n```\nstruct mutable_span<T> {\n  public func front() -> UnsafeMutablePointer<T>\n}\n\nstruct const_span<T> {\n  public func front() -> UnsafePointer<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining linear_function Instruction in Swift SIL\nDESCRIPTION: Specifies the linear_function instruction used to bundle a function with its transpose function into a @differentiable(_linear) function. It includes parameter indices and an optional transpose function clause.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_197\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'linear_function'\n                    sil-linear-function-parameter-indices\n                    sil-value ':' sil-type\n                    sil-linear-function-transpose-function-clause?\n\nsil-linear-function-parameter-indices ::=\n    '[' 'parameters' [0-9]+ (' ' [0-9]+)* ']'\nsil-linear-transpose-function-clause ::=\n    with_transpose sil-value ':' sil-type\n\nlinear_function [parameters 0] %0 : $(T) -> T with_transpose %1 : $(T) -> T\n```\n\n----------------------------------------\n\nTITLE: Struct Cloning Example\nDESCRIPTION: Example demonstrating equivalent ways to clone struct instances\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Clonable.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar x : Baz\nvar y = x.clone()\n\n// equivalent to\n\nvar x : Baz\nvar y = x\n```\n\n----------------------------------------\n\nTITLE: Enabling Function-Level Optimizer Counters With Swift Compiler - Shell\nDESCRIPTION: This snippet demonstrates how to enable function-level optimizer counters in the Swift compiler using a command-line option. By adding '-Xllvm -sil-stats-functions', the compiler records and tracks statistics for each SILFunction in the module, increasing detail compared to module-level counters. This is suitable for users interested in changes and transformations happening at the function scope.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -sil-stats-functions\n```\n\n----------------------------------------\n\nTITLE: Using Unsafe Language Feature in Swift\nDESCRIPTION: This snippet shows the use of an unowned(unsafe) variable, which is not memory-safe and triggers a warning.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-memory-safety.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// use of an unowned(unsafe) variable is not memory-safe\nunowned(unsafe) var parentNode: TreeNode<T>\n```\n\n----------------------------------------\n\nTITLE: Setting Precise Conditional Breakpoint for SIL Instruction Removal (LLDB)\nDESCRIPTION: Sets a more specific LLDB breakpoint in `SILInstruction.cpp` (line 63). It triggers only when a `strong_retain` instruction is removed *and* that instruction belongs to the function with the mangled name `_TFC3nix1Xd`. This further refines the debugging scope.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_14\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br set -c 'I->getKind() == ValueKind::StrongRetainInst &&\\n           I->getFunction()->hasName(\"_TFC3nix1Xd\")'\\n           -f SILInstruction.cpp -l 63\n```\n\n----------------------------------------\n\nTITLE: Using types with deprecated protocol conformance in Swift\nDESCRIPTION: This example demonstrates warnings generated when a type is used as an instance of a protocol when the type's conformance to that protocol has been marked as deprecated.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/deprecated-declaration.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct S {}\n\nprotocol P {}\n\n@available(*, deprecated)\nextension S: P {}\n\nfunc f(_ p: some P) {}\n\nfunc test() {\n  f(S()) // Conformance of 'S' to 'P' is deprecated\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Error Message for Actor-Isolated Protocol Conformance\nDESCRIPTION: The compiler error message shown when a protocol conformance crosses into actor-isolated code, including notes on possible solutions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/conformance-isolation.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n| @MainActor\n| struct MyData: P {\n|        |- error: conformance of 'MyData' to protocol 'P' crosses into main actor-isolated code and can cause data races\n|        |- note: isolate this conformance to the main actor with '@MainActor'\n|        |- note: mark all declarations used in the conformance 'nonisolated'\n|        `- note: turn data races into runtime errors with '@preconcurrency'\n|   func f() { }\n|        `- note: main actor-isolated instance method 'f()' cannot satisfy nonisolated requirement\n| }\n```\n\n----------------------------------------\n\nTITLE: C++ Usage Example\nDESCRIPTION: Example showing how to use the exposed Swift generic function from C++, demonstrating both valid and invalid usage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_58\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Swapper-Swift.h\"\n\nint main() {\n  int x, y;\n  Swapper::swapTwoValues(x, y); // ok.\n\n  std::string s1, s2;\n  Swapper::swapTwoValues(s1, s2);\n  // error: no matching function for call to 'Swapper::swapTwoValues'\n  // `because 'swift::isUsableInGenericContext<...>' evaluated to false`\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Interface for Swift Enum with Associated Values\nDESCRIPTION: Shows the C++ interface generated for the Swift enum with associated values, including methods for type checking and value extraction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_27\n\nLANGUAGE: c++\nCODE:\n```\nclass Barcode {\npublic:\n  Barcode() = delete;\n\n  inline const static struct { ... } qrCode;\n  inline const static struct { ... } upc;\n \n  bool isUpc() const;\n\n  using UpcType = swift::Tuple<swift::Int, swift::Int, swift::Int, swift::Int>;\n\n  // Extracts the associated values from Barcode.upc enum case\n  UpcType getUpc() const;\n\n  bool isQrCode() const;\n\n  // Extracts an associated value from Barcode.qrCode enum case\n  swift::String getQrCode() const;\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying SIL Function Thunks in Swift (BNF)\nDESCRIPTION: Presents grammar for declaring various thunk attributes, such as 'thunk', 'signature_optimized_thunk', 'reabstraction_thunk', and 'back_deployed_thunk'. Thunks are compiler-generated wrappers for adapting calling conventions, signatures, or deployment. No dependencies; pattern must be used where SIL generates or expects thunks for ABI adaptation. Input: function decl, Output: function recognized as thunk for special processing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_3\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[' sil-function-thunk ']'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-thunk ::= 'thunk'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-thunk ::= 'signature_optimized_thunk'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-thunk ::= 'reabstraction_thunk'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-thunk ::= 'back_deployed_thunk'\n```\n\n----------------------------------------\n\nTITLE: Invalidating Analysis after Code Modification in C++\nDESCRIPTION: This C++ snippet shows how a Swift optimization pass signals that it has modified the Intermediate Representation (IR). If the `Changed` flag is true, it calls `invalidateAnalysis` with a specific `InvalidationKind` (here, `Instructions`), indicating that instructions within the current function have been added, deleted, or moved. This triggers the pass manager to notify relevant analyses that their cached results for this function might be stale.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerDesign.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n      if (Changed) {\n        invalidateAnalysis(InvalidationKind::Instructions);\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Demangling Library Build\nDESCRIPTION: Sets up build configuration for the Swift demangling library used by swiftCore and swiftRemoteInspection. Configures source files, compiler flags, and platform-specific settings including crash reporter and ObjC interop support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(swiftDemanglingSources\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Context.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Demangler.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/ManglingUtils.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/NodePrinter.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Punycode.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Remangler.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/NodeDumper.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Errors.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Swift Property Wrapper Symbols\nDESCRIPTION: Mangled symbols for property wrapper implementations including backing initializers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\n$s17property_wrappers10WithTuplesV9fractionsSd_S2dtvpfP\n```\n\n----------------------------------------\n\nTITLE: Illustrating Extension Binding with Typealiases in Swift\nDESCRIPTION: This example demonstrates the complexity of extension binding when typealiases are involved. It shows how resolving an extension can depend on resolving a typealias, which in turn depends on another extension being bound.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/DeclarationTypeChecker.rst#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nstruct B { }\ntypealias C = B.Inner\nextension C { }\nextension B { struct Inner { } }\n```\n\n----------------------------------------\n\nTITLE: Defining an Example Swift Function with Closure\nDESCRIPTION: This Swift code defines a generic function `example` containing a nested closure `foo`. This example serves as the basis for illustrating different argument indexing conventions in SIL throughout the document. The closure captures the generic type `t` and takes an `Int`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILFunctionConventions.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n```swift\nfunc example<T>(i: Int, t: T) -> (Int, T) {\n  let foo = { return ($0, t) }\n  return foo(i)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining C Functions with Swift Name Attribute for Argument Labels\nDESCRIPTION: This C header shows two function declarations. `drawString` is standard. `drawStringRenamed` uses the `SWIFT_NAME` macro (utilizing `__attribute__((swift_name(...)))`) to explicitly control its Swift signature, adding argument labels `x` and `y` for clearer calls from Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_7\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\n#define SWIFT_NAME(X) __attribute__((swift_name(#X)))\n\n// No argument labels by default.\nvoid drawString(const char *, int xPos, int yPos);\n\n// The attribute specifies the argument labels.\nvoid drawStringRenamed(const char *, int xPos, int yPos)\n    SWIFT_NAME(drawStringRenamed(_:x:y:));\n```\n\n----------------------------------------\n\nTITLE: ABI Implications of indirect Keyword on Swift Enums\nDESCRIPTION: Specifies that adding or removing the `indirect` keyword from enum cases or the enum declaration itself is not permitted for ABI stability. Such changes alter the enum's memory representation and are backward-incompatible.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nindirect\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation Flags for Swift Standard Library Unit Tests\nDESCRIPTION: Configures compilation flags for the Swift standard library unit tests, including disabling Objective-C attributes and optional leak checking.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnittest/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_stdlib_unittest_compile_flags\n  \"-Xfrontend\" \"-disable-objc-attr-requires-foundation-module\")\nif (SWIFT_RUNTIME_ENABLE_LEAK_CHECKER)\n  list(APPEND swift_stdlib_unittest_compile_flags \"-DSWIFT_RUNTIME_ENABLE_LEAK_CHECKER\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux Build Components with Swift\nDESCRIPTION: Example showing build and host configuration for compiling Swift components (compiler, runtime, stdlib) on Linux. Demonstrates basic single-platform build setup.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/BuildManifesto.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n[\n  /* compiler */ (build: \"x86_64-unknown-linux-gnu\", host: \"x86_64-unknown-linux-gnu\"),\n  /* runtime */  (build: \"x86_64-unknown-linux-gnu\", host: \"x86_64-unknown-linux-gnu\"),\n  /* stdlib */   (build: \"x86_64-unknown-linux-gnu\", host: \"x86_64-unknown-linux-gnu\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Declaring Range-Based Refactoring in C++\nDESCRIPTION: This code declares a range-based refactoring action for Extract Expression in the RefactoringKinds.def file. It specifies the internal name, display name, and stable key for the refactoring action.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nRANGE_REFACTORING(ExtractExpr, \"Extract Expression\", extract.expr)\n```\n\n----------------------------------------\n\nTITLE: Nested Optional Casting Consistency in Swift\nDESCRIPTION: This snippet shows how nested optional casting now produces consistent results, addressing issue #48681.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// Note: This issue includes many cases similar to the following\nlet x: Int? = nil\nprint(x as Int??) // ==> \"Optional(nil)\"\n// Swift 5.3: prints \"nil\"\n// Specification: should print \"Optional(nil)\" (same as above)\nprint((x as? Int??)!)\n```\n\n----------------------------------------\n\nTITLE: Defining a SIL Function Optimization Pass in C++\nDESCRIPTION: This C++ code snippet illustrates the structure of a simple Swift Intermediate Language (SIL) function optimization pass, named `CSE` (Common Subexpression Elimination). It defines a class inheriting from `SILFunctionTransform` and overrides the virtual `run()` method, which contains the core transformation logic for a single function, and the `getName()` method, which returns the identifier for the pass. Function passes operate on individual functions but can access module-level information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerDesign.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n  class CSE : public SILFunctionTransform {\n    void run() override {\n      // .. do stuff ..\n    }\n\n    StringRef getName() override {\n      return \"CSE\";\n    }\n  };\n```\n\n----------------------------------------\n\nTITLE: Defining Join Operations for Ownership Kinds in Swift SIL\nDESCRIPTION: These examples define the 'join' operation (moving up) within the Ownership Kind lattice. Joining `Any` with another kind yields that other kind. Joining compatible kinds like `Owned` and `Any` results in `Owned`. Joining incompatible kinds like `Owned` and `Guaranteed` results in `None`, signifying a loss of specific ownership information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nAny join OtherOwnershipKind -> OtherOwnershipKind\nOwned join Any -> Owned\nOwned join Guaranteed -> None\n```\n\n----------------------------------------\n\nTITLE: Basic String Literal Usage in Swift\nDESCRIPTION: Demonstrates a simple string literal usage example with NSWindow's setTitle method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Literals.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nwindow.setTitle(\"Welcome to Xcode\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Protocol Types and Conformance in Swift\nDESCRIPTION: Shows how protocol types can be used as existential types to hold conforming values, while demonstrating method calls on both concrete and protocol types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/protocol-type-non-conformance.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Animal {\n    func makeNoise()\n    static var species: String { get }\n}\nstruct Dog: Animal {\n    func makeNoise() { print(\"Woof\") }\n    static var species: String = \"Canus familiaris\"\n}\nstruct Cat: Animal {\n    func makeNoise() { print(\"Meow\") }\n    static var species: String = \"Felis catus\"\n}\n\nvar animal: Animal // `Animal` is used here as a type.\nanimal = Dog()\nanimal.makeNoise() // Prints \"Woof\".\nanimal = Cat()\nanimal.makeNoise() // Prints \"Meow\".\n```\n\n----------------------------------------\n\nTITLE: Defining differentiability_witness_function Instruction in Swift SIL\nDESCRIPTION: Describes the differentiability_witness_function instruction used to look up a differentiability witness function (JVP, VJP, or transpose) for a referenced function via SIL differentiability witnesses. It specifies the syntax and components identifying the witness.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_200\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::=\n    'differentiability_witness_function'\n    '[' sil-differentiability-witness-function-kind ']'\n    '[' differentiability-kind ']'\n    '[' 'parameters' sil-differentiability-witness-function-index-list ']'\n    '[' 'results' sil-differentiability-witness-function-index-list ']'\n    generic-parameter-clause?\n    sil-function-name ':' sil-type\n\nsil-differentiability-witness-function-kind ::= 'jvp' | 'vjp' | 'transpose'\nsil-differentiability-witness-function-index-list ::= [0-9]+ (' ' [0-9]+)*\n\ndifferentiability_witness_function [vjp] [reverse] [parameters 0] [results 0] \n  <T where T: Differentiable> @foo : $(T) -> T\n```\n\n----------------------------------------\n\nTITLE: Struct Destructuring for Owned Values in Swift SIL\nDESCRIPTION: Shows how to properly consume a struct's fields using destructure_struct instead of struct_extract for owned values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nstruct KlassPair {\n  var fieldOne: Klass\n  var fieldTwo: Klass\n}\n\nsil @getFirstPairElt : $@convention(thin) (@owned KlassPair) -> @owned Klass {\nbb0(%0 : @owned $KlassPair):\n  (%1, %2) = destructure_struct $KlassPair\n  destroy_value %2 : $Klass\n  return %1 : $Klass\n}\n```\n\n----------------------------------------\n\nTITLE: Backward Scanning Rule Example in Swift\nDESCRIPTION: Shows how the pre-Swift 5.3 backward scanning rule could lead to unexpected behavior by matching trailing closures to optional parameters instead of required ones.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/trailing-closure-matching.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nanimate(withDuration: 0.3) {\n  // Animate something?\n  // The compiler matches this to the `completion` parameter.\n}\n// error: missing argument for parameter 'animations' in call\n```\n\n----------------------------------------\n\nTITLE: Global Variable with Static Initializer Example in SIL\nDESCRIPTION: Example of a global variable declaration with a static initializer in SIL. The initializer is composed of literal values that form the initial value of the global variable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_43\n\nLANGUAGE: sil\nCODE:\n```\nsil_global hidden @$S4test3varSiv : $Int {\n  %0 = integer_literal $Builtin.Int64, 27\n  %initval = struct $Int (%0 : $Builtin.Int64)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Branch (sh)\nDESCRIPTION: Uses the `update-checkout` utility script located in the `utils` directory with the `--scheme` option. This command checks out a specific branch (e.g., a release branch or feature branch) across the main Swift repository and all its managed dependencies. Replace `mybranchname` with the actual desired branch name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nutils/update-checkout --scheme mybranchname\n```\n\n----------------------------------------\n\nTITLE: Constant Debug Values in SIL\nDESCRIPTION: Shows how to represent optimized-out constant values in debug information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_6\n\nLANGUAGE: sil\nCODE:\n```\ndebug_value undef : $Int, let, name \"x\", expr op_consts:1:op_fragment:#Int._value\n```\n\n----------------------------------------\n\nTITLE: Defining integer_literal Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for integer_literal which creates a builtin integer literal value of a specified type, using Swift's integer literal syntax to specify the value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_87\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'integer_literal' sil-type ',' int-literal\n\n%1 = integer_literal $Builtin.Int<n>, 123\n// $Builtin.Int<n> must be a builtin integer type\n// %1 has type $Builtin.Int<n>\n```\n\n----------------------------------------\n\nTITLE: Array Subscript Implementation with Semantic Annotations\nDESCRIPTION: Implementation of array subscript operator with separate semantically annotated methods for bounds checking and element access.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@public subscript(index: Int) -> Element {\n   get {\n    checkSubscript(index)\n    return getElement(index)\n   }\n\n@_semantics(\"array.check_subscript\") func checkSubscript(_ index: Int) {\n  ...\n}\n\n@_semantics(\"array.get_element\") func getElement(_ index: Int) -> Element {\n  return _buffer[index]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining function_ref Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for function_ref which creates a reference to a SIL function, typically used to reference functions for later application.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_80\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'function_ref' sil-function-name ':' sil-type\n\n%1 = function_ref @function : $@convention(thin) T -> U\n// $@convention(thin) T -> U must be a thin function type\n// %1 has type $T -> U\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to swiftSILOptimizer Target in CMake\nDESCRIPTION: This CMake command adds multiple C++ source files to the swiftSILOptimizer target. The files are related to differentiation, optimization, and various cloners used in the Swift compiler's SIL (Swift Intermediate Language) optimizer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/Differentiation/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  ADContext.cpp\n  AdjointValue.cpp\n  Common.cpp\n  DifferentiationInvoker.cpp\n  JVPCloner.cpp\n  LinearMapInfo.cpp\n  PullbackCloner.cpp\n  TangentBuilder.cpp\n  Thunk.cpp\n  VJPCloner.cpp)\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Foo Subclass with Convenience Initializers in Swift\nDESCRIPTION: Creates a private subclass of Foo with convenience initializers that override the parent class initializers. The convenience initializers all use failable initialization pattern.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nclass __PrivFooSub : Foo {\n  convenience init!(__oneArg arg: Int32)\n  convenience init!(__twoArgs arg: Int32, other arg2: Int32)\n  convenience init!(__ arg: Int32)\n  init()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Enum Type in Swift\nDESCRIPTION: Example of the Optional enum type declaration in Swift with generic type parameter T. It demonstrates the two cases: 'none' with no associated value and 'some' with an associated value of type T.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nenum Optional<T> {\n  case none\n  case some(T)\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Global Variable Initialization Purposes in SIL (BNF)\nDESCRIPTION: Defines function purposes related to global variable initialization using the '[global_init]', '[global_init_once_fn]', and '[lazy_getter]' attributes. These indicate that a function handles initialization (single or repeated) or property lazy loading. Ensures callsite constraints for effect timing and idempotency. Use when lowering Swift globals or lazy properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_7\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[' sil-function-purpose ']'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-purpose ::= 'global_init'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-purpose ::= 'global_init_once_fn'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-purpose ::= 'lazy_getter'\n```\n\n----------------------------------------\n\nTITLE: Importing and Calling C Functions in Swift with/without Labels\nDESCRIPTION: This Swift code demonstrates the imported signatures for C functions `drawString` (no labels) and `drawStringRenamed` (with `x:` and `y:` labels due to `SWIFT_NAME`). It includes example calls, highlighting the syntax difference based on the presence of argument labels.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nfunc drawString(_: UnsafePointer<CChar>!, _ xPos: CInt, _ yPos: CInt)\nfunc drawStringRenamed(_: UnsafePointer<CChar>!, x: CInt, y: CInt)\n\ndrawString(\"hello\", 10, 20)\ndrawStringRenamed(\"hello\", x: 10, y: 20)\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_COMPILER_VERSION Cache Variable in CMake\nDESCRIPTION: Defines a CMake cache variable `SWIFT_COMPILER_VERSION` of type STRING. This variable is intended to hold the internal version string of the Swift compiler. It defaults to an empty string.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_COMPILER_VERSION \"\" CACHE STRING\n    \"The internal version of the Swift compiler\")\n```\n\n----------------------------------------\n\nTITLE: Running Swift Test Suite via CMake Build (sh)\nDESCRIPTION: Shows how to execute the Swift test suite directly through CMake after building the Swift project. This command uses the `--build` flag to trigger the build process for a specific configuration (`build/Ninja-ReleaseAssert/swift-macosx-x86_64`) and then runs the corresponding test target (`check-swift-macosx-x86_64`). This method runs the tests defined in the CMake build system, typically encompassing the primary test suite.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Testing.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncmake --build build/Ninja-ReleaseAssert/swift-macosx-x86_64 -- check-swift-macosx-x86_64\n```\n\n----------------------------------------\n\nTITLE: Comparing Swift Compiler Performance Stats Using process-stats-dir.py (Shell)\nDESCRIPTION: Demonstrates comparing performance statistics between two Swift compiler versions. It involves compiling a test file (`test.swift`) with an older (`${OLD}/swiftc`) and a newer (`${NEW}/swiftc`) compiler, using `-stats-output-dir` to save stats to separate directories (`stats-old`, `stats-new`), and then using the `utils/process-stats-dir.py` script with the `--compare-stats-dirs` option to analyze and display the differences.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir stats-old stats-new\n$ ${OLD}/swiftc -stats-output-dir stats-old test.swift\n$ ${NEW}/swiftc -stats-output-dir stats-new test.swift\n$ utils/process-stats-dir.py --compare-stats-dirs stats-old stats-new\nold     new     delta_pct       name\n1402939 1430732 1.98    AST.NumASTBytesAllocated\n7       0       -100.0  AST.NumUsedConformances\n232     231     -0.43   Constraint solver largest system.LargestNumStatesExplored\n42      41      -2.38   Constraint solver largest system.LargestNumTypeVariableBindings\n38      37      -2.63   Constraint solver largest system.LargestNumTypeVariablesBound\n79      78      -1.27   Constraint solver largest system.LargestNumUnsimplifiedConstraints\n2593    2592    -0.04   Constraint solver overall.OverallNumStatesExplored\n589     588     -0.17   Constraint solver overall.OverallNumTypeVariableBindings\n482     481     -0.21   Constraint solver overall.OverallNumTypeVariablesBound\n972     971     -0.1    Constraint solver overall.OverallNumUnsimplifiedConstraints\n2593    2592    -0.04   ConstraintSystem.incrementScopeCounter\n2948    2947    -0.03   Generic signature builder.NumArchetypeAnchorCacheHits\n14767   15924   7.84    Generic signature builder.NumConformanceConstraints\n9701    10858   11.93   Generic signature builder.NumConformances\n5013    4241    -15.4   Generic signature builder.NumPotentialArchetypes\n5776    4084    -29.29  Generic signature builder.NumSameTypeConstraints\n...\n```\n\n----------------------------------------\n\nTITLE: Disallowed Protocol Existential with Generic Method in Swift\nDESCRIPTION: Demonstrates why generic methods with protocol existentials are not allowed in Embedded Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nprotocol MyProtocol: AnyObject {\n    func write<T>(t: T)\n}\n\nfunc usingProtocolAsExistential(p: any MyProtocol) {\n    p.write(t: 42) // ❌\n}\n```\n\n----------------------------------------\n\nTITLE: Swift KeyPath Component Header Structure\nDESCRIPTION: Bit layout for the 32-bit key path component header that describes each component in memory. Includes payload (bits 0-23), component kind (bits 24-30), and reference prefix flag (bit 31).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/KeyPaths.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@convention(thin) (@in Base, UnsafeRawPointer) -> @out Value\n```\n\nLANGUAGE: swift\nCODE:\n```\n@convention(thin) (@in Base, @in Value, UnsafeRawPointer) -> ()\n```\n\nLANGUAGE: swift\nCODE:\n```\n@convention(thin) (@inout Base, @in Value, UnsafeRawPointer) -> ()\n```\n\nLANGUAGE: swift\nCODE:\n```\n@convention(thin) (UnsafeMutableRawPointer) -> ()\n```\n\nLANGUAGE: swift\nCODE:\n```\n@convention(thin) (_ src: UnsafeRawPointer,\n                        _ dest: UnsafeMutableRawPointer) -> ()\n```\n\nLANGUAGE: swift\nCODE:\n```\n@convention(thin) (UnsafeRawPointer, UnsafeRawPointer) -> Bool\n```\n\nLANGUAGE: swift\nCODE:\n```\n@convention(thin) (UnsafeRawPointer, UnsafeRawPointer) -> Int\n```\n\n----------------------------------------\n\nTITLE: Destroying Values with destroy_value in SIL\nDESCRIPTION: Destroys a loadable value by releasing any retainable pointers within it. It's a no-op for trivial types, equivalent to strong_release for reference types, and unowned_release for @unowned types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_119\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'destroy_value' '[dead_end]'? '[poison]'? sil-operand\n\ndestroy_value %0 : $A\n```\n\n----------------------------------------\n\nTITLE: CoreFoundation Type Casting to Protocol in Swift\nDESCRIPTION: This snippet demonstrates the new consistent behavior of casting CoreFoundation types to protocols defined on companion Obj-C types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nprotocol P {}\nextension NSString: P {}\nlet a = CFStringCreateWithCString(nil, \"hello, world\",\n                CFStringBuiltInEncodings.UTF8.rawValue)\n// Swift 5.3: prints \"true\"\nprint(a is P)\nlet b: Any = a\n// Swift 5.3: prints \"false\"\n// Specification: prints \"true\"\nprint(b is P)\n```\n\n----------------------------------------\n\nTITLE: Swift Enum Definition - FooComparisonResult\nDESCRIPTION: Definition of comparison result enum with ascending, same, and descending cases. Implements raw value initialization with Int type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.txt#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nenum FooComparisonResult : Int {\n  init?(rawValue: Int)\n  var rawValue: Int { get }\n\n  // This is ascending\n  case orderedAscending\n  case orderedSame // But this is the same.\n  case orderedDescending\n}\n```\n\n----------------------------------------\n\nTITLE: Strong Retain of Unowned Reference in Swift Intermediate Language (SIL)\nDESCRIPTION: The strong_retain_unowned instruction asserts that an object's strong reference count is positive and increases it by one. This instruction is not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_57\n\nLANGUAGE: sil\nCODE:\n```\nstrong_retain_unowned %0 : $@unowned T\n// $T must be a reference type\n```\n\n----------------------------------------\n\nTITLE: Listing Skipped Benchmarks in Swift Benchmark_O\nDESCRIPTION: Shows how to list all benchmarks including those marked with 'skip' tag by explicitly setting empty skip-tags. This verifies that Existential benchmarks are properly tagged.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O --list --skip-tags= | %FileCheck %s --check-prefix LISTALL\nLISTALL: AngryPhonebook\nLISTALL: Existential.\nLISTALL-SAME: skip\n```\n\n----------------------------------------\n\nTITLE: Unsafe Method Accessing Global Variables in Swift\nDESCRIPTION: This example demonstrates how methods marked with the 'unsafe' attribute are allowed to access global variables, which would make them ineligible to be executed from worker threads.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar glob : Int = 1\n\nclass Bird {\n  unsafe func fly() { glob = 1}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Benchmark Naming Conventions in Swift\nDESCRIPTION: Examples of correct and incorrect benchmark naming patterns, showcasing the use of UpperCamelCase, periods for separation, and specific naming structures for different benchmark types and variants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/Naming.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n⛔️ Dictionary2\n✅ AngryPhonebook\n✅ Array.append.Array.Int\n✅ Dictionary.AnyHashable.String.update\n```\n\nLANGUAGE: markdown\nCODE:\n```\n✅ Array.append.Array.Int?\n✅ Bridging.NSArray.as!.Array.NSString\n✅ Flatten.Array.Tuple4.for-in.Reserve\n```\n\nLANGUAGE: markdown\nCODE:\n```\n✅ Seq.dropFirst.Array\n✅ Seq.dropLast.Range.lazy\n✅ Seq.dropWhile.UnfoldSeq\n✅ Seq.prefix.AnySeq.RangeIter.lazy\n✅ Seq.prefixWhile.AnyCol.Array\n✅ Seq.suffix.AnySeq.UnfoldSeq.lazy\n\n✅ Existential.Array.ConditionalShift.Ref1\n✅ Existential.Array.Mutating.Ref2\n✅ Existential.Array.method.1x.Ref3\n✅ Existential.Array.method.2x.Ref4\n✅ Existential.Array.Shift.Val0\n✅ Existential.MutatingAndNonMutating.Val1\n✅ Existential.Mutating.Val2\n✅ Existential.method.1x.Val3\n✅ Existential.method.2x.Val4\n✅ Existential.Pass2.method.1x.Ref1\n✅ Existential.Pass2.method.2x.Ref2\n\n✅ Set.isSubset.Int25\n✅ Set.symmetricDifference.Int50\n```\n\nLANGUAGE: markdown\nCODE:\n```\n⛔️ InsertCharacterTowardsEndIndexNonASCII\n```\n\nLANGUAGE: markdown\nCODE:\n```\n✅ String.insert.EmojiChar.NearEnd\n✅ String.insert.ASCIIChar.StartIndex\n✅ Flatten.Array.Tuple4.lazy.flatMap\n```\n\nLANGUAGE: markdown\nCODE:\n```\n✅ Bridging.NSDict.as!.Dict.NSString.NSNum\n✅ Seq.prefixWhile.AnySeq.UnfoldSeq.lazy\n```\n\n----------------------------------------\n\nTITLE: Defining Metatype and Existential Layout Mangling in Swift\nDESCRIPTION: This snippet defines the mangling rules for metatype representations and existential layouts in Swift, including protocols and superclasses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_32\n\nLANGUAGE: Swift\nCODE:\n```\nMETATYPE-REPR ::= 't'                      // Thin metatype representation\nMETATYPE-REPR ::= 'T'                      // Thick metatype representation\nMETATYPE-REPR ::= 'o'                      // ObjC metatype representation\n\nexistential-layout ::= protocol-list 'p'                 // existential layout\nexistential-layout ::= protocol-list superclass 'Xc'     // existential layout with superclass\nexistential-layout ::= protocol-list 'Xl'                // existential layout with AnyObject\n```\n\n----------------------------------------\n\nTITLE: Original and SIL Representation of a Differentiable Function (Swift and SIL)\nDESCRIPTION: This pair of code snippets presents both the original @differentiable Swift function and its corresponding simplified SIL pseudocode representation. The Swift function computes sin(x) * cos(x), demonstrating the basis for derivative code generation. The SIL block details how the function is lowered into core operations (%y1, %y2, %y3) and prepares for further differentiation passes. Inputs: x (Float). Outputs: result of trigonometric computation as Float.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable\nfunc f(_ x: Float) -> Float {\n    return sin(x) * cos(x)\n}\n```\n\nLANGUAGE: sil\nCODE:\n```\n// Simplified SIL pseudocode.\nsil @f : $(Float) -> Float {\nbb0(%x):\n  %y1 = apply @sin(%x)\n  %y2 = apply @cos(%x)\n  %y3 = apply @mul(%y1, %y2)\n  return %y3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Swift Functions for C Interoperability\nDESCRIPTION: Shows how to use @_silgen_name to provide a stable symbol name for a Swift function that can be called from Swift-aware C code, enabling cross-language interoperability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n@_silgen_name(\"_destroyTLS\")\ninternal func _destroyTLS(_ ptr: UnsafeMutableRawPointer?) {\n  // ... implementation ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Value Witness Kind Mangling Codes (BNF)\nDESCRIPTION: Lists the specific two-letter codes used in Swift's mangling scheme to identify different kinds of value witnesses. These witnesses are functions stored in type metadata (value witness tables) used for managing value lifetimes, layout, and fundamental operations like allocation, assignment, and destruction (e.g., 'al' for allocateBuffer, 'ca' for assignWithCopy, 'ta' for assignWithTake, 'de' for deallocateBuffer, 'xx' for destroy, 'XX' for destroyBuffer).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_14\n\nLANGUAGE: bnf\nCODE:\n```\nvalue-witness-kind ::= 'al'           // allocateBuffer\nvalue-witness-kind ::= 'ca'           // assignWithCopy\nvalue-witness-kind ::= 'ta'           // assignWithTake\nvalue-witness-kind ::= 'de'           // deallocateBuffer\nvalue-witness-kind ::= 'xx'           // destroy\nvalue-witness-kind ::= 'XX'           // destroyBuffer\n```\n\n----------------------------------------\n\nTITLE: Cursor Info Request Format\nDESCRIPTION: JSON format for requesting information about a specific symbol at a cursor position.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>:            (UID)     <source.request.cursorinfo>,\n    [opt] <key.sourcetext>:   (string)  // Source contents.\n    [opt] <key.sourcefile>:   (string)  // Absolute path to the file.\n                                        // **Require**: key.sourcetext or key.sourcefile\n    [opt] <key.offset>:       (int64)   // Byte offset of code point inside the source contents.\n    [opt] <key.usr>:          (string)  // USR string for the entity.\n                                        // **Require**: key.offset or key.usr\n    [opt] <key.compilerargs>: [string*] // Array of zero or more strings for the compiler arguments,\n                                        // e.g [\"-sdk\", \"/path/to/sdk\"]. If key.sourcefile is provided,\n                                        // these must include the path to that file.\n    [opt] <key.cancel_on_subsequent_request>: (int64) // Whether this request should be canceled if a\n                                        // new cursor-info request is made that uses the same AST.\n                                        // This behavior is a workaround for not having first-class\n                                        // cancelation. For backwards compatibility, the default is 1.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Stack Data Structure in Swift for SIL\nDESCRIPTION: Defines an allocation-free, array-like data structure named `Stack`. It is intended as a replacement for `Swift.Array` in scenarios within the SIL optimizer where random-access is not required, aiming for better performance. It relates to the `llvm::SmallVector` and `Stack` utilities in the C++ implementation. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nStack\n```\n\n----------------------------------------\n\nTITLE: Importing Normal Objective-C Methods into Swift (UIColor Example)\nDESCRIPTION: Demonstrates how standard Objective-C methods are imported into Swift, applying the 'omit needless words' naming convention. The Objective-C `UIColor` methods `colorWithAlphaComponent:` and `resolvedColorWithTraitCollection:` are translated into Swift methods `withAlphaComponent(_:)` and `resolvedColor(with:)`, respectively, showing adjustments to the base name and argument labels for Swift API guidelines.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_10\n\nLANGUAGE: objective-c\nCODE:\n```\n@interface UIColor : NSObject\n- (UIColor *)colorWithAlphaComponent:(CGFloat)alpha;\n- (UIColor *)resolvedColorWithTraitCollection:(UITraitCollection *)traitCollection;\n@end\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass UIColor {\n  func withAlphaComponent(_ alpha: CGFloat) -> UIColor\n  func resolvedColor(with traitCollection: UITraitCollection) -> UIColor\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Usage of Non-movable C++ Class\nDESCRIPTION: Example showing how non-movable C++ classes could be used in Swift with manual memory management.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_38\n\nLANGUAGE: swift\nCODE:\n```\nfunc useNonMovable(nm: NonMovable) {\n  var nm2 = nm\n  // `nm2` now points to the same object as `nm`. No reference-counting.\n\n  nm.debugPrint() // OK\n  nm2.debugPrint() // OK\n\n  nm2.delete() // OK\n  // The object is deallocated now. From this point, using `nm` or `nm2`\n  // is undefined behavior.\n}\n```\n\n----------------------------------------\n\nTITLE: Improved API Using Inner Pointers in Swift\nDESCRIPTION: Enhanced API design for importing move-only C++ classes, utilizing @_returnsInnerPointer to provide more ergonomic access to move-only members while still ensuring memory safety.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_30\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct TwoFiles {\n  private var _firstFile: <unspecified-opaque-storage>\n  private var _secondFile: <unspecified-opaque-storage>\n\n  @_returnsInnerPointer\n  var firstFile: UnsafePointer<File> { get }\n\n  @_returnsInnerPointer\n  var secondFile: UnsafePointer<File> { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Allocating Existential Boxes in SIL\nDESCRIPTION: Allocates boxed existential container with space for specified value type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_157\n\nLANGUAGE: sil\nCODE:\n```\n%1 = alloc_existential_box $P, $T\n```\n\n----------------------------------------\n\nTITLE: Swift Example - Class Move Only Operation\nDESCRIPTION: Demonstrates move-only semantics with class types and let bindings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nfunc doSomethingWithKlass(_ x: Klass) -> Klass {\n  @_noImplicitCopy let value = x\n  let value2 = value\n  return value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SIL Type Syntax (Grammar)\nDESCRIPTION: Describes the grammar for representing types within SIL. SIL types are always lowered types and are introduced with the `$` sigil. An optional `*` indicates an address type (`$*T`), followed by an optional generic parameter list and the base type definition, which largely follows Swift's type grammar.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_1\n\nLANGUAGE: grammar\nCODE:\n```\nsil-type ::= '$' '*'? generic-parameter-list? type\n```\n\n----------------------------------------\n\nTITLE: Initializing Existential Address in Swift SIL\nDESCRIPTION: Defines the init_existential_addr instruction in Swift SIL, which partially initializes memory with an existential container prepared to contain a value of a specific type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_147\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'init_existential_addr' sil-operand ',' sil-type\n\n%1 = init_existential_addr %0 : $*P, $T\n// %0 must be of a $*P address type for non-class protocol or protocol\n//   composition type P\n// $T must be an AST type that fulfills protocol(s) P\n// %1 will be of type $*T', where T' is the maximally abstract lowering\n//    of type T\n```\n\n----------------------------------------\n\nTITLE: SIL Instruction: store\nDESCRIPTION: Stores a value to memory at a given address. Supports different ownership kinds (trivial, init, assign) in OSSA. The type must be loadable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_27\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'store' sil-value 'to' store-ownership-kind? sil-operand\nstore-ownership-kind ::= '[trivial]'\nstore-ownership-kind ::= '[init]'\nstore-ownership-kind ::= '[assign]'\n\nstore %0 to [init] %1 : $*T\n```\n\n----------------------------------------\n\nTITLE: CI Command Table for Basic Testing\nDESCRIPTION: Table showing basic smoke and validation testing commands for @swift-ci across different platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPlatform     | Comment | Check Status\n------------ | ------- | ------------\nAll supported platforms     | @swift-ci Please smoke test                      | Swift Test Linux Platform (smoke test)<br>Swift Test macOS Platform (smoke test)\nAll supported platforms     | @swift-ci Please clean smoke test                | Swift Test Linux Platform (smoke test)<br>Swift Test macOS Platform (smoke test)\nmacOS platform              | @swift-ci Please smoke test macOS platform        | Swift Test macOS Platform (smoke test)\nmacOS platform              | @swift-ci Please clean smoke test macOS platform  | Swift Test macOS Platform (smoke test)\nLinux platform              | @swift-ci Please smoke test Linux platform       | Swift Test Linux Platform (smoke test)\nLinux platform              | @swift-ci Please clean smoke test Linux platform | Swift Test Linux Platform (smoke test)\n```\n\n----------------------------------------\n\nTITLE: Differentiable Function SIL Transform - Swift\nDESCRIPTION: Example showing how differentiable_function instructions are transformed during the differentiation pass, including the addition of JVP/VJP function references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Before:\n%fn_ref = function_ref @fn : $@convention(thin) (Float) -> Float\n%diff_fn = differentiable_function [wrt 0] %fn_ref\n\n// After differentiation transform:\n%fn_ref = function_ref @fn : $@convention(thin) (Float) -> Float\n%fn_jvp_ref = function_ref @fn_jvp : $@convention(thin) (Float) -> (Float, (Float) -> Float)\n%fn_vjp_ref = function_ref @fn_vjp : $@convention(thin) (Float) -> (Float, (Float) -> Float)\n%diff_fn = differentiable_function [wrt 0] %fn_ref with {%fn_jvp_ref, %fn_vjp_ref}\n// `@fn_jvp` and `@fn_vjp` may be generated.\n```\n\n----------------------------------------\n\nTITLE: Conditional Backtrace Support for Swift Runtime\nDESCRIPTION: Conditionally adds backtracing support source files to the Swift runtime when enabled. These files implement functionality for capturing stack traces and crash handling on different platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(SwiftCore_ENABLE_BACKTRACING)\n  target_sources(swiftRuntime PRIVATE\n    Backtrace.cpp\n    BacktraceUtils.cpp\n    CrashHandlerMacOS.cpp\n    CrashHandlerLinux.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining SmallProjectionPath in Swift for SIL\nDESCRIPTION: Defines `SmallProjectionPath`, a data structure used to describe a path of projections (like field accesses or tuple element accesses) applied to a base SIL value. It is related to the `AccessPath` and `ProjectionPath` concepts in the C++ utilities. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nSmallProjectionPath\n```\n\n----------------------------------------\n\nTITLE: Defining String Concatenation Operation in SIL\nDESCRIPTION: Defines the `string.concat` SIL operation which performs concatenation of two String operands without mutating them. This operation is optimizable when operands are string literals, allowing replacement with a single concatenated literal.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nstring.concat(lhs: String, rhs: String) -> String\n```\n\n----------------------------------------\n\nTITLE: Diagnostic Structure Format in SourceKit Documentation Responses\nDESCRIPTION: JSON schema for diagnostic objects returned in documentation responses. Diagnostics provide information about errors, warnings, and notes encountered during processing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\ndiagnostic ::=\n{\n    <key.id>:               (string)       // The internal ID of the diagnostic.\n    <key.line>:             (int64)        // The line upon which the diagnostic was emitted.\n    <key.column>:           (int64)        // The column upon which the diagnostic was emitted.\n    <key.filepath>:         (string)       // The absolute path to the file that was being parsed\n                                           // when the diagnostic was emitted.\n    <key.severity>:         (UID)          // The severity of the diagnostic. Can be one of:\n                                           //   - source.diagnostic.severity.note\n                                           //   - source.diagnostic.severity.warning\n                                           //   - source.diagnostic.severity.error\n    <key.description>:      (string)       // A description of the diagnostic.\n    [opt] <key.categories>: (array) [UID*] // The categories of the diagnostic. Can be:\n                                           //   - source.diagnostic.category.deprecation\n                                           //   - source.diagnostic.category.no_usage\n}\n```\n\n----------------------------------------\n\nTITLE: SIL Attributes for @get_subobject_non_bridged Method in Swift\nDESCRIPTION: Shows the low-level SIL attributes for a method marked with @get_subobject_non_bridged. These attributes specify the method's effects on self and non-self state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@nonbridged_effects(argonly)\n@selfeffects(preserve_unique, nowrite, nocapture, norelease,\n             projects_subobject)\nfunc getElement(_ index: Int) -> T {}\n```\n\n----------------------------------------\n\nTITLE: Implementing Empty Subscript for Collections in Swift\nDESCRIPTION: Defines an extension on Collection to provide an 'empty subscript' operation, allowing easy conversion to SubSequence types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nextension Collection {\n  subscript() -> SubSequence { \n    return self[startIndex..<endIndex] \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Type Mangling Rules (BNF)\nDESCRIPTION: Specifies the Backus-Naur Form (BNF)-like syntax for mangling various Swift types. This includes built-in types (like `Builtin.Int<n>`, `Builtin.Float<n>`, `Builtin.RawPointer`), nominal types (classes 'C', enums 'O', structs 'V'), function types ('F', 'f', 'K', '@thin' 'Xf'), generic type applications ('G'), metatypes ('M', 'XM'), protocol compositions ('P'), tuples ('T'), and type qualifiers like 'inout' ('R'), '@unowned' ('Xo', 'Xu'), '@weak' ('Xw'). It also defines rules for archetypes ('Q'), associated types ('w', 'W'), generic parameters ('x', 'q'), and SIL-specific types like '@box' ('Xb').\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_8\n\nLANGUAGE: bnf\nCODE:\n```\ntype ::= 'Bb'                              // Builtin.BridgeObject\ntype ::= 'BB'                              // Builtin.UnsafeValueBuffer\ntype ::= 'Bf' natural '_'                  // Builtin.Float<n>\ntype ::= 'Bi' natural '_'                  // Builtin.Int<n>\ntype ::= 'BO'                              // Builtin.UnknownObject\ntype ::= 'Bo'                              // Builtin.NativeObject\ntype ::= 'Bp'                              // Builtin.RawPointer\ntype ::= 'Bv' natural type                 // Builtin.Vec<n>x<type>\ntype ::= 'Bw'                              // Builtin.Word\ntype ::= nominal-type\ntype ::= associated-type\ntype ::= 'a' context identifier            // Type alias (DWARF only)\ntype ::= 'b' type type                     // objc block function type\ntype ::= 'c' type type                     // C function pointer type\ntype ::= 'F' throws-annotation? type type  // function type\ntype ::= 'f' throws-annotation? type type  // uncurried function type\ntype ::= 'G' type <type>+ '_'              // generic type application\ntype ::= 'K' type type                     // @auto_closure function type\ntype ::= 'M' type                          // metatype without representation\ntype ::= 'XM' metatype-repr type           // metatype with representation\ntype ::= 'P' protocol-list '_'             // protocol type\ntype ::= 'PM' type                         // existential metatype without representation\ntype ::= 'XPM' metatype-repr type          // existential metatype with representation\ntype ::= archetype\ntype ::= 'R' type                          // inout\ntype ::= 'T' tuple-element* '_'            // tuple\ntype ::= 't' tuple-element* '_'            // variadic tuple\ntype ::= 'Xo' type                         // @unowned type\ntype ::= 'Xu' type                         // @unowned(unsafe) type\ntype ::= 'Xw' type                         // @weak type\ntype ::= 'XF' impl-function-type           // function implementation type\ntype ::= 'Xf' type type                    // @thin function type\ntype ::= 'Xb' type                         // SIL @box type\nnominal-type ::= known-nominal-type\nnominal-type ::= substitution\nnominal-type ::= nominal-type-kind declaration-name\nnominal-type-kind ::= 'C'                  // class\nnominal-type-kind ::= 'O'                  // enum\nnominal-type-kind ::= 'V'                  // struct\ndeclaration-name ::= context decl-name\narchetype ::= 'Q' index                    // archetype with depth=0, idx=N\narchetype ::= 'Qd' index index             // archetype with depth=M+1, idx=N\narchetype ::= associated-type\narchetype ::= qualified-archetype\nassociated-type ::= substitution\nassociated-type ::= 'Q' protocol-context     // self type of protocol\nassociated-type ::= 'Q' archetype identifier // associated type\nqualified-archetype ::= 'Qq' index context   // archetype+context (DWARF only)\nprotocol-context ::= 'P' protocol\ntuple-element ::= identifier? type\nmetatype-repr ::= 't'                      // Thin metatype representation\nmetatype-repr ::= 'T'                      // Thick metatype representation\nmetatype-repr ::= 'o'                      // ObjC metatype representation\nthrows-annotation ::= 'z'                  // 'throws' annotation on function types\n\n\ntype ::= 'u' generic-signature type        // generic type\ntype ::= 'x'                               // generic param, depth=0, idx=0\ntype ::= 'q' generic-param-index           // dependent generic parameter\ntype ::= 'q' type assoc-type-name          // associated type of non-generic param\ntype ::= 'w' generic-param-index assoc-type-name // associated type\ntype ::= 'W' generic-param-index assoc-type-name+ '_' // associated type at depth\n\ngeneric-param-index ::= 'x'                // depth = 0,   idx = 0\ngeneric-param-index ::= index              // depth = 0,   idx = N+1\ngeneric-param-index ::= 'd' index index    // depth = M+1, idx = N\n```\n\n----------------------------------------\n\nTITLE: Private Access Control in Swift\nDESCRIPTION: The `private` access control specifier restricts the use of a declaration to its enclosing declaration and extensions of that declaration within the same file. A `@_transparent` function generally cannot call `private` functions if it needs to be inlined across modules or files where the private function is not accessible.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TransparentAttr.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nprivate\n```\n\n----------------------------------------\n\nTITLE: Setting Up Stack Frame in x86-64 Assembly\nDESCRIPTION: This code snippet demonstrates how a typical non-leaf function sets up its stack frame on x86-64 architecture. It pushes the base pointer, sets up a new frame pointer, and allocates space for local variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/CallingConventionSummary.rst#2025-04-23_snippet_0\n\nLANGUAGE: x86-64 Assembly\nCODE:\n```\npush %rbp\nmov  %rsp, %rbp\nsub  <local-size>, %rsp\n```\n\n----------------------------------------\n\nTITLE: C++ Function Template Definition Example\nDESCRIPTION: Demonstrates a basic C++ function template declaration with an explicit specialization for int type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_54\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename T>\nvoid functionTemplate(T t) { ... }\n\ntemplate<>\nvoid functionTemplate(int x) { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Struct Initializer Entry-points in Swift SIL\nDESCRIPTION: These snippets show the SIL representation for non-delegating and delegating struct initializers in Swift. Both examples use a metatype argument for allocation and initialization, following Swift's convention for struct and enum initializers. The delegating initializer demonstrates how one initializer can call another within SIL, using apply for delegation. Requires familiarity with SIL and knowledge of Swift AST lowering.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILInitializerConventions.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// the non-delegating init MyStruct.init(final:)\nsil hidden [ossa] @$s4test8MyStructV5finalACSi_tcfC : $@convention(method) (<...>, @thin MyStruct.Type) -> MyStruct {\nbb0(<...>, %meta : $@thin MyStruct.Type):\n  %a = alloc_box ${ var MyStruct }, var, name \"self\"\n  %b = mark_uninitialized [rootself] %a : ${ var MyStruct }\n  %c = begin_borrow [lexical] %b : ${ var MyStruct }\n  %d = project_box %c : ${ var MyStruct }, 0\n  \n  // ... initialize properties, etc ...\n  \n  %end = load [trivial] %d : $*MyStruct\n  end_borrow %c : ${ var MyStruct }\n  destroy_value %b : ${ var MyStruct }\n  return %end : $MyStruct\n}\n\n\n// the delegating init MyStruct.init(delegates:)\nsil hidden [ossa] @$s4test8MyStructV9delegatesACyt_tcfC : $@convention(method) (<...>, @thin MyStruct.Type) -> MyStruct {\nbb0(<...>, %meta : $@thin MyStruct.Type):\n  // Same allocation as the non-delegating:\n  %a = alloc_box ${ var MyStruct }, var, name \"self\"\n  %b = mark_uninitialized [rootself] %a : ${ var MyStruct }\n  %c = begin_borrow [lexical] %b : ${ var MyStruct }\n  %d = project_box %c : ${ var MyStruct }, 0\n  \n  // ... delegate to MyStruct.init(final:) ...\n  \n  %ctor = function_ref @$s4test8MyStructV5finalACSi_tcfC : $@convention(method) (Int, @thin MyStruct.Type) -> MyStruct\n  %ret = apply %ctor(<...>, %meta) : $@convention(method) (Int, @thin MyStruct.Type) -> MyStruct\n  \n  assign %ret to %d : $*MyStruct\n  %end = load [trivial] %d : $*MyStruct\n  end_borrow %c : ${ var MyStruct }\n  destroy_value %b : ${ var MyStruct }\n  return %end : $MyStruct\n}\n```\n\n----------------------------------------\n\nTITLE: Async Enumeration Processing in Swift\nDESCRIPTION: Shows async processing of enum values with type inference and thread safety.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nenum Shape {\n  case circle, oval, square, triangle\n}\n\nlet res = async(Shape.oval) { (c: Shape) -> String in\n  switch c {\n    case .circle:   return \"Circle\"\n    case .oval:     return \"Oval\"\n    case .square:   return \"Square\"\n    case .triangle: return \"Triangle\"\n  }\n}\n\n//CHECK: Shape: Oval\nprint(\"Shape: \\(res.await())\")\n```\n\n----------------------------------------\n\nTITLE: Defining end_apply Instruction in Swift Intermediate Language\nDESCRIPTION: Specifies the syntax for the end_apply instruction, which ends a suspended coroutine activation. It transfers control back to the coroutine, taking the resume path from the yield point, and returns when the coroutine reaches a return instruction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_99\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'end_apply' sil-value 'as' sil-type\n\nend_apply %token as $()\n```\n\n----------------------------------------\n\nTITLE: Raw Pointer to Reference Conversion in Swift SIL\nDESCRIPTION: Converts a Builtin.RawPointer back to a heap object reference. Must be used with pointers obtained from ref_to_raw_pointer for the same type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_168\n\nLANGUAGE: swift\nCODE:\n```\n%1 = raw_pointer_to_ref %0 : $Builtin.RawPointer to $C\n```\n\n----------------------------------------\n\nTITLE: Adding Swift AST Library in CMake\nDESCRIPTION: Defines the Swift AST library as a static host library and specifies its source files. This extensive list of source files covers various aspects of the Swift AST, including declarations, expressions, types, and requirement machines.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/AST/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftAST STATIC\n  AbstractSourceFileDepGraphFactory.cpp\n  AccessNotes.cpp\n  AccessRequests.cpp\n  ActorIsolation.cpp\n  ArgumentList.cpp\n  ASTContext.cpp\n  ASTDemangler.cpp\n  ASTDumper.cpp\n  ASTMangler.cpp\n  ASTNode.cpp\n  ASTPrinter.cpp\n  ASTScope.cpp\n  ASTScopeCreation.cpp\n  ASTScopeLookup.cpp\n  ASTScopePrinting.cpp\n  ASTScopeSourceRange.cpp\n  ASTVerifier.cpp\n  ASTWalker.cpp\n  Attr.cpp\n  AutoDiff.cpp\n  Availability.cpp\n  AvailabilityConstraint.cpp\n  AvailabilityContext.cpp\n  AvailabilityDomain.cpp\n  AvailabilityScope.cpp\n  AvailabilityScopeBuilder.cpp\n  AvailabilitySpec.cpp\n  Builtins.cpp\n  CaptureInfo.cpp\n  ClangSwiftTypeCorrespondence.cpp\n  ClangTypeConverter.cpp\n  Concurrency.cpp\n  ConcreteDeclRef.cpp\n  ConformanceLookup.cpp\n  ConformanceLookupTable.cpp\n  Decl.cpp\n  DeclContext.cpp\n  DeclContextDumper.cpp\n  DeclNameLoc.cpp\n  DiagnosticArgument.cpp\n  DiagnosticBridge.cpp\n  DiagnosticConsumer.cpp\n  DiagnosticEngine.cpp\n  DiagnosticGroups.cpp\n  DiagnosticList.cpp\n  DistributedDecl.cpp\n  DocComment.cpp\n  Effects.cpp\n  Evaluator.cpp\n  ExistentialGeneralization.cpp\n  Expr.cpp\n  ExtInfo.cpp\n  FeatureSet.cpp\n  FineGrainedDependencies.cpp\n  FineGrainedDependencyFormat.cpp\n  FreestandingMacroExpansion.cpp\n  FrontendSourceFileDepGraphFactory.cpp\n  FunctionRefInfo.cpp\n  GenericEnvironment.cpp\n  GenericParamList.cpp\n  GenericSignature.cpp\n  Identifier.cpp\n  ImportCache.cpp\n  IndexSubset.cpp\n  InlinableText.cpp\n  LayoutConstraint.cpp\n  LifetimeDependence.cpp\n  LocalArchetypeRequirementCollector.cpp\n  Module.cpp\n  ModuleDependencies.cpp\n  ModuleLoader.cpp\n  ModuleNameLookup.cpp\n  NameLookup.cpp\n  NameLookupRequests.cpp\n  OperatorNameLookup.cpp\n  PackConformance.cpp\n  PackExpansionMatcher.cpp\n  ParameterPack.cpp\n  Parameter.cpp\n  Pattern.cpp\n  PlatformKind.cpp\n  PluginLoader.cpp\n  PluginRegistry.cpp\n  PrettyStackTrace.cpp\n  ProtocolConformance.cpp\n  ProtocolConformanceRef.cpp\n  RawComment.cpp\n  Requirement.cpp\n  RequirementEnvironment.cpp\n  RequirementMachine/ConcreteContraction.cpp\n  RequirementMachine/ConcreteTypeWitness.cpp\n  RequirementMachine/Diagnostics.cpp\n  RequirementMachine/GenericSignatureQueries.cpp\n  RequirementMachine/HomotopyReduction.cpp\n  RequirementMachine/InterfaceType.cpp\n  RequirementMachine/KnuthBendix.cpp\n  RequirementMachine/MinimalConformances.cpp\n  RequirementMachine/NameLookup.cpp\n  RequirementMachine/NormalizeRewritePath.cpp\n  RequirementMachine/PropertyMap.cpp\n  RequirementMachine/PropertyRelations.cpp\n  RequirementMachine/PropertyUnification.cpp\n  RequirementMachine/RequirementBuilder.cpp\n  RequirementMachine/RequirementLowering.cpp\n  RequirementMachine/RequirementMachine.cpp\n  RequirementMachine/RequirementMachineRequests.cpp\n  RequirementMachine/RewriteContext.cpp\n  RequirementMachine/RewriteLoop.cpp\n  RequirementMachine/RewriteSystem.cpp\n  RequirementMachine/Rule.cpp\n  RequirementMachine/RuleBuilder.cpp\n  RequirementMachine/SimplifySubstitutions.cpp\n  RequirementMachine/Symbol.cpp\n  RequirementMachine/Term.cpp\n  RequirementMachine/TypeDifference.cpp\n  SearchPathOptions.cpp\n  SILLayout.cpp\n  Stmt.cpp\n  StorageImpl.cpp\n  SubstitutionMap.cpp\n  SwiftNameTranslation.cpp\n  Type.cpp\n  TypeCheckRequests.cpp\n  TypeDeclFinder.cpp\n  TypeJoinMeet.cpp\n  TypeRepr.cpp\n  TypeSubstitution.cpp\n  TypeWalker.cpp\n  UnqualifiedLookup.cpp\n  USRGeneration.cpp\n\n  LLVM_LINK_COMPONENTS\n  ${SWIFTAST_LLVM_LINK_COMPONENTS}\n  )\n```\n\n----------------------------------------\n\nTITLE: Implementing cycle_length for Generic Types in Swift\nDESCRIPTION: Alternative implementation of the cycle_length algorithm that works with both value types and clonable classes by passing next and equal functions as parameters. However, this implementation makes O(N) separate copies of the state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ValueSemantics.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc cycle_length<State>(\n  _ s : State,\n  next : (x : State) -> State,\n  equal : (x : [inout] State, y : [inout] State) -> Bool\n) -> Int\n  requires State : EqualityComparable\n{\n    State x = next(s)\n    Int n = 1\n    while !equal(x, s) {\n         x = next(x)\n         ++n\n    }\n    return n\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Value Instructions in SIL\nDESCRIPTION: Instructions for debug value handling with various attributes and expressions for tracking variable values and locations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_22\n\nLANGUAGE: sil\nCODE:\n```\ndebug_value %1 : $Int\n```\n\nLANGUAGE: sil\nCODE:\n```\ndebug_value %a : $*Int, name \"x\", expr op_deref\n```\n\nLANGUAGE: sil\nCODE:\n```\ndebug_value %b : $**Int, name \"y\", expr op_deref:op_deref\n```\n\nLANGUAGE: sil\nCODE:\n```\n%a = alloc_stack $Int, ...\ndebug_value %a : $*Int, name \"my_var\"\n```\n\n----------------------------------------\n\nTITLE: IWYU Run Script\nDESCRIPTION: Bash script to run IWYU analysis on Swift project files, filtering out Objective-C files and handling C++ include paths\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/RunningIncludeWhatYouUse.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\n# iwyu_run.sh\nset -eu\n\nSWIFT_PROJECT_DIR=\"$HOME/swift-project\"\nSWIFT_BUILD_DIR=\"$SWIFT_PROJECT_DIR/build/Ninja-ReleaseAssert/swift-macosx-x86_64\"\n\npushd \"$SWIFT_BUILD_DIR\"\n\nif [ -f original_compile_commands.json ]; then\n    mv original_compile_commands.json compile_commands.json\nfi\n\n# HACK: The additional include path needs to be added before other include\n# paths, it doesn't seem to work if we add it at the end.\n# It is ok to rely on the presence of `-D__STDC_LIMIT_MACROS` flag, since\n# it is added by the LLVM CMake configuration for all compilation commands.\n( EXTRA_CXX_INCLUDE_DIR=\"$(clang++ -print-resource-dir)/../../../include/c++/v1\";\n  cat compile_commands.json \\\n | jq '[.[] | select(.file | test(\"\\.mm\" | \"\\.m\") | not) | {directory: .directory, command: (.command + \" -Wno-everything -ferror-limit=1\"), file: .file}]' \\\n | sed -e \"s|-D__STDC_LIMIT_MACROS |-D__STDC_LIMIT_MACROS -I $EXTRA_CXX_INCLUDE_DIR |\" \\\n) > filtered_compile_commands.json\n\nmv compile_commands.json original_compile_commands.json\nmv filtered_compile_commands.json compile_commands.json\n\nmkdir -p \"$SWIFT_PROJECT_DIR/iwyu/logs\"\n\n( PATH=\"$SWIFT_PROJECT_DIR/iwyu/build/bin:$PATH\"; \\\n  \"$SWIFT_PROJECT_DIR/iwyu/include-what-you-use/iwyu_tool.py\" -p \"$SWIFT_BUILD_DIR\"\n) | tee \"$SWIFT_PROJECT_DIR/iwyu/logs/suggestions.log\"\n\npopd\n```\n\n----------------------------------------\n\nTITLE: Testing with FileCheck Based on Target Pointer Size\nDESCRIPTION: Pattern for writing FileCheck tests that validate different outputs based on 32-bit vs 64-bit pointer sizes. This approach uses a combined set of CHECK lines in a single pass with target-specific prefixes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Testing.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// RUN: %target-swift-frontend ... | %FileCheck --check-prefix=CHECK --check-prefix=CHECK-%target-ptrsize %s\n\n// CHECK: common line\n// CHECK-32: only for 32-bit\n// CHECK-64: only for 64-bit\n\n// FileCheck does a single pass for a combined set of CHECK lines, so you can\n// do this:\n//\n// CHECK: define @foo() {\n// CHECK-32: integer_literal $Builtin.Int32, 0\n// CHECK-64: integer_literal $Builtin.Int64, 0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SourceKit Protocol Format\nDESCRIPTION: Shows the basic format used to document the SourceKit protocol throughout the documentation, with explanations of notation conventions for dictionaries, arrays, and optional keys.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{\n    <KEY>: (type) // comments\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling swift-inspect for Android on Windows\nDESCRIPTION: Batch script commands for cross-compiling swift-inspect for Android on Windows, setting up the Android environment variables and passing necessary Swift compiler flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/README.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nset ANDROID_ARCH=aarch64\nset ANDROID_API_LEVEL=29\nset ANDROID_CLANG_VERSION=17.0.2\nset ANDROID_NDK_ROOT=C:\\Android\\android-sdk\\ndk\\26.3.11579264\nset SDKROOT_ANDROID=%LocalAppData%\\Programs\\Swift\\Platforms\\0.0.0\\Android.platform\\Developer\\SDKs\\Android.sdk\nswift build --triple %ANDROID_ARCH%-unknown-linux-android%ANDROID_API_LEVEL% ^\n    --sdk %ANDROID_NDK_ROOT%\\toolchains\\llvm\\prebuilt\\windows-x86_64\\sysroot ^\n    -Xswiftc -sdk -Xswiftc %SDKROOT_ANDROID% ^\n    -Xswiftc -sysroot -Xswiftc %ANDROID_NDK_ROOT%\\toolchains\\llvm\\prebuilt\\windows-x86_64\\sysroot ^\n    -Xswiftc -I -Xswiftc %SDKROOT_ANDROID%\\usr\\include ^\n    -Xswiftc -Xclang-linker -Xswiftc -resource-dir -Xswiftc -Xclang-linker -Xswiftc %ANDROID_NDK_ROOT%\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\clang\\%ANDROID_CLANG_VERSION% ^\n    -Xlinker -L%ANDROID_NDK_ROOT%\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\clang\\%ANDROID_CLANG_VERSION%\\lib\\linux\\%ANDROID_ARCH% ^\n    -Xcc -I%SDKROOT_ANDROID%\\usr\\include\\swift\\SwiftRemoteMirror ^\n    -Xlinker %SDKROOT_ANDROID%\\usr\\lib\\swift\\android\\%ANDROID_ARCH%\\libswiftRemoteMirror.so\n```\n\n----------------------------------------\n\nTITLE: Suppressing Deinitializers with drop_deinit in SIL\nDESCRIPTION: Marks a move-only type to suppress its deinitializer call upon destruction. For object types, it consumes its operand and produces a new value of the same type. For address types, it allows accessing the value's fields without calling its deinitializer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_115\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'drop_deinit' sil-operand\n\n%1 = drop_deinit %0 : $T\n// T must be a move-only type\n// %1 is an @owned T\n%3 = drop_deinit %2 : $*T\n// T must be a move-only type\n// %2 has type *T\n```\n\n----------------------------------------\n\nTITLE: Defining Thunk and Method Descriptor Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for various types of thunks, including resilient method dispatch, ObjC interop, dynamic dispatch, and method descriptors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= global 'Tj'                 // resilient method dispatch thunk\nglobal ::= global 'Tq'                 // method descriptor\n\nglobal ::= global 'TO'                 // ObjC-as-swift thunk\nglobal ::= global 'To'                 // swift-as-ObjC thunk\nglobal ::= global 'TD'                 // dynamic dispatch thunk\nglobal ::= global 'Td'                 // direct method reference thunk\nglobal ::= global 'TE'                 // distributed actor thunk\nglobal ::= global 'TF'                 // distributed method accessor\nglobal ::= global 'TI'                 // implementation of a dynamic_replaceable function\nglobal ::= global 'Tu'                 // async function pointer of a function\nglobal ::= global 'TX'                 // function pointer of a dynamic_replaceable function\nglobal ::= global 'Twb'                // back deployment thunk\nglobal ::= global 'TwB'                // back deployment fallback function\nglobal ::= global 'Twc'                // coro function pointer of a function\nglobal ::= global 'Twd'                // default override of a function\nglobal ::= entity entity 'TV'          // vtable override thunk, derived followed by base\n```\n\n----------------------------------------\n\nTITLE: Accessing Code Points and Bytes in Swift Strings\nDESCRIPTION: Demonstrates how to access lower-level elements of a Swift string, including code points and raw bytes. This shows the direct access to these underlying representations while maintaining the string's higher-level abstractions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\ns.codePoints[s.codePoints.start]\n// r1 : CodePoint = CodePoint(83) /* S */\ns.bytes[s.bytes.start]\n// r2 : UInt8 = UInt8(83)\n```\n\n----------------------------------------\n\nTITLE: Standalone SwiftPM Build for Benchmarks\nDESCRIPTION: Commands to build the benchmark suite directly with SwiftPM without build-script, showing how to compile and run the benchmarks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nswift-source/swift/benchmark$ swift build --configuration release\nswift-source/swift/benchmark$ .build/release/SwiftBench\n#,TEST,SAMPLES,MIN(μs),MAX(μs),MEAN(μs),SD(μs),MEDIAN(μs)\n1,Ackermann,1,169,169,169,0,169\n2,AngryPhonebook,1,2044,2044,2044,0,2044\n...\n```\n\n----------------------------------------\n\nTITLE: Swift C++ Type Mapping Definitions\nDESCRIPTION: Defines Swift typealiases for mapping C++ pointer and reference types unambiguously.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_56\n\nLANGUAGE: swift\nCODE:\n```\ntypealias CxxPointer<T> = UnsafeMutablePointer<T>      // T*\ntypealias CxxConstPointer<T> = UnsafePointer<T>        // const T*\n\ntypealias CxxRef<T> = UnsafeMutablePointer<T>          // T&\ntypealias CxxConstRef<T> = UnsafePointer<T>            // const T&\n\ntypealias CxxRvalueRef<T> = UnsafeMutablePointer<T>    // T&&\ntypealias CxxConstRvalueRef<T> = UnsafePointer<T>      // const T&&\n```\n\n----------------------------------------\n\nTITLE: Adding associatedtype Requirements to Swift Protocols\nDESCRIPTION: Explains that a new `associatedtype` requirement can be added to a protocol under ABI stability rules, provided it has a default implementation and appropriate availability. Removing an associated type requirement or its default is forbidden. Adding the first associated type can be a source-breaking change.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nassociatedtype\n```\n\n----------------------------------------\n\nTITLE: Building Swift on OpenBSD using build-script (Shell)\nDESCRIPTION: Executes the `build-script` utility with flags necessary for compiling Swift on OpenBSD. Key flags include `--release` for optimization, skipping certain LLVM components (`--skip-build-clang-tools-extra`, `--skip-build-compiler-rt`), and passing specific CMake options via `--extra-cmake-options`. These options disable unsupported features (Backtrace, LibXml2, Dispatch, SourceKit, Concurrency, Distributed), set LLVM build parameters, specify `lld` as the linker, and define the installation directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OpenBSD.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ ./utils/build-script \\\n    --release \\\n    --skip-build-clang-tools-extra \\\n    --skip-build-compiler-rt \\\n    --extra-cmake-options=\\\"\\\n        -DCMAKE_DISABLE_FIND_PACKAGE_Backtrace=TRUE,\\\\\n        -DCMAKE_DISABLE_FIND_PACKAGE_LibXml2=TRUE,\\\\\n        -DLLVM_VERSION_SUFFIX='',\\\\\n        -DSWIFT_ENABLE_DISPATCH=OFF,\\\\\n        -DSWIFT_BUILD_SOURCEKIT=OFF,\\\\\n        -DSWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY=OFF,\\\\\n        -DSWIFT_IMPLICIT_CONCURRENCY_IMPORT=OFF,\\\\\n        -DSWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED=OFF,\\\\\n        -DSWIFT_USE_LINKER=lld,\\\\\n        -DCMAKE_INSTALL_DIR=/usr/local\\\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Applicability Check for Range-Based Refactoring in C++\nDESCRIPTION: This snippet implements the isApplicable function for the Extract Expression refactoring. It checks if the selected range is a single expression with a well-formed type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nbool RefactoringActionExtractExpr::\nisApplicable(ResolvedRangeInfo Info) {\n  if (Info.Kind != RangeKind::SingleExpression)\n    return false;\n  auto Ty = Info.getType();\n  if (Ty.isNull() || Ty.hasError())\n    return false;\n  ...\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Non-destructive Move Implementation - Option 2\nDESCRIPTION: Alternative implementation using C++ move constructor with protocol and free function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_36\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol NonDestructivelyMovable {\n  public init(cxxMovingFrom: inout Self)\n}\n\npublic moveonly func cxxMove<T: NonDestructivelyMovable>(_ value: inout T) -> T {\n  return T(cxxMovingFrom: &value)\n}\n```\n\n----------------------------------------\n\nTITLE: Annotation Structure Format in SourceKit Documentation Responses\nDESCRIPTION: JSON schema for annotation objects returned in documentation responses. Each annotation identifies a token's kind, position, and length in the source code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\nannotation ::=\n{\n    <key.kind>:   (UID)   // UID for the declaration kind (function, class, etc.).\n    <key.offset>: (int64) // Location of the annotated token.\n    <key.length>: (int64) // Length of the annotated token.\n}\n```\n\n----------------------------------------\n\nTITLE: Mark Uninitialized Behavior Instruction in SIL\nDESCRIPTION: Defines the mark_uninitialized_behavior instruction for handling uninitialized logical properties, specifying initialization and setter behavior based on property state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_39\n\nLANGUAGE: sil\nCODE:\n```\ninit-case ::= sil-value sil-apply-substitution-list? '(' sil-value ')' ':' sil-type\nset-case ::= sil-value sil-apply-substitution-list? '(' sil-value ')' ':' sil-type\nsil-instruction ::= 'mark_uninitialized_behavior' init-case set-case\n\nmark_uninitialized_behavior %init<Subs>(%storage) : $T -> U,\n                            %set<Subs>(%self) : $V -> W\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for swiftSILOptimizer Target in CMake\nDESCRIPTION: This CMake code snippet specifies the source files to be compiled for the swiftSILOptimizer target. It includes five C++ files that are essential components of the Swift Intermediate Language optimizer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/PassManager/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  PassManager.cpp\n  Passes.cpp\n  PassPipeline.cpp\n  PrettyStackTrace.cpp\n  SILOptimizerRequests.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Private Global Constants and Enums in Swift\nDESCRIPTION: Declares private global constants and private enums that conform to Hashable, Equatable, and RawRepresentable protocols. Each enum has associated constants of its type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nvar __E0PrivA: E0 { get }\nstruct __PrivE1 : Hashable, Equatable, RawRepresentable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n  typealias RawValue = UInt32\n}\nvar __PrivE1A: __PrivE1 { get }\nstruct __PrivE2 : Hashable, Equatable, RawRepresentable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n  typealias RawValue = UInt32\n}\nvar __PrivE2A: __PrivE2 { get }\n```\n\n----------------------------------------\n\nTITLE: Implementing Interior Pointer Conversions in Swift\nDESCRIPTION: Shows the implementation of interior pointer conversions for Swift Arrays. These methods allow safe passing of array pointers to C functions while managing lifetime and copy-on-write behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nextension Array {\n  @unsafe_interior_pointer_conversion\n  func convertToConstPointer()\n  -> (CConstPointer<T>, ArrayBuffer<T>) {\n    return (CConstPointer(self.base), self.owner)\n  }\n\n  @unsafe_interior_pointer_conversion\n  mutating func convertToMutablePointer()\n  -> (CMutablePointer<T>, ArrayBuffer<T>) {\n    // Make the backing buffer unique before handing out a mutable pointer.\n    self.makeUnique()\n    return (CMutablePointer(self.base), self.owner)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unavailable Feature Marking in Embedded Swift\nDESCRIPTION: Shows how to mark code as unavailable in Embedded Swift using the @_unavailableInEmbedded attribute, useful for features not supported in the embedded environment.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@_unavailableInEmbedded\nfunc useAny(_: Any) { ... }\n\n@_unavailableInEmbedded\nextension MyStruct: Codable {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Weakly Imported SIL Functions in Swift (BNF)\nDESCRIPTION: Uses the '[weak_imported]' attribute that signifies a function's cross-module references should employ weak linking. Essential when dealing with optional external method availability across platforms. Input: SIL function, output: function linked as weak. Limitation: platform-dependent behavior if target is missing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_8\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[weak_imported]'\n```\n\n----------------------------------------\n\nTITLE: Illustrating Unexpected Copying with Function Parameters in Swift\nDESCRIPTION: This code shows how passing an array by value (`+1` retain) to a function and then reassigning it to a local mutable variable (`var a = a`) before mutation can trigger an unnecessary copy. Even though the original array passed to the function might not be used afterwards, the retain and subsequent mutation on the local copy necessitate COW.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc append_one(_ a: [Int]) -> [Int] {\n  var a = a\n  a.append(1)\n  return a\n}\n\nvar a = [1, 2, 3]\na = append_one(a)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Optimizer Module Dependencies in CMake\nDESCRIPTION: Sets up the dependencies for the Swift Optimizer module and creates the module with those dependencies. The Optimizer depends on Basic, AST, and SIL modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(dependencies)\nlist(APPEND dependencies Basic AST SIL)\n\nadd_swift_compiler_module(Optimizer DEPENDS ${dependencies})\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Labels to No-Argument Initializers\nDESCRIPTION: Shows how to add dummy parameter labels to no-argument methods imported as initializers to disambiguate them from the standard no-argument `init()`. Works for both instance and class methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_29\n\nLANGUAGE: objc\nCODE:\n```\n- (instancetype)initSafely\n  __attribute__((swift_name(\"init(safe:)\")));\n+ (instancetype)makeDefaultAction\n  __attribute__((swift_name(\"init(default:)\")));\n```\n\nLANGUAGE: swift\nCODE:\n```\ninit(safe: ())\ninit(default: ())\n```\n\n----------------------------------------\n\nTITLE: Defining Custom LLDB Command using `sequence` Alias\nDESCRIPTION: Defines a command alias `cs` using the pre-defined `sequence` command (from `lldbToolBox.py`). This alias executes two standard LLDB commands sequentially: `p/x $rax` (print `rax` in hex) and `stepi` (step instruction). This achieves the same outcome as the Python `custom_step` function but using only built-in/tool-provided LLDB commands.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_31\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) command alias cs sequence p/x $rax; stepi\n```\n\n----------------------------------------\n\nTITLE: Mark Uninitialized Instruction in SIL\nDESCRIPTION: Defines the mark_uninitialized instruction used to indicate uninitialized symbolic memory locations, supporting definitive initialization analysis for various self and variable contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_37\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'mark_uninitialized' '[' mu_kind ']' sil-operand\nmu_kind ::= 'var'\nmu_kind ::= 'rootself'\nmu_kind ::= 'crossmodulerootself'\nmu_kind ::= 'derivedself'\nmu_kind ::= 'derivedselfonly'\nmu_kind ::= 'delegatingself'\nmu_kind ::= 'delegatingselfallocated'\n\n%2 = mark_uninitialized [var] %1 : $*T\n// $T must be an address\n```\n\n----------------------------------------\n\nTITLE: General Format Byte Layout\nDESCRIPTION: Diagram showing the bit layout of the CBF information byte, containing version and machine word size fields.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompactBacktraceFormat.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n   7   6   5   4   3   2   1   0\n ┌───────────────────────┬───────┐\n │ version               │ size  │\n └───────────────────────┴───────┘\n```\n\n----------------------------------------\n\nTITLE: Converting Objective-C to Thick Metatypes in SIL\nDESCRIPTION: Instruction for converting an Objective-C class metatype to a thick metatype. The type must be a class, class protocol, or class protocol composition type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_181\n\nLANGUAGE: sil\nCODE:\n```\n%1 = objc_to_thick_metatype %0 : $@objc_metatype T.Type to $@thick T.Type\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Rust using Result Type\nDESCRIPTION: Shows Rust's typed error handling approach using the Result type for explicit error propagation, along with pattern matching for error handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\ntrait Writer {\n    fn write_line(&mut self, s: &str) -> Result<(), IoError>;\n}\n```\n\nLANGUAGE: rust\nCODE:\n```\nfn parse_two_ints_and_add_them() {\n    match parse_int() {\n        Err e => Err e\n        Ok x => match parse_int() {\n            Err e => Err e\n            Ok y => Ok (x + y)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Inheritance Example Classes B1-B3\nDESCRIPTION: Shows different inheritance patterns with complete and subobject initializers across three example classes extending class A.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InitializerInheritance.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass B1 : A {\n  var counter: Int\n\n  init withTitle(title: String) { // subobject initializer\n    counter = 0\n    super.init(withTitle:title)\n  }\n\n  // inherits A's init()\n}\n\nclass B2 : A {\n  var counter: Int\n\n  init withTitle(title: String) -> Self { // complete object initializer\n    self.init(withTitle: title, initialCount: 0)\n  }\n\n  init withTitle(title: String) initialCount(Int) { // subobject initializer\n    counter = initialCount\n    super.init(withTitle:title)\n  }\n\n  // inherits A's init()\n}\n\nclass B3 : A {\n  var counter: Int\n\n  init withInitialCount(initialCount: Int) { // subobject initializer\n    counter = initialCount\n    super.init(withTitle: \"Unnamed\")\n  }\n\n  init withStringCount(str: String) -> Self { // complete object initializer\n    var initialCount = 0\n    if let count = str.toInt() { initialCount = count }\n    self.init(withInitialCount: initialCount)\n  }\n\n  // does not inherit A's init()\n}\n```\n\n----------------------------------------\n\nTITLE: Specializing Functions by Type in SIL Using _specialize (BNF)\nDESCRIPTION: Introduces the '[_specialize \"<name>\"]' attribute for denoting functions to generate specialized versions for certain types. Used in Swift generics to optimize code for specific compile-time types. Requires a string argument naming the specialization target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_15\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[_specialize \"' [A-Za-z._0-9]+ '\"]'\n```\n\n----------------------------------------\n\nTITLE: Implementing ObjCInOut with _BuiltinInOutWritebackConvertible in Swift\nDESCRIPTION: A concrete implementation of the _BuiltinInOutWritebackConvertible protocol for ObjCInOut, handling Objective-C's __autoreleasing convention for object references. This implementation manages memory correctly for objects passed between Swift and Objective-C.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nstruct ObjCInOut<T: class>: _BuiltinInOutWritebackConvertible {\n  let ptr: Builtin.RawPointer\n\n  typealias InOutType = T!\n  typealias WritebackType = Builtin.RawPointer\n\n  @_transparent\n  static func _createWriteback(ref: inout T!)\n  -> Builtin.RawPointer {\n    // The initial object reference is passed into the callee effectively\n    // __unsafe_unretained, so pass it as a RawPointer.\n    return unsafeBitCast(ref, Builtin.RawPointer.self)\n  }\n\n  @_transparent\n  static func _commitWriteback(ref: inout T!,\n                               value: Builtin.RawPointer) {\n    // The reference is autoreleased on return from the caller, so retain it\n    // by loading it back as a T?.\n    ref = unsafeBitCast(value, T!.self)\n  }\n\n  @_transparent\n  static func _convertFromWritebackAddress(_ value: Builtin.RawPointer) {\n    return ObjCInOut(value)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Punctuation Character Ranges and Code Points\nDESCRIPTION: This code snippet defines ranges and individual code points for characters in the Unicode 'Other_Punctuation' (Po) category. Each line provides the hexadecimal code point range, followed by the category abbreviation, count of characters, and a descriptive name for each character or range.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_25\n\nLANGUAGE: plain text\nCODE:\n```\n# General_Category=Other_Punctuation\n\n0021..0023    ; Po #   [3] EXCLAMATION MARK..NUMBER SIGN\n0025..0027    ; Po #   [3] PERCENT SIGN..APOSTROPHE\n002A          ; Po #       ASTERISK\n002C          ; Po #       COMMA\n002E..002F    ; Po #   [2] FULL STOP..SOLIDUS\n003A..003B    ; Po #   [2] COLON..SEMICOLON\n003F..0040    ; Po #   [2] QUESTION MARK..COMMERCIAL AT\n005C          ; Po #       REVERSE SOLIDUS\n00A1          ; Po #       INVERTED EXCLAMATION MARK\n00A7          ; Po #       SECTION SIGN\n00B6..00B7    ; Po #   [2] PILCROW SIGN..MIDDLE DOT\n00BF          ; Po #       INVERTED QUESTION MARK\n037E          ; Po #       GREEK QUESTION MARK\n0387          ; Po #       GREEK ANO TELEIA\n055A..055F    ; Po #   [6] ARMENIAN APOSTROPHE..ARMENIAN ABBREVIATION MARK\n0589          ; Po #       ARMENIAN FULL STOP\n05C0          ; Po #       HEBREW PUNCTUATION PASEQ\n05C3          ; Po #       HEBREW PUNCTUATION SOF PASUQ\n05C6          ; Po #       HEBREW PUNCTUATION NUN HAFUKHA\n05F3..05F4    ; Po #   [2] HEBREW PUNCTUATION GERESH..HEBREW PUNCTUATION GERSHAYIM\n0609..060A    ; Po #   [2] ARABIC-INDIC PER MILLE SIGN..ARABIC-INDIC PER TEN THOUSAND SIGN\n060C..060D    ; Po #   [2] ARABIC COMMA..ARABIC DATE SEPARATOR\n061B          ; Po #       ARABIC SEMICOLON\n061D..061F    ; Po #   [3] ARABIC END OF TEXT MARK..ARABIC QUESTION MARK\n066A..066D    ; Po #   [4] ARABIC PERCENT SIGN..ARABIC FIVE POINTED STAR\n06D4          ; Po #       ARABIC FULL STOP\n0700..070D    ; Po #  [14] SYRIAC END OF PARAGRAPH..SYRIAC HARKLEAN ASTERISCUS\n07F7..07F9    ; Po #   [3] NKO SYMBOL GBAKURUNEN..NKO EXCLAMATION MARK\n0830..083E    ; Po #  [15] SAMARITAN PUNCTUATION NEQUDAA..SAMARITAN PUNCTUATION ANNAAU\n085E          ; Po #       MANDAIC PUNCTUATION\n0964..0965    ; Po #   [2] DEVANAGARI DANDA..DEVANAGARI DOUBLE DANDA\n0970          ; Po #       DEVANAGARI ABBREVIATION SIGN\n09FD          ; Po #       BENGALI ABBREVIATION SIGN\n0A76          ; Po #       GURMUKHI ABBREVIATION SIGN\n0AF0          ; Po #       GUJARATI ABBREVIATION SIGN\n0C77          ; Po #       TELUGU SIGN SIDDHAM\n0C84          ; Po #       KANNADA SIGN SIDDHAM\n0DF4          ; Po #       SINHALA PUNCTUATION KUNDDALIYA\n0E4F          ; Po #       THAI CHARACTER FONGMAN\n0E5A..0E5B    ; Po #   [2] THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT\n0F04..0F12    ; Po #  [15] TIBETAN MARK INITIAL YIG MGO MDUN MA..TIBETAN MARK RGYA GRAM SHAD\n0F14          ; Po #       TIBETAN MARK GTER TSHEG\n0F85          ; Po #       TIBETAN MARK PALUTA\n0FD0..0FD4    ; Po #   [5] TIBETAN MARK BSKA- SHOG GI MGO RGYAN..TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA\n0FD9..0FDA    ; Po #   [2] TIBETAN MARK LEADING MCHAN RTAGS..TIBETAN MARK TRAILING MCHAN RTAGS\n104A..104F    ; Po #   [6] MYANMAR SIGN LITTLE SECTION..MYANMAR SYMBOL GENITIVE\n10FB          ; Po #       GEORGIAN PARAGRAPH SEPARATOR\n1360..1368    ; Po #   [9] ETHIOPIC SECTION MARK..ETHIOPIC PARAGRAPH SEPARATOR\n166E          ; Po #       CANADIAN SYLLABICS FULL STOP\n16EB..16ED    ; Po #   [3] RUNIC SINGLE PUNCTUATION..RUNIC CROSS PUNCTUATION\n1735..1736    ; Po #   [2] PHILIPPINE SINGLE PUNCTUATION..PHILIPPINE DOUBLE PUNCTUATION\n17D4..17D6    ; Po #   [3] KHMER SIGN KHAN..KHMER SIGN CAMNUC PII KUUH\n17D8..17DA    ; Po #   [3] KHMER SIGN BEYYAL..KHMER SIGN KOOMUUT\n1800..1805    ; Po #   [6] MONGOLIAN BIRGA..MONGOLIAN FOUR DOTS\n1807..180A    ; Po #   [4] MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER..MONGOLIAN NIRUGU\n1944..1945    ; Po #   [2] LIMBU EXCLAMATION MARK..LIMBU QUESTION MARK\n1A1E..1A1F    ; Po #   [2] BUGINESE PALLAWA..BUGINESE END OF SECTION\n1AA0..1AA6    ; Po #   [7] TAI THAM SIGN WIANG..TAI THAM SIGN REVERSED ROTATED RANA\n1AA8..1AAD    ; Po #   [6] TAI THAM SIGN KAAN..TAI THAM SIGN CAANG\n1B4E..1B4F    ; Po #   [2] BALINESE INVERTED CARIK SIKI..BALINESE INVERTED CARIK PAREREN\n1B5A..1B60    ; Po #   [7] BALINESE PANTI..BALINESE PAMENENG\n1B7D..1B7F    ; Po #   [3] BALINESE PANTI LANTANG..BALINESE PANTI BAWAK\n1BFC..1BFF    ; Po #   [4] BATAK SYMBOL BINDU NA METEK..BATAK SYMBOL BINDU PANGOLAT\n1C3B..1C3F    ; Po #   [5] LEPCHA PUNCTUATION TA-ROL..LEPCHA PUNCTUATION TSHOOK\n1C7E..1C7F    ; Po #   [2] OL CHIKI PUNCTUATION MUCAAD..OL CHIKI PUNCTUATION DOUBLE MUCAAD\n1CC0..1CC7    ; Po #   [8] SUNDANESE PUNCTUATION BINDU SURYA..SUNDANESE PUNCTUATION BINDU BA SATANGA\n1CD3          ; Po #       VEDIC SIGN NIHSHVASA\n2016..2017    ; Po #   [2] DOUBLE VERTICAL LINE..DOUBLE LOW LINE\n2020..2027    ; Po #   [8] DAGGER..HYPHENATION POINT\n2030..2038    ; Po #   [9] PER MILLE SIGN..CARET\n203B..203E    ; Po #   [4] REFERENCE MARK..OVERLINE\n2041..2043    ; Po #   [3] CARET INSERTION POINT..HYPHEN BULLET\n2047..2051    ; Po #  [11] DOUBLE QUESTION MARK..TWO ASTERISKS ALIGNED VERTICALLY\n2053          ; Po #       SWUNG DASH\n2055..205E    ; Po #  [10] FLOWER PUNCTUATION MARK..VERTICAL FOUR DOTS\n2CF9..2CFC    ; Po #   [4] COPTIC OLD NUBIAN FULL STOP..COPTIC OLD NUBIAN VERSE DIVIDER\n2CFE..2CFF    ; Po #   [2] COPTIC FULL STOP..COPTIC MORPHOLOGICAL DIVIDER\n2D70          ; Po #       TIFINAGH SEPARATOR MARK\n2E00..2E01    ; Po #   [2] RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER\n2E06..2E08    ; Po #   [3] RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER\n2E0B          ; Po #       RAISED SQUARE\n2E0E..2E16    ; Po #   [9] EDITORIAL CORONIS..DOTTED RIGHT-POINTING ANGLE\n2E18..2E19    ; Po #   [2] INVERTED INTERROBANG..PALM BRANCH\n2E1B          ; Po #       TILDE WITH RING ABOVE\n2E1E..2E1F    ; Po #   [2] TILDE WITH DOT ABOVE..TILDE WITH DOT BELOW\n2E2A..2E2E    ; Po #   [5] TWO DOTS OVER ONE DOT PUNCTUATION..REVERSED QUESTION MARK\n2E30..2E39    ; Po #  [10] RING POINT..TOP HALF SECTION SIGN\n2E3C..2E3F    ; Po #   [4] STENOGRAPHIC FULL STOP..CAPITULUM\n2E41          ; Po #       REVERSED COMMA\n2E43..2E4F    ; Po #  [13] DASH WITH LEFT UPTURN..CORNISH VERSE DIVIDER\n2E52..2E54    ; Po #   [3] TIRONIAN SIGN CAPITAL ET..MEDIEVAL QUESTION MARK\n3001..3003    ; Po #   [3] IDEOGRAPHIC COMMA..DITTO MARK\n303D          ; Po #       PART ALTERNATION MARK\n30FB          ; Po #       KATAKANA MIDDLE DOT\nA4FE..A4FF    ; Po #   [2] LISU PUNCTUATION COMMA..LISU PUNCTUATION FULL STOP\nA60D..A60F    ; Po #   [3] VAI COMMA..VAI QUESTION MARK\nA673          ; Po #       SLAVONIC ASTERISK\nA67E          ; Po #       CYRILLIC KAVYKA\nA6F2..A6F7    ; Po #   [6] BAMUM NJAEMLI..BAMUM QUESTION MARK\nA874..A877    ; Po #   [4] PHAGS-PA SINGLE HEAD MARK..PHAGS-PA MARK DOUBLE SHAD\nA8CE..A8CF    ; Po #   [2] SAURASHTRA DANDA..SAURASHTRA DOUBLE DANDA\nA8F8..A8FA    ; Po #   [3] DEVANAGARI SIGN PUSHPIKA..DEVANAGARI CARET\nA8FC          ; Po #       DEVANAGARI SIGN SIDDHAM\nA92E..A92F    ; Po #   [2] KAYAH LI SIGN CWI..KAYAH LI SIGN SHYA\nA95F          ; Po #       REJANG SECTION MARK\nA9C1..A9CD    ; Po #  [13] JAVANESE LEFT RERENGGAN..JAVANESE TURNED PADA PISELEH\nA9DE..A9DF    ; Po #   [2] JAVANESE PADA TIRTA TUMETES..JAVANESE PADA ISEN-ISEN\nAA5C..AA5F    ; Po #   [4] CHAM PUNCTUATION SPIRAL..CHAM PUNCTUATION TRIPLE DANDA\nAADE..AADF    ; Po #   [2] TAI VIET SYMBOL HO HOI..TAI VIET SYMBOL KOI KOI\nAAF0..AAF1    ; Po #   [2] MEETEI MAYEK CHEIKHAN..MEETEI MAYEK AHANG KHUDAM\nABEB          ; Po #       MEETEI MAYEK CHEIKHEI\nFE10..FE16    ; Po #   [7] PRESENTATION FORM FOR VERTICAL COMMA..PRESENTATION FORM FOR VERTICAL QUESTION MARK\nFE19          ; Po #       PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS\nFE30          ; Po #       PRESENTATION FORM FOR VERTICAL TWO DOT LEADER\nFE45..FE46    ; Po #   [2] SESAME DOT..WHITE SESAME DOT\nFE49..FE4C    ; Po #   [4] DASHED OVERLINE..DOUBLE WAVY OVERLINE\nFE50..FE52    ; Po #   [3] SMALL COMMA..SMALL FULL STOP\nFE54..FE57    ; Po #   [4] SMALL SEMICOLON..SMALL EXCLAMATION MARK\nFE5F..FE61    ; Po #   [3] SMALL NUMBER SIGN..SMALL ASTERISK\nFE68          ; Po #       SMALL REVERSE SOLIDUS\nFE6A..FE6B    ; Po #   [2] SMALL PERCENT SIGN..SMALL COMMERCIAL AT\nFF01..FF03    ; Po #   [3] FULLWIDTH EXCLAMATION MARK..FULLWIDTH NUMBER SIGN\nFF05..FF07    ; Po #   [3] FULLWIDTH PERCENT SIGN..FULLWIDTH APOSTROPHE\nFF0A          ; Po #       FULLWIDTH ASTERISK\nFF0C          ; Po #       FULLWIDTH COMMA\nFF0E..FF0F    ; Po #   [2] FULLWIDTH FULL STOP..FULLWIDTH SOLIDUS\nFF1A..FF1B    ; Po #   [2] FULLWIDTH COLON..FULLWIDTH SEMICOLON\nFF1F..FF20    ; Po #   [2] FULLWIDTH QUESTION MARK..FULLWIDTH COMMERCIAL AT\nFF3C          ; Po #       FULLWIDTH REVERSE SOLIDUS\nFF61          ; Po #       HALFWIDTH IDEOGRAPHIC FULL STOP\nFF64..FF65    ; Po #   [2] HALFWIDTH IDEOGRAPHIC COMMA..HALFWIDTH KATAKANA MIDDLE DOT\n10100..10102  ; Po #   [3] AEGEAN WORD SEPARATOR LINE..AEGEAN CHECK MARK\n1039F         ; Po #       UGARITIC WORD DIVIDER\n103D0         ; Po #       OLD PERSIAN WORD DIVIDER\n1056F         ; Po #       CAUCASIAN ALBANIAN CITATION MARK\n10857         ; Po #       IMPERIAL ARAMAIC SECTION SIGN\n1091F         ; Po #       PHOENICIAN WORD SEPARATOR\n1093F         ; Po #       LYDIAN TRIANGULAR MARK\n10A50..10A58  ; Po #   [9] KHAROSHTHI PUNCTUATION DOT..KHAROSHTHI PUNCTUATION LINES\n10A7F         ; Po #       OLD SOUTH ARABIAN NUMERIC INDICATOR\n10AF0..10AF6  ; Po #   [7] MANICHAEAN PUNCTUATION STAR..MANICHAEAN PUNCTUATION LINE FILLER\n10B39..10B3F  ; Po #   [7] AVESTAN ABBREVIATION MARK..LARGE ONE RING OVER TWO RINGS PUNCTUATION\n10B99..10B9C  ; Po #   [4] PSALTER PAHLAVI SECTION MARK..PSALTER PAHLAVI FOUR DOTS WITH DOT\n10F55..10F59  ; Po #   [5] SOGDIAN PUNCTUATION TWO VERTICAL BARS..SOGDIAN PUNCTUATION HALF CIRCLE WITH DOT\n10F86..10F89  ; Po #   [4] OLD UYGHUR PUNCTUATION BAR..OLD UYGHUR PUNCTUATION FOUR DOTS\n11047..1104D  ; Po #   [7] BRAHMI DANDA..BRAHMI PUNCTUATION LOTUS\n110BB..110BC  ; Po #   [2] KAITHI ABBREVIATION SIGN..KAITHI ENUMERATION SIGN\n110BE..110C1  ; Po #   [4] KAITHI SECTION MARK..KAITHI DOUBLE DANDA\n11140..11143  ; Po #   [4] CHAKMA SECTION MARK..CHAKMA QUESTION MARK\n11174..11175  ; Po #   [2] MAHAJANI ABBREVIATION SIGN..MAHAJANI SECTION MARK\n111C5..111C8  ; Po #   [4] SHARADA DANDA..SHARADA SEPARATOR\n111CD         ; Po #       SHARADA SUTRA MARK\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Wrapper Typedef in Swift\nDESCRIPTION: This snippet demonstrates how the Objective-C swift_wrapper typedef is imported into Swift. It becomes a struct conforming to RawRepresentable and Hashable with static properties for the associated constants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nstruct SecretResourceID: RawRepresentable, Hashable {\n  typealias RawValue = String\n\n  init(_ rawValue: String)\n  init(rawValue: String)\n  var rawValue: String { get }\n}\n\nextension SecretResourceID {\n  static var treasureChest: SecretResource { get }\n  static var bankVault: SecretResource { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Tuple Elements and Copying Guaranteed Values in Swift SIL\nDESCRIPTION: Shows how tuple_extract and copy_value instructions interact with guaranteed ownership in SIL. Prerequisites are an understanding of IR dataflow, tuple types, and copy semantics in the context of ownership SSA. Function accepts a tuple of Strings by guaranteed ownership and returns an owned String, representing the first tuple element. This snippet emphasizes validation of nested guaranteed values without redundant begin_borrow/end_borrow scopes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_7\n\nLANGUAGE: sil\nCODE:\n```\nsil [ossa] @get_first_elt : $@convention(thin) (@guaranteed (String, String)) -> @owned String {\nbb0(%0 : @guaranteed $(String, String)):\n  // %1 is validated as if it was apart of %0 and does not need its own begin_borrow/end_borrow.\n  %1 = tuple_extract %0 : $(String, String)\n  // So this copy_value is treated as a use of %0.\n  %2 = copy_value %1 : $String\n  return %2 : $String\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Swift Files in Whole-Module Optimization Mode\nDESCRIPTION: This command illustrates compiling Swift files in whole-module optimization (WMO) mode. It runs a single frontend subprocess that reads all files once and compiles them serially, enabling certain optimizations not possible in other modes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nswiftc -wmo *.swift\n```\n\n----------------------------------------\n\nTITLE: C Function with Non-Nullable Pointer Parameter\nDESCRIPTION: A C function declaration using Clang's _Nonnull qualifier to indicate the pointer should never be null. This annotation affects how the function is imported into Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nint fetch(int * _Nonnull ptr);\n```\n\n----------------------------------------\n\nTITLE: Defining and Instantiating Structs with Varying Abstraction Patterns - Swift\nDESCRIPTION: This Swift snippet demonstrates how different generic struct definitions and their instantiations affect abstraction patterns in function and closure representations. It shows how generic parameters influence the property's abstraction pattern versus a concrete type, which in turn impacts compiler decisions about calling conventions and memory representation. The code highlights struct definitions, property declarations, a closure, and three instantiations—one generic and two concrete—to illustrate abstraction pattern differences and the resulting effects on the Swift compiler's behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Lexicon.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Foo<T> {\n  var value: T\n  // Foo.value has abstraction pattern <T> T\n}\nstruct Bar<T, U> {\n  var value: (T) -> U\n  // Bar.value has abstraction pattern <T, U> (T) -> U\n}\nstruct Bas {\n  var value: (Int) -> String\n  // Bas.value has abstraction pattern (Int) -> String\n}\nlet transform: (Int) -> String = { \"\\($0)\" }\nlet foo = Foo<(Int) -> String>(value: transform)\nlet bar = Bar<Int, String>(value: transform)\nlet bas = Bas(value: transform)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Typed Access TBAA with Struct Element Addressing in Swift\nDESCRIPTION: This snippet shows how the optimizer can assume non-aliasing for addresses derived from unrelated struct types. It demonstrates the use of struct_element_addr instruction on two different struct types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_52\n\nLANGUAGE: swift\nCODE:\n```\nstruct Element {\n  var i: Int\n}\nstruct S1 {\n  var elt: Element\n}\nstruct S2 {\n  var elt: Element\n}\n%adr1 = struct_element_addr %ptr1 : $*S1, #S.elt\n%adr2 = struct_element_addr %ptr2 : $*S2, #S.elt\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Runtime Core Library Target\nDESCRIPTION: Defines the main Swift runtime core library target with its source files, compilation flags, and linking configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftRuntimeCore OBJECT_LIBRARY\n  ${swift_runtime_sources}\n  ${swift_runtime_objc_sources}\n  ${swift_runtime_leaks_sources}\n  ${swift_runtime_threading_sources}\n  C_COMPILE_FLAGS\n    ${swift_runtime_library_compile_flags}\n    ${swift_enable_backtracing}\n  LINK_FLAGS ${swift_runtime_linker_flags}\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT never_install)\n```\n\n----------------------------------------\n\nTITLE: Extending Class with Additional Methods in Swift\nDESCRIPTION: Adds additional functionality to the BaseInHead class through an extension, including both instance and class methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.module.printed.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nextension BaseInHead {\n  class func doItInCategory()\n  func doItInCategory()\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Non-destructive Move Example\nDESCRIPTION: Demonstrates a C++ API design that requires non-destructive moves using std::optional and a move-only class.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_33\n\nLANGUAGE: c++\nCODE:\n```\nclass Example { /* move-only */ };\n\nstd::optional<Example> getExample();\nvoid processExample(Example e);\n\nvoid test() {\n  std::optional<Example> e = getExample();\n  processExample(std::move(e.value()));\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Go's defer statement\nDESCRIPTION: Shows how Go's defer statement is used to schedule a function call to be run immediately after the function exits.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ndefer foo(x, y)\n```\n\n----------------------------------------\n\nTITLE: Using mark_dependence_addr with Dependent Values in Swift SIL\nDESCRIPTION: Demonstrates how the load of a dependent value depends on the base value, ensuring proper ordering of operations that would destroy the base value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_72\n\nLANGUAGE: sil\nCODE:\n```\nmark_dependence_addr %address on %base\n%dependent_value = load [copy] %address\ndestroy_value %base\n```\n\n----------------------------------------\n\nTITLE: String Operations in Swift\nDESCRIPTION: Example of String struct implementation showing pairs of mutating and non-mutating string operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct String {\n  public func uppercase() -> String\n  public mutating func uppercaseInPlace()\n\n  public func lowercase() -> String\n  public mutating func lowercaseInPlace()\n\n  public func replace(\n    _ pattern: String, with replacement: String) -> String\n  public mutating func replaceInPlace(\n    _ pattern: String, with replacement: String)\n\n  public func trim() -> String\n  public mutating func trimInPlace()\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Isolation from Function Values in SIL\nDESCRIPTION: The function_extract_isolation instruction reads the isolation of a @isolated(any) function value. It returns a borrowed value of type $Optional<any Actor>, which is the value used to construct the function with partial_apply [isolated_any].\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_121\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= function_extract_isolation sil-operand\n```\n\n----------------------------------------\n\nTITLE: Contextual Refactoring Test in Swift and C++\nDESCRIPTION: This snippet shows a test for contextual refactoring actions, specifically for String Localization. It includes Swift code to be refactored and C++ commands to run the refactoring and check the results.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo() {\n  print(\"Hello World!\")\n}\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// RUN: %refactor -source-filename %s -pos=2:14 | %FileCheck %s -check-prefix=CHECK-LOCALIZE-STRING\n// CHECK-LOCALIZE-STRING: Localize String\n```\n\n----------------------------------------\n\nTITLE: Declaring Class with Repeated Members and Extensions\nDESCRIPTION: Defines a class with repeated methods and properties, along with extensions that add more repeated members.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooRepeatedMembers : FooClassBase {\n  func repeatedMethod()\n  func anotherMethod()\n  init!()\n  convenience init!(float f: Float)\n}\nextension FooRepeatedMembers {\n  var repeatedPropertyInCategory: Int32\n  func repeatedMethodInCategory()\n}\nextension FooRepeatedMembers {\n  var repeatedPropertyFromCategory: Int32\n  func repeatedMethodFromCategory()\n}\n```\n\n----------------------------------------\n\nTITLE: Generated C++ Interface for Swift Enumerations\nDESCRIPTION: This auto-generated C++ class mirrors a Swift enumeration, exposing cases as static members and hiding internal representation details. It allows value construction, property/method access, and provides type safety. Generated via Swift bridging tools.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_20\n\nLANGUAGE: c++\nCODE:\n```\n// \"Navigation-Swift.h\" - C++ interface for Swift's Navigation module.\nclass CompassDirection {\npublic:\n  inline const static struct { ... } north;\n  inline const static struct { ... } south;\n  inline const static struct { ... } east;\n  inline const static struct { ... } west;\nprivate:\n  // type representation details.\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Objective-C Interoperability for Swift Build in CMake\nDESCRIPTION: Sets the default value for enabling Objective-C interoperability based on the host variant SDK, typically enabled for Apple platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_47\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"${SWIFT_HOST_VARIANT_SDK}\" MATCHES \"(OSX|IOS*|TVOS*|WATCHOS*|XROS*)\")\n  set(SWIFT_STDLIB_ENABLE_OBJC_INTEROP_default TRUE)\nelse()\n  set(SWIFT_STDLIB_ENABLE_OBJC_INTEROP_default FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Struct Element Access via Access Projections in SIL\nDESCRIPTION: Example of access projections for struct fields. This demonstrates how struct_element_addr is used within an access scope to access fields without requiring formal access for each field.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_7\n\nLANGUAGE: sil\nCODE:\n```\n%access  = begin_access [read] [static] %base : $*S\n%memaddr = struct_element_addr %access : $*S, #.field\n%value   = load [trivial] %memaddr : $*Int64\nend_access %access : $*S\n```\n\n----------------------------------------\n\nTITLE: Unconditional Checked Cast in SIL\nDESCRIPTION: Performs a checked scalar conversion with runtime failure if conversion fails. Does not support casts requiring representation or ownership changes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_182\n\nLANGUAGE: sil\nCODE:\n```\n%1 = unconditional_checked_cast %0 : $A to $B\n%1 = unconditional_checked_cast %0 : $*A to $*B\n```\n\n----------------------------------------\n\nTITLE: SourceKit Variable Type Request Format\nDESCRIPTION: JSON structure for requesting variable type information from SourceKit. Includes required fields for sourcefile and compiler arguments, with optional parameters for specifying range and qualification preferences.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>:                  (UID)     <source.request.variable.type>,\n    <key.sourcefile>:               (string)  // Absolute path to the file.\n    <key.compilerargs>:             [string*] // Array of zero or more strings for the compiler arguments,\n                                              // e.g [\"-sdk\", \"/path/to/sdk\"]. If key.sourcefile is provided,\n                                              // these must include the path to that file.\n    [opt] <key.offset>:             (int64)   // Offset of the requested range. Defaults to zero.\n    [opt] <key.length>:             (int64)   // Length of the requested range. Defaults to the entire file.\n    [opt] <key.fully_qualified>:    (bool)    // True when fully qualified type should be returned. Defaults to False.\n}\n```\n\n----------------------------------------\n\nTITLE: Unchecked_take_enum_data_addr Instruction: In-place Enum Data Access\nDESCRIPTION: The unchecked_take_enum_data_addr instruction provides in-memory access to enum payload data, potentially invalidating the enum value for certain enum types with tag-in-payload representation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_143\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'unchecked_take_enum_data_addr' sil-operand ',' sil-decl-ref\n\n%1 = unchecked_take_enum_data_addr %0 : $*U, #U.DataCase!enumelt\n// $U must be an enum type\n// #U.DataCase must be a case of enum $U with data\n// %1 will be of address type $*T for the data type of case U.DataCase\n```\n\n----------------------------------------\n\nTITLE: SIL Attributes for @initialize_subobject Method in Swift\nDESCRIPTION: Demonstrates the low-level SIL attributes for a method marked with @initialize_subobject. These attributes specify the method's effects on self and non-self state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n@_effects(argonly)\n@selfeffects(preserve_unique, nocapture, norelease)\nfunc appendElementAssumingUnique(@norelease @nowrite elt: T) {}\n```\n\n----------------------------------------\n\nTITLE: Manual Error Propagation in SML using ADT\nDESCRIPTION: Demonstrates error handling in SML using Algebraic Data Types (ADT) to handle potential failure cases in input reading.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_3\n\nLANGUAGE: sml\nCODE:\n```\nfun read_next_cmd () =\n  case readline(stdin) of\n    NONE => NONE\n  | SOME line => if ...\n```\n\n----------------------------------------\n\nTITLE: Swift Generic Template Call Example\nDESCRIPTION: Demonstrates calling a C++ template function from Swift with type inference.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_58\n\nLANGUAGE: swift\nCODE:\n```\nfunc callFunctionTemplate() {\n  functionTemplate(0) // OK: calls the `functionTemplate<int>` specialization.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FooProtocolBase Protocol in Swift\nDESCRIPTION: Declares a protocol with method and property requirements, including documented methods and property accessors specifications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  FooProtocolBase.  Bbb.\nprotocol FooProtocolBase {\n\n  /// Aaa.  fooProtoFunc.  Bbb.\n  /// Ccc.\n  func fooProtoFunc()\n\n  /// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.\n  /// Ccc.\n  func fooProtoFuncWithExtraIndentation1()\n\n  /**\n   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.\n   * Ccc.\n   */\n  func fooProtoFuncWithExtraIndentation2()\n  static func fooProtoClassFunc()\n  var fooProperty1: Int32 { get set }\n  var fooProperty2: Int32 { get set }\n  var fooProperty3: Int32 { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Value Usage with Ownership Constraints in Swift SIL\nDESCRIPTION: This symbolic representation defines the core validation rule in Ownership SSA for SIL code. It states that an operand `op(i)` of an instruction `i` can legally use a value `v` only if the result of the 'join' operation between the operand's Ownership Constraint and the value's Value Ownership Kind is equal to the value's original Value Ownership Kind. This ensures that the operand's requirements do not violate the value's ownership semantics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\njoin : (OwnershipConstraint, ValueOwnershipKind) -> ValueOwnershipKind\nOwnershipConstraint(operand(i)) join ValueOwnershipKind(v) = ValueOwnershipKind(v)\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint at Relative Assembly Address (LLDB)\nDESCRIPTION: Sets an LLDB breakpoint within the function named `foo` at an offset of +38 bytes from the function's start address. The `-R` option specifies a relative address offset.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_23\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br set -R 38 -n foo\n```\n\n----------------------------------------\n\nTITLE: Accessing Tuple Elements by Address in SIL\nDESCRIPTION: The tuple_element_addr instruction derives the address of an element within a tuple value given the address of the tuple in memory. It requires the tuple address operand and an integer literal specifying the element index.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_125\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'tuple_element_addr' sil-operand ',' int-literal\n\n%1 = tuple_element_addr %0 : $*(T...), 123\n// %0 must of a $*(T...) address-of-tuple type\n// %1 will be of address type $*U where U is the type of the 123rd\n//   element of T\n```\n\n----------------------------------------\n\nTITLE: Unicode XID_Continue Character Range Definitions\nDESCRIPTION: Comprehensive list of Unicode character ranges that are permitted to appear in identifiers after the first character. These ranges include letters, numbers, combining marks, and other characters that can be part of identifiers in programming languages.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_33\n\nLANGUAGE: unicode\nCODE:\n```\n102B..102C    ; XID_Continue\n102D..1030    ; XID_Continue\n1031          ; XID_Continue\n1032..1037    ; XID_Continue\n[...truncated for brevity...]\nA825..A826    ; XID_Continue\nA827          ; XID_Continue\n```\n\n----------------------------------------\n\nTITLE: C++ Optional Value Mutation\nDESCRIPTION: Demonstrates how to mutate Swift Optional values in C++ using withMutableValue.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_51\n\nLANGUAGE: c++\nCODE:\n```\nswift::Optional<swift::Array<swift::Int>> x = getXPerhaps();\nx.withMutableValue([](auto &val) {\n  // append `42` to the array x only when x is not nil\n  val.append(42);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Predefined Substitutions in Swift Mangling\nDESCRIPTION: This snippet defines predefined substitutions for common modules and nominal types in Swift mangling. These substitutions provide shortcuts for frequently used entities in the Swift standard library and related modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_19\n\nLANGUAGE: Swift\nCODE:\n```\nknown-module ::= 's'                       // Swift\nknown-module ::= 'SC'                      // C\nknown-module ::= 'So'                      // Objective-C\nknown-nominal-type ::= 'Sa'                // Swift.Array\nknown-nominal-type ::= 'Sb'                // Swift.Bool\nknown-nominal-type ::= 'Sc'                // Swift.UnicodeScalar\nknown-nominal-type ::= 'Sd'                // Swift.Float64\nknown-nominal-type ::= 'Sf'                // Swift.Float32\nknown-nominal-type ::= 'Si'                // Swift.Int\nknown-nominal-type ::= 'SV'                // Swift.UnsafeRawPointer\nknown-nominal-type ::= 'Sv'                // Swift.UnsafeMutableRawPointer\nknown-nominal-type ::= 'SP'                // Swift.UnsafePointer\nknown-nominal-type ::= 'Sp'                // Swift.UnsafeMutablePointer\nknown-nominal-type ::= 'SQ'                // Swift.ImplicitlyUnwrappedOptional\nknown-nominal-type ::= 'Sq'                // Swift.Optional\nknown-nominal-type ::= 'SR'                // Swift.UnsafeBufferPointer\nknown-nominal-type ::= 'Sr'                // Swift.UnsafeMutableBufferPointer\nknown-nominal-type ::= 'SS'                // Swift.String\nknown-nominal-type ::= 'Su'                // Swift.UInt\n```\n\n----------------------------------------\n\nTITLE: Updating Swift Repository Checkout to Specific Branch\nDESCRIPTION: Command for updating a Swift repository checkout to a specific branch using the update-checkout utility. This can be used with any branch name as the argument to --scheme, such as 'main' or 'swift/main'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Branches.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift/utils/update-checkout --scheme [branch]\n```\n\n----------------------------------------\n\nTITLE: Generating Swift Compiler Diagnostic Documentation with DocC\nDESCRIPTION: Command to generate and preview the Swift compiler diagnostic documentation locally using DocC. This command should be run from the root of the repository.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocc preview --allow-arbitrary-catalog-directories userdocs/diagnostics\n```\n\n----------------------------------------\n\nTITLE: Defining a SIL Function Signature in Swift SIL (Swift)\nDESCRIPTION: This snippet describes the grammar for defining a function in Swift Intermediate Language (SIL). It specifies the keywords, attributes, naming syntax, and mandatory type annotations for SIL function declarations. Dependencies include adherence to the SIL syntax, and it expects mangled function names, valid types, and optional linking or attribute information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ndecl ::= sil-function\nsil-function ::= 'sil' sil-linkage? sil-function-attribute+\n                   sil-function-name ':' sil-type\n                   '{' effects* sil-basic-block* '}'\nsil-function-name ::= '@' [A-Za-z_0-9]+\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Language Version Build Flag\nDESCRIPTION: Command line flag used to set the Swift language mode version in build settings. This flag determines which language features and behaviors will be enabled or disabled during compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/error-in-future-swift-version.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n-swift-version X\n```\n\n----------------------------------------\n\nTITLE: Implementing switch_enum_addr Terminator in Swift Intermediate Language\nDESCRIPTION: Defines the switch_enum_addr terminator instruction syntax which branches based on an enum discriminator at an address. Unlike switch_enum, it doesn't pass payload data to destination blocks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_190\n\nLANGUAGE: sil\nCODE:\n```\nsil-terminator ::= 'switch_enum_addr' sil-operand\n                     (',' sil-switch-enum-case)*\n                     (',' sil-switch-default)?\n\nswitch_enum_addr %0 : $*U, case #U.Foo!enumelt: label1, \n                                        case #U.Bar!enumelt: label2, \n                                        ...,                 \n                                        default labelN\n\n// %0 must be the address of an enum type $*U\n// #U.Foo, #U.Bar, etc. must be cases of $U\n// `label1` through `labelN` must refer to block labels within the current\n//   function\n// The destinations must take no basic block arguments\n```\n\n----------------------------------------\n\nTITLE: Swift Keypath Accessor Getters\nDESCRIPTION: Mangled symbols for keypath accessor getters in Swift, showing both generic and concrete implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\n@$s8keypaths1KV3valACSi_tcfcACmTkmu\n@$s8keypaths1KVACycfcACmTkMA\n```\n\n----------------------------------------\n\nTITLE: Defining BasicBlockWorklist in Swift for SIL\nDESCRIPTION: Defines `BasicBlockWorklist`, a utility intended for use in various basic-block worklist algorithms common in compiler optimizations. It depends on the `Stack` and `BasicBlockSet` utilities. It is related to the `BasicBlockWorklist` in the C++ SIL optimizer. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nBasicBlockWorklist\n```\n\n----------------------------------------\n\nTITLE: Defining FooEnum1 RawRepresentable Struct in Swift\nDESCRIPTION: Declares a struct implementing RawRepresentable and Equatable protocols with UInt32 as its raw value type. Includes initializers for creating instances with raw values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  FooEnum1.  Bbb.\nstruct FooEnum1 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unapplied Name Lookup in Swift\nDESCRIPTION: This snippet shows how unapplied name lookup works in Swift, demonstrating that it only finds tuple-style declarations and not selector-style declarations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/KeywordArguments.rst#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo(_ a: Int, b: Int) {}\nfunc foo(_ a: Int) bar(b: Int) {}\n\nvar f = foo // Finds foo(Int, Int) -> (), not foo:bar:\n```\n\n----------------------------------------\n\nTITLE: Using Value Semantics Constraints in Generic Functions in Swift\nDESCRIPTION: Shows how to use val as a protocol constraint for type parameters in generic functions, ensuring value semantics for the generic type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Fill an array with independent copies of x\nfunc fill<T:val>(_ array:[T], x:T) {\n  for i in 0...array.length {\n    array[i] = x\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: C Function with Pointer to Incomplete Type\nDESCRIPTION: A C function declaration using a pointer to an incomplete struct type. This demonstrates a common pattern for opaque types in C APIs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nstruct Foo;\nvoid Print(const Foo* foo);\n```\n\n----------------------------------------\n\nTITLE: Compiling Swift Files in Single-File Mode\nDESCRIPTION: This command demonstrates how to compile Swift files in single-file mode, which runs one frontend job per file. Each job parses all input files but compiles only its primary file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswiftc *.swift\n```\n\n----------------------------------------\n\nTITLE: Performance Instruction Counting with Perf\nDESCRIPTION: Shell script that uses perf stat to count instructions executed by a command. Useful for measuring performance regressions and analyzing compiler behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncount_instructions() {\n    perf stat -x , --log-fd 3    \\\n      -e instructions -r 10 \"$@\" \\\n      3>&1 2>/dev/null 1>&2 | cut -d , -f 1\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Elements from Tuples in SIL\nDESCRIPTION: The tuple_extract instruction extracts an element from a loadable tuple value. It requires the tuple operand and an integer literal specifying the element index to extract.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_123\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'tuple_extract' sil-operand ',' int-literal\n\n%1 = tuple_extract %0 : $(T...), 123\n// %0 must be of a loadable tuple type $(T...)\n// %1 will be of the type of the selected element of %0\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Swift Optimizer Components in CMake\nDESCRIPTION: Adds subdirectories for various components of the Swift Optimizer, including analysis passes, data structures, and different optimization pass categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Analysis)\nadd_subdirectory(DataStructures)\nadd_subdirectory(InstructionSimplification)\nadd_subdirectory(PassManager)\nadd_subdirectory(ModulePasses)\nadd_subdirectory(FunctionPasses)\nadd_subdirectory(TestPasses)\nadd_subdirectory(Utilities)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Driver Source Files\nDESCRIPTION: Defines the list of source files required to build the Swift driver library. Includes various toolchain implementations for different platforms and core driver functionality components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Driver/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swiftDriver_sources\n  Action.cpp\n  Compilation.cpp\n  DarwinToolChains.cpp\n  Driver.cpp\n  FrontendUtil.cpp\n  Job.cpp\n  PrettyStackTrace.cpp\n  ToolChain.cpp\n  ToolChains.cpp\n  UnixToolChains.cpp\n  WebAssemblyToolChains.cpp\n  WindowsToolChains.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Conformance and Witness Table Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for protocol conformance, associated type witness tables, and base protocol witness table accessors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= protocol-conformance assoc-type-list protocol 'WT' // associated type witness table accessor\nglobal ::= protocol-conformance protocol 'Wb' // base protocol witness table accessor\nglobal ::= type protocol-conformance 'Wl' // lazy protocol witness table accessor\n```\n\n----------------------------------------\n\nTITLE: Swift PackagedTask Subclass Implementation\nDESCRIPTION: Shows how to implement a subclass constructor in Swift with proper superclass initialization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nclass PackagedTask : Task {\n  var queue : dispatch_queue_t\n\n  constructor(title : String, date : NSDate = NSDate(),\n              queue : dispatch_queue_t = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {\n    super.constructor(title:title, date:date)\n    self.queue = queue\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Common Prefix in Cocoa and Swift\nDESCRIPTION: Shows how to find the common prefix between two strings in Cocoa and Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_23\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSString *)commonPrefixWithString:(NSString *)aString options:(NSStringCompareOptions)mask;\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc commonPrefix(_ other: String) -> String\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Sema Library Build in CMake\nDESCRIPTION: This CMake snippet defines the Swift Sema library build configuration. It specifies source files, compilation options, and library dependencies. The configuration includes conditional compilation flags for optimized builds and optional components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Sema/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftSema STATIC\n  AssociatedTypeInference.cpp\n  NonisolatedNonsendingByDefaultMigration.cpp\n  BuilderTransform.cpp\n  Comment.cpp\n  CSApply.cpp\n  CSBindings.cpp\n  CSSyntacticElement.cpp\n  CSGen.cpp\n  CSRanking.cpp\n  CSSimplify.cpp\n  CSSolver.cpp\n  CSStep.cpp\n  CSTrail.cpp\n  CSFix.cpp\n  CSDiagnostics.cpp\n  CodeSynthesis.cpp\n  CodeSynthesisDistributedActor.cpp\n  ConstantnessSemaDiagnostics.cpp\n  Constraint.cpp\n  ConstraintGraph.cpp\n  ConstraintLocator.cpp\n  ConstraintSystem.cpp\n  CompletionContextFinder.cpp\n  DebuggerTestingTransform.cpp\n  DerivedConformance/DerivedConformance.cpp\n  DerivedConformance/DerivedConformanceActor.cpp\n  DerivedConformance/DerivedConformanceAdditiveArithmetic.cpp\n  DerivedConformance/DerivedConformanceCaseIterable.cpp\n  DerivedConformance/DerivedConformanceCodable.cpp\n  DerivedConformance/DerivedConformanceCodingKey.cpp\n  DerivedConformance/DerivedConformanceComparable.cpp\n  DerivedConformance/DerivedConformanceDifferentiable.cpp\n  DerivedConformance/DerivedConformanceDistributedActor.cpp\n  DerivedConformance/DerivedConformanceEquatableHashable.cpp\n  DerivedConformance/DerivedConformanceError.cpp\n  DerivedConformance/DerivedConformanceRawRepresentable.cpp\n  ImportResolution.cpp\n  InstrumenterSupport.cpp\n  LookupVisibleDecls.cpp\n  MiscDiagnostics.cpp\n  OpenedExistentials.cpp\n  PCMacro.cpp\n  PlaygroundTransform.cpp\n  PreCheckTarget.cpp\n  ResilienceDiagnostics.cpp\n  SourceLoader.cpp\n  SyntacticElementTarget.cpp\n  TypeOfReference.cpp\n  TypeCheckAccess.cpp\n  TypeCheckAttr.cpp\n  TypeCheckAttrABI.cpp\n  TypeCheckAvailability.cpp\n  TypeCheckBitwise.cpp\n  TypeCheckCaptures.cpp\n  TypeCheckCircularity.cpp\n  TypeCheckCodeCompletion.cpp\n  TypeCheckConcurrency.cpp\n  TypeCheckDistributed.cpp\n  TypeCheckConstraints.cpp\n  TypeCheckDecl.cpp\n  TypeCheckDeclObjC.cpp\n  TypeCheckDeclOverride.cpp\n  TypeCheckDeclPrimary.cpp\n  TypeCheckEffects.cpp\n  TypeCheckExpr.cpp\n  TypeCheckExprObjC.cpp\n  TypeCheckGeneric.cpp\n  TypeCheckInvertible.cpp\n  TypeCheckMacros.cpp\n  TypeCheckNameLookup.cpp\n  TypeCheckPattern.cpp\n  TypeCheckPropertyWrapper.cpp\n  TypeCheckProtocol.cpp\n  TypeCheckRegex.cpp\n  TypeCheckRequestFunctions.cpp\n  TypeCheckStmt.cpp\n  TypeCheckStorage.cpp\n  TypeCheckSwitchStmt.cpp\n  TypeCheckType.cpp\n  TypeCheckUnsafe.cpp\n  TypeChecker.cpp\n  IDETypeCheckingRequests.cpp)\nif(SWIFT_FORCE_OPTIMIZED_TYPECHECKER)\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" OR CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\")\n    target_compile_options(swiftSema PRIVATE /O2 /Ob2)\n  else()\n    target_compile_options(swiftSema PRIVATE -O3)\n  endif()\nendif()\n\ntarget_link_libraries(swiftSema PRIVATE\n  swiftAST\n  swiftParse\n  swiftSerialization)\n\nif (SWIFT_BUILD_SWIFT_SYNTAX)\n  target_link_libraries(swiftSema PRIVATE\n    swiftASTGen\n    swiftMacroEvaluation)\nendif()\n\nset_swift_llvm_is_available(swiftSema)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Swift Standard Library for Android\nDESCRIPTION: CMake and Ninja commands to build and install the Swift standard library for Android. This step is crucial for building the rest of the SDK.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AndroidBuild.md#2025-04-23_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\nmd S:\\b\\a\\stdlib\ncd S:\\b\\a\\stdlib\ncmake -C S:\\swift-build\\cmake\\caches\\android-armv7.cmake                                                              ^\n  -C S:\\swift-build\\cmake\\caches\\swift-stdlib-android-armv7.cmake                                                     ^\n  -G Ninja                                                                                                            ^\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo                                                                                   ^\n  -DCMAKE_INSTALL_PREFIX=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk/usr           ^\n  -DCMAKE_TOOLCHAIN_FILE=S:\\swift-build\\cmake\\toolchains\\android.toolchain.cmake                                      ^\n  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr       ^\n  -DLLVM_DIR=S:/b/a/llvm/lib/cmake/llvm                                                                               ^\n  -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin ^\n  S:/swift\nninja\nninja install\n```\n\n----------------------------------------\n\nTITLE: Declaring a C Function with Pointers\nDESCRIPTION: A C function declaration using regular C pointer types. This shows a function that takes a mutable pointer to an int and a constant pointer to a long.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nvoid AddSecondToFirst(int *x, const long *y);\n```\n\n----------------------------------------\n\nTITLE: Implementing dynamic_method_br Terminator in Swift Intermediate Language\nDESCRIPTION: Defines the dynamic_method_br terminator which looks up an Objective-C method implementation for a value's dynamic type. It branches to one destination if the method exists and another if not.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_191\n\nLANGUAGE: sil\nCODE:\n```\nsil-terminator ::= 'dynamic_method_br' sil-operand ',' sil-decl-ref\n                     ',' sil-identifier ',' sil-identifier\n\ndynamic_method_br %0 : $P, #X.method, bb1, bb2\n// %0 must be of protocol type\n// #X.method must be a reference to an @objc method of any class\n// or protocol type\n```\n\n----------------------------------------\n\nTITLE: C/C++ Source File Header Template\nDESCRIPTION: Standard license and copyright header template required for C/C++ source and header files in the Swift.org project. Includes file description, copyright notice, license information and optional documentation section.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n//===-- subfolder/Filename.h - Very brief description -----------*- C++ -*-===//\n//\n// This source file is part of the Swift.org open source project\n//\n// Copyright (c) 2024 Apple Inc. and the Swift project authors\n// Licensed under Apache License v2.0 with Runtime Library Exception\n//\n// See https://swift.org/LICENSE.txt for license information\n// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors\n//\n//===----------------------------------------------------------------------===//\n///\n/// \\file\n/// This file contains stuff that I am describing here in the header and will\n/// be sure to keep up to date.\n///\n//===----------------------------------------------------------------------===//\n```\n\n----------------------------------------\n\nTITLE: Copying Weak References with weak_copy_value in SIL\nDESCRIPTION: Creates a weak reference by incrementing the weak reference count of an object. Only valid in opaque values mode and lowered by AddressLowering to store_weak. Returns a @sil_weak wrapped Optional value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_63\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'weak_copy_value' sil-operand\n\n%1 = weak_copy_value %0 : $Optional<T>\n// %1 will be an @owned value of type $@sil_weak Optional<T>.\n// $T must be a reference type\n// $@sil_weak Optional<T> must be address-only\n```\n\n----------------------------------------\n\nTITLE: Derived RawRepresentable Implementation\nDESCRIPTION: Example showing how the compiler derives a RawRepresentable conformance for an enum, implementing the toRaw and fromRaw methods using switch statements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nenum NSChangeDictionaryKey : RawRepresentable {\n  typealias RawType = String\n\n  case NSKeyValueChangeKindKey\n  case NSKeyValueChangeNewKey\n  case NSKeyValueChangeOldKey\n\n  func toRaw() -> String {\n    switch self {\n    case .NSKeyValueChangeKindKey:\n      return \"NSKeyValueChangeKindKey\"\n    case .NSKeyValueChangeNewKey:\n      return \"NSKeyValueChangeNewKey\"\n    case .NSKeyValueChangeOldKey:\n      return \"NSKeyValueChangeOldKey\"\n    }\n  }\n\n  static func fromRaw(_ s:String) -> NSChangeDictionaryKey? {\n    switch s {\n    case \"NSKeyValueChangeKindKey\":\n      return .NSKeyValueChangeKindKey\n    case \"NSKeyValueChangeNewKey\":\n      return .NSKeyValueChangeNewKey\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: CustomStringConvertible Protocol for Pretty Printing in Swift\nDESCRIPTION: Specifies the CustomStringConvertible protocol as a way for types to define user-friendly string representations. It provides default implementations for format() and toString(), with format() returning the debug representation by default. All types implementing CustomDebugStringConvertible can opt in. Input: type instance; output: string suitable for display. Limitation: Overriding format() is necessary for custom pretty-printing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n/// A thing that can be print()ed and toString()ed.\nprotocol CustomStringConvertible : CustomDebugStringConvertible {\n  typealias PrintRepresentation : TextOutputStreamable = DebugRepresentation\n\n  /// produce a \"pretty\" textual representation.\n  ///\n  /// In general you can return a String here, but if you need more\n  /// control, return a custom TextOutputStreamable type\n  func format() -> PrintRepresentation {\n    return debugFormat()\n  }\n\n  /// Simply convert to String\n  ///\n  /// You'll never want to reimplement this\n  func toString() -> String {\n    var result: String\n    self.format().write(result)\n    return result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mark_dependence_addr Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for mark_dependence_addr instruction which indicates that an in-memory value depends on another value. Operations destroying the base value must not precede instructions depending on that value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_71\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction :: 'mark_dependence_addr' mark-dep-option? sil-operand 'on' sil-operand\nmark-dep-option ::= '[nonescaping]'\nmark-dep-option ::= '[unresolved]'\n\nmark_dependence_addr [nonescaping] %address : $*T on %base : $Builtin.NativeObject\n```\n\n----------------------------------------\n\nTITLE: Building Swift with LSAN for Memory Leak Detection\nDESCRIPTION: Command to build Swift with LeakSanitizer (LSAN) enabled to detect memory leaks. Uses the build-script utility with presets for an incremental Linux build configured with LSAN instrumentation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nutils/build-script --preset buildbot_incremental_linux,lsan,tools=RDA,stdlib=DA,test=no\n```\n\n----------------------------------------\n\nTITLE: Defining XID_Continue Character Ranges for Unicode Identifiers\nDESCRIPTION: A reference list of Unicode code point ranges that qualify as XID_Continue characters according to Unicode Annex #31. These characters are permitted to appear in identifiers after the initial character. This list is used by the Swift compiler to determine valid identifier character sequences.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_32\n\nLANGUAGE: unicode\nCODE:\n```\n#  NOTE: See UAX #31 for more information\n\n0030..0039    ; XID_Continue\n0041..005A    ; XID_Continue\n005F          ; XID_Continue\n0061..007A    ; XID_Continue\n00AA          ; XID_Continue\n00B5          ; XID_Continue\n00B7          ; XID_Continue\n00BA          ; XID_Continue\n00C0..00D6    ; XID_Continue\n00D8..00F6    ; XID_Continue\n00F8..01BA    ; XID_Continue\n01BB          ; XID_Continue\n01BC..01BF    ; XID_Continue\n01C0..01C3    ; XID_Continue\n01C4..0293    ; XID_Continue\n0294          ; XID_Continue\n0295..02AF    ; XID_Continue\n02B0..02C1    ; XID_Continue\n02C6..02D1    ; XID_Continue\n02E0..02E4    ; XID_Continue\n02EC          ; XID_Continue\n02EE          ; XID_Continue\n0300..036F    ; XID_Continue\n0370..0373    ; XID_Continue\n0374          ; XID_Continue\n0376..0377    ; XID_Continue\n037B..037D    ; XID_Continue\n037F          ; XID_Continue\n0386          ; XID_Continue\n0387          ; XID_Continue\n0388..038A    ; XID_Continue\n038C          ; XID_Continue\n038E..03A1    ; XID_Continue\n03A3..03F5    ; XID_Continue\n03F7..0481    ; XID_Continue\n0483..0487    ; XID_Continue\n048A..052F    ; XID_Continue\n0531..0556    ; XID_Continue\n0559          ; XID_Continue\n0560..0588    ; XID_Continue\n0591..05BD    ; XID_Continue\n05BF          ; XID_Continue\n05C1..05C2    ; XID_Continue\n05C4..05C5    ; XID_Continue\n05C7          ; XID_Continue\n05D0..05EA    ; XID_Continue\n05EF..05F2    ; XID_Continue\n0610..061A    ; XID_Continue\n0620..063F    ; XID_Continue\n0640          ; XID_Continue\n0641..064A    ; XID_Continue\n064B..065F    ; XID_Continue\n0660..0669    ; XID_Continue\n066E..066F    ; XID_Continue\n0670          ; XID_Continue\n0671..06D3    ; XID_Continue\n06D5          ; XID_Continue\n06D6..06DC    ; XID_Continue\n06DF..06E4    ; XID_Continue\n06E5..06E6    ; XID_Continue\n06E7..06E8    ; XID_Continue\n06EA..06ED    ; XID_Continue\n06EE..06EF    ; XID_Continue\n06F0..06F9    ; XID_Continue\n06FA..06FC    ; XID_Continue\n06FF          ; XID_Continue\n0710          ; XID_Continue\n0711          ; XID_Continue\n0712..072F    ; XID_Continue\n0730..074A    ; XID_Continue\n074D..07A5    ; XID_Continue\n07A6..07B0    ; XID_Continue\n07B1          ; XID_Continue\n07C0..07C9    ; XID_Continue\n07CA..07EA    ; XID_Continue\n07EB..07F3    ; XID_Continue\n07F4..07F5    ; XID_Continue\n07FA          ; XID_Continue\n07FD          ; XID_Continue\n0800..0815    ; XID_Continue\n0816..0819    ; XID_Continue\n081A          ; XID_Continue\n081B..0823    ; XID_Continue\n0824          ; XID_Continue\n0825..0827    ; XID_Continue\n0828          ; XID_Continue\n0829..082D    ; XID_Continue\n0840..0858    ; XID_Continue\n0859..085B    ; XID_Continue\n0860..086A    ; XID_Continue\n0870..0887    ; XID_Continue\n0889..088E    ; XID_Continue\n0897..089F    ; XID_Continue\n08A0..08C8    ; XID_Continue\n08C9          ; XID_Continue\n08CA..08E1    ; XID_Continue\n08E3..0902    ; XID_Continue\n0903          ; XID_Continue\n0904..0939    ; XID_Continue\n093A          ; XID_Continue\n093B          ; XID_Continue\n093C          ; XID_Continue\n093D          ; XID_Continue\n093E..0940    ; XID_Continue\n0941..0948    ; XID_Continue\n0949..094C    ; XID_Continue\n094D          ; XID_Continue\n094E..094F    ; XID_Continue\n0950          ; XID_Continue\n0951..0957    ; XID_Continue\n0958..0961    ; XID_Continue\n0962..0963    ; XID_Continue\n0966..096F    ; XID_Continue\n0971          ; XID_Continue\n0972..0980    ; XID_Continue\n0981          ; XID_Continue\n0982..0983    ; XID_Continue\n0985..098C    ; XID_Continue\n098F..0990    ; XID_Continue\n0993..09A8    ; XID_Continue\n09AA..09B0    ; XID_Continue\n09B2          ; XID_Continue\n09B6..09B9    ; XID_Continue\n09BC          ; XID_Continue\n09BD          ; XID_Continue\n09BE..09C0    ; XID_Continue\n09C1..09C4    ; XID_Continue\n09C7..09C8    ; XID_Continue\n09CB..09CC    ; XID_Continue\n09CD          ; XID_Continue\n09CE          ; XID_Continue\n09D7          ; XID_Continue\n09DC..09DD    ; XID_Continue\n09DF..09E1    ; XID_Continue\n09E2..09E3    ; XID_Continue\n09E6..09EF    ; XID_Continue\n09F0..09F1    ; XID_Continue\n09FC          ; XID_Continue\n09FE          ; XID_Continue\n0A01..0A02    ; XID_Continue\n0A03          ; XID_Continue\n0A05..0A0A    ; XID_Continue\n0A0F..0A10    ; XID_Continue\n0A13..0A28    ; XID_Continue\n0A2A..0A30    ; XID_Continue\n0A32..0A33    ; XID_Continue\n0A35..0A36    ; XID_Continue\n0A38..0A39    ; XID_Continue\n0A3C          ; XID_Continue\n0A3E..0A40    ; XID_Continue\n0A41..0A42    ; XID_Continue\n0A47..0A48    ; XID_Continue\n0A4B..0A4D    ; XID_Continue\n0A51          ; XID_Continue\n0A59..0A5C    ; XID_Continue\n0A5E          ; XID_Continue\n0A66..0A6F    ; XID_Continue\n0A70..0A71    ; XID_Continue\n0A72..0A74    ; XID_Continue\n0A75          ; XID_Continue\n0A81..0A82    ; XID_Continue\n0A83          ; XID_Continue\n0A85..0A8D    ; XID_Continue\n0A8F..0A91    ; XID_Continue\n0A93..0AA8    ; XID_Continue\n0AAA..0AB0    ; XID_Continue\n0AB2..0AB3    ; XID_Continue\n0AB5..0AB9    ; XID_Continue\n0ABC          ; XID_Continue\n0ABD          ; XID_Continue\n0ABE..0AC0    ; XID_Continue\n0AC1..0AC5    ; XID_Continue\n0AC7..0AC8    ; XID_Continue\n0AC9          ; XID_Continue\n0ACB..0ACC    ; XID_Continue\n0ACD          ; XID_Continue\n0AD0          ; XID_Continue\n0AE0..0AE1    ; XID_Continue\n0AE2..0AE3    ; XID_Continue\n0AE6..0AEF    ; XID_Continue\n0AF9          ; XID_Continue\n0AFA..0AFF    ; XID_Continue\n0B01          ; XID_Continue\n0B02..0B03    ; XID_Continue\n0B05..0B0C    ; XID_Continue\n0B0F..0B10    ; XID_Continue\n0B13..0B28    ; XID_Continue\n0B2A..0B30    ; XID_Continue\n0B32..0B33    ; XID_Continue\n0B35..0B39    ; XID_Continue\n0B3C          ; XID_Continue\n0B3D          ; XID_Continue\n0B3E          ; XID_Continue\n0B3F          ; XID_Continue\n0B40          ; XID_Continue\n0B41..0B44    ; XID_Continue\n0B47..0B48    ; XID_Continue\n0B4B..0B4C    ; XID_Continue\n0B4D          ; XID_Continue\n0B55..0B56    ; XID_Continue\n0B57          ; XID_Continue\n0B5C..0B5D    ; XID_Continue\n0B5F..0B61    ; XID_Continue\n0B62..0B63    ; XID_Continue\n0B66..0B6F    ; XID_Continue\n0B71          ; XID_Continue\n0B82          ; XID_Continue\n0B83          ; XID_Continue\n0B85..0B8A    ; XID_Continue\n0B8E..0B90    ; XID_Continue\n0B92..0B95    ; XID_Continue\n0B99..0B9A    ; XID_Continue\n0B9C          ; XID_Continue\n0B9E..0B9F    ; XID_Continue\n0BA3..0BA4    ; XID_Continue\n0BA8..0BAA    ; XID_Continue\n0BAE..0BB9    ; XID_Continue\n0BBE..0BBF    ; XID_Continue\n0BC0          ; XID_Continue\n0BC1..0BC2    ; XID_Continue\n0BC6..0BC8    ; XID_Continue\n0BCA..0BCC    ; XID_Continue\n0BCD          ; XID_Continue\n0BD0          ; XID_Continue\n0BD7          ; XID_Continue\n0BE6..0BEF    ; XID_Continue\n0C00          ; XID_Continue\n0C01..0C03    ; XID_Continue\n0C04          ; XID_Continue\n0C05..0C0C    ; XID_Continue\n0C0E..0C10    ; XID_Continue\n0C12..0C28    ; XID_Continue\n0C2A..0C39    ; XID_Continue\n0C3C          ; XID_Continue\n0C3D          ; XID_Continue\n0C3E..0C40    ; XID_Continue\n0C41..0C44    ; XID_Continue\n0C46..0C48    ; XID_Continue\n0C4A..0C4D    ; XID_Continue\n0C55..0C56    ; XID_Continue\n0C58..0C5A    ; XID_Continue\n0C5D          ; XID_Continue\n0C60..0C61    ; XID_Continue\n0C62..0C63    ; XID_Continue\n0C66..0C6F    ; XID_Continue\n0C80          ; XID_Continue\n0C81          ; XID_Continue\n0C82..0C83    ; XID_Continue\n0C85..0C8C    ; XID_Continue\n0C8E..0C90    ; XID_Continue\n0C92..0CA8    ; XID_Continue\n0CAA..0CB3    ; XID_Continue\n0CB5..0CB9    ; XID_Continue\n0CBC          ; XID_Continue\n0CBD          ; XID_Continue\n0CBE          ; XID_Continue\n0CBF          ; XID_Continue\n0CC0..0CC4    ; XID_Continue\n0CC6          ; XID_Continue\n0CC7..0CC8    ; XID_Continue\n0CCA..0CCB    ; XID_Continue\n0CCC..0CCD    ; XID_Continue\n0CD5..0CD6    ; XID_Continue\n0CDD..0CDE    ; XID_Continue\n0CE0..0CE1    ; XID_Continue\n0CE2..0CE3    ; XID_Continue\n0CE6..0CEF    ; XID_Continue\n0CF1..0CF2    ; XID_Continue\n0CF3          ; XID_Continue\n0D00..0D01    ; XID_Continue\n0D02..0D03    ; XID_Continue\n0D04..0D0C    ; XID_Continue\n0D0E..0D10    ; XID_Continue\n0D12..0D3A    ; XID_Continue\n0D3B..0D3C    ; XID_Continue\n0D3D          ; XID_Continue\n0D3E..0D40    ; XID_Continue\n0D41..0D44    ; XID_Continue\n0D46..0D48    ; XID_Continue\n0D4A..0D4C    ; XID_Continue\n0D4D          ; XID_Continue\n0D4E          ; XID_Continue\n0D54..0D56    ; XID_Continue\n0D57          ; XID_Continue\n0D5F..0D61    ; XID_Continue\n0D62..0D63    ; XID_Continue\n0D66..0D6F    ; XID_Continue\n0D7A..0D7F    ; XID_Continue\n0D81          ; XID_Continue\n0D82..0D83    ; XID_Continue\n0D85..0D96    ; XID_Continue\n0D9A..0DB1    ; XID_Continue\n0DB3..0DBB    ; XID_Continue\n0DBD          ; XID_Continue\n0DC0..0DC6    ; XID_Continue\n0DCA          ; XID_Continue\n0DCF..0DD1    ; XID_Continue\n0DD2..0DD4    ; XID_Continue\n0DD6          ; XID_Continue\n0DD8..0DDF    ; XID_Continue\n0DE6..0DEF    ; XID_Continue\n0DF2..0DF3    ; XID_Continue\n0E01..0E30    ; XID_Continue\n0E31          ; XID_Continue\n0E32..0E33    ; XID_Continue\n0E34..0E3A    ; XID_Continue\n0E40..0E45    ; XID_Continue\n0E46          ; XID_Continue\n0E47..0E4E    ; XID_Continue\n0E50..0E59    ; XID_Continue\n0E81..0E82    ; XID_Continue\n0E84          ; XID_Continue\n0E86..0E8A    ; XID_Continue\n0E8C..0EA3    ; XID_Continue\n0EA5          ; XID_Continue\n0EA7..0EB0    ; XID_Continue\n0EB1          ; XID_Continue\n0EB2..0EB3    ; XID_Continue\n0EB4..0EBC    ; XID_Continue\n0EBD          ; XID_Continue\n0EC0..0EC4    ; XID_Continue\n0EC6          ; XID_Continue\n0EC8..0ECE    ; XID_Continue\n0ED0..0ED9    ; XID_Continue\n0EDC..0EDF    ; XID_Continue\n0F00          ; XID_Continue\n0F18..0F19    ; XID_Continue\n0F20..0F29    ; XID_Continue\n0F35          ; XID_Continue\n0F37          ; XID_Continue\n0F39          ; XID_Continue\n0F3E..0F3F    ; XID_Continue\n0F40..0F47    ; XID_Continue\n0F49..0F6C    ; XID_Continue\n0F71..0F7E    ; XID_Continue\n0F7F          ; XID_Continue\n0F80..0F84    ; XID_Continue\n0F86..0F87    ; XID_Continue\n0F88..0F8C    ; XID_Continue\n0F8D..0F97    ; XID_Continue\n0F99..0FBC    ; XID_Continue\n0FC6          ; XID_Continue\n1000..102A    ; XID_Continue\n```\n\n----------------------------------------\n\nTITLE: Matching Swift Enum Values in C++ Switch Statements\nDESCRIPTION: This C++ function receives a CompassDirection enum and returns its opposite by switching over all possible cases. The bridged class provides an inner enum for case matching and implicit conversion to support switch statements. Swift module must be properly bridged; code relies on comprehensive case coverage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Navigation-Swift.h\"\nusing namespace Navigation;\n\nCompassDirection getOpposite(CompassDirection cd) {\n  switch (cd) {                       // implicit conversion to CompassDirection::cases\n  case CompassDirection::north:\n    return CompassDirection::south();\n  case CompassDirection::south:\n    return CompassDirection::north();\n  case CompassDirection::east:\n    return CompassDirection::west();\n  case CompassDirection::west:\n    return CompassDirection::east();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Runtime Code Generation Helper Entry Points (Symbols)\nDESCRIPTION: Provides a list of internal Swift runtime functions that implement common code generation patterns, primarily as a code size optimization. This includes functions for assigning existentials with copying (`_swift_assignExistentialWithCopy`), copying Plain Old Data (`_swift_copyPOD`), and getting/storing the tag for multi-payload enums (`_swift_getEnumCaseMultiPayload`, `_swift_storeEnumTagMultiPayload`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_9\n\nLANGUAGE: Symbols\nCODE:\n```\n0000000000023a40 T _swift_assignExistentialWithCopy\n000000000001dbf0 T _swift_copyPOD\n000000000001c560 T _swift_getEnumCaseMultiPayload\n000000000001c400 T _swift_storeEnumTagMultiPayload\n```\n\n----------------------------------------\n\nTITLE: Declaring and Using Mutating Methods with Closures in Swift\nDESCRIPTION: This Swift snippet demonstrates how to declare a mutating method—organize—on an Array, which accepts a closure as a predicate. The code shows capturing the first element of the array, evaluating it with a predicate, and using early return if the predicate test fails. This example is used to illustrate how exclusivity enforcement impacts optimizer behavior and the need to potentially copy array elements depending on whether dynamic (callee-side) or static (caller-side) inout rules are applied. Dependencies include Swift standard library support for mutating methods and closures. The expected input is an instance of Array and a predicate closure; the output depends on the omitted implementation, but early exit is possible if the predicate returns false. The snippet also reflects the practical optimization trade-offs in Swift's exclusive access enforcement.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension Array {\n  mutating func organize(_ predicate: (Element) -> Bool) {\n    let first = self[0]\n    if !predicate(first) { return }\n    ...\n    // something here uses first\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Function Kind Mangling in Swift\nDESCRIPTION: This snippet defines the mangling rules for different function kinds in Swift, including Objective-C blocks, C function pointers, and Swift-specific function types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nFUNCTION-KIND ::= 'B'                      // objc block function type\nFUNCTION-KIND ::= 'zB' C-TYPE              // objc block type with non-canonical C type\nFUNCTION-KIND ::= 'L'                      // objc block function type with canonical C type (escaping) (DWARF only; otherwise use 'B' or 'zB' C-TYPE)\nFUNCTION-KIND ::= 'C'                      // C function pointer / C++ method type\nFUNCTION-KIND ::= 'zC' C-TYPE              // C function pointer / C++ method type with non-canonical C type\nFUNCTION-KIND ::= 'A'                      // @auto_closure function type (escaping)\nFUNCTION-KIND ::= 'E'                      // function type (noescape)\n\nC-TYPE ::= NATURAL CHAR*                   // raw Itanium mangling\n```\n\n----------------------------------------\n\nTITLE: Objective-C Method Signature with Non-Trailing Error Parameter\nDESCRIPTION: This Objective-C code shows a method signature from the deprecated `ISyncSessionDriverDelegate` category where the `NSError**` parameter is not the last parameter. This structure poses a challenge for the proposed automatic import mechanism, but these specific APIs are deprecated.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_15\n\nLANGUAGE: objective-c\nCODE:\n```\n```objc\n- (BOOL)sessionDriver:(ISyncSessionDriver *)sender\n        didRegisterClientAndReturnError:(NSError **)outError;\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Address-Only Enums in Swift SIL\nDESCRIPTION: Demonstrates the two-step initialization process for address-only enums: first storing data with init_enum_data_addr for cases that require data, then injecting the tag with inject_enum_addr.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_136\n\nLANGUAGE: sil\nCODE:\n```\nenum AddressOnlyEnum {\n  case HasData(AddressOnlyType)\n  case NoData\n}\n\nsil @init_with_data : $(AddressOnlyType) -> AddressOnlyEnum {\nentry(%0 : $*AddressOnlyEnum, %1 : $*AddressOnlyType):\n  // Store the data argument for the case.\n  %2 = init_enum_data_addr %0 : $*AddressOnlyEnum, #AddressOnlyEnum.HasData!enumelt\n  copy_addr [take] %1 to [init] %2 : $*AddressOnlyType\n  // Inject the tag.\n  inject_enum_addr %0 : $*AddressOnlyEnum, #AddressOnlyEnum.HasData!enumelt\n  return\n}\n\nsil @init_without_data : $() -> AddressOnlyEnum {\n  // No data. We only need to inject the tag.\n  inject_enum_addr %0 : $*AddressOnlyEnum, #AddressOnlyEnum.NoData!enumelt\n  return\n}\n```\n\n----------------------------------------\n\nTITLE: Def-Use Chain from Box Allocation through Pointer Conversion to Formal Access - Swift\nDESCRIPTION: This code example demonstrates a def-use chain in SIL starting from a boxed allocation, projecting to a base address, converting through pointer types, and wrapping in a formal access using begin_access. It combines alloc_box, project_box, address_to_pointer, copy_value, pointer_to_address, and begin_access instructions to illustrate storage and pointer transformations within a control flow branch. The snippet is used to highlight complexities of access base identification, pointer casts, and phi merging in SIL memory analysis, and models potential issues with address-type phis.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nbb0:\n  %base = alloc_box $Int { var Int }\n  %boxadr = project_box %base : ${ var Int }\n  %p0 = address_to_pointer %boxadr : $*Int to $Builtin.RawPointer\n  cond_br _, bb1, bb2\n\nbb1:\n  %p1 = copy_value %p0 : $Builtin.RawPointer\n  br bb3(%p1 : $Builtin.RawPointer)\n\nbb2:\n  br bb3(%p0 : $Builtin.RawPointer)\n\nbb3(%ptr : $Builtin.RawPointer):\n  %adr = pointer_to_address %ptr : $Builtin.RawPointer to $*Int\n  %access = begin_access [read] [static] %adr : $*Int\n```\n\n----------------------------------------\n\nTITLE: Documenting Protocol Requirement Changes in Swift\nDESCRIPTION: This snippet shows changes to protocol requirements in Swift, including additions and removals of associated types, functions, and variables, as well as changes to access modifiers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n/* Protocol Requirement Change */\ncake: AssociatedType AssociatedTypePro.T1 has removed default type Swift.Int\ncake: AssociatedType RequirementChanges.addedTypeWithoutDefault has been added as a protocol requirement\ncake: Func RequirementChanges.addedFunc() has been added as a protocol requirement\ncake: Var RequirementChanges.addedVar has been added as a protocol requirement\ncake: Accessor ClassWithOpenMember.property.Get() is no longer open for subclassing\n```\n\n----------------------------------------\n\nTITLE: Swift Runtime Libraries Layering Diagram\nDESCRIPTION: ASCII diagram illustrating the layering architecture of Swift runtime libraries. The four layers (from bottom to top) are Core, Overlay, Supplemental, and Testing, with each higher layer depending on those below it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n╔═══════════════╗\n║               ║\n║    Testing    ║\n║               ║\n╠───────────────╣\n│               │\n│ Supplemental  │\n│               │\n├───────────────┤\n│               │\n│    Overlay    │\n│               │\n├───────────────┤\n│               │\n│     Core      │\n│               │\n└───────────────┘\n```\n\n----------------------------------------\n\nTITLE: Checking Python Architecture on Apple Silicon (sh)\nDESCRIPTION: Uses the `file` command combined with command substitution `$(which python3)` to determine the architecture (e.g., arm64 or x86_64) of the `python3` executable found in the PATH. This is crucial on Apple Silicon Macs to ensure a native arm64 build of Python is being used, as running under Rosetta emulation (x86_64) can cause build failures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nfile $(which python3)\n```\n\n----------------------------------------\n\nTITLE: Encoding Retroactive Conformance in Swift Mangling\nDESCRIPTION: Defines the mangling rule for retroactive protocol conformances, which are specified in a module other than the conforming type or protocol module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_44\n\nLANGUAGE: Swift\nCODE:\n```\nretroactive-conformance ::= any-protocol-conformance 'g' INDEX\n```\n\n----------------------------------------\n\nTITLE: Function Type Conversion in Swift SIL\nDESCRIPTION: Converts functions between ABI-compatible types, allowing changes to tuple element names and class hierarchies while preserving convention attributes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_171\n\nLANGUAGE: swift\nCODE:\n```\n%1 = convert_function %0 : $T -> U to $T' -> U'\n```\n\n----------------------------------------\n\nTITLE: Testing with Toolchain and Preset\nDESCRIPTION: Example of running a test against a snapshot toolchain using a preset configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npreset=$PRESET_NAME\n@swift-ci Please test with toolchain and preset\n```\n\n----------------------------------------\n\nTITLE: Declaring Owned Function Parameters in Swift\nDESCRIPTION: Example of explicitly marking a function parameter as 'owned', which represents the default passing behavior. This makes ownership intent clear, particularly useful when working with non-copyable types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc append(_ values: owned [Element]) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: VJP Function for Reabstraction Thunk in Swift\nDESCRIPTION: This snippet shows the generated VJP (Vector-Jacobian Product) function for the reabstraction thunk, demonstrating the current limitations in differentiation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\n// AD__$sS2fIegnr_S2fIegyd_TR__vjp_src_0_wrt_0\nsil hidden [serializable] [ossa] @AD__$sS2fIegnr_S2fIegyd_TR__vjp_src_0_wrt_0 : $@convention(thin) (Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @out Float)\n-> (Float, @owned @callee_guaranteed (Float) -> Float) {\n// %0                                             // user: %3\n// %1                                             // user: %5\nbb0(%0 : $Float, %1 : @guaranteed $@callee_guaranteed (@in_guaranteed Float) -> @out Float):\n  %2 = alloc_stack $Float                         // users: %19, %12, %3\n  store %0 to [trivial] %2 : $*Float              // id: %3\n  %4 = alloc_stack $Float                         // users: %18, %17, %12\n  %5 = copy_value %1 : $@callee_guaranteed (@in_guaranteed Float) -> @out Float // user: %6\n> %6 = differentiable_function [parameters 0] %5 : $@callee_guaranteed (@in_guaranteed Float) -> @out Float // users: %11, %7\n  %7 = begin_borrow %6 : $@differentiable @callee_guaranteed (@in_guaranteed Float) -> @out Float // users: %10, %8\n  %8 = differentiable_function_extract [vjp] %7 : $@differentiable @callee_guaranteed (@in_guaranteed Float) -> @out Float // user: %9\n  %9 = copy_value %8 : $@callee_guaranteed (@in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float) // users: %13, %12\n  end_borrow %7 : $@differentiable @callee_guaranteed (@in_guaranteed Float) -> @out Float // id: %10\n  destroy_value %6 : $@differentiable @callee_guaranteed (@in_guaranteed Float) -> @out Float // id: %11\n  %12 = apply %9(%4, %2) : $@callee_guaranteed (@in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float) // user: %16\n  destroy_value %9 : $@callee_guaranteed (@in_guaranteed Float) -> (@out Float, @owned @callee_guaranteed (@in_guaranteed Float) -> @out Float) // id: %13\n  %14 = tuple ()\n  // function_ref thunk for @escaping @callee_guaranteed (@in_guaranteed Float) -> (@out Float)\n  %15 = function_ref @$sS2fIegnr_S2fIegyd_TR : $@convention(thin) (Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @out Float) -> Float // user: %16\n  %16 = partial_apply [callee_guaranteed] %15(%12) : $@convention(thin) (Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @out Float) -> Float // user: %20\n  %17 = load [trivial] %4 : $*Float               // user: %23\n  dealloc_stack %4 : $*Float                      // id: %18\n  dealloc_stack %2 : $*Float                      // id: %19\n  %20 = struct $_AD__$sS2fIegnr_S2fIegyd_TR_bb0__PB__src_0_wrt_0 (%16 : $@callee_guaranteed (Float) -> Float) // user: %22\n  // function_ref AD__$sS2fIegnr_S2fIegyd_TR__pullback_src_0_wrt_0\n  %21 = function_ref @AD__$sS2fIegnr_S2fIegyd_TR__pullback_src_0_wrt_0 : $@convention(thin) (Float, @owned _AD__$sS2fIegnr_S2fIegyd_TR_bb0__PB__src_0_wrt_0) -> Float // user: %22\n  %22 = partial_apply [callee_guaranteed] %21(%20) : $@convention(thin) (Float, @owned _AD__$sS2fIegnr_S2fIegyd_TR_bb0__PB__src_0_wrt_0) -> Float // user: %23\n  %23 = tuple (%17 : $Float, %22 : $@callee_guaranteed (Float) -> Float) // user: %24\n  return %23 : $(Float, @callee_guaranteed (Float) -> Float) // id: %24\n} // end sil function 'AD__$sS2fIegnr_S2fIegyd_TR__vjp_src_0_wrt_0'\n```\n\n----------------------------------------\n\nTITLE: Importing Foo Modules in Swift\nDESCRIPTION: Import statements for the Foo module ecosystem, including FooSub and FooHelper modules. These imports are marked as exported, making them available to any module importing this one.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@_exported import Foo.FooSub\n@_exported import FooHelper\n```\n\n----------------------------------------\n\nTITLE: Configuring Sccache Cache Size via Environment Variable (sh)\nDESCRIPTION: Sets the `SCCACHE_CACHE_SIZE` environment variable to 50GB. This should be placed in a shell configuration file (like `.bashrc` or `.zshrc`) to increase the cache size used by the `sccache` tool, potentially speeding up clean builds of the Swift project. Requires `sccache` to be installed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nexport SCCACHE_CACHE_SIZE=\"50G\"\n```\n\n----------------------------------------\n\nTITLE: Understanding Generic Type Representation in Swift\nDESCRIPTION: Shows mangled symbols for generic types including a parameterized Slab type and a fixed-size array builtin type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_24\n\nLANGUAGE: Swift\nCODE:\n```\n$s4main4SlabVy$1_SiG ---> main.Slab<2, Swift.Int>\n$s$n3_SSBV ---> Builtin.FixedArray<-4, Swift.String>\n```\n\n----------------------------------------\n\nTITLE: Dumping Optimized SIL Output\nDESCRIPTION: Command to print the SIL after running the complete SIL optimization pipeline\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -emit-sil -O file.swift\n```\n\n----------------------------------------\n\nTITLE: Formal Access to Boxed Struct Storage using SIL - Swift\nDESCRIPTION: This snippet illustrates formal memory access for boxed struct storage in Swift SIL. It utilizes alloc_box to allocate a box, project_box to obtain the base, and then scopes the access via begin_access/end_access. struct_element_addr and load are used for field access and data retrieval, respectively. All operations are on SIL addresses and are instrumental for modeling access paths in boxed value contexts, with begin_access ensuring exclusivity semantics. Inputs include types to be boxed; output is data loaded from the boxed field.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n  %root    = alloc_box $S\n  %base    = project_box %root : ${ var S }\n  %access  = begin_access [read] [static] %base : $*S\n  %address = struct_element_addr %access : $*S, #.field\n  %value   = load [trivial] %address : $*Int64\n  end_access %access : $*S\n```\n\n----------------------------------------\n\nTITLE: Explicit Copying with explicit_copy_value in SIL\nDESCRIPTION: Semantically identical to copy_value but is treated as an explicit copy requested by the user during move-only checking. Used for implementing copy builtins for no implicit copy types and producing valid Ownership SSA SIL after diagnostics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_113\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'explicit_copy_value' sil-operand\n\n%1 = explicit_copy_value %0 : $A\n```\n\n----------------------------------------\n\nTITLE: Fixit Structure Format in SourceKit Diagnostic Responses\nDESCRIPTION: JSON schema for fixit objects in diagnostic responses. Fixits represent suggested code modifications to resolve errors, including position, length, and replacement text.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_27\n\nLANGUAGE: json\nCODE:\n```\nfixit ::=\n{\n    <key.offset>:        (int64) // location of the fixit range\n    <key.length>:        (int64) // length of the fixit range\n    <key.sourcetext>:    (string) // text to replace the range with\n}\n```\n\n----------------------------------------\n\nTITLE: Copyable to Move-Only Wrapper Address SIL Instruction Definition\nDESCRIPTION: Defines the syntax for copyable_to_moveonlywrapper_addr instruction that converts *T to *@moveOnly T at the address level.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_204\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'copyable_to_moveonlywrapper_addr'\n```\n\n----------------------------------------\n\nTITLE: Setting GYB Flags for Swift Clang Importer\nDESCRIPTION: Sets the SWIFT_GYB_FLAGS variable with the path to the CFDatabase.def file. This is used for code generation with GYB (Generate Your Boilerplate).\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_GYB_FLAGS\n    \"-DCFDatabaseFile=${SWIFT_SOURCE_DIR}/lib/ClangImporter/CFDatabase.def\")\n```\n\n----------------------------------------\n\nTITLE: Example SIL Lowered Function Type (Inout Parameter)\nDESCRIPTION: This snippet illustrates the lowered SIL type for a function with an `inout` parameter, stored within a generic context (`h.fn` where `h` is `Generator<(Int, inout Int) -> Float>`). It demonstrates how non-materializable types like `inout Int` are handled during lowering, maintaining their specific conventions (`@inout`) alongside indirect conventions for other parameters/results (`@in`, `@out`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n@callee_owned () -> @owned @callee_owned (@in Int, @inout Int) -> @out Float\n```\n\n----------------------------------------\n\nTITLE: Importing Objective-C Method with NSError** Parameter to Swift\nDESCRIPTION: This example shows how an Objective-C method with an NSError** out-parameter would be imported into Swift as a throwing function. It demonstrates the removal of the error parameter and the addition of the throws keyword.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_22\n\nLANGUAGE: objc\nCODE:\n```\n- (NSData *)dataFromRange:(NSRange)range\n       documentAttributes:(NSDictionary *)dict\n                    error:(NSError **)error;\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc dataFromRange(\n    _ range: NSRange,\n    documentAttributes dict: NSDictionary\n) throws -> NSData\n```\n\n----------------------------------------\n\nTITLE: Mapping C++ Inheritance to Swift Structs\nDESCRIPTION: Illustrates how C++ class inheritance could be mapped to Swift structs by replicating base class APIs in derived classes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_47\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nclass Base {\npublic:\n  void doBaseStuff();\n};\n\nclass Derived : public Base {\npublic:\n  void doDerivedStuff();\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\npublic struct Base {\n  public func doBaseStuff()\n}\n\npublic struct Derived {\n  public func doBaseStuff()\n  public func doDerivedStuff()\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Simplified Locator Path for Failed Constraint\nDESCRIPTION: Demonstrates a locator path for a failed constraint where Int must conform to ExpressibleByFloatLiteral. The locator helps pinpoint the specific AST node (floating-point literal) responsible for the type error.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n  function application -> apply argument -> tuple element #0\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Transformation for Cursor-Based Refactoring in C++\nDESCRIPTION: This snippet shows the implementation of the performChange method for the String Localization refactoring. It inserts NSLocalizedString API calls around the selected string literal.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nbool RefactoringActionLocalizeString::\nperformChange() {\n  EditConsumer.insert(SM, Cursor.TrailingExpr->getStartLoc(), \"NSLocalizedString(\");\n  EditConsumer.insertAfter(SM, Cursor.TrailingExpr->getEndLoc(), \", comment: \\\"\\\");\n  return false; // Return true if code change aborted.\n}\n```\n\n----------------------------------------\n\nTITLE: Example LLDB Script (`test.lldb`)\nDESCRIPTION: An example LLDB script file (`test.lldb`) demonstrating automated debugging steps. It sets environment variables, sets/modifies breakpoints with ignore counts, launches a process, sets further breakpoints based on execution state (line number, expression result), continues execution, and finally disassembles a function. This automates a complex debugging workflow.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_24\n\nLANGUAGE: lldb\nCODE:\n```\nenv DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib\nbreak set -n swift_getGenericMetadata\nbreak mod 1 -i 83\nprocess launch -- --stdlib-unittest-in-process --stdlib-unittest-filter \"DefaultedForwardMutableCollection<OpaqueValue<Int>>.Type.subscript(_: Range)/Set/semantics\"\nbreak set -l 224\nc\nexpr pattern->CreateFunction\nbreak set -a $0\nc\ndis -f\n```\n\n----------------------------------------\n\nTITLE: Using sourcekitd-repl for Index Requests\nDESCRIPTION: Interactive example showing how to perform an index request using the sourcekitd-repl tool. The JSON request specifies the source file to be indexed and required compiler arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ sourcekitd-repl\nWelcome to SourceKit.  Type ':help' for assistance.\n(SourceKit) {\n    key.request: source.request.index,\n    key.sourcefile: \"/path/to/file.swift\",\n    key.compilerargs: [\"/path/to/file.swift\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters that Change When Uppercased\nDESCRIPTION: This snippet lists Unicode code points and ranges that change when converted to uppercase. It uses a specific format where each line represents either a single code point or a range, followed by the property 'Changes_When_Uppercased'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_16\n\nLANGUAGE: Unicode\nCODE:\n```\n0061..007A    ; Changes_When_Uppercased\n00B5          ; Changes_When_Uppercased\n00DF..00F6    ; Changes_When_Uppercased\n00F8..00FF    ; Changes_When_Uppercased\n0101          ; Changes_When_Uppercased\n0103          ; Changes_When_Uppercased\n0105          ; Changes_When_Uppercased\n0107          ; Changes_When_Uppercased\n0109          ; Changes_When_Uppercased\n010B          ; Changes_When_Uppercased\n010D          ; Changes_When_Uppercased\n010F          ; Changes_When_Uppercased\n0111          ; Changes_When_Uppercased\n0113          ; Changes_When_Uppercased\n0115          ; Changes_When_Uppercased\n0117          ; Changes_When_Uppercased\n0119          ; Changes_When_Uppercased\n011B          ; Changes_When_Uppercased\n011D          ; Changes_When_Uppercased\n011F          ; Changes_When_Uppercased\n0121          ; Changes_When_Uppercased\n0123          ; Changes_When_Uppercased\n0125          ; Changes_When_Uppercased\n0127          ; Changes_When_Uppercased\n0129          ; Changes_When_Uppercased\n012B          ; Changes_When_Uppercased\n012D          ; Changes_When_Uppercased\n012F          ; Changes_When_Uppercased\n0131          ; Changes_When_Uppercased\n0133          ; Changes_When_Uppercased\n0135          ; Changes_When_Uppercased\n0137          ; Changes_When_Uppercased\n013A          ; Changes_When_Uppercased\n013C          ; Changes_When_Uppercased\n013E          ; Changes_When_Uppercased\n0140          ; Changes_When_Uppercased\n0142          ; Changes_When_Uppercased\n0144          ; Changes_When_Uppercased\n0146          ; Changes_When_Uppercased\n0148..0149    ; Changes_When_Uppercased\n014B          ; Changes_When_Uppercased\n014D          ; Changes_When_Uppercased\n014F          ; Changes_When_Uppercased\n0151          ; Changes_When_Uppercased\n0153          ; Changes_When_Uppercased\n0155          ; Changes_When_Uppercased\n0157          ; Changes_When_Uppercased\n0159          ; Changes_When_Uppercased\n015B          ; Changes_When_Uppercased\n015D          ; Changes_When_Uppercased\n015F          ; Changes_When_Uppercased\n0161          ; Changes_When_Uppercased\n0163          ; Changes_When_Uppercased\n0165          ; Changes_When_Uppercased\n0167          ; Changes_When_Uppercased\n0169          ; Changes_When_Uppercased\n016B          ; Changes_When_Uppercased\n016D          ; Changes_When_Uppercased\n016F          ; Changes_When_Uppercased\n0171          ; Changes_When_Uppercased\n0173          ; Changes_When_Uppercased\n0175          ; Changes_When_Uppercased\n0177          ; Changes_When_Uppercased\n017A          ; Changes_When_Uppercased\n017C          ; Changes_When_Uppercased\n017E..0180    ; Changes_When_Uppercased\n0183          ; Changes_When_Uppercased\n0185          ; Changes_When_Uppercased\n0188          ; Changes_When_Uppercased\n018C          ; Changes_When_Uppercased\n0192          ; Changes_When_Uppercased\n0195          ; Changes_When_Uppercased\n0199..019B    ; Changes_When_Uppercased\n019E          ; Changes_When_Uppercased\n01A1          ; Changes_When_Uppercased\n01A3          ; Changes_When_Uppercased\n01A5          ; Changes_When_Uppercased\n01A8          ; Changes_When_Uppercased\n01AD          ; Changes_When_Uppercased\n01B0          ; Changes_When_Uppercased\n01B4          ; Changes_When_Uppercased\n01B6          ; Changes_When_Uppercased\n01B9          ; Changes_When_Uppercased\n01BD          ; Changes_When_Uppercased\n01BF          ; Changes_When_Uppercased\n01C5..01C6    ; Changes_When_Uppercased\n01C8..01C9    ; Changes_When_Uppercased\n01CB..01CC    ; Changes_When_Uppercased\n01CE          ; Changes_When_Uppercased\n01D0          ; Changes_When_Uppercased\n01D2          ; Changes_When_Uppercased\n01D4          ; Changes_When_Uppercased\n01D6          ; Changes_When_Uppercased\n01D8          ; Changes_When_Uppercased\n01DA          ; Changes_When_Uppercased\n01DC..01DD    ; Changes_When_Uppercased\n01DF          ; Changes_When_Uppercased\n01E1          ; Changes_When_Uppercased\n01E3          ; Changes_When_Uppercased\n01E5          ; Changes_When_Uppercased\n01E7          ; Changes_When_Uppercased\n01E9          ; Changes_When_Uppercased\n01EB          ; Changes_When_Uppercased\n01ED          ; Changes_When_Uppercased\n01EF..01F0    ; Changes_When_Uppercased\n01F2..01F3    ; Changes_When_Uppercased\n01F5          ; Changes_When_Uppercased\n01F9          ; Changes_When_Uppercased\n01FB          ; Changes_When_Uppercased\n01FD          ; Changes_When_Uppercased\n01FF          ; Changes_When_Uppercased\n0201          ; Changes_When_Uppercased\n0203          ; Changes_When_Uppercased\n0205          ; Changes_When_Uppercased\n0207          ; Changes_When_Uppercased\n0209          ; Changes_When_Uppercased\n020B          ; Changes_When_Uppercased\n020D          ; Changes_When_Uppercased\n020F          ; Changes_When_Uppercased\n0211          ; Changes_When_Uppercased\n0213          ; Changes_When_Uppercased\n0215          ; Changes_When_Uppercased\n0217          ; Changes_When_Uppercased\n0219          ; Changes_When_Uppercased\n021B          ; Changes_When_Uppercased\n021D          ; Changes_When_Uppercased\n021F          ; Changes_When_Uppercased\n0223          ; Changes_When_Uppercased\n0225          ; Changes_When_Uppercased\n0227          ; Changes_When_Uppercased\n0229          ; Changes_When_Uppercased\n022B          ; Changes_When_Uppercased\n022D          ; Changes_When_Uppercased\n022F          ; Changes_When_Uppercased\n0231          ; Changes_When_Uppercased\n0233          ; Changes_When_Uppercased\n023C          ; Changes_When_Uppercased\n023F..0240    ; Changes_When_Uppercased\n0242          ; Changes_When_Uppercased\n0247          ; Changes_When_Uppercased\n0249          ; Changes_When_Uppercased\n024B          ; Changes_When_Uppercased\n024D          ; Changes_When_Uppercased\n024F..0254    ; Changes_When_Uppercased\n0256..0257    ; Changes_When_Uppercased\n0259          ; Changes_When_Uppercased\n025B..025C    ; Changes_When_Uppercased\n0260..0261    ; Changes_When_Uppercased\n0263..0266    ; Changes_When_Uppercased\n0268..026C    ; Changes_When_Uppercased\n026F          ; Changes_When_Uppercased\n0271..0272    ; Changes_When_Uppercased\n0275          ; Changes_When_Uppercased\n027D          ; Changes_When_Uppercased\n0280          ; Changes_When_Uppercased\n0282..0283    ; Changes_When_Uppercased\n0287..028C    ; Changes_When_Uppercased\n0292          ; Changes_When_Uppercased\n029D..029E    ; Changes_When_Uppercased\n0345          ; Changes_When_Uppercased\n0371          ; Changes_When_Uppercased\n0373          ; Changes_When_Uppercased\n0377          ; Changes_When_Uppercased\n037B..037D    ; Changes_When_Uppercased\n0390          ; Changes_When_Uppercased\n03AC..03CE    ; Changes_When_Uppercased\n03D0..03D1    ; Changes_When_Uppercased\n03D5..03D7    ; Changes_When_Uppercased\n03D9          ; Changes_When_Uppercased\n03DB          ; Changes_When_Uppercased\n03DD          ; Changes_When_Uppercased\n03DF          ; Changes_When_Uppercased\n03E1          ; Changes_When_Uppercased\n03E3          ; Changes_When_Uppercased\n03E5          ; Changes_When_Uppercased\n03E7          ; Changes_When_Uppercased\n03E9          ; Changes_When_Uppercased\n03EB          ; Changes_When_Uppercased\n03ED          ; Changes_When_Uppercased\n03EF..03F3    ; Changes_When_Uppercased\n03F5          ; Changes_When_Uppercased\n03F8          ; Changes_When_Uppercased\n03FB          ; Changes_When_Uppercased\n0430..045F    ; Changes_When_Uppercased\n0461          ; Changes_When_Uppercased\n0463          ; Changes_When_Uppercased\n0465          ; Changes_When_Uppercased\n0467          ; Changes_When_Uppercased\n0469          ; Changes_When_Uppercased\n046B          ; Changes_When_Uppercased\n046D          ; Changes_When_Uppercased\n046F          ; Changes_When_Uppercased\n0471          ; Changes_When_Uppercased\n0473          ; Changes_When_Uppercased\n0475          ; Changes_When_Uppercased\n0477          ; Changes_When_Uppercased\n0479          ; Changes_When_Uppercased\n047B          ; Changes_When_Uppercased\n047D          ; Changes_When_Uppercased\n047F          ; Changes_When_Uppercased\n0481          ; Changes_When_Uppercased\n048B          ; Changes_When_Uppercased\n048D          ; Changes_When_Uppercased\n048F          ; Changes_When_Uppercased\n0491          ; Changes_When_Uppercased\n0493          ; Changes_When_Uppercased\n0495          ; Changes_When_Uppercased\n0497          ; Changes_When_Uppercased\n0499          ; Changes_When_Uppercased\n049B          ; Changes_When_Uppercased\n049D          ; Changes_When_Uppercased\n049F          ; Changes_When_Uppercased\n04A1          ; Changes_When_Uppercased\n04A3          ; Changes_When_Uppercased\n04A5          ; Changes_When_Uppercased\n04A7          ; Changes_When_Uppercased\n04A9          ; Changes_When_Uppercased\n04AB          ; Changes_When_Uppercased\n04AD          ; Changes_When_Uppercased\n04AF          ; Changes_When_Uppercased\n04B1          ; Changes_When_Uppercased\n04B3          ; Changes_When_Uppercased\n04B5          ; Changes_When_Uppercased\n04B7          ; Changes_When_Uppercased\n04B9          ; Changes_When_Uppercased\n04BB          ; Changes_When_Uppercased\n04BD          ; Changes_When_Uppercased\n04BF          ; Changes_When_Uppercased\n04C2          ; Changes_When_Uppercased\n04C4          ; Changes_When_Uppercased\n04C6          ; Changes_When_Uppercased\n04C8          ; Changes_When_Uppercased\n04CA          ; Changes_When_Uppercased\n04CC          ; Changes_When_Uppercased\n04CE..04CF    ; Changes_When_Uppercased\n04D1          ; Changes_When_Uppercased\n04D3          ; Changes_When_Uppercased\n04D5          ; Changes_When_Uppercased\n04D7          ; Changes_When_Uppercased\n04D9          ; Changes_When_Uppercased\n04DB          ; Changes_When_Uppercased\n04DD          ; Changes_When_Uppercased\n04DF          ; Changes_When_Uppercased\n04E1          ; Changes_When_Uppercased\n04E3          ; Changes_When_Uppercased\n04E5          ; Changes_When_Uppercased\n04E7          ; Changes_When_Uppercased\n04E9          ; Changes_When_Uppercased\n```\n\n----------------------------------------\n\nTITLE: Deallocating Stack Reference in SIL\nDESCRIPTION: Marks deallocation of stack space for an alloc_ref [stack] instruction. Requires a class type operand.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_19\n\nLANGUAGE: sil\nCODE:\n```\ndealloc_stack_ref %0 : $T\n// $T must be a class type\n// %0 must be an 'alloc_ref [stack]' instruction\n```\n\n----------------------------------------\n\nTITLE: Unsupported Access to Self-Referencing Protocol Members in Swift\nDESCRIPTION: Illustrates cases where protocol members cannot be accessed via a protocol type because they reference Self or Self-rooted associated types, resulting in compiler errors. This includes methods with Self parameters and properties of Self-rooted associated types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/existential-member-access-limitations.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Shape {\n  func matches(_ other: Self) -> Bool\n}\n\nfunc foo(_ shape: Shape) {\n  // error: member 'matches' cannot be used on value of protocol type 'Shape'; use a generic constraint instead\n  shape.matches(shape)\n}\n\nfunc foo(_ arg: Identifiable) {\n  // error: member 'id' cannot be used on value of protocol type 'Identifiable'; use a generic constraint instead\n  _ = arg.id\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Compiler Subdirectories in CMake\nDESCRIPTION: Adds core Swift compiler subdirectories to the build process in dependency order. The order is important as later components depend on earlier ones - Basic provides foundation functionality, AST handles syntax trees, SIL manages the Swift Intermediate Language, and Optimizer handles code optimization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Basic)\nadd_subdirectory(AST)\nadd_subdirectory(SIL)\nadd_subdirectory(Optimizer)\n```\n\n----------------------------------------\n\nTITLE: Moving Values with move_value in SIL\nDESCRIPTION: Performs a move of the operand, ending its lifetime. Takes an @owned T and produces a new @owned T. This instruction is used for move-only values, allowing a value to be moved while maintaining ownership semantics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_114\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'move_value' '[lexical]'? sil-operand\n\n%1 = move_value %0 : $@_moveOnly A\n```\n\n----------------------------------------\n\nTITLE: Instantiating Tangent Vector Values in Swift\nDESCRIPTION: Shows examples of creating instances of the previously defined `TangentVector` types for `Point` and `PointPair`. These instances represent specific small changes applied to the original data structures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nPoint.TangentVector(dx: 0.01, dy: 0.02)\n\nPointPair.TangentVector(\n    p1: Point.TangentVector(dx: 0.01, dy: 0),\n    p2: Point.TangentVector(dx: 0.01, dy: 0))\n```\n\n----------------------------------------\n\nTITLE: Factory Initializers Implementation in Objective-C and Swift\nDESCRIPTION: Shows how factory initializers in Objective-C are transformed into Swift, including handling of convenience and non-inherited initializers with error handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_9\n\nLANGUAGE: objc\nCODE:\n```\n@interface SpellBook : NSObject\n+ (instancetype)spellBookWithAuthor:(NSString *)authorName;\n+ (nullable SpellBook *)spellBookByTranslatingAncientText:(AncientText *)text error:(NSError **)error;\n@end\n```\n\nLANGUAGE: swift\nCODE:\n```\nclass SpellBook: NSObject {\n  convenience init(author authorName: String)\n  /* non-inherited */ init(byTranslating text: AncientText) throws\n}\n```\n\n----------------------------------------\n\nTITLE: Ignored Use SIL Instruction Definition\nDESCRIPTION: Defines the syntax for ignored_use instruction that suppresses unused variable warnings and provides source location tracking for '_ = x' operations in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_207\n\nLANGUAGE: none\nCODE:\n```\nsil-instruction ::= 'ignored_use'\n```\n\n----------------------------------------\n\nTITLE: Specifying Error Sentinel with Hypothetical `NS_ERROR_RESULT` Attribute in Objective-C\nDESCRIPTION: This Objective-C code snippet demonstrates a *hypothetical* Clang attribute `NS_ERROR_RESULT(0)` used to inform the Swift importer that a return value of 0 for this method indicates an error occurred. This attribute would help handle non-standard error reporting patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_13\n\nLANGUAGE: objective-c\nCODE:\n```\n```objc\n+ (NSInteger)writePropertyList:(id)plist\n                      toStream:(NSOutputStream *)stream\n                        format:(NSPropertyListFormat)format\n                       options:(NSPropertyListWriteOptions)opt\n                         error:(out NSError **)error\n    NS_ERROR_RESULT(0);\n```\n```\n\n----------------------------------------\n\nTITLE: Importing Objective-C Methods with Error Parameters to Swift\nDESCRIPTION: These examples demonstrate how different Objective-C methods with error parameters are imported into Swift. It shows how the error parameter is removed and the method is marked as throwing in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_23\n\nLANGUAGE: objc\nCODE:\n```\n- (NSDocument *)duplicateAndReturnError:(NSError **)outError;\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc duplicateAndReturnError() throws -> NSDocument\n```\n\nLANGUAGE: objc\nCODE:\n```\n- (BOOL)validateForDelete:(NSError **)error;\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc validateForDelete() throws\n```\n\n----------------------------------------\n\nTITLE: Checking Swift Optional Values in C++\nDESCRIPTION: Shows how to check if a Swift Optional contains a value using operator bool in C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_48\n\nLANGUAGE: c++\nCODE:\n```\nvoid printOptionalInt(const swift::Optional<int> &x) {\n  if (x) {\n    std::cout << \".some(\" << x.value() << \")\";\n  } else {\n    std::cout << \".none\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Reprojection with Local Analysis\nDESCRIPTION: This snippet shows a heuristically optimized reprojection that combines with local analysis. It only reprojects when writing back to l-values besides the last one, reducing the number of extra full-value loads.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar point0 = point\nvar x = point0.x\nvar point1 = point\nvar y = point1.y\nswap(&x, &y)\npoint1.y = y        // do not reload point1\npoint = point1\npoint0 = point      // reload point0\npoint0.x = x\npoint = point0\n```\n\n----------------------------------------\n\nTITLE: Handling NSKeyValueChangeOldKey in Swift Enumeration\nDESCRIPTION: This code snippet is part of a switch statement that matches against string values and returns corresponding enumeration cases. It specifically handles the 'NSKeyValueChangeOldKey' case and provides a default case for unmatched values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\n      case \"NSKeyValueChangeOldKey\":\n        return .NSKeyValueChangeOldKey\n      default:\n        return nil\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Reference Counting Example with switch_enum in Swift Intermediate Language\nDESCRIPTION: Demonstrates how switch_enum maintains reference counting semantics where copying or destroying basic block arguments is equivalent to the same operations on the original operand.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_189\n\nLANGUAGE: sil\nCODE:\n```\n// This retain_value...\nretain_value %e1 : $Enum\nswitch_enum %e1, case #Enum.A: a, case #Enum.B: b\na(%a : $A):\n// ...is balanced by this release_value\nrelease_value %a\nb(%b : $B):\n// ...and this one\nrelease_value %b\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Opaque-layout Swift Optional in C++\nDESCRIPTION: C++ class representation for a generic opaque-layout Swift value type like SHA256?. The value is boxed and stored on the heap.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nclass swift::Optional<CryptoKit::SHA256> {\n  ...\n  uintptr_t pointer;        // Swift value is stored on the heap pointed by this pointer.\n  alignas(N) char buffer[M];\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Management Testing in Swift Execution Tests\nDESCRIPTION: Pattern for testing proper memory management in Swift execution tests using autoreleasepool. This approach ensures that local variables are correctly released, which is especially important for tests that interact with Objective-C code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Testing.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n// A counter that's decremented by Canary's deinitializer.\nvar CanaryCount = 0\n\n// A class whose instances increase a counter when they're destroyed.\nclass Canary {\n  deinit { ++CanaryCount }\n}\n\n// Test that a local variable is correctly released before it goes out of\n// scope.\nCanaryCount = 0\nautoreleasepool {\n  let canary = Canary()\n}\nassert(CanaryCount == 1, \"canary was not released\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Unsafe Mutable Static Variable in Swift\nDESCRIPTION: This code demonstrates a simple struct with a mutable static variable that will trigger concurrency safety errors. Static mutable variables are unsafe because they can be accessed from multiple concurrency domains simultaneously.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/mutable-global-variable.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct Constants {\n  static var value = 10\n}\n```\n\n----------------------------------------\n\nTITLE: Bridge Object to Word Conversion in Swift SIL\nDESCRIPTION: Extracts the raw bit pattern from a BridgeObject as a Word value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_178\n\nLANGUAGE: swift\nCODE:\n```\n%1 = bridge_object_to_word %0 : $Builtin.BridgeObject to $Builtin.Word\n```\n\n----------------------------------------\n\nTITLE: Adding SIL Utilities Subdirectory in CMake\nDESCRIPTION: Includes the Utilities subdirectory in the build process, which likely contains utility functions and tools related to the SIL module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/SIL/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Utilities)\n```\n\n----------------------------------------\n\nTITLE: Defining One-Time Initialization Function Manglings in Swift (v5.4+)\nDESCRIPTION: Specifies mangling patterns for global variable one-time initialization functions and tokens, applicable from Swift Runtime version 5.4 onwards.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n#if SWIFT_RUNTIME_VERSION >= 5.4\n  global ::= context (decl-name '_')+ 'WZ' // global variable one-time initialization function\n  global ::= context (decl-name '_')+ 'Wz' // global variable one-time initialization token\n#endif\n```\n\n----------------------------------------\n\nTITLE: Declaring Refactoring Diagnostics in C++\nDESCRIPTION: This snippet shows how to declare a diagnostic entry for refactoring in the DiagnosticsRefactoring.def file. It defines an error message for an invalid name during renaming refactoring.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nERROR(invalid_name, none, \"'%0' is not a valid name\", (StringRef))\n```\n\n----------------------------------------\n\nTITLE: Defining AddressUseVisitor in Swift for SIL\nDESCRIPTION: Defines `AddressUseVisitor`, a utility designed to classify different kinds of address uses in SIL. It is intended to be used by def-use walkers, such as `AddressDefUseWalker`, to ensure that all legal SIL patterns involving address uses are handled completely and correctly. Related to `AddressDefUseWalker` and various C++ utilities like `Projection::isAddressProjection`. Status: To-do (Refactor AddressDefUseWalker to implement this).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nAddressUseVisitor\n```\n\n----------------------------------------\n\nTITLE: Using Empty Subscript for Substring Conversion in Swift\nDESCRIPTION: Demonstrates how to use the empty subscript to pass a String as a Substring to a function, and how to convert arrays of String to Substring.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfuncThatIsJustLooking(at: person.name[]) // pass person.name as Substring\n```\n\nLANGUAGE: swift\nCODE:\n```\ntakesAnArrayOfSubstring(arrayOfString.map { $0[] })\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Stage Swift Compiler Bootstrapping Build in CMake\nDESCRIPTION: This block handles the `BOOTSTRAPPING` and `BOOTSTRAPPING-WITH-HOSTLIBS` modes. It sets up lists of dependencies (`b0_deps`, `b1_deps`) for two bootstrapping stages, conditionally adding dependencies based on build type (Debug), target platform (Darwin, libstdc++), and back deployment support. It then defines two build steps using `add_swift_compiler_modules_library`: one for stage 1 (`swiftCompilerModules-bootstrapping1`) using the stage 0 compiler, and the final one (`swiftCompilerModules`) using the stage 1 compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(BOOTSTRAPPING_MODE MATCHES \"BOOTSTRAPPING.*\")\n\n    set(b0_deps swift-frontend-bootstrapping0 symlink-headers-bootstrapping0 copy-legacy-layouts)\n    set(b1_deps swift-frontend-bootstrapping1 symlink-headers-bootstrapping1)\n    if(BOOTSTRAPPING_MODE STREQUAL \"BOOTSTRAPPING\")\n      list(APPEND b0_deps swiftCore-bootstrapping0)\n      list(APPEND b1_deps swiftCore-bootstrapping1)\n      if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n        list(APPEND b0_deps swiftSwiftOnoneSupport-bootstrapping0)\n        list(APPEND b1_deps swiftSwiftOnoneSupport-bootstrapping1)\n      endif()\n      if(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)\n        list(APPEND b0_deps swiftDarwin-bootstrapping0)\n        list(APPEND b1_deps swiftDarwin-bootstrapping1)\n      endif()\n      if(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_LIBSTDCXX_PLATFORMS)\n        list(APPEND b0_deps copy-libstdcxx-modulemap-bootstrapping0 copy-libstdcxx-header-bootstrapping0)\n        list(APPEND b1_deps copy-libstdcxx-modulemap-bootstrapping1 copy-libstdcxx-header-bootstrapping1)\n      endif()\n    endif()\n    if(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS AND SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT)\n      # We cannot specify directly HostCompatibilityLibs\n      # because ultimately is used to specify a dependency for a\n      # custom target and, unlike `target_link_libraries`, such dependency\n      # would be lost at the generation of the build system.\n      get_property(compatibility_libs\n        TARGET HostCompatibilityLibs\n        PROPERTY INTERFACE_LINK_LIBRARIES)\n      list(APPEND b0_deps ${compatibility_libs})\n      list(APPEND b1_deps ${compatibility_libs})\n    endif()\n\n\n    # Bootstrapping - stage 1, using the compiler from level 0\n\n    add_swift_compiler_modules_library(swiftCompilerModules-bootstrapping1\n      SWIFT_EXEC $<TARGET_FILE_DIR:swift-frontend-bootstrapping0>/swiftc${CMAKE_EXECUTABLE_SUFFIX}\n      DEPENDS ${b0_deps}\n      BOOTSTRAPPING 1)\n\n    # The final build, using the compiler from stage 1\n\n    add_swift_compiler_modules_library(swiftCompilerModules\n        SWIFT_EXEC $<TARGET_FILE_DIR:swift-frontend-bootstrapping1>/swiftc${CMAKE_EXECUTABLE_SUFFIX}\n        DEPENDS ${b1_deps})\n\n    # ... cleanup for BOOTSTRAPPING-WITH-HOSTLIBS follows ...\n\n  # ... else for unknown mode follows ...\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Indexing Raw Pointers with index_raw_pointer in Swift SIL\nDESCRIPTION: The index_raw_pointer instruction returns a new raw pointer value at a specified byte offset from a given raw pointer. It operates on Builtin.RawPointer types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_45\n\nLANGUAGE: Swift\nCODE:\n```\n%2 = index_raw_pointer %0 : $Builtin.RawPointer, %1 : $Builtin.Int<n>\n```\n\n----------------------------------------\n\nTITLE: Symbolic Type Reference Enum Definition\nDESCRIPTION: Swift enum definition for representing symbolic type references, supporting concrete types, bound generics, and tuples.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/RemoteMirrors.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nenum SymbolicTypeReference {\n  case Concrete(String)\n  case BoundGeneric(String, [SymbolicTypeReference])\n  case Tuple([SymbolicTypeReference])\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Loop Unrolling for Reference Counting Optimization\nDESCRIPTION: This snippet demonstrates the unrolled version of the previous loop, assuming it runs for exactly 3 iterations. This is an intermediate step in proving the correctness of reference counting optimizations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_8\n\nLANGUAGE: sil\nCODE:\n```\nbb0:\n  strong_retain %0 : $Builtin.NativeObject               (1)\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject              (2)\n  cond_br ..., bb1, bb4\n\nbb1: // preds: bb0\n  strong_retain %0 : $Builtin.NativeObject               (3)\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject              (4)\n  cond_br ..., bb2, bb4\n\nbb2: // preds: bb1\n  strong_retain %0 : $Builtin.NativeObject               (5)\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject              (6)\n  cond_br ..., bb3, bb4\n\nbb3: // preds: bb2\n  br bb5\n\nbb4: // preds: bb0, bb1, bb2\n  br bb5\n\nbb5: // preds: bb3, bb4\n  return ...\n```\n\n----------------------------------------\n\nTITLE: Setting MSVC Runtime Library for Swift Standard Library in CMake\nDESCRIPTION: Configures the MSVC Runtime Library for the Swift standard library based on the build type. For debug builds, it uses MultiThreadedDebugDLL, otherwise MultiThreadedDLL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_33\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  set(SWIFT_STDLIB_MSVC_RUNTIME_LIBRARY_default MultiThreadedDebugDLL)\nelse()\n  set(SWIFT_STDLIB_MSVC_RUNTIME_LIBRARY_default MultiThreadedDLL)\nendif()\nset(SWIFT_STDLIB_MSVC_RUNTIME_LIBRARY\n  ${SWIFT_STDLIB_MSVC_RUNTIME_LIBRARY_default}\n  CACHE STRING \"MSVC Runtime Library for the standard library\")\n```\n\n----------------------------------------\n\nTITLE: Incorrect withUnsafePointer Usage in Swift\nDESCRIPTION: Illustrates an invalid pattern where a pointer escapes its safe scope when using withUnsafePointer, leading to undefined behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/temporary-pointers.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nvar x = 42\nlet ptr = withUnsafePointer(to: &x) { $0 }\n// Do something with ptr.\n```\n\n----------------------------------------\n\nTITLE: Defining FooProtocolBase Protocol\nDESCRIPTION: Creates a protocol with documented method requirements, class method requirements, and property requirements with various access patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_16\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  FooProtocolBase.  Bbb.\nprotocol FooProtocolBase {\n\n  /// Aaa.  fooProtoFunc.  Bbb.\n  /// Ccc.\n  func fooProtoFunc()\n\n  /// Aaa.  fooProtoFuncWithExtraIndentation1.  Bbb.\n  /// Ccc.\n  func fooProtoFuncWithExtraIndentation1()\n\n  /**\n   * Aaa.  fooProtoFuncWithExtraIndentation2.  Bbb.\n   * Ccc.\n   */\n  func fooProtoFuncWithExtraIndentation2()\n  static func fooProtoClassFunc()\n  var fooProperty1: Int32 { get set }\n  var fooProperty2: Int32 { get set }\n  var fooProperty3: Int32 { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiler Optimization Flag Affecting Inlining\nDESCRIPTION: The `-Onone` flag instructs the Swift compiler to perform no optimizations. However, functions marked `@_transparent` must still be inlined prior to dataflow diagnostics, overriding this setting for that specific purpose.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TransparentAttr.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-Onone\n```\n\n----------------------------------------\n\nTITLE: Defining dynamic_function_ref Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for dynamic_function_ref which creates a reference to a dynamically replaceable SIL function that can be replaced at runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_81\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'dynamic_function_ref' sil-function-name ':' sil-type\n\n%1 = dynamic_function_ref @function : $@convention(thin) T -> U\n// $@convention(thin) T -> U must be a thin function type\n// %1 has type $T -> U\n```\n\n----------------------------------------\n\nTITLE: Defining a Computed Property with Getter and Setter in Swift\nDESCRIPTION: This snippet defines a `Rect` struct containing stored properties (`x`, `y`, `width`, `height`) and a computed property `maxX`. The `maxX` property calculates its value based on `x` and `width` (getter) and allows updating `x` based on a new maximum value provided via the `newMax` parameter (setter). Computed variables do not allocate storage themselves.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StoredAndComputedVariables.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct Rect {\n  // Stored member variables\n  var x, y, width, height : Int\n\n  // A computed member variable\n  var maxX : Int {\n    get {\n      return x + width\n    }\n    set(newMax) {\n      x = newMax - width\n    }\n  }\n\n// myRect.maxX = 40\n```\n\n----------------------------------------\n\nTITLE: Swift Default Parameters in C++\nDESCRIPTION: Demonstrates how Swift default parameter values are represented in the C++ interface.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'MyModule'\nfunc someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {\n}\n```\n\nLANGUAGE: c++\nCODE:\n```\n// C++ interface snippet\nvoid someFunction(swift::Int parameterWithoutDefault, swift::Int parameterWithDefault = 12) noexcept;\n\n// C++\n#include \"MyModule-Swift.h\"\nusing namespace MyModule;\n\nvoid testSwap() {\n  someFunction(3, 6); // parameterWithDefault is 6\n  someFunction(4);    // parameterWithDefault is 12\n}\n```\n\n----------------------------------------\n\nTITLE: Carriage Return Code Point Definition\nDESCRIPTION: Defines the Grapheme_Cluster_Break property for the Carriage Return (CR) control character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n000D          ; CR # Cc       <control-000D>\n```\n\n----------------------------------------\n\nTITLE: Implementing Applicability Check for Cursor-Based Refactoring in C++\nDESCRIPTION: This code implements the isApplicable function for the String Localization refactoring. It checks if the cursor points to the start of a string literal expression without interpolation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nbool RefactoringActionLocalizeString::\nisApplicable(ResolvedCursorInfo CursorInfo) {\n  if (CursorInfo.Kind == CursorInfoKind::ExprStart) {\n    if (auto *Literal = dyn_cast<StringLiteralExpr>(CursorInfo.TrailingExpr) {\n      return !Literal->hasInterpolation(); // Not real API.\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated SIL Code for Generic Function Differentiation\nDESCRIPTION: This snippet shows the SIL (Swift Intermediate Language) code generated for the generic function and its differentiation, including reabstraction thunks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\nsil_stage raw\n\nimport Builtin\nimport Swift\nimport SwiftShims\n\nfunc generic<T>(_ x: T) -> T\n\n// main\nsil [ossa] @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {\nbb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):\n  // function_ref generic<A>(_:)\n  %2 = function_ref @$s4main7genericyxxlF : $@convention(thin) <τ_0_0> (@in_guaranteed τ_0_0) -> @out τ_0_0 // user: %3\n  %3 = partial_apply [callee_guaranteed] %2<Float>() : $@convention(thin) <τ_0_0> (@in_guaranteed τ_0_0) -> @out τ_0_0 // user: %5\n  // function_ref thunk for @escaping @callee_guaranteed (@in_guaranteed Float) -> (@out Float)\n  %4 = function_ref @$sS2fIegnr_S2fIegyd_TR : $@convention(thin) (Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @out Float) -> Float // user: %5\n  %5 = partial_apply [callee_guaranteed] %4(%3) : $@convention(thin) (Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @out Float) -> Float // user: %6\n  %6 = differentiable_function [parameters 0] %5 : $@callee_guaranteed (Float) -> Float // user: %7\n  destroy_value %6 : $@differentiable @callee_guaranteed (Float) -> Float // id: %7\n  %8 = integer_literal $Builtin.Int32, 0          // user: %9\n  %9 = struct $Int32 (%8 : $Builtin.Int32)        // user: %10\n  return %9 : $Int32                              // id: %10\n} // end sil function 'main'\n\n// generic<A>(_:)\nsil hidden [ossa] @$s4main7genericyxxlF : $@convention(thin) <T> (@in_guaranteed T) -> @out T {\n// %0                                             // user: %3\n// %1                                             // users: %3, %2\nbb0(%0 : $*T, %1 : $*T):\n  debug_value_addr %1 : $*T, let, name \"x\", argno 1 // id: %2\n  copy_addr %1 to [init] %0 : $*T       // id: %3\n  %4 = tuple ()                                   // user: %5\n  return %4 : $()                                 // id: %5\n} // end sil function '$s4main7genericyxxlF'\n\n// thunk for @escaping @callee_guaranteed (@in_guaranteed Float) -> (@out Float)\nsil shared [transparent] [serializable] [reabstraction_thunk] [ossa] @$sS2fIegnr_S2fIegyd_TR : $@convention(thin) (Float, @guaranteed @callee_guaranteed (@in_guaranteed Float) -> @out Float) -> Float {\n// %0                                             // user: %3\n// %1                                             // user: %5\nbb0(%0 : $Float, %1 : @guaranteed $@callee_guaranteed (@in_guaranteed Float) -> @out Float):\n  %2 = alloc_stack $Float                         // users: %8, %5, %3\n  store %0 to [trivial] %2 : $*Float              // id: %3\n  %4 = alloc_stack $Float                         // users: %7, %6, %5\n  %5 = apply %1(%4, %2) : $@callee_guaranteed (@in_guaranteed Float) -> @out Float\n  %6 = load [trivial] %4 : $*Float                // user: %9\n  dealloc_stack %4 : $*Float                      // id: %7\n  dealloc_stack %2 : $*Float                      // id: %8\n  return %6 : $Float                              // id: %9\n} // end sil function '$sS2fIegnr_S2fIegyd_TR'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Witness Inference in Swift Protocols\nDESCRIPTION: This example shows how type witnesses can be inferred from other requirements in protocol conformance. It illustrates the complexity of type inference in the context of protocols and associated types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/DeclarationTypeChecker.rst#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol SequenceType {\n  typealias Element\n  mutating func makeIterator() -> Element?\n}\n\nstruct IntRangeGenerator : SequenceType {\n  var current: Int\n  let limit: Int\n\n  // infers SequenceType's Element == Int\n  mutating func makeIterator() -> Int? {\n    if current == limit { return nil }\n    return current++\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Exclusive Escaping Behavior with @_effects(escapes =>) in Swift\nDESCRIPTION: These snippets demonstrate the `@_effects(escapes <from> => <to>)` attribute. This specifies that a selected part of an argument (`s.b`) escapes *exclusively* to a specific destination, either the return value (`return`) or another argument's part (`o.a.i`). This provides precise escape information to the compiler, indicating no other escape paths exist for the `from-selection`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n```swift\n@_effects(escapes s.b => return)\nfunc foo1(_ s: Str) -> Class {\n  return s.b\n}\n\n@_effects(escapes s.b => o.a.i)\nfunc foo2(_ s: Str, o: inout Str) {\n  o.a.i = s.b\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Symbol Directness Mangling\nDESCRIPTION: Defines mangling for direct and indirect symbols. A direct symbol resolves to the actual object address, while an indirect symbol resolves to a pointer to the object.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\ndirectness ::= 'd'                         // direct\ndirectness ::= 'i'                         // indirect\n```\n\n----------------------------------------\n\nTITLE: Initializing Existential Reference in Swift SIL\nDESCRIPTION: Defines the init_existential_ref instruction in Swift SIL, which creates a class existential container containing a reference to a class instance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_153\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'init_existential_ref' sil-operand ':' sil-type ','\n                                           sil-type\n\n%1 = init_existential_ref %0 : $C' : $C, $P\n// %0 must be of class type $C', lowered from AST type $C, conforming to\n//    protocol(s) $P\n// $P must be a class protocol or protocol composition type\n// %1 will be of type $P\n```\n\n----------------------------------------\n\nTITLE: Nested Access After Inlining in SIL\nDESCRIPTION: SIL representation showing how nested accesses become part of the def-use chain after inlining. Both innerAccess and conflicting are nested within outerAccess, making the conflict easier to detect.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_6\n\nLANGUAGE: sil\nCODE:\n```\n%var = alloc_stack $Int\n%outerAccess  = begin_access [modify] %var : $*Int\n%innerAccess  = begin_access [modify] %outerAccess : $*Int\n%conflicting  = begin_access [modify] %outerAccess : $*Int\n%f = function_ref @takesTwoInouts\napply %f(%innerAccess, %conflicting)\n  : $@convention(thin) (@inout Int, @inout Int) -> ()\nend_access %conflicting : $*Int\nend_access %innerAccess : $*Int\nend_access %outerAccess : $*Int\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Compiler Pass IDs\nDESCRIPTION: Specifies mangling identifiers for different Swift compiler optimization passes including AllocBoxToStack, ClosureSpecializer, and others.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_50\n\nLANGUAGE: text\nCODE:\n```\nPASSID ::= '0'                             // AllocBoxToStack,\nPASSID ::= '1'                             // ClosureSpecializer,\nPASSID ::= '2'                             // CapturePromotion,\nPASSID ::= '3'                             // CapturePropagation,\nPASSID ::= '4'                             // FunctionSignatureOpts,\nPASSID ::= '5'                             // GenericSpecializer,\nPASSID ::= '6'                             // MoveDiagnosticInOutToOut,\nPASSID ::= '7'                             // AsyncDemotion\n```\n\n----------------------------------------\n\nTITLE: Advanced String Search Options in Cocoa\nDESCRIPTION: Shows various overloads of string search methods in Cocoa, allowing for different options, ranges, and locales. Swift equivalent is marked as TBD.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_20\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask;\n- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)searchRange;\n- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)searchRange locale:(NSLocale *)locale;\n\n- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask;\n- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask range:(NSRange)searchRange;\n```\n\n----------------------------------------\n\nTITLE: MyOptions Declaration with Boilerplate Bool Fields\nDESCRIPTION: Example showing the potential boilerplate issue of having to specify ': Bool = false' for each field in the option set struct.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nstruct MyOptions : OptionSet {\n  var Foo,\n      Bar,\n      Bas : Bool = false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Accessor Mangling in Swift\nDESCRIPTION: Specifies the mangling rules for property accessors and related elements in Swift. This includes getters, setters, and special accessors like willSet, didSet, and addressors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nACCESSOR ::= 'm'                           // materializeForSet\n  ACCESSOR ::= 's'                           // setter\n  ACCESSOR ::= 'g'                           // getter\n  ACCESSOR ::= 'G'                           // global getter\n  ACCESSOR ::= 'w'                           // willSet\n  ACCESSOR ::= 'W'                           // didSet\n  ACCESSOR ::= 'r'                           // _read\n  ACCESSOR ::= 'M'                           // _modify (temporary)\n  ACCESSOR ::= 'a' ADDRESSOR-KIND            // mutable addressor\n  ACCESSOR ::= 'l' ADDRESSOR-KIND            // non-mutable addressor\n  ACCESSOR ::= 'p'                           // pseudo accessor referring to the storage itself\n  ACCESSOR ::= 'x'                           // modify\n  ACCESSOR ::= 'y'                           // read\n\n  ADDRESSOR-KIND ::= 'u'                     // unsafe addressor (no owner)\n  ADDRESSOR-KIND ::= 'O'                     // owning addressor (non-native owner), not used anymore\n  ADDRESSOR-KIND ::= 'o'                     // owning addressor (native owner), not used anymore\n  ADDRESSOR-KIND ::= 'p'                     // pinning addressor (native owner), not used anymore\n```\n\n----------------------------------------\n\nTITLE: Internal Access Control in Swift\nDESCRIPTION: The `internal` access control specifier (default) restricts the use of a declaration to its defining module. A `@_transparent` function generally cannot call `internal` functions if it needs to be inlined across different modules, especially if the `internal` function's implementation might change between releases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TransparentAttr.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\ninternal\n```\n\n----------------------------------------\n\nTITLE: Implementing Copy Function in Swift Standard Library\nDESCRIPTION: Top-level function that returns a copy of the provided value. Used to suppress syntactic special-casing and handle types that have suppressed implicit copies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nfunc copy<T>(_ value: T) -> T {\n  return value\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Access Path Example in Swift\nDESCRIPTION: Example showing an invalid access path that happens to point to field1. Indexing within a subobject is considered ill-formed, though it's handled conservatively since this rule cannot be fully enforced.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n%field0 = struct_element_addr %base : $*S, #field0\n%field1 = index_addr %elt : $*Int64, %one : $Builtin.Word\n\nPath: (INVALID)\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint with Large Ignore Count (LLDB)\nDESCRIPTION: Sets a breakpoint on `GlobalARCOpts::run` with a very large ignore count (9999999). This ensures the breakpoint won't stop execution but allows tracking the hit count using `br list`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_20\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br set -i 9999999 -n GlobalARCOpts::run\n```\n\n----------------------------------------\n\nTITLE: Limiting Parallel Link Jobs in Swift Build (Bash/CMake)\nDESCRIPTION: This snippet demonstrates how to reduce the number of parallel link jobs during the Swift build process to manage memory usage, using CMake options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DevelopmentTips.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbuild-script --llvm-cmake-options=-DLLVM_PARALLEL_LINK_JOBS=1 --swift-cmake-options=-DSWIFT_PARALLEL_LINK_JOBS=1\n```\n\n----------------------------------------\n\nTITLE: Adding Swift String Processing Library Target in CMake\nDESCRIPTION: This snippet defines the swift_StringProcessing target library using add_swift_target_library. It specifies build types, dependencies for various platforms, compile flags, and installation details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/StringProcessing/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swift_StringProcessing ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  \"${STRING_PROCESSING_SOURCES}\"\n\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT\n\n  LINK_LIBRARIES ${swift_string_processing_link_libraries}\n\n  C_COMPILE_FLAGS\n    -Dswift_StringProcessing_EXPORTS\n  SWIFT_COMPILE_FLAGS\n    ${swift_string_processing_compile_flags}\n    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n\n  SWIFT_MODULE_DEPENDS _RegexParser\n  INSTALL_IN_COMPONENT stdlib\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n)\n```\n\n----------------------------------------\n\nTITLE: User Code Using Imported C++ API\nDESCRIPTION: Example of Swift code written by a user that calls a C++ function with bridged types. This shows how the bridging is transparent to the user.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_72\n\nLANGUAGE: swift\nCODE:\n```\n// Using the imported C++ API in Swift: code written by the user.\n\nfunc callIncrementVectorValues() -> CInt {\n  var xs: [CInt] = IncrementVectorValues([10, 20, 30])\n  return xs[0] // = 11.\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existential Value in Swift SIL\nDESCRIPTION: Defines the open_existential_value instruction in Swift SIL, which opens up the existential container for a loadable type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_152\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'open_existential_value' sil-operand 'to' sil-type\n\n%1 = open_existential_value %0 : $P to $@opened P\n// %0 must be of a $P type for non-class protocol or protocol composition\n//   type P\n// $@opened P must be a unique archetype that refers to an opened\n// existential type P.\n// %1 will be of type $@opened P\n```\n\n----------------------------------------\n\nTITLE: Initializing Existential Value in Swift SIL\nDESCRIPTION: Defines the init_existential_value instruction in Swift SIL, which initializes an existential container for a loadable type conforming to a protocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_148\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'init_existential_value' sil-operand ',' sil-type ','\n                                             sil-type\n\n%1 = init_existential_value %0 : $L, $C, $P\n// %0 must be of loadable type $L, lowered from AST type $C, conforming to\n//    protocol(s) $P\n// %1 will be of type $P\n```\n\n----------------------------------------\n\nTITLE: Autoreleasing Values with autorelease_value in SIL\nDESCRIPTION: An instruction for autoreleasing values in Swift Intermediate Language. Detailed documentation is incomplete.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_120\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'autorelease_value' sil-operand\n\nautorelease_value %0 : $A\n```\n\n----------------------------------------\n\nTITLE: Setting Up Data Files for Swift-C++ Interop\nDESCRIPTION: Defines the list of header and configuration files needed for Swift to C++ interoperability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/PrintAsClang/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(datafiles\n    _SwiftCxxInteroperability.h\n    _SwiftStdlibCxxOverlay.h\n    experimental-interoperability-version.json\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Swift Threading Library in CMake\nDESCRIPTION: Defines a static library 'swiftThreading' that includes various threading implementation files for different platforms (C11, Linux, Pthreads, Windows) along with error handling and thread sanitizer support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Threading/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftThreading STATIC\n  C11.cpp\n  Linux.cpp\n  Pthreads.cpp\n  Win32.cpp\n  Errors.cpp\n  ThreadSanitizer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Range Structure Format in SourceKit Diagnostic Responses\nDESCRIPTION: JSON schema for range objects in diagnostic responses. Ranges identify code spans associated with diagnostics, specifying the position and length.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\nrange ::=\n{\n    <key.offset>:        (int64) // location of the range\n    <key.length>:        (int64) // length of the range\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Method Returning BOOL with `NSError**`\nDESCRIPTION: This Objective-C code snippet provides an example from `NSManagedObject` of a method returning `BOOL` (where `false` typically indicates failure) and using the `NSError**` pattern for error reporting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_18\n\nLANGUAGE: objective-c\nCODE:\n```\n```objc\n- (BOOL)validateForDelete:(NSError **)error;\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring Cursor-Based Refactoring in C++\nDESCRIPTION: This snippet shows how to declare a cursor-based refactoring action for String Localization in the RefactoringKinds.def file. It specifies the internal name, display name, and stable key for the refactoring action.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nCURSOR_REFACTORING(LocalizeString, \"Localize String\", localize.string)\n```\n\n----------------------------------------\n\nTITLE: Overriding Superclass Initializers in Objective-C Subclass\nDESCRIPTION: This snippet demonstrates the correct way to override superclass initializers in an Objective-C subclass to ensure proper initialization of instance variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/ClassConstruction.rst#2025-04-23_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\n@implementation Subclass : Superclass\nchar* name;\n- initSuperClass {\n  [super initSuperClass];       // Don't forget the superclass\n  name = \"Tino\";\n}\n- (void)print { printf(name); } // OK\n@end\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Basic Function Mangling\nDESCRIPTION: Swift symbol mangling for simple functions with various parameter types. These examples show the basic mangling patterns for simple functions, including functions with empty tuple parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\n_T04main1_yyF ---> main._() -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T04test6testitSiyt_tF ---> test.testit(()) -> Swift.Int\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S4test6testitySiyt_tF ---> test.testit(()) -> Swift.Int\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftOnoneSupport Library Build\nDESCRIPTION: Creates the swiftSwiftOnoneSupport library target with the main Swift source file and a support C file for install name handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(swiftSwiftOnoneSupport\n  SwiftOnoneSupport.swift\n  \"${PROJECT_SOURCE_DIR}/linker-support/magic-symbols-for-install-name.c\")\n```\n\n----------------------------------------\n\nTITLE: Swift Core Library Source Configuration\nDESCRIPTION: Main library configuration including source files, compilation flags, and platform-specific conditions for the Swift standard library core module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(swiftCore\n  Algorithm.swift\n  ArrayBody.swift\n  ArrayBuffer.swift\n  # ... additional sources ...\n  \"${CMAKE_CURRENT_BINARY_DIR}/Tuple.swift\")\n```\n\n----------------------------------------\n\nTITLE: Array-to-Pointer Conversion in Swift\nDESCRIPTION: Illustrates creating a temporary pointer from an array, providing access to the array's elements. The pointer remains valid only during the function execution.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/temporary-pointers.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo(bar: UnsafePointer<Bool>) { /*...*/ }\nvar x: [Bool] = [true, false, true]\nfoo(bar: x)\n```\n\n----------------------------------------\n\nTITLE: Swift SDK Location Flag\nDESCRIPTION: Flag used to specify the location of the Swift SDK containing libraries and overlays for the core language runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CrossCompilationModel.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n-sdk\n```\n\n----------------------------------------\n\nTITLE: Unchecked_enum_data Instruction: Extracting Enum Payload\nDESCRIPTION: The unchecked_enum_data instruction unsafely extracts payload data from an enum value, with undefined behavior if the enum does not contain the specified case.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_140\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'unchecked_enum_data' sil-operand ',' sil-decl-ref\n\n%1 = unchecked_enum_data %0 : $U, #U.DataCase!enumelt\n// $U must be an enum type\n// #U.DataCase must be a case of enum $U with data\n// %1 will be of object type $T for the data type of case U.DataCase\n```\n\n----------------------------------------\n\nTITLE: Entity Structure Format in SourceKit Documentation Responses\nDESCRIPTION: JSON schema for entity objects returned in documentation responses. Entities represent Swift symbols with their names, USRs, locations, and documentation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\nentity ::=\n{\n    <key.kind>:                  (UID)             // UID for the declaration or reference kind (function, class, etc.).\n    <key.name>:                  (string)          // Displayed name for the entity.\n    <key.usr>:                   (string)          // USR string for the entity.\n    <key.offset>:                (int64)           // Location of the entity.\n    <key.length>:                (int64)           // Length of the entity.\n    <key.fully_annotated_decl>:  (string)          // XML representing the entity, its USR, etc.\n    [opt] <key.doc.full_as_xml>: (string)          // XML representing the entity and its documentation. Only present\n                                                   // when the entity is documented.\n    [opt] <key.entities>:        (array) [entity+] // One or more entities contained in the particular entity (sub-classes, references, etc.).\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing switch_enum Terminator in Swift Intermediate Language\nDESCRIPTION: Defines the switch_enum terminator instruction syntax which conditionally branches based on an enum discriminator. It requires an enum operand, case destinations, and can pass payload data to destination blocks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_187\n\nLANGUAGE: sil\nCODE:\n```\nsil-terminator ::= 'switch_enum' sil-operand\n                     (',' sil-switch-enum-case)*\n                     (',' sil-switch-default)?\nsil-switch-enum-case ::= 'case' sil-decl-ref ':' sil-identifier\n\nswitch_enum %0 : $U, case #U.Foo!enumelt: label1, \n                      case #U.Bar!enumelt: label2, \n                      ...,                 \n                      default labelN\n\n// %0 must be a value of enum type $U\n// #U.Foo, #U.Bar, etc. must be 'case' declarations inside $U\n// `label1` through `labelN` must refer to block labels within the current\n//   function\n// label1 must take either no basic block arguments, or a single argument\n//   of the type of #U.Foo's data\n// label2 must take either no basic block arguments, or a single argument\n//   of the type of #U.Bar's data, etc.\n// labelN must take no basic block arguments\n```\n\n----------------------------------------\n\nTITLE: Bridge Object Classification in Swift SIL\nDESCRIPTION: Decodes BridgeObject bit representation to determine if it represents an Objective-C object or tagged pointer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_174\n\nLANGUAGE: swift\nCODE:\n```\n%1 = classify_bridge_object %0 : $Builtin.BridgeObject\n```\n\n----------------------------------------\n\nTITLE: Querying Instruction Creation/Removal Delta per Stage/Pass in Swift Counters DB\nDESCRIPTION: This SQL query calculates the net change (delta) in the number of instructions for each combination of optimization pipeline stage (`C.Stage`) and transformation pass (`C.Transform`). It sums the `Delta` for module-level instruction counters (`C.counter = 'inst'`, `C.kind = 'module'`), grouping by both stage and transformation, and sorts the results by the absolute magnitude of the change.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n# Sort by biggest changes \nselect C.Stage, C.Transform, sum(C.Delta)\nfrom Counters C where C.counter = 'inst' and C.kind = 'module'\ngroup by C.Stage, C.Transform\norder by abs(sum(C.Delta));\n```\n\n----------------------------------------\n\nTITLE: Swift Assignment Operator Implementation for Immutable Class\nDESCRIPTION: Shows the basic implementation pattern for an assignment operator in an immutable class type, where a new object is created.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc *op*\\**=** (lhs: **inout** X, rhs: Y) {\n  lhs = *expression creating a new X object*\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BRIDGING_MODE Option for Swift-C++ Interop in CMake\nDESCRIPTION: Defines a CMake option `BRIDGING_MODE` to configure how Swift-C++ bridging code is compiled. It allows specifying 'INLINE' (full interop, inline functions), 'PURE' (limited interop, no inlining), or 'DEFAULT' (behavior based on build configuration). The default value is `DEFAULT`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\noption(BRIDGING_MODE [=[\nHow swift-C++ bridging code is compiled:\n    INLINE:       uses full swift C++ interop and briding functions are inlined\n    PURE:         uses limited C++ interp an bridging functions are not inlined\n    DEFAULT:      based on the build configuration\n]=] DEFAULT)\n```\n\n----------------------------------------\n\nTITLE: Simplified SIL Implementation for Control Flow Differentiation\nDESCRIPTION: A detailed example of Swift Intermediate Language (SIL) code showing how trampoline blocks manage transitions between basic blocks and handle differential struct construction during automatic differentiation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nfunc m(_ x: Float) -> Float {\n  var retVal = f(x)\n  if x < 5 {\n    retVal = g(retVal)\n  } else {\n    retVal = h(retVal)\n  }\n  return j(retVal)\n}\n\nbb0(args...):\n  // ...\n  // %diff_func is the differential of `f` gotten from a JVP call earlier in the \n  // basic block code.\n  // %condition is the `cond_br` condition calculated earlier.\n  %bb0_struct = alloc_stack $StructBB0\n  %bb0_diff_field = struct_element_addr %bb0_struct.diff_f\n  store %diff_func to %bb0_diff_field // store diff func.\n  %bb0_payload_ptr = address_to_pointer %bb0_struct\n  cond_br %condition, bb0_bb1_tramp(args..., %bb0_payload_ptr), \n                      bb0_bb2_tramp(args..., %bb0_payload_ptr)\n\nbb0_bb1_trampbb1(args..., %bb0_payload_ptr):\n  %bb0_succ = enum $EnumBB0.BB1 // bb0 succ inst.\n  %succ_addr = struct_element_addr %bb0_payload_ptr.succ // bb0 succ address.\n  // store the memory alloc'd struct to the succ field in bb0.\n  store %bb0_succ to %succ_addr\n  // Get a pointer to the memory of the field (the payload).\n  %bb1_payload_addr = init_enum_data_addr %succ_addr.BB1\n  // Can't pass addresses to basic blocks, need to convert to pointer.\n  %bb1_payload_ptr = address_to_pointer %bb1_payload_addr\n  br bb1(args..., %bb1_payload_ptr)\n\nbb0_bb2_tramp(args..., %bb0_struct):\n  %bb0_succ = enum $EnumBB0.BB2 // bb0 succ inst.\n  %succ_addr = struct_element_addr %bb0_struct.succ // bb0 succ address.\n  // store the memory alloc'd struct to the succ field in bb0.\n  store %bb0_succ to %succ_addr\n  // Get a pointer to the memory of the field (the payload).\n  %bb2_payload_addr = init_enum_data_addr %succ_addr.BB2\n  // Can't pass addresses to basic blocks, need to convert to pointer.\n  %bb2_payload_ptr = address_to_pointer %bb2_payload_addr\n  br bb2(args..., %bb2_payload_ptr)\n\nbb1(args..., %bb1_payload_ptr):\n  // ...\n  // %diff_func_ is the differential of `g` gotten from a JVP call earlier in the \n  // basic block code.\n  %bb1_diff_field = struct_element_addr %bb1_payload_ptr.diff_g\n  store %diff_func to %bb1_diff_field : $*(Float) -> Float // store diff func.\n  br bb1_bb3_tramp(args..., %bb1_payload_ptr)\n\nbb1_bb3_trampbb1(args..., %bb1_payload_ptr):\n  %succ_addr = enum $EnumBB1.BB3 // bb1 succ inst.\n  // get bb1 succ address from inside bb0\n  %succ_addr = struct_element_addr %bb1_payload_ptr.succ // bb1 succ address.\n  // store the memory alloc'd struct to the succ field in bb0.\n  store %succ_addr to %bb1_payload_ptr : $*EnumBB1\n  // Get a pointer to the memory of the field (the payload).\n  %bb3_payload_addr = init_enum_data_addr %succ_addr.BB3\n  // Can't pass addresses to basic blocks, need to convert to pointer.\n  %bb3_payload_ptr = address_to_pointer %bb3_payload_addr\n  br bb3(args..., %bb3_payload_ptr)\n\nbb2(args..., %bb2_payload_ptr):\n  // ...\n  // %diff_func_h is the differential of `h` gotten from a JVP call earlier in the \n  // basic block code.\n  %bb2_diff_field = struct_element_addr %bb2_payload_ptr.diff_h\n  store %diff_func_h to %bb2_diff_field // store diff func.\n  br bb2_bb3_tramp(args..., %bb2_payload_ptr)\n\nbb2_bb3_tramp(args..., %bb0_struct, %bb2_payload_ptr):\n  %55 = enum $EnumBB2, #EnumBB2.BB3!enumelt.1, undef : $StructBB3 // bb2 succ inst.\n  // get bb2 succ address from inside bb0.\n  %succ_addr = struct_element_addr %bb2_payload_ptr : $*StructBB2, #StructBB2.succ\n  // store the memory alloc'd struct to the succ field in bb0.\n  store %succ_addr to %bb2_payload_ptr\n  // Get a pointer to the memory of the field (the payload).\n  %bb3_payload_addr = init_enum_data_addr %succ_addr.BB3\n  // Can't pass addresses to basic blocks, need to convert to pointer.\n  %bb3_payload_ptr = address_to_pointer %bb3_payload_addr\n  br bb3(args..., %bb3_payload_ptr)\n\nbb3(args..., %bb3_payload_ptr):\n  // %diff_func_j is the differential of `j` gotten from a JVP call earlier in the \n  // basic block code.\n  %bb3_diff_field = struct_element_addr %bb3_payload_ptr.diff_j\n  store %diff_func_j to %bb3_diff_field // store diff func.\n  // Get the differential of bar and partially apply the struct to it so it can call\n  // the correct differentials in its body.\n  %diff_bar_instance = partial_apply diff_bar_func(%bb0_struct)\n  // %orig_result came from the same instruction where we got %diff_func\n  return (%orig_result, %diff_bar_instance)\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks by Ordinal Numbers\nDESCRIPTION: Commands showing how to refer to benchmarks by their ordinal numbers instead of names, which can be useful for quick testing of specific benchmarks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_O --list --skip-tags=\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_O 1 42\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ./Benchmark_Driver run 1 42\n```\n\n----------------------------------------\n\nTITLE: Swift Memory Constructor Example\nDESCRIPTION: Shows a Swift constructor with a Void parameter that maps to a zero-argument Objective-C selector initialization method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nconstructor toMemory(_ : ()) { /* ... */ }\n```\n\n----------------------------------------\n\nTITLE: Building Full Swift SDK for WebAssembly (Bash)\nDESCRIPTION: This Bash command uses the `build-script` utility to perform a complete build of the Swift SDK for WebAssembly. It compiles the Swift compiler for the host platform and then builds the Swift standard library specifically for WebAssembly targets. The resulting SDK artifact bundle is placed in `../swift-sdk-generator/Bundles`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WebAssembly.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./utils/build-script --build-wasm-stdlib\n```\n\n----------------------------------------\n\nTITLE: Implementing FooClassBase Class\nDESCRIPTION: Defines a base class with various instance and class methods, initializers, and methods that can be overridden by subclasses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooClassBase {\n  class func fooBaseInstanceFunc0()\n  func fooBaseInstanceFunc0()\n  class func fooBaseInstanceFunc1(_ anObject: AnyObject!) -> FooClassBase!\n  func fooBaseInstanceFunc1(_ anObject: AnyObject!) -> FooClassBase!\n  init!()\n  convenience init!(float f: Float)\n  class func fooBaseInstanceFuncOverridden()\n  func fooBaseInstanceFuncOverridden()\n  class func fooBaseClassFunc0()\n  /*not inherited*/ init!(_ x: Int32)\n  @available(*, unavailable, message: \"use object construction 'FooClassBase(_:')\")\n  class func fooClassBase(_ x: Int32) -> FooClassBase!\n}\n```\n\n----------------------------------------\n\nTITLE: Traversing Forward-Extended Lifetimes with ForwardingUtils in Swift\nDESCRIPTION: Utilities in `ForwardingUtils.swift` handle the traversal of forward-extended lifetimes, which consist of multiple OSSA lifetimes joined by ForwardingInstructions. `ForwardingUseDefWalker` finds the introducer of the extended lifetime, while `ForwardingDefUseWalker` finds all constituent OSSA lifetimes within it. This is useful for queries like lexical lifetime or pointer escapes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nForwardingUtils.swift:\n  ForwardingUseDefWalker\n  ForwardingDefUseWalker\n```\n\n----------------------------------------\n\nTITLE: Setting LLVM Availability for Swift Serialization\nDESCRIPTION: Configures LLVM availability settings for the swiftSerialization library component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Serialization/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_swift_llvm_is_available(swiftSerialization)\n```\n\n----------------------------------------\n\nTITLE: Swift Private Library Target Definition\nDESCRIPTION: Configures the swiftSwiftPrivate library target with source files, platform-specific dependencies, compilation flags, and installation settings\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftPrivate/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftSwiftPrivate ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  SwiftPrivate.swift\n  IO.swift\n  ShardedAtomicCounter.swift\n\n  \"${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c\"\n\n  GYB_SOURCES\n    AtomicInt.swift.gyb\n\n  SWIFT_MODULE_DEPENDS_OSX ${swift_swiftprivate_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_IOS ${swift_swiftprivate_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_TVOS ${swift_swiftprivate_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_swiftprivate_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_swiftprivate_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_FREESTANDING \"${SWIFT_FREESTANDING_TEST_DEPENDENCIES}\"\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WASI WASILibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK\n  SWIFT_COMPILE_FLAGS ${swift_swiftprivate_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Using @inlinable with Frozen Struct Initializers in Swift\nDESCRIPTION: Details that an initializer of a `@frozen` struct can be marked `@inlinable` according to ABI stability rules, even if it doesn't delegate to another initializer. This allows the initializer's body to be potentially inlined into client code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n@inlinable\n```\n\n----------------------------------------\n\nTITLE: Finding Dead-End Blocks in Swift for SIL\nDESCRIPTION: Provides the `DeadEndBlocks` utility to identify basic blocks in a function from which there is no execution path to a normal function exit (`return`, `throw`, or `unwind`). This includes blocks ending in `unreachable` and blocks from which all paths lead to such blocks. It uses the `BasicBlockWorklist`. Related to the C++ `DeadEndBlocks` utility. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\nDeadEndBlocks\n```\n\n----------------------------------------\n\nTITLE: Declaring a C Function with Integer and Long Arguments\nDESCRIPTION: This C header snippet declares a function named `Add` which accepts an integer (`int`) and a long integer (`long`) as arguments and returns a double-precision floating-point number (`double`). This serves as a basic example for demonstrating C function import into Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\ndouble Add(int x, long y);\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Swift Serialization Library\nDESCRIPTION: Configures the library dependencies for swiftSerialization, linking against other Swift components and Clang modules required for functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Serialization/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(swiftSerialization PRIVATE\n  swiftClangImporter\n  swiftOption\n  swiftAST\n  swiftSIL\n  clangIndex)\n```\n\n----------------------------------------\n\nTITLE: Indicating Availability Constraints for Functions in SIL (BNF)\nDESCRIPTION: Describes how to annotate functions with '[available <version>]', enforcing that the function is only callable on targets at or after the specified OS version. Uses sil-version-tuple in form [0-9]+('.'[0-9]+)*. Important for cross-platform compatibility checks and dynamic feature gating.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_10\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[available' sil-version-tuple ']'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-version-tuple ::= [0-9]+ ('.' [0-9]+)*\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Error Reporting Functions\nDESCRIPTION: Symbol listings for Swift runtime functions that handle error reporting. These functions report runtime errors and specifically handle errors related to deleted methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n000000000001c7d0 T _swift_reportError\n000000000001c940 T _swift_deletedMethodError\n```\n\n----------------------------------------\n\nTITLE: Rebuilding All Swift Components Incrementally with Ninja\nDESCRIPTION: This command rebuilds all Swift components located in the swift repository, including the standard library, using Ninja for incremental builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nninja -C ../build/Ninja-RelWithDebInfoAssert/swift-${platform}-$(uname -m)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Standard Library Assertions in CMake\nDESCRIPTION: Sets the default value for SWIFT_STDLIB_ASSERTIONS based on whether the build type is optimized. Provides an option to enable internal checks for the Swift standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_36\n\nLANGUAGE: CMake\nCODE:\n```\nis_build_type_optimized(\"${SWIFT_STDLIB_BUILD_TYPE}\" swift_optimized)\nif(swift_optimized)\n  set(SWIFT_STDLIB_ASSERTIONS_default FALSE)\nelse()\n  set(SWIFT_STDLIB_ASSERTIONS_default TRUE)\nendif()\noption(SWIFT_STDLIB_ASSERTIONS\n    \"Enable internal checks for the Swift standard library (useful for debugging the library itself, does not affect checks required for safety)\"\n    \"${SWIFT_STDLIB_ASSERTIONS_default}\")\n```\n\n----------------------------------------\n\nTITLE: Importing C Fixed-Size Arrays in Swift\nDESCRIPTION: Demonstrates how C fixed-size arrays are imported as tuples in Swift. This approach has limitations since tuples cannot be accessed through runtime-determined indices, requiring unsafe pointer manipulation for such access patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_22\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\nextern int x[4];\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nvar x: (CInt, CInt, CInt, CInt) { get set }\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Function Interfaces\nDESCRIPTION: Declares several basic function interfaces including fooFunc1, fooFunc1AnonymousParam, and fooFunc3 with various parameter types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  fooFunc1.  Bbb.\nfunc fooFunc1(_ a: Int32) -> Int32\nfunc fooFunc1AnonymousParam(_: Int32) -> Int32\nfunc fooFunc3(_ a: Int32, _ b: Float, _ c: Double, _ d: UnsafeMutablePointer<Int32>!) -> Int32\n```\n\n----------------------------------------\n\nTITLE: Generating Assembly Code with Intel Syntax (Shell)\nDESCRIPTION: Compiles a Swift file (`tmp.swift`) into assembly code (`tmp.S`) using the `swiftc` compiler. The `-emit-assembly` flag requests assembly output, and `-Xllvm -x86-asm-syntax=intel` specifies Intel syntax instead of the default AT&T syntax.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\n# Emit assembly in Intel syntax (AT&T syntax is the default)\nswiftc tmp.swift -emit-assembly -Xllvm -x86-asm-syntax=intel -o tmp.S\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple LLDB Logs Simultaneously\nDESCRIPTION: This command demonstrates how to enable multiple LLDB logs (types and expression) at the same time, writing the output to a single file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_53\n\nLANGUAGE: shell\nCODE:\n```\n(lldb) log enable -f /tmp/lldb-types-log.txt lldb types expression\n```\n\n----------------------------------------\n\nTITLE: Executing Swift Tests Directly with lit.py (sh)\nDESCRIPTION: Illustrates direct invocation of the LLVM `lit.py` testing tool to run Swift tests found within a specific directory (`test-macosx-x86_64/Parse/` in the build directory). The command uses the `-sv` options for a progress bar and verbose output on failure. It requires the LLVM source root (`LLVM_SOURCE_ROOT`) and the Swift build directory (`SWIFT_BUILD_DIR`) paths.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Testing.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n% ${LLVM_SOURCE_ROOT}/utils/lit/lit.py -sv ${SWIFT_BUILD_DIR}/test-macosx-x86_64/Parse/\n```\n\n----------------------------------------\n\nTITLE: Setting Lipo Target Properties for Swift Compatibility Packs\nDESCRIPTION: Iterates through Swift SDKs to ensure lipo targets generated by add_swift_target_library are included in the ALL target. Sets EXCLUDE_FROM_ALL property to FALSE for each valid target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CompatibilityPacks/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(sdk ${SWIFT_SDKS})\n  set(target_name \"${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n  if(NOT TARGET \"${target_name}\")\n    continue()\n  endif()\n\n  set_target_properties(\"${target_name}\"\n    PROPERTIES\n      EXCLUDE_FROM_ALL FALSE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Illustrating @reborrow Phi Argument in SIL\nDESCRIPTION: This example demonstrates the use of an @reborrow phi argument in SIL. It shows how incoming values must be borrow-introducers with borrow scopes ending at the predecessor's branch instructions. The phi-argument produces a guaranteed value that is borrow-introducing, creating a forward-extended borrow scope.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_29\n\nLANGUAGE: sil\nCODE:\n```\n      %1 = copy_addr %0\n      cond_br %cond, bb1, bb2\n    bb1:\n      %2 = begin_borrow %1     -+ lifetime of %2     -+ forward-extended\n      br bb3(%x, %2)           -/                     |   borrow scope\n    bb2:                                              |\n      %3 = load [copy] %addr                          |\n      %4 = begin_borrow %1     -+ lifetime of %4      |\n      br bb3(%3, %4)           -/                     |\n    bb3(%p1 : @owned $C, %p2 : @reborrow $C): -+------|-- lifetime of %p2\n      %6 = borrowed %p2 from (%p1, %1)         |      |\n      end_borrow %6                           -+     -+\n```\n\n----------------------------------------\n\nTITLE: Rebinding Memory in Swift Intermediate Language (SIL)\nDESCRIPTION: The rebind_memory instruction rebinds memory to a new set of types represented by a token. It takes a raw pointer and a token representing previously bound types, returning a new token for the memory region.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_47\n\nLANGUAGE: sil\nCODE:\n```\n%out_token = rebind_memory %0 : $Builtin.RawPointer to %in_token\n// %0 must be of $Builtin.RawPointer type\n// %in_token represents a cached set of bound types from a prior memory state.\n// %out_token is an opaque $Builtin.Word representing the previously bound\n// types for this memory region.\n```\n\n----------------------------------------\n\nTITLE: Defining end_cow_mutation Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for end_cow_mutation which marks the end of mutation for a reference counted object, returning the reference as a new SSA value that is guaranteed to be uniquely referenced.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_76\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'end_cow_mutation' '[keep_unique]'? sil-operand\n\n%1 = end_cow_mutation %0 : $C\n// $C must be a reference-counted type\n// %1 will be of type C\n```\n\n----------------------------------------\n\nTITLE: SIL Instruction: end_borrow\nDESCRIPTION: Ends the scope of a borrowed value. Must be paired with exactly one borrowing instruction and prevents modification of the original value within the borrow scope.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_31\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'end_borrow' sil-operand\n\nend_borrow %1 : $T\n```\n\n----------------------------------------\n\nTITLE: Basic Swift Mangling Prefix Definition\nDESCRIPTION: Defines the base prefix for all Swift-mangled names. All mangled names in Swift start with '_T' followed by a global identifier.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmangled-name ::= '_T' global\n```\n\n----------------------------------------\n\nTITLE: Declaring Callback and Function Pointer Functions\nDESCRIPTION: Defines functions that accept closure and C function pointer parameters, demonstrating callback patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nfunc fooFuncWithBlock(_ blk: (@escaping (Float) -> Int32)!)\nfunc fooFuncWithFunctionPointer(_ fptr: (@escaping @convention(c) (Float) -> Int32)!)\n```\n\n----------------------------------------\n\nTITLE: Conceptual Unwind Table Entry for Automated Cleanup\nDESCRIPTION: This pseudocode represents a conceptual record within an unwind table. Instead of generating explicit landing pad code in the function, the table encodes the cleanup actions directly. The unwinder interprets these directives, calling functions like C++ destructors (`SomeCXXType::~SomeCXXType`) or Objective-C's `objc_release` with arguments derived from the stack frame's context, before resuming the unwind process. This moves cleanup logic from the function body to the unwind metadata.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_8\n\nLANGUAGE: pseudocode\nCODE:\n```\n```c++\nCALL_WITH_FRAME_ADDRESS(&SomeCXXType::~SomeCXXType, FRAME_OFFSET_OF(foo))\nCALL_WITH_FRAME_VALUE(&objc_release, FRAME_OFFSET_OF(bar))\nCALL_WITH_FRAME_VALUE(&objc_release, FRAME_OFFSET_OF(baz))\nRESUME\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Concrete and Dependent Protocol Conformance Mangling in Swift\nDESCRIPTION: Specifies the mangling rules for concrete and dependent protocol conformances, including retroactive conformances and conformance witness arguments used at runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_39\n\nLANGUAGE: swift\nCODE:\n```\nconcrete-protocol-conformance ::= type protocol-conformance-ref any-protocol-conformance-list 'HC'\nprotocol-conformance-ref ::= protocol 'HP'   // same module as conforming type\nprotocol-conformance-ref ::= protocol 'Hp'   // same module as protocol\nprotocol-conformance-ref ::= protocol module // \"retroactive\"\n\nany-protocol-conformance ::= concrete-protocol-conformance\nany-protocol-conformance ::= dependent-protocol-conformance\nany-protocol-conformance ::= pack-protocol-conformance\n\nany-protocol-conformance-list ::= any-protocol-conformance '_' any-protocol-conformance-list\nany-protocol-conformance-list ::= empty-list\n\nDEPENDENT-CONFORMANCE-INDEX ::= INDEX\n\ndependent-protocol-conformance ::= type protocol 'HD' DEPENDENT-CONFORMANCE-INDEX\ndependent-protocol-conformance ::= dependent-protocol-conformance protocol 'HI' DEPENDENT-CONFORMANCE-INDEX\ndependent-protocol-conformance ::= dependent-protocol-conformance\n    dependent-associated-conformance 'HA' DEPENDENT-CONFORMANCE-INDEX\n\ndependent-associated-conformance ::= type protocol\ndependent-protocol-conformance ::= dependent-protocol-conformance opaque-type 'HO'\n\npack-protocol-conformance ::= any-protocol-conformance-list 'HX'\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded RISC-V Test Environment in CMake\nDESCRIPTION: This snippet sets up test configuration for embedded RISC-V (32-bit) targets when cross-compiling. It configures the testing environment with specific platform parameters for a virtual RISC-V device using QEMU.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: CMake\nCODE:\n```\n  set(VARIANT_SUFFIX \"-embedded-riscv32\")\n  set(VARIANT_TRIPLE \"riscv32-none-none-eabi\")\n  set(VARIANT_EXTERNAL_EMBEDDED_PLATFORM TRUE)\n  set(VARIANT_EXTERNAL_EMBEDDED_DEVICE \"riscv32-qemu-virt\")\n  set(SWIFT_TEST_RESULTS_DIR \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/swift-test-results/${VARIANT_TRIPLE}\")\n  swift_configure_lit_site_cfg(\n      \"${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}${VARIANT_SUFFIX}/lit.site.cfg\"\n      \"test${VARIANT_SUFFIX}.lit.site.cfg\")\n  swift_generate_lit_swift_features_cfg(\"${CMAKE_CURRENT_BINARY_DIR}${VARIANT_SUFFIX}/lit.swift-features.cfg\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Swift Error Type in C++\nDESCRIPTION: C++ class representation for Swift Error type. It stores a pointer to the Swift error instance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nclass Error {\nprivate:\n  void *_opaquePointer; // Swift error instance pointer is stored here.:\n};\n```\n\n----------------------------------------\n\nTITLE: Unchecked Ownership Conversion in Swift SIL\nDESCRIPTION: Converts operand value ownership without performing normal semantic operations. Used in Objective-C compatible destructors to convert guaranteed parameters to owned parameters without semantic copying.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_166\n\nLANGUAGE: swift\nCODE:\n```\n%1 = unchecked_ownership_conversion %0 : $A, @guaranteed to @owned\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Math Library Target for Android\nDESCRIPTION: Adds a Swift target library for math functionality with Android SDK support. Configures compilation flags, link flags and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swift_math ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY\n    Math.swift\n\n    SWIFT_COMPILE_FLAGS\n      ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\n      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n      ${swift_platform_compile_flags}\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n    TARGET_SDKS \"ANDROID\"\n    INSTALL_IN_COMPONENT sdk-overlay\n    DEPENDS android_modulemap)\n```\n\n----------------------------------------\n\nTITLE: Unrolled Loop with Early Exits for Reference Counting Analysis\nDESCRIPTION: Unrolled version of the alternative loop pattern showing 3 iterations, used to analyze how retain/release operations should be moved when optimizing reference counting across early exits.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_11\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  br bb1\n\n# Iteration 1\nbb1: // preds: bb0\n  cond_br ..., bb2, bb8\n\nbb2: // preds: bb1\n  strong_retain %0 : $Builtin.NativeObject               (1)\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject              (2)\n  br bb3\n\n# Iteration 2\nbb3: // preds: bb2\n  cond_br ..., bb4, bb8\n\nbb4: // preds: bb3\n  strong_retain %0 : $Builtin.NativeObject               (3)\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject              (4)\n  br bb5\n\n# Iteration 3\nbb5: // preds: bb4\n  cond_br ..., bb6, bb8\n\nbb6: // preds: bb5\n  strong_retain %0 : $Builtin.NativeObject               (5)\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject              (6)\n  cond_br ..., bb7, bb8\n\nbb7: // preds: bb6\n  br bb9\n\nbb8: // Preds: bb1, bb3, bb5, bb6\n  br bb9\n\nbb9:\n  return ...\n```\n\n----------------------------------------\n\nTITLE: Marking Exact Self Class Initializer Functions in SIL (BNF)\nDESCRIPTION: Introduces the '[exact_self_class]' attribute, indicating a function is a designated initializer with the statically known type for the object being allocated. Enforces inlining and specialization constraints for initializers in class hierarchies. Used only on initializers where type identity is guaranteed, relevant to compiler and optimizer phases managing class creation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_6\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[exact_self_class]'\n```\n\n----------------------------------------\n\nTITLE: JSON Definition of PhotoSettings Class in Swift\nDESCRIPTION: JSON representation of the PhotoSettings class that inherits from NSObject. It includes several initializers with Objective-C compatibility and conforms to NSObjectProtocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/clang-module-dump.txt#2025-04-23_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"kind\": \"TypeDecl\",\n  \"name\": \"PhotoSettings\",\n  \"printedName\": \"PhotoSettings\",\n  \"children\": [\n    {\n      \"kind\": \"Constructor\",\n      \"name\": \"init\",\n      \"printedName\": \"init(format:)\",\n      \"children\": [\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"Optional\",\n          \"printedName\": \"Foo.PhotoSettings?\",\n          \"children\": [\n            {\n              \"kind\": \"TypeNominal\",\n              \"name\": \"PhotoSettings\",\n              \"printedName\": \"Foo.PhotoSettings\",\n              \"usr\": \"c:objc(cs)PhotoSettings\"\n            }\n          ],\n          \"usr\": \"s:Sq\"\n        },\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"Int32\",\n          \"printedName\": \"Swift.Int32\",\n          \"usr\": \"s:s5Int32V\"\n        }\n      ],\n      \"declKind\": \"Constructor\",\n      \"usr\": \"c:objc(cs)PhotoSettings(cm)photoSettingsWithFormat:\",\n      \"moduleName\": \"Foo\",\n      \"objc_name\": \"photoSettingsWithFormat:\",\n      \"declAttributes\": [\n        \"ObjC\",\n        \"Dynamic\"\n      ],\n      \"init_kind\": \"ConvenienceFactory\"\n    },\n    {\n      \"kind\": \"Constructor\",\n      \"name\": \"init\",\n      \"printedName\": \"init(number:)\",\n      \"children\": [\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"Optional\",\n          \"printedName\": \"Foo.PhotoSettings?\",\n          \"children\": [\n            {\n              \"kind\": \"TypeNominal\",\n              \"name\": \"PhotoSettings\",\n              \"printedName\": \"Foo.PhotoSettings\",\n              \"usr\": \"c:objc(cs)PhotoSettings\"\n            }\n          ],\n          \"usr\": \"s:Sq\"\n        },\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"Int32\",\n          \"printedName\": \"Swift.Int32\",\n          \"usr\": \"s:s5Int32V\"\n        }\n      ],\n      \"declKind\": \"Constructor\",\n      \"usr\": \"c:objc(cs)PhotoSettings(cm)photoSettingsWithNumber:\",\n      \"moduleName\": \"Foo\",\n      \"objc_name\": \"photoSettingsWithNumber:\",\n      \"declAttributes\": [\n        \"ObjC\",\n        \"Dynamic\"\n      ],\n      \"init_kind\": \"ConvenienceFactory\"\n    },\n    {\n      \"kind\": \"Constructor\",\n      \"name\": \"init\",\n      \"printedName\": \"init(cake:)\",\n      \"children\": [\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"Optional\",\n          \"printedName\": \"Foo.PhotoSettings?\",\n          \"children\": [\n            {\n              \"kind\": \"TypeNominal\",\n              \"name\": \"PhotoSettings\",\n              \"printedName\": \"Foo.PhotoSettings\",\n              \"usr\": \"c:objc(cs)PhotoSettings\"\n            }\n          ],\n          \"usr\": \"s:Sq\"\n        },\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"Int32\",\n          \"printedName\": \"Swift.Int32\",\n          \"usr\": \"s:s5Int32V\"\n        }\n      ],\n      \"declKind\": \"Constructor\",\n      \"usr\": \"c:objc(cs)PhotoSettings(im)initWithCake:\",\n      \"moduleName\": \"Foo\",\n      \"objc_name\": \"initWithCake:\",\n      \"declAttributes\": [\n        \"ObjC\",\n        \"Dynamic\"\n      ],\n      \"init_kind\": \"Designated\"\n    },\n    {\n      \"kind\": \"Constructor\",\n      \"name\": \"init\",\n      \"printedName\": \"init()\",\n      \"children\": [\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"PhotoSettings\",\n          \"printedName\": \"Foo.PhotoSettings\",\n          \"usr\": \"c:objc(cs)PhotoSettings\"\n        }\n      ],\n      \"declKind\": \"Constructor\",\n      \"usr\": \"c:objc(cs)NSObject(im)init\",\n      \"moduleName\": \"Foo\",\n      \"overriding\": true,\n      \"implicit\": true,\n      \"objc_name\": \"init\",\n      \"declAttributes\": [\n        \"Override\",\n        \"ObjC\",\n        \"Dynamic\"\n      ],\n      \"init_kind\": \"Designated\"\n    }\n  ],\n  \"declKind\": \"Class\",\n  \"usr\": \"c:objc(cs)PhotoSettings\",\n  \"moduleName\": \"Foo\",\n  \"isOpen\": true,\n  \"objc_name\": \"PhotoSettings\",\n  \"declAttributes\": [\n    \"ObjC\",\n    \"Dynamic\"\n  ],\n  \"superclassUsr\": \"c:objc(cs)NSObject\",\n  \"inheritsConvenienceInitializers\": true,\n  \"superclassNames\": [\n    \"ObjectiveC.NSObject\"\n  ],\n  \"conformances\": [\n    {\n      \"kind\": \"Conformance\",\n      \"name\": \"NSObjectProtocol\",\n      \"printedName\": \"NSObjectProtocol\",\n      \"usr\": \"c:objc(pl)NSObject\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existential Boxes in SIL\nDESCRIPTION: Projects address of value in boxed existential and binds opened archetype.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_159\n\nLANGUAGE: sil\nCODE:\n```\n%1 = open_existential_box %0 : $P to $*@opened P\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Optimizer Source Files\nDESCRIPTION: Defines the Swift source files that make up the Optimizer module of the Swift compiler. These files implement various optimization passes such as diagnosing unknown constant values, handling embedded diagnostics, and implementing mandatory performance optimizations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/ModulePasses/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nswift_compiler_sources(Optimizer\n  DiagnoseUnknownConstValues.swift\n  EmbeddedSwiftDiagnostics.swift\n  MandatoryPerformanceOptimizations.swift\n  ReadOnlyGlobalVariables.swift\n  StackProtection.swift\n)\n```\n\n----------------------------------------\n\nTITLE: Owned Value Forwarding with Reference Cast in Swift SIL\nDESCRIPTION: Shows how owned values are forwarded through an unchecked reference cast operation, consuming the input and producing an owned output.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nsil @unsafelyCastToSubClass : $@convention(thin) (@owned Klass) -> @owned SubKlass {\nbb0(%0 : @owned $Klass):\n  %1 = unchecked_ref_cast %0 : $Klass to $SubKlass\n  return %1 : $SubKlass\n}\n```\n\n----------------------------------------\n\nTITLE: End Lifetime Instruction in SIL\nDESCRIPTION: Defines the end_lifetime instruction that signifies the end of an operand's lifetime to the ownership verifier, used when destroying an operand would be illegal.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_33\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'end_lifetime' sil-operand\n\n// Consumes %0 without destroying it\nend_lifetime %0 : $T\n\n// Consumes the memory location %1 without destroying it\nend_lifetime %1 : $*T\n```\n\n----------------------------------------\n\nTITLE: Reference to Raw Pointer Conversion in Swift SIL\nDESCRIPTION: Converts a heap object reference to a Builtin.RawPointer. The result can be cast back to the original class type but lacks ownership semantics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_167\n\nLANGUAGE: swift\nCODE:\n```\n%1 = ref_to_raw_pointer %0 : $C to $Builtin.RawPointer\n```\n\n----------------------------------------\n\nTITLE: Documentation Request Format for SourceKit\nDESCRIPTION: JSON schema for documentation information requests. Specifies required and optional parameters for retrieving documentation from a Swift module, source file, or source text.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>:          (UID) <source.request.docinfo>\n    [opt] <key.modulename>: (string)   // The name of the Swift module.\n    [opt] <key.sourcetext>: (string)   // Source contents.\n    [opt] <key.sourcefile>: (string)   // Absolute path to the file.\n    [opt] <key.compilerargs> [string*] // Array of zero or more strings for the compiler arguments\n                                       // e.g [\"-sdk\", \"/path/to/sdk\"]. If key.sourcefile is provided,\n                                       // these must include the path to that file.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift SIL Optimizer Source Files in CMake\nDESCRIPTION: This CMake directive specifies the source files to be included in the swiftSILOptimizer target. It lists numerous C++ files that implement different optimization techniques and utilities for the Swift Intermediate Language (SIL).\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/Utils/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  BasicBlockOptUtils.cpp\n  CFGOptUtils.cpp\n  CanonicalizeInstruction.cpp\n  CanonicalizeOSSALifetime.cpp\n  CanonicalizeBorrowScope.cpp\n  CastOptimizer.cpp\n  CheckedCastBrJumpThreading.cpp\n  CompileTimeInterpolationUtils.cpp\n  ConstantFolding.cpp\n  ConstExpr.cpp\n  Devirtualize.cpp\n  DifferentiationMangler.cpp\n  DistributedActor.cpp\n  Existential.cpp\n  GenericCloner.cpp\n  Generics.cpp\n  InstructionDeleter.cpp\n  InstOptUtils.cpp\n  KeyPathProjector.cpp\n  LexicalDestroyFolding.cpp\n  LoopUtils.cpp\n  OptimizerStatsUtils.cpp\n  RegionIsolation.cpp\n  PartialApplyCombiner.cpp\n  PartitionUtils.cpp\n  PerformanceInlinerUtils.cpp\n  ShrinkBorrowScope.cpp\n  SILInliner.cpp\n  SILIsolationInfo.cpp\n  SILSSAUpdater.cpp\n  SpecializationMangler.cpp\n  StackNesting.cpp\n  ValueLifetime.cpp\n  VariableNameUtils.cpp\n  OwnershipOptUtils.cpp\n  OptimizerBridging.cpp)\n```\n\n----------------------------------------\n\nTITLE: Block Argument Ownership Kind Example in Swift SIL (Swift)\nDESCRIPTION: This code demonstrates the use of explicit ownership kinds for basic block arguments—@owned, @guaranteed, and no annotation (for trivial types)—enabling the function to track value lifetimes and ensure ownership correctness. Prerequisite: block argument types must align with the SIL function's type signature.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\n    bb1(%0 : @owned $String, %1 : @guaranteed $String, %2 : $Int):\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Adding New Variable to __VaListBuilder in Swift\nDESCRIPTION: A new variable 'requiredAlignmentInBytes' has been added to the __VaListBuilder struct without an @available attribute. This addition is made to a non-resilient type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Inputs/stability-stdlib-abi-without-asserts-arm64.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// New variable added:\n__VaListBuilder.requiredAlignmentInBytes\n```\n\n----------------------------------------\n\nTITLE: Defining swiftCxxStdlib Target\nDESCRIPTION: Configures the swiftCxxStdlib target as a static library with specific Swift source files, module dependencies, compilation flags, and deployment versions. This sets up the core C++ Standard Library overlay for Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/std/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftCxxStdlib STATIC NO_LINK_NAME IS_STDLIB IS_SWIFT_ONLY\n    std.swift\n    Chrono.swift\n    String.swift\n\n    SWIFT_MODULE_DEPENDS Cxx ${swift_cxxstdlib_dependencies}\n    SWIFT_MODULE_DEPENDS_IOS ${swift_cxxstdlib_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_OSX ${swift_cxxstdlib_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_TVOS ${swift_cxxstdlib_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_WATCHOS ${swift_cxxstdlib_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_XROS ${swift_cxxstdlib_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_cxxstdlib_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_ANDROID Android\n\n    SWIFT_COMPILE_FLAGS ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    -cxx-interoperability-mode=default\n    -Xfrontend -module-interface-preserve-types-as-written\n\n    -enable-experimental-feature AssumeResilientCxxTypes\n\n    -enable-experimental-feature AllowUnsafeAttribute\n    -strict-memory-safety\n\n    -disable-upcoming-feature MemberImportVisibility\n\n    SWIFT_COMPILE_FLAGS_LINUX\n    ${SWIFT_SDK_LINUX_CXX_OVERLAY_SWIFT_COMPILE_FLAGS}\n\n    DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n    DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n    DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n    DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n    DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n    TARGET_SDKS ALL_APPLE_PLATFORMS LINUX WINDOWS ANDROID\n    MACCATALYST_BUILD_FLAVOR zippered\n    INSTALL_IN_COMPONENT compiler\n    INSTALL_WITH_SHARED\n    DEPENDS libstdcxx-modulemap libcxxshim_modulemap CxxStdlib-apinotes)\n```\n\n----------------------------------------\n\nTITLE: Swift Non-destructive Move Usage Example\nDESCRIPTION: Example showing how to use non-destructive moves with an array of Files in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_35\n\nLANGUAGE: swift\nCODE:\n```\nfunc useArrayOfFiles() {\n  var files: [File] = ...\n  // consumeFile(files[0]) // compile-time error: can't copy a `File`\n\n  consumeFile(cxxMove(&file[0])) // OK, replaced `file[0]` with a `File()`.\n\n  consumeFile(cxxMove(&file[1], replacingWith: File(\"/tmp/example.txt\")))\n  // OK, replaced `file[1]` with a newly-opened file.\n}\n```\n\n----------------------------------------\n\nTITLE: Optimized Loop with Reference Counting Hoisted\nDESCRIPTION: The final, optimized version of the loop after hoisting retain/release operations and adding compensating releases for early exits. This demonstrates proper reference count balancing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_9\n\nLANGUAGE: sil\nCODE:\n```\nbb0:\n  strong_retain %0 : $Builtin.NativeObject               (1)\n\nbb1:\n  apply %f(%0)\n  apply %f(%0)\n  cond_br ..., bb2, bb3\n\nbb2:\n  cond_br ..., bb1, bb4\n\nbb3:\n  strong_release %0 : $Builtin.NativeObject              (6*)\n  br bb5\n\nbb4:\n  strong_release %0 : $Builtin.NativeObject              (7*)\n  br bb5\n\nbb5: // preds: bb3, bb4\n  return ...\n```\n\n----------------------------------------\n\nTITLE: Defining Implementation Function Type Mangling in Swift\nDESCRIPTION: This snippet defines the mangling rules for implementation function types in Swift, including various function attributes, conventions, and representations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_34\n\nLANGUAGE: Swift\nCODE:\n```\nimpl-function-type ::= type* 'I' FUNC-ATTRIBUTES '_'\nimpl-function-type ::= type* generic-signature 'I' FUNC-ATTRIBUTES '_'\n\nFUNC-ATTRIBUTES ::= PATTERN-SUBS? INVOCATION-SUBS? PSEUDO-GENERIC? CALLEE-ESCAPE? ISOLATION? DIFFERENTIABILITY-KIND? CALLEE-CONVENTION FUNC-REPRESENTATION? COROUTINE-KIND? SENDABLE? ASYNC? SENDING-RESULT? (PARAM-CONVENTION PARAM-DIFFERENTIABILITY?)* RESULT-CONVENTION* ('Y' PARAM-CONVENTION)* ('z' RESULT-CONVENTION RESULT-DIFFERENTIABILITY?)?\n\nPATTERN-SUBS ::= 's'                       // has pattern substitutions\nINVOCATION-SUB ::= 'I'                     // has invocation substitutions\nPSEUDO-GENERIC ::= 'P'\n\nCALLEE-ESCAPE ::= 'e'                      // @escaping (inverse of SIL @noescape)\n\nISOLATION ::= 'A'                          // @isolated(any)\n\nDIFFERENTIABILITY-KIND ::= 'd'             // @differentiable\nDIFFERENTIABILITY-KIND ::= 'l'             // @differentiable(_linear)\nDIFFERENTIABILITY-KIND ::= 'f'             // @differentiable(_forward)\nDIFFERENTIABILITY-KIND ::= 'r'             // @differentiable(reverse)\n\nCALLEE-CONVENTION ::= 'y'                  // @callee_unowned\nCALLEE-CONVENTION ::= 'g'                  // @callee_guaranteed\nCALLEE-CONVENTION ::= 'x'                  // @callee_owned\nCALLEE-CONVENTION ::= 't'                  // thin\n\nFUNC-REPRESENTATION ::= 'B'                // C block invocation function\nFUNC-REPRESENTATION ::= 'zB' C-TYPE        // C block invocation function with non-canonical C type\nFUNC-REPRESENTATION ::= 'C'                // C global function\nFUNC-REPRESENTATION ::= 'zC' C-TYPE        // C global function with non-canonical C type\nFUNC-REPRESENTATION ::= 'M'                // Swift method\nFUNC-REPRESENTATION ::= 'J'                // ObjC method\nFUNC-REPRESENTATION ::= 'K'                // closure\nFUNC-REPRESENTATION ::= 'W'                // protocol witness\n\nCOROUTINE-KIND ::= 'A'                     // yield-once coroutine\nCOROUTINE-KIND ::= 'I'                     // yield-once-2 coroutine\nCOROUTINE-KIND ::= 'G'                     // yield-many coroutine\n\n#if SWIFT_RUNTIME_VERSION >= 5.5\n  SENDABLE ::= 'h'                         // @Sendable\n  ASYNC ::= 'H'                            // @async\n#endif\n\n#if SWIFT_RUNTIME_VERSION >= 6.0\n  SENDING-RESULT ::= 'T'                   // sending result\n#endif\n\nPARAM-CONVENTION ::= 'i'                   // indirect in\nPARAM-CONVENTION ::= 'c'                   // indirect in constant\nPARAM-CONVENTION ::= 'l'                   // indirect inout\nPARAM-CONVENTION ::= 'b'                   // indirect inout aliasable\nPARAM-CONVENTION ::= 'n'                   // indirect in guaranteed\nPARAM-CONVENTION ::= 'X'                   // indirect in C++\nPARAM-CONVENTION ::= 'x'                   // direct owned\nPARAM-CONVENTION ::= 'y'                   // direct unowned\nPARAM-CONVENTION ::= 'g'                   // direct guaranteed\nPARAM-CONVENTION ::= 'e'                   // direct deallocating\nPARAM-CONVENTION ::= 'v'                   // pack owned\nPARAM-CONVENTION ::= 'p'                   // pack guaranteed\nPARAM-CONVENTION ::= 'm'                   // pack inout\n\nPARAM-DIFFERENTIABILITY ::= 'w'            // @noDerivative\n\nRESULT-CONVENTION ::= 'r'                  // indirect\nRESULT-CONVENTION ::= 'o'                  // owned\nRESULT-CONVENTION ::= 'd'                  // unowned\nRESULT-CONVENTION ::= 'u'                  // unowned inner pointer\nRESULT-CONVENTION ::= 'a'                  // auto-released\nRESULT-CONVENTION ::= 'k'                  // pack\n\nRESULT-DIFFERENTIABILITY ::= 'w'            // @noDerivative\n\nDIRECTNESS ::= 'i'                         // indirect\n```\n\n----------------------------------------\n\nTITLE: Defining Value Witness Kind Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for various types of value witness functions, including memory management, initialization, and enum operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nVALUE-WITNESS-KIND ::= 'al'           // allocateBuffer\nVALUE-WITNESS-KIND ::= 'ca'           // assignWithCopy\nVALUE-WITNESS-KIND ::= 'ta'           // assignWithTake\nVALUE-WITNESS-KIND ::= 'de'           // deallocateBuffer\nVALUE-WITNESS-KIND ::= 'xx'           // destroy\nVALUE-WITNESS-KIND ::= 'XX'           // destroyBuffer\nVALUE-WITNESS-KIND ::= 'Xx'           // destroyArray\nVALUE-WITNESS-KIND ::= 'CP'           // initializeBufferWithCopyOfBuffer\nVALUE-WITNESS-KIND ::= 'Cp'           // initializeBufferWithCopy\nVALUE-WITNESS-KIND ::= 'cp'           // initializeWithCopy\nVALUE-WITNESS-KIND ::= 'TK'           // initializeBufferWithTakeOfBuffer\nVALUE-WITNESS-KIND ::= 'Tk'           // initializeBufferWithTake\nVALUE-WITNESS-KIND ::= 'tk'           // initializeWithTake\nVALUE-WITNESS-KIND ::= 'pr'           // projectBuffer\nVALUE-WITNESS-KIND ::= 'xs'           // storeExtraInhabitant\nVALUE-WITNESS-KIND ::= 'xg'           // getExtraInhabitantIndex\nVALUE-WITNESS-KIND ::= 'Cc'           // initializeArrayWithCopy\nVALUE-WITNESS-KIND ::= 'Tt'           // initializeArrayWithTakeFrontToBack\nVALUE-WITNESS-KIND ::= 'tT'           // initializeArrayWithTakeBackToFront\nVALUE-WITNESS-KIND ::= 'ug'           // getEnumTag\nVALUE-WITNESS-KIND ::= 'up'           // destructiveProjectEnumData\nVALUE-WITNESS-KIND ::= 'ui'           // destructiveInjectEnumTag\nVALUE-WITNESS-KIND ::= 'et'           // getEnumTagSinglePayload\nVALUE-WITNESS-KIND ::= 'st'           // storeEnumTagSinglePayload\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Function in Swift\nDESCRIPTION: Defines a global function prototype doSomethingInHead that takes an Int32 parameter.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nfunc doSomethingInHead(_ arg: Int32)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Refactoring Static Library Build\nDESCRIPTION: Defines a static library target 'swiftRefactoring' with a comprehensive list of source files focused on different refactoring capabilities. The source files include implementations for async conversion, expression extraction, and various code transformation utilities.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Refactoring/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftRefactoring STATIC\n  AddEquatableConformance.cpp\n  AddExplicitCodableImplementation.cpp\n  Async/AsyncConverter.cpp\n  Async/AsyncHandlerDesc.cpp\n  Async/AsyncRefactorings.cpp\n  Async/CallbackClassifier.cpp\n  Async/CallbackCondition.cpp\n  Async/DeclCollector.cpp\n  Async/DeclReferenceFinder.cpp\n  Async/ReferenceCollector.cpp\n  Async/ScopedDeclCollector.cpp\n  Async/Utils.cpp\n  CollapseNestedIfStmt.cpp\n  ConvertGuardExprToIfLetExpr.cpp\n  ConvertIfLetExprToGuardExpr.cpp\n  ConvertStringConcatenationToInterpolation.cpp\n  ConvertToComputedProperty.cpp\n  ConvertToDoCatch.cpp\n  ConvertToSwitchStmt.cpp\n  ConvertToTernaryExpr.cpp\n  ExpandMacro.cpp\n  ExpandSwitchCases.cpp\n  ExpandTernaryExpr.cpp\n  ExtractExpr.cpp\n  ExtractExprBase.cpp\n  ExtractFunction.cpp\n  ExtractRepeatedExpr.cpp\n  FillProtocolStubs.cpp\n  LocalizeString.cpp\n  LocalRename.cpp\n  MemberwiseInitLocalRefactoring.cpp\n  MoveMembersToExtension.cpp\n  Refactoring.cpp\n  RefactoringAction.cpp\n  ReplaceBodiesWithFatalError.cpp\n  SimplifyNumberLiteral.cpp\n  SyntacticRename.cpp\n  SyntacticRenameRangeDetails.cpp\n  TrailingClosure.cpp\n  Utils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining SCNFilterMode Enumeration\nDESCRIPTION: Creates an enum for filtering modes with various cases and an unavailable case, likely from SceneKit framework.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\nenum SCNFilterMode : Int {\n  init?(rawValue: Int)\n  var rawValue: Int { get }\n  case none\n  case nearest\n  case linear\n  @available(*, unavailable)\n  case SCNNoFiltering\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Android-Specific Options for Swift Build in CMake\nDESCRIPTION: Configures options for Android API level, NDK path, and device deployment path for testing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_41\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_ANDROID_API_LEVEL \"\" CACHE STRING\n  \"Version number for the Android API\")\n\nset(SWIFT_ANDROID_NDK_PATH \"\" CACHE STRING\n  \"Path to the directory that contains the Android NDK tools that are executable on the build machine\")\nset(SWIFT_ANDROID_DEPLOY_DEVICE_PATH \"\" CACHE STRING\n  \"Path on an Android device where build products will be pushed. These are used when running the test suite against the device\")\n```\n\n----------------------------------------\n\nTITLE: Move-Only Wrapper to Copyable SIL Instruction Definition\nDESCRIPTION: Defines the syntax for moveonlywrapper_to_copyable instruction that converts @moveOnly T to T with owned or guaranteed ownership qualifiers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_203\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'moveonlywrapper_to_copyable [owned]'\nsil-instruction ::= 'moveonlywrapper_to_copyable [guaranteed]'\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @owned Phi Argument in SIL\nDESCRIPTION: This snippet shows the use of an @owned phi argument in SIL. It illustrates how the lifetimes of incoming values end at the predecessor's branch instructions, and the phi-argument produces an owned value starting a new lifetime, resulting in a forward-extended lifetime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_28\n\nLANGUAGE: sil\nCODE:\n```\n      cond_br %cond, bb1, bb2\n    bb1:\n      %1 = copy_value %0       -+ lifetime of %1     -+ forward-extended\n      br bb3(%1)               -/                     |   lifetime\n    bb2:                                              |\n      %3 = load [copy] %addr   -+ lifetime of %3      |\n      br bb3(%2)               -/                     |\n    bb3(%phi : @owned $C):     -+ lifetime of %phi    |\n      return %phi              -/                    -+\n```\n\n----------------------------------------\n\nTITLE: Accessing Class Instance Variables by Address in SIL\nDESCRIPTION: The ref_element_addr instruction derives the address of a physical instance variable inside a class instance. It supports an 'immutable' attribute for specific scenarios involving COW buffers and let-fields.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_134\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'ref_element_addr' '[immutable]'? sil-operand ',' sil-decl-ref\n\n%1 = ref_element_addr %0 : $C, #C.field\n// %0 must be a value of class type $C\n// #C.field must be a non-static physical field of $C\n// %1 will be of type $*U where U is the type of the selected field\n//   of C\n```\n\n----------------------------------------\n\nTITLE: Copy Address Initialization Syntax in SIL\nDESCRIPTION: Example of the copy_addr instruction syntax with initialization flag in SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\ncopy_addr [init]\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Table Schema for Swift Optimizer Counters\nDESCRIPTION: This SQL Data Definition Language (DDL) statement creates the `Counters` table in an SQLite database. The table is designed to store various details about Swift optimizer counters generated during compilation, including stage, transformation, counter type, values (delta, old, new), duration, and associated symbol (e.g., function name).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE Counters(\n  Id INTEGER PRIMARY KEY AUTOINCREMENT,\n  Stage TEXT NOT NULL,\n  Transform TEXT NOT NULL,\n  Kind TEXT,\n  Counter TEXT NOT NULL,\n  PassNum INT NOT NULL,\n  Delta NUMBER,\n  Old INT,\n  New INT,\n  Duration INT,\n  Symbol TEXT NOT NULL DEFAULT '');\n```\n\n----------------------------------------\n\nTITLE: Swift compiler error for actor isolation violation\nDESCRIPTION: The error message Swift produces when attempting to call a main actor-isolated method from a synchronous nonisolated context, highlighting the potential for data races.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/actor-isolated-call.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n| func runUpdate(model: MyModel) {\n|   model.update()\n|         `- error: call to main actor-isolated instance method 'update()' in a synchronous nonisolated context\n| }\n```\n\n----------------------------------------\n\nTITLE: Modifying Swift Array Elements\nDESCRIPTION: Shows how to modify elements in a swift::Array using the setElementAtIndex member function and array indexing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_69\n\nLANGUAGE: c++\nCODE:\n```\nfor (size_t i = 1; i < languages.getCount(); ++i)\n  languages.setElementAtIndex(i, languages[i] + languages[i - 1]);\n```\n\n----------------------------------------\n\nTITLE: Setting Bridging Mode for Swift Compiler in CMake\nDESCRIPTION: Determines the bridging mode based on build type, host variant SDK, and Swift compiler version. Uses PURE mode for debug builds or when the host Swift version is less than 5.8 to work around issues.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_35\n\nLANGUAGE: CMake\nCODE:\n```\nif(BRIDGING_MODE STREQUAL \"DEFAULT\" OR NOT BRIDGING_MODE)\n  if(CMAKE_BUILD_TYPE STREQUAL \"Debug\" OR \"${SWIFT_HOST_VARIANT_SDK}\" STREQUAL \"WINDOWS\" OR (CMAKE_Swift_COMPILER AND CMAKE_Swift_COMPILER_VERSION VERSION_LESS 5.8))\n    set(BRIDGING_MODE \"PURE\")\n  else()\n    set(BRIDGING_MODE \"INLINE\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftStdlibUnittestFoundationExtras Library in CMake for Swift\nDESCRIPTION: This CMake snippet adds the SwiftStdlibUnittestFoundationExtras library to the Swift project. It specifies source files, module dependencies, compilation flags, and installation parameters. The library is part of the stdlib-experimental component and has a specific Darwin install name directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnittestFoundationExtras/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftStdlibUnittestFoundationExtras ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  # This file should be listed the first.  Module name is inferred from the\n  # filename.\n  StdlibUnittestFoundationExtras.swift\n  UnavailableFoundationMethodThunks.mm\n\n  SWIFT_MODULE_DEPENDS StdlibUnittest\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Unconditional Checked Cast Address in SIL\nDESCRIPTION: Performs a checked indirect conversion with runtime failure if conversion fails. Source type is destroyed during conversion with no implicit copy.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_183\n\nLANGUAGE: sil\nCODE:\n```\nunconditional_checked_cast_addr $A in %0 : $*@thick A to $B in %1 : $*@thick B\n```\n\n----------------------------------------\n\nTITLE: Unified Stats Reporter Usage Example\nDESCRIPTION: Terminal commands demonstrating how to use the unified stats reporter with -stats-output-dir option.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir /tmp/stats\n$ swiftc -c test.swift -stats-output-dir /tmp/stats\n$ ls /tmp/stats\nstats-1518219149045080-swift-frontend-test-test.swift-x86_64_apple_macosx10.13-o-Onone-531621672.json\n$ cat /tmp/stats/*.json\n```\n\n----------------------------------------\n\nTITLE: Modifying GitHub PR URL for Release Template\nDESCRIPTION: Example showing how to modify a GitHub pull request URL to use the release template by adding the template parameter. This is used when creating PRs targeting release branches.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-https://github.com/swiftlang/swift/compare/main...my-branch?quick_pull=1\n+https://github.com/swiftlang/swift/compare/main...my-branch?quick_pull=1&template=release.md\n```\n\n----------------------------------------\n\nTITLE: Extending BaseInHead Class with Category Methods in Swift\nDESCRIPTION: Extends the BaseInHead class with additional class and instance methods named doItInCategory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.command-line-include.printed.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nextension BaseInHead {\n  class func doItInCategory()\n  func doItInCategory()\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Forward-Extended Lifetimes in Swift\nDESCRIPTION: This snippet illustrates how forwarding instructions end owned lifetimes and produce new ones, creating a forward-extended lifetime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n  %1 = copy_value %0        -+               -+\n  ...                        | lifetime       |\n  // forwarding instruction  |                |\n  %2 = struct $S (%1)       -+  -+            | forward-extended lifetime\n                                 | lifetime   |\n  // consuming instruction       |            |\n  destroy_value %2              -+           -+\n```\n\n----------------------------------------\n\nTITLE: Setting Installation Rules\nDESCRIPTION: Configures installation paths and components for the library, interface files, and generates platform-specific plist files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS swiftSwiftOnoneSupport\n    EXPORT SwiftCoreTargets\n    COMPONENT SwiftCore_runtime\n    ARCHIVE DESTINATION \"${SwiftCore_INSTALL_LIBDIR}\"\n    LIBRARY DESTINATION \"${SwiftCore_INSTALL_LIBDIR}\"\n    RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nemit_swift_interface(swiftSwiftOnoneSupport)\ninstall_swift_interface(swiftSwiftOnoneSupport)\n\n# Configure plist creation for Darwin platforms.\ngenerate_plist(\"${CMAKE_PROJECT_NAME}\" \"${CMAKE_PROJECT_VERSION}\" swiftSwiftOnoneSupport)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Private Compilation Flags\nDESCRIPTION: Sets compilation flags for the Swift private library, enabling stdlib parsing and disabling access control\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftPrivate/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_swiftprivate_compile_flags\n    \"-parse-stdlib\"\n    \"-Xfrontend\" \"-disable-access-control\")\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration\nDESCRIPTION: CMake build configuration for Swift-C++ interoperability project, including compiler options and target setup.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/GettingStartedWithC++Interop.md#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.18)\n\nproject(CxxInterop LANGUAGES CXX Swift)\n\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_STANDARD_REQUIRED YES)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nadd_library(cxx-support ./Sources/CxxTest/CxxTest.cpp)\ntarget_compile_options(cxx-support PRIVATE\n  -fno-exceptions\n  -fignore-exceptions)\ntarget_include_directories(cxx-support PUBLIC\n  ${CMAKE_SOURCE_DIR}/Sources/CxxTest)\n\nadd_executable(CxxInterop ./Sources/CxxInterop/main.swift)\ntarget_compile_options(CxxInterop PRIVATE\n  \"SHELL:-cxx-interoperability-mode=default\")\ntarget_link_libraries(CxxInterop PRIVATE cxx-support)\n```\n\n----------------------------------------\n\nTITLE: ObjC Option Set Example with Convenience Combinations\nDESCRIPTION: An Objective-C example showing how option subsets are typically expressed using bitmasks, with convenience combinations defined as constants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_2\n\nLANGUAGE: objc\nCODE:\n```\n// ObjC\ntypedef NS_OPTIONS(unsigned long long, NSAlignmentOptions) {\n    NSAlignMinXInward   = 1ULL << 0,\n    NSAlignMinYInward   = 1ULL << 1,\n    NSAlignMaxXInward   = 1ULL << 2,\n    NSAlignMaxYInward   = 1ULL << 3,\n    NSAlignWidthInward  = 1ULL << 4,\n    NSAlignHeightInward = 1ULL << 5,\n\n    NSAlignMinXOutward   = 1ULL << 8,\n    NSAlignMinYOutward   = 1ULL << 9,\n    NSAlignMaxXOutward   = 1ULL << 10,\n    NSAlignMaxYOutward   = 1ULL << 11,\n    NSAlignWidthOutward  = 1ULL << 12,\n    NSAlignHeightOutward = 1ULL << 13,\n\n    NSAlignMinXNearest   = 1ULL << 16,\n    NSAlignMinYNearest   = 1ULL << 17,\n    NSAlignMaxXNearest   = 1ULL << 18,\n    NSAlignMaxYNearest   = 1ULL << 19,\n    NSAlignWidthNearest  = 1ULL << 20,\n    NSAlignHeightNearest = 1ULL << 21,\n\n    NSAlignRectFlipped = 1ULL << 63, // pass this if the rect is in a flipped coordinate system. This allows 0.5 to be treated in a visually consistent way.\n\n    // convenience combinations\n    NSAlignAllEdgesInward = NSAlignMinXInward|NSAlignMaxXInward|NSAlignMinYInward|NSAlignMaxYInward,\n    NSAlignAllEdgesOutward = NSAlignMinXOutward|NSAlignMaxXOutward|NSAlignMinYOutward|NSAlignMaxYOutward,\n    NSAlignAllEdgesNearest = NSAlignMinXNearest|NSAlignMaxXNearest|NSAlignMinYNearest|NSAlignMaxYNearest,\n};\n```\n\n----------------------------------------\n\nTITLE: Using renamed deprecated functions in Swift\nDESCRIPTION: This snippet shows how Swift warns when using a function that is deprecated and has a recommended replacement. The warning includes both the deprecation notice and the suggested new function name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/deprecated-declaration.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@available(iOS, deprecated: 10.0, renamed: \"newFunction\")\nfunc oldFunction() {\n  // This function is deprecated and should not be used.\n}\n\noldFunction() // 'oldFunction()' is deprecated: renamed to 'newFunction'\n```\n\n----------------------------------------\n\nTITLE: String Encoding and Length Methods\nDESCRIPTION: Methods for determining string length and handling string encoding operations including maximum bytes, length calculation, and various encoding transforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_26\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSUInteger)maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc;\n- (NSUInteger)lengthOfBytesUsingEncoding:(NSStringEncoding)enc;\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Modules Build Function\nDESCRIPTION: Defines a CMake function that builds Swift compiler modules into a static library. Handles various build configurations, platform-specific settings, and compiler options including C++ interoperability, debug/release modes, and SDK configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_swift_compiler_modules_library name)\n  cmake_parse_arguments(ALS\n                        \"\"\n                        \"BOOTSTRAPPING;SWIFT_EXEC\"\n                        \"DEPENDS\"\n                        ${ARGN})\n\n  set(swift_compile_options\n      \"-color-diagnostics\"\n      \"-Xfrontend\" \"-validate-tbd-against-ir=none\"\n      \"${cxx_interop_flag}\"\n      \"-Xfrontend\" \"-disable-target-os-checking\"\n      \"-Xcc\" \"-std=c++17\"\n      \"-Xcc\" \"-DCOMPILED_WITH_SWIFT\" \"-Xcc\" \"-DSWIFT_TARGET\"\n      \"-Xcc\" \"-UIBOutlet\" \"-Xcc\" \"-UIBAction\" \"-Xcc\" \"-UIBInspectable\")\n\n  # Prior to 5.9, we have to use the experimental flag for C++ interop.\n  if (CMAKE_Swift_COMPILER_VERSION VERSION_LESS 5.9)\n    list(APPEND swift_compile_options \"-Xfrontend\" \"-enable-experimental-cxx-interop\")\n  else()\n    list(APPEND swift_compile_options \"-cxx-interoperability-mode=default\")\n  endif()\n\n  if (NOT BOOTSTRAPPING_MODE STREQUAL \"HOSTTOOLS\")\n    if(SWIFT_MIN_RUNTIME_VERSION)\n      list(APPEND swift_compile_options\n        \"-Xfrontend\" \"-min-runtime-version\"\n        \"-Xfrontend\" \"${SWIFT_MIN_RUNTIME_VERSION}\")\n    endif()\n    list(APPEND swift_compile_options \"-Xfrontend\" \"-disable-implicit-string-processing-module-import\")\n\n    list(APPEND swift_compile_options \"-Xfrontend\" \"-cxx-interop-use-opaque-pointer-for-moveonly\")\n  endif()\n\n  if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    list(APPEND swift_compile_options \"-g\")\n  else()\n    list(APPEND swift_compile_options \"-O\" \"-cross-module-optimization\")\n  endif()\n\n  if(LLVM_ENABLE_ASSERTIONS)\n    list(APPEND swift_compile_options \"-Xcc\" \"-UNDEBUG\")\n  else()\n    list(APPEND swift_compile_options \"-Xcc\" \"-DNDEBUG\")\n  endif()\n\n  if(\"${BRIDGING_MODE}\" STREQUAL \"PURE\")\n    list(APPEND swift_compile_options \"-Xcc\" \"-DPURE_BRIDGING_MODE\")\n  endif()\n\n  if(NOT SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT)\n    list(APPEND swift_compile_options \"-Xfrontend\" \"-disable-legacy-type-info\")\n  endif()\n\n  get_bootstrapping_path(build_dir ${CMAKE_CURRENT_BINARY_DIR} \"${ALS_BOOTSTRAPPING}\")\n\n  # [Rest of the function implementation...]\n\n```\n\n----------------------------------------\n\nTITLE: Indicating Ownership SSA SIL Attribute in Swift (BNF)\nDESCRIPTION: Specifies the '[ossa]' attribute for SIL functions, declaring that the function is represented in Ownership SSA form. This enforces additional invariants ensuring precise memory ownership modeling. No dependencies required; provides compiler-level hint. Input is a SIL function, output is a function considered for OSSA passes. Must be respected by any transformation that requires ownership information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_1\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[ossa]'\n```\n\n----------------------------------------\n\nTITLE: Reference to Unowned Conversion in Swift SIL\nDESCRIPTION: Adds @unowned qualifier to a heap object reference type. Has no runtime effect.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_169\n\nLANGUAGE: swift\nCODE:\n```\n%1 = unowned_to_ref %0 : T\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Memory Safety Issue with Addressors in Swift\nDESCRIPTION: This code example illustrates a memory safety problem with addressors. It shows how interleaving arbitrary code between obtaining an address and using it can lead to dangling pointers if the original value is modified.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc operate(value: inout Int, count: Int) { ... }\n\nvar array: [Int] = [1,2,3,4]\noperate(&array[0], { array = []; return 0 }())\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_STDLIB_BUILD_TYPE Cache Variable in CMake\nDESCRIPTION: Defines a CMake cache variable `SWIFT_STDLIB_BUILD_TYPE` of type STRING. This allows specifying a separate build type (Debug, Release, etc.) specifically for the Swift standard library and SDK overlays, potentially different from the main project build type (`CMAKE_BUILD_TYPE`). It defaults to the value of `CMAKE_BUILD_TYPE`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_32\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_STDLIB_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING\n    \"Build type for the Swift standard library and SDK overlays [Debug, RelWithDebInfo, Release, MinSizeRel]\")\n```\n\n----------------------------------------\n\nTITLE: String Extension for Comparable Protocol in Swift\nDESCRIPTION: Implementation of the compared(to:) method for String, extending the proposed Comparable protocol. This would replace the current operator-based comparison with a method that could accept additional parameters for localized comparison options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nextension String {\n  func compared(to: Self) -> SortOrder {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Bisecting Swift Snapshots to Find Regressions\nDESCRIPTION: This command performs a binary search between two Swift toolchain snapshots to find where a regression was introduced. It downloads toolchains to a specified workspace directory and runs a test script against each version until it identifies the first failing snapshot.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/swift_snapshot_tool/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nxcrun swift run swift_snapshot_tool bisect --script $SCRIPT_NAME --workspace $DIR_TO_DOWNLOAD_TOOLCHAINS \\\n   --good-tag $OLDER_TAG_NAME_THAT_PASSES --bad-tag $NEWER_TAG_NAME_THAT_FAILS\n```\n\n----------------------------------------\n\nTITLE: Type Conversion Syntax Versus Method Usage in Swift - Swift\nDESCRIPTION: This snippet contrasts the preferred Swift initializer-based syntax for type conversions with the discouraged method-based alternative. It exemplifies how the initial value source should be the first argument, aligning with Swift's API clarity goals. The code is self-contained and requires no dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet s0 = String(anInt)            // yes\nlet s1 = String(anInt, radix: 2)  // yes\nlet s1 = anInt.toString()         // no\n\n```\n\n----------------------------------------\n\nTITLE: Generating Object Code (Shell)\nDESCRIPTION: Compiles a Swift file (`tmp.swift`) into an object file (`tmp.o`) using the `swiftc` compiler with the `-emit-object` flag.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\n# Emit object code\nswiftc tmp.swift -emit-object -o tmp.o\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Access Utilities in Swift for SIL\nDESCRIPTION: Provides a set of utilities (`Access Utils`) for analyzing memory accesses in SIL. Key concepts defined include `AccessBase` (the base address), `AccessPath` (an `AccessBase` combined with a `SmallProjectionPath`), and the access storage path (a `ProjectedValue` identifying the originating reference). These utilities use the Walk utils and relate to C++ `AccessPath` and similar utilities. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\nAccessBase\nAccessPath\n```\n\n----------------------------------------\n\nTITLE: Structuring JSON Message Format for Swift Compiler Output\nDESCRIPTION: Defines the general structure of JSON messages output by the Swift compiler driver. Each message includes a length header, followed by a JSON object with keys for kind, name, and other relevant information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DriverParseableOutput.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n<Message Length>\\n\\n{\\n  \"kind\": \"<Message Kind>\",\\n  \"name\": \"<Message Name>\",\\n  \"<key>\": \"<value>\",\\n  ...\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Converting Unmanaged to Strong with strong_copy_unmanaged_value in SIL\nDESCRIPTION: Performs a conversion from @sil_unmanaged to strong ownership, returning a strong @owned value. Has the same semantics as copy_value but operates on a trivial @sil_unmanaged type that doesn't require ref counting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_111\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'strong_copy_unmanaged_value' sil-value\n\n%1 = strong_copy_unmanaged_value %0 : $@sil_unmanaged A\n// %1 will be a strong @owned $A.\n```\n\n----------------------------------------\n\nTITLE: Defining copy_block_without_escaping Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for copy_block_without_escaping which copies an Objective-C block while consuming a closure sentinel to ensure the block doesn't escape its expected lifetime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_79\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction :: 'copy_block_without_escaping' sil-operand 'withoutEscaping' sil-operand\n\n%1 = copy_block %0 : $@convention(block) T -> U withoutEscaping %1 : $T -> U\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Points that Change When Lowercased\nDESCRIPTION: Comprehensive listing of Unicode code points that transform when converted to lowercase. Each entry represents either a single code point or a range in hexadecimal format, followed by the property 'Changes_When_Lowercased'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_13\n\nLANGUAGE: unicode-data\nCODE:\n```\n0041..005A    ; Changes_When_Lowercased\n00C0..00D6    ; Changes_When_Lowercased\n00D8..00DE    ; Changes_When_Lowercased\n0100          ; Changes_When_Lowercased\n0102          ; Changes_When_Lowercased\n[...additional entries...]\n0500          ; Changes_When_Lowercased\n0502          ; Changes_When_Lowercased\n```\n\n----------------------------------------\n\nTITLE: Defining FooStruct2 and Related Typedefs\nDESCRIPTION: Creates a struct FooStruct2 with Int32 and Double properties, initializers, and typealiases FooStructTypedef1 and FooStructTypedef2.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nstruct FooStruct2 {\n  var x: Int32\n  var y: Double\n  init()\n  init(x: Int32, y: Double)\n}\ntypealias FooStructTypedef1 = FooStruct2\nstruct FooStructTypedef2 {\n  var x: Int32\n  var y: Double\n  init()\n  init(x: Int32, y: Double)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Breakpoint in SILFunction Constructor (LLDB)\nDESCRIPTION: Sets an LLDB breakpoint in the `SILFunction` constructor (`SILFunction.cpp`, line 91) that only triggers if the function being constructed has the specific mangled name `_TFC3nix1Xd`. This helps identify where a particular SIL function originates in the compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_12\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br set -c 'hasName(\"_TFC3nix1Xd\")' -f SILFunction.cpp -l 91\n```\n\n----------------------------------------\n\nTITLE: Running Benchmark Script Using Python - Python\nDESCRIPTION: Demonstrates invocation of the generate_harness.py script, which uses the gyb tool for automating benchmark harness generation. Requires Python and gyb to be installed and accessible. This script is run manually to generate necessary files for benchmarking workflows before integration with the Swift build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\nscripts/generate_harness/generate_harness.py\n```\n\n----------------------------------------\n\nTITLE: Documenting Unicode Word Segmentation Rules for Character Sequences\nDESCRIPTION: This snippet contains a comprehensive set of test cases showing Unicode word segmentation boundary rules. Each line represents a test case with Unicode code points and their property categories, showing where word boundaries (÷) occur and where characters connect (×) according to Unicode segmentation algorithms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_11\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 0020 × 0308 ÷ 231A ÷  #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 0020 × 0020 ÷ #  ÷ [0.2] SPACE (WSegSpace) × [3.4] SPACE (WSegSpace) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0020 ÷  #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 0020 × 00AD ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 0020 × 0308 × 00AD ÷  #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 0020 × 0300 ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 0020 × 0308 × 0300 ÷  #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 0020 × 200D ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 0020 × 0308 × 200D ÷  #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 0020 ÷ 0061 × 2060 ÷  #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0061 × 2060 ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0020 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0061 ÷ 003A ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0020 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0061 ÷ 0027 ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0020 ÷ 0061 ÷ 0027 × 2060 ÷ #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0020 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0061 ÷ 002C ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0020 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0031 ÷ 003A ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0020 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0031 ÷ 0027 ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0020 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0031 ÷ 002C ÷ #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0020 ÷ 0031 ÷ 002E × 2060 ÷ #  ÷ [0.2] SPACE (WSegSpace) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] SPACE (WSegSpace) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 00AD ÷ 0001 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0001 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 00AD ÷ 000D ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 00AD × 0308 ÷ 000D ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 00AD ÷ 000A ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 00AD × 0308 ÷ 000A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 00AD ÷ 000B ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]\n÷ 00AD × 0308 ÷ 000B ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]\n÷ 00AD ÷ 3031 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]\n÷ 00AD × 0308 ÷ 3031 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]\n÷ 00AD ÷ 0041 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0041 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n÷ 00AD ÷ 003A ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 00AD × 0308 ÷ 003A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 00AD ÷ 002C ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 00AD × 0308 ÷ 002C ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 00AD ÷ 002E ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 00AD × 0308 ÷ 002E ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 00AD ÷ 0030 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0030 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]\n÷ 00AD ÷ 005F ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]\n÷ 00AD × 0308 ÷ 005F ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]\n÷ 00AD ÷ 1F1E6 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 00AD × 0308 ÷ 1F1E6 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 00AD ÷ 05D0 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n÷ 00AD × 0308 ÷ 05D0 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n÷ 00AD ÷ 0022 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0022 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]\n÷ 00AD ÷ 0027 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0027 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 00AD ÷ 231A ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 00AD × 0308 ÷ 231A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 00AD ÷ 0020 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0020 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 00AD × 00AD ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 00AD × 0308 × 00AD ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 00AD × 0300 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 00AD × 0308 × 0300 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 00AD × 200D ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 00AD × 0308 × 200D ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 00AD ÷ 0061 × 2060 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0061 × 2060 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 00AD ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0061 ÷ 003A ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 00AD ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 00AD × 0308 ÷ 0061 ÷ 0027 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 00AD ÷ 0061 ÷ 0027 × 2060 ÷ #  ÷ [0.2] SOFT HYPHEN (Format_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Indexing Response Structure\nDESCRIPTION: Defines the response format for indexing requests, including file dependencies, content hash, and indexed entities when applicable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{\n    <key.dependencies>: (array) [dependency*] // Array of zero or more dependencies.\n    <key.hash>:     (string)                  // Hash associated with the indexed file.\n    [opt] <key.entities>: (array) [entity*]   // Array of zero or more top-level indexed entities.\n                                              // If the key.hash provided in the request matches the\n                                              // one in the response, this key will not be included in\n                                              // the response.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Improved UnsafePointer Usage with Immutable Values\nDESCRIPTION: Shows how the UnsafePointer approach could be improved by allowing & operator on immutable values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nvoid caller() {\n  let x = 42\n  printInt(&x) // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Option Subset Challenge in ObjC\nDESCRIPTION: ObjC example illustrating the challenge of handling bits that only appear as parts of option subsets when importing to Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_6\n\nLANGUAGE: objc\nCODE:\n```\n// ObjC\ntypedef NS_OPTIONS(unsigned, MyOptions) {\n  Foo = 0x01,\n  Bar = 0x03, // 0x02 | 0x01\n  Bas = 0x05, // 0x04 | 0x01\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Strong Reference Cycle Between Person and Apartment\nDESCRIPTION: This code shows how a strong reference cycle is formed when two instances reference each other. The john and unit4A variables go out of scope but their instances remain in memory because of the reference cycle.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/3.txt#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar john: Person?\nvar unit4A: Apartment?\n\njohn = Person(name: \"John Appleseed\")\nunit4A = Apartment(unit: \"4A\")\n\njohn!.apartment = unit4A\nunit4A!.tenant = john\n\njohn = nil\nunit4A = nil\n```\n\n----------------------------------------\n\nTITLE: Creating Library Symlinks for Swift Build on OpenBSD (Shell)\nDESCRIPTION: Creates symbolic links for essential C/C++ standard libraries (libc++, libc++abi, libc, libm), ICU, and pthreads. This workaround addresses differences between expected library names during the LLVM build and OpenBSD's versioned naming convention. Requires root privileges (`doas`). Version numbers might need updating for different OpenBSD releases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OpenBSD.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ doas ln -s /usr/lib/libc++abi.so.2.1 /usr/lib/libc++abi.so\n$ doas ln -s /usr/lib/libc++.so.4.0 /usr/lib/libc++.so\n$ doas ln -s /usr/lib/libc.so.96.0 /usr/lib/libc.so\n$ doas ln -s /usr/lib/libm.so.10.1 /usr/lib/libm.so\n$ doas ln -s /usr/local/lib/libicuuc.so.18.0 /usr/local/lib/libicuuc.so\n$ doas ln -s /usr/lib/libpthread.so.26.1 /usr/lib/libpthread.so\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a New Git Branch to Fork (sh)\nDESCRIPTION: A sequence of Git commands run in a shell. First, `git checkout -b my-branch` creates a new local branch named `my-branch` (replace with desired name) and switches to it. Second, `git push --set-upstream my-remote my-branch` pushes this new branch to the remote named `my-remote` (previously configured fork) and establishes a tracking relationship. Requires Git and a configured remote fork.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n# Using 'my-branch' as a placeholder name\ngit checkout -b my-branch\ngit push --set-upstream my-remote my-branch\n```\n\n----------------------------------------\n\nTITLE: Building for Raspberry Pi Pico\nDESCRIPTION: Command to build an ELF object file for ARMv6-M with specific ABI requirements for Raspberry Pi Pico.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ swiftc -target armv6m-none-none-eabi -enable-experimental-feature Embedded -wmo \\\n   -Xcc -mfloat-abi=soft -Xcc -fshort-enums \\\n  input1.swift input2.swift ... -c -o output.o\n```\n\n----------------------------------------\n\nTITLE: Setting Up ELF/WASM Object Format Support\nDESCRIPTION: Configures ELF/WASM object format support by creating a swiftrt library with appropriate definitions, include directories, and installation rules. This is used for platforms like Linux that use the ELF object format.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nstring(TOLOWER \"${SwiftCore_OBJECT_FORMAT}x\" SwiftCore_OBJECT_FORMAT)\nif(\"${SwiftCore_OBJECT_FORMAT}\" STREQUAL \"elfx\")\n  add_library(swiftrt OBJECT SwiftRT-ELF-WASM.cpp)\n  target_compile_definitions(swiftrt PRIVATE\n    -DSWIFT_ENABLE_BACKTRACING=$<BOOL:${SwiftCore_ENABLE_BACKTRACING}>)\n  target_include_directories(swiftrt PRIVATE\n    \"${SwiftCore_SWIFTC_SOURCE_DIR}/include\"\n    \"${PROJECT_BINARY_DIR}/include\")\n  target_link_libraries(swiftrt PRIVATE swiftShims)\n  # The driver requires that swiftrt.o is under\n  # `usr/lib/(swift|swift_static)/<platform>/<arch>` regardless of whether the\n  # other files are under the platform and architecture subdirectories:\n  # https://github.com/swiftlang/swift-driver/blob/f66e33575150cc778289b5f573218c7a0c70bab6/Sources/SwiftDriver/Jobs/GenericUnixToolchain%2BLinkerSupport.swift#L186\n  install(FILES $<TARGET_OBJECTS:swiftrt>\n    COMPONENT SwiftCore_runtime\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/swift$<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:_static>/${SwiftCore_PLATFORM_SUBDIR}/${SwiftCore_ARCH_SUBDIR}\"\n    RENAME swiftrt.o)\n\n  install(TARGETS swiftrt\n    EXPORT SwiftCoreTargets\n    COMPONENT SwiftCore_runtime)\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Mutable and Constant Variables in C\nDESCRIPTION: This C header snippet declares two external global variables: `NumAlpacas`, a mutable integer (`int`), and `NumLlamas`, a constant integer (`const int`). These are used to demonstrate how C global variables are imported into Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\nextern int NumAlpacas;\nextern const int NumLlamas;\n```\n\n----------------------------------------\n\nTITLE: Testing with FileCheck Based on Target CPU\nDESCRIPTION: Pattern for writing FileCheck tests that validate different outputs based on the target CPU architecture. This approach allows for CPU-specific validation across multiple architectures in a single test.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Testing.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// RUN: %target-swift-frontend ... | %FileCheck --check-prefix=CHECK --check-prefix=CHECK-%target-cpu %s\n\n// CHECK: common line\n// CHECK-i386:        only for i386\n// CHECK-x86_64:      only for x86_64\n// CHECK-armv7:       only for armv7\n// CHECK-arm64:       only for arm64\n// CHECK-powerpc64:   only for powerpc64\n// CHECK-powerpc64le: only for powerpc64le\n```\n\n----------------------------------------\n\nTITLE: Implementing Class Reference Loading in Objective-C\nDESCRIPTION: Demonstrates the generated implementation code for loading and initializing a Swift stub class reference in Objective-C, including static reference setup and runtime loading.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ObjCInterop.md#2025-04-23_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nstatic Class *SwiftStubClassRef =\n  (uintptr_t *)&_OBJC_CLASS_$_SwiftStubClassRef + 1;\nClass SwiftStubClass = objc_loadClassref(&SwiftStubClassRef);\nobjc_msgSend(SwiftStubClass, @selector(class));\n```\n\n----------------------------------------\n\nTITLE: Printing SIL After Mandatory Passes\nDESCRIPTION: Command to output SIL code after mandatory compiler passes with no optimizations\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -emit-sil -Onone file.swift\n```\n\n----------------------------------------\n\nTITLE: Source File Collection in CMake\nDESCRIPTION: Recursively collects all Swift source files from the RegexBuilder directory and normalizes their paths using CMake path conversion.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RegexBuilder/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GLOB_RECURSE _REGEX_BUILDER_SOURCES\n  \"${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/RegexBuilder/*.swift\")\nset(REGEX_BUILDER_SOURCES)\nforeach(source ${_REGEX_BUILDER_SOURCES})\n  file(TO_CMAKE_PATH \"${source}\" source)\n  list(APPEND REGEX_BUILDER_SOURCES ${source})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Swift RegexBuilder Library Target Configuration\nDESCRIPTION: Defines the Swift RegexBuilder library target with platform-specific dependencies, compile flags, and installation settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RegexBuilder/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftRegexBuilder ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  \"${REGEX_BUILDER_SOURCES}\"\n\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT\n\n  LINK_LIBRARIES ${swift_regex_builder_link_libraries}\n\n  C_COMPILE_FLAGS\n    -DswiftRegexBuilder_EXPORTS\n  SWIFT_COMPILE_FLAGS\n    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n\n  SWIFT_MODULE_DEPENDS _StringProcessing\n  INSTALL_IN_COMPONENT stdlib\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Refactor Tool Build\nDESCRIPTION: CMake configuration that defines the swift-refactor tool build requirements including source files, components and LLVM dependencies. Also specifies private link libraries including swiftDriver, swiftFrontend, swiftIDE and swiftRefactoring.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-refactor/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_tool(swift-refactor\n  swift-refactor.cpp\n  SWIFT_COMPONENT testsuite-tools\n  LLVM_LINK_COMPONENTS support\n)\ntarget_link_libraries(swift-refactor\n                      PRIVATE\n                        swiftDriver\n                        swiftFrontend\n                        swiftIDE\n                        swiftRefactoring)\n```\n\n----------------------------------------\n\nTITLE: Code Completion Testing Example with specific offset\nDESCRIPTION: Demonstrates a concrete example of using sourcekitd-test to get code completion suggestions at a specific character position in a file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n```\n$ sourcekitd-test -req=complete -offset=58 /path/to/file.swift -- /path/to/file.swift\n```\n```\n\n----------------------------------------\n\nTITLE: Global Variable Declaration Syntax in SIL\nDESCRIPTION: Syntax for declaring global variables in SIL, including optional static initializers. Global variable access is performed by specific SIL instructions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_42\n\nLANGUAGE: sil\nCODE:\n```\ndecl ::= sil-global-variable\nstatic-initializer ::= '=' '{' sil-instruction-def* '}'\nsil-global-variable ::= 'sil_global' sil-linkage identifier ':' sil-type\n                           (static-initializer)?\n```\n\n----------------------------------------\n\nTITLE: LSTM Cell Implementation in Swift\nDESCRIPTION: Implementation of a Long Short-Term Memory (LSTM) cell for recurrent neural networks with TensorFlow integration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_65\n\nLANGUAGE: swift\nCODE:\n```\nstruct LSTMCell<Scalar: TensorFlowFloatingPoint>: RNNCell, @memberwise Differentiable {\n    var fusedWeight: Tensor<Scalar>\n    var fusedBias: Tensor<Scalar>\n\n    @noDerivative var stateShape: TensorShape { [1, fusedWeight.shape[1] / 4] }\n\n    var zeroState: State {\n        State(cell: Tensor(zeros: stateShape), hidden: Tensor(zeros: stateShape))\n    }\n\n    typealias TimeStepInput = Tensor<Scalar>\n    typealias TimeStepOutput = State\n    typealias Input = RNNCellInput<TimeStepInput, State>\n    typealias Output = RNNCellOutput<TimeStepOutput, State>\n\n    struct State: @memberwise Differentiable {\n        var cell: Tensor<Scalar>\n        var hidden: Tensor<Scalar>\n    }\n\n    @differentiable\n    func callAsFunction(_ input: Input) -> Output {\n        let gateInput = input.input.concatenated(with: input.state.hidden, alongAxis: 1)\n        let fused = matmul(gateInput, fusedWeight) + fusedBias\n        let (batchSize, hiddenSize) = (fused.shape[0], fused.shape[1] / 4)\n        let fusedParts = fused.split(count: 4, alongAxis: 1)\n        let (inputGate, updateGate, forgetGate, outputGate) = (\n            sigmoid(fusedParts[0]),\n            tanh(fusedParts[1]),\n            sigmoid(fusedParts[2]),\n            sigmoid(fusedParts[3])\n        )\n        let newCellState = input.state.cell * forgetGate + inputGate * updateGate\n        let newHiddenState = tanh(newCellState) * outputGate\n        let newState = State(cell: newCellState, hidden: newHiddenState)\n        return Output(output: newState, state: newState)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Quantiles in Swift Benchmark Results\nDESCRIPTION: Shows how to generate benchmark results with different quantile reporting options. Tests the five-number summary and ventile reporting formats for better distribution analysis.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O 0 --quantile=4 | %FileCheck %s --check-prefix FIVENUMSUMMARY\nFIVENUMSUMMARY: #,TEST,SAMPLES,MIN(μs),Q1(μs),Q2(μs),Q3(μs),MAX(μs)\nRUN: %Benchmark_O 0 --quantile=20 | %FileCheck %s --check-prefix VENTILES\nVENTILES: #,TEST,SAMPLES,MIN(μs),V1(μs),V2(μs),V3(μs),V4(μs),V5(μs),V6(μs),\nVENTILES: V7(μs),V8(μs),V9(μs),VA(μs),VB(μs),VC(μs),VD(μs),VE(μs),VF(μs),VG(μs),\nVENTILES: VH(μs),VI(μs),VJ(μs),MAX(μs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Core Library Sources and Flags\nDESCRIPTION: Sets up source files, compiler flags, and link libraries for the Swift Core library build. Includes conditional logic for different build environments and platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT BOOTSTRAPPING_MODE STREQUAL \"OFF\" AND NOT SWIFT_FREESTANDING_FLAVOR AND NOT SWIFT_HOST_VARIANT_SDK STREQUAL \"LINUX\" AND NOT SWIFT_HOST_VARIANT_SDK STREQUAL \"ANDROID\")\n  list(APPEND SWIFTLIB_SOURCES ObjectIdentifier+DebugDescription.swift)\nendif()\n\nlist(APPEND SWIFTLIB_EMBEDDED_SOURCES\n  EmbeddedRuntime.swift\n  EmbeddedStubs.swift\n  EmbeddedPrint.swift\n  )\n\nset(GROUP_INFO_JSON_FILE ${CMAKE_CURRENT_SOURCE_DIR}/GroupInfo.json)\nset(swift_core_link_flags \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\")\nset(swift_core_framework_depends)\nset(swift_core_private_link_libraries)\nset(swift_stdlib_compile_flags \"${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Type Aliases and Macro Constants\nDESCRIPTION: Creates a typedef alias for Int32 and numerous constants that are likely imported from C macros with different integer types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_20\n\nLANGUAGE: Swift\nCODE:\n```\ntypealias typedef_int_t = Int32\nvar FOO_MACRO_1: Int32 { get }\nvar FOO_MACRO_2: Int32 { get }\nvar FOO_MACRO_3: Int32 { get }\nvar FOO_MACRO_4: UInt32 { get }\nvar FOO_MACRO_5: UInt64 { get }\nvar FOO_MACRO_6: typedef_int_t { get }\nvar FOO_MACRO_7: typedef_int_t { get }\nvar FOO_MACRO_8: Int8 { get }\nvar FOO_MACRO_9: Int32 { get }\nvar FOO_MACRO_10: Int16 { get }\nvar FOO_MACRO_11: Int { get }\nvar FOO_MACRO_OR: Int32 { get }\nvar FOO_MACRO_AND: Int32 { get }\nvar FOO_MACRO_BITWIDTH: UInt64 { get }\nvar FOO_MACRO_SIGNED: Int32 { get }\nvar FOO_MACRO_REDEF_1: Int32 { get }\nvar FOO_MACRO_REDEF_2: Int32 { get }\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Syntax Integration Function in CMake\nDESCRIPTION: Defines a function 'includeSwiftSyntax' that sets up the build environment for swift-syntax, including compiler targets, output directories, and FetchContent configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/CompilerSwiftSyntax/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(includeSwiftSyntax)\n  set(CMAKE_SYSTEM_PROCESSOR ${SWIFT_HOST_VARIANT_ARCH})\n  set(CMAKE_OSX_ARCHITECTURES ${SWIFT_HOST_VARIANT_ARCH})\n  set(CMAKE_C_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})\n  set(CMAKE_CXX_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})\n  set(CMAKE_Swift_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})\n  set(BUILD_SHARED_LIBS ON)\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${SWIFT_HOST_LIBRARIES_DEST_DIR}/compiler\")\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${SWIFT_HOST_LIBRARIES_DEST_DIR}/compiler\")\n  if(SWIFT_HOST_VARIANT_SDK MATCHES \"LINUX|ANDROID|OPENBSD|FREEBSD\")\n    set(SWIFT_HOST_LIBRARIES_RPATH \"$ORIGIN;$ORIGIN/../../${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}\")\n  endif()\n\n  set(SWIFT_MODULE_ABI_NAME_PREFIX \"_Compiler\")\n  set(SWIFTSYNTAX_TARGET_NAMESPACE \"_Compiler\")\n  set(SWIFTSYNTAX_EMIT_MODULE OFF)\n\n  file(TO_CMAKE_PATH \"${SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE}\" swift_syntax_path)\n  FetchContent_Declare(CompilerSwiftSyntax SOURCE_DIR \"${swift_syntax_path}\")\n  FetchContent_MakeAvailable(CompilerSwiftSyntax)\n\n  FetchContent_GetProperties(CompilerSwiftSyntax BINARY_DIR binary_dir)\n  set_property(DIRECTORY \"${binary_dir}\" PROPERTY EXCLUDE_FROM_ALL TRUE)\nendfunction()\nincludeSwiftSyntax()\n```\n\n----------------------------------------\n\nTITLE: Swift Example - Integer Move Only Operation\nDESCRIPTION: Shows how move-only semantics are applied to a trivial integer type operation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nfunc doSomethingWithInt(@_noImplicitCopy _ x: Int) -> Int {\n  x + x\n}\n```\n\n----------------------------------------\n\nTITLE: Defining builtin Instruction in SIL\nDESCRIPTION: Specifies the syntax and format for the 'builtin' instruction which invokes functionality built into the backend code generator. It allows accessing LLVM-level instructions and intrinsics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_102\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'builtin' string-literal\n                      sil-apply-substitution-list?\n                      '(' (sil-operand (',' sil-operand)*)? ')'\n                      ':' sil-type\n\n%1 = builtin \"foo\"(%1 : $T, %2 : $U) : $V\n// \"foo\" must name a function in the Builtin module\n```\n\n----------------------------------------\n\nTITLE: Destructuring Tuples in SIL\nDESCRIPTION: The destructure_tuple instruction splits a tuple value into its constituent elements. It takes a tuple operand and produces multiple results corresponding to the tuple's elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_127\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'destructure_tuple' sil-operand\n\n(%elt1, ..., %eltn) = destructure_tuple %0 : $(Elt1Ty, ..., EltNTy)\n// %0 must be a tuple of type $(Elt1Ty, ..., EltNTy)\n// %eltN must have the type $EltNTy\n```\n\n----------------------------------------\n\nTITLE: Declaring Pack Type in SIL\nDESCRIPTION: Syntax for declaring a pack type in SIL. Pack types are used to represent variadic generics and are written using the Pack { ... } syntax.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_9\n\nLANGUAGE: SIL\nCODE:\n```\n%0 : $Pack{Int, Float}\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building LLVM for Android\nDESCRIPTION: CMake command to configure LLVM for building the Swift SDK for Android. It sets up the build environment with the correct toolchain and build options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AndroidBuild.md#2025-04-23_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\nmd S:\\b\\a\\llvm\ncd S:\\b\\a\\llvm\ncmake -C S:\\swift-build\\cmake\\caches\\android-armv7.cmake                                                        ^\n  -G Ninja                                                                                                      ^\n  -DCMAKE_BUILD_TYPE=Release                                                                                    ^\n  -DCMAKE_TOOLCHAIN_FILE=S:\\swift-build\\cmake\\toolchains\\android.toolchain.cmake                                ^\n  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr ^\n  -DLLVM_HOST_TRIPLE=armv7-unknown-linux-androideabi                                                            ^\n  S:/llvm\n```\n\n----------------------------------------\n\nTITLE: Using Hypothetical `NS_ERROR_RESULT` with Non-Zero Sentinel in Objective-C\nDESCRIPTION: This Objective-C code illustrates another use case for the *hypothetical* `NS_ERROR_RESULT` attribute, specifying that a return value of `AVKeyValueStatusFailed` (which is not zero) signifies an error for the `statusOfValueForKey:error:` method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_14\n\nLANGUAGE: objective-c\nCODE:\n```\n```objc\n- (AVKeyValueStatus)statusOfValueForKey:(NSString *)key\n                                  error:(NSError **)\n    NS_ERROR_RESULT(AVKeyValueStatusFailed);\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Host Configuration Variables\nDESCRIPTION: Configures Swift host-specific variables including triple, module triple, and library destination directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_75\n\nLANGUAGE: cmake\nCODE:\n```\nswift_get_host_triple(SWIFT_HOST_TRIPLE)\nset(SWIFT_HOST_MODULE_TRIPLE \"${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_ARCH_${SWIFT_HOST_VARIANT_ARCH}_MODULE}\")\nset(SWIFT_HOST_LIBRARIES_DEST_DIR \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/swift/host\")\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building the Swift Toolchain Using CMake and Ninja - Batchfile\nDESCRIPTION: This batch script configures the Swift toolchain build using CMake with numerous Windows/MSVC/Ninja options and then invokes the build with Ninja. The build is set up in S:\\b\\1 and incorporates precloned repositories as external source dirs. The script specifies build type, install prefix, compilers, linker flags, and feature toggles. It requires all prior dependencies, paths, and modulemaps to have been setup. Output is a fully built toolchain placed in the specified prefix.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_5\n\nLANGUAGE: Batchfile\nCODE:\n```\ncmake -B \"S:\\\\b\\\\1\" ^\\n  -C S:\\\\swift\\\\cmake\\\\caches\\\\Windows-x86_64.cmake ^\\n  -D CMAKE_BUILD_TYPE=Release ^\\n  -D CMAKE_INSTALL_PREFIX=C:\\\\Library\\\\Developer\\\\Toolchains\\\\unknown-Asserts-development.xctoolchain\\\\usr ^\\n  -D CMAKE_C_COMPILER=cl ^\\n  -D CMAKE_C_FLAGS=\"/GS- /Oy /Gw /Gy\" ^\\n  -D CMAKE_CXX_COMPILER=cl ^\\n  -D CMAKE_CXX_FLAGS=\"/GS- /Oy /Gw /Gy\" ^\\n  -D CMAKE_EXE_LINKER_FLAGS=\"/INCREMENTAL:NO\" ^\\n  -D CMAKE_MT=mt ^\\n  -D CMAKE_SHARED_LINKER_FLAGS=\"/INCREMENTAL:NO\" ^  \\n  -D LLVM_DEFAULT_TARGET_TRIPLE=x86_64-unknown-windows-msvc ^\\n  -D LLVM_ENABLE_PDB=YES ^\\n  -D LLVM_EXTERNAL_CMARK_SOURCE_DIR=S:\\\\cmark ^\\n  -D LLVM_EXTERNAL_SWIFT_SOURCE_DIR=S:\\\\swift ^\\n  -D SWIFT_PATH_TO_LIBDISPATCH_SOURCE=S:\\\\swift-corelibs-libdispatch ^\\n  -G Ninja ^\\n  -S S:\\\\llvm-project\\\\llvm\\n\\nninja -C S:\\\\b\\\\1\n```\n\n----------------------------------------\n\nTITLE: Executing Index Request with sourcekitd-test CLI Tool\nDESCRIPTION: Command-line syntax for using sourcekitd-test to index a Swift file. This command performs source code indexing to gather symbol information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ sourcekitd-test -req=index <file> [-- <compiler args>]\n```\n\n----------------------------------------\n\nTITLE: Enabling Swift Compiler Trace Events and Inspecting Output (Shell)\nDESCRIPTION: Shows how to compile a Swift file (`test.swift`) using `swiftc` with the `-stats-output-dir` and `-trace-stats-events` flags to generate detailed performance trace files in CSV format. It then lists the contents of the output directory (`/tmp/stats`) and displays the first few lines of the generated trace file using `head`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir /tmp/stats\n$ swiftc -c test.swift -stats-output-dir /tmp/stats -trace-stats-events\n$ ls /tmp/stats\nstats-1518219460129565-swift-frontend-test-test.swift-x86_64_apple_macosx10.13-o-Onone-1576107381.json\ntrace-1518219460129597-swift-frontend-test-test.swift-x86_64_apple_macosx10.13-o-Onone-1471252712.csv\n$ head /tmp/stats/trace-1518219460129597-swift-frontend-test-test.swift-x86_64_apple_macosx10.13-o-Onone-1471252712.csv\nTime,Live,IsEntry,EventName,CounterName,CounterDelta,CounterValue,EntityName,EntityRange\n40032,0,\"entry\",\"typecheck-decl\",\"Sema.NumDeclsDeserialized\",91,91,\"foo\",\"[test.swift:1:1 - line:1:32]\"\n40032,0,\"entry\",\"typecheck-decl\",\"Sema.NumLazyGenericEnvironments\",40,40,\"foo\",\"[test.swift:1:1 - line:1:32]\"\n40032,0,\"entry\",\"typecheck-decl\",\"Sema.NumLazyIterableDeclContexts\",40,40,\"foo\",\"[test.swift:1:1 - line:1:32]\"\n40032,0,\"entry\",\"typecheck-decl\",\"Sema.NumTypesDeserialized\",106,106,\"foo\",\"[test.swift:1:1 - line:1:32]\"\n40032,0,\"entry\",\"typecheck-decl\",\"Sema.NumUnloadedLazyIterableDeclContexts\",40,40,\"foo\",\"[test.swift:1:1 - line:1:32]\"\n40135,0,\"entry\",\"typecheck-decl\",\"Sema.InterfaceTypeRequest\",1,1,\"\",\"[test.swift:1:13 - line:1:29]\"\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Instruction Delta per Optimization Stage in Swift Counters DB\nDESCRIPTION: This SQL query calculates the total net change (delta) in the number of instructions for each optimization pipeline stage (`Stage`). It sums the `Delta` column for module-level instruction counters (`C.counter = 'inst'`, `C.kind = 'module'`) from the `Counters` table, grouping the results by stage name and ordering them by the net delta value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nselect sum(Delta), Stage\nfrom Counters C where C.counter = 'inst' and C.kind = 'module'\ngroup by Stage\norder by sum(C.Delta);\n```\n\n----------------------------------------\n\nTITLE: Substring Filtering in Swift Benchmark_O\nDESCRIPTION: Tests the use of prefix operators (+ and -) for substring-based filtering of benchmarks. Demonstrates how to include or exclude benchmarks based on partial name matching.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O --list -.A +Angry -Small AngryPhonebook.ASCII2.Small \\\nRUN:             | %FileCheck %s --check-prefix FILTERS\nFILTERS: AngryPhonebook.ASCII2.Small\nFILTERS-NOT: AngryPhonebook.Armenian\nFILTERS-NOT: AngryPhonebook.Cyrillic.Small\nFILTERS: AngryPhonebook.Cyrillic\nFILTERS: AngryPhonebook.Strasse\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Standard Metadata Objects\nDESCRIPTION: Symbol listings for standard metadata objects for Builtin types and value witness tables in the Swift runtime. These metadata objects represent the runtime implementation of Swift's built-in types and can be reused for types with similar layout characteristics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n000000000004faa8 S __TMBB\n000000000004fab8 S __TMBO\n000000000004f9f8 S __TMBb\n000000000004f9c8 S __TMBi128_\n000000000004f998 S __TMBi16_\n000000000004f9d8 S __TMBi256_\n000000000004f9a8 S __TMBi32_\n000000000004f9b8 S __TMBi64_\n000000000004f988 S __TMBi8_\n000000000004f9e8 S __TMBo\n000000000004fac8 S __TMT_\n000000000004f568 S __TWVBO\n000000000004f4b0 S __TWVBb\n000000000004f0a8 S __TWVBi128_\n000000000004eec8 S __TWVBi16_\n000000000004f148 S __TWVBi256_\n000000000004ef68 S __TWVBi32_\n000000000004f008 S __TWVBi64_\n000000000004ee28 S __TWVBi8_\n000000000004f1e8 S __TWVBo\n000000000004f778 S __TWVFT_T_\n000000000004f3f8 S __TWVMBo\n000000000004f8e8 S __TWVT_\n000000000004f830 S __TWVXfT_T_\n000000000004f620 S __TWVXoBO\n000000000004f2a0 S __TWVXoBo\n000000000004f6d8 S __TWVXwGSqBO_\n000000000004f358 S __TWVXwGSqBo_\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Differentiation Unit Test Library Target\nDESCRIPTION: CMake configuration that adds a Swift library target for differentiation unit tests. Specifies GYB source files, module dependencies, installation components, and Darwin-specific settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/DifferentiationUnittest/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftDifferentiationUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  # This file should be listed first. Module name is inferred from the filename.\n  GYB_SOURCES DifferentiationUnittest.swift.gyb\n\n  SWIFT_MODULE_DEPENDS _Differentiation StdlibUnittest\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Benchmark OS Libraries Option\nDESCRIPTION: Configures CMake option for runtime linking against system Swift libraries. Default value is set to FALSE.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_BENCHMARK_USE_OS_LIBRARIES\n  \"Runtime link against the Swift libraries on the target (/usr/lib/swift).\"\n  FALSE)\n```\n\n----------------------------------------\n\nTITLE: SIL Dead End Block Implementation Example\nDESCRIPTION: Demonstrates legal SIL code showing how values can be leaked in dead end blocks but must be consumed in live blocks. The example includes multiple code paths showing proper value handling in both program terminating and live blocks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nsil @user : $@convention(thin) (@owned Klass) -> @owned Klass {\nbb0(%0 : @owned $Klass):\n  cond_br ..., bb1, bb2\n\nbb1:\n  // This is a dead end block since it is post-dominated by two dead end\n  // blocks. It is not a program terminating block though since the program\n  // does not end in this block.\n  cond_br ..., bbDeadEndBlock1, bbDeadEndBlock2\n\nbbDeadEndBlock1:\n  // This is a dead end block and a program terminating block.\n  //\n  // We are exiting the program here causing the operating system to clean up\n  // all resources associated with our process, so there is no need for a\n  // destroy_value. That memory will be cleaned up anyways.\n  unreachable\n\nbbDeadEndBlock2:\n  // This is a dead end block and a program terminating block.\n  //\n  // Even though we do not need to insert destroy_value along these paths, we\n  // can if we want to. It is just necessary and the optimizer can eliminate\n  // such a destroy_value if it wishes.\n  //\n  // NOTE: The author arbitrarily chose just to destroy %0: we could legally\n  // destroy either value (or both!).\n  destroy_value %0 : $Klass\n  unreachable\n\nbb2:\n  cond_br ..., bb3, bb4\n\nbb3:\n  // This block is live, so we need to ensure that %0 is consumed within the\n  // block. In this case, %0 is consumed by returning %0 to our caller.\n  return %0 : $Klass\n\nbb4:\n  // This block is also live, but since we do not return %0, we must insert a\n  // destroy_value to cleanup %0.\n  //\n  // NOTE: The copy_value/destroy_value here is redundant and can be removed by\n  // the optimizer. The author left it in for illustrative purposes.\n  %1 = copy_value %0 : $Klass\n  destroy_value %0 : $Klass\n  return %1 : $Klass\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Unavailable and Deprecated Swift Functions\nDESCRIPTION: Defines a class with methods that have various availability attributes, including unavailable, deprecated, and version-specific availability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_27\n\nLANGUAGE: Swift\nCODE:\n```\n@available(*, unavailable, message: \"use 'nil' instead of this imported macro\")\nvar FOO_NIL: ()\nclass FooUnavailableMembers : FooClassBase {\n  convenience init!(int i: Int32)\n  @available(*, unavailable, message: \"use object construction 'FooUnavailableMembers(int:)'\")\n  class func withInt(_ i: Int32) -> Self!\n  @available(*, unavailable, message: \"x\")\n  func unavailable()\n  @available(*, unavailable, message: \"Not available in Swift\")\n  func swiftUnavailable()\n  @available(*, deprecated, message: \"x\")\n  func deprecated()\n  @available(OSX 10.1, *)\n  func availabilityIntroduced()\n  @available(OSX, unavailable, deprecated: 10.1, message: \"APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift\")\n  func availabilityDeprecated()\n  @available(OSX, obsoleted: 10.1)\n  func availabilityObsoleted()\n  @available(OSX, unavailable)\n  func availabilityUnavailable()\n  @available(OSX, introduced: 10.1, message: \"x\")\n  func availabilityIntroducedMsg()\n  @available(OSX, unavailable, deprecated: 10.1, message: \"x\")\n  func availabilityDeprecatedMsg()\n  @available(OSX, obsoleted: 10.1, message: \"x\")\n  func availabilityObsoletedMsg()\n  @available(OSX, unavailable, message: \"x\")\n  func availabilityUnavailableMsg()\n  init!()\n  convenience init!(float f: Float)\n}\n```\n\n----------------------------------------\n\nTITLE: C Macro Mapping to Swift\nDESCRIPTION: This snippet demonstrates how C macros that define constants are imported as readonly variables in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_31\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\n#define BUFFER_SIZE 4096\n#define SERVER_VERSION \"3.14\"\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift.\n\nvar BUFFER_SIZE: CInt { get }\nvar SERVER_VERSION: String { get }\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Standard Library Build Options in CMake\nDESCRIPTION: Configures options for generating SIB targets and symbol graphs for the Swift standard library. Also sets options for Darwin-specific architectures and minimum runtime version.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_39\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_STDLIB_ENABLE_SIB_TARGETS\n       \"Should we generate sib targets for the stdlib or not?\"\n       FALSE)\n\noption(SWIFT_STDLIB_BUILD_SYMBOL_GRAPHS\n       \"Whether to build symbol graphs for the stdlib, for use in documentation.\"\n       FALSE)\n\nset(SWIFT_DARWIN_SUPPORTED_ARCHS \"\" CACHE STRING\n  \"Semicolon-separated list of architectures to configure on Darwin platforms. If left empty all default architectures are configured.\")\n\nset(SWIFT_DARWIN_MODULE_ARCHS \"\" CACHE STRING\n  \"Semicolon-separated list of architectures to configure Swift module-only targets on Darwin platforms. These targets are in addition to the full library targets.\")\n\nset(SWIFT_MIN_RUNTIME_VERSION \"${DEFAULT_SWIFT_MIN_RUNTIME_VERSION}\" CACHE STRING\n  \"Specify the minimum version of the runtime that we target when building the compiler itself. This is used on non-Darwin platforms to ensure that it's possible to build the compiler using host tools.\")\n```\n\n----------------------------------------\n\nTITLE: Projecting Existential Boxes in SIL\nDESCRIPTION: Projects address of value inside boxed existential container.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_158\n\nLANGUAGE: sil\nCODE:\n```\n%1 = project_existential_box $T in %0 : $P\n```\n\n----------------------------------------\n\nTITLE: Value to Bridge Object Conversion in Swift SIL\nDESCRIPTION: Creates a tagged pointer BridgeObject representation by shifting and tagging the input value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_175\n\nLANGUAGE: swift\nCODE:\n```\n%1 = value_to_bridge_object %0 : $T\n```\n\n----------------------------------------\n\nTITLE: Examining Architecture-Specific Symbols in Universal Binaries with nm\nDESCRIPTION: Command to examine symbols from a specific architecture in a multi-architecture (universal) binary on macOS. The output is piped to swift-demangle to make Swift symbol names human-readable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nnm -n -m -arch x86_64 path/to/libcake.dylib | swift demangle\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenBSD-Specific Options for Swift Build in CMake\nDESCRIPTION: Sets an option to enable branch target identification instructions and sign return addresses on OpenBSD when available.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_44\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_OPENBSD_BTCFI\n  \"Emit branch target identification instructions and sign return addresses when available\"\n  FALSE)\nif(SWIFT_OPENBSD_BTCFI)\n  add_definitions(\"-DSWIFT_OPENBSD_BTCFI\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Output Stream and String Extension in Swift\nDESCRIPTION: Defines the TextOutputStream protocol for types that receive streamed text data and extends String to conform by providing an append method. This allows any String instance to serve as an output target for formatted content. No dependencies besides native Swift. The protocol requires an append(_ text: String) method; String implements it. Input: text to append. Output: modifies the String stream. Limitation: Must implement append for custom streams.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprotocol TextOutputStream {\n  func append(_ text: String)\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nextension String : TextOutputStream {\n  func append(_ text: String)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Cross-Compilation\nDESCRIPTION: Handles cross-compilation settings for Android targets, including NDK path validation and architecture configuration. Supports multiple Android architectures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_73\n\nLANGUAGE: cmake\nCODE:\n```\nis_sdk_requested(ANDROID swift_build_android)\nif(swift_build_android AND NOT \"${SWIFT_HOST_VARIANT_SDK}\" STREQUAL \"ANDROID\")\n  if (\"${SWIFT_ANDROID_NDK_PATH}\" STREQUAL \"\")\n    message(FATAL_ERROR \"You must set SWIFT_ANDROID_NDK_PATH to cross-compile the Swift runtime for Android\")\n  endif()\n  if(\"${SWIFT_SDK_ANDROID_ARCHITECTURES}\" STREQUAL \"\")\n    set(SWIFT_SDK_ANDROID_ARCHITECTURES armv7;aarch64)\n  endif()\n  configure_sdk_unix(\"Android\" \"${SWIFT_SDK_ANDROID_ARCHITECTURES}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating COW Behavior with Array Modification in Swift\nDESCRIPTION: This snippet shows how Copy-on-Write (COW) behavior in Swift can lead to unexpected sharing of array buffers during modification, even when the array is copied beforehand.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nvar array = [1,2,3]\nvar oldArray : [Int] = []\n\n// This function copies array before modifying it, but because that\n// copy is of a value undergoing modification, the copy will use\n// the same buffer and therefore observe updates to the element.\nfunc foo(element: inout Int) {\n  oldArray = array\n  element = 4\n}\n\n// Therefore, oldArray[2] will be 4 after this call.\nfoo(&array[2])\n```\n\n----------------------------------------\n\nTITLE: Cloning Swift Repository via SSH (sh)\nDESCRIPTION: Clones the main Swift repository from GitHub using SSH into a directory named `swift`, navigates into it, and then runs the `update-checkout` utility script with the `--clone-with-ssh` flag. This script clones all associated dependency repositories (like llvm-project, swiftpm, etc.) also using SSH. This method is recommended for contributors who have set up SSH keys with GitHub.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:swiftlang/swift.git swift\ncd swift\nutils/update-checkout --clone-with-ssh\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Avoidance of Role Suffixes in Swift Function Names - Swift\nDESCRIPTION: These examples show the discouraged use of role-specific suffixes in Swift method base names, instead of utilizing argument labels or proper parameter positions. The code echoes Swift standard library's preference toward concise naming without duplicated semantic information. No external dependencies are needed; usage context is demonstration of bad naming patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nalligators.insertElement(fred)           // no\nif alligators.containsElement(george) {  // no\n  return\n}\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Variables with Value and Reference Semantics in Swift\nDESCRIPTION: Demonstrates how to declare variables with explicit value and reference semantics using 'val' and 'ref' keywords. Also shows interactions between different types of declarations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar x: Int  // x is stored by value\nval y: Int  // just like \"var y: Int\"\nref z: Int  // z is allocated on the heap.\n\nvar q: SomeClass          // a reference to SomeClass\nref r: SomeClass          // just like \"var r: SomeClass\"\nval s: SomeClonableClass // a unique value of SomeClonableClass type\n\nref z2 = x         // z2 is a copy of x's value on the heap\ny = z              // z2's value is copied into y\n\nref z2 = z         // z and z2 refer to the same Int value\nref z3 = z.clone() // z3 refers to a copy of z's value\n\nval t = r          // Illegal unless SomeClass is Clonable\nref u = s          // s's value is copied into u\nval v = s          // s's value is copied into v\n```\n\n----------------------------------------\n\nTITLE: Deallocating Class Instance in SIL\nDESCRIPTION: Deallocates an uninitialized class instance bypassing reference counting. Requires retain count of one and exact type match.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_20\n\nLANGUAGE: sil\nCODE:\n```\ndealloc_ref %0 : $T\n// $T must be a class type\n```\n\n----------------------------------------\n\nTITLE: Converting C++ Const Reference to UnsafePointer in Swift\nDESCRIPTION: Demonstrates the basic approach of mapping C++ const references to UnsafePointer<T> in Swift, showing both the C++ function and its Swift equivalent.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nvoid printInt(const int &value);\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc printInt(_ value: UnsafePointer<Int>)\n```\n\n----------------------------------------\n\nTITLE: Declaring Functions with Callbacks and Never Return Type in Swift\nDESCRIPTION: Defines functions that accept blocks and function pointers as parameters, as well as functions that never return (marked with Never return type).\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nfunc fooFuncWithBlock(_ blk: (@escaping (Float) -> Int32)!)\nfunc fooFuncWithFunctionPointer(_ fptr: (@escaping @convention(c) (Float) -> Int32)!)\nfunc fooFuncNoreturn1() -> Never\nfunc fooFuncNoreturn2() -> Never\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Code Points with Changes When Casefolded Property\nDESCRIPTION: This snippet provides a comprehensive list of Unicode code points that change when casefolded. Each line represents either a single code point or a range of code points, followed by the property 'Changes_When_Casefolded'. The list includes characters from various Unicode blocks and scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_23\n\nLANGUAGE: Unicode\nCODE:\n```\nA642          ; Changes_When_Casefolded\nA644          ; Changes_When_Casefolded\nA646          ; Changes_When_Casefolded\nA648          ; Changes_When_Casefolded\nA64A          ; Changes_When_Casefolded\nA64C          ; Changes_When_Casefolded\nA64E          ; Changes_When_Casefolded\nA650          ; Changes_When_Casefolded\nA652          ; Changes_When_Casefolded\nA654          ; Changes_When_Casefolded\nA656          ; Changes_When_Casefolded\nA658          ; Changes_When_Casefolded\nA65A          ; Changes_When_Casefolded\nA65C          ; Changes_When_Casefolded\nA65E          ; Changes_When_Casefolded\nA660          ; Changes_When_Casefolded\nA662          ; Changes_When_Casefolded\nA664          ; Changes_When_Casefolded\nA666          ; Changes_When_Casefolded\nA668          ; Changes_When_Casefolded\nA66A          ; Changes_When_Casefolded\nA66C          ; Changes_When_Casefolded\nA680          ; Changes_When_Casefolded\nA682          ; Changes_When_Casefolded\nA684          ; Changes_When_Casefolded\nA686          ; Changes_When_Casefolded\nA688          ; Changes_When_Casefolded\nA68A          ; Changes_When_Casefolded\nA68C          ; Changes_When_Casefolded\nA68E          ; Changes_When_Casefolded\nA690          ; Changes_When_Casefolded\nA692          ; Changes_When_Casefolded\nA694          ; Changes_When_Casefolded\nA696          ; Changes_When_Casefolded\nA698          ; Changes_When_Casefolded\nA69A          ; Changes_When_Casefolded\nA722          ; Changes_When_Casefolded\nA724          ; Changes_When_Casefolded\nA726          ; Changes_When_Casefolded\nA728          ; Changes_When_Casefolded\nA72A          ; Changes_When_Casefolded\nA72C          ; Changes_When_Casefolded\nA72E          ; Changes_When_Casefolded\nA732          ; Changes_When_Casefolded\nA734          ; Changes_When_Casefolded\nA736          ; Changes_When_Casefolded\nA738          ; Changes_When_Casefolded\nA73A          ; Changes_When_Casefolded\nA73C          ; Changes_When_Casefolded\nA73E          ; Changes_When_Casefolded\nA740          ; Changes_When_Casefolded\nA742          ; Changes_When_Casefolded\nA744          ; Changes_When_Casefolded\nA746          ; Changes_When_Casefolded\nA748          ; Changes_When_Casefolded\nA74A          ; Changes_When_Casefolded\nA74C          ; Changes_When_Casefolded\nA74E          ; Changes_When_Casefolded\nA750          ; Changes_When_Casefolded\nA752          ; Changes_When_Casefolded\nA754          ; Changes_When_Casefolded\nA756          ; Changes_When_Casefolded\nA758          ; Changes_When_Casefolded\nA75A          ; Changes_When_Casefolded\nA75C          ; Changes_When_Casefolded\nA75E          ; Changes_When_Casefolded\nA760          ; Changes_When_Casefolded\nA762          ; Changes_When_Casefolded\nA764          ; Changes_When_Casefolded\nA766          ; Changes_When_Casefolded\nA768          ; Changes_When_Casefolded\nA76A          ; Changes_When_Casefolded\nA76C          ; Changes_When_Casefolded\nA76E          ; Changes_When_Casefolded\nA779          ; Changes_When_Casefolded\nA77B          ; Changes_When_Casefolded\nA77D..A77E    ; Changes_When_Casefolded\nA780          ; Changes_When_Casefolded\nA782          ; Changes_When_Casefolded\nA784          ; Changes_When_Casefolded\nA786          ; Changes_When_Casefolded\nA78B          ; Changes_When_Casefolded\nA78D          ; Changes_When_Casefolded\nA790          ; Changes_When_Casefolded\nA792          ; Changes_When_Casefolded\nA796          ; Changes_When_Casefolded\nA798          ; Changes_When_Casefolded\nA79A          ; Changes_When_Casefolded\nA79C          ; Changes_When_Casefolded\nA79E          ; Changes_When_Casefolded\nA7A0          ; Changes_When_Casefolded\nA7A2          ; Changes_When_Casefolded\nA7A4          ; Changes_When_Casefolded\nA7A6          ; Changes_When_Casefolded\nA7A8          ; Changes_When_Casefolded\nA7AA..A7AE    ; Changes_When_Casefolded\nA7B0..A7B4    ; Changes_When_Casefolded\nA7B6          ; Changes_When_Casefolded\nA7B8          ; Changes_When_Casefolded\nA7BA          ; Changes_When_Casefolded\nA7BC          ; Changes_When_Casefolded\nA7BE          ; Changes_When_Casefolded\nA7C0          ; Changes_When_Casefolded\nA7C2          ; Changes_When_Casefolded\nA7C4..A7C7    ; Changes_When_Casefolded\nA7C9          ; Changes_When_Casefolded\nA7CB..A7CC    ; Changes_When_Casefolded\nA7D0          ; Changes_When_Casefolded\nA7D6          ; Changes_When_Casefolded\nA7D8          ; Changes_When_Casefolded\nA7DA          ; Changes_When_Casefolded\nA7DC          ; Changes_When_Casefolded\nA7F5          ; Changes_When_Casefolded\nAB70..ABBF    ; Changes_When_Casefolded\nFB00..FB06    ; Changes_When_Casefolded\nFB13..FB17    ; Changes_When_Casefolded\nFF21..FF3A    ; Changes_When_Casefolded\n10400..10427  ; Changes_When_Casefolded\n104B0..104D3  ; Changes_When_Casefolded\n10570..1057A  ; Changes_When_Casefolded\n1057C..1058A  ; Changes_When_Casefolded\n1058C..10592  ; Changes_When_Casefolded\n10594..10595  ; Changes_When_Casefolded\n10C80..10CB2  ; Changes_When_Casefolded\n10D50..10D65  ; Changes_When_Casefolded\n118A0..118BF  ; Changes_When_Casefolded\n16E40..16E5F  ; Changes_When_Casefolded\n1E900..1E921  ; Changes_When_Casefolded\n```\n\n----------------------------------------\n\nTITLE: Swift Constructor with Complex Parameter Mapping\nDESCRIPTION: Demonstrates a Swift constructor with multiple parameters that maps to Objective-C selector naming conventions for interoperability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\nconstructor withTitle(aTitle : String) date(aDate : NSDate) {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Extension Example in Swift\nDESCRIPTION: Demonstrates an invalid attempt to extend a generic type T, showing limitations of type extensions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_24\n\nLANGUAGE: Swift\nCODE:\n```\nextension<T> T { // error: neither a structural nor a nominal type\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SWIFT_DISABLE_DEAD_STRIPPING Option in CMake\nDESCRIPTION: Defines a CMake build option `SWIFT_DISABLE_DEAD_STRIPPING`. When set to TRUE, this option disables Darwin-specific dead code stripping for Swift host tools during the build process. The default value is FALSE.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_DISABLE_DEAD_STRIPPING\n      \"Turn off Darwin-specific dead stripping for Swift host tools.\" FALSE)\n```\n\n----------------------------------------\n\nTITLE: Word Break Test Cases with Regional Indicator Symbol\nDESCRIPTION: Test cases showing word break behavior when combining REGIONAL INDICATOR SYMBOL LETTER A with various Unicode characters and combining marks. Tests include combinations with control characters, letters, and punctuation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\n÷ 1F1E6 ÷ 0001 ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 1F1E6 × 0308 ÷ 0001 ÷ #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Optimizer Sources\nDESCRIPTION: Defines the collection of Swift source files to be compiled as part of the Optimizer component in the Swift compiler. Includes various dumper utilities for functions, access patterns, alias information, dead-end blocks, escape analysis, memory behavior, range information, and test files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/TestPasses/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nswift_compiler_sources(Optimizer\n  FunctionUsesDumper.swift\n  AccessDumper.swift\n  AliasInfoDumper.swift\n  DeadEndBlockDumper.swift\n  EscapeInfoDumper.swift\n  MemBehaviorDumper.swift\n  SILPrinter.swift\n  RangeDumper.swift\n  RunUnitTests.swift\n  TestInstructionIteration.swift\n)\n```\n\n----------------------------------------\n\nTITLE: Differentiability Witness SIL Generation - Swift\nDESCRIPTION: Example showing how a @differentiable declaration attribute is lowered to SIL differentiability witness, before and after canonicalization by the differentiation transform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// Before: empty differentiability witness, lowered from a `@differentiable`\n// declaration attribute.\n\n// differentiability witness for foo(_:)\nsil_differentiability_witness hidden [parameters 0] [results 0] @$s12diff_witness3fooyS2fF : $@convention(thin) (Float) -> Float {\n}\n\n// After: canonicalized differentiability witness. The differentiation transform\n// fills in JVP/VJP functions.\n\nsil_differentiability_witness hidden [parameters 0] [results 0] @$s3fooAAyS2fF : $@convention(thin) (Float) -> Float {\n  jvp: @AD__$s3fooAAyS2fF__jvp_src_0_wrt_0 : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)\n  vjp: @AD__$s3fooAAyS2fF__vjp_src_0_wrt_0 : $@convention(thin) (Float) -> (Float, @owned @callee_guaranteed (Float) -> Float)\n}\n```\n\n----------------------------------------\n\nTITLE: Protocol Type Definition Example\nDESCRIPTION: Example showing the difference between valid and invalid recursive type definitions in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeMetadata.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ntypealias IntDict = Dictionary<String, Int>\n\ntypealias RecursiveDict = Dictionary<String, RecursiveDict>\n```\n\n----------------------------------------\n\nTITLE: NoDerivative Property Declaration in Swift\nDESCRIPTION: Shows how to use the @noDerivative attribute to explicitly exclude properties from differentiation in a Differentiable type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nstruct Foo<T: Differentiable, U: Differentiable>: @memberwise Differentiable {\n    // `x` and `y` are the \"differentiable variables\".\n    var x: T\n    var y: U\n    @noDerivative var customFlag: Bool\n    @noDerivative let helperVariable: T\n}\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Linking for SwiftCore in CMake\nDESCRIPTION: Links the execinfo library on specific UNIX platforms that are not Android, Apple, Linux, or Windows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ANDROID AND NOT APPLE AND NOT LINUX AND NOT WIN32 AND UNIX)\n  find_library(EXECINFO_LIBRARY execinfo)\n  target_link_libraries(swiftCore PRIVATE \"${EXECINFO_LIBRARY}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Cloning Required Swift and Related Repositories - Batchfile\nDESCRIPTION: This series of git commands clones the main Swift and all required supporting repositories into the build workspace (S: drive), leveraging specific options for line endings and symlink handling where necessary. Each repository is cloned into a named directory. Runs in a command prompt configured for development work, with git installed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_2\n\nLANGUAGE: Batchfile\nCODE:\n```\nS:\\ngit clone https://github.com/swiftlang/llvm-project --branch swift/main llvm-project\\ngit clone -c core.autocrlf=input -c core.symlinks=true https://github.com/swiftlang/swift swift\\ngit clone https://github.com/swiftlang/swift-cmark cmark\\ngit clone https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch\\ngit clone https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation\\ngit clone https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest\\ngit clone https://github.com/swiftlang/swift-tools-support-core swift-tools-support-core\\ngit clone -c core.symlinks=true https://github.com/swiftlang/swift-llbuild swift-llbuild\\ngit clone https://github.com/JPSim/Yams Yams\\ngit clone https://github.com/swiftlang/swift-driver swift-driver\\ngit clone https://github.com/apple/swift-argument-parser swift-argument-parser\\ngit clone -c core.autocrlf=input https://github.com/swiftlang/swift-package-manager swift-package-manager\\ngit clone https://github.com/swiftlang/indexstore-db indexstore-db\n```\n\n----------------------------------------\n\nTITLE: Configuring Debugging Options for Swift Build in CMake\nDESCRIPTION: Sets various debugging options for the Swift build process, including SIL verification, memory management checks, and compilation statistics reporting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_46\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_SIL_VERIFY_ALL\n    \"Run SIL verification after each transform when building Swift files in the build process\"\n    FALSE)\n\noption(SWIFT_SIL_VERIFY_ALL_MACOS_ONLY\n    \"Run SIL verification after each transform when building the macOS stdlib\"\n    FALSE)\n\noption(SWIFT_EMIT_SORTED_SIL_OUTPUT\n    \"Sort SIL output by name to enable diffing of output\"\n    FALSE)\n\nif(SWIFT_STDLIB_ASSERTIONS)\n  set(SWIFT_RUNTIME_CLOBBER_FREED_OBJECTS_default TRUE)\nelse()\n  set(SWIFT_RUNTIME_CLOBBER_FREED_OBJECTS_default FALSE)\nendif()\n\noption(SWIFT_RUNTIME_CLOBBER_FREED_OBJECTS\n    \"Overwrite memory for deallocated Swift objects\"\n    \"${SWIFT_RUNTIME_CLOBBER_FREED_OBJECTS_default}\")\n\noption(SWIFT_STDLIB_SIL_DEBUGGING\n    \"Compile the Swift standard library with -sil-based-debuginfo to enable debugging and profiling on SIL level\"\n    FALSE)\n\noption(SWIFT_CHECK_INCREMENTAL_COMPILATION\n    \"Check if incremental compilation works when compiling the Swift libraries\"\n    FALSE)\n\noption(SWIFT_ENABLE_ARRAY_COW_CHECKS\n    \"Compile the stdlib with Array COW checks enabled (only relevant for assert builds)\"\n    FALSE)\n\noption(SWIFT_REPORT_STATISTICS\n    \"Create json files which contain internal compilation statistics\"\n    FALSE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Musl Platform Library in CMake\nDESCRIPTION: Sets up the swiftMusl target library for static Linux builds using the Musl C library. Includes compile flags and dependencies specific to Musl.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftMusl ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY\n    ${swift_platform_sources}\n    POSIXError.swift\n\n    GYB_SOURCES\n      ${swift_platform_gyb_sources}\n      Musl.swift.gyb\n\n    SWIFT_COMPILE_FLAGS\n      ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\n      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n      ${swift_platform_compile_flags}\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n    TARGET_SDKS LINUX_STATIC\n    INSTALL_IN_COMPONENT sdk-overlay\n    DEPENDS musl_modulemap)\n```\n\n----------------------------------------\n\nTITLE: Code Completion Result Structure\nDESCRIPTION: Details the structure of individual code completion results, including information like description, kind, source text to insert, and documentation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n```\ncompletion-result ::=\n{\n  <key.description>:    (string)    // Text to be displayed in code-completion window.\n  <key.kind>:           (UID)       // UID for the declaration kind (function, class, etc.).\n  <key.sourcetext>:     (string)    // Text to be inserted in source.\n  <key.typename>:       (string)    // Text describing the type of the result.\n  <key.doc.brief>:      (string)    // Brief documentation comment attached to the entity.\n  <key.context>:        (UID)       // Semantic context of the code completion result.\n  <key.num_bytes_to_erase>: (int64) // Number of bytes to the left of the cursor that should be erased before inserting this completion result.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Swift Function\nDESCRIPTION: Example of a generic Swift function swapTwoValues that takes two inout parameters of generic type T.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_56\n\nLANGUAGE: swift\nCODE:\n```\nfunc swapTwoValues<T>(_ a: inout T, _ b: inout T) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Build Options\nDESCRIPTION: Defines user-configurable options that control the inclusion and default build behavior for various Swift components. These options allow customization of which components to build and how to build them.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# User-configurable options that control the inclusion and default build\n# behavior for components which may not strictly be necessary (tools, examples,\n# and tests).\n#\n# This is primarily to support building smaller or faster project files.\n#\n\noption(SWIFT_APPEND_VC_REV\n  \"Embed the version control system revision in Swift\"\n  TRUE)\n\noption(SWIFT_INCLUDE_TOOLS\n    \"Generate build targets for swift tools\"\n    TRUE)\n\noption(SWIFT_BUILD_REMOTE_MIRROR\n    \"Build the Swift Remote Mirror Library\"\n    TRUE)\n\noption(SWIFT_BUILD_DYNAMIC_STDLIB\n    \"Build dynamic variants of the Swift standard library\"\n    TRUE)\n\noption(SWIFT_BUILD_STATIC_STDLIB\n    \"Build static variants of the Swift standard library\"\n    FALSE)\n\noption(SWIFT_STDLIB_STATIC_PRINT\n    \"Build compile-time evaluated vprintf()\"\n    FALSE)\n\noption(SWIFT_STDLIB_ENABLE_UNICODE_DATA\n    \"Include Unicode data files in the standard library.\n    NOTE: Disabling this will cause many String methods to crash.\"\n    TRUE)\n\noption(SWIFT_BUILD_CLANG_OVERLAYS\n  \"Build Swift overlays for the clang builtin modules\"\n  TRUE)\n\n# The SDK overlay is provided by the SDK itself on Darwin platforms.\nif(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)\n  set(SWIFT_BUILD_DYNAMIC_SDK_OVERLAY_default FALSE)\nelse()\n  set(SWIFT_BUILD_DYNAMIC_SDK_OVERLAY_default TRUE)\nendif()\n\noption(SWIFT_BUILD_DYNAMIC_SDK_OVERLAY\n    \"Build dynamic variants of the Swift SDK overlay\"\n    \"${SWIFT_BUILD_DYNAMIC_SDK_OVERLAY_default}\")\n\noption(SWIFT_BUILD_STATIC_SDK_OVERLAY\n    \"Build static variants of the Swift SDK overlay\"\n    FALSE)\n\noption(SWIFT_BUILD_STDLIB_EXTRA_TOOLCHAIN_CONTENT\n    \"If not building stdlib, controls whether to build 'stdlib/toolchain' content\"\n    TRUE)\n\noption(SWIFT_BUILD_STDLIB_CXX_MODULE\n  \"If not building stdlib, controls whether to build the Cxx module\"\n  TRUE)\n```\n\n----------------------------------------\n\nTITLE: Single Underscore Parameter in Swift Initializers\nDESCRIPTION: Example showing that a single underscore parameter is not considered to be applying the leading underscore rule, and thus such initializers remain fully public in the standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AccessControlInStdlib.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\npublic struct Foo {\n  init(\\_ count: Int) {}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MELPA and GNU Repositories in Package.el - Emacs Lisp\nDESCRIPTION: This snippet configures package.el to include MELPA and GNU ELPA repositories in a user's Emacs configuration, allowing the installation of third-party packages. Required dependencies are Emacs and access to both MELPA and GNU package archives. It must be placed in the startup file (e.g., .emacs or init.el) before any package installation commands to ensure repositories are available during Emacs runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/SettingUpLSPEmacs.md#2025-04-23_snippet_0\n\nLANGUAGE: Emacs Lisp\nCODE:\n```\n(require 'package)\n(add-to-list 'package-archives '(\"melpa\" . \"https://melpa.org/packages/\") t)\n(add-to-list 'package-archives '(\"gnu\" . \"http://elpa.gnu.org/packages/\") t)\n(package-initialize)\n\n```\n\n----------------------------------------\n\nTITLE: Commenting X86_64 ABI Additions in Swift\nDESCRIPTION: A comment indicating that the file contains ABI additions specific to the x86_64 architecture for Swift. This likely serves as a header or documentation for x86_64-specific implementation details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Inputs/stability-stdlib-abi-without-asserts-x86_64.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// ABI additions for x86_64 only.\n```\n\n----------------------------------------\n\nTITLE: Defining Private Protocol and NSObject Subclass with Private Methods in Swift\nDESCRIPTION: Declares a private protocol and an NSObject subclass that implements various private methods, class methods, initializers and subscripting functionality. The class includes backward compatibility annotations and renaming directives for Swift 3 migration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n@_exported import Foundation\n\nprotocol __PrivProto {\n}\nclass Foo : NSObject, __PrivProto {\n  var __privValue: Any!\n  class var __privClassValue: Any!\n  func __noArgs()\n  func __oneArg(_ arg: Int32)\n  func __twoArgs(_ arg: Int32, other arg2: Int32)\n  class func __withNoArgs() -> Self!\n  @available(swift, obsoleted: 3, renamed: \"__withNoArgs()\")\n  class func __fooWithNoArgs() -> Self!\n  convenience init!(__oneArg arg: Int32)\n  @available(*, unavailable, renamed: \"init(__oneArg:)\", message: \"Not available in Swift\")\n  class func __fooWithOneArg(_ arg: Int32) -> Self!\n  convenience init!(__twoArgs arg: Int32, other arg2: Int32)\n  @available(*, unavailable, renamed: \"init(__twoArgs:other:)\", message: \"Not available in Swift\")\n  class func __fooWithTwoArgs(_ arg: Int32, other arg2: Int32) -> Self!\n  convenience init!(__ arg: Int32)\n  @available(*, unavailable, renamed: \"init(__:)\", message: \"Not available in Swift\")\n  class func __foo(_ arg: Int32) -> Self!\n  func objectForKeyedSubscript(_ index: Any!) -> Any!\n  func __setObject(_ object: Any!, forKeyedSubscript index: Any!)\n  func __objectAtIndexedSubscript(_ index: Int32) -> Any!\n  func setObject(_ object: Any!, atIndexedSubscript index: Int32)\n  init()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Circular Linked List Node in Swift\nDESCRIPTION: Definition of a Node class that can be used to form circular linked lists. The example shows how class identities can be used as values in generic algorithms like cycle_length.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ValueSemantics.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nclass Node {\n    constructor(Int) { next = this; prev = this }\n\n    // link two circular lists into one big cycle.\n    func join(_ otherNode : Node) -> () { ... }\n\n    var next : WeakRef<Node> // identity of next node\n    var prev : WeakRef<Node> // identity of previous node\n}\n\ncycle_length(someNode, (x: [inout] Node){ x = x.next })\n```\n\n----------------------------------------\n\nTITLE: Generating Static Stdlib Args Link File for ELF Format\nDESCRIPTION: Creates a static-stdlib-args.lnk file for ELF-based platforms (like Linux). This file contains linker arguments needed when using the -static-stdlib option. It either copies an existing file or generates a new one with appropriate linker flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n  # Generate the static-stdlib-args.lnk file used by -static-stdlib option for\n  # 'GenericUnix' (eg linux)\n  if(SWIFT_SDK_${sdk}_OBJECT_FORMAT STREQUAL \"ELF\")\n    set(lib_dir \"${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n    set(static_stdlib_lnk_src \"${SWIFT_SOURCE_DIR}/stdlib/public/Resources/${lib_dir}/static-stdlib-args.lnk\")\n    set(linkfile ${lib_dir}/static-stdlib-args.lnk)\n    if(EXISTS \"${static_stdlib_lnk_src}\")\n      add_custom_command_target(swift_static_stdlib_${sdk}_args\n        COMMAND\n        \"${CMAKE_COMMAND}\" -E copy\n        \"${static_stdlib_lnk_src}\"\n        \"${SWIFTSTATICLIB_DIR}/${linkfile}\"\n        OUTPUT\n        \"${SWIFTSTATICLIB_DIR}/${linkfile}\"\n        DEPENDS\n        \"${static_stdlib_lnk_src}\")\n      list(APPEND static_binary_lnk_file_list ${swift_static_stdlib_${sdk}_args})\n    else()\n      set(libpthread -lpthread)\n      set(concurrency_libs)\n      set(android_libraries)\n      if(sdk STREQUAL \"ANDROID\")\n        set(android_libraries -llog)\n        set(libpthread)\n      elseif(SWIFT_CONCURRENCY_USES_DISPATCH)\n        set(concurrency_libs \"-ldispatch -lBlocksRuntime\")\n      endif()\n\n      file(WRITE \"${SWIFTSTATICLIB_DIR}/${linkfile}\" \"\n-ldl\n${libpthread}\n${android_libraries}\n-lswiftCore\n${concurrency_libs}\n-lstdc++\n-lm\n-Xlinker -export-dynamic\n-Xlinker --exclude-libs\n-Xlinker ALL\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayStorage Class in Swift\nDESCRIPTION: Defines a generic ArrayStorage class with a getElement method to return a subobject.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass ArrayStorage<T> {\n  func getElement(_ index: Int) -> T {} // Return a 'subobject'.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing StdlibUnittest for Swift Resilience Testing\nDESCRIPTION: Shows how to import and use the StdlibUnittest library for assertions in Swift resilience tests. This library provides the necessary tools for writing and running the resilience test cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/validation-test/Evolution/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nimport StdlibUnittest\n```\n\n----------------------------------------\n\nTITLE: Code Completion Open Result Structure\nDESCRIPTION: Defines the format of results from a code completion open session, including additional metadata like substructure information for parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n```\ncompletion.open-result ::=\n{\n  <key.kind>:           (UID)         // UID for the declaration kind (function, class, etc.).\n  <key.name>:           (string)      // Name of the word being completed\n  <key.sourcetext>:     (string)      // Text to be inserted in source.\n  <key.description>:    (string)      // Text to be displayed in code-completion window.\n  <key.typename>:       (string)      // Text describing the type of the result.\n  <key.context>:        (UID)         // Semantic context of the code completion result.\n  <key.num_bytes_to_erase>: (int64)   // Number of bytes to the left of the cursor that should be erased before inserting this completion result.\n  <key.substructure>:   (dictionary)  // Contains an array of dictionaries representing ranges of structural elements in the result description, such as the parameters of a function\n      - <key.nameoffset>  (int64)     // The offset location of the given parameter\n      - <key.namelength>  (int64)     // The length of the given parameter\n      - <key.bodyoffset>  (int64)     // The `nameoffset` + the indentation inside the body of the file\n      - <key.bodylength>  (int64)     // The `namelength` + the indentation inside the body of the file\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Declaring FooSubFunc1 Function in Swift\nDESCRIPTION: Declares a function that takes an Int32 parameter and returns an Int32 value. This appears to be a wrapper for functionality provided by the FooHelper module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.FooSub.printed.txt#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc fooSubFunc1(_ a: Int32) -> Int32\n```\n\n----------------------------------------\n\nTITLE: Using nonisolated(unsafe) for Manually Protected Static Variables in Swift\nDESCRIPTION: This code shows how to use the nonisolated(unsafe) attribute to opt out of concurrency checking for a static variable. This should only be used when you have external synchronization mechanisms like locks or dispatch queues protecting access.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/mutable-global-variable.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n  nonisolated(unsafe) static var value = 10\n```\n\n----------------------------------------\n\nTITLE: Verbose Mode Reporting in Swift Benchmark_O\nDESCRIPTION: Tests verbose mode reporting which includes detailed configuration, environmental statistics, and individual sample measurements. Also tests memory, quantile, and delta reporting options together.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O 1 Ackermann 1 AngryPhonebook \\\nRUN:              --verbose --num-samples=2 --memory --quantile=2 --delta \\\nRUN:              | %FileCheck %s --check-prefix RUNJUSTONCE \\\nRUN:                              --check-prefix CONFIG \\\nRUN:                              --check-prefix LOGVERBOSE \\\nRUN:                              --check-prefix MEASUREENV \\\nRUN:                              --check-prefix LOGFORMAT \\\nRUN:                              --check-prefix YIELDCOUNT\nCONFIG: NumSamples: 2\nCONFIG: Tests Filter: [\"1\", \"Ackermann\", \"1\", \"AngryPhonebook\"]\nCONFIG: Tests to run: Ackermann, AngryPhonebook\nLOGFORMAT: #,TEST,SAMPLES,MIN(μs),𝚫MEDIAN,𝚫MAX,MAX_RSS(B)\nLOGVERBOSE-LABEL: Running Ackermann\nLOGVERBOSE: Collecting 2 samples.\nLOGVERBOSE: Measuring with scale {{[0-9]+}}.\nLOGVERBOSE: Sample 0,{{[0-9]+}}\nLOGVERBOSE: Sample 1,{{[0-9]+}}\nMEASUREENV: MAX_RSS {{[0-9]+}} - {{[0-9]+}} = {{[0-9]+}} ({{[0-9]+}} pages)\nMEASUREENV: ICS {{[0-9]+}} - {{[0-9]+}} = {{[0-9]+}}\nMEASUREENV: VCS {{[0-9]+}} - {{[0-9]+}} = {{[0-9]+}}\nYIELDCOUNT: yieldCount 1\nRUNJUSTONCE-LABEL: 1,Ackermann\nRUNJUSTONCE-NOT: 1,Ackermann\nLOGFORMAT: ,{{[0-9]+}},{{[0-9]+}},,{{[0-9]*}},{{[0-9]+}}\nLOGVERBOSE-LABEL: Running AngryPhonebook\nLOGVERBOSE: Collecting 2 samples.\n```\n\n----------------------------------------\n\nTITLE: Passing Immutable Values as Const Pointer Arguments in Swift\nDESCRIPTION: Demonstrates how to pass immutable scalar values to C functions expecting const pointer arguments by wrapping them in an array. This approach explicitly shows that a copy is being made.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n// an immutable scalar we might want to pass into a \"const double*\".\nlet grayLevel = 0.5\nlet monochrome = CGColorSpaceCreateGrayscale()\n\n// error, can't pass Double into second argument.\nlet c1 = CGColorCreate(monochrome, grayval)\n// error, can't take the address of a 'let' (would be ok for a 'var')\nlet c2 = CGColorCreate(monochrome, &grayval)\n// OK, we're explicitly forming an array\nlet c3 = CGColorCreate(monochrome, [grayval])\n```\n\n----------------------------------------\n\nTITLE: Defining SIL Scope and Debug Location Syntax\nDESCRIPTION: This code snippet defines the syntax for SIL scopes and debug locations. It includes the structure for sil-scope-ref, sil-scope, scope-parent, and sil-loc, which are used to provide debug information in SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_31\n\nLANGUAGE: sil\nCODE:\n```\nsil-scope-ref ::= 'scope' [0-9]+\nsil-scope ::= 'sil_scope' [0-9]+ '{\n                 sil-loc\n                 'parent' scope-parent\n                 ('inlined_at' sil-scope-ref)?\n              '}'\nscope-parent ::= sil-function-name ':' sil-type\nscope-parent ::= sil-scope-ref\nsil-loc ::= 'loc' string-literal ':' [0-9]+ ':' [0-9]+\n```\n\n----------------------------------------\n\nTITLE: Defining Sugared Type Mangling for DWARF and USRs in Swift\nDESCRIPTION: Specifies additional mangling rules for sugared types used in DWARF debug info and USRs, including typealias, Optional, Array, Dictionary, and InlineArray types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_37\n\nLANGUAGE: swift\nCODE:\n```\nany-generic-type ::= context decl-name 'a'     // typealias type\ntype ::= base-type \"XSq\"                       // sugared Optional type\ntype ::= base-type \"XSa\"                       // sugared Array type\ntype ::= key-type value-type \"XSD\"             // sugared Dictionary type\ntype ::= count-type element-type \"XSA\"         // sugared InlineArray type\n```\n\n----------------------------------------\n\nTITLE: Escape to NoEscape Function Conversion in Swift SIL\nDESCRIPTION: Converts an escaping function type to a @noescape trivial function type. Requires lifetime guarantee for the input value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_172\n\nLANGUAGE: swift\nCODE:\n```\n%1 = convert_escape_to_noescape %0 : $T -> U to $@noescape T' -> U'\n```\n\n----------------------------------------\n\nTITLE: Illustrating store_borrow in Swift\nDESCRIPTION: This code demonstrates how store_borrow defines a borrow scope and stores the borrowed value to a stack location.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n%s = alloc_stack $T\n%2 = store_borrow %1 to %s   -+ borrow scope for %1\n// ...                        |\nend_borrow %2                -+ %1 must be alive until here\ndealloc_stack %s\n```\n\n----------------------------------------\n\nTITLE: Building swift-inspect on Windows using Swift Package Manager\nDESCRIPTION: Command for building swift-inspect on Windows, using special parameters to locate the necessary Swift Remote Mirror libraries and includes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift build -Xcc -I%SDKROOT%\\usr\\include\\swift\\SwiftRemoteMirror -Xlinker %SDKROOT%\\usr\\lib\\swift\\windows\\x86_64\\swiftRemoteMirror.lib\n```\n\n----------------------------------------\n\nTITLE: Conditionally Adding SIMD Vector Sources in CMake\nDESCRIPTION: This CMake code block conditionally adds SIMD (Single Instruction, Multiple Data) vector sources to the Swift standard library if the SWIFT_STDLIB_ENABLE_VECTOR_TYPES option is enabled. It appends these sources to both regular and embedded source lists.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_STDLIB_ENABLE_VECTOR_TYPES)\n  list(APPEND SWIFTLIB_SOURCES SIMDVector.swift)\n  list(APPEND SWIFTLIB_GYB_SOURCES SIMDConcreteOperations.swift.gyb SIMDVectorTypes.swift.gyb)\n\n  list(APPEND SWIFTLIB_EMBEDDED_SOURCES SIMDVector.swift)\n  list(APPEND SWIFTLIB_EMBEDDED_GYB_SOURCES SIMDConcreteOperations.swift.gyb SIMDVectorTypes.swift.gyb)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deinit Sequencing in Swift\nDESCRIPTION: This snippet illustrates how deinits are not sequenced with regards to normal control flow, showing potential different outcomes based on optimization. It defines classes and a global variable to demonstrate the concept.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nclass D {}\nclass D1 : D {}\nclass D2 : D {}\n\nvar GLOBAL_D : D = D1()\n\nclass C { deinit { GLOBAL_D = D2() } }\n\nfunc main() {\n  let c = C()\n  let d = GLOBAL_D\n  useC(c)\n  useD(d)\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Using switch_enum with Foo enum example in Swift Intermediate Language\nDESCRIPTION: Demonstrates a practical example of switch_enum usage in SIL code with a Foo enum. The example shows how associated data is passed to destination blocks and how to handle different enum cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_188\n\nLANGUAGE: swift\nCODE:\n```\nenum Foo {\n  case Nothing\n  case OneInt(Int)\n  case TwoInts(Int, Int)\n}\n\nsil @sum_of_foo : $Foo -> Int {\nentry(%x : $Foo):\n  switch_enum %x : $Foo,       \n    case #Foo.Nothing!enumelt: nothing, \n    case #Foo.OneInt!enumelt:  one_int, \n    case #Foo.TwoInts!enumelt: two_ints\n\nnothing:\n  %zero = integer_literal $Int, 0\n  return %zero : $Int\n\none_int(%y : $Int):\n  return %y : $Int\n\ntwo_ints(%ab : $(Int, Int)):\n  %a = tuple_extract %ab : $(Int, Int), 0\n  %b = tuple_extract %ab : $(Int, Int), 1\n  %add = function_ref @add : $(Int, Int) -> Int\n  %result = apply %add(%a, %b) : $(Int, Int) -> Int\n  return %result : $Int\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Analysis Results within a Swift Optimization Pass in C++\nDESCRIPTION: This C++ code snippet demonstrates how an optimization pass retrieves a specific analysis result from the Swift pass manager. The `getAnalysis<AnalysisType>()` template method is used to obtain a pointer to the requested analysis, in this case, `DominanceAnalysis`. The pass manager handles the caching and provision of analysis results.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerDesign.md#2025-04-23_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n    DominanceAnalysis* DA = getAnalysis<DominanceAnalysis>();\n```\n\n----------------------------------------\n\nTITLE: Defining FooSubEnum1 Structure in Swift\nDESCRIPTION: Defines a RawRepresentable and Equatable structure that wraps a UInt32 value. This provides a type-safe interface to enumeration values from the FooHelper module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.FooSub.printed.txt#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nstruct FooSubEnum1 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Identifier Mangling Rules in Swift\nDESCRIPTION: Specifies the grammar for mangling identifiers, including substitutions, word encoding, and special cases for non-ASCII characters using Punycode algorithm.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_46\n\nLANGUAGE: Swift\nCODE:\n```\nidentifier ::= substitution\nidentifier ::= NATURAL IDENTIFIER-STRING   // identifier without word substitutions\nidentifier ::= '0' IDENTIFIER-PART         // identifier with word substitutions\n\nIDENTIFIER-PART ::= NATURAL IDENTIFIER-STRING\nIDENTIFIER-PART ::= [a-z]                  // word substitution (except the last one)\nIDENTIFIER-PART ::= [A-Z]                  // last word substitution in identifier\n\nIDENTIFIER-STRING ::= IDENTIFIER-START-CHAR IDENTIFIER-CHAR*\nIDENTIFIER-START-CHAR ::= [_a-zA-Z]\nIDENTIFIER-CHAR ::= [_$a-zA-Z0-9]\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Build for HOSTTOOLS or CROSSCOMPILE Modes in CMake\nDESCRIPTION: This conditional block handles the build configuration when `BOOTSTRAPPING_MODE` is either `HOSTTOOLS` or `CROSSCOMPILE`. It checks for the required Swift executable (`SWIFT_EXEC_FOR_SWIFT_MODULES`), performs additional checks specific to `HOSTTOOLS` mode (comparing compiler paths and checking minimum Swift version 5.8), and finally calls `add_swift_compiler_modules_library` to build the `swiftCompilerModules` using the specified Swift executable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\nif(BOOTSTRAPPING_MODE MATCHES \"HOSTTOOLS|CROSSCOMPILE\")\n\n    if (NOT SWIFT_EXEC_FOR_SWIFT_MODULES)\n      message(FATAL_ERROR \"Need a swift toolchain building swift compiler sources\")\n    endif()\n\n    if(BOOTSTRAPPING_MODE STREQUAL \"HOSTTOOLS\")\n      if(NOT SWIFT_EXEC_FOR_SWIFT_MODULES STREQUAL CMAKE_Swift_COMPILER)\n        message(FATAL_ERROR \"The Swift compiler (${CMAKE_Swift_COMPILER}) differs from the Swift compiler in SWIFT_NATIVE_SWIFT_TOOLS_PATH (${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/swiftc).\")\n      endif()\n\n      set(min_supported_swift_version 5.8)\n      if(CMAKE_Swift_COMPILER_VERSION VERSION_LESS \"${min_supported_swift_version}\")\n        message(FATAL_ERROR\n            \"Outdated Swift compiler: building with host tools requires Swift ${min_supported_swift_version} or newer. \"\n            \"Please update your Swift toolchain or switch BOOTSTRAPPING_MODE to BOOTSTRAPPING(-WITH-HOSTLIBS)? or OFF.\")\n      endif()\n    endif()\n\n    add_swift_compiler_modules_library(swiftCompilerModules\n      SWIFT_EXEC \"${SWIFT_EXEC_FOR_SWIFT_MODULES}\")\n\n  # ... elseif for other modes follows ...\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building swift-argument-parser with CMake and Ninja on Windows\nDESCRIPTION: This snippet configures and builds the swift-argument-parser project using CMake and Ninja. It sets various Swift-related dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_20\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B S:\\b\\8 ^\n  -D BUILD_SHARED_LIBS=YES ^\n  -D CMAKE_BUILD_TYPE=Release ^\n  -D CMAKE_INSTALL_PREFIX=C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr ^\n  -D CMAKE_MT=mt ^\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\n  -D dispatch_DIR=S:\\b\\2\\cmake\\modules ^\n  -D Foundation_DIR=S:\\b\\3\\cmake\\modules ^\n  -D XCTest_DIR=S:\\b\\4\\cmake\\modules ^\n  -G Ninja ^\n  -S S:\\swift-argument-parser\n\nninja -C S:\\b\\8\n```\n\n----------------------------------------\n\nTITLE: Structuring Finished Message for Swift Compiler Task\nDESCRIPTION: Shows the format of a 'finished' message, indicating the completion of a compilation task. It includes the exit status, process information, and optional usage statistics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DriverParseableOutput.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n \"kind\": \"finished\",\\n \"name\": \"compile\",\\n \"pid\": 12345,\\n \"exit-status\": 0,\\n \"process\": {\\n   \"real_pid\": 12345,\\n   \"usage\": {\\n     \"utime\": 22740,\\n     \"stime\": 91107,\\n     \"maxrss\": 7745536\\n   }\\n  }\\n // \"output\" key omitted because there was no stdout/stderr.\\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Swift Core Library Dependency\nDESCRIPTION: Links the Swift Core library as a private dependency for the Swift Regex Parser library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Supplemental/StringProcessing/_RegexParser/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(swift_RegexParser PRIVATE swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Adding Static Swift Host Library for Localization\nDESCRIPTION: Configures a static Swift host library named 'swiftLocalization' with the source file 'LocalizationFormat.cpp'. It also specifies a dependency on the LLVM 'support' component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Localization/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftLocalization STATIC\n  LocalizationFormat.cpp\n\n  LLVM_LINK_COMPONENTS\n    support)\n```\n\n----------------------------------------\n\nTITLE: Customizing enum case names with swift_name\nDESCRIPTION: Shows how to use swift_name to customize the names of individual enum cases when imported into Swift. This allows better control over Swift naming while maintaining the original C/Objective-C names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_24\n\nLANGUAGE: objc\nCODE:\n```\n// Actual example from Apple's SDKs; in fact, the first shipping example of\n// swift_name on an enumerator at all!\ntypedef NS_ENUM(NSUInteger, NSXMLNodeKind) {\n  NSXMLInvalidKind = 0,\n  NSXMLDocumentKind,\n  NSXMLElementKind,\n  NSXMLAttributeKind,\n  NSXMLNamespaceKind,\n  NSXMLProcessingInstructionKind,\n  NSXMLCommentKind,\n  NSXMLTextKind,\n  NSXMLDTDKind NS_SWIFT_NAME(DTDKind),\n  NSXMLEntityDeclarationKind,\n  NSXMLAttributeDeclarationKind,\n  NSXMLElementDeclarationKind,\n  NSXMLNotationDeclarationKind\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\npublic enum Kind : UInt {\n  case invalid\n  case document\n  case element\n  case attribute\n  case namespace\n  case processingInstruction\n  case comment\n  case text\n  case DTDKind\n  case entityDeclaration\n  case attributeDeclaration\n  case elementDeclaration\n  case notationDeclaration\n}\n```\n\n----------------------------------------\n\nTITLE: Elevated Unknown Warning Group Error in Swift Compilation\nDESCRIPTION: Shows how to explicitly treat unknown warning groups as errors by specifying the UnknownWarningGroup flag along with the unrecognized group.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/unknown-warning-group.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -Werror UnknownWarningGroup -Werror non_existing_group file.swift\n<unknown>:0: error: unknown warning group: 'non_existing_group'\n```\n\n----------------------------------------\n\nTITLE: Implementing Reference Queue Interface in C for Swift Runtime\nDESCRIPTION: Defines the interface for Swift's ReferenceQueue system, which allows for tracking and processing references with operations for creating, destroying, and polling reference queues.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nstruct ReferenceQueue;\nstruct ReferenceQueue *swift_createReferenceQueue(void);\n\nvoid swift_destroyReferenceQueue(struct ReferenceQueue *queue);\n\nstruct Reference *swift_pollReferenceQueue(struct ReferenceQueue *queue);\n```\n\n----------------------------------------\n\nTITLE: Declaring and Fetching Swift Syntax Source in CMake\nDESCRIPTION: Uses CMake's FetchContent module to declare and make available the Swift Syntax source code from a specified path. It also sets properties to exclude the fetched content from the 'all' target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftSyntax/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(TO_CMAKE_PATH \"${SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE}\" swift_syntax_path)\nFetchContent_Declare(SwiftSyntax SOURCE_DIR \"${swift_syntax_path}\")\nFetchContent_MakeAvailable(SwiftSyntax)\n\nFetchContent_GetProperties(SwiftSyntax BINARY_DIR binary_dir)\nset_property(DIRECTORY \"${binary_dir}\" PROPERTY EXCLUDE_FROM_ALL TRUE)\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregate Time per Optimization Stage in Swift Counters DB\nDESCRIPTION: This SQL query calculates the total duration spent within each optimization pipeline stage (`Stage`). It sums the `Duration` column for module-level instruction counters (`C.counter = 'inst'`, `C.kind = 'module'`) from the `Counters` table, grouping the results by stage name and ordering them by the total duration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect sum(Duration), Stage\nfrom Counters C\nwhere C.counter = 'inst' and C.kind = 'module'\ngroup by Stage\norder by sum(C.Duration); \n```\n\n----------------------------------------\n\nTITLE: Diagnostic Format Specifier for TypeAttribute Arguments - Plaintext\nDESCRIPTION: This snippet highlights format specifiers tailored for compiler diagnostics involving TypeAttribute arguments in Swift. %kind0 inserts the attribute with descriptive wording, while %0 gives the attribute in its source code form. These tokens are keys to rendering diagnostics that reference Swift attributes in a human-readable form.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n%kind0\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n%0\n```\n\n----------------------------------------\n\nTITLE: Using Custom LLDB Command Alias\nDESCRIPTION: Invokes the custom command alias `cs`, which in turn executes the associated Python script or command sequence (in this case, `custom_step()`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_30\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) cs\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Core Library Bootstrapping\nDESCRIPTION: Sets up bootstrapping configurations for the Swift Core library, creating separate targets for bootstrapping stages 0 and 1.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOTSTRAPPING_MODE STREQUAL \"BOOTSTRAPPING\")\n\n  set(b0_deps symlink-headers-bootstrapping0)\n  set(b1_deps symlink-headers-bootstrapping1)\n\n  list(FIND SWIFT_STDLIB_LIBRARY_BUILD_TYPES \"SHARED\" index_of_shared)\n  if(index_of_shared EQUAL -1)\n    message(FATAL_ERROR \"bootstrapping requires SHARED stdlib build type\")\n  endif()\n\n  set(swiftCore_common_bootstrapping_options\n                    SHARED\n                    ${swiftCore_common_options}\n                    SDK ${SWIFT_HOST_VARIANT_SDK}\n                    ARCHITECTURE ${SWIFT_HOST_VARIANT_ARCH}\n                    INSTALL_IN_COMPONENT\n                      \"never_install\")\n\n  # Bootstrapping - stage 0\n\n  add_swift_target_library_single(swiftCore-bootstrapping0 swiftCore\n                    ${swiftCore_common_bootstrapping_options}\n                    FILE_DEPENDS\n                      ${b0_deps} ${swiftCore_common_dependencies}\n                    BOOTSTRAPPING 0)\n\n  # Bootstrapping - stage 1\n\n  add_swift_target_library_single(swiftCore-bootstrapping1 swiftCore\n                    ${swiftCore_common_bootstrapping_options}\n                    FILE_DEPENDS\n                      ${b1_deps} ${swiftCore_common_dependencies}\n                    BOOTSTRAPPING 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Illustrating Swift Type Inference Examples\nDESCRIPTION: This Swift code demonstrates bi-directional type inference. The first part shows type inference based on a function's return type (`round`), determining `three` is `Int`. The second part shows contextual type inference with a generic function (`identity`), where the type of the numeric literal `2.71828` is inferred as `Float` due to the assignment to `eFloat`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n  func round(_ x: Double) -> Int { /* ... */ }\n  var pi: Double = 3.14159\n  var three = round(pi) // 'three' has type 'Int'\n\n  func identity<T>(_ x: T) -> T { return x }\n  var eFloat: Float = -identity(2.71828)  // numeric literal gets type 'Float'\n```\n\n----------------------------------------\n\nTITLE: Set Mutating Operations in Swift\nDESCRIPTION: Implementation of mutating and non-mutating set operations like union, intersect, subtract, and exclusiveOr.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\npublic func union(_ b: Set<Element>) -> Set<Element>        // A ∪ B\npublic mutating func unionInPlace(_ b: Set<Element>)        // A ∪= B\n\npublic func intersect(_ b: Set<Element>) -> Set<Element>    // A ∩ B\npublic mutating func intersectInPlace(_ b: Set<Element>)    // A ∩= B\n\npublic func subtract(_ b: Set<Element>) -> Set<Element>     // A - B\npublic mutating func subtractInPlace(_ b: Set<Element>)     // A -= B\n\npublic func exclusiveOr(_ b: Set<Element>) -> Set<Element>  // A ⊕ B\npublic mutating func exclusiveOrInPlace(_ b: Set<Element>)  // A ⊕= B\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Subscripts in Swift Collections\nDESCRIPTION: Demonstrates how subscripts could be allowed to have generic parameters, enabling more flexible subscripting operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nextension Collection {\n  subscript<Indices: Sequence where Indices.Iterator.Element == Index>(indices: Indices) -> [Iterator.Element] {\n    get {\n      var result = [Iterator.Element]()\n      for index in indices {\n        result.append(self[index])\n      }\n\n      return result\n    }\n\n    set {\n      for (index, value) in zip(indices, newValue) {\n        self[index] = value\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Swift Toolchain on macOS using build-script (sh)\nDESCRIPTION: Invokes the `utils/build-script` on macOS to build the Swift toolchain. It skips building benchmarks, sets the supported architecture based on the current machine (`uname -m`), enables release build with debug info (`--release-debuginfo`), disables dead stripping, and configures bootstrapping using host tools. Assumes Swift source and dependencies (Xcode command-line tools) are set up.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nutils/build-script --skip-build-benchmarks \\\n  --swift-darwin-supported-archs \"$(uname -m)\" \\\n  --release-debuginfo --swift-disable-dead-stripping \\\n  --bootstrapping=hosttools\n```\n\n----------------------------------------\n\nTITLE: Enabling Instruction-Level Optimizer Counters for Specific Instructions - Shell\nDESCRIPTION: This snippet demonstrates how to collect statistics for specific SIL instructions in the Swift compiler using the '-Xllvm -sil-stats-only-instructions' command-line flag. The option accepts a comma-separated list of instruction names, allowing targeted collection (e.g. 'alloc_ref,alloc_stack'). It requires the user to specify which instructions to count, or 'all' to count every instruction type. The collected data enables fine-grained analysis of instruction-level changes for selected instruction types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -sil-stats-only-instructions=alloc_ref,alloc_stack\n```\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -sil-stats-only-instructions=all\n```\n\n----------------------------------------\n\nTITLE: Defining FooComparisonResult Enum in Swift\nDESCRIPTION: Declares an enum with Int raw values representing comparison results (ascending, same, descending), with failable initializer and raw value getter.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  FooComparisonResult.  Bbb.\nenum FooComparisonResult : Int {\n  init?(rawValue: Int)\n  var rawValue: Int { get }\n  case orderedAscending\n  case orderedSame\n  case orderedDescending\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_BUILD_STDLIB Variable in CMake\nDESCRIPTION: Determines whether the Swift standard library is being built (either statically or dynamically) and sets the SWIFT_BUILD_STDLIB variable accordingly. This variable can be used later in the build process to conditionally include directories or perform actions related to the standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_DYNAMIC_STDLIB OR SWIFT_BUILD_STATIC_STDLIB)\n  set(SWIFT_BUILD_STDLIB TRUE)\nelse()\n  set(SWIFT_BUILD_STDLIB FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing Stack Allocation with Debug Variables in SIL\nDESCRIPTION: Demonstrates equivalent ways to initialize stack allocations with debug variable information, showing both direct allocation with debug info and separate debug_value instruction approaches.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_0\n\nLANGUAGE: sil\nCODE:\n```\n%0 = alloc_stack $T, var, name \"value\", loc \"a.swift\":4:2, scope 1\n// equivalent to:\n%0 = alloc_stack $T, loc \"a.swift\":4:2, scope 1\ndebug_value %0 : $*T, var, name \"value\", expr op_deref, loc \"a.swift\":4:2, scope 1\n```\n\n----------------------------------------\n\nTITLE: Future Approach: Swift Import Using Native Move-Only Types\nDESCRIPTION: Future implementation that imports C++ move-only classes as native Swift move-only types, once Swift adds support for the feature. Shows how the File class would be imported.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_31\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nmoveonly struct File {\n  public init(_ filename: std.string_view)\n  public deinit\n\n  public func ReadAll() -> std.string\n}\n\nmoveonly struct TwoFiles {\n  var first: File\n  var second: File\n}\n```\n\n----------------------------------------\n\nTITLE: Code Completion Open Request Structure\nDESCRIPTION: Describes the structure for opening a code completion session, which allows subsequent filtering with 'codecomplete.update' and must be closed with 'codecomplete.close'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```\n{\n    <key.request>:          (UID) <source.request.codecomplete.open>\n    [opt] <key.sourcetext>: (string)   // Source contents.\n    [opt] <key.sourcefile>: (string)   // Absolute path to the file.\n    <key.offset>:           (int64)    // Byte offset of code-completion point inside the source contents.\n    [opt] <key.codecomplete.options>:    (dict)     // An options dictionary containing keys.\n    [opt] <key.compilerargs> [string*] // Array of zero or more strings for the compiler arguments,\n                                       // e.g [\"-sdk\", \"/path/to/sdk\"]. If key.sourcefile is provided,\n                                       // these must include the path to that file.\n    [opt] <key.not_recommended> [bool] // True if this result is to be avoided, e.g. because\n                                       // the declaration is unavailable.\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Alphabetic Code Point Ranges\nDESCRIPTION: A comprehensive list of Unicode code point ranges that have the Alphabetic property. Each line represents a range in hexadecimal format, with the start and end points separated by two dots. The ranges cover various scripts and writing systems from around the world.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_5\n\nLANGUAGE: data\nCODE:\n```\n1D770..1D788  ; Alphabetic\n1D78A..1D7A8  ; Alphabetic\n1D7AA..1D7C2  ; Alphabetic\n1D7C4..1D7CB  ; Alphabetic\n1DF00..1DF09  ; Alphabetic\n1DF0A         ; Alphabetic\n1DF0B..1DF1E  ; Alphabetic\n1DF25..1DF2A  ; Alphabetic\n1E000..1E006  ; Alphabetic\n1E008..1E018  ; Alphabetic\n1E01B..1E021  ; Alphabetic\n1E023..1E024  ; Alphabetic\n1E026..1E02A  ; Alphabetic\n1E030..1E06D  ; Alphabetic\n1E08F         ; Alphabetic\n1E100..1E12C  ; Alphabetic\n1E137..1E13D  ; Alphabetic\n1E14E         ; Alphabetic\n1E290..1E2AD  ; Alphabetic\n1E2C0..1E2EB  ; Alphabetic\n1E4D0..1E4EA  ; Alphabetic\n1E4EB         ; Alphabetic\n1E5D0..1E5ED  ; Alphabetic\n1E5F0         ; Alphabetic\n1E7E0..1E7E6  ; Alphabetic\n1E7E8..1E7EB  ; Alphabetic\n1E7ED..1E7EE  ; Alphabetic\n1E7F0..1E7FE  ; Alphabetic\n1E800..1E8C4  ; Alphabetic\n1E900..1E943  ; Alphabetic\n1E947         ; Alphabetic\n1E94B         ; Alphabetic\n1EE00..1EE03  ; Alphabetic\n1EE05..1EE1F  ; Alphabetic\n1EE21..1EE22  ; Alphabetic\n1EE24         ; Alphabetic\n1EE27         ; Alphabetic\n1EE29..1EE32  ; Alphabetic\n1EE34..1EE37  ; Alphabetic\n1EE39         ; Alphabetic\n1EE3B         ; Alphabetic\n1EE42         ; Alphabetic\n1EE47         ; Alphabetic\n1EE49         ; Alphabetic\n1EE4B         ; Alphabetic\n1EE4D..1EE4F  ; Alphabetic\n1EE51..1EE52  ; Alphabetic\n1EE54         ; Alphabetic\n1EE57         ; Alphabetic\n1EE59         ; Alphabetic\n1EE5B         ; Alphabetic\n1EE5D         ; Alphabetic\n1EE5F         ; Alphabetic\n1EE61..1EE62  ; Alphabetic\n1EE64         ; Alphabetic\n1EE67..1EE6A  ; Alphabetic\n1EE6C..1EE72  ; Alphabetic\n1EE74..1EE77  ; Alphabetic\n1EE79..1EE7C  ; Alphabetic\n1EE7E         ; Alphabetic\n1EE80..1EE89  ; Alphabetic\n1EE8B..1EE9B  ; Alphabetic\n1EEA1..1EEA3  ; Alphabetic\n1EEA5..1EEA9  ; Alphabetic\n1EEAB..1EEBB  ; Alphabetic\n1F130..1F149  ; Alphabetic\n1F150..1F169  ; Alphabetic\n1F170..1F189  ; Alphabetic\n20000..2A6DF  ; Alphabetic\n2A700..2B739  ; Alphabetic\n2B740..2B81D  ; Alphabetic\n2B820..2CEA1  ; Alphabetic\n2CEB0..2EBE0  ; Alphabetic\n2EBF0..2EE5D  ; Alphabetic\n2F800..2FA1D  ; Alphabetic\n30000..3134A  ; Alphabetic\n31350..323AF  ; Alphabetic\n\n# Total code points: 142759\n\n# ================================================\n\n# Derived Property: Lowercase\n```\n\n----------------------------------------\n\nTITLE: Defining Opaque Existential Container Layout with C Struct - C\nDESCRIPTION: Defines the layout of an opaque existential container as a C struct, used for general protocol types in Swift ABI. The struct has a fixed-size buffer for storing value data, a pointer to value type metadata, and an array of protocol witness tables. This representation is generic for existential containers that do not constrain the stored value to a class type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nstruct OpaqueExistentialContainer {\n  void *fixedSizeBuffer[3];\n  Metadata *type;\n  WitnessTable *witnessTables[NUM_WITNESS_TABLES];\n};\n```\n\n----------------------------------------\n\nTITLE: Expression Type Request/Response Format\nDESCRIPTION: JSON format for collecting types of expressions in a source file after type checking.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>:                  (UID)     <source.request.expression.type>,\n    <key.sourcefile>:               (string)  // Absolute path to the file.\n    <key.compilerargs>:             [string*] // Array of zero or more strings for the compiler arguments,\n                                              // e.g [\"-sdk\", \"/path/to/sdk\"]. If key.sourcefile is provided,\n                                              // these must include the path to that file.\n    <key.expectedtypes>:            [string*] // A list of interested protocol USRs.\n                                              // When empty, we report all expressions in the file.\n                                              // When non-empty, we report expressions whose types conform to any of the give protocols.\n    [opt] <key.fully_qualified>:    (bool)    // True when fully qualified type should be returned. Defaults to False.\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.expression_type_list>:       (array) [expr-type-info*]   // A list of expression and type\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nexpr-type-info ::=\n{\n  <key.expression_offset>:    (int64)    // Offset of an expression in the source file\n  <key.expression_length>:    (int64)    // Length of an expression in the source file\n  <key.expression_type>:      (string)   // Printed type of this expression\n  <key.expectedtypes>:        [string*]  // A list of interested protocol USRs this expression conforms to\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version and Policies\nDESCRIPTION: Establishes the minimum required CMake version and sets various CMake policies related to RPATH usage, C++ standard in try_compile, relative paths in subdirectory target_sources, and option declaration behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.19.6)\n\n\n#  set_property(GLOBAL PROPERTY GLOBAL_DEPENDS_DEBUG_MODE 1)\n\n# TODO: Fix RPATH usage to be CMP0068 compliant\n# Disable Policy CMP0068 for CMake 3.9\n# rdar://37725888\nif(POLICY CMP0068)\n  cmake_policy(SET CMP0068 OLD)\nendif()\n\n# Honour CMAKE_CXX_STANDARD in try_compile(), needed for check_cxx_native_regex.\nif(POLICY CMP0067)\n  cmake_policy(SET CMP0067 NEW)\nendif()\n\n# Convert relative paths to absolute for subdirectory `target_sources`\nif(POLICY CMP0076)\n  cmake_policy(SET CMP0076 NEW)\nendif()\n\n# Don't clobber existing variable values when evaluating `option()` declarations.\nif(POLICY CMP0077)\n  cmake_policy(SET CMP0077 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Function Body Timing Analysis Output\nDESCRIPTION: Example output from the -debug-time-function-bodies option showing timing information for individual function typechecking.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n9.16ms  test.swift:15:6 func find<R>(_ range: R, value: R.Element) -> R where R : IteratorProtocol, R.Element : Eq\n0.28ms  test.swift:27:6 func findIf<R>(_ range: R, predicate: (R.Element) -> Bool) -> R where R : IteratorProtocol\n2.81ms  test.swift:40:6 func count<R>(_ range: R, value: R.Element) -> Int where R : IteratorProtocol, R.Element : Eq\n0.64ms  test.swift:51:6 func countIf<R>(_ range: R, predicate: (R.Element) -> Bool) -> Int where R : IteratorProtocol\n```\n\n----------------------------------------\n\nTITLE: Configuring SourceKitCore Library Build in CMake\nDESCRIPTION: Adds a new library target named SourceKitCore with three source files and links it against SourceKitSupport library. The library is built from Context.cpp, LangSupport.cpp, and NotificationCenter.cpp source files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/lib/Core/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sourcekit_library(SourceKitCore\n  Context.cpp\n  LangSupport.cpp\n  NotificationCenter.cpp\n)\ntarget_link_libraries(SourceKitCore PRIVATE\n  SourceKitSupport)\n```\n\n----------------------------------------\n\nTITLE: Implementing partialDeinit Entry Point in Swift\nDESCRIPTION: Describes the logic for implementing the partialDeinit entry point, which is responsible for conditionally deinitializing stored properties without invoking the user-defined deinitializer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/FailableInitializers.md#2025-04-23_snippet_1\n\nLANGUAGE: pseudo\nCODE:\n```\n1. If the static self type of the entry point is not equal to M,\n   first delegate to the superclass's partialDeinit entry point, then\n   deinitialize all stored properties in C_k.\n2. If the static self type is equal to M, we have finished\n   deinitializing the object, and we can now call a runtime function\n   to deallocate it.\n```\n\n----------------------------------------\n\nTITLE: Default Witness Table Entry Syntax in SIL\nDESCRIPTION: Syntax for method entries in a default witness table. These map protocol method requirements to SIL functions that implement default behavior for all conforming types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_41\n\nLANGUAGE: sil\nCODE:\n```\nsil-default-witness-entry ::= 'method' sil-decl-ref ':' sil-function-name\n```\n\n----------------------------------------\n\nTITLE: Generating SIB File with Disabled Performance Optimizations\nDESCRIPTION: This command generates a SIB (Swift Intermediate Binary) file with performance optimizations disabled. It uses the Swift compiler command line with specific flags to emit SIB and disable SIL optimizations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/bug_reducer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n${SWIFTC_CMDLINE} -emit-sib -Xllvm -disable-sil-optzns -O -o ${OUTPUT}.sib\n```\n\n----------------------------------------\n\nTITLE: Setting Default CMAKE_BUILD_TYPE in CMake\nDESCRIPTION: Checks if a build type (CMAKE_BUILD_TYPE) or configuration types (CMAKE_CONFIGURATION_TYPES for multi-config generators) have been specified. If not, it sets CMAKE_BUILD_TYPE to \"Debug\" as a default, caches it as a STRING, forces the value, and prints a status message indicating the default being used.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE STRING\n      \"Build type for Swift [Debug, RelWithDebInfo, Release, MinSizeRel]\"\n      FORCE)\n  message(STATUS \"No build type was specified, will default to ${CMAKE_BUILD_TYPE}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building swift-package-manager with CMake and Ninja on Windows\nDESCRIPTION: This snippet configures and builds the swift-package-manager project using CMake and Ninja. It sets various Swift-related dependencies including TSC, LLBuild, Yams, ArgumentParser, and SwiftDriver.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_22\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B S:\\b\\10 ^\n  -D BUILD_SHARED_LIBS=YES ^\n  -D CMAKE_BUILD_TYPE=Release ^\n  -D CMAKE_C_COMPILER=S:/b/1/bin/clang-cl.exe ^\n  -D CMAKE_INSTALL_PREFIX=C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr ^\n  -D CMAKE_MT=mt ^\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\n  -D dispatch_DIR=S:\\b\\2\\cmake\\modules ^\n  -D Foundation_DIR=S:\\b\\3\\cmake\\modules ^\n  -D TSC_DIR=S:\\b\\5\\cmake\\modules ^\n  -D LLBuild_DIR=S:\\b\\6\\cmake\\modules ^\n  -D Yams_DIR=S:\\b\\7\\cmake\\modules ^\n  -D ArgumentParser_DIR=S:\\b\\8\\cmake\\modules ^\n  -D SwiftDriver_DIR=S:\\b\\9\\cmake\\modules ^\n  -G Ninja ^\n  -S S:\\swift-package-manager\n\nninja -C S:\\b\\10\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Parser Library and Dependencies\nDESCRIPTION: Creates the static swiftParse library with its source files and establishes core dependency on swiftAST library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Parse/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftParse STATIC\n  Confusables.cpp\n  Lexer.cpp\n  ParseDecl.cpp\n  ParseDeclName.cpp\n  ParseExpr.cpp\n  ParseGeneric.cpp\n  ParseIfConfig.cpp\n  ParsePattern.cpp\n  Parser.cpp\n  ParseRegex.cpp\n  ParseRequests.cpp\n  ParseStmt.cpp\n  ParseType.cpp\n  ParseVersion.cpp\n  PersistentParserState.cpp)\ntarget_link_libraries(swiftParse PRIVATE\n  swiftAST\n)\n```\n\n----------------------------------------\n\nTITLE: Tag Filtering in Swift Benchmark_O\nDESCRIPTION: Tests the composition of tags and skip-tags parameters for filtering benchmarks. Demonstrates combining multiple tags for inclusion and exclusion to create precise benchmark selections.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O --list --tags=Dictionary,Array \\\nRUN:             | %FileCheck %s --check-prefix ANDTAGS\nANDTAGS: TwoSum\nANDTAGS-NOT: Array2D\nANDTAGS-NOT: DictionarySwap\n\nRUN: %Benchmark_O --list --tags=algorithm --skip-tags=validation \\\nRUN:             | %FileCheck %s --check-prefix TAGSANDSKIPTAGS\nTAGSANDSKIPTAGS: Ackermann\nTAGSANDSKIPTAGS: DictOfArraysToArrayOfDicts\nTAGSANDSKIPTAGS: Fibonacci\nTAGSANDSKIPTAGS: RomanNumbers\n\nRUN: %Benchmark_O --list --tags=algorithm \\\nRUN:              --skip-tags=validation,Dictionary,String \\\nRUN:             | %FileCheck %s --check-prefix ORSKIPTAGS\nORSKIPTAGS: Ackermann\nORSKIPTAGS-NOT: DictOfArraysToArrayOfDicts\nORSKIPTAGS: Fibonacci\nORSKIPTAGS-NOT: RomanNumbers\n```\n\n----------------------------------------\n\nTITLE: Checking C++ Interop Version in Clang Importer\nDESCRIPTION: Example showing how to guard breaking changes in the Clang Importer implementation using isCxxInteropCompatVersionAtLeast to check for the upcoming C++ interop version.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityContributorGuide.md#2025-04-23_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n// Inside of Clang Importer (Impl is `ClangImporter::Impl`)\nif (Impl.isCxxInteropCompatVersionAtLeast(version::getUpcomingCxxInteropCompatVersion())) {\n  // ... breaking change ...\n}\n```\n\n----------------------------------------\n\nTITLE: Symlink Modulemap and Apinotes Setup for Windows Swift Build - Batchfile\nDESCRIPTION: These mklink commands create symbolic links for Swift modulemap and apinotes files, placing them in the right SDK or compiler include directories as required by the Windows Swift build. They must be executed in an administrator-privileged developer command prompt. The script assumes all referenced files exist at the provided absolute paths. Failing to do this will cause builds to fail with missing headers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_4\n\nLANGUAGE: Batchfile\nCODE:\n```\nmklink \"%UniversalCRTSdkDir%\\Include\\%UCRTVersion%\\ucrt\\module.modulemap\" S:\\\\swift\\\\stdlib\\\\public\\\\Platform\\\\ucrt.modulemap\\nmklink \"%UniversalCRTSdkDir%\\Include\\%UCRTVersion%\\um\\module.modulemap\" S:\\\\swift\\\\stdlib\\\\public\\\\Platform\\\\winsdk.modulemap\\nmklink \"%VCToolsInstallDir%\\include\\module.modulemap\" S:\\\\swift\\\\stdlib\\\\public\\\\Platform\\\\vcruntime.modulemap\\nmklink \"%VCToolsInstallDir%\\include\\vcruntime.apinotes\" S:\\\\swift\\\\stdlib\\\\public\\\\Platform\\\\vcruntime.apinotes\n```\n\n----------------------------------------\n\nTITLE: Detecting Dependency Cycles with swiftc -debug-cycles (Shell)\nDESCRIPTION: Shows the command-line invocation of the Swift compiler frontend (`swiftc -frontend`) to perform type checking (`-typecheck`) on the `circular_inheritance.swift` test file while enabling cycle detection debugging output (`-debug-cycles`). This helps identify cyclic dependencies reported by the Request-Evaluator.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/RequestEvaluator.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ swiftc -frontend -typecheck -debug-cycles test/decl/class/circular_inheritance.swift\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration Examples for Swift Benchmarks\nDESCRIPTION: Different CMake configuration examples, including building against a local swiftc, using Xcode's default toolchain, and enabling OS libraries for benchmarking.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake <src>/benchmark -G Ninja -DSWIFT_EXEC=<build>/swift-macosx-$(uname -m)/bin/swiftc\nninja swift-benchmark-iphoneos-arm64\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake <src>/benchmark -G Ninja\nninja swift-benchmark-iphoneos-arm64\n```\n\nLANGUAGE: bash\nCODE:\n```\ncmake <src>/benchmark -G Ninja -DSWIFT_BENCHMARK_USE_OS_LIBRARIES=ON\nninja swift-benchmark-iphoneos-arm64\n```\n\n----------------------------------------\n\nTITLE: Fetching and configuring Swift ArgumentParser dependency\nDESCRIPTION: Declares and configures the Swift ArgumentParser dependency using FetchContent, setting it up with specific build options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nFetchContent_Declare(ArgumentParser\n  GIT_REPOSITORY  https://github.com/apple/swift-argument-parser\n  GIT_TAG         1.5.0\n  GIT_SHALLOW     TRUE\n  EXCLUDE_FROM_ALL\n  FIND_PACKAGE_ARGS CONFIG)\n\nblock(SCOPE_FOR VARIABLES)\n  set(BUILD_SHARED_LIBS OFF CACHE INTERNAL \"Build as a shared library\")\n  set(BUILD_TESTING OFF CACHE INTERNAL \"Skip building ArgumentParser tests\")\n  set(BUILD_EXAMPLES OFF CACHE INTERNAL \"Skip building ArgumentParser examples\")\n  FetchContent_MakeAvailable(ArgumentParser)\nendblock()\n```\n\n----------------------------------------\n\nTITLE: SIL Instruction: load_borrow\nDESCRIPTION: Creates a borrowed scope for reading a value from memory. The borrowed value is read-only and must be paired with an end_borrow instruction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_28\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'load_borrow' sil-value\n\n%1 = load_borrow %0 : $*T\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Host Tool for LLDB Module Import Testing with CMake\nDESCRIPTION: Defines a Swift host tool called lldb-moduleimport-test that compiles lldb-moduleimport-test.cpp and assigns it to the testsuite-tools Swift component. The tool links against several Swift compiler libraries to support module import testing functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/lldb-moduleimport-test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(lldb-moduleimport-test\n  lldb-moduleimport-test.cpp\n  SWIFT_COMPONENT testsuite-tools\n)\ntarget_link_libraries(lldb-moduleimport-test\n                      PRIVATE\n                        swiftAST\n                        swiftASTSectionImporter\n                        swiftClangImporter\n                        swiftFrontend)\n```\n\n----------------------------------------\n\nTITLE: Field Layout and Descriptor Definitions\nDESCRIPTION: Type definitions for describing field layouts and descriptors, including support for heap references, opaque types, and value types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/RemoteMirrors.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nenum FieldLayout {\n  // the field contains a heap reference\n  case Strong, Weak, Unowned\n  // the field is an opaque binary blob, contents unknown.\n  case Opaque\n  // the field is a value type -- look inside recursively.\n  case ValueType(indirect field: FieldDescriptor)\n}\n\nstruct FieldDescriptor {\n  let size: UInt\n  let align: UInt\n  let offset: UInt\n  let layout: FieldLayout\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Empty Enum Layout\nDESCRIPTION: Example of how Swift represents an empty enum with no cases, which becomes an empty type in the LLVM IR representation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nenum Empty {} // => empty type\n```\n\n----------------------------------------\n\nTITLE: Defining AddressProjectionInstruction Protocol in Swift for SIL\nDESCRIPTION: Proposes an `AddressProjectionInstruction` protocol to classify instructions that project addresses, such as `StructElementAddrInst` and `TupleElementAddrInst`. It is suggested to have members like `fieldIndex`. Related to C++ utilities like `skipAddrProjections`. Status: To-do.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nAddressProjectionInstruction // Protocol (Proposed)\n  var fieldIndex: Int\n```\n\n----------------------------------------\n\nTITLE: CI Command Table for Linux Toolchain Building\nDESCRIPTION: Table showing commands for building Swift toolchain on various Linux distributions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nDistro         | Comment                                          | Check Status\n-------------- | ------------------------------------------------ | ----------------------------------------------\nUBI9           | @swift-ci Please Build Toolchain UBI9            | Swift Build Toolchain UBI9 (x86_64)\nCentOS 7       | @swift-ci Please Build Toolchain CentOS 7        | Swift Build Toolchain CentOS 7 (x86_64)\nUbuntu 18.04   | @swift-ci Please Build Toolchain Ubuntu 18.04    | Swift Build Toolchain Ubuntu 18.04 (x86_64)\nUbuntu 20.04   | @swift-ci Please Build Toolchain Ubuntu 20.04    | Swift Build Toolchain Ubuntu 20.04 (x86_64)\nUbuntu 22.04   | @swift-ci Please Build Toolchain Ubuntu 22.04    | Swift Build Toolchain Ubuntu 22.04 (x86_64)\nAmazon Linux 2 | @swift-ci Please Build Toolchain Amazon Linux 2  | Swift Build Toolchain Amazon Linux 2 (x86_64)\n```\n\n----------------------------------------\n\nTITLE: Defining FooStruct1 and Related Types\nDESCRIPTION: Creates a struct FooStruct1 with Int32 and Double properties, initializers, and a typealias for an UnsafeMutablePointer to this struct.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nstruct FooStruct1 {\n  var x: Int32\n  var y: Double\n  init()\n  init(x: Int32, y: Double)\n}\ntypealias FooStruct1Pointer = UnsafeMutablePointer<FooStruct1>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Extension Binding Dependencies in Swift\nDESCRIPTION: This code snippet illustrates how extension binding can require later phases of type checking, specifically when extensions refer to typealiases or nested types. It shows the challenges in resolving dependencies between extensions and type definitions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/DeclarationTypeChecker.rst#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nstruct A { }\nextension A.Inner { }\nextension A { struct Inner { } }\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Host Tool with Source Files and Components\nDESCRIPTION: Adds a Swift host tool named swift-ast-script with its source files. The tool is categorized as part of the 'tools' component and includes a ThinLTO flag for ld64.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-ast-script/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(swift-ast-script\n  ASTScriptConfiguration.cpp\n  ASTScriptParser.cpp\n  ASTScriptEvaluator.cpp\n  swift-ast-script.cpp\n  SWIFT_COMPONENT tools\n  THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY\n)\n```\n\n----------------------------------------\n\nTITLE: Protocol-based Type State Declaration Concept\nDESCRIPTION: A conceptual example of how typestate declarations might be implemented in Swift using a protocol-like syntax. Shows states as part of the protocol definition with transitions between states.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/TypeState.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprotocol fileproto {\n  open(...) closed;\n  close(...) opened;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Tool Subdirectories in CMake\nDESCRIPTION: Configures build directories for various Swift tools and components including core utilities, test tools, and platform-specific components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_tool_subdirectory(driver)\nadd_swift_tool_subdirectory(swift-compatibility-symbols)\nadd_swift_tool_subdirectory(swift-demangle)\nadd_swift_tool_subdirectory(swift-demangle-yamldump)\nadd_swift_tool_subdirectory(swift-def-to-strings-converter)\nadd_swift_tool_subdirectory(swift-serialize-diagnostics)\nadd_swift_tool_subdirectory(swift-ast-script)\nadd_swift_tool_subdirectory(swift-refactor)\nadd_swift_tool_subdirectory(libStaticMirror)\nadd_swift_tool_subdirectory(libMockPlugin)\nadd_swift_tool_subdirectory(swift-plugin-server)\nadd_swift_tool_subdirectory(swift-scan-test)\n```\n\n----------------------------------------\n\nTITLE: Storing Unowned References with store_unowned in SIL\nDESCRIPTION: Stores an unowned reference, incrementing the unowned reference count of the new object. Decrements the unowned reference count of the previously stored object if [init] is not specified. Storage must be initialized iff [init] is not specified.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_65\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'store_unowned' sil-value 'to' '[init]'? sil-operand\n\nstore_unowned %0 to [init] %1 : $*@sil_unowned T\n// T must be a reference type\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Borrow Scopes in Swift\nDESCRIPTION: This snippet illustrates how borrow scopes can be nested, with inner scopes contained within outer scopes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\n%1 = begin_borrow %0                // borrow introducer for %2, %3, %4\n%2 = begin_borrow %1                // borrow introducer for %3, %4\n%3 = tuple (%1, %2)                 // forwarded guaranteed value\n%4 = struct $S (%3)                 // forwarded guaranteed value\nend_borrow %2                       // end of borrow scope %2\nend_borrow %1                       // end of borrow scope %1\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Runtime Compilation Flags\nDESCRIPTION: Sets up core compilation flags for the Swift runtime with conditional additions based on various build options like leak checking and crash reporting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_runtime_compile_flags ${SWIFT_RUNTIME_CORE_CXX_FLAGS})\nset(swift_runtime_linker_flags ${SWIFT_RUNTIME_CORE_LINK_FLAGS})\n\nif(SWIFT_RUNTIME_CLOBBER_FREED_OBJECTS)\n  list(APPEND swift_runtime_compile_flags\n      \"-DSWIFT_RUNTIME_CLOBBER_FREED_OBJECTS=1\")\nendif()\n\nif(SWIFT_RUNTIME_CRASH_REPORTER_CLIENT)\n  list(APPEND swift_runtime_compile_flags\n      \"-DSWIFT_HAVE_CRASHREPORTERCLIENT=1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Debug Value Type Override in SIL\nDESCRIPTION: Example of overriding the default type inference for debug values with an explicit type annotation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_2\n\nLANGUAGE: sil\nCODE:\n```\ndebug_value %0 : $*T, let, name \"address\", type $UnsafeRawPointer\n```\n\n----------------------------------------\n\nTITLE: Extracting Fields from Structs in SIL\nDESCRIPTION: The struct_extract instruction extracts a physical field from a loadable struct value. It requires the struct operand and a declaration reference to the field to be extracted.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_129\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'struct_extract' sil-operand ',' sil-decl-ref\n\n%1 = struct_extract %0 : $S, #S.field\n// %0 must be of a loadable struct type $S\n// #S.field must be a physical 'var' field of $S\n// %1 will be of the type of the selected field of %0\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Directory Paths in CMake\nDESCRIPTION: Defines essential directory paths for the Swift project, including source, binary, include, and output directories. These paths are used throughout the build system to locate files and specify where outputs should be placed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_58\n\nLANGUAGE: cmake\nCODE:\n```\nget_filename_component(SWIFT_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR} REALPATH)\nset(SWIFT_BINARY_DIR \"${CMAKE_CURRENT_BINARY_DIR}\")\nset(SWIFT_CMAKE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\nset(SWIFT_MAIN_INCLUDE_DIR \"${SWIFT_SOURCE_DIR}/include\")\nset(SWIFT_SHIMS_INCLUDE_DIR \"${SWIFT_SOURCE_DIR}/stdlib/public/SwiftShims\")\nset(SWIFT_INCLUDE_DIR \"${CMAKE_CURRENT_BINARY_DIR}/include\")\n\nif (NOT BOOTSTRAPPING_MODE AND SWIFT_ENABLE_SWIFT_IN_SWIFT)\n  message(FATAL_ERROR \"turning off bootstrapping is not supported anymore\")\nendif()\n\nset(SWIFT_RUNTIME_OUTPUT_INTDIR \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin\")\nset(SWIFT_LIBRARY_OUTPUT_INTDIR \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Defining CastInstruction Protocol in Swift for SIL\nDESCRIPTION: Proposes a `CastInstruction` protocol to group various SIL casting instructions like `UpcastInst`, `UncheckedRefCastInst`, etc. Details, including members defining ownership behavior (e.g., forwarding), are yet to be decided. Status: To-do.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\nCastInstruction // Protocol (Proposed)\n```\n\n----------------------------------------\n\nTITLE: End/Trunc Instruction Format\nDESCRIPTION: Bit layout for the end/truncate instruction that marks the end of backtrace data or indicates truncation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompactBacktraceFormat.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n   7   6   5   4   3   2   1   0\n ┌───────────────────────────┬───┐\n │ 0   0   0   0   0   0   0 │ t │  end (or trunc if t is 1)\n └───────────────────────────┴───┘\n```\n\n----------------------------------------\n\nTITLE: Creating Compatibility Symlink for Darwin Platforms\nDESCRIPTION: Sets up a symlink for backward compatibility on Darwin platforms, linking libswiftCompatibilitySpan.dylib to libswiftCore.dylib.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  foreach(sdk ${SWIFT_SDKS})\n    set(lib_dir \"${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n    set(lib_path \"${SWIFTLIB_DIR}/${lib_dir}\")\n    set(compat_lib_name \"${lib_path}/libswiftCompatibilitySpan.dylib\")\n\n    add_custom_command_target(unused_var\n                              CUSTOM_TARGET_NAME \"swiftCompatibilitySpan-symlink-${lib_dir}\"\n                              OUTPUT \"${compat_lib_name}\"\n                              COMMAND ${CMAKE_COMMAND} \"-E\" \"create_symlink\" \"${lib_path}/libswiftCore.dylib\" \"${compat_lib_name}\")\n    foreach(ARCH ${SWIFT_SDK_${sdk}_ARCHITECTURES})\n      add_dependencies(\"swiftCore-${lib_dir}-${ARCH}\" \"swiftCompatibilitySpan-symlink-${lib_dir}\")\n    endforeach()\n\n    swift_install_symlink_component(stdlib\n      LINK_NAME libswiftCompatibilitySpan.dylib\n      TARGET libswiftCore.dylib\n      DESTINATION \"lib/swift/${lib_dir}\")\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Connecting to SQLite Database using Command Line\nDESCRIPTION: Opens the SQLite command-line interface, connecting to the specified database file (`your_database.db`) where the optimizer counters have been previously stored using the provided script. This allows for interactive execution of SQL queries against the counter data.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsqlite3 your_database.db\n```\n\n----------------------------------------\n\nTITLE: Implementing replaceSubrange Method with @preserve_unique Attribute\nDESCRIPTION: Shows the implementation of a replaceSubrange method with the @preserve_unique attribute for maintaining uniqueness state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: ArrayStorage\n\n  @preserve_unique\n  mutating func replaceSubrange<\n    C : CollectionType where C.Iterator.Element == T\n  >(\n    _ subRange: Range<Int>, with newElements: C\n  ) { ... }\n\n  // We could also mark the following function as @preserve_unique\n  // but we have an attribute for this function that better describes it\n  // allowing for more optimization. (See @get_subobject)\n  @preserve_unique\n  func getElement(_ index: Int) -> T {\n    return storage.elementAt(index)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Notes Source Files in CMake\nDESCRIPTION: Defines source API notes files and configures the output directory path for the Swift library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/apinotes/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(sources\n  Dispatch.apinotes\n  os.apinotes\n)\n\nset(output_dir \"${SWIFTLIB_DIR}/apinotes\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Dependencies for SourceKitSupport in CMake\nDESCRIPTION: Links the SourceKitSupport library with its private dependencies using target_link_libraries. These dependencies include swiftBasic for Swift language support and clangBasic/clangRewrite for Clang functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/lib/Support/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(SourceKitSupport PRIVATE\n  swiftBasic\n  clangBasic\n  clangRewrite)\n```\n\n----------------------------------------\n\nTITLE: Basic Trailing Closure Syntax in Swift\nDESCRIPTION: Demonstrates the basic syntax for using trailing closures in Swift, showing how the first closure argument label is omitted while subsequent closure labels are required.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/trailing-closure-matching.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc animate(\n  withDuration duration: Double, \n  animations: () -> Void, \n  completion: (() -> Void)? = nil\n) { /* ... */ }\n\nanimate(withDuration: 0.3) /* `animations:` is unwritten. */ {\n  // Animate something.\n} completion: {\n  // Completion handler.\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Lost Debug Variable Counters With Swift Compiler - Shell\nDESCRIPTION: This snippet shows how to enable tracking of lost debug variables during optimization in the Swift compiler using the '-Xllvm -sil-stats-lost-variables' flag. This counter is solely for lost variables, reflecting variables present earlier in a function but eliminated through optimizations. The flag is not compatible with threshold-based filtering or with counting all types of debug variables; it exclusively logs lost variable statistics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -sil-stats-lost-variables\n```\n\n----------------------------------------\n\nTITLE: Swift Source File Header Template\nDESCRIPTION: Standard license and copyright header template required for all Swift source files in the Swift.org project. Includes copyright notice, license information and links to project documentation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n//===----------------------------------------------------------------------===//\n//\n// This source file is part of the Swift.org open source project\n//\n// Copyright (c) 2024 Apple Inc. and the Swift project authors\n// Licensed under Apache License v2.0 with Runtime Library Exception\n//\n// See https://swift.org/LICENSE.txt for license information\n// See https://swift.org/CONTRIBUTORS.txt for the list of Swift project authors\n//\n//===----------------------------------------------------------------------===//\n```\n\n----------------------------------------\n\nTITLE: Exporting Swift Syntax Targets in CMake\nDESCRIPTION: Exports the Swift Syntax module targets with a namespace for use in other CMake projects. It generates a SwiftSyntaxConfig.cmake file in the build directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftSyntax/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nexport(TARGETS ${SWIFT_SYNTAX_MODULES}\n       NAMESPACE SwiftSyntax::\n       FILE ${CMAKE_BINARY_DIR}/cmake/modules/SwiftSyntaxConfig.cmake\n       EXPORT_LINK_INTERFACE_LIBRARIES)\n```\n\n----------------------------------------\n\nTITLE: SIL Representation of Reference Counting Race Condition\nDESCRIPTION: This SIL (Swift Intermediate Language) code demonstrates how two threads executing the same code could both load the same object reference, then both try to release it, leading to a double-free error.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_1\n\nLANGUAGE: sil\nCODE:\n```\n%10 = global_addr @singleton : $*Bird\n\nbb:\n  %49 = alloc_ref $Bird\n  %51 = load %10 : $*Bird\n  store %49 to %10 : $*Bird\n  strong_release %51 : $Bird\n  br bb\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Swift Core Library Configuration\nDESCRIPTION: Adds platform-specific link libraries and compiler flags for different operating systems like Cygwin, FreeBSD, Linux, and Windows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_PRIMARY_VARIANT_SDK STREQUAL \"CYGWIN\")\n  execute_process(COMMAND \"cygpath\" \"-u\" \"$ENV{SYSTEMROOT}\" OUTPUT_VARIABLE ENV_SYSTEMROOT)\n  list(APPEND swift_core_private_link_libraries \"${ENV_SYSTEMROOT}/system32/psapi.dll\")\nelseif(SWIFT_PRIMARY_VARIANT_SDK STREQUAL \"FREEBSD\")\n  find_library(EXECINFO_LIBRARY execinfo)\n  list(APPEND swift_core_private_link_libraries ${EXECINFO_LIBRARY})\nelseif(SWIFT_PRIMARY_VARIANT_SDK STREQUAL \"LINUX\")\n  if(SWIFT_BUILD_STATIC_STDLIB)\n    list(APPEND swift_core_private_link_libraries)\n  endif()\nelseif(SWIFT_PRIMARY_VARIANT_SDK STREQUAL \"WINDOWS\")\n  list(APPEND swift_core_private_link_libraries shell32;DbgHelp;Synchronization)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding XCTest to PATH on Windows\nDESCRIPTION: This command adds the XCTest build directory to the system PATH environment variable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_12\n\nLANGUAGE: cmd\nCODE:\n```\npath S:\\b\\4;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Standard Library Source Files in CMake\nDESCRIPTION: This CMake code block defines the source files for the Swift standard library, categorizing them as either 'EMBEDDED' or 'NORMAL'. It uses the split_embedded_sources function to separate the sources into SWIFTLIB_EMBEDDED_SOURCES and SWIFTLIB_SOURCES.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nsplit_embedded_sources(\n  OUT_LIST_EMBEDDED SWIFTLIB_EMBEDDED_SOURCES\n  OUT_LIST_NORMAL SWIFTLIB_SOURCES\n\n  ### \"ESSENTIAL\" SOURCES\n  ### -- PLEASE KEEP THIS LIST IN ALPHABETICAL ORDER ###\n  # Some files can't be sorted alphabetically, see notes in the list below.\n  EMBEDDED Algorithm.swift\n  EMBEDDED ArrayBody.swift\n  EMBEDDED ArrayBuffer.swift\n  # ... (truncated for brevity)\n  EMBEDDED WriteBackMutableSlice.swift\n  EMBEDDED MigrationSupport.swift\n\n    ### \"NON-ESSENTIAL\" SOURCES, LAYERED ON TOP OF THE \"ESSENTIAL\" ONES\n    ### -- PLEASE KEEP THIS LIST IN ALPHABETICAL ORDER ###\n  EMBEDDED Availability.swift\n  EMBEDDED CollectionDifference.swift\n  # ... (truncated for brevity)\n  EMBEDDED Zip.swift\n    NORMAL \"${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c\"\n  )\n```\n\n----------------------------------------\n\nTITLE: Aliasing in C++ Const Member Functions\nDESCRIPTION: This snippet shows how aliasing in C++ can allow const-qualified member functions to indirectly mutate object state, which is difficult to detect statically.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_41\n\nLANGUAGE: c++\nCODE:\n```\nclass SneakyMutation {\nprivate:\n  int value = 0;\npublic:\n  void mutateSneakily(SneakyMutation *other) const {\n    other->value = this->value + 1;\n    // What if `other` happens to be equal to `this`? In that case, a const\n    // member function has mutated `this`!\n  }\n};\n\nvoid test() {\n  SneakyMutation sm;\n\n  // A const method mutates the object that it is invoked on:\n  sm.mutateSneakily(&sm);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks by Name and Number in Swift\nDESCRIPTION: Demonstrates how to run a specific benchmark by its name (even if it matches skip-tags) or by its index number. This tests the benchmark selection capabilities of Benchmark_O.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O Existential.Mutating.Ref1 --list \\\nRUN:              | %FileCheck %s --check-prefix NAMEDSKIP\nNAMEDSKIP: Existential.Mutating.Ref1\n\nRUN: %Benchmark_O 1 --list | %FileCheck %s --check-prefix RUNBYNUMBER\nRUNBYNUMBER: Ackermann\n```\n\n----------------------------------------\n\nTITLE: Defining BidirectionalIndexType Protocol in Swift\nDESCRIPTION: This snippet shows the BidirectionalIndexType protocol which refines ForwardIndexType by adding support for reverse traversal. It adds the predecessor() method to enable backward movement through a collection.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SequencesAndCollections.rst#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nprotocol BidirectionalIndexType : ForwardIndexType {\n  func predecessor() -> Self\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Swift Compiler Snapshots Using URL Patterns\nDESCRIPTION: Examples demonstrating how to construct URLs to download historical Swift compiler snapshots. These snapshots can be used for bisecting performance regressions across compiler versions without needing to build the compiler from source.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nhttps://swift.org/builds/development/xcode/swift-DEVELOPMENT-SNAPSHOT-2017-06-09-a/swift-DEVELOPMENT-SNAPSHOT-2017-06-09-a-osx.pkg\n```\n\nLANGUAGE: shell\nCODE:\n```\nhttps://swift.org/builds/swift-4.0-branch/ubuntu1604/swift-4.0-DEVELOPMENT-SNAPSHOT-2017-07-10-a/swift-4.0-DEVELOPMENT-SNAPSHOT-2017-07-10-a-ubuntu16.04.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing Swift toolchain on Windows\nDESCRIPTION: This command runs the 'ninja install' command to install the Swift toolchain on Windows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_24\n\nLANGUAGE: cmd\nCODE:\n```\nninja -C S:\\b\\1 install\n```\n\n----------------------------------------\n\nTITLE: Bypassing Access Control with @_private\nDESCRIPTION: Demonstrates how to use the @_private attribute to bypass access control and allow access to private declarations in imported modules. The imported module must be compiled with -Xfrontend -enable-private-imports for this to work.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\n@_private(sourceFile: \"FileName.swift\")\n```\n\n----------------------------------------\n\nTITLE: Deallocating Pack Metadata Allocated with alloc_pack_metadata in Swift SIL - swift\nDESCRIPTION: 'dealloc_pack_metadata' finalizes cleanup of on-stack pack metadata created during IRGen's last lowering pass. The operand must be an 'alloc_pack_metadata' instruction result and is only valid in Lowered SIL. Proper cleanup ensures compliance with stack discipline and metadata integrity.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'dealloc_pack_metadata' sil-operand\\n\\ndealloc_pack_metadata $0 : $*()\n```\n\n----------------------------------------\n\nTITLE: Swift Protocol Conformance Type Trait Definition\nDESCRIPTION: Defines the swift::conformsTo type trait, which checks if a Swift type (proxied by a C++ type) conforms to a specific Swift protocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_74\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<class T, class P>\ninline constexpr const bool swift::conformsTo\n```\n\n----------------------------------------\n\nTITLE: Built-in String Literal Protocol Definition\nDESCRIPTION: Defines the internal _ExpressibleByBuiltinStringLiteral protocol used by the Swift compiler for low-level string literal handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Literals.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\npublic protocol _ExpressibleByBuiltinStringLiteral\n  : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral {\n\n  init(\n      _builtinStringLiteral start: Builtin.RawPointer,\n      utf8CodeUnitCount: Builtin.Word,\n      isASCII: Builtin.Int1)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Case Mapping for Greek Sigma\nDESCRIPTION: This snippet defines the conditional case mapping for the Greek letter sigma, which has a special final form. It includes rules for handling the final sigma in different case transformations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n03A3; 03C2; 03A3; 03A3; Final_Sigma; # GREEK CAPITAL LETTER SIGMA\n\n# Note: the following cases for non-final are already in the UnicodeData.txt file.\n\n# 03A3; 03C3; 03A3; 03A3; # GREEK CAPITAL LETTER SIGMA\n# 03C3; 03C3; 03A3; 03A3; # GREEK SMALL LETTER SIGMA\n# 03C2; 03C2; 03A3; 03A3; # GREEK SMALL LETTER FINAL SIGMA\n```\n\n----------------------------------------\n\nTITLE: Simplified Locator Path for Function Call With Tuple Return\nDESCRIPTION: Shows the locator path after simplification for a case where a function returns a tuple and a tuple element causes a type mismatch. This demonstrates how the locator identifies the relevant component even when it's not directly visible in the source.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TypeChecker.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n  function application of g -> tuple element #0\n```\n\n----------------------------------------\n\nTITLE: Exception for Long Lines in String Literals - Swift\nDESCRIPTION: This snippet highlights an exception to the strict 80-character line limit for string literals in Swift, particularly for error/precondition messages. It demonstrates both a single-line literal exceeding the limit and an alternative multi-line string literal. The code is meant to show stylistic options rather than implement logic, focusing on flexibility for readability of long messages in assertions or precondition checks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n      // OK\n      _precondition(                                                           |\n        buffer.baseAddress == firstElementAddress,                             |\n        \"Can't reassign buffer in Array(unsafeUninitializedCapacity:initializingWith:)\"\n      )                                                                        |\n```\n\nLANGUAGE: swift\nCODE:\n```\n      // Also OK, although spending 4 lines on the message is a bit much       |\n      _precondition(                                                           |\n        buffer.baseAddress == firstElementAddress,                             |\n        \"\"\"\"                                                                   |\n        Can't reassign buffer in \\                                             |\n        Array(unsafeUninitializedCapacity:initializingWith:)                   |\n        \"\"\"\"                                                                   |\n      )                                                                        |\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Documentation Target with Sphinx\nDESCRIPTION: Creates a custom target for building HTML documentation using Sphinx if the Sphinx executable is available. Includes a warning message if Sphinx is not found.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SPHINX_EXECUTABLE)\n  add_custom_target(docs_html ALL\n    ${SPHINX_EXECUTABLE} ${SPHINX_ARGS} -b html\n      . ${CMAKE_BINARY_DIR}/docs/html\n    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}\n    COMMENT \"Building HTML documentation\")\nelse()\n  message(WARNING \"Unable to find sphinx-build program. Not building docs\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Witness Method SIL Instruction\nDESCRIPTION: Looks up protocol method implementation for generic type variables constrained by that protocol. Result is generic on Self archetype.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_95\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'witness_method' sil-method-attributes?\n                      sil-type ',' sil-decl-ref ':' sil-type\n\n%1 = witness_method $T, #Proto.method \n  : $@convention(witness_method) <Self: Proto> U -> V\n// $T must be an archetype\n// #Proto.method must be a reference to a method of one of the protocol\n//   constraints on T\n// <Self: Proto> U -> V must be the type of the referenced method,\n//   generic on Self\n// %1 will be of type $@convention(thin) <Self: Proto> U -> V\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to SwiftCore in CMake\nDESCRIPTION: Specifies the libraries to link with SwiftCore, both privately and publicly. It includes conditional linking based on the platform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftCore\n  PRIVATE\n    swiftRuntime\n    swiftLLVMSupport\n    swiftDemangling\n    swiftStdlibStubs\n    swiftThreading\n    $<$<NOT:$<PLATFORM_ID:Darwin>>:swiftrt$<$<PLATFORM_ID:Windows>:T>>\n  PUBLIC\n    swiftShims)\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Executor Settings\nDESCRIPTION: Handles configuration for different global executor types (dispatch, singlethreaded, hooked, none) and sets appropriate compiler flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${SWIFT_CONCURRENCY_GLOBAL_EXECUTOR}\" STREQUAL \"dispatch\")\n  if(NOT CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n    include_directories(AFTER\n                          ${SWIFT_PATH_TO_LIBDISPATCH_SOURCE})\n    list(APPEND swift_concurrency_link_libraries\n      dispatch)\n  endif()\nelseif(\"${SWIFT_CONCURRENCY_GLOBAL_EXECUTOR}\" STREQUAL \"singlethreaded\" OR\n       \"${SWIFT_CONCURRENCY_GLOBAL_EXECUTOR}\" STREQUAL \"hooked\" OR\n       \"${SWIFT_CONCURRENCY_GLOBAL_EXECUTOR}\" STREQUAL \"none\")\n  list(APPEND SWIFT_RUNTIME_CONCURRENCY_C_FLAGS\n    \"-DSWIFT_CONCURRENCY_ENABLE_DISPATCH=0\")\nelse()\n  message(FATAL_ERROR \"Invalid value for SWIFT_CONCURRENCY_GLOBAL_EXECUTOR (\\\"${SWIFT_CONCURRENCY_GLOBAL_EXECUTOR}\\\").\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mark Function Escape Instruction in SIL\nDESCRIPTION: Specifies the mark_function_escape instruction used to indicate function closure over symbolic memory locations, supporting initialization analysis for global and instance variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_38\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'mark_function_escape' sil-operand (',' sil-operand)\n\nmark_function_escape %1 : $*T\n```\n\n----------------------------------------\n\nTITLE: Automatic Error Propagation in Java using Exceptions\nDESCRIPTION: Shows automatic error propagation using Java's exception handling system, where errors are propagated implicitly through the call stack.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nString next = readline();\n```\n\n----------------------------------------\n\nTITLE: Function Type Syntax in Swift\nDESCRIPTION: Shows the syntax for representing a function type in Swift, which is a non-nominal type. This example represents a function that takes an Int parameter and returns a String.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/nominal-types.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n(Int) -> (String)\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Swift Standard Library Build in CMake\nDESCRIPTION: This snippet sets up the build configuration for the Swift embedded standard library. It defines custom targets, sets various build options, and configures availability definitions for embedded environments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)\n  add_custom_target(embedded-stdlib)\n  add_dependencies(embedded-libraries embedded-stdlib)\n\n  set(SWIFT_ENABLE_REFLECTION OFF)\n  set(SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT OFF)\n  set(SWIFT_STDLIB_STABLE_ABI OFF)\n  set(SWIFT_STDLIB_ENABLE_OBJC_INTEROP OFF)\n  set(SWIFT_STDLIB_ENABLE_VECTOR_TYPES OFF)\n\n  # Under Embedded Swift, all stdlib APIs should be available always. Replace\n  # all availability macros with very very old OS versions.\n  set(SWIFT_STDLIB_AVAILABILITY_DEFINITIONS_EMBEDDED)\n  foreach(def ${SWIFT_STDLIB_AVAILABILITY_DEFINITIONS})\n    string(REGEX REPLACE \":.*\" \":macOS 10.9, iOS 7.0, watchOS 2.0, tvOS 9.0, visionOS 1.0\" replaced \"${def}\")\n    list(APPEND SWIFT_STDLIB_AVAILABILITY_DEFINITIONS_EMBEDDED \"${replaced}\")\n  endforeach()\n  set(SWIFT_STDLIB_AVAILABILITY_DEFINITIONS \"${SWIFT_STDLIB_AVAILABILITY_DEFINITIONS_EMBEDDED}\")\n```\n\n----------------------------------------\n\nTITLE: Building Yams with CMake and Ninja on Windows\nDESCRIPTION: This snippet configures and builds the Yams project using CMake and Ninja. It sets various Swift-related dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_19\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B S:\\b\\7 ^\n  -D BUILD_SHARED_LIBS=YES ^\n  -D CMAKE_BUILD_TYPE=Release ^\n  -D CMAKE_INSTALL_PREFIX=C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr ^\n  -D CMAKE_MT=mt ^\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\n  -D dispatch_DIR=S:\\b\\2\\cmake\\modules ^\n  -D Foundation_DIR=S:\\b\\3\\cmake\\modules ^\n  -D XCTest_DIR=S:\\b\\4\\cmake\\modules ^\n  -G Ninja ^\n  -S S:\\Yams\n\nninja -C S:\\b\\7\n```\n\n----------------------------------------\n\nTITLE: Linking Private Dependencies to swiftDependencyScan in CMake\nDESCRIPTION: Specifies private linkage dependencies for the swiftDependencyScan library. These dependencies (swiftClangImporter, swiftAST, swiftSerialization) are used internally by the library but not exposed to consumers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/DependencyScan/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftDependencyScan PRIVATE\n  swiftClangImporter\n  swiftAST\n  swiftSerialization)\n```\n\n----------------------------------------\n\nTITLE: Creating swiftDependencyScanImpl Static Library in CMake\nDESCRIPTION: Defines a static library named swiftDependencyScanImpl using the add_swift_host_library command. This library includes DependencyScanJSON.cpp and StringUtils.cpp source files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/DependencyScan/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftDependencyScanImpl STATIC\n  DependencyScanJSON.cpp\n  StringUtils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building Swift Toolchain on macOS/Linux\nDESCRIPTION: Shell command for building a Swift toolchain using the build-toolchain script. The command creates a toolchain bundle with a specified prefix identifier that will be combined with the build date.\nSOURCE: https://github.com/swiftlang/swift/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n  $ ./swift/utils/build-toolchain $BUNDLE_PREFIX\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Swift on OpenBSD (Shell)\nDESCRIPTION: Installs required packages (bash, cmake, e2fsprogs, git, icu4c, ninja, py3-six, python3) using the OpenBSD package manager `pkg_add`. Requires root privileges (`doas`). These packages are prerequisites for building the Swift compiler toolchain.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OpenBSD.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ doas pkg_add bash cmake e2fsprogs git icu4c ninja py3-six python3\n```\n\n----------------------------------------\n\nTITLE: Running SIL Bug Reducer with SIL Reduction\nDESCRIPTION: This example shows how to run the bug_reducer.py script with the --reduce-sil option. It includes specifying the SDK, module name, work directory, and module cache, along with the Swift build directory and the generated SIB file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/bug_reducer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n./swift/utils/bug-reducer/bug_reducer.py \\\n    opt \\\n    --sdk=$(xcrun --sdk macosx --toolchain default --show-sdk-path) \\\n    --module-name=${MODULE_NAME} \\\n    --work-dir=${PWD}/bug_reducer \\\n    --module-cache=${PWD}/bug_reducer/module-cache \\\n    --reduce-sil \\\n    ${SWIFT_BUILD_DIR} \\\n    ${OUTPUT_SIB}\n```\n\n----------------------------------------\n\nTITLE: Unicode Grapheme Breaking Rules Test Cases\nDESCRIPTION: Test cases verifying grapheme cluster breaking behavior between different Unicode character classes including control characters, combining marks, spacing marks, and script-specific characters. Tests focus on breaking rules around ZWSP, ZWNJ, combining diacritical marks and script-specific characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_1\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0001 ÷ 0308 × 0A03 ÷\n÷ 0001 ÷ 1100 ÷\n÷ 0001 ÷ 0308 ÷ 1100 ÷\n÷ 0001 ÷ 1160 ÷\n÷ 0001 ÷ 0308 ÷ 1160 ÷\n÷ 0001 ÷ 11A8 ÷\n÷ 0001 ÷ 0308 ÷ 11A8 ÷\n÷ 0001 ÷ AC00 ÷\n÷ 0001 ÷ 0308 ÷ AC00 ÷\n÷ 0001 ÷ AC01 ÷\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Project Subdirectories in CMake\nDESCRIPTION: This CMake code adds three subdirectories to the build process: Core, SwiftLang, and Support. These directories contain the main components of the Swift programming language implementation that need to be built as part of the project.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/lib/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Core)\nadd_subdirectory(SwiftLang)\nadd_subdirectory(Support)\n```\n\n----------------------------------------\n\nTITLE: Canonical Generic Signature Example\nDESCRIPTION: Shows the minimal canonical form of generic constraints for collections with String elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n<C1, C2, C3 where C1: Collection, C2: Collection, C3: Collection,\n C1.Element == String, C2.Element == String, C3.Element == String>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Optimization Affecting Uniqueness Check Results\nDESCRIPTION: Example showing how incorrectly moving a retain operation before a uniqueness check can change program semantics by making the uniqueness check return false when it would have returned true.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_17\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  // refcount(%0) == 1\n  strong_retain %0 : $Builtin.NativeObject\n  // refcount(%0) == 2\n  is_unique %0 : $Builtin.NativeObject\n```\n\n----------------------------------------\n\nTITLE: Setting Up Swift Compatibility Library Build\nDESCRIPTION: Configures the swiftCompatibility50 static library build with specific compiler flags, deployment versions, and installation parameters for various Apple platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/Compatibility50/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(library_name \"swiftCompatibility50\")\n\nadd_swift_target_library(\"${library_name}\" STATIC\n  ProtocolConformance.cpp\n  Overrides.cpp\n\n  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}\n\n  C_COMPILE_FLAGS\n    ${CXX_COMPILE_FLAGS}\n    \"-DSWIFT_THREADING_IS_COMPATIBILITY_LIBRARY\"\n  LINK_FLAGS ${CXX_LINK_FLAGS}\n  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n\n  INSTALL_IN_COMPONENT compiler\n  INSTALL_WITH_SHARED)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Invalid @_effects(releasenone) Usage (External Release) in Swift\nDESCRIPTION: Demonstrates a Swift function unsuitable for `@_effects(releasenone)` because it causes an externally visible release. The local variable `releaseExternallyVisible` of type `SomeOtherObject` triggers its `deinit` upon going out of scope, which modifies the global variable `global`, violating the `releasenone` condition.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nfunc notAReleaseNoneFunction(x: Int) -> Int {\n  var releaseExternallyVisible = SomeOtherObject()\n  return x + releaseExternallyVisible.x\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BasicBlockRange in Swift for SIL\nDESCRIPTION: Defines `BasicBlockRange`, representing a region of the control-flow graph between a dominating 'begin' block and one or more 'end' blocks. It is designed for various backward block reachability analyses. This utility depends on `Stack`, `BasicBlockSet`, and `BasicBlockWorklist`. It relates to C++ utilities like `PrunedLiveBlocks` and `findJointPostDominatingSet()`. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nBasicBlockRange\n```\n\n----------------------------------------\n\nTITLE: Handling Ambiguity with Multiple Swift Namespace Enums\nDESCRIPTION: Demonstrates the ambiguity problem with Option 1 when both 'CppButton' and 'CppTextbox' are imported. The Swift compiler cannot resolve 'widgets.Button' because 'widgets' is defined in both modules, forcing explicit module qualification ('CppButton.widgets.Button').\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n// Usage example: ambiguities when we import both `CppButton` and `CppTextbox`.\n\nimport CppButton\nimport CppTextbox\n\nfunc makeButton() {\n  var b1 = Button() // error: no such type\n  var b2 = widgets.Button() // error: name `widgets` is ambiguous, did you mean `CppButton.widgets` or `CppTextbox.widgets`?\n  var b3 = CppButton.widgets.Button()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Alphabetic Character Ranges\nDESCRIPTION: This code snippet defines ranges of Unicode code points that are classified as alphabetic characters. Each line represents a range or a single code point, followed by the classification 'Alphabetic'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n10570..1057A  ; Alphabetic\n1057C..1058A  ; Alphabetic\n1058C..10592  ; Alphabetic\n10594..10595  ; Alphabetic\n10597..105A1  ; Alphabetic\n105A3..105B1  ; Alphabetic\n105B3..105B9  ; Alphabetic\n105BB..105BC  ; Alphabetic\n105C0..105F3  ; Alphabetic\n10600..10736  ; Alphabetic\n10740..10755  ; Alphabetic\n10760..10767  ; Alphabetic\n10780..10785  ; Alphabetic\n10787..107B0  ; Alphabetic\n107B2..107BA  ; Alphabetic\n10800..10805  ; Alphabetic\n10808         ; Alphabetic\n1080A..10835  ; Alphabetic\n10837..10838  ; Alphabetic\n1083C         ; Alphabetic\n1083F..10855  ; Alphabetic\n10860..10876  ; Alphabetic\n10880..1089E  ; Alphabetic\n108E0..108F2  ; Alphabetic\n108F4..108F5  ; Alphabetic\n10900..10915  ; Alphabetic\n10920..10939  ; Alphabetic\n10980..109B7  ; Alphabetic\n109BE..109BF  ; Alphabetic\n10A00         ; Alphabetic\n10A01..10A03  ; Alphabetic\n10A05..10A06  ; Alphabetic\n10A0C..10A0F  ; Alphabetic\n10A10..10A13  ; Alphabetic\n10A15..10A17  ; Alphabetic\n10A19..10A35  ; Alphabetic\n10A60..10A7C  ; Alphabetic\n10A80..10A9C  ; Alphabetic\n10AC0..10AC7  ; Alphabetic\n10AC9..10AE4  ; Alphabetic\n10B00..10B35  ; Alphabetic\n10B40..10B55  ; Alphabetic\n10B60..10B72  ; Alphabetic\n10B80..10B91  ; Alphabetic\n10C00..10C48  ; Alphabetic\n10C80..10CB2  ; Alphabetic\n10CC0..10CF2  ; Alphabetic\n10D00..10D23  ; Alphabetic\n10D24..10D27  ; Alphabetic\n10D4A..10D4D  ; Alphabetic\n10D4E         ; Alphabetic\n10D4F         ; Alphabetic\n10D50..10D65  ; Alphabetic\n10D69         ; Alphabetic\n10D6F         ; Alphabetic\n10D70..10D85  ; Alphabetic\n10E80..10EA9  ; Alphabetic\n10EAB..10EAC  ; Alphabetic\n10EB0..10EB1  ; Alphabetic\n10EC2..10EC4  ; Alphabetic\n10EFC         ; Alphabetic\n10F00..10F1C  ; Alphabetic\n10F27         ; Alphabetic\n10F30..10F45  ; Alphabetic\n10F70..10F81  ; Alphabetic\n10FB0..10FC4  ; Alphabetic\n10FE0..10FF6  ; Alphabetic\n11000         ; Alphabetic\n11001         ; Alphabetic\n11002         ; Alphabetic\n11003..11037  ; Alphabetic\n11038..11045  ; Alphabetic\n11071..11072  ; Alphabetic\n11073..11074  ; Alphabetic\n11075         ; Alphabetic\n11080..11081  ; Alphabetic\n11082         ; Alphabetic\n11083..110AF  ; Alphabetic\n110B0..110B2  ; Alphabetic\n110B3..110B6  ; Alphabetic\n110B7..110B8  ; Alphabetic\n110C2         ; Alphabetic\n110D0..110E8  ; Alphabetic\n11100..11102  ; Alphabetic\n11103..11126  ; Alphabetic\n11127..1112B  ; Alphabetic\n1112C         ; Alphabetic\n1112D..11132  ; Alphabetic\n11144         ; Alphabetic\n11145..11146  ; Alphabetic\n11147         ; Alphabetic\n11150..11172  ; Alphabetic\n11176         ; Alphabetic\n11180..11181  ; Alphabetic\n11182         ; Alphabetic\n11183..111B2  ; Alphabetic\n111B3..111B5  ; Alphabetic\n111B6..111BE  ; Alphabetic\n111BF         ; Alphabetic\n111C1..111C4  ; Alphabetic\n111CE         ; Alphabetic\n111CF         ; Alphabetic\n111DA         ; Alphabetic\n111DC         ; Alphabetic\n11200..11211  ; Alphabetic\n11213..1122B  ; Alphabetic\n1122C..1122E  ; Alphabetic\n1122F..11231  ; Alphabetic\n11232..11233  ; Alphabetic\n11234         ; Alphabetic\n11237         ; Alphabetic\n1123E         ; Alphabetic\n1123F..11240  ; Alphabetic\n11241         ; Alphabetic\n11280..11286  ; Alphabetic\n11288         ; Alphabetic\n1128A..1128D  ; Alphabetic\n1128F..1129D  ; Alphabetic\n1129F..112A8  ; Alphabetic\n112B0..112DE  ; Alphabetic\n112DF         ; Alphabetic\n112E0..112E2  ; Alphabetic\n112E3..112E8  ; Alphabetic\n11300..11301  ; Alphabetic\n11302..11303  ; Alphabetic\n11305..1130C  ; Alphabetic\n1130F..11310  ; Alphabetic\n11313..11328  ; Alphabetic\n1132A..11330  ; Alphabetic\n11332..11333  ; Alphabetic\n11335..11339  ; Alphabetic\n1133D         ; Alphabetic\n1133E..1133F  ; Alphabetic\n11340         ; Alphabetic\n11341..11344  ; Alphabetic\n11347..11348  ; Alphabetic\n1134B..1134C  ; Alphabetic\n11350         ; Alphabetic\n11357         ; Alphabetic\n1135D..11361  ; Alphabetic\n11362..11363  ; Alphabetic\n11380..11389  ; Alphabetic\n1138B         ; Alphabetic\n1138E         ; Alphabetic\n11390..113B5  ; Alphabetic\n113B7         ; Alphabetic\n113B8..113BA  ; Alphabetic\n113BB..113C0  ; Alphabetic\n113C2         ; Alphabetic\n113C5         ; Alphabetic\n113C7..113CA  ; Alphabetic\n113CC..113CD  ; Alphabetic\n113D1         ; Alphabetic\n113D3         ; Alphabetic\n11400..11434  ; Alphabetic\n11435..11437  ; Alphabetic\n11438..1143F  ; Alphabetic\n11440..11441  ; Alphabetic\n11443..11444  ; Alphabetic\n11445         ; Alphabetic\n11447..1144A  ; Alphabetic\n1145F..11461  ; Alphabetic\n11480..114AF  ; Alphabetic\n114B0..114B2  ; Alphabetic\n114B3..114B8  ; Alphabetic\n114B9         ; Alphabetic\n114BA         ; Alphabetic\n114BB..114BE  ; Alphabetic\n114BF..114C0  ; Alphabetic\n114C1         ; Alphabetic\n114C4..114C5  ; Alphabetic\n114C7         ; Alphabetic\n11580..115AE  ; Alphabetic\n115AF..115B1  ; Alphabetic\n115B2..115B5  ; Alphabetic\n115B8..115BB  ; Alphabetic\n115BC..115BD  ; Alphabetic\n115BE         ; Alphabetic\n115D8..115DB  ; Alphabetic\n115DC..115DD  ; Alphabetic\n11600..1162F  ; Alphabetic\n11630..11632  ; Alphabetic\n11633..1163A  ; Alphabetic\n1163B..1163C  ; Alphabetic\n1163D         ; Alphabetic\n1163E         ; Alphabetic\n11640         ; Alphabetic\n11644         ; Alphabetic\n11680..116AA  ; Alphabetic\n116AB         ; Alphabetic\n116AC         ; Alphabetic\n116AD         ; Alphabetic\n116AE..116AF  ; Alphabetic\n116B0..116B5  ; Alphabetic\n116B8         ; Alphabetic\n11700..1171A  ; Alphabetic\n1171D         ; Alphabetic\n1171E         ; Alphabetic\n1171F         ; Alphabetic\n11720..11721  ; Alphabetic\n11722..11725  ; Alphabetic\n11726         ; Alphabetic\n11727..1172A  ; Alphabetic\n11740..11746  ; Alphabetic\n11800..1182B  ; Alphabetic\n1182C..1182E  ; Alphabetic\n1182F..11837  ; Alphabetic\n11838         ; Alphabetic\n118A0..118DF  ; Alphabetic\n118FF..11906  ; Alphabetic\n11909         ; Alphabetic\n1190C..11913  ; Alphabetic\n11915..11916  ; Alphabetic\n11918..1192F  ; Alphabetic\n11930..11935  ; Alphabetic\n11937..11938  ; Alphabetic\n1193B..1193C  ; Alphabetic\n1193F         ; Alphabetic\n11940         ; Alphabetic\n11941         ; Alphabetic\n11942         ; Alphabetic\n119A0..119A7  ; Alphabetic\n119AA..119D0  ; Alphabetic\n119D1..119D3  ; Alphabetic\n119D4..119D7  ; Alphabetic\n119DA..119DB  ; Alphabetic\n119DC..119DF  ; Alphabetic\n119E1         ; Alphabetic\n119E3         ; Alphabetic\n119E4         ; Alphabetic\n11A00         ; Alphabetic\n11A01..11A0A  ; Alphabetic\n11A0B..11A32  ; Alphabetic\n11A35..11A38  ; Alphabetic\n11A39         ; Alphabetic\n11A3A         ; Alphabetic\n11A3B..11A3E  ; Alphabetic\n11A50         ; Alphabetic\n11A51..11A56  ; Alphabetic\n11A57..11A58  ; Alphabetic\n11A59..11A5B  ; Alphabetic\n11A5C..11A89  ; Alphabetic\n11A8A..11A96  ; Alphabetic\n11A97         ; Alphabetic\n11A9D         ; Alphabetic\n11AB0..11AF8  ; Alphabetic\n11BC0..11BE0  ; Alphabetic\n11C00..11C08  ; Alphabetic\n11C0A..11C2E  ; Alphabetic\n11C2F         ; Alphabetic\n11C30..11C36  ; Alphabetic\n11C38..11C3D  ; Alphabetic\n11C3E         ; Alphabetic\n11C40         ; Alphabetic\n11C72..11C8F  ; Alphabetic\n11C92..11CA7  ; Alphabetic\n11CA9         ; Alphabetic\n11CAA..11CB0  ; Alphabetic\n11CB1         ; Alphabetic\n11CB2..11CB3  ; Alphabetic\n11CB4         ; Alphabetic\n11CB5..11CB6  ; Alphabetic\n11D00..11D06  ; Alphabetic\n11D08..11D09  ; Alphabetic\n11D0B..11D30  ; Alphabetic\n11D31..11D36  ; Alphabetic\n11D3A         ; Alphabetic\n11D3C..11D3D  ; Alphabetic\n11D3F..11D41  ; Alphabetic\n11D43         ; Alphabetic\n11D46         ; Alphabetic\n11D47         ; Alphabetic\n11D60..11D65  ; Alphabetic\n11D67..11D68  ; Alphabetic\n11D6A..11D89  ; Alphabetic\n11D8A..11D8E  ; Alphabetic\n11D90..11D91  ; Alphabetic\n11D93..11D94  ; Alphabetic\n11D95         ; Alphabetic\n11D96         ; Alphabetic\n11D98         ; Alphabetic\n11EE0..11EF2  ; Alphabetic\n11EF3..11EF4  ; Alphabetic\n11EF5..11EF6  ; Alphabetic\n11F00..11F01  ; Alphabetic\n11F02         ; Alphabetic\n11F03         ; Alphabetic\n11F04..11F10  ; Alphabetic\n11F12..11F33  ; Alphabetic\n11F34..11F35  ; Alphabetic\n11F36..11F3A  ; Alphabetic\n11F3E..11F3F  ; Alphabetic\n11F40         ; Alphabetic\n11FB0         ; Alphabetic\n12000..12399  ; Alphabetic\n12400..1246E  ; Alphabetic\n12480..12543  ; Alphabetic\n12F90..12FF0  ; Alphabetic\n13000..1342F  ; Alphabetic\n13441..13446  ; Alphabetic\n13460..143FA  ; Alphabetic\n14400..14646  ; Alphabetic\n16100..1611D  ; Alphabetic\n1611E..16129  ; Alphabetic\n1612A..1612C  ; Alphabetic\n1612D..1612E  ; Alphabetic\n16800..16A38  ; Alphabetic\n16A40..16A5E  ; Alphabetic\n16A70..16ABE  ; Alphabetic\n16AD0..16AED  ; Alphabetic\n16B00..16B2F  ; Alphabetic\n16B40..16B43  ; Alphabetic\n16B63..16B77  ; Alphabetic\n16B7D..16B8F  ; Alphabetic\n16D40..16D42  ; Alphabetic\n16D43..16D6A  ; Alphabetic\n16D6B..16D6C  ; Alphabetic\n16E40..16E7F  ; Alphabetic\n16F00..16F4A  ; Alphabetic\n16F4F         ; Alphabetic\n16F50         ; Alphabetic\n16F51..16F87  ; Alphabetic\n16F8F..16F92  ; Alphabetic\n16F93..16F9F  ; Alphabetic\n16FE0..16FE1  ; Alphabetic\n16FE3         ; Alphabetic\n16FF0..16FF1  ; Alphabetic\n17000..187F7  ; Alphabetic\n18800..18CD5  ; Alphabetic\n18CFF..18D08  ; Alphabetic\n1AFF0..1AFF3  ; Alphabetic\n1AFF5..1AFFB  ; Alphabetic\n1AFFD..1AFFE  ; Alphabetic\n1B000..1B122  ; Alphabetic\n1B132         ; Alphabetic\n1B150..1B152  ; Alphabetic\n1B155         ; Alphabetic\n1B164..1B167  ; Alphabetic\n1B170..1B2FB  ; Alphabetic\n1BC00..1BC6A  ; Alphabetic\n1BC70..1BC7C  ; Alphabetic\n1BC80..1BC88  ; Alphabetic\n1BC90..1BC99  ; Alphabetic\n1BC9E         ; Alphabetic\n1D400..1D454  ; Alphabetic\n1D456..1D49C  ; Alphabetic\n1D49E..1D49F  ; Alphabetic\n1D4A2         ; Alphabetic\n1D4A5..1D4A6  ; Alphabetic\n1D4A9..1D4AC  ; Alphabetic\n1D4AE..1D4B9  ; Alphabetic\n1D4BB         ; Alphabetic\n1D4BD..1D4C3  ; Alphabetic\n1D4C5..1D505  ; Alphabetic\n1D507..1D50A  ; Alphabetic\n1D50D..1D514  ; Alphabetic\n1D516..1D51C  ; Alphabetic\n1D51E..1D539  ; Alphabetic\n1D53B..1D53E  ; Alphabetic\n1D540..1D544  ; Alphabetic\n1D546         ; Alphabetic\n1D54A..1D550  ; Alphabetic\n1D552..1D6A5  ; Alphabetic\n1D6A8..1D6C0  ; Alphabetic\n1D6C2..1D6DA  ; Alphabetic\n1D6DC..1D6FA  ; Alphabetic\n1D6FC..1D714  ; Alphabetic\n1D716..1D734  ; Alphabetic\n1D736..1D74E  ; Alphabetic\n1D750..1D76E  ; Alphabetic\n```\n\n----------------------------------------\n\nTITLE: Declaring FooEnum2 Variables in Swift\nDESCRIPTION: Declares two global read-only variables of type FooEnum2.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar FooEnum2X: FooEnum2 { get }\nvar FooEnum2Y: FooEnum2 { get }\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Fork as Git Remote using SSH (sh)\nDESCRIPTION: A Git command used within a shell to add a new remote repository named `my-remote`. This remote points to the user's personal fork (`username/swift`) on GitHub using the SSH protocol. Replace `username` with the actual GitHub username. Requires Git installed, a local clone, and SSH key setup with GitHub.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n# Using 'my-remote' as a placeholder name.\n\n# If you set up SSH in step 2\ngit remote add my-remote git@github.com:username/swift.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Threading Library in CMake\nDESCRIPTION: Defines the swiftThreading library, its source files, dependencies, and installation rules. It includes platform-specific threading implementations and links against swiftShims. The library is conditionally installed based on the build configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Threading/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftThreading OBJECT\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Threading/C11.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Threading/Linux.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Threading/Pthreads.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Threading/Win32.cpp\")\ntarget_link_libraries(swiftThreading PRIVATE swiftShims)\n\ntarget_include_directories(swiftThreading PRIVATE\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/include\")\n\nif(NOT BUILD_SHARED_LIBS)\n  install(TARGETS swiftThreading\n    EXPORT SwiftCoreTargets\n    COMPONENT SwiftCore_runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating C++ Function Template Usage in Swift\nDESCRIPTION: This snippet shows how C++ function templates are used in Swift, highlighting the compilation error when using generic type parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_59\n\nLANGUAGE: swift\nCODE:\n```\nfunc myGenericFunction<T>(_ t: T) {\n  functionTemplate(0) // OK: calls the `functionTemplate<int>` specialization.\n\n  functionTemplate(t) // compilation error: can't call a C++ function template, because we don't know what `T` is, and therefore, can't select which specialization to call.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FooEnum1 Structure in Swift\nDESCRIPTION: Creates a RawRepresentable and Equatable struct called FooEnum1 with initializers and a rawValue property based on UInt32.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  FooEnum1.  Bbb.\nstruct FooEnum1 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Unowned References with load_unowned in SIL\nDESCRIPTION: Loads an unowned reference, incrementing the strong reference count. Can optionally take the reference with [take], which decrements the unowned reference count and invalidates storage. Traps if strong reference count is not positive.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_64\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'load_unowned' '[take]'? sil-operand\n\n%1 = load_unowned [take] %0 : $*@sil_unowned T\n// T must be a reference type\n```\n\n----------------------------------------\n\nTITLE: Running Swift Test Suite via Path Update and Ninja - Batchfile\nDESCRIPTION: This script temporarily updates the PATH environment variable to include required runtime dependencies (ICU, compiled binaries) and then invokes Ninja to run the Swift test suite in the configured build directory. It must be run from a Developer Command Prompt with all previous steps completed. The 'check-swift' target triggers the standard Swift tests and assumes all required dependencies are discoverable via PATH.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_6\n\nLANGUAGE: Batchfile\nCODE:\n```\npath S:\\\\Library\\\\icu-67\\\\usr\\\\bin;S:\\\\b\\\\1\\\\bin;S:\\\\b\\\\1\\\\tools\\\\swift\\\\libdispatch-windows-x86_64-prefix\\\\bin;%PATH%;%ProgramFiles%\\\\Git\\\\usr\\\\bin\\nninja -C S:\\\\b\\\\1 check-swift\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Characters that Change when Uppercased\nDESCRIPTION: A comprehensive reference list of Unicode code points that transform when converted to uppercase. Each entry shows either an individual code point (e.g., 04EB) or a range (e.g., 0561..0587) followed by the comment 'Changes_When_Uppercased', indicating these characters have different uppercase forms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_17\n\nLANGUAGE: data\nCODE:\n```\n04EB          ; Changes_When_Uppercased\n04ED          ; Changes_When_Uppercased\n04EF          ; Changes_When_Uppercased\n04F1          ; Changes_When_Uppercased\n04F3          ; Changes_When_Uppercased\n04F5          ; Changes_When_Uppercased\n04F7          ; Changes_When_Uppercased\n04F9          ; Changes_When_Uppercased\n04FB          ; Changes_When_Uppercased\n04FD          ; Changes_When_Uppercased\n04FF          ; Changes_When_Uppercased\n0501          ; Changes_When_Uppercased\n0503          ; Changes_When_Uppercased\n0505          ; Changes_When_Uppercased\n0507          ; Changes_When_Uppercased\n0509          ; Changes_When_Uppercased\n050B          ; Changes_When_Uppercased\n050D          ; Changes_When_Uppercased\n050F          ; Changes_When_Uppercased\n0511          ; Changes_When_Uppercased\n0513          ; Changes_When_Uppercased\n0515          ; Changes_When_Uppercased\n0517          ; Changes_When_Uppercased\n0519          ; Changes_When_Uppercased\n051B          ; Changes_When_Uppercased\n051D          ; Changes_When_Uppercased\n051F          ; Changes_When_Uppercased\n0521          ; Changes_When_Uppercased\n0523          ; Changes_When_Uppercased\n0525          ; Changes_When_Uppercased\n0527          ; Changes_When_Uppercased\n0529          ; Changes_When_Uppercased\n052B          ; Changes_When_Uppercased\n052D          ; Changes_When_Uppercased\n052F          ; Changes_When_Uppercased\n0561..0587    ; Changes_When_Uppercased\n10D0..10FA    ; Changes_When_Uppercased\n10FD..10FF    ; Changes_When_Uppercased\n13F8..13FD    ; Changes_When_Uppercased\n1C80..1C88    ; Changes_When_Uppercased\n1C8A          ; Changes_When_Uppercased\n1D79          ; Changes_When_Uppercased\n1D7D          ; Changes_When_Uppercased\n1D8E          ; Changes_When_Uppercased\n1E01          ; Changes_When_Uppercased\n1E03          ; Changes_When_Uppercased\n1E05          ; Changes_When_Uppercased\n1E07          ; Changes_When_Uppercased\n1E09          ; Changes_When_Uppercased\n1E0B          ; Changes_When_Uppercased\n1E0D          ; Changes_When_Uppercased\n1E0F          ; Changes_When_Uppercased\n1E11          ; Changes_When_Uppercased\n1E13          ; Changes_When_Uppercased\n1E15          ; Changes_When_Uppercased\n1E17          ; Changes_When_Uppercased\n1E19          ; Changes_When_Uppercased\n1E1B          ; Changes_When_Uppercased\n1E1D          ; Changes_When_Uppercased\n1E1F          ; Changes_When_Uppercased\n1E21          ; Changes_When_Uppercased\n1E23          ; Changes_When_Uppercased\n1E25          ; Changes_When_Uppercased\n1E27          ; Changes_When_Uppercased\n1E29          ; Changes_When_Uppercased\n1E2B          ; Changes_When_Uppercased\n1E2D          ; Changes_When_Uppercased\n1E2F          ; Changes_When_Uppercased\n1E31          ; Changes_When_Uppercased\n1E33          ; Changes_When_Uppercased\n1E35          ; Changes_When_Uppercased\n1E37          ; Changes_When_Uppercased\n1E39          ; Changes_When_Uppercased\n1E3B          ; Changes_When_Uppercased\n1E3D          ; Changes_When_Uppercased\n1E3F          ; Changes_When_Uppercased\n1E41          ; Changes_When_Uppercased\n1E43          ; Changes_When_Uppercased\n1E45          ; Changes_When_Uppercased\n1E47          ; Changes_When_Uppercased\n1E49          ; Changes_When_Uppercased\n1E4B          ; Changes_When_Uppercased\n1E4D          ; Changes_When_Uppercased\n1E4F          ; Changes_When_Uppercased\n1E51          ; Changes_When_Uppercased\n1E53          ; Changes_When_Uppercased\n1E55          ; Changes_When_Uppercased\n1E57          ; Changes_When_Uppercased\n1E59          ; Changes_When_Uppercased\n1E5B          ; Changes_When_Uppercased\n1E5D          ; Changes_When_Uppercased\n1E5F          ; Changes_When_Uppercased\n1E61          ; Changes_When_Uppercased\n1E63          ; Changes_When_Uppercased\n1E65          ; Changes_When_Uppercased\n1E67          ; Changes_When_Uppercased\n1E69          ; Changes_When_Uppercased\n1E6B          ; Changes_When_Uppercased\n1E6D          ; Changes_When_Uppercased\n1E6F          ; Changes_When_Uppercased\n1E71          ; Changes_When_Uppercased\n1E73          ; Changes_When_Uppercased\n1E75          ; Changes_When_Uppercased\n1E77          ; Changes_When_Uppercased\n1E79          ; Changes_When_Uppercased\n1E7B          ; Changes_When_Uppercased\n1E7D          ; Changes_When_Uppercased\n1E7F          ; Changes_When_Uppercased\n1E81          ; Changes_When_Uppercased\n1E83          ; Changes_When_Uppercased\n1E85          ; Changes_When_Uppercased\n1E87          ; Changes_When_Uppercased\n1E89          ; Changes_When_Uppercased\n1E8B          ; Changes_When_Uppercased\n1E8D          ; Changes_When_Uppercased\n1E8F          ; Changes_When_Uppercased\n1E91          ; Changes_When_Uppercased\n1E93          ; Changes_When_Uppercased\n1E95..1E9B    ; Changes_When_Uppercased\n1EA1          ; Changes_When_Uppercased\n1EA3          ; Changes_When_Uppercased\n1EA5          ; Changes_When_Uppercased\n1EA7          ; Changes_When_Uppercased\n1EA9          ; Changes_When_Uppercased\n1EAB          ; Changes_When_Uppercased\n1EAD          ; Changes_When_Uppercased\n1EAF          ; Changes_When_Uppercased\n1EB1          ; Changes_When_Uppercased\n1EB3          ; Changes_When_Uppercased\n1EB5          ; Changes_When_Uppercased\n1EB7          ; Changes_When_Uppercased\n1EB9          ; Changes_When_Uppercased\n1EBB          ; Changes_When_Uppercased\n1EBD          ; Changes_When_Uppercased\n1EBF          ; Changes_When_Uppercased\n1EC1          ; Changes_When_Uppercased\n1EC3          ; Changes_When_Uppercased\n1EC5          ; Changes_When_Uppercased\n1EC7          ; Changes_When_Uppercased\n1EC9          ; Changes_When_Uppercased\n1ECB          ; Changes_When_Uppercased\n1ECD          ; Changes_When_Uppercased\n1ECF          ; Changes_When_Uppercased\n1ED1          ; Changes_When_Uppercased\n1ED3          ; Changes_When_Uppercased\n1ED5          ; Changes_When_Uppercased\n1ED7          ; Changes_When_Uppercased\n1ED9          ; Changes_When_Uppercased\n1EDB          ; Changes_When_Uppercased\n1EDD          ; Changes_When_Uppercased\n1EDF          ; Changes_When_Uppercased\n1EE1          ; Changes_When_Uppercased\n1EE3          ; Changes_When_Uppercased\n1EE5          ; Changes_When_Uppercased\n1EE7          ; Changes_When_Uppercased\n1EE9          ; Changes_When_Uppercased\n1EEB          ; Changes_When_Uppercased\n1EED          ; Changes_When_Uppercased\n1EEF          ; Changes_When_Uppercased\n1EF1          ; Changes_When_Uppercased\n1EF3          ; Changes_When_Uppercased\n1EF5          ; Changes_When_Uppercased\n1EF7          ; Changes_When_Uppercased\n1EF9          ; Changes_When_Uppercased\n1EFB          ; Changes_When_Uppercased\n1EFD          ; Changes_When_Uppercased\n1EFF..1F07    ; Changes_When_Uppercased\n1F10..1F15    ; Changes_When_Uppercased\n1F20..1F27    ; Changes_When_Uppercased\n1F30..1F37    ; Changes_When_Uppercased\n1F40..1F45    ; Changes_When_Uppercased\n1F50..1F57    ; Changes_When_Uppercased\n1F60..1F67    ; Changes_When_Uppercased\n1F70..1F7D    ; Changes_When_Uppercased\n1F80..1FB4    ; Changes_When_Uppercased\n1FB6..1FB7    ; Changes_When_Uppercased\n1FBC          ; Changes_When_Uppercased\n1FBE          ; Changes_When_Uppercased\n1FC2..1FC4    ; Changes_When_Uppercased\n1FC6..1FC7    ; Changes_When_Uppercased\n1FCC          ; Changes_When_Uppercased\n1FD0..1FD3    ; Changes_When_Uppercased\n1FD6..1FD7    ; Changes_When_Uppercased\n1FE0..1FE7    ; Changes_When_Uppercased\n1FF2..1FF4    ; Changes_When_Uppercased\n1FF6..1FF7    ; Changes_When_Uppercased\n1FFC          ; Changes_When_Uppercased\n214E          ; Changes_When_Uppercased\n2170..217F    ; Changes_When_Uppercased\n2184          ; Changes_When_Uppercased\n24D0..24E9    ; Changes_When_Uppercased\n2C30..2C5F    ; Changes_When_Uppercased\n2C61          ; Changes_When_Uppercased\n2C65..2C66    ; Changes_When_Uppercased\n2C68          ; Changes_When_Uppercased\n2C6A          ; Changes_When_Uppercased\n2C6C          ; Changes_When_Uppercased\n2C73          ; Changes_When_Uppercased\n2C76          ; Changes_When_Uppercased\n2C81          ; Changes_When_Uppercased\n2C83          ; Changes_When_Uppercased\n2C85          ; Changes_When_Uppercased\n2C87          ; Changes_When_Uppercased\n2C89          ; Changes_When_Uppercased\n2C8B          ; Changes_When_Uppercased\n2C8D          ; Changes_When_Uppercased\n2C8F          ; Changes_When_Uppercased\n2C91          ; Changes_When_Uppercased\n2C93          ; Changes_When_Uppercased\n2C95          ; Changes_When_Uppercased\n2C97          ; Changes_When_Uppercased\n2C99          ; Changes_When_Uppercased\n2C9B          ; Changes_When_Uppercased\n2C9D          ; Changes_When_Uppercased\n2C9F          ; Changes_When_Uppercased\n2CA1          ; Changes_When_Uppercased\n2CA3          ; Changes_When_Uppercased\n2CA5          ; Changes_When_Uppercased\n2CA7          ; Changes_When_Uppercased\n2CA9          ; Changes_When_Uppercased\n2CAB          ; Changes_When_Uppercased\n2CAD          ; Changes_When_Uppercased\n2CAF          ; Changes_When_Uppercased\n2CB1          ; Changes_When_Uppercased\n2CB3          ; Changes_When_Uppercased\n2CB5          ; Changes_When_Uppercased\n2CB7          ; Changes_When_Uppercased\n2CB9          ; Changes_When_Uppercased\n2CBB          ; Changes_When_Uppercased\n2CBD          ; Changes_When_Uppercased\n2CBF          ; Changes_When_Uppercased\n2CC1          ; Changes_When_Uppercased\n2CC3          ; Changes_When_Uppercased\n2CC5          ; Changes_When_Uppercased\n2CC7          ; Changes_When_Uppercased\n2CC9          ; Changes_When_Uppercased\n2CCB          ; Changes_When_Uppercased\n2CCD          ; Changes_When_Uppercased\n2CCF          ; Changes_When_Uppercased\n2CD1          ; Changes_When_Uppercased\n2CD3          ; Changes_When_Uppercased\n2CD5          ; Changes_When_Uppercased\n2CD7          ; Changes_When_Uppercased\n2CD9          ; Changes_When_Uppercased\n2CDB          ; Changes_When_Uppercased\n2CDD          ; Changes_When_Uppercased\n2CDF          ; Changes_When_Uppercased\n2CE1          ; Changes_When_Uppercased\n2CE3          ; Changes_When_Uppercased\n2CEC          ; Changes_When_Uppercased\n```\n\n----------------------------------------\n\nTITLE: Defining Outlined Memory Management Function Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for outlined memory management functions, including copy, consume, retain, release, and initialization operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= generic-signature? type 'WOy' // Outlined copy\nglobal ::= generic-signature? type 'WOe' // Outlined consume\nglobal ::= generic-signature? type 'WOr' // Outlined retain\nglobal ::= generic-signature? type 'WOs' // Outlined release\nglobal ::= generic-signature? type 'WOb' // Outlined initializeWithTake\nglobal ::= generic-signature? type 'WOc' // Outlined initializeWithCopy\nglobal ::= generic-signature? type 'WOC' // Outlined initializeWithCopy, not using value witness\nglobal ::= generic-signature? type 'WOd' // Outlined assignWithTake\nglobal ::= generic-signature? type 'WOD' // Outlined assignWithTake, not using value witness\nglobal ::= generic-signature? type 'WOf' // Outlined assignWithCopy\nglobal ::= generic-signature? type 'WOF' // Outlined assignWithCopy, not using value witness\nglobal ::= generic-signature? type 'WOh' // Outlined destroy\n```\n\n----------------------------------------\n\nTITLE: Implementing Slow Path for Resilient Inlinable Switch in Swift\nDESCRIPTION: This code snippet shows the implementation of the _roundSlowPath(_:) function, which serves as a fallback for handling new cases in non-frozen enums when using the Curiously Recursive Inlinable Switch Pattern (CRISP) in the Swift standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StandardLibraryProgrammersManual.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// Slow path for new cases that might have been inlined into an old\n// ABI-stable version of round(_:) called from a newer version. If this is\n// the case, this non-inlinable function will call into the _newer_ version\n// which _will_ support this rounding rule.\n@usableFromInline\ninternal mutating func _roundSlowPath(_ rule: FloatingPointRoundingRule) {\n  self.round(rule)\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existential Box Values in SIL\nDESCRIPTION: Projects value from boxed existential and binds opened archetype.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_160\n\nLANGUAGE: sil\nCODE:\n```\n%1 = open_existential_box_value %0 : $P to $@opened P\n```\n\n----------------------------------------\n\nTITLE: Constructing Option Sets with Verbose Syntax\nDESCRIPTION: Example showing the verbose syntax required to construct option sets using the struct approach, where each field requires ': true' to be specified.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nvar myOptions = MyOptions(Foo: true, Bar: true)\n```\n\n----------------------------------------\n\nTITLE: Defining Private and Public NSEnums in Swift\nDESCRIPTION: Declares a private enum and a public enum with Int raw values. The public enum includes a private case and a deprecated Swift 3 compatibility property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nenum __PrivNSEnum : Int {\n  init?(rawValue: Int)\n  var rawValue: Int { get }\n  typealias RawValue = Int\n  case A\n}\nenum NSEnum : Int {\n  init?(rawValue: Int)\n  var rawValue: Int { get }\n  typealias RawValue = Int\n  case __privA\n  @available(swift, obsoleted: 3, renamed: \"__privA\")\n  static var __PrivA: NSEnum { get }\n  case B\n}\n```\n\n----------------------------------------\n\nTITLE: Checking CMake Version (sh)\nDESCRIPTION: Runs the `cmake` command with the `--version` flag to display its installed version. This is used to verify that the CMake version meets the minimum requirement specified in the documentation (at least 3.19.6, or 3.24.2 for Xcode editing on macOS).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncmake --version\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Distributed Library Build in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for the swiftDistributed library. It defines dependencies, source files, compilation flags, and module dependencies for various platforms. The library is part of the Swift standard library and includes support for distributed actors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Distributed/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_BUILD_SDK_OVERLAY)\nset(swift_distributed_darwin_dependencies Darwin)\nelse()\nset(swift_distributed_darwin_dependencies)\nendif()\n\nset(swift_distributed_link_libraries\n  swiftCore)\n\n\nadd_swift_target_library(swiftDistributed ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB IMPORTS_NON_OSSA \n  DistributedActor.cpp\n  DistributedActor.swift\n  DistributedActorSystem.swift\n  DistributedAssertions.swift\n  DistributedDefaultExecutor.swift\n  DistributedMacros.swift\n  DistributedMetadata.swift\n  LocalTestingDistributedActorSystem.swift\n\n  SWIFT_MODULE_DEPENDS_IOS ${swift_distributed_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_OSX ${swift_distributed_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_TVOS ${swift_distributed_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_distributed_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK\n\n  LINK_LIBRARIES ${swift_distributed_link_libraries}\n\n  C_COMPILE_FLAGS\n    -DswiftDistributed_EXPORTS\n    -I${SWIFT_SOURCE_DIR}/stdlib/include\n\n  SWIFT_COMPILE_FLAGS\n    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    -parse-stdlib\n    -enable-experimental-feature AllowUnsafeAttribute\n    -strict-memory-safety\n\n  LINK_FLAGS\n    \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n\n  SWIFT_MODULE_DEPENDS _Concurrency\n  INSTALL_IN_COMPONENT stdlib\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Module-Level Optimizer Counters With Swift Compiler - Shell\nDESCRIPTION: This snippet demonstrates how to enable the recording of coarse-grained, module-level optimizer counters using a command-line flag for the Swift compiler. It requires passing the '-Xllvm -sil-stats-modules' flags on invocation. The counter data collected reflects only significant changes at the module level, as most optimizations affect individual functions. The expected result is a log of module-wide statistics; detailed instruction and function-level changes are not included.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-Xllvm -sil-stats-modules\n```\n\n----------------------------------------\n\nTITLE: Non-Differentiable Function Error Example\nDESCRIPTION: Demonstrates compiler error when attempting to differentiate a non-differentiable function (sinf) from another module that hasn't been marked as @differentiable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_57\n\nLANGUAGE: swift\nCODE:\n```\nlet y = derivative(at: 1.0) { x in\n    sinf(x)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Include and Library Directories for Configuration\nDESCRIPTION: Defines the include and library directories used for Swift compilation. These variables will be used in the generated CMake configuration files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/cmake/modules/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_INCLUDE_DIRS ${SWIFT_INCLUDE_DIR} ${SWIFT_MAIN_INCLUDE_DIR} ${SWIFT_SHIMS_INCLUDE_DIR})\nset(SWIFT_LIBRARY_DIRS ${SWIFT_LIBRARY_OUTPUT_INTDIR})\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Demangler Tool in CMake\nDESCRIPTION: Sets up the swift-demangle tool as a host tool, specifies its source file, LLVM components, and Swift component. It also links the tool with the swiftDemangling library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-demangle/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(swift-demangle\n  swift-demangle.cpp\n  LLVM_LINK_COMPONENTS support\n  SWIFT_COMPONENT compiler\n  )\ntarget_link_libraries(swift-demangle\n                      PRIVATE\n                        swiftDemangling)\n```\n\n----------------------------------------\n\nTITLE: Mutating Generator Function in Swift\nDESCRIPTION: Demonstrates how a generator co-routine could be implemented to support mutating iteration. The function yields mutable references to collection elements while maintaining the iteration state between yields.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nmutating generator iterateMutable() -> inout Element {\n  var i = startIndex, e = endIndex\n  while i != e {\n    yield &self[i]\n    self.formIndex(after: &i)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Benchmark Modules\nDESCRIPTION: Declares the list of single-source benchmark modules to be built, covering various performance test cases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_BENCH_MODULES\n    single-source/Ackermann\n    single-source/AngryPhonebook\n    single-source/AnyHashableWithAClass\n    # ... additional modules ...\n    cxx-source/CreateObjects\n)\n```\n\n----------------------------------------\n\nTITLE: Disassembling and Demangling a Dynamic Library (Shell)\nDESCRIPTION: Uses `objdump` to disassemble the code section (`-d`) of a Mach-O dynamic library (`/path/to/libcake.dylib`), specifying Intel syntax (`--x86-asm-syntax=intel`). The disassembly output is piped through `swift demangle` to convert mangled symbols, saving the final human-readable assembly to `libcake.S`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\n# Inspect disassembly of an existing dylib (AT&T syntax is the default)\nobjdump -d -macho --x86-asm-syntax=intel /path/to/libcake.dylib \\\n  | swift demangle > libcake.S\n```\n\n----------------------------------------\n\nTITLE: Aspirational C Enum Mapping to Swift Enum (Not Actual)\nDESCRIPTION: This snippet shows how C enums would ideally be mapped to Swift enums, but this is not the actual implementation due to various constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_26\n\nLANGUAGE: c\nCODE:\n```\n// C header.\n\n// Enum that is not explicitly marked as either open or closed.\nenum HomeworkExcuse {\n  EatenByPet,\n  ForgotAtHome,\n  ThoughtItWasDueNextWeek,\n};\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C header imported in Swift: aspiration, not an actual mapping!\n\nenum HomeworkExcuse: CUnsignedInt {\n  case EatenByPet\n  case ForgotAtHome\n  case ThoughtItWasDueNextWeek\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Flag for Non-Optimized Build Types\nDESCRIPTION: Adds a debug flag to the compilation flags if the build type is not optimized.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnittest/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nis_build_type_optimized(\"${SWIFT_STDLIB_BUILD_TYPE}\" IS_BUILD_TYPE_OPTIMIZED)\nif (NOT IS_BUILD_TYPE_OPTIMIZED)\n  list(APPEND swift_stdlib_unittest_compile_flags \"-DSWIFT_STDLIB_DEBUG\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Swift Language Features in CMake\nDESCRIPTION: Sets CMake options for various experimental Swift language features, including differentiable programming, concurrency, C++ interop, and distributed actors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_52\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING\n  \"Enable experimental Swift differentiable programming features\"\n  FALSE)\n\noption(SWIFT_IMPLICIT_CONCURRENCY_IMPORT\n  \"Implicitly import the Swift concurrency module\"\n  TRUE)\n\noption(SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY\n  \"Enable build of the Swift concurrency module\"\n  FALSE)\n\noption(SWIFT_ENABLE_EXPERIMENTAL_CXX_INTEROP\n  \"Enable experimental C++ interop modules\"\n  TRUE)\n\noption(SWIFT_ENABLE_CXX_INTEROP_SWIFT_BRIDGING_HEADER\n  \"Install the <swift/bridging> C++ interoperability header alongside compiler\"\n  TRUE)\n\noption(SWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED\n  \"Enable experimental distributed actors and functions\"\n  FALSE)\n```\n\n----------------------------------------\n\nTITLE: Defining FooEnum2 Structure with Associated Constants\nDESCRIPTION: Creates a RawRepresentable and Equatable struct called FooEnum2 with initializers, rawValue property, and associated constants FooEnum2X and FooEnum2Y.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nstruct FooEnum2 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\nvar FooEnum2X: FooEnum2 { get }\nvar FooEnum2Y: FooEnum2 { get }\n```\n\n----------------------------------------\n\nTITLE: Illustrating C++/Objective-C Landing Pad for Manual Cleanup\nDESCRIPTION: This C++ snippet demonstrates a conceptual landing pad within a function. When an exception occurs and isn't handled locally, control transfers here. It manually executes necessary cleanup actions, such as calling C++ destructors (`~SomeCXXType`) and releasing Objective-C objects (`objc_release`), before resuming the exception propagation using the unwind mechanism (`_Unwind_Resume`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n```c++\nvoid *exception = /*...*/;\nSomeCXXType::~SomeCXXType(&foo);\nobjc_release(bar);\nobjc_release(baz);\n_Unwind_Resume(exception);\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Builtin Float Library with CMake\nDESCRIPTION: Sets up CMake build configuration for the Swift Builtin float library. Includes source file GYB expansion, target properties, compile options, link libraries and installation rules. Handles platform-specific settings for Darwin and Windows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/clang/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ngyb_expand(float.swift.gyb float.swift)\n\nadd_library(swift_Builtin_float\n  float.swift\n  \"${PROJECT_SOURCE_DIR}/linker-support/magic-symbols-for-install-name.c\")\nset_target_properties(swift_Builtin_float PROPERTIES\n  Swift_MODULE_NAME _Builtin_float)\ntarget_compile_options(swift_Builtin_float PRIVATE\n  \"$<$<PLATFORM_ID:Darwin>:SHELL:-Xfrontend -module-abi-name -Xfrontend Darwin>\")\ntarget_link_libraries(swift_Builtin_float PRIVATE\n  $<$<PLATFORM_ID:Windows>:ClangModules>\n  swiftCore)\n\ninstall(TARGETS swift_Builtin_float\n  ARCHIVE DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  LIBRARY DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nemit_swift_interface(swift_Builtin_float)\ninstall_swift_interface(swift_Builtin_float)\n\nembed_manifest(swift_Builtin_float)\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Requirements with Get/Set Specifications\nDESCRIPTION: Example showing protocol property requirements with explicit get and set clauses for conformance rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/MutationModel.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Bitset {\n  var count: Int { get }\n  var intValue: Int { get set }\n  subscript(bitIndex: Int) -> Bool { get set }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Zero Numeric Value for Various Unicode Characters\nDESCRIPTION: This snippet defines the numeric value of zero for multiple Unicode characters across different scripts and number systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_1\n\nLANGUAGE: Unicode\nCODE:\n```\n0030          ; 0.0 ; ; 0 # Nd       DIGIT ZERO\n0660          ; 0.0 ; ; 0 # Nd       ARABIC-INDIC DIGIT ZERO\n06F0          ; 0.0 ; ; 0 # Nd       EXTENDED ARABIC-INDIC DIGIT ZERO\n07C0          ; 0.0 ; ; 0 # Nd       NKO DIGIT ZERO\n0966          ; 0.0 ; ; 0 # Nd       DEVANAGARI DIGIT ZERO\n09E6          ; 0.0 ; ; 0 # Nd       BENGALI DIGIT ZERO\n0A66          ; 0.0 ; ; 0 # Nd       GURMUKHI DIGIT ZERO\n0AE6          ; 0.0 ; ; 0 # Nd       GUJARATI DIGIT ZERO\n0B66          ; 0.0 ; ; 0 # Nd       ORIYA DIGIT ZERO\n0BE6          ; 0.0 ; ; 0 # Nd       TAMIL DIGIT ZERO\n0C66          ; 0.0 ; ; 0 # Nd       TELUGU DIGIT ZERO\n0C78          ; 0.0 ; ; 0 # No       TELUGU FRACTION DIGIT ZERO FOR ODD POWERS OF FOUR\n0CE6          ; 0.0 ; ; 0 # Nd       KANNADA DIGIT ZERO\n0D66          ; 0.0 ; ; 0 # Nd       MALAYALAM DIGIT ZERO\n0DE6          ; 0.0 ; ; 0 # Nd       SINHALA LITH DIGIT ZERO\n0E50          ; 0.0 ; ; 0 # Nd       THAI DIGIT ZERO\n0ED0          ; 0.0 ; ; 0 # Nd       LAO DIGIT ZERO\n0F20          ; 0.0 ; ; 0 # Nd       TIBETAN DIGIT ZERO\n1040          ; 0.0 ; ; 0 # Nd       MYANMAR DIGIT ZERO\n1090          ; 0.0 ; ; 0 # Nd       MYANMAR SHAN DIGIT ZERO\n17E0          ; 0.0 ; ; 0 # Nd       KHMER DIGIT ZERO\n17F0          ; 0.0 ; ; 0 # No       KHMER SYMBOL LEK ATTAK SON\n1810          ; 0.0 ; ; 0 # Nd       MONGOLIAN DIGIT ZERO\n1946          ; 0.0 ; ; 0 # Nd       LIMBU DIGIT ZERO\n19D0          ; 0.0 ; ; 0 # Nd       NEW TAI LUE DIGIT ZERO\n1A80          ; 0.0 ; ; 0 # Nd       TAI THAM HORA DIGIT ZERO\n1A90          ; 0.0 ; ; 0 # Nd       TAI THAM THAM DIGIT ZERO\n1B50          ; 0.0 ; ; 0 # Nd       BALINESE DIGIT ZERO\n1BB0          ; 0.0 ; ; 0 # Nd       SUNDANESE DIGIT ZERO\n1C40          ; 0.0 ; ; 0 # Nd       LEPCHA DIGIT ZERO\n1C50          ; 0.0 ; ; 0 # Nd       OL CHIKI DIGIT ZERO\n2070          ; 0.0 ; ; 0 # No       SUPERSCRIPT ZERO\n2080          ; 0.0 ; ; 0 # No       SUBSCRIPT ZERO\n2189          ; 0.0 ; ; 0 # No       VULGAR FRACTION ZERO THIRDS\n24EA          ; 0.0 ; ; 0 # No       CIRCLED DIGIT ZERO\n24FF          ; 0.0 ; ; 0 # No       NEGATIVE CIRCLED DIGIT ZERO\n3007          ; 0.0 ; ; 0 # Nl       IDEOGRAPHIC NUMBER ZERO\n6D1E          ; 0.0 ; ; 0 # Lo       CJK UNIFIED IDEOGRAPH-6D1E\n96F6          ; 0.0 ; ; 0 # Lo       CJK UNIFIED IDEOGRAPH-96F6\nA620          ; 0.0 ; ; 0 # Nd       VAI DIGIT ZERO\nA6EF          ; 0.0 ; ; 0 # Nl       BAMUM LETTER KOGHOM\nA8D0          ; 0.0 ; ; 0 # Nd       SAURASHTRA DIGIT ZERO\nA900          ; 0.0 ; ; 0 # Nd       KAYAH LI DIGIT ZERO\nA9D0          ; 0.0 ; ; 0 # Nd       JAVANESE DIGIT ZERO\nA9F0          ; 0.0 ; ; 0 # Nd       MYANMAR TAI LAING DIGIT ZERO\nAA50          ; 0.0 ; ; 0 # Nd       CHAM DIGIT ZERO\nABF0          ; 0.0 ; ; 0 # Nd       MEETEI MAYEK DIGIT ZERO\nF9B2          ; 0.0 ; ; 0 # Lo       CJK COMPATIBILITY IDEOGRAPH-F9B2\nFF10          ; 0.0 ; ; 0 # Nd       FULLWIDTH DIGIT ZERO\n1018A         ; 0.0 ; ; 0 # No       GREEK ZERO SIGN\n104A0         ; 0.0 ; ; 0 # Nd       OSMANYA DIGIT ZERO\n10D30         ; 0.0 ; ; 0 # Nd       HANIFI ROHINGYA DIGIT ZERO\n10D40         ; 0.0 ; ; 0 # Nd       GARAY DIGIT ZERO\n11066         ; 0.0 ; ; 0 # Nd       BRAHMI DIGIT ZERO\n110F0         ; 0.0 ; ; 0 # Nd       SORA SOMPENG DIGIT ZERO\n11136         ; 0.0 ; ; 0 # Nd       CHAKMA DIGIT ZERO\n111D0         ; 0.0 ; ; 0 # Nd       SHARADA DIGIT ZERO\n112F0         ; 0.0 ; ; 0 # Nd       KHUDAWADI DIGIT ZERO\n11450         ; 0.0 ; ; 0 # Nd       NEWA DIGIT ZERO\n114D0         ; 0.0 ; ; 0 # Nd       TIRHUTA DIGIT ZERO\n11650         ; 0.0 ; ; 0 # Nd       MODI DIGIT ZERO\n116C0         ; 0.0 ; ; 0 # Nd       TAKRI DIGIT ZERO\n116D0         ; 0.0 ; ; 0 # Nd       MYANMAR PAO DIGIT ZERO\n116DA         ; 0.0 ; ; 0 # Nd       MYANMAR EASTERN PWO KAREN DIGIT ZERO\n11730         ; 0.0 ; ; 0 # Nd       AHOM DIGIT ZERO\n118E0         ; 0.0 ; ; 0 # Nd       WARANG CITI DIGIT ZERO\n11950         ; 0.0 ; ; 0 # Nd       DIVES AKURU DIGIT ZERO\n11BF0         ; 0.0 ; ; 0 # Nd       SUNUWAR DIGIT ZERO\n11C50         ; 0.0 ; ; 0 # Nd       BHAIKSUKI DIGIT ZERO\n11D50         ; 0.0 ; ; 0 # Nd       MASARAM GONDI DIGIT ZERO\n11DA0         ; 0.0 ; ; 0 # Nd       GUNJALA GONDI DIGIT ZERO\n11F50         ; 0.0 ; ; 0 # Nd       KAWI DIGIT ZERO\n16130         ; 0.0 ; ; 0 # Nd       GURUNG KHEMA DIGIT ZERO\n16A60         ; 0.0 ; ; 0 # Nd       MRO DIGIT ZERO\n16AC0         ; 0.0 ; ; 0 # Nd       TANGSA DIGIT ZERO\n16B50         ; 0.0 ; ; 0 # Nd       PAHAWH HMONG DIGIT ZERO\n16D70         ; 0.0 ; ; 0 # Nd       KIRAT RAI DIGIT ZERO\n16E80         ; 0.0 ; ; 0 # No       MEDEFAIDRIN DIGIT ZERO\n1CCF0         ; 0.0 ; ; 0 # Nd       OUTLINED DIGIT ZERO\n1D2C0         ; 0.0 ; ; 0 # No       KAKTOVIK NUMERAL ZERO\n1D2E0         ; 0.0 ; ; 0 # No       MAYAN NUMERAL ZERO\n1D7CE         ; 0.0 ; ; 0 # Nd       MATHEMATICAL BOLD DIGIT ZERO\n1D7D8         ; 0.0 ; ; 0 # Nd       MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO\n1D7E2         ; 0.0 ; ; 0 # Nd       MATHEMATICAL SANS-SERIF DIGIT ZERO\n1D7EC         ; 0.0 ; ; 0 # Nd       MATHEMATICAL SANS-SERIF BOLD DIGIT ZERO\n1D7F6         ; 0.0 ; ; 0 # Nd       MATHEMATICAL MONOSPACE DIGIT ZERO\n1E140         ; 0.0 ; ; 0 # Nd       NYIAKENG PUACHUE HMONG DIGIT ZERO\n1E2F0         ; 0.0 ; ; 0 # Nd       WANCHO DIGIT ZERO\n1E4F0         ; 0.0 ; ; 0 # Nd       NAG MUNDARI DIGIT ZERO\n1E5F1         ; 0.0 ; ; 0 # Nd       OL ONAL DIGIT ZERO\n1E950         ; 0.0 ; ; 0 # Nd       ADLAM DIGIT ZERO\n1F100..1F101  ; 0.0 ; ; 0 # No   [2] DIGIT ZERO FULL STOP..DIGIT ZERO COMMA\n1F10B..1F10C  ; 0.0 ; ; 0 # No   [2] DINGBAT CIRCLED SANS-SERIF DIGIT ZERO..DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO\n1FBF0         ; 0.0 ; ; 0 # Nd       SEGMENTED DIGIT ZERO\n```\n\n----------------------------------------\n\nTITLE: Modeling Lifetime Dependence in Swift for SIL\nDESCRIPTION: Provides mechanisms for modeling lifetime dependencies between SIL values, specifically as required by the ~Escapable types feature.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nLifetimeDependence\n```\n\n----------------------------------------\n\nTITLE: Configuring Git and Cloning Swift Repositories\nDESCRIPTION: Commands to clone the necessary Swift repositories for building the SDK. This includes LLVM, libdispatch, Foundation, XCTest, and swift-build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AndroidBuild.md#2025-04-23_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\nS:\ngit clone https://github.com/apple/swift-llvm llvm\ngit clone https://github.com/apple/swift-corelibs-libdispatch swift-corelibs-libdispatch\ngit clone https://github.com/apple/swift-corelibs-foundation swift-corelibs-foundation\ngit clone https://github.com/apple/swift-corelibs-xctest swift-corelibs-xctest\ngit clone https://github.com/compnerd/swift-build swift-build\n```\n\n----------------------------------------\n\nTITLE: Swift Implementation with Nonuniform Option Subsets\nDESCRIPTION: The proposed Swift approach showing the nonuniformity between individual options and option subsets, which disrupts some of the elegance of the bitmask idiom.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n// Swift, under this proposal\nstruct MyOptions : OptionSet {\n  var Foo, Bar, Bas : Bool = false\n\n  static func Foobar() -> MyOptions {\n    return MyOptions(Foo: true, Bar: true)\n  }\n}\n\nvar x: MyOptions = .Foobar() | MyOptions(Bas: true)\n```\n\n----------------------------------------\n\nTITLE: Example Circular Reference Error in Swift\nDESCRIPTION: Shows how a circular reference error appears in Swift code when there is a cycle in the request evaluator.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n<unknown>:0: error: circular reference\nfile.swift:18:22: note: through reference here\n16 | \n17 | extension MyType {\n18 |   public static func test() -> MyType { ... }\n   |                      `- note: through reference here\n19 | }\n20 | \n```\n\n----------------------------------------\n\nTITLE: Valid Interior Pointer Usage in Swift SIL\nDESCRIPTION: Example demonstrating correct usage of interior pointers in SIL where all pointer operations occur within the guaranteed lifetime of the base object.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nclass Klass { var k: KlassField }\nstruct KlassWrapper { var k: Klass }\n\n// ...\n\n%1 = begin_borrow %0 : $Klass\n// %2 is an interior pointer into the Klass k. Since %2 is an address and\n// addresses have None ownership, it's uses are not treated as uses of the\n// underlying object %1.\n%2 = ref_element_addr %1 : $Klass, #Klass.k // %2 is a $*KlassWrapper\n\n// Destroying %1 at this location would result in a verifier error since\n// %2's uses are considered to be uses of %1.\n//\n// end_lifetime %1 : $Klass\n\n// We are statically not loading from an invalidated address here since we\n// are within the lifetime of ``%1``.\n%3 = struct_element_addr %2 : $*KlassWrapper, #KlassWrapper.k\n%4 = load [copy] %3 : $*Klass // %1 must be live here transitively\n\n// ``%1``'s lifetime ends. Importantly we know that within the lifetime of\n// ``%1``, ``%0``'s lifetime can not shrink past this point, implying\n// transitive static safety.\nend_borrow %1 : $Klass\n```\n\n----------------------------------------\n\nTITLE: Building swift-corelibs-xctest with CMake and Ninja on Windows\nDESCRIPTION: This snippet shows how to configure and build the swift-corelibs-xctest project using CMake and Ninja. It sets various CMake variables including paths to Swift compiler, dispatch, and Foundation modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_11\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B S:\\b\\4 ^\n  -D CMAKE_BUILD_TYPE=RelWithDebInfo ^\n  -D CMAKE_INSTALL_PREFIX=C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr ^\n  -D CMAKE_MT=mt ^\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\n  -D dispatch_DIR=S:\\b\\2\\cmake\\modules ^\n  -D Foundation_DIR=S:\\b\\3\\cmake\\modules ^\n  -D LIT_COMMAND=S:\\llvm-project\\llvm\\utils\\lit\\lit.py ^\n  -G Ninja ^\n  -S S:\\swift-corelibs-xctest\n\nninja -C S:\\b\\4\n```\n\n----------------------------------------\n\nTITLE: Unicode I with Dot Above Special Casing Definition\nDESCRIPTION: Preserves canonical equivalence for Latin capital letter I with dot above. This rule ensures proper case conversion while maintaining the dot above during case transformations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_1\n\nLANGUAGE: unicode\nCODE:\n```\n0130; 0069 0307; 0130; 0130; # LATIN CAPITAL LETTER I WITH DOT ABOVE\n```\n\n----------------------------------------\n\nTITLE: Implicit Properties Generated for Example Enum in Swift\nDESCRIPTION: Demonstration of the implicit properties that would be generated for the Example enum, showing how common values become non-optional while case-specific values are optional.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n/*implicit*/\ninternal extension Example {\n  var foo: Int? { get }\n  var bar: Int? { get }\n  var alwaysPresent: String { get } // Not optional\n}\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Foundation with CMake and Ninja on Windows\nDESCRIPTION: This snippet configures and builds the Swift Foundation library using CMake and Ninja. It sets various dependencies including CURL, ICU, and libxml2.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_14\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B S:\\b\\3 ^\n  -D CMAKE_BUILD_TYPE=RelWithDebInfo ^\n  -D CMAKE_INSTALL_PREFIX=C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr ^\n  -D CMAKE_C_COMPILER=S:/b/1/bin/clang-cl.exe ^\n  -D CMAKE_MT=mt ^\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\n  -D CURL_LIBRARY=\"S:/Library/libcurl-development/usr/lib/libcurl.lib\" ^\n  -D CURL_INCLUDE_DIR=\"S:/Library/libcurl-development/usr/include\" ^\n  -D ICU_I18N_LIBRARY_RELEASE=S:\\library\\icu-67\\usr\\lib\\icuin67.lib ^\n  -D ICU_ROOT=S:\\Library\\icu-67\\usr ^\n  -D ICU_UC_LIBRARY_RELEASE=S:\\Library\\icu-67\\usr\\lib\\icuuc67.lib ^\n  -D LIBXML2_LIBRARY=S:\\Library\\libxml2-development\\usr\\lib\\libxml2s.lib ^\n  -D LIBXML2_INCLUDE_DIR=S:\\Library\\libxml2-development\\usr\\include\\libxml2 ^\n  -D LIBXML2_DEFINITIONS=\"/DLIBXML_STATIC\" ^\n  -D ENABLE_TESTING=YES ^\n  -D dispatch_DIR=S:\\b\\2\\cmake\\modules ^\n  -D XCTest_DIR=S:\\b\\4\\cmake\\modules ^\n  -G Ninja ^\n  -S S:\\swift-corelibs-foundation\n\nninja -C S:\\b\\3\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Demangling Library in CMake\nDESCRIPTION: Defines the swiftDemangling library target, specifies source files, and sets compiler definitions. It also configures include directories and links against swiftShims.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Demangling/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftDemangling OBJECT\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Context.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Demangler.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/ManglingUtils.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/NodePrinter.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Punycode.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Remangler.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/NodeDumper.cpp\"\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/Errors.cpp\")\ntarget_compile_definitions(swiftDemangling PRIVATE\n  $<$<BOOL:${BUILD_SHARED_LIBS}>:-DswiftCore_EXPORTS>\n  $<$<BOOL:${SwiftCore_ENABLE_OBJC_INTEROP}>:-DSWIFT_SUPPORT_OLD_MANGLING>\n  $<$<BOOL:${SwiftCore_ENABLE_TYPE_PRINTING}>:-DSWIFT_STDLIB_HAS_TYPE_PRINTING>\n  $<$<BOOL:${SwiftCore_ENABLE_CRASH_REPORTER_CLIENT}>:-DSWIFT_HAVE_CRASHREPORTERCLIENT>\n  $<$<BOOL:${SwiftCore_HAS_ASL}>:-DSWIFT_STDLIB_HAS_ASL>)\n\ntarget_compile_definitions(swiftDemangling PUBLIC\n    $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_INLINE_NAMESPACE=__runtime>)\n\ntarget_include_directories(swiftDemangling\n  PRIVATE\n    \"${SwiftCore_SWIFTC_SOURCE_DIR}/include\"\n    \"${PROJECT_BINARY_DIR}/include\")\n\ntarget_link_libraries(swiftDemangling PRIVATE swiftShims)\n```\n\n----------------------------------------\n\nTITLE: Defining objc_protocol Instruction in SIL\nDESCRIPTION: Defines the 'objc_protocol' instruction which references an Objective-C protocol declaration. The documentation notes this is incomplete and needs further details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_107\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'objc_protocol' protocol-decl : sil-type\n\n%0 = objc_protocol #ObjCProto : $Protocol\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Options for Swift Core Runtime\nDESCRIPTION: Adds compile options for C++ code in the Swift Core runtime, disabling RTTI and exceptions, and enabling unwind tables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_options(\n  $<$<COMPILE_LANGUAGE:CXX>:-fno-rtti>\n  $<$<COMPILE_LANGUAGE:CXX>:-fno-exceptions>\n  $<$<COMPILE_LANGUAGE:CXX>:-funwind-tables>)\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom Module Paths and Build Configuration\nDESCRIPTION: Adds custom CMake module paths, disables in-source builds, and configures job pools for parallel building. It also enables C and C++ languages and sets up assembly language dialect based on target platform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Add path for custom CMake modules.\nlist(APPEND CMAKE_MODULE_PATH\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\n\nset(CMAKE_DISABLE_IN_SOURCE_BUILD YES)\n\nif(DEFINED CMAKE_JOB_POOLS)\n  # CMake < 3.11 doesn't support CMAKE_JOB_POOLS. Manually set the property.\n  set_property(GLOBAL PROPERTY JOB_POOLS \"${CMAKE_JOB_POOLS}\")\nelse()\n  # Make a job pool for things that can't yet be distributed\n  cmake_host_system_information(\n    RESULT localhost_logical_cores QUERY NUMBER_OF_LOGICAL_CORES)\n  set_property(GLOBAL APPEND PROPERTY JOB_POOLS local_jobs=${localhost_logical_cores})\n  # Put linking in that category\n  set(CMAKE_JOB_POOL_LINK local_jobs)\nendif()\n\nenable_language(C)\nenable_language(CXX)\n\n# On Windows, use MASM or MARMASM\nset(SWIFT_ASM_DIALECT ASM)\nset(SWIFT_ASM_EXT S)\nset(SWIFT_ASM_AVAILABLE YES)\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  if(CMAKE_SYSTEM_PROCESSOR MATCHES \"ARM64\")\n    if(CMAKE_VERSION VERSION_LESS \"3.26\")\n      message(WARNING \"We can't build assembly language for ARM64 until CMake 3.26\")\n      set(SWIFT_ASM_AVAILABLE NO)\n    else()\n      set(SWIFT_ASM_DIALECT ASM_MARMASM)\n    endif()\n  else()\n    set(SWIFT_ASM_DIALECT ASM_MASM)\n  endif()\n  set(SWIFT_ASM_EXT asm)\nendif()\n\nif(SWIFT_ASM_AVAILABLE)\n  enable_language(${SWIFT_ASM_DIALECT})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example Backtrace Output with Different Limit Settings\nDESCRIPTION: Demonstrates how backtrace output appears with different limit and top settings. Shows frame numbering from 1-10 with various configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Backtracing.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n10\n9\n8\n7\n...\n```\n\nLANGUAGE: text\nCODE:\n```\n10\n9\n...\n2\n1\n```\n\nLANGUAGE: text\nCODE:\n```\n...\n4\n3\n2\n1\n```\n\n----------------------------------------\n\nTITLE: Marking a Class for Eager Realization with @_objc_non_lazy_realization\nDESCRIPTION: Shows how to use the @_objc_non_lazy_realization attribute to mark a class for eager realization instead of the default lazy realization. This is used for declarations that may be statically referenced.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\n@_objc_non_lazy_realization\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Regex Parser Library Sources in CMake\nDESCRIPTION: Defines the Swift Regex Parser library target with a comprehensive list of source files organized into Regex (Parse, Printing, AST) and Utility components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Supplemental/StringProcessing/_RegexParser/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(swift_RegexParser\n  Regex/TreeProtocols.swift\n  Regex/Parse/DelimiterLexing.swift\n  Regex/Parse/Source.swift\n  Regex/Parse/CharacterPropertyClassification.swift\n  Regex/Parse/LexicalAnalysis.swift\n  Regex/Parse/SyntaxOptions.swift\n  Regex/Parse/CaptureList.swift\n  Regex/Parse/CompilerInterface.swift\n  Regex/Parse/CaptureStructure.swift\n  Regex/Parse/Parse.swift\n  Regex/Parse/SourceLocation.swift\n  Regex/Parse/Diagnostics.swift\n  Regex/Parse/Sema.swift\n  Regex/Printing/RenderRanges.swift\n  Regex/Printing/PrettyPrinter.swift\n  Regex/Printing/PrintAsCanonical.swift\n  Regex/Printing/DumpAST.swift\n  Regex/AST/ASTAction.swift\n  Regex/AST/AST.swift\n  Regex/AST/CustomCharClass.swift\n  Regex/AST/Quantification.swift\n  Regex/AST/Conditional.swift\n  Regex/AST/MatchingOptions.swift\n  Regex/AST/ASTProtocols.swift\n  Regex/AST/Group.swift\n  Regex/AST/Atom.swift\n  Utility/TypeConstruction.swift\n  Utility/Misc.swift\n  Utility/AllScalars.swift\n  Utility/Errors.swift\n  Utility/MissingUnicode.swift)\n```\n\n----------------------------------------\n\nTITLE: Configuring Main Swift Frontend Tool in CMake\nDESCRIPTION: Sets up the main Swift frontend tool target, links necessary libraries, and creates symlinks for various Swift-related executables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/driver/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(swift-frontend\n  driver.cpp\n  SWIFT_COMPONENT compiler\n  HAS_SWIFT_MODULES\n)\ntarget_link_libraries(swift-frontend\n                      PUBLIC\n                        swiftDriverTool\n                        swiftCompilerModules)\n\nadd_swift_parser_link_libraries(swift-frontend)\n\n# Create a `swift-driver` executable adjacent to the `swift-frontend` executable\n# to ensure that `swiftc` forwards to the standalone driver when invoked.\nswift_create_early_driver_copies(swift-frontend)\n\n# If a `swift-driver` executable adjacent to the `swift-frontend` executable exists\n# then the `swift` and `swiftc` symlinks should point to it by-default\nif(EXISTS \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-driver${CMAKE_EXECUTABLE_SUFFIX}\" AND EXISTS \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-help${CMAKE_EXECUTABLE_SUFFIX}\")\n  message(STATUS \"Pointing 'swift' and 'swiftc' symlinks at 'swift-driver'.\")\n  swift_create_post_build_symlink(swift-frontend\n    SOURCE \"swift-driver${CMAKE_EXECUTABLE_SUFFIX}\"\n    DESTINATION \"swift${CMAKE_EXECUTABLE_SUFFIX}\"\n    WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n  swift_create_post_build_symlink(swift-frontend\n    SOURCE \"swift-driver${CMAKE_EXECUTABLE_SUFFIX}\"\n    DESTINATION \"swiftc${CMAKE_EXECUTABLE_SUFFIX}\"\n    WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\n  message(STATUS \"Pointing 'swift-legacy-driver' and 'swiftc-legacy-driver' symlinks at 'swift-frontend'.\")\n  swift_create_post_build_symlink(swift-frontend\n    SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n    DESTINATION \"swift-legacy-driver${CMAKE_EXECUTABLE_SUFFIX}\"\n    WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n  swift_create_post_build_symlink(swift-frontend\n    SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n    DESTINATION \"swiftc-legacy-driver${CMAKE_EXECUTABLE_SUFFIX}\"\n    WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\nelse()\n  message(STATUS \"Pointing 'swift' and 'swiftc' symlinks at 'swift-frontend' - no early SwiftDriver build found.\")\n  swift_create_post_build_symlink(swift-frontend\n    SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n    DESTINATION \"swift${CMAKE_EXECUTABLE_SUFFIX}\"\n    WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\n  swift_create_post_build_symlink(swift-frontend\n    SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n    DESTINATION \"swiftc${CMAKE_EXECUTABLE_SUFFIX}\"\n    WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Bar Class with Multiple Initializers in Swift\nDESCRIPTION: Defines a Bar class that inherits from NSObject and implements multiple initializers with varying argument patterns, including failable initializers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nclass Bar : NSObject {\n  init!()\n  init!(__noArgs: ())\n  init!(__oneArg arg: Int32)\n  init!(__twoArgs arg: Int32, other arg2: Int32)\n  init!(__ arg: Int32)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftOnoneSupport Bootstrapping in CMake\nDESCRIPTION: Sets up bootstrapping options for SwiftOnoneSupport in debug mode. It creates two stages of bootstrapping libraries with different dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_BUILD_TYPE STREQUAL \"Debug\" AND BOOTSTRAPPING_MODE STREQUAL \"BOOTSTRAPPING\")\n\n  set(swiftOnoneSupport_common_bootstrapping_options\n    SHARED\n    ${swiftOnoneSupport_common_options}\n    SDK ${SWIFT_HOST_VARIANT_SDK}\n    ARCHITECTURE ${SWIFT_HOST_VARIANT_ARCH}\n    INSTALL_IN_COMPONENT\n      \"never_install\")\n\n  # Bootstrapping - stage 0\n\n  add_swift_target_library_single(swiftSwiftOnoneSupport-bootstrapping0 swiftSwiftOnoneSupport\n    ${swiftOnoneSupport_common_bootstrapping_options}\n    FILE_DEPENDS swiftCore-bootstrapping0\n    BOOTSTRAPPING 0)\n\n  # Bootstrapping - stage 1\n\n  add_swift_target_library_single(swiftSwiftOnoneSupport-bootstrapping1 swiftSwiftOnoneSupport\n    ${swiftOnoneSupport_common_bootstrapping_options}\n    FILE_DEPENDS swiftCore-bootstrapping1\n    BOOTSTRAPPING 1)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running the scale-test Tool with Swift Compiler\nDESCRIPTION: Command line example showing how to use the utils/scale-test script with a Swift compiler binary and a GYB template file. This command analyzes how various compiler metrics scale as the template parameter N increases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ utils/scale-test --swiftc-binary=/.../usr/bin/swiftc test.swift.gyb\n```\n\n----------------------------------------\n\nTITLE: Collecting Test Dependencies Based on SDK\nDESCRIPTION: Determines and collects the necessary build targets that need to be built before running tests for a particular SDK. It handles different dependency requirements for various platforms and build configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(get_test_dependencies SDK result_var_name)\n  set(deps)\n\n  if(SWIFT_BUILD_STDLIB)\n    list(APPEND deps SwiftUnitTests)\n  endif()\n\n  if(SWIFT_BUILD_SDK_OVERLAY OR SWIFT_BUILD_TEST_SUPPORT_MODULES)\n    list(APPEND deps sdk-overlay)\n  endif()\n\n  set(deps_binaries)\n\n  if (SWIFT_BUILD_LIBEXEC AND SWIFT_ENABLE_BACKTRACING)\n    # Only add if `swift-backtrace` builds for this SDK\n    if (TARGET \"swift-backtrace-${SDK}\")\n      list(APPEND deps_binaries\n        \"swift-backtrace-${SDK}\")\n    endif()\n  endif()\n\n  if (SWIFT_INCLUDE_TOOLS)\n    list(APPEND deps_binaries\n      libMockPlugin\n      lldb-moduleimport-test\n      swift-frontend\n      swift-demangle\n      swift-demangle-yamldump\n      swift-ide-test\n      swift-refactor\n      swift-reflection-dump\n      swift-remoteast-test\n      swift-scan-test)\n\n    if(SWIFT_BUILD_SOURCEKIT)\n      list(APPEND deps_binaries sourcekitd-test complete-test)\n    endif()\n\n    if(SWIFT_BUILD_SWIFT_SYNTAX)\n      list(APPEND deps_binaries swift-plugin-server)\n    endif()\n  endif()\n\n  if(NOT SWIFT_BUILT_STANDALONE)\n    list(APPEND deps_binaries\n      arcmt-test\n      c-arcmt-test\n      c-index-test\n      CASPluginTest\n      clang\n      clang-cas-test\n      count\n      dsymutil\n      FileCheck\n      llc\n      llvm-ar\n      llvm-as\n      llvm-bcanalyzer\n      llvm-cas\n      llvm-cov\n      llvm-dis\n      llvm-dwarfdump\n      llvm-link\n      llvm-nm\n      llvm-objdump\n      llvm-profdata\n      llvm-readelf\n      llvm-readobj\n      llvm-size\n      llvm-strings\n      llvm-readtapi\n      not\n      split-file)\n  endif()\n\n  if((\"${SDK}\" STREQUAL \"IOS\") OR\n     (\"${SDK}\" STREQUAL \"TVOS\") OR\n     (\"${SDK}\" STREQUAL \"WATCHOS\") OR\n     (\"${SDK}\" STREQUAL \"XROS\") OR\n     (\"${SDK}\" STREQUAL \"OSX\") OR\n     (\"${SDK}\" STREQUAL \"IOS_SIMULATOR\") OR\n     (\"${SDK}\" STREQUAL \"TVOS_SIMULATOR\") OR\n     (\"${SDK}\" STREQUAL \"WATCHOS_SIMULATOR\") OR\n     (\"${SDK}\" STREQUAL \"XROS_SIMULATOR\") OR\n     (\"${SDK}\" STREQUAL \"FREESTANDING\") OR\n     (\"${SDK}\" STREQUAL \"LINUX\") OR\n     (\"${SDK}\" STREQUAL \"LINUX_STATIC\") OR\n     (\"${SDK}\" STREQUAL \"CYGWIN\") OR\n     (\"${SDK}\" STREQUAL \"FREEBSD\") OR\n     (\"${SDK}\" STREQUAL \"OPENBSD\") OR\n     (\"${SDK}\" STREQUAL \"ANDROID\") OR\n     (\"${SDK}\" STREQUAL \"WINDOWS\") OR\n     (\"${SDK}\" STREQUAL \"HAIKU\") OR\n     (\"${SDK}\" STREQUAL \"WASI\"))\n    # No extra dependencies.\n  else()\n    message(FATAL_ERROR \"Unknown SDK: ${SDK}\")\n  endif()\n\n  # Just use target names for dependency generation. This works for both Xcode\n  # and non-Xcode build systems. In the case of Xcode, its build paths have a\n  # configuration variable in them, so CMake can't match them at compile time.\n  list(APPEND deps ${deps_binaries})\n\n  set(\"${result_var_name}\" \"${deps}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Building swift-inspect on Linux using Swift Package Manager\nDESCRIPTION: Command for building swift-inspect on Linux, including additional parameters to locate the necessary Swift Remote Mirror includes and libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswift build -Xswiftc -I$(git rev-parse --show-toplevel)/include/swift/SwiftRemoteMirror -Xlinker -lswiftRemoteMirror\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unicode Character Breaking Rules for Special Sequences with Devanagari Letter Ka\nDESCRIPTION: This code snippet demonstrates the grapheme breaking behavior when DEVANAGARI LETTER KA (U+0915) interacts with special characters like ZWNJ, Regional Indicators, and characters with various Unicode properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0915 × 200C ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] ZERO WIDTH NON-JOINER (Extend) ÷ [0.3]\n÷ 0915 × 0308 × 200C ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] ZERO WIDTH NON-JOINER (Extend) ÷ [0.3]\n÷ 0915 ÷ 1F1E6 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 0915 × 0308 ÷ 1F1E6 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 0915 ÷ 0600 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]\n÷ 0915 × 0308 ÷ 0600 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]\n÷ 0915 × 0A03 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.1] GURMUKHI SIGN VISARGA (SpacingMark) ÷ [0.3]\n÷ 0915 × 0308 × 0A03 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.1] GURMUKHI SIGN VISARGA (SpacingMark) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Conditional Library Linking Based on SourceKit Mode\nDESCRIPTION: Conditionally links against either the in-process SourceKit library or the standard SourceKit library based on build configuration, allowing for different testing environments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_SOURCEKIT_USE_INPROC_LIBRARY)\n  target_link_libraries(sourcekitd-test PRIVATE sourcekitdInProc)\nelse()\n  target_link_libraries(sourcekitd-test PRIVATE sourcekitd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Verifying Cloned Repositories (sh)\nDESCRIPTION: Lists the contents of the parent directory (expected to be `swift-project`). This command is used to verify that besides the `swift` directory, other required repositories like `llvm-project` and `swiftpm` have been successfully cloned by the `update-checkout` script.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nls ..\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux SDK Settings\nDESCRIPTION: Configures SDK settings for Linux builds including architecture selection and Musl support for static builds. Handles both standard Linux and static Linux configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_71\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${SWIFT_HOST_VARIANT_SDK}\" STREQUAL \"LINUX\")\n  set(SWIFT_HOST_VARIANT \"linux\" CACHE STRING\n      \"Deployment OS for Swift host tools (the compiler) [linux].\")\n\n  is_sdk_requested(LINUX swift_build_linux)\n  if(swift_build_linux)\n    if(\"${SWIFT_SDK_LINUX_ARCHITECTURES}\" STREQUAL \"\")\n      set(SWIFT_SDK_LINUX_ARCHITECTURES \"${SWIFT_HOST_VARIANT_ARCH}\")\n    endif()\n    configure_sdk_unix(\"Linux\" \"${SWIFT_SDK_LINUX_ARCHITECTURES}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Helper Function Declaration in Swift\nDESCRIPTION: Declares a helper function that takes an Int32 parameter and returns an Int32 value\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/FooHelper.FooHelperSub.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc fooHelperSubFunc1(_ a: Int32) -> Int32\n```\n\n----------------------------------------\n\nTITLE: Global Mangling Patterns for Swift Entities\nDESCRIPTION: Defines the mangling patterns for global Swift entities including types, metadata, witnesses, protocols, and thunks. This extensive list shows how different language constructs are encoded in the mangling scheme.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nglobal ::= 't' type                    // standalone type (for DWARF)\nglobal ::= 'M' type                    // type metadata (address point)\n                                       // -- type starts with [BCOSTV]\nglobal ::= 'Mf' type                   // 'full' type metadata (start of object)\nglobal ::= 'MP' type                   // type metadata pattern\nglobal ::= 'Ma' type                   // type metadata access function\nglobal ::= 'ML' type                   // type metadata lazy cache variable\nglobal ::= 'Mm' type                   // class metaclass\nglobal ::= 'Mn' nominal-type           // nominal type descriptor\nglobal ::= 'Mp' protocol               // protocol descriptor\nglobal ::= 'MR' remote-reflection-record // metadata for remote mirrors\nglobal ::= 'PA' .*                     // partial application forwarder\nglobal ::= 'PAo' .*                    // ObjC partial application forwarder\nglobal ::= 'w' value-witness-kind type // value witness\nglobal ::= 'Wa' protocol-conformance   // protocol witness table accessor\nglobal ::= 'WG' protocol-conformance   // generic protocol witness table\nglobal ::= 'WI' protocol-conformance   // generic protocol witness table instantiation function\nglobal ::= 'Wl' type protocol-conformance // lazy protocol witness table accessor\nglobal ::= 'WL' protocol-conformance   // lazy protocol witness table cache variable\nglobal ::= 'Wo' entity                 // witness table offset\nglobal ::= 'WP' protocol-conformance   // protocol witness table\nglobal ::= 'Wt' protocol-conformance identifier // associated type metadata accessor\nglobal ::= 'WT' protocol-conformance identifier nominal-type // associated type witness table accessor\nglobal ::= 'Wv' directness entity      // field offset\nglobal ::= 'WV' type                   // value witness table\nglobal ::= entity                      // some identifiable thing\nglobal ::= 'TO' global                 // ObjC-as-swift thunk\nglobal ::= 'To' global                 // swift-as-ObjC thunk\nglobal ::= 'TD' global                 // dynamic dispatch thunk\nglobal ::= 'Td' global                 // direct method reference thunk\nglobal ::= 'TR' reabstract-signature   // reabstraction thunk helper function\nglobal ::= 'Tr' reabstract-signature   // reabstraction thunk\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Compiler Module in CMake\nDESCRIPTION: Function to create a target for compiling a Swift module. It sets up the target with source files and dependencies, and adds the module name to a global property tracking Swift compiler modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_swift_compiler_module module)\n  cmake_parse_arguments(ALSM\n                        \"\"\n                        \"\"\n                        \"DEPENDS;SOURCES\"\n                        ${ARGN})\n  set(raw_sources ${ALSM_SOURCES} ${ALSM_UNPARSED_ARGUMENTS})\n\n  set(target_name \"SwiftModule${module}\")\n\n  add_custom_target(\n      ${target_name}\n      COMMENT \"swift compiler module ${module}\")\n\n  swift_compiler_sources(${module} ${raw_sources})\n\n  set_property(TARGET ${target_name} PROPERTY module_name ${module})\n  set_property(TARGET ${target_name} PROPERTY module_depends ${ALSM_DEPENDS})\n\n  get_property(modules GLOBAL PROPERTY swift_compiler_modules)\n  set_property(GLOBAL PROPERTY swift_compiler_modules ${modules} ${module})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Uppercase Code Points\nDESCRIPTION: A complete list of Unicode code points that have the Uppercase property as defined by Unicode Standard Definition D135. Includes both individual code points and ranges in hexadecimal notation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_8\n\nLANGUAGE: unicode\nCODE:\n```\n1ED8          ; Uppercase\n1EDA          ; Uppercase\n1EDC          ; Uppercase\n1EDE          ; Uppercase\n1EE0          ; Uppercase\n1EE2          ; Uppercase\n1EE4          ; Uppercase\n1EE6          ; Uppercase\n1EE8          ; Uppercase\n1EEA          ; Uppercase\n1EEC          ; Uppercase\n1EEE          ; Uppercase\n1EF0          ; Uppercase\n1EF2          ; Uppercase\n1EF4          ; Uppercase\n1EF6          ; Uppercase\n1EF8          ; Uppercase\n1EFA          ; Uppercase\n1EFC          ; Uppercase\n1EFE          ; Uppercase\n1F08..1F0F    ; Uppercase\n[...truncated for brevity...]\n1F130..1F149  ; Uppercase\n1F150..1F169  ; Uppercase\n1F170..1F189  ; Uppercase\n```\n\n----------------------------------------\n\nTITLE: Declaring Class and Protocol with Same Name in Swift\nDESCRIPTION: Defines a class SameName with a documentation comment and an empty protocol SameNameProtocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.command-line-include.printed.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n/// Awesome name.\nclass SameName {\n}\nprotocol SameNameProtocol {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_TOOLS_INSTALL_DIR Cache Variable in CMake\nDESCRIPTION: Defines a CMake cache variable `SWIFT_TOOLS_INSTALL_DIR` of type PATH. This variable specifies the subdirectory within the installation prefix where Swift tool binaries should be installed. It defaults to `${CMAKE_INSTALL_BINDIR}` (usually 'bin'). This path is used by helper functions like `add_swift_tool_symlink`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_31\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_TOOLS_INSTALL_DIR \"${CMAKE_INSTALL_BINDIR}\" CACHE PATH\n  \"Path for binary subdirectory to use during installation.\n  Used by add_swift_tool_symlink in AddSwift.cmake so that llvm_install_symlink generates the installation script properly.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Enum with Availability Attributes\nDESCRIPTION: Declares an enum with cases representing filter modes, including an unavailable case. The enum conforms to Int and includes a rawValue property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nenum SCNFilterMode : Int {\n  init?(rawValue: Int)\n  var rawValue: Int { get }\n  case none\n  case nearest\n  case linear\n  @available(*, unavailable)\n  case SCNNoFiltering\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Package Configuration\nDESCRIPTION: Package manifest configuration for Swift-C++ interoperability, including target dependencies and compiler flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/GettingStartedWithC++Interop.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nimport PackageDescription\n\nlet package = Package(\n    name: \"CxxInterop\",\n    platforms: [.macOS(.v12)],\n    products: [\n        .library(\n            name: \"CxxTest\",\n            targets: [\"CxxTest\"]),\n        .library(\n            name: \"CxxInterop\",\n            targets: [\"CxxInterop\"]),\n    ],\n    targets: [\n        .target(\n            name: \"CxxTest\",\n            dependencies: []\n        ),\n        .executableTarget(\n            name: \"CxxInterop\",\n            dependencies: [\"CxxTest\"],\n            path: \"./Sources/CxxInterop\",\n            sources: [ \"main.swift\" ],\n            swiftSettings: [.unsafeFlags([\n                \"-I\", \"Sources/CxxTest\",\n                \"-cxx-interoperability-mode=default\",\n            ])]\n        ),\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Declaring Type Alias and Integer Variable in Swift\nDESCRIPTION: Defines a type alias for Int32 named FooTypedef1 and a global variable of type Int32 named fooIntVar, both with documentation comments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  FooTypedef1.  Bbb.\ntypealias FooTypedef1 = Int32\n\n/// Aaa.  fooIntVar.  Bbb.\nvar fooIntVar: Int32\n```\n\n----------------------------------------\n\nTITLE: Invalid Interior Pointer Usage in Swift SIL\nDESCRIPTION: Example showing invalid SIL code where an interior pointer is used after its base object's lifetime has ended, which would trigger a verifier error.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nclass Klass { var k: KlassField }\nstruct KlassWrapper { var k: Klass }\n\n// ...\n\n// Today SIL restricts interior pointer instructions to only have operands\n// with guaranteed ownership.\n%1 = begin_borrow %0 : $Klass\n\n// %2 is an interior pointer into %1. Since %2 is an address, it's uses are\n// not treated as uses of underlying borrowed object %1 in the ownership\n// system. This is because at the ownership level objects with None\n// ownership are not verified and do not have any constraints on how they\n// are used from the ownership system.\n//\n// Instead the ownership verifier gathers up all such uses and treats them\n// as uses of the object from which the interior pointer was projected from\n// transitively. This means that this is a constraint on the guaranteed\n// objects use, not on the trivial values.\n%2 = ref_element_addr %1 : $Klass, #Klass.k // %2 is a $*KlassWrapper\n%3 = struct_element_addr %2 : $*KlassWrapper, #KlassWrapper.k // %3 is a $*Klass\n\n// So if we end the borrow %1 at this point, invalidating the addresses\n// ``%2`` and ``%3``.\nend_borrow %1 : $Klass\n\n// We would here be loading from an invalidated address. This would cause a\n// verifier error since %3's use here is a regular use that is inferred up\n// on %1.\n%4 = load [copy] %3 : $*KlassWrapper\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing Visual Studio and Dependencies via Command Line - Batchfile\nDESCRIPTION: This batch script downloads and silently installs the Visual Studio Community Edition with all components necessary to build Swift, including related tools such as Python, Git, CMake, and Ninja. It uses direct component IDs, then deletes the installer executable. The script should be executed within a VS Developer Command Prompt. It requires the ability to execute external commands and may require elevated privileges, and all parameters must be specified as shown.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_0\n\nLANGUAGE: Batchfile\nCODE:\n```\ncurl.exe -sOL https://aka.ms/vs/16/release/vs_community.exe\\nvs_community ^\\n  --add Component.CPython3.x64 ^\\n  --add Microsoft.VisualStudio.Component.Git ^\\n  --add Microsoft.VisualStudio.Component.VC.ATL ^\\n  --add Microsoft.VisualStudio.Component.VC.CMake.Project ^\\n  --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 ^\\n  --add Microsoft.VisualStudio.Component.Windows10SDK ^\\n  --add Microsoft.VisualStudio.Component.Windows10SDK.17763\\ndel /q vs_community.exe\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points with Changes When Lowercased Property\nDESCRIPTION: This snippet defines Unicode code points that change when converted to lowercase. It includes individual code points and ranges, each followed by the 'Changes_When_Lowercased' property. This information is crucial for Unicode-aware text processing and case conversion operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\nA654          ; Changes_When_Lowercased\nA656          ; Changes_When_Lowercased\nA658          ; Changes_When_Lowercased\nA65A          ; Changes_When_Lowercased\nA65C          ; Changes_When_Lowercased\nA65E          ; Changes_When_Lowercased\nA660          ; Changes_When_Lowercased\nA662          ; Changes_When_Lowercased\nA664          ; Changes_When_Lowercased\nA666          ; Changes_When_Lowercased\nA668          ; Changes_When_Lowercased\nA66A          ; Changes_When_Lowercased\nA66C          ; Changes_When_Lowercased\nA680          ; Changes_When_Lowercased\nA682          ; Changes_When_Lowercased\nA684          ; Changes_When_Lowercased\nA686          ; Changes_When_Lowercased\nA688          ; Changes_When_Lowercased\nA68A          ; Changes_When_Lowercased\nA68C          ; Changes_When_Lowercased\nA68E          ; Changes_When_Lowercased\nA690          ; Changes_When_Lowercased\nA692          ; Changes_When_Lowercased\nA694          ; Changes_When_Lowercased\nA696          ; Changes_When_Lowercased\nA698          ; Changes_When_Lowercased\nA69A          ; Changes_When_Lowercased\nA722          ; Changes_When_Lowercased\nA724          ; Changes_When_Lowercased\nA726          ; Changes_When_Lowercased\nA728          ; Changes_When_Lowercased\nA72A          ; Changes_When_Lowercased\nA72C          ; Changes_When_Lowercased\nA72E          ; Changes_When_Lowercased\nA732          ; Changes_When_Lowercased\nA734          ; Changes_When_Lowercased\nA736          ; Changes_When_Lowercased\nA738          ; Changes_When_Lowercased\nA73A          ; Changes_When_Lowercased\nA73C          ; Changes_When_Lowercased\nA73E          ; Changes_When_Lowercased\nA740          ; Changes_When_Lowercased\nA742          ; Changes_When_Lowercased\nA744          ; Changes_When_Lowercased\nA746          ; Changes_When_Lowercased\nA748          ; Changes_When_Lowercased\nA74A          ; Changes_When_Lowercased\nA74C          ; Changes_When_Lowercased\nA74E          ; Changes_When_Lowercased\nA750          ; Changes_When_Lowercased\nA752          ; Changes_When_Lowercased\nA754          ; Changes_When_Lowercased\nA756          ; Changes_When_Lowercased\nA758          ; Changes_When_Lowercased\nA75A          ; Changes_When_Lowercased\nA75C          ; Changes_When_Lowercased\nA75E          ; Changes_When_Lowercased\nA760          ; Changes_When_Lowercased\nA762          ; Changes_When_Lowercased\nA764          ; Changes_When_Lowercased\nA766          ; Changes_When_Lowercased\nA768          ; Changes_When_Lowercased\nA76A          ; Changes_When_Lowercased\nA76C          ; Changes_When_Lowercased\nA76E          ; Changes_When_Lowercased\nA779          ; Changes_When_Lowercased\nA77B          ; Changes_When_Lowercased\nA77D..A77E    ; Changes_When_Lowercased\nA780          ; Changes_When_Lowercased\nA782          ; Changes_When_Lowercased\nA784          ; Changes_When_Lowercased\nA786          ; Changes_When_Lowercased\nA78B          ; Changes_When_Lowercased\nA78D          ; Changes_When_Lowercased\nA790          ; Changes_When_Lowercased\nA792          ; Changes_When_Lowercased\nA796          ; Changes_When_Lowercased\nA798          ; Changes_When_Lowercased\nA79A          ; Changes_When_Lowercased\nA79C          ; Changes_When_Lowercased\nA79E          ; Changes_When_Lowercased\nA7A0          ; Changes_When_Lowercased\nA7A2          ; Changes_When_Lowercased\nA7A4          ; Changes_When_Lowercased\nA7A6          ; Changes_When_Lowercased\nA7A8          ; Changes_When_Lowercased\nA7AA..A7AE    ; Changes_When_Lowercased\nA7B0..A7B4    ; Changes_When_Lowercased\nA7B6          ; Changes_When_Lowercased\nA7B8          ; Changes_When_Lowercased\nA7BA          ; Changes_When_Lowercased\nA7BC          ; Changes_When_Lowercased\nA7BE          ; Changes_When_Lowercased\nA7C0          ; Changes_When_Lowercased\nA7C2          ; Changes_When_Lowercased\nA7C4..A7C7    ; Changes_When_Lowercased\nA7C9          ; Changes_When_Lowercased\nA7CB..A7CC    ; Changes_When_Lowercased\nA7D0          ; Changes_When_Lowercased\nA7D6          ; Changes_When_Lowercased\nA7D8          ; Changes_When_Lowercased\nA7DA          ; Changes_When_Lowercased\nA7DC          ; Changes_When_Lowercased\nA7F5          ; Changes_When_Lowercased\nFF21..FF3A    ; Changes_When_Lowercased\n10400..10427  ; Changes_When_Lowercased\n104B0..104D3  ; Changes_When_Lowercased\n10570..1057A  ; Changes_When_Lowercased\n1057C..1058A  ; Changes_When_Lowercased\n1058C..10592  ; Changes_When_Lowercased\n10594..10595  ; Changes_When_Lowercased\n10C80..10CB2  ; Changes_When_Lowercased\n10D50..10D65  ; Changes_When_Lowercased\n118A0..118BF  ; Changes_When_Lowercased\n16E40..16E5F  ; Changes_When_Lowercased\n1E900..1E921  ; Changes_When_Lowercased\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Protocol Conformance Mangling (BNF)\nDESCRIPTION: Details the BNF-like syntax for mangling a Swift protocol conformance reference. The mangling includes an optional generic signature prefix ('u generic-signature') if the conformance is generic, followed by the mangled type that conforms, the mangled protocol being conformed to, and the mangled module name where the conformance declaration resides.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_11\n\nLANGUAGE: bnf\nCODE:\n```\nprotocol-conformance ::= ('u' generic-signature)? type protocol module\n```\n\n----------------------------------------\n\nTITLE: Fixing Lifetime of Values with fix_lifetime in SIL\nDESCRIPTION: Acts as a use of a value operand or referenced memory object. Prevents optimizations from moving operations that would destroy the value past this instruction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_67\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction :: 'fix_lifetime' sil-operand\n\nfix_lifetime %0 : $T\n// Fix the lifetime of a value %0\nfix_lifetime %1 : $*T\n// Fix the lifetime of the memory object referenced by %1\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional Build Settings for Embedded Swift Concurrency\nDESCRIPTION: Sets up conditional logic to determine whether the embedded Swift concurrency library should be built based on optimization level, bootstrapping mode, and host platform constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_SHOULD_BUILD_EMBEDDED_CONCURRENCY TRUE)\nis_build_type_optimized(\"${SWIFT_STDLIB_BUILD_TYPE}\" swift_optimized)\nif(NOT swift_optimized)\n  set(SWIFT_SHOULD_BUILD_EMBEDDED_CONCURRENCY FALSE)\nelseif(BOOTSTRAPPING_MODE STREQUAL \"OFF\")\n  set(SWIFT_SHOULD_BUILD_EMBEDDED_CONCURRENCY FALSE)\nelseif(SWIFT_HOST_VARIANT STREQUAL \"windows\") # For now, don't build embedded Concurrency on Windows\n  set(SWIFT_SHOULD_BUILD_EMBEDDED_CONCURRENCY FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running binary linked to sourcekitd framework with in-process library\nDESCRIPTION: Environment variables to set when running a binary linked to the sourcekitd framework, forcing it to use the in-process library for debugging purposes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nDYLD_INSERT_LIBRARIES=/path/to/libsourcekitdInProc.dylib DYLD_FORCE_FLAT_NAMESPACE=1 <...>\n```\n\n----------------------------------------\n\nTITLE: Building swift-corelibs-libdispatch with CMake and Ninja - Batchfile\nDESCRIPTION: Configures and compiles the swift-corelibs-libdispatch library using CMake and Ninja, targeting Windows with the prebuilt toolchain's clang-cl and swiftc compilers. It sets build type, install location, and toggles Swift support. This script depends on a successful prior toolchain build in S:/b/1 and requires proper CMake and Ninja installations. Output is a built dispatch package for the development toolchain.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_7\n\nLANGUAGE: Batchfile\nCODE:\n```\ncmake -B S:\\\\b\\\\2 ^\\n  -D CMAKE_BUILD_TYPE=RelWithDebInfo ^\\n  -D CMAKE_INSTALL_PREFIX=C:\\\\Library\\\\Developer\\\\Toolchains\\\\unknown-Asserts-development.xctoolchain\\\\usr ^\\n  -D CMAKE_C_COMPILER=S:/b/1/bin/clang-cl.exe ^\\n  -D CMAKE_CXX_COMPILER=S:/b/1/bin/clang-cl.exe ^\\n  -D CMAKE_MT=mt ^\\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\\n  -D ENABLE_SWIFT=YES ^\\n  -G Ninja ^\\n  -S S:\\\\swift-corelibs-libdispatch\\n\\nninja -C S:\\\\b\\\\2\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Reflection Test Executable Target in CMake\nDESCRIPTION: Defines a Swift executable target for swift-reflection-test with specific build parameters. The target links against swiftRemoteMirror and swiftRemoteInspection libraries and is built with special flags like NOSWIFTRT and BUILD_WITH_STDLIB.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/tools/swift-reflection-test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_executable(swift-reflection-test BUILD_WITH_STDLIB\n  NOSWIFTRT\n  swift-reflection-test.c\n  overrides.c\n  LINK_LIBRARIES\n    swiftRemoteMirror\n    swiftRemoteInspection\n\n  TARGET_SDKS NOT LINUX_STATIC)\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Swift Frontend Incrementally with Ninja\nDESCRIPTION: This command performs an incremental rebuild of the Swift frontend using Ninja. It uses the platform variable set earlier to determine the build directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nninja -C ../build/Ninja-RelWithDebInfoAssert/swift-${platform}-$(uname -m) bin/swift-frontend\n```\n\n----------------------------------------\n\nTITLE: Building Swift Toolchain on Linux using build-script (sh)\nDESCRIPTION: Executes the `utils/build-script` on Linux to build the Swift toolchain. The `--release-debuginfo` flag specifies a release build configuration that includes debugging information. Assumes Swift source and necessary Linux dependencies are installed via the distribution's package manager.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nutils/build-script --release-debuginfo\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Files for Swift Migrator\nDESCRIPTION: Defines the list of JSON data files needed for the Swift Migrator, including platform-specific files for macOS, iOS, tvOS, and watchOS.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Migrator/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(datafiles\n  macos4.json\n  ios4.json\n  tvos4.json\n  watchos4.json\n  overlay4.json\n  macos42.json\n  ios42.json\n  tvos42.json\n  watchos42.json\n  overlay42.json\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Objective-C Interop Option in CMake for Swift\nDESCRIPTION: Sets a CMake option to enable or disable Objective-C interoperability in the Swift standard library. This option is used by both the stdlib and toolchain.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_48\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_STDLIB_ENABLE_OBJC_INTEROP\n       \"Should stdlib be built with Obj-C interop.\"\n       \"${SWIFT_STDLIB_ENABLE_OBJC_INTEROP_default}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Substrings in Cocoa and Swift\nDESCRIPTION: Shows how to find a substring within a string in Cocoa and Swift. The Swift version returns a range, which is more useful than just an index.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_18\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (NSRange)rangeOfString:(NSString *)aString;\n```\n\nLANGUAGE: Swift\nCODE:\n```\nfunc find(_ sought: String) -> Range<String.IndexType>\n```\n\n----------------------------------------\n\nTITLE: Running clang-tidy on Multiple Swift Source Files\nDESCRIPTION: This command demonstrates how to use shell regex to run clang-tidy on multiple C++ files in a directory within the Swift project.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_55\n\nLANGUAGE: shell\nCODE:\n```\nclang-tidy -p=$PATH_TO_BUILD/swift-macosx-$(uname -m)/compile_commands.json $FULL_PATH_TO_DIR/*.cpp\n```\n\n----------------------------------------\n\nTITLE: Defining Function Specialization and Reabstraction Thunk Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for function specializations, merged functions, reabstraction thunks, and objc-to-swift-async completion handler block implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= global specialization       // function specialization\nglobal ::= global 'Tm'                 // merged function\nglobal ::= entity                      // some identifiable thing\nglobal ::= from-type to-type generic-signature? 'TR'  // reabstraction thunk\nglobal ::= impl-function-type type 'Tz' index? // objc-to-swift-async completion handler block implementation\nglobal ::= impl-function-type type 'TZ' index? // objc-to-swift-async completion handler block implementation (predefined by runtime)\nglobal ::= from-type to-type generic-signature? 'TR'  // reabstraction thunk\nglobal ::= impl-function-type type generic-signature? 'Tz'     // objc-to-swift-async completion handler block implementation\nglobal ::= impl-function-type type generic-signature? 'TZ'     // objc-to-swift-async completion handler block implementation (predefined by runtime)\nglobal ::= from-type to-type self-type generic-signature? 'Ty'  // reabstraction thunk with dynamic 'Self' capture\nglobal ::= from-type to-type generic-signature? 'Tr'  // obsolete mangling for reabstraction thunk\n```\n\n----------------------------------------\n\nTITLE: Aliasing Swift Compiler Modules to Stub in CMake\nDESCRIPTION: Inside the `if (NOT BOOTSTRAPPING_MODE)` block, this command creates an ALIAS library target `swiftCompilerModules` that points to the `swiftCompilerStub` library. This is used when a full compiler build is not required.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(swiftCompilerModules ALIAS swiftCompilerStub)\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Build for Windows Host Toolchain in CMake\nDESCRIPTION: Disables bounds-checked iterators for debug builds when using the host Swift toolchain on Windows. This allows linking debug binaries against release binaries of the host Swift runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_34\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Windows\" AND BOOTSTRAPPING_MODE STREQUAL \"HOSTTOOLS\" AND\n    CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n  add_definitions(-D_ITERATOR_DEBUG_LEVEL=0)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring libdispatch for Swift Build in CMake\nDESCRIPTION: Sets up conditions for building libdispatch for the host, specifically for non-Darwin systems when building certain Swift tools.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_56\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_BUILD_HOST_DISPATCH FALSE)\nif(SWIFT_ENABLE_DISPATCH AND NOT CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  # Only build libdispatch for the host if the host tools are being built and\n  # specifically if these two libraries that depend on it are built.\n  if(SWIFT_INCLUDE_TOOLS AND SWIFT_BUILD_SOURCEKIT)\n    set(SWIFT_BUILD_HOST_DISPATCH TRUE)\n  endif()\n\n  if(SWIFT_BUILD_HOST_DISPATCH)\n    if(NOT EXISTS \"${SWIFT_PATH_TO_LIBDISPATCH_SOURCE}\")\n      message(SEND_ERROR \"SourceKit requires libdispatch on non-Darwin hosts.  Please specify SWIFT_PATH_TO_LIBDISPATCH_SOURCE\")\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Examples of Extension Mangling in Swift\nDESCRIPTION: Provides examples of how constrained and unconstrained extensions are mangled differently in Swift. This section illustrates the rules for when extension mangling is applied based on requirements and generic constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_25\n\nLANGUAGE: swift\nCODE:\n```\nstruct S<A: ~Copyable, B: ~Copyable> {}\n\n  // An unconstrained extension.\n  extension S {}\n\n  // Also an unconstrained extension, because there are no inverses to mangle.\n  // This extension is exactly the same as the previous.\n  extension S where A: Copyable, B: Copyable {}\n\n  // A constrained extension, because of the added requirement `B: P` that is\n  // not already present in S.\n  extension S where B: P {}\n\n  // A constrained extension, because of the absence of `A: Copyable`.\n  // Despite also being absent in `S`, absences of invertible protocols\n  // are always mangled.\n  extension S where A: ~Copyable {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Swift Volatile Library Build\nDESCRIPTION: Configures build targets for embedded platforms when SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB is enabled. Creates separate targets for each embedded platform triple, with specialized compilation flags and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Volatile/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)\n  add_custom_target(embedded-volatile)\n  add_dependencies(embedded-libraries embedded-volatile)\n  foreach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})\n    string(REGEX REPLACE \"[ \\t]+\" \";\" list \"${entry}\")\n    list(GET list 0 arch)\n    list(GET list 1 mod)\n    list(GET list 2 triple)\n\n    set(SWIFT_SDK_embedded_ARCH_${arch}_MODULE \"${mod}\")\n    set(SWIFT_SDK_embedded_LIB_SUBDIR \"embedded\")\n    set(SWIFT_SDK_embedded_ARCH_${arch}_TRIPLE \"${triple}\")\n    add_swift_target_library_single(\n      embedded-volatile-${mod}\n      swift_Volatile\n      ONLY_SWIFTMODULE\n      IS_SDK_OVERLAY IS_FRAGILE\n\n      Volatile.swift\n      \n      SWIFT_COMPILE_FLAGS\n        -Xcc -ffreestanding -enable-experimental-feature Embedded\n        -parse-stdlib\n      C_COMPILE_FLAGS\n        -ffreestanding\n      MODULE_DIR \"${CMAKE_BINARY_DIR}/lib/swift/embedded\"\n      SDK \"embedded\"\n      ARCHITECTURE \"${arch}\"\n      DEPENDS embedded-stdlib-${mod}\n      INSTALL_IN_COMPONENT stdlib\n      )\n    add_dependencies(embedded-volatile embedded-volatile-${mod})\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Superclass Dependencies in Extension Binding\nDESCRIPTION: This code snippet shows how extension binding can depend on resolving superclasses. It illustrates the need to consider inheritance hierarchies when binding extensions to nested types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/DeclarationTypeChecker.rst#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nclass X { struct Inner { } }\nclass Y : X { }\nextension Y.Inner { }\n```\n\n----------------------------------------\n\nTITLE: Defining a Swift Struct with Unsafe Storage\nDESCRIPTION: This example defines a struct that contains storage involving unsafe types, which triggers a memory safety warning.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-memory-safety.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// struct MyTemporaryBuffer has storage involving unsafe types\nstruct MyTemporaryBuffer<T> {\n  private var storage: UnsafeBufferPointer<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InstructionSet in Swift for SIL\nDESCRIPTION: Defines `InstructionSet`, an extremely efficient set implementation designed for storing SIL instructions. It parallels the `InstructionSet` utility found in the C++ SIL optimizer. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nInstructionSet\n```\n\n----------------------------------------\n\nTITLE: Building XCTest for Android\nDESCRIPTION: CMake and Ninja commands to build the XCTest framework for Android. This provides unit testing capabilities for Swift projects on Android.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AndroidBuild.md#2025-04-23_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nmd S:\\b\\a\\xctest\ncd S:\\b\\a\\xctest\ncmake -C S:\\swift-build\\cmake\\caches\\android-armv7.cmake                                                                ^\n  -C S:\\swift-build\\cmake\\caches\\android-armv7-swift-flags.cmake                                                        ^\n  -G Ninja                                                                                                              ^\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo                                                                                     ^\n  -DCMAKE_INSTALL_PREFIX=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk/usr             ^\n  -DCMAKE_SWIFT_COMPILER=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe ^\n  -DCMAKE_TOOLCHAIN_FILE=S:\\swift-build\\cmake\\toolchains\\android.toolchain.cmake                                        ^\n  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr         ^\n  -DSWIFT_ANDROID_SDK=S:/b/a/Library/Developer/Platforms/andrfoid.platform/Developer/SDKs/android.sdk                   ^\n  -DXCTEST_PATH_TO_FOUNDATION_BUILD=S:/b/a/foundation                                                                   ^\n  -DXCTEST_PATH_TO_LIBDISPATCH_SOURCE=S:/swift-corelibs-libdispatch                                                     ^\n  -DXCTEST_PATH_TO_LIBDISPATCH_BUILD=S:/b/a/libdispatch                                                                 ^\n  -DENABLE_TESTING=NO                                                                                                   ^\n  S:/swift-corelibs-foundation\nninja\n```\n\n----------------------------------------\n\nTITLE: Reducing Debug Symbols in Swift Build (Bash)\nDESCRIPTION: This code snippet shows how to reduce the amount of debug symbols generated during the Swift build process to decrease memory usage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DevelopmentTips.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbuild-script --release --debug-swift\n```\n\n----------------------------------------\n\nTITLE: Array Implementation with Effects in Swift\nDESCRIPTION: Example showing how effects can be properly annotated in an Array implementation to maintain pure value type semantics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array {\n\n  @cow_storage var storage\n\n  @effect(...)\n  func getElement() { return storage.get() }\n\n  @effect(...)\n  func checkSubscript() { ... }\n\n  subscript { get {          // OK\n    checkSubscript()\n    return getElement()\n  } }\n\n  func getSize() {\n      return storage.size()  // Error!\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Generic Structures in Swift\nDESCRIPTION: This snippet defines two generic structures in Swift. BarGenericSwiftStruct1 has a single generic type, while BarGenericSwiftStruct2 has two generic types with a constraint on T.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/foo_swift_module.printed.comments.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nstruct BarGenericSwiftStruct1<T> {\n  init(t: T)\n  func bar1InstanceFunc()\n}\nstruct BarGenericSwiftStruct2<T, U> where T : BarProtocol {\n  init(t: T, u: U)\n  func bar2InstanceFunc()\n}\n```\n\n----------------------------------------\n\nTITLE: Printing LLVM IR Before Optimizations\nDESCRIPTION: Command to output LLVM Intermediate Representation before LLVM optimization passes\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -emit-ir -Xfrontend -disable-llvm-optzns -O file.swift\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Debug Expressions in SIL\nDESCRIPTION: Examples of using arithmetic operations in debug expressions to calculate offset values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_5\n\nLANGUAGE: sil\nCODE:\n```\ndebug_value %0 : $Builtin.Int64, var, name \"previous\", type $Int, expr op_consts:1:op_minus:op_fragment:#Int._value\ndebug_value %0 : $Builtin.Int64, var, name \"next\", type $Int, expr op_consts:1:op_plus:op_fragment:#Int._value\n```\n\n----------------------------------------\n\nTITLE: Signing macOS Program with Entitlements\nDESCRIPTION: Command to sign a macOS program with the necessary entitlements for the backtracer to work. This uses the codesign tool to apply the entitlements from the property list file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Backtracing.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ codesign --force --sign - --entitlements entitlements.plist \\\n    /path/to/your/program\n```\n\n----------------------------------------\n\nTITLE: Unicode Case_Ignorable Property Definition Header\nDESCRIPTION: The header for the 'Case_Ignorable' derived property as defined by Unicode Standard Definition D136. This property identifies characters that should be ignored for case mapping operations, including those with Word_Break property values of MidLetter, MidNumLet, or Single_Quote.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode-data\nCODE:\n```\n# ================================================\n\n# Derived Property:   Case_Ignorable (CI)\n#  As defined by Unicode Standard Definition D136\n#  C is defined to be case-ignorable if\n#    Word_Break(C) = MidLetter or MidNumLet or Single_Quote, or\n```\n\n----------------------------------------\n\nTITLE: Minimal Generic Signature Option 1\nDESCRIPTION: One possible minimal form of the generic signature after removing the redundant C2.Element: Equatable constraint, leaving only necessary constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n<C1, C2 where C1: Collection, C2: Collection, C1.Element: Equatable,\n C1.Element == C2.Element>\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Build with Optional Regex Parser in CMake\nDESCRIPTION: This CMake script configures the build process for the Swift compiler. It includes an option to build a regular expression parser into the compiler itself. If enabled, it collects source files from the _RegexParser directory and creates a static library. Otherwise, it creates a dummy target for dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ASTGen/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Sources)\n\n# If requested, build the regular expression parser into the compiler itself.\nif(SWIFT_BUILD_REGEX_PARSER_IN_COMPILER)\n  file(GLOB_RECURSE _COMPILER_REGEX_PARSER_SOURCES\n    \"${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_RegexParser/*.swift\")\n  set(COMPILER_REGEX_PARSER_SOURCES)\n  foreach(source ${_COMPILER_REGEX_PARSER_SOURCES})\n    file(TO_CMAKE_PATH \"${source}\" source)\n    list(APPEND COMPILER_REGEX_PARSER_SOURCES ${source})\n  endforeach()\n  message(STATUS \"Using Experimental String Processing library for _CompilerRegexParser (${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}).\")\n\n  add_pure_swift_host_library(_CompilerRegexParser STATIC\n    \"${COMPILER_REGEX_PARSER_SOURCES}\"\n  )\nelse()\n  # Dummy target for dependencies\n  add_custom_target(_CompilerRegexParser)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Swift Clang Importer\nDESCRIPTION: Adds dependencies to the swiftClangImporter target, including the generated sorted CF database and Clang tablegen targets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS)\nadd_dependencies(swiftClangImporter\n  generated_sorted_cf_database\n  ${CLANG_TABLEGEN_TARGETS})\n```\n\n----------------------------------------\n\nTITLE: Unchecked Reference Cast with Explicit Forwarding in Swift SIL\nDESCRIPTION: Demonstrates explicit ownership forwarding annotation in textual SIL for an unchecked reference cast operation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\n%cast = unchecked_ref_cast %val : $Klass to $Optional<Klass>, forwarding: @unowned\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Remote Inspection Static Library Build\nDESCRIPTION: CMake configuration that sets up the swiftRemoteInspection static library build by specifying source files, compilation options, and dependencies. The library provides type inspection and reflection functionality for Swift programs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftRemoteInspection/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftRemoteInspection STATIC\n  ${SWIFT_SOURCE_DIR}/stdlib/public/RemoteInspection/MetadataSource.cpp\n  ${SWIFT_SOURCE_DIR}/stdlib/public/RemoteInspection/TypeLowering.cpp\n  ${SWIFT_SOURCE_DIR}/stdlib/public/RemoteInspection/TypeRef.cpp\n  ${SWIFT_SOURCE_DIR}/stdlib/public/RemoteInspection/TypeRefBuilder.cpp)\ntarget_compile_options(swiftRemoteInspection PRIVATE -DSWIFT_ENABLE_REFLECTION)\ntarget_link_libraries(swiftRemoteInspection PUBLIC\n  swiftDemangling)\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Build Options for Host Compiler and SDK in CMake\nDESCRIPTION: Configures options for using the host compiler to build the Swift runtime and run tests. Also sets options for specifying SDKs and architectures for target binaries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_37\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER\n       \"Use the host compiler and not the internal clang to build the swift runtime\"\n       FALSE)\n\noption(SWIFT_RUN_TESTS_WITH_HOST_COMPILER\n       \"Run tests against the host compiler and not the just built swift\"\n       FALSE)\n\nset(SWIFT_SDKS \"\" CACHE STRING\n    \"If non-empty, limits building target binaries only to specified SDKs (despite other SDKs being available)\")\n\nset(SWIFT_PRIMARY_VARIANT_SDK \"\" CACHE STRING\n    \"Primary SDK for target binaries\")\nset(SWIFT_PRIMARY_VARIANT_ARCH \"\" CACHE STRING\n    \"Primary arch for target binaries\")\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Implementation Function Type Mangling (BNF)\nDESCRIPTION: Specifies the BNF-like syntax for mangling the implementation details of Swift function types (often seen in SIL). This includes the callee convention ('t' for thin, various letters 'a', 'd', 'g', 'o', etc. for thick conventions indicating ownership and representation), function attributes ('Cb', 'Cc', 'Cm', etc. indicating compatibility or other properties), an optional generic signature ('G' or 'g' attribute implies presence), and lists of parameters and results, each prefixed with their respective convention ('impl-convention'). Error results are indicated by a 'z' prefix on the convention.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_10\n\nLANGUAGE: bnf\nCODE:\n```\nimpl-function-type ::=\n  impl-callee-convention impl-function-attribute* generic-signature? '_'\n  impl-parameter* '_' impl-result* '_'\nimpl-callee-convention ::= 't'              // thin\nimpl-callee-convention ::= impl-convention  // thick, callee transferred with given convention\nimpl-convention ::= 'a'                     // direct, autoreleased\nimpl-convention ::= 'd'                     // direct, no ownership transfer\nimpl-convention ::= 'D'                     // direct, no ownership transfer,\n                                            // dependent on 'self' parameter\nimpl-convention ::= 'g'                     // direct, guaranteed\nimpl-convention ::= 'e'                     // direct, deallocating\nimpl-convention ::= 'i'                     // indirect, ownership transfer\nimpl-convention ::= 'l'                     // indirect, inout\nimpl-convention ::= 'G'                     // indirect, guaranteed\nimpl-convention ::= 'o'                     // direct, ownership transfer\nimpl-convention ::= 'z' impl-convention     // error result\nimpl-function-attribute ::= 'Cb'            // compatible with C block invocation function\nimpl-function-attribute ::= 'Cc'            // compatible with C global function\nimpl-function-attribute ::= 'Cm'            // compatible with Swift method\nimpl-function-attribute ::= 'CO'            // compatible with ObjC method\nimpl-function-attribute ::= 'Cw'            // compatible with protocol witness\nimpl-function-attribute ::= 'G'             // generic\nimpl-function-attribute ::= 'g'             // pseudogeneric\nimpl-parameter ::= impl-convention type\nimpl-result ::= impl-convention type\n```\n\n----------------------------------------\n\nTITLE: Differential Struct Definitions for Control Flow in Swift\nDESCRIPTION: Demonstrates the structure of differential structs for handling control flow, where each struct contains differential functions and a successor field pointing to the next block in the flow.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nstruct StructBB0 {\n  var diff_f: (Float) -> (Float) { get set }\n  var succ: EnumBB0 { get set }\n}\nstruct StructBB1 {\n  var diff_g: (Float) -> (Float) { get set }\n  var succ: EnumBB1 { get set }\n}\nstruct StructBB2 {\n  var diff_h: (Float) -> (Float) { get set }\n  var succ: EnumBB2 { get set }\n}\nstruct StructBB3 {\n  var diff_j: (Float) -> (Float) { get set }\n  // No successor.\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Declaration Attribute Changes in Swift\nDESCRIPTION: This snippet shows changes to declaration attributes in Swift, including modifications to enum attributes, function staticness, self access kinds, and variable ownership.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n/* Decl Attribute changes */\ncake: Enum IceKind is now without @frozen\ncake: Func C1.foo1() is now not static\ncake: Func HasMutatingMethodClone.foo() has self access kind changing from Mutating to NonMutating\ncake: Func S1.foo1() has self access kind changing from NonMutating to Mutating\ncake: Func S1.foo3() is now static\ncake: Var C1.CIIns1 changes from weak to strong\ncake: Var C1.CIIns2 changes from strong to weak\ncake: EnumElement FrozenKind.AddedCase has been added as a new enum case\n```\n\n----------------------------------------\n\nTITLE: Configuring and Linking Swift Demangle YAML Dump Tool in CMake\nDESCRIPTION: Defines a Swift host tool named swift-demangle-yamldump with its source file and dependencies. The tool requires the LLVM support component and is classified as a testsuite tool in the Swift project. It links against the swiftDemangling library privately.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-demangle-yamldump/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(swift-demangle-yamldump\n  swift-demangle-yamldump.cpp\n  LLVM_LINK_COMPONENTS support\n  SWIFT_COMPONENT testsuite-tools\n  )\ntarget_link_libraries(swift-demangle-yamldump\n                      PRIVATE\n                        swiftDemangling)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Macro Evaluation Library Build\nDESCRIPTION: Defines a pure Swift host library build target for macro evaluation functionality. Specifies source files including Macros.swift, PluginHost.swift, and SourceManager.swift along with required Swift and AST dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ASTGen/Sources/MacroEvaluation/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_pure_swift_host_library(swiftMacroEvaluation STATIC CXX_INTEROP\n  Macros.swift\n  PluginHost.swift\n  SourceManager.swift\n\n  DEPENDENCIES\n    swiftAST\n  SWIFT_DEPENDENCIES\n    _CompilerSwiftCompilerPluginMessageHandling\n    _CompilerSwiftDiagnostics\n    _CompilerSwiftOperators\n    _CompilerSwiftParser\n    _CompilerSwiftSyntax\n    _CompilerSwiftSyntaxMacroExpansion\n    swiftASTGen\n)\n```\n\n----------------------------------------\n\nTITLE: Defining FooClassBase Class in Swift\nDESCRIPTION: Declares a base class with instance and class methods, initializers, and a factory method marked as unavailable with a replacement message.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nclass FooClassBase {\n  class func fooBaseInstanceFunc0()\n  func fooBaseInstanceFunc0()\n  class func fooBaseInstanceFunc1(_ anObject: AnyObject!) -> FooClassBase!\n  func fooBaseInstanceFunc1(_ anObject: AnyObject!) -> FooClassBase!\n  init!()\n  convenience init!(float f: Float)\n  class func fooBaseInstanceFuncOverridden()\n  func fooBaseInstanceFuncOverridden()\n  class func fooBaseClassFunc0()\n  /*not inherited*/ init!(_ x: Int32)\n  @available(*, unavailable, message: \"use object construction 'FooClassBase(_:')\")\n  class func fooClassBase(_ x: Int32) -> FooClassBase!\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Syntax Build Parameters in CMake\nDESCRIPTION: Sets up build parameters for Swift Syntax libraries, including system processor, architecture, compiler targets, and output directories. It also configures RPATH settings for Linux, Android, OpenBSD, and FreeBSD platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftSyntax/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_SYSTEM_PROCESSOR ${SWIFT_HOST_VARIANT_ARCH})\nset(CMAKE_OSX_ARCHITECTURES ${SWIFT_HOST_VARIANT_ARCH})\nset(CMAKE_C_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})\nset(CMAKE_CXX_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})\nset(CMAKE_Swift_COMPILER_TARGET ${SWIFT_HOST_TRIPLE})\nset(BUILD_SHARED_LIBS ON)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${SWIFT_HOST_LIBRARIES_DEST_DIR}\")\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${SWIFT_HOST_LIBRARIES_DEST_DIR}\")\nif(SWIFT_HOST_VARIANT_SDK MATCHES \"LINUX|ANDROID|OPENBSD|FREEBSD\")\n  set(SWIFT_HOST_LIBRARIES_RPATH \"$ORIGIN;$ORIGIN/../${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: SourceKit Variable Type Response Format\nDESCRIPTION: JSON structure defining the response format for variable type requests, containing an array of variable type information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.variable_type_list>: (array) [var-type-info*]   // A list of variable declarations and types\n}\n```\n\n----------------------------------------\n\nTITLE: Subclassing and Super Initializer Delegation in Swift SIL\nDESCRIPTION: This code showcases the allocation and initialization flow in derived class initializers, including super.init delegation in SIL. It demonstrates how the derived initializer upcasts and calls its superclass's initializing entry-point, correctly managing ownership and reference casting in SIL. Relevant for those extending Swift classes and understanding inheritance at the SIL level.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILInitializerConventions.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\n// MyDerivedClass.__allocating_init(final:)\nsil hidden [exact_self_class] [ossa] @$s4test14MyDerivedClassC5finalACSi_tcfC : $@convention(method) (Int, @thick MyDerivedClass.Type) -> @owned MyDerivedClass {\n  // ... calls $s4test14MyDerivedClassC5finalACSi_tcfc in the usual way ...\n}\n\n// MyDerivedClass.init(final:)\nsil hidden [ossa] @$s4test14MyDerivedClassC5finalACSi_tcfc : $@convention(method) (Int, @owned MyDerivedClass) -> @owned MyDerivedClass {\nbb0(%0 : $Int, %1 : @owned $MyDerivedClass):\n  %2 = alloc_box ${ var MyDerivedClass }, let, name \"self\"\n  %3 = mark_uninitialized [derivedself] %2 : ${ var MyDerivedClass }\n  %4 = begin_borrow [lexical] %3 : ${ var MyDerivedClass }\n  %5 = project_box %4 : ${ var MyDerivedClass }, 0\n  debug_value %0 : $Int, let, name \"y\", argno 1\n  store %1 to [init] %5 : $*MyDerivedClass\n  \n  // ... initialize self.y ...\n  \n  // perform the super call. notice the ownership transfer to the super.init.\n  %14 = load [take] %5 : $*MyDerivedClass\n  %15 = upcast %14 : $MyDerivedClass to $MyClass\n  // function_ref MyClass.init(final:)\n  %16 = function_ref @$s4test7MyClassC5finalACSi_tcfc : $@convention(method) (Int, @owned MyClass) -> @owned MyClass // user: %17\n  %17 = apply %16(%0, %15) : $@convention(method) (Int, @owned MyClass) -> @owned MyClass // user: %18\n  %18 = unchecked_ref_cast %17 : $MyClass to $MyDerivedClass\n  store %18 to [init] %5 : $*MyDerivedClass       // id: %19\n  \n  // return as usual\n  %20 = load [copy] %5 : $*MyDerivedClass\n  end_borrow %4 : ${ var MyDerivedClass }\n  destroy_value %3 : ${ var MyDerivedClass }\n  return %20 : $MyDerivedClass\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Imported Header Dependencies Library\nDESCRIPTION: Defines a library target for header dependencies and adds the LLVM common dependencies to ensure proper build order of TableGen-generated headers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(importedHeaderDependencies \"${CMAKE_CURRENT_BINARY_DIR}/HeaderDependencies.cpp\")\nadd_dependencies(importedHeaderDependencies ${LLVM_COMMON_DEPENDS})\n```\n\n----------------------------------------\n\nTITLE: Defining Function Prototype in Swift\nDESCRIPTION: Declares a global function that takes an Int32 parameter without specifying implementation details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.module.printed.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nfunc doSomethingInHead(_ arg: Int32)\n```\n\n----------------------------------------\n\nTITLE: Unicode Line Breaking Rules\nDESCRIPTION: Test cases showing line breaking behavior between various Unicode characters including spaces, combining marks, control characters and special scripts. Each line represents a test case with specific character combinations and their expected breaking behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_0\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0020 ÷ 0020 ÷ #  ÷ [0.2] SPACE (Other) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ 0020 × 0308 ÷ 0020 ÷  #  ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ 0020 ÷ 000D ÷ #  ÷ [0.2] SPACE (Other) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Grapheme Break Test Format\nDESCRIPTION: Explains the format used for specifying grapheme break test cases. Each line contains a string of hex Unicode code points with break markers, optionally followed by a comment describing the test case.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakTest.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n<string> (# <comment>)?\n <string> contains hex Unicode code points, with\n\t÷ wherever there is a break opportunity, and\n\t× wherever there is not.\n <comment> the format can change, but currently it shows:\n\t- the sample character name\n\t- (x) the Grapheme_Cluster_Break property value for the sample character\n\t- [x] the rule that determines whether there is a break or not\n```\n\n----------------------------------------\n\nTITLE: Protocol Hierarchy with Root and Non-Root Associated Types\nDESCRIPTION: Example showing a protocol hierarchy where some associated types are root associated types (first declaration) and others are non-root (inherited declarations).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {\n  associatedtype A  // root associated type\n}\n\nprotocol Q: P {\n  associatedtype B   // not a root associated type (\"overrides\" P.A)\n  associatedtype C   // root associated type\n}\n```\n\n----------------------------------------\n\nTITLE: Generalized Accessors with Read and Modify in Swift\nDESCRIPTION: Shows how co-routines could be used to implement more efficient property accessors. The 'read' and 'modify' accessors allow direct access to values without unnecessary copies, using yield to provide references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nvar x: String\nvar y: String\nvar first: String {\n  read {\n    if x < y { yield x }\n    else { yield y }\n  }\n  modify {\n    if x < y { yield &x }\n    else { yield &y }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SourceKitD Test Dependencies\nDESCRIPTION: Sets up library dependencies for the sourcekitd-test executable, linking against SourceKit support libraries and Clang components essential for SourceKit testing functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(sourcekitd-test PRIVATE\n  SourceKitSupport\n  clangRewrite\n  clangLex\n  clangBasic)\n```\n\n----------------------------------------\n\nTITLE: Computed Property Declarations\nDESCRIPTION: Declares computed properties for enum values and an unnamed enumerator, including get-only properties of FooHelperSubEnum1 and Int types\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/FooHelper.FooHelperSub.printed.txt#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nvar FooHelperSubEnum1X: FooHelperSubEnum1 { get }\nvar FooHelperSubEnum1Y: FooHelperSubEnum1 { get }\nvar FooHelperSubUnnamedEnumeratorA1: Int { get }\n```\n\n----------------------------------------\n\nTITLE: Example Output for Detected Dependency Cycle (Text)\nDESCRIPTION: Presents the sample output produced by the Swift compiler when the `-debug-cycles` flag is used and a dependency cycle is found by the Request-Evaluator. It shows a tree-like structure tracing the requests involved in the cycle, highlighting the recursive dependency.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/RequestEvaluator.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n===CYCLE DETECTED===\n `--SuperclassTypeRequest(circular_inheritance.(file).Outer2@test/decl/class/circular_inheritance.swift:38:7)\n     `--InheritedTypeRequest(circular_inheritance.(file).Outer2@test/decl/class/circular_inheritance.swift:38:7, 0)\n         `--SuperclassTypeRequest(circular_inheritance.(file).Outer2@test/decl/class/circular_inheritance.swift:38:7) (cyclic dependency)\n```\n\n----------------------------------------\n\nTITLE: Calling Custom Python Function in LLDB\nDESCRIPTION: Executes the previously defined Python function `custom_step` from the LLDB command line using the `script` command.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_28\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) script custom_step()\n```\n\n----------------------------------------\n\nTITLE: Unicode Lowercase Letter (Ll) Codepoint Definitions\nDESCRIPTION: Defines Unicode codepoints for lowercase letters (Ll category), including Latin, Cherokee, Armenian, Mathematical, and other script variants. Contains 2258 total code points spanning multiple writing systems and mathematical notations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode\nCODE:\n```\nA7D3          ; Ll #       LATIN SMALL LETTER DOUBLE THORN\nA7D5          ; Ll #       LATIN SMALL LETTER DOUBLE WYNN\nA7D7          ; Ll #       LATIN SMALL LETTER MIDDLE SCOTS S\n[...truncated for brevity...]\n1E922..1E943  ; Ll #  [34] ADLAM SMALL LETTER ALIF..ADLAM SMALL LETTER SHA\n\n# Total code points: 2258\n```\n\n----------------------------------------\n\nTITLE: Defining a Protocol in Swift\nDESCRIPTION: This snippet defines a simple protocol named BarProtocol in Swift. It requires conforming types to implement an instanceFunc() method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/foo_swift_module.printed.comments.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol BarProtocol {\n  func instanceFunc()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SWIFT_INCLUDE_TEST_BINARIES Option in CMake\nDESCRIPTION: Defines a CMake build option named SWIFT_INCLUDE_TEST_BINARIES. This boolean option controls whether targets for building test binaries are created, even if the main SWIFT_INCLUDE_TESTS option is disabled. It defaults to TRUE.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_INCLUDE_TEST_BINARIES\n  \"Create targets for building/running test binaries even if SWIFT_INCLUDE_TESTS is disabled\"\n  TRUE)\n```\n\n----------------------------------------\n\nTITLE: Specifying Output File for Swift Optimizer Counters using Command Line\nDESCRIPTION: This command-line option redirects the Swift optimizer statistics output from the standard error (default) to a specified file. Replace `your_file_name` with the desired path for the CSV output containing the counters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n-Xllvm -sil-stats-output-file=your_file_name\n```\n\n----------------------------------------\n\nTITLE: Declaring FooClassPropertyOwnership with Various Property Types\nDESCRIPTION: Defines a class with properties of different ownership types including unowned, strong, weak, and copyable references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_25\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooClassPropertyOwnership : FooClassBase {\n  unowned(unsafe) var assignable: @sil_unmanaged AnyObject!\n  unowned(unsafe) var unsafeAssignable: @sil_unmanaged AnyObject!\n  var retainable: AnyObject!\n  var strongRef: AnyObject!\n  @NSCopying var copyable: AnyObject!\n  weak var weakRef: @sil_weak AnyObject!\n  var scalar: Int32\n  init!()\n  convenience init!(float f: Float)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing CMutablePointer with _BuiltinInOutAddressConvertible in Swift\nDESCRIPTION: A concrete implementation of the _BuiltinInOutAddressConvertible protocol with CMutablePointer, allowing inout parameters to be passed as mutable pointers. Includes example usage that demonstrates passing a variable by reference.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nstruct CMutablePointer<T>: _BuiltinInOutAddressConvertible {\n  let ptr: Builtin.RawPointer\n\n  typealias InOutType = T\n\n  @_transparent\n  static func _convertFromInOutAddress(_ p: Builtin.RawPointer)\n  -> CMutablePointer {\n    return CMutablePointer(p)\n  }\n}\n\nfunc foo(_ p: CMutablePointer<Int>) { }\n\nvar i = 0\nfoo(&i)\n```\n\n----------------------------------------\n\nTITLE: Compiling Swift Generics PDF using Make\nDESCRIPTION: This snippet demonstrates how to use the 'make' command to compile the Swift Generics PDF document. It runs pdflatex and bibtex in the correct order to generate the final document with bibliography, index, and cross-references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Generics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncd docs/Generics/\nmake\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Cased Property Code Point Ranges\nDESCRIPTION: A comprehensive list of Unicode code point ranges that have the 'Cased' property. These code points correspond to characters that have Lowercase or Uppercase property or have a General_Category value of Titlecase_Letter. The list covers 4578 code points in total across various scripts and writing systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode-data\nCODE:\n```\n#  C has the Lowercase or Uppercase property or has a General_Category value of Titlecase_Letter.\n\n0041..005A    ; Cased\n0061..007A    ; Cased\n00AA          ; Cased\n00B5          ; Cased\n00BA          ; Cased\n00C0..00D6    ; Cased\n00D8..00F6    ; Cased\n00F8..01BA    ; Cased\n01BC..01BF    ; Cased\n01C4..0293    ; Cased\n0295..02AF    ; Cased\n02B0..02B8    ; Cased\n02C0..02C1    ; Cased\n02E0..02E4    ; Cased\n0345          ; Cased\n0370..0373    ; Cased\n0376..0377    ; Cased\n037A          ; Cased\n037B..037D    ; Cased\n037F          ; Cased\n0386          ; Cased\n0388..038A    ; Cased\n038C          ; Cased\n038E..03A1    ; Cased\n03A3..03F5    ; Cased\n03F7..0481    ; Cased\n048A..052F    ; Cased\n0531..0556    ; Cased\n0560..0588    ; Cased\n10A0..10C5    ; Cased\n10C7          ; Cased\n10CD          ; Cased\n10D0..10FA    ; Cased\n10FC          ; Cased\n10FD..10FF    ; Cased\n13A0..13F5    ; Cased\n13F8..13FD    ; Cased\n1C80..1C8A    ; Cased\n1C90..1CBA    ; Cased\n1CBD..1CBF    ; Cased\n1D00..1D2B    ; Cased\n1D2C..1D6A    ; Cased\n1D6B..1D77    ; Cased\n1D78          ; Cased\n1D79..1D9A    ; Cased\n1D9B..1DBF    ; Cased\n1E00..1F15    ; Cased\n1F18..1F1D    ; Cased\n1F20..1F45    ; Cased\n1F48..1F4D    ; Cased\n1F50..1F57    ; Cased\n1F59          ; Cased\n1F5B          ; Cased\n1F5D          ; Cased\n1F5F..1F7D    ; Cased\n1F80..1FB4    ; Cased\n1FB6..1FBC    ; Cased\n1FBE          ; Cased\n1FC2..1FC4    ; Cased\n1FC6..1FCC    ; Cased\n1FD0..1FD3    ; Cased\n1FD6..1FDB    ; Cased\n1FE0..1FEC    ; Cased\n1FF2..1FF4    ; Cased\n1FF6..1FFC    ; Cased\n2071          ; Cased\n207F          ; Cased\n2090..209C    ; Cased\n2102          ; Cased\n2107          ; Cased\n210A..2113    ; Cased\n2115          ; Cased\n2119..211D    ; Cased\n2124          ; Cased\n2126          ; Cased\n2128          ; Cased\n212A..212D    ; Cased\n212F..2134    ; Cased\n2139          ; Cased\n213C..213F    ; Cased\n2145..2149    ; Cased\n214E          ; Cased\n2160..217F    ; Cased\n2183..2184    ; Cased\n24B6..24E9    ; Cased\n2C00..2C7B    ; Cased\n2C7C..2C7D    ; Cased\n2C7E..2CE4    ; Cased\n2CEB..2CEE    ; Cased\n2CF2..2CF3    ; Cased\n2D00..2D25    ; Cased\n2D27          ; Cased\n2D2D          ; Cased\nA640..A66D    ; Cased\nA680..A69B    ; Cased\nA69C..A69D    ; Cased\nA722..A76F    ; Cased\nA770          ; Cased\nA771..A787    ; Cased\nA78B..A78E    ; Cased\nA790..A7CD    ; Cased\nA7D0..A7D1    ; Cased\nA7D3          ; Cased\nA7D5..A7DC    ; Cased\nA7F2..A7F4    ; Cased\nA7F5..A7F6    ; Cased\nA7F8..A7F9    ; Cased\nA7FA          ; Cased\nAB30..AB5A    ; Cased\nAB5C..AB5F    ; Cased\nAB60..AB68    ; Cased\nAB69          ; Cased\nAB70..ABBF    ; Cased\nFB00..FB06    ; Cased\nFB13..FB17    ; Cased\nFF21..FF3A    ; Cased\nFF41..FF5A    ; Cased\n10400..1044F  ; Cased\n104B0..104D3  ; Cased\n104D8..104FB  ; Cased\n10570..1057A  ; Cased\n1057C..1058A  ; Cased\n1058C..10592  ; Cased\n10594..10595  ; Cased\n10597..105A1  ; Cased\n105A3..105B1  ; Cased\n105B3..105B9  ; Cased\n105BB..105BC  ; Cased\n10780         ; Cased\n10783..10785  ; Cased\n10787..107B0  ; Cased\n107B2..107BA  ; Cased\n10C80..10CB2  ; Cased\n10CC0..10CF2  ; Cased\n10D50..10D65  ; Cased\n10D70..10D85  ; Cased\n118A0..118DF  ; Cased\n16E40..16E7F  ; Cased\n1D400..1D454  ; Cased\n1D456..1D49C  ; Cased\n1D49E..1D49F  ; Cased\n1D4A2         ; Cased\n1D4A5..1D4A6  ; Cased\n1D4A9..1D4AC  ; Cased\n1D4AE..1D4B9  ; Cased\n1D4BB         ; Cased\n1D4BD..1D4C3  ; Cased\n1D4C5..1D505  ; Cased\n1D507..1D50A  ; Cased\n1D50D..1D514  ; Cased\n1D516..1D51C  ; Cased\n1D51E..1D539  ; Cased\n1D53B..1D53E  ; Cased\n1D540..1D544  ; Cased\n1D546         ; Cased\n1D54A..1D550  ; Cased\n1D552..1D6A5  ; Cased\n1D6A8..1D6C0  ; Cased\n1D6C2..1D6DA  ; Cased\n1D6DC..1D6FA  ; Cased\n1D6FC..1D714  ; Cased\n1D716..1D734  ; Cased\n1D736..1D74E  ; Cased\n1D750..1D76E  ; Cased\n1D770..1D788  ; Cased\n1D78A..1D7A8  ; Cased\n1D7AA..1D7C2  ; Cased\n1D7C4..1D7CB  ; Cased\n1DF00..1DF09  ; Cased\n1DF0B..1DF1E  ; Cased\n1DF25..1DF2A  ; Cased\n1E030..1E06D  ; Cased\n1E900..1E943  ; Cased\n1F130..1F149  ; Cased\n1F150..1F169  ; Cased\n1F170..1F189  ; Cased\n\n# Total code points: 4578\n```\n\n----------------------------------------\n\nTITLE: Declaring Type Alias and Macro Constant in Swift\nDESCRIPTION: Defines a type alias for Int32 and a read-only constant variable, likely representing a macro from a C/Objective-C codebase.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\ntypealias typedef_int_t = Int32\nvar FOO_MACRO_1: Int32 { get }\n```\n\n----------------------------------------\n\nTITLE: Implementing EndScope Function in Swift Standard Library\nDESCRIPTION: Function that handles immediate destruction of local variables or ending of access for inout/shared declarations. Ensures destruction or access end by execution time.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OwnershipManifesto.md#2025-04-23_snippet_14\n\nLANGUAGE: swift\nCODE:\n```\nfunc endScope<T>(_ value: T) -> () {}\n```\n\n----------------------------------------\n\nTITLE: Has Symbol SIL Instruction Definition\nDESCRIPTION: Defines the syntax for has_symbol instruction that checks if symbol addresses for a given declaration are non-null, used for weak linking support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_206\n\nLANGUAGE: none\nCODE:\n```\nsil-instruction ::= 'has_symbol' sil-decl-ref\n```\n\n----------------------------------------\n\nTITLE: C++17 Template Enable_If Version\nDESCRIPTION: Alternative representation using std::enable_if for C++17 compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_59\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename T,\n         typename = std::enable_if_t<swift::isUsableInGenericContext<T>>>\nvoid swapTwoValues(T& a, T& b)\n```\n\n----------------------------------------\n\nTITLE: Same-type Constraint Sets Example 2\nDESCRIPTION: Second possible set of constraints to establish type equivalence between three Collection Element types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nC1.Element == C2.Element, C2.Element == C3.Element\n```\n\n----------------------------------------\n\nTITLE: Setting Darwin Deployment Target Versions for Swift Build in CMake\nDESCRIPTION: Configures minimum deployment target versions for various Apple platforms (macOS, iOS, tvOS, watchOS, xrOS) and sets compatibility library deployment versions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_45\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_DARWIN_DEPLOYMENT_VERSION_OSX \"13.0\" CACHE STRING\n    \"Minimum deployment target version for OS X\")\n\nset(SWIFT_DARWIN_DEPLOYMENT_VERSION_IOS \"16.0\" CACHE STRING\n    \"Minimum deployment target version for iOS\")\n\nset(SWIFT_DARWIN_DEPLOYMENT_VERSION_TVOS \"16.0\" CACHE STRING\n    \"Minimum deployment target version for tvOS\")\n\nset(SWIFT_DARWIN_DEPLOYMENT_VERSION_WATCHOS \"6.0\" CACHE STRING\n    \"Minimum deployment target version for watchOS\")\n\nset(SWIFT_DARWIN_DEPLOYMENT_VERSION_XROS \"1.0\" CACHE STRING\n    \"Minimum deployment target version for xrOS\")\n\nset(COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX \"10.9\")\nset(COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS \"7.0\")\nset(COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS \"9.0\")\nset(COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS \"2.0\")\nset(COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS \"1.0\")\nset(COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_MACCATALYST \"13.1\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Grapheme_Base Code Point Ranges\nDESCRIPTION: This is a data file that defines which Unicode code points have the Grapheme_Base property. Each line lists either a single code point or a range of code points in hexadecimal format, followed by a comment indicating the property assignment. This information is crucial for handling text segmentation and grapheme cluster determination in Unicode text processing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_42\n\nLANGUAGE: config\nCODE:\n```\nAA44..AA4B    ; Grapheme_Base\nAA4D          ; Grapheme_Base\nAA50..AA59    ; Grapheme_Base\nAA5C..AA5F    ; Grapheme_Base\nAA60..AA6F    ; Grapheme_Base\nAA70          ; Grapheme_Base\nAA71..AA76    ; Grapheme_Base\nAA77..AA79    ; Grapheme_Base\nAA7A          ; Grapheme_Base\nAA7B          ; Grapheme_Base\nAA7D          ; Grapheme_Base\nAA7E..AAAF    ; Grapheme_Base\nAAB1          ; Grapheme_Base\nAAB5..AAB6    ; Grapheme_Base\nAAB9..AABD    ; Grapheme_Base\nAAC0          ; Grapheme_Base\nAAC2          ; Grapheme_Base\nAADB..AADC    ; Grapheme_Base\nAADD          ; Grapheme_Base\nAADE..AADF    ; Grapheme_Base\nAAE0..AAEA    ; Grapheme_Base\nAAEB          ; Grapheme_Base\nAAEE..AAEF    ; Grapheme_Base\nAAF0..AAF1    ; Grapheme_Base\nAAF2          ; Grapheme_Base\nAAF3..AAF4    ; Grapheme_Base\nAAF5          ; Grapheme_Base\nAB01..AB06    ; Grapheme_Base\nAB09..AB0E    ; Grapheme_Base\nAB11..AB16    ; Grapheme_Base\nAB20..AB26    ; Grapheme_Base\nAB28..AB2E    ; Grapheme_Base\nAB30..AB5A    ; Grapheme_Base\nAB5B          ; Grapheme_Base\nAB5C..AB5F    ; Grapheme_Base\nAB60..AB68    ; Grapheme_Base\nAB69          ; Grapheme_Base\nAB6A..AB6B    ; Grapheme_Base\nAB70..ABBF    ; Grapheme_Base\nABC0..ABE2    ; Grapheme_Base\nABE3..ABE4    ; Grapheme_Base\nABE6..ABE7    ; Grapheme_Base\nABE9..ABEA    ; Grapheme_Base\nABEB          ; Grapheme_Base\nABEC          ; Grapheme_Base\nABF0..ABF9    ; Grapheme_Base\nAC00..D7A3    ; Grapheme_Base\nD7B0..D7C6    ; Grapheme_Base\nD7CB..D7FB    ; Grapheme_Base\nF7F3..F84F    ; Grapheme_Base\nF880..F883    ; Grapheme_Base\nF89A..F89E    ; Grapheme_Base\nF8A0..F8FF    ; Grapheme_Base\nF900..FA6D    ; Grapheme_Base\nFA70..FAD9    ; Grapheme_Base\nFB00..FB06    ; Grapheme_Base\nFB13..FB17    ; Grapheme_Base\nFB1D          ; Grapheme_Base\nFB1F..FB28    ; Grapheme_Base\nFB29          ; Grapheme_Base\nFB2A..FB36    ; Grapheme_Base\nFB38..FB3C    ; Grapheme_Base\nFB3E          ; Grapheme_Base\nFB40..FB41    ; Grapheme_Base\nFB43..FB44    ; Grapheme_Base\nFB46..FBB1    ; Grapheme_Base\nFBB2..FBC2    ; Grapheme_Base\nFBD3..FD3D    ; Grapheme_Base\nFD3E          ; Grapheme_Base\nFD3F          ; Grapheme_Base\nFD40..FD4F    ; Grapheme_Base\nFD50..FD8F    ; Grapheme_Base\nFD92..FDC7    ; Grapheme_Base\nFDCF          ; Grapheme_Base\nFDF0..FDFB    ; Grapheme_Base\nFDFC          ; Grapheme_Base\nFDFD..FDFF    ; Grapheme_Base\nFE10..FE16    ; Grapheme_Base\nFE17          ; Grapheme_Base\nFE18          ; Grapheme_Base\nFE19          ; Grapheme_Base\nFE30          ; Grapheme_Base\nFE31..FE32    ; Grapheme_Base\nFE33..FE34    ; Grapheme_Base\nFE35          ; Grapheme_Base\nFE36          ; Grapheme_Base\nFE37          ; Grapheme_Base\nFE38          ; Grapheme_Base\nFE39          ; Grapheme_Base\nFE3A          ; Grapheme_Base\nFE3B          ; Grapheme_Base\nFE3C          ; Grapheme_Base\nFE3D          ; Grapheme_Base\nFE3E          ; Grapheme_Base\nFE3F          ; Grapheme_Base\nFE40          ; Grapheme_Base\nFE41          ; Grapheme_Base\nFE42          ; Grapheme_Base\nFE43          ; Grapheme_Base\nFE44          ; Grapheme_Base\nFE45..FE46    ; Grapheme_Base\nFE47          ; Grapheme_Base\nFE48          ; Grapheme_Base\nFE49..FE4C    ; Grapheme_Base\nFE4D..FE4F    ; Grapheme_Base\nFE50..FE52    ; Grapheme_Base\nFE54..FE57    ; Grapheme_Base\nFE58          ; Grapheme_Base\nFE59          ; Grapheme_Base\nFE5A          ; Grapheme_Base\nFE5B          ; Grapheme_Base\nFE5C          ; Grapheme_Base\nFE5D          ; Grapheme_Base\nFE5E          ; Grapheme_Base\nFE5F..FE61    ; Grapheme_Base\nFE62          ; Grapheme_Base\nFE63          ; Grapheme_Base\nFE64..FE66    ; Grapheme_Base\nFE68          ; Grapheme_Base\nFE69          ; Grapheme_Base\nFE6A..FE6B    ; Grapheme_Base\nFE70..FE74    ; Grapheme_Base\nFE76..FEFC    ; Grapheme_Base\nFF01..FF03    ; Grapheme_Base\nFF04          ; Grapheme_Base\nFF05..FF07    ; Grapheme_Base\nFF08          ; Grapheme_Base\nFF09          ; Grapheme_Base\nFF0A          ; Grapheme_Base\nFF0B          ; Grapheme_Base\nFF0C          ; Grapheme_Base\nFF0D          ; Grapheme_Base\nFF0E..FF0F    ; Grapheme_Base\nFF10..FF19    ; Grapheme_Base\nFF1A..FF1B    ; Grapheme_Base\nFF1C..FF1E    ; Grapheme_Base\nFF1F..FF20    ; Grapheme_Base\nFF21..FF3A    ; Grapheme_Base\nFF3B          ; Grapheme_Base\nFF3C          ; Grapheme_Base\nFF3D          ; Grapheme_Base\nFF3E          ; Grapheme_Base\nFF3F          ; Grapheme_Base\nFF40          ; Grapheme_Base\nFF41..FF5A    ; Grapheme_Base\nFF5B          ; Grapheme_Base\nFF5C          ; Grapheme_Base\nFF5D          ; Grapheme_Base\nFF5E          ; Grapheme_Base\nFF5F          ; Grapheme_Base\nFF60          ; Grapheme_Base\nFF61          ; Grapheme_Base\nFF62          ; Grapheme_Base\nFF63          ; Grapheme_Base\nFF64..FF65    ; Grapheme_Base\nFF66..FF6F    ; Grapheme_Base\nFF70          ; Grapheme_Base\nFF71..FF9D    ; Grapheme_Base\nFFA0..FFBE    ; Grapheme_Base\nFFC2..FFC7    ; Grapheme_Base\nFFCA..FFCF    ; Grapheme_Base\nFFD2..FFD7    ; Grapheme_Base\nFFDA..FFDC    ; Grapheme_Base\nFFE0..FFE1    ; Grapheme_Base\nFFE2          ; Grapheme_Base\nFFE3          ; Grapheme_Base\nFFE4          ; Grapheme_Base\nFFE5..FFE6    ; Grapheme_Base\nFFE8          ; Grapheme_Base\nFFE9..FFEC    ; Grapheme_Base\nFFED..FFEE    ; Grapheme_Base\nFFFC..FFFD    ; Grapheme_Base\n10000..1000B  ; Grapheme_Base\n1000D..10026  ; Grapheme_Base\n10028..1003A  ; Grapheme_Base\n1003C..1003D  ; Grapheme_Base\n1003F..1004D  ; Grapheme_Base\n10050..1005D  ; Grapheme_Base\n10080..100FA  ; Grapheme_Base\n10100..10102  ; Grapheme_Base\n10107..10133  ; Grapheme_Base\n10137..1013F  ; Grapheme_Base\n10140..10174  ; Grapheme_Base\n10175..10178  ; Grapheme_Base\n10179..10189  ; Grapheme_Base\n1018A..1018B  ; Grapheme_Base\n1018C..1018E  ; Grapheme_Base\n10190..1019C  ; Grapheme_Base\n101A0         ; Grapheme_Base\n101D0..101FC  ; Grapheme_Base\n10280..1029C  ; Grapheme_Base\n102A0..102D0  ; Grapheme_Base\n102E1..102FB  ; Grapheme_Base\n10300..1031F  ; Grapheme_Base\n10320..10323  ; Grapheme_Base\n1032D..10340  ; Grapheme_Base\n10341         ; Grapheme_Base\n10342..10349  ; Grapheme_Base\n1034A         ; Grapheme_Base\n10350..10375  ; Grapheme_Base\n10380..1039D  ; Grapheme_Base\n1039F         ; Grapheme_Base\n103A0..103C3  ; Grapheme_Base\n103C8..103CF  ; Grapheme_Base\n103D0         ; Grapheme_Base\n103D1..103D5  ; Grapheme_Base\n10400..1044F  ; Grapheme_Base\n10450..1049D  ; Grapheme_Base\n104A0..104A9  ; Grapheme_Base\n104B0..104D3  ; Grapheme_Base\n104D8..104FB  ; Grapheme_Base\n10500..10527  ; Grapheme_Base\n10530..10563  ; Grapheme_Base\n1056F         ; Grapheme_Base\n10570..1057A  ; Grapheme_Base\n1057C..1058A  ; Grapheme_Base\n1058C..10592  ; Grapheme_Base\n10594..10595  ; Grapheme_Base\n10597..105A1  ; Grapheme_Base\n105A3..105B1  ; Grapheme_Base\n105B3..105B9  ; Grapheme_Base\n105BB..105BC  ; Grapheme_Base\n105C0..105F3  ; Grapheme_Base\n10600..10736  ; Grapheme_Base\n10740..10755  ; Grapheme_Base\n10760..10767  ; Grapheme_Base\n10780..10785  ; Grapheme_Base\n10787..107B0  ; Grapheme_Base\n107B2..107BA  ; Grapheme_Base\n10800..10805  ; Grapheme_Base\n10808         ; Grapheme_Base\n1080A..10835  ; Grapheme_Base\n10837..10838  ; Grapheme_Base\n1083C         ; Grapheme_Base\n1083F..10855  ; Grapheme_Base\n10857         ; Grapheme_Base\n10858..1085F  ; Grapheme_Base\n10860..10876  ; Grapheme_Base\n10877..10878  ; Grapheme_Base\n10879..1087F  ; Grapheme_Base\n10880..1089E  ; Grapheme_Base\n108A7..108AF  ; Grapheme_Base\n108E0..108F2  ; Grapheme_Base\n108F4..108F5  ; Grapheme_Base\n108FB..108FF  ; Grapheme_Base\n10900..10915  ; Grapheme_Base\n10916..1091B  ; Grapheme_Base\n1091F         ; Grapheme_Base\n10920..10939  ; Grapheme_Base\n1093F         ; Grapheme_Base\n10980..109B7  ; Grapheme_Base\n109BC..109BD  ; Grapheme_Base\n109BE..109BF  ; Grapheme_Base\n109C0..109CF  ; Grapheme_Base\n109D2..109FF  ; Grapheme_Base\n10A00         ; Grapheme_Base\n10A10..10A13  ; Grapheme_Base\n10A15..10A17  ; Grapheme_Base\n10A19..10A35  ; Grapheme_Base\n10A40..10A48  ; Grapheme_Base\n10A50..10A58  ; Grapheme_Base\n10A60..10A7C  ; Grapheme_Base\n10A7D..10A7E  ; Grapheme_Base\n10A7F         ; Grapheme_Base\n10A80..10A9C  ; Grapheme_Base\n10A9D..10A9F  ; Grapheme_Base\n10AC0..10AC7  ; Grapheme_Base\n10AC8         ; Grapheme_Base\n10AC9..10AE4  ; Grapheme_Base\n10AEB..10AEF  ; Grapheme_Base\n10AF0..10AF6  ; Grapheme_Base\n10B00..10B35  ; Grapheme_Base\n10B39..10B3F  ; Grapheme_Base\n10B40..10B55  ; Grapheme_Base\n10B58..10B5F  ; Grapheme_Base\n10B60..10B72  ; Grapheme_Base\n10B78..10B7F  ; Grapheme_Base\n10B80..10B91  ; Grapheme_Base\n10B99..10B9C  ; Grapheme_Base\n10BA9..10BAF  ; Grapheme_Base\n10C00..10C48  ; Grapheme_Base\n10C80..10CB2  ; Grapheme_Base\n10CC0..10CF2  ; Grapheme_Base\n10CFA..10CFF  ; Grapheme_Base\n10D00..10D23  ; Grapheme_Base\n10D30..10D39  ; Grapheme_Base\n10D40..10D49  ; Grapheme_Base\n10D4A..10D4D  ; Grapheme_Base\n10D4E         ; Grapheme_Base\n10D4F         ; Grapheme_Base\n10D50..10D65  ; Grapheme_Base\n10D6E         ; Grapheme_Base\n10D6F         ; Grapheme_Base\n10D70..10D85  ; Grapheme_Base\n10D8E..10D8F  ; Grapheme_Base\n10E60..10E7E  ; Grapheme_Base\n10E80..10EA9  ; Grapheme_Base\n10EAD         ; Grapheme_Base\n10EB0..10EB1  ; Grapheme_Base\n10EC2..10EC4  ; Grapheme_Base\n10F00..10F1C  ; Grapheme_Base\n10F1D..10F26  ; Grapheme_Base\n10F27         ; Grapheme_Base\n10F30..10F45  ; Grapheme_Base\n10F51..10F54  ; Grapheme_Base\n10F55..10F59  ; Grapheme_Base\n10F70..10F81  ; Grapheme_Base\n10F86..10F89  ; Grapheme_Base\n10FB0..10FC4  ; Grapheme_Base\n10FC5..10FCB  ; Grapheme_Base\n10FE0..10FF6  ; Grapheme_Base\n11000         ; Grapheme_Base\n11002         ; Grapheme_Base\n11003..11037  ; Grapheme_Base\n11047..1104D  ; Grapheme_Base\n11052..11065  ; Grapheme_Base\n11066..1106F  ; Grapheme_Base\n11071..11072  ; Grapheme_Base\n11075         ; Grapheme_Base\n11082         ; Grapheme_Base\n11083..110AF  ; Grapheme_Base\n110B0..110B2  ; Grapheme_Base\n110B7..110B8  ; Grapheme_Base\n110BB..110BC  ; Grapheme_Base\n110BE..110C1  ; Grapheme_Base\n110D0..110E8  ; Grapheme_Base\n110F0..110F9  ; Grapheme_Base\n11103..11126  ; Grapheme_Base\n1112C         ; Grapheme_Base\n11136..1113F  ; Grapheme_Base\n11140..11143  ; Grapheme_Base\n11144         ; Grapheme_Base\n11145..11146  ; Grapheme_Base\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Parse Unit Tests in CMake\nDESCRIPTION: This snippet adds a new unit test target for Swift Parse. It specifies the test files to be included in the build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Parse/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_unittest(SwiftParseTests\n  BuildConfigTests.cpp\n  LexerTests.cpp\n  TokenizerTests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Demangled Assembly Code (Shell)\nDESCRIPTION: Compiles a Swift file (`tmp.swift`) to assembly (Intel syntax, output to stdout), pipes the output to `swift demangle` to convert mangled Swift symbols into human-readable names, and saves the result to `tmp-demangled.S`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nswiftc tmp.swift -emit-assembly -Xllvm -x86-asm-syntax=intel -o - \\\n  | swift demangle > tmp-demangled.S\n```\n\n----------------------------------------\n\nTITLE: Accessing Hidden Help Flags for Clang/Swiftc (sh)\nDESCRIPTION: Demonstrates shell commands to view hidden help options for the Clang (`clang --help-hidden`) and Swift (`swiftc --help-hidden`) compilers, revealing less common or internal flags. Requires the respective compilers to be installed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nclang --help-hidden\n```\n\nLANGUAGE: sh\nCODE:\n```\nswiftc --help-hidden\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Syntax Modules for Installation in CMake\nDESCRIPTION: Specifies a list of Swift Syntax modules to be installed as part of the build process. These modules include various components of the Swift Syntax library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftSyntax/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_SYNTAX_MODULES\n  SwiftBasicFormat\n  SwiftIfConfig\n  SwiftParser\n  SwiftParserDiagnostics\n  SwiftDiagnostics\n  SwiftSyntax\n  SwiftOperators\n  SwiftSyntaxBuilder\n  SwiftSyntaxMacros\n  SwiftSyntaxMacroExpansion\n  SwiftCompilerPluginMessageHandling\n  SwiftIDEUtils\n  SwiftRefactor\n  SwiftLibraryPluginProvider\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Semantic Analysis Unit Tests in CMake\nDESCRIPTION: This CMake code configures the swiftSemaTests unit test target. It adds source files for various semantic analysis test components, links necessary libraries, and sets compiler definitions for the Swift library directory path.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Sema/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_unittest(swiftSemaTests\n  SemaFixture.cpp\n  BindingInferenceTests.cpp\n  ConstraintGenerationTests.cpp\n  ConstraintSimplificationTests.cpp\n  ConstraintSystemDumpTests.cpp\n  UnresolvedMemberLookupTests.cpp\n  PlaceholderTypeInferenceTests.cpp\n  SolutionFilteringTests.cpp\n  KeypathFunctionConversionTests.cpp)\n\ntarget_link_libraries(swiftSemaTests\n  PRIVATE\n    swiftAST\n    swiftSema\n    swiftSerialization)\n\ntarget_compile_definitions(swiftSemaTests PRIVATE\n  SWIFTLIB_DIR=\\\"${SWIFTLIB_DIR}\\\")\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Name Mangling for Closures\nDESCRIPTION: Swift symbol mangling examples for closures in different contexts, including autoclosure, closures in generic contexts, and property contexts. These examples demonstrate how Swift encodes closure relationships and type information in mangled symbols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n_TFIZvV8mangling10HasVarInit5stateSbiu_KT_Sb ---> implicit closure #1 : @autoclosure () -> Swift.Bool in variable initialization expression of static mangling.HasVarInit.state : Swift.Bool\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TFFV23interface_type_mangling18GenericTypeContext23closureInGenericContexturFqd__T_L_3fooFTqd__x_T_ ---> foo #1 (A1, A) -> () in interface_type_mangling.GenericTypeContext.closureInGenericContext<A>(A1) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TFFV23interface_type_mangling18GenericTypeContextg31closureInGenericPropertyContextxL_3fooFT_x ---> foo #1 () -> A in interface_type_mangling.GenericTypeContext.closureInGenericPropertyContext.getter : A\n```\n\n----------------------------------------\n\nTITLE: Defining Substitution Rules in Swift Mangling\nDESCRIPTION: Specifies the grammar for encoding substitutions, which are back-references to previously mangled entities, optimizing for repeated contexts in complex types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_48\n\nLANGUAGE: Swift\nCODE:\n```\nsubstitution ::= 'A' INDEX                  // substitution of N+26\nsubstitution ::= 'A' SUBST_IDX* LAST-SUBST-IDX    // One or more consecutive substitutions of N < 26\nSUBST-IDX ::= [a-z]\nSUBST-IDX ::= NATURAL [a-z]\nLAST-SUBST-IDX ::= [A-Z]\nLAST-SUBST-IDX ::= NATURAL [A-Z]\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Bootstrapping Mode in CMake\nDESCRIPTION: This `else` block catches any value of `BOOTSTRAPPING_MODE` that wasn't handled by the preceding `if` or `elseif` conditions. It prints a fatal error message indicating the unknown mode and halts the CMake configuration process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nelse()\n    message(FATAL_ERROR \"Unknown BOOTSTRAPPING_MODE '${BOOTSTRAPPING_MODE}'\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Dependencies\nDESCRIPTION: Sets up optional dependencies like LibXml2 and LibEdit with feature checks for Unicode support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_77\n\nLANGUAGE: cmake\nCODE:\n```\nif(LLVM_ENABLE_LIBXML2)\n  find_package(LibXml2 REQUIRED)\nelse()\n  find_package(LibXml2)\nendif()\n\nif(LLVM_ENABLE_LIBEDIT)\n  find_package(LibEdit REQUIRED)\nelse()\n  find_package(LibEdit)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Foundation Build Output to System Path - Batchfile\nDESCRIPTION: This command prepends the swift-corelibs-foundation build output directory to the PATH environment variable for the current session, allowing dependent binaries to locate Foundation's DLLs at runtime. To be run after a successful Foundation build and before executing binaries that depend on it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_10\n\nLANGUAGE: Batchfile\nCODE:\n```\npath S:\\\\b\\\\3\\\\bin;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Defining ProjectedValue in Swift for SIL\nDESCRIPTION: Defines `ProjectedValue`, which represents a specific value derived from an original base value by applying a projection path (represented by `SmallProjectionPath`). This concept is related to `AccessPath` in the C++ utilities. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nProjectedValue\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Source Files\nDESCRIPTION: Defines the list of source files that comprise the Swift Runtime module implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RuntimeModule/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(RUNTIME_SOURCES\n  Address.swift\n  Backtrace.swift\n  Backtrace+Codable.swift\n  BacktraceFormatter.swift\n  Base64.swift\n  ByteSwapping.swift\n  CachingMemoryReader.swift\n  CompactBacktrace.swift\n  CompactImageMap.swift\n  Compression.swift\n  Context.swift\n  CoreSymbolication.swift\n  Dwarf.swift\n  EightByteBuffer.swift\n  Elf.swift\n  ElfImageCache.swift\n  FramePointerUnwinder.swift\n  Image.swift\n  ImageMap.swift\n  ImageMap+Darwin.swift\n  ImageMap+Linux.swift\n  ImageSource.swift\n  Libc.swift\n  LimitSequence.swift\n  MemoryReader.swift\n  OSReleaseScanner.swift\n  ProcMapsScanner.swift\n  Registers.swift\n  Runtime.swift\n  RichFrame.swift\n  SymbolicatedBacktrace.swift\n  Utils.swift\n  Win32Extras.cpp\n\n  get-cpu-context.${SWIFT_ASM_EXT}\n)\n```\n\n----------------------------------------\n\nTITLE: Explicitly Configuring lit.py for Swift Tests (sh)\nDESCRIPTION: Provides a more explicit method for running Swift tests using `lit.py`, specifying the test site configuration file (`lit.site.cfg`) directly using the `--param swift_site_config` option. This approach allows running tests from any source location (`${SWIFT_SOURCE_ROOT}/test/Parse/` in this case) by clearly defining the testing environment. It requires paths to the LLVM source root, Swift build directory, and Swift source root.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Testing.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n% ${LLVM_SOURCE_ROOT}/utils/lit/lit.py -sv --param swift_site_config=${SWIFT_BUILD_DIR}/test-macosx-x86_64/lit.site.cfg ${SWIFT_SOURCE_ROOT}/test/Parse/\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional LibXml2 Support\nDESCRIPTION: Conditionally adds libxml2 support to swift-ide-test if LLVM_ENABLE_LIBXML2 is enabled. Sets up linking and compile definitions for XML functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-ide-test/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(LLVM_ENABLE_LIBXML2)\n  target_link_libraries(swift-ide-test PRIVATE LibXml2::LibXml2)\n  target_compile_definitions(swift-ide-test PRIVATE SWIFT_HAVE_LIBXML=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Runtime Reference Counting Entry Points (Symbols)\nDESCRIPTION: Provides a list of internal Swift runtime functions for managing object reference counts. This includes standard retain/release (`_swift_retain`, `_swift_release`), retain/release for bridged ObjC objects (`_swift_bridgeObjectRetain`, `_swift_bridgeObjectRelease`), handling of unknown objects, operations for `unowned` and `weak` references (initialization, assignment, load, destroy), checking if an object is uniquely referenced (`_swift_isUniquelyReferencedNonObjC`, `_swift_isUniquelyReferenced_native`), and checking deallocation status (`_swift_isDeallocating`). An `ABI TODO` mentions adding `_unsynchronized` variants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_3\n\nLANGUAGE: Symbols\nCODE:\n```\n0000000000027ba0 T _swift_bridgeObjectRelease\n0000000000027c50 T _swift_bridgeObjectRelease_n\n0000000000027b50 T _swift_bridgeObjectRetain\n0000000000027be0 T _swift_bridgeObjectRetain_n\n000000000001ce70 T _swift_release\n000000000001cee0 T _swift_release_n\n000000000001ce30 T _swift_retain\n000000000001ce50 T _swift_retain_n\n000000000001d240 T _swift_tryRetain\n0000000000027b10 T _swift_unknownObjectRelease\n0000000000027a70 T _swift_unknownObjectRelease_n\n0000000000027ad0 T _swift_unknownObjectRetain\n0000000000027a10 T _swift_unknownObjectRetain_n\n0000000000027d50 T _swift_unknownObjectUnownedAssign\n00000000000280a0 T _swift_unknownObjectUnownedCopyAssign\n0000000000027fd0 T _swift_unknownObjectUnownedCopyInit\n0000000000027ed0 T _swift_unknownObjectUnownedDestroy\n0000000000027cb0 T _swift_unknownObjectUnownedInit\n0000000000027f20 T _swift_unknownObjectUnownedLoadStrong\n00000000000281f0 T _swift_unknownObjectUnownedTakeAssign\n0000000000028070 T _swift_unknownObjectUnownedTakeInit\n0000000000027f70 T _swift_unknownObjectUnownedTakeStrong\n00000000000282b0 T _swift_unknownObjectWeakAssign\n0000000000028560 T _swift_unknownObjectWeakCopyAssign\n00000000000284e0 T _swift_unknownObjectWeakCopyInit\n00000000000283e0 T _swift_unknownObjectWeakDestroy\n0000000000028270 T _swift_unknownObjectWeakInit\n0000000000028420 T _swift_unknownObjectWeakLoadStrong\n0000000000028610 T _swift_unknownObjectWeakTakeAssign\n0000000000028520 T _swift_unknownObjectWeakTakeInit\n0000000000028470 T _swift_unknownObjectWeakTakeStrong\n000000000001d3c0 T _swift_unownedCheck\n000000000001cfb0 T _swift_unownedRelease\n000000000001d0a0 T _swift_unownedRelease_n\n000000000001cf70 T _swift_unownedRetain\n000000000001cf60 T _swift_unownedRetainCount\n000000000001d2b0 T _swift_unownedRetainStrong\n000000000001d310 T _swift_unownedRetainStrongAndRelease\n000000000001d060 T _swift_unownedRetain_n\n000000000001ca20 T _swift_verifyEndOfLifetime\n000000000001d680 T _swift_weakAssign\n000000000001d830 T _swift_weakCopyAssign\n000000000001d790 T _swift_weakCopyInit\n000000000001d770 T _swift_weakDestroy\n000000000001d640 T _swift_weakInit\n000000000001d6d0 T _swift_weakLoadStrong\n000000000001d8b0 T _swift_weakTakeAssign\n000000000001d800 T _swift_weakTakeInit\n000000000001d710 T _swift_weakTakeStrong\n000000000002afe0 T _swift_isUniquelyReferencedNonObjC\n000000000002af50 T _swift_isUniquelyReferencedNonObjC_nonNull\n000000000002b060 T _swift_isUniquelyReferencedNonObjC_nonNull_bridgeObject\n000000000002af00 T _swift_isUniquelyReferenced_native\n000000000002aea0 T _swift_isUniquelyReferenced_nonNull_native\n000000000????? T _swift_setDeallocating\n000000000001d280 T _swift_isDeallocating\n```\n\n----------------------------------------\n\nTITLE: Building swift-inspect for Android using CMake on Windows\nDESCRIPTION: Batch script commands for building swift-inspect for Android using CMake on Windows, with environment variables and build parameters for cross-compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/README.md#2025-04-23_snippet_5\n\nLANGUAGE: cmd\nCODE:\n```\nset ANDROID_ARCH=aarch64\nset ANDROID_API_LEVEL=29\nset ANDROID_CLANG_VERSION=17.0.2\nset ANDROID_NDK_ROOT=C:\\Android\\android-sdk\\ndk\\26.3.11579264\nset ANDROID_ARCH_ABI=arm64-v8a\nset SDKROOT_ANDROID=%LocalAppData%\\Programs\\Swift\\Platforms\\0.0.0\\Android.platform\\Developer\\SDKs\\Android.sdk\ncmake -B build -S . -G Ninja ^\n    -D CMAKE_BUILD_WITH_INSTALL_RPATH=YES ^\n    -D CMAKE_SYSTEM_NAME=Android ^\n    -D CMAKE_ANDROID_ARCH_ABI=%ANDROID_ARCH_ABI% ^\n    -D CMAKE_SYSTEM_VERSION=%ANDROID_API_LEVEL% ^\n    -D CMAKE_Swift_COMPILER_TARGET=%ANDROID_ARCH%-unknown-linux-android%ANDROID_API_LEVEL% ^\n    -D CMAKE_Swift_FLAGS=\"-sdk %SDKROOT_ANDROID% -L%ANDROID_NDK_ROOT%\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\clang\\%ANDROID_CLANG_VERSION%\\lib\\linux\\%ANDROID_ARCH% -Xclang-linker -resource-dir -Xclang-linker %ANDROID_NDK_ROOT%\\toolchains\\llvm\\prebuilt\\windows-x86_64\\lib\\clang\\%ANDROID_CLANG_VERSION% -Xcc -I%SDKROOT_ANDROID%\\usr\\include -I%SDKROOT_ANDROID%\\usr\\include\\swift\\SwiftRemoteMirror\" ^\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Container for LSAN Debugging\nDESCRIPTION: Docker command to create an Ubuntu 22.04 container for diagnosing LeakSanitizer (LSAN) failures in the Swift compiler. The container is configured with necessary permissions for running LLDB and access to local source files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --cpus <CPUs> --memory <Memory> -v ~/<path to your local sources>:/src-on-host:cached --name lsan-reproducer --cap-add=SYS_PTRACE --security-opt seccomp=unconfined <hash that docker build outputs> bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Remote Mirror Library Build in CMake\nDESCRIPTION: This CMake snippet defines the build configuration for the swiftRemoteMirror shared library. It specifies compilation flags, link libraries, include directories, and installation parameters. The library is built without embedding bitcode and runtime dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftRemoteMirror/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftRemoteMirror\n                         SHARED DONT_EMBED_BITCODE NOSWIFTRT\n                         SwiftRemoteMirror.cpp\n                         LINK_LIBRARIES\n                           swiftRemoteInspection\n                         C_COMPILE_FLAGS\n                           ${SWIFT_RUNTIME_CXX_FLAGS}\n                           -DswiftRemoteMirror_EXPORTS\n                         LINK_FLAGS\n                           ${SWIFT_RUNTIME_LINK_FLAGS}\n                         PREFIX_INCLUDE_DIRS\n                           ${SWIFT_SOURCE_DIR}/include/swift/RemoteInspection/RuntimeHeaders\n                         INCORPORATE_OBJECT_LIBRARIES swiftLLVMSupport\n                         SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n                         DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_INSTALL_NAME_DIR}\"\n                         INSTALL_IN_COMPONENT\n                           swift-remote-mirror\n\n                         TARGET_SDKS NOT LINUX_STATIC)\n```\n\n----------------------------------------\n\nTITLE: Triggering and Using Automatic Differentiation via Closures (Swift)\nDESCRIPTION: This Swift code depicts invoking the gradient operator on an inline closure, demonstrating implicit function conversion and the use of gradient at a concrete input. It illustrates how differentiable function conversion is represented at the language and SIL levels. The closure takes and returns Float, and is differentiated at input 4. Requires Swift's AD features.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\ngradient(at: Float(4), of: { x in x * x * x })\n\n// Swift supports implicit function conversions, which happens above.\n// Below is what the conversion looks like explicitly:\n// let foo: (Float) -> Float = { x in x * x * x }\n// let cubed: @differentiable (Float) -> Float = foo\n// gradient(at: Float(4), of: cubed)\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Runtime Dynamic Casting Entry Points (Symbols)\nDESCRIPTION: Provides a list of internal Swift runtime functions responsible for performing dynamic type casts. This includes general casting (`_swift_dynamicCast`), specific casts for classes (`_swift_dynamicCastClass`), metatypes (`_swift_dynamicCastMetatype`), Objective-C classes (`_swift_dynamicCastObjCClass`), foreign classes (`_swift_dynamicCastForeignClass`), and Objective-C protocols (`_swift_dynamicCastObjCProtocolConditional`). Functions often come in conditional (returning optional) and unconditional (trapping on failure) variants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_6\n\nLANGUAGE: Symbols\nCODE:\n```\n0000000000001470 T _swift_dynamicCast\n0000000000000a60 T _swift_dynamicCastClass\n0000000000000ae0 T _swift_dynamicCastClassUnconditional\n0000000000028750 T _swift_dynamicCastForeignClass\n000000000002ae20 T _swift_dynamicCastForeignClassMetatype\n000000000002ae30 T _swift_dynamicCastForeignClassMetatypeUnconditional\n0000000000028760 T _swift_dynamicCastForeignClassUnconditional\n00000000000011c0 T _swift_dynamicCastMetatype\n0000000000000cf0 T _swift_dynamicCastMetatypeToObjectConditional\n0000000000000d20 T _swift_dynamicCastMetatypeToObjectUnconditional\n00000000000012e0 T _swift_dynamicCastMetatypeUnconditional\n00000000000286c0 T _swift_dynamicCastObjCClass\n0000000000028bd0 T _swift_dynamicCastObjCClassMetatype\n0000000000028c00 T _swift_dynamicCastObjCClassMetatypeUnconditional\n0000000000028700 T _swift_dynamicCastObjCClassUnconditional\n0000000000028af0 T _swift_dynamicCastObjCProtocolConditional\n0000000000028a50 T _swift_dynamicCastObjCProtocolUnconditional\n0000000000028960 T _swift_dynamicCastTypeToObjCProtocolConditional\n00000000000287d0 T _swift_dynamicCastTypeToObjCProtocolUnconditional\n0000000000000de0 T _swift_dynamicCastUnknownClass\n0000000000000fd0 T _swift_dynamicCastUnknownClassUnconditional\n```\n\n----------------------------------------\n\nTITLE: Outputting Final Assembly Code\nDESCRIPTION: Command to generate and print the final assembly code output\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -S -O file.swift\n```\n\n----------------------------------------\n\nTITLE: Bridging Header for Swift-C Integration in Raspberry Pi Pico SDK\nDESCRIPTION: C header file that includes the necessary Pico SDK header, allowing Swift code to access C functions and variables defined in the SDK.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/IntegratingWithSDKs.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#pragma once\n\n#include \"pico/stdlib.h\"\n```\n\n----------------------------------------\n\nTITLE: Value with Differential Calculation Function\nDESCRIPTION: Function that computes both the value and differential of a function at a given point. Returns a tuple containing the original value and a linear differential function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_71\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable(wrt: x)\nfunc valueWithDifferential<T: FloatingPoint, U: Differentiable>(\n    at x: T, of body: @differentiable (T) -> U) -> U\n) -> (value: U, differential: @differentiable(linear) (T.TangentVector) -> U.TangentVector)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Extend Property\nDESCRIPTION: This snippet defines Unicode code point ranges for characters with the 'Extend' property. It includes various combining marks, vowel signs, and other modifying characters from different scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n115BF..115C0  ; Extend # Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA\n115DC..115DD  ; Extend # Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU\n11633..1163A  ; Extend # Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI\n1163D         ; Extend # Mn       MODI SIGN ANUSVARA\n1163F..11640  ; Extend # Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA\n116AB         ; Extend # Mn       TAKRI SIGN ANUSVARA\n116AD         ; Extend # Mn       TAKRI VOWEL SIGN AA\n116B0..116B5  ; Extend # Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU\n116B7         ; Extend # Mn       TAKRI SIGN NUKTA\n1171D..1171F  ; Extend # Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA\n11722..11725  ; Extend # Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU\n11727..1172B  ; Extend # Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER\n16AF0..16AF4  ; Extend # Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE\n16B30..16B36  ; Extend # Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM\n16F8F..16F92  ; Extend # Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW\n1BC9D..1BC9E  ; Extend # Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK\n1D165         ; Extend # Mc       MUSICAL SYMBOL COMBINING STEM\n1D167..1D169  ; Extend # Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3\n1D16E..1D172  ; Extend # Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5\n1D17B..1D182  ; Extend # Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE\n1D185..1D18B  ; Extend # Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE\n1D1AA..1D1AD  ; Extend # Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO\n1D242..1D244  ; Extend # Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME\n1DA00..1DA36  ; Extend # Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN\n1DA3B..1DA6C  ; Extend # Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT\n1DA75         ; Extend # Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS\n1DA84         ; Extend # Mn       SIGNWRITING LOCATION HEAD NECK\n1DA9B..1DA9F  ; Extend # Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6\n1DAA1..1DAAF  ; Extend # Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16\n1E8D0..1E8D6  ; Extend # Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\nE0100..E01EF  ; Extend # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n```\n\n----------------------------------------\n\nTITLE: Function Thunking in Swift SIL\nDESCRIPTION: Creates a new function with @callee_guaranteed convention from an input function, with behavior determined by the thunk kind.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_173\n\nLANGUAGE: swift\nCODE:\n```\n%1 = thunk [identity] %0() : $@convention(thin) (T) -> U\n```\n\n----------------------------------------\n\nTITLE: Generating Debug Info in SIL\nDESCRIPTION: Command to include and print debug information in the SIL output\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -g -emit-sil -O file.swift\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Runtime Installation for Static Builds\nDESCRIPTION: Sets up installation rules for the swiftRuntime target when building statically. This ensures the library components are properly exported and packaged.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT BUILD_SHARED_LIBS)\n  install(TARGETS swiftRuntime\n    EXPORT SwiftCoreTargets\n    COMPONENT SwiftCore_runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: C++ Template Function Representation\nDESCRIPTION: The C++ template function representation of the Swift generic function, including the isUsableInGenericContext constraint.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_57\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename T>\nvoid swapTwoValues(T &a, T& b)\n  requires swift::isUsableInGenericContext<T> {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Options\nDESCRIPTION: Configures Swift compiler options including stdlib parsing, inline generics control, TBD validation, and access control settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_options(swiftSwiftOnoneSupport PRIVATE\n  $<$<COMPILE_LANGUAGE:Swift>:-parse-stdlib>\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xllvm -sil-inline-generics=false>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -validate-tbd-against-ir=none>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -check-onone-completeness>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-access-control>\")\n```\n\n----------------------------------------\n\nTITLE: Detecting MSVC-like Compilers for Build Configuration\nDESCRIPTION: Checks if the build is using MSVC or Clang-cl compilers, which use similar command line arguments. This allows for platform-specific build configurations for Windows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_68\n\nLANGUAGE: cmake\nCODE:\n```\n# Check if we're build with MSVC or Clang-cl, as these compilers have similar command line arguments.\nif(\"${CMAKE_C_COMPILER_ID}\" STREQUAL \"MSVC\" OR \"${CMAKE_CXX_SIMULATE_ID}\" STREQUAL \"MSVC\")\n  set(SWIFT_COMPILER_IS_MSVC_LIKE TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Swift Keywords and Syntax Discussion\nDESCRIPTION: Code-like references to Swift keywords and syntax elements being discussed for potential language changes, including var/val, ref/inout, and struct/class alternatives.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nvar\nval\nlet\nauto\n[inout]\nref\nstruct\nclass\nvaltype\nreftype\n```\n\n----------------------------------------\n\nTITLE: Running Swift Benchmark with Help Option\nDESCRIPTION: This snippet demonstrates how to run the Swift Benchmark tool with the --help option to display usage information and available command-line arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O --help | %FileCheck %s --check-prefix OPTIONS\nOPTIONS: usage: Benchmark_O [--argument=VALUE] [TEST [TEST ...]]\nOPTIONS: optional arguments:\nOPTIONS: --help\nOPTIONS-SAME: show this help message and exit\nOPTIONS: --verbose\nOPTIONS: --delim\nOPTIONS: --tags\nOPTIONS: --list\n```\n\n----------------------------------------\n\nTITLE: Linking Swift AST Test Dependencies in CMake\nDESCRIPTION: Specifies the required library dependencies for the SwiftASTTests target, including the main AST library and temporary circular dependencies to Parse and Sema modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/AST/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(SwiftASTTests\n   PRIVATE\n   swiftAST\n   # FIXME: Circular dependencies.\n   swiftParse\n   swiftSema\n)\n```\n\n----------------------------------------\n\nTITLE: Adding SIL Optimizer Subdirectories in CMake\nDESCRIPTION: Adds various subdirectories containing different optimization passes and utilities for the Swift SIL Optimizer. Includes components for ARC, analysis, differentiation, transforms, and utility passes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(ARC)\nadd_subdirectory(Analysis)\nadd_subdirectory(Differentiation)\nadd_subdirectory(FunctionSignatureTransforms)\nadd_subdirectory(IPO)\nadd_subdirectory(LoopTransforms)\nadd_subdirectory(Mandatory)\nadd_subdirectory(PassManager)\nadd_subdirectory(SILCombiner)\nadd_subdirectory(SemanticARC)\nadd_subdirectory(Transforms)\nadd_subdirectory(UtilityPasses)\nadd_subdirectory(Utils)\n```\n\n----------------------------------------\n\nTITLE: Creating Core Foundation Type Subclass in Swift\nDESCRIPTION: Defines a class MyLittleCFType that inherits from _CFObject, likely for CoreFoundation interoperability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\nclass MyLittleCFType : _CFObject {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Test Modes and Subsets\nDESCRIPTION: Defines available test modes including optimization levels and test subset categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nset(TEST_MODES\n    optimize_none optimize optimize_unchecked optimize_size\n    optimize_none_with_implicit_dynamic\n    optimize_with_implicit_dynamic\n    only_executable only_non_executable\n    with_cxx_interop\n)\nset(TEST_SUBSETS\n    primary\n    validation\n    all\n    only_validation\n    only_long\n    only_stress\n)\n```\n\n----------------------------------------\n\nTITLE: Reporting Measurement Metadata in Swift Benchmarks\nDESCRIPTION: Demonstrates using the --meta flag to log additional measurement metadata including page count, context switches, and yield counts. Also shows how to include memory usage metrics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O 0 --quantile=1 --meta | %FileCheck %s --check-prefix META\nMETA: #,TEST,SAMPLES,MIN(μs),MAX(μs),PAGES,ICS,YIELD\nRUN: %Benchmark_O 0 --quantile=1 --meta --memory \\\nRUN:              | %FileCheck %s --check-prefix MEMMETA\nMEMMETA: #,TEST,SAMPLES,MIN(μs),MAX(μs),MAX_RSS(B),PAGES,ICS,YIELD\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for swiftSIL Target in CMake\nDESCRIPTION: This CMake directive specifies the source files to be included in the swiftSIL target. It lists numerous C++ files that implement various aspects of Swift Intermediate Language processing and optimization within the Swift compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SIL/Utils/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSIL PRIVATE\n  BasicBlockUtils.cpp\n  BitDataflow.cpp\n  CalleeCache.cpp\n  DebugUtils.cpp\n  Dominance.cpp\n  DynamicCasts.cpp\n  FieldSensitivePrunedLiveness.cpp\n  GenericSpecializationMangler.cpp\n  InstructionUtils.cpp\n  InstWrappers.cpp\n  LoopInfo.cpp\n  MemAccessUtils.cpp\n  MemoryLocations.cpp\n  OptimizationRemark.cpp\n  OSSALifetimeCompletion.cpp\n  OwnershipLiveness.cpp\n  OwnershipUtils.cpp\n  PrettyStackTrace.cpp\n  Projection.cpp\n  PrunedLiveness.cpp\n  ScopedAddressUtils.cpp\n  SILBridging.cpp\n  SILInstructionWorklist.cpp\n  SILRemarkStreamer.cpp\n  Test.cpp\n  ValueUtils.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Function Specialization Mangling\nDESCRIPTION: Swift symbol mangling for function specializations with constant propagation. These examples demonstrate how Swift encodes specialized versions of functions with propagated constants, strings, and closures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\n_T03foo4_123ABTf3psbpsb_n ---> function signature specialization <Arg[0] = [Constant Propagated String : u8'123'], Arg[1] = [Constant Propagated String : u8'123']> of foo\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T04main5innerys5Int32Vz_yADctF25closure_with_box_argumentxz_Bi32__lXXTf1nc_n ---> function signature specialization <Arg[1] = [Closure Propagated : closure_with_box_argument, Argument Types : [<A> { var A } <Builtin.Int32>]> of main.inner(inout Swift.Int32, (Swift.Int32) -> ()) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S4main5inneryys5Int32Vz_yADctF25closure_with_box_argumentxz_Bi32__lXXTf1nc_n ---> function signature specialization <Arg[1] = [Closure Propagated : closure_with_box_argument, Argument Types : [<A> { var A } <Builtin.Int32>]> of main.inner(inout Swift.Int32, (Swift.Int32) -> ()) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T03foo6testityyyc_yyctF1a1bTf3pfpf_n ---> function signature specialization <Arg[0] = [Constant Propagated Function : a], Arg[1] = [Constant Propagated Function : b]> of foo.testit(() -> (), () -> ()) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$S3foo6testityyyyc_yyctF1a1bTf3pfpf_n ---> function signature specialization <Arg[0] = [Constant Propagated Function : a], Arg[1] = [Constant Propagated Function : b]> of foo.testit(() -> (), () -> ()) -> ()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Egyptian Hieroglyphs\nDESCRIPTION: Defines the Unicode code point ranges for Egyptian Hieroglyphs, including standard hieroglyphs, joiners, modifiers, and extended hieroglyphs. This is the largest block in the file with 5105 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_58\n\nLANGUAGE: Unicode\nCODE:\n```\n13000..1342F  ; Egyptian_Hieroglyphs # Lo [1072] EGYPTIAN HIEROGLYPH A001..EGYPTIAN HIEROGLYPH V011D\n13430..1343F  ; Egyptian_Hieroglyphs # Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE\n13440         ; Egyptian_Hieroglyphs # Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY\n13441..13446  ; Egyptian_Hieroglyphs # Lo   [6] EGYPTIAN HIEROGLYPH FULL BLANK..EGYPTIAN HIEROGLYPH WIDE LOST SIGN\n13447..13455  ; Egyptian_Hieroglyphs # Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED\n13460..143FA  ; Egyptian_Hieroglyphs # Lo [3995] EGYPTIAN HIEROGLYPH-13460..EGYPTIAN HIEROGLYPH-143FA\n\n# Total code points: 5105\n```\n\n----------------------------------------\n\nTITLE: Implementing FooUnavailableMembers with Availability Annotations\nDESCRIPTION: Defines a class with methods and initializers that have various availability annotations, showing API lifecycle management.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_26\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooUnavailableMembers : FooClassBase {\n  convenience init!(int i: Int32)\n  @available(*, unavailable, message: \"use object construction 'FooUnavailableMembers(int:)'\")\n  class func withInt(_ i: Int32) -> Self!\n  @available(*, unavailable, message: \"x\")\n  func unavailable()\n  @available(*, unavailable, message: \"Not available in Swift\")\n  func swiftUnavailable()\n  @available(*, deprecated, message: \"x\")\n  func deprecated()\n  @available(OSX 10.1, *)\n  func availabilityIntroduced()\n  @available(OSX, unavailable, deprecated: 10.1, message: \"APIs deprecated as of OS X 10.9 and earlier are unavailable in Swift\")\n  func availabilityDeprecated()\n  @available(OSX, obsoleted: 10.1)\n  func availabilityObsoleted()\n  @available(OSX, unavailable)\n  func availabilityUnavailable()\n  @available(OSX, introduced: 10.1, message: \"x\")\n  func availabilityIntroducedMsg()\n  @available(OSX, unavailable, deprecated: 10.1, message: \"x\")\n  func availabilityDeprecatedMsg()\n  @available(OSX, obsoleted: 10.1, message: \"x\")\n  func availabilityObsoletedMsg()\n  @available(OSX, unavailable, message: \"x\")\n  func availabilityUnavailableMsg()\n  init!()\n  convenience init!(float f: Float)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Transpose Functions for Linear Maps in Swift\nDESCRIPTION: Shows how to define transpose functions for linear maps using the @transpose attribute. The example provides multiple transpose functions for a single original function with different configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nfunc foo<T: Differentiable & AdditiveArithmetic>(_ x: T, _ y: T, _ z: T) -> T\n    where T == T.TangentVector { ... }\n\n// Transpose with respect to all parameters, making `foo(_:_:_:)` linear with\n// with respect to all parameters.\n@transpose(of: foo)\nfunc _<T: Differentiable & AdditiveArithmetic>(_ v: T) -> (x: T, y: T, z: T)\n    where T == T.TangentVector { ... }\n\n// Transpose with respect to original parameter `x`, making `foo(_:_:_:)` \n// linear with respect to `x`.\n@transpose(of: foo, wrt: 0)\nfunc _<T: Differentiable & AdditiveArithmetic>(y: T, z: T, v: T) -> T\n    where T == T.TangentVector { ... }\n\n// Transpose with respect to original parameters `x` and `z`, making\n// `foo(_:_:_:)` linear with respect to `x` and `z`.\n@transpose(of: foo, wrt: (0, 2))\nfunc _<T: Differentiable & AdditiveArithmetic>(y: T, v: T) -> (x: T, z: T)\n    where T == T.TangentVector { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Clang Importer Library\nDESCRIPTION: Adds a static library target for swiftClangImporter, specifying its source files. This library is responsible for importing Clang modules into Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftClangImporter STATIC\n  CFTypeInfo.cpp\n  ClangAdapter.cpp\n  ClangClassTemplateNamePrinter.cpp\n  ClangDerivedConformances.cpp\n  ClangDiagnosticConsumer.cpp\n  ClangImporter.cpp\n  ClangImporterRequests.cpp\n  ClangIncludePaths.cpp\n  ClangModuleDependencyScanner.cpp\n  ClangSourceBufferImporter.cpp\n  SwiftDeclSynthesizer.cpp\n  DWARFImporter.cpp\n  ImportDecl.cpp\n  ImportEnumInfo.cpp\n  ImportMacro.cpp\n  ImportName.cpp\n  ImportType.cpp\n  Serializability.cpp\n  SwiftLookupTable.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Unicode Data Tables Linking Example\nDESCRIPTION: Command showing how to link the Unicode data tables library for advanced string operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ swiftc <inputs> -target armv6m-none-none-eabi -enable-experimental-feature Embedded -wmo -c -o output.o\n$ ld ... -o binary output.o $(dirname `which swiftc`)/../lib/swift/embedded/armv6m-none-none-eabi/libswiftUnicodeDataTables.a\n```\n\n----------------------------------------\n\nTITLE: LLDB Image Lookup Command\nDESCRIPTION: Command to find the mangled name of a function in the current frame using LLDB. Shows how to get detailed symbol information including the mangled and demangled names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_48\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) image lookup -va $pc\n```\n\n----------------------------------------\n\nTITLE: Configuring LLVM Link Components for Swift AST in CMake\nDESCRIPTION: Specifies the LLVM components required for linking with the Swift AST library. These components include various LLVM tools and libraries necessary for code generation, analysis, and optimization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/AST/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFTAST_LLVM_LINK_COMPONENTS\n  bitreader bitwriter coroutines coverage irreader debuginfoDWARF\n  profiledata instrumentation object objcarcopts mc mcparser\n  bitreader bitwriter lto ipo option core support remarks ${LLVM_TARGETS_TO_BUILD}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Nonspacing Mark (Mn) Character Ranges\nDESCRIPTION: This snippet defines ranges of Unicode code points for characters categorized as Nonspacing Marks (Mn). It includes characters from various scripts such as Latin, Cyrillic, Hebrew, Arabic, and many others. Each line specifies a range or a single code point, followed by a comment describing the character or range.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n0300..036F    ; Mn # [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X\n0483..0487    ; Mn #   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE\n0591..05BD    ; Mn #  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG\n05BF          ; Mn #       HEBREW POINT RAFE\n05C1..05C2    ; Mn #   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT\n05C4..05C5    ; Mn #   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT\n05C7          ; Mn #       HEBREW POINT QAMATS QATAN\n0610..061A    ; Mn #  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA\n064B..065F    ; Mn #  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW\n0670          ; Mn #       ARABIC LETTER SUPERSCRIPT ALEF\n06D6..06DC    ; Mn #   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN\n06DF..06E4    ; Mn #   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA\n06E7..06E8    ; Mn #   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON\n06EA..06ED    ; Mn #   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM\n0711          ; Mn #       SYRIAC LETTER SUPERSCRIPT ALAPH\n0730..074A    ; Mn #  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH\n07A6..07B0    ; Mn #  [11] THAANA ABAFILI..THAANA SUKUN\n07EB..07F3    ; Mn #   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE\n07FD          ; Mn #       NKO DANTAYALAN\n0816..0819    ; Mn #   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH\n081B..0823    ; Mn #   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A\n0825..0827    ; Mn #   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U\n0829..082D    ; Mn #   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA\n0859..085B    ; Mn #   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK\n0897..089F    ; Mn #   [9] ARABIC PEPET..ARABIC HALF MADDA OVER MADDA\n08CA..08E1    ; Mn #  [24] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH SIGN SAFHA\n08E3..0902    ; Mn #  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA\n093A          ; Mn #       DEVANAGARI VOWEL SIGN OE\n093C          ; Mn #       DEVANAGARI SIGN NUKTA\n0941..0948    ; Mn #   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI\n094D          ; Mn #       DEVANAGARI SIGN VIRAMA\n0951..0957    ; Mn #   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE\n0962..0963    ; Mn #   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL\n0981          ; Mn #       BENGALI SIGN CANDRABINDU\n09BC          ; Mn #       BENGALI SIGN NUKTA\n09C1..09C4    ; Mn #   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR\n09CD          ; Mn #       BENGALI SIGN VIRAMA\n09E2..09E3    ; Mn #   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL\n09FE          ; Mn #       BENGALI SANDHI MARK\n0A01..0A02    ; Mn #   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI\n0A3C          ; Mn #       GURMUKHI SIGN NUKTA\n0A41..0A42    ; Mn #   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU\n0A47..0A48    ; Mn #   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI\n0A4B..0A4D    ; Mn #   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA\n0A51          ; Mn #       GURMUKHI SIGN UDAAT\n0A70..0A71    ; Mn #   [2] GURMUKHI TIPPI..GURMUKHI ADDAK\n0A75          ; Mn #       GURMUKHI SIGN YAKASH\n0A81..0A82    ; Mn #   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA\n0ABC          ; Mn #       GUJARATI SIGN NUKTA\n0AC1..0AC5    ; Mn #   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E\n0AC7..0AC8    ; Mn #   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI\n0ACD          ; Mn #       GUJARATI SIGN VIRAMA\n0AE2..0AE3    ; Mn #   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL\n0AFA..0AFF    ; Mn #   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE\n0B01          ; Mn #       ORIYA SIGN CANDRABINDU\n0B3C          ; Mn #       ORIYA SIGN NUKTA\n0B3F          ; Mn #       ORIYA VOWEL SIGN I\n0B41..0B44    ; Mn #   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR\n0B4D          ; Mn #       ORIYA SIGN VIRAMA\n0B55..0B56    ; Mn #   [2] ORIYA SIGN OVERLINE..ORIYA AI LENGTH MARK\n0B62..0B63    ; Mn #   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL\n0B82          ; Mn #       TAMIL SIGN ANUSVARA\n0BC0          ; Mn #       TAMIL VOWEL SIGN II\n0BCD          ; Mn #       TAMIL SIGN VIRAMA\n0C00          ; Mn #       TELUGU SIGN COMBINING CANDRABINDU ABOVE\n0C04          ; Mn #       TELUGU SIGN COMBINING ANUSVARA ABOVE\n0C3C          ; Mn #       TELUGU SIGN NUKTA\n0C3E..0C40    ; Mn #   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II\n0C46..0C48    ; Mn #   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI\n0C4A..0C4D    ; Mn #   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA\n0C55..0C56    ; Mn #   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK\n0C62..0C63    ; Mn #   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL\n0C81          ; Mn #       KANNADA SIGN CANDRABINDU\n0CBC          ; Mn #       KANNADA SIGN NUKTA\n0CBF          ; Mn #       KANNADA VOWEL SIGN I\n0CC6          ; Mn #       KANNADA VOWEL SIGN E\n0CCC..0CCD    ; Mn #   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA\n0CE2..0CE3    ; Mn #   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL\n0D00..0D01    ; Mn #   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU\n0D3B..0D3C    ; Mn #   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA\n0D41..0D44    ; Mn #   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR\n0D4D          ; Mn #       MALAYALAM SIGN VIRAMA\n0D62..0D63    ; Mn #   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL\n0D81          ; Mn #       SINHALA SIGN CANDRABINDU\n0DCA          ; Mn #       SINHALA SIGN AL-LAKUNA\n0DD2..0DD4    ; Mn #   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA\n0DD6          ; Mn #       SINHALA VOWEL SIGN DIGA PAA-PILLA\n0E31          ; Mn #       THAI CHARACTER MAI HAN-AKAT\n0E34..0E3A    ; Mn #   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n0E47..0E4E    ; Mn #   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN\n0EB1          ; Mn #       LAO VOWEL SIGN MAI KAN\n0EB4..0EBC    ; Mn #   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO\n0EC8..0ECE    ; Mn #   [7] LAO TONE MAI EK..LAO YAMAKKAN\n0F18..0F19    ; Mn #   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS\n0F35          ; Mn #       TIBETAN MARK NGAS BZUNG NYI ZLA\n0F37          ; Mn #       TIBETAN MARK NGAS BZUNG SGOR RTAGS\n0F39          ; Mn #       TIBETAN MARK TSA -PHRU\n0F71..0F7E    ; Mn #  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO\n0F80..0F84    ; Mn #   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA\n0F86..0F87    ; Mn #   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS\n0F8D..0F97    ; Mn #  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA\n0F99..0FBC    ; Mn #  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA\n0FC6          ; Mn #       TIBETAN SYMBOL PADMA GDAN\n102D..1030    ; Mn #   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU\n1032..1037    ; Mn #   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW\n1039..103A    ; Mn #   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT\n103D..103E    ; Mn #   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA\n1058..1059    ; Mn #   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL\n105E..1060    ; Mn #   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA\n1071..1074    ; Mn #   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE\n1082          ; Mn #       MYANMAR CONSONANT SIGN SHAN MEDIAL WA\n1085..1086    ; Mn #   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y\n108D          ; Mn #       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE\n109D          ; Mn #       MYANMAR VOWEL SIGN AITON AI\n135D..135F    ; Mn #   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK\n1712..1714    ; Mn #   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA\n1732..1733    ; Mn #   [2] HANUNOO VOWEL SIGN I..HANUNOO VOWEL SIGN U\n1752..1753    ; Mn #   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U\n1772..1773    ; Mn #   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U\n17B4..17B5    ; Mn #   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA\n17B7..17BD    ; Mn #   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA\n17C6          ; Mn #       KHMER SIGN NIKAHIT\n17C9..17D3    ; Mn #  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT\n17DD          ; Mn #       KHMER SIGN ATTHACAN\n180B..180D    ; Mn #   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\n180F          ; Mn #       MONGOLIAN FREE VARIATION SELECTOR FOUR\n1885..1886    ; Mn #   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA\n18A9          ; Mn #       MONGOLIAN LETTER ALI GALI DAGALGA\n1920..1922    ; Mn #   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U\n1927..1928    ; Mn #   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O\n1932          ; Mn #       LIMBU SMALL LETTER ANUSVARA\n1939..193B    ; Mn #   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n1A17..1A18    ; Mn #   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U\n1A1B          ; Mn #       BUGINESE VOWEL SIGN AE\n1A56          ; Mn #       TAI THAM CONSONANT SIGN MEDIAL LA\n1A58..1A5E    ; Mn #   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA\n1A60          ; Mn #       TAI THAM SIGN SAKOT\n1A62          ; Mn #       TAI THAM VOWEL SIGN MAI SAT\n1A65..1A6C    ; Mn #   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW\n1A73..1A7C    ; Mn #  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN\n1A7F          ; Mn #       TAI THAM COMBINING CRYPTOGRAMMIC DOT\n1AB0..1ABD    ; Mn #  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW\n1ABF..1ACE    ; Mn #  [16] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER INSULAR T\n1B00..1B03    ; Mn #   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG\n```\n\n----------------------------------------\n\nTITLE: Defining SWIFT_INCLUDE_DOCS Option in CMake\nDESCRIPTION: Defines a CMake build option named SWIFT_INCLUDE_DOCS. This boolean option determines whether targets for building the project's documentation are created. It defaults to TRUE.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_INCLUDE_DOCS\n    \"Create targets for building docs.\"\n    TRUE)\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Module Cache Path\nDESCRIPTION: Defines the directory to use as the Clang module cache when building Swift source files. This improves build performance by caching compiled modules for reuse.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_64\n\nLANGUAGE: cmake\nCODE:\n```\n# Directory to use as the Clang module cache when building Swift source files.\nset(SWIFT_MODULE_CACHE_PATH\n    \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/module-cache\")\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Regex Parser Library Target in CMake\nDESCRIPTION: Defines the swift_RegexParser library target with its sources, dependencies, compilation flags, and installation settings. It includes platform-specific module dependencies and experimental features.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RegexParser/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swift_RegexParser ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  \"${MATCHING_ENGINE_SOURCES}\"\n\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT\n\n  LINK_LIBRARIES ${swift_matching_engine_link_libraries}\n\n  C_COMPILE_FLAGS\n    -Dswift_RegexParser_EXPORTS\n  SWIFT_COMPILE_FLAGS\n    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS_NO_RESILIENCE}\n    # Workaround until `_RegexParser` is imported as implementation-only\n    # by `_StringProcessing`.\n    -Xfrontend -disable-implicit-string-processing-module-import\n    -enable-experimental-feature AllowRuntimeSymbolDeclarations\n  LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n\n  INSTALL_IN_COMPONENT stdlib\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n)\n```\n\n----------------------------------------\n\nTITLE: Defining linear_function_extract Instruction in Swift SIL\nDESCRIPTION: Specifies the linear_function_extract instruction used to extract the original function or a transpose function from a @differentiable(_linear) function. It includes possible extractees and syntax.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_199\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'linear_function_extract'\n                    '[' sil-linear-function-extractee ']'\n                    sil-value ':' sil-type\n\nsil-linear-function-extractee ::= 'original' | 'transpose'\n\nlinear_function_extract [original] %0 : $@differentiable(_linear) (T) -> T\nlinear_function_extract [transpose] %0 : $@differentiable(_linear) (T) -> T\n```\n\n----------------------------------------\n\nTITLE: Defining Error Result Attribute in Objective-C\nDESCRIPTION: This snippet demonstrates how to use a proposed Clang attribute to specify error conditions for method return values in Objective-C. It shows examples for both integer and custom enum return types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_21\n\nLANGUAGE: objc\nCODE:\n```\n+ (NSInteger)writePropertyList:(id)plist\n                      toStream:(NSOutputStream *)stream\n                        format:(NSPropertyListFormat)format\n                       options:(NSPropertyListWriteOptions)opt\n                         error:(out NSError **)error\n    NS_ERROR_RESULT(0)\n\n- (AVKeyValueStatus)statusOfValueForKey:(NSString *)key\n                                  error:(NSError **)\n    NS_ERROR_RESULT(AVKeyValueStatusFailed);\n```\n\n----------------------------------------\n\nTITLE: Example of Nested Types with Inverse Requirements in Swift\nDESCRIPTION: Illustrates how Swift mangles nested types that have inverse requirements in their generic signatures. Shows the beginnings of a declaration with nested types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nstruct X<A: ~Copyable> {\n    struct Y<B: ~Copyable> {\n\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Sphinx\nDESCRIPTION: Commands to verify Sphinx installation and build Swift documentation as HTML using make\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/FAQ.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsphinx-build --version\n```\n\nLANGUAGE: sh\nCODE:\n```\nmake -C docs\n```\n\n----------------------------------------\n\nTITLE: Unicode Dash Punctuation Category Definitions\nDESCRIPTION: Defines code points for various types of dashes and hyphens (Pd) across different scripts and usage contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_23\n\nLANGUAGE: unicode\nCODE:\n```\n002D          ; Pd #       HYPHEN-MINUS\n058A          ; Pd #       ARMENIAN HYPHEN\n05BE          ; Pd #       HEBREW PUNCTUATION MAQAF\n```\n\n----------------------------------------\n\nTITLE: Defining Internal Swift Functions and Structures\nDESCRIPTION: Declares internal functions and a structure with initializers. These are likely used for internal implementation details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\nfunc theLastDeclInFoo()\nfunc _internalTopLevelFunc()\nstruct _InternalStruct {\n  var x: Int32\n  init()\n  init(x: Int32)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining mark_unresolved_non_copyable_value Instruction in Swift SIL\nDESCRIPTION: Specifies the mark_unresolved_non_copyable_value instruction, a canary value used by the SIL generating frontend to signal the move checker. It includes possible optimizer analysis markers and their meanings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_201\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'mark_unresolved_non_copyable_value'\n                    '[' sil-optimizer-analysis-marker ']'\n\nsil-optimizer-analysis-marker ::= 'consumable_and_assignable'\n                              ::= 'no_consume_or_assign'\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol and Conformance Descriptor Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for protocol requirement base descriptors, associated type descriptors, and conformance descriptors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_12\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= protocol 'TL'               // protocol requirements base descriptor\nglobal ::= assoc-type-name 'Tl'        // associated type descriptor\nglobal ::= assoc-type-name 'TM'        // default associated type witness accessor (HISTORICAL)\nglobal ::= type assoc-type-list protocol 'Tn' // associated conformance descriptor\nglobal ::= type assoc-type-list protocol 'TN' // default associated conformance witness accessor\nglobal ::= type protocol 'Tb'          // base conformance descriptor\n```\n\n----------------------------------------\n\nTITLE: Debug Step Instruction in SIL\nDESCRIPTION: NOP instruction used for debugging purposes to maintain breakpoint locations after instruction deletion in Onone optimizations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_23\n\nLANGUAGE: sil\nCODE:\n```\ndebug_step\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for Swift Project Components in CMake\nDESCRIPTION: This CMake snippet adds three subdirectories to the build process: Clang, CRT (C Runtime), and WinSDK (Windows SDK). These are essential components for building the Swift project on Windows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(clang)\nadd_subdirectory(CRT)\nadd_subdirectory(WinSDK)\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks for Swift Runtime in Standalone SourceKit Build\nDESCRIPTION: This snippet adds a custom command to create symlinks necessary to find the Swift runtime when SourceKit is built standalone.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (SOURCEKIT_BUILT_STANDALONE)\n  # Create the symlinks necessary to find the swift runtime.\n  add_custom_command(TARGET sourcekitdInProc PRE_BUILD\n    COMMAND ln \"-fhs\" \"${PATH_TO_SWIFT_BUILD}/lib/swift\" \"${SOURCEKIT_BINARY_DIR}/lib\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Tag (sh)\nDESCRIPTION: Uses the `update-checkout` utility script located in the `utils` directory with the `--tag` option. This command checks out a specific tag (e.g., a release tag or snapshot tag) across the main Swift repository and all its managed dependencies. Replace `mytagname` with the actual desired tag name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nutils/update-checkout --tag mytagname\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Runtime Library Target\nDESCRIPTION: Defines the main Swift Runtime library target with its dependencies, compilation flags, and platform-specific settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RuntimeModule/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftRuntime ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  ${RUNTIME_SOURCES}\n\n  SWIFT_MODULE_DEPENDS ${concurrency} ${cxxstdlib_overlay}\n\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT\n\n  PRIVATE_LINK_LIBRARIES ${swift_runtime_link_libraries}\n\n  DEPLOYMENT_VERSION_OSX ${osx_deployment_target}\n\n  SWIFT_COMPILE_FLAGS\n    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    ${RUNTIME_COMPILE_FLAGS}\n    -parse-stdlib\n\n  LINK_FLAGS\n    ${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\n\n  INSTALL_IN_COMPONENT stdlib\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n\n  TARGET_SDKS OSX LINUX LINUX_STATIC\n)\n```\n\n----------------------------------------\n\nTITLE: Defining main swift-inspect executable target\nDESCRIPTION: Configures the main swift-inspect executable with its source files and compiler options, specifying it should be parsed as a library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(swift-inspect\n  Sources/swift-inspect/Operations/DumpArray.swift\n  Sources/swift-inspect/Operations/DumpCacheNodes.swift\n  Sources/swift-inspect/Operations/DumpConcurrency.swift\n  Sources/swift-inspect/Operations/DumpConformanceCache.swift\n  Sources/swift-inspect/Operations/DumpGenericMetadata.swift\n  Sources/swift-inspect/Operations/DumpRawMetadata.swift\n  Sources/swift-inspect/AndroidRemoteProcess.swift\n  Sources/swift-inspect/Backtrace.swift\n  Sources/swift-inspect/DarwinRemoteProcess.swift\n  Sources/swift-inspect/LinuxRemoteProcess.swift\n  Sources/swift-inspect/main.swift\n  Sources/swift-inspect/Process.swift\n  Sources/swift-inspect/RemoteMirror+Extensions.swift\n  Sources/swift-inspect/RemoteProcess.swift\n  Sources/swift-inspect/String+Extensions.swift\n  Sources/swift-inspect/Symbolication+Extensions.swift\n  Sources/swift-inspect/WindowsRemoteProcess.swift\n  Sources/swift-inspect/WinSDK+Extentions.swift)\ntarget_compile_options(swift-inspect PRIVATE\n  -parse-as-library)\ntarget_link_libraries(swift-inspect PRIVATE\n  ArgumentParser\n  swiftRemoteMirror)\n```\n\n----------------------------------------\n\nTITLE: Building swift-inspect on Windows using CMake\nDESCRIPTION: Command for building swift-inspect on Windows using CMake, with parameters to locate the necessary Swift modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B out -G Ninja -S . -D CMAKE_Swift_FLAGS=\"-Xcc -I%SDKROOT%\\usr\\include\\swift\\SwiftRemoteMirror\"\n```\n\n----------------------------------------\n\nTITLE: C++ Code Snippet Showing Swift Value Witness Table Operations\nDESCRIPTION: Example of C++ code from Swift's TypeLowering.h that defines IsAddressOnly_t enum. This enumeration is used to determine whether a lowered SIL type should be address-only (always manipulated through memory) or not.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_21\n\nLANGUAGE: c++\nCODE:\n```\n/// Is a lowered SIL type address-only?  That is, is the current context\n/// required to keep the value in memory for some reason?\n///\n/// A type might be address-only because:\n///\n///   - it is not fixed-size (e.g. because it is a resilient type) and\n///     therefore cannot be loaded into a statically-boundable set of\n///     registers; or\n///\n///   - it is semantically bound to memory, either because its storage\n///     address is used by the language runtime to implement its semantics\n///     (as with a weak reference) or because its representation is somehow\n///     address-dependent (as with something like a relative pointer).\n///\n/// An address-only type can be fixed-layout and/or trivial.\n/// A non-fixed-layout type is always address-only.\nenum IsAddressOnly_t : bool {\n  IsNotAddressOnly = false,\n  IsAddressOnly = true\n};\n```\n\n----------------------------------------\n\nTITLE: Examining Actor Isolation and Method Types in Swift\nDESCRIPTION: A series of mangled symbols representing static actor methods with different isolation contexts and sending capabilities.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_25\n\nLANGUAGE: Swift\nCODE:\n```\n$s3red7MyActorC3runyxxyYaKACYcYTXEYaKlFZ ---> static red.MyActor.run<A>(@red.MyActor () async throws -> sending A) async throws -> A\n$s3red7MyActorC3runyxxyYaKYAYTXEYaKlFZ ---> static red.MyActor.run<A>(@isolated(any) () async throws -> sending A) async throws -> A\n$s3red7MyActorC3runyxxyYaKYCXEYaKlFZ ---> static red.MyActor.run<A>(nonisolated(nonsending) () async throws -> A) async throws -> A\n```\n\n----------------------------------------\n\nTITLE: Cocoa Property List and Drawing Methods\nDESCRIPTION: Core Cocoa methods for property list handling and string drawing operations including size calculation, drawing at points and in rectangles, and pasteboard operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_31\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (id)propertyList;\n- (NSDictionary *)propertyListFromStringsFileFormat;\n- (NSSize)sizeWithAttributes:(NSDictionary *)attrs;\n- (void)drawAtPoint:(NSPoint)point withAttributes:(NSDictionary *)attrs;\n- (void)drawInRect:(NSRect)rect withAttributes:(NSDictionary *)attrs;\n- (void)drawWithRect:(NSRect)rect options:(NSStringDrawingOptions)options attributes:(NSDictionary *)attributes;\n- (NSRect)boundingRectWithSize:(NSSize)size options:(NSStringDrawingOptions)options attributes:(NSDictionary *)attributes;\n- (NSArray *)writableTypesForPasteboard:(NSPasteboard *)pasteboard;\n- (NSPasteboardWritingOptions)writingOptionsForType:(NSString *)type pasteboard:(NSPasteboard *)pasteboard;\n- (id)pasteboardPropertyListForType:(NSString *)type;\n+ (NSArray *)readableTypesForPasteboard:(NSPasteboard *)pasteboard;\n+ (NSPasteboardReadingOptions)readingOptionsForType:(NSString *)type pasteboard:(NSPasteboard *)pasteboard;\n- (id)initWithPasteboardPropertyList:(id)propertyList ofType:(NSString *)type;\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to Swift Compiler Module\nDESCRIPTION: Function to add source files to a Swift compiler module. Processes source file paths to get their real paths and appends them to the module's SOURCES property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(swift_compiler_sources module)\n  cmake_parse_arguments(LSS\n                        \"\"\n                        \"\"\n                        \"\"\n                        ${ARGN})\n  set(raw_sources ${LSS_UNPARSED_ARGUMENTS})\n  set(sources)\n  foreach(raw_source ${raw_sources})\n    get_filename_component(\n      raw_source \"${raw_source}\" REALPATH BASE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n    list(APPEND sources \"${raw_source}\")\n  endforeach()\n\n  set(target_name \"SwiftModule${module}\")\n  set_property(TARGET \"SwiftModule${module}\" APPEND PROPERTY SOURCES ${sources})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Gathering Source Files for Swift String Processing Library in CMake\nDESCRIPTION: This snippet uses file globbing to collect all source files for the Swift String Processing library, including Swift and C files. It converts file paths to CMake format and adds them to the STRING_PROCESSING_SOURCES variable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/StringProcessing/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE _STRING_PROCESSING_SOURCES\n  \"${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_StringProcessing/*.swift\"\n  \"${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_CUnicode/*.h\"\n  \"${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_CUnicode/*.c\")\nset(STRING_PROCESSING_SOURCES)\nforeach(source ${_STRING_PROCESSING_SOURCES})\n  file(TO_CMAKE_PATH \"${source}\" source)\n  list(APPEND STRING_PROCESSING_SOURCES ${source})\nendforeach()\nmessage(STATUS \"Using Experimental String Processing library for _StringProcessing (${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}).\")\n```\n\n----------------------------------------\n\nTITLE: Swift Basic Assignment Operation Pattern\nDESCRIPTION: Demonstrates the basic syntax pattern for assignment operations in Swift, showing how x op= expression is interpreted.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n{\n  (var y: X) -> X in\n  y *op*\\**=**\\*expression*\n  return y\n}(x)\n```\n\n----------------------------------------\n\nTITLE: Defining Stub Class Structure in Swift/Objective-C\nDESCRIPTION: Demonstrates the memory layout of a stub class structure used for dynamically-generated classes. Contains three fields: dummy for linker placation, one for isa field identification, and an initializer function pointer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ObjCInterop.md#2025-04-23_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nuintptr_t dummy;\nuintptr_t one;\nSwiftMetadataInitializer initializer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Private LibC Extras Library in CMake\nDESCRIPTION: This CMake script configures the build settings for the swiftSwiftPrivateLibcExtras library. It sets up compilation flags, dependencies, and platform-specific configurations. The script handles features like environ support, static print, and command line support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftPrivateLibcExtras/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_private_libc_extras_flags)\nif(SWIFT_STDLIB_HAS_ENVIRON)\n  set(swift_private_libc_extras_flags \"-D\" \"SWIFT_STDLIB_HAS_ENVIRON\")\nendif()\n\nif(SWIFT_STDLIB_STATIC_PRINT)\n  list(APPEND swift_private_libc_extras_flags \"-D\" \"SWIFT_STDLIB_STATIC_PRINT\")\nendif()\n\nset(swift_private_libc_extras_incorporate_object_libraries)\nif(SWIFT_STDLIB_HAS_COMMANDLINE)\n  list(APPEND swift_private_libc_extras_flags \"-D\" \"SWIFT_STDLIB_HAS_COMMANDLINE\")\nelse()\n  set(swift_private_libc_extras_incorporate_object_libraries \"swiftCommandLineSupport\")\nendif()\n\nif(SWIFT_BUILD_SDK_OVERLAY)\nset(swift_private_libc_extras_darwin_dependencies Darwin)\nelse()\nset(swift_private_libc_extras_darwin_dependencies)\nendif()\n\nadd_swift_target_library(swiftSwiftPrivateLibcExtras ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  # This file should be listed the first.  Module name is inferred from the\n  # filename.\n  SwiftPrivateLibcExtras.swift\n  Subprocess.c\n  Subprocess.swift\n\n  \"${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c\"\n\n  SWIFT_MODULE_DEPENDS SwiftPrivate\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS} ${swift_private_libc_extras_flags}\n  SWIFT_MODULE_DEPENDS_OSX ${swift_private_libc_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_IOS ${swift_private_libc_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_TVOS ${swift_private_libc_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_private_libc_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_XROS ${swift_private_libc_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_private_libc_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_FREESTANDING \"${SWIFT_FREESTANDING_TEST_DEPENDENCIES}\"\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WASI WASILibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK\n  INCORPORATE_OBJECT_LIBRARIES ${swift_private_libc_extras_incorporate_object_libraries}\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Automating Regression Bisection with git bisect - Shell\nDESCRIPTION: This shell script serves as an automated test driver for `git bisect run`, designed to identify bad revisions in a regression using instruction counting as the acceptance criterion. The script manages multiple update-checkouts to synchronize dependent repositories and invokes `count_instructions` on a Swift compiler build for threshold-based evaluation (exit 0 = good, 1 = bad, 125 = skip). Dependencies include `git`, the `utils/update-checkout` helper, a working counting function, and access to build directories. Inputs are managed implicitly via environment and argument variables, while outputs are encoded in the script's exit code. Limitation: The script expects a specific project and directory structure and may fail if dependencies are unavailable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/sh\\nTHRESHOLD=500000000\\nCURR=$(git describe)\\nutils/update-checkout --scheme main --reset-to-remote --clone --clean\\ngit checkout ${CURR}\\nutils/update-checkout --scheme main --match-timestamp\\ngit checkout ${CURR}\\nif utils/build-script -r\\nthen\\n    V=$(count_instructions ../build/Ninja-ReleaseAssert/swift-linux-x86_64/bin/swiftc -c test.swift)\\n    if [ ${V} -gt ${THRESHOLD} ]\\n    then\\n        # Bad\\n        exit 1\\n    else\\n        # Good\\n        exit 0\\n    fi\\nelse\\n    # Skip\\n    exit 125\\nfi\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Old Turkic Script\nDESCRIPTION: Defines the Unicode code point range for the Old Turkic script, consisting of 73 letters. This block contains characters from the Orkhon variety of the script.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_68\n\nLANGUAGE: Unicode\nCODE:\n```\n10C00..10C48  ; Old_Turkic # Lo  [73] OLD TURKIC LETTER ORKHON A..OLD TURKIC LETTER ORKHON BASH\n\n# Total code points: 73\n```\n\n----------------------------------------\n\nTITLE: Type Reference and Field Descriptor Function Signatures\nDESCRIPTION: Function signatures for key operations: getting symbolic type of an object and instantiating symbolic types into field descriptors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/RemoteMirrors.rst#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc getSymbolicTypeOfObject(_ isa: void*) -> SymbolicTypeReference\n\nfunc instantiateSymbolicType(_ ref: SymbolicTypeReference) -> [FieldTypeDescriptor]\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Example\nDESCRIPTION: Example directory structure showing the required layout for IWYU integration\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/RunningIncludeWhatYouUse.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nswift-project/\n  |--- build/\n  |    |--- [BuildSystem]-[BuildVariant]/\n  |    |    |--- swift-[target]/\n  |    |    |     |--- compile_commands.json\n  |    |    |     `--- ...\n  |    |    |--- iwyu-[target]/\n  |    |    `--- ...\n  |    `--- ...\n  |--- swift/\n  |--- iwyu/\n  |    |--- src/\n  |    |--- logs/\n  |    `--- scripts/\n  `--- ...\n```\n\n----------------------------------------\n\nTITLE: Minimal Generic Signature Option 2\nDESCRIPTION: An alternative minimal form of the generic signature after removing the redundant C1.Element: Equatable constraint, keeping C2.Element: Equatable instead.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n<C1, C2 where C1: Collection, C2: Collection, C1.Element == C2.Element,\n C2.Element: Equatable>\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Capital-to-Lowercase Conversion\nDESCRIPTION: This snippet contains mappings between Unicode codepoints for capital letters and their lowercase equivalents. Each line shows the hexadecimal code for a capital letter, the conversion type 'C' (for case conversion), and the corresponding lowercase letter code. The file includes mappings for Warang Citi, Medefaidrin, and Adlam scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_9\n\nLANGUAGE: plain text\nCODE:\n```\n118B9; C; 118D9; # WARANG CITI CAPITAL LETTER HIYO\n118BA; C; 118DA; # WARANG CITI CAPITAL LETTER HOLO\n118BB; C; 118DB; # WARANG CITI CAPITAL LETTER HORR\n118BC; C; 118DC; # WARANG CITI CAPITAL LETTER HAR\n118BD; C; 118DD; # WARANG CITI CAPITAL LETTER SSUU\n118BE; C; 118DE; # WARANG CITI CAPITAL LETTER SII\n118BF; C; 118DF; # WARANG CITI CAPITAL LETTER VIYO\n16E40; C; 16E60; # MEDEFAIDRIN CAPITAL LETTER M\n16E41; C; 16E61; # MEDEFAIDRIN CAPITAL LETTER S\n16E42; C; 16E62; # MEDEFAIDRIN CAPITAL LETTER V\n16E43; C; 16E63; # MEDEFAIDRIN CAPITAL LETTER W\n16E44; C; 16E64; # MEDEFAIDRIN CAPITAL LETTER ATIU\n16E45; C; 16E65; # MEDEFAIDRIN CAPITAL LETTER Z\n16E46; C; 16E66; # MEDEFAIDRIN CAPITAL LETTER KP\n16E47; C; 16E67; # MEDEFAIDRIN CAPITAL LETTER P\n16E48; C; 16E68; # MEDEFAIDRIN CAPITAL LETTER T\n16E49; C; 16E69; # MEDEFAIDRIN CAPITAL LETTER G\n16E4A; C; 16E6A; # MEDEFAIDRIN CAPITAL LETTER F\n16E4B; C; 16E6B; # MEDEFAIDRIN CAPITAL LETTER I\n16E4C; C; 16E6C; # MEDEFAIDRIN CAPITAL LETTER K\n16E4D; C; 16E6D; # MEDEFAIDRIN CAPITAL LETTER A\n16E4E; C; 16E6E; # MEDEFAIDRIN CAPITAL LETTER J\n16E4F; C; 16E6F; # MEDEFAIDRIN CAPITAL LETTER E\n16E50; C; 16E70; # MEDEFAIDRIN CAPITAL LETTER B\n16E51; C; 16E71; # MEDEFAIDRIN CAPITAL LETTER C\n16E52; C; 16E72; # MEDEFAIDRIN CAPITAL LETTER U\n16E53; C; 16E73; # MEDEFAIDRIN CAPITAL LETTER YU\n16E54; C; 16E74; # MEDEFAIDRIN CAPITAL LETTER L\n16E55; C; 16E75; # MEDEFAIDRIN CAPITAL LETTER Q\n16E56; C; 16E76; # MEDEFAIDRIN CAPITAL LETTER HP\n16E57; C; 16E77; # MEDEFAIDRIN CAPITAL LETTER NY\n16E58; C; 16E78; # MEDEFAIDRIN CAPITAL LETTER X\n16E59; C; 16E79; # MEDEFAIDRIN CAPITAL LETTER D\n16E5A; C; 16E7A; # MEDEFAIDRIN CAPITAL LETTER OE\n16E5B; C; 16E7B; # MEDEFAIDRIN CAPITAL LETTER N\n16E5C; C; 16E7C; # MEDEFAIDRIN CAPITAL LETTER R\n16E5D; C; 16E7D; # MEDEFAIDRIN CAPITAL LETTER O\n16E5E; C; 16E7E; # MEDEFAIDRIN CAPITAL LETTER AI\n16E5F; C; 16E7F; # MEDEFAIDRIN CAPITAL LETTER Y\n1E900; C; 1E922; # ADLAM CAPITAL LETTER ALIF\n1E901; C; 1E923; # ADLAM CAPITAL LETTER DAALI\n1E902; C; 1E924; # ADLAM CAPITAL LETTER LAAM\n1E903; C; 1E925; # ADLAM CAPITAL LETTER MIIM\n1E904; C; 1E926; # ADLAM CAPITAL LETTER BA\n1E905; C; 1E927; # ADLAM CAPITAL LETTER SINNYIIYHE\n1E906; C; 1E928; # ADLAM CAPITAL LETTER PE\n1E907; C; 1E929; # ADLAM CAPITAL LETTER BHE\n1E908; C; 1E92A; # ADLAM CAPITAL LETTER RA\n1E909; C; 1E92B; # ADLAM CAPITAL LETTER E\n1E90A; C; 1E92C; # ADLAM CAPITAL LETTER FA\n1E90B; C; 1E92D; # ADLAM CAPITAL LETTER I\n1E90C; C; 1E92E; # ADLAM CAPITAL LETTER O\n1E90D; C; 1E92F; # ADLAM CAPITAL LETTER DHA\n1E90E; C; 1E930; # ADLAM CAPITAL LETTER YHE\n1E90F; C; 1E931; # ADLAM CAPITAL LETTER WAW\n1E910; C; 1E932; # ADLAM CAPITAL LETTER NUN\n1E911; C; 1E933; # ADLAM CAPITAL LETTER KAF\n1E912; C; 1E934; # ADLAM CAPITAL LETTER YA\n1E913; C; 1E935; # ADLAM CAPITAL LETTER U\n1E914; C; 1E936; # ADLAM CAPITAL LETTER JIIM\n1E915; C; 1E937; # ADLAM CAPITAL LETTER CHI\n1E916; C; 1E938; # ADLAM CAPITAL LETTER HA\n1E917; C; 1E939; # ADLAM CAPITAL LETTER QAAF\n1E918; C; 1E93A; # ADLAM CAPITAL LETTER GA\n1E919; C; 1E93B; # ADLAM CAPITAL LETTER NYA\n1E91A; C; 1E93C; # ADLAM CAPITAL LETTER TU\n1E91B; C; 1E93D; # ADLAM CAPITAL LETTER NHA\n1E91C; C; 1E93E; # ADLAM CAPITAL LETTER VA\n1E91D; C; 1E93F; # ADLAM CAPITAL LETTER KHA\n1E91E; C; 1E940; # ADLAM CAPITAL LETTER GBE\n1E91F; C; 1E941; # ADLAM CAPITAL LETTER ZAL\n1E920; C; 1E942; # ADLAM CAPITAL LETTER KPO\n1E921; C; 1E943; # ADLAM CAPITAL LETTER SHA\n#\n# EOF\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Grapheme_Base Character Ranges\nDESCRIPTION: This is a listing of Unicode code point ranges that have the Grapheme_Base property. Each line contains either a single code point (e.g., '2329') or a range of code points (e.g., '230C..231F') followed by the property name 'Grapheme_Base'. This data is used in Unicode text processing to identify base characters that can form grapheme clusters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_41\n\nLANGUAGE: plain text\nCODE:\n```\n230B          ; Grapheme_Base\n230C..231F    ; Grapheme_Base\n2320..2321    ; Grapheme_Base\n2322..2328    ; Grapheme_Base\n2329          ; Grapheme_Base\n232A          ; Grapheme_Base\n232B..237B    ; Grapheme_Base\n237C          ; Grapheme_Base\n237D..239A    ; Grapheme_Base\n239B..23B3    ; Grapheme_Base\n23B4..23DB    ; Grapheme_Base\n23DC..23E1    ; Grapheme_Base\n23E2..2429    ; Grapheme_Base\n2440..244A    ; Grapheme_Base\n2460..249B    ; Grapheme_Base\n249C..24E9    ; Grapheme_Base\n24EA..24FF    ; Grapheme_Base\n2500..25B6    ; Grapheme_Base\n25B7          ; Grapheme_Base\n25B8..25C0    ; Grapheme_Base\n25C1          ; Grapheme_Base\n25C2..25F7    ; Grapheme_Base\n25F8..25FF    ; Grapheme_Base\n2600..266E    ; Grapheme_Base\n266F          ; Grapheme_Base\n2670..2767    ; Grapheme_Base\n2768          ; Grapheme_Base\n2769          ; Grapheme_Base\n276A          ; Grapheme_Base\n276B          ; Grapheme_Base\n276C          ; Grapheme_Base\n276D          ; Grapheme_Base\n276E          ; Grapheme_Base\n276F          ; Grapheme_Base\n2770          ; Grapheme_Base\n2771          ; Grapheme_Base\n2772          ; Grapheme_Base\n2773          ; Grapheme_Base\n2774          ; Grapheme_Base\n2775          ; Grapheme_Base\n2776..2793    ; Grapheme_Base\n2794..27BF    ; Grapheme_Base\n27C0..27C4    ; Grapheme_Base\n27C5          ; Grapheme_Base\n27C6          ; Grapheme_Base\n27C7..27E5    ; Grapheme_Base\n27E6          ; Grapheme_Base\n27E7          ; Grapheme_Base\n27E8          ; Grapheme_Base\n27E9          ; Grapheme_Base\n27EA          ; Grapheme_Base\n27EB          ; Grapheme_Base\n27EC          ; Grapheme_Base\n27ED          ; Grapheme_Base\n27EE          ; Grapheme_Base\n27EF          ; Grapheme_Base\n27F0..27FF    ; Grapheme_Base\n2800..28FF    ; Grapheme_Base\n2900..2982    ; Grapheme_Base\n2983          ; Grapheme_Base\n2984          ; Grapheme_Base\n2985          ; Grapheme_Base\n2986          ; Grapheme_Base\n2987          ; Grapheme_Base\n2988          ; Grapheme_Base\n2989          ; Grapheme_Base\n298A          ; Grapheme_Base\n298B          ; Grapheme_Base\n298C          ; Grapheme_Base\n298D          ; Grapheme_Base\n298E          ; Grapheme_Base\n298F          ; Grapheme_Base\n2990          ; Grapheme_Base\n2991          ; Grapheme_Base\n2992          ; Grapheme_Base\n2993          ; Grapheme_Base\n2994          ; Grapheme_Base\n2995          ; Grapheme_Base\n2996          ; Grapheme_Base\n2997          ; Grapheme_Base\n2998          ; Grapheme_Base\n2999..29D7    ; Grapheme_Base\n29D8          ; Grapheme_Base\n29D9          ; Grapheme_Base\n29DA          ; Grapheme_Base\n29DB          ; Grapheme_Base\n29DC..29FB    ; Grapheme_Base\n29FC          ; Grapheme_Base\n29FD          ; Grapheme_Base\n29FE..2AFF    ; Grapheme_Base\n2B00..2B2F    ; Grapheme_Base\n2B30..2B44    ; Grapheme_Base\n2B45..2B46    ; Grapheme_Base\n2B47..2B4C    ; Grapheme_Base\n2B4D..2B73    ; Grapheme_Base\n2B76..2B95    ; Grapheme_Base\n2B97..2BFF    ; Grapheme_Base\n2C00..2C7B    ; Grapheme_Base\n2C7C..2C7D    ; Grapheme_Base\n2C7E..2CE4    ; Grapheme_Base\n2CE5..2CEA    ; Grapheme_Base\n2CEB..2CEE    ; Grapheme_Base\n2CF2..2CF3    ; Grapheme_Base\n2CF9..2CFC    ; Grapheme_Base\n2CFD          ; Grapheme_Base\n2CFE..2CFF    ; Grapheme_Base\n2D00..2D25    ; Grapheme_Base\n2D27          ; Grapheme_Base\n2D2D          ; Grapheme_Base\n2D30..2D67    ; Grapheme_Base\n2D6F          ; Grapheme_Base\n2D70          ; Grapheme_Base\n2D80..2D96    ; Grapheme_Base\n2DA0..2DA6    ; Grapheme_Base\n2DA8..2DAE    ; Grapheme_Base\n2DB0..2DB6    ; Grapheme_Base\n2DB8..2DBE    ; Grapheme_Base\n2DC0..2DC6    ; Grapheme_Base\n2DC8..2DCE    ; Grapheme_Base\n2DD0..2DD6    ; Grapheme_Base\n2DD8..2DDE    ; Grapheme_Base\n2E00..2E01    ; Grapheme_Base\n2E02          ; Grapheme_Base\n2E03          ; Grapheme_Base\n2E04          ; Grapheme_Base\n2E05          ; Grapheme_Base\n2E06..2E08    ; Grapheme_Base\n2E09          ; Grapheme_Base\n2E0A          ; Grapheme_Base\n2E0B          ; Grapheme_Base\n2E0C          ; Grapheme_Base\n2E0D          ; Grapheme_Base\n2E0E..2E16    ; Grapheme_Base\n2E17          ; Grapheme_Base\n2E18..2E19    ; Grapheme_Base\n2E1A          ; Grapheme_Base\n2E1B          ; Grapheme_Base\n2E1C          ; Grapheme_Base\n2E1D          ; Grapheme_Base\n2E1E..2E1F    ; Grapheme_Base\n2E20          ; Grapheme_Base\n2E21          ; Grapheme_Base\n2E22          ; Grapheme_Base\n2E23          ; Grapheme_Base\n2E24          ; Grapheme_Base\n2E25          ; Grapheme_Base\n2E26          ; Grapheme_Base\n2E27          ; Grapheme_Base\n2E28          ; Grapheme_Base\n2E29          ; Grapheme_Base\n2E2A..2E2E    ; Grapheme_Base\n2E2F          ; Grapheme_Base\n2E30..2E39    ; Grapheme_Base\n2E3A..2E3B    ; Grapheme_Base\n2E3C..2E3F    ; Grapheme_Base\n2E40          ; Grapheme_Base\n2E41          ; Grapheme_Base\n2E42          ; Grapheme_Base\n2E43..2E4F    ; Grapheme_Base\n2E50..2E51    ; Grapheme_Base\n2E52..2E54    ; Grapheme_Base\n2E55          ; Grapheme_Base\n2E56          ; Grapheme_Base\n2E57          ; Grapheme_Base\n2E58          ; Grapheme_Base\n2E59          ; Grapheme_Base\n2E5A          ; Grapheme_Base\n2E5B          ; Grapheme_Base\n2E5C          ; Grapheme_Base\n2E5D          ; Grapheme_Base\n2E80..2E99    ; Grapheme_Base\n2E9B..2EF3    ; Grapheme_Base\n2F00..2FD5    ; Grapheme_Base\n2FF0..2FFF    ; Grapheme_Base\n3000          ; Grapheme_Base\n3001..3003    ; Grapheme_Base\n3004          ; Grapheme_Base\n3005          ; Grapheme_Base\n3006          ; Grapheme_Base\n3007          ; Grapheme_Base\n3008          ; Grapheme_Base\n3009          ; Grapheme_Base\n300A          ; Grapheme_Base\n300B          ; Grapheme_Base\n300C          ; Grapheme_Base\n300D          ; Grapheme_Base\n300E          ; Grapheme_Base\n300F          ; Grapheme_Base\n3010          ; Grapheme_Base\n3011          ; Grapheme_Base\n3012..3013    ; Grapheme_Base\n3014          ; Grapheme_Base\n3015          ; Grapheme_Base\n3016          ; Grapheme_Base\n3017          ; Grapheme_Base\n3018          ; Grapheme_Base\n3019          ; Grapheme_Base\n301A          ; Grapheme_Base\n301B          ; Grapheme_Base\n301C          ; Grapheme_Base\n301D          ; Grapheme_Base\n301E..301F    ; Grapheme_Base\n3020          ; Grapheme_Base\n3021..3029    ; Grapheme_Base\n3030          ; Grapheme_Base\n3031..3035    ; Grapheme_Base\n3036..3037    ; Grapheme_Base\n3038..303A    ; Grapheme_Base\n303B          ; Grapheme_Base\n303C          ; Grapheme_Base\n303D          ; Grapheme_Base\n303E..303F    ; Grapheme_Base\n3041..3096    ; Grapheme_Base\n309B..309C    ; Grapheme_Base\n309D..309E    ; Grapheme_Base\n309F          ; Grapheme_Base\n30A0          ; Grapheme_Base\n30A1..30FA    ; Grapheme_Base\n30FB          ; Grapheme_Base\n30FC..30FE    ; Grapheme_Base\n30FF          ; Grapheme_Base\n3105..312F    ; Grapheme_Base\n3131..318E    ; Grapheme_Base\n3190..3191    ; Grapheme_Base\n3192..3195    ; Grapheme_Base\n3196..319F    ; Grapheme_Base\n31A0..31BF    ; Grapheme_Base\n31C0..31E5    ; Grapheme_Base\n31EF          ; Grapheme_Base\n31F0..31FF    ; Grapheme_Base\n3200..321E    ; Grapheme_Base\n3220..3229    ; Grapheme_Base\n322A..3247    ; Grapheme_Base\n3248..324F    ; Grapheme_Base\n3250          ; Grapheme_Base\n3251..325F    ; Grapheme_Base\n3260..327F    ; Grapheme_Base\n3280..3289    ; Grapheme_Base\n328A..32B0    ; Grapheme_Base\n32B1..32BF    ; Grapheme_Base\n32C0..33FF    ; Grapheme_Base\n3400..4DBF    ; Grapheme_Base\n4DC0..4DFF    ; Grapheme_Base\n4E00..A014    ; Grapheme_Base\nA015          ; Grapheme_Base\nA016..A48C    ; Grapheme_Base\nA490..A4C6    ; Grapheme_Base\nA4D0..A4F7    ; Grapheme_Base\nA4F8..A4FD    ; Grapheme_Base\nA4FE..A4FF    ; Grapheme_Base\nA500..A60B    ; Grapheme_Base\nA60C          ; Grapheme_Base\nA60D..A60F    ; Grapheme_Base\nA610..A61F    ; Grapheme_Base\nA620..A629    ; Grapheme_Base\nA62A..A62B    ; Grapheme_Base\nA640..A66D    ; Grapheme_Base\nA66E          ; Grapheme_Base\nA673          ; Grapheme_Base\nA67E          ; Grapheme_Base\nA67F          ; Grapheme_Base\nA680..A69B    ; Grapheme_Base\nA69C..A69D    ; Grapheme_Base\nA6A0..A6E5    ; Grapheme_Base\nA6E6..A6EF    ; Grapheme_Base\nA6F2..A6F7    ; Grapheme_Base\nA700..A716    ; Grapheme_Base\nA717..A71F    ; Grapheme_Base\nA720..A721    ; Grapheme_Base\nA722..A76F    ; Grapheme_Base\nA770          ; Grapheme_Base\nA771..A787    ; Grapheme_Base\nA788          ; Grapheme_Base\nA789..A78A    ; Grapheme_Base\nA78B..A78E    ; Grapheme_Base\nA78F          ; Grapheme_Base\nA790..A7CD    ; Grapheme_Base\nA7D0..A7D1    ; Grapheme_Base\nA7D3          ; Grapheme_Base\nA7D5..A7DC    ; Grapheme_Base\nA7F2..A7F4    ; Grapheme_Base\nA7F5..A7F6    ; Grapheme_Base\nA7F7          ; Grapheme_Base\nA7F8..A7F9    ; Grapheme_Base\nA7FA          ; Grapheme_Base\nA7FB..A801    ; Grapheme_Base\nA803..A805    ; Grapheme_Base\nA807..A80A    ; Grapheme_Base\nA80C..A822    ; Grapheme_Base\nA823..A824    ; Grapheme_Base\nA827          ; Grapheme_Base\nA828..A82B    ; Grapheme_Base\nA830..A835    ; Grapheme_Base\nA836..A837    ; Grapheme_Base\nA838          ; Grapheme_Base\nA839          ; Grapheme_Base\nA840..A873    ; Grapheme_Base\nA874..A877    ; Grapheme_Base\nA880..A881    ; Grapheme_Base\nA882..A8B3    ; Grapheme_Base\nA8B4..A8C3    ; Grapheme_Base\nA8CE..A8CF    ; Grapheme_Base\nA8D0..A8D9    ; Grapheme_Base\nA8F2..A8F7    ; Grapheme_Base\nA8F8..A8FA    ; Grapheme_Base\nA8FB          ; Grapheme_Base\nA8FC          ; Grapheme_Base\nA8FD..A8FE    ; Grapheme_Base\nA900..A909    ; Grapheme_Base\nA90A..A925    ; Grapheme_Base\nA92E..A92F    ; Grapheme_Base\nA930..A946    ; Grapheme_Base\nA952          ; Grapheme_Base\nA95F          ; Grapheme_Base\nA960..A97C    ; Grapheme_Base\nA983          ; Grapheme_Base\nA984..A9B2    ; Grapheme_Base\nA9B4..A9B5    ; Grapheme_Base\nA9BA..A9BB    ; Grapheme_Base\nA9BE..A9BF    ; Grapheme_Base\nA9C1..A9CD    ; Grapheme_Base\nA9CF          ; Grapheme_Base\nA9D0..A9D9    ; Grapheme_Base\nA9DE..A9DF    ; Grapheme_Base\nA9E0..A9E4    ; Grapheme_Base\nA9E6          ; Grapheme_Base\nA9E7..A9EF    ; Grapheme_Base\nA9F0..A9F9    ; Grapheme_Base\nA9FA..A9FE    ; Grapheme_Base\nAA00..AA28    ; Grapheme_Base\nAA2F..AA30    ; Grapheme_Base\nAA33..AA34    ; Grapheme_Base\nAA40..AA42    ; Grapheme_Base\n```\n\n----------------------------------------\n\nTITLE: Disabling PCH Verification in Swift Compiler\nDESCRIPTION: Command to disable precompiled header (PCH) verification checking in the Swift compiler. This workaround allows compilation against PCH modules where the version verification is too strict, but may lead to crashes or undefined behavior if formats are actually incompatible.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\n-Xcc -Xclang -Xcc -fno-validate-pch\n```\n\n----------------------------------------\n\nTITLE: Invalid Initializer Syntax with Protocol Types in Swift\nDESCRIPTION: Shows the initializer syntax that cannot be used with protocol (existential) types in Swift. This is included to illustrate a key distinction between nominal types and protocol types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/nominal-types.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nMyProtocol()\n```\n\n----------------------------------------\n\nTITLE: Declaring FooSubUnnamedEnumeratorA1 Global Constant in Swift\nDESCRIPTION: Declares a computed property that returns an Int value, likely representing a specific enumeration value from the FooHelper module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.FooSub.printed.txt#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nvar FooSubUnnamedEnumeratorA1: Int { get }\n```\n\n----------------------------------------\n\nTITLE: Manual Error Propagation in C\nDESCRIPTION: Demonstrates manual error propagation using special return values in C. The function reads data into a buffer and returns NULL if the read operation fails.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nstruct object *read_object(void) {\n  char buffer[1024];\n  ssize_t numRead = read(0, buffer, sizeof(buffer));\n  if (numRead < 0) return NULL;\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Associated Type Name Mangling (BNF)\nDESCRIPTION: Details the BNF-like syntax for mangling associated type names in Swift. An associated type name is represented by an identifier, optionally prefixed by its defining protocol name ('P' followed by the protocol name) if disambiguation is required (e.g., when the base type conforms to multiple protocols defining an associated type with the same name). Substitutions are also possible.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_9\n\nLANGUAGE: bnf\nCODE:\n```\nassoc-type-name ::= ('P' protocol-name)? identifier\nassoc-type-name ::= substitution\n```\n\n----------------------------------------\n\nTITLE: Running All Benchmark Tests Using lit.py - Shell\nDESCRIPTION: Demonstrates how to invoke the lit.py test runner with verbose options to run all benchmark tests in the specified build directory. Requires llvm lit utilities and proper configuration of the SWIFT_BUILD_DIR variable. Outputs detailed results for each test, helping developers verify infrastructure and benchmark driver changes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_13\n\nLANGUAGE: Shell\nCODE:\n```\nswift-source$ ./llvm/utils/lit/lit.py -sv ${SWIFT_BUILD_DIR}/test-macosx-$(uname -m)/benchmark\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Template for Swift Runtime\nDESCRIPTION: Configures a CMake template file that includes build-specific settings. The template is processed and written to a header file in the build directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\"CMakeConfig.h.in\"\n  \"${PROJECT_BINARY_DIR}/include/swift/Runtime/CMakeConfig.h\"\n  ESCAPE_QUOTES @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Case Mappings and Decompositions\nDESCRIPTION: Character mapping table that defines uppercase to lowercase conversions and decomposition rules for Latin and Greek Unicode characters. Each line follows the format: codepoint; mapping_type; target_codepoint(s); # description\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n1E0C; C; 1E0D; # LATIN CAPITAL LETTER D WITH DOT BELOW\n1E0E; C; 1E0F; # LATIN CAPITAL LETTER D WITH LINE BELOW\n1E10; C; 1E11; # LATIN CAPITAL LETTER D WITH CEDILLA\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies and Flags for Swift String Processing Library in CMake\nDESCRIPTION: This snippet sets up the link libraries and compile flags for the Swift String Processing library. It includes conditional logic for static stdlib builds and adds a flag for library evolution support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/StringProcessing/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_string_processing_link_libraries\n  swiftCore\n  swift_RegexParser)\n\nset(swift_string_processing_compile_flags)\n\n# Pass a flag to the build indicating that _StringProcessing's dependencies\n# will be built with library evolution.\nlist(APPEND swift_string_processing_compile_flags\n  \"-DRESILIENT_LIBRARIES\")\n\nif(SWIFT_BUILD_STATIC_STDLIB)\n  # Explicitly autolink swift_RegexParser because it's imported with @_implementationOnly\n  list(APPEND swift_string_processing_compile_flags\n    \"-Xfrontend\" \"-public-autolink-library\" \"-Xfrontend\" \"swift_RegexParser\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Default Variant Shortcuts in CMake\nDESCRIPTION: This snippet creates shortcut targets for the default variant to simplify test invocation. It iterates through all test modes and subsets to create the shortcut targets that depend on the corresponding primary variant targets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: CMake\nCODE:\n```\n# Add shortcuts for the default variant.\nforeach(test_mode ${TEST_MODES})\n  foreach(test_subset ${TEST_SUBSETS})\n    set(test_mode_target_suffix \"\")\n    if(NOT test_mode STREQUAL \"optimize_none\")\n      set(test_mode_target_suffix \"-${test_mode}\")\n    endif()\n    set(test_subset_target_suffix \"-${test_subset}\")\n    if(test_subset STREQUAL \"primary\")\n      set(test_subset_target_suffix \"\")\n    endif()\n\n    set(test_target_name\n        \"check-swift${test_subset_target_suffix}${test_mode_target_suffix}\")\n    add_custom_target(\"${test_target_name}\"\n        DEPENDS \"${test_target_name}${SWIFT_PRIMARY_VARIANT_SUFFIX}\")\n    set_property(TARGET \"${test_target_name}\"\n        PROPERTY FOLDER \"Tests/check-swift\")\n\n    set(test_depends_target_name\n        \"swift${test_subset_target_suffix}${test_mode_target_suffix}-test-depends\")\n    add_custom_target(\"${test_depends_target_name}\"\n        DEPENDS \"swift${test_subset_target_suffix}${test_mode_target_suffix}${SWIFT_PRIMARY_VARIANT_SUFFIX}-test-depends\")\n    set_property(TARGET \"${test_depends_target_name}\"\n        PROPERTY FOLDER \"Tests/check-swift\")\n  endforeach()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining SSA Traversal Protocols in Swift for SIL\nDESCRIPTION: Defines a set of four protocols (`ValueDefUseWalker`, `AddressDefUseWalker`, `ValueUseDefWalker`, `AddressUseDefWalker`) for implementing custom walkers that traverse the SSA graph either upwards (use-def) or downwards (def-use) for both regular values and addresses. These walkers utilize instruction classifications and relate to various C++ utilities like `AccessPath`, `RCIdentityAnalysis`, and specific pass walkers. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nValueDefUseWalker\nAddressDefUseWalker\nValueUseDefWalker\nAddressUseDefWalker\n```\n\n----------------------------------------\n\nTITLE: Building and Installing the Default Executor Implementation\nDESCRIPTION: Creates and configures the build target for the concurrency default executor implementation (swift_ConcurrencyDefaultExecutor) for each supported target triple, with platform-specific settings and installation instructions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n  # lib/swift/embedded/<triple>/libswift_ConcurrencyDefaultExecutor.a\n  add_swift_target_library_single(\n    embedded-concurrency-default-executor-${mod}\n    swift_ConcurrencyDefaultExecutor\n    STATIC\n    IS_FRAGILE\n\n    CooperativeGlobalExecutor.cpp\n\n    C_COMPILE_FLAGS ${extra_c_compile_flags}\n    MODULE_DIR \"${CMAKE_BINARY_DIR}/lib/swift/embedded\"\n    SDK \"embedded\"\n    ARCHITECTURE \"${mod}\"\n    DEPENDS embedded-stdlib-${mod}\n    INSTALL_IN_COMPONENT stdlib\n    )\n  swift_install_in_component(\n    TARGETS embedded-concurrency-default-executor-${mod}\n    DESTINATION \"lib/swift/embedded/${mod}\"\n    COMPONENT \"stdlib\"\n    )\n  swift_install_in_component(\n    FILES \"${SWIFTLIB_DIR}/embedded/${mod}/libswift_ConcurrencyDefaultExecutor.a\"\n    DESTINATION \"lib/swift/embedded/${mod}/\"\n    COMPONENT \"stdlib\"\n    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n    )\n  set_property(TARGET embedded-concurrency-default-executor-${mod} PROPERTY OSX_ARCHITECTURES \"${arch}\")\n  add_dependencies(embedded-concurrency embedded-concurrency-default-executor-${mod})\n```\n\n----------------------------------------\n\nTITLE: Sample Swift Module Import Indexing JSON Structure\nDESCRIPTION: Example of how imported modules are reported in an indexing request under the <key.dependencies> field. The structure includes the module kind, name, file path, and an optional hash for Swift modules to determine if re-indexing is required.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/SwiftSupport.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  <key.kind>: (UID) // Module kind\n  <key.name>: (string) // module name\n  <key.filepath>: (string) // path to the module file\n  [opt] <key.hash>: (string) // Hash associated with this module import\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SourceKit UID Dependencies in CMake\nDESCRIPTION: Adds generated SourceKit UID header to global LLVM dependencies when SWIFT_BUILD_SOURCEKIT is enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_SOURCEKIT)\n  list(APPEND LLVM_COMMON_DEPENDS generated_sourcekit_uids)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux-Specific Options for Swift Build in CMake\nDESCRIPTION: Sets options for Musl libc path and architectures for static and dynamic Linux SDKs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_40\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_MUSL_PATH \"/usr/local/musl\" CACHE STRING\n  \"Path to the directory that contains the Musl headers and libraries. This is only required if we have been asked to build the Musl SDK, and defaults to the default install location for Musl.\")\n\nset(SWIFT_SDK_LINUX_STATIC_ARCHITECTURES \"\" CACHE STRING\n  \"The architectures to configure when using the static Linux SDK.\")\n\nset(SWIFT_SDK_LINUX_ARCHITECTURES \"\" CACHE STRING\n  \"The architectures to configure when using the Linux SDK.\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Unavailable NIL Macro\nDESCRIPTION: Defines a constant that is marked as unavailable with a message directing users to use 'nil' instead.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_25\n\nLANGUAGE: Swift\nCODE:\n```\n@available(*, unavailable, message: \"use 'nil' instead of this imported macro\")\nvar FOO_NIL: ()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Configuration\nDESCRIPTION: Configures platform-specific sources and library dependencies based on the host variant (Darwin, Linux, FreeBSD, Windows). Includes conditional logic for experimental features like concurrency and distributed actors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/runtime/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(PLATFORM_SOURCES)\nset(PLATFORM_TARGET_LINK_LIBRARIES)\nif(SWIFT_HOST_VARIANT MATCHES \"${SWIFT_DARWIN_VARIANTS}\")\n  find_library(FOUNDATION_LIBRARY Foundation)\n  list(APPEND PLATFORM_SOURCES\n    weak.mm\n    Refcounting.mm\n    )\n  list(APPEND PLATFORM_TARGET_LINK_LIBRARIES\n    ${FOUNDATION_LIBRARY}\n    swift_Concurrency${SWIFT_PRIMARY_VARIANT_SUFFIX}\n    swiftStdlibUnittest${SWIFT_PRIMARY_VARIANT_SUFFIX}\n    )\nelseif(SWIFT_HOST_VARIANT STREQUAL \"Linux\")\n  if(SWIFT_HOST_VARIANT_ARCH MATCHES \"armv6|armv7|i686\")\n    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES\n      \"atomic\")\n  endif()\nelseif(SWIFT_HOST_VARIANT STREQUAL \"freebsd\")\n  find_library(EXECINFO_LIBRARY execinfo)\n  list(APPEND PLATFORM_TARGET_LINK_LIBRARIES\n    ${EXECINFO_LIBRARY}\n    )\nelseif(SWIFT_HOST_VARIANT STREQUAL \"windows\")\n  list(APPEND PLATFORM_TARGET_LINK_LIBRARIES DbgHelp;Synchronization)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Stats Output JSON Example\nDESCRIPTION: Example JSON output from the unified stats reporter showing various compiler metrics and timing information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AST.NumSourceBuffers\": 1,\n  \"AST.NumSourceLines\": 1,\n  \"AST.NumSourceLinesPerSecond\": 3,\n  \"AST.NumLinkLibraries\": 0,\n  \"AST.NumLoadedModules\": 4,\n  \"AST.NumTotalClangImportedEntities\": 0,\n  ...\n  \"time.swift.Parsing.wall\": 5.038023e-03,\n  \"time.swift.Parsing.user\": 7.200000e-05,\n  \"time.swift.Parsing.sys\": 4.794000e-03,\n  \"time.swift-frontend.test-test.swift-x86_64_apple_macosx10.13-o-Onone.wall\": 3.239949e-01,\n  \"time.swift-frontend.test-test.swift-x86_64_apple_macosx10.13-o-Onone.user\": 2.152100e-02,\n  \"time.swift-frontend.test-test.swift-x86_64_apple_macosx10.13-o-Onone.sys\": 2.897520e-01\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Array Bridging with Cocoa\nDESCRIPTION: Code example showing how Swift arrays need to work seamlessly with Cocoa APIs, including passing Swift arrays to Cocoa methods and accepting NSArray instances from Cocoa as Swift arrays.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ArrayBridge.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nvar a = [cocoaObject1, cocoaObject2]\nsomeCocoaObject.takesAnNSArray(a)\n\nfunc processViews(_ views: [AnyObject]) { ... }\nvar b = someNSWindow.views // views is an NSArray\nprocessViews(b)\n\nvar c: [AnyObject] = someNSWindow.views\n```\n\n----------------------------------------\n\nTITLE: Installation Directory Configuration\nDESCRIPTION: Configures installation directories for libraries and Swift modules with support for static/shared builds and nested subdirectories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ndefaulted_option(SwiftOverlay_ENABLE_REFLECTION \"Enable runtime support for mirrors and reflection support\")\n\noption(SwiftOverlay_INSTALL_NESTED_SUBDIR \"Install libraries under a platform and architecture subdirectory\" ON)\nset(SwiftOverlay_INSTALL_LIBDIR \"${CMAKE_INSTALL_LIBDIR}/swift$<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:_static>$<$<BOOL:${SwiftOverlay_INSTALL_NESTED_SUBDIR}>:/${SwiftOverlay_PLATFORM_SUBDIR}/${SwiftOverlay_ARCH_SUBDIR}>\")\nset(SwiftOverlay_INSTALL_SWIFTMODULEDIR \"${CMAKE_INSTALL_LIBDIR}/swift$<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:_static>$<$<BOOL:${SwiftOverlay_INSTALL_NESTED_SUBDIR}>:/${SwiftOverlay_PLATFORM_SUBDIR}>\")\n```\n\n----------------------------------------\n\nTITLE: Linking to SourceKit C API using libsourcekitdInProc.dylib\nDESCRIPTION: Instructions for linking to the in-process library libsourcekitdInProc.dylib instead of the sourcekitd.framework. This method is more convenient for debugging purposes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-lsourcekitdInProc\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Kayah Li Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Kayah Li script, including digits, letters, vowel marks, tone marks, and a punctuation mark. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_49\n\nLANGUAGE: Unicode\nCODE:\n```\nA900..A909    ; Kayah_Li # Nd  [10] KAYAH LI DIGIT ZERO..KAYAH LI DIGIT NINE\nA90A..A925    ; Kayah_Li # Lo  [28] KAYAH LI LETTER KA..KAYAH LI LETTER OO\nA926..A92D    ; Kayah_Li # Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU\nA92F          ; Kayah_Li # Po       KAYAH LI SIGN SHYA\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol with Required Method\nDESCRIPTION: Declares a protocol named Superproto that requires conforming types to implement the lala() method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Superproto {\n  func lala()\n}\n```\n\n----------------------------------------\n\nTITLE: Running Swift Tests with run-test Utility (sh)\nDESCRIPTION: Shows how to execute a specific subset of Swift tests (in this case, the parsing tests located in `test/Parse`) using the `run-test` utility script. It requires specifying the Swift source root (`swift_SOURCE_ROOT`) and the build directory (`SWIFT_BUILD_DIR`) as arguments or environment variables. This method avoids rebuilding all targets, speeding up the debug cycle compared to `utils/build-script`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Testing.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n% ${swift_SOURCE_ROOT}/utils/run-test --build-dir ${SWIFT_BUILD_DIR} ${swift_SOURCE_ROOT}/test/Parse\n```\n\n----------------------------------------\n\nTITLE: Implementing String with Default Generic Parameters in Swift\nDESCRIPTION: Shows an alternative string implementation using defaulted generic parameters. This approach allows naive users to extend the right type while maintaining flexibility for different Unicode storage types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nstruct String<U: Unicode = StringStorage> \n  : BidirectionalCollection {\n\n  // ...APIs for high-level string processing here...\n  \n  var unicode: U // access to lower-level unicode details\n}\n\ntypealias Substring = String<StringStorage.SubSequence>\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Builtin Float Library in CMake\nDESCRIPTION: Sets up the Swift Builtin float library build configuration, including source files, compilation flags, and target specifications. It handles different build types and system-specific settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/ClangOverlays/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DEFINED SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT OR NOT SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT)\n  set(BUILTIN_FLOAT_SOURCES\n    linker-support/magic-symbols-for-install-name.c\n  )\n\n  set(BUILTIN_FLOAT_GYB_SOURCES\n    float.swift.gyb\n  )\n\n  if(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n    set(BUILTIN_FLOAT_SWIFT_FLAGS -Xfrontend -module-abi-name -Xfrontend Darwin)\n  else()\n    set(BUILTIN_FLOAT_SWIFT_FLAGS)\n  endif()\n\n  add_swift_target_library(swift_Builtin_float\n      ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES}\n      IS_SDK_OVERLAY\n      \n      ${BUILTIN_FLOAT_SOURCES}\n\n      GYB_SOURCES\n        ${BUILTIN_FLOAT_GYB_SOURCES}\n\n      SWIFT_COMPILE_FLAGS\n        ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\n        ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n        ${BUILTIN_FLOAT_SWIFT_FLAGS}\n\n      LINK_FLAGS\n        ${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\n\n      INSTALL_IN_COMPONENT stdlib\n      MACCATALYST_BUILD_FLAVOR zippered)\n```\n\n----------------------------------------\n\nTITLE: Running Foundation tests on Windows\nDESCRIPTION: This command runs the Foundation test suite using Ninja.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_15\n\nLANGUAGE: cmd\nCODE:\n```\nninja -C S:\\b\\3 test\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Runtime Debugging Support Entry Points (Symbols)\nDESCRIPTION: Lists the `_swift_willThrow` runtime function, which is likely a hook called just before an error is thrown, potentially used for debugging or instrumentation purposes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_7\n\nLANGUAGE: Symbols\nCODE:\n```\n0000000000027140 T _swift_willThrow\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftThreadingTests Unit Tests in CMake\nDESCRIPTION: Sets up the SwiftThreadingTests unit test target by specifying source files and linking required libraries. The tests are only built when targeting the primary variant SDK and architecture. Windows builds receive additional platform-specific library dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Threading/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif((\"${SWIFT_HOST_VARIANT_SDK}\" STREQUAL \"${SWIFT_PRIMARY_VARIANT_SDK}\") AND\n   (\"${SWIFT_HOST_VARIANT_ARCH}\" STREQUAL \"${SWIFT_PRIMARY_VARIANT_ARCH}\"))\n  add_swift_unittest(SwiftThreadingTests IS_TARGET_TEST\n    Mutex.cpp\n    ConditionVariable.cpp\n    Once.cpp\n    LinuxUlock.cpp\n    Fatal.cpp\n    )\n\n  target_link_libraries(SwiftThreadingTests\n    PRIVATE\n    swiftThreading${SWIFT_PRIMARY_VARIANT_SUFFIX}\n    swiftCore${SWIFT_PRIMARY_VARIANT_SUFFIX}\n    )\n\n  if(SWIFT_HOST_VARIANT STREQUAL \"windows\")\n    target_link_libraries(SwiftThreadingTests PRIVATE Synchronization)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Letter Number (Nl) Codepoints\nDESCRIPTION: Defines ranges of unicode codepoints for numerals that are represented as letters, including Roman numerals, Hangzhou numerals, and various ancient numbering systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_18\n\nLANGUAGE: unicode\nCODE:\n```\n16EE..16F0    ; Nl #   [3] RUNIC ARLAUG SYMBOL..RUNIC BELGTHOR SYMBOL\n2160..2182    ; Nl #  [35] ROMAN NUMERAL ONE..ROMAN NUMERAL TEN THOUSAND\n[...additional ranges...]\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Command for Swift Image Registration\nDESCRIPTION: Creates a custom command to copy the built object file to both shared and static runtime registrar locations. This ensures the appropriate files are available for both dynamic and static linking.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n      add_custom_command_target(swiftImageRegistration-${arch_suffix}\n                                COMMAND\n                                  \"${CMAKE_COMMAND}\" -E copy \"${swiftrtObject}\" \"${shared_runtime_registrar}\"\n                                COMMAND\n                                  \"${CMAKE_COMMAND}\" -E copy \"${swiftrtObject}\" \"${static_runtime_registrar}\"\n                                OUTPUT\n                                  \"${shared_runtime_registrar}\"\n                                  \"${static_runtime_registrar}\"\n                                DEPENDS\n                                  \"${swiftrtObject}\")\n```\n\n----------------------------------------\n\nTITLE: Building Swift Driver Library\nDESCRIPTION: Configures the Swift driver static library build, sets up dependencies on SwiftOptions, and links required libraries including swiftAST, swiftBasic, and swiftOption.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Driver/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftDriver STATIC\n  ${swiftDriver_sources})\nadd_dependencies(swiftDriver\n  SwiftOptions)\ntarget_link_libraries(swiftDriver PRIVATE\n  swiftAST\n  swiftBasic\n  swiftOption)\n```\n\n----------------------------------------\n\nTITLE: Defining Private CF Type Aliases in Swift\nDESCRIPTION: Declares private Core Foundation type aliases with compatibility annotations for Swift 3 migration. Includes a class that inherits from _CFObject and type aliases that reference this class.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nclass __PrivCFType : _CFObject {\n}\n@available(swift, obsoleted: 3, renamed: \"__PrivCFType\")\ntypealias __PrivCFTypeRef = __PrivCFType\ntypealias __PrivCFSub = __PrivCFType\n@available(swift, obsoleted: 3, renamed: \"__PrivCFSub\")\ntypealias __PrivCFSubRef = __PrivCFSub\ntypealias __PrivInt = Int32\n```\n\n----------------------------------------\n\nTITLE: Scalar Pack Indexing in SIL\nDESCRIPTION: Produces dynamic pack index for scalar component of a pack type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_162\n\nLANGUAGE: sil\nCODE:\n```\n%index = scalar_pack_index 0 of $Pack{Int, repeat each T, Int}\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variables and Functions in Swift\nDESCRIPTION: This snippet declares a global variable and three functions in Swift. The functions are likely placeholders or stubs for implementation elsewhere.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/foo_swift_module.printed.comments.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nvar globalVar: Int\nfunc hiddenImport()\nfunc overlaidFoo()\nfunc visibleImport()\n```\n\n----------------------------------------\n\nTITLE: Defining Reabstraction Thunk with Global Actor Constraint Mangling in Swift\nDESCRIPTION: Specifies the mangling pattern for a reabstraction thunk with a global actor constraint.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= reabstraction-thunk type 'TU' // reabstraction thunk with global actor constraint\n```\n\n----------------------------------------\n\nTITLE: Git History Cleanup Commands\nDESCRIPTION: Commands demonstrating how to clean up git commit history using interactive rebase\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/FAQ.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit rebase -i HEAD~N\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit commit --amend\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Unicode Titlecase Letter (Lt) Codepoint Definitions\nDESCRIPTION: Defines Unicode codepoints for titlecase letters (Lt category), primarily covering Latin and Greek character combinations. Contains 31 total code points for special case mappings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n01C5          ; Lt #       LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON\n01C8          ; Lt #       LATIN CAPITAL LETTER L WITH SMALL LETTER J\n01CB          ; Lt #       LATIN CAPITAL LETTER N WITH SMALL LETTER J\n[...truncated for brevity...]\n1FFC          ; Lt #       GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI\n\n# Total code points: 31\n```\n\n----------------------------------------\n\nTITLE: Swift Enum with Internal Argument Names\nDESCRIPTION: Example showing an enum with multiple cases using internal argument names for associated values. Demonstrates how internal names can be used to generate optional properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/EnumStyle.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nenum Foo {\n  case init(_ x: Int)\n  case init(_ y: String)\n\n  // var x: Int?\n  // var y: String?\n}\n```\n\n----------------------------------------\n\nTITLE: Default Derivatives Example in Swift Protocols\nDESCRIPTION: Demonstrates how to implement and use default derivatives in protocol extensions with examples of inheritance and customization points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_42\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {\n    @differentiable\n    func foo(_ x: Float) -> Float\n}\n\nextension P {\n    @derivative(of: foo(x:))\n    func _(_ x: Float) -> (value: Float, differential: (Float) -> Float) {\n        (value: foo(x), differential: { _ in 42 })\n    }\n}\n\nstruct S: P {\n    @differentiable(default) // Inherits default derivative for `P.foo(_:)`.\n    func foo(_ x: Float) -> Float {\n        33\n    }\n}\n\nlet s = S()\nlet d = derivative(at: 0) { x in\n   s.foo(x)\n} // ==> 42\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Installation Directories in CMake\nDESCRIPTION: Configures the installation directory for Swift CMake files and sets up the binary directory path for build-time use.\nSOURCE: https://github.com/swiftlang/swift/blob/main/cmake/modules/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_INSTALL_PACKAGE_DIR lib${LLVM_LIBDIR_SUFFIX}/cmake/swift)\nset(swift_cmake_builddir \"${SWIFT_BINARY_DIR}/${SWIFT_INSTALL_PACKAGE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Swift Symbolic Reference Patterns\nDESCRIPTION: Definition of symbolic reference formats used in Swift binaries, including relative and absolute reference patterns based on pointer size.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsymbolic-reference ::= [\\x01-\\x17] .{4} // Relative symbolic reference\n#if sizeof(void*) == 8\n  symbolic-reference ::= [\\x18-\\x1F] .{8} // Absolute symbolic reference\n#elif sizeof(void*) == 4\n  symbolic-reference ::= [\\x18-\\x1F] .{4} // Absolute symbolic reference\n#endif\n```\n\n----------------------------------------\n\nTITLE: Building and Installing the Main Embedded Concurrency Library\nDESCRIPTION: Creates and configures the build target for the main embedded concurrency library (swift_Concurrency) for each supported target triple. This includes setting compiler flags, dependencies, and installation instructions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n  # lib/swift/embedded/_Concurrency.swiftmodule\n  # lib/swift/embedded/<triple>/libswift_Concurrency.a\n  add_swift_target_library_single(\n    embedded-concurrency-${mod}\n    swift_Concurrency\n    STATIC\n    IS_STDLIB IS_FRAGILE\n\n    ${SWIFT_RUNTIME_CONCURRENCY_C_SOURCES}\n    ${SWIFT_RUNTIME_CONCURRENCY_SWIFT_SOURCES}\n    ${SWIFT_RUNTIME_CONCURRENCY_EMBEDDED_SWIFT_SOURCES}\n\n    SWIFT_COMPILE_FLAGS\n      ${extra_swift_compile_flags} -enable-experimental-feature Embedded\n      -parse-stdlib -DSWIFT_CONCURRENCY_EMBEDDED\n      -Xfrontend -emit-empty-object-file\n      ${SWIFT_RUNTIME_CONCURRENCY_SWIFT_FLAGS}\n    C_COMPILE_FLAGS\n      ${extra_c_compile_flags} ${SWIFT_RUNTIME_CONCURRENCY_C_FLAGS} -DSWIFT_CONCURRENCY_EMBEDDED=1 -DSWIFT_RUNTIME_EMBEDDED=1\n    MODULE_DIR \"${CMAKE_BINARY_DIR}/lib/swift/embedded\"\n    SDK \"embedded\"\n    ARCHITECTURE \"${mod}\"\n    DEPENDS embedded-stdlib-${mod}\n    INSTALL_IN_COMPONENT stdlib\n    )\n  swift_install_in_component(\n    TARGETS embedded-concurrency-${mod}\n    DESTINATION \"lib/swift/embedded/${mod}\"\n    COMPONENT \"stdlib\"\n    )\n  swift_install_in_component(\n    FILES \"${SWIFTLIB_DIR}/embedded/${mod}/libswift_Concurrency.a\"\n    DESTINATION \"lib/swift/embedded/${mod}/\"\n    COMPONENT \"stdlib\"\n    PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n    )\n\n  if(NOT \"${arch}\" MATCHES \"wasm32\")\n    set_property(TARGET embedded-concurrency-${mod} PROPERTY OSX_ARCHITECTURES \"${arch}\")\n  endif()\n  add_dependencies(embedded-concurrency embedded-concurrency-${mod})\n```\n\n----------------------------------------\n\nTITLE: Defining a Stub Swift Compiler Library in CMake\nDESCRIPTION: This snippet defines a dummy OBJECT library named `swiftCompilerStub` using the custom CMake function `add_swift_host_library`. It is built from the `stubs.cpp` source file and serves as a placeholder when the full Swift compiler modules are not being built (e.g., when bootstrapping is disabled).\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# A dummy library if swift in the compiler is disabled\nadd_swift_host_library(swiftCompilerStub OBJECT stubs.cpp)\n```\n\n----------------------------------------\n\nTITLE: Globbing Regex Parser Source Files in CMake\nDESCRIPTION: Uses file(GLOB_RECURSE) to find all Swift source files in the _RegexParser directory, then processes the paths to ensure they are in CMake format.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RegexParser/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(GLOB_RECURSE _MATCHING_ENGINE_SOURCES\n  \"${SWIFT_PATH_TO_STRING_PROCESSING_SOURCE}/Sources/_RegexParser/*.swift\")\nset(MATCHING_ENGINE_SOURCES)\nforeach(source ${_MATCHING_ENGINE_SOURCES})\n  file(TO_CMAKE_PATH \"${source}\" source)\n  list(APPEND MATCHING_ENGINE_SOURCES ${source})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Linker Selection\nDESCRIPTION: Determines which linker to use based on the host platform, with different logic for Android, Windows, Darwin, and Linux systems. On Linux, it checks for GNU Gold availability and version, defaulting to LLD if Gold is unavailable or too old.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_66\n\nLANGUAGE: cmake\nCODE:\n```\n# Which default linker to use. Prefer LLVM_USE_LINKER if it set, otherwise use\n# our own defaults. This should only be possible in a unified (not stand alone)\n# build environment.\ninclude(GoldVersion)\n\nif(LLVM_USE_LINKER)\n  set(SWIFT_USE_LINKER_default \"${LLVM_USE_LINKER}\")\nelseif(SWIFT_HOST_VARIANT_SDK STREQUAL \"ANDROID\")\n  set(SWIFT_USE_LINKER_default \"lld\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\" AND NOT CMAKE_HOST_SYSTEM_NAME STREQUAL \"Windows\")\n  set(SWIFT_USE_LINKER_default \"lld\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  set(SWIFT_USE_LINKER_default \"\")\nelseif(DISTRO_NAME STREQUAL \"Amazon Linux 2023\")\n  set(SWIFT_USE_LINKER_default \"lld\")\nelse()\n  get_gold_version(gold_version)\n  if(NOT gold_version)\n    message(STATUS \"GNU Gold not found; using lld instead\")\n    set(SWIFT_USE_LINKER_default \"lld\")\n  elseif(gold_version VERSION_LESS \"2.36\")\n    message(STATUS \"GNU Gold is too old (${gold_version}); using lld instead\")\n    set(SWIFT_USE_LINKER_default \"lld\")\n  else()\n    message(STATUS \"Using GNU Gold ${gold_version}\")\n    set(SWIFT_USE_LINKER_default \"gold\")\n  endif()\nendif()\nset(SWIFT_USE_LINKER ${SWIFT_USE_LINKER_default} CACHE STRING\n    \"Build Swift with a non-default linker\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Stubs Sources in CMake\nDESCRIPTION: Defines lists of source files for Swift runtime stubs, including C++ sources, Objective-C sources, and GYB template sources. These lists are used to build the swiftStdlibStubs library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/stubs/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_stubs_sources\n    Assert.cpp\n    GlobalObjects.cpp\n    LibcShims.cpp\n    Random.cpp\n    Stubs.cpp\n    ThreadLocalStorage.cpp\n    MathStubs.cpp\n    Unicode/UnicodeData.cpp\n    Unicode/UnicodeGrapheme.cpp\n    Unicode/UnicodeNormalization.cpp\n    Unicode/UnicodeScalarProps.cpp\n    Unicode/UnicodeWord.cpp\n)\nset(swift_stubs_objc_sources\n    Availability.mm\n    FoundationHelpers.mm\n    OptionalBridgingHelper.mm\n    Reflection.mm\n    SwiftNativeNSObject.mm\n    SwiftNativeNSXXXBaseARC.m)\nset(swift_stubs_gyb_sources\n    SwiftNativeNSXXXBase.mm.gyb)\nset(LLVM_OPTIONAL_SOURCES\n    ${swift_stubs_objc_sources}\n    ${swift_stubs_gyb_sources})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing CMake Configuration Header\nDESCRIPTION: Configures CMakeConfig.h from template and installs it in the Swift runtime include directory. Uses ESCAPE_QUOTES option for proper string handling and installs as part of the testsuite-tools component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/include/swift/Runtime/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(CMakeConfig.h.in ${CMAKE_CURRENT_BINARY_DIR}/CMakeConfig.h\n               ESCAPE_QUOTES @ONLY)\nswift_install_in_component(FILES ${CMAKE_CURRENT_BINARY_DIR}/CMakeConfig.h\n                           DESTINATION \"include/swift/Runtime\"\n                           COMPONENT testsuite-tools)\n```\n\n----------------------------------------\n\nTITLE: Generating Revision Include Files in CMake for Swift\nDESCRIPTION: Defines a function to generate revision include files for version control information. It creates a custom command to generate the include file using a VCS version script.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Basic/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(generate_revision_inc revision_inc_var name dir)\n  if(SWIFT_APPEND_VC_REV)\n    find_first_existing_vc_file(\"${dir}\" ${name}_vc)\n    set(dir_when_append_enabled ${dir})\n  endif()\n\n  set(version_inc \"${CMAKE_CURRENT_BINARY_DIR}/${name}Revision.inc\")\n\n  set(generate_vcs_version_script \"${LLVM_MAIN_SRC_DIR}/cmake/modules/GenerateVersionFromVCS.cmake\")\n\n  add_custom_command(OUTPUT \"${version_inc}\"\n    DEPENDS \"${${name}_vc}\" \"${generate_vcs_version_script}\"\n    COMMAND ${CMAKE_COMMAND} \"-DNAMES=$<UPPER_CASE:${name}>\"\n                             \"-D$<UPPER_CASE:${name}>_SOURCE_DIR=${dir_when_append_enabled}\"\n                             \"-DHEADER_FILE=${version_inc}\"\n                             -P \"${generate_vcs_version_script}\")\n\n  set_source_files_properties(\"${version_inc}\"\n    PROPERTIES GENERATED TRUE\n               HEADER_FILE_ONLY TRUE)\n  set(${revision_inc_var} ${version_inc} PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration and Update in SIL\nDESCRIPTION: Shows how variable declarations and updates are represented in SIL, demonstrating proper location handling for both initial declaration and subsequent modifications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nvar a = 2\na = 3\n```\n\nLANGUAGE: sil\nCODE:\n```\n%0 = integer_literal $Int, 2\ndebug_value %0 : $Int, var, name \"a\", loc \"a.swift\":2:5, scope 2\n%2 = integer_literal $Int, 3\ndebug_value %2 : $Int, var, (name \"a\", loc \"a.swift\":2:5, scope 2), loc \"a.swift\":3:3, scope 2\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing C++ Shims for Swift SDKs\nDESCRIPTION: Iterates through Swift SDKs to set up build targets for C++ compatibility shims. Handles directory creation, file copying, and installation for both static and dynamic libraries. Includes special handling for macCatalyst builds when enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/cxxshim/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(libcxxshim_modulemap_target_list)\nforeach(sdk ${SWIFT_SDKS})\n  set(module_dir \"${SWIFTLIB_DIR}/${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n  set(module_dir_static \"${SWIFTSTATICLIB_DIR}/${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n\n  add_custom_command(OUTPUT ${module_dir}\n                     COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${module_dir}\")\n  if(SWIFT_BUILD_STATIC_STDLIB OR SWIFT_SDK_${sdk}_STATIC_ONLY)\n    add_custom_command(OUTPUT ${module_dir_static}\n                       COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${module_dir_static}\")\n  endif()\n  if(SWIFT_ENABLE_MACCATALYST AND \"${sdk}\" STREQUAL \"OSX\")\n    set(maccatalyst_module_dir \"${SWIFTLIB_DIR}/${SWIFT_SDK_MACCATALYST_LIB_SUBDIR}\")\n    add_custom_command(OUTPUT ${maccatalyst_module_dir}\n                       COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${maccatalyst_module_dir}\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Defining SWIFT_FORCE_OPTIMIZED_TYPECHECKER Option in CMake\nDESCRIPTION: Defines a CMake build option `SWIFT_FORCE_OPTIMIZED_TYPECHECKER`. When set to TRUE, this overrides the build configuration's optimization level specifically for the type checker component, forcing it to be compiled with optimization. This can speed up type checking during debugging workflows. The default value is FALSE.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_29\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_FORCE_OPTIMIZED_TYPECHECKER \"Override the optimization setting of\n  the type checker so that it always compiles with optimization. This eases\n  debugging after type checking occurs by speeding up type checking\" FALSE)\n```\n\n----------------------------------------\n\nTITLE: Defining Declaration Name Mangling in Swift\nDESCRIPTION: Specifies how declaration names are mangled in Swift's ABI, including local and file-discriminated declarations. This handles naming collisions within a module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\ndecl-name ::= identifier\n  decl-name ::= identifier 'L' INDEX                  // locally-discriminated declaration\n  decl-name ::= identifier identifier 'LL'            // file-discriminated declaration\n  decl-name ::= identifier 'L' RELATED-DISCRIMINATOR  // related declaration\n\n  RELATED-DISCRIMINATOR ::= [a-j]\n  RELATED-DISCRIMINATOR ::= [A-J]\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Symbol Graph Generator Static Library in CMake\nDESCRIPTION: This CMake snippet defines the swiftSymbolGraphGen static library, specifying its source files and required LLVM components. It also sets up the target link libraries for the built library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SymbolGraphGen/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftSymbolGraphGen STATIC\n  AvailabilityMixin.cpp\n  DeclarationFragmentPrinter.cpp\n  Edge.cpp\n  JSON.cpp\n  Symbol.cpp\n  SymbolGraph.cpp\n  SymbolGraphGen.cpp\n  SymbolGraphASTWalker.cpp\n\n  LLVM_LINK_COMPONENTS\n  TargetParser\n  )\n\ntarget_link_libraries(swiftSymbolGraphGen PRIVATE\n  swiftAST\n  swiftIDE\n  swiftMarkup)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Build Settings for Target Triples\nDESCRIPTION: Sets up platform-specific compiler flags and configuration for building the concurrency library on different target platforms. This includes special handling for Linux and macOS hosts with various architecture targets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})\n  string(REGEX REPLACE \"[ \\t]+\" \";\" list \"${entry}\")\n  list(GET list 0 arch)\n  list(GET list 1 mod)\n  list(GET list 2 triple)\n\n  set(extra_c_compile_flags)\n  set(extra_swift_compile_flags)\n\n  if (SWIFT_HOST_VARIANT STREQUAL \"linux\")\n    if(NOT \"${mod}\" MATCHES \"-linux-gnu$\")\n      continue()\n    endif()\n  elseif (SWIFT_HOST_VARIANT STREQUAL \"macosx\")\n    if(NOT \"${mod}\" MATCHES \"x86_64|arm64|arm64e|armv7|armv7m|armv7em\")\n      continue()\n    endif()\n\n    if(NOT \"${mod}\" MATCHES \"-apple-\" OR \"${mod}\" MATCHES \"-none-macho\" OR \"${arch}\" STREQUAL \"armv7m\" OR \"${arch}\" STREQUAL \"armv7em\")\n      # Host is macOS with a macOS SDK. To be able to build the C++ Concurrency runtime for non-Darwin targets using the macOS SDK,\n      # we need to pass some extra flags and search paths.\n      set(extra_c_compile_flags -stdlib=libc++ -isystem${SWIFT_SDK_OSX_PATH}/usr/include/c++/v1 -isystem${SWIFT_SDK_OSX_PATH}/usr/include -D__APPLE__)\n    endif()\n  endif()\n\n  set(SWIFT_SDK_embedded_THREADING_PACKAGE none)\n  set(SWIFT_SDK_embedded_ARCH_${mod}_MODULE \"${mod}\")\n  set(SWIFT_SDK_embedded_LIB_SUBDIR \"embedded\")\n  set(SWIFT_SDK_embedded_ARCH_${mod}_TRIPLE \"${triple}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Remap File Format for Swift Migrator\nDESCRIPTION: Describes the JSON format used for the remap file, which specifies textual replacements for the input file. This format is used by Xcode to generate diff previews in the Migration Assistant.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Migrator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"file\": \"/path/to/my/file.swift\",\n  \"offset\": 503,\n  \"remove\": 10\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"file\": \"/path/to/my/file.swift\",\n  \"offset\": 61,\n  \"text\": \".foo()\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"file\": \"/path/to/my/file.swift\",\n  \"offset\": 61,\n  \"remove\": 3,\n  \"text\": \"bar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Type Reference Example in S-expression Format\nDESCRIPTION: Example showing how type references can be visualized in S-expression format, demonstrating nested type structures including bound generic types and generic parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/RemoteMirrors.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n(tuple_type\n  (bound_generic_type\n    (concrete_type \"Array\")\n    (concrete_type \"Int\"))\n  (bound_generic_type\n    (builtin_type \"Optional\")\n    (generic_type_parameter_type index=0)))\n```\n\n----------------------------------------\n\nTITLE: Configuring swiftLLVMSupport Library Build in CMake\nDESCRIPTION: Defines an object library named swiftLLVMSupport with core LLVM support source files. Includes conditional compilation options for ASL support and installation rules when building static libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/LLVMSupport/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(swiftLLVMSupport OBJECT\n  ErrorHandling.cpp\n  Hashing.cpp\n  MemAlloc.cpp\n  SmallPtrSet.cpp\n  SmallVector.cpp\n  StringRef.cpp)\ntarget_compile_options(swiftLLVMSupport\n  PRIVATE\n    $<$<BOOL:${SwiftCore_HAS_ASL}>:-DSWIFT_STDLIB_HAS_ASL>)\n\nif(NOT BUILD_SHARED_LIBS)\n  install(TARGETS swiftLLVMSupport\n    EXPORT SwiftCoreTargets\n    COMPONENT SwiftCore_runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Compiler Flags for Swift in CMake\nDESCRIPTION: Sets up cache variables for experimental extra flags and regular expression-based module-specific flags for Swift compilation. These are intended for one-off experiments only.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_50\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_EXPERIMENTAL_EXTRA_FLAGS \"\" CACHE STRING\n    \"Extra flags to pass when compiling swift files.  Use this option *only* for one-off experiments\")\n\nset(SWIFT_EXPERIMENTAL_EXTRA_REGEXP_FLAGS \"\" CACHE STRING\n  \"A list of [module_regexp1;flags1;module_regexp2;flags2,...] which can be used to apply specific flags to modules that match a cmake regexp. It always applies the first regexp that matches.\")\n\nset(SWIFT_EXPERIMENTAL_EXTRA_NEGATIVE_REGEXP_FLAGS \"\" CACHE STRING\n    \"A list of [module_regexp1;flags1;module_regexp2;flags2,...] which can be used to apply specific flags to modules that do not match a cmake regexp. It always applies the first regexp that does not match. The reason this is necessary is that cmake does not provide negative matches in the regex. Instead you have to use NOT in the if statement requiring a separate variable.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Superclass Sequence in Swift\nDESCRIPTION: Demonstrates the mathematical representation of a class hierarchy, used to explain the partial initialization problem in failable initializers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/FailableInitializers.md#2025-04-23_snippet_0\n\nLANGUAGE: math\nCODE:\n```\nsuperclasses(C) = {C, C_1, C_2, ..., C_n}\n```\n\n----------------------------------------\n\nTITLE: Declaration Context Mangling\nDESCRIPTION: Defines mangling for different types of declaration contexts including modules, extensions, and entities, which are used to establish the scope of a declaration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\ncontext ::= module\ncontext ::= extension\ncontext ::= entity\nmodule ::= substitution                    // other substitution\nmodule ::= identifier                      // module name\nmodule ::= known-module                    // abbreviation\nextension ::= 'E' module entity\nextension ::= 'e' module generic-signature entity\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies for swiftStdlibStubs in CMake\nDESCRIPTION: Sets the swiftShims library as a dependency for the swiftStdlibStubs target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/stubs/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftStdlibStubs PRIVATE\n  swiftShims)\n```\n\n----------------------------------------\n\nTITLE: Documenting Protocol Conformance Changes in Swift\nDESCRIPTION: This section outlines changes to protocol conformances in Swift, including additions and removals of conformances for classes, enums, protocols, and structs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n/* Protocol Conformance Change */\ncake: Class C7 has added a conformance to an existing protocol P1\ncake: Class SuperClassChange has added a conformance to an existing protocol P1\ncake: Enum IceKind has removed conformance to BitwiseCopyable\ncake: Enum IceKind has removed conformance to Sendable\ncake: Enum IceKind has removed conformance to SendableMetatype\ncake: Protocol P3 has added inherited protocol P4\ncake: Protocol P3 has removed inherited protocol P2\ncake: Struct fixedLayoutStruct has added a conformance to an existing protocol P2\ncake: Struct fixedLayoutStruct has removed conformance to P1\n```\n\n----------------------------------------\n\nTITLE: Defining Keyword Apply Syntax in Swift\nDESCRIPTION: This snippet defines the syntax for keyword apply expressions in Swift. It shows how functions can be called with or without keyword arguments, and how optional chaining and forced unwrapping can be used with function calls.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/KeywordArguments.rst#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nexpr-apply ::= expr-postfix '(' (kw-arg (',' kw-arg)*)? ')'\nkw-arg ::= (identifier ':')? expr\n\n// Examples\nfoo()\nfoo(1, 2, 3)\nfoo(1, bar: 2, bas: 3)\nfoo!(1, bar: 2, bas: 3)\na.foo?(1, bar: 2, bas: 3)\n```\n\n----------------------------------------\n\nTITLE: Running LLDB with a Script File (Shell)\nDESCRIPTION: Executes LLDB, instructing it to read and execute commands sequentially from the specified script file (`test.lldb`) using the `-s` option. This provides a non-interactive way to run predefined debugger commands.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nlldb test -s test.lldb\n```\n\n----------------------------------------\n\nTITLE: Using deprecated functions in Swift\nDESCRIPTION: This snippet demonstrates how Swift warns when using a function marked with @available with a deprecated attribute. The compiler will generate a warning indicating that the function is deprecated.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/deprecated-declaration.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@available(iOS, deprecated: 10.0)\nfunc oldFunction() {\n  // This function is deprecated and should not be used.\n}\n\noldFunction() // 'oldFunction()' is deprecated\n```\n\n----------------------------------------\n\nTITLE: Declaring FooSubEnum1 Global Constants in Swift\nDESCRIPTION: Declares two computed properties that return FooSubEnum1 values, likely representing specific enum cases from the FooHelper module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.FooSub.printed.txt#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar FooSubEnum1X: FooSubEnum1 { get }\nvar FooSubEnum1Y: FooSubEnum1 { get }\n```\n\n----------------------------------------\n\nTITLE: Using C Function Pointers in Swift with Implicit Conversion\nDESCRIPTION: This snippet demonstrates how C function pointers can be imported into Swift and used as first-class function values, showcasing the subtyping relationship between C functions and Swift functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_44\n\nLANGUAGE: swift\nCODE:\n```\n// In a C file:\nint addOne(int x) { return x + 1; }\nint (*addOneFunctionPointer)(int) = addOne;\n// Swift equivalent:\n//   let addOneFunctionPointer: (Int) -> Int = addOne\n\n// In a Swift file that imports the C file:\n// Global variable `addOneFunctionPointer` imported as `@convention(c) (Int) -> Int`.\n[1, 2, 3].map(addOneFunctionPointer) // [2, 3, 4]\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Generic Extensions Mangling\nDESCRIPTION: Swift symbol mangling for generic extensions with constraints. These examples demonstrate how Swift encodes extension methods, property getters, and conformance requirements for generic types in mangled symbols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n_TFe27mangling_generic_extensionsRxS_8RunciblerVS_3Foog1aSi ---> (extension in mangling_generic_extensions):mangling_generic_extensions.Foo<A where A: mangling_generic_extensions.Runcible>.a.getter : Swift.Int\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TFe27mangling_generic_extensionsRxS_8RunciblerVS_3Foog1bx ---> (extension in mangling_generic_extensions):mangling_generic_extensions.Foo<A where A: mangling_generic_extensions.Runcible>.b.getter : A\n```\n\n----------------------------------------\n\nTITLE: Generating Swift Exports File for Build Tree\nDESCRIPTION: Creates an exports file for the build tree that contains all the Swift targets. It retrieves global properties for both regular and build-tree specific exports and combines them for exporting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/cmake/modules/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Generate build-tree exports list only\nset(SWIFT_EXPORTS_FILE ${swift_cmake_builddir}/SwiftExports.cmake)\nget_property(SWIFT_EXPORTS GLOBAL PROPERTY SWIFT_EXPORTS)\nget_property(SWIFT_BUILDTREE_EXPORTS GLOBAL PROPERTY SWIFT_BUILDTREE_EXPORTS)\n\nset(SWIFT_CONFIG_EXPORTS ${SWIFT_EXPORTS} ${SWIFT_BUILDTREE_EXPORTS})\nexport(TARGETS ${SWIFT_CONFIG_EXPORTS} FILE ${SWIFT_EXPORTS_FILE})\n```\n\n----------------------------------------\n\nTITLE: SwiftPrintAsClang Library Configuration\nDESCRIPTION: Configures the swiftPrintAsClang static library with its source files and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/PrintAsClang/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftPrintAsClang STATIC\n  ClangSyntaxPrinter.cpp\n  DeclAndTypePrinter.cpp\n  ModuleContentsWriter.cpp\n  PrimitiveTypeMapping.cpp\n  PrintAsClang.cpp\n  PrintClangClassType.cpp\n  PrintClangFunction.cpp\n  PrintClangValueType.cpp\n  PrintSwiftToClangCoreScaffold.cpp\n  SwiftToClangInteropContext.cpp)\ntarget_link_libraries(swiftPrintAsClang PRIVATE\n  swiftAST\n  swiftClangImporter\n  swiftFrontend\n  swiftIDE\n  swiftIRGen)\n\nadd_dependencies(swiftPrintAsClang\n  \"copy_swiftToCxx_shims\")\n\nset_swift_llvm_is_available(swiftPrintAsClang)\n```\n\n----------------------------------------\n\nTITLE: Unicode 15.0 Code Point Assignments\nDESCRIPTION: Details code points and their descriptions newly assigned in Unicode version 15.0.0 (September 2022). Contains assignments for scripts like Kannada, Lao, Kawi, and new emoji characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_15\n\nLANGUAGE: unicode\nCODE:\n```\n0CF3          ; 15.0 #       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT\n0ECE          ; 15.0 #       LAO YAMAKKAN\n# Additional entries omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for swift_build_support in Shell\nDESCRIPTION: This command executes the unit tests for the swift_build_support module using Python 3. It runs a specific script located in the utils/swift_build_support directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/swift_build_support/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ python3 utils/swift_build_support/run_tests.py\n```\n\n----------------------------------------\n\nTITLE: Creating Dependencies for Static Binary Link Files\nDESCRIPTION: Sets up build dependencies for static binary link files if any were created. This ensures that these files are built as part of the standard library target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(static_binary_lnk_file_list)\n  add_dependencies(stdlib ${static_binary_lnk_file_list})\n  add_custom_target(static_binary_magic ALL DEPENDS ${static_binary_lnk_file_list})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demangling Request Format\nDESCRIPTION: JSON format for requesting symbol demangling from SourceKit. Takes an array of mangled names and returns human-readable versions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>: (UID) <source.request.demangle>,\n    <key.names>:   [string*] // An array of names to demangle.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Target and Installation Rules\nDESCRIPTION: Creates a custom target for copying API notes and configures installation rules for the Swift compiler component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/apinotes/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(\"copy_apinotes\" ALL\n    DEPENDS \"${outputs}\" \"${output_dir}\"\n    COMMENT \"Copying API notes to ${output_dir}\"\n    SOURCES \"${sources}\")\n\nadd_dependencies(compiler copy_apinotes)\nswift_install_in_component(DIRECTORY \"${output_dir}\"\n                           DESTINATION \"lib/swift/\"\n                           COMPONENT compiler)\n```\n\n----------------------------------------\n\nTITLE: Finding lipo for Universal Binary Creation in CMake\nDESCRIPTION: Includes the SwiftToolchainUtils module and finds the lipo tool, which is used to create universal binaries on Apple platforms. This tool is essential for combining multiple architecture binaries into a single file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_57\n\nLANGUAGE: cmake\nCODE:\n```\n# lipo is used to create universal binaries.\ninclude(SwiftToolchainUtils)\nif(NOT SWIFT_LIPO)\n  find_toolchain_tool(SWIFT_LIPO \"${SWIFT_DARWIN_XCRUN_TOOLCHAIN}\" lipo)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Optimized TypeChecker in CMake\nDESCRIPTION: Sets compiler options for optimizing the Swift AST library's type checker. It applies different optimization flags based on the compiler being used (MSVC or others).\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/AST/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_FORCE_OPTIMIZED_TYPECHECKER)\n  if(CMAKE_CXX_COMPILER_ID STREQUAL \"MSVC\" OR CMAKE_CXX_SIMULATE_ID STREQUAL \"MSVC\")\n    target_compile_options(swiftAST PRIVATE /O2 /Ob2)\n  else()\n    target_compile_options(swiftAST PRIVATE -O3)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Variable fooIntVar\nDESCRIPTION: Defines a global variable fooIntVar of type Int32.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_10\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  fooIntVar.  Bbb.\nvar fooIntVar: Int32\n```\n\n----------------------------------------\n\nTITLE: Setting LLVM Availability\nDESCRIPTION: Configures LLVM availability for the swiftRefactoring target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Refactoring/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_swift_llvm_is_available(swiftRefactoring)\n```\n\n----------------------------------------\n\nTITLE: Platform SDK System Root Flag\nDESCRIPTION: GCC-derived flag used by Clang to specify the system root directory for C/C++ headers and libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CrossCompilationModel.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n--sysroot\n```\n\n----------------------------------------\n\nTITLE: Conditional Configuration and Copying of LLDB Check Expect in CMake\nDESCRIPTION: This snippet conditionally configures and copies the 'lldb-check-expect' file if LLDB is enabled. It uses similar CMake commands as the previous snippet but wraps them in an if statement to check for LLDB_ENABLE.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/lldb/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (LLDB_ENABLE)\n  configure_file(\n    ${CMAKE_CURRENT_SOURCE_DIR}/lldb-check-expect.in\n    ${CMAKE_CURRENT_BINARY_DIR}/lldb-check-expect\n    @ONLY)\n\n  file(COPY ${CMAKE_CURRENT_BINARY_DIR}/lldb-check-expect\n    DESTINATION \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\"\n    FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ\n    GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Class Inheritance Changes in Swift\nDESCRIPTION: This snippet documents changes to class inheritance in Swift, including modifications to superclasses, removal of superclasses, changes to initializer inheritance, and changes to open members.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake.txt#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n/* Class Inheritance Change */\ncake: Class C4 has changed its super class from APINotesTest.OldType to APINotesTest.NewType\ncake: Class SubGenericClass has changed its super class from cake.GenericClass<any cake.P1> to cake.GenericClass<any cake.P2>\ncake: Class SuperClassRemoval has removed its super class cake.C3\ncake: Class SuperClassRemoval no longer inherits convenience inits from its superclass\ncake: Constructor AddingNewDesignatedInit.init(_:) has been added as a designated initializer to an open class\ncake: Constructor ClassWithMissingDesignatedInits.init() has been added as a designated initializer to an open class\ncake: Func ClassWithOpenMember.bar() is no longer open for subclassing\ncake: Func ClassWithOpenMember.foo() is no longer open for subclassing\ncake: Var ClassWithOpenMember.property is no longer open for subclassing\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Point Ranges with 'Extend' Property in 'InCB' Category\nDESCRIPTION: This code snippet defines ranges of Unicode code points that belong to the 'InCB' (In Combining Character Class) category with the 'Extend' property. Each line follows the format of hexadecimal code point range followed by the classification. These definitions are likely used for text processing and Unicode handling in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_49\n\nLANGUAGE: plain text\nCODE:\n```\n11C30..11C36  ; InCB; Extend\n11C38..11C3D  ; InCB; Extend\n11C3F         ; InCB; Extend\n11C92..11CA7  ; InCB; Extend\n11CAA..11CB0  ; InCB; Extend\n11CB2..11CB3  ; InCB; Extend\n11CB5..11CB6  ; InCB; Extend\n11D31..11D36  ; InCB; Extend\n11D3A         ; InCB; Extend\n11D3C..11D3D  ; InCB; Extend\n11D3F..11D45  ; InCB; Extend\n11D47         ; InCB; Extend\n11D90..11D91  ; InCB; Extend\n11D95         ; InCB; Extend\n11D97         ; InCB; Extend\n11EF3..11EF4  ; InCB; Extend\n11F00..11F01  ; InCB; Extend\n11F36..11F3A  ; InCB; Extend\n11F40         ; InCB; Extend\n11F41         ; InCB; Extend\n11F42         ; InCB; Extend\n11F5A         ; InCB; Extend\n13440         ; InCB; Extend\n13447..13455  ; InCB; Extend\n1611E..16129  ; InCB; Extend\n1612D..1612F  ; InCB; Extend\n16AF0..16AF4  ; InCB; Extend\n16B30..16B36  ; InCB; Extend\n16F4F         ; InCB; Extend\n16F8F..16F92  ; InCB; Extend\n16FE4         ; InCB; Extend\n16FF0..16FF1  ; InCB; Extend\n1BC9D..1BC9E  ; InCB; Extend\n1CF00..1CF2D  ; InCB; Extend\n1CF30..1CF46  ; InCB; Extend\n1D165..1D166  ; InCB; Extend\n1D167..1D169  ; InCB; Extend\n1D16D..1D172  ; InCB; Extend\n1D17B..1D182  ; InCB; Extend\n1D185..1D18B  ; InCB; Extend\n1D1AA..1D1AD  ; InCB; Extend\n1D242..1D244  ; InCB; Extend\n1DA00..1DA36  ; InCB; Extend\n1DA3B..1DA6C  ; InCB; Extend\n1DA75         ; InCB; Extend\n1DA84         ; InCB; Extend\n1DA9B..1DA9F  ; InCB; Extend\n1DAA1..1DAAF  ; InCB; Extend\n1E000..1E006  ; InCB; Extend\n1E008..1E018  ; InCB; Extend\n1E01B..1E021  ; InCB; Extend\n1E023..1E024  ; InCB; Extend\n1E026..1E02A  ; InCB; Extend\n1E08F         ; InCB; Extend\n1E130..1E136  ; InCB; Extend\n1E2AE         ; InCB; Extend\n1E2EC..1E2EF  ; InCB; Extend\n1E4EC..1E4EF  ; InCB; Extend\n1E5EE..1E5EF  ; InCB; Extend\n1E8D0..1E8D6  ; InCB; Extend\n1E944..1E94A  ; InCB; Extend\n1F3FB..1F3FF  ; InCB; Extend\nE0020..E007F  ; InCB; Extend\nE0100..E01EF  ; InCB; Extend\n\n# Total code points: 2192\n\n# EOF\n```\n\n----------------------------------------\n\nTITLE: Analyzing Coroutine Continuation Prototype in Swift\nDESCRIPTION: Demonstrates a mangled symbol for a coroutine continuation prototype, specifically for an escaping thin method that yields once with an unowned self parameter.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_23\n\nLANGUAGE: Swift\nCODE:\n```\n$s2hi1SVIetMIy_TC  ---> coroutine continuation prototype for @escaping @convention(thin) @convention(method) @yield_once_2 (@unowned hi.S) -> ()\n```\n\n----------------------------------------\n\nTITLE: Specifying a SIL Basic Block Grammar in Swift SIL (Swift)\nDESCRIPTION: This snippet defines the expected grammar for declaring basic blocks and their arguments within a SIL function body. It outlines block labeling, optional typed arguments, and the structure of SIL instructions and terminators. Arguments can have explicit ownership kinds for memory management, and the definitions provide the basis for SSA and control flow analysis.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nsil-basic-block ::= sil-label sil-instruction-def* sil-terminator\nsil-label ::= sil-identifier ('(' sil-argument (',' sil-argument)* ')')? ':'\nsil-argument-ownership-kind ::= @owned\nsil-argument-ownership-kind ::= @guaranteed\nsil-argument-ownership-kind ::= @reborrow\nsil-argument ::= sil-value-name ':' sil-argument-ownership-kind? sil-type\n\nsil-instruction-result ::= sil-value-name\nsil-instruction-result ::= '(' (sil-value-name (',' sil-value-name)*)? ')'\nsil-instruction-source-info ::= (',' sil-scope-ref)? (',' sil-loc)?\nsil-instruction-def ::=\n  (sil-instruction-result '=')? sil-instruction sil-instruction-source-info\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings for SwiftCore in CMake\nDESCRIPTION: Generates plist for Darwin platforms and embeds manifest for the SwiftCore target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\ngenerate_plist(\"${CMAKE_PROJECT_NAME}\" \"${CMAKE_PROJECT_VERSION}\" swiftCore)\nembed_manifest(swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Performance Recording with Perf\nDESCRIPTION: Command to record performance data using perf with cycle counting and call graph recording using Last Branch Record (LBR).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nperf record -e cycles -c 10000 --call-graph=lbr swiftc t.swift\n```\n\n----------------------------------------\n\nTITLE: Installing Sccache Manually on Linux (Docker) (sh)\nDESCRIPTION: Provides shell commands to manually download, extract, and install a specific version (v0.3.0) of Sccache on Linux systems, particularly useful in Docker containers where Snap is unavailable. It downloads the pre-compiled binary for the system's architecture, extracts it, copies the executable to `/usr/local/bin`, and makes it executable. Requires `curl`, `tar`, and `sudo` privileges.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nSCCACHE_VERSION=v0.3.0\ncurl -L \"https://github.com/mozilla/sccache/releases/download/${SCCACHE_VERSION}/sccache-${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl.tar.gz\" -o sccache.tar.gz\ntar xzpvf sccache.tar.gz\nsudo cp \"sccache-${SCCACHE_VERSION}-$(uname -m)-unknown-linux-musl/sccache\" /usr/local/bin\nsudo chmod +x /usr/local/bin/sccache\n```\n\n----------------------------------------\n\nTITLE: Configuring sourcekitdInProc Build Options in CMake\nDESCRIPTION: This snippet sets up build options for sourcekitdInProc, including an option to build it as a static library and checks if the sourcekit-inproc component is being installed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\noption(SOURCEKITD_BUILD_STATIC_INPROC\n  \"Build sourcekitdInProc as a static library (in addition to a shared one)\" OFF)\n\nswift_is_installing_component(sourcekit-inproc SOURCEKIT_INSTALLING_INPROC)\n\nset(sourcekitdInProc_args\n  sourcekitdInProc.cpp\n  CodeCompletionSwiftInterop.cpp\n  LLVM_LINK_COMPONENTS support coverage\n)\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Code Points that Change When Titlecased\nDESCRIPTION: A data file listing Unicode code points that change their form when titlecased formatting is applied. Each line contains either a single hexadecimal code point or a range of code points, followed by the property name 'Changes_When_Titlecased'. The file concludes with summary information about the total number of code points listed (1479).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_20\n\nLANGUAGE: plain\nCODE:\n```\n2CF3          ; Changes_When_Titlecased\n2D00..2D25    ; Changes_When_Titlecased\n2D27          ; Changes_When_Titlecased\n2D2D          ; Changes_When_Titlecased\nA641          ; Changes_When_Titlecased\nA643          ; Changes_When_Titlecased\nA645          ; Changes_When_Titlecased\nA647          ; Changes_When_Titlecased\nA649          ; Changes_When_Titlecased\nA64B          ; Changes_When_Titlecased\nA64D          ; Changes_When_Titlecased\nA64F          ; Changes_When_Titlecased\nA651          ; Changes_When_Titlecased\nA653          ; Changes_When_Titlecased\nA655          ; Changes_When_Titlecased\nA657          ; Changes_When_Titlecased\nA659          ; Changes_When_Titlecased\nA65B          ; Changes_When_Titlecased\nA65D          ; Changes_When_Titlecased\nA65F          ; Changes_When_Titlecased\nA661          ; Changes_When_Titlecased\nA663          ; Changes_When_Titlecased\nA665          ; Changes_When_Titlecased\nA667          ; Changes_When_Titlecased\nA669          ; Changes_When_Titlecased\nA66B          ; Changes_When_Titlecased\nA66D          ; Changes_When_Titlecased\nA681          ; Changes_When_Titlecased\nA683          ; Changes_When_Titlecased\nA685          ; Changes_When_Titlecased\nA687          ; Changes_When_Titlecased\nA689          ; Changes_When_Titlecased\nA68B          ; Changes_When_Titlecased\nA68D          ; Changes_When_Titlecased\nA68F          ; Changes_When_Titlecased\nA691          ; Changes_When_Titlecased\nA693          ; Changes_When_Titlecased\nA695          ; Changes_When_Titlecased\nA697          ; Changes_When_Titlecased\nA699          ; Changes_When_Titlecased\nA69B          ; Changes_When_Titlecased\nA723          ; Changes_When_Titlecased\nA725          ; Changes_When_Titlecased\nA727          ; Changes_When_Titlecased\nA729          ; Changes_When_Titlecased\nA72B          ; Changes_When_Titlecased\nA72D          ; Changes_When_Titlecased\nA72F          ; Changes_When_Titlecased\nA733          ; Changes_When_Titlecased\nA735          ; Changes_When_Titlecased\nA737          ; Changes_When_Titlecased\nA739          ; Changes_When_Titlecased\nA73B          ; Changes_When_Titlecased\nA73D          ; Changes_When_Titlecased\nA73F          ; Changes_When_Titlecased\nA741          ; Changes_When_Titlecased\nA743          ; Changes_When_Titlecased\nA745          ; Changes_When_Titlecased\nA747          ; Changes_When_Titlecased\nA749          ; Changes_When_Titlecased\nA74B          ; Changes_When_Titlecased\nA74D          ; Changes_When_Titlecased\nA74F          ; Changes_When_Titlecased\nA751          ; Changes_When_Titlecased\nA753          ; Changes_When_Titlecased\nA755          ; Changes_When_Titlecased\nA757          ; Changes_When_Titlecased\nA759          ; Changes_When_Titlecased\nA75B          ; Changes_When_Titlecased\nA75D          ; Changes_When_Titlecased\nA75F          ; Changes_When_Titlecased\nA761          ; Changes_When_Titlecased\nA763          ; Changes_When_Titlecased\nA765          ; Changes_When_Titlecased\nA767          ; Changes_When_Titlecased\nA769          ; Changes_When_Titlecased\nA76B          ; Changes_When_Titlecased\nA76D          ; Changes_When_Titlecased\nA76F          ; Changes_When_Titlecased\nA77A          ; Changes_When_Titlecased\nA77C          ; Changes_When_Titlecased\nA77F          ; Changes_When_Titlecased\nA781          ; Changes_When_Titlecased\nA783          ; Changes_When_Titlecased\nA785          ; Changes_When_Titlecased\nA787          ; Changes_When_Titlecased\nA78C          ; Changes_When_Titlecased\nA791          ; Changes_When_Titlecased\nA793..A794    ; Changes_When_Titlecased\nA797          ; Changes_When_Titlecased\nA799          ; Changes_When_Titlecased\nA79B          ; Changes_When_Titlecased\nA79D          ; Changes_When_Titlecased\nA79F          ; Changes_When_Titlecased\nA7A1          ; Changes_When_Titlecased\nA7A3          ; Changes_When_Titlecased\nA7A5          ; Changes_When_Titlecased\nA7A7          ; Changes_When_Titlecased\nA7A9          ; Changes_When_Titlecased\nA7B5          ; Changes_When_Titlecased\nA7B7          ; Changes_When_Titlecased\nA7B9          ; Changes_When_Titlecased\nA7BB          ; Changes_When_Titlecased\nA7BD          ; Changes_When_Titlecased\nA7BF          ; Changes_When_Titlecased\nA7C1          ; Changes_When_Titlecased\nA7C3          ; Changes_When_Titlecased\nA7C8          ; Changes_When_Titlecased\nA7CA          ; Changes_When_Titlecased\nA7CD          ; Changes_When_Titlecased\nA7D1          ; Changes_When_Titlecased\nA7D7          ; Changes_When_Titlecased\nA7D9          ; Changes_When_Titlecased\nA7DB          ; Changes_When_Titlecased\nA7F6          ; Changes_When_Titlecased\nAB53          ; Changes_When_Titlecased\nAB70..ABBF    ; Changes_When_Titlecased\nFB00..FB06    ; Changes_When_Titlecased\nFB13..FB17    ; Changes_When_Titlecased\nFF41..FF5A    ; Changes_When_Titlecased\n10428..1044F  ; Changes_When_Titlecased\n104D8..104FB  ; Changes_When_Titlecased\n10597..105A1  ; Changes_When_Titlecased\n105A3..105B1  ; Changes_When_Titlecased\n105B3..105B9  ; Changes_When_Titlecased\n105BB..105BC  ; Changes_When_Titlecased\n10CC0..10CF2  ; Changes_When_Titlecased\n10D70..10D85  ; Changes_When_Titlecased\n118C0..118DF  ; Changes_When_Titlecased\n16E60..16E7F  ; Changes_When_Titlecased\n1E922..1E943  ; Changes_When_Titlecased\n\n# Total code points: 1479\n\n# ================================================\n\n# Derived Property:   Changes_When_Casefolded (CWCF)\n#  Characters whose normalized forms are not stable under case folding.\n#  For more information, see D142 in Section 3.13, \"Default Case Algorithms\".\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation of Swift Features File in CMake\nDESCRIPTION: Sets up installation rules for the merged features file, specifying destination and component for the compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Option/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nswift_install_in_component(\n  FILES\n    ${features_file_dest}\n  DESTINATION\n    \"share/swift\"\n  COMPONENT\n    compiler\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Executor Implementation Header Files\nDESCRIPTION: Sets up custom commands and targets to copy and install executor implementation header files to the appropriate include directories. This ensures the headers are available for both the build process and in the installed compiler toolchain.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n  # Copy the ExecutorImpl.h header into the local include directory\n  # and install it in the compiler toolchain\n  add_custom_command(\n    OUTPUT \"${SWIFT_INCLUDE_DIR}/swift/ExecutorImpl.h\"\n    DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/ExecutorImpl.h\"\n    COMMAND \"${CMAKE_COMMAND}\" \"-E\" \"copy\"\n            \"${CMAKE_CURRENT_SOURCE_DIR}/ExecutorImpl.h\"\n            \"${SWIFT_INCLUDE_DIR}/swift\")\n\n  add_custom_target(\"copy_executor_impl_header\"\n    DEPENDS \"${SWIFT_INCLUDE_DIR}/swift/ExecutorImpl.h\"\n    COMMENT \"Copying executor implementation header to ${SWIFT_INCLUDE_DIR}/swift\")\n\n  swift_install_in_component(FILES\n    \"${CMAKE_CURRENT_SOURCE_DIR}/ExecutorImpl.h\"\n    DESTINATION \"include/swift\"\n    COMPONENT compiler)\n\n  add_dependencies(embedded-concurrency \"copy_executor_impl_header\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Heuristic Parameter Matching in Swift\nDESCRIPTION: Illustrates the heuristic rules for skipping parameters when matching trailing closures, showing how the compiler handles optional and required parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/trailing-closure-matching.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc showAlert(\n  message: String,\n  onPresentation: (() ->  Void)? = nil,\n  onDismissal: () -> Void\n) { /* ... */ }\n\n// `onPresentation` does not require an argument, but `onDismissal` does, and\n// there is no subsequent trailing closure labeled `onDismissal`.\n// Therefore, the unlabeled trailing closure is matched to `onDismissal`.\nshowAlert(message: \"Hello, World!\") {\n  // On dismissal action.\n}\n\n// Although `onPresentation` does not require an argument, there are no\n// subsequent parameters that require an argument before the parameter whose\n// label matches the next trailing closure (`onDismissal`).\n// Therefore, the unlabeled trailing closure is matched to `onPresentation`.\nshowAlert(message: \"Hello, World!\") {\n  // On presentation action.\n} onDismissal: {\n  // On dismissal action.\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Unowned Reference Count with unowned_retain in SIL\nDESCRIPTION: Increments the unowned reference count of a heap object. This instruction requires a reference type and is not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_58\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'unowned_retain' sil-operand\n\nunowned_retain %0 : $@unowned T\n// $T must be a reference type\n```\n\n----------------------------------------\n\nTITLE: Implementing Instruction Deletion Notification Handler - C++\nDESCRIPTION: This snippet defines the required override of the handler method that receives deletion notifications for instructions in Swift's SIL optimizer. Implementing this method is necessary for analyses and passes registered with the PassManager to react when an instruction pointer they may be tracking is invalidated. The method receives a pointer to the invalidated ValueBase object and outputs a debug message. Dependencies include the Swift and LLVM framework headers, and the method is typically part of a subclass registered to receive notifications. The key parameter is the pointer to the ValueBase instance being deleted. The function outputs a message indicating which instruction was deleted; there are no direct outputs to the program flow but side effects (such as logging) are expected.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerDesign.md#2025-04-23_snippet_5\n\nLANGUAGE: C++\nCODE:\n```\n  virtual void handleNotification(swift::ValueBase *Value) override {\n    llvm::errs()<<\"SILCombine Deleting: \" << Value<<\"\\n\";\n  }\n```\n\n----------------------------------------\n\nTITLE: C++ Template Example\nDESCRIPTION: Example C++ code demonstrating template class definition that will be imported into Swift\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_51\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<class T>\nstruct MagicWrapper {\n  T t;\n};\n\nstruct MagicNumber {};\n\ntypedef MagicWrapper<MagicNumber> WrappedMagicNumber;\n```\n\n----------------------------------------\n\nTITLE: Representing Optimized-Away Constant Variables with `debug_value undef` in SIL\nDESCRIPTION: This SIL instruction `debug_value undef` indicates that the constant variable (`let`) named \"x\" of type `$Int` has been optimized away, and its value is no longer available. This preserves the variable's existence in the debug information even without a concrete value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_7\n\nLANGUAGE: sil\nCODE:\n```\ndebug_value undef : $Int, let, name \"x\"\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Reserved Code Point Ranges\nDESCRIPTION: Specification of Unicode code point ranges that are either reserved for future use or designated as non-characters. Each line defines a range with start and end points in hexadecimal, followed by the category (Cn) and the count of code points in that range.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n2FA1E..2FFFF  ; Cn # [1506] <reserved-2FA1E>..<noncharacter-2FFFF>\n3134B..3134F  ; Cn #   [5] <reserved-3134B>..<reserved-3134F>\n323B0..E0000  ; Cn # [711761] <reserved-323B0>..<reserved-E0000>\nE0002..E001F  ; Cn #  [30] <reserved-E0002>..<reserved-E001F>\nE0080..E00FF  ; Cn # [128] <reserved-E0080>..<reserved-E00FF>\nE01F0..EFFFF  ; Cn # [65040] <reserved-E01F0>..<noncharacter-EFFFF>\nFFFFE..FFFFF  ; Cn #   [2] <noncharacter-FFFFE>..<noncharacter-FFFFF>\n10FFFE..10FFFF; Cn #   [2] <noncharacter-10FFFE>..<noncharacter-10FFFF>\n\n# Total code points: 819533\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Non-resilient Fixed-layout Swift Array in C++\nDESCRIPTION: C++ class representation for a generic non-resilient fixed-layout Swift value type like Array<Int>. The value is stored in an opaque inline buffer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nclass swift::Array<swift::Int> {\n  ...\n  alignas(8) char buffer[8]; // Swift value is stored here.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SymbolicationShims interface library\nDESCRIPTION: Creates an interface library for symbolication functionality with appropriate include directories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(SymbolicationShims INTERFACE)\ntarget_include_directories(SymbolicationShims INTERFACE\n  Sources/SymbolicationShims)\n```\n\n----------------------------------------\n\nTITLE: Checking Ninja Version (sh)\nDESCRIPTION: Runs `ninja --version` to verify that the Ninja build system is installed correctly and accessible in the system's PATH, and to display its version. Ninja is used for building Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nninja --version\n```\n\n----------------------------------------\n\nTITLE: Cross Repository Testing - Multiple PRs\nDESCRIPTION: Example of testing with multiple cross-repository pull requests.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPlease test with following PR:\nhttps://github.com/apple/swift-lldb/pull/48\nhttps://github.com/swiftlang/swift-package-manager/pull/632\n\n@swift-ci Please test macOS platform\n```\n\n----------------------------------------\n\nTITLE: Copying Swift Benchmark Executables with Permissions in CMake\nDESCRIPTION: Copies the configured benchmark executable files to the Swift binary directory with appropriate file permissions (read/write/execute for owner, read/execute for group and world). Includes GuardMalloc, RuntimeLeaksRunner, QuickCheck, DTrace, Driver, and compare_perf_tests.py script.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/scripts/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfile(COPY ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_GuardMalloc\n     DESTINATION \"${swift-bin-dir}\"\n     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ\n     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\n\nfile(COPY ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_RuntimeLeaksRunner\n     DESTINATION \"${swift-bin-dir}\"\n     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ\n     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\n\nfile(COPY ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_QuickCheck\n     DESTINATION \"${swift-bin-dir}\"\n     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ\n     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\n\nfile(COPY ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_DTrace\n     DESTINATION \"${swift-bin-dir}\"\n     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ\n     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\n\nfile(COPY ${CMAKE_CURRENT_SOURCE_DIR}/Benchmark_Driver\n     DESTINATION \"${swift-bin-dir}\"\n     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ\n     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\n\nfile(COPY ${CMAKE_CURRENT_SOURCE_DIR}/compare_perf_tests.py\n     DESTINATION \"${swift-bin-dir}\"\n     FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ\n     GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\n```\n\n----------------------------------------\n\nTITLE: Error Check for Unknown Object Format\nDESCRIPTION: Checks if the object format is set to a recognized value and generates an error if an unknown format is specified. This ensures only supported object formats are used.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(NOT \"${SwiftCore_OBJECT_FORMAT}\" STREQUAL \"x\")\n  message(SEND_ERROR \"Unknown object format '${SwiftCore_OBJECT_FORMAT}'\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-specific client libraries\nDESCRIPTION: Defines and configures Windows-specific client interface and implementation libraries when building on Windows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  add_library(SwiftInspectClientInterface INTERFACE)\n  target_include_directories(SwiftInspectClientInterface INTERFACE\n    Sources/SwiftInspectClientInterface)\n\n  add_library(SwiftInspectClient SHARED\n    Sources/SwiftInspectClient/SwiftInspectClient.cpp)\n  target_link_libraries(SwiftInspectClient PRIVATE\n    SwiftInspectClientInterface)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Modulemap in CMake\nDESCRIPTION: Sets up a custom target for Android modulemap and adds it as a dependency to the sdk-overlay target. This ensures the Android-specific modulemap is properly handled during the build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(android_modulemap DEPENDS ${android_modulemap_target_list})\nset_property(TARGET android_modulemap PROPERTY FOLDER \"Miscellaneous\")\nadd_dependencies(sdk-overlay android_modulemap)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Build Commands for Directory Creation and File Copying\nDESCRIPTION: Sets up CMake custom commands to create the output directory and copy API notes files from source to destination.\nSOURCE: https://github.com/swiftlang/swift/blob/main/apinotes/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n    OUTPUT \"${output_dir}\"\n    COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${output_dir}\")\nadd_custom_command(\n    OUTPUT ${outputs}\n    DEPENDS ${inputs} \"${output_dir}\"\n    COMMAND\n      \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\" ${inputs} \"${output_dir}/\")\n```\n\n----------------------------------------\n\nTITLE: CIF Information Byte Structure\nDESCRIPTION: Describes the structure of the initial information byte in the CIF format, including version and machine word size encoding.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompactImageMapFormat.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n   7   6   5   4   3   2   1   0\n ┌───────────────────────┬───────┐\n │ version               │ size  │\n └───────────────────────┴───────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring sourcekitdService Library in CMake\nDESCRIPTION: Defines the sourcekitdService library, sets its source files, compile definitions, and links required dependencies. This configuration is crucial for building the SourceKit service component of the Swift project.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/lib/Service/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sourcekit_library(sourcekitdService\n  Requests.cpp\n)\ntarget_compile_definitions(sourcekitdService PRIVATE\n  sourcekitd_EXPORTS)\ntarget_link_libraries(sourcekitdService PRIVATE\n  sourcekitdAPI\n  swiftBasic\n  SourceKitSupport\n  SourceKitSwiftLang\n  swiftCompilerModules)\n```\n\n----------------------------------------\n\nTITLE: Applying Profile Guided Optimization (PGO) in CMake\nDESCRIPTION: Checks if the `SWIFT_PROFDATA_FILE` variable is set and points to an existing file. If so, it verifies that the C compiler is Clang (`CMAKE_C_COMPILER_ID`). If both conditions are met, it adds the `-fprofile-instr-use` compiler flag with the path to the profile data file, enabling Clang's Profile Guided Optimization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_30\n\nLANGUAGE: cmake\nCODE:\n```\n# Allow building Swift with Clang's Profile Guided Optimization\nif(SWIFT_PROFDATA_FILE AND EXISTS ${SWIFT_PROFDATA_FILE})\n  if(NOT CMAKE_C_COMPILER_ID MATCHES Clang)\n    message(FATAL_ERROR \"SWIFT_PROFDATA_FILE can only be specified when compiling with clang\")\n  endif()\n  add_definitions(\"-fprofile-instr-use=${SWIFT_PROFDATA_FILE}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Additional Global Mangling Rules for Thunks\nDESCRIPTION: Defines mangling patterns for various thunks, including vtable overrides, protocol witnesses, and property behavior thunks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nglobal ::= 'TV' global                 // vtable override thunk\nglobal ::= 'TW' protocol-conformance entity\n                                       // protocol witness thunk\nglobal ::= 'TB' identifier context identifier\n                                       // property behavior initializer thunk\nglobal ::= 'Tb' identifier context identifier\n                                       // property behavior setter thunk\n```\n\n----------------------------------------\n\nTITLE: Creating SwiftAndroid Interface Library with Compiler Options\nDESCRIPTION: Defines an interface library for Swift on Android with specific compiler options. It adds a sysroot flag and VFS overlay option to Swift compiler invocations to facilitate integration with Android NDK headers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/clang/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(SwiftAndroid INTERFACE)\ntarget_compile_options(SwiftAndroid INTERFACE\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xcc --sysroot=\\\"${CMAKE_ANDROID_NDK_TOOLCHAIN_UNIFIED}/sysroot\\\">\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-vfsoverlay ${CMAKE_CURRENT_BINARY_DIR}/android-ndk-overlay.yaml>\")\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Core Library Target\nDESCRIPTION: Adds the main Swift Core library target with all configured options, dependencies, and installation settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftCore\n                  ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES}\n                  ${swiftCore_common_options}\n                  ${compile_flags_for_final_build}\n                  FILE_DEPENDS\n                    ${swiftCore_common_dependencies}\n                  DEPENDS ${tooling_stdlib_deps}\n                  INSTALL_IN_COMPONENT\n                    stdlib\n                  MACCATALYST_BUILD_FLAVOR\n                    zippered\n                 )\n```\n\n----------------------------------------\n\nTITLE: Dictionary Access Example in Swift\nDESCRIPTION: Example showing redundant dictionary access pattern that could be optimized.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HighLevelSILOptimizations.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nDict[\"a\"] = 1\nDict[\"a\"] = 2\n```\n\n----------------------------------------\n\nTITLE: C++ Protocol Extension Interface\nDESCRIPTION: Generated C++ interface for Swift protocol extensions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_55\n\nLANGUAGE: c++\nCODE:\n```\n// C++ interface for 'Geometry'\n\nclass Rect {\npublic:\n  ...\n  \n  bool fits(double inArea) const { ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Swift SIL Optimizer in CMake\nDESCRIPTION: Specifies the source files to be compiled for the swiftSILOptimizer target. These files implement various ARC optimizations, loop optimizations, and reference counting state management in the Swift compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/ARC/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  ARCBBState.cpp\n  ARCLoopOpts.cpp\n  ARCMatchingSet.cpp\n  ARCRegionState.cpp\n  ARCSequenceOpts.cpp\n  ARCSequenceOptUtils.cpp\n  GlobalARCSequenceDataflow.cpp\n  GlobalLoopARCSequenceDataflow.cpp\n  RCStateTransition.cpp\n  RCStateTransitionVisitors.cpp\n  RefCountState.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Runtime Libraries with CMake\nDESCRIPTION: This CMake snippet configures the build process for Swift runtime libraries. It unconditionally adds the InProc subdirectory and conditionally adds the XPC subdirectory only if the XPC header file is available on the system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(InProc)\nif (HAVE_XPC_H)\n  add_subdirectory(XPC)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Test Exclusions for Android AArch64\nDESCRIPTION: This code snippet defines a list of Swift tests that are expected to fail when run on the Android AArch64 platform. Each line specifies a test file path that is marked as 'xfail' (expected to fail) for the Swift(android-aarch64) configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/windows-swift-android-lit-test-overrides.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nxfail Swift(android-aarch64) :: ClangImporter/availability_custom_domains.swift\nxfail Swift(android-aarch64) :: ClangImporter/clang_builtin_pcm.swift\nxfail Swift(android-aarch64) :: Concurrency/fail_implicit_concurrency_load.swift\nxfail Swift(android-aarch64) :: DebugInfo/file_compilation_dir.swift\nxfail Swift(android-aarch64) :: DebugInfo/modulecache.swift\nxfail Swift(android-aarch64) :: Driver/autolink_extract.swift\nxfail Swift(android-aarch64) :: Driver/batch_mode_parseable_output_cancellation.swift\nxfail Swift(android-aarch64) :: Driver/driver_mode.swift\nxfail Swift(android-aarch64) :: Driver/embed-bitcode.swift\nxfail Swift(android-aarch64) :: Driver/environment.swift\nxfail Swift(android-aarch64) :: Driver/filelists.swift\nxfail Swift(android-aarch64) :: Driver/frontend.swift\nxfail Swift(android-aarch64) :: Driver/linker-autolink-extract.swift\nxfail Swift(android-aarch64) :: Driver/macabi-environment.swift\nxfail Swift(android-aarch64) :: Driver/pipe_round_robin.swift.gyb\nxfail Swift(android-aarch64) :: Driver/swift-version-7-no-asserts.swift\nxfail Swift(android-aarch64) :: Driver/swift-version-default.swift\nxfail Swift(android-aarch64) :: Driver/unknown-inputs.swift\nxfail Swift(android-aarch64) :: FixCode/fixits-apply-all.swift\nxfail Swift(android-aarch64) :: FixCode/fixits-if-else.swift\nxfail Swift(android-aarch64) :: FixCode/verify-fixits.swift\nxfail Swift(android-aarch64) :: Frontend/ast-dump-json-zlib.swift\nxfail Swift(android-aarch64) :: Frontend/experimental-features-no-asserts.swift\nxfail Swift(android-aarch64) :: Frontend/features/experimental-features-no-asserts.swift\nxfail Swift(android-aarch64) :: Frontend/module-alias-explicit-build-alias-in-json.swift\nxfail Swift(android-aarch64) :: Frontend/module-alias-explicit-build-escaped-identifier.swift\nxfail Swift(android-aarch64) :: Frontend/module-alias-explicit-build.swift\nxfail Swift(android-aarch64) :: IDE/complete_issue-56012.swift\nxfail Swift(android-aarch64) :: IDE/complete_issue-56811.swift\nxfail Swift(android-aarch64) :: IDE/complete_issue-57061.swift\nxfail Swift(android-aarch64) :: IDE/complete_issue-57263.swift\nxfail Swift(android-aarch64) :: IDE/complete_multiple_files.swift\nxfail Swift(android-aarch64) :: IDE/complete_rdar67155695.swift\nxfail Swift(android-aarch64) :: IDE/complete_skipbody.swift\nxfail Swift(android-aarch64) :: IDE/complete_with_visible_members.swift\nxfail Swift(android-aarch64) :: IDE/print_opaque_result_type.swift\nxfail Swift(android-aarch64) :: IDE/rdar141440011.swift\nxfail Swift(android-aarch64) :: Index/Store/output-failure.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/class/access/private-fileid-diagnostics.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/class/closure-thunk-irgen.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/class/constructors-copy-irgen-android.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/class/constructors-irgen-android.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/class/destructors-correct-abi-irgen.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/class/function-call-irgen.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/foreign-reference/inheritance-diagnostics.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/stdlib/android-and-std-module.swift\nxfail Swift(android-aarch64) :: Interop/Cxx/union/anonymous-union-partly-invalid.swift\nxfail Swift(android-aarch64) :: Interop/CxxToSwiftToCxx/bridge-cxx-struct-back-to-cxx.swift\nxfail Swift(android-aarch64) :: Interop/CxxToSwiftToCxx/link-cxx-type-metadata-accessor.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToC/functions/swift-primitive-functions-c-bridging.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToC/structs/large-structs-pass-return-indirect-in-c.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToC/structs/small-structs-64-bit-pass-return-direct-in-c.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToC/structs/small-structs-pass-return-direct-in-c.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/nested-classes-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-actor-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-class-availability-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-class-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-class-inheritance-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-class-ordering.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-class-static-variables.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-class-virtual-method-dispatch.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-resilient-class-virtual-method-dispatch.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/class/swift-subclass-of-resilient-class-virtual-method-dispatch.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/core/swift-impl-defs-in-cxx-64-bit.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/core/swift-impl-defs-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/core/validate-swift-impl-defs-in-cxx.cpp\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/cross-module-refs/do-not-expose-imported-api-by-default.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/cross-module-refs/imported-enum-refs-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/cross-module-refs/imported-struct-refs-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/cross-module-refs/not-referenced-cross-module-import.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/enums/enum-associated-value-class-type-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/enums/enum-member-param-no-shadow-case.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/enums/large-enums-pass-return-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/enums/resilient-enum-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/enums/small-enums-generated-stub-64bit.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/enums/small-enums-pass-return-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/enums/swift-enum-implementation.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/expose-attr/expose-rename-to-unavailable-decl.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/expose-attr/expose-swift-decls-to-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/extension/struct-extension-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/cdecl.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/function-availability.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-function-argument-keyword-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-function-overloads.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-function-unsupported-cxx-type.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-functions.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-no-expose-unsupported-alwaysEmitInClient-func.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-no-expose-unsupported-async-func.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-operators.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-primitive-functions-cxx-bridging.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-primitive-inout-functions-cxx-bridging.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-simd-vector-functions-cxx-bridging.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/functions/swift-transparent-functions-cxx-bridging.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-enum-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-function-cxx-type-invalid.cpp\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-function-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-struct-as-generic-func-arg-in-cpp.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-struct-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-struct-known-layout-direct-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-struct-known-layout-indirect-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-type-cxx-type-invalid.cpp\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/generics/generic-type-traits-fwd.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/initializers/init-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/initializers/swift-init-availability-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/macros/macro-name-collision.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/methods/method-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/methods/mutating-method-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/methods/swift-method-availability-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/module/module-to-namespace.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/ownership/consuming-parameter-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/properties/bool-is-has-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/properties/getter-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/properties/setter-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/properties/swift-property-availability-in-cxx.swift\nxfail Swift(android-aarch64) :: Interop/SwiftToCxx/stdlib/combination-of-stdlib-generics-in-cxx.swift\n```\n\n----------------------------------------\n\nTITLE: Defining Diacritic Unicode Characters\nDESCRIPTION: This snippet defines Unicode code point ranges for Diacritic characters, including Mende Kikakui and Adlam script modifiers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\n1E8D0..1E8D6  ; Diacritic # Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\n1E944..1E946  ; Diacritic # Mn   [3] ADLAM ALIF LENGTHENER..ADLAM GEMINATION MARK\n1E948..1E94A  ; Diacritic # Mn   [3] ADLAM CONSONANT MODIFIER..ADLAM NUKTA\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in Swift Project CMake Configuration\nDESCRIPTION: This CMake snippet adds subdirectories for Clang, Android, and Math components to the Swift project build. It ensures that these components are included in the build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(clang)\nadd_subdirectory(Android)\nadd_subdirectory(Math)\n```\n\n----------------------------------------\n\nTITLE: Conditionally Configuring Swift Compiler Modules Build Based on Bootstrapping Mode in CMake\nDESCRIPTION: This block checks the `BOOTSTRAPPING_MODE` variable. If bootstrapping is not enabled, it aliases `swiftCompilerModules` to the dummy `swiftCompilerStub`. Otherwise, it proceeds with the setup for building the actual compiler modules, including defining a sub-project and adding the 'Sources' directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (NOT BOOTSTRAPPING_MODE)\n\n  add_library(swiftCompilerModules ALIAS swiftCompilerStub)\n\nelse()\n  # Note: \"Swift\" is not added intentionally here, because it would break\n  # the bootstrapping build in case no swift toolchain is installed on the host.\n  project(SwiftInTheCompiler LANGUAGES C CXX)\n\n  add_subdirectory(Sources)\n\n\n  # ... conditional logic based on BOOTSTRAPPING_MODE continues ...\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SourceKit Build in CMake\nDESCRIPTION: Sets up the SourceKit build configuration in CMake by defining source directories, setting include paths, and configuring which components to build based on available dependencies and build options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SOURCEKITD_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/sourcekitd)\n\ninclude_directories(\n  ${SOURCEKITD_SOURCE_DIR}/include\n)\n\nadd_swift_lib_subdirectory(sourcekitd)\nif(LibEdit_FOUND AND LibEdit_HAS_UNICODE)\n  add_swift_tool_subdirectory(sourcekitd-repl)\nendif()\nif(SWIFT_INCLUDE_TESTS OR SWIFT_INCLUDE_TEST_BINARIES)\n  add_swift_tool_subdirectory(sourcekitd-test)\n  add_swift_tool_subdirectory(complete-test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining FooEnum3 RawRepresentable Struct in Swift\nDESCRIPTION: Declares a struct implementing RawRepresentable and Equatable protocols with UInt32 as its raw value type, following the same pattern as previous enums.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nstruct FooEnum3 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling LLDB Expression Log for Debugging Swift Expression Evaluation\nDESCRIPTION: This command enables the LLDB 'expression' log, which reports on the process of evaluating Swift expressions. The log output is written to a specified file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_52\n\nLANGUAGE: shell\nCODE:\n```\n(lldb) log enable -f /tmp/lldb-expr-log.txt lldb expression\n```\n\n----------------------------------------\n\nTITLE: NSString Hash Value Implementation for x86-64\nDESCRIPTION: Assembly code verification for _swift_stdlib_NSStringHashValue and _swift_stdlib_NSStringHashValuePointer on x86-64 architecture. Checks for proper message sending and autorelease return value handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/runtime_autorelease_optimization.txt#2025-04-23_snippet_0\n\nLANGUAGE: assembly\nCODE:\n```\n// CHECK-x86_64-LABEL: _swift_stdlib_NSStringHashValue:\n// CHECK-x86_64-NOT: ret\n// CHECK-x86_64: movq    {{.*}}(%rip), %rsi ## Objc selector ref: decomposedStringWithCanonicalMapping\n// CHECK-x86_64: movq    {{.*}}(%rip), [[MSG:%.*]] ## Objc message: -[%rdi decomposedStringWithCanonicalMapping]\n// CHECK-x86_64: callq   *[[MSG]]\n// CHECK-x86_64: movq    %rax, %rdi\n// CHECK-x86_64: callq   {{.*}} ## symbol stub for: _objc_retainAutoreleasedReturnValue\n// CHECK-x86_64: ret\n```\n\n----------------------------------------\n\nTITLE: Demangling Response Format\nDESCRIPTION: JSON response format for demangling requests, containing results array with demangled names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.results>: (array) [demangle-result+] // The results for each\n                                              // demangling, in the order in\n                                              // which they were requested.\n}\n```\n\nLANGUAGE: json\nCODE:\n```\ndemangle-result ::=\n{\n    <key.name>: (string) // The demangled name.\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Document Elements with CSS\nDESCRIPTION: Defines CSS rules within a `<style>` tag to format specific elements in the HTML representation of the document, such as `.repl`, `.emph`, `.look`, and `.aside`. It controls colors, fonts, and interactive hover effects (like speech bubbles) for embedded commentary.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n\n.repl,\n.emph,\n.look {\n  color:rgb(47,175,187)\n}\n.emph {\n  font-weight:bold\n}\n\npre,\n.pre {\n  font-family: Monaco, monospace; font-size:90%\n}\n\npre.literal-block {\n  overflow: hidden;\n}\n\nspan.look,\nspan.look1 {\n  position: relative;\n  border-bottom: .2em dotted rgb(255,165,165);\n}\n\nspan.aside {\n  font-family: sans-serif; white-space: normal;\n}\n\nspan.look + span.aside,\nspan.look1 + span.aside {\n  display: none;\n}\n\nspan.look:hover,\nspan.look1:hover {\n  background-color:greenyellow;\n}\n\nspan.look:hover {\n  color:rgb(23,87,94);\n}\n\n/* Main speech bubble*/\nspan.look:hover + span.aside,\nspan.look1:hover + span.aside {\n  display: inline-block;\n  position: relative;\n  margin-top: -1000em;\n  margin-bottom: -1000em;\n  margin-right: -1000em;\n  padding: 0.3em 1em 0.3em 1em;\n  /*text-align: justify;*/\n  max-width: 70%;\n  /*width: 50%;*/\n  left: 2em;\n  background: gray;\n  -moz-border-radius:10px;\n  -webkit-border-radius:10px;\n  border-radius:10px;\n  color: #fff;\n  z-index: 1;\n}\n\n/* Little triangle on the left */\nspan.look:hover + span.aside:after,\nspan.look1:hover + span.aside:after {\n  content: \"\";\n  position: absolute;\n  bottom: 0.3em;\n  left: -1.5em;\n  border-style: solid;\n  border-width: 0.6em 2em 0.6em 0;\n  border-color: transparent gray;\n  display: inline;\n  width: 0;\n  z-index: 2;\n}\n\n/*a:link {color:blue}*/\n</style>\n```\n\n----------------------------------------\n\nTITLE: Swift Macro Expansion Demangling\nDESCRIPTION: Examples of mangled Swift macro expansions and their demangled representations, including freestanding macros and peer macros.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\n$s9MacroUser13testStringify1a1bySi_SitF9stringifyfMf1_ ---> freestanding macro expansion #3 of stringify in MacroUser.testStringify(a: Swift.Int, b: Swift.Int) -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n@__swiftmacro_18macro_expand_peers1SV1f20addCompletionHandlerfMp_ ---> peer macro @addCompletionHandler expansion #1 of f in macro_expand_peers.S\n```\n\n----------------------------------------\n\nTITLE: Setting LLVM Availability for Swift IDE Tool\nDESCRIPTION: Configures LLVM availability settings for the swiftIDETool target using a custom CMake function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/IDETool/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_swift_llvm_is_available(swiftIDETool)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for Swift Runtime\nDESCRIPTION: Sets up include directories for the swiftRuntime target, ensuring it can access necessary headers from the build directory and current source directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(swiftRuntime PRIVATE\n  \"${PROJECT_BINARY_DIR}/include\"\n  \"${CMAKE_CURRENT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Myanmar Script\nDESCRIPTION: This code block defines the Unicode code point ranges for the Myanmar script. It lists character ranges with their Unicode categories and character names, covering letters, vowel signs, consonant signs, digits, and tone marks. The block contains a total of 243 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_18\n\nLANGUAGE: Unicode\nCODE:\n```\n1000..102A    ; Myanmar # Lo  [43] MYANMAR LETTER KA..MYANMAR LETTER AU\n102B..102C    ; Myanmar # Mc   [2] MYANMAR VOWEL SIGN TALL AA..MYANMAR VOWEL SIGN AA\n102D..1030    ; Myanmar # Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU\n1031          ; Myanmar # Mc       MYANMAR VOWEL SIGN E\n1032..1037    ; Myanmar # Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW\n1038          ; Myanmar # Mc       MYANMAR SIGN VISARGA\n1039..103A    ; Myanmar # Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT\n103B..103C    ; Myanmar # Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA\n103D..103E    ; Myanmar # Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA\n103F          ; Myanmar # Lo       MYANMAR LETTER GREAT SA\n1040..1049    ; Myanmar # Nd  [10] MYANMAR DIGIT ZERO..MYANMAR DIGIT NINE\n104A..104F    ; Myanmar # Po   [6] MYANMAR SIGN LITTLE SECTION..MYANMAR SYMBOL GENITIVE\n1050..1055    ; Myanmar # Lo   [6] MYANMAR LETTER SHA..MYANMAR LETTER VOCALIC LL\n1056..1057    ; Myanmar # Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR\n1058..1059    ; Myanmar # Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL\n105A..105D    ; Myanmar # Lo   [4] MYANMAR LETTER MON NGA..MYANMAR LETTER MON BBE\n105E..1060    ; Myanmar # Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA\n1061          ; Myanmar # Lo       MYANMAR LETTER SGAW KAREN SHA\n1062..1064    ; Myanmar # Mc   [3] MYANMAR VOWEL SIGN SGAW KAREN EU..MYANMAR TONE MARK SGAW KAREN KE PHO\n1065..1066    ; Myanmar # Lo   [2] MYANMAR LETTER WESTERN PWO KAREN THA..MYANMAR LETTER WESTERN PWO KAREN PWA\n1067..106D    ; Myanmar # Mc   [7] MYANMAR VOWEL SIGN WESTERN PWO KAREN EU..MYANMAR SIGN WESTERN PWO KAREN TONE-5\n106E..1070    ; Myanmar # Lo   [3] MYANMAR LETTER EASTERN PWO KAREN NNA..MYANMAR LETTER EASTERN PWO KAREN GHWA\n1071..1074    ; Myanmar # Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE\n1075..1081    ; Myanmar # Lo  [13] MYANMAR LETTER SHAN KA..MYANMAR LETTER SHAN HA\n1082          ; Myanmar # Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA\n1083..1084    ; Myanmar # Mc   [2] MYANMAR VOWEL SIGN SHAN AA..MYANMAR VOWEL SIGN SHAN E\n1085..1086    ; Myanmar # Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y\n1087..108C    ; Myanmar # Mc   [6] MYANMAR SIGN SHAN TONE-2..MYANMAR SIGN SHAN COUNCIL TONE-3\n108D          ; Myanmar # Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE\n108E          ; Myanmar # Lo       MYANMAR LETTER RUMAI PALAUNG FA\n108F          ; Myanmar # Mc       MYANMAR SIGN RUMAI PALAUNG TONE-5\n1090..1099    ; Myanmar # Nd  [10] MYANMAR SHAN DIGIT ZERO..MYANMAR SHAN DIGIT NINE\n109A..109C    ; Myanmar # Mc   [3] MYANMAR SIGN KHAMTI TONE-1..MYANMAR VOWEL SIGN AITON A\n109D          ; Myanmar # Mn       MYANMAR VOWEL SIGN AITON AI\n109E..109F    ; Myanmar # So   [2] MYANMAR SYMBOL SHAN ONE..MYANMAR SYMBOL SHAN EXCLAMATION\nA9E0..A9E4    ; Myanmar # Lo   [5] MYANMAR LETTER SHAN GHA..MYANMAR LETTER SHAN BHA\nA9E5          ; Myanmar # Mn       MYANMAR SIGN SHAN SAW\nA9E6          ; Myanmar # Lm       MYANMAR MODIFIER LETTER SHAN REDUPLICATION\nA9E7..A9EF    ; Myanmar # Lo   [9] MYANMAR LETTER TAI LAING NYA..MYANMAR LETTER TAI LAING NNA\nA9F0..A9F9    ; Myanmar # Nd  [10] MYANMAR TAI LAING DIGIT ZERO..MYANMAR TAI LAING DIGIT NINE\nA9FA..A9FE    ; Myanmar # Lo   [5] MYANMAR LETTER TAI LAING LLA..MYANMAR LETTER TAI LAING BHA\nAA60..AA6F    ; Myanmar # Lo  [16] MYANMAR LETTER KHAMTI GA..MYANMAR LETTER KHAMTI FA\nAA70          ; Myanmar # Lm       MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION\nAA71..AA76    ; Myanmar # Lo   [6] MYANMAR LETTER KHAMTI XA..MYANMAR LOGOGRAM KHAMTI HM\nAA77..AA79    ; Myanmar # So   [3] MYANMAR SYMBOL AITON EXCLAMATION..MYANMAR SYMBOL AITON TWO\nAA7A          ; Myanmar # Lo       MYANMAR LETTER AITON RA\nAA7B          ; Myanmar # Mc       MYANMAR SIGN PAO KAREN TONE\nAA7C          ; Myanmar # Mn       MYANMAR SIGN TAI LAING TONE-2\nAA7D          ; Myanmar # Mc       MYANMAR SIGN TAI LAING TONE-5\nAA7E..AA7F    ; Myanmar # Lo   [2] MYANMAR LETTER SHWE PALAUNG CHA..MYANMAR LETTER SHWE PALAUNG SHA\n116D0..116E3  ; Myanmar # Nd  [20] MYANMAR PAO DIGIT ZERO..MYANMAR EASTERN PWO KAREN DIGIT NINE\n\n# Total code points: 243\n```\n\n----------------------------------------\n\nTITLE: Creating swiftDependencyScan Static Library in CMake\nDESCRIPTION: Defines a static library named swiftDependencyScan using the add_swift_host_library command. This library includes multiple source files related to dependency scanning functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/DependencyScan/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftDependencyScan STATIC\n  DependencyScanningTool.cpp\n  ModuleDependencyCacheSerialization.cpp\n  ModuleDependencyScanner.cpp\n  ScanDependencies.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Frontend Bootstrapping in CMake\nDESCRIPTION: Sets up the Swift frontend tool for bootstrapping levels 0 and 1. It creates the necessary targets, links libraries, and creates symlinks for each bootstrapping level.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/driver/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(BOOTSTRAPPING_MODE MATCHES \"BOOTSTRAPPING.*\")\n\n  # Bootstrapping - level 0\n  add_swift_host_tool(swift-frontend-bootstrapping0\n    driver.cpp\n    SWIFT_COMPONENT no_component\n    HAS_SWIFT_MODULES\n    BOOTSTRAPPING 0\n    THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY\n  )\n  target_link_libraries(swift-frontend-bootstrapping0\n                        PRIVATE\n                          swiftDriverTool\n                          swiftCompilerStub)\n\n  add_swift_parser_link_libraries(swift-frontend-bootstrapping0)\n\n  swift_create_post_build_symlink(swift-frontend-bootstrapping0\n    SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n    DESTINATION \"swiftc${CMAKE_EXECUTABLE_SUFFIX}\"\n    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/bootstrapping0/${CMAKE_CFG_INTDIR}/bin\")\n\n  # Bootstrapping - level 1\n\n  add_swift_host_tool(swift-frontend-bootstrapping1\n    driver.cpp\n    SWIFT_COMPONENT no_component\n    HAS_SWIFT_MODULES\n    BOOTSTRAPPING 1\n    THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY\n  )\n  target_link_libraries(swift-frontend-bootstrapping1\n                        PRIVATE\n                          swiftDriverTool\n                          swiftCompilerModules-bootstrapping1)\n\n  add_swift_parser_link_libraries(swift-frontend-bootstrapping1)\n\n  swift_create_post_build_symlink(swift-frontend-bootstrapping1\n    SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n    DESTINATION \"swiftc${CMAKE_EXECUTABLE_SUFFIX}\"\n    WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/bootstrapping1/${CMAKE_CFG_INTDIR}/bin\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Analysis Invalidation Logic in C++\nDESCRIPTION: This C++ code snippet demonstrates how an analysis class implements the `invalidate` method to respond to broadcast invalidation messages from the pass manager. The method receives the affected `SILFunction` (F) and the `InvalidationKind` (K). In this example, if the invalidation kind indicates that calls (`InvalidationKind::Calls`) were modified within function F, the analysis clears its cached data (`Storage[F]`) for that specific function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerDesign.md#2025-04-23_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n    virtual void invalidate(SILFunction *F,\n                            InvalidationKind K) override {\n      if (K & InvalidationKind::Calls) {\n        Storage[F].clear();\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Driver Compilation Time Output\nDESCRIPTION: Shows the format of timing output when using the -driver-time-compilation option, displaying execution times broken down by compilation and linking phases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompilerPerformance.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n===-------------------------------------------------------------------------===\n                                Driver Compilation Time\n===-------------------------------------------------------------------------===\n  Total Execution Time: 0.0001 seconds (0.0490 wall clock)\n\n   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---\n   0.0000 ( 82.0%)   0.0001 ( 59.5%)   0.0001 ( 69.0%)   0.0284 ( 58.0%)  {compile: t-177627.o <= t.swift}\n   0.0000 ( 18.0%)   0.0000 ( 40.5%)   0.0000 ( 31.0%)   0.0206 ( 42.0%)  {link: t <= t-177627.o}\n   0.0001 (100.0%)   0.0001 (100.0%)   0.0001 (100.0%)   0.0490 (100.0%)  Total\n```\n\n----------------------------------------\n\nTITLE: Installing LLVM FileCheck in Swift Project CMake Configuration\nDESCRIPTION: Conditionally installs LLVM's FileCheck utility in the bin directory as part of the llvm-toolchain-dev-tools component. This tool is used for testing output matching in LLVM and Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# We install LLVM's FileCheck, if requested.\nfile(TO_CMAKE_PATH \"${LLVM_BUILD_BINARY_DIR}/bin/FileCheck${CMAKE_EXECUTABLE_SUFFIX}\" _SWIFT_UTILS_FILECHECK)\nswift_install_in_component(PROGRAMS \"${_SWIFT_UTILS_FILECHECK}\"\n                           DESTINATION bin\n                           COMPONENT llvm-toolchain-dev-tools)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Targets to ALL Build in CMake\nDESCRIPTION: Implements a workaround to ensure that library targets generated by add_swift_target_library are included in the ALL build target. The code iterates through Swift SDKs and sets the EXCLUDE_FROM_ALL property to FALSE for each valid target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CompatibilityConcurrency/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# FIXME: We need a more flexible mechanism to add lipo targets generated by\n# add_swift_target_library to the ALL target. Until then this hack is necessary\n# to ensure these libraries build.\nforeach(sdk ${SWIFT_SDKS})\n  set(target_name \"${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n  if(NOT TARGET \"${target_name}\")\n    continue()\n  endif()\n\n  set_target_properties(\"${target_name}\"\n    PROPERTIES\n      EXCLUDE_FROM_ALL FALSE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring UUID Dependencies in CMake for Swift\nDESCRIPTION: Sets up UUID include and library dependencies based on the target platform. For Darwin, no additional setup is needed. For Windows, rpcrt4.lib is used. For other platforms, the UUID package is required.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Basic/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  set(UUID_INCLUDE \"\")\n  set(UUID_LIBRARIES \"\")\nelseif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  set(UUID_INCLUDE \"\")\n  set(UUID_LIBRARIES \"rpcrt4.lib\")\nelse()\n  find_package(UUID REQUIRED)\n  set(UUID_INCLUDE \"${UUID_INCLUDE_DIRS}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Test Modules Build with CMake\nDESCRIPTION: Controls the conditional compilation of various Swift test modules based on SDK overlay settings, reflection support, and platform-specific requirements. Manages dependencies between test components and ensures proper build order, particularly for Windows builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_SDK_OVERLAY\n   OR (SWIFT_BUILD_TEST_SUPPORT_MODULES\n       AND NOT SWIFT_BUILD_DYNAMIC_SDK_OVERLAY_default\n       AND (SWIFT_ENABLE_REFLECTION\n            OR NOT SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)))\n  if(SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING)\n    add_subdirectory(DifferentiationUnittest)\n  endif()\n  add_subdirectory(SwiftPrivate)\n  add_subdirectory(RuntimeUnittest)\n  add_subdirectory(StdlibUnicodeUnittest)\n  add_subdirectory(StdlibCollectionUnittest)\n  add_subdirectory(SwiftPrivateLibcExtras)\n  add_subdirectory(SwiftPrivateThreadExtras)\n\n  add_subdirectory(StdlibUnittest)\n\n  add_subdirectory(OSLog)\n\n  if(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n    add_subdirectory(StdlibUnittestFoundationExtras)\n  endif()\n  if (SWIFT_INCLUDE_TESTS AND (NOT CMAKE_SYSTEM_NAME STREQUAL \"Windows\"))\n    add_subdirectory(SwiftReflectionTest)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring RPATH for Swift Syntax Libraries\nDESCRIPTION: This snippet configures the RPATH for finding shared swift-syntax libraries on different platforms when SWIFT_BUILD_SWIFT_SYNTAX is enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Tooling/libSwiftScan/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_BUILD_SWIFT_SYNTAX)\n  if(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)\n    set_property(\n      TARGET libSwiftScan\n      APPEND PROPERTY INSTALL_RPATH \"@loader_path/swift/host/compiler\")\n    set_property(\n      TARGET libSwiftScan\n      APPEND PROPERTY INSTALL_RPATH \"@loader_path\")\n  elseif(SWIFT_HOST_VARIANT_SDK MATCHES \"LINUX|ANDROID|OPENBSD|FREEBSD\")\n    set_property(\n      TARGET libSwiftScan\n      APPEND PROPERTY INSTALL_RPATH \"$ORIGIN/swift/host/compiler\")\n    set_property(\n      TARGET libSwiftScan\n      APPEND PROPERTY INSTALL_RPATH \"$ORIGIN\")\n    set_property(\n      TARGET libSwiftScan\n      APPEND PROPERTY INSTALL_RPATH \"$ORIGIN/compiler\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Querying Start/End Instruction Counts per Function in Swift Counters DB\nDESCRIPTION: This SQL query retrieves the instruction count for each function at the very beginning and very end of the optimization pipeline. It uses two subqueries on `function_history` instruction counters: one finds the row with the minimum `Id` (start) per function symbol, and the other finds the row with the maximum `Id` (end). These are joined on the function symbol (`Symbol`) to show initial (`MinOld.Old`) and final (`MaxOld.Old`) counts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nselect MinOld.Id, MinOld.Old, MaxOld.Id, MaxOld.Old, MinOld.Symbol\nfrom \n(\n  select C.Id, C.Old, C.Symbol\n  from Counters C where C.counter = 'inst' and C.kind = 'function_history'\n  group by C.Symbol\n  having C.Id = max(Id)\n) as MaxOld,\n(select C.Id, C.Old, C.Symbol\n   from Counters C\n   where C.counter = 'inst' and C.kind = 'function_history'\n   group by C.Symbol\n   having C.Id = min(Id)\n) as MinOld\nwhere MinOld.Symbol == MaxOld.Symbol;\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Diagnostics Documentation\nDESCRIPTION: CMake command to install diagnostic documentation files into the Swift compiler component. Configures the installation path to share/doc/swift directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nswift_install_in_component(DIRECTORY diagnostics\n                           DESTINATION \"share/doc/swift\"\n                           COMPONENT compiler)\n```\n\n----------------------------------------\n\nTITLE: Building Swift Embedded Standard Library for Multiple Architectures in CMake\nDESCRIPTION: This snippet iterates through a list of target triples to build the Swift embedded standard library for different architectures and modules. It sets up SDK-specific variables and adds a Swift target library for each configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})\n  string(REGEX REPLACE \"[ \\t]+\" \";\" list \"${entry}\")\n  list(GET list 0 arch)\n  list(GET list 1 mod)\n  list(GET list 2 triple)\n  \n  set(SWIFT_SDK_embedded_ARCH_${arch}_MODULE \"${mod}\")\n  set(SWIFT_SDK_embedded_LIB_SUBDIR \"embedded\")\n  set(SWIFT_SDK_embedded_ARCH_${arch}_TRIPLE \"${triple}\")\n  add_swift_target_library_single(\n    embedded-stdlib-${mod}\n    swiftCore\n    ONLY_SWIFTMODULE\n    IS_STDLIB IS_STDLIB_CORE IS_FRAGILE\n    ${SWIFTLIB_EMBEDDED_SOURCES}\n    GYB_SOURCES ${SWIFTLIB_EMBEDDED_GYB_SOURCES}\n    SWIFT_COMPILE_FLAGS\n      ${swift_stdlib_compile_flags} -Xcc -ffreestanding -enable-experimental-feature Embedded\n      -Xfrontend -enable-ossa-modules\n    MODULE_DIR \"${CMAKE_BINARY_DIR}/lib/swift/embedded\"\n    SDK \"embedded\"\n    ARCHITECTURE \"${arch}\"\n    FILE_DEPENDS ${swiftCore_common_dependencies}\n    DEPENDS ${tooling_stdlib_deps}\n    INSTALL_IN_COMPONENT stdlib\n    )\n  add_dependencies(embedded-stdlib embedded-stdlib-${mod})\nendforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Grapheme_Link Code Points (Deprecated)\nDESCRIPTION: List of deprecated Grapheme_Link property code points. These are generated from Canonical_Combining_Class=Virama. The property contains 69 total code points, and users should use Canonical_Combining_Class=Virama directly instead.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_44\n\nLANGUAGE: unicode\nCODE:\n```\n# Derived Property: Grapheme_Link (deprecated)\n#  Generated from: Canonical_Combining_Class=Virama\n#  Use Canonical_Combining_Class=Virama directly instead\n\n094D          ; Grapheme_Link\n09CD          ; Grapheme_Link\n0A4D          ; Grapheme_Link\n0ACD          ; Grapheme_Link\n0B4D          ; Grapheme_Link\n0BCD          ; Grapheme_Link\n0C4D          ; Grapheme_Link\n0CCD          ; Grapheme_Link\n0D3B..0D3C    ; Grapheme_Link\n0D4D          ; Grapheme_Link\n0DCA          ; Grapheme_Link\n0E3A          ; Grapheme_Link\n0EBA          ; Grapheme_Link\n0F84          ; Grapheme_Link\n1039..103A    ; Grapheme_Link\n1714          ; Grapheme_Link\n1715          ; Grapheme_Link\n1734          ; Grapheme_Link\n17D2          ; Grapheme_Link\n1A60          ; Grapheme_Link\n1B44          ; Grapheme_Link\n1BAA          ; Grapheme_Link\n1BAB          ; Grapheme_Link\n1BF2..1BF3    ; Grapheme_Link\n2D7F          ; Grapheme_Link\nA806          ; Grapheme_Link\nA82C          ; Grapheme_Link\nA8C4          ; Grapheme_Link\nA953          ; Grapheme_Link\nA9C0          ; Grapheme_Link\nAAF6          ; Grapheme_Link\nABED          ; Grapheme_Link\n10A3F         ; Grapheme_Link\n11046         ; Grapheme_Link\n11070         ; Grapheme_Link\n1107F         ; Grapheme_Link\n110B9         ; Grapheme_Link\n11133..11134  ; Grapheme_Link\n111C0         ; Grapheme_Link\n11235         ; Grapheme_Link\n112EA         ; Grapheme_Link\n1134D         ; Grapheme_Link\n113CE         ; Grapheme_Link\n113CF         ; Grapheme_Link\n113D0         ; Grapheme_Link\n11442         ; Grapheme_Link\n114C2         ; Grapheme_Link\n115BF         ; Grapheme_Link\n1163F         ; Grapheme_Link\n116B6         ; Grapheme_Link\n1172B         ; Grapheme_Link\n11839         ; Grapheme_Link\n1193D         ; Grapheme_Link\n1193E         ; Grapheme_Link\n119E0         ; Grapheme_Link\n11A34         ; Grapheme_Link\n11A47         ; Grapheme_Link\n11A99         ; Grapheme_Link\n11C3F         ; Grapheme_Link\n11D44..11D45  ; Grapheme_Link\n11D97         ; Grapheme_Link\n11F41         ; Grapheme_Link\n11F42         ; Grapheme_Link\n1612F         ; Grapheme_Link\n```\n\n----------------------------------------\n\nTITLE: Adding SourceKit Support Unit Test\nDESCRIPTION: Adds a Swift unit test target for SourceKit Support tests and specifies the test source file ImmutableTextBufferTest.cpp\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SourceKit/Support/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_unittest(SourceKitSupportTests\n  ImmutableTextBufferTest.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Designating High-Level Semantic Attributes in SIL Functions (BNF)\nDESCRIPTION: Exhibits the '[_semantics \"<name>\"]' attribute that records semantic meaning to guide high-level optimizations (such as redundancy elimination). Requires a string parameter to identify the semantics. Used by the optimizer as a signal for specialized handling of certain functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_14\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[_semantics \"' [A-Za-z._0-9]+ '\"]'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Visual Studio Environment Variables for Swift Cross-compilation\nDESCRIPTION: Sets the required Visual Studio environment variables for cross-compiling Swift to Windows. These variables define the Universal CRT version, SDK directory, and Visual C++ tools installation path.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsCrossCompile.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Visual Studio 2015 does not have VCToolsInstallDir, use VCINSTALLDIR's value\nexport UCRTVersion=10.0.10586.0\nexport UniversalCRTSdkDir=\".../Windows Kits/10\"\nexport VCToolsInstallDir=\".../Microsoft Visual Studio/2017/Community\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GYB Line Directive Flags for Windows/Unix\nDESCRIPTION: Sets platform-specific GYB line directive flags based on host system, handling different quoting requirements for Windows vs other platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Parse/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Windows\")\n  set(SWIFT_GYB_FLAGS --line-directive \"^\\\"#line %(line)d \\\\\\\"%(file)s\\\\\\\"^\\\"\")\nelse()\n  set(SWIFT_GYB_FLAGS --line-directive \"'#line\" \"%(line)d\" \"\\\"%(file)s\\\"'\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Pattern_Syntax Character Definitions\nDESCRIPTION: Defines Unicode code points and their classifications as Pattern_Syntax characters. Each line contains the hex code point or range, the Pattern_Syntax property marker, and character descriptions with their Unicode general categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_29\n\nLANGUAGE: unicode\nCODE:\n```\n0021..0023    ; Pattern_Syntax # Po   [3] EXCLAMATION MARK..NUMBER SIGN\n0024          ; Pattern_Syntax # Sc       DOLLAR SIGN\n0025..0027    ; Pattern_Syntax # Po   [3] PERCENT SIGN..APOSTROPHE\n0028          ; Pattern_Syntax # Ps       LEFT PARENTHESIS\n0029          ; Pattern_Syntax # Pe       RIGHT PARENTHESIS\n002A          ; Pattern_Syntax # Po       ASTERISK\n002B          ; Pattern_Syntax # Sm       PLUS SIGN\n002C          ; Pattern_Syntax # Po       COMMA\n002D          ; Pattern_Syntax # Pd       HYPHEN-MINUS\n002E..002F    ; Pattern_Syntax # Po   [2] FULL STOP..SOLIDUS\n```\n\n----------------------------------------\n\nTITLE: Installing libdispatch, Foundation, and XCTest for Android\nDESCRIPTION: Commands to install the built libdispatch, Foundation, and XCTest frameworks for Android. This finalizes the SDK installation process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AndroidBuild.md#2025-04-23_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\ncd S:\\b\\a\\libdispatch\nninja install\n\ncd S:\\b\\a\\foundation\nninja install\n\ncd S:\\b\\a\\xctest\nninja install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sphinx Documentation Generator in CMake\nDESCRIPTION: Configures Sphinx documentation generator, sets paper size for generated documentation, and defines arguments for the Sphinx build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(tools)\n\nfind_program(SPHINX_EXECUTABLE\n  NAMES sphinx-build\n  HINTS $ENV{SPHINX_DIR}\n  PATH_SUFFIXES bin\n  DOC \"Sphinx documentation generator\")\n\nSET(SWIFT_SPHINX_PAPER_SIZE \"letter\"\n  CACHE STRING \"Paper size for generated documentation\")\n\nSET(SPHINX_ARGS\n  -D latex_elements.papersize=${SWIFT_SPHINX_PAPER_SIZE}\n  -d ${CMAKE_BINARY_DIR}/doctrees)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters that Change When Casefolded\nDESCRIPTION: This data file defines Unicode code points that change when normalized to NFD form and casefolded. The file follows the standard Unicode data format with hexadecimal ranges followed by a property declaration. This is typically used in Unicode processing systems to identify characters whose case-folding behavior needs special handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_21\n\nLANGUAGE: unicode-data\nCODE:\n```\n#  Changes_When_Casefolded(X) is true when toCasefold(toNFD(X)) != toNFD(X)\n\n0041..005A    ; Changes_When_Casefolded\n00B5          ; Changes_When_Casefolded\n00C0..00D6    ; Changes_When_Casefolded\n00D8..00DF    ; Changes_When_Casefolded\n0100          ; Changes_When_Casefolded\n0102          ; Changes_When_Casefolded\n0104          ; Changes_When_Casefolded\n0106          ; Changes_When_Casefolded\n0108          ; Changes_When_Casefolded\n010A          ; Changes_When_Casefolded\n010C          ; Changes_When_Casefolded\n010E          ; Changes_When_Casefolded\n0110          ; Changes_When_Casefolded\n0112          ; Changes_When_Casefolded\n0114          ; Changes_When_Casefolded\n0116          ; Changes_When_Casefolded\n0118          ; Changes_When_Casefolded\n011A          ; Changes_When_Casefolded\n011C          ; Changes_When_Casefolded\n011E          ; Changes_When_Casefolded\n0120          ; Changes_When_Casefolded\n0122          ; Changes_When_Casefolded\n0124          ; Changes_When_Casefolded\n0126          ; Changes_When_Casefolded\n0128          ; Changes_When_Casefolded\n012A          ; Changes_When_Casefolded\n012C          ; Changes_When_Casefolded\n012E          ; Changes_When_Casefolded\n0130          ; Changes_When_Casefolded\n0132          ; Changes_When_Casefolded\n0134          ; Changes_When_Casefolded\n0136          ; Changes_When_Casefolded\n0139          ; Changes_When_Casefolded\n013B          ; Changes_When_Casefolded\n013D          ; Changes_When_Casefolded\n013F          ; Changes_When_Casefolded\n0141          ; Changes_When_Casefolded\n0143          ; Changes_When_Casefolded\n0145          ; Changes_When_Casefolded\n0147          ; Changes_When_Casefolded\n0149..014A    ; Changes_When_Casefolded\n014C          ; Changes_When_Casefolded\n014E          ; Changes_When_Casefolded\n0150          ; Changes_When_Casefolded\n0152          ; Changes_When_Casefolded\n0154          ; Changes_When_Casefolded\n0156          ; Changes_When_Casefolded\n0158          ; Changes_When_Casefolded\n015A          ; Changes_When_Casefolded\n015C          ; Changes_When_Casefolded\n015E          ; Changes_When_Casefolded\n0160          ; Changes_When_Casefolded\n0162          ; Changes_When_Casefolded\n0164          ; Changes_When_Casefolded\n0166          ; Changes_When_Casefolded\n0168          ; Changes_When_Casefolded\n016A          ; Changes_When_Casefolded\n016C          ; Changes_When_Casefolded\n016E          ; Changes_When_Casefolded\n0170          ; Changes_When_Casefolded\n0172          ; Changes_When_Casefolded\n0174          ; Changes_When_Casefolded\n0176          ; Changes_When_Casefolded\n0178..0179    ; Changes_When_Casefolded\n017B          ; Changes_When_Casefolded\n017D          ; Changes_When_Casefolded\n017F          ; Changes_When_Casefolded\n0181..0182    ; Changes_When_Casefolded\n0184          ; Changes_When_Casefolded\n0186..0187    ; Changes_When_Casefolded\n0189..018B    ; Changes_When_Casefolded\n018E..0191    ; Changes_When_Casefolded\n0193..0194    ; Changes_When_Casefolded\n0196..0198    ; Changes_When_Casefolded\n019C..019D    ; Changes_When_Casefolded\n019F..01A0    ; Changes_When_Casefolded\n01A2          ; Changes_When_Casefolded\n01A4          ; Changes_When_Casefolded\n01A6..01A7    ; Changes_When_Casefolded\n01A9          ; Changes_When_Casefolded\n01AC          ; Changes_When_Casefolded\n01AE..01AF    ; Changes_When_Casefolded\n01B1..01B3    ; Changes_When_Casefolded\n01B5          ; Changes_When_Casefolded\n01B7..01B8    ; Changes_When_Casefolded\n01BC          ; Changes_When_Casefolded\n01C4..01C5    ; Changes_When_Casefolded\n01C7..01C8    ; Changes_When_Casefolded\n01CA..01CB    ; Changes_When_Casefolded\n01CD          ; Changes_When_Casefolded\n01CF          ; Changes_When_Casefolded\n01D1          ; Changes_When_Casefolded\n01D3          ; Changes_When_Casefolded\n01D5          ; Changes_When_Casefolded\n01D7          ; Changes_When_Casefolded\n01D9          ; Changes_When_Casefolded\n01DB          ; Changes_When_Casefolded\n01DE          ; Changes_When_Casefolded\n01E0          ; Changes_When_Casefolded\n01E2          ; Changes_When_Casefolded\n01E4          ; Changes_When_Casefolded\n01E6          ; Changes_When_Casefolded\n01E8          ; Changes_When_Casefolded\n01EA          ; Changes_When_Casefolded\n01EC          ; Changes_When_Casefolded\n01EE          ; Changes_When_Casefolded\n01F1..01F2    ; Changes_When_Casefolded\n01F4          ; Changes_When_Casefolded\n01F6..01F8    ; Changes_When_Casefolded\n01FA          ; Changes_When_Casefolded\n01FC          ; Changes_When_Casefolded\n01FE          ; Changes_When_Casefolded\n0200          ; Changes_When_Casefolded\n0202          ; Changes_When_Casefolded\n0204          ; Changes_When_Casefolded\n0206          ; Changes_When_Casefolded\n0208          ; Changes_When_Casefolded\n020A          ; Changes_When_Casefolded\n020C          ; Changes_When_Casefolded\n020E          ; Changes_When_Casefolded\n0210          ; Changes_When_Casefolded\n0212          ; Changes_When_Casefolded\n0214          ; Changes_When_Casefolded\n0216          ; Changes_When_Casefolded\n0218          ; Changes_When_Casefolded\n021A          ; Changes_When_Casefolded\n021C          ; Changes_When_Casefolded\n021E          ; Changes_When_Casefolded\n0220          ; Changes_When_Casefolded\n0222          ; Changes_When_Casefolded\n0224          ; Changes_When_Casefolded\n0226          ; Changes_When_Casefolded\n0228          ; Changes_When_Casefolded\n022A          ; Changes_When_Casefolded\n022C          ; Changes_When_Casefolded\n022E          ; Changes_When_Casefolded\n0230          ; Changes_When_Casefolded\n0232          ; Changes_When_Casefolded\n023A..023B    ; Changes_When_Casefolded\n023D..023E    ; Changes_When_Casefolded\n0241          ; Changes_When_Casefolded\n0243..0246    ; Changes_When_Casefolded\n0248          ; Changes_When_Casefolded\n024A          ; Changes_When_Casefolded\n024C          ; Changes_When_Casefolded\n024E          ; Changes_When_Casefolded\n0345          ; Changes_When_Casefolded\n0370          ; Changes_When_Casefolded\n0372          ; Changes_When_Casefolded\n0376          ; Changes_When_Casefolded\n037F          ; Changes_When_Casefolded\n0386          ; Changes_When_Casefolded\n0388..038A    ; Changes_When_Casefolded\n038C          ; Changes_When_Casefolded\n038E..038F    ; Changes_When_Casefolded\n0391..03A1    ; Changes_When_Casefolded\n03A3..03AB    ; Changes_When_Casefolded\n03C2          ; Changes_When_Casefolded\n03CF..03D1    ; Changes_When_Casefolded\n03D5..03D6    ; Changes_When_Casefolded\n03D8          ; Changes_When_Casefolded\n03DA          ; Changes_When_Casefolded\n03DC          ; Changes_When_Casefolded\n03DE          ; Changes_When_Casefolded\n03E0          ; Changes_When_Casefolded\n03E2          ; Changes_When_Casefolded\n03E4          ; Changes_When_Casefolded\n03E6          ; Changes_When_Casefolded\n03E8          ; Changes_When_Casefolded\n03EA          ; Changes_When_Casefolded\n03EC          ; Changes_When_Casefolded\n03EE          ; Changes_When_Casefolded\n03F0..03F1    ; Changes_When_Casefolded\n03F4..03F5    ; Changes_When_Casefolded\n03F7          ; Changes_When_Casefolded\n03F9..03FA    ; Changes_When_Casefolded\n03FD..042F    ; Changes_When_Casefolded\n0460          ; Changes_When_Casefolded\n0462          ; Changes_When_Casefolded\n0464          ; Changes_When_Casefolded\n0466          ; Changes_When_Casefolded\n0468          ; Changes_When_Casefolded\n046A          ; Changes_When_Casefolded\n046C          ; Changes_When_Casefolded\n046E          ; Changes_When_Casefolded\n0470          ; Changes_When_Casefolded\n0472          ; Changes_When_Casefolded\n0474          ; Changes_When_Casefolded\n0476          ; Changes_When_Casefolded\n0478          ; Changes_When_Casefolded\n047A          ; Changes_When_Casefolded\n047C          ; Changes_When_Casefolded\n047E          ; Changes_When_Casefolded\n0480          ; Changes_When_Casefolded\n048A          ; Changes_When_Casefolded\n048C          ; Changes_When_Casefolded\n048E          ; Changes_When_Casefolded\n0490          ; Changes_When_Casefolded\n0492          ; Changes_When_Casefolded\n0494          ; Changes_When_Casefolded\n0496          ; Changes_When_Casefolded\n0498          ; Changes_When_Casefolded\n049A          ; Changes_When_Casefolded\n049C          ; Changes_When_Casefolded\n049E          ; Changes_When_Casefolded\n04A0          ; Changes_When_Casefolded\n04A2          ; Changes_When_Casefolded\n04A4          ; Changes_When_Casefolded\n04A6          ; Changes_When_Casefolded\n04A8          ; Changes_When_Casefolded\n04AA          ; Changes_When_Casefolded\n04AC          ; Changes_When_Casefolded\n04AE          ; Changes_When_Casefolded\n04B0          ; Changes_When_Casefolded\n04B2          ; Changes_When_Casefolded\n04B4          ; Changes_When_Casefolded\n04B6          ; Changes_When_Casefolded\n04B8          ; Changes_When_Casefolded\n04BA          ; Changes_When_Casefolded\n04BC          ; Changes_When_Casefolded\n04BE          ; Changes_When_Casefolded\n04C0..04C1    ; Changes_When_Casefolded\n04C3          ; Changes_When_Casefolded\n04C5          ; Changes_When_Casefolded\n04C7          ; Changes_When_Casefolded\n04C9          ; Changes_When_Casefolded\n04CB          ; Changes_When_Casefolded\n04CD          ; Changes_When_Casefolded\n04D0          ; Changes_When_Casefolded\n04D2          ; Changes_When_Casefolded\n04D4          ; Changes_When_Casefolded\n04D6          ; Changes_When_Casefolded\n04D8          ; Changes_When_Casefolded\n04DA          ; Changes_When_Casefolded\n04DC          ; Changes_When_Casefolded\n04DE          ; Changes_When_Casefolded\n04E0          ; Changes_When_Casefolded\n04E2          ; Changes_When_Casefolded\n04E4          ; Changes_When_Casefolded\n04E6          ; Changes_When_Casefolded\n04E8          ; Changes_When_Casefolded\n04EA          ; Changes_When_Casefolded\n04EC          ; Changes_When_Casefolded\n04EE          ; Changes_When_Casefolded\n04F0          ; Changes_When_Casefolded\n04F2          ; Changes_When_Casefolded\n04F4          ; Changes_When_Casefolded\n04F6          ; Changes_When_Casefolded\n```\n\n----------------------------------------\n\nTITLE: Configuring platform-specific dependencies for swift-inspect\nDESCRIPTION: Links swift-inspect with platform-specific dependencies based on the target platform (Windows, Android, or Linux).\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(WIN32)\n  target_link_libraries(swift-inspect PRIVATE\n    SwiftInspectClientInterface)\nendif()\nif(ANDROID)\n  target_link_libraries(swift-inspect PRIVATE\n    AndroidCLib)\nendif()\nif(ANDROID OR LINUX)\n  target_link_libraries(swift-inspect PRIVATE\n    SwiftInspectLinux)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining split_embedded_sources Function in CMake\nDESCRIPTION: This CMake function splits source files into embedded and normal categories based on annotations. It uses cmake_parse_arguments to process the input arguments and set output variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(split_embedded_sources)\n  cmake_parse_arguments(SPLIT1 \"\" \"OUT_LIST_EMBEDDED;OUT_LIST_NORMAL\" \"EMBEDDED;NORMAL\" ${ARGN})\n  string(REPLACE \"EMBEDDED\" \"NORMAL\" ARGN2 \"${ARGN}\")\n  cmake_parse_arguments(SPLIT2 \"\" \"OUT_LIST_EMBEDDED;OUT_LIST_NORMAL\" \"EMBEDDED;NORMAL\" ${ARGN2})\n  set(${SPLIT1_OUT_LIST_EMBEDDED} \"${SPLIT1_EMBEDDED}\" PARENT_SCOPE)\n  set(${SPLIT1_OUT_LIST_NORMAL} \"${SPLIT2_NORMAL}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Using Proposed Swift 'using'-like Import for Namespaces\nDESCRIPTION: Illustrates a potential Swift language enhancement, similar to C++'s 'using' directive. By importing a specific namespace enum ('import CppNamespaces.widgets'), members like 'Button' could potentially be accessed directly without qualification, simplifying usage of APIs with deeply nested namespaces.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\n// Usage example.\n\nimport CppButton\nimport CppTextbox\n// Implicitly injected: import CppNamespaces\nimport CppNamespaces.widgets\n\nfunc makeButton() {\n  var b1 = Button() // OK\n}\n```\n\n----------------------------------------\n\nTITLE: SIL Instruction: specify_test\nDESCRIPTION: A test-only instruction that specifies test arguments for running tests in the context of a containing function. Supports various argument types including boolean, integers, strings, values, functions, blocks, traces, and operands.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_24\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'specify_test' string-literal\n\nspecify_test \"parsing @trace[3] @function[other].block[2].instruction[1]\"\n```\n\n----------------------------------------\n\nTITLE: Navigating Ninja Targets for Swift Standard Library (Bash)\nDESCRIPTION: This snippet demonstrates how to use Ninja to efficiently build and navigate targets for the Swift standard library, specifically focusing on i386 architecture and suppressing warnings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DevelopmentTips.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nninja -t targets | grep stdlib | grep i386\nninja -t browse swift-stdlib-iphonesimulator-i386\nninja -nv lib/swift/iphonesimulator/i386/libswiftCore.dylib\n```\n\n----------------------------------------\n\nTITLE: Importing Foundation Frameworks in Swift\nDESCRIPTION: Imports the necessary Foundation, CoreFoundation, and Dispatch frameworks required for the Swift code to interact with Apple's core libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Foundation\nimport CoreFoundation\nimport Dispatch\n```\n\n----------------------------------------\n\nTITLE: Generic Protocol Solution Instead of Existential in Swift\nDESCRIPTION: Shows how to use generic protocols instead of existentials for type-safe dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nprotocol MyProtocol: AnyObject {\n    func write<T>(t: T)\n}\n\nfunc usingProtocolAsGeneric(p: some MyProtocol) {\n    p.write(t: 42) // ✅\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode 1.1 Code Point Assignments\nDESCRIPTION: This snippet lists Unicode code points assigned in version 1.1. It includes ranges for various characters and symbols, along with their descriptions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\nFB3E          ; 1.1 #       HEBREW LETTER MEM WITH DAGESH\nFB40..FB41    ; 1.1 #   [2] HEBREW LETTER NUN WITH DAGESH..HEBREW LETTER SAMEKH WITH DAGESH\nFB43..FB44    ; 1.1 #   [2] HEBREW LETTER FINAL PE WITH DAGESH..HEBREW LETTER PE WITH DAGESH\nFB46..FBB1    ; 1.1 # [108] HEBREW LETTER TSADI WITH DAGESH..ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM\nFBD3..FD3F    ; 1.1 # [365] ARABIC LETTER NG ISOLATED FORM..ORNATE RIGHT PARENTHESIS\nFD50..FD8F    ; 1.1 #  [64] ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM..ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM\nFD92..FDC7    ; 1.1 #  [54] ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM..ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM\nFDF0..FDFB    ; 1.1 #  [12] ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM..ARABIC LIGATURE JALLAJALALOUHOU\nFE20..FE23    ; 1.1 #   [4] COMBINING LIGATURE LEFT HALF..COMBINING DOUBLE TILDE RIGHT HALF\nFE30..FE44    ; 1.1 #  [21] PRESENTATION FORM FOR VERTICAL TWO DOT LEADER..PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET\nFE49..FE52    ; 1.1 #  [10] DASHED OVERLINE..SMALL FULL STOP\nFE54..FE66    ; 1.1 #  [19] SMALL SEMICOLON..SMALL EQUALS SIGN\nFE68..FE6B    ; 1.1 #   [4] SMALL REVERSE SOLIDUS..SMALL COMMERCIAL AT\nFE70..FE72    ; 1.1 #   [3] ARABIC FATHATAN ISOLATED FORM..ARABIC DAMMATAN ISOLATED FORM\nFE74          ; 1.1 #       ARABIC KASRATAN ISOLATED FORM\nFE76..FEFC    ; 1.1 # [135] ARABIC FATHA ISOLATED FORM..ARABIC LIGATURE LAM WITH ALEF FINAL FORM\nFEFF          ; 1.1 #       ZERO WIDTH NO-BREAK SPACE\nFF01..FF5E    ; 1.1 #  [94] FULLWIDTH EXCLAMATION MARK..FULLWIDTH TILDE\nFF61..FFBE    ; 1.1 #  [94] HALFWIDTH IDEOGRAPHIC FULL STOP..HALFWIDTH HANGUL LETTER HIEUH\nFFC2..FFC7    ; 1.1 #   [6] HALFWIDTH HANGUL LETTER A..HALFWIDTH HANGUL LETTER E\nFFCA..FFCF    ; 1.1 #   [6] HALFWIDTH HANGUL LETTER YEO..HALFWIDTH HANGUL LETTER OE\nFFD2..FFD7    ; 1.1 #   [6] HALFWIDTH HANGUL LETTER YO..HALFWIDTH HANGUL LETTER YU\nFFDA..FFDC    ; 1.1 #   [3] HALFWIDTH HANGUL LETTER EU..HALFWIDTH HANGUL LETTER I\nFFE0..FFE6    ; 1.1 #   [7] FULLWIDTH CENT SIGN..FULLWIDTH WON SIGN\nFFE8..FFEE    ; 1.1 #   [7] HALFWIDTH FORMS LIGHT VERTICAL..HALFWIDTH WHITE CIRCLE\nFFFD          ; 1.1 #       REPLACEMENT CHARACTER\nFFFE..FFFF    ; 1.1 #   [2] <noncharacter-FFFE>..<noncharacter-FFFF>\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Serialization Static Library Build\nDESCRIPTION: Defines a static library target for Swift serialization, specifying source files and LLVM Bitstream Reader dependency. Sets up the main library build configuration with necessary source files and component dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Serialization/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftSerialization STATIC\n  Deserialization.cpp\n  DeserializeSIL.cpp\n  ModuleFile.cpp\n  ModuleFileSharedCore.cpp\n  ScanningLoaders.cpp\n  Serialization.cpp\n  SerializedModuleLoader.cpp\n  SerializedSILLoader.cpp\n  SerializeDoc.cpp\n  SerializeSIL.cpp\n\n  LLVM_LINK_COMPONENTS\n    BitstreamReader\n  )\n```\n\n----------------------------------------\n\nTITLE: Accessing Dynamic Tuple Pack Elements by Address in SIL\nDESCRIPTION: The tuple_pack_element_addr instruction derives the address of a dynamic element within a tuple value given the address of the tuple in memory. It requires a pack index operand and follows structural type matching rules for pack indices.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_126\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'tuple_pack_element_addr' sil-value 'of' sil-operand 'as' sil-type\n\n%addr = tuple_pack_element_addr %index of %tuple : $*(repeat each T) as $*@pack_element(\"01234567-89AB-CDEF-0123-000000000000\") U\n// %index must be of $Builtin.PackIndex type\n// %tuple must be of address-of-tuple type\n// %addr will be of the result type specified by the 'as' clause\n```\n\n----------------------------------------\n\nTITLE: Detecting B&I Build Types in CMake\nDESCRIPTION: Detects and configures B&I (Build and Integration) build types by checking environment variables RC_XBS, RC_XCODE, and RC_PLAYGROUNDS. Sets boolean flags for OS and Xcode builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/include/swift/Runtime/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_BNI_OS_BUILD FALSE)\nset(SWIFT_BNI_XCODE_BUILD FALSE)\nif(DEFINED ENV{RC_XBS})\n  if((NOT DEFINED ENV{RC_XCODE} OR NOT \"$ENV{RC_XCODE}\") AND (NOT DEFINED ENV{RC_PLAYGROUNDS} OR NOT \"$ENV{RC_PLAYGROUNDS}\"))\n    set(SWIFT_BNI_OS_BUILD TRUE)\n  else()\n    set(SWIFT_BNI_XCODE_BUILD TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Case Folding and Ligatures\nDESCRIPTION: This configuration defines mappings between Unicode code points, primarily for case folding and ligature handling. Each line contains a source character, a mapping type (C for case folding, F for compatibility folding, S for special), and target character(s), all in hexadecimal format. Comments indicate the Unicode character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_7\n\nLANGUAGE: config\nCODE:\n```\nA722; C; A723; # LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF\nA724; C; A725; # LATIN CAPITAL LETTER EGYPTOLOGICAL AIN\nA726; C; A727; # LATIN CAPITAL LETTER HENG\nA728; C; A729; # LATIN CAPITAL LETTER TZ\nA72A; C; A72B; # LATIN CAPITAL LETTER TRESILLO\nA72C; C; A72D; # LATIN CAPITAL LETTER CUATRILLO\nA72E; C; A72F; # LATIN CAPITAL LETTER CUATRILLO WITH COMMA\nA732; C; A733; # LATIN CAPITAL LETTER AA\nA734; C; A735; # LATIN CAPITAL LETTER AO\nA736; C; A737; # LATIN CAPITAL LETTER AU\nA738; C; A739; # LATIN CAPITAL LETTER AV\nA73A; C; A73B; # LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR\nA73C; C; A73D; # LATIN CAPITAL LETTER AY\nA73E; C; A73F; # LATIN CAPITAL LETTER REVERSED C WITH DOT\nA740; C; A741; # LATIN CAPITAL LETTER K WITH STROKE\nA742; C; A743; # LATIN CAPITAL LETTER K WITH DIAGONAL STROKE\nA744; C; A745; # LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE\nA746; C; A747; # LATIN CAPITAL LETTER BROKEN L\nA748; C; A749; # LATIN CAPITAL LETTER L WITH HIGH STROKE\nA74A; C; A74B; # LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY\nA74C; C; A74D; # LATIN CAPITAL LETTER O WITH LOOP\nA74E; C; A74F; # LATIN CAPITAL LETTER OO\nA750; C; A751; # LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER\nA752; C; A753; # LATIN CAPITAL LETTER P WITH FLOURISH\nA754; C; A755; # LATIN CAPITAL LETTER P WITH SQUIRREL TAIL\nA756; C; A757; # LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER\nA758; C; A759; # LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE\nA75A; C; A75B; # LATIN CAPITAL LETTER R ROTUNDA\nA75C; C; A75D; # LATIN CAPITAL LETTER RUM ROTUNDA\nA75E; C; A75F; # LATIN CAPITAL LETTER V WITH DIAGONAL STROKE\nA760; C; A761; # LATIN CAPITAL LETTER VY\nA762; C; A763; # LATIN CAPITAL LETTER VISIGOTHIC Z\nA764; C; A765; # LATIN CAPITAL LETTER THORN WITH STROKE\nA766; C; A767; # LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER\nA768; C; A769; # LATIN CAPITAL LETTER VEND\nA76A; C; A76B; # LATIN CAPITAL LETTER ET\nA76C; C; A76D; # LATIN CAPITAL LETTER IS\nA76E; C; A76F; # LATIN CAPITAL LETTER CON\nA779; C; A77A; # LATIN CAPITAL LETTER INSULAR D\nA77B; C; A77C; # LATIN CAPITAL LETTER INSULAR F\nA77D; C; 1D79; # LATIN CAPITAL LETTER INSULAR G\nA77E; C; A77F; # LATIN CAPITAL LETTER TURNED INSULAR G\nA780; C; A781; # LATIN CAPITAL LETTER TURNED L\nA782; C; A783; # LATIN CAPITAL LETTER INSULAR R\nA784; C; A785; # LATIN CAPITAL LETTER INSULAR S\nA786; C; A787; # LATIN CAPITAL LETTER INSULAR T\nA78B; C; A78C; # LATIN CAPITAL LETTER SALTILLO\nA78D; C; 0265; # LATIN CAPITAL LETTER TURNED H\nA790; C; A791; # LATIN CAPITAL LETTER N WITH DESCENDER\nA792; C; A793; # LATIN CAPITAL LETTER C WITH BAR\nA796; C; A797; # LATIN CAPITAL LETTER B WITH FLOURISH\nA798; C; A799; # LATIN CAPITAL LETTER F WITH STROKE\nA79A; C; A79B; # LATIN CAPITAL LETTER VOLAPUK AE\nA79C; C; A79D; # LATIN CAPITAL LETTER VOLAPUK OE\nA79E; C; A79F; # LATIN CAPITAL LETTER VOLAPUK UE\nA7A0; C; A7A1; # LATIN CAPITAL LETTER G WITH OBLIQUE STROKE\nA7A2; C; A7A3; # LATIN CAPITAL LETTER K WITH OBLIQUE STROKE\nA7A4; C; A7A5; # LATIN CAPITAL LETTER N WITH OBLIQUE STROKE\nA7A6; C; A7A7; # LATIN CAPITAL LETTER R WITH OBLIQUE STROKE\nA7A8; C; A7A9; # LATIN CAPITAL LETTER S WITH OBLIQUE STROKE\nA7AA; C; 0266; # LATIN CAPITAL LETTER H WITH HOOK\nA7AB; C; 025C; # LATIN CAPITAL LETTER REVERSED OPEN E\nA7AC; C; 0261; # LATIN CAPITAL LETTER SCRIPT G\nA7AD; C; 026C; # LATIN CAPITAL LETTER L WITH BELT\nA7AE; C; 026A; # LATIN CAPITAL LETTER SMALL CAPITAL I\nA7B0; C; 029E; # LATIN CAPITAL LETTER TURNED K\nA7B1; C; 0287; # LATIN CAPITAL LETTER TURNED T\nA7B2; C; 029D; # LATIN CAPITAL LETTER J WITH CROSSED-TAIL\nA7B3; C; AB53; # LATIN CAPITAL LETTER CHI\nA7B4; C; A7B5; # LATIN CAPITAL LETTER BETA\nA7B6; C; A7B7; # LATIN CAPITAL LETTER OMEGA\nA7B8; C; A7B9; # LATIN CAPITAL LETTER U WITH STROKE\nA7BA; C; A7BB; # LATIN CAPITAL LETTER GLOTTAL A\nA7BC; C; A7BD; # LATIN CAPITAL LETTER GLOTTAL I\nA7BE; C; A7BF; # LATIN CAPITAL LETTER GLOTTAL U\nA7C0; C; A7C1; # LATIN CAPITAL LETTER OLD POLISH O\nA7C2; C; A7C3; # LATIN CAPITAL LETTER ANGLICANA W\nA7C4; C; A794; # LATIN CAPITAL LETTER C WITH PALATAL HOOK\nA7C5; C; 0282; # LATIN CAPITAL LETTER S WITH HOOK\nA7C6; C; 1D8E; # LATIN CAPITAL LETTER Z WITH PALATAL HOOK\nA7C7; C; A7C8; # LATIN CAPITAL LETTER D WITH SHORT STROKE OVERLAY\nA7C9; C; A7CA; # LATIN CAPITAL LETTER S WITH SHORT STROKE OVERLAY\nA7CB; C; 0264; # LATIN CAPITAL LETTER RAMS HORN\nA7CC; C; A7CD; # LATIN CAPITAL LETTER S WITH DIAGONAL STROKE\nA7D0; C; A7D1; # LATIN CAPITAL LETTER CLOSED INSULAR G\nA7D6; C; A7D7; # LATIN CAPITAL LETTER MIDDLE SCOTS S\nA7D8; C; A7D9; # LATIN CAPITAL LETTER SIGMOID S\nA7DA; C; A7DB; # LATIN CAPITAL LETTER LAMBDA\nA7DC; C; 019B; # LATIN CAPITAL LETTER LAMBDA WITH STROKE\nA7F5; C; A7F6; # LATIN CAPITAL LETTER REVERSED HALF H\nAB70; C; 13A0; # CHEROKEE SMALL LETTER A\nAB71; C; 13A1; # CHEROKEE SMALL LETTER E\nAB72; C; 13A2; # CHEROKEE SMALL LETTER I\nAB73; C; 13A3; # CHEROKEE SMALL LETTER O\nAB74; C; 13A4; # CHEROKEE SMALL LETTER U\nAB75; C; 13A5; # CHEROKEE SMALL LETTER V\nAB76; C; 13A6; # CHEROKEE SMALL LETTER GA\nAB77; C; 13A7; # CHEROKEE SMALL LETTER KA\nAB78; C; 13A8; # CHEROKEE SMALL LETTER GE\nAB79; C; 13A9; # CHEROKEE SMALL LETTER GI\nAB7A; C; 13AA; # CHEROKEE SMALL LETTER GO\nAB7B; C; 13AB; # CHEROKEE SMALL LETTER GU\nAB7C; C; 13AC; # CHEROKEE SMALL LETTER GV\nAB7D; C; 13AD; # CHEROKEE SMALL LETTER HA\nAB7E; C; 13AE; # CHEROKEE SMALL LETTER HE\nAB7F; C; 13AF; # CHEROKEE SMALL LETTER HI\nAB80; C; 13B0; # CHEROKEE SMALL LETTER HO\nAB81; C; 13B1; # CHEROKEE SMALL LETTER HU\nAB82; C; 13B2; # CHEROKEE SMALL LETTER HV\nAB83; C; 13B3; # CHEROKEE SMALL LETTER LA\nAB84; C; 13B4; # CHEROKEE SMALL LETTER LE\nAB85; C; 13B5; # CHEROKEE SMALL LETTER LI\nAB86; C; 13B6; # CHEROKEE SMALL LETTER LO\nAB87; C; 13B7; # CHEROKEE SMALL LETTER LU\nAB88; C; 13B8; # CHEROKEE SMALL LETTER LV\nAB89; C; 13B9; # CHEROKEE SMALL LETTER MA\nAB8A; C; 13BA; # CHEROKEE SMALL LETTER ME\nAB8B; C; 13BB; # CHEROKEE SMALL LETTER MI\nAB8C; C; 13BC; # CHEROKEE SMALL LETTER MO\nAB8D; C; 13BD; # CHEROKEE SMALL LETTER MU\nAB8E; C; 13BE; # CHEROKEE SMALL LETTER NA\nAB8F; C; 13BF; # CHEROKEE SMALL LETTER HNA\nAB90; C; 13C0; # CHEROKEE SMALL LETTER NAH\nAB91; C; 13C1; # CHEROKEE SMALL LETTER NE\nAB92; C; 13C2; # CHEROKEE SMALL LETTER NI\nAB93; C; 13C3; # CHEROKEE SMALL LETTER NO\nAB94; C; 13C4; # CHEROKEE SMALL LETTER NU\nAB95; C; 13C5; # CHEROKEE SMALL LETTER NV\nAB96; C; 13C6; # CHEROKEE SMALL LETTER QUA\nAB97; C; 13C7; # CHEROKEE SMALL LETTER QUE\nAB98; C; 13C8; # CHEROKEE SMALL LETTER QUI\nAB99; C; 13C9; # CHEROKEE SMALL LETTER QUO\nAB9A; C; 13CA; # CHEROKEE SMALL LETTER QUU\nAB9B; C; 13CB; # CHEROKEE SMALL LETTER QUV\nAB9C; C; 13CC; # CHEROKEE SMALL LETTER SA\nAB9D; C; 13CD; # CHEROKEE SMALL LETTER S\nAB9E; C; 13CE; # CHEROKEE SMALL LETTER SE\nAB9F; C; 13CF; # CHEROKEE SMALL LETTER SI\nABA0; C; 13D0; # CHEROKEE SMALL LETTER SO\nABA1; C; 13D1; # CHEROKEE SMALL LETTER SU\nABA2; C; 13D2; # CHEROKEE SMALL LETTER SV\nABA3; C; 13D3; # CHEROKEE SMALL LETTER DA\nABA4; C; 13D4; # CHEROKEE SMALL LETTER TA\nABA5; C; 13D5; # CHEROKEE SMALL LETTER DE\nABA6; C; 13D6; # CHEROKEE SMALL LETTER TE\nABA7; C; 13D7; # CHEROKEE SMALL LETTER DI\nABA8; C; 13D8; # CHEROKEE SMALL LETTER TI\nABA9; C; 13D9; # CHEROKEE SMALL LETTER DO\nABAA; C; 13DA; # CHEROKEE SMALL LETTER DU\nABAB; C; 13DB; # CHEROKEE SMALL LETTER DV\nABAC; C; 13DC; # CHEROKEE SMALL LETTER DLA\nABAD; C; 13DD; # CHEROKEE SMALL LETTER TLA\nABAE; C; 13DE; # CHEROKEE SMALL LETTER TLE\nABAF; C; 13DF; # CHEROKEE SMALL LETTER TLI\nABB0; C; 13E0; # CHEROKEE SMALL LETTER TLO\nABB1; C; 13E1; # CHEROKEE SMALL LETTER TLU\nABB2; C; 13E2; # CHEROKEE SMALL LETTER TLV\nABB3; C; 13E3; # CHEROKEE SMALL LETTER TSA\nABB4; C; 13E4; # CHEROKEE SMALL LETTER TSE\nABB5; C; 13E5; # CHEROKEE SMALL LETTER TSI\nABB6; C; 13E6; # CHEROKEE SMALL LETTER TSO\nABB7; C; 13E7; # CHEROKEE SMALL LETTER TSU\nABB8; C; 13E8; # CHEROKEE SMALL LETTER TSV\nABB9; C; 13E9; # CHEROKEE SMALL LETTER WA\nABBA; C; 13EA; # CHEROKEE SMALL LETTER WE\nABBB; C; 13EB; # CHEROKEE SMALL LETTER WI\nABBC; C; 13EC; # CHEROKEE SMALL LETTER WO\nABBD; C; 13ED; # CHEROKEE SMALL LETTER WU\nABBE; C; 13EE; # CHEROKEE SMALL LETTER WV\nABBF; C; 13EF; # CHEROKEE SMALL LETTER YA\nFB00; F; 0066 0066; # LATIN SMALL LIGATURE FF\nFB01; F; 0066 0069; # LATIN SMALL LIGATURE FI\nFB02; F; 0066 006C; # LATIN SMALL LIGATURE FL\nFB03; F; 0066 0066 0069; # LATIN SMALL LIGATURE FFI\nFB04; F; 0066 0066 006C; # LATIN SMALL LIGATURE FFL\nFB05; F; 0073 0074; # LATIN SMALL LIGATURE LONG S T\nFB05; S; FB06; # LATIN SMALL LIGATURE LONG S T\nFB06; F; 0073 0074; # LATIN SMALL LIGATURE ST\nFB13; F; 0574 0576; # ARMENIAN SMALL LIGATURE MEN NOW\nFB14; F; 0574 0565; # ARMENIAN SMALL LIGATURE MEN ECH\nFB15; F; 0574 056B; # ARMENIAN SMALL LIGATURE MEN INI\nFB16; F; 057E 0576; # ARMENIAN SMALL LIGATURE VEW NOW\nFB17; F; 0574 056D; # ARMENIAN SMALL LIGATURE MEN XEH\nFF21; C; FF41; # FULLWIDTH LATIN CAPITAL LETTER A\nFF22; C; FF42; # FULLWIDTH LATIN CAPITAL LETTER B\nFF23; C; FF43; # FULLWIDTH LATIN CAPITAL LETTER C\nFF24; C; FF44; # FULLWIDTH LATIN CAPITAL LETTER D\nFF25; C; FF45; # FULLWIDTH LATIN CAPITAL LETTER E\nFF26; C; FF46; # FULLWIDTH LATIN CAPITAL LETTER F\nFF27; C; FF47; # FULLWIDTH LATIN CAPITAL LETTER G\nFF28; C; FF48; # FULLWIDTH LATIN CAPITAL LETTER H\nFF29; C; FF49; # FULLWIDTH LATIN CAPITAL LETTER I\nFF2A; C; FF4A; # FULLWIDTH LATIN CAPITAL LETTER J\nFF2B; C; FF4B; # FULLWIDTH LATIN CAPITAL LETTER K\nFF2C; C; FF4C; # FULLWIDTH LATIN CAPITAL LETTER L\nFF2D; C; FF4D; # FULLWIDTH LATIN CAPITAL LETTER M\nFF2E; C; FF4E; # FULLWIDTH LATIN CAPITAL LETTER N\nFF2F; C; FF4F; # FULLWIDTH LATIN CAPITAL LETTER O\nFF30; C; FF50; # FULLWIDTH LATIN CAPITAL LETTER P\nFF31; C; FF51; # FULLWIDTH LATIN CAPITAL LETTER Q\nFF32; C; FF52; # FULLWIDTH LATIN CAPITAL LETTER R\nFF33; C; FF53; # FULLWIDTH LATIN CAPITAL LETTER S\nFF34; C; FF54; # FULLWIDTH LATIN CAPITAL LETTER T\nFF35; C; FF55; # FULLWIDTH LATIN CAPITAL LETTER U\nFF36; C; FF56; # FULLWIDTH LATIN CAPITAL LETTER V\nFF37; C; FF57; # FULLWIDTH LATIN CAPITAL LETTER W\nFF38; C; FF58; # FULLWIDTH LATIN CAPITAL LETTER X\nFF39; C; FF59; # FULLWIDTH LATIN CAPITAL LETTER Y\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Swift SDKs and Architectures\nDESCRIPTION: A nested loop to process each SDK and architecture combination supported by Swift. For each combination, it sets up variables for subdirectories and suffixes needed in the build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(sdk ${SWIFT_SDKS})\n  foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES})\n    set(arch_subdir \"${SWIFT_SDK_${sdk}_LIB_SUBDIR}/${arch}\")\n    set(arch_suffix \"${SWIFT_SDK_${sdk}_LIB_SUBDIR}-${arch}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring libSwiftScan Library in CMake\nDESCRIPTION: This snippet sets up the libSwiftScan shared library, defines its source files, and configures dependencies. It also sets the output name and handles platform-specific linking flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Tooling/libSwiftScan/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_SCAN_LIB_NAME \"_InternalSwiftScan\")\n\nset(LLVM_EXPORTED_SYMBOL_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/libSwiftScan.exports)\n\nadd_swift_host_library(libSwiftScan SHARED\n  libSwiftScan.cpp\n  c-include-check.c\n  SwiftCaching.cpp\n  HAS_SWIFT_MODULES)\n\nif(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)\n  # Workaround for a linker crash related to autolinking: rdar://77839981\n  set_property(TARGET libSwiftScan APPEND_STRING PROPERTY\n               LINK_FLAGS \" -lobjc \")\nendif()\n\nadd_dependencies(libSwiftScan\n  clang\n  swiftDependencyScan)\n\ntarget_link_libraries(libSwiftScan PRIVATE\n    swiftDependencyScan\n    swiftDriverTool\n    swiftStaticMirror\n    swiftRemoteInspection\n    swiftCompilerModules)\n\nset_target_properties(libSwiftScan\n    PROPERTIES\n    OUTPUT_NAME ${SWIFT_SCAN_LIB_NAME})\n```\n\n----------------------------------------\n\nTITLE: Configuring OSLog Darwin Dependencies\nDESCRIPTION: Sets up conditional dependencies for the OSLog test helper based on build flags. Includes optional dependencies for Darwin, Concurrency, and String Processing features.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/OSLog/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_oslog_darwin_dependencies \"\")\nif(SWIFT_BUILD_SDK_OVERLAY)\n    list(APPEND swift_oslog_darwin_dependencies \"Darwin\")\nendif()\nif (SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY)\n    list(APPEND swift_oslog_darwin_dependencies \"_Concurrency\")\nendif()\nif (SWIFT_ENABLE_EXPERIMENTAL_STRING_PROCESSING)\n  list(APPEND swift_oslog_darwin_dependencies \"_StringProcessing\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Remote AST Library Target in CMake\nDESCRIPTION: This snippet adds the swiftRemoteAST library as a static host library target. It specifies the source files and links against required libraries including swiftDemangling, swiftIRGen, and swiftSema.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/RemoteAST/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftRemoteAST STATIC\n  RemoteAST.cpp\n  InProcessMemoryReader.cpp\n  ${REMOTE_LIB_HEADERS})\ntarget_link_libraries(swiftRemoteAST PUBLIC\n  swiftDemangling)\ntarget_link_libraries(swiftRemoteAST PRIVATE\n  swiftIRGen\n  swiftSema)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for Swift Runtime\nDESCRIPTION: Configures numerous compiler definitions for the swiftRuntime target using generator expressions to conditionally enable features. These definitions control what features are available in the Swift runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# TODO: Probably worth considering putting half of these in a RuntimeConfig.h.in\n#       file rather than pushing them through macro flags.\ntarget_compile_definitions(swiftRuntime\n  PRIVATE\n    -DSWIFT_RUNTIME\n    -DSWIFT_TARGET_LIBRARY_NAME=swiftRuntimeCore\n    $<$<BOOL:${BUILD_SHARED_LIBS}>:-DswiftCore_EXPORTS>\n    $<$<BOOL:${SwiftCore_ENABLE_BACKTRACING}>:-DSWIFT_ENABLE_BACKTRACING>\n    $<$<BOOL:${SwiftCore_ENABLE_OVERRIDABLE_RETAIN_RELEASE}>:-DSWIFT_STDLIB_OVERRIDABLE_RETAIN_RELEASE>\n    $<$<BOOL:${SwiftCore_BACKTRACER_PATH}>:-DSWIFT_RUNTIME_FIXED_BACKTRACER_PATH=\"${SwiftCore_BACKTRACER_PATH}\">\n    $<$<BOOL:${SwiftCore_ENABLE_STDLIB_TRACING}>:-DSWIFT_STDLIB_TRACING>\n    $<$<BOOL:${SwiftCore_ENABLE_SHORT_MANGLING_LOOKUPS}>:-DSWIFT_STDLIB_SHORT_MANGLING_LOOKUPS>\n    $<$<BOOL:${SwiftCore_HAS_ASL}>:-DSWIFT_STDLIB_HAS_ASL>\n    $<$<BOOL:${SwiftCore_ENABLE_TYPE_PRINTING}>:-DSWIFT_STDLIB_HAS_TYPE_PRINTING>\n    $<$<BOOL:${SwiftCore_HAS_DLADDR}>:-DSWIFT_STDLIB_HAS_DLADDR>\n    $<$<BOOL:${SwiftCore_HAS_DLSYM}>:-DSWIFT_STDLIB_HAS_DLSYM>\n    $<$<BOOL:${SwiftCore_ENABLE_FILESYSTEM_SUPPORT}>:-DSWIFT_STDLIB_HAS_FILESYSTEM>\n    $<$<BOOL:${SwiftCore_ENABLE_FILESYSTEM_SUPPORT}>:-DSWIFT_ARCH=\"${SwiftCore_ARCH_SUBDIR}\">\n    $<$<BOOL:${SwiftCore_ENABLE_FILESYSTEM_SUPPORT}>:-DSWIFT_LIB_SUBDIR=\"${SwiftCore_PLATFORM_SUBDIR}\">\n    $<$<BOOL:${SwiftCore_ENABLE_FATALERROR_BACKTRACE}>:-DSWIFT_STDLIB_SUPPORTS_BACKTRACE_REPORTING>\n  PUBLIC\n    $<$<BOOL:${SwiftCore_ENABLE_VECTOR_TYPES}>:-DSWIFT_STDLIB_ENABLE_VECTOR_TYPES>\n    $<$<BOOL:${SwiftCore_ENABLE_OS_TRACE_LAZY_INIT}>:-DSWIFT_USE_OS_TRACE_LAZY_INIT>)\n```\n\n----------------------------------------\n\nTITLE: Configuring BlocksRuntime Stubs for Dynamic Stdlib Tests\nDESCRIPTION: Sets up BlocksRuntime stub library specifically for reflection tests when building dynamic standard library with tests enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_DYNAMIC_STDLIB AND SWIFT_INCLUDE_TESTS)\n  add_subdirectory(BlocksRuntimeStubs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Break Test Cases\nDESCRIPTION: Collection of Unicode word break test cases showing how different characters interact at word boundaries. Each line contains character codes, descriptions and break points marked with ÷ (break allowed) and × (break not allowed).\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n÷ 0001 ÷ 0001 ÷ #  ÷ [0.2] <START OF HEADING> (Other) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 0001 × 0308 ÷ 0001 ÷  #  ÷ [0.2] <START OF HEADING> (Other) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 0001 ÷ 000D ÷ #  ÷ [0.2] <START OF HEADING> (Other) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Adding Pure Swift Host Library with CXX Interop\nDESCRIPTION: CMake configuration that defines a pure Swift host library with C++ interoperability. The library includes NameMatcherBridging.swift and depends on multiple Swift compiler components including AST, IDE Utils, Syntax, and ASTGen modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ASTGen/Sources/SwiftIDEUtilsBridging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_pure_swift_host_library(swiftIDEUtilsBridging CXX_INTEROP\n  NameMatcherBridging.swift\n\n  DEPENDENCIES\n    swiftAST\n  SWIFT_DEPENDENCIES\n    _CompilerSwiftIDEUtils\n    _CompilerSwiftSyntax\n    _CompilerSwiftIDEUtils\n    swiftASTGen\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Required Dependencies\nDESCRIPTION: Locates and configures required project dependencies including Python 3.6+ interpreter.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_76\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(Python3 3.6 COMPONENTS Interpreter REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Listing Conformance Changes in Swift API\nDESCRIPTION: This snippet documents changes to protocol conformances in Swift, including removed conformances, changes to optional requirements, and modifications to protocol inheritance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n/* Conformance changes */\ncake: Enum IceKind has removed conformance to BitwiseCopyable\ncake: Enum IceKind has removed conformance to Sendable\ncake: Enum IceKind has removed conformance to SendableMetatype\ncake: Func ObjCProtocol.removeOptional() is no longer an optional requirement\ncake: Protocol P3 has added inherited protocol P4\ncake: Protocol P3 has removed inherited protocol P2\ncake: Struct fixedLayoutStruct has removed conformance to P1\n```\n\n----------------------------------------\n\nTITLE: Installing Swift-Android Header Files and Module Map\nDESCRIPTION: Configures the installation of Swift header files and module maps for Android integration. These files are installed to the appropriate Swift library directory to support Swift compilation on Android.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/clang/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n  android.modulemap\n  SwiftAndroidNDK.h\n  SwiftBionic.h\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/swift$<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:_static>/${SwiftOverlay_PLATFORM_SUBDIR}/${SwiftOverlay_ARCH_SUBDIR})\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Syntax Libraries in CMake\nDESCRIPTION: Configures the installation of Swift Syntax shared libraries and import libraries for different platforms. It uses conditional logic to handle Windows-specific installation requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftSyntax/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME MATCHES Windows)\n  swift_install_in_component(TARGETS ${SWIFT_SYNTAX_MODULES}\n                             RUNTIME\n                             DESTINATION \"bin\"\n                             COMPONENT swift-syntax-lib)\nelse()\n  swift_install_in_component(TARGETS ${SWIFT_SYNTAX_MODULES}\n                             LIBRARY\n                             DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/host\"\n                             COMPONENT swift-syntax-lib)\nendif()\n\nif(CMAKE_SYSTEM_NAME MATCHES Windows)\n  list(TRANSFORM SWIFT_SYNTAX_MODULES\n       PREPEND \"${CMAKE_IMPORT_LIBRARY_PREFIX}\"\n       OUTPUT_VARIABLE SWIFT_SYNTAX_IMPORT_LIBRARIES)\n  list(TRANSFORM SWIFT_SYNTAX_IMPORT_LIBRARIES\n       APPEND \"${CMAKE_IMPORT_LIBRARY_SUFFIX}\"\n       OUTPUT_VARIABLE SWIFT_SYNTAX_IMPORT_LIBRARIES)\n  list(TRANSFORM SWIFT_SYNTAX_IMPORT_LIBRARIES\n       PREPEND \"${SWIFT_HOST_LIBRARIES_DEST_DIR}/\"\n       OUTPUT_VARIABLE SWIFT_SYNTAX_IMPORT_LIBRARIES)\n  swift_install_in_component(PROGRAMS \"${SWIFT_SYNTAX_IMPORT_LIBRARIES}\"\n                             DESTINATION lib\n                             COMPONENT swift-syntax-lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing Foundation, CoreFoundation, and Dispatch in Swift\nDESCRIPTION: Imports necessary frameworks for Swift integration with Core Foundation and Dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.command-line-include.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nimport Foundation\nimport CoreFoundation\nimport Dispatch\n```\n\n----------------------------------------\n\nTITLE: Defining an Enumeration for Quick Look Objects in Swift\nDESCRIPTION: This snippet defines an enumeration named MyQuickLookObject with a single case for rectangles. It includes documentation comments explaining its purpose and implementation details.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/foo_swift_module.printed.comments.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n/// rdar://18457785\nenum MyQuickLookObject {\n  /// A rectangle.\n  ///\n  /// Uses explicit coordinates to avoid coupling a particular Cocoa type.\n  case Rectangle(Float64, Float64, Float64, Float64)\n}\n```\n\n----------------------------------------\n\nTITLE: Building Standard Library with Default Configuration\nDESCRIPTION: Commands to build a standard library with default configuration. This builds for the current system, typically resulting in a static archive without optimizations, and installs to a staging directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncmake -B build -S . -G Ninja -DCMAKE_Swift_COMPILER=<swiftc>\ncmake --build build\nDESTDIR=/tmp/staging-dir cmake --install build --prefix /usr\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Migrator Library\nDESCRIPTION: Defines the Swift Migrator static library target with its source files and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Migrator/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftMigrator STATIC\n  APIDiffMigratorPass.cpp\n  EditorAdapter.cpp\n  FixitApplyDiagnosticConsumer.cpp\n  Migrator.cpp\n  MigrationState.cpp\n  OptionalTryMigratorPass.cpp\n  RewriteBufferEditsReceiver.cpp)\ntarget_link_libraries(swiftMigrator PRIVATE\n  swiftIDE)\n\nadd_dependencies(swiftMigrator\n  \"symlink_migrator_data\")\n\nset_swift_llvm_is_available(swiftMigrator)\n```\n\n----------------------------------------\n\nTITLE: Creating Static Vectors in SIL\nDESCRIPTION: The vector instruction constructs a statically initialized vector of elements. It can only appear as the final instruction in a global variable static initializer list. All operands must have the same type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_133\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'vector' '(' (sil-operand (',' sil-operand)*)? ')'\n\nvector (%a : $T, %b : $T, ...)\n// $T must be a non-generic or bound generic reference type\n// All operands must have the same type\n```\n\n----------------------------------------\n\nTITLE: Deprecated String Handling Methods\nDESCRIPTION: Legacy Cocoa string handling methods that are now deprecated, including C string conversion, file operations, and character buffer manipulation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_32\n\nLANGUAGE: Objective-C\nCODE:\n```\n- (const char *)cString;\n- (const char *)lossyCString;\n- (NSUInteger)cStringLength;\n- (void)getCString:(char *)bytes;\n- (void)getCString:(char *)bytes maxLength:(NSUInteger)maxLength;\n- (void)getCString:(char *)bytes maxLength:(NSUInteger)maxLength range:(NSRange)aRange remainingRange:(NSRangePointer)leftoverRange;\n- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile;\n- (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)atomically;\n- (id)initWithContentsOfFile:(NSString *)path;\n- (id)initWithContentsOfURL:(NSURL *)url;\n+ (id)stringWithContentsOfFile:(NSString *)path;\n+ (id)stringWithContentsOfURL:(NSURL *)url;\n- (id)initWithCStringNoCopy:(char *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)freeBuffer;\n- (id)initWithCString:(const char *)bytes length:(NSUInteger)length;\n- (id)initWithCString:(const char *)bytes;\n+ (id)stringWithCString:(const char *)bytes length:(NSUInteger)length;\n+ (id)stringWithCString:(const char *)bytes;\n- (void)getCharacters:(unichar *)buffer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift IDE Library in CMake\nDESCRIPTION: Defines the swiftIDE library, specifies its source files, and sets up its dependencies. It includes conditional linking for optional components and configures LLVM availability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/IDE/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftIDE STATIC\n  AfterPoundExprCompletion.cpp\n  APIDigesterData.cpp\n  ArgumentCompletion.cpp\n  CodeCompletion.cpp\n  CodeCompletionCache.cpp\n  CodeCompletionContext.cpp\n  CodeCompletionDiagnostics.cpp\n  CodeCompletionResult.cpp\n  CodeCompletionResultBuilder.cpp\n  CodeCompletionResultPrinter.cpp\n  CodeCompletionResultType.cpp\n  CodeCompletionString.cpp\n  CodeCompletionStringPrinter.cpp\n  CommentConversion.cpp\n  CompletionLookup.cpp\n  CompletionOverrideLookup.cpp\n  ConformingMethodList.cpp\n  CursorInfo.cpp\n  ExprCompletion.cpp\n  ExprContextAnalysis.cpp\n  Formatting.cpp\n  FuzzyStringMatcher.cpp\n  IDEBridging.cpp\n  IDERequests.cpp\n  IDETypeChecking.cpp\n  ImportDepth.cpp\n  KeyPathCompletion.cpp\n  ModuleInterfacePrinting.cpp\n  PostfixCompletion.cpp\n  REPLCodeCompletion.cpp\n  SelectedOverloadInfo.cpp\n  SourceEntityWalker.cpp\n  SwiftSourceDocInfo.cpp\n  SyntaxModel.cpp\n  TypeCheckCompletionCallback.cpp\n  TypeContextInfo.cpp\n  UnresolvedMemberCompletion.cpp\n  Utils.cpp\n  )\ntarget_link_libraries(swiftIDE PRIVATE\n  swiftAST\n  swiftClangImporter\n  swiftDriver\n  swiftParse\n  swiftSema)\n\nif (SWIFT_BUILD_SWIFT_SYNTAX)\n  target_link_libraries(swiftIDE PRIVATE\n    swiftIDEUtilsBridging\n  )\nendif()\n\nset_swift_llvm_is_available(swiftIDE)\n```\n\n----------------------------------------\n\nTITLE: Displaying Swift Code Completion Results for Int Type\nDESCRIPTION: Shows the output from Swift's code completion engine when a metatype token is encountered. The completions include Stride and IntegerLiteralType aliases, the Type keyword, and self reference, all in the context of the Int type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/int.complete_type_any.swift.tmp.types.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfound code completion token ANY_METATYPE at offset 1969\nBegin completions, 4 items\nDecl[TypeAlias]/CurrNominal:        Stride[#Int#]; name=Stride\nDecl[TypeAlias]/CurrNominal:        IntegerLiteralType[#Int#]; name=IntegerLiteralType\nKeyword/None:                       Type[#Int.Type#]; name=Type\nKeyword/CurrNominal:                self[#Int#]; name=self\n```\n\n----------------------------------------\n\nTITLE: Defining Case Ignorable Unicode Ranges\nDESCRIPTION: This snippet lists Unicode code points and ranges that are classified as 'Case_Ignorable'. Each line specifies either a single code point or a range of code points, followed by the 'Case_Ignorable' property. These characters are typically ignored in case-sensitive operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_11\n\nLANGUAGE: Unicode\nCODE:\n```\n0027          ; Case_Ignorable\n002E          ; Case_Ignorable\n003A          ; Case_Ignorable\n005E          ; Case_Ignorable\n0060          ; Case_Ignorable\n00A8          ; Case_Ignorable\n00AD          ; Case_Ignorable\n00AF          ; Case_Ignorable\n00B4          ; Case_Ignorable\n00B7          ; Case_Ignorable\n00B8          ; Case_Ignorable\n02B0..02C1    ; Case_Ignorable\n02C2..02C5    ; Case_Ignorable\n02C6..02D1    ; Case_Ignorable\n02D2..02DF    ; Case_Ignorable\n02E0..02E4    ; Case_Ignorable\n02E5..02EB    ; Case_Ignorable\n02EC          ; Case_Ignorable\n02ED          ; Case_Ignorable\n02EE          ; Case_Ignorable\n02EF..02FF    ; Case_Ignorable\n0300..036F    ; Case_Ignorable\n0374          ; Case_Ignorable\n0375          ; Case_Ignorable\n037A          ; Case_Ignorable\n0384..0385    ; Case_Ignorable\n0387          ; Case_Ignorable\n0483..0487    ; Case_Ignorable\n0488..0489    ; Case_Ignorable\n0559          ; Case_Ignorable\n055F          ; Case_Ignorable\n0591..05BD    ; Case_Ignorable\n05BF          ; Case_Ignorable\n05C1..05C2    ; Case_Ignorable\n05C4..05C5    ; Case_Ignorable\n05C7          ; Case_Ignorable\n05F4          ; Case_Ignorable\n0600..0605    ; Case_Ignorable\n0610..061A    ; Case_Ignorable\n061C          ; Case_Ignorable\n0640          ; Case_Ignorable\n064B..065F    ; Case_Ignorable\n0670          ; Case_Ignorable\n06D6..06DC    ; Case_Ignorable\n06DD          ; Case_Ignorable\n06DF..06E4    ; Case_Ignorable\n06E5..06E6    ; Case_Ignorable\n06E7..06E8    ; Case_Ignorable\n06EA..06ED    ; Case_Ignorable\n070F          ; Case_Ignorable\n0711          ; Case_Ignorable\n0730..074A    ; Case_Ignorable\n07A6..07B0    ; Case_Ignorable\n07EB..07F3    ; Case_Ignorable\n07F4..07F5    ; Case_Ignorable\n07FA          ; Case_Ignorable\n07FD          ; Case_Ignorable\n0816..0819    ; Case_Ignorable\n081A          ; Case_Ignorable\n081B..0823    ; Case_Ignorable\n0824          ; Case_Ignorable\n0825..0827    ; Case_Ignorable\n0828          ; Case_Ignorable\n0829..082D    ; Case_Ignorable\n0859..085B    ; Case_Ignorable\n0888          ; Case_Ignorable\n0890..0891    ; Case_Ignorable\n0897..089F    ; Case_Ignorable\n08C9          ; Case_Ignorable\n08CA..08E1    ; Case_Ignorable\n08E2          ; Case_Ignorable\n08E3..0902    ; Case_Ignorable\n093A          ; Case_Ignorable\n093C          ; Case_Ignorable\n0941..0948    ; Case_Ignorable\n094D          ; Case_Ignorable\n0951..0957    ; Case_Ignorable\n0962..0963    ; Case_Ignorable\n0971          ; Case_Ignorable\n0981          ; Case_Ignorable\n09BC          ; Case_Ignorable\n09C1..09C4    ; Case_Ignorable\n09CD          ; Case_Ignorable\n09E2..09E3    ; Case_Ignorable\n09FE          ; Case_Ignorable\n0A01..0A02    ; Case_Ignorable\n0A3C          ; Case_Ignorable\n0A41..0A42    ; Case_Ignorable\n0A47..0A48    ; Case_Ignorable\n0A4B..0A4D    ; Case_Ignorable\n0A51          ; Case_Ignorable\n0A70..0A71    ; Case_Ignorable\n0A75          ; Case_Ignorable\n0A81..0A82    ; Case_Ignorable\n0ABC          ; Case_Ignorable\n0AC1..0AC5    ; Case_Ignorable\n0AC7..0AC8    ; Case_Ignorable\n0ACD          ; Case_Ignorable\n0AE2..0AE3    ; Case_Ignorable\n0AFA..0AFF    ; Case_Ignorable\n0B01          ; Case_Ignorable\n0B3C          ; Case_Ignorable\n0B3F          ; Case_Ignorable\n0B41..0B44    ; Case_Ignorable\n0B4D          ; Case_Ignorable\n0B55..0B56    ; Case_Ignorable\n0B62..0B63    ; Case_Ignorable\n0B82          ; Case_Ignorable\n0BC0          ; Case_Ignorable\n0BCD          ; Case_Ignorable\n0C00          ; Case_Ignorable\n0C04          ; Case_Ignorable\n0C3C          ; Case_Ignorable\n0C3E..0C40    ; Case_Ignorable\n0C46..0C48    ; Case_Ignorable\n0C4A..0C4D    ; Case_Ignorable\n0C55..0C56    ; Case_Ignorable\n0C62..0C63    ; Case_Ignorable\n0C81          ; Case_Ignorable\n0CBC          ; Case_Ignorable\n0CBF          ; Case_Ignorable\n0CC6          ; Case_Ignorable\n0CCC..0CCD    ; Case_Ignorable\n0CE2..0CE3    ; Case_Ignorable\n0D00..0D01    ; Case_Ignorable\n0D3B..0D3C    ; Case_Ignorable\n0D41..0D44    ; Case_Ignorable\n0D4D          ; Case_Ignorable\n0D62..0D63    ; Case_Ignorable\n0D81          ; Case_Ignorable\n0DCA          ; Case_Ignorable\n0DD2..0DD4    ; Case_Ignorable\n0DD6          ; Case_Ignorable\n0E31          ; Case_Ignorable\n0E34..0E3A    ; Case_Ignorable\n0E46          ; Case_Ignorable\n0E47..0E4E    ; Case_Ignorable\n0EB1          ; Case_Ignorable\n0EB4..0EBC    ; Case_Ignorable\n0EC6          ; Case_Ignorable\n0EC8..0ECE    ; Case_Ignorable\n0F18..0F19    ; Case_Ignorable\n0F35          ; Case_Ignorable\n0F37          ; Case_Ignorable\n0F39          ; Case_Ignorable\n0F71..0F7E    ; Case_Ignorable\n0F80..0F84    ; Case_Ignorable\n0F86..0F87    ; Case_Ignorable\n0F8D..0F97    ; Case_Ignorable\n0F99..0FBC    ; Case_Ignorable\n0FC6          ; Case_Ignorable\n102D..1030    ; Case_Ignorable\n1032..1037    ; Case_Ignorable\n1039..103A    ; Case_Ignorable\n103D..103E    ; Case_Ignorable\n1058..1059    ; Case_Ignorable\n105E..1060    ; Case_Ignorable\n1071..1074    ; Case_Ignorable\n1082          ; Case_Ignorable\n1085..1086    ; Case_Ignorable\n108D          ; Case_Ignorable\n109D          ; Case_Ignorable\n10FC          ; Case_Ignorable\n135D..135F    ; Case_Ignorable\n1712..1714    ; Case_Ignorable\n1732..1733    ; Case_Ignorable\n1752..1753    ; Case_Ignorable\n1772..1773    ; Case_Ignorable\n17B4..17B5    ; Case_Ignorable\n17B7..17BD    ; Case_Ignorable\n17C6          ; Case_Ignorable\n17C9..17D3    ; Case_Ignorable\n17D7          ; Case_Ignorable\n17DD          ; Case_Ignorable\n180B..180D    ; Case_Ignorable\n180E          ; Case_Ignorable\n180F          ; Case_Ignorable\n1843          ; Case_Ignorable\n1885..1886    ; Case_Ignorable\n18A9          ; Case_Ignorable\n1920..1922    ; Case_Ignorable\n1927..1928    ; Case_Ignorable\n1932          ; Case_Ignorable\n1939..193B    ; Case_Ignorable\n1A17..1A18    ; Case_Ignorable\n1A1B          ; Case_Ignorable\n1A56          ; Case_Ignorable\n1A58..1A5E    ; Case_Ignorable\n1A60          ; Case_Ignorable\n1A62          ; Case_Ignorable\n1A65..1A6C    ; Case_Ignorable\n1A73..1A7C    ; Case_Ignorable\n1A7F          ; Case_Ignorable\n1AA7          ; Case_Ignorable\n1AB0..1ABD    ; Case_Ignorable\n1ABE          ; Case_Ignorable\n1ABF..1ACE    ; Case_Ignorable\n1B00..1B03    ; Case_Ignorable\n1B34          ; Case_Ignorable\n1B36..1B3A    ; Case_Ignorable\n1B3C          ; Case_Ignorable\n1B42          ; Case_Ignorable\n1B6B..1B73    ; Case_Ignorable\n1B80..1B81    ; Case_Ignorable\n1BA2..1BA5    ; Case_Ignorable\n1BA8..1BA9    ; Case_Ignorable\n1BAB..1BAD    ; Case_Ignorable\n1BE6          ; Case_Ignorable\n1BE8..1BE9    ; Case_Ignorable\n1BED          ; Case_Ignorable\n1BEF..1BF1    ; Case_Ignorable\n1C2C..1C33    ; Case_Ignorable\n1C36..1C37    ; Case_Ignorable\n1C78..1C7D    ; Case_Ignorable\n1CD0..1CD2    ; Case_Ignorable\n1CD4..1CE0    ; Case_Ignorable\n1CE2..1CE8    ; Case_Ignorable\n1CED          ; Case_Ignorable\n1CF4          ; Case_Ignorable\n1CF8..1CF9    ; Case_Ignorable\n1D2C..1D6A    ; Case_Ignorable\n1D78          ; Case_Ignorable\n1D9B..1DBF    ; Case_Ignorable\n1DC0..1DFF    ; Case_Ignorable\n1FBD          ; Case_Ignorable\n1FBF..1FC1    ; Case_Ignorable\n1FCD..1FCF    ; Case_Ignorable\n1FDD..1FDF    ; Case_Ignorable\n1FED..1FEF    ; Case_Ignorable\n1FFD..1FFE    ; Case_Ignorable\n200B..200F    ; Case_Ignorable\n2018          ; Case_Ignorable\n2019          ; Case_Ignorable\n2024          ; Case_Ignorable\n2027          ; Case_Ignorable\n202A..202E    ; Case_Ignorable\n2060..2064    ; Case_Ignorable\n2066..206F    ; Case_Ignorable\n2071          ; Case_Ignorable\n207F          ; Case_Ignorable\n2090..209C    ; Case_Ignorable\n20D0..20DC    ; Case_Ignorable\n20DD..20E0    ; Case_Ignorable\n20E1          ; Case_Ignorable\n20E2..20E4    ; Case_Ignorable\n20E5..20F0    ; Case_Ignorable\n2C7C..2C7D    ; Case_Ignorable\n2CEF..2CF1    ; Case_Ignorable\n2D6F          ; Case_Ignorable\n2D7F          ; Case_Ignorable\n2DE0..2DFF    ; Case_Ignorable\n2E2F          ; Case_Ignorable\n3005          ; Case_Ignorable\n302A..302D    ; Case_Ignorable\n3031..3035    ; Case_Ignorable\n303B          ; Case_Ignorable\n3099..309A    ; Case_Ignorable\n309B..309C    ; Case_Ignorable\n309D..309E    ; Case_Ignorable\n30FC..30FE    ; Case_Ignorable\nA015          ; Case_Ignorable\nA4F8..A4FD    ; Case_Ignorable\nA60C          ; Case_Ignorable\nA66F          ; Case_Ignorable\nA670..A672    ; Case_Ignorable\nA674..A67D    ; Case_Ignorable\nA67F          ; Case_Ignorable\nA69C..A69D    ; Case_Ignorable\nA69E..A69F    ; Case_Ignorable\nA6F0..A6F1    ; Case_Ignorable\nA700..A716    ; Case_Ignorable\nA717..A71F    ; Case_Ignorable\nA720..A721    ; Case_Ignorable\nA770          ; Case_Ignorable\nA788          ; Case_Ignorable\nA789..A78A    ; Case_Ignorable\nA7F2..A7F4    ; Case_Ignorable\nA7F8..A7F9    ; Case_Ignorable\nA802          ; Case_Ignorable\nA806          ; Case_Ignorable\nA80B          ; Case_Ignorable\nA825..A826    ; Case_Ignorable\nA82C          ; Case_Ignorable\nA8C4..A8C5    ; Case_Ignorable\nA8E0..A8F1    ; Case_Ignorable\nA8FF          ; Case_Ignorable\nA926..A92D    ; Case_Ignorable\nA947..A951    ; Case_Ignorable\nA980..A982    ; Case_Ignorable\nA9B3          ; Case_Ignorable\nA9B6..A9B9    ; Case_Ignorable\nA9BC..A9BD    ; Case_Ignorable\nA9CF          ; Case_Ignorable\nA9E5          ; Case_Ignorable\nA9E6          ; Case_Ignorable\nAA29..AA2E    ; Case_Ignorable\nAA31..AA32    ; Case_Ignorable\nAA35..AA36    ; Case_Ignorable\nAA43          ; Case_Ignorable\nAA4C          ; Case_Ignorable\nAA70          ; Case_Ignorable\nAA7C          ; Case_Ignorable\nAAB0          ; Case_Ignorable\nAAB2..AAB4    ; Case_Ignorable\nAAB7..AAB8    ; Case_Ignorable\nAABE..AABF    ; Case_Ignorable\nAAC1          ; Case_Ignorable\nAADD          ; Case_Ignorable\nAAEC..AAED    ; Case_Ignorable\nAAF3..AAF4    ; Case_Ignorable\nAAF6          ; Case_Ignorable\nAB5B          ; Case_Ignorable\nAB5C..AB5F    ; Case_Ignorable\nAB69          ; Case_Ignorable\nAB6A..AB6B    ; Case_Ignorable\nABE5          ; Case_Ignorable\nABE8          ; Case_Ignorable\nABED          ; Case_Ignorable\n```\n\n----------------------------------------\n\nTITLE: Configuring sourcekitdInProc Build for Non-Darwin Systems in CMake\nDESCRIPTION: This snippet sets up the build configuration for sourcekitdInProc on non-Darwin systems. It adds a SourceKit library with specified headers and installation component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n  else()\n    add_sourcekit_library(sourcekitdInProc\n      ${sourcekitdInProc_args}\n      HEADERS\n        ${SOURCEKITD_SOURCE_DIR}/include/sourcekitd/sourcekitd.h\n      INSTALL_IN_COMPONENT sourcekit-inproc\n      SHARED\n      HAS_SWIFT_MODULES\n    )\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Running clang-tidy on a Single Swift Source File\nDESCRIPTION: This command runs clang-tidy on a specific Swift source file using the compilation database generated during the Swift build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_54\n\nLANGUAGE: shell\nCODE:\n```\nclang-tidy -p=$PATH_TO_BUILD/swift-macosx-$(uname -m)/compile_commands.json $FULL_PATH_TO_FILE\n```\n\n----------------------------------------\n\nTITLE: Deleting an LLDB Breakpoint\nDESCRIPTION: Deletes the LLDB breakpoint with ID 2.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_18\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) br delete 2\n```\n\n----------------------------------------\n\nTITLE: Demangling Swift Function Signature with Block Convention\nDESCRIPTION: This code snippet demonstrates a Swift function signature and its demangled form. The function takes a Bool parameter and returns void, using the block calling convention.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings-with-clang-types.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n$s3tmp1hyyySbXzB24_ZTSU13block_pointerFvaEF ---> tmp.h(@convention(block, mangledCType: \"_ZTSU13block_pointerFvaE\") (Swift.Bool) -> ()) -> ()\n```\n\n----------------------------------------\n\nTITLE: SROA Tuple Splitting with Debug Information\nDESCRIPTION: Shows how tuples are split during optimization while maintaining debug information through tuple fragments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_4\n\nLANGUAGE: sil\nCODE:\n```\nalloc_stack $(Int, Int), var, name \"pair\"\n// -->\nalloc_stack $Int, var, name \"pair\", type $(Int, Int), expr op_tuple_fragment:$(Int, Int):0\nalloc_stack $Int, var, name \"pair\", type $(Int, Int), expr op_tuple_fragment:$(Int, Int):1\n// -->\nalloc_stack $Builtin.Int64, var, name \"pair\", type $(Int, Int), expr op_tuple_fragment:$(Int, Int):0:op_fragment:#Int._value\nalloc_stack $Builtin.Int64, var, name \"pair\", type $(Int, Int), expr op_tuple_fragment:$(Int, Int):1:op_fragment:#Int._value\n```\n\n----------------------------------------\n\nTITLE: Analyzing Fixed-layout Type Changes in Swift\nDESCRIPTION: This section documents changes to fixed-layout types in Swift, including modifications to enum elements, variables, and property characteristics in non-resilient types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n/* Fixed-layout Type Changes */\ncake: EnumElement FrozenKind.AddedCase is added to a non-resilient type\ncake: EnumElement FrozenKind.Fixed in a non-resilient type changes position from 1 to 2\ncake: EnumElement FrozenKind.Rigid in a non-resilient type changes position from 2 to 1\ncake: Var fixedLayoutStruct.$__lazy_storage_$_lazy_d is added to a non-resilient type\ncake: Var fixedLayoutStruct.a in a non-resilient type changes position from 1 to 0\ncake: Var fixedLayoutStruct.b in a non-resilient type changes position from 0 to 1\ncake: Var fixedLayoutStruct.c is added to a non-resilient type\ncake: Var fixedLayoutStruct2.BecomeFixedBinaryOrder is now a stored property\ncake: Var fixedLayoutStruct2.NoLongerWithFixedBinaryOrder is no longer a stored property\n```\n\n----------------------------------------\n\nTITLE: Different Syntax Options for Enum Declarations\nDESCRIPTION: Examples of different syntax options for declaring enums in Swift, showing both separate case declarations and combined case declarations with commas.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nenum Color {\n  case Red\n  case Green\n  case Blue\n}\n\nenum Optional<T> {\n  case Some(T)\n  case None\n}\n\nenum IntOrInfinity {\n  case Int(Int)\n  case NegInfinity\n  case PosInfinity\n}\n```\n\nLANGUAGE: swift\nCODE:\n```\nenum IntOrInfinity {\n  case NegInfinity, Int(Int), PosInfinity\n}\n```\n\n----------------------------------------\n\nTITLE: Adding llbuild to PATH on Windows\nDESCRIPTION: This command adds the llbuild binary directory to the system PATH environment variable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_18\n\nLANGUAGE: cmd\nCODE:\n```\npath S:\\b\\6\\bin;%PATH%\n```\n\n----------------------------------------\n\nTITLE: Defining C/CXX Sub-project for Swift Compiler in CMake\nDESCRIPTION: Within the `else` block (when `BOOTSTRAPPING_MODE` is active), this command defines a CMake project named `SwiftInTheCompiler` that uses only C and CXX languages. Explicitly excluding Swift here prevents issues if a host Swift toolchain isn't available during bootstrapping.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nproject(SwiftInTheCompiler LANGUAGES C CXX)\n```\n\n----------------------------------------\n\nTITLE: Unicode Range Definition - Various Scripts\nDESCRIPTION: Defines Unicode code point ranges for multiple scripts including characters, numbers, punctuation marks and special symbols. Each range includes the script name, character type (Lo, Mn, Mc, Po, etc), and description of the characters covered.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_100\n\nLANGUAGE: unicode\nCODE:\n```\n11A50         ; Soyombo # Lo       SOYOMBO LETTER A\n11A51..11A56  ; Soyombo # Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE\n11A57..11A58  ; Soyombo # Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU\n11A59..11A5B  ; Soyombo # Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK\n11A5C..11A89  ; Soyombo # Lo  [46] SOYOMBO LETTER KA..SOYOMBO CLUSTER-INITIAL LETTER SA\n```\n\n----------------------------------------\n\nTITLE: Android Modulemap Resource Configuration\nDESCRIPTION: Configures and installs Android-specific modulemaps, NDK headers, and API notes for both dynamic and static library paths.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"ANDROID\" IN_LIST SWIFT_SDKS)\n  set(android_modulemap_source \"android.modulemap\")\n  set(android_ndk_header_source \"SwiftAndroidNDK.h\")\n  set(android_bionic_header_source \"SwiftBionic.h\")\n  # ... rest of android modulemap configuration ...\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring Swift Host Library in CMake\nDESCRIPTION: This snippet adds a static Swift host library named swiftConstExtract, links it with swiftClangImporter and swiftAST libraries, and sets LLVM availability. It defines the library's source file and its dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ConstExtract/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftConstExtract STATIC\n  ConstExtract.cpp\n  )\ntarget_link_libraries(swiftConstExtract PRIVATE\n  swiftClangImporter\n  swiftAST)\n\nset_swift_llvm_is_available(swiftConstExtract)\n```\n\n----------------------------------------\n\nTITLE: Setting BOOTSTRAPPING_MODE based on SWIFT_ENABLE_SWIFT_IN_SWIFT in CMake\nDESCRIPTION: Conditionally defines the `BOOTSTRAPPING_MODE` cache variable based on the `SWIFT_ENABLE_SWIFT_IN_SWIFT` option. If enabled, it allows selecting a bootstrapping strategy (HOSTTOOLS, BOOTSTRAPPING, etc.). If disabled, it sets `BOOTSTRAPPING_MODE` to OFF and also disables `SWIFT_BUILD_SWIFT_SYNTAX`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_ENABLE_SWIFT_IN_SWIFT)\n  set(BOOTSTRAPPING_MODE HOSTTOOLS CACHE STRING [=[\n  How to build the swift compiler modules. Possible values are\n      HOSTTOOLS:     build with a pre-installed toolchain\n      BOOTSTRAPPING: build with a 2-stage bootstrapping process\n      BOOTSTRAPPING-WITH-HOSTLIBS:   build with a 2-stage bootstrapping process,\n                     but the compiler links against the host system swift libs (macOS only)\n      CROSSCOMPILE:  cross-compiledwith a native host compiler, provided in\n                     `SWIFT_NATIVE_SWIFT_TOOLS_PATH` (non-Darwin only)\n      CROSSCOMPILE-WITH-HOSTLIBS:    build with a bootstrapping-with-hostlibs compiled\n                                     compiler, provided in `SWIFT_NATIVE_SWIFT_TOOLS_PATH`\n  ]=])\nelse()\n  set(BOOTSTRAPPING_MODE OFF)\n  set(SWIFT_BUILD_SWIFT_SYNTAX OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Swift Libraries to Clang Importer Tests\nDESCRIPTION: Specifies the required Swift libraries that must be linked to the SwiftClangImporterTests target. The test depends on swiftClangImporter, swiftSema, swiftParse, and swiftAST libraries for proper functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/ClangImporter/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(SwiftClangImporterTests\n    PRIVATE\n    swiftClangImporter\n    swiftSema\n    swiftParse\n    swiftAST\n)\n```\n\n----------------------------------------\n\nTITLE: Testing Minimal Freestanding Stdlib\nDESCRIPTION: Command for testing the minimal freestanding stdlib on macho using toolchain specific preset testing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npreset=stdlib_S_standalone_minimal_macho_x86_64,build,test\n@swift-ci please test with toolchain and preset\n```\n\n----------------------------------------\n\nTITLE: Configuring WatchOS Architecture Support\nDESCRIPTION: Removes 64-bit architectures (arm64 and arm64e) from WatchOS build targets since they don't support back-deployment.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/Compatibility50/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(REMOVE_ITEM SWIFT_SDK_WATCHOS_ARCHITECTURES \"arm64\" \"arm64e\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compatibility 5.6 Library Build in CMake\nDESCRIPTION: This CMake script sets up the build configuration for the Swift Compatibility 5.6 library. It specifies the library name, includes directories, compilation definitions, and source files. The script also sets various flags for different target platforms and includes deployment version specifications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/Compatibility56/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(library_name \"swiftCompatibility56\")\n\ninclude_directories(\"include/\" \"${SWIFT_STDLIB_SOURCE_DIR}\")\n\nadd_compile_definitions(SWIFT_COMPATIBILITY56)\nadd_swift_target_library(\"${library_name}\" STATIC\n  Overrides.cpp\n  Concurrency/Task.cpp\n  Concurrency/TaskLocal.cpp\n  Concurrency/TaskStatus.cpp\n  Concurrency/Error.cpp\n  Concurrency/Actor.cpp\n  Concurrency/AsyncLet.cpp\n  Concurrency/ThreadSanitizer.cpp\n  Concurrency/TaskAlloc.cpp\n  Concurrency/MutexPThread.cpp\n  Runtime/Exclusivity.cpp\n\n  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}\n\n  C_COMPILE_FLAGS\n    ${CXX_COMPILE_FLAGS}\n    \"-D__STDC_WANT_LIB_EXT1__=1\"\n    \"-DSWIFT_THREADING_IS_COMPATIBILITY_LIBRARY\"\n  LINK_FLAGS ${CXX_LINK_FLAGS}\n  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n\n  INSTALL_IN_COMPONENT compiler\n  INSTALL_WITH_SHARED)\n```\n\n----------------------------------------\n\nTITLE: Adding libSwiftScan Subdirectory to Swift Project\nDESCRIPTION: This CMake command adds the libSwiftScan tool as a subdirectory to the Swift project build system. It ensures that the libSwiftScan component is included and built as part of the overall Swift project.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Tooling/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_tool_subdirectory(libSwiftScan)\n```\n\n----------------------------------------\n\nTITLE: Checking Sccache Version (sh)\nDESCRIPTION: Executes `sccache --version` to check if the optional Sccache build caching tool is installed correctly and accessible in the PATH, and to display its version. This is relevant only if the user intends to use Sccache.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsccache --version\n```\n\n----------------------------------------\n\nTITLE: Verifying Alphabetic Sorting in Swift Benchmark_O\nDESCRIPTION: Tests that benchmarks are listed in alphabetical order when using the --list option. This verifies the sorting behavior of the benchmark listing functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O --list \\\nRUN:             | %FileCheck %s --check-prefix ALPHASORT\nALPHASORT: COWArrayGuaranteedParameterOverhead\nALPHASORT: COWTree\nALPHASORT: ChainedFilterMap\nALPHASORT: Chars\nALPHASORT: FatCompactMap\n```\n\n----------------------------------------\n\nTITLE: Line Breaking Test Cases for Hangul Syllables\nDESCRIPTION: Comprehensive test cases showing line breaking behavior between Hangul syllables and various Unicode characters. Tests include interactions with spacing marks, control characters, joiners, and other special Unicode characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 11A8 ÷ 0378 ÷ #  ÷ [0.2] HANGUL JONGSEONG KIYEOK (T) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n÷ 11A8 × 0308 ÷ 0378 ÷  #  ÷ [0.2] HANGUL JONGSEONG KIYEOK (T) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Code Points with Bidi_Mirrored Property\nDESCRIPTION: This snippet enumerates Unicode code points that have the Bidi_Mirrored property. It includes the code point ranges, their general categories, and character names. The list covers various symbols and punctuation marks used in mathematical notation and text formatting.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedBinaryProperties.txt#2025-04-23_snippet_1\n\nLANGUAGE: Unicode\nCODE:\n```\n2A0A..2A1C    ; Bidi_Mirrored # Sm  [19] MODULO TWO SUM..INTEGRAL WITH UNDERBAR\n2A1E..2A21    ; Bidi_Mirrored # Sm   [4] LARGE LEFT TRIANGLE OPERATOR..Z NOTATION SCHEMA PROJECTION\n2A24          ; Bidi_Mirrored # Sm       PLUS SIGN WITH TILDE ABOVE\n2A26          ; Bidi_Mirrored # Sm       PLUS SIGN WITH TILDE BELOW\n2A29          ; Bidi_Mirrored # Sm       MINUS SIGN WITH COMMA ABOVE\n2A2B..2A2E    ; Bidi_Mirrored # Sm   [4] MINUS SIGN WITH FALLING DOTS..PLUS SIGN IN RIGHT HALF CIRCLE\n2A34..2A35    ; Bidi_Mirrored # Sm   [2] MULTIPLICATION SIGN IN LEFT HALF CIRCLE..MULTIPLICATION SIGN IN RIGHT HALF CIRCLE\n2A3C..2A3E    ; Bidi_Mirrored # Sm   [3] INTERIOR PRODUCT..Z NOTATION RELATIONAL COMPOSITION\n2A57..2A58    ; Bidi_Mirrored # Sm   [2] SLOPING LARGE OR..SLOPING LARGE AND\n2A64..2A65    ; Bidi_Mirrored # Sm   [2] Z NOTATION DOMAIN ANTIRESTRICTION..Z NOTATION RANGE ANTIRESTRICTION\n2A6A..2A6D    ; Bidi_Mirrored # Sm   [4] TILDE OPERATOR WITH DOT ABOVE..CONGRUENT WITH DOT ABOVE\n2A6F..2A70    ; Bidi_Mirrored # Sm   [2] ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT..APPROXIMATELY EQUAL OR EQUAL TO\n2A73..2A74    ; Bidi_Mirrored # Sm   [2] EQUALS SIGN ABOVE TILDE OPERATOR..DOUBLE COLON EQUAL\n2A79..2AA3    ; Bidi_Mirrored # Sm  [43] LESS-THAN WITH CIRCLE INSIDE..DOUBLE NESTED LESS-THAN WITH UNDERBAR\n2AA6..2AAD    ; Bidi_Mirrored # Sm   [8] LESS-THAN CLOSED BY CURVE..LARGER THAN OR EQUAL TO\n2AAF..2AD6    ; Bidi_Mirrored # Sm  [40] PRECEDES ABOVE SINGLE-LINE EQUALS SIGN..SUPERSET ABOVE SUPERSET\n2ADC          ; Bidi_Mirrored # Sm       FORKING\n2ADE          ; Bidi_Mirrored # Sm       SHORT LEFT TACK\n2AE2..2AE6    ; Bidi_Mirrored # Sm   [5] VERTICAL BAR TRIPLE RIGHT TURNSTILE..LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL\n2AEC..2AEE    ; Bidi_Mirrored # Sm   [3] DOUBLE STROKE NOT SIGN..DOES NOT DIVIDE WITH REVERSED NEGATION SLASH\n2AF3          ; Bidi_Mirrored # Sm       PARALLEL WITH TILDE OPERATOR\n2AF7..2AFB    ; Bidi_Mirrored # Sm   [5] TRIPLE NESTED LESS-THAN..TRIPLE SOLIDUS BINARY RELATION\n2AFD          ; Bidi_Mirrored # Sm       DOUBLE SOLIDUS OPERATOR\n2BFE          ; Bidi_Mirrored # So       REVERSED RIGHT ANGLE\n2E02          ; Bidi_Mirrored # Pi       LEFT SUBSTITUTION BRACKET\n2E03          ; Bidi_Mirrored # Pf       RIGHT SUBSTITUTION BRACKET\n2E04          ; Bidi_Mirrored # Pi       LEFT DOTTED SUBSTITUTION BRACKET\n2E05          ; Bidi_Mirrored # Pf       RIGHT DOTTED SUBSTITUTION BRACKET\n2E09          ; Bidi_Mirrored # Pi       LEFT TRANSPOSITION BRACKET\n2E0A          ; Bidi_Mirrored # Pf       RIGHT TRANSPOSITION BRACKET\n2E0C          ; Bidi_Mirrored # Pi       LEFT RAISED OMISSION BRACKET\n2E0D          ; Bidi_Mirrored # Pf       RIGHT RAISED OMISSION BRACKET\n2E1C          ; Bidi_Mirrored # Pi       LEFT LOW PARAPHRASE BRACKET\n2E1D          ; Bidi_Mirrored # Pf       RIGHT LOW PARAPHRASE BRACKET\n2E20          ; Bidi_Mirrored # Pi       LEFT VERTICAL BAR WITH QUILL\n2E21          ; Bidi_Mirrored # Pf       RIGHT VERTICAL BAR WITH QUILL\n2E22          ; Bidi_Mirrored # Ps       TOP LEFT HALF BRACKET\n2E23          ; Bidi_Mirrored # Pe       TOP RIGHT HALF BRACKET\n2E24          ; Bidi_Mirrored # Ps       BOTTOM LEFT HALF BRACKET\n2E25          ; Bidi_Mirrored # Pe       BOTTOM RIGHT HALF BRACKET\n2E26          ; Bidi_Mirrored # Ps       LEFT SIDEWAYS U BRACKET\n2E27          ; Bidi_Mirrored # Pe       RIGHT SIDEWAYS U BRACKET\n2E28          ; Bidi_Mirrored # Ps       LEFT DOUBLE PARENTHESIS\n2E29          ; Bidi_Mirrored # Pe       RIGHT DOUBLE PARENTHESIS\n2E55          ; Bidi_Mirrored # Ps       LEFT SQUARE BRACKET WITH STROKE\n2E56          ; Bidi_Mirrored # Pe       RIGHT SQUARE BRACKET WITH STROKE\n2E57          ; Bidi_Mirrored # Ps       LEFT SQUARE BRACKET WITH DOUBLE STROKE\n2E58          ; Bidi_Mirrored # Pe       RIGHT SQUARE BRACKET WITH DOUBLE STROKE\n2E59          ; Bidi_Mirrored # Ps       TOP HALF LEFT PARENTHESIS\n2E5A          ; Bidi_Mirrored # Pe       TOP HALF RIGHT PARENTHESIS\n2E5B          ; Bidi_Mirrored # Ps       BOTTOM HALF LEFT PARENTHESIS\n2E5C          ; Bidi_Mirrored # Pe       BOTTOM HALF RIGHT PARENTHESIS\n3008          ; Bidi_Mirrored # Ps       LEFT ANGLE BRACKET\n3009          ; Bidi_Mirrored # Pe       RIGHT ANGLE BRACKET\n300A          ; Bidi_Mirrored # Ps       LEFT DOUBLE ANGLE BRACKET\n300B          ; Bidi_Mirrored # Pe       RIGHT DOUBLE ANGLE BRACKET\n300C          ; Bidi_Mirrored # Ps       LEFT CORNER BRACKET\n300D          ; Bidi_Mirrored # Pe       RIGHT CORNER BRACKET\n300E          ; Bidi_Mirrored # Ps       LEFT WHITE CORNER BRACKET\n300F          ; Bidi_Mirrored # Pe       RIGHT WHITE CORNER BRACKET\n3010          ; Bidi_Mirrored # Ps       LEFT BLACK LENTICULAR BRACKET\n3011          ; Bidi_Mirrored # Pe       RIGHT BLACK LENTICULAR BRACKET\n3014          ; Bidi_Mirrored # Ps       LEFT TORTOISE SHELL BRACKET\n3015          ; Bidi_Mirrored # Pe       RIGHT TORTOISE SHELL BRACKET\n3016          ; Bidi_Mirrored # Ps       LEFT WHITE LENTICULAR BRACKET\n3017          ; Bidi_Mirrored # Pe       RIGHT WHITE LENTICULAR BRACKET\n3018          ; Bidi_Mirrored # Ps       LEFT WHITE TORTOISE SHELL BRACKET\n3019          ; Bidi_Mirrored # Pe       RIGHT WHITE TORTOISE SHELL BRACKET\n301A          ; Bidi_Mirrored # Ps       LEFT WHITE SQUARE BRACKET\n301B          ; Bidi_Mirrored # Pe       RIGHT WHITE SQUARE BRACKET\nFE59          ; Bidi_Mirrored # Ps       SMALL LEFT PARENTHESIS\nFE5A          ; Bidi_Mirrored # Pe       SMALL RIGHT PARENTHESIS\nFE5B          ; Bidi_Mirrored # Ps       SMALL LEFT CURLY BRACKET\nFE5C          ; Bidi_Mirrored # Pe       SMALL RIGHT CURLY BRACKET\nFE5D          ; Bidi_Mirrored # Ps       SMALL LEFT TORTOISE SHELL BRACKET\nFE5E          ; Bidi_Mirrored # Pe       SMALL RIGHT TORTOISE SHELL BRACKET\nFE64..FE65    ; Bidi_Mirrored # Sm   [2] SMALL LESS-THAN SIGN..SMALL GREATER-THAN SIGN\nFF08          ; Bidi_Mirrored # Ps       FULLWIDTH LEFT PARENTHESIS\nFF09          ; Bidi_Mirrored # Pe       FULLWIDTH RIGHT PARENTHESIS\nFF1C          ; Bidi_Mirrored # Sm       FULLWIDTH LESS-THAN SIGN\nFF1E          ; Bidi_Mirrored # Sm       FULLWIDTH GREATER-THAN SIGN\nFF3B          ; Bidi_Mirrored # Ps       FULLWIDTH LEFT SQUARE BRACKET\nFF3D          ; Bidi_Mirrored # Pe       FULLWIDTH RIGHT SQUARE BRACKET\nFF5B          ; Bidi_Mirrored # Ps       FULLWIDTH LEFT CURLY BRACKET\nFF5D          ; Bidi_Mirrored # Pe       FULLWIDTH RIGHT CURLY BRACKET\nFF5F          ; Bidi_Mirrored # Ps       FULLWIDTH LEFT WHITE PARENTHESIS\nFF60          ; Bidi_Mirrored # Pe       FULLWIDTH RIGHT WHITE PARENTHESIS\nFF62          ; Bidi_Mirrored # Ps       HALFWIDTH LEFT CORNER BRACKET\nFF63          ; Bidi_Mirrored # Pe       HALFWIDTH RIGHT CORNER BRACKET\n1D6DB         ; Bidi_Mirrored # Sm       MATHEMATICAL BOLD PARTIAL DIFFERENTIAL\n1D715         ; Bidi_Mirrored # Sm       MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL\n1D74F         ; Bidi_Mirrored # Sm       MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL\n1D789         ; Bidi_Mirrored # Sm       MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL\n1D7C3         ; Bidi_Mirrored # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Lepcha Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Lepcha script, including letters, subjoined letters, vowel signs, consonant signs, punctuation marks, and digits. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_45\n\nLANGUAGE: Unicode\nCODE:\n```\n1C00..1C23    ; Lepcha # Lo  [36] LEPCHA LETTER KA..LEPCHA LETTER A\n1C24..1C2B    ; Lepcha # Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU\n1C2C..1C33    ; Lepcha # Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T\n1C34..1C35    ; Lepcha # Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG\n1C36..1C37    ; Lepcha # Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA\n1C3B..1C3F    ; Lepcha # Po   [5] LEPCHA PUNCTUATION TA-ROL..LEPCHA PUNCTUATION TSHOOK\n1C40..1C49    ; Lepcha # Nd  [10] LEPCHA DIGIT ZERO..LEPCHA DIGIT NINE\n1C4D..1C4F    ; Lepcha # Lo   [3] LEPCHA LETTER TTA..LEPCHA LETTER DDA\n```\n\n----------------------------------------\n\nTITLE: Declaring Unions with Value and Reference Semantics in Swift\nDESCRIPTION: Demonstrates how to declare unions with explicit value and reference semantics for their associated values. Includes examples of recursive types and nullable types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nunion Foo {\n  case Bar(ref bar:Int)\n  case Bas(val bas:SomeClass)\n}\n\n// A list with value semantics--copying the list recursively copies the\n// entire list\nunion List<T> {\n  case Nil()\n  case Cons(car:T, cdr:List<T>)\n}\n\n// A list node with reference semantics--copying the node creates a node\n// that shares structure with the tail of the list\nunion Node<T> {\n  case Nil()\n  case Cons(car:T, ref cdr:Node<T>)\n}\n\nref? Int // Nullable reference to Int: Nullable<ref T>\nref Int? // Reference to nullable Int: ref Nullable<T>\nval? SomeClass // Nullable SomeClass value: Nullable<val T>\nval Int? // nullable Int: val Nullable<T> -- the default for Nullable<T>\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Libraries for Swift Concurrency\nDESCRIPTION: Sets up Windows-specific library dependencies for the Swift concurrency runtime, including Synchronization and mincore libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_concurrency_private_link_libraries)\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  list(APPEND swift_concurrency_private_link_libraries\n    Synchronization\n    mincore.lib # For QueryInterruptTime()\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Quotation_Mark Characters in Unicode\nDESCRIPTION: This snippet defines the Unicode code points that have the Quotation_Mark property. It includes various types of quotation marks used in different scripts and contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n0022          ; Quotation_Mark # Po       QUOTATION MARK\n0027          ; Quotation_Mark # Po       APOSTROPHE\n00AB          ; Quotation_Mark # Pi       LEFT-POINTING DOUBLE ANGLE QUOTATION MARK\n00BB          ; Quotation_Mark # Pf       RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK\n2018          ; Quotation_Mark # Pi       LEFT SINGLE QUOTATION MARK\n2019          ; Quotation_Mark # Pf       RIGHT SINGLE QUOTATION MARK\n201A          ; Quotation_Mark # Ps       SINGLE LOW-9 QUOTATION MARK\n201B..201C    ; Quotation_Mark # Pi   [2] SINGLE HIGH-REVERSED-9 QUOTATION MARK..LEFT DOUBLE QUOTATION MARK\n201D          ; Quotation_Mark # Pf       RIGHT DOUBLE QUOTATION MARK\n201E          ; Quotation_Mark # Ps       DOUBLE LOW-9 QUOTATION MARK\n201F          ; Quotation_Mark # Pi       DOUBLE HIGH-REVERSED-9 QUOTATION MARK\n2039          ; Quotation_Mark # Pi       SINGLE LEFT-POINTING ANGLE QUOTATION MARK\n203A          ; Quotation_Mark # Pf       SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\n2E42          ; Quotation_Mark # Ps       DOUBLE LOW-REVERSED-9 QUOTATION MARK\n300C          ; Quotation_Mark # Ps       LEFT CORNER BRACKET\n300D          ; Quotation_Mark # Pe       RIGHT CORNER BRACKET\n300E          ; Quotation_Mark # Ps       LEFT WHITE CORNER BRACKET\n300F          ; Quotation_Mark # Pe       RIGHT WHITE CORNER BRACKET\n301D          ; Quotation_Mark # Ps       REVERSED DOUBLE PRIME QUOTATION MARK\n301E..301F    ; Quotation_Mark # Pe   [2] DOUBLE PRIME QUOTATION MARK..LOW DOUBLE PRIME QUOTATION MARK\nFE41          ; Quotation_Mark # Ps       PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET\nFE42          ; Quotation_Mark # Pe       PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET\nFE43          ; Quotation_Mark # Ps       PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET\nFE44          ; Quotation_Mark # Pe       PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET\nFF02          ; Quotation_Mark # Po       FULLWIDTH QUOTATION MARK\nFF07          ; Quotation_Mark # Po       FULLWIDTH APOSTROPHE\nFF62          ; Quotation_Mark # Ps       HALFWIDTH LEFT CORNER BRACKET\nFF63          ; Quotation_Mark # Pe       HALFWIDTH RIGHT CORNER BRACKET\n```\n\n----------------------------------------\n\nTITLE: Creating Protocol Definition in Swift\nDESCRIPTION: Defines an empty protocol that can be implemented by conforming types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.module.printed.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol SameNameProtocol {\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dynamic Swift Runtime Registrar\nDESCRIPTION: Conditionally installs the shared runtime registrar if dynamic standard library building is enabled and the SDK doesn't require static-only builds. The files are installed to the appropriate lib/swift subdirectory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n      if(SWIFT_BUILD_DYNAMIC_STDLIB AND NOT SWIFT_SDK_${sdk}_STATIC_ONLY)\n        swift_install_in_component(FILES\n                                     \"${shared_runtime_registrar}\"\n                                   DESTINATION\n                                     \"lib/swift/${arch_subdir}\"\n                                   COMPONENT\n                                     stdlib)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Grapheme_Extend Character Ranges\nDESCRIPTION: This snippet lists Unicode character ranges that have the Grapheme_Extend property. Each line specifies either a single character or a range of characters, followed by a semicolon and the property name 'Grapheme_Extend'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_37\n\nLANGUAGE: Unicode\nCODE:\n```\n0300..036F    ; Grapheme_Extend\n0483..0487    ; Grapheme_Extend\n0488..0489    ; Grapheme_Extend\n0591..05BD    ; Grapheme_Extend\n05BF          ; Grapheme_Extend\n05C1..05C2    ; Grapheme_Extend\n05C4..05C5    ; Grapheme_Extend\n05C7          ; Grapheme_Extend\n0610..061A    ; Grapheme_Extend\n064B..065F    ; Grapheme_Extend\n0670          ; Grapheme_Extend\n06D6..06DC    ; Grapheme_Extend\n06DF..06E4    ; Grapheme_Extend\n06E7..06E8    ; Grapheme_Extend\n06EA..06ED    ; Grapheme_Extend\n0711          ; Grapheme_Extend\n0730..074A    ; Grapheme_Extend\n07A6..07B0    ; Grapheme_Extend\n07EB..07F3    ; Grapheme_Extend\n07FD          ; Grapheme_Extend\n0816..0819    ; Grapheme_Extend\n081B..0823    ; Grapheme_Extend\n0825..0827    ; Grapheme_Extend\n0829..082D    ; Grapheme_Extend\n0859..085B    ; Grapheme_Extend\n0897..089F    ; Grapheme_Extend\n08CA..08E1    ; Grapheme_Extend\n08E3..0902    ; Grapheme_Extend\n093A          ; Grapheme_Extend\n093C          ; Grapheme_Extend\n0941..0948    ; Grapheme_Extend\n094D          ; Grapheme_Extend\n0951..0957    ; Grapheme_Extend\n0962..0963    ; Grapheme_Extend\n0981          ; Grapheme_Extend\n09BC          ; Grapheme_Extend\n09BE          ; Grapheme_Extend\n09C1..09C4    ; Grapheme_Extend\n09CD          ; Grapheme_Extend\n09D7          ; Grapheme_Extend\n09E2..09E3    ; Grapheme_Extend\n09FE          ; Grapheme_Extend\n0A01..0A02    ; Grapheme_Extend\n0A3C          ; Grapheme_Extend\n0A41..0A42    ; Grapheme_Extend\n0A47..0A48    ; Grapheme_Extend\n0A4B..0A4D    ; Grapheme_Extend\n0A51          ; Grapheme_Extend\n0A70..0A71    ; Grapheme_Extend\n0A75          ; Grapheme_Extend\n0A81..0A82    ; Grapheme_Extend\n0ABC          ; Grapheme_Extend\n0AC1..0AC5    ; Grapheme_Extend\n0AC7..0AC8    ; Grapheme_Extend\n0ACD          ; Grapheme_Extend\n0AE2..0AE3    ; Grapheme_Extend\n0AFA..0AFF    ; Grapheme_Extend\n0B01          ; Grapheme_Extend\n0B3C          ; Grapheme_Extend\n0B3E          ; Grapheme_Extend\n0B3F          ; Grapheme_Extend\n0B41..0B44    ; Grapheme_Extend\n0B4D          ; Grapheme_Extend\n0B55..0B56    ; Grapheme_Extend\n0B57          ; Grapheme_Extend\n0B62..0B63    ; Grapheme_Extend\n0B82          ; Grapheme_Extend\n0BBE          ; Grapheme_Extend\n0BC0          ; Grapheme_Extend\n0BCD          ; Grapheme_Extend\n0BD7          ; Grapheme_Extend\n0C00          ; Grapheme_Extend\n0C04          ; Grapheme_Extend\n0C3C          ; Grapheme_Extend\n0C3E..0C40    ; Grapheme_Extend\n0C46..0C48    ; Grapheme_Extend\n0C4A..0C4D    ; Grapheme_Extend\n0C55..0C56    ; Grapheme_Extend\n0C62..0C63    ; Grapheme_Extend\n0C81          ; Grapheme_Extend\n0CBC          ; Grapheme_Extend\n0CBF          ; Grapheme_Extend\n0CC0          ; Grapheme_Extend\n0CC2          ; Grapheme_Extend\n0CC6          ; Grapheme_Extend\n0CC7..0CC8    ; Grapheme_Extend\n0CCA..0CCB    ; Grapheme_Extend\n0CCC..0CCD    ; Grapheme_Extend\n0CD5..0CD6    ; Grapheme_Extend\n0CE2..0CE3    ; Grapheme_Extend\n0D00..0D01    ; Grapheme_Extend\n0D3B..0D3C    ; Grapheme_Extend\n0D3E          ; Grapheme_Extend\n0D41..0D44    ; Grapheme_Extend\n0D4D          ; Grapheme_Extend\n0D57          ; Grapheme_Extend\n0D62..0D63    ; Grapheme_Extend\n0D81          ; Grapheme_Extend\n0DCA          ; Grapheme_Extend\n0DCF          ; Grapheme_Extend\n0DD2..0DD4    ; Grapheme_Extend\n0DD6          ; Grapheme_Extend\n0DDF          ; Grapheme_Extend\n0E31          ; Grapheme_Extend\n0E34..0E3A    ; Grapheme_Extend\n0E47..0E4E    ; Grapheme_Extend\n0EB1          ; Grapheme_Extend\n0EB4..0EBC    ; Grapheme_Extend\n0EC8..0ECE    ; Grapheme_Extend\n0F18..0F19    ; Grapheme_Extend\n0F35          ; Grapheme_Extend\n0F37          ; Grapheme_Extend\n0F39          ; Grapheme_Extend\n0F71..0F7E    ; Grapheme_Extend\n0F80..0F84    ; Grapheme_Extend\n0F86..0F87    ; Grapheme_Extend\n0F8D..0F97    ; Grapheme_Extend\n0F99..0FBC    ; Grapheme_Extend\n0FC6          ; Grapheme_Extend\n102D..1030    ; Grapheme_Extend\n1032..1037    ; Grapheme_Extend\n1039..103A    ; Grapheme_Extend\n103D..103E    ; Grapheme_Extend\n1058..1059    ; Grapheme_Extend\n105E..1060    ; Grapheme_Extend\n1071..1074    ; Grapheme_Extend\n1082          ; Grapheme_Extend\n1085..1086    ; Grapheme_Extend\n108D          ; Grapheme_Extend\n109D          ; Grapheme_Extend\n135D..135F    ; Grapheme_Extend\n1712..1714    ; Grapheme_Extend\n1715          ; Grapheme_Extend\n1732..1733    ; Grapheme_Extend\n1734          ; Grapheme_Extend\n1752..1753    ; Grapheme_Extend\n1772..1773    ; Grapheme_Extend\n17B4..17B5    ; Grapheme_Extend\n17B7..17BD    ; Grapheme_Extend\n17C6          ; Grapheme_Extend\n17C9..17D3    ; Grapheme_Extend\n17DD          ; Grapheme_Extend\n180B..180D    ; Grapheme_Extend\n180F          ; Grapheme_Extend\n1885..1886    ; Grapheme_Extend\n18A9          ; Grapheme_Extend\n1920..1922    ; Grapheme_Extend\n1927..1928    ; Grapheme_Extend\n1932          ; Grapheme_Extend\n1939..193B    ; Grapheme_Extend\n1A17..1A18    ; Grapheme_Extend\n1A1B          ; Grapheme_Extend\n1A56          ; Grapheme_Extend\n1A58..1A5E    ; Grapheme_Extend\n1A60          ; Grapheme_Extend\n1A62          ; Grapheme_Extend\n1A65..1A6C    ; Grapheme_Extend\n1A73..1A7C    ; Grapheme_Extend\n1A7F          ; Grapheme_Extend\n1AB0..1ABD    ; Grapheme_Extend\n1ABE          ; Grapheme_Extend\n1ABF..1ACE    ; Grapheme_Extend\n1B00..1B03    ; Grapheme_Extend\n1B34          ; Grapheme_Extend\n1B35          ; Grapheme_Extend\n1B36..1B3A    ; Grapheme_Extend\n1B3B          ; Grapheme_Extend\n1B3C          ; Grapheme_Extend\n1B3D          ; Grapheme_Extend\n1B42          ; Grapheme_Extend\n1B43..1B44    ; Grapheme_Extend\n1B6B..1B73    ; Grapheme_Extend\n1B80..1B81    ; Grapheme_Extend\n1BA2..1BA5    ; Grapheme_Extend\n1BA8..1BA9    ; Grapheme_Extend\n1BAA          ; Grapheme_Extend\n1BAB..1BAD    ; Grapheme_Extend\n1BE6          ; Grapheme_Extend\n1BE8..1BE9    ; Grapheme_Extend\n1BED          ; Grapheme_Extend\n1BEF..1BF1    ; Grapheme_Extend\n1BF2..1BF3    ; Grapheme_Extend\n1C2C..1C33    ; Grapheme_Extend\n1C36..1C37    ; Grapheme_Extend\n1CD0..1CD2    ; Grapheme_Extend\n1CD4..1CE0    ; Grapheme_Extend\n1CE2..1CE8    ; Grapheme_Extend\n1CED          ; Grapheme_Extend\n1CF4          ; Grapheme_Extend\n1CF8..1CF9    ; Grapheme_Extend\n1DC0..1DFF    ; Grapheme_Extend\n200C          ; Grapheme_Extend\n20D0..20DC    ; Grapheme_Extend\n20DD..20E0    ; Grapheme_Extend\n20E1          ; Grapheme_Extend\n20E2..20E4    ; Grapheme_Extend\n20E5..20F0    ; Grapheme_Extend\n2CEF..2CF1    ; Grapheme_Extend\n2D7F          ; Grapheme_Extend\n2DE0..2DFF    ; Grapheme_Extend\n302A..302D    ; Grapheme_Extend\n302E..302F    ; Grapheme_Extend\n3099..309A    ; Grapheme_Extend\nA66F          ; Grapheme_Extend\nA670..A672    ; Grapheme_Extend\nA674..A67D    ; Grapheme_Extend\nA69E..A69F    ; Grapheme_Extend\nA6F0..A6F1    ; Grapheme_Extend\nA802          ; Grapheme_Extend\nA806          ; Grapheme_Extend\nA80B          ; Grapheme_Extend\nA825..A826    ; Grapheme_Extend\nA82C          ; Grapheme_Extend\nA8C4..A8C5    ; Grapheme_Extend\nA8E0..A8F1    ; Grapheme_Extend\nA8FF          ; Grapheme_Extend\nA926..A92D    ; Grapheme_Extend\nA947..A951    ; Grapheme_Extend\nA953          ; Grapheme_Extend\nA980..A982    ; Grapheme_Extend\nA9B3          ; Grapheme_Extend\nA9B6..A9B9    ; Grapheme_Extend\nA9BC..A9BD    ; Grapheme_Extend\nA9C0          ; Grapheme_Extend\nA9E5          ; Grapheme_Extend\nAA29..AA2E    ; Grapheme_Extend\nAA31..AA32    ; Grapheme_Extend\nAA35..AA36    ; Grapheme_Extend\nAA43          ; Grapheme_Extend\nAA4C          ; Grapheme_Extend\nAA7C          ; Grapheme_Extend\nAAB0          ; Grapheme_Extend\nAAB2..AAB4    ; Grapheme_Extend\nAAB7..AAB8    ; Grapheme_Extend\nAABE..AABF    ; Grapheme_Extend\nAAC1          ; Grapheme_Extend\nAAEC..AAED    ; Grapheme_Extend\nAAF6          ; Grapheme_Extend\nABE5          ; Grapheme_Extend\nABE8          ; Grapheme_Extend\nABED          ; Grapheme_Extend\nF870..F87F    ; Grapheme_Extend\nF884..F899    ; Grapheme_Extend\nF89F          ; Grapheme_Extend\nFB1E          ; Grapheme_Extend\nFE00..FE0F    ; Grapheme_Extend\nFE20..FE2F    ; Grapheme_Extend\nFF9E..FF9F    ; Grapheme_Extend\n101FD         ; Grapheme_Extend\n102E0         ; Grapheme_Extend\n10376..1037A  ; Grapheme_Extend\n10A01..10A03  ; Grapheme_Extend\n10A05..10A06  ; Grapheme_Extend\n10A0C..10A0F  ; Grapheme_Extend\n10A38..10A3A  ; Grapheme_Extend\n10A3F         ; Grapheme_Extend\n10AE5..10AE6  ; Grapheme_Extend\n10D24..10D27  ; Grapheme_Extend\n10D69..10D6D  ; Grapheme_Extend\n10EAB..10EAC  ; Grapheme_Extend\n10EFC..10EFF  ; Grapheme_Extend\n10F46..10F50  ; Grapheme_Extend\n10F82..10F85  ; Grapheme_Extend\n11001         ; Grapheme_Extend\n11038..11046  ; Grapheme_Extend\n11070         ; Grapheme_Extend\n11073..11074  ; Grapheme_Extend\n1107F..11081  ; Grapheme_Extend\n110B3..110B6  ; Grapheme_Extend\n110B9..110BA  ; Grapheme_Extend\n110C2         ; Grapheme_Extend\n11100..11102  ; Grapheme_Extend\n11127..1112B  ; Grapheme_Extend\n1112D..11134  ; Grapheme_Extend\n11173         ; Grapheme_Extend\n11180..11181  ; Grapheme_Extend\n111B6..111BE  ; Grapheme_Extend\n111C0         ; Grapheme_Extend\n111C9..111CC  ; Grapheme_Extend\n111CF         ; Grapheme_Extend\n1122F..11231  ; Grapheme_Extend\n11234         ; Grapheme_Extend\n11235         ; Grapheme_Extend\n11236..11237  ; Grapheme_Extend\n1123E         ; Grapheme_Extend\n11241         ; Grapheme_Extend\n112DF         ; Grapheme_Extend\n112E3..112EA  ; Grapheme_Extend\n11300..11301  ; Grapheme_Extend\n1133B..1133C  ; Grapheme_Extend\n1133E         ; Grapheme_Extend\n11340         ; Grapheme_Extend\n1134D         ; Grapheme_Extend\n11357         ; Grapheme_Extend\n11366..1136C  ; Grapheme_Extend\n11370..11374  ; Grapheme_Extend\n113B8         ; Grapheme_Extend\n113BB..113C0  ; Grapheme_Extend\n113C2         ; Grapheme_Extend\n113C5         ; Grapheme_Extend\n113C7..113C9  ; Grapheme_Extend\n113CE         ; Grapheme_Extend\n113CF         ; Grapheme_Extend\n113D0         ; Grapheme_Extend\n113D2         ; Grapheme_Extend\n113E1..113E2  ; Grapheme_Extend\n11438..1143F  ; Grapheme_Extend\n11442..11444  ; Grapheme_Extend\n11446         ; Grapheme_Extend\n1145E         ; Grapheme_Extend\n```\n\n----------------------------------------\n\nTITLE: Adding API Notes for a System Module\nDESCRIPTION: Instructions for adding API notes to a system module that doesn't have them yet. This involves creating a new .apinotes file and updating the CMakeLists.txt file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/apinotes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo add API notes for a system module `$MODULE` that does not have them yet,\ncreate a new source file `$MODULE.apinotes` and update CMakeLists.txt.\nUpdated API notes will be found by the build system during the next build.\n```\n\n----------------------------------------\n\nTITLE: Copying Swift C++ Interop Support Header in CMake\nDESCRIPTION: This snippet creates a custom command to copy the 'bridging' support header to the Swift include directory. It also sets up a custom target for this operation and adds dependencies to ensure the header is available for the Swift Clang importer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/SwiftBridging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n    OUTPUT \"${SWIFT_INCLUDE_DIR}/swift/bridging\"\n    DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/swift/bridging\"\n    COMMAND \"${CMAKE_COMMAND}\" \"-E\" \"copy\" \"${CMAKE_CURRENT_SOURCE_DIR}/swift/bridging\" \"${SWIFT_INCLUDE_DIR}/swift\")\n\nadd_custom_target(\"copy_cxxInterop_support_header\"\n    DEPENDS \"${SWIFT_INCLUDE_DIR}/swift/bridging\"\n    COMMENT \"Copying C++ interop support header to ${SWIFT_INCLUDE_DIR}/swift\")\n\nadd_dependencies(swiftClangImporter\n    \"copy_cxxInterop_support_header\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Macro Variables in Swift\nDESCRIPTION: Defines read-only global variables MY_MACRO and MACRO_DUP that likely represent C-style macros being imported into Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nvar MY_MACRO: Int32 { get }\nvar MACRO_DUP: Int32 { get }\n```\n\n----------------------------------------\n\nTITLE: Defining ApplySite Protocol in Swift for SIL\nDESCRIPTION: Defines the `ApplySite` protocol, intended for classifying various apply-like instructions (e.g., `apply`, `try_apply`, `begin_apply`) into a common group. This allows optimization passes to handle them uniformly. Related to the C++ `ApplySite` utility. Status: Exists, but needs completion of members/functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nApplySite // Protocol\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Configuration for Swift Benchmarks\nDESCRIPTION: Sets up basic CMake configuration including minimum version requirement and custom module paths for Swift benchmarks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.19.6)\n\n# Add path for custom CMake modules.\nlist(APPEND CMAKE_MODULE_PATH\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\n\n# Load utility modules.\ninclude(SwiftBenchmarkUtils)\n```\n\n----------------------------------------\n\nTITLE: Defining Documented Class in Swift\nDESCRIPTION: Declares a class with documentation comment indicating it has an awesome name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.module.printed.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n/// Awesome name.\nclass SameName {\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Objective-C Allocation and Initialization\nDESCRIPTION: Demonstrates the standard Objective-C pattern of separate allocation and initialization using alloc and init methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\n[[NSString alloc] initWithUTF8String:\"initialization\"]\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies to SourceKitSwiftLang Library in CMake\nDESCRIPTION: This snippet defines the libraries that SourceKitSwiftLang depends on. It links against Swift components like the compiler frontend, AST, and refactoring tools, as well as Clang components for C/C++ language support and interoperability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/lib/SwiftLang/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(SourceKitSwiftLang PRIVATE\n  SourceKitCore\n  swiftDriver\n  swiftFrontend\n  swiftClangImporter\n  swiftIDE\n  swiftIDETool\n  swiftAST\n  swiftMarkup\n  swiftParse\n  swiftSIL\n  swiftSILGen\n  swiftSILOptimizer\n  swiftIRGen\n  swiftSema\n  swiftBasic\n  swiftSerialization\n  swiftOption\n  swiftSymbolGraphGen\n  swiftRefactoring\n  # Clang dependencies.\n  clangIndex\n  clangFormat\n  clangToolingCore\n  clangFrontendTool\n  clangFrontend\n  clangDriver\n  clangCodeGen\n  clangSerialization\n  clangParse\n  clangSema\n  clangAnalysis\n  clangEdit\n  clangRewriteFrontend\n  clangRewrite\n  clangLex\n  clangAST\n  clangAPINotes\n  clangBasic)\n```\n\n----------------------------------------\n\nTITLE: Creating SourceKitD Test Executable\nDESCRIPTION: Defines the sourcekitd-test executable with its source files and LLVM component dependencies. This establishes the main test tool executable for SourceKit functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sourcekit_executable(sourcekitd-test\n  sourcekitd-test.cpp\n  TestOptions.cpp\n  LLVM_LINK_COMPONENTS option coverage lto\n)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Swift Parse Unit Tests in CMake\nDESCRIPTION: This snippet specifies the libraries to be linked with the Swift Parse unit tests. It includes dependencies on various Swift modules, with a note about a circular dependency issue with the Sema module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Parse/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(SwiftParseTests\n    PRIVATE\n    swiftSIL\n    swiftClangImporter\n    swiftParse\n    swiftAST\n    # FIXME: Sema must go last because of circular dependencies with AST.\n    swiftSema\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift SIL Library in CMake\nDESCRIPTION: Sets up the swiftSIL library as a static library, links it with required dependencies, and adds subdirectories. It also ensures proper generation of LLVM intrinsics and sets up LLVM availability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SIL/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftSIL STATIC\n  SIL.cpp)\ntarget_link_libraries(swiftSIL PUBLIC\n  swiftDemangling)\ntarget_link_libraries(swiftSIL PRIVATE\n  swiftAST\n  swiftClangImporter\n  swiftSema\n  swiftSerialization)\n\nadd_subdirectory(IR)\nadd_subdirectory(Utils)\nadd_subdirectory(Verifier)\nadd_subdirectory(Parser)\n\n# intrinsics_gen is the LLVM tablegen target that generates the include files\n# where intrinsics and attributes are declared. swiftSIL depends on these\n# headers.\n# For more information see the comment at the top of lib/CMakeLists.txt.\nadd_dependencies(swiftSIL intrinsics_gen clang-tablegen-targets)\n\nset_swift_llvm_is_available(swiftSIL)\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Runtime Source Files\nDESCRIPTION: Defines source file lists for different components of the Swift runtime including core runtime, Objective-C integration, and platform-specific implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_runtime_objc_sources\n    ErrorObject.mm\n    SwiftObject.mm\n    SwiftValue.mm\n    ReflectionMirrorObjC.mm\n    ObjCRuntimeGetImageNameFromClass.mm)\n\nset(swift_runtime_sources\n    ../CompatibilityOverride/CompatibilityOverride.cpp\n    AnyHashableSupport.cpp\n    Array.cpp\n    AutoDiffSupport.cpp\n    Bincompat.cpp\n    # ... additional files omitted for brevity\n    Win32.cpp)\n```\n\n----------------------------------------\n\nTITLE: Including Vendor-Specific CMake Module for SwiftCore\nDESCRIPTION: Includes an optional vendor-specific CMake module for SwiftCore if it exists.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(\"${SwiftCore_VENDOR_MODULE_DIR}/swiftCore.cmake\" OPTIONAL)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Copying LLDB with Tools in CMake\nDESCRIPTION: This snippet configures the 'lldb-with-tools' file and copies it to the runtime output directory with specific file permissions. It uses CMake's configure_file and file commands to process and place the file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/lldb/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/lldb-with-tools.in\n  ${CMAKE_CURRENT_BINARY_DIR}/lldb-with-tools\n  @ONLY)\n\nfile(COPY ${CMAKE_CURRENT_BINARY_DIR}/lldb-with-tools\n  DESTINATION \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\"\n  FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ\n  GROUP_EXECUTE WORLD_READ WORLD_EXECUTE)\n```\n\n----------------------------------------\n\nTITLE: Embedded Stdlib Configuration\nDESCRIPTION: Configures build and installation for embedded standard library targets when enabled. Creates separate module directory and copying commands for embedded builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/cxxshim/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)\n  set(module_dir \"${SWIFTLIB_DIR}/embedded\")\n  add_custom_command(OUTPUT ${module_dir}\n                     COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${module_dir}\")\n  set(outputs)\n  foreach(source libcxxshim.modulemap libcxxshim.h libcxxstdlibshim.h)\n    add_custom_command(OUTPUT ${module_dir}/${source}\n                       DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${source}\n                       COMMAND ${CMAKE_COMMAND} \"-E\" \"copy_if_different\" \"${CMAKE_CURRENT_SOURCE_DIR}/${source}\" \"${module_dir}/${source}\"\n                       COMMENT \"Copying ${source} to ${module_dir}\")\n    list(APPEND outputs \"${module_dir}/${source}\")\n  endforeach()\n  add_custom_target(cxxshim-embedded ALL\n                    DEPENDS ${outputs}\n                    COMMENT \"Copying cxxshims to ${module_dir}\")\n  list(APPEND libcxxshim_modulemap_target_list cxxshim-embedded)\n  swift_install_in_component(FILES libcxxshim.modulemap libcxxshim.h libcxxstdlibshim.h\n                             DESTINATION \"lib/swift/embedded\"\n                             COMPONENT compiler)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Header Dependencies Source File\nDESCRIPTION: Creates a C++ source file that includes critical Swift tool headers to establish build dependencies. The file is generated in the binary directory and includes basic bridging headers for various Swift components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(GENERATE\n  OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/HeaderDependencies.cpp\"\n  CONTENT \"\n#ifndef COMPILED_WITH_SWIFT\n#define COMPILED_WITH_SWIFT\n#endif\n\n#include \\\"swift/Basic/BasicBridging.h\\\"\n#include \\\"swift/AST/ASTBridging.h\\\"\n#include \\\"swift/IDE/IDEBridging.h\\\"\n#include \\\"swift/SIL/SILBridging.h\\\"\n#include \\\"swift/SILOptimizer/OptimizerBridging.h\\\"\n\")\n```\n\n----------------------------------------\n\nTITLE: Unicode Line Break Control Definitions\nDESCRIPTION: Defines various line break control characters including CR, LF, and other newline characters with their respective word break properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n000D          ; CR # Cc       <control-000D>\n\n000A          ; LF # Cc       <control-000A>\n\n000B..000C    ; Newline # Cc   [2] <control-000B>..<control-000C>\n0085          ; Newline # Cc       <control-0085>\n2028          ; Newline # Zl       LINE SEPARATOR\n2029          ; Newline # Zp       PARAGRAPH SEPARATOR\n```\n\n----------------------------------------\n\nTITLE: Defining ASCII_Hex_Digit Unicode Ranges\nDESCRIPTION: Defines Unicode ranges for ASCII-only hexadecimal digits. Includes basic ASCII digits 0-9 and letters A-F, totaling 22 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode-data\nCODE:\n```\n0030..0039    ; ASCII_Hex_Digit # Nd  [10] DIGIT ZERO..DIGIT NINE\n0041..0046    ; ASCII_Hex_Digit # L&   [6] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER F\n0061..0066    ; ASCII_Hex_Digit # L&   [6] LATIN SMALL LETTER A..LATIN SMALL LETTER F\n```\n\n----------------------------------------\n\nTITLE: Configuring GYB Generator Flags\nDESCRIPTION: Sets up flags for the GYB (Generate Your Boilerplate) tool that's used to generate Swift source files from templates. These flags specify the locations of Unicode data files needed for proper text handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_63\n\nLANGUAGE: cmake\nCODE:\n```\n# Configuration flags passed to all of our invocations of gyb.  Try to\n# avoid making up new variable names here if you can find a CMake\n# variable that will do the job.\nset(SWIFT_GYB_FLAGS\n    \"-DunicodeGraphemeBreakPropertyFile=${SWIFT_SOURCE_DIR}/utils/UnicodeData/GraphemeBreakProperty.txt\"\n    \"-DunicodeGraphemeBreakTestFile=${SWIFT_SOURCE_DIR}/utils/UnicodeData/GraphemeBreakTest.txt\")\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Compiler Options in CMake\nDESCRIPTION: Configures extensive Swift-specific compiler options including module building, runtime compatibility, memory safety, and optimization settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_options(\n  $<$<COMPILE_LANGUAGE:Swift>:-explicit-module-build>\n  \"$<$<COMPILE_LANGUAGE:Swift>:-nostdlibimport>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-library-level api>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-runtime-compatibility-version none>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:-disable-autolinking-runtime-compatibility-dynamic-replacements>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-autolinking-runtime-compatibility-concurrency>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-strict-memory-safety>\"\n  \"$<$<AND:$<BOOL:${SwiftCore_OPTIMIZATION_REMARKS}>,$<COMPILE_LANGUAGE:Swift>>:-save-optimization-record=${SwiftCore_OPTIMIZATION_REMARKS}>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:-warn-implicit-overrides>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -enable-lexical-lifetimes=false>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-implicit-concurrency-module-import>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-implicit-string-processing-module-import>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:-no-link-objc-runtime>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -enforce-exclusivity=unchecked>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -enable-ossa-modules>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -empty-abi-descriptor>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -target-min-inlining-version -Xfrontend min>\"\n  \"$<$<AND:$<NOT:$<BOOL:${SwiftCore_ENABLE_OBJC_INTEROP}>>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xfrontend -disable-objc-interop>\"\n  \"$<$<AND:$<PLATFORM_ID:Windows>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xcc -Xclang -Xcc -fbuiltin-headers-in-system-modules>\"\n  \"$<$<AND:$<BOOL:${SwiftCore_ENABLE_LIBRARY_EVOLUTION}>,$<COMPILE_LANGUAGE:Swift>>:-enable-library-evolution>\"\n  \"$<$<AND:$<BOOL:${SwiftCore_ENABLE_PRESPECIALIZATION}>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xfrontend -prespecialize-generic-metadata>\")\n```\n\n----------------------------------------\n\nTITLE: Documenting Moved and Renamed Declarations in Swift\nDESCRIPTION: This section outlines Swift declarations that have been moved to different types or renamed. It includes changes to classes, operators, protocols, functions, and structs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n/* Moved Decls */\ncake: Class ClassToStruct has been changed to a Struct\ncake: InfixOperator ..*.. has been changed to a PrefixOperator\ncake: Protocol ProtocolToEnum has been changed to a Enum\n\n/* Renamed Decls */\ncake: Func S1.foo5(x:y:) has been renamed to Func foo5(x:y:z:)\ncake: Struct Somestruct2 has been renamed to Struct NSSomestruct2\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version and Visibility Settings\nDESCRIPTION: Configures minimum CMake version requirement and sets visibility presets for C/C++ compilation to hidden.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.26...3.29)\n\nset(CMAKE_C_VISIBILITY_PRESET \"hidden\")\nset(CMAKE_CXX_VISIBILITY_PRESET \"hidden\")\nset(CMAKE_VISIBILITY_INLINES_HIDDEN YES)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Options for SwiftCore in CMake\nDESCRIPTION: Adds compilation options to SwiftCore if CMP0157 policy is not set, including object files from various dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT POLICY CMP0157)\n  target_compile_options(swiftCore PRIVATE\n    $<TARGET_OBJECTS:swiftRuntime>\n    $<TARGET_OBJECTS:swiftLLVMSupport>\n    $<TARGET_OBJECTS:swiftDemangling>\n    $<TARGET_OBJECTS:swiftStdlibStubs>\n    $<TARGET_OBJECTS:swiftThreading>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removed Color Hash Methods in Swift\nDESCRIPTION: Documents the removal of two hashing-related members from the Color class: the hash(into:) function and hashValue property. These changes affect code that relied on Color's Hashable conformance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/color.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// Removed APIs:\nFunc Color.hash(into:)\nVar Color.hashValue\n```\n\n----------------------------------------\n\nTITLE: Defining FooEnum3 Structure with Associated Constants\nDESCRIPTION: Creates a RawRepresentable and Equatable struct called FooEnum3 with initializers, rawValue property, and associated constants FooEnum3X and FooEnum3Y.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\nstruct FooEnum3 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\nvar FooEnum3X: FooEnum3 { get }\nvar FooEnum3Y: FooEnum3 { get }\n```\n\n----------------------------------------\n\nTITLE: Finding Swift Source Files (Shell)\nDESCRIPTION: Uses the `find` command to locate all files ending with `.swift` within the `MyProject/Sources` directory and its subdirectories, saving the list of file paths to `input-files.txt`. This is useful for creating file lists for WMO compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\n# Assuming all .swift files from the MyProject/Sources directory\n# need to be included\nfind MyProject/Sources -name '*.swift' -type f > input-files.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Markup Static Library in CMake\nDESCRIPTION: This CMake snippet defines the swiftMarkup static library, specifies its source files, and links it with the libcmark-gfm dependency. It uses custom CMake commands specific to the Swift project build system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Markup/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftMarkup STATIC\n  AST.cpp\n  LineList.cpp\n  Markup.cpp)\ntarget_link_libraries(swiftMarkup PRIVATE\n  libcmark-gfm)\n```\n\n----------------------------------------\n\nTITLE: Retaining Values at Address with retain_value_addr in SIL\nDESCRIPTION: Retains a loadable value inside a given address, retaining any references it holds. This instruction is not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_109\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'retain_value_addr' sil-operand\n\nretain_value_addr %0 : $*A\n```\n\n----------------------------------------\n\nTITLE: CI Command Table for Validation Testing\nDESCRIPTION: Table showing validation testing commands for @swift-ci including platform-specific and clean testing options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nPlatform     | Comment | Check Status\n------------ | ------- | ------------\nAll supported platforms     | @swift-ci Please test                         | Swift Test Linux Platform (smoke test)<br>Swift Test macOS Platform (smoke test)<br>Swift Test Linux Platform<br>Swift Test macOS Platform<br>\nAll supported platforms     | @swift-ci Please clean test                   | Swift Test Linux Platform (smoke test)<br>Swift Test macOS Platform (smoke test)<br>Swift Test Linux Platform<br>Swift Test macOS Platform<br>\nmacOS platform               | @swift-ci Please test macOS platform           | Swift Test macOS Platform (smoke test)<br>Swift Test macOS Platform\nmacOS platform               | @swift-ci Please clean test macOS platform     | Swift Test macOS Platform (smoke test)<br>Swift Test macOS Platform\nmacOS platform               | @swift-ci Please benchmark                    | Swift Benchmark on macOS Platform (many runs - rigorous)\nmacOS platform               | @swift-ci Please smoke benchmark              | Swift Benchmark macOS Platform (few runs - soundness)\nLinux platform               | @swift-ci Please test Linux platform          | Swift Test Linux Platform (smoke test)<br>Swift Test Linux Platform\nLinux platform               | @swift-ci Please clean test Linux platform    | Swift Test Linux Platform (smoke test)<br>Swift Test Linux Platform\nLinux platform               | @swift-ci Please test WebAssembly             | Swift Test WebAssembly (Ubuntu 20.04)\n```\n\n----------------------------------------\n\nTITLE: PC/RA/Async Instruction Format\nDESCRIPTION: Bit layout for program counter, return address, and async resume point instructions with address computation mode.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompactBacktraceFormat.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n   7   6   5   4   3   2   1   0\n ┌────────────────┬───┬──────────┐\n │ 0   0   0   1  │ a │ count    │ pc\n └────────────────┴───┴──────────┘\n ┌────────────────┬───┬──────────┐\n │ 0   0   1   0  │ a │ count    │ ra\n └────────────────┴───┴──────────┘\n ┌────────────────┬───┬──────────┐\n │ 0   0   1   1  │ a │ count    │ async\n └────────────────┴───┴──────────┘\n```\n\n----------------------------------------\n\nTITLE: Conditional Linking Based on Object Format in CMake\nDESCRIPTION: Adds additional libraries to SwiftCore based on the object format (ELF or COFF) and whether it's a shared or static build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nstring(TOLOWER \"${SwiftCore_OBJECT_FORMAT}\" SwiftCore_OBJECT_FORMAT_lc)\nif(\"${SwiftCore_OBJECT_FORMAT_lc}\" STREQUAL \"elf\")\n  target_link_libraries(swiftCore INTERFACE\n    swiftrt)\nelseif(\"${SwiftCore_OBJECT_FORMAT_lc}\" STREQUAL \"coff\")\n  if(BUILD_SHARED_LIBS)\n    target_link_libraries(swiftCore INTERFACE\n      swiftrt)\n  else()\n    target_link_libraries(swiftCore INTERFACE\n      swiftrtT)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Code Points that Change When Casefolded\nDESCRIPTION: This snippet provides a comprehensive list of Unicode code points that change when casefolded. It includes both individual code points and ranges, covering various scripts and character sets. Each line represents a code point or range followed by the property 'Changes_When_Casefolded'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_22\n\nLANGUAGE: Unicode\nCODE:\n```\n04F8          ; Changes_When_Casefolded\n04FA          ; Changes_When_Casefolded\n04FC          ; Changes_When_Casefolded\n04FE          ; Changes_When_Casefolded\n0500          ; Changes_When_Casefolded\n0502          ; Changes_When_Casefolded\n0504          ; Changes_When_Casefolded\n0506          ; Changes_When_Casefolded\n0508          ; Changes_When_Casefolded\n050A          ; Changes_When_Casefolded\n050C          ; Changes_When_Casefolded\n050E          ; Changes_When_Casefolded\n0510          ; Changes_When_Casefolded\n0512          ; Changes_When_Casefolded\n0514          ; Changes_When_Casefolded\n0516          ; Changes_When_Casefolded\n0518          ; Changes_When_Casefolded\n051A          ; Changes_When_Casefolded\n051C          ; Changes_When_Casefolded\n051E          ; Changes_When_Casefolded\n0520          ; Changes_When_Casefolded\n0522          ; Changes_When_Casefolded\n0524          ; Changes_When_Casefolded\n0526          ; Changes_When_Casefolded\n0528          ; Changes_When_Casefolded\n052A          ; Changes_When_Casefolded\n052C          ; Changes_When_Casefolded\n052E          ; Changes_When_Casefolded\n0531..0556    ; Changes_When_Casefolded\n0587          ; Changes_When_Casefolded\n10A0..10C5    ; Changes_When_Casefolded\n10C7          ; Changes_When_Casefolded\n10CD          ; Changes_When_Casefolded\n13F8..13FD    ; Changes_When_Casefolded\n1C80..1C89    ; Changes_When_Casefolded\n1C90..1CBA    ; Changes_When_Casefolded\n1CBD..1CBF    ; Changes_When_Casefolded\n1E00          ; Changes_When_Casefolded\n1E02          ; Changes_When_Casefolded\n1E04          ; Changes_When_Casefolded\n1E06          ; Changes_When_Casefolded\n1E08          ; Changes_When_Casefolded\n1E0A          ; Changes_When_Casefolded\n1E0C          ; Changes_When_Casefolded\n1E0E          ; Changes_When_Casefolded\n1E10          ; Changes_When_Casefolded\n1E12          ; Changes_When_Casefolded\n1E14          ; Changes_When_Casefolded\n1E16          ; Changes_When_Casefolded\n1E18          ; Changes_When_Casefolded\n1E1A          ; Changes_When_Casefolded\n1E1C          ; Changes_When_Casefolded\n1E1E          ; Changes_When_Casefolded\n1E20          ; Changes_When_Casefolded\n1E22          ; Changes_When_Casefolded\n1E24          ; Changes_When_Casefolded\n1E26          ; Changes_When_Casefolded\n1E28          ; Changes_When_Casefolded\n1E2A          ; Changes_When_Casefolded\n1E2C          ; Changes_When_Casefolded\n1E2E          ; Changes_When_Casefolded\n1E30          ; Changes_When_Casefolded\n1E32          ; Changes_When_Casefolded\n1E34          ; Changes_When_Casefolded\n1E36          ; Changes_When_Casefolded\n1E38          ; Changes_When_Casefolded\n1E3A          ; Changes_When_Casefolded\n1E3C          ; Changes_When_Casefolded\n1E3E          ; Changes_When_Casefolded\n1E40          ; Changes_When_Casefolded\n1E42          ; Changes_When_Casefolded\n1E44          ; Changes_When_Casefolded\n1E46          ; Changes_When_Casefolded\n1E48          ; Changes_When_Casefolded\n1E4A          ; Changes_When_Casefolded\n1E4C          ; Changes_When_Casefolded\n1E4E          ; Changes_When_Casefolded\n1E50          ; Changes_When_Casefolded\n1E52          ; Changes_When_Casefolded\n1E54          ; Changes_When_Casefolded\n1E56          ; Changes_When_Casefolded\n1E58          ; Changes_When_Casefolded\n1E5A          ; Changes_When_Casefolded\n1E5C          ; Changes_When_Casefolded\n1E5E          ; Changes_When_Casefolded\n1E60          ; Changes_When_Casefolded\n1E62          ; Changes_When_Casefolded\n1E64          ; Changes_When_Casefolded\n1E66          ; Changes_When_Casefolded\n1E68          ; Changes_When_Casefolded\n1E6A          ; Changes_When_Casefolded\n1E6C          ; Changes_When_Casefolded\n1E6E          ; Changes_When_Casefolded\n1E70          ; Changes_When_Casefolded\n1E72          ; Changes_When_Casefolded\n1E74          ; Changes_When_Casefolded\n1E76          ; Changes_When_Casefolded\n1E78          ; Changes_When_Casefolded\n1E7A          ; Changes_When_Casefolded\n1E7C          ; Changes_When_Casefolded\n1E7E          ; Changes_When_Casefolded\n1E80          ; Changes_When_Casefolded\n1E82          ; Changes_When_Casefolded\n1E84          ; Changes_When_Casefolded\n1E86          ; Changes_When_Casefolded\n1E88          ; Changes_When_Casefolded\n1E8A          ; Changes_When_Casefolded\n1E8C          ; Changes_When_Casefolded\n1E8E          ; Changes_When_Casefolded\n1E90          ; Changes_When_Casefolded\n1E92          ; Changes_When_Casefolded\n1E94          ; Changes_When_Casefolded\n1E9A..1E9B    ; Changes_When_Casefolded\n1E9E          ; Changes_When_Casefolded\n1EA0          ; Changes_When_Casefolded\n1EA2          ; Changes_When_Casefolded\n1EA4          ; Changes_When_Casefolded\n1EA6          ; Changes_When_Casefolded\n1EA8          ; Changes_When_Casefolded\n1EAA          ; Changes_When_Casefolded\n1EAC          ; Changes_When_Casefolded\n1EAE          ; Changes_When_Casefolded\n1EB0          ; Changes_When_Casefolded\n1EB2          ; Changes_When_Casefolded\n1EB4          ; Changes_When_Casefolded\n1EB6          ; Changes_When_Casefolded\n1EB8          ; Changes_When_Casefolded\n1EBA          ; Changes_When_Casefolded\n1EBC          ; Changes_When_Casefolded\n1EBE          ; Changes_When_Casefolded\n1EC0          ; Changes_When_Casefolded\n1EC2          ; Changes_When_Casefolded\n1EC4          ; Changes_When_Casefolded\n1EC6          ; Changes_When_Casefolded\n1EC8          ; Changes_When_Casefolded\n1ECA          ; Changes_When_Casefolded\n1ECC          ; Changes_When_Casefolded\n1ECE          ; Changes_When_Casefolded\n1ED0          ; Changes_When_Casefolded\n1ED2          ; Changes_When_Casefolded\n1ED4          ; Changes_When_Casefolded\n1ED6          ; Changes_When_Casefolded\n1ED8          ; Changes_When_Casefolded\n1EDA          ; Changes_When_Casefolded\n1EDC          ; Changes_When_Casefolded\n1EDE          ; Changes_When_Casefolded\n1EE0          ; Changes_When_Casefolded\n1EE2          ; Changes_When_Casefolded\n1EE4          ; Changes_When_Casefolded\n1EE6          ; Changes_When_Casefolded\n1EE8          ; Changes_When_Casefolded\n1EEA          ; Changes_When_Casefolded\n1EEC          ; Changes_When_Casefolded\n1EEE          ; Changes_When_Casefolded\n1EF0          ; Changes_When_Casefolded\n1EF2          ; Changes_When_Casefolded\n1EF4          ; Changes_When_Casefolded\n1EF6          ; Changes_When_Casefolded\n1EF8          ; Changes_When_Casefolded\n1EFA          ; Changes_When_Casefolded\n1EFC          ; Changes_When_Casefolded\n1EFE          ; Changes_When_Casefolded\n1F08..1F0F    ; Changes_When_Casefolded\n1F18..1F1D    ; Changes_When_Casefolded\n1F28..1F2F    ; Changes_When_Casefolded\n1F38..1F3F    ; Changes_When_Casefolded\n1F48..1F4D    ; Changes_When_Casefolded\n1F59          ; Changes_When_Casefolded\n1F5B          ; Changes_When_Casefolded\n1F5D          ; Changes_When_Casefolded\n1F5F          ; Changes_When_Casefolded\n1F68..1F6F    ; Changes_When_Casefolded\n1F80..1FAF    ; Changes_When_Casefolded\n1FB2..1FB4    ; Changes_When_Casefolded\n1FB7..1FBC    ; Changes_When_Casefolded\n1FC2..1FC4    ; Changes_When_Casefolded\n1FC7..1FCC    ; Changes_When_Casefolded\n1FD8..1FDB    ; Changes_When_Casefolded\n1FE8..1FEC    ; Changes_When_Casefolded\n1FF2..1FF4    ; Changes_When_Casefolded\n1FF7..1FFC    ; Changes_When_Casefolded\n2126          ; Changes_When_Casefolded\n212A..212B    ; Changes_When_Casefolded\n2132          ; Changes_When_Casefolded\n2160..216F    ; Changes_When_Casefolded\n2183          ; Changes_When_Casefolded\n24B6..24CF    ; Changes_When_Casefolded\n2C00..2C2F    ; Changes_When_Casefolded\n2C60          ; Changes_When_Casefolded\n2C62..2C64    ; Changes_When_Casefolded\n2C67          ; Changes_When_Casefolded\n2C69          ; Changes_When_Casefolded\n2C6B          ; Changes_When_Casefolded\n2C6D..2C70    ; Changes_When_Casefolded\n2C72          ; Changes_When_Casefolded\n2C75          ; Changes_When_Casefolded\n2C7E..2C80    ; Changes_When_Casefolded\n2C82          ; Changes_When_Casefolded\n2C84          ; Changes_When_Casefolded\n2C86          ; Changes_When_Casefolded\n2C88          ; Changes_When_Casefolded\n2C8A          ; Changes_When_Casefolded\n2C8C          ; Changes_When_Casefolded\n2C8E          ; Changes_When_Casefolded\n2C90          ; Changes_When_Casefolded\n2C92          ; Changes_When_Casefolded\n2C94          ; Changes_When_Casefolded\n2C96          ; Changes_When_Casefolded\n2C98          ; Changes_When_Casefolded\n2C9A          ; Changes_When_Casefolded\n2C9C          ; Changes_When_Casefolded\n2C9E          ; Changes_When_Casefolded\n2CA0          ; Changes_When_Casefolded\n2CA2          ; Changes_When_Casefolded\n2CA4          ; Changes_When_Casefolded\n2CA6          ; Changes_When_Casefolded\n2CA8          ; Changes_When_Casefolded\n2CAA          ; Changes_When_Casefolded\n2CAC          ; Changes_When_Casefolded\n2CAE          ; Changes_When_Casefolded\n2CB0          ; Changes_When_Casefolded\n2CB2          ; Changes_When_Casefolded\n2CB4          ; Changes_When_Casefolded\n2CB6          ; Changes_When_Casefolded\n2CB8          ; Changes_When_Casefolded\n2CBA          ; Changes_When_Casefolded\n2CBC          ; Changes_When_Casefolded\n2CBE          ; Changes_When_Casefolded\n2CC0          ; Changes_When_Casefolded\n2CC2          ; Changes_When_Casefolded\n2CC4          ; Changes_When_Casefolded\n2CC6          ; Changes_When_Casefolded\n2CC8          ; Changes_When_Casefolded\n2CCA          ; Changes_When_Casefolded\n2CCC          ; Changes_When_Casefolded\n2CCE          ; Changes_When_Casefolded\n2CD0          ; Changes_When_Casefolded\n2CD2          ; Changes_When_Casefolded\n2CD4          ; Changes_When_Casefolded\n2CD6          ; Changes_When_Casefolded\n2CD8          ; Changes_When_Casefolded\n2CDA          ; Changes_When_Casefolded\n2CDC          ; Changes_When_Casefolded\n2CDE          ; Changes_When_Casefolded\n2CE0          ; Changes_When_Casefolded\n2CE2          ; Changes_When_Casefolded\n2CEB          ; Changes_When_Casefolded\n2CED          ; Changes_When_Casefolded\n2CF2          ; Changes_When_Casefolded\nA640          ; Changes_When_Casefolded\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Proposed Parameterized String Methods - Swift\nDESCRIPTION: This snippet illustrates the proposed API syntax in Swift for String operations enabling parameterized options such as case sensitivity, locale, and pattern matching. The examples demonstrate how defaulted parameters could be supplied for comparison, lowercasing, and pattern matching within an ergonomic and expressive framework. These proposals require new or extended APIs supporting option parameters like .sensitive or .insensitive, and localization objects. Inputs include other string values, options, and locale; outputs are results of comparative, lowercasing, or matching operations. Actual implementation details are mockups, intended to showcase a consistent, composable usage approach.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringManifesto.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nx.compared(to: y, case: .sensitive, in: swissGerman)\n\nx.lowercased(in: .currentLocale)\n\nx.allMatches(somePattern, case: .insensitive, diacritic: .insensitive)\n\n```\n\n----------------------------------------\n\nTITLE: Running Swift Test Suite on Android Device\nDESCRIPTION: Build script command for running the Swift test suite on an Android device. This builds the compiler and tests in Release Assert mode, targeting Android architecture.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Android.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ utils/build-script \\\n  -R \\\n  -T \\\n  --android \\\n  --android-ndk ~/android-ndk-r27c \\\n  --android-arch aarch64 \\\n  --android-api-level 21\n```\n\n----------------------------------------\n\nTITLE: Encoding Operator Characters in Swift Mangling\nDESCRIPTION: Defines the mapping of operator characters to letter codes for use in mangled identifiers, including special cases for non-ASCII operators.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_47\n\nLANGUAGE: Swift\nCODE:\n```\nOPERATOR-CHAR ::= 'a'                      // & 'and'\nOPERATOR-CHAR ::= 'c'                      // @ 'commercial at'\nOPERATOR-CHAR ::= 'd'                      // / 'divide'\nOPERATOR-CHAR ::= 'e'                      // = 'equals'\nOPERATOR-CHAR ::= 'g'                      // > 'greater'\nOPERATOR-CHAR ::= 'l'                      // < 'less'\nOPERATOR-CHAR ::= 'm'                      // * 'multiply'\nOPERATOR-CHAR ::= 'n'                      // ! 'not'\nOPERATOR-CHAR ::= 'o'                      // | 'or'\nOPERATOR-CHAR ::= 'p'                      // + 'plus'\nOPERATOR-CHAR ::= 'q'                      // ? 'question'\nOPERATOR-CHAR ::= 'r'                      // % 'remainder'\nOPERATOR-CHAR ::= 's'                      // - 'subtract'\nOPERATOR-CHAR ::= 't'                      // ~ 'tilde'\nOPERATOR-CHAR ::= 'x'                      // ^ 'xor'\nOPERATOR-CHAR ::= 'z'                      // . 'zperiod'\n```\n\n----------------------------------------\n\nTITLE: Installing Static Swift Runtime Registrar\nDESCRIPTION: Conditionally installs the static runtime registrar if static standard library building is enabled or the SDK requires static-only builds. The files are installed to the lib/swift_static subdirectory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n      if(SWIFT_BUILD_STATIC_STDLIB OR SWIFT_SDK_${sdk}_STATIC_ONLY)\n        swift_install_in_component(FILES\n                                     \"${static_runtime_registrar}\"\n                                   DESTINATION\n                                     \"lib/swift_static/${arch_subdir}\"\n                                   COMPONENT\n                                     stdlib)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Plugin Server Build in CMake\nDESCRIPTION: This CMake script configures the build process for Swift compiler plugin infrastructure, including the Swift Plugin Server and In-Process Plugin Server library. It sets up build targets, dependencies, installation paths, and platform-specific runtime path configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-plugin-server/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif (SWIFT_BUILD_SWIFT_SYNTAX)\n  add_pure_swift_host_tool(swift-plugin-server\n    Sources/swift-plugin-server/swift-plugin-server.swift\n    SWIFT_COMPONENT\n      compiler\n    SWIFT_DEPENDENCIES\n      SwiftCompilerPluginMessageHandling\n      SwiftLibraryPluginProvider\n    PACKAGE_NAME Toolchain\n  )\n\n  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${SWIFT_HOST_LIBRARIES_DEST_DIR}\")\n  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${SWIFT_HOST_LIBRARIES_DEST_DIR}\")\n  add_pure_swift_host_library(SwiftInProcPluginServer SHARED\n    Sources/SwiftInProcPluginServer/InProcPluginServer.swift\n    SWIFT_DEPENDENCIES\n      SwiftCompilerPluginMessageHandling\n      SwiftLibraryPluginProvider\n    PACKAGE_NAME Toolchain\n  )\n\n  if(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)\n    set_property(TARGET SwiftInProcPluginServer\n      APPEND PROPERTY INSTALL_RPATH\n      \"@loader_path\")\n  elseif(SWIFT_HOST_VARIANT_SDK MATCHES \"LINUX|ANDROID|OPENBSD|FREEBSD\")\n    set_property(TARGET SwiftInProcPluginServer\n      APPEND PROPERTY INSTALL_RPATH\n        \"$ORIGIN\")\n    _set_pure_swift_link_flags(SwiftInProcPluginServer \"../../\")\n  endif()\n\n  set_property(TARGET ${name}\n    PROPERTY BUILD_WITH_INSTALL_RPATH YES)\n\n  add_dependencies(compiler SwiftInProcPluginServer)\n  swift_install_in_component(TARGETS SwiftInProcPluginServer\n    ARCHIVE DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/host\" COMPONENT compiler\n    LIBRARY DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/host\" COMPONENT compiler\n    RUNTIME DESTINATION \"bin\" COMPONENT compiler)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining abort_apply Instruction in Swift Intermediate Language\nDESCRIPTION: Specifies the syntax for the abort_apply instruction, which aborts a suspended coroutine activation. It transfers control to the coroutine and takes the unwind path from the yield point.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_98\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'abort_apply' sil-value\n\nabort_apply %token\n```\n\n----------------------------------------\n\nTITLE: Git Code Formatting Commands\nDESCRIPTION: Git commands for formatting code changes using clang-format, including single commit and multiple commit formatting scenarios\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/FAQ.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# If there is only one commit that needs to be reformatted.\ngit-clang-format HEAD~1\ngit add .\ngit commit --amend --no-edit\n\n# Say the last N commits need to be reformatted.\n# Mark them as 'edit' instead of 'pick'.\ngit rebase -i HEAD~N\n# Re-run N times, reformatting each commit.\ngit-clang-format HEAD~1\ngit add .\ngit commit --amend --no-edit\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Host Tool with Dependencies\nDESCRIPTION: CMake configuration to add swift-scan-test as a host tool with LLVM component dependencies and specific build flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-scan-test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_tool(swift-scan-test\n  swift-scan-test.cpp\n  LLVM_LINK_COMPONENTS support\n  SWIFT_COMPONENT tools\n  THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY\n  DOES_NOT_USE_SWIFT\n)\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Point Ranges for Various Scripts\nDESCRIPTION: Defines Unicode code point ranges and character categories for multiple writing systems. Each block specifies the hex ranges, script names, and character types (Lo for letters, Mn for non-spacing marks, Nd for decimal numbers, etc).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_101\n\nLANGUAGE: unicode\nCODE:\n```\n12F90..12FF0  ; Cypro_Minoan # Lo  [97] CYPRO-MINOAN SIGN CM001..CYPRO-MINOAN SIGN CM114\n12FF1..12FF2  ; Cypro_Minoan # Po   [2] CYPRO-MINOAN SIGN CM301..CYPRO-MINOAN SIGN CM302\n\n10F70..10F81  ; Old_Uyghur # Lo  [18] OLD UYGHUR LETTER ALEPH..OLD UYGHUR LETTER LESH\n10F82..10F85  ; Old_Uyghur # Mn   [4] OLD UYGHUR COMBINING DOT ABOVE..OLD UYGHUR COMBINING TWO DOTS BELOW\n10F86..10F89  ; Old_Uyghur # Po   [4] OLD UYGHUR PUNCTUATION BAR..OLD UYGHUR PUNCTUATION FOUR DOTS\n```\n\n----------------------------------------\n\nTITLE: Configuring CRT Platform Library for Windows in CMake\nDESCRIPTION: Sets up the swiftCRT target library for Windows, including Windows-specific source files and compile flags. Configures the library for the Windows SDK.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftCRT ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY\n    ucrt.swift\n    ${swift_platform_sources}\n    POSIXError.swift\n\n    GYB_SOURCES\n      ${swift_platform_gyb_sources}\n\n    SWIFT_COMPILE_FLAGS\n      ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\n      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n      -Xcc -D_USE_MATH_DEFINES\n      ${swift_platform_compile_flags}\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n    TARGET_SDKS WINDOWS\n    INSTALL_IN_COMPONENT sdk-overlay)\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Sanitizer Support\nDESCRIPTION: Adds thread sanitizer support when specified in SWIFT_RUNTIME_USE_SANITIZERS.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"Thread\" IN_LIST SWIFT_RUNTIME_USE_SANITIZERS)\n  list(APPEND CXX_LINK_FLAGS \"-fsanitize=thread\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Array Struct in Swift\nDESCRIPTION: Defines a generic Array struct with an ArrayStorage property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: ArrayStorage // Storage object\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for SourceKit Library in CMake\nDESCRIPTION: Specifies private link dependencies for the sourcekitdAPI library, including Swift basic libraries and SourceKit support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/lib/API/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(sourcekitdAPI PRIVATE\n  swiftBasic\n  SourceKitSupport)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift AST Unit Test Files in CMake\nDESCRIPTION: Declares the test files to be included in the SwiftASTTests unit test suite. Contains various test files covering AST functionality, diagnostics, source locations, and type matching.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/AST/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_unittest(SwiftASTTests\n  ArithmeticEvaluator.cpp\n  ASTDumperTests.cpp\n  ASTWalkerTests.cpp\n  AvailabilityContextTests.cpp\n  AvailabilityDomainTests.cpp\n  IndexSubsetTests.cpp\n  DiagnosticBehaviorTests.cpp\n  DiagnosticConsumerTests.cpp\n  DiagnosticGroupsTests.cpp\n  DiagnosticFormattingTests.cpp\n  DiagnosticInfoTests.cpp\n  SourceLocTests.cpp\n  TestContext.cpp\n  TypeMatchTests.cpp\n  VersionRangeTests.cpp\n  ImportTests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Running XCTest tests on Windows\nDESCRIPTION: This command runs the XCTest test suite using Ninja.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_13\n\nLANGUAGE: cmd\nCODE:\n```\nninja -C S:\\b\\4 check-xctest\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftOnoneSupport Common Options in CMake\nDESCRIPTION: Sets up common build options for the SwiftOnoneSupport library, including source files, compile flags, and link flags. These options are used across different build configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swiftOnoneSupport_common_options\n  IS_STDLIB\n\n  # This file should be listed the first.  Module name is inferred from the\n  # filename.\n  SwiftOnoneSupport.swift\n\n  \"${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c\"\n\n  SWIFT_COMPILE_FLAGS \"-parse-stdlib\" \"-Xllvm\" \"-sil-inline-generics=false\" \"-Xfrontend\" \"-validate-tbd-against-ir=none\" \"-Xfrontend\" \"-check-onone-completeness\" \"-Xfrontend\" \"-disable-access-control\" \"-strict-memory-safety\" \"-enable-experimental-feature\" \"AllowUnsafeAttribute\" \"${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\" \"${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\"\n  LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Defining SourceKitSupport Library with Source Files in CMake\nDESCRIPTION: Defines the SourceKitSupport library and specifies its source files using add_sourcekit_library. The source files include implementations for concurrency, logging, immutable text buffers, thread-safe reference counting, tracing, and UID registry.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/lib/Support/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sourcekit_library(SourceKitSupport\n  Concurrency-libdispatch.cpp\n  Logging.cpp\n  ImmutableTextBuffer.cpp\n  ThreadSafeRefCntPtr.cpp\n  Tracing.cpp\n  UIDRegistry.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting C++17 Compilation Flag for InspectValue.cpp\nDESCRIPTION: Configures the InspectValue.cpp file to be compiled with C++17 standard.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnittest/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(InspectValue.cpp PROPERTIES COMPILE_FLAGS -std=c++17)\n```\n\n----------------------------------------\n\nTITLE: Implementing @get_subobject and @get_subobject_non_bridged Methods in Swift Array\nDESCRIPTION: Demonstrates the implementation of @get_subobject and @get_subobject_non_bridged methods in a Swift Array struct. These methods provide access to elements and size without modifying the array's state.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: BridgedArrayStorage\n  var size : Int\n\n  @get_subobject_non_bridged\n  func getElement(_ index: Int) -> T {\n    return storage.elementAt(index)\n  }\n\n  @get_subobject\n  func getSize() -> Int {\n    return size\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Function with Int32 Parameter\nDESCRIPTION: Defines a helper function named fooHelperExplicitFrameworkFunc1 that takes an Int32 parameter and returns an Int32 value. Uses Swift's explicit type declaration syntax.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/FooHelper.FooHelperExplicit.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nfunc fooHelperExplicitFrameworkFunc1(_ a: Int32) -> Int32\n```\n\n----------------------------------------\n\nTITLE: GYB Template Expansion Configuration for Core Types\nDESCRIPTION: Configuration for expanding GYB templates into Swift source files for core numeric and pointer types. Each expansion includes pointer size flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ngyb_expand(AtomicInt.swift.gyb AtomicInt.swift\n  FLAGS \"-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}\")\n\ngyb_expand(FloatingPointParsing.swift.gyb FloatingPointParsing.swift\n  FLAGS \"-DCMAKE_SIZEOF_VOID_P=${SwiftCore_SIZEOF_POINTER}\")\n```\n\n----------------------------------------\n\nTITLE: Complex Type Mangles\nDESCRIPTION: More complex type mangling patterns showing nested types, optionals, and arrays.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n_TtVCC4main3Foo4Ding3Str ---> main.Foo.Ding.Str\n_TtGSqGSaC5sugar7MyClass__ ---> [sugar.MyClass]?\n_TtGSaGSqC5sugar7MyClass__ ---> [sugar.MyClass?]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Tifinagh Script\nDESCRIPTION: Defines the Unicode code point ranges for the Tifinagh script, categorizing characters by their types (Lo, Lm, Po, Mn) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_35\n\nLANGUAGE: Unicode\nCODE:\n```\n2D30..2D67    ; Tifinagh # Lo  [56] TIFINAGH LETTER YA..TIFINAGH LETTER YO\n2D6F          ; Tifinagh # Lm       TIFINAGH MODIFIER LETTER LABIALIZATION MARK\n2D70          ; Tifinagh # Po       TIFINAGH SEPARATOR MARK\n2D7F          ; Tifinagh # Mn       TIFINAGH CONSONANT JOINER\n\n# Total code points: 59\n```\n\n----------------------------------------\n\nTITLE: Invalidating Previous Variable Values with `debug_value undef` in SIL\nDESCRIPTION: This sequence of SIL instructions demonstrates how `debug_value undef` is used for a variable (`var`) named \"x\". Initially, \"x\" holds the value `%0`. Later, `debug_value undef` indicates that the value of \"x\" is no longer known (e.g., due to optimization), effectively invalidating the previous `debug_value` instruction for this variable at this point in the program.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToUpdateDebugInfo.md#2025-04-23_snippet_8\n\nLANGUAGE: sil\nCODE:\n```\ndebug_value %0 : $Int, var, name \"x\" // var x = a\n...\ndebug_value undef : $Int, var, name \"x\" // x = <optimized out>\n```\n\n----------------------------------------\n\nTITLE: Error Handling with ErrorT Monad in Haskell\nDESCRIPTION: Demonstrates the use of ErrorT monad transform for typed automatic error propagation in Haskell. The example shows how non-throwing computations must be explicitly lifted into the monad, effectively creating a marked propagation system by omission.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_9\n\nLANGUAGE: Haskell\nCODE:\n```\nprettyPrintShiftJIS :: ShiftJISString -> ErrorT TranscodeError IO ()\nprettyPrintShiftJIS str = do\n  lift $ putChar '\"'     -- lift turns an IO computation into an ErrorT computation\n  case transcodeShiftJISToUTF8 str of\n    Left error -> throwError error\n    Right value -> lift $ putEscapedString value\n  lift $ putChar '\"'\n```\n\n----------------------------------------\n\nTITLE: Adding Core Subdirectory in Swift Project CMake Configuration\nDESCRIPTION: This CMake directive instructs the build system to process the CMakeLists.txt file in the Core subdirectory. This enables the build system to compile and link the Core components of the Swift project.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/include/SourceKit/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Core)\n```\n\n----------------------------------------\n\nTITLE: Defining Hyphen Characters in Unicode\nDESCRIPTION: This snippet defines the Unicode code points that have the Hyphen property. It includes various forms of hyphens used in different scripts and contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n002D          ; Hyphen # Pd       HYPHEN-MINUS\n00AD          ; Hyphen # Cf       SOFT HYPHEN\n058A          ; Hyphen # Pd       ARMENIAN HYPHEN\n1806          ; Hyphen # Pd       MONGOLIAN TODO SOFT HYPHEN\n2010..2011    ; Hyphen # Pd   [2] HYPHEN..NON-BREAKING HYPHEN\n2E17          ; Hyphen # Pd       DOUBLE OBLIQUE HYPHEN\n30FB          ; Hyphen # Po       KATAKANA MIDDLE DOT\nFE63          ; Hyphen # Pd       SMALL HYPHEN-MINUS\nFF0D          ; Hyphen # Pd       FULLWIDTH HYPHEN-MINUS\nFF65          ; Hyphen # Po       HALFWIDTH KATAKANA MIDDLE DOT\n```\n\n----------------------------------------\n\nTITLE: Enabling Semantic Editing with Compile Commands Export\nDESCRIPTION: Command to enable semantic editing in IDEs by generating a compile_commands.json file, which requires CMake 3.29 or newer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=YES\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Command Line Support Library in CMake\nDESCRIPTION: This CMake snippet conditionally builds a static library for Swift command line support. It sets up include directories, compile definitions, links against swiftShims, and configures installation rules. The library is only built if SwiftCore_ENABLE_COMMANDLINE_SUPPORT is enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CommandLineSupport/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(SwiftCore_ENABLE_COMMANDLINE_SUPPORT)\n  add_library(swiftCommandLineSupport STATIC CommandLine.cpp)\n  target_include_directories(swiftCommandLineSupport PRIVATE\n    \"${SwiftCore_SWIFTC_SOURCE_DIR}/include\"\n    \"${PROJECT_BINARY_DIR}/include\")\n  target_compile_definitions(swiftCommandLineSupport PUBLIC\n    -DSWIFT_STDLIB_HAS_COMMANDLINE)\n\n  target_link_libraries(swiftCommandLineSupport PRIVATE\n    swiftShims)\n\n  if(NOT BUILD_SHARED_LIBS)\n    install(TARGETS swiftCommandLineSupport\n      EXPORT SwiftCoreTargets\n      COMPONENT SwiftCore_runtime)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Numeric Character Range Definitions\nDESCRIPTION: Comprehensive mapping of Unicode codepoint ranges that represent numeric values. Includes vulgar fractions, currency numerators, various script-specific numbers, circled numbers, ideographic numbers, and compatibility ideographs with numeric properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericType.txt#2025-04-23_snippet_0\n\nLANGUAGE: unicode\nCODE:\n```\n00BC..00BE    ; Numeric # No   [3] VULGAR FRACTION ONE QUARTER..VULGAR FRACTION THREE QUARTERS\n09F4..09F9    ; Numeric # No   [6] BENGALI CURRENCY NUMERATOR ONE..BENGALI CURRENCY DENOMINATOR SIXTEEN\n0B72..0B77    ; Numeric # No   [6] ORIYA FRACTION ONE QUARTER..ORIYA FRACTION THREE SIXTEENTHS\n[...additional ranges...]\n```\n\n----------------------------------------\n\nTITLE: Printing LLDB Variable Value\nDESCRIPTION: Prints the current value of the LLDB convenience variable `$n`. This is often used in conjunction with breakpoint commands that modify such variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_17\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) p $n\n```\n\n----------------------------------------\n\nTITLE: Configuring CxxStdlib Dependencies\nDESCRIPTION: Sets up dependencies for the C++ Standard Library overlay, including conditional dependencies on Darwin and _Builtin_float. This ensures proper build order and compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/std/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_cxxstdlib_darwin_dependencies)\nif(SWIFT_BUILD_STDLIB AND SWIFT_BUILD_SDK_OVERLAY)\n  set(swift_cxxstdlib_darwin_dependencies Darwin)\nendif()\n\nset(swift_cxxstdlib_dependencies)\nif(NOT DEFINED SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT OR NOT SWIFT_BUILD_CLANG_OVERLAYS_SKIP_BUILTIN_FLOAT)\n  set(swift_cxxstdlib_dependencies _Builtin_float)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Swift Class Definition - FooClassBase\nDESCRIPTION: Base class implementation with instance and class methods, initializers and overridable functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.txt#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass FooClassBase {\n  class func fooBaseInstanceFunc0()\n  func fooBaseInstanceFunc0()\n  class func fooBaseInstanceFunc1(_ anObject: AnyObject!) -> FooClassBase!\n  func fooBaseInstanceFunc1(_ anObject: AnyObject!) -> FooClassBase!\n  init!()\n  convenience init!(float f: Float)\n  class func fooBaseInstanceFuncOverridden()\n  func fooBaseInstanceFuncOverridden()\n  class func fooBaseClassFunc0()\n  init!(_ x: Int32)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AggregateInstruction Protocol in Swift for SIL\nDESCRIPTION: Proposes an `AggregateInstruction` protocol to group instructions that create aggregate values, such as `StructInst` and `TupleInst`. Specific details need further design. Status: To-do.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\nAggregateInstruction // Protocol (Proposed)\n```\n\n----------------------------------------\n\nTITLE: Implementing Model-Object-Based Benchmark in Swift\nDESCRIPTION: Example of a benchmark that works with model objects representing a real-world scenario. This pattern is useful for testing performance with complex data structures and domain-specific operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/1.txt#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport TestsUtils\n\nstruct User {\n  let id: Int\n  var name: String\n  var friends: [User]\n  \n  func addFriend(_ user: User) -> User {\n    var copy = self\n    copy.friends.append(user)\n    return copy\n  }\n  \n  func findFriendsByName(_ name: String) -> [User] {\n    return friends.filter { $0.name == name }\n  }\n}\n\npublic let benchmarks = [\n  BenchmarkInfo(name: \"UserModelCreation\", runFunction: run_UserModelCreation),\n  BenchmarkInfo(name: \"UserModelFriendSearch\", runFunction: run_UserModelFriendSearch),\n]\n\n@inline(never)\npublic func run_UserModelCreation(_ N: Int) {\n  for _ in 1...N {\n    var users: [User] = []\n    for i in 0..<100 {\n      let newUser = User(id: i, name: \"User\\(i)\", friends: [])\n      users.append(newUser)\n    }\n    blackHole(users)\n  }\n}\n\n@inline(never)\npublic func run_UserModelFriendSearch(_ N: Int) {\n  // Create a network of users\n  var users: [User] = []\n  for i in 0..<100 {\n    users.append(User(id: i, name: \"User\\(i % 10)\", friends: []))\n  }\n  \n  // Connect users\n  for i in 0..<users.count {\n    for j in 0..<users.count where i != j && j % 7 == 0 {\n      users[i] = users[i].addFriend(users[j])\n    }\n  }\n  \n  // Benchmark search operations\n  var count = 0\n  for _ in 1...N {\n    for i in 0..<users.count {\n      let found = users[i].findFriendsByName(\"User3\")\n      count += found.count\n    }\n  }\n  blackHole(count)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Private Global Variable and Public RawRepresentable Enum in Swift\nDESCRIPTION: Declares a private global variable and a public enum that conforms to Hashable, Equatable, and RawRepresentable protocols. The enum uses UInt32 as its raw value type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nvar __PrivAnonymousA: Int { get }\nstruct E0 : Hashable, Equatable, RawRepresentable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n  typealias RawValue = UInt32\n}\n```\n\n----------------------------------------\n\nTITLE: LibStdCXX Module Map Installation Configuration in CMake\nDESCRIPTION: Configures and installs LibStdCXX module maps and headers for Swift SDK platforms. Handles both dynamic and static library paths, with special provisions for bootstrapping modes. Sets up custom commands for copying files and creating necessary directory structures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/libstdcxx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(libstdcxx_modulemap_target_list)\nforeach(sdk ${SWIFT_SDKS})\n  if(NOT sdk IN_LIST SWIFT_LIBSTDCXX_PLATFORMS)\n    continue()\n  endif()\n\n  set(module_dir \"${SWIFTLIB_DIR}/${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n  set(module_dir_static \"${SWIFTSTATICLIB_DIR}/${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n\n  set(libstdcxx_header \"libstdcxx.h\")\n  set(libstdcxx_header_out \"${module_dir}/libstdcxx.h\")\n  set(libstdcxx_header_out_static \"${module_dir_static}/libstdcxx.h\")\n  set(libstdcxx_modulemap \"libstdcxx.modulemap\")\n  set(libstdcxx_modulemap_out \"${module_dir}/libstdcxx.modulemap\")\n  set(libstdcxx_modulemap_out_static \"${module_dir_static}/libstdcxx.modulemap\")\n\n  add_custom_command_target(\n      copy_libstdcxx_modulemap\n      COMMAND\n      \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" ${module_dir}\n      COMMAND\n      \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\" \"${CMAKE_CURRENT_SOURCE_DIR}/${libstdcxx_modulemap}\" \"${libstdcxx_modulemap_out}\"\n      OUTPUT ${libstdcxx_modulemap_out}\n      DEPENDS ${libstdcxx_modulemap}\n      COMMENT \"Copying libstdcxx modulemap to resources\")\n  list(APPEND libstdcxx_modulemap_target_list ${copy_libstdcxx_modulemap})\n  add_dependencies(swift-stdlib-${SWIFT_SDK_${sdk}_LIB_SUBDIR} ${copy_libstdcxx_modulemap})\n\n  add_custom_command_target(\n      copy_libstdcxx_header\n      COMMAND\n      \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" ${module_dir}\n      COMMAND\n      \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\" \"${CMAKE_CURRENT_SOURCE_DIR}/${libstdcxx_header}\" \"${libstdcxx_header_out}\"\n      OUTPUT ${libstdcxx_header_out}\n      DEPENDS ${libstdcxx_header}\n      COMMENT \"Copying libstdcxx header to resources\")\n  list(APPEND libstdcxx_modulemap_target_list ${copy_libstdcxx_header})\n  add_dependencies(swift-stdlib-${SWIFT_SDK_${sdk}_LIB_SUBDIR} ${copy_libstdcxx_header})\n\n  if(SWIFT_BUILD_STATIC_STDLIB OR SWIFT_SDK_${sdk}_STATIC_ONLY)\n    add_custom_command_target(\n        copy_libstdcxx_modulemap_static\n        COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" ${module_dir_static}\n        COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n        \"${libstdcxx_modulemap_out}\" \"${libstdcxx_modulemap_out_static}\"\n        OUTPUT ${libstdcxx_modulemap_out_static}\n        DEPENDS ${copy_libstdcxx_modulemap}\n        COMMENT \"Copying libstdcxx modulemap to static resources\")\n    list(APPEND libstdcxx_modulemap_target_list ${copy_libstdcxx_modulemap_static})\n    add_dependencies(swift-stdlib-${SWIFT_SDK_${sdk}_LIB_SUBDIR} ${copy_libstdcxx_modulemap_static})\n\n    add_custom_command_target(\n        copy_libstdcxx_header_static\n        COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" ${module_dir_static}\n        COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n        \"${libstdcxx_header_out}\" \"${libstdcxx_header_out_static}\"\n        OUTPUT ${libstdcxx_header_out_static}\n        DEPENDS ${copy_libstdcxx_header}\n        COMMENT \"Copying libstdcxx header to static resources\")\n    list(APPEND libstdcxx_modulemap_target_list ${copy_libstdcxx_header_static})\n    add_dependencies(swift-stdlib-${SWIFT_SDK_${sdk}_LIB_SUBDIR} ${copy_libstdcxx_header_static})\n  endif()\n\n  swift_install_in_component(FILES \"${libstdcxx_modulemap_out}\"\n      DESTINATION \"lib/swift/${SWIFT_SDK_${sdk}_LIB_SUBDIR}\"\n      COMPONENT sdk-overlay)\n  swift_install_in_component(FILES \"${libstdcxx_header_out}\"\n      DESTINATION \"lib/swift/${SWIFT_SDK_${sdk}_LIB_SUBDIR}\"\n      COMPONENT sdk-overlay)\n\n  if(SWIFT_BUILD_STATIC_STDLIB OR SWIFT_SDK_${sdk}_STATIC_ONLY)\n    swift_install_in_component(FILES \"${libstdcxx_modulemap_out_static}\"\n        DESTINATION \"lib/swift_static/${SWIFT_SDK_${sdk}_LIB_SUBDIR}\"\n        COMPONENT sdk-overlay)\n    swift_install_in_component(FILES \"${libstdcxx_header_out_static}\"\n        DESTINATION \"lib/swift_static/${SWIFT_SDK_${sdk}_LIB_SUBDIR}\"\n        COMPONENT sdk-overlay)\n  endif()\n\n  if(BOOTSTRAPPING_MODE MATCHES \"BOOTSTRAPPING.*\")\n    foreach(bootstrapping \"0\" \"1\")\n      get_bootstrapping_path(bootstrapping_dir ${module_dir} ${bootstrapping})\n      set(libstdcxx_modulemap_out_bootstrapping \"${bootstrapping_dir}/libstdcxx.modulemap\")\n      set(libstdcxx_header_out_bootstrapping \"${bootstrapping_dir}/libstdcxx.h\")\n\n      add_custom_command_target(unused_var\n          COMMAND\n          \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" \"${bootstrapping_dir}\"\n          COMMAND\n          \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/${libstdcxx_modulemap}\" \"${libstdcxx_modulemap_out_bootstrapping}\"\n\n          CUSTOM_TARGET_NAME \"copy-libstdcxx-modulemap-bootstrapping${bootstrapping}\"\n          OUTPUT \"${libstdcxx_modulemap_out_bootstrapping}\"\n          DEPENDS ${libstdcxx_modulemap}\n          COMMENT \"Copying libstdcxx modulemap to resources for bootstrapping${bootstrapping}\")\n\n      add_custom_command_target(unused_var\n          COMMAND\n          \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" \"${bootstrapping_dir}\"\n          COMMAND\n          \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/${libstdcxx_header}\" \"${libstdcxx_header_out_bootstrapping}\"\n\n          CUSTOM_TARGET_NAME \"copy-libstdcxx-header-bootstrapping${bootstrapping}\"\n          OUTPUT \"${libstdcxx_header_out_bootstrapping}\"\n          DEPENDS ${libstdcxx_header}\n          COMMENT \"Copying libstdcxx header to resources for bootstrapping${bootstrapping}\")\n    endforeach()\n  endif()\nendforeach()\nadd_custom_target(libstdcxx-modulemap DEPENDS ${libstdcxx_modulemap_target_list})\nset_property(TARGET libstdcxx-modulemap PROPERTY FOLDER \"Miscellaneous\")\nadd_dependencies(sdk-overlay libstdcxx-modulemap)\n```\n\n----------------------------------------\n\nTITLE: Defining Selector Name Lookup Syntax in Swift\nDESCRIPTION: This snippet defines the syntax for selector name lookup in Swift, showing how selector-style declarations can be referenced as members of their enclosing context.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/KeywordArguments.rst#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nexpr-selector-member-ref ::= expr-postfix '.' identifier ':' (identifier ':')+\n\nclass C {\n  func foo(_ a: Int) bar(b: Int) bas(c: Int)\n```\n\n----------------------------------------\n\nTITLE: Setting Windows DLL Compilation Flag for Swift Reflection Test\nDESCRIPTION: Sets the _WINDLL compile flag for swift-reflection-test.c to ensure proper variable importing across platforms. This is applied universally for simplicity despite being primarily needed for Windows targets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/tools/swift-reflection-test/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset_source_files_properties(swift-reflection-test.c\n                            PROPERTIES\n                              COMPILE_FLAGS -D_WINDLL)\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Build Detection\nDESCRIPTION: Determines if the benchmark suite is being built standalone or as part of a larger project by comparing source and current directories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_BENCHMARK_BUILT_STANDALONE FALSE)\nif(\"${CMAKE_SOURCE_DIR}\" STREQUAL \"${CMAKE_CURRENT_SOURCE_DIR}\")\n  set(SWIFT_BENCHMARK_BUILT_STANDALONE TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Importing C++ Member Function Pointers in Swift\nDESCRIPTION: Shows how C++ member function pointers could be imported into Swift using a special calling convention @convention(cxx_method).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_46\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nclass Point {\npublic:\n  double distanceTo(Line line) const;\n};\n\nvoid CallMemberFunctionPointer(Point p, double (Point::*ptr)(Line));\n```\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\npublic struct Point {\n  public func distanceTo(_ line: Line) -> Double { ... }\n}\n\nfunc CallMemberFunctionPointer(\n  _ p: Point,\n  _ ptr: @convention(cxx_method) (Point) -> (Line) -> Double\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Manpage Generation with CMake\nDESCRIPTION: CMake configuration that sets up the generation and installation of the Swift compiler's man page documentation. It includes the SwiftManpage module and configures the manpage with source file path, header, basename, section number and installation component settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/tools/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(SwiftManpage)\n\nmanpage(\n    SOURCE \"${CMAKE_CURRENT_SOURCE_DIR}/swift.pod\"\n    PAGE_HEADER \"Swift Documentation\"\n    MAN_FILE_BASENAME swift\n    MAN_SECTION 1\n    INSTALL_IN_COMPONENT compiler)\n```\n\n----------------------------------------\n\nTITLE: Configuring WASI Modulemap and API Notes in CMake\nDESCRIPTION: Sets up custom commands and targets for WASI (WebAssembly System Interface) modulemap and API notes. It handles copying of resources, installation, and dependency management for both static and dynamic libraries across different architectures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(wasilibc_modulemap_target_list)\nif(\"WASI\" IN_LIST SWIFT_SDKS)\n  set(wasilibc_modulemap_source \"wasi-libc.modulemap\")\n  foreach(arch ${SWIFT_SDK_WASI_ARCHITECTURES})\n    set(arch_subdir \"${SWIFT_SDK_WASI_LIB_SUBDIR}/${arch}\")\n    set(module_dir \"${SWIFTLIB_DIR}/${arch_subdir}\")\n    set(module_dir_static \"${SWIFTSTATICLIB_DIR}/${arch_subdir}\")\n\n    add_custom_command_target(\n      copy_wasilibc_modulemap_resource\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" ${module_dir} ${module_dir_static}\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/${wasilibc_modulemap_source}\" ${module_dir}\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/${wasilibc_modulemap_source}\" ${module_dir_static}\n      OUTPUT ${module_dir}/${wasilibc_modulemap_source} ${module_dir_static}/${wasilibc_modulemap_source}\n      COMMENT \"Copying WASILibc modulemap to resource directories\")\n    add_dependencies(sdk-overlay ${copy_wasilibc_modulemap_resource})\n    list(APPEND wasilibc_modulemap_target_list ${copy_wasilibc_modulemap_resource})\n\n    swift_install_in_component(FILES \"${wasilibc_modulemap_source}\"\n                               DESTINATION \"lib/swift/${arch_subdir}\"\n                               COMPONENT sdk-overlay)\n    if(SWIFT_BUILD_STATIC_STDLIB)\n      swift_install_in_component(FILES \"${wasilibc_modulemap_source}\"\n                                 DESTINATION \"lib/swift_static/${arch_subdir}\"\n                                 COMPONENT sdk-overlay)\n    endif()\n\n    set(wasilibc_apinotes_source \"SwiftWASILibc.apinotes\")\n    add_custom_command_target(\n      copy_wasilibc_apinotes_resource\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" ${SWIFTLIB_DIR}/apinotes ${SWIFTSTATICLIB_DIR}/apinotes\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/${wasilibc_apinotes_source}\" ${SWIFTLIB_DIR}/apinotes\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n          \"${CMAKE_CURRENT_SOURCE_DIR}/${wasilibc_apinotes_source}\" ${SWIFTSTATICLIB_DIR}/apinotes\n      OUTPUT\n        ${SWIFTLIB_DIR}/apinotes/${wasilibc_apinotes_source}\n        ${SWIFTSTATICLIB_DIR}/apinotes/${wasilibc_apinotes_source}\n      COMMENT \"Copying WASILibc API notes to resource directories\")\n\n    list(APPEND wasilibc_modulemap_target_list ${copy_wasilibc_apinotes_resource})\n    add_dependencies(sdk-overlay ${copy_wasilibc_apinotes_resource})\n    swift_install_in_component(FILES \"${wasilibc_apinotes_source}\"\n                               DESTINATION \"lib/swift/apinotes\"\n                               COMPONENT sdk-overlay)\n    if(SWIFT_BUILD_STATIC_STDLIB)\n      swift_install_in_component(FILES \"${wasilibc_apinotes_source}\"\n                                 DESTINATION \"lib/swift_static/apinotes\"\n                                 COMPONENT sdk-overlay)\n    endif()\n\n  endforeach()\nendif()\nadd_custom_target(wasilibc_modulemap DEPENDS ${wasilibc_modulemap_target_list})\nset_property(TARGET wasilibc_modulemap PROPERTY FOLDER \"Miscellaneous\")\nadd_dependencies(sdk-overlay wasilibc_modulemap)\n```\n\n----------------------------------------\n\nTITLE: Defining SWIFT_BUILD_PERF_TESTSUITE Option in CMake\nDESCRIPTION: Defines a CMake build option named SWIFT_BUILD_PERF_TESTSUITE. This option allows users to enable or disable the creation of in-tree targets specifically for building Swift performance benchmarks. The default value is set to FALSE.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_BUILD_PERF_TESTSUITE\n    \"Create in-tree targets for building swift performance benchmarks.\"\n    FALSE)\n```\n\n----------------------------------------\n\nTITLE: Project Version Configuration with Build Number\nDESCRIPTION: Sets up project version using semantic versioning and optional build number from environment variable, with Windows SxS module compatibility check.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif($ENV{BUILD_NUMBER})\n  # NOTE: SxS modules have a limit on each component being [0-65535].\n  # https://learn.microsoft.com/en-us/windows/win32/sbscs/assembly-versions\n  math(EXPR BUILD_NUMBER \"$ENV{BUILD_NUMBER} % 65535\")\n  set(BUILD_NUMBER \".${BUILD_NUMBER}\")\nendif()\nproject(SwiftOverlay\n  LANGUAGES C CXX Swift\n  VERSION 6.1.0${BUILD_NUMBER})\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Paths for libSwiftScan\nDESCRIPTION: This snippet sets up the installation paths for libSwiftScan, handling differences between Windows and other platforms. On non-Windows systems, it also creates a symlink in the legacy location.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Tooling/libSwiftScan/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Windows\")\nswift_install_in_component(TARGETS libSwiftScan\n  ARCHIVE DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}\" COMPONENT compiler\n  LIBRARY DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}\" COMPONENT compiler\n  RUNTIME DESTINATION \"bin\" COMPONENT compiler)\nelse()\n  swift_install_in_component(TARGETS libSwiftScan\n    ARCHIVE DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/host/compiler\" COMPONENT compiler\n    LIBRARY DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/host/compiler\" COMPONENT compiler\n    RUNTIME DESTINATION \"bin\" COMPONENT compiler)\n\n  if(EXISTS ${LLVM_CMAKE_DIR}/LLVMInstallSymlink.cmake)\n    set(INSTALL_SYMLINK ${LLVM_CMAKE_DIR}/LLVMInstallSymlink.cmake)\n  endif()\n  precondition(INSTALL_SYMLINK\n               MESSAGE \"LLVMInstallSymlink script must be available.\")\n\n  set(FULL_LIB_NAME \"lib${SWIFT_SCAN_LIB_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}\")\n  message(STATUS \"Installing symlink (compiler/${FULL_LIB_NAME}) to lib${LLVM_LIBDIR_SUFFIX}/swift/host/${FULL_LIB_NAME}\")\n  install(SCRIPT ${INSTALL_SYMLINK}\n          CODE \"install_symlink(${FULL_LIB_NAME}\n                                compiler/${FULL_LIB_NAME}\n                                lib${LLVM_LIBDIR_SUFFIX}/swift/host\n                                ${SWIFT_COPY_OR_SYMLINK})\"\n          COMPONENT compiler)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Swift Backtrace Executable in CMake\nDESCRIPTION: Sets up a conditional build for a static version of the swift-backtrace executable. This target is only created if static stdlib building is enabled or if LINUX_STATIC is in the list of Swift SDKs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/libexec/swift-backtrace/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(static_target_sdks)\nif(SWIFT_BUILD_STATIC_STDLIB)\n  list(APPEND static_target_sdks \"LINUX\")\nendif()\nif(\"LINUX_STATIC\" IN_LIST SWIFT_SDKS)\n  list(APPEND static_target_sdks \"LINUX_STATIC\")\nendif()\nif(static_target_sdks)\n  add_swift_target_executable(swift-backtrace-static BUILD_WITH_LIBEXEC\n    PREFER_STATIC\n\n    ${BACKTRACING_SOURCES}\n\n    SWIFT_MODULE_DEPENDS         ${runtime}\n\n    SWIFT_MODULE_DEPENDS_OSX          ${darwin}\n    SWIFT_MODULE_DEPENDS_WINDOWS      ${wincrt_sdk}\n    SWIFT_MODULE_DEPENDS_LINUX        ${glibc}\n    SWIFT_MODULE_DEPENDS_LINUX_STATIC ${musl}\n\n    DEPLOYMENT_VERSION_OSX ${osx_deployment_target}\n\n    INSTALL_IN_COMPONENT libexec\n    COMPILE_FLAGS\n      ${BACKTRACING_COMPILE_FLAGS}\n      -parse-as-library\n\n    TARGET_SDKS ${static_target_sdks})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Macro Library Build in CMake\nDESCRIPTION: CMake configuration that adds a Swift macro library named 'SwiftMacros'. It includes multiple Swift source files implementing different macros and specifies required Swift dependencies for compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Macros/Sources/SwiftMacros/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_macro_library(SwiftMacros\n  OptionSetMacro.swift\n  DebugDescriptionMacro.swift\n  DistributedResolvableMacro.swift\n  TaskMacro.swift\n  SyntaxExtensions.swift\n  TaskLocalMacro.swift\n  SwiftifyImportMacro.swift\n  SWIFT_DEPENDENCIES\n    SwiftDiagnostics\n    SwiftSyntax\n    SwiftSyntaxBuilder\n    SwiftSyntaxMacros\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Block for Thai Script\nDESCRIPTION: Lists Unicode code points for Thai script characters with their character types. Includes consonants, vowels, tone marks, digits, and punctuation covering 86 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\n0E01..0E30    ; Thai # Lo  [48] THAI CHARACTER KO KAI..THAI CHARACTER SARA A\n0E31          ; Thai # Mn       THAI CHARACTER MAI HAN-AKAT\n0E32..0E33    ; Thai # Lo   [2] THAI CHARACTER SARA AA..THAI CHARACTER SARA AM\n0E34..0E3A    ; Thai # Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n0E40..0E45    ; Thai # Lo   [6] THAI CHARACTER SARA E..THAI CHARACTER LAKKHANGYAO\n0E46          ; Thai # Lm       THAI CHARACTER MAIYAMOK\n0E47..0E4E    ; Thai # Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN\n0E4F          ; Thai # Po       THAI CHARACTER FONGMAN\n0E50..0E59    ; Thai # Nd  [10] THAI DIGIT ZERO..THAI DIGIT NINE\n0E5A..0E5B    ; Thai # Po   [2] THAI CHARACTER ANGKHANKHU..THAI CHARACTER KHOMUT\n\n# Total code points: 86\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Tangut Script\nDESCRIPTION: This snippet defines the Unicode block for the Tangut script, including an iteration mark, ideographs, and components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_97\n\nLANGUAGE: Unicode\nCODE:\n```\n16FE0         ; Tangut # Lm       TANGUT ITERATION MARK\n17000..187F7  ; Tangut # Lo [6136] TANGUT IDEOGRAPH-17000..TANGUT IDEOGRAPH-187F7\n18800..18AFF  ; Tangut # Lo [768] TANGUT COMPONENT-001..TANGUT COMPONENT-768\n18D00..18D08  ; Tangut # Lo   [9] TANGUT IDEOGRAPH-18D00..TANGUT IDEOGRAPH-18D08\n```\n\n----------------------------------------\n\nTITLE: Data File Copy Loop Configuration\nDESCRIPTION: Sets up a loop to create custom commands for copying or symlinking each data file to the output directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Migrator/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(input ${datafiles})\n  set(source \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\")\n  set(dest \"${output_dir}/${input}\")\n\n  add_custom_command(OUTPUT\n                       \"${output_dir}/${input}\"\n                     DEPENDS\n                       \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\"\n                     COMMAND\n                       \"${CMAKE_COMMAND}\" \"-E\" \"${SWIFT_COPY_OR_SYMLINK}\" \"${source}\" \"${dest}\")\n  list(APPEND outputs \"${output_dir}/${input}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Macro Source Directories in CMake\nDESCRIPTION: Adds subdirectories containing Swift macro source code to the build system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Macros/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Sources/SwiftMacros)\nadd_subdirectory(Sources/ObservationMacros)\n```\n\n----------------------------------------\n\nTITLE: Configuring SourceKitD REPL Executable Build in CMake\nDESCRIPTION: Sets up the build configuration for the SourceKitD REPL executable, including source files, linked components, and dependencies. It handles platform-specific settings for Darwin and non-Darwin systems, and configures code coverage analysis if enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-repl/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sourcekit_executable(sourcekitd-repl\n  sourcekitd-repl.cpp\n  LLVM_LINK_COMPONENTS coverage lto\n)\nif(SWIFT_SOURCEKIT_USE_INPROC_LIBRARY)\n  target_link_libraries(sourcekitd-repl PRIVATE sourcekitdInProc)\nelse()\n  target_link_libraries(sourcekitd-repl PRIVATE sourcekitd)\nendif()\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  target_link_libraries(sourcekitd-repl PRIVATE\n    dispatch\n    BlocksRuntime)\nendif()\ntarget_link_libraries(sourcekitd-repl PRIVATE\n  LibEdit::LibEdit)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  set_target_properties(sourcekitd-repl PROPERTIES\n    INSTALL_RPATH \"@executable_path/../lib\")\n  target_link_options(sourcekitd-repl PRIVATE\n    \"LINKER:-exported_symbol,_main\")\nendif()\nif(SWIFT_ANALYZE_CODE_COVERAGE)\n  set_property(TARGET sourcekitd-repl APPEND_STRING PROPERTY\n    LINK_FLAGS \" -fprofile-instr-generate -fcoverage-mapping\")\nendif()\n\nadd_dependencies(tools sourcekitd-repl)\nswift_install_in_component(TARGETS sourcekitd-repl\n  RUNTIME DESTINATION bin COMPONENT tools)\n```\n\n----------------------------------------\n\nTITLE: JSON Format for Swift Pass Pipeline Descriptors\nDESCRIPTION: The JSON descriptor format for defining Swift compiler pass pipelines. It includes a pass manager ID, execution strategy (run_n_times or run_to_fixed_point), a count parameter, and a list of passes to execute.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/pass-pipeline/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\n    \"PASS_MANAGER_ID\",\n    \"run_n_times\"|\"run_to_fixed_point\",\n    count,\n    \"PASS1\", \"PASS2\", ...\n  ],\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Runtime Unit Test Library in CMake\nDESCRIPTION: This CMake snippet sets up the Swift Runtime Unit Test library. It defines the library target, specifies source files, module dependencies for different platforms, compile flags, and installation details. The library is configured as part of the Swift standard library experimental components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/RuntimeUnittest/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_stdlib_unittest_compile_flags)\n\nadd_swift_target_library(swiftRuntimeUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  # This file should be listed the first.  Module name is inferred from the\n  # filename.\n  RuntimeUnittest.swift\n\n  ExclusivityTests.cpp\n\n  SWIFT_MODULE_DEPENDS StdlibUnittest\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT\n  C_COMPILE_FLAGS -I${SWIFT_SOURCE_DIR}/stdlib/include\n  SWIFT_COMPILE_FLAGS ${swift_stdlib_unittest_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Embedding Manifest for Swift CRT Library in CMake\nDESCRIPTION: Calls the embed_manifest function to include a manifest file with the swiftCRT library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/CRT/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nembed_manifest(swiftCRT)\n```\n\n----------------------------------------\n\nTITLE: Declaring Function and Variables with Computed Properties in Swift\nDESCRIPTION: Defines a function that takes and returns an Int32, along with two variables (likely enum cases) with computed get-only properties. These declarations appear to be related to the FooHelper module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/FooHelper.printed.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nfunc fooHelperFunc1(_ a: Int32) -> Int32\nvar FooHelperUnnamedEnumeratorA1: Int { get }\nvar FooHelperUnnamedEnumeratorA2: Int { get }\n```\n\n----------------------------------------\n\nTITLE: Implementing FooRepeatedMembers with Extensions\nDESCRIPTION: Defines a class with methods and properties that are then extended with category-like extensions, demonstrating method and property organization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooRepeatedMembers : FooClassBase {\n  func repeatedMethod()\n  func anotherMethod()\n  init!()\n  convenience init!(float f: Float)\n}\nextension FooRepeatedMembers {\n  var repeatedPropertyInCategory: Int32\n  func repeatedMethodInCategory()\n}\nextension FooRepeatedMembers {\n  var repeatedPropertyFromCategory: Int32\n  func repeatedMethodFromCategory()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPATH for libSwiftScan on Unix-like Systems\nDESCRIPTION: This snippet sets up the RPATH for libSwiftScan on Linux, Android, OpenBSD, and FreeBSD platforms. It ensures the library can find the correct Swift runtime path.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Tooling/libSwiftScan/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_HOST_VARIANT_SDK MATCHES \"LINUX|ANDROID|OPENBSD|FREEBSD\" AND BOOTSTRAPPING_MODE STREQUAL \"HOSTTOOLS\")\n  set_property(\n    TARGET libSwiftScan\n    APPEND PROPERTY INSTALL_RPATH \"$ORIGIN/../${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Target Library for Windows SDK in CMake\nDESCRIPTION: This CMake command adds a Swift target library named 'swiftWinSDK' for the Windows SDK. It specifies the source file, compilation flags, link flags, target SDK, and installation component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Windows/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftWinSDK ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY\n    WinSDK.swift\n\n    SWIFT_COMPILE_FLAGS ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n    TARGET_SDKS WINDOWS\n    INSTALL_IN_COMPONENT sdk-overlay)\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Snapshots Using the Command Line Tool\nDESCRIPTION: This command lists available Swift development snapshots in chronological order. Each snapshot is prefixed with a number indicating its position in historical time, helping users gauge the time range between snapshots.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/swift_snapshot_tool/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# xcrun swift run swift_snapshot_tool list\n[INFO] Starting to download snapshot information from github. \n[INFO] Finished downloading snapshot information from github. \n0 swift-DEVELOPMENT-SNAPSHOT-2024-09-06-a\n1 swift-DEVELOPMENT-SNAPSHOT-2024-09-05-a\n2 swift-DEVELOPMENT-SNAPSHOT-2024-09-04-a\n3 swift-DEVELOPMENT-SNAPSHOT-2024-08-29-a\n...\n```\n\n----------------------------------------\n\nTITLE: Analyzing Generic Signature Changes in Swift\nDESCRIPTION: This section outlines changes to generic signatures and mangled names for various Swift functions and types. It includes modifications to constructors, functions, and protocols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n/* Generic Signature Changes */\ncake: Constructor S1.init(_:) has mangled name changing from 'cake.S1.init(Swift.Int) -> cake.S1' to 'cake.S1.init(Swift.Double) -> cake.S1'\ncake: Func C1.foo1() has mangled name changing from 'static cake.C1.foo1() -> ()' to 'cake.C1.foo1() -> ()'\ncake: Func C1.foo2(_:) has mangled name changing from 'cake.C1.foo2(Swift.Int) -> ()' to 'cake.C1.foo2(() -> ()) -> ()'\ncake: Func P1.P1Constraint() has generic signature change from <Self where Self : cake.P1, Self : cake.P2> to <Self where Self : cake.P1>\ncake: Func P1.P1Constraint() has mangled name changing from '(extension in cake):cake.P1< where A: cake.P2>.P1Constraint() -> ()' to '(extension in cake):cake.P1.P1Constraint() -> ()'\ncake: Func S1.foo3() has mangled name changing from 'cake.S1.foo3() -> ()' to 'static cake.S1.foo3() -> ()'\ncake: Func S1.foo5(x:y:) has mangled name changing from 'cake.S1.foo5(x: Swift.Int, y: Swift.Int) -> ()' to 'cake.S1.foo5(x: Swift.Int, y: Swift.Int, z: Swift.Int) -> ()'\ncake: Func Somestruct2.foo1(_:) has mangled name changing from 'static cake.Somestruct2.foo1(cake.C3) -> ()' to 'static cake.NSSomestruct2.foo1(cake.C1) -> ()'\ncake: Func addingAnInverse(_:) has generic signature change from <T> to <T where T : ~Copyable>\ncake: Func addingAnInverse(_:) has mangled name changing from 'cake.addingAnInverse<A>(A) -> ()' to 'cake.addingAnInverse<A where A: ~Swift.Copyable>(A) -> ()'\ncake: Func ownershipChange(_:_:) has mangled name changing from 'cake.ownershipChange(inout Swift.Int, __shared Swift.Int) -> ()' to 'cake.ownershipChange(Swift.Int, __owned Swift.Int) -> ()'\ncake: Func returnFunctionTypeOwnershipChange() has mangled name changing from 'cake.returnFunctionTypeOwnershipChange() -> (cake.C1) -> ()' to 'cake.returnFunctionTypeOwnershipChange() -> (__owned cake.C1) -> ()'\ncake: Protocol P3 has generic signature change from <Self : cake.P1, Self : cake.P2> to <Self : cake.P1, Self : cake.P4>\ncake: Struct Somestruct2 has mangled name changing from 'cake.Somestruct2' to 'cake.NSSomestruct2'\n```\n\n----------------------------------------\n\nTITLE: Documenting Moved and Renamed Declarations in Swift\nDESCRIPTION: This snippet shows declarations that have been moved to different types or renamed, including changes to class types, operator types, and Objective-C name changes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n/* Moved Decls */\ncake: Class ClassToStruct has been changed to a Struct\ncake: InfixOperator ..*.. has been changed to a PrefixOperator\ncake: Protocol ProtocolToEnum has been changed to a Enum\n\n/* Renamed Decls */\ncake: Class SwiftObjcClass has ObjC name change from OldObjCClass to NewObjCClass\ncake: Func S1.foo5(x:y:) has been renamed to Func foo5(x:y:z:)\ncake: Func SwiftObjcClass.foo(a:b:c:) has ObjC name change from OldObjCFool:OldObjCA:OldObjCB: to NewObjCFool:NewObjCA:NewObjCB:\ncake: Struct Somestruct2 has been renamed to Struct NSSomestruct2\n```\n\n----------------------------------------\n\nTITLE: Documentation Response Format in SourceKit\nDESCRIPTION: JSON schema detailing the structure of responses from documentation requests. Includes source text, annotations, entities, and optional diagnostics about the processed code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.sourcetext>:        (string)              // Source contents.\n    <key.annotations>:       (array) [annotation*] // An array of annotations for the tokens of\n                                                   // source text, they refer to the text via offset + length\n                                                   // entries. This includes syntactic annotations (e.g.\n                                                   // keywords) and semantic ones. The semantic ones include\n                                                   // the name and USR of the referenced symbol.\n    [opt] <key.entities>:    (array) [entity*]     // A structure of the symbols, similar to what the indexing\n                                                   // request returns (a class has its methods as sub-entities,\n                                                   // etc.). This includes the function parameters and their\n                                                   // types as entities. Each entity refers to the range of the\n                                                   // original text via offset + length entries.\n    [opt] <key.diagnostics>: (array) [diagnostic*] // Compiler diagnostics emitted during parsing of a source file.\n                                                   // This key is only present if a diagnostic was emitted (and thus\n                                                   // the length of the array is non-zero).\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unicode Character Breaking Rules for Devanagari Letter Ka with Hangul\nDESCRIPTION: This code snippet demonstrates the grapheme breaking behavior when DEVANAGARI LETTER KA (U+0915) interacts with Hangul characters, showing how boundaries are determined between scripts with different properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0915 ÷ 1100 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ 0915 × 0308 ÷ 1100 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ 0915 ÷ 1160 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 0915 × 0308 ÷ 1160 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 0915 ÷ 11A8 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 0915 × 0308 ÷ 11A8 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 0915 ÷ AC00 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 0915 × 0308 ÷ AC00 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 0915 ÷ AC01 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ 0915 × 0308 ÷ AC01 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Range Definitions for ID_Continue Property\nDESCRIPTION: A comprehensive list of Unicode character ranges that are designated with the ID_Continue property. These ranges define characters that can continue an identifier (appear after the first character). The format shows the hexadecimal character range followed by the property name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_29\n\nLANGUAGE: unicode\nCODE:\n```\nA9B4..A9B5    ; ID_Continue\nA9B6..A9B9    ; ID_Continue\nA9BA..A9BB    ; ID_Continue\nA9BC..A9BD    ; ID_Continue\nA9BE..A9C0    ; ID_Continue\nA9CF          ; ID_Continue\nA9D0..A9D9    ; ID_Continue\nA9E0..A9E4    ; ID_Continue\nA9E5          ; ID_Continue\nA9E6          ; ID_Continue\nA9E7..A9EF    ; ID_Continue\nA9F0..A9F9    ; ID_Continue\nA9FA..A9FE    ; ID_Continue\nAA00..AA28    ; ID_Continue\nAA29..AA2E    ; ID_Continue\nAA2F..AA30    ; ID_Continue\nAA31..AA32    ; ID_Continue\nAA33..AA34    ; ID_Continue\nAA35..AA36    ; ID_Continue\nAA40..AA42    ; ID_Continue\nAA43          ; ID_Continue\nAA44..AA4B    ; ID_Continue\nAA4C          ; ID_Continue\nAA4D          ; ID_Continue\nAA50..AA59    ; ID_Continue\nAA60..AA6F    ; ID_Continue\nAA70          ; ID_Continue\nAA71..AA76    ; ID_Continue\nAA7A          ; ID_Continue\nAA7B          ; ID_Continue\nAA7C          ; ID_Continue\nAA7D          ; ID_Continue\nAA7E..AAAF    ; ID_Continue\nAAB0          ; ID_Continue\nAAB1          ; ID_Continue\nAAB2..AAB4    ; ID_Continue\nAAB5..AAB6    ; ID_Continue\nAAB7..AAB8    ; ID_Continue\nAAB9..AABD    ; ID_Continue\nAABE..AABF    ; ID_Continue\nAAC0          ; ID_Continue\nAAC1          ; ID_Continue\nAAC2          ; ID_Continue\nAADB..AADC    ; ID_Continue\nAADD          ; ID_Continue\nAAE0..AAEA    ; ID_Continue\nAAEB          ; ID_Continue\nAAEC..AAED    ; ID_Continue\nAAEE..AAEF    ; ID_Continue\nAAF2          ; ID_Continue\nAAF3..AAF4    ; ID_Continue\nAAF5          ; ID_Continue\nAAF6          ; ID_Continue\nAB01..AB06    ; ID_Continue\nAB09..AB0E    ; ID_Continue\nAB11..AB16    ; ID_Continue\nAB20..AB26    ; ID_Continue\nAB28..AB2E    ; ID_Continue\nAB30..AB5A    ; ID_Continue\nAB5C..AB5F    ; ID_Continue\nAB60..AB68    ; ID_Continue\nAB69          ; ID_Continue\nAB70..ABBF    ; ID_Continue\nABC0..ABE2    ; ID_Continue\nABE3..ABE4    ; ID_Continue\nABE5          ; ID_Continue\nABE6..ABE7    ; ID_Continue\nABE8          ; ID_Continue\nABE9..ABEA    ; ID_Continue\nABEC          ; ID_Continue\nABED          ; ID_Continue\nABF0..ABF9    ; ID_Continue\nAC00..D7A3    ; ID_Continue\nD7B0..D7C6    ; ID_Continue\nD7CB..D7FB    ; ID_Continue\nF900..FA6D    ; ID_Continue\nFA70..FAD9    ; ID_Continue\nFB00..FB06    ; ID_Continue\nFB13..FB17    ; ID_Continue\nFB1D          ; ID_Continue\nFB1E          ; ID_Continue\nFB1F..FB28    ; ID_Continue\nFB2A..FB36    ; ID_Continue\nFB38..FB3C    ; ID_Continue\nFB3E          ; ID_Continue\nFB40..FB41    ; ID_Continue\nFB43..FB44    ; ID_Continue\nFB46..FBB1    ; ID_Continue\nFBD3..FD3D    ; ID_Continue\nFD50..FD8F    ; ID_Continue\nFD92..FDC7    ; ID_Continue\nFDF0..FDFB    ; ID_Continue\nFE00..FE0F    ; ID_Continue\nFE20..FE2F    ; ID_Continue\nFE33..FE34    ; ID_Continue\nFE4D..FE4F    ; ID_Continue\nFE70..FE74    ; ID_Continue\nFE76..FEFC    ; ID_Continue\nFF10..FF19    ; ID_Continue\nFF21..FF3A    ; ID_Continue\nFF3F          ; ID_Continue\nFF41..FF5A    ; ID_Continue\nFF65          ; ID_Continue\nFF66..FF6F    ; ID_Continue\nFF70          ; ID_Continue\nFF71..FF9D    ; ID_Continue\nFF9E..FF9F    ; ID_Continue\nFFA0..FFBE    ; ID_Continue\nFFC2..FFC7    ; ID_Continue\nFFCA..FFCF    ; ID_Continue\nFFD2..FFD7    ; ID_Continue\nFFDA..FFDC    ; ID_Continue\n10000..1000B  ; ID_Continue\n1000D..10026  ; ID_Continue\n10028..1003A  ; ID_Continue\n1003C..1003D  ; ID_Continue\n1003F..1004D  ; ID_Continue\n10050..1005D  ; ID_Continue\n10080..100FA  ; ID_Continue\n10140..10174  ; ID_Continue\n101FD         ; ID_Continue\n10280..1029C  ; ID_Continue\n102A0..102D0  ; ID_Continue\n102E0         ; ID_Continue\n10300..1031F  ; ID_Continue\n1032D..10340  ; ID_Continue\n10341         ; ID_Continue\n10342..10349  ; ID_Continue\n1034A         ; ID_Continue\n10350..10375  ; ID_Continue\n10376..1037A  ; ID_Continue\n10380..1039D  ; ID_Continue\n103A0..103C3  ; ID_Continue\n103C8..103CF  ; ID_Continue\n103D1..103D5  ; ID_Continue\n10400..1044F  ; ID_Continue\n10450..1049D  ; ID_Continue\n104A0..104A9  ; ID_Continue\n104B0..104D3  ; ID_Continue\n104D8..104FB  ; ID_Continue\n10500..10527  ; ID_Continue\n10530..10563  ; ID_Continue\n10570..1057A  ; ID_Continue\n1057C..1058A  ; ID_Continue\n1058C..10592  ; ID_Continue\n10594..10595  ; ID_Continue\n10597..105A1  ; ID_Continue\n105A3..105B1  ; ID_Continue\n105B3..105B9  ; ID_Continue\n105BB..105BC  ; ID_Continue\n105C0..105F3  ; ID_Continue\n10600..10736  ; ID_Continue\n10740..10755  ; ID_Continue\n10760..10767  ; ID_Continue\n10780..10785  ; ID_Continue\n10787..107B0  ; ID_Continue\n107B2..107BA  ; ID_Continue\n10800..10805  ; ID_Continue\n10808         ; ID_Continue\n1080A..10835  ; ID_Continue\n10837..10838  ; ID_Continue\n1083C         ; ID_Continue\n1083F..10855  ; ID_Continue\n10860..10876  ; ID_Continue\n10880..1089E  ; ID_Continue\n108E0..108F2  ; ID_Continue\n108F4..108F5  ; ID_Continue\n10900..10915  ; ID_Continue\n10920..10939  ; ID_Continue\n10980..109B7  ; ID_Continue\n109BE..109BF  ; ID_Continue\n10A00         ; ID_Continue\n10A01..10A03  ; ID_Continue\n10A05..10A06  ; ID_Continue\n10A0C..10A0F  ; ID_Continue\n10A10..10A13  ; ID_Continue\n10A15..10A17  ; ID_Continue\n10A19..10A35  ; ID_Continue\n10A38..10A3A  ; ID_Continue\n10A3F         ; ID_Continue\n10A60..10A7C  ; ID_Continue\n10A80..10A9C  ; ID_Continue\n10AC0..10AC7  ; ID_Continue\n10AC9..10AE4  ; ID_Continue\n10AE5..10AE6  ; ID_Continue\n10B00..10B35  ; ID_Continue\n10B40..10B55  ; ID_Continue\n10B60..10B72  ; ID_Continue\n10B80..10B91  ; ID_Continue\n10C00..10C48  ; ID_Continue\n10C80..10CB2  ; ID_Continue\n10CC0..10CF2  ; ID_Continue\n10D00..10D23  ; ID_Continue\n10D24..10D27  ; ID_Continue\n10D30..10D39  ; ID_Continue\n10D40..10D49  ; ID_Continue\n10D4A..10D4D  ; ID_Continue\n10D4E         ; ID_Continue\n10D4F         ; ID_Continue\n10D50..10D65  ; ID_Continue\n10D69..10D6D  ; ID_Continue\n10D6F         ; ID_Continue\n10D70..10D85  ; ID_Continue\n10E80..10EA9  ; ID_Continue\n10EAB..10EAC  ; ID_Continue\n10EB0..10EB1  ; ID_Continue\n10EC2..10EC4  ; ID_Continue\n10EFC..10EFF  ; ID_Continue\n10F00..10F1C  ; ID_Continue\n10F27         ; ID_Continue\n10F30..10F45  ; ID_Continue\n10F46..10F50  ; ID_Continue\n10F70..10F81  ; ID_Continue\n10F82..10F85  ; ID_Continue\n10FB0..10FC4  ; ID_Continue\n10FE0..10FF6  ; ID_Continue\n11000         ; ID_Continue\n11001         ; ID_Continue\n11002         ; ID_Continue\n11003..11037  ; ID_Continue\n11038..11046  ; ID_Continue\n11066..1106F  ; ID_Continue\n11070         ; ID_Continue\n11071..11072  ; ID_Continue\n11073..11074  ; ID_Continue\n11075         ; ID_Continue\n1107F..11081  ; ID_Continue\n11082         ; ID_Continue\n11083..110AF  ; ID_Continue\n110B0..110B2  ; ID_Continue\n110B3..110B6  ; ID_Continue\n110B7..110B8  ; ID_Continue\n110B9..110BA  ; ID_Continue\n110C2         ; ID_Continue\n110D0..110E8  ; ID_Continue\n110F0..110F9  ; ID_Continue\n11100..11102  ; ID_Continue\n11103..11126  ; ID_Continue\n11127..1112B  ; ID_Continue\n1112C         ; ID_Continue\n1112D..11134  ; ID_Continue\n11136..1113F  ; ID_Continue\n11144         ; ID_Continue\n11145..11146  ; ID_Continue\n11147         ; ID_Continue\n11150..11172  ; ID_Continue\n11173         ; ID_Continue\n11176         ; ID_Continue\n11180..11181  ; ID_Continue\n11182         ; ID_Continue\n11183..111B2  ; ID_Continue\n111B3..111B5  ; ID_Continue\n111B6..111BE  ; ID_Continue\n111BF..111C0  ; ID_Continue\n111C1..111C4  ; ID_Continue\n111C9..111CC  ; ID_Continue\n111CE         ; ID_Continue\n111CF         ; ID_Continue\n111D0..111D9  ; ID_Continue\n111DA         ; ID_Continue\n111DC         ; ID_Continue\n11200..11211  ; ID_Continue\n11213..1122B  ; ID_Continue\n1122C..1122E  ; ID_Continue\n1122F..11231  ; ID_Continue\n11232..11233  ; ID_Continue\n11234         ; ID_Continue\n11235         ; ID_Continue\n11236..11237  ; ID_Continue\n1123E         ; ID_Continue\n1123F..11240  ; ID_Continue\n11241         ; ID_Continue\n11280..11286  ; ID_Continue\n11288         ; ID_Continue\n1128A..1128D  ; ID_Continue\n1128F..1129D  ; ID_Continue\n1129F..112A8  ; ID_Continue\n112B0..112DE  ; ID_Continue\n112DF         ; ID_Continue\n112E0..112E2  ; ID_Continue\n112E3..112EA  ; ID_Continue\n112F0..112F9  ; ID_Continue\n11300..11301  ; ID_Continue\n11302..11303  ; ID_Continue\n11305..1130C  ; ID_Continue\n1130F..11310  ; ID_Continue\n11313..11328  ; ID_Continue\n1132A..11330  ; ID_Continue\n11332..11333  ; ID_Continue\n11335..11339  ; ID_Continue\n1133B..1133C  ; ID_Continue\n1133D         ; ID_Continue\n1133E..1133F  ; ID_Continue\n11340         ; ID_Continue\n11341..11344  ; ID_Continue\n11347..11348  ; ID_Continue\n1134B..1134D  ; ID_Continue\n11350         ; ID_Continue\n11357         ; ID_Continue\n1135D..11361  ; ID_Continue\n11362..11363  ; ID_Continue\n11366..1136C  ; ID_Continue\n11370..11374  ; ID_Continue\n11380..11389  ; ID_Continue\n1138B         ; ID_Continue\n1138E         ; ID_Continue\n11390..113B5  ; ID_Continue\n113B7         ; ID_Continue\n113B8..113BA  ; ID_Continue\n113BB..113C0  ; ID_Continue\n113C2         ; ID_Continue\n113C5         ; ID_Continue\n113C7..113CA  ; ID_Continue\n113CC..113CD  ; ID_Continue\n113CE         ; ID_Continue\n113CF         ; ID_Continue\n113D0         ; ID_Continue\n113D1         ; ID_Continue\n113D2         ; ID_Continue\n113D3         ; ID_Continue\n113E1..113E2  ; ID_Continue\n11400..11434  ; ID_Continue\n11435..11437  ; ID_Continue\n11438..1143F  ; ID_Continue\n11440..11441  ; ID_Continue\n11442..11444  ; ID_Continue\n11445         ; ID_Continue\n11446         ; ID_Continue\n11447..1144A  ; ID_Continue\n11450..11459  ; ID_Continue\n1145E         ; ID_Continue\n1145F..11461  ; ID_Continue\n11480..114AF  ; ID_Continue\n114B0..114B2  ; ID_Continue\n114B3..114B8  ; ID_Continue\n114B9         ; ID_Continue\n114BA         ; ID_Continue\n114BB..114BE  ; ID_Continue\n114BF..114C0  ; ID_Continue\n114C1         ; ID_Continue\n114C2..114C3  ; ID_Continue\n114C4..114C5  ; ID_Continue\n114C7         ; ID_Continue\n114D0..114D9  ; ID_Continue\n11580..115AE  ; ID_Continue\n115AF..115B1  ; ID_Continue\n115B2..115B5  ; ID_Continue\n115B8..115BB  ; ID_Continue\n115BC..115BD  ; ID_Continue\n115BE         ; ID_Continue\n115BF..115C0  ; ID_Continue\n115D8..115DB  ; ID_Continue\n115DC..115DD  ; ID_Continue\n11600..1162F  ; ID_Continue\n11630..11632  ; ID_Continue\n11633..1163A  ; ID_Continue\n1163B..1163C  ; ID_Continue\n```\n\n----------------------------------------\n\nTITLE: Building Swift with Compilation Commands Export\nDESCRIPTION: Command to build Swift project with compilation command export enabled using build-script\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/RunningIncludeWhatYouUse.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nswift/utils/build-script <other options> \\\n  --extra-cmake-options='-DCMAKE_EXPORT_COMPILATION_COMMANDS=ON'\n```\n\n----------------------------------------\n\nTITLE: Building Foundation for Android\nDESCRIPTION: CMake and Ninja commands to build the Foundation framework for Android. This provides essential data types and system integration for Swift on Android.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AndroidBuild.md#2025-04-23_snippet_4\n\nLANGUAGE: cmd\nCODE:\n```\nmd S:\\b\\a\\foundation\ncd S:\\b\\a\\foundation\ncmake -C S:\\swift-build\\cmake\\caches\\android-armv7.cmake                                                                ^\n  -DSWIFT_ANDROID_SDK=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk                    ^\n  -C S:\\swift-build\\cmake\\caches\\android-armv7-swift-flags.cmake                                                        ^\n  -G Ninja                                                                                                              ^\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo                                                                                     ^\n  -DCMAKE_INSTALL_PREFIX=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk/usr             ^\n  -DCMAKE_SWIFT_COMPILER=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe ^\n  -DCMAKE_TOOLCHAIN_FILE=S:\\swift-build\\cmake\\toolchains\\android.toolchain.cmake                                        ^\n  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr         ^\n  -DCURL_LIBRARY=S:/b/a/Library/libcurl-development/usr/lib/libcurl.a                                                   ^\n  -DCURL_INCLUDE_DIR=S:/b/a/Library/libcurl-development/usr/include                                                     ^\n  -DICU_INCLUDE_DIR=S:/b/a/Library/icu-64/usr/include                                                                   ^\n  -DICU_UC_LIBRARY=S:/b/a/Library/icu-64/usr/lib/libicuuc64.so                                                          ^\n  -DICU_UC_LIBRARY_RELEASE=S:/b/a/Library/icu-64/usr/lib/libicuuc64.so                                                  ^\n  -DICU_I18N_LIBRARY=S:/b/a/Library/icu-64/usr/lib/libiucin64.so                                                        ^\n  -DICU_I18N_LIBRARY_RELEASE=S:/b/a/Library/icu-64/usr/lib/libicuin64.so                                                ^\n  -DLIBXML2_LIBRARY=S:/b/a/Library/libxml2-development/usr/lib/libxml2.a                                                ^\n  -DLIBXML2_INCLUDE_DIR=S:/b/a/Library/libxml2-development/usr/include/libxml2                                          ^\n  -DFOUNDATION_PATH_TO_LIBDISPATCH_SOURCE=S:/swift-corelibs-libdispatch                                                 ^\n  -DFOUNDATION_PATH_TO_LIBDISPATCH_BUILD=S:/b/a/libdispatch                                                             ^\n  S:/swift-corelibs-foundation\nninja\n```\n\n----------------------------------------\n\nTITLE: Adding Object Library for COFF Format in Swift Image Registration\nDESCRIPTION: Adds a Swift target library for image registration using COFF object format. This is used for building the standard library with appropriate compile flags and settings for COFF platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftImageRegistrationObjectCOFF\n                  OBJECT_LIBRARY IS_STDLIB IS_STDLIB_CORE\n                  SwiftRT-COFF.cpp\n                  C_COMPILE_FLAGS\n                    ${SWIFT_RUNTIME_CORE_CXX_FLAGS}\n                    ${swift_enable_backtracing}\n                  LINK_FLAGS ${SWIFT_RUNTIME_CORE_LINK_FLAGS}\n                  TARGET_SDKS ${COFF_SDKS}\n                  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n                  INSTALL_IN_COMPONENT none)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Remote Inspection Library Build\nDESCRIPTION: Sets up compilation flags and library configuration for the Swift Remote Inspection static library. Includes conditional reflection support, runtime flags, and links against LLVM support and demangling libraries. Targets development component installation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RemoteInspection/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swiftRemoteInspection_C_COMPILE_FLAGS)\nif(SWIFT_ENABLE_REFLECTION)\n  list(APPEND swiftRemoteInspection_C_COMPILE_FLAGS -DSWIFT_ENABLE_REFLECTION)\nendif()\n\nadd_swift_target_library(swiftRemoteInspection STATIC\n  MetadataSource.cpp\n  TypeLowering.cpp\n  TypeRef.cpp\n  TypeRefBuilder.cpp\n  C_COMPILE_FLAGS\n    ${SWIFT_RUNTIME_CXX_FLAGS}\n    -DswiftCore_EXPORTS\n    ${swiftRemoteInspection_C_COMPILE_FLAGS}\n  LINK_FLAGS ${SWIFT_RUNTIME_LINK_FLAGS}\n  INCORPORATE_OBJECT_LIBRARIES\n    swiftLLVMSupport swiftDemangling swiftDemanglingCR\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT dev)\n```\n\n----------------------------------------\n\nTITLE: Base Address for Offset SIL Instruction\nDESCRIPTION: Creates a base address for offset calculations that can be used by address projections. IR generation creates a null pointer for this instruction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_90\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'base_addr_for_offset' sil-type\n\n%1 = base_addr_for_offset $*S\n// %1 has type $*S\n```\n\n----------------------------------------\n\nTITLE: Emoji Code Point Range Definitions\nDESCRIPTION: Defines Unicode code point ranges for emoji presentation characters, including version information and corresponding emoji symbols. Each line specifies a code point or range and its emoji representation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n1F515         ; Emoji_Presentation   # E1.0   [1] (🔕)       bell with slash\n1F516..1F52B  ; Emoji_Presentation   # E0.6  [22] (🔖..🔫)    bookmark..water pistol\n1F52C..1F52D  ; Emoji_Presentation   # E1.0   [2] (🔬..🔭)    microscope..telescope\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters That Change When Titlecased\nDESCRIPTION: This code snippet defines Unicode code points that change when titlecased. The comment at the top explains that Changes_When_Titlecased(X) is true when toTitlecase(toNFD(X)) != toNFD(X), meaning these characters have a different form when converted to titlecase after normalization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_19\n\nLANGUAGE: unicode-data\nCODE:\n```\n#  Changes_When_Titlecased(X) is true when toTitlecase(toNFD(X)) != toNFD(X)\n\n0061..007A    ; Changes_When_Titlecased\n00B5          ; Changes_When_Titlecased\n00DF..00F6    ; Changes_When_Titlecased\n00F8..00FF    ; Changes_When_Titlecased\n0101          ; Changes_When_Titlecased\n0103          ; Changes_When_Titlecased\n0105          ; Changes_When_Titlecased\n0107          ; Changes_When_Titlecased\n0109          ; Changes_When_Titlecased\n010B          ; Changes_When_Titlecased\n010D          ; Changes_When_Titlecased\n010F          ; Changes_When_Titlecased\n0111          ; Changes_When_Titlecased\n0113          ; Changes_When_Titlecased\n0115          ; Changes_When_Titlecased\n0117          ; Changes_When_Titlecased\n0119          ; Changes_When_Titlecased\n011B          ; Changes_When_Titlecased\n011D          ; Changes_When_Titlecased\n011F          ; Changes_When_Titlecased\n0121          ; Changes_When_Titlecased\n0123          ; Changes_When_Titlecased\n0125          ; Changes_When_Titlecased\n0127          ; Changes_When_Titlecased\n0129          ; Changes_When_Titlecased\n012B          ; Changes_When_Titlecased\n012D          ; Changes_When_Titlecased\n012F          ; Changes_When_Titlecased\n0131          ; Changes_When_Titlecased\n0133          ; Changes_When_Titlecased\n0135          ; Changes_When_Titlecased\n0137          ; Changes_When_Titlecased\n013A          ; Changes_When_Titlecased\n013C          ; Changes_When_Titlecased\n013E          ; Changes_When_Titlecased\n0140          ; Changes_When_Titlecased\n0142          ; Changes_When_Titlecased\n0144          ; Changes_When_Titlecased\n0146          ; Changes_When_Titlecased\n0148..0149    ; Changes_When_Titlecased\n014B          ; Changes_When_Titlecased\n014D          ; Changes_When_Titlecased\n014F          ; Changes_When_Titlecased\n0151          ; Changes_When_Titlecased\n0153          ; Changes_When_Titlecased\n0155          ; Changes_When_Titlecased\n0157          ; Changes_When_Titlecased\n0159          ; Changes_When_Titlecased\n015B          ; Changes_When_Titlecased\n015D          ; Changes_When_Titlecased\n015F          ; Changes_When_Titlecased\n0161          ; Changes_When_Titlecased\n0163          ; Changes_When_Titlecased\n0165          ; Changes_When_Titlecased\n0167          ; Changes_When_Titlecased\n0169          ; Changes_When_Titlecased\n016B          ; Changes_When_Titlecased\n016D          ; Changes_When_Titlecased\n016F          ; Changes_When_Titlecased\n0171          ; Changes_When_Titlecased\n0173          ; Changes_When_Titlecased\n0175          ; Changes_When_Titlecased\n0177          ; Changes_When_Titlecased\n017A          ; Changes_When_Titlecased\n017C          ; Changes_When_Titlecased\n017E..0180    ; Changes_When_Titlecased\n0183          ; Changes_When_Titlecased\n0185          ; Changes_When_Titlecased\n0188          ; Changes_When_Titlecased\n018C          ; Changes_When_Titlecased\n0192          ; Changes_When_Titlecased\n0195          ; Changes_When_Titlecased\n0199..019B    ; Changes_When_Titlecased\n019E          ; Changes_When_Titlecased\n01A1          ; Changes_When_Titlecased\n01A3          ; Changes_When_Titlecased\n01A5          ; Changes_When_Titlecased\n01A8          ; Changes_When_Titlecased\n01AD          ; Changes_When_Titlecased\n01B0          ; Changes_When_Titlecased\n01B4          ; Changes_When_Titlecased\n01B6          ; Changes_When_Titlecased\n01B9          ; Changes_When_Titlecased\n01BD          ; Changes_When_Titlecased\n01BF          ; Changes_When_Titlecased\n01C4          ; Changes_When_Titlecased\n01C6..01C7    ; Changes_When_Titlecased\n01C9..01CA    ; Changes_When_Titlecased\n01CC          ; Changes_When_Titlecased\n01CE          ; Changes_When_Titlecased\n01D0          ; Changes_When_Titlecased\n01D2          ; Changes_When_Titlecased\n01D4          ; Changes_When_Titlecased\n01D6          ; Changes_When_Titlecased\n01D8          ; Changes_When_Titlecased\n01DA          ; Changes_When_Titlecased\n01DC..01DD    ; Changes_When_Titlecased\n01DF          ; Changes_When_Titlecased\n01E1          ; Changes_When_Titlecased\n01E3          ; Changes_When_Titlecased\n01E5          ; Changes_When_Titlecased\n01E7          ; Changes_When_Titlecased\n01E9          ; Changes_When_Titlecased\n01EB          ; Changes_When_Titlecased\n01ED          ; Changes_When_Titlecased\n01EF..01F1    ; Changes_When_Titlecased\n01F3          ; Changes_When_Titlecased\n01F5          ; Changes_When_Titlecased\n01F9          ; Changes_When_Titlecased\n01FB          ; Changes_When_Titlecased\n01FD          ; Changes_When_Titlecased\n01FF          ; Changes_When_Titlecased\n0201          ; Changes_When_Titlecased\n0203          ; Changes_When_Titlecased\n0205          ; Changes_When_Titlecased\n0207          ; Changes_When_Titlecased\n0209          ; Changes_When_Titlecased\n020B          ; Changes_When_Titlecased\n020D          ; Changes_When_Titlecased\n020F          ; Changes_When_Titlecased\n0211          ; Changes_When_Titlecased\n0213          ; Changes_When_Titlecased\n0215          ; Changes_When_Titlecased\n0217          ; Changes_When_Titlecased\n0219          ; Changes_When_Titlecased\n021B          ; Changes_When_Titlecased\n021D          ; Changes_When_Titlecased\n021F          ; Changes_When_Titlecased\n0223          ; Changes_When_Titlecased\n0225          ; Changes_When_Titlecased\n0227          ; Changes_When_Titlecased\n0229          ; Changes_When_Titlecased\n022B          ; Changes_When_Titlecased\n022D          ; Changes_When_Titlecased\n022F          ; Changes_When_Titlecased\n0231          ; Changes_When_Titlecased\n0233          ; Changes_When_Titlecased\n023C          ; Changes_When_Titlecased\n023F..0240    ; Changes_When_Titlecased\n0242          ; Changes_When_Titlecased\n0247          ; Changes_When_Titlecased\n0249          ; Changes_When_Titlecased\n024B          ; Changes_When_Titlecased\n024D          ; Changes_When_Titlecased\n024F..0254    ; Changes_When_Titlecased\n0256..0257    ; Changes_When_Titlecased\n0259          ; Changes_When_Titlecased\n025B..025C    ; Changes_When_Titlecased\n0260..0261    ; Changes_When_Titlecased\n0263..0266    ; Changes_When_Titlecased\n0268..026C    ; Changes_When_Titlecased\n026F          ; Changes_When_Titlecased\n0271..0272    ; Changes_When_Titlecased\n0275          ; Changes_When_Titlecased\n027D          ; Changes_When_Titlecased\n0280          ; Changes_When_Titlecased\n0282..0283    ; Changes_When_Titlecased\n0287..028C    ; Changes_When_Titlecased\n0292          ; Changes_When_Titlecased\n029D..029E    ; Changes_When_Titlecased\n0345          ; Changes_When_Titlecased\n0371          ; Changes_When_Titlecased\n0373          ; Changes_When_Titlecased\n0377          ; Changes_When_Titlecased\n037B..037D    ; Changes_When_Titlecased\n0390          ; Changes_When_Titlecased\n03AC..03CE    ; Changes_When_Titlecased\n03D0..03D1    ; Changes_When_Titlecased\n03D5..03D7    ; Changes_When_Titlecased\n03D9          ; Changes_When_Titlecased\n03DB          ; Changes_When_Titlecased\n03DD          ; Changes_When_Titlecased\n03DF          ; Changes_When_Titlecased\n03E1          ; Changes_When_Titlecased\n03E3          ; Changes_When_Titlecased\n03E5          ; Changes_When_Titlecased\n03E7          ; Changes_When_Titlecased\n03E9          ; Changes_When_Titlecased\n03EB          ; Changes_When_Titlecased\n03ED          ; Changes_When_Titlecased\n03EF..03F3    ; Changes_When_Titlecased\n03F5          ; Changes_When_Titlecased\n03F8          ; Changes_When_Titlecased\n03FB          ; Changes_When_Titlecased\n0430..045F    ; Changes_When_Titlecased\n0461          ; Changes_When_Titlecased\n0463          ; Changes_When_Titlecased\n0465          ; Changes_When_Titlecased\n0467          ; Changes_When_Titlecased\n0469          ; Changes_When_Titlecased\n046B          ; Changes_When_Titlecased\n046D          ; Changes_When_Titlecased\n046F          ; Changes_When_Titlecased\n0471          ; Changes_When_Titlecased\n0473          ; Changes_When_Titlecased\n0475          ; Changes_When_Titlecased\n0477          ; Changes_When_Titlecased\n0479          ; Changes_When_Titlecased\n047B          ; Changes_When_Titlecased\n047D          ; Changes_When_Titlecased\n047F          ; Changes_When_Titlecased\n0481          ; Changes_When_Titlecased\n048B          ; Changes_When_Titlecased\n048D          ; Changes_When_Titlecased\n048F          ; Changes_When_Titlecased\n0491          ; Changes_When_Titlecased\n0493          ; Changes_When_Titlecased\n0495          ; Changes_When_Titlecased\n0497          ; Changes_When_Titlecased\n0499          ; Changes_When_Titlecased\n049B          ; Changes_When_Titlecased\n049D          ; Changes_When_Titlecased\n049F          ; Changes_When_Titlecased\n04A1          ; Changes_When_Titlecased\n04A3          ; Changes_When_Titlecased\n04A5          ; Changes_When_Titlecased\n04A7          ; Changes_When_Titlecased\n04A9          ; Changes_When_Titlecased\n04AB          ; Changes_When_Titlecased\n04AD          ; Changes_When_Titlecased\n04AF          ; Changes_When_Titlecased\n04B1          ; Changes_When_Titlecased\n04B3          ; Changes_When_Titlecased\n04B5          ; Changes_When_Titlecased\n04B7          ; Changes_When_Titlecased\n04B9          ; Changes_When_Titlecased\n04BB          ; Changes_When_Titlecased\n04BD          ; Changes_When_Titlecased\n04BF          ; Changes_When_Titlecased\n04C2          ; Changes_When_Titlecased\n04C4          ; Changes_When_Titlecased\n04C6          ; Changes_When_Titlecased\n04C8          ; Changes_When_Titlecased\n04CA          ; Changes_When_Titlecased\n04CC          ; Changes_When_Titlecased\n04CE..04CF    ; Changes_When_Titlecased\n04D1          ; Changes_When_Titlecased\n04D3          ; Changes_When_Titlecased\n04D5          ; Changes_When_Titlecased\n04D7          ; Changes_When_Titlecased\n04D9          ; Changes_When_Titlecased\n04DB          ; Changes_When_Titlecased\n04DD          ; Changes_When_Titlecased\n04DF          ; Changes_When_Titlecased\n04E1          ; Changes_When_Titlecased\n04E3          ; Changes_When_Titlecased\n04E5          ; Changes_When_Titlecased\n04E7          ; Changes_When_Titlecased\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Lisu Script\nDESCRIPTION: Defines the Unicode code point ranges for the Lisu script, including letters, tone marks, and punctuation marks. This block contains 49 total code points across multiple categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_60\n\nLANGUAGE: Unicode\nCODE:\n```\nA4D0..A4F7    ; Lisu # Lo  [40] LISU LETTER BA..LISU LETTER OE\nA4F8..A4FD    ; Lisu # Lm   [6] LISU LETTER TONE MYA TI..LISU LETTER TONE MYA JEU\nA4FE..A4FF    ; Lisu # Po   [2] LISU PUNCTUATION COMMA..LISU PUNCTUATION FULL STOP\n11FB0         ; Lisu # Lo       LISU LETTER YHA\n\n# Total code points: 49\n```\n\n----------------------------------------\n\nTITLE: Building Runtimes as Dynamic Libraries\nDESCRIPTION: Commands to build the SwiftCore runtimes as dynamic libraries by passing the BUILD_SHARED_LIBS flag to CMake.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake -B build -S . -G Ninja -DBUILD_SHARED_LIBS=YES -DCMAKE_Swift_COMPILER=<swiftc>\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftCore Target Include Directories in CMake\nDESCRIPTION: Sets up include directories for the SwiftCore target, specifically for Swift compilation. It uses generator expressions to handle build and install interfaces.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(swiftCore INTERFACE\n  \"$<$<COMPILE_LANGUAGE:Swift>:$<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${SwiftCore_INSTALL_SWIFTMODULEDIR}>>\")\n```\n\n----------------------------------------\n\nTITLE: Creating Swift IDE Tool Static Library in CMake\nDESCRIPTION: Defines a static library target 'swiftIDETool' with multiple source files focused on IDE functionality including compilation, inspection, and macro expansion capabilities.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/IDETool/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftIDETool STATIC\n  CompileInstance.cpp\n  CompilerInvocation.cpp\n  IDEInspectionInstance.cpp\n  DependencyChecking.cpp\n  SyntacticMacroExpansion.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Linking Swift AST Libraries to Target\nDESCRIPTION: Links the required Swift libraries to the swift-ast-script target. The tool depends on the swiftAST and swiftFrontendTool libraries which are specified as private dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-ast-script/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swift-ast-script\n                      PRIVATE\n                        swiftAST\n                        swiftFrontendTool)\n```\n\n----------------------------------------\n\nTITLE: Defining FooProtocolDerived Protocol\nDESCRIPTION: Creates a protocol that inherits from FooProtocolBase, establishing a protocol inheritance hierarchy.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol FooProtocolDerived : FooProtocolBase {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Frontend Unit Tests in CMake\nDESCRIPTION: Adds source files to the SwiftFrontendTests unit test target. These tests cover argument parsing, feature parsing, feature enablement checks, and strict concurrency.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Frontend/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_unittest(SwiftFrontendTests\n  ArgParsingTest.cpp\n  FeatureParsingTest.cpp\n  IsFeatureEnabledTests.cpp\n  StrictConcurrencyTests.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift String Processing Library in CMake\nDESCRIPTION: This CMake snippet defines the swift_StringProcessing library, specifies its source files, sets the Swift module name, and links required dependencies. It includes various Swift files for Unicode handling, algorithms, regex operations, and utility functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Supplemental/StringProcessing/_StringProcessing/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swift_StringProcessing\n  _CUnicode/UnicodeData.c\n  _CUnicode/UnicodeScalarProps.c\n  _CharacterClassModel.swift\n  Executor.swift\n  Capture.swift\n  Unicode/NumberParsing.swift\n  Unicode/ASCII.swift\n  Unicode/CharacterProps.swift\n  Unicode/Transcoding.swift\n  Unicode/ScalarProps.swift\n  Unicode/Comparison.swift\n  Unicode/NecessaryEvils.swift\n  Unicode/Validation.swift\n  Unicode/UCD.swift\n  Unicode/NFC.swift\n  Unicode/Encodings.swift\n  Unicode/Formatting.swift\n  Unicode/WordBreaking.swift\n  Unicode/Decoding.swift\n  Unicode/CaseConversion.swift\n  Algorithms/Matching/FirstMatch.swift\n  Algorithms/Matching/MatchingCollectionSearcher.swift\n  Algorithms/Matching/MatchResult.swift\n  Algorithms/Matching/MatchReplace.swift\n  Algorithms/Matching/Matches.swift\n  Algorithms/Algorithms/FirstRange.swift\n  Algorithms/Algorithms/Contains.swift\n  Algorithms/Algorithms/Split.swift\n  Algorithms/Algorithms/Trim.swift\n  Algorithms/Algorithms/Ranges.swift\n  Algorithms/Algorithms/StartsWith.swift\n  Algorithms/Algorithms/Replace.swift\n  Algorithms/Algorithms/SubstringSearcher.swift\n  Algorithms/Searchers/CollectionSearcher.swift\n  Algorithms/Searchers/ZSearcher.swift\n  Algorithms/Consumers/CollectionConsumer.swift\n  Algorithms/Consumers/FixedPatternConsumer.swift\n  Regex/Options.swift\n  Regex/Match.swift\n  Regex/CustomComponents.swift\n  Regex/Core.swift\n  Regex/ASTConversion.swift\n  Regex/DSLTree.swift\n  Regex/AnyRegexOutput.swift\n  LiteralPrinter.swift\n  MatchingOptions.swift\n  Compiler.swift\n  ConsumerInterface.swift\n  PrintAsPattern.swift\n  Engine/MEBuiltins.swift\n  Engine/Processor.swift\n  Engine/MEProgram.swift\n  Engine/MEQuantify.swift\n  Engine/InstPayload.swift\n  Engine/Backtracking.swift\n  Engine/Instruction.swift\n  Engine/Registers.swift\n  Engine/MEBuilder.swift\n  Engine/Structuralize.swift\n  Engine/Tracing.swift\n  Engine/Metrics.swift\n  Engine/MECapture.swift\n  ByteCodeGen.swift\n  Utility/AsciiBitset.swift\n  Utility/Traced.swift\n  Utility/TypedIndex.swift\n  Utility/Misc.swift\n  Utility/TypedInt.swift\n  Utility/Protocols.swift\n  Utility/TypeVerification.swift\n  Utility/RegexFactory.swift\n  Utility/ASTBuilder.swift)\n\nset_target_properties(swift_StringProcessing PROPERTIES\n  Swift_MODULE_NAME _StringProcessing)\n\ntarget_link_libraries(swift_StringProcessing PRIVATE\n    swift_RegexParser\n    swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Core Project Structure\nDESCRIPTION: Sets up the project structure by including necessary directories and conditional compilation of optional components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(ExperimentalFeatures)\n\ninclude_directories(include)\n\nadd_subdirectory(LLVMSupport)\nadd_subdirectory(SwiftShims/swift/shims)\nadd_subdirectory(Demangling)\nadd_subdirectory(Threading)\nadd_subdirectory(runtime)\nadd_subdirectory(stubs)\nadd_subdirectory(CommandLineSupport)\nadd_subdirectory(core)\nif(SwiftCore_ENABLE_ONONESUPPORT)\n  add_subdirectory(SwiftOnoneSupport)\nendif()\nif(SwiftCore_ENABLE_CONCURRENCY)\n  add_subdirectory(Concurrency)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Internal API Elements\nDESCRIPTION: Defines functions, structures, and extensions with names prefixed with underscore, indicating they are meant for internal use only.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_22\n\nLANGUAGE: Swift\nCODE:\n```\nfunc _internalTopLevelFunc()\nstruct _InternalStruct {\n  var x: Int32\n  init()\n  init(x: Int32)\n}\nextension FooClassBase {\n  class func _internalMeth1() -> AnyObject!\n  func _internalMeth1() -> AnyObject!\n}\nextension FooClassBase {\n  class func _internalMeth2() -> AnyObject!\n  func _internalMeth2() -> AnyObject!\n  class func nonInternalMeth() -> AnyObject!\n  func nonInternalMeth() -> AnyObject!\n}\nextension FooClassBase {\n  class func _internalMeth3() -> AnyObject!\n  func _internalMeth3() -> AnyObject!\n}\nprotocol _InternalProt {\n}\nclass ClassWithInternalProt : _InternalProt {\n}\n```\n\n----------------------------------------\n\nTITLE: Property Warning Example in Swift\nDESCRIPTION: Example that triggers compiler warnings for properties that should be marked with @noDerivative or made mutable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nstruct Foo<T: Differentiable, U: Differentiable>: @memberwise Differentiable {\n    // `x` and `y` are the \"differentiable variables\".\n    var x: T\n    var y: U\n    var customFlag: Bool\n    let helperVariable: T\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up COFF Object Format Support\nDESCRIPTION: Configures COFF object format support by creating swiftrtT and swiftrt libraries with appropriate definitions and installation rules. This is used for Windows platforms that use the COFF object format.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nelseif(\"${SwiftCore_OBJECT_FORMAT}\" STREQUAL \"coffx\")\n  add_library(swiftrtT OBJECT SwiftRT-COFF.cpp)\n  target_compile_definitions(swiftrtT PRIVATE\n    SWIFT_STATIC_STDLIB)\n  target_link_libraries(swiftrtT PRIVATE swiftShims)\n  install(FILES $<TARGET_OBJECTS:swiftrtT>\n    COMPONENT SwiftCore_runtime\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/swift/${SwiftCore_PLATFORM_SUBDIR}/${SwiftCore_ARCH_SUBDIR}\"\n    RENAME swiftrtT.obj)\n\n  add_library(swiftrt OBJECT SwiftRT-COFF.cpp)\n  target_link_libraries(swiftrt PRIVATE swiftShims)\n  install(FILES $<TARGET_OBJECTS:swiftrt>\n    COMPONENT SwiftCore_runtime\n    DESTINATION \"${CMAKE_INSTALL_LIBDIR}/swift/${SwiftCore_PLATFORM_SUBDIR}/${SwiftCore_ARCH_SUBDIR}\"\n    RENAME swiftrt.obj)\n\n  install(TARGETS swiftrtT swiftrt\n    EXPORT SwiftCoreTargets\n    COMPONENT SwiftCore_runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring swift-stdlib-tool in CMake\nDESCRIPTION: Adds swift-stdlib-tool as a host tool to the Swift project build system. The tool is built from a single source file (swift-stdlib-tool.cpp) and is categorized as part of the compiler component in the Swift project organization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-stdlib-tool/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(swift-stdlib-tool\n  swift-stdlib-tool.cpp\n  SWIFT_COMPONENT compiler)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Shavian Script\nDESCRIPTION: Defines the Unicode code point ranges for the Shavian script, categorizing characters by their types (Lo) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_27\n\nLANGUAGE: Unicode\nCODE:\n```\n10450..1047F  ; Shavian # Lo  [48] SHAVIAN LETTER PEEP..SHAVIAN LETTER YEW\n\n# Total code points: 48\n```\n\n----------------------------------------\n\nTITLE: Defining Tangent Vectors for Swift Structs\nDESCRIPTION: Demonstrates defining corresponding 'tangent vector' types for the `Point` and `PointPair` structs using nested `TangentVector` structs within extensions. These types capture the small changes applicable to the original structs, representing the mathematical concept of tangent vectors needed for differentiation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nextension Point {\n    struct TangentVector {\n        // `dx` and `dy` are small changes in `x` and `y`, respectively.\n        var dx, dy: Float\n    }\n}\n\nextension PointPair {\n    struct TangentVector {\n        // `dp1` and `dp2` are small changes in `p1` and `p2`, respectively.\n        var dp1, dp2: Point.TangentVector\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding TableGen Dependency\nDESCRIPTION: Ensures sourcekitd-test depends on the previously defined sourcekitdTestOptionsTableGen target, guaranteeing that the options table is generated before building the executable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(sourcekitd-test sourcekitdTestOptionsTableGen)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Phoenician Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Phoenician script, including letters, numbers, and a word separator. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_41\n\nLANGUAGE: Unicode\nCODE:\n```\n10900..10915  ; Phoenician # Lo  [22] PHOENICIAN LETTER ALF..PHOENICIAN LETTER TAU\n10916..1091B  ; Phoenician # No   [6] PHOENICIAN NUMBER ONE..PHOENICIAN NUMBER THREE\n1091F         ; Phoenician # Po       PHOENICIAN WORD SEPARATOR\n```\n\n----------------------------------------\n\nTITLE: Configuring Android NDK VFS Overlay in CMake\nDESCRIPTION: Creates a virtual filesystem overlay YAML configuration that maps Swift headers to the Android NDK system include directory. This allows Swift code to access Android platform headers with Swift-specific mappings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/clang/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfile(CONFIGURE\n  OUTPUT android-ndk-overlay.yaml\n  CONTENT [[\n---\nversion: 0\ncase-sensitive: false\nuse-external-names: false\nroots:\n  - name: \"@CMAKE_ANDROID_NDK@/toolchains/llvm/prebuilt/windows-x86_64/sysroot/usr/include\"\n    type: directory\n    contents:\n      - name: module.modulemap\n        type: file\n        external-contents: \"@CMAKE_CURRENT_SOURCE_DIR@/android.modulemap\"\n      - name: SwiftAndroidNDK.h\n        type: file\n        external-contents: \"@CMAKE_CURRENT_SOURCE_DIR@/SwiftAndroidNDK.h\"\n      - name: SwiftBionic.h\n        type: file\n        external-contents: \"@CMAKE_CURRENT_SOURCE_DIR@/SwiftBionic.h\"\n]]\nESCAPE_QUOTES @ONLY NEWLINE_STYLE LF)\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Library Directory Paths\nDESCRIPTION: Configures output directories for the Swift library and migrator components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Migrator/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFTLIB_DIR\n    \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/swift\")\nset(output_dir \"${SWIFTLIB_DIR}/migrator\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Indic_Conjunct_Break=Linker Code Points\nDESCRIPTION: List of Unicode code points with the Indic_Conjunct_Break=Linker property. These 6 code points define characters that function as linkers in Indic conjunct formations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_46\n\nLANGUAGE: unicode\nCODE:\n```\n# Indic_Conjunct_Break=Linker\n\n094D          ; InCB; Linker\n09CD          ; InCB; Linker\n0ACD          ; InCB; Linker\n0B4D          ; InCB; Linker\n0C4D          ; InCB; Linker\n0D4D          ; InCB; Linker\n```\n\n----------------------------------------\n\nTITLE: Defining Substitutions in Swift Mangling\nDESCRIPTION: This snippet defines the grammar for substitutions in Swift mangling. It explains how back-references to previously mangled entities are represented and used to optimize the mangling process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\nsubstitution ::= 'S' index\n\nsubstitution ::= 's'\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Benchmark Templates with CMake\nDESCRIPTION: Sets up the driver library path and configures several benchmark template files by replacing placeholders in the template files with actual values. The templates include GuardMalloc, RuntimeLeaksRunner, QuickCheck, and DTrace benchmarking tools.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/scripts/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PATH_TO_DRIVER_LIBRARY \"${CMAKE_CURRENT_SOURCE_DIR}/perf_test_driver\")\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/Benchmark_GuardMalloc.in\n  ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_GuardMalloc\n  @ONLY)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/Benchmark_RuntimeLeaksRunner.in\n  ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_RuntimeLeaksRunner\n  @ONLY)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/Benchmark_QuickCheck.in\n  ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_QuickCheck\n  @ONLY)\nconfigure_file(\n  ${CMAKE_CURRENT_SOURCE_DIR}/Benchmark_DTrace.in\n  ${CMAKE_CURRENT_BINARY_DIR}/Benchmark_DTrace\n  @ONLY)\nset(PATH_TO_DRIVER_LIBRARY)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Connector Punctuation Characters\nDESCRIPTION: This snippet defines Unicode code points in the Connector_Punctuation (Pc) general category. It includes individual code points and ranges, each with a comment describing the character name. The file ends with a count of the total code points defined.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_24\n\nLANGUAGE: unicode-data\nCODE:\n```\n# General_Category=Connector_Punctuation\n\n005F          ; Pc #       LOW LINE\n203F..2040    ; Pc #   [2] UNDERTIE..CHARACTER TIE\n2054          ; Pc #       INVERTED UNDERTIE\nFE33..FE34    ; Pc #   [2] PRESENTATION FORM FOR VERTICAL LOW LINE..PRESENTATION FORM FOR VERTICAL WAVY LOW LINE\nFE4D..FE4F    ; Pc #   [3] DASHED LOW LINE..WAVY LOW LINE\nFF3F          ; Pc #       FULLWIDTH LOW LINE\n\n# Total code points: 10\n```\n\n----------------------------------------\n\nTITLE: Linking Python 3 Executable for Swift Build (Shell)\nDESCRIPTION: Creates a symbolic link named `python` in the user's `~/bin` directory, pointing to the installed `python3` executable. This ensures build scripts expecting `python` use the correct interpreter. Assumes `~/bin` is in the user's PATH.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OpenBSD.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ln -s /usr/local/bin/python3 ~/bin/python\n```\n\n----------------------------------------\n\nTITLE: Copying and Installing C++ Shim Files\nDESCRIPTION: Sets up custom commands to copy C++ shim files (modulemap, headers) to appropriate SDK directories. Creates build targets for each SDK and configures installation paths for compiler components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/cxxshim/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n  set(outputs)\n  foreach(source libcxxshim.modulemap libcxxshim.h libcxxstdlibshim.h)\n    add_custom_command(OUTPUT ${module_dir}/${source}\n                       DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${source}\n                       COMMAND ${CMAKE_COMMAND} \"-E\" \"copy_if_different\" \"${CMAKE_CURRENT_SOURCE_DIR}/${source}\" \"${module_dir}/${source}\"\n                       COMMENT \"Copying ${source} to ${module_dir}\")\n    list(APPEND outputs \"${module_dir}/${source}\")\n\n    if(SWIFT_BUILD_STATIC_STDLIB OR SWIFT_SDK_${sdk}_STATIC_ONLY)\n      add_custom_command(OUTPUT ${module_dir_static}/${source}\n                         DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/${source}\n                         COMMAND ${CMAKE_COMMAND} \"-E\" \"copy_if_different\" \"${CMAKE_CURRENT_SOURCE_DIR}/${source}\" \"${module_dir_static}/${source}\"\n                         COMMENT \"Copying ${source} to ${module_dir_static}\")\n      list(APPEND outputs \"${module_dir_static}/${source}\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Break Test Case\nDESCRIPTION: This snippet demonstrates a single Unicode word break test case. It shows how different characters interact with word break rules, including the use of WORD JOINER (U+2060) and various punctuation marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_13\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 0061 × 2060 × 0308 × 0041 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Objective-C Message Send Syntax\nDESCRIPTION: Shows the syntax for sending a message in Objective-C. The message send is type-checked by looking for a declared method with the given selector in the static type of the receiver.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_1\n\nLANGUAGE: Objective-C\nCODE:\n```\nperformSelector\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Synchronization Compiler Flags\nDESCRIPTION: Configures compiler flags for the synchronization library including experimental features and memory safety settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Synchronization/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_SYNCHRNOIZATION_SWIFT_FLAGS\n  ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  \"-enable-builtin-module\"\n  \"-enable-experimental-feature\" \"RawLayout\"\n  \"-enable-experimental-feature\" \"StaticExclusiveOnly\"\n  \"-enable-experimental-feature\" \"Extern\"\n  \"-strict-memory-safety\"\n)\n```\n\n----------------------------------------\n\nTITLE: Windows Platform Dependencies\nDESCRIPTION: Windows-specific configuration for runtime dependencies and installation paths.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_HOST_DISPATCH)\n  if(SWIFT_HOST_VARIANT_SDK STREQUAL \"WINDOWS\")\n    set(SOURCEKIT_RUNTIME_DIR bin)\n  else()\n    set(SOURCEKIT_RUNTIME_DIR lib)\n  endif()\n  add_dependencies(sourcekit-inproc BlocksRuntime dispatch)\n  if(\"${SWIFT_HOST_VARIANT_SDK}\" MATCHES \"OSX|WINDOWS\")\n    swift_install_in_component(FILES\n      $<TARGET_FILE:dispatch>\n      $<TARGET_FILE:BlocksRuntime>\n      DESTINATION ${SOURCEKIT_RUNTIME_DIR}\n      COMPONENT sourcekit-inproc)\n  endif()\n  if(SWIFT_HOST_VARIANT_SDK STREQUAL \"WINDOWS\")\n    swift_install_in_component(FILES\n      $<TARGET_LINKER_FILE:dispatch>\n      $<TARGET_LINKER_FILE:BlocksRuntime>\n      DESTINATION lib\n      COMPONENT sourcekit-inproc)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake Configuration for Swift Project\nDESCRIPTION: This CMake directive adds the 'lib' and 'bin' subdirectories to the build system. It instructs CMake to process the CMakeLists.txt files in these directories as part of the overall build configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(lib)\nadd_subdirectory(bin)\n```\n\n----------------------------------------\n\nTITLE: Drive Substitution for Repository Workspace - Batchfile\nDESCRIPTION: This brief batch script performs a drive substitution, assigning the S: drive letter to a specified source directory path to simplify subsequent build steps for Swift. It helps standardize paths used in further commands across documentation. Replace <path to sources> with a real directory. Requires proper permissions to create drive substitutions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_1\n\nLANGUAGE: Batchfile\nCODE:\n```\nsubst S: <path to sources>\n```\n\n----------------------------------------\n\nTITLE: Unicode Common Category Code Point Ranges\nDESCRIPTION: Defines ranges of Unicode code points for characters in the Common category. Includes mathematical symbols, digits, siyaq numbers, mahjong tiles, playing cards, emoji, and various other symbols and pictographs. Each line specifies a range or single code point with its category and description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n1D7C4..1D7CB  ; Common # L&   [8] MATHEMATICAL SANS-SERIF BOLD ITALIC EPSILON SYMBOL..MATHEMATICAL BOLD SMALL DIGAMMA\n1D7CE..1D7FF  ; Common # Nd  [50] MATHEMATICAL BOLD DIGIT ZERO..MATHEMATICAL MONOSPACE DIGIT NINE\n1EC71..1ECAB  ; Common # No  [59] INDIC SIYAQ NUMBER ONE..INDIC SIYAQ NUMBER PREFIXED NINE\n1ECAC         ; Common # So       INDIC SIYAQ PLACEHOLDER\n1ECAD..1ECAF  ; Common # No   [3] INDIC SIYAQ FRACTION ONE QUARTER..INDIC SIYAQ FRACTION THREE QUARTERS\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Dependencies for Non-Darwin Systems\nDESCRIPTION: Adds additional library dependencies (dispatch and BlocksRuntime) when building on non-Darwin platforms, ensuring proper functionality on Linux and other systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  target_link_libraries(sourcekitd-test PRIVATE\n    dispatch\n    BlocksRuntime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for swiftStdlibStubs in CMake\nDESCRIPTION: Configures include directories for the swiftStdlibStubs target, including the project's binary include directory and compiler headers from the Swift compiler source directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/stubs/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(swiftStdlibStubs PRIVATE\n  \"${PROJECT_BINARY_DIR}/include\"\n  # FIXME: pulls in headers from the main compiler build\n  # Assert.cpp:\n  #   swift/Runtime/Config.h\n  #   swift/Runtime/Debug.h\n  #   swift/Runtime/Portability.h\n  # Stubs.cpp:\n  #   swift/Runtime/Debug.h\n  # GlobalObjects.cpp:\n  #   swift/Basic/type_traits.h\n  # Random.cpp:\n  #   swift/Runtime/Config.h\n  # UnicodeScalarProps.cpp:\n  #   swift/Runtime/Debug.h\n  # ...\n  #\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/include\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift AST Module Build in CMake\nDESCRIPTION: Adds a Swift compiler module named AST with dependency on Basic module. Specifies source files including core AST functionality like declarations, conformance, diagnostics, generic signatures, registration, substitution maps, and types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/AST/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_compiler_module(AST\n  DEPENDS\n    Basic\n  SOURCES\n    Declarations.swift\n    Conformance.swift\n    DiagnosticEngine.swift\n    GenericSignature.swift\n    Registration.swift\n    SubstitutionMap.swift\n    Type.swift)\n```\n\n----------------------------------------\n\nTITLE: Handling Duplicate Libraries Warning on Apple's Linker\nDESCRIPTION: Checks if Apple's linker supports the -no_warn_duplicate_libraries flag and enables it when available. This helps silence warnings about duplicate libraries that can occur when using CMake's library handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_67\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckLinkerFlag)\n\n# Apple's linker complains about duplicate libraries, which CMake likes to do\n# to support ELF platforms. To silence that warning, we can use\n# -no_warn_duplicate_libraries, but only in versions of the linker that\n# support that flag.\nif(NOT LLVM_USE_LINKER AND ${CMAKE_SYSTEM_NAME} MATCHES \"Darwin\")\n  check_linker_flag(C \"-Wl,-no_warn_duplicate_libraries\" SWIFT_LINKER_SUPPORTS_NO_WARN_DUPLICATE_LIBRARIES)\nelse()\n  set(SWIFT_LINKER_SUPPORTS_NO_WARN_DUPLICATE_LIBRARIES OFF CACHE INTERNAL \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Hangul Syllable LVT Ranges\nDESCRIPTION: Defines ranges of Unicode code points for Hangul syllables with leading consonant, vowel, and trailing consonant combinations. Each range contains 27 consecutive code points for syllable variations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_15\n\nLANGUAGE: unicode\nCODE:\n```\nC935..C94F    ; LVT # Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH\nC951..C96B    ; LVT # Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH\n[...]\nD789..D7A3    ; LVT # Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH\n```\n\n----------------------------------------\n\nTITLE: Unicode Number Mapping Block - Numbers 11-19\nDESCRIPTION: Mapping of Unicode code points representing numbers eleven through nineteen in various number systems including Roman numerals, circled numbers, Medefaidrin, Kaktovik, and Mayan numerals.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_15\n\nLANGUAGE: unicode\nCODE:\n```\n216A          ; 11.0 ; ; 11 # Nl       ROMAN NUMERAL ELEVEN\n217A          ; 11.0 ; ; 11 # Nl       SMALL ROMAN NUMERAL ELEVEN\n246A          ; 11.0 ; ; 11 # No       CIRCLED NUMBER ELEVEN\n```\n\n----------------------------------------\n\nTITLE: Defining Platform Variant Patterns and Lists\nDESCRIPTION: Sets up convenience patterns and lists for matching Darwin platforms, enabling platform-specific checks in the build system. These patterns help with conditional logic for different Apple platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n# A convenience pattern to match Darwin platforms. Example:\n#  if(SWIFT_HOST_VARIANT MATCHES \"${SWIFT_DARWIN_VARIANTS}\")\n#     ...\n#  endif()\nset(SWIFT_DARWIN_VARIANTS \"^(macosx|iphoneos|iphonesimulator|appletvos|appletvsimulator|watchos|watchsimulator)\")\nset(SWIFT_DARWIN_EMBEDDED_VARIANTS \"^(iphoneos|iphonesimulator|appletvos|appletvsimulator|watchos|watchsimulator)\")\n\n# A convenient list to match Darwin SDKs. Example:\n#  if(\"${SWIFT_HOST_VARIANT_SDK}\" IN_LIST SWIFT_DARWIN_PLATFORMS)\n#    ...\n#  endif()\nset(SWIFT_DARWIN_PLATFORMS \"IOS\" \"IOS_SIMULATOR\" \"TVOS\" \"TVOS_SIMULATOR\" \"WATCHOS\" \"WATCHOS_SIMULATOR\" \"OSX\" \"XROS\" \"XROS_SIMULATOR\")\n\nset(SWIFT_APPLE_PLATFORMS ${SWIFT_DARWIN_PLATFORMS})\nif(SWIFT_FREESTANDING_FLAVOR STREQUAL \"apple\")\n  list(APPEND SWIFT_APPLE_PLATFORMS \"FREESTANDING\")\n  if(SWIFT_FREESTANDING_IS_DARWIN)\n    list(APPEND SWIFT_DARWIN_PLATFORMS \"FREESTANDING\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: File Copy Commands Generation\nDESCRIPTION: Generates custom commands to copy each interoperability file to the output directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/PrintAsClang/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset (outputs)\n\nforeach(input ${datafiles})\n  set(source \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\")\n  set(dest \"${output_dir}/${input}\")\n  add_custom_command(OUTPUT\n                       \"${output_dir}/${input}\"\n                     DEPENDS\n                       \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\"\n                     COMMAND\n                       \"${CMAKE_COMMAND}\" \"-E\" \"copy\" \"${source}\" \"${dest}\")\n  list(APPEND outputs \"${output_dir}/${input}\")\nendforeach()\nlist(APPEND outputs \"${output_dir}\")\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_ANALYZE_CODE_COVERAGE Variable in CMake\nDESCRIPTION: Defines a CMake cache variable `SWIFT_ANALYZE_CODE_COVERAGE` to control whether Swift is built with code coverage instrumentation enabled. The accepted values are FALSE (default), NOT-MERGED, or MERGED. It is stored as a STRING in the cache.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_ANALYZE_CODE_COVERAGE FALSE CACHE STRING\n    \"Build Swift with code coverage instrumenting enabled [FALSE, NOT-MERGED, MERGED]\")\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Basic Compiler Module with CMake\nDESCRIPTION: Configures the Swift Basic compiler module by specifying its source files. The module includes core functionality related to source location, string parsing, and utility functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Basic/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_compiler_module(Basic\n  SOURCES\n    SourceLoc.swift\n    StringParser.swift\n    Utils.swift)\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Dependencies\nDESCRIPTION: Defines the core library dependencies required by the Swift Runtime module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RuntimeModule/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_runtime_link_libraries\n  swiftCore\n  swift_Concurrency\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Base Class with Class and Instance Methods\nDESCRIPTION: Declares a BaseInHead class with both class-level and instance-level methods that share the same name but different contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nclass BaseInHead {\n  class func doIt(_ arg: Int32)\n  func doIt(_ arg: Int32)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring FooEnum1X Variable\nDESCRIPTION: Defines a getter-only computed property FooEnum1X that returns a FooEnum1 value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  FooEnum1X.  Bbb.\nvar FooEnum1X: FooEnum1 { get }\n```\n\n----------------------------------------\n\nTITLE: Windows Error Code Lookup Result\nDESCRIPTION: Output from the System Error Code Lookup Tool showing the interpretation of a Windows error code (0xc0000135) indicating a missing DLL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_50\n\nLANGUAGE: plaintext\nCODE:\n```\n# for hex 0xc0000135 / decimal -1073741515\n  STATUS_DLL_NOT_FOUND                                           ntstatus.h   \n# The code execution cannot proceed because %hs was not\n# found. Reinstalling the program may fix this problem.\n# as an HRESULT: Severity: FAILURE (1), FACILITY_NULL (0x0), Code 0x135\n# for hex 0x135 / decimal 309\n  ERROR_NOTIFICATION_GUID_ALREADY_DEFINED                        winerror.h   \n# The specified file already has a notification GUID\n# associated with it.\n```\n\n----------------------------------------\n\nTITLE: Building swift-llbuild with CMake and Ninja on Windows\nDESCRIPTION: This snippet configures and builds the swift-llbuild project using CMake and Ninja. It sets various dependencies and compiler flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_17\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -B S:\\b\\6 ^\n  -D BUILD_SHARED_LIBS=YES ^\n  -D CMAKE_BUILD_TYPE=RelWithDebInfo ^\n  -D CMAKE_INSTALL_PREFIX=C:\\Library\\Developer\\Toolchains\\unknown-Asserts-development.xctoolchain\\usr ^\n  -D CMAKE_CXX_COMPILER=S:/b/1/bin/clang-cl.exe ^\n  -D CMAKE_CXX_FLAGS=\"-Xclang -fno-split-cold-code\" ^\n  -D CMAKE_MT=mt ^\n  -D CMAKE_Swift_COMPILER=S:/b/1/bin/swiftc.exe ^\n  -D LLBUILD_SUPPORT_BINDINGS=Swift ^\n  -D dispatch_DIR=S:\\b\\2\\cmake\\modules ^\n  -D Foundation_DIR=S:\\b\\3\\cmake\\modules ^\n  -D SQLite3_INCLUDE_DIR=S:\\Library\\sqlite-3.28.0\\usr\\include ^\n  -D SQLite3_LIBRARY=S:\\Library\\sqlite-3.28.0\\usr\\lib\\sqlite3.lib ^\n  -G Ninja ^\n  -S S:\\swift-llbuild\n\nninja -C S:\\b\\6\n```\n\n----------------------------------------\n\nTITLE: Configuring Atomic Sources in CMake\nDESCRIPTION: Defines the source files for atomic operations implementation including basic atomic types, memory orderings, and atomic representations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Synchronization/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_SYNCHRONIZATION_ATOMIC_SOURCES\n  Atomics/Atomic.swift\n  Atomics/AtomicBool.swift\n  Atomics/AtomicFloats.swift\n  Atomics/AtomicLazyReference.swift\n  Atomics/AtomicMemoryOrderings.swift\n  Atomics/AtomicOptional.swift\n  Atomics/AtomicPointers.swift\n  Atomics/AtomicRepresentable.swift\n  WordPair.swift\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Host Tool for Def-to-Strings Converter in CMake\nDESCRIPTION: This snippet adds the swift-def-to-strings-converter as a Swift host tool. It specifies the source file, component, and indicates that it doesn't use Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-def-to-strings-converter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(swift-def-to-strings-converter\n  swift-def-to-strings-converter.cpp\n  SWIFT_COMPONENT tools\n  DOES_NOT_USE_SWIFT\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Protocol Requirement Changes in Swift\nDESCRIPTION: This section details changes to protocol requirements in Swift, including modifications to accessors, associated types, functions, and variables within protocols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\n/* Protocol Requirement Change */\ncake: Accessor HasMutatingMethodClone.bar.Get() now requires new witness table entry\ncake: AssociatedType AssociatedTypePro.T1 has removed default type Swift.Int\ncake: AssociatedType RequirementChanges.addedTypeWithoutDefault has been added as a protocol requirement\ncake: Func HasMutatingMethodClone.foo() now requires new witness table entry\ncake: Func RequirementChanges.addedFunc() has been added as a protocol requirement\ncake: Var RequirementChanges.addedVar has been added as a protocol requirement\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_VENDOR Cache Variable in CMake\nDESCRIPTION: Defines a CMake cache variable `SWIFT_VENDOR` of type STRING. This variable allows specifying the vendor name associated with the Swift compiler being built. It defaults to an empty string.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_VENDOR \"\" CACHE STRING\n    \"The vendor name of the Swift compiler\")\n```\n\n----------------------------------------\n\nTITLE: Installing Vim Editor Integration Files for Swift using CMake\nDESCRIPTION: CMake command that installs Swift-related Vim editor integration files including ftdetect and syntax directories into the vim73 share directory. Excludes hidden files and configures the installation as part of the editor-integration component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/vim/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nswift_install_in_component(DIRECTORY\n                            ftdetect\n                            syntax\n                           DESTINATION \"share/vim/vim73\"\n                           COMPONENT editor-integration\n                           PATTERN \".*\" EXCLUDE)\n```\n\n----------------------------------------\n\nTITLE: Decrementing Unowned Reference Count with unowned_release in SIL\nDESCRIPTION: Decrements the unowned reference count of a heap object. When both strong and unowned reference counts reach zero, the object's memory is deallocated. Not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_59\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'unowned_release' sil-operand\n\nunowned_release %0 : $@unowned T\n// $T must be a reference type\n```\n\n----------------------------------------\n\nTITLE: Defining Math Property for Unicode Characters\nDESCRIPTION: This code block defines ranges and individual Unicode code points that are classified as having the 'Math' property. It includes various mathematical symbols, operators, and other characters used in mathematical contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_0\n\nLANGUAGE: Unicode\nCODE:\n```\n002B          ; Math\n003C..003E    ; Math\n005E          ; Math\n007C          ; Math\n007E          ; Math\n00AC          ; Math\n00B1          ; Math\n00D7          ; Math\n00F7          ; Math\n03D0..03D2    ; Math\n03D5          ; Math\n03F0..03F1    ; Math\n03F4..03F5    ; Math\n03F6          ; Math\n0606..0608    ; Math\n2016          ; Math\n2032..2034    ; Math\n2040          ; Math\n2044          ; Math\n2052          ; Math\n2061..2064    ; Math\n207A..207C    ; Math\n207D          ; Math\n207E          ; Math\n208A..208C    ; Math\n208D          ; Math\n208E          ; Math\n20D0..20DC    ; Math\n20E1          ; Math\n20E5..20E6    ; Math\n20EB..20EF    ; Math\n2102          ; Math\n2107          ; Math\n210A..2113    ; Math\n2115          ; Math\n2118          ; Math\n2119..211D    ; Math\n2124          ; Math\n2128          ; Math\n2129          ; Math\n212C..212D    ; Math\n212F..2131    ; Math\n2133..2134    ; Math\n2135..2138    ; Math\n213C..213F    ; Math\n2140..2144    ; Math\n2145..2149    ; Math\n214B          ; Math\n2190..2194    ; Math\n2195..2199    ; Math\n219A..219B    ; Math\n219C..219F    ; Math\n21A0          ; Math\n21A1..21A2    ; Math\n21A3          ; Math\n21A4..21A5    ; Math\n21A6          ; Math\n21A7          ; Math\n21A9..21AD    ; Math\n21AE          ; Math\n21B0..21B1    ; Math\n21B6..21B7    ; Math\n21BC..21CD    ; Math\n21CE..21CF    ; Math\n21D0..21D1    ; Math\n21D2          ; Math\n21D3          ; Math\n21D4          ; Math\n21D5..21DB    ; Math\n21DD          ; Math\n21E4..21E5    ; Math\n21F4..22FF    ; Math\n2308          ; Math\n2309          ; Math\n230A          ; Math\n230B          ; Math\n2320..2321    ; Math\n237C          ; Math\n239B..23B3    ; Math\n23B4..23B5    ; Math\n23B7          ; Math\n23D0          ; Math\n23DC..23E1    ; Math\n23E2          ; Math\n25A0..25A1    ; Math\n25AE..25B6    ; Math\n25B7          ; Math\n25BC..25C0    ; Math\n25C1          ; Math\n25C6..25C7    ; Math\n25CA..25CB    ; Math\n25CF..25D3    ; Math\n25E2          ; Math\n25E4          ; Math\n25E7..25EC    ; Math\n25F8..25FF    ; Math\n2605..2606    ; Math\n2640          ; Math\n2642          ; Math\n2660..2663    ; Math\n266D..266E    ; Math\n266F          ; Math\n27C0..27C4    ; Math\n27C5          ; Math\n27C6          ; Math\n27C7..27E5    ; Math\n27E6          ; Math\n27E7          ; Math\n27E8          ; Math\n27E9          ; Math\n27EA          ; Math\n27EB          ; Math\n27EC          ; Math\n27ED          ; Math\n27EE          ; Math\n27EF          ; Math\n27F0..27FF    ; Math\n2900..2982    ; Math\n2983          ; Math\n2984          ; Math\n2985          ; Math\n2986          ; Math\n2987          ; Math\n2988          ; Math\n2989          ; Math\n298A          ; Math\n298B          ; Math\n298C          ; Math\n298D          ; Math\n298E          ; Math\n298F          ; Math\n2990          ; Math\n2991          ; Math\n2992          ; Math\n2993          ; Math\n2994          ; Math\n2995          ; Math\n2996          ; Math\n2997          ; Math\n2998          ; Math\n2999..29D7    ; Math\n29D8          ; Math\n29D9          ; Math\n29DA          ; Math\n29DB          ; Math\n29DC..29FB    ; Math\n29FC          ; Math\n29FD          ; Math\n29FE..2AFF    ; Math\n2B30..2B44    ; Math\n2B47..2B4C    ; Math\n\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Javanese Script\nDESCRIPTION: Defines the Unicode code point ranges for the Javanese script, including letters, signs, vowel marks, consonant signs, and digits. This block contains 90 total code points across various character categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_62\n\nLANGUAGE: Unicode\nCODE:\n```\nA980..A982    ; Javanese # Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR\nA983          ; Javanese # Mc       JAVANESE SIGN WIGNYAN\nA984..A9B2    ; Javanese # Lo  [47] JAVANESE LETTER A..JAVANESE LETTER HA\nA9B3          ; Javanese # Mn       JAVANESE SIGN CECAK TELU\nA9B4..A9B5    ; Javanese # Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG\nA9B6..A9B9    ; Javanese # Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT\nA9BA..A9BB    ; Javanese # Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE\nA9BC..A9BD    ; Javanese # Mn   [2] JAVANESE VOWEL SIGN PEPET..JAVANESE CONSONANT SIGN KERET\nA9BE..A9C0    ; Javanese # Mc   [3] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE PANGKON\nA9C1..A9CD    ; Javanese # Po  [13] JAVANESE LEFT RERENGGAN..JAVANESE TURNED PADA PISELEH\nA9D0..A9D9    ; Javanese # Nd  [10] JAVANESE DIGIT ZERO..JAVANESE DIGIT NINE\nA9DE..A9DF    ; Javanese # Po   [2] JAVANESE PADA TIRTA TUMETES..JAVANESE PADA ISEN-ISEN\n\n# Total code points: 90\n```\n\n----------------------------------------\n\nTITLE: Configuring Darwin/iOS Cross-Platform Build Components with Swift\nDESCRIPTION: Example showing build and host configuration for cross-compiling Swift components for both macOS and iOS targets. Demonstrates multi-platform build setup.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/BuildManifesto.md#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n[\n  /* compiler */ (build: \"x86_64-apple-macosx10.14\", host: \"x86_64-apple-macosx10.14\"),\n  /* runtime */  (build: \"x86_64-apple-macosx10.14\", host: \"x86_64-apple-macosx10.14\"),\n  /* stdlib */   (build: \"x86_64-apple-macosx10.14\", host: \"x86_64-apple-macosx10.14\"),\n  /* runtime */  (build: \"x86_64-apple-macosx10.14\", host: \"armv7-apple-ios12.3\"),\n  /* stdlib */   (build: \"x86_64-apple-macosx10.14\", host: \"armv7-apple-ios12.3\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for Swift\nDESCRIPTION: Configures CMake's include directory settings to add Swift-specific include paths. This ensures that generated headers and core Swift headers are available during the build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_62\n\nLANGUAGE: cmake\nCODE:\n```\n# This setting causes all CMakeLists.txt to automatically have\n# ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_CURRENT_SOURCE_DIR} as an\n# include_directories path. This is done for developer\n# convenience. Additionally, LLVM/Clang build with this option enabled, so we\n# should match them unless it is removed from LLVM/Clang as well.\n#\n# *NOTE* Even though these directories are added to the include path for a\n# specific CMakeLists.txt, these include paths are not propagated down to\n# subdirectories.\nset(CMAKE_INCLUDE_CURRENT_DIR ON)\n\n# We'll need this once we have generated headers\ninclude_directories(BEFORE\n  ${SWIFT_MAIN_INCLUDE_DIR}\n  ${SWIFT_INCLUDE_DIR}\n  ${SWIFT_SHIMS_INCLUDE_DIR}\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Up Embedded Concurrency Build Targets and Configuration\nDESCRIPTION: Initializes build targets for embedded concurrency and configures various Swift standard library settings specific to the embedded environment. This includes disabling reflection, back deployment support, stable ABI, and Objective-C interoperability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Concurrency/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB AND SWIFT_SHOULD_BUILD_EMBEDDED_CONCURRENCY)\n  add_custom_target(embedded-concurrency)\n  add_dependencies(embedded-libraries embedded-concurrency)\n\n  set(SWIFT_ENABLE_REFLECTION OFF)\n  set(SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT OFF)\n  set(SWIFT_STDLIB_STABLE_ABI OFF)\n  set(SWIFT_STDLIB_ENABLE_OBJC_INTEROP OFF)\n  set(SWIFT_CONCURRENCY_USES_DISPATCH FALSE)\n  set(SWIFT_STDLIB_SINGLE_THREADED_CONCURRENCY TRUE)\n  set(SWIFT_STDLIB_CONCURRENCY_TRACING FALSE)\n  set(SWIFT_STDLIB_HAS_ENVIRON FALSE)\n  set(SWIFT_STDLIB_HAS_ASL FALSE)\n  list(APPEND LLVM_OPTIONAL_SOURCES ExecutorImpl.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Module Interface Files in CMake\nDESCRIPTION: Sets up the installation of Swift module interface files for each Swift Syntax module. It specifies the destination paths and includes both public and private interface files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftSyntax/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(module ${SWIFT_SYNTAX_MODULES})\n  set(module_dir \"${module}.swiftmodule\")\n  set(module_file \"${SWIFT_HOST_LIBRARIES_DEST_DIR}/${module_dir}/${SWIFT_HOST_MODULE_TRIPLE}\")\n  swift_install_in_component(FILES \"${module_file}.swiftinterface\" \"${module_file}.private.swiftinterface\"\n                             DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/host/${module_dir}\"\n                             COMPONENT swift-syntax-lib)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Parser Integration\nDESCRIPTION: Sets up the build environment when Swift syntax parser integration is enabled, ensuring the proper bootstrapping mode is used. This is particularly important for Linux, OpenBSD, and FreeBSD platforms where only HOSTTOOLS bootstrapping mode is supported.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_60\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_INCLUDE_TOOLS AND SWIFT_BUILD_SWIFT_SYNTAX AND SWIFT_ENABLE_SWIFT_IN_SWIFT)\n  # Only \"HOSTTOOLS\" is supported in Linux when Swift parser integration is enabled.\n  if(SWIFT_HOST_VARIANT_SDK MATCHES \"LINUX|OPENBSD|FREEBSD\" AND NOT BOOTSTRAPPING_MODE STREQUAL \"HOSTTOOLS\")\n    message(WARNING \"Force setting BOOTSTRAPPING=HOSTTOOLS because Swift parser integration is enabled\")\n    set(BOOTSTRAPPING_MODE \"HOSTTOOLS\")\n    if(NOT CMAKE_Swift_COMPILER)\n      message(SEND_ERROR \"No Swift compiler found.\\n\"\n        \"Tell CMake where to find the Swift compiler by setting either the \"\n        \"environment variable \\\"SWIFTC\\\" or the CMake cache entry \"\n        \"CMAKE_Swift_COMPILER to the full path of the compiler, or to the \"\n        \"compiler name if it is in the PATH\")\n    endif()\n  endif()\n  add_definitions(-DSWIFT_BUILD_SWIFT_SYNTAX)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Extended Pictographic Ranges\nDESCRIPTION: This code snippet defines Unicode ranges for Extended Pictographic characters. It includes the code point ranges, Unicode version, count of characters, and representative symbols for each range. The ranges cover various emojis and symbols, including both assigned and reserved code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n1F9C1..1F9C2  ; Extended_Pictographic# E11.0  [2] (🧁..🧂)    cupcake..salt\n1F9C3..1F9CA  ; Extended_Pictographic# E12.0  [8] (🧃..🧊)    beverage box..ice\n1F9CB         ; Extended_Pictographic# E13.0  [1] (🧋)       bubble tea\n1F9CC         ; Extended_Pictographic# E14.0  [1] (🧌)       troll\n1F9CD..1F9CF  ; Extended_Pictographic# E12.0  [3] (🧍..🧏)    person standing..deaf person\n1F9D0..1F9E6  ; Extended_Pictographic# E5.0  [23] (🧐..🧦)    face with monocle..socks\n1F9E7..1F9FF  ; Extended_Pictographic# E11.0 [25] (🧧..🧿)    red envelope..nazar amulet\n1FA00..1FA6F  ; Extended_Pictographic# E0.0 [112] (🨀..🩯)    NEUTRAL CHESS KING..<reserved-1FA6F>\n1FA70..1FA73  ; Extended_Pictographic# E12.0  [4] (🩰..🩳)    ballet shoes..shorts\n1FA74         ; Extended_Pictographic# E13.0  [1] (🩴)       thong sandal\n1FA75..1FA77  ; Extended_Pictographic# E15.0  [3] (🩵..🩷)    light blue heart..pink heart\n1FA78..1FA7A  ; Extended_Pictographic# E12.0  [3] (🩸..🩺)    drop of blood..stethoscope\n1FA7B..1FA7C  ; Extended_Pictographic# E14.0  [2] (🩻..🩼)    x-ray..crutch\n1FA7D..1FA7F  ; Extended_Pictographic# E0.0   [3] (🩽..🩿)    <reserved-1FA7D>..<reserved-1FA7F>\n1FA80..1FA82  ; Extended_Pictographic# E12.0  [3] (🪀..🪂)    yo-yo..parachute\n1FA83..1FA86  ; Extended_Pictographic# E13.0  [4] (🪃..🪆)    boomerang..nesting dolls\n1FA87..1FA88  ; Extended_Pictographic# E15.0  [2] (🪇..🪈)    maracas..flute\n1FA89         ; Extended_Pictographic# E16.0  [1] (🪉)       harp\n1FA8A..1FA8E  ; Extended_Pictographic# E0.0   [5] (🪊..🪎)    <reserved-1FA8A>..<reserved-1FA8E>\n1FA8F         ; Extended_Pictographic# E16.0  [1] (🪏)       shovel\n1FA90..1FA95  ; Extended_Pictographic# E12.0  [6] (🪐..🪕)    ringed planet..banjo\n1FA96..1FAA8  ; Extended_Pictographic# E13.0 [19] (🪖..🪨)    military helmet..rock\n1FAA9..1FAAC  ; Extended_Pictographic# E14.0  [4] (🪩..🪬)    mirror ball..hamsa\n1FAAD..1FAAF  ; Extended_Pictographic# E15.0  [3] (🪭..🪯)    folding hand fan..khanda\n1FAB0..1FAB6  ; Extended_Pictographic# E13.0  [7] (🪰..🪶)    fly..feather\n1FAB7..1FABA  ; Extended_Pictographic# E14.0  [4] (🪷..🪺)    lotus..nest with eggs\n1FABB..1FABD  ; Extended_Pictographic# E15.0  [3] (🪻..🪽)    hyacinth..wing\n1FABE         ; Extended_Pictographic# E16.0  [1] (🪾)       leafless tree\n1FABF         ; Extended_Pictographic# E15.0  [1] (🪿)       goose\n1FAC0..1FAC2  ; Extended_Pictographic# E13.0  [3] (🫀..🫂)    anatomical heart..people hugging\n1FAC3..1FAC5  ; Extended_Pictographic# E14.0  [3] (🫃..🫅)    pregnant man..person with crown\n1FAC6         ; Extended_Pictographic# E16.0  [1] (🫆)       fingerprint\n1FAC7..1FACD  ; Extended_Pictographic# E0.0   [7] (🫇..🫍)    <reserved-1FAC7>..<reserved-1FACD>\n1FACE..1FACF  ; Extended_Pictographic# E15.0  [2] (🫎..🫏)    moose..donkey\n1FAD0..1FAD6  ; Extended_Pictographic# E13.0  [7] (🫐..🫖)    blueberries..teapot\n1FAD7..1FAD9  ; Extended_Pictographic# E14.0  [3] (🫗..🫙)    pouring liquid..jar\n1FADA..1FADB  ; Extended_Pictographic# E15.0  [2] (🫚..🫛)    ginger root..pea pod\n1FADC         ; Extended_Pictographic# E16.0  [1] (🫜)       root vegetable\n1FADD..1FADE  ; Extended_Pictographic# E0.0   [2] (🫝..🫞)    <reserved-1FADD>..<reserved-1FADE>\n1FADF         ; Extended_Pictographic# E16.0  [1] (🫟)       splatter\n1FAE0..1FAE7  ; Extended_Pictographic# E14.0  [8] (🫠..🫧)    melting face..bubbles\n1FAE8         ; Extended_Pictographic# E15.0  [1] (🫨)       shaking face\n1FAE9         ; Extended_Pictographic# E16.0  [1] (🫩)       face with bags under eyes\n1FAEA..1FAEF  ; Extended_Pictographic# E0.0   [6] (🫪..🫯)    <reserved-1FAEA>..<reserved-1FAEF>\n1FAF0..1FAF6  ; Extended_Pictographic# E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands\n1FAF7..1FAF8  ; Extended_Pictographic# E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand\n1FAF9..1FAFF  ; Extended_Pictographic# E0.0   [7] (🫹..🫿)    <reserved-1FAF9>..<reserved-1FAFF>\n1FC00..1FFFD  ; Extended_Pictographic# E0.0[1022] (🰀..🿽)    <reserved-1FC00>..<reserved-1FFFD>\n```\n\n----------------------------------------\n\nTITLE: Unicode Grapheme_Extend Property Ranges\nDESCRIPTION: Defines ranges of Unicode code points that have the Grapheme_Extend property. These code points typically represent combining marks, emoji modifiers, and other characters that extend the base grapheme. The file includes the total count of 2193 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_38\n\nLANGUAGE: unicode\nCODE:\n```\n114B0         ; Grapheme_Extend\n114B3..114B8  ; Grapheme_Extend\n114BA         ; Grapheme_Extend\n114BD         ; Grapheme_Extend\n114BF..114C0  ; Grapheme_Extend\n114C2..114C3  ; Grapheme_Extend\n115AF         ; Grapheme_Extend\n115B2..115B5  ; Grapheme_Extend\n115BC..115BD  ; Grapheme_Extend\n115BF..115C0  ; Grapheme_Extend\n115DC..115DD  ; Grapheme_Extend\n11633..1163A  ; Grapheme_Extend\n1163D         ; Grapheme_Extend\n1163F..11640  ; Grapheme_Extend\n116AB         ; Grapheme_Extend\n116AD         ; Grapheme_Extend\n116B0..116B5  ; Grapheme_Extend\n116B6         ; Grapheme_Extend\n116B7         ; Grapheme_Extend\n1171D         ; Grapheme_Extend\n1171F         ; Grapheme_Extend\n11722..11725  ; Grapheme_Extend\n11727..1172B  ; Grapheme_Extend\n1182F..11837  ; Grapheme_Extend\n11839..1183A  ; Grapheme_Extend\n11930         ; Grapheme_Extend\n1193B..1193C  ; Grapheme_Extend\n1193D         ; Grapheme_Extend\n1193E         ; Grapheme_Extend\n11943         ; Grapheme_Extend\n119D4..119D7  ; Grapheme_Extend\n119DA..119DB  ; Grapheme_Extend\n119E0         ; Grapheme_Extend\n11A01..11A0A  ; Grapheme_Extend\n11A33..11A38  ; Grapheme_Extend\n11A3B..11A3E  ; Grapheme_Extend\n11A47         ; Grapheme_Extend\n11A51..11A56  ; Grapheme_Extend\n11A59..11A5B  ; Grapheme_Extend\n11A8A..11A96  ; Grapheme_Extend\n11A98..11A99  ; Grapheme_Extend\n11C30..11C36  ; Grapheme_Extend\n11C38..11C3D  ; Grapheme_Extend\n11C3F         ; Grapheme_Extend\n11C92..11CA7  ; Grapheme_Extend\n11CAA..11CB0  ; Grapheme_Extend\n11CB2..11CB3  ; Grapheme_Extend\n11CB5..11CB6  ; Grapheme_Extend\n11D31..11D36  ; Grapheme_Extend\n11D3A         ; Grapheme_Extend\n11D3C..11D3D  ; Grapheme_Extend\n11D3F..11D45  ; Grapheme_Extend\n11D47         ; Grapheme_Extend\n11D90..11D91  ; Grapheme_Extend\n11D95         ; Grapheme_Extend\n11D97         ; Grapheme_Extend\n11EF3..11EF4  ; Grapheme_Extend\n11F00..11F01  ; Grapheme_Extend\n11F36..11F3A  ; Grapheme_Extend\n11F40         ; Grapheme_Extend\n11F41         ; Grapheme_Extend\n11F42         ; Grapheme_Extend\n11F5A         ; Grapheme_Extend\n13440         ; Grapheme_Extend\n13447..13455  ; Grapheme_Extend\n1611E..16129  ; Grapheme_Extend\n1612D..1612F  ; Grapheme_Extend\n16AF0..16AF4  ; Grapheme_Extend\n16B30..16B36  ; Grapheme_Extend\n16F4F         ; Grapheme_Extend\n16F8F..16F92  ; Grapheme_Extend\n16FE4         ; Grapheme_Extend\n16FF0..16FF1  ; Grapheme_Extend\n1BC9D..1BC9E  ; Grapheme_Extend\n1CF00..1CF2D  ; Grapheme_Extend\n1CF30..1CF46  ; Grapheme_Extend\n1D165..1D166  ; Grapheme_Extend\n1D167..1D169  ; Grapheme_Extend\n1D16D..1D172  ; Grapheme_Extend\n1D17B..1D182  ; Grapheme_Extend\n1D185..1D18B  ; Grapheme_Extend\n1D1AA..1D1AD  ; Grapheme_Extend\n1D242..1D244  ; Grapheme_Extend\n1DA00..1DA36  ; Grapheme_Extend\n1DA3B..1DA6C  ; Grapheme_Extend\n1DA75         ; Grapheme_Extend\n1DA84         ; Grapheme_Extend\n1DA9B..1DA9F  ; Grapheme_Extend\n1DAA1..1DAAF  ; Grapheme_Extend\n1E000..1E006  ; Grapheme_Extend\n1E008..1E018  ; Grapheme_Extend\n1E01B..1E021  ; Grapheme_Extend\n1E023..1E024  ; Grapheme_Extend\n1E026..1E02A  ; Grapheme_Extend\n1E08F         ; Grapheme_Extend\n1E130..1E136  ; Grapheme_Extend\n1E2AE         ; Grapheme_Extend\n1E2EC..1E2EF  ; Grapheme_Extend\n1E4EC..1E4EF  ; Grapheme_Extend\n1E5EE..1E5EF  ; Grapheme_Extend\n1E8D0..1E8D6  ; Grapheme_Extend\n1E944..1E94A  ; Grapheme_Extend\nE0020..E007F  ; Grapheme_Extend\nE0100..E01EF  ; Grapheme_Extend\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Avestan Script\nDESCRIPTION: Defines the Unicode code point ranges for the Avestan script, including letters and punctuation marks. This block contains 61 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_57\n\nLANGUAGE: Unicode\nCODE:\n```\n10B00..10B35  ; Avestan # Lo  [54] AVESTAN LETTER A..AVESTAN LETTER HE\n10B39..10B3F  ; Avestan # Po   [7] AVESTAN ABBREVIATION MARK..LARGE ONE RING OVER TWO RINGS PUNCTUATION\n\n# Total code points: 61\n```\n\n----------------------------------------\n\nTITLE: Configuring Linux and Android shared components\nDESCRIPTION: Sets up system headers and Swift libraries specifically for Linux and Android platforms with appropriate source files and compiler options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(ANDROID OR LINUX)\n  add_library(LinuxSystemHeaders INTERFACE)\n  target_include_directories(LinuxSystemHeaders INTERFACE\n    Sources/SwiftInspectLinux/SystemHeaders)\n\n  add_library(SwiftInspectLinux STATIC\n    Sources/SwiftInspectLinux/ElfFile.swift\n    Sources/SwiftInspectLinux/LinkMap.swift\n    Sources/SwiftInspectLinux/MemoryMap.swift\n    Sources/SwiftInspectLinux/Process.swift\n    Sources/SwiftInspectLinux/ProcFS.swift\n    Sources/SwiftInspectLinux/PTrace.swift\n    Sources/SwiftInspectLinux/RegisterSet.swift\n    Sources/SwiftInspectLinux/SymbolCache.swift)\n  target_compile_options(SwiftInspectLinux PRIVATE\n    -Xcc -D_GNU_SOURCE)\n  target_link_libraries(SwiftInspectLinux PUBLIC\n    LinuxSystemHeaders)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Swift Core Library Compilation Settings\nDESCRIPTION: Target properties, compile definitions, and compiler options for the Swift core library, including experimental features and optimization settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(swiftCore PROPERTIES\n  Swift_MODULE_NAME Swift\n  LINKER_LANGUAGE CXX)\n\ntarget_compile_definitions(swiftCore\n  PRIVATE\n    $<$<BOOL:${SwiftCore_ENABLE_REFLECTION}>:-DSWIFT_ENABLE_REFLECTION>\n    $<$<BOOL:${SwiftCore_ENABLE_COMPACT_ABSOLUTE_FUNCTION_POINTERS}>:-DSWIFT_COMPACT_ABSOLUTE_FUNCTION_POINTER>\n    $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_TARGET_LIBRARY_NAME=swiftCore>\n```\n\n----------------------------------------\n\nTITLE: Regular Differentiable Function Type Declaration in Swift\nDESCRIPTION: Code annotation showing the regular differentiable function type declaration in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable\n```\n\n----------------------------------------\n\nTITLE: Checking Python 3 Version (sh)\nDESCRIPTION: Executes `python3 --version` to check the installed Python 3 version. This ensures that the version meets the minimum requirement (at least 3.6) needed by various utility scripts within the Swift build system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\npython3 --version\n```\n\n----------------------------------------\n\nTITLE: Linking Swift Libraries\nDESCRIPTION: Links required Swift libraries to the swift-scan-test tool including swiftBasic, swiftDependencyScanImpl, and libSwiftScan.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-scan-test/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(swift-scan-test\n                      PRIVATE\n                      swiftBasic\n                      swiftDependencyScanImpl\n                      libSwiftScan)\n```\n\n----------------------------------------\n\nTITLE: Defining FooClassWithClassProperties with Class-level Properties\nDESCRIPTION: Creates a class with class-level properties of various types and ownership semantics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_26\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooClassWithClassProperties : FooClassBase {\n  unowned(unsafe) class var assignable: @sil_unmanaged AnyObject!\n  unowned(unsafe) class var unsafeAssignable: @sil_unmanaged AnyObject!\n  class var retainable: AnyObject!\n  class var strongRef: AnyObject!\n  @NSCopying class var copyable: AnyObject!\n  weak class var weakRef: @sil_weak AnyObject!\n  class var scalar: Int32\n  init!()\n  convenience init!(float f: Float)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Doxygen Documentation Generation\nDESCRIPTION: Sets up variables needed for Doxygen configuration, including paths, DOT for graph generation, and search engine configuration. These variables are used to populate the Doxygen configuration file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (LLVM_ENABLE_DOXYGEN)\nif (DOXYGEN_FOUND)\n  set(abs_srcdir ${CMAKE_CURRENT_SOURCE_DIR})\n  set(abs_builddir ${CMAKE_CURRENT_BINARY_DIR})\n\n  if (HAVE_DOT)\n    set(DOT ${LLVM_PATH_DOT})\n  endif()\n\n  if (LLVM_DOXYGEN_EXTERNAL_SEARCH)\n    set(enable_searchengine \"YES\")\n    set(searchengine_url \"${LLVM_DOXYGEN_SEARCHENGINE_URL}\")\n    set(enable_server_based_search \"YES\")\n    set(enable_external_search \"YES\")\n    set(extra_search_mappings \"${LLVM_DOXYGEN_SEARCH_MAPPINGS}\")\n  else()\n    set(enable_searchengine \"NO\")\n    set(searchengine_url \"\")\n    set(enable_server_based_search \"NO\")\n    set(enable_external_search \"NO\")\n    set(extra_search_mappings \"\")\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Finding Pygments Lexers Directory using Shell Commands\nDESCRIPTION: Commands to locate the Pygments lexers directory in the Python installation. This helps users identify where to copy the swift.py file during installation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/pygments/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cd /Library/Python\n$ find . -name lexers\n```\n\n----------------------------------------\n\nTITLE: Defining Number_Joiner Unicode Character Range\nDESCRIPTION: Specifies the Unicode code point for Brahmi Number Joiner, classified as Number_Joiner in the Indic_Syllabic_Category property. This character forms ligatures between numbers for multiplication.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_28\n\nLANGUAGE: unicode\nCODE:\n```\n1107F         ; Number_Joiner # Mn       BRAHMI NUMBER JOINER\n```\n\n----------------------------------------\n\nTITLE: Generating Output File List for Assembly (Shell)\nDESCRIPTION: Uses `sed` to process the `input-files.txt` (containing paths to Swift source files). It first removes the directory path part (`s|.*/|Output/|`) replacing it with `Output/`, and then changes the file extension from `.swift` to `.S` (`s|\\.swift|.S|`). The resulting list of output assembly file paths is saved to `output-files.txt`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n# 1. -output-filelist doesn't recreate a subdirectory structure,\n#    so first strip out directories\n# 2. map .swift files to assembly files\nsed -e 's|.*/|Output/|;s|\\.swift|.S|' input-files.txt > output-files.txt\n```\n\n----------------------------------------\n\nTITLE: RNN Type Aliases in Swift\nDESCRIPTION: Type aliases for different RNN variants using the generic RNN implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_67\n\nLANGUAGE: swift\nCODE:\n```\ntypealias SimpleRNN<Scalar: TensorFlowFloatingPoint> = RNN<SimpleRNNCell<Scalar>>\ntypealias LSTM<Scalar: TensorFlowFloatingPoint> = RNN<LSTMCell<Scalar>>\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unicode Grapheme Cluster Boundaries for Various Character Combinations\nDESCRIPTION: This snippet demonstrates multiple test cases for Unicode grapheme cluster boundaries. It uses symbols like '÷' to indicate break opportunities and '×' for non-break points. Each line tests different character combinations, including various scripts and Unicode properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ AC01 ÷ 0904 ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) ÷ [999.0] DEVANAGARI LETTER SHORT A (ConjunctLinkingScripts) ÷ [0.3]\n÷ AC01 × 0308 ÷ 0904 ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] DEVANAGARI LETTER SHORT A (ConjunctLinkingScripts) ÷ [0.3]\n÷ AC01 ÷ 0D4E ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) ÷ [999.0] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) ÷ [0.3]\n÷ AC01 × 0308 ÷ 0D4E ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) ÷ [0.3]\n÷ AC01 ÷ 0915 ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) ÷ [999.0] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [0.3]\n÷ AC01 × 0308 ÷ 0915 ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [0.3]\n÷ AC01 ÷ 231A ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ AC01 × 0308 ÷ 231A ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ AC01 × 0300 ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING GRAVE ACCENT (Extend_ExtCccZwj) ÷ [0.3]\n÷ AC01 × 0308 × 0300 ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] COMBINING GRAVE ACCENT (Extend_ExtCccZwj) ÷ [0.3]\n÷ AC01 × 0900 ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] DEVANAGARI SIGN INVERTED CANDRABINDU (Extend_ConjunctLinkingScripts_ExtCccZwj) ÷ [0.3]\n÷ AC01 × 0308 × 0900 ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] DEVANAGARI SIGN INVERTED CANDRABINDU (Extend_ConjunctLinkingScripts_ExtCccZwj) ÷ [0.3]\n÷ AC01 × 094D ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] DEVANAGARI SIGN VIRAMA (Extend_ConjunctLinkingScripts_ConjunctLinker_ExtCccZwj) ÷ [0.3]\n÷ AC01 × 0308 × 094D ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] DEVANAGARI SIGN VIRAMA (Extend_ConjunctLinkingScripts_ConjunctLinker_ExtCccZwj) ÷ [0.3]\n÷ AC01 × 200D ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [0.3]\n÷ AC01 × 0308 × 200D ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [0.3]\n÷ AC01 ÷ 0378 ÷ #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n÷ AC01 × 0308 ÷ 0378 ÷  #  ÷ [0.2] HANGUL SYLLABLE GAG (LVT) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n÷ 0903 ÷ 0020 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ 0903 × 0308 ÷ 0020 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ 0903 ÷ 000D ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 0903 × 0308 ÷ 000D ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 0903 ÷ 000A ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 0903 × 0308 ÷ 000A ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 0903 ÷ 0001 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]\n÷ 0903 × 0308 ÷ 0001 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]\n÷ 0903 × 200C ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] ZERO WIDTH NON-JOINER (Extend) ÷ [0.3]\n÷ 0903 × 0308 × 200C ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] ZERO WIDTH NON-JOINER (Extend) ÷ [0.3]\n÷ 0903 ÷ 1F1E6 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 0903 × 0308 ÷ 1F1E6 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 0903 ÷ 0600 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]\n÷ 0903 × 0308 ÷ 0600 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]\n÷ 0903 × 0A03 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.1] GURMUKHI SIGN VISARGA (SpacingMark) ÷ [0.3]\n÷ 0903 × 0308 × 0A03 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.1] GURMUKHI SIGN VISARGA (SpacingMark) ÷ [0.3]\n÷ 0903 ÷ 1100 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ 0903 × 0308 ÷ 1100 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ 0903 ÷ 1160 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 0903 × 0308 ÷ 1160 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 0903 ÷ 11A8 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 0903 × 0308 ÷ 11A8 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 0903 ÷ AC00 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 0903 × 0308 ÷ AC00 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 0903 ÷ AC01 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ 0903 × 0308 ÷ AC01 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ 0903 × 0903 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [0.3]\n÷ 0903 × 0308 × 0903 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [0.3]\n÷ 0903 ÷ 0904 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] DEVANAGARI LETTER SHORT A (ConjunctLinkingScripts) ÷ [0.3]\n÷ 0903 × 0308 ÷ 0904 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] DEVANAGARI LETTER SHORT A (ConjunctLinkingScripts) ÷ [0.3]\n÷ 0903 ÷ 0D4E ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) ÷ [0.3]\n÷ 0903 × 0308 ÷ 0D4E ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) ÷ [0.3]\n÷ 0903 ÷ 0915 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [0.3]\n÷ 0903 × 0308 ÷ 0915 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [0.3]\n÷ 0903 ÷ 231A ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 0903 × 0308 ÷ 231A ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 0903 × 0300 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING GRAVE ACCENT (Extend_ExtCccZwj) ÷ [0.3]\n÷ 0903 × 0308 × 0300 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] COMBINING GRAVE ACCENT (Extend_ExtCccZwj) ÷ [0.3]\n÷ 0903 × 0900 ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] DEVANAGARI SIGN INVERTED CANDRABINDU (Extend_ConjunctLinkingScripts_ExtCccZwj) ÷ [0.3]\n÷ 0903 × 0308 × 0900 ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] DEVANAGARI SIGN INVERTED CANDRABINDU (Extend_ConjunctLinkingScripts_ExtCccZwj) ÷ [0.3]\n÷ 0903 × 094D ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] DEVANAGARI SIGN VIRAMA (Extend_ConjunctLinkingScripts_ConjunctLinker_ExtCccZwj) ÷ [0.3]\n÷ 0903 × 0308 × 094D ÷  #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] DEVANAGARI SIGN VIRAMA (Extend_ConjunctLinkingScripts_ConjunctLinker_ExtCccZwj) ÷ [0.3]\n÷ 0903 × 200D ÷ #  ÷ [0.2] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining SourceKit Executable with Dependencies in CMake\nDESCRIPTION: Creates a SourceKit executable named complete-test with the specified source file and LLVM link components. This is the main definition of the build target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/complete-test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_sourcekit_executable(complete-test\n  complete-test.cpp\n  LLVM_LINK_COMPONENTS option coverage lto\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Target for Swift Features File in CMake\nDESCRIPTION: Defines a custom target 'swift-features-file' that depends on the merged features file and adds it as a dependency to swiftOption.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Option/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(swift-features-file DEPENDS ${features_file_dest})\n\nadd_dependencies(swiftOption swift-features-file)\n```\n\n----------------------------------------\n\nTITLE: Defining Joiner Unicode Character Range\nDESCRIPTION: Lists the Unicode code point for Zero Width Joiner, classified as Joiner in the Indic_Syllabic_Category property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_27\n\nLANGUAGE: unicode\nCODE:\n```\n200D          ; Joiner # Cf       ZERO WIDTH JOINER\n```\n\n----------------------------------------\n\nTITLE: Defining Declaration Context Mangling in Swift\nDESCRIPTION: Specifies how declaration contexts (modules, entities, extensions) are mangled in Swift. Includes special rules for extension contexts and handling of constrained extensions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\ncontext ::= module\n  context ::= entity\n  context ::= entity module generic-signature? 'E'\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for swiftSIL Target in CMake\nDESCRIPTION: This CMake command adds a list of C++ source files to the swiftSIL target. These files implement various aspects of the Swift Intermediate Language, including basic blocks, instructions, functions, and type handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SIL/IR/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSIL PRIVATE\n  AbstractionPattern.cpp\n  ApplySite.cpp\n  Bridging.cpp\n  Linker.cpp\n  Notifications.cpp\n  OperandOwnership.cpp\n  SIL.cpp\n  SILArgument.cpp\n  SILBasicBlock.cpp\n  SILBuilder.cpp\n  SILConstants.cpp\n  SILCoverageMap.cpp\n  SILDebugInfoExpression.cpp\n  SILDebugScope.cpp\n  SILDeclRef.cpp\n  SILDefaultOverrideTable.cpp\n  SILDefaultWitnessTable.cpp\n  SILDifferentiabilityWitness.cpp\n  SILFunction.cpp\n  SILFunctionBuilder.cpp\n  SILFunctionType.cpp\n  SILGlobalVariable.cpp\n  SILInstruction.cpp\n  SILInstructions.cpp\n  SILLocation.cpp\n  SILModule.cpp\n  SILMoveOnlyDeinit.cpp\n  SILPrinter.cpp\n  SILProfiler.cpp\n  SILSuccessor.cpp\n  SILSymbolVisitor.cpp\n  SILType.cpp\n  SILTypeSubstitution.cpp\n  SILUndef.cpp\n  SILVTable.cpp\n  SILValue.cpp\n  SILWitnessTable.cpp\n  TypeLowering.cpp\n  ValueOwnership.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Swift Demangling Library in CMake\nDESCRIPTION: Applies the previously defined compilation flags to the swiftDemangling target as private compile definitions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Demangling/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(swiftDemangling PRIVATE\n  ${swift_demangling_compile_flags})\n```\n\n----------------------------------------\n\nTITLE: Changing Variable Type in __VaListBuilder in Swift\nDESCRIPTION: The 'storage' variable in __VaListBuilder has undergone a type change from Swift.ContiguousArray<Swift.Int> to Swift.UnsafeMutablePointer<Swift.Int>?. This change also affects its mangled name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Inputs/stability-stdlib-abi-without-asserts-arm64.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n// Old type:\n__VaListBuilder.storage : Swift.ContiguousArray<Swift.Int>\n\n// New type:\n__VaListBuilder.storage : Swift.Optional<Swift.UnsafeMutablePointer<Swift.Int>>\n```\n\n----------------------------------------\n\nTITLE: Memory Measurement Warning for Multiple Tests in Swift\nDESCRIPTION: Tests that a warning is generated when attempting to use memory measurement with multiple tests. Verifies that the system properly identifies invalid usage of the --memory flag.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O 1 2 --memory --list \\\nRUN:         2>&1 | %FileCheck %s --check-prefix WARNMEMORY\nWARNMEMORY: warning:\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFTPM_PD_LIBS environment variable for swift-package-manager\nDESCRIPTION: This command sets the SWIFTPM_PD_LIBS environment variable to indicate where swift-package-manager can find the Package Description before installation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_23\n\nLANGUAGE: cmd\nCODE:\n```\nset SWIFTPM_PD_LIBS=S:\\b\\10\\pm\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Point Ranges with Indic_Conjunct_Break=Extend Property\nDESCRIPTION: This code snippet defines Unicode code point ranges that have the Indic_Conjunct_Break property value of 'Extend'. These characters include combining marks, diacritics, and modifiers that extend base characters in various scripts, including Indic scripts. The format lists each code point or range followed by the property (InCB) and its value (Extend).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_48\n\nLANGUAGE: text\nCODE:\n```\n# Indic_Conjunct_Break=Extend\n\n0300..036F    ; InCB; Extend\n0483..0487    ; InCB; Extend\n0488..0489    ; InCB; Extend\n0591..05BD    ; InCB; Extend\n05BF          ; InCB; Extend\n05C1..05C2    ; InCB; Extend\n05C4..05C5    ; InCB; Extend\n05C7          ; InCB; Extend\n0610..061A    ; InCB; Extend\n064B..065F    ; InCB; Extend\n0670          ; InCB; Extend\n06D6..06DC    ; InCB; Extend\n06DF..06E4    ; InCB; Extend\n06E7..06E8    ; InCB; Extend\n06EA..06ED    ; InCB; Extend\n0711          ; InCB; Extend\n0730..074A    ; InCB; Extend\n07A6..07B0    ; InCB; Extend\n07EB..07F3    ; InCB; Extend\n07FD          ; InCB; Extend\n0816..0819    ; InCB; Extend\n081B..0823    ; InCB; Extend\n0825..0827    ; InCB; Extend\n0829..082D    ; InCB; Extend\n0859..085B    ; InCB; Extend\n0897..089F    ; InCB; Extend\n08CA..08E1    ; InCB; Extend\n08E3..0902    ; InCB; Extend\n093A          ; InCB; Extend\n093C          ; InCB; Extend\n0941..0948    ; InCB; Extend\n0951..0957    ; InCB; Extend\n0962..0963    ; InCB; Extend\n0981          ; InCB; Extend\n09BC          ; InCB; Extend\n09BE          ; InCB; Extend\n09C1..09C4    ; InCB; Extend\n09D7          ; InCB; Extend\n09E2..09E3    ; InCB; Extend\n09FE          ; InCB; Extend\n0A01..0A02    ; InCB; Extend\n0A3C          ; InCB; Extend\n0A41..0A42    ; InCB; Extend\n0A47..0A48    ; InCB; Extend\n0A4B..0A4D    ; InCB; Extend\n0A51          ; InCB; Extend\n0A70..0A71    ; InCB; Extend\n0A75          ; InCB; Extend\n0A81..0A82    ; InCB; Extend\n0ABC          ; InCB; Extend\n0AC1..0AC5    ; InCB; Extend\n0AC7..0AC8    ; InCB; Extend\n0AE2..0AE3    ; InCB; Extend\n0AFA..0AFF    ; InCB; Extend\n0B01          ; InCB; Extend\n0B3C          ; InCB; Extend\n0B3E          ; InCB; Extend\n0B3F          ; InCB; Extend\n0B41..0B44    ; InCB; Extend\n0B55..0B56    ; InCB; Extend\n0B57          ; InCB; Extend\n0B62..0B63    ; InCB; Extend\n0B82          ; InCB; Extend\n0BBE          ; InCB; Extend\n0BC0          ; InCB; Extend\n0BCD          ; InCB; Extend\n0BD7          ; InCB; Extend\n0C00          ; InCB; Extend\n0C04          ; InCB; Extend\n0C3C          ; InCB; Extend\n0C3E..0C40    ; InCB; Extend\n0C46..0C48    ; InCB; Extend\n0C4A..0C4C    ; InCB; Extend\n0C55..0C56    ; InCB; Extend\n0C62..0C63    ; InCB; Extend\n0C81          ; InCB; Extend\n0CBC          ; InCB; Extend\n0CBF          ; InCB; Extend\n0CC0          ; InCB; Extend\n0CC2          ; InCB; Extend\n0CC6          ; InCB; Extend\n0CC7..0CC8    ; InCB; Extend\n0CCA..0CCB    ; InCB; Extend\n0CCC..0CCD    ; InCB; Extend\n0CD5..0CD6    ; InCB; Extend\n0CE2..0CE3    ; InCB; Extend\n0D00..0D01    ; InCB; Extend\n0D3B..0D3C    ; InCB; Extend\n0D3E          ; InCB; Extend\n0D41..0D44    ; InCB; Extend\n0D57          ; InCB; Extend\n0D62..0D63    ; InCB; Extend\n0D81          ; InCB; Extend\n0DCA          ; InCB; Extend\n0DCF          ; InCB; Extend\n0DD2..0DD4    ; InCB; Extend\n0DD6          ; InCB; Extend\n0DDF          ; InCB; Extend\n0E31          ; InCB; Extend\n0E34..0E3A    ; InCB; Extend\n0E47..0E4E    ; InCB; Extend\n0EB1          ; InCB; Extend\n0EB4..0EBC    ; InCB; Extend\n0EC8..0ECE    ; InCB; Extend\n0F18..0F19    ; InCB; Extend\n0F35          ; InCB; Extend\n0F37          ; InCB; Extend\n0F39          ; InCB; Extend\n0F71..0F7E    ; InCB; Extend\n0F80..0F84    ; InCB; Extend\n0F86..0F87    ; InCB; Extend\n0F8D..0F97    ; InCB; Extend\n0F99..0FBC    ; InCB; Extend\n0FC6          ; InCB; Extend\n102D..1030    ; InCB; Extend\n1032..1037    ; InCB; Extend\n1039..103A    ; InCB; Extend\n103D..103E    ; InCB; Extend\n1058..1059    ; InCB; Extend\n105E..1060    ; InCB; Extend\n1071..1074    ; InCB; Extend\n1082          ; InCB; Extend\n1085..1086    ; InCB; Extend\n108D          ; InCB; Extend\n109D          ; InCB; Extend\n135D..135F    ; InCB; Extend\n1712..1714    ; InCB; Extend\n1715          ; InCB; Extend\n1732..1733    ; InCB; Extend\n1734          ; InCB; Extend\n1752..1753    ; InCB; Extend\n1772..1773    ; InCB; Extend\n17B4..17B5    ; InCB; Extend\n17B7..17BD    ; InCB; Extend\n17C6          ; InCB; Extend\n17C9..17D3    ; InCB; Extend\n17DD          ; InCB; Extend\n180B..180D    ; InCB; Extend\n180F          ; InCB; Extend\n1885..1886    ; InCB; Extend\n18A9          ; InCB; Extend\n1920..1922    ; InCB; Extend\n1927..1928    ; InCB; Extend\n1932          ; InCB; Extend\n1939..193B    ; InCB; Extend\n1A17..1A18    ; InCB; Extend\n1A1B          ; InCB; Extend\n1A56          ; InCB; Extend\n1A58..1A5E    ; InCB; Extend\n1A60          ; InCB; Extend\n1A62          ; InCB; Extend\n1A65..1A6C    ; InCB; Extend\n1A73..1A7C    ; InCB; Extend\n1A7F          ; InCB; Extend\n1AB0..1ABD    ; InCB; Extend\n1ABE          ; InCB; Extend\n1ABF..1ACE    ; InCB; Extend\n1B00..1B03    ; InCB; Extend\n1B34          ; InCB; Extend\n1B35          ; InCB; Extend\n1B36..1B3A    ; InCB; Extend\n1B3B          ; InCB; Extend\n1B3C          ; InCB; Extend\n1B3D          ; InCB; Extend\n1B42          ; InCB; Extend\n1B43..1B44    ; InCB; Extend\n1B6B..1B73    ; InCB; Extend\n1B80..1B81    ; InCB; Extend\n1BA2..1BA5    ; InCB; Extend\n1BA8..1BA9    ; InCB; Extend\n1BAA          ; InCB; Extend\n1BAB..1BAD    ; InCB; Extend\n1BE6          ; InCB; Extend\n1BE8..1BE9    ; InCB; Extend\n1BED          ; InCB; Extend\n1BEF..1BF1    ; InCB; Extend\n1BF2..1BF3    ; InCB; Extend\n1C2C..1C33    ; InCB; Extend\n1C36..1C37    ; InCB; Extend\n1CD0..1CD2    ; InCB; Extend\n1CD4..1CE0    ; InCB; Extend\n1CE2..1CE8    ; InCB; Extend\n1CED          ; InCB; Extend\n1CF4          ; InCB; Extend\n1CF8..1CF9    ; InCB; Extend\n1DC0..1DFF    ; InCB; Extend\n200D          ; InCB; Extend\n20D0..20DC    ; InCB; Extend\n20DD..20E0    ; InCB; Extend\n20E1          ; InCB; Extend\n20E2..20E4    ; InCB; Extend\n20E5..20F0    ; InCB; Extend\n2CEF..2CF1    ; InCB; Extend\n2D7F          ; InCB; Extend\n2DE0..2DFF    ; InCB; Extend\n302A..302D    ; InCB; Extend\n302E..302F    ; InCB; Extend\n3099..309A    ; InCB; Extend\nA66F          ; InCB; Extend\nA670..A672    ; InCB; Extend\nA674..A67D    ; InCB; Extend\nA69E..A69F    ; InCB; Extend\nA6F0..A6F1    ; InCB; Extend\nA802          ; InCB; Extend\nA806          ; InCB; Extend\nA80B          ; InCB; Extend\nA825..A826    ; InCB; Extend\nA82C          ; InCB; Extend\nA8C4..A8C5    ; InCB; Extend\nA8E0..A8F1    ; InCB; Extend\nA8FF          ; InCB; Extend\nA926..A92D    ; InCB; Extend\nA947..A951    ; InCB; Extend\nA953          ; InCB; Extend\nA980..A982    ; InCB; Extend\nA9B3          ; InCB; Extend\nA9B6..A9B9    ; InCB; Extend\nA9BC..A9BD    ; InCB; Extend\nA9C0          ; InCB; Extend\nA9E5          ; InCB; Extend\nAA29..AA2E    ; InCB; Extend\nAA31..AA32    ; InCB; Extend\nAA35..AA36    ; InCB; Extend\nAA43          ; InCB; Extend\nAA4C          ; InCB; Extend\nAA7C          ; InCB; Extend\nAAB0          ; InCB; Extend\nAAB2..AAB4    ; InCB; Extend\nAAB7..AAB8    ; InCB; Extend\nAABE..AABF    ; InCB; Extend\nAAC1          ; InCB; Extend\nAAEC..AAED    ; InCB; Extend\nAAF6          ; InCB; Extend\nABE5          ; InCB; Extend\nABE8          ; InCB; Extend\nABED          ; InCB; Extend\nFB1E          ; InCB; Extend\nFE00..FE0F    ; InCB; Extend\nFE20..FE2F    ; InCB; Extend\nFF9E..FF9F    ; InCB; Extend\n101FD         ; InCB; Extend\n102E0         ; InCB; Extend\n10376..1037A  ; InCB; Extend\n10A01..10A03  ; InCB; Extend\n10A05..10A06  ; InCB; Extend\n10A0C..10A0F  ; InCB; Extend\n10A38..10A3A  ; InCB; Extend\n10A3F         ; InCB; Extend\n10AE5..10AE6  ; InCB; Extend\n10D24..10D27  ; InCB; Extend\n10D69..10D6D  ; InCB; Extend\n10EAB..10EAC  ; InCB; Extend\n10EFC..10EFF  ; InCB; Extend\n10F46..10F50  ; InCB; Extend\n10F82..10F85  ; InCB; Extend\n11001         ; InCB; Extend\n11038..11046  ; InCB; Extend\n11070         ; InCB; Extend\n11073..11074  ; InCB; Extend\n1107F..11081  ; InCB; Extend\n110B3..110B6  ; InCB; Extend\n110B9..110BA  ; InCB; Extend\n110C2         ; InCB; Extend\n11100..11102  ; InCB; Extend\n11127..1112B  ; InCB; Extend\n1112D..11134  ; InCB; Extend\n11173         ; InCB; Extend\n11180..11181  ; InCB; Extend\n111B6..111BE  ; InCB; Extend\n111C0         ; InCB; Extend\n111C9..111CC  ; InCB; Extend\n111CF         ; InCB; Extend\n1122F..11231  ; InCB; Extend\n11234         ; InCB; Extend\n11235         ; InCB; Extend\n11236..11237  ; InCB; Extend\n1123E         ; InCB; Extend\n11241         ; InCB; Extend\n112DF         ; InCB; Extend\n112E3..112EA  ; InCB; Extend\n11300..11301  ; InCB; Extend\n1133B..1133C  ; InCB; Extend\n1133E         ; InCB; Extend\n11340         ; InCB; Extend\n1134D         ; InCB; Extend\n11357         ; InCB; Extend\n11366..1136C  ; InCB; Extend\n11370..11374  ; InCB; Extend\n113B8         ; InCB; Extend\n113BB..113C0  ; InCB; Extend\n113C2         ; InCB; Extend\n113C5         ; InCB; Extend\n113C7..113C9  ; InCB; Extend\n113CE         ; InCB; Extend\n113CF         ; InCB; Extend\n113D0         ; InCB; Extend\n113D2         ; InCB; Extend\n113E1..113E2  ; InCB; Extend\n11438..1143F  ; InCB; Extend\n11442..11444  ; InCB; Extend\n11446         ; InCB; Extend\n1145E         ; InCB; Extend\n114B0         ; InCB; Extend\n114B3..114B8  ; InCB; Extend\n114BA         ; InCB; Extend\n114BD         ; InCB; Extend\n114BF..114C0  ; InCB; Extend\n114C2..114C3  ; InCB; Extend\n115AF         ; InCB; Extend\n115B2..115B5  ; InCB; Extend\n115BC..115BD  ; InCB; Extend\n115BF..115C0  ; InCB; Extend\n115DC..115DD  ; InCB; Extend\n11633..1163A  ; InCB; Extend\n1163D         ; InCB; Extend\n1163F..11640  ; InCB; Extend\n116AB         ; InCB; Extend\n116AD         ; InCB; Extend\n116B0..116B5  ; InCB; Extend\n116B6         ; InCB; Extend\n116B7         ; InCB; Extend\n1171D         ; InCB; Extend\n1171F         ; InCB; Extend\n11722..11725  ; InCB; Extend\n11727..1172B  ; InCB; Extend\n1182F..11837  ; InCB; Extend\n11839..1183A  ; InCB; Extend\n11930         ; InCB; Extend\n1193B..1193C  ; InCB; Extend\n1193D         ; InCB; Extend\n1193E         ; InCB; Extend\n11943         ; InCB; Extend\n119D4..119D7  ; InCB; Extend\n119DA..119DB  ; InCB; Extend\n119E0         ; InCB; Extend\n11A01..11A0A  ; InCB; Extend\n11A33..11A38  ; InCB; Extend\n11A3B..11A3E  ; InCB; Extend\n11A47         ; InCB; Extend\n11A51..11A56  ; InCB; Extend\n11A59..11A5B  ; InCB; Extend\n11A8A..11A96  ; InCB; Extend\n11A98..11A99  ; InCB; Extend\n```\n\n----------------------------------------\n\nTITLE: Consonant With Stacker Definitions\nDESCRIPTION: Defines codepoints for consonants that can form stacked ligatures with following consonants without requiring a virama.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_14\n\nLANGUAGE: Unicode\nCODE:\n```\n0CF1..0CF2    ; Consonant_With_Stacker # Lo   [2] KANNADA SIGN JIHVAMULIYA..KANNADA SIGN UPADHMANIYA\n1CF5..1CF6    ; Consonant_With_Stacker # Lo   [2] VEDIC SIGN JIHVAMULIYA..VEDIC SIGN UPADHMANIYA\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Structure with ReStructuredText in Swift\nDESCRIPTION: A ReStructuredText (RST) document that defines the table of contents for Swift language documentation. It uses the toctree directive to organize documentation sections including language features, implementation details, and ABI specifications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/contents.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _contents:\n\nContents\n========\n\n.. toctree::\n   :maxdepth: 1\n\n   Backtracing\n   Generics\n   StoredAndComputedVariables\n   SIL\n   OptimizationTips\n   ABI: TypeMetadata <ABI/TypeMetadata>\n   ABI: TypeLayout <ABI/TypeLayout>\n   ABI: Mangling <ABI/Mangling>\n\nMore ABI docs:\n\n* :download:`ABI/KeyPaths.md`\n* :download:`ABI/GenericSignature.md`\n```\n\n----------------------------------------\n\nTITLE: Installing Windows SDK Module Maps\nDESCRIPTION: Installs the necessary module map and API notes files to the specified data directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/clang/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(FILES\n  ucrt.modulemap\n  vcruntime.apinotes\n  vcruntime.modulemap\n  winsdk.modulemap\n  DESTINATION ${CMAKE_INSTALL_DATAROOTDIR})\n```\n\n----------------------------------------\n\nTITLE: Querying Instruction Creation/Removal Delta per Pass in Swift Counters DB\nDESCRIPTION: This SQL query identifies the net change (creation or removal) in the number of instructions per optimization transformation (pass). It sums the `Delta` for module-level instruction counters (`C.counter = 'inst'`, `C.kind = 'module'`), grouped by transformation (`C.Transform`), and sorts the results by the absolute magnitude of the change (`abs(sum(C.Delta))`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\n# Sort by biggest changes \nselect C.Transform, sum(C.Delta)\nfrom Counters C where C.counter = 'inst' and C.kind = 'module'\ngroup by C.Transform\norder by abs(sum(C.Delta));\n```\n\n----------------------------------------\n\nTITLE: Defining Compile Flags for Swift Backtrace in CMake\nDESCRIPTION: Sets up compilation flags for the swift-backtrace executable, including C++ interoperability mode, include paths, and feature flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/libexec/swift-backtrace/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(BACKTRACING_COMPILE_FLAGS\n  \"-cxx-interoperability-mode=default\"\n  \"-I${SWIFT_STDLIB_SOURCE_DIR}/public/RuntimeModule/modules\"\n  \"-Xcc;-I${SWIFT_SOURCE_DIR}/include\"\n  \"-Xcc;-I${CMAKE_BINARY_DIR}/include\"\n  \"-disable-upcoming-feature;MemberImportVisibility\")\n```\n\n----------------------------------------\n\nTITLE: Find USR Request Format in SourceKit\nDESCRIPTION: JSON schema for finding declarations by Unified Symbol Resolution (USR) in a previously opened module interface document.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>:       (UID) <source.request.editor.find_usr>\n    <key.usr>:           (string) // USR to look for.\n    <key.sourcefile>:    (string) // virtual name/path associated with the interface document\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Array Elements in C++\nDESCRIPTION: Shows how to mutate array elements using mutateElementAtIndex with a lambda function in C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_46\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Matrix-Swift.h\"\n\nvoid appendColumn(swift::Array<swift::Array<int>> &matrix, swift::Int value) {\n  for (auto rowIndex : matrix.indices()) {\n    elements.mutateElementAtIndex(rowIndex, [](auto &row) {\n      row.append(value);\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard Swift Volatile Library Build\nDESCRIPTION: Sets up the main Swift Volatile library build target with standard library flags and runtime link flags. Configures the library for installation as part of the stdlib component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Volatile/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swift_Volatile ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  Volatile.swift\n\n  SWIFT_COMPILE_FLAGS\n    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    -parse-stdlib\n  LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n\n  INSTALL_IN_COMPONENT stdlib\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Backtrace Directory Inclusion\nDESCRIPTION: Conditional CMake configuration that adds the swift-backtrace subdirectory only when SWIFT_ENABLE_BACKTRACING is enabled. Currently implemented for macOS platform only.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/libexec/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_ENABLE_BACKTRACING)\n  add_subdirectory(swift-backtrace)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Illustrating Full Loop Unroll with ARC in SIL\nDESCRIPTION: This snippet shows the result of completely unrolling a loop in SIL, with reference count operations for each iteration explicitly shown. It demonstrates how pairings between retains and releases across loop iterations can be identified for compiler optimizations. The code helps explain the process of eliminating redundant reference count pairs during loop transformations and is used in the justification for ARCLoopHoisting. The snippet continues to focus on %x as the referenced object, using retain, release, and SIL basic block conventions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_3\n\nLANGUAGE: SIL\nCODE:\n```\nbb0:\\n  # Loop Iteration 0\\n  retain %x\\n  apply %f(%x)\\n  apply %f(%x)\\n  release %x                   (4)\\n\\n  # Loop Iteration 1\\n  retain %x                    (5)\\n  apply %f(%x)\\n  apply %f(%x)\\n  release %x                   (6)\\n\\n  # Loop Iteration 2\\n  retain %x                    (7)\\n  apply %f(%x)\\n  apply %f(%x)\\n  release %x\\n\\n  return ...\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Concurrency Module with CMake\nDESCRIPTION: This CMake configuration defines the build process for the Swift Concurrency module. It specifies all source files (including C++, Swift, and generated files), compiler flags, dependencies, and installation directives required to build the Swift concurrency runtime library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Concurrency/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(InternalShims)\n\ngyb_expand(TaskGroup+addTask.swift.gyb TaskGroup+addTask.swift)\ngyb_expand(Task+startSynchronously.swift.gyb Task+startSynchronously.swift)\n\nadd_library(swift_Concurrency\n  Actor.cpp\n  AsyncLet.cpp\n  AsyncStream.cpp\n  Clock.cpp\n  ConcurrencyHooks.cpp\n  EmbeddedSupport.cpp\n  Error.cpp\n  ExecutorBridge.cpp\n  ExecutorImpl.cpp\n  ExecutorChecks.cpp\n  GlobalExecutor.cpp\n  Setup.cpp\n  Task.cpp\n  TaskAlloc.cpp\n  TaskGroup.cpp\n  TaskLocal.cpp\n  TaskStatus.cpp\n  ThreadingError.cpp\n  TracingSignpost.cpp\n  \"${PROJECT_SOURCE_DIR}/CompatibilityOverride/CompatibilityOverride.cpp\"\n  \"${PROJECT_SOURCE_DIR}/linker-support/magic-symbols-for-install-name.c\"\n  Actor.swift\n  AsyncCompactMapSequence.swift\n  AsyncDropFirstSequence.swift\n  AsyncDropWhileSequence.swift\n  AsyncFilterSequence.swift\n  AsyncFlatMapSequence.swift\n  AsyncIteratorProtocol.swift\n  AsyncLet.swift\n  AsyncMapSequence.swift\n  AsyncPrefixSequence.swift\n  AsyncPrefixWhileSequence.swift\n  AsyncSequence.swift\n  AsyncStream.swift\n  AsyncStreamBuffer.swift\n  AsyncThrowingCompactMapSequence.swift\n  AsyncThrowingDropWhileSequence.swift\n  AsyncThrowingFilterSequence.swift\n  AsyncThrowingFlatMapSequence.swift\n  AsyncThrowingMapSequence.swift\n  AsyncThrowingPrefixWhileSequence.swift\n  AsyncThrowingStream.swift\n  CheckedContinuation.swift\n  Clock.swift\n  ContinuousClock.swift\n  CooperativeExecutor.swift\n  Deque/_DequeBuffer.swift\n  Deque/_DequeBufferHeader.swift\n  Deque/_DequeSlot.swift\n  Deque/_UnsafeWrappedBuffer.swift\n  Deque/Compatibility.swift\n  Deque/Deque.swift\n  Deque/Deque+Codable.swift\n  Deque/Deque+Collection.swift\n  Deque/Deque+CustomDebugStringConvertible.swift\n  Deque/Deque+CustomReflectable.swift\n  Deque/Deque+CustomStringConvertible.swift\n  Deque/Deque+Equatable.swift\n  Deque/Deque+ExpressibleByArrayLiteral.swift\n  Deque/Deque+Extras.swift\n  Deque/Deque+Hashable.swift\n  Deque/Deque+Storage.swift\n  Deque/Deque+Testing.swift\n  Deque/Deque+UnsafeHandle.swift\n  Deque/UnsafeMutableBufferPointer+Utilities.swift\n  DiscardingTaskGroup.swift\n  DummyExecutor.swift\n  Errors.swift\n  Executor.swift\n  ExecutorAssertions.swift\n  ExecutorBridge.swift\n  GlobalActor.swift\n  GlobalConcurrentExecutor.swift\n  MainActor.swift\n  PartialAsyncTask.swift\n  PlatformExecutorDarwin.swift\n  PlatformExecutorLinux.swift\n  PlatformExecutorWindows.swift\n  PriorityQueue.swift\n  SourceCompatibilityShims.swift\n  SuspendingClock.swift\n  Task.swift\n  Task+PriorityEscalation.swift\n  Task+TaskExecutor.swift\n  TaskCancellation.swift\n  TaskGroup.swift\n  TaskGroup+Embedded.swift\n  TaskLocal.swift\n  TaskSleep.swift\n  TaskSleepDuration.swift\n  \"${CMAKE_CURRENT_BINARY_DIR}/TaskGroup+addTask.swift\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/Task+startSynchronously.swift\")\n\ninclude(${SwiftCore_CONCURRENCY_GLOBAL_EXECUTOR}.cmake)\ntarget_compile_definitions(swift_Concurrency PRIVATE\n  $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_TARGET_LIBRARY_NAME=swift_Concurrency>\n  # NOTE: VS2017 <15.8 would round clamp alignment to alignof(max_align_t) which\n  # was non-conformant. Indicate that we wish to use extended alignment.\n  $<$<AND:$<PLATFORM_ID:Windows>,$<COMPILE_LANGUAGE:C,CXX>>:-D_ENABLE_EXTENDED_ALIGNED_STORAGE=1>\n  $<$<COMPILE_LANGUAGE:C,CXX>:-D__STDC_WANT_LIB_EXT1__=1>)\ntarget_compile_options(swift_Concurrency PRIVATE\n  $<$<COMPILE_LANGUAGE:Swift>:-parse-stdlib>\n  # NOTE: do not remove until `IsolatedAny` is on by default in all supported\n  # compilers.\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-enable-experimental-feature IsolatedAny>\"\n  # NOTE: enable the async frame pointer on Darwin to faciliate debugging.\n  $<$<AND:$<PLATFORM_ID:Darwin>,$<COMPILE_LANGUAGE:C,CXX>>:-fswift-async-fp=always>\n  \"$<$<AND:$<PLATFORM_ID:Darwin>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xfrontend -swift-async-frame-pointer=always>\"\n  \"$<$<AND:$<BOOL:${BUILD_SHARED_LIBS}>,$<COMPILE_LANGUAGE:Swift>>:SHELL:-Xcc -Dswift_Concurrency_EXPORTS>\")\ntarget_include_directories(swift_Concurrency PRIVATE\n  # FIXME: Use of `swift/Runtime/...`, `swift/ABI/...`, and `swift/Demangling/...`\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/include\"\n  # FIXME: grant access to `runtime/CMakeConfig.h` which should be available\n  # through the swiftRuntime target.\n  \"${PROJECT_BINARY_DIR}/include\")\ntarget_link_libraries(swift_Concurrency PRIVATE\n  swiftShims\n  swiftConcurrencyInternalShims\n  $<$<BOOL:${BUILD_SHARED_LIBS}>:swiftThreading>\n  $<$<PLATFORM_ID:Windows>:Synchronization>\n  $<$<PLATFORM_ID:Windows>:mincore>\n  # Link to the runtime that we are just building.\n  swiftCore)\nset_target_properties(swift_Concurrency PROPERTIES\n  Swift_MODULE_NAME _Concurrency\n  LINKER_LANGUAGE CXX)\n\ninstall(TARGETS swift_Concurrency\n  EXPORT SwiftCoreTargets\n  COMPONENT SwiftCore_runtime\n  ARCHIVE DESTINATION \"${SwiftCore_INSTALL_LIBDIR}\"\n  LIBRARY DESTINATION \"${SwiftCore_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nemit_swift_interface(swift_Concurrency)\ninstall_swift_interface(swift_Concurrency)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Glagolitic Script\nDESCRIPTION: Defines the Unicode code point ranges for the Glagolitic script, categorizing characters by their types (L&, Mn) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_34\n\nLANGUAGE: Unicode\nCODE:\n```\n2C00..2C5F    ; Glagolitic # L&  [96] GLAGOLITIC CAPITAL LETTER AZU..GLAGOLITIC SMALL LETTER CAUDATE CHRIVI\n1E000..1E006  ; Glagolitic # Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE\n1E008..1E018  ; Glagolitic # Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU\n1E01B..1E021  ; Glagolitic # Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI\n1E023..1E024  ; Glagolitic # Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS\n1E026..1E02A  ; Glagolitic # Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA\n\n# Total code points: 134\n```\n\n----------------------------------------\n\nTITLE: Unicode Common Script Character Mappings\nDESCRIPTION: Defines Unicode code points for the Common script category including punctuation marks, mathematical symbols, and specialized notation characters. Each line maps a code point or range to its corresponding character description and general category.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\nFE48          ; Common # Pe       PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET\nFE49..FE4C    ; Common # Po   [4] DASHED OVERLINE..DOUBLE WAVY OVERLINE\nFE4D..FE4F    ; Common # Pc   [3] DASHED LOW LINE..WAVY LOW LINE\nFE50..FE52    ; Common # Po   [3] SMALL COMMA..SMALL FULL STOP\n# ... additional mappings omitted for brevity ...\n1D7C2         ; Common # L&  [25] MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA\n1D7C3         ; Common # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftOnoneSupport for Windows in CMake\nDESCRIPTION: Handles special case for Windows builds in debug mode, creating an empty import library to ensure proper linking when building programs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(WINDOWS IN_LIST SWIFT_SDKS)\n  # When building in Debug mode, the standard library provides the symbols that\n  # we need and as such SwiftOnoneSupport does not need to provide any exported\n  # interfaces.  This results in the import library being elided.  However,\n  # we explicitly link against the SwiftOnoneSupport library when building\n  # programs in Debug mode, and need the import library to be generated even if\n  # nothing is exported.  Because we will still generate the DLL, create an\n  # empty import library.\n  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def\n    \"LIBRARY swiftSwiftOnoneSupport\\n\"\n    \"EXPORTS\\n\")\n  foreach(architecture ${SWIFT_SDK_WINDOWS_ARCHITECTURES})\n    target_sources(swiftSwiftOnoneSupport-windows-${architecture} PRIVATE\n      ${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def)\n    set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/swiftSwiftOnoneSupport.def\n      PROPERTIES HEADER_FILE_ONLY TRUE)\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Musl Modulemap in CMake\nDESCRIPTION: Sets up custom commands to copy Musl-specific modulemap and header files to the appropriate build directories. Handles both static and dynamic library builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(sdk ${SWIFT_SDKS})\n  if(NOT \"${sdk}\" STREQUAL \"LINUX_STATIC\")\n    continue()\n  endif()\n\n  set(musl_modulemap \"musl.modulemap\")\n  set(musl_header \"SwiftMusl.h\")\n\n  foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES})\n    set(arch_subdir \"${SWIFT_SDK_${sdk}_LIB_SUBDIR}/${arch}\")\n    set(module_dir \"${SWIFTLIB_DIR}/${arch_subdir}\")\n    set(module_dir_static \"${SWIFTSTATICLIB_DIR}/${arch_subdir}\")\n\n    set(musl_modulemap_out \"${module_dir}/${musl_modulemap}\")\n    set(musl_modulemap_out_static \"${module_dir_static}/${musl_modulemap}\")\n    set(musl_header_out \"${module_dir}/${musl_header}\")\n    set(musl_header_out_static \"${module_dir_static}/${musl_header}\")\n\n    add_custom_command_target(\n      copy_musl_modulemap\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"make_directory\" ${module_dir}\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy\"\n          ${CMAKE_CURRENT_LIST_DIR}/${musl_modulemap}\n          ${musl_modulemap_out}\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy\"\n          ${CMAKE_CURRENT_LIST_DIR}/${musl_header}\n          ${musl_header_out}\n      OUTPUT ${musl_modulemap_out} ${musl_header_out}\n      COMMENT \"Copying Musl modulemap to resources\")\n\n    list(APPEND musl_modulemap_target_list ${copy_musl_modulemap})\n\n    # ... (additional code for static library builds)\n  endforeach()\nendforeach()\nadd_custom_target(musl_modulemap DEPENDS ${musl_modulemap_target_list})\nset_property(TARGET musl_modulemap PROPERTY FOLDER \"Miscellaneous\")\nadd_dependencies(sdk-overlay musl_modulemap)\n```\n\n----------------------------------------\n\nTITLE: Basic SourceKit CMake Setup\nDESCRIPTION: Initial CMake configuration including module path setup and standalone build prevention.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckSymbolExists)\n\nlist(APPEND CMAKE_MODULE_PATH\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/modules\")\n\nif(CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)\n  message(SEND_ERROR \"SourceKit cannot be built standalone\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows SDK Settings\nDESCRIPTION: Sets up SDK configuration for Windows builds using MSVC toolchain. Configures host variant and architecture settings specific to Windows builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_72\n\nLANGUAGE: cmake\nCODE:\n```\nelseif(\"${SWIFT_HOST_VARIANT_SDK}\" STREQUAL \"WINDOWS\")\n  set(SWIFT_HOST_VARIANT \"windows\" CACHE STRING\n      \"Deployment OS for Swift host tools (the compiler) [windows].\")\n\n  configure_sdk_windows(\"Windows\" \"msvc\" \"${SWIFT_HOST_VARIANT_ARCH}\")\n  set(SWIFT_PRIMARY_VARIANT_SDK_default  \"${SWIFT_HOST_VARIANT_SDK}\")\n  set(SWIFT_PRIMARY_VARIANT_ARCH_default \"${SWIFT_HOST_VARIANT_ARCH}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Tibetan Script\nDESCRIPTION: This code block defines the Unicode code point ranges for the Tibetan script. It lists character ranges with their Unicode categories and character names, covering syllables, marks, digits, signs, and letters. The block contains a total of 207 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_17\n\nLANGUAGE: Unicode\nCODE:\n```\n0F00          ; Tibetan # Lo       TIBETAN SYLLABLE OM\n0F01..0F03    ; Tibetan # So   [3] TIBETAN MARK GTER YIG MGO TRUNCATED A..TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA\n0F04..0F12    ; Tibetan # Po  [15] TIBETAN MARK INITIAL YIG MGO MDUN MA..TIBETAN MARK RGYA GRAM SHAD\n0F13          ; Tibetan # So       TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN\n0F14          ; Tibetan # Po       TIBETAN MARK GTER TSHEG\n0F15..0F17    ; Tibetan # So   [3] TIBETAN LOGOTYPE SIGN CHAD RTAGS..TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS\n0F18..0F19    ; Tibetan # Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS\n0F1A..0F1F    ; Tibetan # So   [6] TIBETAN SIGN RDEL DKAR GCIG..TIBETAN SIGN RDEL DKAR RDEL NAG\n0F20..0F29    ; Tibetan # Nd  [10] TIBETAN DIGIT ZERO..TIBETAN DIGIT NINE\n0F2A..0F33    ; Tibetan # No  [10] TIBETAN DIGIT HALF ONE..TIBETAN DIGIT HALF ZERO\n0F34          ; Tibetan # So       TIBETAN MARK BSDUS RTAGS\n0F35          ; Tibetan # Mn       TIBETAN MARK NGAS BZUNG NYI ZLA\n0F36          ; Tibetan # So       TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN\n0F37          ; Tibetan # Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS\n0F38          ; Tibetan # So       TIBETAN MARK CHE MGO\n0F39          ; Tibetan # Mn       TIBETAN MARK TSA -PHRU\n0F3A          ; Tibetan # Ps       TIBETAN MARK GUG RTAGS GYON\n0F3B          ; Tibetan # Pe       TIBETAN MARK GUG RTAGS GYAS\n0F3C          ; Tibetan # Ps       TIBETAN MARK ANG KHANG GYON\n0F3D          ; Tibetan # Pe       TIBETAN MARK ANG KHANG GYAS\n0F3E..0F3F    ; Tibetan # Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES\n0F40..0F47    ; Tibetan # Lo   [8] TIBETAN LETTER KA..TIBETAN LETTER JA\n0F49..0F6C    ; Tibetan # Lo  [36] TIBETAN LETTER NYA..TIBETAN LETTER RRA\n0F71..0F7E    ; Tibetan # Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO\n0F7F          ; Tibetan # Mc       TIBETAN SIGN RNAM BCAD\n0F80..0F84    ; Tibetan # Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA\n0F85          ; Tibetan # Po       TIBETAN MARK PALUTA\n0F86..0F87    ; Tibetan # Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS\n0F88..0F8C    ; Tibetan # Lo   [5] TIBETAN SIGN LCE TSA CAN..TIBETAN SIGN INVERTED MCHU CAN\n0F8D..0F97    ; Tibetan # Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA\n0F99..0FBC    ; Tibetan # Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA\n0FBE..0FC5    ; Tibetan # So   [8] TIBETAN KU RU KHA..TIBETAN SYMBOL RDO RJE\n0FC6          ; Tibetan # Mn       TIBETAN SYMBOL PADMA GDAN\n0FC7..0FCC    ; Tibetan # So   [6] TIBETAN SYMBOL RDO RJE RGYA GRAM..TIBETAN SYMBOL NOR BU BZHI -KHYIL\n0FCE..0FCF    ; Tibetan # So   [2] TIBETAN SIGN RDEL NAG RDEL DKAR..TIBETAN SIGN RDEL NAG GSUM\n0FD0..0FD4    ; Tibetan # Po   [5] TIBETAN MARK BSKA- SHOG GI MGO RGYAN..TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA\n0FD9..0FDA    ; Tibetan # Po   [2] TIBETAN MARK LEADING MCHAN RTAGS..TIBETAN MARK TRAILING MCHAN RTAGS\n\n# Total code points: 207\n```\n\n----------------------------------------\n\nTITLE: Configuring MacOS Deployment Target for Swift Backtrace in CMake\nDESCRIPTION: Sets the minimum MacOS deployment target to 10.15 to ensure compatibility with @rpath usage and some Swift features. Adjusts the target if the current setting is lower than 10.15.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/libexec/swift-backtrace/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_DARWIN_DEPLOYMENT_VERSION_OSX VERSION_LESS \"10.15\")\n  set(osx_deployment_target \"10.15\")\nelse()\n  set(osx_deployment_target \"${SWIFT_DARWIN_DEPLOYMENT_VERSION_OSX}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Source Inclusion for SourceKit Library in CMake\nDESCRIPTION: Adds platform-specific source files to the sourcekitdAPI library based on the availability of XPC on Apple platforms or the use of in-process library configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/lib/API/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE AND HAVE_XPC_H)\n  target_sources(sourcekitdAPI PRIVATE\n    sourcekitdAPI-XPC.cpp)\nelseif(SWIFT_SOURCEKIT_USE_INPROC_LIBRARY)\n  target_sources(sourcekitdAPI PRIVATE\n    sourcekitdAPI-InProc.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Info Compiler Arguments for Swift in CMake\nDESCRIPTION: Defines compiler options for building Swift in debug or debuginfo mode without LTO (Link Time Optimization). These flags are cached for reuse.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_49\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_DEBUGINFO_NON_LTO_ARGS \"-g\" CACHE STRING\n    \"Compiler options to use when building the compiler in debug or debuginfo mode. These do not apply when linking with LTO\")\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Module Properties\nDESCRIPTION: Configures the Swift module name property for the Regex Parser library to '_RegexParser'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Supplemental/StringProcessing/_RegexParser/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(swift_RegexParser PROPERTIES\n  Swift_MODULE_NAME _RegexParser)\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Demangling Compile Flags in CMake\nDESCRIPTION: Defines a set of compilation flags for the Swift demangling library, including ABI checks, old mangling support, and type printing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Demangling/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_demangling_compile_flags\n  LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING=1\n  SWIFT_SUPPORT_OLD_MANGLING=1\n  SWIFT_STDLIB_HAS_TYPE_PRINTING=1)\n```\n\n----------------------------------------\n\nTITLE: Appending to Global SWIFT_BUILDTREE_EXPORTS Property in CMake\nDESCRIPTION: This snippet appears to be the end of a CMake function. It appends a variable `${name}` to the global CMake property `SWIFT_BUILDTREE_EXPORTS`. This property likely tracks components or targets that should be exported as part of the Swift build tree.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\n  set_property(GLOBAL APPEND PROPERTY SWIFT_BUILDTREE_EXPORTS ${name})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Declaring Swift Macros and Variables\nDESCRIPTION: Defines a series of macro-like variables with different integer types. These variables are declared with get-only access.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\nvar FOO_MACRO_2: Int32 { get }\nvar FOO_MACRO_3: Int32 { get }\nvar FOO_MACRO_4: UInt32 { get }\nvar FOO_MACRO_5: UInt64 { get }\nvar FOO_MACRO_6: typedef_int_t { get }\nvar FOO_MACRO_7: typedef_int_t { get }\nvar FOO_MACRO_8: Int8 { get }\nvar FOO_MACRO_9: Int32 { get }\nvar FOO_MACRO_10: Int16 { get }\nvar FOO_MACRO_11: Int { get }\nvar FOO_MACRO_OR: Int32 { get }\nvar FOO_MACRO_AND: Int32 { get }\nvar FOO_MACRO_BITWIDTH: UInt64 { get }\nvar FOO_MACRO_SIGNED: Int32 { get }\nvar FOO_MACRO_REDEF_1: Int32 { get }\nvar FOO_MACRO_REDEF_2: Int32 { get }\n```\n\n----------------------------------------\n\nTITLE: Installing Tools in Docker Container for Swift Debugging\nDESCRIPTION: Commands to install additional tools like vim in the Docker container used for Swift compiler debugging. These commands run as root to allow system-level package installation in the container.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -u 0:0 -it lsan-reproducer bash\n$ apt update\n$ apt install vim\n```\n\n----------------------------------------\n\nTITLE: Adding Observation Source Directory in CMake\nDESCRIPTION: Adds the Observation library source directory to the CMake build system. This directive tells CMake to process the CMakeLists.txt file in the Sources/Observation directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Observation/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Sources/Observation)\n```\n\n----------------------------------------\n\nTITLE: Allocating Stack Memory for Value Packs using alloc_pack in SIL\nDESCRIPTION: The `alloc_pack` instruction allocates uninitialized memory on the stack for a value pack of the specified pack type. It returns the address of the allocated memory. This instruction adheres to stack discipline and must be paired with a corresponding `dealloc_pack` instruction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_1\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'alloc_pack' sil-type\n\n%1 = alloc_pack $Pack{Int, Float, repeat each T}\n// %1 has type $*Pack{Int, Float, repeat each T}\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows SDK Overlay in CMake\nDESCRIPTION: Installs Windows-specific modulemaps and API notes as part of the SDK overlay. This includes UCRT, VCRuntime, and WinSDK modulemaps, which are essential for Swift's interoperability with Windows libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(WINDOWS IN_LIST SWIFT_SDKS)\n  swift_install_in_component(FILES\n      ucrt.modulemap\n      vcruntime.apinotes\n      vcruntime.modulemap\n      winsdk.modulemap\n    DESTINATION \"share\"\n    COMPONENT sdk-overlay)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Extended Character Range Definitions\nDESCRIPTION: Defines Unicode code point ranges for characters with the 'Extend' property. Each line specifies either a single code point or a range of code points, followed by the character type (Mn, Mc, Me, etc.) and a description of the character or range.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n1732..1733    ; Extend # Mn   [2] HANUNOO VOWEL SIGN I..HANUNOO VOWEL SIGN U\n1734          ; Extend # Mc       HANUNOO SIGN PAMUDPOD\n1752..1753    ; Extend # Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U\n```\n\n----------------------------------------\n\nTITLE: Encoding Non-Escaping Closure Thunks in Swift SIL (BNF)\nDESCRIPTION: Shows the '[without_actually_escaping]' attribute, indicating a thunk function wrapping closures that are not truly escaping. Used by the Swift compiler for internal conversion, ensuring type-correctness without altering closure semantics. No dependencies. Marks thunks generated for the non-escaping-to-escaping adaptation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_4\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[without_actually_escaping]'\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Sundanese Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Sundanese script, including various signs, letters, consonant signs, vowel signs, digits, and punctuation marks. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_44\n\nLANGUAGE: Unicode\nCODE:\n```\n1B80..1B81    ; Sundanese # Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR\n1B82          ; Sundanese # Mc       SUNDANESE SIGN PANGWISAD\n1B83..1BA0    ; Sundanese # Lo  [30] SUNDANESE LETTER A..SUNDANESE LETTER HA\n1BA1          ; Sundanese # Mc       SUNDANESE CONSONANT SIGN PAMINGKAL\n1BA2..1BA5    ; Sundanese # Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU\n1BA6..1BA7    ; Sundanese # Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG\n1BA8..1BA9    ; Sundanese # Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG\n1BAA          ; Sundanese # Mc       SUNDANESE SIGN PAMAAEH\n1BAB..1BAD    ; Sundanese # Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA\n1BAE..1BAF    ; Sundanese # Lo   [2] SUNDANESE LETTER KHA..SUNDANESE LETTER SYA\n1BB0..1BB9    ; Sundanese # Nd  [10] SUNDANESE DIGIT ZERO..SUNDANESE DIGIT NINE\n1BBA..1BBF    ; Sundanese # Lo   [6] SUNDANESE AVAGRAHA..SUNDANESE LETTER FINAL M\n1CC0..1CC7    ; Sundanese # Po   [8] SUNDANESE PUNCTUATION BINDU SURYA..SUNDANESE PUNCTUATION BINDU BA SATANGA\n```\n\n----------------------------------------\n\nTITLE: Adding Clang Table Generation Dependencies in CMake\nDESCRIPTION: This snippet adds a dependency on Clang's table generation targets, ensuring that necessary Clang-generated header files are created before building the SourceKitSwiftLang library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/lib/SwiftLang/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(SourceKitSwiftLang clang-tablegen-targets)\n```\n\n----------------------------------------\n\nTITLE: Querying Largest Functions by Instruction Count at Pipeline End in Swift Counters DB\nDESCRIPTION: This SQL query identifies functions based on their final size at the end of the optimization pipeline. It uses subqueries similar to the previous example to find the initial (min `Id`) and final (max `Id`) instruction counts (`Old`) for each function using `function_history` data. The final results are ordered by the instruction count at the end (`MaxOld.Old`) in ascending order, placing the largest functions last.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nselect MinOld.Id, MinOld.Old, MaxOld.Id, MaxOld.Old, MinOld.Symbol\nfrom \n(\n  select C.Id, C.Old, C.Symbol\n  from Counters C\n  where C.counter = 'inst' and C.kind = 'function_history'\n  group by C.Symbol\n  having C.Id = max(Id)\n) as MaxOld,\n(\n  select C.Id, C.Old, C.Symbol\n  from Counters C\n  where C.counter = 'inst' and C.kind = 'function_history'\n  group by C.Symbol\n  having C.Id = min(Id)\n) as MinOld\nwhere MinOld.Symbol == MaxOld.Symbol\norder by MaxOld.Old;\n```\n\n----------------------------------------\n\nTITLE: Specifying Swift AST Bridge Source Files in CMake\nDESCRIPTION: This CMake command adds multiple C++ source files to the swiftAST target. These files implement bridging functionality for different aspects of Swift's AST, including declarations, expressions, types, and more.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/AST/Bridging/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftAST PRIVATE\n  ASTContextBridging.cpp\n  AvailabilityBridging.cpp\n  DeclAttributeBridging.cpp\n  DeclBridging.cpp\n  DeclContextBridging.cpp\n  DiagnosticsBridging.cpp\n  ExprBridging.cpp\n  GenericsBridging.cpp\n  MiscBridging.cpp\n  PatternBridging.cpp\n  PluginBridging.cpp\n  StmtBridging.cpp\n  TypeAttributeBridging.cpp\n  TypeReprBridging.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Compiler Threading Support to Swift Runtime\nDESCRIPTION: Adds the ThreadSanitizer source file from the Swift compiler source directory to the runtime library, allowing for thread-safety analysis features.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# FIXME: Refactor so that we're not pulling sources from the compiler files\ntarget_sources(swiftRuntime PRIVATE\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Threading/ThreadSanitizer.cpp\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Library Headers in CMake for Swift\nDESCRIPTION: This snippet handles the configuration of Remote library headers for Swift, with different behavior for Xcode and non-Xcode builds. It glob-recurses header files, sets their properties, and organizes them into a source group for Xcode projects.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/RemoteAST/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(XCODE)\n  file(GLOB_RECURSE REMOTE_LIB_HEADERS\n    ${SWIFT_SOURCE_DIR}/include/swift/Remote/*.h\n    ${SWIFT_SOURCE_DIR}/include/swift/Remote/*.def)\n\n  set_source_files_properties(${REMOTE_LIB_HEADERS}\n    PROPERTIES\n    HEADER_FILE_ONLY true)\n  source_group(\"libRemote Headers\" FILES ${REMOTE_LIB_HEADERS})\nelse()\n  set(REMOTE_LIB_HEADERS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generic Type Symbol Mapping\nDESCRIPTION: Mapping of mangled symbols for generic type specializations like arrays, optionals and dictionaries\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/simplified-manglings.txt#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n_TtGSPSi_ ---> UnsafePointer<Int>\n_TtGSpSi_ ---> UnsafeMutablePointer<Int>\n_TtGSaSS_ ---> [String]\n_TtGSqSS_ ---> String?\n_TtGSQSS_ ---> String!\n_TtGVs10DictionarySSSi_ ---> [String : Int]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Sharada Script\nDESCRIPTION: Defines the Unicode code point ranges for the Sharada script, covering letters, vowel signs, digits, and punctuation marks. The total count is 96 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_77\n\nLANGUAGE: text\nCODE:\n```\n11180..11181  ; Sharada # Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA\n11182         ; Sharada # Mc       SHARADA SIGN VISARGA\n11183..111B2  ; Sharada # Lo  [48] SHARADA LETTER A..SHARADA LETTER HA\n111B3..111B5  ; Sharada # Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II\n111B6..111BE  ; Sharada # Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O\n111BF..111C0  ; Sharada # Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA\n111C1..111C4  ; Sharada # Lo   [4] SHARADA SIGN AVAGRAHA..SHARADA OM\n111C5..111C8  ; Sharada # Po   [4] SHARADA DANDA..SHARADA SEPARATOR\n111C9..111CC  ; Sharada # Mn   [4] SHARADA SANDHI MARK..SHARADA EXTRA SHORT VOWEL MARK\n111CD         ; Sharada # Po       SHARADA SUTRA MARK\n111CE         ; Sharada # Mc       SHARADA VOWEL SIGN PRISHTHAMATRA E\n111CF         ; Sharada # Mn       SHARADA SIGN INVERTED CANDRABINDU\n111D0..111D9  ; Sharada # Nd  [10] SHARADA DIGIT ZERO..SHARADA DIGIT NINE\n111DA         ; Sharada # Lo       SHARADA EKAM\n111DB         ; Sharada # Po       SHARADA SIGN SIDDHAM\n111DC         ; Sharada # Lo       SHARADA HEADSTROKE\n111DD..111DF  ; Sharada # Po   [3] SHARADA CONTINUATION SIGN..SHARADA SECTION MARK-2\n\n# Total code points: 96\n```\n\n----------------------------------------\n\nTITLE: Unicode Format Characters Category Definitions\nDESCRIPTION: Defines code points for format control characters (Cf), including special markers, joiners, and directional formatting characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_22\n\nLANGUAGE: unicode\nCODE:\n```\n00AD          ; Cf #       SOFT HYPHEN\n0600..0605    ; Cf #   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n061C          ; Cf #       ARABIC LETTER MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Cypriot Script\nDESCRIPTION: Defines the Unicode code point ranges for the Cypriot script, categorizing characters by their types (Lo) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_29\n\nLANGUAGE: Unicode\nCODE:\n```\n10800..10805  ; Cypriot # Lo   [6] CYPRIOT SYLLABLE A..CYPRIOT SYLLABLE JA\n10808         ; Cypriot # Lo       CYPRIOT SYLLABLE JO\n1080A..10835  ; Cypriot # Lo  [44] CYPRIOT SYLLABLE KA..CYPRIOT SYLLABLE WO\n10837..10838  ; Cypriot # Lo   [2] CYPRIOT SYLLABLE XA..CYPRIOT SYLLABLE XE\n1083C         ; Cypriot # Lo       CYPRIOT SYLLABLE ZA\n1083F         ; Cypriot # Lo       CYPRIOT SYLLABLE ZO\n\n# Total code points: 55\n```\n\n----------------------------------------\n\nTITLE: Installing swiftAndroid Library and Interface in CMake\nDESCRIPTION: Configures the installation of the swiftAndroid library, generates and installs its Swift interface, and embeds a manifest.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/Android/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS swiftAndroid\n  ARCHIVE DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  LIBRARY DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nemit_swift_interface(swiftAndroid)\ninstall_swift_interface(swiftAndroid)\n\nembed_manifest(swiftAndroid)\n```\n\n----------------------------------------\n\nTITLE: Configuring SourceKit Swift Language Tests in CMake\nDESCRIPTION: Sets up unit tests for SourceKit Swift language functionality by adding test files, linking required libraries, and defining compilation parameters. The tests are only built when not matching Darwin embedded variants. Includes test files for cursor info, closing, and editing functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SourceKit/SwiftLang/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SWIFT_HOST_VARIANT MATCHES \"${SWIFT_DARWIN_EMBEDDED_VARIANTS}\")\n  add_swift_unittest(SourceKitSwiftLangTests\n    CursorInfoTest.cpp\n    CloseTest.cpp\n    EditingTest.cpp\n    )\n  target_link_libraries(SourceKitSwiftLangTests PRIVATE SourceKitSwiftLang)\n  target_compile_definitions(SourceKitSwiftLangTests PRIVATE\n    SWIFTLIB_DIR=\\\"${SWIFTLIB_DIR}\\\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Scan Unit Tests with CMake\nDESCRIPTION: Creates and configures a unit test target for Swift scanning functionality. Links required Swift libraries and sets up compilation definitions. The test includes multiple source files for testing scanning features, fixtures, printing, and module dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/DependencyScan/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_unittest(swiftScanTests\n  ScanFixture.cpp\n  Features.cpp\n  PrintTarget.cpp\n  ModuleDeps.cpp)\n\ntarget_link_libraries(swiftScanTests\n  PRIVATE\n    swiftFrontend\n    swiftDependencyScan\n    libSwiftScan)\n\ntarget_compile_definitions(swiftScanTests PRIVATE\n  SWIFTLIB_DIR=\\\"${SWIFTLIB_DIR}\\\")\n```\n\n----------------------------------------\n\nTITLE: Setting up Android-specific C library\nDESCRIPTION: Configures an Android-specific C library for heap operations when building for Android platform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (ANDROID)\n  add_library(AndroidCLib STATIC\n    Sources/AndroidCLib/heap.c)\n  target_include_directories(AndroidCLib PUBLIC\n    Sources/AndroidCLib/include)\n  set_property(TARGET AndroidCLib PROPERTY POSITION_INDEPENDENT_CODE ON)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Ol Chiki Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Ol Chiki script, including digits, letters, modifier letters, and punctuation marks. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_46\n\nLANGUAGE: Unicode\nCODE:\n```\n1C50..1C59    ; Ol_Chiki # Nd  [10] OL CHIKI DIGIT ZERO..OL CHIKI DIGIT NINE\n1C5A..1C77    ; Ol_Chiki # Lo  [30] OL CHIKI LETTER LA..OL CHIKI LETTER OH\n1C78..1C7D    ; Ol_Chiki # Lm   [6] OL CHIKI MU TTUDDAG..OL CHIKI AHAD\n1C7E..1C7F    ; Ol_Chiki # Po   [2] OL CHIKI PUNCTUATION MUCAAD..OL CHIKI PUNCTUATION DOUBLE MUCAAD\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Mode for Emacs in CMake Configuration\nDESCRIPTION: Installs the 'swift-mode.el' file in the Emacs site-lisp directory as part of the editor-integration component. This adds Swift language support to Emacs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nswift_install_in_component(FILES swift-mode.el\n                           DESTINATION \"share/emacs/site-lisp\"\n                           COMPONENT editor-integration)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Installing Swift Remote Mirror Headers with CMake\nDESCRIPTION: Sets up a list of Swift Remote Mirror header files and configures their installation path using CMake. The headers are installed to 'include/swift/SwiftRemoteMirror' directory as part of the 'swift-remote-mirror-headers' component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/include/swift/SwiftRemoteMirror/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_remote_mirror_headers)\nlist(APPEND swift_remote_mirror_headers\n       MemoryReaderInterface.h\n       Platform.h\n       SwiftRemoteMirror.h\n       SwiftRemoteMirrorTypes.h\n       module.modulemap)\nswift_install_in_component(FILES\n                             ${swift_remote_mirror_headers}\n                           DESTINATION\n                             \"include/swift/SwiftRemoteMirror\"\n                           COMPONENT\n                             swift-remote-mirror-headers)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Block for Telugu Script\nDESCRIPTION: Lists Unicode code points for Telugu script characters with their character types. Includes vowels, consonants, signs, and numeric symbols covering 100 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_11\n\nLANGUAGE: Unicode\nCODE:\n```\n0C00          ; Telugu # Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE\n0C01..0C03    ; Telugu # Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA\n0C04          ; Telugu # Mn       TELUGU SIGN COMBINING ANUSVARA ABOVE\n0C05..0C0C    ; Telugu # Lo   [8] TELUGU LETTER A..TELUGU LETTER VOCALIC L\n0C0E..0C10    ; Telugu # Lo   [3] TELUGU LETTER E..TELUGU LETTER AI\n0C12..0C28    ; Telugu # Lo  [23] TELUGU LETTER O..TELUGU LETTER NA\n0C2A..0C39    ; Telugu # Lo  [16] TELUGU LETTER PA..TELUGU LETTER HA\n0C3C          ; Telugu # Mn       TELUGU SIGN NUKTA\n0C3D          ; Telugu # Lo       TELUGU SIGN AVAGRAHA\n0C3E..0C40    ; Telugu # Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II\n0C41..0C44    ; Telugu # Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR\n0C46..0C48    ; Telugu # Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI\n0C4A..0C4D    ; Telugu # Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA\n0C55..0C56    ; Telugu # Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK\n0C58..0C5A    ; Telugu # Lo   [3] TELUGU LETTER TSA..TELUGU LETTER RRRA\n0C5D          ; Telugu # Lo       TELUGU LETTER NAKAARA POLLU\n0C60..0C61    ; Telugu # Lo   [2] TELUGU LETTER VOCALIC RR..TELUGU LETTER VOCALIC LL\n0C62..0C63    ; Telugu # Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL\n0C66..0C6F    ; Telugu # Nd  [10] TELUGU DIGIT ZERO..TELUGU DIGIT NINE\n0C77          ; Telugu # Po       TELUGU SIGN SIDDHAM\n0C78..0C7E    ; Telugu # No   [7] TELUGU FRACTION DIGIT ZERO FOR ODD POWERS OF FOUR..TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR\n0C7F          ; Telugu # So       TELUGU SIGN TUUMU\n\n# Total code points: 100\n```\n\n----------------------------------------\n\nTITLE: Cross Repository Testing - Single PR\nDESCRIPTION: Example of testing with a single cross-repository pull request.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nPlease test with following pull request:\nhttps://github.com/swiftlang/swift/pull/4574\n\n@swift-ci Please test Linux platform\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Dictionary and Comparison Operator Mangling\nDESCRIPTION: Swift symbol mangling for dictionary operations and comparison operators. These examples show how Swift encodes dictionary index comparisons and extension methods for collection types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_11\n\nLANGUAGE: Swift\nCODE:\n```\n_T0s10DictionaryV3t17E6Index2V1loiSbAEyxq__G_AGtFZ ---> static (extension in t17):Swift.Dictionary.Index2.< infix((extension in t17):[A : B].Index2, (extension in t17):[A : B].Index2) -> Swift.Bool\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$Ss10DictionaryV3t17E6Index2V1loiySbAEyxq__G_AGtFZ ---> static (extension in t17):Swift.Dictionary.Index2.< infix((extension in t17):[A : B].Index2, (extension in t17):[A : B].Index2) -> Swift.Bool\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Swift Frontend Tests in CMake\nDESCRIPTION: Specifies library dependencies for the SwiftFrontendTests target. It links against the swiftFrontend library and notes a circular dependency with swiftAST.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Frontend/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(SwiftFrontendTests\n  PRIVATE\n    swiftFrontend\n    # FIXME: Circular dependencies (AST <-> Parse)\n    swiftAST)\n```\n\n----------------------------------------\n\nTITLE: Building Swift Option Static Library in CMake\nDESCRIPTION: Defines and configures the swiftOption static library, adding source files and linking dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Option/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftOption STATIC\n  Options.cpp\n  SanitizerOptions.cpp)\nadd_dependencies(swiftOption\n  SwiftOptions)\ntarget_link_libraries(swiftOption PRIVATE\n  swiftBasic)\n```\n\n----------------------------------------\n\nTITLE: Defining Hangul Syllable LVT Unicode Ranges\nDESCRIPTION: This snippet defines Unicode code point ranges for Hangul syllables classified as LVT (Leading consonant, Vowel, Trailing consonant). Each line specifies a range containing exactly 27 consecutive code points, with their character descriptions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_14\n\nLANGUAGE: Unicode\nCODE:\n```\nBA8D..BAA7    ; LVT # Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH\nBAA9..BAC3    ; LVT # Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH\nBAC5..BADF    ; LVT # Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH\nBAE1..BAFB    ; LVT # Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH\nBAFD..BB17    ; LVT # Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH\nBB19..BB33    ; LVT # Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH\nBB35..BB4F    ; LVT # Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH\nBB51..BB6B    ; LVT # Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH\nBB6D..BB87    ; LVT # Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH\nBB89..BBA3    ; LVT # Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH\nBBA5..BBBF    ; LVT # Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH\nBBC1..BBDB    ; LVT # Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH\nBBDD..BBF7    ; LVT # Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH\nBBF9..BC13    ; LVT # Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH\nBC15..BC2F    ; LVT # Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH\nBC31..BC4B    ; LVT # Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH\nBC4D..BC67    ; LVT # Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH\nBC69..BC83    ; LVT # Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH\nBC85..BC9F    ; LVT # Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH\nBCA1..BCBB    ; LVT # Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH\nBCBD..BCD7    ; LVT # Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH\nBCD9..BCF3    ; LVT # Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH\nBCF5..BD0F    ; LVT # Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH\nBD11..BD2B    ; LVT # Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH\nBD2D..BD47    ; LVT # Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH\nBD49..BD63    ; LVT # Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH\nBD65..BD7F    ; LVT # Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH\nBD81..BD9B    ; LVT # Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH\nBD9D..BDB7    ; LVT # Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH\nBDB9..BDD3    ; LVT # Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH\nBDD5..BDEF    ; LVT # Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH\nBDF1..BE0B    ; LVT # Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH\nBE0D..BE27    ; LVT # Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH\nBE29..BE43    ; LVT # Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH\nBE45..BE5F    ; LVT # Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH\nBE61..BE7B    ; LVT # Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH\nBE7D..BE97    ; LVT # Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH\nBE99..BEB3    ; LVT # Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH\nBEB5..BECF    ; LVT # Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH\nBED1..BEEB    ; LVT # Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH\nBEED..BF07    ; LVT # Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH\nBF09..BF23    ; LVT # Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH\nBF25..BF3F    ; LVT # Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH\nBF41..BF5B    ; LVT # Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH\nBF5D..BF77    ; LVT # Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH\nBF79..BF93    ; LVT # Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH\nBF95..BFAF    ; LVT # Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH\nBFB1..BFCB    ; LVT # Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH\nBFCD..BFE7    ; LVT # Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH\nBFE9..C003    ; LVT # Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH\nC005..C01F    ; LVT # Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH\nC021..C03B    ; LVT # Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH\nC03D..C057    ; LVT # Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH\nC059..C073    ; LVT # Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH\nC075..C08F    ; LVT # Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH\nC091..C0AB    ; LVT # Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH\nC0AD..C0C7    ; LVT # Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH\nC0C9..C0E3    ; LVT # Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH\nC0E5..C0FF    ; LVT # Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH\nC101..C11B    ; LVT # Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH\nC11D..C137    ; LVT # Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH\nC139..C153    ; LVT # Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH\nC155..C16F    ; LVT # Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH\nC171..C18B    ; LVT # Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH\nC18D..C1A7    ; LVT # Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH\nC1A9..C1C3    ; LVT # Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH\nC1C5..C1DF    ; LVT # Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH\nC1E1..C1FB    ; LVT # Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH\nC1FD..C217    ; LVT # Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH\nC219..C233    ; LVT # Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH\nC235..C24F    ; LVT # Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH\nC251..C26B    ; LVT # Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH\nC26D..C287    ; LVT # Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH\nC289..C2A3    ; LVT # Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH\nC2A5..C2BF    ; LVT # Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH\nC2C1..C2DB    ; LVT # Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH\nC2DD..C2F7    ; LVT # Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH\nC2F9..C313    ; LVT # Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH\nC315..C32F    ; LVT # Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH\nC331..C34B    ; LVT # Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH\nC34D..C367    ; LVT # Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH\nC369..C383    ; LVT # Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH\nC385..C39F    ; LVT # Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH\nC3A1..C3BB    ; LVT # Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH\nC3BD..C3D7    ; LVT # Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH\nC3D9..C3F3    ; LVT # Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH\nC3F5..C40F    ; LVT # Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH\nC411..C42B    ; LVT # Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH\nC42D..C447    ; LVT # Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH\nC449..C463    ; LVT # Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH\nC465..C47F    ; LVT # Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH\nC481..C49B    ; LVT # Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH\nC49D..C4B7    ; LVT # Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH\nC4B9..C4D3    ; LVT # Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH\nC4D5..C4EF    ; LVT # Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH\nC4F1..C50B    ; LVT # Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH\nC50D..C527    ; LVT # Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH\nC529..C543    ; LVT # Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH\nC545..C55F    ; LVT # Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH\nC561..C57B    ; LVT # Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH\nC57D..C597    ; LVT # Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH\nC599..C5B3    ; LVT # Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH\nC5B5..C5CF    ; LVT # Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH\nC5D1..C5EB    ; LVT # Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH\nC5ED..C607    ; LVT # Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH\nC609..C623    ; LVT # Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH\nC625..C63F    ; LVT # Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH\nC641..C65B    ; LVT # Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH\nC65D..C677    ; LVT # Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH\nC679..C693    ; LVT # Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH\nC695..C6AF    ; LVT # Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH\nC6B1..C6CB    ; LVT # Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH\nC6CD..C6E7    ; LVT # Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH\nC6E9..C703    ; LVT # Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH\nC705..C71F    ; LVT # Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH\nC721..C73B    ; LVT # Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH\nC73D..C757    ; LVT # Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH\nC759..C773    ; LVT # Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH\nC775..C78F    ; LVT # Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH\nC791..C7AB    ; LVT # Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH\nC7AD..C7C7    ; LVT # Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH\nC7C9..C7E3    ; LVT # Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH\nC7E5..C7FF    ; LVT # Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH\nC801..C81B    ; LVT # Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH\nC81D..C837    ; LVT # Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH\nC839..C853    ; LVT # Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH\nC855..C86F    ; LVT # Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH\nC871..C88B    ; LVT # Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH\nC88D..C8A7    ; LVT # Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH\nC8A9..C8C3    ; LVT # Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH\nC8C5..C8DF    ; LVT # Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH\nC8E1..C8FB    ; LVT # Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH\nC8FD..C917    ; LVT # Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH\nC919..C933    ; LVT # Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH\n```\n\n----------------------------------------\n\nTITLE: Illustrating Ownership Semantics in Swift SIL (OSSA)\nDESCRIPTION: This SIL snippet demonstrates Ownership SSA concepts within a function marked `[ossa]`. It shows a function `@stash_and_cast` taking an `@owned Klass` argument. It illustrates how values like `%kls1` and `%kls2` are defined and used, distinguishing between 'non-lifetime ending uses' (`copy_value`) and 'lifetime ending uses' (`store`, `upcast`, `return`). The comments highlight how OSSA tracks value lifetimes to prevent leaks and use-after-frees by ensuring consuming uses follow normal uses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_0\n\nLANGUAGE: sil\nCODE:\n```\nsil @stash_and_cast : $@convention(thin) (@owned Klass) -> @owned SuperKlass {\nbb0(%kls1 : @owned $Klass): // Definition of %kls1\n\n  // \"Normal Use\" kls1.\n  // Definition of %kls2.\n  %kls2 = copy_value %kls1 : $Klass\n\n  // \"Consuming Use\" of %kls2 to store it into a global. Stores in ossa are\n  // consuming since memory is generally assumed to have \"owned\"\n  // semantics. After this instruction executes, we can no longer use %kls2\n  // without triggering an ownership violation.\n  store %kls2 to [init] %globalMem : $*Klass\n\n  // \"Consuming Use\" of %kls1.\n  // Definition of %kls1Casted.\n  %kls1Casted = upcast %kls1 : $Klass to $SuperKlass\n\n  // \"Consuming Use\" of %kls1Casted\n  return %kls1Casted : $SuperKlass\n}\n```\n\n----------------------------------------\n\nTITLE: Building swift-inspect on Linux using CMake\nDESCRIPTION: Command for building swift-inspect on Linux using CMake, with parameters to locate the necessary Swift modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/README.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake -B out -G Ninja -S . -D CMAKE_Swift_FLAGS=\"-Xcc -I$(git rev-parse --show-toplevel)/include/swift/SwiftRemoteMirror\"\n```\n\n----------------------------------------\n\nTITLE: Unicode Break Point Tests\nDESCRIPTION: Test cases demonstrating break point rules between different unicode character combinations, including Arabic numbers, Hangul characters, and various unicode modifiers. Each line shows expected break points (÷) and non-break points (×) between character sequences.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0600 × 0308 × 0A03 ÷  #  ÷ [0.2] ARABIC NUMBER SIGN (Prepend) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.1] GURMUKHI SIGN VISARGA (SpacingMark) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Removing Variables from __VaListBuilder in Swift\nDESCRIPTION: Several variables have been removed from the __VaListBuilder struct, including fpRegistersUsed, gpRegistersUsed, header, _countFPRegisters, _countGPRegisters, _fpRegisterWords, and _registerSaveWords.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Inputs/stability-stdlib-abi-without-asserts-arm64.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// Removed variables:\n__VaListBuilder.fpRegistersUsed\n__VaListBuilder.gpRegistersUsed\n__VaListBuilder.header\n_countFPRegisters\n_countGPRegisters\n_fpRegisterWords\n_registerSaveWords\n```\n\n----------------------------------------\n\nTITLE: Unicode Codepoint Definitions for Lowercase Letters\nDESCRIPTION: A comprehensive listing of Unicode codepoints and their corresponding lowercase letter definitions. Includes specialized characters from Coptic, Georgian, Cyrillic, and Latin scripts with their unique hexadecimal values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n2C76..2C7B    ; Ll #   [6] LATIN SMALL LETTER HALF H..LATIN LETTER SMALL CAPITAL TURNED E\n2C81          ; Ll #       COPTIC SMALL LETTER ALFA\n2C83          ; Ll #       COPTIC SMALL LETTER VIDA\n...\n```\n\n----------------------------------------\n\nTITLE: Hangul Syllable Unicode Mappings\nDESCRIPTION: Unicode mappings for Korean Hangul syllables with their hexadecimal code points. Each line represents a syllable with its Unicode value, type designation (LV), category (Lo), and corresponding Hangul syllable name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\nAC00          ; LV # Lo       HANGUL SYLLABLE GA\nAC1C          ; LV # Lo       HANGUL SYLLABLE GAE\nAC38          ; LV # Lo       HANGUL SYLLABLE GYA\nAC54          ; LV # Lo       HANGUL SYLLABLE GYAE\nAC70          ; LV # Lo       HANGUL SYLLABLE GEO\nAC8C          ; LV # Lo       HANGUL SYLLABLE GE\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Vowel_Dependent Character Ranges\nDESCRIPTION: Defines codepoint ranges for dependent vowel signs used in various scripts. Each line specifies either a single codepoint or a range of codepoints tagged with the Vowel_Dependent property. Includes metadata about the character class (Mn = Nonspacing Mark, Mc = Spacing Combining Mark, Lo = Other Letter).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_7\n\nLANGUAGE: unicode\nCODE:\n```\n1B3C          ; Vowel_Dependent # Mn       BALINESE VOWEL SIGN LA LENGA\n1B3D..1B41    ; Vowel_Dependent # Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG\n1B42          ; Vowel_Dependent # Mn       BALINESE VOWEL SIGN PEPET\n```\n\n----------------------------------------\n\nTITLE: Testing macOS Platform with Preset Configuration\nDESCRIPTION: Example of running a preset test on macOS platform with specific build configuration parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npreset=buildbot_incremental,tools=RA,stdlib=RD,smoketest=macosx,single-thread\n@swift-ci Please test with preset macOS\n```\n\n----------------------------------------\n\nTITLE: Glibc Modulemap Generation Loop\nDESCRIPTION: Iterates through supported SDKs and architectures to generate and install Glibc modulemaps and headers. Handles both dynamic and static library paths.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(sdk ${SWIFT_SDKS})\n  if(NOT \"${sdk}\" STREQUAL \"LINUX\" AND\n     NOT \"${sdk}\" STREQUAL \"FREEBSD\" AND\n     NOT \"${sdk}\" STREQUAL \"OPENBSD\" AND\n     NOT \"${sdk}\" STREQUAL \"CYGWIN\" AND\n     NOT \"${sdk}\" STREQUAL \"HAIKU\")\n    continue()\n  endif()\n  # ... rest of the glibc modulemap generation code ...\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring Use of Symlinks vs Copies in CMake\nDESCRIPTION: Defines a CMake option `SWIFT_USE_SYMLINKS` which defaults to TRUE on Unix-like hosts (`CMAKE_HOST_UNIX`). Based on this option, it sets the `SWIFT_COPY_OR_SYMLINK` and `SWIFT_COPY_OR_SYMLINK_DIR` variables to either 'create_symlink' or 'copy_if_different'/'copy_directory', controlling how build artifacts are placed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_27\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_USE_SYMLINKS \"Use symlinks instead of copying binaries\" ${CMAKE_HOST_UNIX})\nset(SWIFT_COPY_OR_SYMLINK \"copy_if_different\")\nset(SWIFT_COPY_OR_SYMLINK_DIR \"copy_directory\")\nif(SWIFT_USE_SYMLINKS)\n  set(SWIFT_COPY_OR_SYMLINK \"create_symlink\")\n  set(SWIFT_COPY_OR_SYMLINK_DIR \"create_symlink\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compatibility Packs Library Build in CMake\nDESCRIPTION: Configures the build settings for a static Swift Compatibility Packs library. Sets up include directories, compilation definitions, deployment versions for various Apple platforms, and links against compatibility threading library. Includes configuration for lipo target generation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CompatibilityPacks/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(library_name \"swiftCompatibilityPacks\")\n\ninclude_directories(\"include/\" \"${SWIFT_STDLIB_SOURCE_DIR}\")\n\nadd_compile_definitions(SWIFT_COMPATIBILITY_PACKS)\nadd_swift_target_library(\"${library_name}\" STATIC\n  Metadata.cpp\n\n  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}\n\n  C_COMPILE_FLAGS\n    ${CXX_COMPILE_FLAGS}\n    \"-D__STDC_WANT_LIB_EXT1__=1\"\n  LINK_FLAGS ${CXX_LINK_FLAGS}\n  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n\n  INSTALL_IN_COMPONENT compiler\n  INSTALL_WITH_SHARED)\n```\n\n----------------------------------------\n\nTITLE: Non-trivial Bitwise Movable Type Example\nDESCRIPTION: Shows a struct containing a class reference that is bitwise movable but not trivial. It requires retain/release operations but can be moved by copying bits if the original location is invalidated.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABIStabilityManifesto.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct ClassContainer {\n    let reference: SomeClass\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Object Library for WASM Format in Swift Image Registration\nDESCRIPTION: Adds a Swift target library for image registration using WebAssembly (WASM) object format. This configures the build with appropriate flags and settings for WASM target SDKs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftImageRegistrationObjectWASM\n                  OBJECT_LIBRARY IS_STDLIB IS_STDLIB_CORE\n                  SwiftRT-ELF-WASM.cpp\n                  C_COMPILE_FLAGS\n                    ${SWIFT_RUNTIME_CORE_CXX_FLAGS}\n                    ${swift_enable_backtracing}\n                  LINK_FLAGS ${SWIFT_RUNTIME_CORE_LINK_FLAGS}\n                  TARGET_SDKS ${WASM_SDKS}\n                  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n                  INSTALL_IN_COMPONENT none)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Standard Library Collection Unit Test Build\nDESCRIPTION: CMake configuration that sets up the swiftStdlibCollectionUnittest library target. It includes test source files, platform-specific module dependencies, compilation flags, and installation settings for the Swift standard library collection testing framework.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibCollectionUnittest/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_stdlib_unittest_compile_flags)\n\nadd_swift_target_library(swiftStdlibCollectionUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  # This file should be listed the first.  Module name is inferred from the\n  # filename.\n  StdlibCollectionUnittest.swift\n\n  CheckCollectionInstance.swift\n  CheckCollectionType.swift\n  CheckMutableCollectionType.swift\n  CheckRangeReplaceableCollectionType.swift\n  CheckRangeReplaceableSliceType.swift\n  CheckSequenceInstance.swift\n  CheckSequenceType.swift\n  COWLoggingArray.swift\n  LoggingWrappers.swift\n  MinimalCollections.swift\n  RangeSelection.swift\n  WriteBackMutableSlice.swift\n\n  SWIFT_MODULE_DEPENDS StdlibUnittest\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT\n  SWIFT_COMPILE_FLAGS ${swift_stdlib_unittest_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for Swift Core Runtime\nDESCRIPTION: Adds compile definitions based on the configured build options, enabling or disabling various features of the Swift runtime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_compile_definitions(\n  $<$<BOOL:${SwiftCore_ENABLE_OBJC_INTEROP}>:-DSWIFT_OBJC_INTEROP>\n  $<$<BOOL:${SwiftCore_ENABLE_LIBRARY_EVOLUTION}>:-DSWIFT_LIBRARY_EVOLUTION>\n  $<$<BOOL:${SwiftCore_ENABLE_CRASH_REPORTER_CLIENT}>:-DSWIFT_HAVE_CRASHREPORTERCLIENT>\n  $<$<BOOL:${SwiftCore_ENABLE_REFLECTION}>:-DSWIFT_ENABLE_REFLECTION>\n  $<$<BOOL:${SwiftCore_ENABLE_RUNTIME_FUNCTION_COUNTERS}>:-DSWIFT_ENABLE_RUNTIME_FUNCTION_COUNTERS>\n  $<$<BOOL:${SwiftCore_ENABLE_STDIN}>:-DSWIFT_STDLIB_HAS_STDIN> # core + stubs\n  $<$<BOOL:${SwiftCore_ENABLE_RUNTIME_OS_VERSIONING}>:-DSWIFT_RUNTIME_OS_VERSIONING> # core + stubs\n  $<$<BOOL:${SwiftCore_ENABLE_INTERNAL_CHECKS}>:-DINTERNAL_CHECKS_ENABLED> # core\n  $<$<BOOL:${SwiftCore_ENABLE_STATIC_PRINT}>:-DSWIFT_STDLIB_STATIC_PRINT> # core + concurrency\n  $<$<BOOL:${SwiftCore_ENABLE_UNICODE_DATA}>:-DSWIFT_STDLIB_ENABLE_UNICODE_DATA> # Stubs\n  $<$<BOOL:${SwiftCore_ENABLE_ENVIRONMENT}>:-DSWIFT_STDLIB_HAS_ENVIRON> # Concurrency, runtime, shims, platform overlay\n  $<$<BOOL:${SwiftCore_ENABLE_BACKDEPLOYMENT_SUPPORT}>:-DSWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT> # Concurrency, Compatibility override, magic symbols\n  $<$<BOOL:${SwiftCore_HAS_DARWIN_LIBMALLOC}>:-DSWIFT_STDLIB_HAS_DARWIN_LIBMALLOC> # Anything that includes include/swift/Runtime/Config.h\n  $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_THREADING_${SwiftCore_THREADING_PACKAGE}>\n  $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_RUNTIME_ENABLE_LEAK_CHECKER=$<BOOL:${SwiftCore_ENABLE_RUNTIME_LEAK_CHECKER}>>\n  $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_RUNTIME_CLOBBER_FREED_OBJECTS=$<BOOL:${SwiftCore_ENABLE_CLOBBER_FREED_OBJECTS}>>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Syntax Libraries in CMake\nDESCRIPTION: Sets up a list of swift-syntax libraries, configures their compilation options, and sets up installation rules for the libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/CompilerSwiftSyntax/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(compiler_swiftsyntax_libs\n  _CompilerSwiftSyntax\n  _CompilerSwiftIfConfig\n  _CompilerSwiftLexicalLookup\n  _CompilerSwiftOperators\n  _CompilerSwiftSyntaxBuilder\n  _CompilerSwiftParser\n  _CompilerSwiftParserDiagnostics\n  _CompilerSwiftCompilerPluginMessageHandling\n  _CompilerSwiftSyntaxMacroExpansion\n  _CompilerSwiftSyntaxMacros\n  _CompilerSwiftBasicFormat\n  _CompilerSwiftDiagnostics\n  _CompilerSwiftIDEUtils\n)\n\nforeach(lib ${compiler_swiftsyntax_libs})\n  target_compile_options(${lib} PRIVATE \"SHELL:-module-link-name ${lib}\")\nendforeach()\n\nswift_install_in_component(TARGETS ${compiler_swiftsyntax_libs}\n  ARCHIVE DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/host/compiler\" COMPONENT compiler-swift-syntax-lib\n  LIBRARY DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/host/compiler\" COMPONENT compiler-swift-syntax-lib\n  RUNTIME DESTINATION \"bin\" COMPONENT compiler-swift-syntax-lib)\nadd_dependencies(compiler-swift-syntax-lib ${compiler_swiftsyntax_libs})\n```\n\n----------------------------------------\n\nTITLE: Linking Swift Clang Importer Dependencies\nDESCRIPTION: Specifies the private and interface link dependencies for the swiftClangImporter library. This includes Swift AST, Parse, and various Clang and LLVM libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftClangImporter PRIVATE\n  swiftAST\n  swiftParse\n  clangTooling\n  LLVMBitstreamReader)\n\ntarget_link_libraries(swiftClangImporter INTERFACE\n  clangDependencyScanning)\n```\n\n----------------------------------------\n\nTITLE: Generating Options Table for SourceKitD Test\nDESCRIPTION: Sets up tablegen to generate option parsing definitions from an Options.td file, creating Options.inc and establishing a public tablegen target for the sourcekitd test options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LLVM_TARGET_DEFINITIONS Options.td)\nswift_tablegen(Options.inc -gen-opt-parser-defs)\nswift_add_public_tablegen_target(sourcekitdTestOptionsTableGen)\n```\n\n----------------------------------------\n\nTITLE: Configuring Crash Reporter Client for Swift Demangling in CMake\nDESCRIPTION: Conditionally adds the swiftDemanglingCR library target for crash reporter client support if enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Demangling/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SwiftCore_ENABLE_CRASH_REPORTER_CLIENT)\n  # We could likely pull the copy from the runtime sources\n  add_library(swiftDemanglingCR OBJECT\n    \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/CrashReporter.cpp\")\n  target_link_libraries(swiftDemanglingCR PRIVATE swiftShims)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Swift Libraries to Swift AST in CMake\nDESCRIPTION: Links the Swift AST library with other Swift libraries, including swiftBasic and swiftMarkup. It also conditionally links with swiftASTGen if SWIFT_BUILD_SWIFT_SYNTAX is enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/AST/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftAST\n  PUBLIC swiftBasic\n  PRIVATE swiftMarkup)\n\nif (SWIFT_BUILD_SWIFT_SYNTAX)\n  target_link_libraries(swiftAST\n    PRIVATE swiftASTGen)\nendif()\n\nset_swift_llvm_is_available(swiftAST)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Katakana Category Code Points\nDESCRIPTION: Lists Unicode code points classified as 'Katakana', which includes characters from the Japanese Katakana syllabary. These include basic characters, marks, small variants, and special Katakana symbols across various Unicode categories (Lo, Lm, Sk, etc).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode-data\nCODE:\n```\n3031..3035    ; Katakana # Lm   [5] VERTICAL KANA REPEAT MARK..VERTICAL KANA REPEAT MARK LOWER HALF\n309B..309C    ; Katakana # Sk   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n30A0          ; Katakana # Pd       KATAKANA-HIRAGANA DOUBLE HYPHEN\n30A1..30FA    ; Katakana # Lo  [90] KATAKANA LETTER SMALL A..KATAKANA LETTER VO\n30FC..30FE    ; Katakana # Lm   [3] KATAKANA-HIRAGANA PROLONGED SOUND MARK..KATAKANA VOICED ITERATION MARK\n30FF          ; Katakana # Lo       KATAKANA DIGRAPH KOTO\n31F0..31FF    ; Katakana # Lo  [16] KATAKANA LETTER SMALL KU..KATAKANA LETTER SMALL RO\n32D0..32FE    ; Katakana # So  [47] CIRCLED KATAKANA A..CIRCLED KATAKANA WO\n3300..3357    ; Katakana # So  [88] SQUARE APAATO..SQUARE WATTO\nFF66..FF6F    ; Katakana # Lo  [10] HALFWIDTH KATAKANA LETTER WO..HALFWIDTH KATAKANA LETTER SMALL TU\nFF70          ; Katakana # Lm       HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK\nFF71..FF9D    ; Katakana # Lo  [45] HALFWIDTH KATAKANA LETTER A..HALFWIDTH KATAKANA LETTER N\n1AFF0..1AFF3  ; Katakana # Lm   [4] KATAKANA LETTER MINNAN TONE-2..KATAKANA LETTER MINNAN TONE-5\n1AFF5..1AFFB  ; Katakana # Lm   [7] KATAKANA LETTER MINNAN TONE-7..KATAKANA LETTER MINNAN NASALIZED TONE-5\n1AFFD..1AFFE  ; Katakana # Lm   [2] KATAKANA LETTER MINNAN NASALIZED TONE-7..KATAKANA LETTER MINNAN NASALIZED TONE-8\n1B000         ; Katakana # Lo       KATAKANA LETTER ARCHAIC E\n1B120..1B122  ; Katakana # Lo   [3] KATAKANA LETTER ARCHAIC YI..KATAKANA LETTER ARCHAIC WU\n1B155         ; Katakana # Lo       KATAKANA LETTER SMALL KO\n1B164..1B167  ; Katakana # Lo   [4] KATAKANA LETTER SMALL WI..KATAKANA LETTER SMALL N\n\n# Total code points: 331\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol and Empty Class in Swift\nDESCRIPTION: Declares a Superproto protocol with a method lala and an empty class MyLittleCFType.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.command-line-include.printed.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol Superproto {\n  func lala()\n}\nclass MyLittleCFType {\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Tai Tham Script\nDESCRIPTION: Defines the Unicode code point ranges for the Tai Tham script, including letters, consonant signs, vowel signs, digits, and punctuation. This block contains 127 total code points across various character categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_55\n\nLANGUAGE: Unicode\nCODE:\n```\n1A20..1A54    ; Tai_Tham # Lo  [53] TAI THAM LETTER HIGH KA..TAI THAM LETTER GREAT SA\n1A55          ; Tai_Tham # Mc       TAI THAM CONSONANT SIGN MEDIAL RA\n1A56          ; Tai_Tham # Mn       TAI THAM CONSONANT SIGN MEDIAL LA\n1A57          ; Tai_Tham # Mc       TAI THAM CONSONANT SIGN LA TANG LAI\n1A58..1A5E    ; Tai_Tham # Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA\n1A60          ; Tai_Tham # Mn       TAI THAM SIGN SAKOT\n1A61          ; Tai_Tham # Mc       TAI THAM VOWEL SIGN A\n1A62          ; Tai_Tham # Mn       TAI THAM VOWEL SIGN MAI SAT\n1A63..1A64    ; Tai_Tham # Mc   [2] TAI THAM VOWEL SIGN AA..TAI THAM VOWEL SIGN TALL AA\n1A65..1A6C    ; Tai_Tham # Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW\n1A6D..1A72    ; Tai_Tham # Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI\n1A73..1A7C    ; Tai_Tham # Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN\n1A7F          ; Tai_Tham # Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT\n1A80..1A89    ; Tai_Tham # Nd  [10] TAI THAM HORA DIGIT ZERO..TAI THAM HORA DIGIT NINE\n1A90..1A99    ; Tai_Tham # Nd  [10] TAI THAM THAM DIGIT ZERO..TAI THAM THAM DIGIT NINE\n1AA0..1AA6    ; Tai_Tham # Po   [7] TAI THAM SIGN WIANG..TAI THAM SIGN REVERSED ROTATED RANA\n1AA7          ; Tai_Tham # Lm       TAI THAM SIGN MAI YAMOK\n1AA8..1AAD    ; Tai_Tham # Po   [6] TAI THAM SIGN KAAN..TAI THAM SIGN CAANG\n\n# Total code points: 127\n```\n\n----------------------------------------\n\nTITLE: Setting Windows SDK Environment Variables in CMake\nDESCRIPTION: Converts Windows environment variables to CMake paths for SDK locations and versions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/clang/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfile(TO_CMAKE_PATH \"$ENV{WindowsSdkDir}\" WindowsSdkDir)\nfile(TO_CMAKE_PATH \"$ENV{WindowsSDKVersion}\" WindowsSDKVersion)\nfile(TO_CMAKE_PATH \"$ENV{UniversalCRTSdkDir}\" UniversalCRTSdkDir)\nfile(TO_CMAKE_PATH \"$ENV{UCRTVersion}\" UCRTVersion)\nfile(TO_CMAKE_PATH \"$ENV{VCToolsInstallDir}\" VCToolsInstallDir)\n```\n\n----------------------------------------\n\nTITLE: Installing Swift API Notes for POSIX Compatibility\nDESCRIPTION: Installs API notes files for POSIX filesystem and spawn functionality. These files provide additional metadata to help Swift interface with these system APIs on Android.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/clang/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n  posix_filesystem.apinotes\n  spawn.apinotes\n  DESTINATION ${CMAKE_INSTALL_LIBDIR}/swift$<$<NOT:$<BOOL:${BUILD_SHARED_LIBS}>>:_static>/apinotes)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via Homebrew Bundle on macOS (sh)\nDESCRIPTION: Installs dependencies listed in a `Brewfile` (presumably located in the project's root or specified path) using the `brew bundle` command provided by Homebrew Bundle. This offers an alternative, declarative way to manage and install Homebrew-managed dependencies on macOS.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbrew bundle\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Regex Builder Library with CMake\nDESCRIPTION: Defines and configures the swiftRegexBuilder library target in CMake. Specifies source files, sets the Swift module name to 'RegexBuilder', and links required dependencies including RegexParser, StringProcessing and Core Swift libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Supplemental/StringProcessing/RegexBuilder/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(swiftRegexBuilder\n  CharacterClass.swift\n  Anchor.swift\n  Builder.swift\n  Algorithms.swift\n  Variadics.swift\n  DSL.swift)\n\nset_target_properties(swiftRegexBuilder PROPERTIES\n  Swift_MODULE_NAME RegexBuilder)\n\ntarget_link_libraries(swiftRegexBuilder PRIVATE\n  swift_RegexParser\n  swift_StringProcessing\n  swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Example of Documentation Request for a Swift File\nDESCRIPTION: Practical example of using sourcekitd-test to retrieve documentation from a specific Swift file, passing the file path as both the target and a compiler argument.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ sourcekitd-test -req=doc-info /path/to/file.swift -- /path/to/file.swift\n```\n\n----------------------------------------\n\nTITLE: Checking System Architecture on macOS (sh)\nDESCRIPTION: Executes the `uname -m` command to display the machine hardware architecture (e.g., arm64 for Apple Silicon or x86_64 for Intel). This is used to verify if the terminal environment itself is running natively or under Rosetta emulation on Apple Silicon Macs. A native environment is required for building Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nuname -m\n```\n\n----------------------------------------\n\nTITLE: Listing Removed Declarations in Swift API\nDESCRIPTION: This snippet enumerates various Swift declarations that have been removed from the API, including accessors, associated types, constructors, functions, and variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n/* Removed Decls */\ncake: Accessor GlobalVarChangedToLet.Set() has been removed\ncake: Accessor RemoveSetters.Value.Set() has been removed\ncake: Accessor RemoveSetters.subscript(_:).Set() has been removed\ncake: AssociatedType RequirementChanges.removedType has been removed\ncake: Constructor Somestruct2.init(_:) has been removed\ncake: Func C4.foo() has been removed\ncake: Func Int.IntEnhancer() has been removed\ncake: Func RequirementChanges.removedFunc() has been removed\ncake: Var RequirementChanges.removedVar has been removed\n```\n\n----------------------------------------\n\nTITLE: Debugging with LLDB Using Local Toolchain (Bash)\nDESCRIPTION: This snippet demonstrates how to run LLDB from a locally built Swift toolchain with the necessary environment variables set for debugging.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DevelopmentTips.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nDYLD_LIBRARY_PATH=/Library/Developer/Toolchains/swift-LOCAL-YYYY-MM-DD.xctoolchain/usr/lib/swift/macosx DYLD_FRAMEWORK_PATH=/Applications/Xcode.app/Contents/Developer/Library/Frameworks /Library/Developer/Toolchains/swift-LOCAL-YYYY-MM-DD.xctoolchain/usr/bin/lldb\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Linker Options in CMake\nDESCRIPTION: Sets Windows-specific linker options to treat warnings as errors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_link_options($<$<PLATFORM_ID:Windows>:LINKER:/WX>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift LLVM Support Object Library in CMake\nDESCRIPTION: Adds a Swift target library named 'swiftLLVMSupport' as an object library. It includes several source files and sets the installation component to 'never_install'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/LLVMSupport/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftLLVMSupport OBJECT_LIBRARY\n    ErrorHandling.cpp\n    Hashing.cpp\n    MemAlloc.cpp\n    SmallPtrSet.cpp\n    SmallVector.cpp\n    StringRef.cpp\n  INSTALL_IN_COMPONENT\n    never_install)\n```\n\n----------------------------------------\n\nTITLE: Configuring Optional Sources for SourceKit Library in CMake\nDESCRIPTION: Sets optional source files for the SourceKit library build. These files may be conditionally included based on platform-specific requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/lib/API/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LLVM_OPTIONAL_SOURCES\n  sourcekitdAPI-XPC.cpp\n  sourcekitdAPI-InProc.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Hangul Syllables\nDESCRIPTION: This snippet defines Unicode ranges for various Hangul syllables. Each range covers 27 consecutive code points and is categorized as LVT (Leading consonant, Vowel, Trailing consonant) characters. The ranges are specified using hexadecimal values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_13\n\nLANGUAGE: Unicode\nCODE:\n```\nAC01..AC1B    ; LVT # Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH\nAC1D..AC37    ; LVT # Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH\nAC39..AC53    ; LVT # Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH\nAC55..AC6F    ; LVT # Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH\nAC71..AC8B    ; LVT # Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH\nACA9..ACC3    ; LVT # Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH\nACC5..ACDF    ; LVT # Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH\nACE1..ACFB    ; LVT # Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH\nACFD..AD17    ; LVT # Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH\nAD19..AD33    ; LVT # Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Frontend Tool Unit Tests in CMake\nDESCRIPTION: Sets up the SwiftFrontendToolTests unit test target by specifying source files and linking required libraries. The test includes FrontendToolTests.cpp and ModuleLoadingTests.cpp files and links against the swiftFrontend and swiftFrontendTool libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/FrontendTool/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_unittest(SwiftFrontendToolTests\n  FrontendToolTests.cpp\n  ModuleLoadingTests.cpp)\n\ntarget_link_libraries(SwiftFrontendToolTests\n  PRIVATE\n    swiftFrontend\n    swiftFrontendTool)\n```\n\n----------------------------------------\n\nTITLE: Initializing Existential Metatypes in SIL\nDESCRIPTION: Creates metatype existential container containing conforming metatype.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_155\n\nLANGUAGE: sil\nCODE:\n```\n%1 = init_existential_metatype $0 : $@<rep> T.Type, $@<rep> P.Type\n```\n\n----------------------------------------\n\nTITLE: Unicode 2.0 Code Point Assignments\nDESCRIPTION: This snippet lists Unicode code points assigned in version 2.0.0 (July, 1996). It includes ranges for various characters, symbols, and private use areas.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n0591..05A1    ; 2.0 #  [17] HEBREW ACCENT ETNAHTA..HEBREW ACCENT PAZER\n05A3..05AF    ; 2.0 #  [13] HEBREW ACCENT MUNAH..HEBREW MARK MASORA CIRCLE\n05C4          ; 2.0 #       HEBREW MARK UPPER DOT\n0F00..0F47    ; 2.0 #  [72] TIBETAN SYLLABLE OM..TIBETAN LETTER JA\n0F49..0F69    ; 2.0 #  [33] TIBETAN LETTER NYA..TIBETAN LETTER KSSA\n0F71..0F8B    ; 2.0 #  [27] TIBETAN VOWEL SIGN AA..TIBETAN SIGN GRU MED RGYINGS\n0F90..0F95    ; 2.0 #   [6] TIBETAN SUBJOINED LETTER KA..TIBETAN SUBJOINED LETTER CA\n0F97          ; 2.0 #       TIBETAN SUBJOINED LETTER JA\n0F99..0FAD    ; 2.0 #  [21] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER WA\n0FB1..0FB7    ; 2.0 #   [7] TIBETAN SUBJOINED LETTER YA..TIBETAN SUBJOINED LETTER HA\n0FB9          ; 2.0 #       TIBETAN SUBJOINED LETTER KSSA\n1E9B          ; 2.0 #       LATIN SMALL LETTER LONG S WITH DOT ABOVE\n20AB          ; 2.0 #       DONG SIGN\nAC00..D7A3    ; 2.0 # [11172] HANGUL SYLLABLE GA..HANGUL SYLLABLE HIH\nD800..DFFF    ; 2.0 # [2048] <surrogate-D800>..<surrogate-DFFF>\n1FFFE..1FFFF  ; 2.0 #   [2] <noncharacter-1FFFE>..<noncharacter-1FFFF>\n2FFFE..2FFFF  ; 2.0 #   [2] <noncharacter-2FFFE>..<noncharacter-2FFFF>\n3FFFE..3FFFF  ; 2.0 #   [2] <noncharacter-3FFFE>..<noncharacter-3FFFF>\n4FFFE..4FFFF  ; 2.0 #   [2] <noncharacter-4FFFE>..<noncharacter-4FFFF>\n5FFFE..5FFFF  ; 2.0 #   [2] <noncharacter-5FFFE>..<noncharacter-5FFFF>\n6FFFE..6FFFF  ; 2.0 #   [2] <noncharacter-6FFFE>..<noncharacter-6FFFF>\n7FFFE..7FFFF  ; 2.0 #   [2] <noncharacter-7FFFE>..<noncharacter-7FFFF>\n8FFFE..8FFFF  ; 2.0 #   [2] <noncharacter-8FFFE>..<noncharacter-8FFFF>\n9FFFE..9FFFF  ; 2.0 #   [2] <noncharacter-9FFFE>..<noncharacter-9FFFF>\nAFFFE..AFFFF  ; 2.0 #   [2] <noncharacter-AFFFE>..<noncharacter-AFFFF>\nBFFFE..BFFFF  ; 2.0 #   [2] <noncharacter-BFFFE>..<noncharacter-BFFFF>\nCFFFE..CFFFF  ; 2.0 #   [2] <noncharacter-CFFFE>..<noncharacter-CFFFF>\nDFFFE..DFFFF  ; 2.0 #   [2] <noncharacter-DFFFE>..<noncharacter-DFFFF>\nEFFFE..EFFFF  ; 2.0 #   [2] <noncharacter-EFFFE>..<noncharacter-EFFFF>\nF0000..FFFFD  ; 2.0 # [65534] <private-use-F0000>..<private-use-FFFFD>\nFFFFE..FFFFF  ; 2.0 #   [2] <noncharacter-FFFFE>..<noncharacter-FFFFF>\n100000..10FFFD; 2.0 # [65534] <private-use-100000>..<private-use-10FFFD>\n10FFFE..10FFFF; 2.0 #   [2] <noncharacter-10FFFE>..<noncharacter-10FFFF>\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Characters to Numerical Value 40\nDESCRIPTION: Lists Unicode code points that represent the numerical value 40 across various writing systems and notations including Ethiopic, Circled Numbers, and CJK ideographs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_20\n\nLANGUAGE: plain\nCODE:\n```\n1375          ; 40.0 ; ; 40 # No       ETHIOPIC NUMBER FORTY\n324B          ; 40.0 ; ; 40 # No       CIRCLED NUMBER FORTY ON BLACK SQUARE\n32B5          ; 40.0 ; ; 40 # No       CIRCLED NUMBER FORTY\n534C          ; 40.0 ; ; 40 # Lo       CJK UNIFIED IDEOGRAPH-534C\n10113         ; 40.0 ; ; 40 # No       AEGEAN NUMBER FORTY\n102ED         ; 40.0 ; ; 40 # No       COPTIC EPACT NUMBER FORTY\n109CC         ; 40.0 ; ; 40 # No       MEROITIC CURSIVE NUMBER FORTY\n10E6C         ; 40.0 ; ; 40 # No       RUMI NUMBER FORTY\n1105E         ; 40.0 ; ; 40 # No       BRAHMI NUMBER FORTY\n111ED         ; 40.0 ; ; 40 # No       SINHALA ARCHAIC NUMBER FORTY\n118ED         ; 40.0 ; ; 40 # No       WARANG CITI NUMBER FORTY\n11C66         ; 40.0 ; ; 40 # No       BHAIKSUKI NUMBER FORTY\n12467         ; 40.0 ; ; 40 # Nl       CUNEIFORM NUMERIC SIGN ELAMITE FORTY\n1D36C         ; 40.0 ; ; 40 # No       COUNTING ROD TENS DIGIT FOUR\n1EC7D         ; 40.0 ; ; 40 # No       INDIC SIYAQ NUMBER FORTY\n1ED0D         ; 40.0 ; ; 40 # No       OTTOMAN SIYAQ NUMBER FORTY\n2098C         ; 40.0 ; ; 40 # Lo       CJK UNIFIED IDEOGRAPH-2098C\n2099C         ; 40.0 ; ; 40 # Lo       CJK UNIFIED IDEOGRAPH-2099C\n```\n\n----------------------------------------\n\nTITLE: Determining Linux Distribution for Linker Selection\nDESCRIPTION: Detects the Linux distribution name if running on a recent enough CMake version. This information is used to select appropriate default linkers for different distributions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_65\n\nLANGUAGE: cmake\nCODE:\n```\n# Check what linux distribution is being used.\n# This can be used to determine the default linker to use.\nif(CMAKE_VERSION VERSION_GREATER_EQUAL \"3.22\")\n  cmake_host_system_information(RESULT DISTRO_NAME  QUERY DISTRIB_PRETTY_NAME)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SIL Module Dependencies and Source Files in CMake\nDESCRIPTION: Defines the Swift Intermediate Language (SIL) module for the Swift compiler, specifying its dependencies on Basic and AST modules, and listing all the Swift source files that comprise the module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/SIL/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_compiler_module(SIL\n  DEPENDS\n    Basic\n    AST\n  SOURCES\n    ApplySite.swift\n    Argument.swift\n    ASTExtensions.swift\n    BasicBlock.swift\n    Builder.swift\n    ConstExpressionEvaluator.swift\n    DeclRef.swift\n    Effects.swift\n    ForwardingInstruction.swift\n    Function.swift\n    FunctionConvention.swift\n    GlobalVariable.swift\n    Instruction.swift\n    Linkage.swift\n    Location.swift\n    Operand.swift\n    Registration.swift\n    SILStage.swift\n    Type.swift\n    Value.swift\n    VTable.swift\n    WitnessTable.swift)\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata-Related Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for instantiation caches, specialized generic type metadata, and caching tokens.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= global 'MK'                 // instantiation cache associated with global\n\nglobal ::= global 'MJ'                 // noncanonical specialized generic type metadata instantiation cache associated with global\nglobal ::= global 'MN'                 // noncanonical specialized generic type metadata for global\nglobal ::= global 'Mz'                 // canonical specialized generic type metadata caching token\n\nglobal ::= global 'Mq'                 // global with a uniquing prefix\n```\n\n----------------------------------------\n\nTITLE: Add Swift Macro Library Function Definition in CMake\nDESCRIPTION: CMake function that creates and configures a new Swift macro library. Handles library creation, rpath settings, installation directories, and target properties. Takes library name and source files as parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Macros/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_swift_macro_library name)\n  set(ASML_SOURCES ${ARGN})\n\n  # Add the library.\n  add_pure_swift_host_library(${name} SHARED\n    PACKAGE_NAME Toolchain\n    ${ASML_SOURCES})\n\n  # If we don't have the Swift swift parser, bail out, because the above\n  # add_pure_swift_host_library did nothing.\n  if (NOT SWIFT_BUILD_SWIFT_SYNTAX)\n    return()\n  endif()\n\n  # Add rpath to 'lib/{platform}'\n  file(RELATIVE_PATH relpath_to_lib\n    \"${SWIFT_HOST_PLUGINS_DEST_DIR}\"\n    \"${CMAKE_LIBRARY_OUTPUT_DIRECTORY}\"\n  )\n  _set_pure_swift_link_flags(${name} \"${relpath_to_lib}\")\n\n  # Add rpath to 'lib/host'\n  if(SWIFT_HOST_VARIANT_SDK MATCHES \"LINUX|ANDROID|OPENBSD|FREEBSD\")\n    set_property(TARGET ${name}\n      APPEND PROPERTY INSTALL_RPATH \"$ORIGIN/..\")\n  endif()\n\n  # Install into the plugin directory.\n  set_target_properties(${name}\n    PROPERTIES\n      ARCHIVE_OUTPUT_DIRECTORY \"${SWIFT_HOST_PLUGINS_DEST_DIR}\"\n      LIBRARY_OUTPUT_DIRECTORY \"${SWIFT_HOST_PLUGINS_DEST_DIR}\"\n  )\n\n  set(destination_dir \"lib${LLVM_LIBDIR_SUFFIX}/swift/host/plugins\")\n\n  swift_install_in_component(TARGETS ${name}\n    RUNTIME\n      DESTINATION bin\n      COMPONENT compiler\n    LIBRARY\n      DESTINATION \"${destination_dir}\"\n      COMPONENT compiler\n    ARCHIVE\n      DESTINATION \"${destination_dir}\"\n      COMPONENT compiler)\n\n  # Export this macro plugin target.\n  set_property(GLOBAL APPEND PROPERTY SWIFT_MACRO_PLUGINS ${name})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift C++ Library Build Settings in CMake\nDESCRIPTION: CMake configuration that sets up the swiftCxx static library with specific compilation flags, source files, and deployment version requirements. It includes C++ interoperability settings and experimental features while explicitly disabling C++ standard library inclusion.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/../../cmake/modules)\ninclude(StdlibOptions)\n\nset(SWIFT_CXX_DEPS symlink_clang_headers)\nif(SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT)\n  list(APPEND SWIFT_CXX_DEPS copy-legacy-layouts)\nendif()\n\nadd_swift_target_library(swiftCxx STATIC NO_LINK_NAME IS_STDLIB IS_SWIFT_ONLY\n    CxxConvertibleToBool.swift\n    CxxConvertibleToCollection.swift\n    CxxDictionary.swift\n    CxxPair.swift\n    CxxOptional.swift\n    CxxSet.swift\n    CxxRandomAccessCollection.swift\n    CxxSequence.swift\n    CxxVector.swift\n    CxxSpan.swift\n    UnsafeCxxIterators.swift\n\n    SWIFT_COMPILE_FLAGS ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    -cxx-interoperability-mode=default\n    -enable-experimental-feature Span\n    -enable-experimental-feature BuiltinModule\n    -enable-experimental-feature AllowUnsafeAttribute\n    -strict-memory-safety\n    -Xcc -nostdinc++\n\n    DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n    DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n    DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n    DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n    DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n    DEPENDS ${SWIFT_CXX_DEPS}\n    MACCATALYST_BUILD_FLAVOR zippered\n    INSTALL_IN_COMPONENT compiler\n    INSTALL_WITH_SHARED)\n\nadd_subdirectory(libstdcxx)\nadd_subdirectory(std)\nadd_subdirectory(cxxshim)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Samaritan Script\nDESCRIPTION: Defines the Unicode code point ranges for the Samaritan script, including letters, marks, modifiers, vowel signs, and punctuation. This block contains 61 total code points across various character categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_59\n\nLANGUAGE: Unicode\nCODE:\n```\n0800..0815    ; Samaritan # Lo  [22] SAMARITAN LETTER ALAF..SAMARITAN LETTER TAAF\n0816..0819    ; Samaritan # Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH\n081A          ; Samaritan # Lm       SAMARITAN MODIFIER LETTER EPENTHETIC YUT\n081B..0823    ; Samaritan # Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A\n0824          ; Samaritan # Lm       SAMARITAN MODIFIER LETTER SHORT A\n0825..0827    ; Samaritan # Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U\n0828          ; Samaritan # Lm       SAMARITAN MODIFIER LETTER I\n0829..082D    ; Samaritan # Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA\n0830..083E    ; Samaritan # Po  [15] SAMARITAN PUNCTUATION NEQUDAA..SAMARITAN PUNCTUATION ANNAAU\n\n# Total code points: 61\n```\n\n----------------------------------------\n\nTITLE: Unicode 11.0 Code Point Assignments (June 2018)\nDESCRIPTION: Lists all Unicode code points that were newly assigned in Unicode version 11.0.0, released in June 2018. Includes 684 total code points across various scripts and symbol categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_12\n\nLANGUAGE: unicode\nCODE:\n```\n# Age=V11_0\n\n# Newly assigned in Unicode 11.0.0 (June, 2018)\n\n0560          ; 11.0 #       ARMENIAN SMALL LETTER TURNED AYB\n0588          ; 11.0 #       ARMENIAN SMALL LETTER YI WITH STROKE\n05EF          ; 11.0 #       HEBREW YOD TRIANGLE\n07FD..07FF    ; 11.0 #   [3] NKO DANTAYALAN..NKO TAMAN SIGN\n08D3          ; 11.0 #       ARABIC SMALL LOW WAW\n09FE          ; 11.0 #       BENGALI SANDHI MARK\n0A76          ; 11.0 #       GURMUKHI ABBREVIATION SIGN\n0C04          ; 11.0 #       TELUGU SIGN COMBINING ANUSVARA ABOVE\n0C84          ; 11.0 #       KANNADA SIGN SIDDHAM\n1878          ; 11.0 #       MONGOLIAN LETTER CHA WITH TWO DOTS\n1C90..1CBA    ; 11.0 #  [43] GEORGIAN MTAVRULI CAPITAL LETTER AN..GEORGIAN MTAVRULI CAPITAL LETTER AIN\n1CBD..1CBF    ; 11.0 #   [3] GEORGIAN MTAVRULI CAPITAL LETTER AEN..GEORGIAN MTAVRULI CAPITAL LETTER LABIAL SIGN\n2BBA..2BBC    ; 11.0 #   [3] OVERLAPPING WHITE SQUARES..OVERLAPPING BLACK SQUARES\n2BD3..2BEB    ; 11.0 #  [25] PLUTO FORM TWO..STAR WITH RIGHT HALF BLACK\n2BF0..2BFE    ; 11.0 #  [15] ERIS FORM ONE..REVERSED RIGHT ANGLE\n2E4A..2E4E    ; 11.0 #   [5] DOTTED SOLIDUS..PUNCTUS ELEVATUS MARK\n312F          ; 11.0 #       BOPOMOFO LETTER NN\n9FEB..9FEF    ; 11.0 #   [5] CJK UNIFIED IDEOGRAPH-9FEB..CJK UNIFIED IDEOGRAPH-9FEF\nA7AF          ; 11.0 #       LATIN LETTER SMALL CAPITAL Q\nA7B8..A7B9    ; 11.0 #   [2] LATIN CAPITAL LETTER U WITH STROKE..LATIN SMALL LETTER U WITH STROKE\nA8FE..A8FF    ; 11.0 #   [2] DEVANAGARI LETTER AY..DEVANAGARI VOWEL SIGN AY\n10A34..10A35  ; 11.0 #   [2] KHAROSHTHI LETTER TTTA..KHAROSHTHI LETTER VHA\n10A48         ; 11.0 #       KHAROSHTHI FRACTION ONE HALF\n10D00..10D27  ; 11.0 #  [40] HANIFI ROHINGYA LETTER A..HANIFI ROHINGYA SIGN TASSI\n10D30..10D39  ; 11.0 #  [10] HANIFI ROHINGYA DIGIT ZERO..HANIFI ROHINGYA DIGIT NINE\n10F00..10F27  ; 11.0 #  [40] OLD SOGDIAN LETTER ALEPH..OLD SOGDIAN LIGATURE AYIN-DALETH\n10F30..10F59  ; 11.0 #  [42] SOGDIAN LETTER ALEPH..SOGDIAN PUNCTUATION HALF CIRCLE WITH DOT\n110CD         ; 11.0 #       KAITHI NUMBER SIGN ABOVE\n11144..11146  ; 11.0 #   [3] CHAKMA LETTER LHAA..CHAKMA VOWEL SIGN EI\n1133B         ; 11.0 #       COMBINING BINDU BELOW\n1145E         ; 11.0 #       NEWA SANDHI MARK\n1171A         ; 11.0 #       AHOM LETTER ALTERNATE BA\n11800..1183B  ; 11.0 #  [60] DOGRA LETTER A..DOGRA ABBREVIATION SIGN\n11A9D         ; 11.0 #       SOYOMBO MARK PLUTA\n11D60..11D65  ; 11.0 #   [6] GUNJALA GONDI LETTER A..GUNJALA GONDI LETTER UU\n11D67..11D68  ; 11.0 #   [2] GUNJALA GONDI LETTER EE..GUNJALA GONDI LETTER AI\n11D6A..11D8E  ; 11.0 #  [37] GUNJALA GONDI LETTER OO..GUNJALA GONDI VOWEL SIGN UU\n11D90..11D91  ; 11.0 #   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI\n11D93..11D98  ; 11.0 #   [6] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI OM\n11DA0..11DA9  ; 11.0 #  [10] GUNJALA GONDI DIGIT ZERO..GUNJALA GONDI DIGIT NINE\n11EE0..11EF8  ; 11.0 #  [25] MAKASAR LETTER KA..MAKASAR END OF SECTION\n16E40..16E9A  ; 11.0 #  [91] MEDEFAIDRIN CAPITAL LETTER M..MEDEFAIDRIN EXCLAMATION OH\n187ED..187F1  ; 11.0 #   [5] TANGUT IDEOGRAPH-187ED..TANGUT IDEOGRAPH-187F1\n1D2E0..1D2F3  ; 11.0 #  [20] MAYAN NUMERAL ZERO..MAYAN NUMERAL NINETEEN\n1D372..1D378  ; 11.0 #   [7] IDEOGRAPHIC TALLY MARK ONE..TALLY MARK FIVE\n1EC71..1ECB4  ; 11.0 #  [68] INDIC SIYAQ NUMBER ONE..INDIC SIYAQ ALTERNATE LAKH MARK\n1F12F         ; 11.0 #       COPYLEFT SYMBOL\n1F6F9         ; 11.0 #       SKATEBOARD\n1F7D5..1F7D8  ; 11.0 #   [4] CIRCLED TRIANGLE..NEGATIVE CIRCLED SQUARE\n1F94D..1F94F  ; 11.0 #   [3] LACROSSE STICK AND BALL..FLYING DISC\n1F96C..1F970  ; 11.0 #   [5] LEAFY GREEN..SMILING FACE WITH SMILING EYES AND THREE HEARTS\n1F973..1F976  ; 11.0 #   [4] FACE WITH PARTY HORN AND PARTY HAT..FREEZING FACE\n1F97A         ; 11.0 #       FACE WITH PLEADING EYES\n1F97C..1F97F  ; 11.0 #   [4] LAB COAT..FLAT SHOE\n1F998..1F9A2  ; 11.0 #  [11] KANGAROO..SWAN\n1F9B0..1F9B9  ; 11.0 #  [10] EMOJI COMPONENT RED HAIR..SUPERVILLAIN\n1F9C1..1F9C2  ; 11.0 #   [2] CUPCAKE..SALT SHAKER\n1F9E7..1F9FF  ; 11.0 #  [25] RED GIFT ENVELOPE..NAZAR AMULET\n1FA60..1FA6D  ; 11.0 #  [14] XIANGQI RED GENERAL..XIANGQI BLACK SOLDIER\n\n# Total code points: 684\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Target Library Configuration\nDESCRIPTION: Defines the main library target with platform-specific source files, dependencies, and build settings for different operating systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Synchronization/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftSynchronization ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB IMPORTS_NON_OSSA \n  ${SWIFT_SYNCHRONIZATION_SOURCES}\n\n  GYB_SOURCES\n    ${SWIFT_SYNCHRONIZATION_GYB_SOURCES}\n\n  SWIFT_SOURCES_DEPENDS_MACOS\n    ${SWIFT_SYNCHRONIZATION_DARWIN_SOURCES}\n  SWIFT_SOURCES_DEPENDS_IOS\n    ${SWIFT_SYNCHRONIZATION_DARWIN_SOURCES}\n```\n\n----------------------------------------\n\nTITLE: Configuring Darwin Dependencies for SwiftPrivateThreadExtras in CMake\nDESCRIPTION: Sets the Darwin dependencies for SwiftPrivateThreadExtras based on the SWIFT_BUILD_SDK_OVERLAY flag. If the flag is set, it includes Darwin as a dependency; otherwise, it sets an empty dependency list.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftPrivateThreadExtras/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_BUILD_SDK_OVERLAY)\nset(swift_private_thread_extras_darwin_dependencies Darwin)\nelse()\nset(swift_private_thread_extras_darwin_dependencies)\nendif()\n```\n\n----------------------------------------\n\nTITLE: CIF Image Header Byte Structure\nDESCRIPTION: Explains the structure of the header byte for each image entry in the CIF format, including relative addressing and address size encoding.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompactImageMapFormat.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n   7   6   5   4   3   2   1   0\n ┌───┬───┬───────────┬───────────┐\n │ r │ 0 │ acount    │ ecount    │\n └───┴───┴───────────┴───────────┘\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Swift Standard Library Build Targets\nDESCRIPTION: Defines build configuration for embedded Swift standard library targets across different architectures and platforms. Includes support for ARM, AArch64, RISCV, X86, WebAssembly, and AVR targets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB_CROSS_COMPILING)\n  if(SWIFT_WASI_SYSROOT_PATH)\n    list(APPEND EMBEDDED_STDLIB_TARGET_TRIPLES\n      \"wasm32    wasm32-unknown-wasip1  wasm32-unknown-wasip1\"\n    )\n  else()\n    if(\"ARM\" IN_LIST LLVM_TARGETS_TO_BUILD)\n      list(APPEND EMBEDDED_STDLIB_TARGET_TRIPLES\n        \"armv6    armv6-apple-none-macho    armv6-apple-none-macho\"\n        \"armv6m   armv6m-apple-none-macho   armv6m-apple-none-macho\"\n        \"armv7    armv7-apple-none-macho    armv7-apple-none-macho\"\n        \"armv7m   armv7m-apple-none-macho   armv7m-apple-none-macho\"\n        \"armv7em  armv7em-apple-none-macho  armv7em-apple-none-macho\"\n      )\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting LLVM Common Dependencies for Swift Libraries\nDESCRIPTION: Adds intrinsics_gen and clang-tablegen-targets as common dependencies for all Swift libraries to ensure proper build order with LLVM and Clang generated headers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND LLVM_COMMON_DEPENDS intrinsics_gen clang-tablegen-targets)\n```\n\n----------------------------------------\n\nTITLE: Configuring libstdcxx Module Map for Swift Clang Importer\nDESCRIPTION: Copies the libstdcxx.modulemap file from the source directory to the build directory. This module map is required for C++ standard library interoperability within the Swift Clang Importer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/ClangImporter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(${SWIFT_SOURCE_DIR}/stdlib/public/Cxx/libstdcxx/libstdcxx.modulemap\n  ${CMAKE_CURRENT_BINARY_DIR}/libstdcxx.modulemap COPYONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Nushu Script\nDESCRIPTION: This snippet defines the Unicode block for the Nushu script, including an iteration mark and characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_99\n\nLANGUAGE: Unicode\nCODE:\n```\n16FE1         ; Nushu # Lm       NUSHU ITERATION MARK\n1B170..1B2FB  ; Nushu # Lo [396] NUSHU CHARACTER-1B170..NUSHU CHARACTER-1B2FB\n```\n\n----------------------------------------\n\nTITLE: Unicode Common Script Character Range Definitions\nDESCRIPTION: Defines unicode code point ranges and their corresponding character descriptions for the Common script category. Each line specifies a code point or range, script category, character class, and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n2E0E..2E16    ; Common # Po   [9] EDITORIAL CORONIS..DOTTED RIGHT-POINTING ANGLE\n2E17          ; Common # Pd       DOUBLE OBLIQUE HYPHEN\n2E18..2E19    ; Common # Po   [2] INVERTED INTERROBANG..PALM BRANCH\n...\n```\n\n----------------------------------------\n\nTITLE: Linking Swift SIL Library to Unit Tests in CMake\nDESCRIPTION: This snippet links the swiftSIL library to the SwiftSILTests target. It uses the target_link_libraries CMake command with the PRIVATE keyword, indicating that the dependency is only used internally by the test suite.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SIL/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(SwiftSILTests\n   PRIVATE\n   swiftSIL\n)\n```\n\n----------------------------------------\n\nTITLE: Hangul Syllable Unicode Range Definitions - Group M\nDESCRIPTION: Unicode ranges for Hangul syllables starting with M consonant, including variations like MYEG, MOG, MWAG, etc. Each range contains 27 consecutive code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_15\n\nLANGUAGE: unicode\nCODE:\n```\nBA8D..BAA7    ; LVT # Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH\nBAA9..BAC3    ; LVT # Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH\nBAC5..BADF    ; LVT # Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parent Types and Nested Types in Swift (Swift)\nDESCRIPTION: This snippet illustrates how a parent type ('Outer') contains a nested type ('Inner') in Swift. The code defines a simple nested struct without additional members, representing how one type can be nested inside another. No dependencies or specific parameters are required; this is intended as a conceptual example for understanding Swift's type nesting relationships. Inputs and outputs are not applicable as there is no executable logic—it's strictly for documentation clarity.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Lexicon.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct Outer {\n  struct Inner {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Characters to Numerical Values 31-39\nDESCRIPTION: Lists Unicode code points that represent numerical values from 31 to 39, primarily focusing on circled number notation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_19\n\nLANGUAGE: plain\nCODE:\n```\n325B          ; 31.0 ; ; 31 # No       CIRCLED NUMBER THIRTY ONE\n\n# Total code points: 1\n\n# ================================================\n\n325C          ; 32.0 ; ; 32 # No       CIRCLED NUMBER THIRTY TWO\n\n# Total code points: 1\n\n# ================================================\n\n325D          ; 33.0 ; ; 33 # No       CIRCLED NUMBER THIRTY THREE\n\n# Total code points: 1\n\n# ================================================\n\n325E          ; 34.0 ; ; 34 # No       CIRCLED NUMBER THIRTY FOUR\n\n# Total code points: 1\n\n# ================================================\n\n325F          ; 35.0 ; ; 35 # No       CIRCLED NUMBER THIRTY FIVE\n\n# Total code points: 1\n\n# ================================================\n\n32B1          ; 36.0 ; ; 36 # No       CIRCLED NUMBER THIRTY SIX\n\n# Total code points: 1\n\n# ================================================\n\n32B2          ; 37.0 ; ; 37 # No       CIRCLED NUMBER THIRTY SEVEN\n\n# Total code points: 1\n\n# ================================================\n\n32B3          ; 38.0 ; ; 38 # No       CIRCLED NUMBER THIRTY EIGHT\n\n# Total code points: 1\n\n# ================================================\n\n32B4          ; 39.0 ; ; 39 # No       CIRCLED NUMBER THIRTY NINE\n\n# Total code points: 1\n```\n\n----------------------------------------\n\nTITLE: ARM64-specific ABI changes comment\nDESCRIPTION: A comment indicating that the following ABI changes are specific to the ARM64 architecture.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Inputs/stability-stdlib-abi-without-asserts-arm64.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// ABI additions for arm64 only.\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Backtrace Executable Target in CMake\nDESCRIPTION: Defines the swift-backtrace executable target with its dependencies, compile flags, and target SDKs. This configures how the main backtrace tool is built and installed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/libexec/swift-backtrace/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_executable(swift-backtrace BUILD_WITH_LIBEXEC\n  ${BACKTRACING_SOURCES}\n\n  SWIFT_MODULE_DEPENDS         ${runtime}\n\n  SWIFT_MODULE_DEPENDS_OSX          ${darwin}\n  SWIFT_MODULE_DEPENDS_WINDOWS      ${wincrt_sdk}\n  SWIFT_MODULE_DEPENDS_LINUX        ${glibc}\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC ${musl}\n\n  DEPLOYMENT_VERSION_OSX ${osx_deployment_target}\n\n  INSTALL_IN_COMPONENT libexec\n  COMPILE_FLAGS\n    ${BACKTRACING_COMPILE_FLAGS}\n    -parse-as-library\n\n  TARGET_SDKS OSX LINUX)\n```\n\n----------------------------------------\n\nTITLE: Unicode Hangul V Classification\nDESCRIPTION: Defines code point ranges for Hangul Jungseong characters classified as V (Vowel) and Kirat Rai vowel signs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n1160..11A7    ; V # Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE\nD7B0..D7C6    ; V # Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E\n16D63         ; V # Lo       KIRAT RAI VOWEL SIGN AA\n16D67..16D6A  ; V # Lo   [4] KIRAT RAI VOWEL SIGN E..KIRAT RAI VOWEL SIGN AU\n```\n\n----------------------------------------\n\nTITLE: Executing Documentation Request with sourcekitd-test CLI Tool\nDESCRIPTION: Command-line syntax for using sourcekitd-test to retrieve documentation information from a Swift file, with optional compiler arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ sourcekitd-test -req=doc-info <file> [-- <compiler args>]\n```\n\n----------------------------------------\n\nTITLE: Explaining Transitive RC Identity with SIL pseudo-code - Swift\nDESCRIPTION: This snippet illustrates the concept of (transitive) RC identity preservation for Single Static Assignment (SSA) values in SIL, using the retain_value instruction and a sequence of unary operations. It demonstrates how retaining a value before a chain of RC identity preserving instructions produces the same runtime refcount effect as retaining the result after the sequence. There are no external dependencies, but it assumes basic familiarity with SIL and ARC semantics. The values %a, %b, and %c are SSA variables; unary_instruction is any operation that is (0,0) RC identity preserving.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_0\n\nLANGUAGE: sil\nCODE:\n```\nretain_value %a\n%b = unary_instruction %a\n%c = unary_instruction %b\n```\n\n----------------------------------------\n\nTITLE: Uniqueness Check with Reference Count of 1\nDESCRIPTION: Demonstration of a uniqueness check followed by a retain operation when the reference count is 1, showing how the uniqueness check correctly returns true before the retain.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_16\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  // refcount(%0) == 1\n  is_unique %0 : $Builtin.NativeObject\n  // refcount(%0) == 1\n  strong_retain %0 : $Builtin.NativeObject\n  // refcount(%0) == 2\n```\n\n----------------------------------------\n\nTITLE: xfail and skip directives for Swift Compiler Tests\nDESCRIPTION: Test configuration directives marking specific Swift compiler tests as expected to fail or to be skipped on Android ARM64 platform. Includes tests for compiler crashes, array parsing, unavailable declarations, and driver output handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/windows-swift-android-lit-test-overrides.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nxfail Swift-validation(android-aarch64) :: compiler_crashers_2_fixed/issue-56100.swift\nxfail Swift-validation(android-aarch64) :: compiler_scale/parse_array_nested.swift.gyb\nxfail Swift-validation(android-aarch64) :: execution/unavailable_decls.swift\n\nskip Swift(android-aarch64) :: Driver/parseable_output.swift\nskip Swift(android-aarch64) :: Driver/parseable_output_unicode.swift\nskip Swift-validation(android-aarch64) :: compiler_crashers_fixed/28795-inprotocol-isrequirementsignaturecomputed-missing-signature.swift\n```\n\n----------------------------------------\n\nTITLE: Adding Global Constructor Warning Flags\nDESCRIPTION: Adds compiler flags to warn about global constructors and exit-time destructors in runtime code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND compile_flags\n  \"-Wglobal-constructors\"\n  \"-Wexit-time-destructors\")\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Break Test Sequences\nDESCRIPTION: Test sequences demonstrating Unicode word breaking rules between different character types including Hebrew letters, Latin letters, combining marks, numbers, punctuation, and format characters. Each line shows a sequence with expected break points marked by ÷ and non-break points marked by ×.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 05D0 × 0308 × 0061 × 2060 ÷\n÷ 05D0 × 0061 ÷ 003A ÷\n÷ 05D0 × 0308 × 0061 ÷ 003A ÷\n÷ 05D0 × 0061 ÷ 0027 ÷\n÷ 05D0 × 0308 × 0061 ÷ 0027 ÷\n÷ 05D0 × 0061 ÷ 0027 × 2060 ÷\n```\n\n----------------------------------------\n\nTITLE: Unicode Line Breaking Test Case\nDESCRIPTION: Example test case showing line breaking behavior between SPACE and other characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakTest.txt#2025-04-23_snippet_1\n\nLANGUAGE: Plain Text\nCODE:\n```\n÷ 0020 ÷ 0020 ÷\t#  ÷ [0.2] SPACE (Other) ÷ [999.0] SPACE (Other) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Syloti Nagri Script\nDESCRIPTION: Defines the Unicode code point ranges for the Syloti Nagri script, categorizing characters by their types (Lo, Mn, Mc, So) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_36\n\nLANGUAGE: Unicode\nCODE:\n```\nA800..A801    ; Syloti_Nagri # Lo   [2] SYLOTI NAGRI LETTER A..SYLOTI NAGRI LETTER I\nA802          ; Syloti_Nagri # Mn       SYLOTI NAGRI SIGN DVISVARA\nA803..A805    ; Syloti_Nagri # Lo   [3] SYLOTI NAGRI LETTER U..SYLOTI NAGRI LETTER O\nA806          ; Syloti_Nagri # Mn       SYLOTI NAGRI SIGN HASANTA\nA807..A80A    ; Syloti_Nagri # Lo   [4] SYLOTI NAGRI LETTER KO..SYLOTI NAGRI LETTER GHO\nA80B          ; Syloti_Nagri # Mn       SYLOTI NAGRI SIGN ANUSVARA\nA80C..A822    ; Syloti_Nagri # Lo  [23] SYLOTI NAGRI LETTER CO..SYLOTI NAGRI LETTER HO\nA823..A824    ; Syloti_Nagri # Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I\nA825..A826    ; Syloti_Nagri # Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E\nA827          ; Syloti_Nagri # Mc       SYLOTI NAGRI VOWEL SIGN OO\nA828..A82B    ; Syloti_Nagri # So   [4] SYLOTI NAGRI POETRY MARK-1..SYLOTI NAGRI POETRY MARK-4\nA82C          ; Syloti_Nagri # Mn       SYLOTI NAGRI SIGN ALTERNATE HASANTA\n\n# Total code points: 45\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Runtime Test Overrides for Android in PowerShell\nDESCRIPTION: This PowerShell script (build.ps1) overrides the status of Swift Runtime tests for Android. It handles tests that fail specifically when built with the Windows toolchain and run through the Windows test driver. The script uses 'xfail' for consistently failing tests and 'skip' for flaky tests.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/windows-swift-android-lit-test-overrides.txt#2025-04-23_snippet_0\n\nLANGUAGE: PowerShell\nCODE:\n```\n# build.ps1 overrides the status of each test in this file when running the\n# Swift Runtime tests for Android. These tests fail for Android if and only if\n# built with the Windows toolchain and run through the Windows test driver.\n# The set of failures is different on Linux. We cannot express this condition in\n# the REQUIRES/XFAIL clause for individual tests. That's why we use the approach\n# of external overrides.\n#\n# Prefer `xfail` for tests that fail reliably. Use `skip` for flaky tests.\n```\n\n----------------------------------------\n\nTITLE: Accessing Objective-C Instance Variable\nDESCRIPTION: Demonstrates the syntax for accessing an instance variable named 'foo' in Objective-C. The access is type-checked by looking for a declared ivar with the name 'foo' in the static type of the base object.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_0\n\nLANGUAGE: Objective-C\nCODE:\n```\nd->foo\n```\n\n----------------------------------------\n\nTITLE: Configuring XPC Service Build Settings in CMake\nDESCRIPTION: Checks for XPC header availability and configures build settings for SourceKit XPC service. Sets a build option based on the presence of xpc.h header and SWIFT_BUILD_SOURCEKIT flag.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(CheckIncludeFiles)\ncheck_include_files(\"xpc/xpc.h\" HAVE_XPC_H)\n\nif(HAVE_XPC_H AND SWIFT_BUILD_SOURCEKIT)\n  set(BUILD_SOURCEKIT_XPC_SERVICE_default TRUE)\nelse()\n  set(BUILD_SOURCEKIT_XPC_SERVICE_default FALSE)\nendif()\n\noption(BUILD_SOURCEKIT_XPC_SERVICE\n  \"Whether or not the SourceKit XPC service should be built\"\n  ${BUILD_SOURCEKIT_XPC_SERVICE_default})\n```\n\n----------------------------------------\n\nTITLE: Defining swiftOSLogTestHelper Library Target\nDESCRIPTION: Configures the swiftOSLogTestHelper library target with source files, platform dependencies, and build settings. Specifies compilation flags, installation parameters, and platform-specific configurations for all Apple platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/OSLog/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftOSLogTestHelper\n  IS_SDK_OVERLAY\n  SHARED\n\n  OSLogTestHelper.swift\n  OSLogMessage.swift\n  OSLogIntegerFormatting.swift\n  OSLogStringAlignment.swift\n  OSLogIntegerTypes.swift\n  OSLogStringTypes.swift\n  OSLogNSObjectType.swift\n  OSLogFloatingPointTypes.swift\n  OSLogSwiftProtocols.swift\n  OSLogPrivacy.swift\n  OSLogFloatFormatting.swift\n\n  SWIFT_MODULE_DEPENDS_IOS ${swift_oslog_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_OSX ${swift_oslog_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_TVOS ${swift_oslog_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_oslog_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_XROS ${swift_oslog_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_oslog_darwin_dependencies}\n  TARGET_SDKS ALL_APPLE_PLATFORMS\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT never_install\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Flags for Swift Stubs in CMake\nDESCRIPTION: Configures compilation flags for Swift runtime stubs, including core C++ flags, export definitions, and include paths. These flags ensure proper compilation of the stubs library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/stubs/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_stubs_c_compile_flags ${SWIFT_RUNTIME_CORE_CXX_FLAGS})\nlist(APPEND swift_stubs_c_compile_flags -DswiftCore_EXPORTS)\nlist(APPEND swift_stubs_c_compile_flags -I${SWIFT_SOURCE_DIR}/include -I${SWIFT_SOURCE_DIR}/stdlib/public)\n```\n\n----------------------------------------\n\nTITLE: Adding SwiftOnoneSupport Target Library in CMake\nDESCRIPTION: Adds the main SwiftOnoneSupport target library using common options and specifies installation component as stdlib.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftSwiftOnoneSupport\n  ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES}\n  ${swiftOnoneSupport_common_options}\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n  INSTALL_IN_COMPONENT stdlib)\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries to Swift Runtime\nDESCRIPTION: Links required libraries to the swiftRuntime target, with conditional platform-specific libraries for Windows and core dependencies like swiftShims and swiftDemangling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftRuntime PRIVATE\n  $<$<PLATFORM_ID:Windows>:User32>\n  $<$<PLATFORM_ID:Windows>:ShLwApi>\n  swiftShims\n  swiftDemangling)\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Swift Math Library in CMake\nDESCRIPTION: Defines the swift_math library, sets its module name, links required dependencies, and configures installation paths. Additionally handles Swift interface generation and manifest embedding for the library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/Math/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(swift_math\n  Math.swift)\nset_target_properties(swift_math PROPERTIES\n  Swift_MODULE_NAME math)\ntarget_link_libraries(swift_math PRIVATE\n  SwiftAndroid\n  swiftCore)\n\ninstall(TARGETS swift_math\n  ARCHIVE DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  LIBRARY DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nemit_swift_interface(swift_math)\ninstall_swift_interface(swift_math)\n\nembed_manifest(swift_math)\n```\n\n----------------------------------------\n\nTITLE: Generic Value Parameters Example in Swift\nDESCRIPTION: Shows a potential implementation of generic value parameters using a multi-dimensional array example.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_29\n\nLANGUAGE: Swift\nCODE:\n```\nstruct MultiArray<T, let Dimensions: Int> { // specify the number of dimensions to the array\n  subscript (indices: Int...) -> T {\n    get {\n      require(indices.count == Dimensions)\n      // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking Core Swift Libraries\nDESCRIPTION: Links the swiftRefactoring library with core Swift components including AST, Clang importer, IDE, Index, Parse, and Sema libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Refactoring/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(swiftRefactoring PRIVATE\n  swiftAST\n  swiftClangImporter\n  swiftIDE\n  swiftIndex\n  swiftParse\n  swiftSema)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Cham Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Cham script, including letters, vowel signs, consonant signs, final letters, digits, and punctuation marks. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_54\n\nLANGUAGE: Unicode\nCODE:\n```\nAA00..AA28    ; Cham # Lo  [41] CHAM LETTER A..CHAM LETTER HA\nAA29..AA2E    ; Cham # Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE\nAA2F..AA30    ; Cham # Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI\nAA31..AA32    ; Cham # Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE\nAA33..AA34    ; Cham # Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA\nAA35..AA36    ; Cham # Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA\nAA40..AA42    ; Cham # Lo   [3] CHAM LETTER FINAL K..CHAM LETTER FINAL NG\nAA43          ; Cham # Mn       CHAM CONSONANT SIGN FINAL NG\nAA44..AA4B    ; Cham # Lo   [8] CHAM LETTER FINAL CH..CHAM LETTER FINAL SS\nAA4C          ; Cham # Mn       CHAM CONSONANT SIGN FINAL M\nAA4D          ; Cham # Mc       CHAM CONSONANT SIGN FINAL H\nAA50..AA59    ; Cham # Nd  [10] CHAM DIGIT ZERO..CHAM DIGIT NINE\nAA5C..AA5F    ; Cham # Po   [4] CHAM PUNCTUATION SPIRAL..CHAM PUNCTUATION TRIPLE DANDA\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Remangling Unit Test Module in CMake\nDESCRIPTION: Sets up the SwiftRemangleTests unit test module with its source file and required dependencies. The test links against the Swift basic library, demangling library, and LLVM testing support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Remangler/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_unittest(SwiftRemangleTests\n  RemangleTest.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: JSON Definition of PhotoBracketSettings Class in Swift\nDESCRIPTION: JSON representation of the PhotoBracketSettings class that inherits from PhotoSettings. It includes constructors, inheritance information, and conformance to NSObjectProtocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/clang-module-dump.txt#2025-04-23_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"kind\": \"TypeDecl\",\n  \"name\": \"PhotoBracketSettings\",\n  \"printedName\": \"PhotoBracketSettings\",\n  \"children\": [\n    {\n      \"kind\": \"Constructor\",\n      \"name\": \"init\",\n      \"printedName\": \"init(cake:)\",\n      \"children\": [\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"Optional\",\n          \"printedName\": \"Foo.PhotoBracketSettings?\",\n          \"children\": [\n            {\n              \"kind\": \"TypeNominal\",\n              \"name\": \"PhotoBracketSettings\",\n              \"printedName\": \"Foo.PhotoBracketSettings\",\n              \"usr\": \"c:objc(cs)PhotoBracketSettings\"\n            }\n          ],\n          \"usr\": \"s:Sq\"\n        },\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"Int32\",\n          \"printedName\": \"Swift.Int32\",\n          \"usr\": \"s:s5Int32V\"\n        }\n      ],\n      \"declKind\": \"Constructor\",\n      \"usr\": \"c:objc(cs)PhotoSettings(im)initWithCake:\",\n      \"moduleName\": \"Foo\",\n      \"overriding\": true,\n      \"implicit\": true,\n      \"objc_name\": \"initWithCake:\",\n      \"declAttributes\": [\n        \"Override\",\n        \"ObjC\",\n        \"Dynamic\"\n      ],\n      \"init_kind\": \"Designated\"\n    },\n    {\n      \"kind\": \"Constructor\",\n      \"name\": \"init\",\n      \"printedName\": \"init()\",\n      \"children\": [\n        {\n          \"kind\": \"TypeNominal\",\n          \"name\": \"PhotoBracketSettings\",\n          \"printedName\": \"Foo.PhotoBracketSettings\",\n          \"usr\": \"c:objc(cs)PhotoBracketSettings\"\n        }\n      ],\n      \"declKind\": \"Constructor\",\n      \"usr\": \"c:objc(cs)NSObject(im)init\",\n      \"moduleName\": \"Foo\",\n      \"overriding\": true,\n      \"implicit\": true,\n      \"objc_name\": \"init\",\n      \"declAttributes\": [\n        \"Override\",\n        \"ObjC\",\n        \"Dynamic\"\n      ],\n      \"init_kind\": \"Designated\"\n    }\n  ],\n  \"declKind\": \"Class\",\n  \"usr\": \"c:objc(cs)PhotoBracketSettings\",\n  \"moduleName\": \"Foo\",\n  \"isOpen\": true,\n  \"objc_name\": \"PhotoBracketSettings\",\n  \"declAttributes\": [\n    \"ObjC\",\n    \"Dynamic\"\n  ],\n  \"superclassUsr\": \"c:objc(cs)PhotoSettings\",\n  \"inheritsConvenienceInitializers\": true,\n  \"superclassNames\": [\n    \"Foo.PhotoSettings\",\n    \"ObjectiveC.NSObject\"\n  ],\n  \"conformances\": [\n    {\n      \"kind\": \"Conformance\",\n      \"name\": \"NSObjectProtocol\",\n      \"printedName\": \"NSObjectProtocol\",\n      \"usr\": \"c:objc(pl)NSObject\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Linking clangBasic to swiftDependencyScan as Interface Dependency in CMake\nDESCRIPTION: Specifies that the swiftDependencyScan library has an interface dependency on clangBasic. This means that any target linking to swiftDependencyScan will also need to link to clangBasic.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/DependencyScan/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftDependencyScan INTERFACE\n  clangBasic)\n```\n\n----------------------------------------\n\nTITLE: Unicode Extend Property Character Range Definitions\nDESCRIPTION: Defines ranges of Unicode characters that have the 'Extend' property. Each line specifies either a single code point or a range of code points, followed by their category (Mn for non-spacing mark, Mc for spacing combining mark, etc.) and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n0E31          ; Extend # Mn       THAI CHARACTER MAI HAN-AKAT\n0E34..0E3A    ; Extend # Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n0E47..0E4E    ; Extend # Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN\n0EB1          ; Extend # Mn       LAO VOWEL SIGN MAI KAN\n0EB4..0EBC    ; Extend # Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO\n0EC8..0ECE    ; Extend # Mn   [7] LAO TONE MAI EK..LAO YAMAKKAN\n```\n\n----------------------------------------\n\nTITLE: Defining Core Foundation Type with Memory Management\nDESCRIPTION: Defines a Core Foundation type class and an associated release function that is marked as unavailable because Swift handles memory management automatically.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_27\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooCFType {\n}\n@available(*, unavailable, message: \"Core Foundation objects are automatically memory managed\")\nfunc FooCFTypeRelease(_: FooCFType!)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Digit Code Points with Properties and Ranges\nDESCRIPTION: Lists Unicode code points classified as Digit type with their properties and descriptions. Contains 128 total code points across various notational systems including superscripts, subscripts, circled digits, and digits from different writing systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericType.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n00B2..00B3    ; Digit # No   [2] SUPERSCRIPT TWO..SUPERSCRIPT THREE\n00B9          ; Digit # No       SUPERSCRIPT ONE\n1369..1371    ; Digit # No   [9] ETHIOPIC DIGIT ONE..ETHIOPIC DIGIT NINE\n19DA          ; Digit # No       NEW TAI LUE THAM DIGIT ONE\n2070          ; Digit # No       SUPERSCRIPT ZERO\n2074..2079    ; Digit # No   [6] SUPERSCRIPT FOUR..SUPERSCRIPT NINE\n2080..2089    ; Digit # No  [10] SUBSCRIPT ZERO..SUBSCRIPT NINE\n2460..2468    ; Digit # No   [9] CIRCLED DIGIT ONE..CIRCLED DIGIT NINE\n2474..247C    ; Digit # No   [9] PARENTHESIZED DIGIT ONE..PARENTHESIZED DIGIT NINE\n2488..2490    ; Digit # No   [9] DIGIT ONE FULL STOP..DIGIT NINE FULL STOP\n24EA          ; Digit # No       CIRCLED DIGIT ZERO\n24F5..24FD    ; Digit # No   [9] DOUBLE CIRCLED DIGIT ONE..DOUBLE CIRCLED DIGIT NINE\n24FF          ; Digit # No       NEGATIVE CIRCLED DIGIT ZERO\n2776..277E    ; Digit # No   [9] DINGBAT NEGATIVE CIRCLED DIGIT ONE..DINGBAT NEGATIVE CIRCLED DIGIT NINE\n2780..2788    ; Digit # No   [9] DINGBAT CIRCLED SANS-SERIF DIGIT ONE..DINGBAT CIRCLED SANS-SERIF DIGIT NINE\n278A..2792    ; Digit # No   [9] DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE\n10A40..10A43  ; Digit # No   [4] KHAROSHTHI DIGIT ONE..KHAROSHTHI DIGIT FOUR\n10E60..10E68  ; Digit # No   [9] RUMI DIGIT ONE..RUMI DIGIT NINE\n11052..1105A  ; Digit # No   [9] BRAHMI NUMBER ONE..BRAHMI NUMBER NINE\n1F100..1F10A  ; Digit # No  [11] DIGIT ZERO FULL STOP..DIGIT NINE COMMA\n\n# Total code points: 128\n```\n\n----------------------------------------\n\nTITLE: Creating the Project Directory (sh)\nDESCRIPTION: Creates a directory named `swift-project` and navigates into it using the command line. This directory will serve as the root for the cloned Swift source code and its dependencies. It's important that the absolute path to this directory does not contain spaces.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir swift-project\ncd swift-project\n```\n\n----------------------------------------\n\nTITLE: Defining Canonical SIL Stage Attributes in Swift (BNF)\nDESCRIPTION: Describes how to annotate a SIL function with the '[canonical]' attribute, indicating that the function is in canonical SIL form even if the module remains in raw SIL. No external dependencies; attribute is used in Swift's intermediate representation. Expected input is a SIL function declaration, and output is a function treated as canonical SIL. This enables certain compiler optimizations or analyses to only consider canonical-form functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_0\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[canonical]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Shim Headers Sources\nDESCRIPTION: Defines the list of Swift shim header files to be installed and sets up output directories for both static and dynamic libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftShims/swift/shims/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(sources\n  AssertionReporting.h\n  CoreFoundationShims.h\n  EmbeddedShims.h\n  FoundationShims.h\n  GlobalObjects.h\n  HeapObject.h\n  KeyPath.h\n  LibcOverlayShims.h\n  LibcShims.h\n  MetadataSections.h\n  ObjCShims.h\n  Random.h\n  RefCount.h\n  Reflection.h\n  RuntimeShims.h\n  RuntimeStubs.h\n  SwiftStdbool.h\n  SwiftStddef.h\n  SwiftStdint.h\n  System.h\n  Target.h\n  ThreadLocalStorage.h\n  UnicodeData.h\n  Visibility.h\n  _SwiftConcurrency.h\n  _SwiftDistributed.h\n  _SynchronizationShims.h\n\n  module.modulemap\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Swift SIL Optimizer in CMake\nDESCRIPTION: Adds source files to the swiftSILOptimizer target using CMake's target_sources command. The files contain implementations for function signature optimization, argument transformation, ownership model conversion, and existential specialization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/FunctionSignatureTransforms/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  FunctionSignatureOpts.cpp\n  DeadArgumentTransform.cpp\n  ArgumentExplosionTransform.cpp\n  OwnedToGuaranteedTransform.cpp\n  ExistentialSpecializer.cpp\n  ExistentialTransform.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Configuration Options\nDESCRIPTION: Configures build options including optimization levels, extra compiler flags, and debug info generation settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_EXTRA_BENCH_CONFIGS CACHE STRING\n    \"A semicolon separated list of benchmark configurations. \\\nAvailable configurations: <Optlevel>_SINGLEFILE, <Optlevel>_MULTITHREADED\")\n\nif(NOT SWIFT_OPTIMIZATION_LEVELS)\n  set(SWIFT_OPTIMIZATION_LEVELS \"Onone\" \"O\" \"Osize\"\n                                ${SWIFT_EXTRA_BENCH_CONFIGS})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring Special Functions in Swift\nDESCRIPTION: Defines a function that's redeclared in multiple modules and an unavailable variadic function with warning message annotation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\n/// Aaa.  redeclaredInMultipleModulesFunc1.  Bbb.\nfunc redeclaredInMultipleModulesFunc1(_ a: Int32) -> Int32\n@available(*, unavailable, message: \"Variadic function is unavailable\")\nfunc fooFuncUsingVararg(_ a: Int32, _ varargs: Any...) -> Int32\n```\n\n----------------------------------------\n\nTITLE: Generating Input and Output File Lists in CMake\nDESCRIPTION: Creates lists of input and output file paths by iterating through source files and constructing full paths.\nSOURCE: https://github.com/swiftlang/swift/blob/main/apinotes/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(inputs)\nset(outputs)\nforeach(input ${sources})\n  list(APPEND inputs \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\")\n  list(APPEND outputs \"${output_dir}/${input}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Renamed Declarations in Swift APINotesTest\nDESCRIPTION: List of renamed protocols, variables, and types in the APINotesTest module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/apinotes-diags.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol SwiftTypeWithMethodRight // Renamed from SwiftTypeWithMethodLeft\nvar NewType.newMember // Renamed from OldType.oldMember\nvar AnimalAttributeName.globalAttributeName // Renamed from globalAttributeName\n```\n\n----------------------------------------\n\nTITLE: Using Locally Built Swift Toolchain (Bash)\nDESCRIPTION: This code snippet shows the process of building a local Swift toolchain, installing it, and using it for development in the 'hosttools' bootstrapping mode.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DevelopmentTips.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./utils/build-toolchain com.yourname\nTOOLCHAINS=com.yourname.YYYYMMDD ./utils/build-script --bootstrapping=hosttools\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Frontend Library Build\nDESCRIPTION: CMake configuration that defines the swiftFrontend static library, specifying source files, dependencies, and linked libraries. Includes conditional compilation support for Swift syntax features and LLVM integration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Frontend/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftFrontend STATIC\n  ArgsToFrontendInputsConverter.cpp\n  ArgsToFrontendOptionsConverter.cpp\n  ArgsToFrontendOutputsConverter.cpp\n  CachedDiagnostics.cpp\n  CachingUtils.cpp\n  CASOutputBackends.cpp\n  CompileJobCacheKey.cpp\n  CompileJobCacheResult.cpp\n  CompilerInvocation.cpp\n  DependencyVerifier.cpp\n  DiagnosticHelper.cpp\n  DiagnosticVerifier.cpp\n  Frontend.cpp\n  FrontendInputsAndOutputs.cpp\n  FrontendOptions.cpp\n  MakeStyleDependencies.cpp\n  ModuleInterfaceBuilder.cpp\n  ModuleInterfaceLoader.cpp\n  ModuleInterfaceSupport.cpp\n  PrintingDiagnosticConsumer.cpp\n  Serialization.cpp\n  SerializedDiagnosticConsumer.cpp)\nadd_dependencies(swiftFrontend\n  SwiftOptions)\ntarget_link_libraries(swiftFrontend PRIVATE\n  swiftAPIDigester\n  swiftAST\n  swiftConstExtract\n  swiftIDE\n  swiftSIL\n  swiftOption\n  swiftSILGen\n  swiftSILOptimizer\n  swiftIRGen\n  swiftLocalization\n  swiftSema\n  swiftSerialization\n  swiftSymbolGraphGen)\n\nif (SWIFT_BUILD_SWIFT_SYNTAX)\n  target_link_libraries(swiftFrontend\n    PRIVATE\n    swiftASTGen\n  )\n\n  add_dependencies(swiftFrontend\n    swiftASTGen\n  )\nendif()\n\nset_swift_llvm_is_available(swiftFrontend)\n```\n\n----------------------------------------\n\nTITLE: Conditional Failure in SIL\nDESCRIPTION: Produces runtime failure if operand is 1, continues if 0. Includes static failure message for debugger display.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_184\n\nLANGUAGE: sil\nCODE:\n```\ncond_fail %0 : $Builtin.Int1, \"failure reason\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftDemangleTests with CMake\nDESCRIPTION: This snippet defines a CMake configuration for Swift demangler unit tests. It creates a test target that includes DemangleTest.cpp, sets build properties for runtime path handling, and links against the swiftDemangle library. The entire configuration is conditionally executed only if the swiftDemangle target exists.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SwiftDemangle/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(TARGET swiftDemangle)\n  add_swift_unittest(SwiftDemangleTests IS_TARGET_TEST\n    DemangleTest.cpp\n  )\n  set_target_properties(SwiftDemangleTests\n    PROPERTIES BUILD_WITH_INSTALL_RPATH On INSTALL_RPATH \"${SWIFT_LIBRARY_OUTPUT_INTDIR}\"\n  )\n  \n  target_link_libraries(SwiftDemangleTests\n    PRIVATE\n    swiftDemangle\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji_Modifier Code Point Ranges in Unicode Data Format\nDESCRIPTION: A listing of Unicode code points with the Emoji_Modifier property, which are used to modify the appearance of emoji with Emoji_Modifier_Base property. These are primarily skin tone modifiers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_7\n\nLANGUAGE: unicode-data\nCODE:\n```\n# All omitted code points have Emoji_Modifier=No\n\n1F3FB..1F3FF  ; Emoji_Modifier       # E1.0   [5] (🏻..🏿)    light skin tone..dark skin tone\n\n# Total elements: 5\n```\n\n----------------------------------------\n\nTITLE: Swift Protocol Definition - FooProtocolBase\nDESCRIPTION: Base protocol definition with required method and property declarations including documentation comments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.txt#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprotocol FooProtocolBase {\n  func fooProtoFunc()\n  func fooProtoFuncWithExtraIndentation1()\n  func fooProtoFuncWithExtraIndentation2()\n  static func fooProtoClassFunc()\n  var fooProperty1: Int32 { get set }\n  var fooProperty2: Int32 { get set }\n  var fooProperty3: Int32 { get }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Modifier Symbol Code Points\nDESCRIPTION: This code snippet lists Unicode code points that are categorized as Modifier Symbols (Sk). It includes individual code points and ranges, along with brief descriptions of each symbol or range.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_29\n\nLANGUAGE: Unicode\nCODE:\n```\n005E          ; Sk #       CIRCUMFLEX ACCENT\n0060          ; Sk #       GRAVE ACCENT\n00A8          ; Sk #       DIAERESIS\n00AF          ; Sk #       MACRON\n00B4          ; Sk #       ACUTE ACCENT\n00B8          ; Sk #       CEDILLA\n02C2..02C5    ; Sk #   [4] MODIFIER LETTER LEFT ARROWHEAD..MODIFIER LETTER DOWN ARROWHEAD\n02D2..02DF    ; Sk #  [14] MODIFIER LETTER CENTRED RIGHT HALF RING..MODIFIER LETTER CROSS ACCENT\n02E5..02EB    ; Sk #   [7] MODIFIER LETTER EXTRA-HIGH TONE BAR..MODIFIER LETTER YANG DEPARTING TONE MARK\n02ED          ; Sk #       MODIFIER LETTER UNASPIRATED\n02EF..02FF    ; Sk #  [17] MODIFIER LETTER LOW DOWN ARROWHEAD..MODIFIER LETTER LOW LEFT ARROW\n0375          ; Sk #       GREEK LOWER NUMERAL SIGN\n0384..0385    ; Sk #   [2] GREEK TONOS..GREEK DIALYTIKA TONOS\n0888          ; Sk #       ARABIC RAISED ROUND DOT\n1FBD          ; Sk #       GREEK KORONIS\n1FBF..1FC1    ; Sk #   [3] GREEK PSILI..GREEK DIALYTIKA AND PERISPOMENI\n1FCD..1FCF    ; Sk #   [3] GREEK PSILI AND VARIA..GREEK PSILI AND PERISPOMENI\n1FDD..1FDF    ; Sk #   [3] GREEK DASIA AND VARIA..GREEK DASIA AND PERISPOMENI\n1FED..1FEF    ; Sk #   [3] GREEK DIALYTIKA AND VARIA..GREEK VARIA\n1FFD..1FFE    ; Sk #   [2] GREEK OXIA..GREEK DASIA\n309B..309C    ; Sk #   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\nA700..A716    ; Sk #  [23] MODIFIER LETTER CHINESE TONE YIN PING..MODIFIER LETTER EXTRA-LOW LEFT-STEM TONE BAR\nA720..A721    ; Sk #   [2] MODIFIER LETTER STRESS AND HIGH TONE..MODIFIER LETTER STRESS AND LOW TONE\nA789..A78A    ; Sk #   [2] MODIFIER LETTER COLON..MODIFIER LETTER SHORT EQUALS SIGN\nAB5B          ; Sk #       MODIFIER BREVE WITH INVERTED BREVE\nAB6A..AB6B    ; Sk #   [2] MODIFIER LETTER LEFT TACK..MODIFIER LETTER RIGHT TACK\nFBB2..FBC2    ; Sk #  [17] ARABIC SYMBOL DOT ABOVE..ARABIC SYMBOL WASLA ABOVE\nFF3E          ; Sk #       FULLWIDTH CIRCUMFLEX ACCENT\nFF40          ; Sk #       FULLWIDTH GRAVE ACCENT\nFFE3          ; Sk #       FULLWIDTH MACRON\n1F3FB..1F3FF  ; Sk #   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Balinese Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Balinese script, including various letter categories, digits, and musical symbols. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_39\n\nLANGUAGE: Unicode\nCODE:\n```\n1B00..1B03    ; Balinese # Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG\n1B04          ; Balinese # Mc       BALINESE SIGN BISAH\n1B05..1B33    ; Balinese # Lo  [47] BALINESE LETTER AKARA..BALINESE LETTER HA\n1B34          ; Balinese # Mn       BALINESE SIGN REREKAN\n1B35          ; Balinese # Mc       BALINESE VOWEL SIGN TEDUNG\n1B36..1B3A    ; Balinese # Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA\n1B3B          ; Balinese # Mc       BALINESE VOWEL SIGN RA REPA TEDUNG\n1B3C          ; Balinese # Mn       BALINESE VOWEL SIGN LA LENGA\n1B3D..1B41    ; Balinese # Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG\n1B42          ; Balinese # Mn       BALINESE VOWEL SIGN PEPET\n1B43..1B44    ; Balinese # Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG\n1B45..1B4C    ; Balinese # Lo   [8] BALINESE LETTER KAF SASAK..BALINESE LETTER ARCHAIC JNYA\n1B4E..1B4F    ; Balinese # Po   [2] BALINESE INVERTED CARIK SIKI..BALINESE INVERTED CARIK PAREREN\n1B50..1B59    ; Balinese # Nd  [10] BALINESE DIGIT ZERO..BALINESE DIGIT NINE\n1B5A..1B60    ; Balinese # Po   [7] BALINESE PANTI..BALINESE PAMENENG\n1B61..1B6A    ; Balinese # So  [10] BALINESE MUSICAL SYMBOL DONG..BALINESE MUSICAL SYMBOL DANG GEDE\n1B6B..1B73    ; Balinese # Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG\n1B74..1B7C    ; Balinese # So   [9] BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG..BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING\n1B7D..1B7F    ; Balinese # Po   [3] BALINESE PANTI LANTANG..BALINESE PANTI BAWAK\n```\n\n----------------------------------------\n\nTITLE: Projecting Box Reference in SIL\nDESCRIPTION: Instruction to obtain the address of a value inside a box given a @box T reference.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_18\n\nLANGUAGE: sil\nCODE:\n```\n%1 = project_box %0 : $@box T\n\n// %1 has type $*T\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Grapheme_Base Code Points\nDESCRIPTION: Comprehensive listing of Unicode code points that have the Grapheme_Base property. These code points serve as base characters in grapheme clusters. The list contains 152,730 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_43\n\nLANGUAGE: unicode\nCODE:\n```\n1E140..1E149  ; Grapheme_Base\n1E14E         ; Grapheme_Base\n1E14F         ; Grapheme_Base\n1E290..1E2AD  ; Grapheme_Base\n1E2C0..1E2EB  ; Grapheme_Base\n1E2F0..1E2F9  ; Grapheme_Base\n1E2FF         ; Grapheme_Base\n1E4D0..1E4EA  ; Grapheme_Base\n1E4EB         ; Grapheme_Base\n1E4F0..1E4F9  ; Grapheme_Base\n1E5D0..1E5ED  ; Grapheme_Base\n1E5F0         ; Grapheme_Base\n1E5F1..1E5FA  ; Grapheme_Base\n1E5FF         ; Grapheme_Base\n1E7E0..1E7E6  ; Grapheme_Base\n1E7E8..1E7EB  ; Grapheme_Base\n1E7ED..1E7EE  ; Grapheme_Base\n1E7F0..1E7FE  ; Grapheme_Base\n1E800..1E8C4  ; Grapheme_Base\n1E8C7..1E8CF  ; Grapheme_Base\n1E900..1E943  ; Grapheme_Base\n1E94B         ; Grapheme_Base\n1E950..1E959  ; Grapheme_Base\n1E95E..1E95F  ; Grapheme_Base\n1EC71..1ECAB  ; Grapheme_Base\n1ECAC         ; Grapheme_Base\n1ECAD..1ECAF  ; Grapheme_Base\n1ECB0         ; Grapheme_Base\n1ECB1..1ECB4  ; Grapheme_Base\n1ED01..1ED2D  ; Grapheme_Base\n1ED2E         ; Grapheme_Base\n1ED2F..1ED3D  ; Grapheme_Base\n1EE00..1EE03  ; Grapheme_Base\n1EE05..1EE1F  ; Grapheme_Base\n1EE21..1EE22  ; Grapheme_Base\n1EE24         ; Grapheme_Base\n1EE27         ; Grapheme_Base\n1EE29..1EE32  ; Grapheme_Base\n1EE34..1EE37  ; Grapheme_Base\n1EE39         ; Grapheme_Base\n1EE3B         ; Grapheme_Base\n1EE42         ; Grapheme_Base\n1EE47         ; Grapheme_Base\n1EE49         ; Grapheme_Base\n1EE4B         ; Grapheme_Base\n1EE4D..1EE4F  ; Grapheme_Base\n1EE51..1EE52  ; Grapheme_Base\n1EE54         ; Grapheme_Base\n1EE57         ; Grapheme_Base\n1EE59         ; Grapheme_Base\n1EE5B         ; Grapheme_Base\n1EE5D         ; Grapheme_Base\n1EE5F         ; Grapheme_Base\n1EE61..1EE62  ; Grapheme_Base\n1EE64         ; Grapheme_Base\n1EE67..1EE6A  ; Grapheme_Base\n1EE6C..1EE72  ; Grapheme_Base\n1EE74..1EE77  ; Grapheme_Base\n1EE79..1EE7C  ; Grapheme_Base\n1EE7E         ; Grapheme_Base\n1EE80..1EE89  ; Grapheme_Base\n1EE8B..1EE9B  ; Grapheme_Base\n1EEA1..1EEA3  ; Grapheme_Base\n1EEA5..1EEA9  ; Grapheme_Base\n1EEAB..1EEBB  ; Grapheme_Base\n1EEF0..1EEF1  ; Grapheme_Base\n1F000..1F02B  ; Grapheme_Base\n1F030..1F093  ; Grapheme_Base\n1F0A0..1F0AE  ; Grapheme_Base\n1F0B1..1F0BF  ; Grapheme_Base\n1F0C1..1F0CF  ; Grapheme_Base\n1F0D1..1F0F5  ; Grapheme_Base\n1F100..1F10C  ; Grapheme_Base\n1F10D..1F1AD  ; Grapheme_Base\n1F1E6..1F202  ; Grapheme_Base\n1F210..1F23B  ; Grapheme_Base\n1F240..1F248  ; Grapheme_Base\n1F250..1F251  ; Grapheme_Base\n1F260..1F265  ; Grapheme_Base\n1F300..1F3FA  ; Grapheme_Base\n1F3FB..1F3FF  ; Grapheme_Base\n1F400..1F6D7  ; Grapheme_Base\n1F6DC..1F6EC  ; Grapheme_Base\n1F6F0..1F6FC  ; Grapheme_Base\n1F700..1F776  ; Grapheme_Base\n1F77B..1F7D9  ; Grapheme_Base\n1F7E0..1F7EB  ; Grapheme_Base\n1F7F0         ; Grapheme_Base\n1F800..1F80B  ; Grapheme_Base\n1F810..1F847  ; Grapheme_Base\n1F850..1F859  ; Grapheme_Base\n1F860..1F887  ; Grapheme_Base\n1F890..1F8AD  ; Grapheme_Base\n1F8B0..1F8BB  ; Grapheme_Base\n1F8C0..1F8C1  ; Grapheme_Base\n1F900..1FA53  ; Grapheme_Base\n1FA60..1FA6D  ; Grapheme_Base\n1FA70..1FA7C  ; Grapheme_Base\n1FA80..1FA89  ; Grapheme_Base\n1FA8F..1FAC6  ; Grapheme_Base\n1FACE..1FADC  ; Grapheme_Base\n1FADF..1FAE9  ; Grapheme_Base\n1FAF0..1FAF8  ; Grapheme_Base\n1FB00..1FB92  ; Grapheme_Base\n1FB94..1FBEF  ; Grapheme_Base\n1FBF0..1FBF9  ; Grapheme_Base\n20000..2A6DF  ; Grapheme_Base\n2A700..2B739  ; Grapheme_Base\n2B740..2B81D  ; Grapheme_Base\n2B820..2CEA1  ; Grapheme_Base\n2CEB0..2EBE0  ; Grapheme_Base\n2EBF0..2EE5D  ; Grapheme_Base\n2F800..2FA1D  ; Grapheme_Base\n30000..3134A  ; Grapheme_Base\n31350..323AF  ; Grapheme_Base\n```\n\n----------------------------------------\n\nTITLE: Normalizing Boolean Configuration Values for Swift\nDESCRIPTION: Applies the normalize_boolean_spelling function to a set of Swift configuration variables to ensure consistent TRUE/FALSE values across the build system. This affects test configuration and feature availability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\n# Normalize spelling of boolean values.\nnormalize_boolean_spelling(LLVM_ENABLE_ASSERTIONS)\nnormalize_boolean_spelling(SWIFT_STDLIB_ASSERTIONS)\nnormalize_boolean_spelling(SWIFT_AST_VERIFIER)\nnormalize_boolean_spelling(SWIFT_ASAN_BUILD)\nnormalize_boolean_spelling(SWIFT_ENABLE_SOURCEKIT_TESTS)\nnormalize_boolean_spelling(SWIFT_ENABLE_EXPERIMENTAL_DIFFERENTIABLE_PROGRAMMING)\nnormalize_boolean_spelling(SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY)\nnormalize_boolean_spelling(SWIFT_ENABLE_EXPERIMENTAL_DISTRIBUTED)\nnormalize_boolean_spelling(SWIFT_ENABLE_EXPERIMENTAL_STRING_PROCESSING)\nnormalize_boolean_spelling(SWIFT_ENABLE_EXPERIMENTAL_OBSERVATION)\nnormalize_boolean_spelling(SWIFT_ENABLE_EXPERIMENTAL_POINTER_BOUNDS)\nnormalize_boolean_spelling(SWIFT_ENABLE_MACCATALYST)\nnormalize_boolean_spelling(SWIFT_RUN_TESTS_WITH_HOST_COMPILER)\nnormalize_boolean_spelling(SWIFT_RUNTIME_ENABLE_LEAK_CHECKER)\nnormalize_boolean_spelling(SWIFT_OPTIMIZED)\nnormalize_boolean_spelling(SWIFT_STDLIB_SINGLE_THREADED_CONCURRENCY)\nnormalize_boolean_spelling(SWIFT_ENABLE_REFLECTION)\nnormalize_boolean_spelling(SWIFT_ENABLE_RUNTIME_FUNCTION_COUNTERS)\nnormalize_boolean_spelling(SWIFT_STDLIB_ENABLE_DEBUG_PRECONDITIONS_IN_RELEASE)\nnormalize_boolean_spelling(SWIFT_HAVE_LIBXML2)\nnormalize_boolean_spelling(SWIFT_INCLUDE_TOOLS)\nnormalize_boolean_spelling(SWIFT_STDLIB_STATIC_PRINT)\nnormalize_boolean_spelling(SWIFT_STDLIB_ENABLE_UNICODE_DATA)\nnormalize_boolean_spelling(SWIFT_ENABLE_DISPATCH)\nnormalize_boolean_spelling(SWIFT_STDLIB_ENABLE_OBJC_INTEROP)\nnormalize_boolean_spelling(SWIFT_ENABLE_BACKTRACING)\nnormalize_boolean_spelling(SWIFT_ENABLE_RUNTIME_MODULE)\nnormalize_boolean_spelling(SWIFT_BUILD_SWIFT_SYNTAX)\nnormalize_boolean_spelling(SWIFT_ENABLE_SYNCHRONIZATION)\nnormalize_boolean_spelling(SWIFT_ENABLE_VOLATILE)\nnormalize_boolean_spelling(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)\nnormalize_boolean_spelling(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB_CROSS_COMPILING)\nnormalize_boolean_spelling(SWIFT_BUILD_REMOTE_MIRROR)\nis_build_type_optimized(\"${SWIFT_STDLIB_BUILD_TYPE}\" SWIFT_OPTIMIZED)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Modifier Letter Code Points\nDESCRIPTION: This code snippet defines Unicode code points and ranges that are categorized as Modifier Letter (Lm) in the General Category. It includes individual code points and ranges with their corresponding descriptions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_11\n\nLANGUAGE: Unicode\nCODE:\n```\n02B0..02C1    ; Lm #  [18] MODIFIER LETTER SMALL H..MODIFIER LETTER REVERSED GLOTTAL STOP\n02C6..02D1    ; Lm #  [12] MODIFIER LETTER CIRCUMFLEX ACCENT..MODIFIER LETTER HALF TRIANGULAR COLON\n02E0..02E4    ; Lm #   [5] MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP\n02EC          ; Lm #       MODIFIER LETTER VOICING\n02EE          ; Lm #       MODIFIER LETTER DOUBLE APOSTROPHE\n0374          ; Lm #       GREEK NUMERAL SIGN\n037A          ; Lm #       GREEK YPOGEGRAMMENI\n0559          ; Lm #       ARMENIAN MODIFIER LETTER LEFT HALF RING\n0640          ; Lm #       ARABIC TATWEEL\n06E5..06E6    ; Lm #   [2] ARABIC SMALL WAW..ARABIC SMALL YEH\n07F4..07F5    ; Lm #   [2] NKO HIGH TONE APOSTROPHE..NKO LOW TONE APOSTROPHE\n07FA          ; Lm #       NKO LAJANYALAN\n081A          ; Lm #       SAMARITAN MODIFIER LETTER EPENTHETIC YUT\n0824          ; Lm #       SAMARITAN MODIFIER LETTER SHORT A\n0828          ; Lm #       SAMARITAN MODIFIER LETTER I\n08C9          ; Lm #       ARABIC SMALL FARSI YEH\n0971          ; Lm #       DEVANAGARI SIGN HIGH SPACING DOT\n0E46          ; Lm #       THAI CHARACTER MAIYAMOK\n0EC6          ; Lm #       LAO KO LA\n10FC          ; Lm #       MODIFIER LETTER GEORGIAN NAR\n17D7          ; Lm #       KHMER SIGN LEK TOO\n1843          ; Lm #       MONGOLIAN LETTER TODO LONG VOWEL SIGN\n1AA7          ; Lm #       TAI THAM SIGN MAI YAMOK\n1C78..1C7D    ; Lm #   [6] OL CHIKI MU TTUDDAG..OL CHIKI AHAD\n1D2C..1D6A    ; Lm #  [63] MODIFIER LETTER CAPITAL A..GREEK SUBSCRIPT SMALL LETTER CHI\n1D78          ; Lm #       MODIFIER LETTER CYRILLIC EN\n1D9B..1DBF    ; Lm #  [37] MODIFIER LETTER SMALL TURNED ALPHA..MODIFIER LETTER SMALL THETA\n2071          ; Lm #       SUPERSCRIPT LATIN SMALL LETTER I\n207F          ; Lm #       SUPERSCRIPT LATIN SMALL LETTER N\n2090..209C    ; Lm #  [13] LATIN SUBSCRIPT SMALL LETTER A..LATIN SUBSCRIPT SMALL LETTER T\n2C7C..2C7D    ; Lm #   [2] LATIN SUBSCRIPT SMALL LETTER J..MODIFIER LETTER CAPITAL V\n2D6F          ; Lm #       TIFINAGH MODIFIER LETTER LABIALIZATION MARK\n2E2F          ; Lm #       VERTICAL TILDE\n3005          ; Lm #       IDEOGRAPHIC ITERATION MARK\n3031..3035    ; Lm #   [5] VERTICAL KANA REPEAT MARK..VERTICAL KANA REPEAT MARK LOWER HALF\n303B          ; Lm #       VERTICAL IDEOGRAPHIC ITERATION MARK\n309D..309E    ; Lm #   [2] HIRAGANA ITERATION MARK..HIRAGANA VOICED ITERATION MARK\n30FC..30FE    ; Lm #   [3] KATAKANA-HIRAGANA PROLONGED SOUND MARK..KATAKANA VOICED ITERATION MARK\nA015          ; Lm #       YI SYLLABLE WU\nA4F8..A4FD    ; Lm #   [6] LISU LETTER TONE MYA TI..LISU LETTER TONE MYA JEU\nA60C          ; Lm #       VAI SYLLABLE LENGTHENER\nA67F          ; Lm #       CYRILLIC PAYEROK\nA69C..A69D    ; Lm #   [2] MODIFIER LETTER CYRILLIC HARD SIGN..MODIFIER LETTER CYRILLIC SOFT SIGN\nA717..A71F    ; Lm #   [9] MODIFIER LETTER DOT VERTICAL BAR..MODIFIER LETTER LOW INVERTED EXCLAMATION MARK\nA770          ; Lm #       MODIFIER LETTER US\nA788          ; Lm #       MODIFIER LETTER LOW CIRCUMFLEX ACCENT\nA7F2..A7F4    ; Lm #   [3] MODIFIER LETTER CAPITAL C..MODIFIER LETTER CAPITAL Q\nA7F8..A7F9    ; Lm #   [2] MODIFIER LETTER CAPITAL H WITH STROKE..MODIFIER LETTER SMALL LIGATURE OE\nA9CF          ; Lm #       JAVANESE PANGRANGKEP\nA9E6          ; Lm #       MYANMAR MODIFIER LETTER SHAN REDUPLICATION\nAA70          ; Lm #       MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION\nAADD          ; Lm #       TAI VIET SYMBOL SAM\nAAF3..AAF4    ; Lm #   [2] MEETEI MAYEK SYLLABLE REPETITION MARK..MEETEI MAYEK WORD REPETITION MARK\nAB5C..AB5F    ; Lm #   [4] MODIFIER LETTER SMALL HENG..MODIFIER LETTER SMALL U WITH LEFT HOOK\nAB69          ; Lm #       MODIFIER LETTER SMALL TURNED W\nFF70          ; Lm #       HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK\nFF9E..FF9F    ; Lm #   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK\n10780..10785  ; Lm #   [6] MODIFIER LETTER SMALL CAPITAL AA..MODIFIER LETTER SMALL B WITH HOOK\n10787..107B0  ; Lm #  [42] MODIFIER LETTER SMALL DZ DIGRAPH..MODIFIER LETTER SMALL V WITH RIGHT HOOK\n107B2..107BA  ; Lm #   [9] MODIFIER LETTER SMALL CAPITAL Y..MODIFIER LETTER SMALL S WITH CURL\n10D4E         ; Lm #       GARAY VOWEL LENGTH MARK\n10D6F         ; Lm #       GARAY REDUPLICATION MARK\n16B40..16B43  ; Lm #   [4] PAHAWH HMONG SIGN VOS SEEV..PAHAWH HMONG SIGN IB YAM\n16D40..16D42  ; Lm #   [3] KIRAT RAI SIGN ANUSVARA..KIRAT RAI SIGN VISARGA\n16D6B..16D6C  ; Lm #   [2] KIRAT RAI SIGN VIRAMA..KIRAT RAI SIGN SAAT\n16F93..16F9F  ; Lm #  [13] MIAO LETTER TONE-2..MIAO LETTER REFORMED TONE-8\n16FE0..16FE1  ; Lm #   [2] TANGUT ITERATION MARK..NUSHU ITERATION MARK\n16FE3         ; Lm #       OLD CHINESE ITERATION MARK\n1AFF0..1AFF3  ; Lm #   [4] KATAKANA LETTER MINNAN TONE-2..KATAKANA LETTER MINNAN TONE-5\n1AFF5..1AFFB  ; Lm #   [7] KATAKANA LETTER MINNAN TONE-7..KATAKANA LETTER MINNAN NASALIZED TONE-5\n1AFFD..1AFFE  ; Lm #   [2] KATAKANA LETTER MINNAN NASALIZED TONE-7..KATAKANA LETTER MINNAN NASALIZED TONE-8\n1E030..1E06D  ; Lm #  [62] MODIFIER LETTER CYRILLIC SMALL A..MODIFIER LETTER CYRILLIC SMALL STRAIGHT U WITH STROKE\n1E137..1E13D  ; Lm #   [7] NYIAKENG PUACHUE HMONG SIGN FOR PERSON..NYIAKENG PUACHUE HMONG SYLLABLE LENGTHENER\n1E4EB         ; Lm #       NAG MUNDARI SIGN OJOD\n1E94B         ; Lm #       ADLAM NASALIZATION MARK\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Syntax and Regex Parser Options in CMake\nDESCRIPTION: Sets options for building Swift syntax and the regex parser, with dependencies between them enforced through CMake logic.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_55\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_BUILD_SWIFT_SYNTAX\n  \"Enable building swift syntax\"\n  FALSE)\n\noption(SWIFT_BUILD_REGEX_PARSER_IN_COMPILER\n    \"Build the Swift regex parser as part of the compiler.\"\n    TRUE)\nif(SWIFT_BUILD_REGEX_PARSER_IN_COMPILER AND NOT SWIFT_BUILD_SWIFT_SYNTAX)\n  message(WARNING \"Force setting SWIFT_BUILD_REGEX_PARSER_IN_COMPILER=OFF because Swift parser integration is disabled\")\n  set(SWIFT_BUILD_REGEX_PARSER_IN_COMPILER OFF)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Including Library Targets in CMake ALL Target\nDESCRIPTION: A workaround to ensure all platform-specific variants of the library are included in the CMake ALL target and are built by default. This loop iterates through all Swift SDKs and explicitly sets EXCLUDE_FROM_ALL to FALSE for each corresponding target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CompatibilityDynamicReplacements/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# FIXME: We need a more flexible mechanism to add lipo targets generated by\n# add_swift_target_library to the ALL target. Until then this hack is necessary\n# to ensure these libraries build.\nforeach(sdk ${SWIFT_SDKS})\n  set(target_name \"${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n  if(NOT TARGET \"${target_name}\")\n    continue()\n  endif()\n\n  set_target_properties(\"${target_name}\"\n    PROPERTIES\n      EXCLUDE_FROM_ALL FALSE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Removed Declarations in Swift APINotesTest\nDESCRIPTION: List of removed functions and type aliases from the APINotesTest module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/apinotes-diags.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nObjcProt.protMemberFunc2() // Removed\nObjcProt.protMemberFunc3() // Removed\nSwiftTypeWithMethodLeft.getPropertyA() // Removed\ntypealias CatAttributeName // Removed\n```\n\n----------------------------------------\n\nTITLE: Configuring SDKs for Xcode Environment\nDESCRIPTION: Sets up SDK configuration specifically for Xcode builds, addressing version-min flag issues. This ensures that the build system correctly handles SDK selection when building with Xcode.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_70\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Configure SDKs.\n#\n\nif(XCODE)\n  # FIXME: It used to be the case that Xcode would force\n  # -m${platform}-version-min flags that would conflict with those computed\n  # by build-script. version-min flags are deprecated in favor of -target since\n  # clang-11, so we might be able to undo this.\n  set(SWIFT_SDKS \"OSX\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SourceKit XPC Service Build with Conditional Dependencies in CMake\nDESCRIPTION: This CMake snippet configures the build process for the SourceKit XPC Service. It adds the service target if BUILD_SOURCEKIT_XPC_SERVICE is enabled, sets up appropriate library dependencies based on whether the in-process version is being installed, and adds a special definition for non-macOS deployments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/XPC/Service/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif (BUILD_SOURCEKIT_XPC_SERVICE)\n  add_sourcekit_xpc_service(SourceKitService sourcekitd\n    XPCService.cpp\n    LLVM_LINK_COMPONENTS support coverage\n    HAS_SWIFT_MODULES\n  )\n  swift_is_installing_component(sourcekit-inproc SOURCEKIT_INSTALLING_INPROC)\n  if(SOURCEKIT_INSTALLING_INPROC)\n    target_link_libraries(SourceKitService PUBLIC sourcekitdInProc)\n  else()\n    target_link_libraries(SourceKitService PRIVATE\n      SourceKitSwiftLang\n      sourcekitdAPI\n      sourcekitdService)\n  endif()\nendif()\n\nif (NOT SOURCEKIT_DEPLOYMENT_OS MATCHES \"^macosx\")\n  add_definitions(-DSOURCEKIT_UNVERSIONED_FRAMEWORK_BUNDLE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode 3.0.0 Code Point Range Definitions\nDESCRIPTION: Defines ranges of Unicode code points and their corresponding character descriptions as assigned in Unicode 3.0.0. Includes various scripts like Latin, Greek, Cyrillic, Arabic, and others along with special symbols and ideographs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n01F6..01F9    ; 3.0 #   [4] LATIN CAPITAL LETTER HWAIR..LATIN SMALL LETTER N WITH GRAVE\n0218..021F    ; 3.0 #   [8] LATIN CAPITAL LETTER S WITH COMMA BELOW..LATIN SMALL LETTER H WITH CARON\n0222..0233    ; 3.0 #  [18] LATIN CAPITAL LETTER OU..LATIN SMALL LETTER Y WITH MACRON\n02A9..02AD    ; 3.0 #   [5] LATIN SMALL LETTER FENG DIGRAPH..LATIN LETTER BIDENTAL PERCUSSIVE\n[...truncated for brevity...]\nFFF9..FFFB    ; 3.0 #   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR\n```\n\n----------------------------------------\n\nTITLE: Unicode 10.0 Code Point Assignments (June 2017)\nDESCRIPTION: Lists all Unicode code points that were newly assigned in Unicode version 10.0.0, released in June 2017. Includes 8518 total code points across various scripts and symbol categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\n# Newly assigned in Unicode 10.0.0 (June, 2017)\n\n0860..086A    ; 10.0 #  [11] SYRIAC LETTER MALAYALAM NGA..SYRIAC LETTER MALAYALAM SSA\n09FC..09FD    ; 10.0 #   [2] BENGALI LETTER VEDIC ANUSVARA..BENGALI ABBREVIATION SIGN\n0AFA..0AFF    ; 10.0 #   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE\n0D00          ; 10.0 #       MALAYALAM SIGN COMBINING ANUSVARA ABOVE\n0D3B..0D3C    ; 10.0 #   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA\n1CF7          ; 10.0 #       VEDIC SIGN ATIKRAMA\n1DF6..1DF9    ; 10.0 #   [4] COMBINING KAVYKA ABOVE RIGHT..COMBINING WIDE INVERTED BRIDGE BELOW\n20BF          ; 10.0 #       BITCOIN SIGN\n23FF          ; 10.0 #       OBSERVER EYE SYMBOL\n2BD2          ; 10.0 #       GROUP MARK\n2E45..2E49    ; 10.0 #   [5] INVERTED LOW KAVYKA..DOUBLE STACKED COMMA\n312E          ; 10.0 #       BOPOMOFO LETTER O WITH DOT ABOVE\n9FD6..9FEA    ; 10.0 #  [21] CJK UNIFIED IDEOGRAPH-9FD6..CJK UNIFIED IDEOGRAPH-9FEA\n1032D..1032F  ; 10.0 #   [3] OLD ITALIC LETTER YE..OLD ITALIC LETTER SOUTHERN TSE\n11A00..11A47  ; 10.0 #  [72] ZANABAZAR SQUARE LETTER A..ZANABAZAR SQUARE SUBJOINER\n11A50..11A83  ; 10.0 #  [52] SOYOMBO LETTER A..SOYOMBO LETTER KSSA\n11A86..11A9C  ; 10.0 #  [23] SOYOMBO CLUSTER-INITIAL LETTER RA..SOYOMBO MARK DOUBLE SHAD\n11A9E..11AA2  ; 10.0 #   [5] SOYOMBO HEAD MARK WITH MOON AND SUN AND TRIPLE FLAME..SOYOMBO TERMINAL MARK-2\n11D00..11D06  ; 10.0 #   [7] MASARAM GONDI LETTER A..MASARAM GONDI LETTER E\n11D08..11D09  ; 10.0 #   [2] MASARAM GONDI LETTER AI..MASARAM GONDI LETTER O\n11D0B..11D36  ; 10.0 #  [44] MASARAM GONDI LETTER AU..MASARAM GONDI VOWEL SIGN VOCALIC R\n11D3A         ; 10.0 #       MASARAM GONDI VOWEL SIGN E\n11D3C..11D3D  ; 10.0 #   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O\n11D3F..11D47  ; 10.0 #   [9] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI RA-KARA\n11D50..11D59  ; 10.0 #  [10] MASARAM GONDI DIGIT ZERO..MASARAM GONDI DIGIT NINE\n16FE1         ; 10.0 #       NUSHU ITERATION MARK\n1B002..1B11E  ; 10.0 # [285] HENTAIGANA LETTER A-1..HENTAIGANA LETTER N-MU-MO-2\n1B170..1B2FB  ; 10.0 # [396] NUSHU CHARACTER-1B170..NUSHU CHARACTER-1B2FB\n1F260..1F265  ; 10.0 #   [6] ROUNDED SYMBOL FOR FU..ROUNDED SYMBOL FOR CAI\n1F6D3..1F6D4  ; 10.0 #   [2] STUPA..PAGODA\n1F6F7..1F6F8  ; 10.0 #   [2] SLED..FLYING SAUCER\n1F900..1F90B  ; 10.0 #  [12] CIRCLED CROSS FORMEE WITH FOUR DOTS..DOWNWARD FACING NOTCHED HOOK WITH DOT\n1F91F         ; 10.0 #       I LOVE YOU HAND SIGN\n1F928..1F92F  ; 10.0 #   [8] FACE WITH ONE EYEBROW RAISED..SHOCKED FACE WITH EXPLODING HEAD\n1F931..1F932  ; 10.0 #   [2] BREAST-FEEDING..PALMS UP TOGETHER\n1F94C         ; 10.0 #       CURLING STONE\n1F95F..1F96B  ; 10.0 #  [13] DUMPLING..CANNED FOOD\n1F992..1F997  ; 10.0 #   [6] GIRAFFE FACE..CRICKET\n1F9D0..1F9E6  ; 10.0 #  [23] FACE WITH MONOCLE..SOCKS\n2CEB0..2EBE0  ; 10.0 # [7473] CJK UNIFIED IDEOGRAPH-2CEB0..CJK UNIFIED IDEOGRAPH-2EBE0\n\n# Total code points: 8518\n```\n\n----------------------------------------\n\nTITLE: Installing CxxStdlib API Notes\nDESCRIPTION: Configures the installation of C++ Standard Library API notes as part of the compiler component. This ensures the API notes are properly distributed with the Swift compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/std/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nswift_install_in_component(FILES std.apinotes\n    DESTINATION \"lib/swift/apinotes\"\n    COMPONENT compiler)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Dependency for Swift Stdlib in CMake\nDESCRIPTION: Configures the Runtime dependency based on SWIFT_BUILD_STDLIB and SWIFT_ENABLE_RUNTIME_MODULE flags. This ensures the Runtime module is only included when building the standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/libexec/swift-backtrace/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(runtime)\nif(SWIFT_BUILD_STDLIB AND SWIFT_ENABLE_RUNTIME_MODULE)\n  set(runtime Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Coroutine Type with Yielded Values in SIL\nDESCRIPTION: Example of how a coroutine type with yielded values is declared in SIL. Yielded values are prefixed with the @yields attribute in the result list of a function type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_8\n\nLANGUAGE: SIL\nCODE:\n```\n@yields T\n```\n\n----------------------------------------\n\nTITLE: Compiler Version Configuration\nDESCRIPTION: Sets compiler version compile flag for ParseVersion.cpp when version information is available.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Parse/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_COMPILER_VERSION)\n  set_property(SOURCE ParseVersion.cpp APPEND_STRING PROPERTY COMPILE_FLAGS\n    \" -DSWIFT_COMPILER_VERSION=\\\\\\\"${SWIFT_COMPILER_VERSION}\\\\\\\"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Objective-C Runtime Support Files\nDESCRIPTION: Adds Objective-C related source files to the Swift runtime that handle error objects and Swift object implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftRuntime PRIVATE\n  ErrorObject.mm\n  SwiftObject.mm)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Hatran Script\nDESCRIPTION: This snippet defines the Unicode block for the Hatran script, including letters and numbers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_88\n\nLANGUAGE: Unicode\nCODE:\n```\n108E0..108F2  ; Hatran # Lo  [19] HATRAN LETTER ALEPH..HATRAN LETTER QOPH\n108F4..108F5  ; Hatran # Lo   [2] HATRAN LETTER SHIN..HATRAN LETTER TAW\n108FB..108FF  ; Hatran # No   [5] HATRAN NUMBER ONE..HATRAN NUMBER ONE HUNDRED\n```\n\n----------------------------------------\n\nTITLE: Unicode Other Number Category Definitions\nDESCRIPTION: Defines code point ranges for characters categorized as Other Number (No), including superscripts, fractions, and various numbering systems across different scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_19\n\nLANGUAGE: unicode\nCODE:\n```\n00B2..00B3    ; No #   [2] SUPERSCRIPT TWO..SUPERSCRIPT THREE\n00B9          ; No #       SUPERSCRIPT ONE\n00BC..00BE    ; No #   [3] VULGAR FRACTION ONE QUARTER..VULGAR FRACTION THREE QUARTERS\n```\n\n----------------------------------------\n\nTITLE: Unicode ID_Compat_Math_Start Character List Definition\nDESCRIPTION: A list of Unicode code points with the ID_Compat_Math_Start property, which identifies mathematical symbols that can be used at the beginning of identifiers for backward compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_25\n\nLANGUAGE: Unicode\nCODE:\n```\n2202          ; ID_Compat_Math_Start # Sm       PARTIAL DIFFERENTIAL\n2207          ; ID_Compat_Math_Start # Sm       NABLA\n221E          ; ID_Compat_Math_Start # Sm       INFINITY\n1D6C1         ; ID_Compat_Math_Start # Sm       MATHEMATICAL BOLD NABLA\n1D6DB         ; ID_Compat_Math_Start # Sm       MATHEMATICAL BOLD PARTIAL DIFFERENTIAL\n1D6FB         ; ID_Compat_Math_Start # Sm       MATHEMATICAL ITALIC NABLA\n1D715         ; ID_Compat_Math_Start # Sm       MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL\n1D735         ; ID_Compat_Math_Start # Sm       MATHEMATICAL BOLD ITALIC NABLA\n1D74F         ; ID_Compat_Math_Start # Sm       MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL\n1D76F         ; ID_Compat_Math_Start # Sm       MATHEMATICAL SANS-SERIF BOLD NABLA\n1D789         ; ID_Compat_Math_Start # Sm       MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL\n1D7A9         ; ID_Compat_Math_Start # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA\n1D7C3         ; ID_Compat_Math_Start # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL\n\n# Total code points: 13\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_BUILD_SDK_OVERLAY Variable in CMake\nDESCRIPTION: Checks if the Swift SDK overlay is configured to be built (either statically or dynamically) by examining the SWIFT_BUILD_DYNAMIC_SDK_OVERLAY and SWIFT_BUILD_STATIC_SDK_OVERLAY variables. It sets the SWIFT_BUILD_SDK_OVERLAY variable to TRUE if either is set, and FALSE otherwise.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_DYNAMIC_SDK_OVERLAY OR SWIFT_BUILD_STATIC_SDK_OVERLAY)\n  set(SWIFT_BUILD_SDK_OVERLAY TRUE)\nelse()\n  set(SWIFT_BUILD_SDK_OVERLAY FALSE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Dash Characters in Unicode\nDESCRIPTION: This snippet defines the Unicode code points that have the Dash property. It includes various types of dashes and hyphens used in different scripts and contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n002D          ; Dash # Pd       HYPHEN-MINUS\n058A          ; Dash # Pd       ARMENIAN HYPHEN\n05BE          ; Dash # Pd       HEBREW PUNCTUATION MAQAF\n1400          ; Dash # Pd       CANADIAN SYLLABICS HYPHEN\n1806          ; Dash # Pd       MONGOLIAN TODO SOFT HYPHEN\n2010..2015    ; Dash # Pd   [6] HYPHEN..HORIZONTAL BAR\n2053          ; Dash # Po       SWUNG DASH\n207B          ; Dash # Sm       SUPERSCRIPT MINUS\n208B          ; Dash # Sm       SUBSCRIPT MINUS\n2212          ; Dash # Sm       MINUS SIGN\n2E17          ; Dash # Pd       DOUBLE OBLIQUE HYPHEN\n2E1A          ; Dash # Pd       HYPHEN WITH DIAERESIS\n2E3A..2E3B    ; Dash # Pd   [2] TWO-EM DASH..THREE-EM DASH\n2E40          ; Dash # Pd       DOUBLE HYPHEN\n2E5D          ; Dash # Pd       OBLIQUE HYPHEN\n301C          ; Dash # Pd       WAVE DASH\n3030          ; Dash # Pd       WAVY DASH\n30A0          ; Dash # Pd       KATAKANA-HIRAGANA DOUBLE HYPHEN\nFE31..FE32    ; Dash # Pd   [2] PRESENTATION FORM FOR VERTICAL EM DASH..PRESENTATION FORM FOR VERTICAL EN DASH\nFE58          ; Dash # Pd       SMALL EM DASH\nFE63          ; Dash # Pd       SMALL HYPHEN-MINUS\nFF0D          ; Dash # Pd       FULLWIDTH HYPHEN-MINUS\n10D6E         ; Dash # Pd       GARAY HYPHEN\n10EAD         ; Dash # Pd       YEZIDI HYPHENATION MARK\n```\n\n----------------------------------------\n\nTITLE: Initializing Runtime Build Flags\nDESCRIPTION: Sets up initial empty lists for various runtime compilation and linking flags used throughout the build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_RUNTIME_CXX_FLAGS)\nset(SWIFT_RUNTIME_LINK_FLAGS)\nset(SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS)\nset(SWIFT_RUNTIME_SWIFT_LINK_FLAGS)\n```\n\n----------------------------------------\n\nTITLE: Setting Exported Symbol File for sourcekitdInProc in CMake\nDESCRIPTION: This snippet determines the appropriate exported symbol file based on the system name. For Darwin systems, it uses a Darwin-specific file, otherwise it uses a general file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n  set(EXPORTED_SYMBOL_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/sourcekitdInProc-darwin.exports\")\nelse()\n  set(EXPORTED_SYMBOL_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/sourcekitdInProc.exports\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unassigned Unicode Code Points\nDESCRIPTION: This snippet defines ranges and individual code points that are unassigned in the Unicode standard. Each line specifies the hexadecimal value(s) of the code point(s), followed by 'Cn' to indicate the Unassigned category, and a comment with the reserved notation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_0\n\nLANGUAGE: Unicode\nCODE:\n```\n0378..0379    ; Cn #   [2] <reserved-0378>..<reserved-0379>\n0380..0383    ; Cn #   [4] <reserved-0380>..<reserved-0383>\n038B          ; Cn #       <reserved-038B>\n038D          ; Cn #       <reserved-038D>\n03A2          ; Cn #       <reserved-03A2>\n0530          ; Cn #       <reserved-0530>\n0557..0558    ; Cn #   [2] <reserved-0557>..<reserved-0558>\n058B..058C    ; Cn #   [2] <reserved-058B>..<reserved-058C>\n0590          ; Cn #       <reserved-0590>\n05C8..05CF    ; Cn #   [8] <reserved-05C8>..<reserved-05CF>\n```\n\n----------------------------------------\n\nTITLE: Swift Property Wrapper Attribute Example\nDESCRIPTION: Example showing the @propertyWrapper attribute that marks a type as a property wrapper in Swift. Property wrappers must include a wrappedValue property and follow specific initialization requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/property-wrapper-requirements.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@propertyWrapper\n```\n\n----------------------------------------\n\nTITLE: Basic Integer CustomStringConvertible Implementation\nDESCRIPTION: Implementation of CustomStringConvertibleInteger protocol for Int type with a simple toInt() conversion method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TextFormatting.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nextension Int : CustomStringConvertibleInteger {\n  func toInt() -> Int { return self }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SWIFT_INCLUDE_APINOTES Option in CMake\nDESCRIPTION: Defines a CMake build option `SWIFT_INCLUDE_APINOTES`. This controls whether targets are created for installing API notes into the built toolchain. The default value depends on the target system (TRUE on Darwin, FALSE otherwise), determined by the `_swift_include_apinotes_default` variable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_INCLUDE_APINOTES\n  \"Create targets for installing the remaining apinotes in the built toolchain.\"\n  ${_swift_include_apinotes_default})\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Version Information in CMake\nDESCRIPTION: Sets up version-related compile flags for the Swift Basic library, including major, minor, and patch versions. It also handles vendor information and compiler version strings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Basic/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(${CMAKE_CURRENT_LIST_DIR}/../../cmake/SwiftVersion.cmake)\nmessage(STATUS \"Swift version: ${SWIFT_VERSION}\")\nmessage(STATUS \"Swift vendor: ${SWIFT_VENDOR}\")\n\nstring(REGEX REPLACE \"([0-9]+)\\\\.[0-9]+(\\\\.[0-9]+)?\" \"\\\\1\" SWIFT_VERSION_MAJOR\n  ${SWIFT_VERSION})\nstring(REGEX REPLACE \"[0-9]+\\\\.([0-9]+)(\\\\.[0-9]+)?\" \"\\\\1\" SWIFT_VERSION_MINOR\n  ${SWIFT_VERSION})\n\nset_property(SOURCE Version.cpp APPEND_STRING PROPERTY COMPILE_FLAGS\n  \" -DSWIFT_VERSION=${SWIFT_VERSION} -DSWIFT_VERSION_MAJOR=${SWIFT_VERSION_MAJOR} -DSWIFT_VERSION_MINOR=${SWIFT_VERSION_MINOR}\")\n\nif (\"${SWIFT_VERSION}\" MATCHES \"[0-9]+\\\\.[0-9]+\\\\.[0-9]+\")\n  string(REGEX REPLACE \"[0-9]+\\\\.[0-9]+\\\\.([0-9]+)\" \"\\\\1\" SWIFT_VERSION_PATCHLEVEL\n    ${SWIFT_VERSION})\n  set_property(SOURCE Version.cpp APPEND_STRING PROPERTY COMPILE_FLAGS\n    \" -DSWIFT_HAS_VERSION_PATCHLEVEL=1 -DSWIFT_VERSION_PATCHLEVEL=${SWIFT_VERSION_PATCHLEVEL}\")\nelse()\n  set_property(SOURCE Version.cpp APPEND_STRING PROPERTY COMPILE_FLAGS\n    \" -DSWIFT_HAS_VERSION_PATCHLEVEL=0\")\nendif()\n\nif(NOT \"${SWIFT_VENDOR}\" STREQUAL \"\")\n  set_property(SOURCE Version.cpp APPEND_STRING PROPERTY COMPILE_FLAGS\n      \" -DSWIFT_VENDOR=\\\\\"${SWIFT_VENDOR}\\\\\"\")\nendif()\n\nset(SWIFT_COMPILER_VERSION \"\" CACHE STRING\n    \"The string that identifies the SCM commit(s) for this build\")\n\nmessage(STATUS \"Swift compiler version: ${SWIFT_COMPILER_VERSION}\")\nmessage(STATUS \"Embedded clang compiler version: ${CLANG_COMPILER_VERSION}\")\n\nif(SWIFT_COMPILER_VERSION)\n  set_property(SOURCE Version.cpp APPEND_STRING PROPERTY COMPILE_FLAGS\n    \" -DSWIFT_COMPILER_VERSION=\\\\\"${SWIFT_COMPILER_VERSION}\\\\\"\")\nendif()\n\nif(CLANG_COMPILER_VERSION)\n  set_property(SOURCE Version.cpp APPEND_STRING PROPERTY COMPILE_FLAGS\n    \" -DCLANG_COMPILER_VERSION=\\\\\"${CLANG_COMPILER_VERSION}\\\\\"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Latin, Greek, and Cyrillic Letters\nDESCRIPTION: This code snippet represents a Unicode character mapping table. Each line contains three fields: the Unicode code point of the uppercase letter, a mapping type (C for case mapping), and the corresponding lowercase Unicode code point or decomposition. This table is crucial for implementing case conversion in text processing systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n0206; C; 0207; # LATIN CAPITAL LETTER E WITH INVERTED BREVE\n0208; C; 0209; # LATIN CAPITAL LETTER I WITH DOUBLE GRAVE\n020A; C; 020B; # LATIN CAPITAL LETTER I WITH INVERTED BREVE\n020C; C; 020D; # LATIN CAPITAL LETTER O WITH DOUBLE GRAVE\n020E; C; 020F; # LATIN CAPITAL LETTER O WITH INVERTED BREVE\n0210; C; 0211; # LATIN CAPITAL LETTER R WITH DOUBLE GRAVE\n0212; C; 0213; # LATIN CAPITAL LETTER R WITH INVERTED BREVE\n0214; C; 0215; # LATIN CAPITAL LETTER U WITH DOUBLE GRAVE\n0216; C; 0217; # LATIN CAPITAL LETTER U WITH INVERTED BREVE\n0218; C; 0219; # LATIN CAPITAL LETTER S WITH COMMA BELOW\n021A; C; 021B; # LATIN CAPITAL LETTER T WITH COMMA BELOW\n021C; C; 021D; # LATIN CAPITAL LETTER YOGH\n021E; C; 021F; # LATIN CAPITAL LETTER H WITH CARON\n0220; C; 019E; # LATIN CAPITAL LETTER N WITH LONG RIGHT LEG\n0222; C; 0223; # LATIN CAPITAL LETTER OU\n0224; C; 0225; # LATIN CAPITAL LETTER Z WITH HOOK\n0226; C; 0227; # LATIN CAPITAL LETTER A WITH DOT ABOVE\n0228; C; 0229; # LATIN CAPITAL LETTER E WITH CEDILLA\n022A; C; 022B; # LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON\n022C; C; 022D; # LATIN CAPITAL LETTER O WITH TILDE AND MACRON\n022E; C; 022F; # LATIN CAPITAL LETTER O WITH DOT ABOVE\n0230; C; 0231; # LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON\n0232; C; 0233; # LATIN CAPITAL LETTER Y WITH MACRON\n023A; C; 2C65; # LATIN CAPITAL LETTER A WITH STROKE\n023B; C; 023C; # LATIN CAPITAL LETTER C WITH STROKE\n023D; C; 019A; # LATIN CAPITAL LETTER L WITH BAR\n023E; C; 2C66; # LATIN CAPITAL LETTER T WITH DIAGONAL STROKE\n0241; C; 0242; # LATIN CAPITAL LETTER GLOTTAL STOP\n0243; C; 0180; # LATIN CAPITAL LETTER B WITH STROKE\n0244; C; 0289; # LATIN CAPITAL LETTER U BAR\n0245; C; 028C; # LATIN CAPITAL LETTER TURNED V\n0246; C; 0247; # LATIN CAPITAL LETTER E WITH STROKE\n0248; C; 0249; # LATIN CAPITAL LETTER J WITH STROKE\n024A; C; 024B; # LATIN CAPITAL LETTER SMALL Q WITH HOOK TAIL\n024C; C; 024D; # LATIN CAPITAL LETTER R WITH STROKE\n024E; C; 024F; # LATIN CAPITAL LETTER Y WITH STROKE\n0345; C; 03B9; # COMBINING GREEK YPOGEGRAMMENI\n0370; C; 0371; # GREEK CAPITAL LETTER HETA\n0372; C; 0373; # GREEK CAPITAL LETTER ARCHAIC SAMPI\n0376; C; 0377; # GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA\n037F; C; 03F3; # GREEK CAPITAL LETTER YOT\n0386; C; 03AC; # GREEK CAPITAL LETTER ALPHA WITH TONOS\n0388; C; 03AD; # GREEK CAPITAL LETTER EPSILON WITH TONOS\n0389; C; 03AE; # GREEK CAPITAL LETTER ETA WITH TONOS\n038A; C; 03AF; # GREEK CAPITAL LETTER IOTA WITH TONOS\n038C; C; 03CC; # GREEK CAPITAL LETTER OMICRON WITH TONOS\n038E; C; 03CD; # GREEK CAPITAL LETTER UPSILON WITH TONOS\n038F; C; 03CE; # GREEK CAPITAL LETTER OMEGA WITH TONOS\n0390; F; 03B9 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS\n0391; C; 03B1; # GREEK CAPITAL LETTER ALPHA\n0392; C; 03B2; # GREEK CAPITAL LETTER BETA\n0393; C; 03B3; # GREEK CAPITAL LETTER GAMMA\n0394; C; 03B4; # GREEK CAPITAL LETTER DELTA\n0395; C; 03B5; # GREEK CAPITAL LETTER EPSILON\n0396; C; 03B6; # GREEK CAPITAL LETTER ZETA\n0397; C; 03B7; # GREEK CAPITAL LETTER ETA\n0398; C; 03B8; # GREEK CAPITAL LETTER THETA\n0399; C; 03B9; # GREEK CAPITAL LETTER IOTA\n039A; C; 03BA; # GREEK CAPITAL LETTER KAPPA\n039B; C; 03BB; # GREEK CAPITAL LETTER LAMDA\n039C; C; 03BC; # GREEK CAPITAL LETTER MU\n039D; C; 03BD; # GREEK CAPITAL LETTER NU\n039E; C; 03BE; # GREEK CAPITAL LETTER XI\n039F; C; 03BF; # GREEK CAPITAL LETTER OMICRON\n03A0; C; 03C0; # GREEK CAPITAL LETTER PI\n03A1; C; 03C1; # GREEK CAPITAL LETTER RHO\n03A3; C; 03C3; # GREEK CAPITAL LETTER SIGMA\n03A4; C; 03C4; # GREEK CAPITAL LETTER TAU\n03A5; C; 03C5; # GREEK CAPITAL LETTER UPSILON\n03A6; C; 03C6; # GREEK CAPITAL LETTER PHI\n03A7; C; 03C7; # GREEK CAPITAL LETTER CHI\n03A8; C; 03C8; # GREEK CAPITAL LETTER PSI\n03A9; C; 03C9; # GREEK CAPITAL LETTER OMEGA\n03AA; C; 03CA; # GREEK CAPITAL LETTER IOTA WITH DIALYTIKA\n03AB; C; 03CB; # GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA\n03B0; F; 03C5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS\n03C2; C; 03C3; # GREEK SMALL LETTER FINAL SIGMA\n03CF; C; 03D7; # GREEK CAPITAL KAI SYMBOL\n03D0; C; 03B2; # GREEK BETA SYMBOL\n03D1; C; 03B8; # GREEK THETA SYMBOL\n03D5; C; 03C6; # GREEK PHI SYMBOL\n03D6; C; 03C0; # GREEK PI SYMBOL\n03D8; C; 03D9; # GREEK LETTER ARCHAIC KOPPA\n03DA; C; 03DB; # GREEK LETTER STIGMA\n03DC; C; 03DD; # GREEK LETTER DIGAMMA\n03DE; C; 03DF; # GREEK LETTER KOPPA\n03E0; C; 03E1; # GREEK LETTER SAMPI\n03E2; C; 03E3; # COPTIC CAPITAL LETTER SHEI\n03E4; C; 03E5; # COPTIC CAPITAL LETTER FEI\n03E6; C; 03E7; # COPTIC CAPITAL LETTER KHEI\n03E8; C; 03E9; # COPTIC CAPITAL LETTER HORI\n03EA; C; 03EB; # COPTIC CAPITAL LETTER GANGIA\n03EC; C; 03ED; # COPTIC CAPITAL LETTER SHIMA\n03EE; C; 03EF; # COPTIC CAPITAL LETTER DEI\n03F0; C; 03BA; # GREEK KAPPA SYMBOL\n03F1; C; 03C1; # GREEK RHO SYMBOL\n03F4; C; 03B8; # GREEK CAPITAL THETA SYMBOL\n03F5; C; 03B5; # GREEK LUNATE EPSILON SYMBOL\n03F7; C; 03F8; # GREEK CAPITAL LETTER SHO\n03F9; C; 03F2; # GREEK CAPITAL LUNATE SIGMA SYMBOL\n03FA; C; 03FB; # GREEK CAPITAL LETTER SAN\n03FD; C; 037B; # GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL\n03FE; C; 037C; # GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL\n03FF; C; 037D; # GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL\n0400; C; 0450; # CYRILLIC CAPITAL LETTER IE WITH GRAVE\n0401; C; 0451; # CYRILLIC CAPITAL LETTER IO\n0402; C; 0452; # CYRILLIC CAPITAL LETTER DJE\n0403; C; 0453; # CYRILLIC CAPITAL LETTER GJE\n0404; C; 0454; # CYRILLIC CAPITAL LETTER UKRAINIAN IE\n0405; C; 0455; # CYRILLIC CAPITAL LETTER DZE\n0406; C; 0456; # CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I\n0407; C; 0457; # CYRILLIC CAPITAL LETTER YI\n0408; C; 0458; # CYRILLIC CAPITAL LETTER JE\n0409; C; 0459; # CYRILLIC CAPITAL LETTER LJE\n040A; C; 045A; # CYRILLIC CAPITAL LETTER NJE\n040B; C; 045B; # CYRILLIC CAPITAL LETTER TSHE\n040C; C; 045C; # CYRILLIC CAPITAL LETTER KJE\n040D; C; 045D; # CYRILLIC CAPITAL LETTER I WITH GRAVE\n040E; C; 045E; # CYRILLIC CAPITAL LETTER SHORT U\n040F; C; 045F; # CYRILLIC CAPITAL LETTER DZHE\n0410; C; 0430; # CYRILLIC CAPITAL LETTER A\n0411; C; 0431; # CYRILLIC CAPITAL LETTER BE\n0412; C; 0432; # CYRILLIC CAPITAL LETTER VE\n0413; C; 0433; # CYRILLIC CAPITAL LETTER GHE\n0414; C; 0434; # CYRILLIC CAPITAL LETTER DE\n0415; C; 0435; # CYRILLIC CAPITAL LETTER IE\n0416; C; 0436; # CYRILLIC CAPITAL LETTER ZHE\n0417; C; 0437; # CYRILLIC CAPITAL LETTER ZE\n0418; C; 0438; # CYRILLIC CAPITAL LETTER I\n0419; C; 0439; # CYRILLIC CAPITAL LETTER SHORT I\n041A; C; 043A; # CYRILLIC CAPITAL LETTER KA\n041B; C; 043B; # CYRILLIC CAPITAL LETTER EL\n041C; C; 043C; # CYRILLIC CAPITAL LETTER EM\n041D; C; 043D; # CYRILLIC CAPITAL LETTER EN\n041E; C; 043E; # CYRILLIC CAPITAL LETTER O\n041F; C; 043F; # CYRILLIC CAPITAL LETTER PE\n0420; C; 0440; # CYRILLIC CAPITAL LETTER ER\n0421; C; 0441; # CYRILLIC CAPITAL LETTER ES\n0422; C; 0442; # CYRILLIC CAPITAL LETTER TE\n0423; C; 0443; # CYRILLIC CAPITAL LETTER U\n0424; C; 0444; # CYRILLIC CAPITAL LETTER EF\n0425; C; 0445; # CYRILLIC CAPITAL LETTER HA\n0426; C; 0446; # CYRILLIC CAPITAL LETTER TSE\n0427; C; 0447; # CYRILLIC CAPITAL LETTER CHE\n0428; C; 0448; # CYRILLIC CAPITAL LETTER SHA\n0429; C; 0449; # CYRILLIC CAPITAL LETTER SHCHA\n042A; C; 044A; # CYRILLIC CAPITAL LETTER HARD SIGN\n042B; C; 044B; # CYRILLIC CAPITAL LETTER YERU\n042C; C; 044C; # CYRILLIC CAPITAL LETTER SOFT SIGN\n042D; C; 044D; # CYRILLIC CAPITAL LETTER E\n042E; C; 044E; # CYRILLIC CAPITAL LETTER YU\n042F; C; 044F; # CYRILLIC CAPITAL LETTER YA\n0460; C; 0461; # CYRILLIC CAPITAL LETTER OMEGA\n0462; C; 0463; # CYRILLIC CAPITAL LETTER YAT\n0464; C; 0465; # CYRILLIC CAPITAL LETTER IOTIFIED E\n0466; C; 0467; # CYRILLIC CAPITAL LETTER LITTLE YUS\n0468; C; 0469; # CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS\n046A; C; 046B; # CYRILLIC CAPITAL LETTER BIG YUS\n046C; C; 046D; # CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS\n046E; C; 046F; # CYRILLIC CAPITAL LETTER KSI\n0470; C; 0471; # CYRILLIC CAPITAL LETTER PSI\n0472; C; 0473; # CYRILLIC CAPITAL LETTER FITA\n0474; C; 0475; # CYRILLIC CAPITAL LETTER IZHITSA\n0476; C; 0477; # CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT\n0478; C; 0479; # CYRILLIC CAPITAL LETTER UK\n047A; C; 047B; # CYRILLIC CAPITAL LETTER ROUND OMEGA\n047C; C; 047D; # CYRILLIC CAPITAL LETTER OMEGA WITH TITLO\n047E; C; 047F; # CYRILLIC CAPITAL LETTER OT\n0480; C; 0481; # CYRILLIC CAPITAL LETTER KOPPA\n048A; C; 048B; # CYRILLIC CAPITAL LETTER SHORT I WITH TAIL\n048C; C; 048D; # CYRILLIC CAPITAL LETTER SEMISOFT SIGN\n048E; C; 048F; # CYRILLIC CAPITAL LETTER ER WITH TICK\n0490; C; 0491; # CYRILLIC CAPITAL LETTER GHE WITH UPTURN\n0492; C; 0493; # CYRILLIC CAPITAL LETTER GHE WITH STROKE\n0494; C; 0495; # CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK\n0496; C; 0497; # CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER\n0498; C; 0499; # CYRILLIC CAPITAL LETTER ZE WITH DESCENDER\n049A; C; 049B; # CYRILLIC CAPITAL LETTER KA WITH DESCENDER\n049C; C; 049D; # CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE\n049E; C; 049F; # CYRILLIC CAPITAL LETTER KA WITH STROKE\n04A0; C; 04A1; # CYRILLIC CAPITAL LETTER BASHKIR KA\n04A2; C; 04A3; # CYRILLIC CAPITAL LETTER EN WITH DESCENDER\n04A4; C; 04A5; # CYRILLIC CAPITAL LIGATURE EN GHE\n04A6; C; 04A7; # CYRILLIC CAPITAL LETTER PE WITH MIDDLE HOOK\n04A8; C; 04A9; # CYRILLIC CAPITAL LETTER ABKHASIAN HA\n04AA; C; 04AB; # CYRILLIC CAPITAL LETTER ES WITH DESCENDER\n04AC; C; 04AD; # CYRILLIC CAPITAL LETTER TE WITH DESCENDER\n04AE; C; 04AF; # CYRILLIC CAPITAL LETTER STRAIGHT U\n04B0; C; 04B1; # CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE\n04B2; C; 04B3; # CYRILLIC CAPITAL LETTER HA WITH DESCENDER\n04B4; C; 04B5; # CYRILLIC CAPITAL LIGATURE TE TSE\n04B6; C; 04B7; # CYRILLIC CAPITAL LETTER CHE WITH DESCENDER\n04B8; C; 04B9; # CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE\n04BA; C; 04BB; # CYRILLIC CAPITAL LETTER SHHA\n04BC; C; 04BD; # CYRILLIC CAPITAL LETTER ABKHASIAN CHE\n04BE; C; 04BF; # CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER\n04C0; C; 04CF; # CYRILLIC LETTER PALOCHKA\n04C1; C; 04C2; # CYRILLIC CAPITAL LETTER ZHE WITH BREVE\n04C3; C; 04C4; # CYRILLIC CAPITAL LETTER KA WITH HOOK\n04C5; C; 04C6; # CYRILLIC CAPITAL LETTER EL WITH TAIL\n```\n\n----------------------------------------\n\nTITLE: Importing XCTest Framework in Swift\nDESCRIPTION: This code snippet shows importing the XCTest framework, which is Apple's testing framework used for unit tests, performance tests, and UI tests in Swift applications.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-clang-modules-macosx.txt#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nXCTest\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Caucasian Albanian Script\nDESCRIPTION: Defines the Unicode code point ranges for the Caucasian Albanian script, including letters and punctuation. The total count is 53 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_80\n\nLANGUAGE: text\nCODE:\n```\n10530..10563  ; Caucasian_Albanian # Lo  [52] CAUCASIAN ALBANIAN LETTER ALT..CAUCASIAN ALBANIAN LETTER KIW\n1056F         ; Caucasian_Albanian # Po       CAUCASIAN ALBANIAN CITATION MARK\n\n# Total code points: 53\n```\n\n----------------------------------------\n\nTITLE: Importing CoreImage.CIFilterBuiltins in Swift\nDESCRIPTION: This code snippet shows importing the CIFilterBuiltins subframework of CoreImage, which provides access to Core Image's built-in filters for image processing and manipulation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-clang-modules-macosx.txt#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nCoreImage.CIFilterBuiltins\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Demangler Library Build\nDESCRIPTION: CMake configuration that sets up the swiftDemangle shared library, including its source files, compiler definitions, dependencies, and installation rules. Configures the library to be installed as part of the compiler component with specific destination paths for runtime, library, and archive files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftDemangle/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftDemangle SHARED\n  SwiftDemangle.cpp\n  MangleHack.cpp)\ntarget_compile_definitions(swiftDemangle PRIVATE\n  LLVM_DISABLE_ABI_BREAKING_CHECKS_ENFORCING=1)\ntarget_link_libraries(swiftDemangle PRIVATE\n  swiftDemangling)\n\nadd_dependencies(compiler swiftDemangle)\nswift_install_in_component(TARGETS swiftDemangle\n  RUNTIME\n    DESTINATION \"bin\"\n    COMPONENT compiler\n  LIBRARY\n    DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}\"\n    COMPONENT compiler\n  ARCHIVE\n    DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}\"\n    COMPONENT compiler)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Tools in CMake\nDESCRIPTION: Adds build configuration for macOS-specific tools when building for the macOS platform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_HOST_VARIANT STREQUAL \"macosx\")\n  # Only build Darwin-specific tools when deploying to OS X.\n  add_swift_tool_subdirectory(swift-stdlib-tool)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Clang Modules Interface Library\nDESCRIPTION: Creates an interface library for Clang modules and adds VFS overlay compilation options for Swift language compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/clang/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(ClangModules INTERFACE)\ntarget_compile_options(ClangModules INTERFACE\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-vfsoverlay ${CMAKE_CURRENT_BINARY_DIR}/windows-sdk-overlay.yaml>\")\n```\n\n----------------------------------------\n\nTITLE: Setting Platform-Specific Compiler Warning Flags\nDESCRIPTION: Configures compiler warning flags differently for MSVC and other compilers, enabling wall warnings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_COMPILER_IS_MSVC_LIKE)\n  list(APPEND compile_flags \"/W3\")\nelse()\n  list(APPEND compile_flags \"-Wall\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Conditional Compilation Flags for Swift Features\nDESCRIPTION: Appends compilation flags for reflection and static print features if they are enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnittest/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_ENABLE_REFLECTION)\n  list(APPEND swift_stdlib_unittest_compile_flags \"-DSWIFT_ENABLE_REFLECTION\")\nendif()\n\nif(SWIFT_STDLIB_STATIC_PRINT)\n  list(APPEND swift_stdlib_unittest_compile_flags \"-D\" \"SWIFT_STDLIB_STATIC_PRINT\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies for Swift IDE Tool\nDESCRIPTION: Specifies the required library dependencies for swiftIDETool, including Swift and Clang components for AST handling and frontend operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/IDETool/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(swiftIDETool PRIVATE\n  swiftAST\n  swiftDriver\n  swiftFrontend\n  swiftFrontendTool\n  clangAST\n  clangFrontend)\n```\n\n----------------------------------------\n\nTITLE: Adding SwiftPrivateThreadExtras Library Target in CMake\nDESCRIPTION: Configures the SwiftPrivateThreadExtras library target with source files, module dependencies for various platforms, compilation flags, and installation settings. It specifies dependencies for iOS, macOS, tvOS, watchOS, XROS, macCatalyst, Android, Linux, FreeBSD, OpenBSD, Cygwin, Haiku, WASI, and Windows platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftPrivateThreadExtras/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftSwiftPrivateThreadExtras ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  # This file should be listed the first.  Module name is inferred from the\n  # filename.\n  SwiftPrivateThreadExtras.swift\n  ThreadBarriers.swift\n\n  \"${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c\"\n\n  SWIFT_MODULE_DEPENDS_IOS ${swift_private_thread_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_OSX ${swift_private_thread_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_TVOS ${swift_private_thread_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_private_thread_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_XROS ${swift_private_thread_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_private_thread_extras_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_FREESTANDING \"${SWIFT_FREESTANDING_TEST_DEPENDENCIES}\"\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WASI WASILibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Swift Feature Flag Command Examples\nDESCRIPTION: Command line flag examples for enabling experimental and upcoming features in the Swift compiler. These flags control feature enablement with the compiler silently ignoring unrecognized feature names by default.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-language-features.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-enable-upcoming-feature\n-enable-experimental-feature\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Osage Script\nDESCRIPTION: This snippet defines the Unicode block for the Osage script, including capital and small letters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_96\n\nLANGUAGE: Unicode\nCODE:\n```\n104B0..104D3  ; Osage # L&  [36] OSAGE CAPITAL LETTER A..OSAGE CAPITAL LETTER ZHA\n104D8..104FB  ; Osage # L&  [36] OSAGE SMALL LETTER A..OSAGE SMALL LETTER ZHA\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Module Properties\nDESCRIPTION: Sets the Swift module name property for the SwiftOnoneSupport target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(swiftSwiftOnoneSupport PROPERTIES\n Swift_MODULE_NAME SwiftOnoneSupport)\n```\n\n----------------------------------------\n\nTITLE: Custom Enum Definition with RawRepresentable\nDESCRIPTION: Defines a FooHelperSubEnum1 structure conforming to RawRepresentable and Equatable protocols, with UInt32 raw value type and multiple initializers\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/FooHelper.FooHelperSub.printed.txt#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nstruct FooHelperSubEnum1 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake project and basic configuration for swift-inspect\nDESCRIPTION: Initializes the CMake project with C, C++, and Swift language support, sets the C++ standard to 17, and configures output directories for build artifacts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.28)\n\nproject(swift-inspect\n  LANGUAGES C CXX Swift)\n\ninclude(FetchContent)\n\n# Set C++ standard\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)\nset(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)\n```\n\n----------------------------------------\n\nTITLE: Unicode Extend Property Code Points\nDESCRIPTION: Definition of Unicode code points that have the Extend property. Each line specifies a code point or range, followed by the property value (Extend), category (Me, Mn, Mc, or Lm), and descriptive name of the character or range.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n20DD..20E0    ; Extend # Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH\n20E1          ; Extend # Mn       COMBINING LEFT RIGHT ARROW ABOVE\n20E2..20E4    ; Extend # Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE\n```\n\n----------------------------------------\n\nTITLE: Word Breaking Rule Test Cases\nDESCRIPTION: Test cases showing word breaking behavior between different Unicode characters including Latin letters, numbers, punctuation marks, and format characters. Each line shows a sequence of Unicode characters and their breaking behavior according to Unicode rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n÷ 0061 × 0027 × 2060 × 0061 ÷ 002C ÷\n÷ 0061 × 0027 × 2060 × 0308 × 0061 ÷ 002C ÷\n÷ 0061 ÷ 0027 × 2060 ÷ 0031 ÷ 003A ÷\n÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0031 ÷ 003A ÷\n```\n\n----------------------------------------\n\nTITLE: Control Characters Range Definition\nDESCRIPTION: Comprehensive listing of Unicode code points classified as Control characters, including format characters, surrogates, and reserved code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\n0000..0009    ; Control # Cc  [10] <control-0000>..<control-0009>\n000B..000C    ; Control # Cc   [2] <control-000B>..<control-000C>\n000E..001F    ; Control # Cc  [18] <control-000E>..<control-001F>\n007F..009F    ; Control # Cc  [33] <control-007F>..<control-009F>\n00AD          ; Control # Cf       SOFT HYPHEN\n0600..0605    ; Control # Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n061C          ; Control # Cf       ARABIC LETTER MARK\n06DD          ; Control # Cf       ARABIC END OF AYAH\n070F          ; Control # Cf       SYRIAC ABBREVIATION MARK\n180E          ; Control # Cf       MONGOLIAN VOWEL SEPARATOR\n200B          ; Control # Cf       ZERO WIDTH SPACE\n200E..200F    ; Control # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n2028          ; Control # Zl       LINE SEPARATOR\n2029          ; Control # Zp       PARAGRAPH SEPARATOR\n202A..202E    ; Control # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n2060..2064    ; Control # Cf   [5] WORD JOINER..INVISIBLE PLUS\n2065          ; Control # Cn       <reserved-2065>\n2066..206F    ; Control # Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES\nD800..DFFF    ; Control # Cs [2048] <surrogate-D800>..<surrogate-DFFF>\nFEFF          ; Control # Cf       ZERO WIDTH NO-BREAK SPACE\nFFF0..FFF8    ; Control # Cn   [9] <reserved-FFF0>..<reserved-FFF8>\nFFF9..FFFB    ; Control # Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR\n110BD         ; Control # Cf       KAITHI NUMBER SIGN\n1BCA0..1BCA3  ; Control # Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP\n1D173..1D17A  ; Control # Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE\nE0000         ; Control # Cn       <reserved-E0000>\nE0001         ; Control # Cf       LANGUAGE TAG\nE0002..E001F  ; Control # Cn  [30] <reserved-E0002>..<reserved-E001F>\nE0020..E007F  ; Control # Cf  [96] TAG SPACE..CANCEL TAG\nE0080..E00FF  ; Control # Cn [128] <reserved-E0080>..<reserved-E00FF>\nE01F0..E0FFF  ; Control # Cn [3600] <reserved-E01F0>..<reserved-E0FFF>\n```\n\n----------------------------------------\n\nTITLE: Copying Release-built Standard Library to Debug Build (Bash)\nDESCRIPTION: This code snippet shows how to copy a release-built standard library to a debug build directory to speed up the development process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DevelopmentTips.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsrc=/path/to/build/Ninja-ReleaseAssert/swift-macosx-x86_64\ndst=/path/to/build/Ninja-DebugAssert/swift-macosx-x86_64\ncp -r $src/stdlib $dst/\ncp -r $src/lib/swift/macosx $dst/lib/swift/\ncp -r $src/lib/swift/shims $dst/lib/swift/\n```\n\n----------------------------------------\n\nTITLE: Building the Swift Project Benchmarks - Shell\nDESCRIPTION: Provides shell commands for rebuilding the Swift benchmarks after the initial project build. Requires environment variable SWIFT_BUILD_DIR to be set to the build directory. Invokes build-script to perform a release build, followed by ninja to only rebuild and update the benchmark binaries. Compatible with macOS, assumes appropriate project structure and build dependencies are installed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\nswift-source$ ./swift/utils/build-script -R -B\n```\n\nLANGUAGE: Shell\nCODE:\n```\nswift-source$ export SWIFT_BUILD_DIR=\\`pwd\\`/build/Ninja-ReleaseAssert/swift-macosx-$(uname -m)\nswift-source$ ninja -C ${SWIFT_BUILD_DIR} swift-benchmark-macosx-$(uname -m)\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftSILOptimizer Target Sources in CMake\nDESCRIPTION: This CMake command adds multiple C++ source files to the swiftSILOptimizer target. These files implement various optimization techniques for Swift's SIL, including array property optimization, bounds checking, copy-on-write array optimization, loop rotation and unrolling, loop-invariant code motion, and foreach loop unrolling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/LoopTransforms/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  ArrayPropertyOpt.cpp\n  BoundsCheckOpts.cpp\n  COWArrayOpt.cpp\n  LoopRotate.cpp\n  LoopUnroll.cpp\n  LICM.cpp\n  ForEachLoopUnroll.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Files for Swift SIL Optimizer in CMake\nDESCRIPTION: CMake configuration that specifies the source files to be compiled into the swiftSILOptimizer target. Includes files for optimization passes, memory management, move-only checks, diagnostics, and other SIL-level transformations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/Mandatory/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  AccessEnforcementSelection.cpp\n  AccessMarkerElimination.cpp\n  AlwaysEmitConformanceMetadataPreservation.cpp\n  AddressLowering.cpp\n  CapturePromotion.cpp\n  ClosureLifetimeFixup.cpp\n  ConsumeOperatorCopyableAddressesChecker.cpp\n  ConsumeOperatorCopyableValuesChecker.cpp\n  PhiStorageOptimizer.cpp\n  ConstantPropagation.cpp\n  DiagnoseUnnecessaryPreconcurrencyImports.cpp\n  DebugInfoCanonicalizer.cpp\n  DefiniteInitialization.cpp\n  DIMemoryUseCollector.cpp\n  DataflowDiagnostics.cpp\n  DiagnoseInvalidEscapingCaptures.cpp\n  DiagnoseLifetimeIssues.cpp\n  DiagnoseStaticExclusivity.cpp\n  DiagnoseUnreachable.cpp\n  Differentiation.cpp\n  FlowIsolation.cpp\n  IRGenPrepare.cpp\n  LexicalLifetimeEliminator.cpp\n  LowerHopToActor.cpp\n  MandatoryInlining.cpp\n  MoveOnlyAddressCheckerTester.cpp\n  MoveOnlyAddressCheckerUtils.cpp\n  MoveOnlyBorrowToDestructureTester.cpp\n  MoveOnlyBorrowToDestructureUtils.cpp\n  MoveOnlyChecker.cpp\n  MoveOnlyDiagnostics.cpp\n  MoveOnlyObjectCheckerTester.cpp\n  MoveOnlyObjectCheckerUtils.cpp\n  MoveOnlyTempAllocationFromLetTester.cpp\n  MoveOnlyTypeUtils.cpp\n  MoveOnlyUtils.cpp\n  MovedAsyncVarDebugInfoPropagator.cpp\n  NestedSemanticFunctionCheck.cpp\n  OptimizeHopToExecutor.cpp\n  PerformanceDiagnostics.cpp\n  PredictableMemOpt.cpp\n  PMOMemoryUseCollector.cpp\n  RawSILInstLowering.cpp\n  ReferenceBindingTransform.cpp\n  ThunkLowering.cpp\n  SendNonSendable.cpp\n  LowerTupleAddrConstructor.cpp\n  SILGenCleanup.cpp\n  YieldOnceCheck.cpp\n  OSLogOptimization.cpp\n  MoveOnlyWrappedTypeEliminator.cpp\n  RegionAnalysisInvalidationTransform.cpp\n  DiagnosticDeadFunctionElimination.cpp\n  OwnershipModelEliminator.cpp)\n```\n\n----------------------------------------\n\nTITLE: Declaring Global Function in Swift\nDESCRIPTION: Defines a global function doSomethingInHead that takes an Int32 argument.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.command-line-include.printed.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\nfunc doSomethingInHead(_ arg: Int32)\n```\n\n----------------------------------------\n\nTITLE: Conditional Swift Syntax Support\nDESCRIPTION: Adds optional dependency on swiftASTGen when Swift Syntax support is enabled in the build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Parse/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (SWIFT_BUILD_SWIFT_SYNTAX)\n  target_link_libraries(swiftParse\n    PRIVATE\n    swiftASTGen\n  )\n\n  add_dependencies(swiftParse\n    swiftASTGen\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Flags for Swift Compiler Sources\nDESCRIPTION: Configuration block that sets up SDK flags for compiling Swift compiler sources. Handles different platforms and includes special handling for Darwin platforms with missing libc++ in older Xcode versions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_COMPILER_SOURCES_SDK_FLAGS_default)\nif(SWIFT_HOST_VARIANT_SDK IN_LIST SWIFT_DARWIN_PLATFORMS)\n  set(sdk_path \"${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_ARCH_${SWIFT_HOST_VARIANT_ARCH}_PATH}\")\n  list(APPEND SWIFT_COMPILER_SOURCES_SDK_FLAGS_default \"-sdk\" \"${sdk_path}\")\n  if(NOT EXISTS \"${sdk_path}/usr/include/c++\")\n    message(WARNING \"Building with an outdated Darwin SDK: libc++ missing from the ${SWIFT_HOST_VARIANT_SDK} SDK. Will use libc++ from the toolchain.\")\n    get_filename_component(absolute_libcxx_path \"${CMAKE_C_COMPILER}/../../include/c++/v1\" REALPATH)\n    if (EXISTS \"${absolute_libcxx_path}\")\n      list(APPEND SWIFT_COMPILER_SOURCES_SDK_FLAGS_default \"-Xcc\" \"-isystem\" \"-Xcc\" \"${absolute_libcxx_path}\")\n    else()\n      message(ERROR \"libc++ not found in the toolchain.\")\n    endif()\n  endif()\nelseif(BOOTSTRAPPING_MODE STREQUAL \"CROSSCOMPILE\")\n  list(APPEND SWIFT_COMPILER_SOURCES_SDK_FLAGS_default \"-sdk\" \"${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_ARCH_${SWIFT_HOST_VARIANT_ARCH}_PATH}\")\nendif()\nset(SWIFT_COMPILER_SOURCES_SDK_FLAGS ${SWIFT_COMPILER_SOURCES_SDK_FLAGS_default}\n  CACHE STRING \"Swift flags used to compiler the Swift compiler sources\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Contents Structure\nDESCRIPTION: A markdown-formatted table of contents listing the major sections and subsections of the differentiable programming manifesto document. Generated using github-markdown-toc with manual backtick additions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n*   [Introduction](#introduction)\n*   [Motivation](#motivation)\n    *   [Background](#background)\n    *   [Intelligent applications](#intelligent-applications)\n    *   [Type-safe machine learning](#type-safe-machine-learning)\n    *   [Calculus is fun](#calculus-is-fun)\n        *   [Animations](#animations)\n        *   [Games](#games)\n        *   [Simulations](#simulations)\n        *   [Robotics](#robotics)\n        *   [Rendering and ray tracing](#rendering-and-ray-tracing)\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Reflection Test Library Target\nDESCRIPTION: Configures the Swift Reflection Test library target with platform-specific module dependencies and build settings. Includes configuration for multiple platforms including iOS, tvOS, watchOS, Linux, and Windows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftReflectionTest/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (SWIFT_INCLUDE_TESTS AND SWIFT_BUILD_DYNAMIC_STDLIB)\n  add_swift_target_library(swiftSwiftReflectionTest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n    SwiftReflectionTest.swift\n    SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    SWIFT_COMPILE_FLAGS_LINUX -Xcc -D_GNU_SOURCE\n    SWIFT_MODULE_DEPENDS_OSX ${swift_reflection_test_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_IOS ${swift_reflection_test_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_TVOS ${swift_reflection_test_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_WATCHOS ${swift_reflection_test_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_XROS ${swift_reflection_test_darwin_dependencies}\n    SWIFT_MODULE_DEPENDS_ANDROID Android\n    SWIFT_MODULE_DEPENDS_LINUX Glibc\n    SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n    SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n    SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n    SWIFT_MODULE_DEPENDS_WINDOWS CRT\n    INSTALL_IN_COMPONENT stdlib-experimental\n    DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n\n    TARGET_SDKS NOT LINUX_STATIC)\n```\n\n----------------------------------------\n\nTITLE: Defining begin_apply Instruction in Swift Intermediate Language\nDESCRIPTION: Specifies the syntax for the begin_apply instruction, which transfers control to a coroutine and handles yield operations. It includes rules for application, result handling, and token management for suspended coroutines.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_97\n\nLANGUAGE: swift\nCODE:\n```\nsil-instruction ::= 'begin_apply' '[nothrow]'? sil-value\n                      sil-apply-substitution-list?\n                      '(' (sil-value (',' sil-value)*)? ')'\n                      ':' sil-type\n\n(%anyAddr, %float, %token) = begin_apply %0() : $@yield_once () -> (@yields @inout %Any, @yields Float)\n// %anyAddr : $*Any\n// %float : $Float\n// %token is a token\n\n(%anyAddr, %float, %token, %allocation) = begin_apply %0() : $@yield_once_2 () -> (@yields @inout %Any, @yields Float)\n// %anyAddr : $*Any\n// %float : $Float\n// %token is a token\n// %allocation is a pointer to a token\n```\n\n----------------------------------------\n\nTITLE: Defining Language-Sensitive Case Mappings for Lithuanian\nDESCRIPTION: This snippet defines language-sensitive case mappings for Lithuanian, which retains the dot in lowercase i when followed by accents. It includes rules for removing and introducing dot above in various scenarios.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n0307; 0307; ; ; lt After_Soft_Dotted; # COMBINING DOT ABOVE\n\n0049; 0069 0307; 0049; 0049; lt More_Above; # LATIN CAPITAL LETTER I\n004A; 006A 0307; 004A; 004A; lt More_Above; # LATIN CAPITAL LETTER J\n012E; 012F 0307; 012E; 012E; lt More_Above; # LATIN CAPITAL LETTER I WITH OGONEK\n00CC; 0069 0307 0300; 00CC; 00CC; lt; # LATIN CAPITAL LETTER I WITH GRAVE\n00CD; 0069 0307 0301; 00CD; 00CD; lt; # LATIN CAPITAL LETTER I WITH ACUTE\n0128; 0069 0307 0303; 0128; 0128; lt; # LATIN CAPITAL LETTER I WITH TILDE\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Range Definitions\nDESCRIPTION: Comprehensive list of Unicode ranges defining emoji characters with their corresponding versions and descriptions. Includes version tags from E1.0 through E16.0, code points, and human-readable descriptions of the emoji characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n1F9A3..1F9A4  ; Emoji                # E13.0  [2] (🦣..🦤)    mammoth..dodo\n1F9A5..1F9AA  ; Emoji                # E12.0  [6] (🦥..🦪)    sloth..oyster\n1F9AB..1F9AD  ; Emoji                # E13.0  [3] (🦫..🦭)    beaver..seal\n1F9AE..1F9AF  ; Emoji                # E12.0  [2] (🦮..🦯)    guide dog..white cane\n1F9B0..1F9B9  ; Emoji                # E11.0 [10] (🦰..🦹)    red hair..supervillain\n1F9BA..1F9BF  ; Emoji                # E12.0  [6] (🦺..🦿)    safety vest..mechanical leg\n1F9C0         ; Emoji                # E1.0   [1] (🧀)       cheese wedge\n1F9C1..1F9C2  ; Emoji                # E11.0  [2] (🧁..🧂)    cupcake..salt\n1F9C3..1F9CA  ; Emoji                # E12.0  [8] (🧃..🧊)    beverage box..ice\n```\n\n----------------------------------------\n\nTITLE: LLVM Availability Configuration\nDESCRIPTION: Sets LLVM availability property for the Swift parser library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Parse/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nset_swift_llvm_is_available(swiftParse)\n```\n\n----------------------------------------\n\nTITLE: Line-Relative Fix-It Range Syntax in Diagnostic Verification - Plaintext\nDESCRIPTION: This snippet shows how to express fix-it replacements that span ranges on different lines in Swift diagnostic verification comments. The notation {{-1:12-+1:42=}} denotes a text change from column 12 of the previous line to column 42 of the next line. It is used to instruct the compiler's test framework regarding the exact code regions where textual modifications should occur as part of a fix-it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Diagnostics.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n{{-1:12-+1:42=}}\n```\n\n----------------------------------------\n\nTITLE: Configuring OSX Build Variables in CMake\nDESCRIPTION: Sets CMAKE_OSX variables for Darwin systems to minimize conflicts, including sysroot path and architecture settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_74\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\" AND NOT CMAKE_CROSSCOMPILING)\n  set(CMAKE_OSX_SYSROOT \"${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_PATH}\")\n  set(CMAKE_OSX_ARCHITECTURES \"\")\n  set(CMAKE_OSX_DEPLOYMENT_TARGET \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded ARM Test Environment in CMake\nDESCRIPTION: This snippet sets up test configuration for embedded ARM (ARMv7) targets when cross-compiling. It configures the testing environment with specific platform parameters for an STM32F4 device using QEMU.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB_CROSS_COMPILING)\n  set(VARIANT_SUFFIX \"-embedded-armv7\")\n  set(VARIANT_TRIPLE \"armv7em-none-none-eabi\")\n  set(VARIANT_EXTERNAL_EMBEDDED_PLATFORM TRUE)\n  set(VARIANT_EXTERNAL_EMBEDDED_DEVICE \"arm-qemu-stm32f4\")\n  set(SWIFT_TEST_RESULTS_DIR \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/swift-test-results/${VARIANT_TRIPLE}\")\n  swift_configure_lit_site_cfg(\n      \"${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}${VARIANT_SUFFIX}/lit.site.cfg\"\n      \"test${VARIANT_SUFFIX}.lit.site.cfg\")\n  swift_generate_lit_swift_features_cfg(\"${CMAKE_CURRENT_BINARY_DIR}${VARIANT_SUFFIX}/lit.swift-features.cfg\")\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Environment Variables for Swift Benchmarks\nDESCRIPTION: Environment variables that can be used to troubleshoot benchmark issues, including checking linked libraries and forcing linking with a locally built stdlib.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport DYLD_PRINT_SEARCHING=1\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport DYLD_LIBRARY_PATH=<path_to_build_folder>/Ninja-ReleaseAssert/swift-macosx-x86_64/lib/swift/macosx/x86_64\n```\n\n----------------------------------------\n\nTITLE: Value Generics in SIL\nDESCRIPTION: Definition for type_value instruction used to produce dynamic values of formal value generic types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_164\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'type_value' sil-type 'for' sil-identifier\n```\n\n----------------------------------------\n\nTITLE: Setting Darwin Dependencies for Swift Differentiation Library\nDESCRIPTION: Conditionally sets Darwin dependencies based on whether the SDK overlay is being built.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Differentiation/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_BUILD_SDK_OVERLAY)\nset(swiftDifferentiationDarwinDependencies Darwin)\nelse()\nset(swiftDifferentiationDarwinDependencies)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Darwin-Specific Options for Swift Build in CMake\nDESCRIPTION: Configures options for embedding LLVM bitcode sections, CrashReporter integration, and various Darwin-specific settings like xcrun toolchain and install name directories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_43\n\nLANGUAGE: CMake\nCODE:\n```\noption(SWIFT_EMBED_BITCODE_SECTION\n    \"If non-empty, embeds LLVM bitcode binary sections in the standard library and overlay binaries for supported platforms\"\n    FALSE)\n\noption(SWIFT_EMBED_BITCODE_SECTION_HIDE_SYMBOLS\n  \"If non-empty, when embedding the LLVM bitcode binary sections into the relevant binaries, pass in -bitcode_hide_symbols. Does nothing if SWIFT_EMBED_BITCODE_SECTION is set to false.\"\n  FALSE)\n\nif(\"${SWIFT_HOST_VARIANT_SDK}\" MATCHES \"(OSX|IOS*|TVOS*|WATCHOS*)\")\n  set(SWIFT_RUNTIME_CRASH_REPORTER_CLIENT_default TRUE)\nelse()\n  set(SWIFT_RUNTIME_CRASH_REPORTER_CLIENT_default FALSE)\nendif()\n\noption(SWIFT_RUNTIME_CRASH_REPORTER_CLIENT\n    \"Whether to enable CrashReporter integration\"\n    \"${SWIFT_RUNTIME_CRASH_REPORTER_CLIENT_default}\")\n\nset(SWIFT_DARWIN_XCRUN_TOOLCHAIN \"XcodeDefault\" CACHE STRING\n    \"The name of the toolchain to pass to 'xcrun'\")\n\nset(SWIFT_DARWIN_STDLIB_INSTALL_NAME_DIR \"/usr/lib/swift\" CACHE STRING\n    \"The directory of the install_name for standard library dylibs\")\n```\n\n----------------------------------------\n\nTITLE: Defining Hangul Syllable Unicode Ranges for LVT Combinations\nDESCRIPTION: Maps ranges of Unicode code points to specific Hangul syllables that follow the LVT (Leading consonant, Vowel, Trailing consonant) pattern. Each range covers 27 consecutive code points representing related syllable variations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_14\n\nLANGUAGE: unicode-data\nCODE:\n```\nAC01..AC1B    ; LVT # Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH\nAC1D..AC37    ; LVT # Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH\nAC39..AC53    ; LVT # Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH\n```\n\n----------------------------------------\n\nTITLE: Unicode 16.0.0 Code Point Range Definitions\nDESCRIPTION: Defines new Unicode code point ranges and their corresponding character descriptions for Unicode version 16.0.0, scheduled for release in September 2024. Includes various scripts and symbols with their hexadecimal ranges.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n0897          ; 16.0 #       ARABIC PEPET\n1B4E..1B4F    ; 16.0 #   [2] BALINESE INVERTED CARIK SIKI..BALINESE INVERTED CARIK PAREREN\n1B7F          ; 16.0 #       BALINESE PANTI BAWAK\n# Additional ranges omitted for brevity\n1FBCB..1FBEF  ; 16.0 #  [37] WHITE CROSS MARK..TOP LEFT JUSTIFIED LOWER RIGHT QUARTER BLACK CIRCLE\n\n# Total code points: 5185\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftRuntimeLongTests for Different Host Variants in CMake\nDESCRIPTION: This snippet sets up platform-specific sources and libraries for the SwiftRuntimeLongTests target. It handles different host variants including Darwin, Linux, FreeBSD, and Windows, adding appropriate libraries and compilation flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/runtime/LongTests/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif((\"${SWIFT_HOST_VARIANT_SDK}\" STREQUAL \"${SWIFT_PRIMARY_VARIANT_SDK}\") AND\n   (\"${SWIFT_HOST_VARIANT_ARCH}\" STREQUAL \"${SWIFT_PRIMARY_VARIANT_ARCH}\"))\n\n  set(PLATFORM_SOURCES)\n  set(PLATFORM_TARGET_LINK_LIBRARIES)\n\n  if(SWIFT_HOST_VARIANT MATCHES \"${SWIFT_DARWIN_VARIANTS}\")\n#   Placeholder for Darwin Foundation tests (currently none)\n#    find_library(FOUNDATION_LIBRARY Foundation)\n#    list(APPEND PLATFORM_SOURCES\n#      YourTestNameHere.mm\n#      )\n#    # We need to link swiftCore on Darwin because the runtime still relies on\n#    # some stdlib hooks to implement SwiftObject.\n#    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES\n#      ${FOUNDATION_LIBRARY}\n#      swiftStdlibUnittest${SWIFT_PRIMARY_VARIANT_SUFFIX}\n#      )\n\n    # Link the Objective-C runtime.\n    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES \"objc\")\n  elseif(SWIFT_HOST_VARIANT STREQUAL \"linux\")\n    if(SWIFT_HOST_VARIANT_ARCH MATCHES \"armv6|armv7|i686\")\n      list(APPEND PLATFORM_TARGET_LINK_LIBRARIES\n        \"atomic\"\n        )\n    endif()\n  elseif(SWIFT_HOST_VARIANT STREQUAL \"freebsd\")\n    find_library(EXECINFO_LIBRARY execinfo)\n    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES\n      ${EXECINFO_LIBRARY}\n      )\n  elseif(SWIFT_HOST_VARIANT STREQUAL \"windows\")\n    list(APPEND PLATFORM_TARGET_LINK_LIBRARIES DbgHelp;Synchronization)\n  endif()\n\n  add_swift_unittest(SwiftRuntimeLongTests IS_TARGET_TEST\n    LongRefcounting.cpp\n    ../Stdlib.cpp\n    ${PLATFORM_SOURCES}\n\n    # The runtime tests link to internal runtime symbols, which aren't exported\n    # from the swiftCore dylib, so we need to link to both the runtime archive\n    # and the stdlib.\n    $<TARGET_OBJECTS:swiftRuntimeCore${SWIFT_PRIMARY_VARIANT_SUFFIX}>\n    $<TARGET_OBJECTS:swiftLLVMSupport${SWIFT_PRIMARY_VARIANT_SUFFIX}>\n    $<TARGET_OBJECTS:swiftDemangling${SWIFT_PRIMARY_VARIANT_SUFFIX}>\n    )\n\n  # The local stdlib implementation provides definitions of the swiftCore\n  # interfaces to avoid pulling in swiftCore itself.  Build the\n  # SwiftRuntimeLongTests with swiftCore_EXPORTS to permit exporting the stdlib\n  # interfaces.\n  target_compile_definitions(SwiftRuntimeLongTests\n                             PRIVATE\n                               swiftCore_EXPORTS\n                               SWIFT_INLINE_NAMESPACE=__runtime)\n\n  # FIXME: cross-compile for all variants.\n  target_link_libraries(SwiftRuntimeLongTests\n    PRIVATE\n    swiftCore${SWIFT_PRIMARY_VARIANT_SUFFIX}\n    swiftThreading${SWIFT_PRIMARY_VARIANT_SUFFIX}\n    ${PLATFORM_TARGET_LINK_LIBRARIES}\n    ${swift_runtime_test_extra_libraries}\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Build Directory Symlink for ABI Baseline Data in CMake\nDESCRIPTION: Creates a symlink in the build directory pointing to the ABI baseline data. This ensures the baseline data can be found from the same relative path when running the checker from either the toolchain or development environment.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Add symlink of FrameworkABIBaseline to the build dir. This ensures we can\n# find the baseline data from the same relative path as if we are running the\n# checker from the toolchain.\nset(SWIFTLIB_DIR \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/swift\")\nset(dest \"${SWIFTLIB_DIR}/${framework}\")\nset(source \"${CMAKE_CURRENT_SOURCE_DIR}/${framework}\")\n\nadd_custom_command(OUTPUT \"${dest}\"\n                   DEPENDS \"${source}\"\n                   COMMAND \"${CMAKE_COMMAND}\" \"-E\" \"${SWIFT_COPY_OR_SYMLINK}\" \"${source}\" \"${dest}\"\n                   COMMENT \"Symlinking ABI checker baseline data to ${dest}\")\nadd_custom_target(\"symlink_abi_checker_data\" ALL\n                  DEPENDS \"${dest}\"\n                  COMMENT \"Symlinking ABI checker baseline data to ${dest}\")\nif(TARGET swift-frontend)\n  add_dependencies(swift-frontend symlink_abi_checker_data)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Complex Def-Use Chain with Empty Access Path in SIL\nDESCRIPTION: Example showing a complex def-use chain from base to load that actually has an empty access path. Involves enum payload extraction which doesn't affect the access path.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_8\n\nLANGUAGE: sil\nCODE:\n```\n%boxadr = unchecked_take_enum_data_addr %base : $*Enum<T>, #Enum.int!enumelt\n%box = load [take] %boxadr : $*<τ_0_0> { var Int } <T>\n%valadr = project_box %box : $<τ_0_0> { var Int } <T>, 0\n%load = load [trivial] %valadr : $*Int\n```\n\n----------------------------------------\n\nTITLE: Configure Swift Threading Library Build\nDESCRIPTION: CMake configuration that sets up the build environment and creates an object library for Swift's threading implementation. Includes platform-specific source files while excluding ThreadSanitizer components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Threading/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/../../cmake/modules\")\ninclude(AddSwiftStdlib)\n\n# This should *not* include ThreadSanitizer.cpp, as that is part of libswiftCore\nadd_swift_target_library(swiftThreading OBJECT_LIBRARY\n  \"${SWIFT_SOURCE_DIR}/lib/Threading/C11.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Threading/Linux.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Threading/Pthreads.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Threading/Win32.cpp\"\n  INSTALL_IN_COMPONENT never_install)\n```\n\n----------------------------------------\n\nTITLE: Adding Sanitizer Coverage Tools in CMake\nDESCRIPTION: Configures build for fuzzing tools when sanitizer coverage is enabled through LLVM_USE_SANITIZE_COVERAGE flag.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(LLVM_USE_SANITIZE_COVERAGE)\nadd_swift_tool_subdirectory(swift-demangle-fuzzer)\nadd_swift_tool_subdirectory(swift-reflection-fuzzer)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Compiler Optimizer Sources in Swift.org Project\nDESCRIPTION: This snippet lists all Swift source files that are included in the Optimizer module of the Swift compiler. These files implement various optimization utilities, transforms, and analysis tools used during the compilation process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/Utilities/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nswift_compiler_sources(Optimizer\n  AccessUtilsTest.swift\n  AddressUtils.swift\n  BorrowUtils.swift\n  SpecializationCloner.swift\n  Devirtualization.swift\n  EscapeUtils.swift\n  ForwardingUtils.swift\n  FunctionSignatureTransforms.swift\n  GenericSpecialization.swift\n  LifetimeDependenceUtils.swift\n  LocalVariableUtils.swift\n  OptUtils.swift\n  OwnershipLiveness.swift\n  PhiUpdater.swift\n  SSAUpdater.swift\n  StaticInitCloner.swift\n  Test.swift\n  Verifier.swift\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unicode Character Breaking Rules for Hangul Characters\nDESCRIPTION: This code snippet demonstrates the grapheme breaking behavior when MALAYALAM LETTER DOT REPH (U+0D4E) interacts with Hangul characters (L, V, T, LV, LVT types). Each line shows boundary break (÷) or non-break (×) points based on Unicode rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0D4E × 1100 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ 0D4E × 0308 ÷ 1100 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ 0D4E × 1160 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 0D4E × 0308 ÷ 1160 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 0D4E × 11A8 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 0D4E × 0308 ÷ 11A8 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 0D4E × AC00 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 0D4E × 0308 ÷ AC00 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 0D4E × AC01 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ 0D4E × 0308 ÷ AC01 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for SignWriting Punctuation\nDESCRIPTION: This snippet defines a range of Unicode code points for SignWriting punctuation marks. It specifies four consecutive code points from 1DA87 to 1DA8A, all classified as Terminal_Punctuation with the General Category of 'Po' (Other Punctuation).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n1DA87..1DA8A  ; Terminal_Punctuation # Po   [4] SIGNWRITING COMMA..SIGNWRITING COLON\n```\n\n----------------------------------------\n\nTITLE: Defining SWIFT_INCLUDE_TESTS Option in CMake\nDESCRIPTION: Defines a CMake build option named SWIFT_INCLUDE_TESTS. This boolean option controls whether targets for building and running tests are created during the build process. It defaults to TRUE, meaning tests are included by default.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_INCLUDE_TESTS \"Create targets for building/running tests.\" TRUE)\n```\n\n----------------------------------------\n\nTITLE: Module Interface Generation Request Format in SourceKit\nDESCRIPTION: JSON schema for module interface generation requests. Specifies required and optional parameters for generating Swift interfaces from modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>:          (UID) <source.request.editor.open.interface>\n    <key.name>:             (string) // virtual name/path to associate with the interface document\n    <key.modulename>:       (string) // Full module name, e.g. \"Foundation.NSArray\"\n    [opt] <key.compilerargs> [string*] // array of zero or more strings for the compiler arguments\n                                       // e.g [\"-sdk\", \"/path/to/sdk\"]\n    [opt] <key.enabledeclarations> (int) // 0 by default, 1 to enable the declarations array in the output\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Join_Control Characters in Unicode\nDESCRIPTION: This snippet defines the Unicode code points that have the Join_Control property. These characters are used for controlling the joining behavior of characters in certain scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n200C..200D    ; Join_Control # Cf   [2] ZERO WIDTH NON-JOINER..ZERO WIDTH JOINER\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Standard Library Unit Test Target\nDESCRIPTION: Configures the swiftStdlibUnittest target with source files, dependencies, compilation flags, and installation settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnittest/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftStdlibUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  # This file should be listed the first.  Module name is inferred from the\n  # filename.\n  StdlibUnittest.swift\n\n  CheckStrideable.swift\n  InspectValue.cpp\n  InspectValue.swift\n  InterceptTraps.cpp\n  LifetimeTracked.swift\n  MinimalTypes.swift\n  OpaqueIdentityFunctions.cpp\n  OpaqueIdentityFunctions.swift\n  RaceTest.swift\n  Statistics.swift\n  StdlibCoreExtras.swift\n  StringConvertible.swift\n  StringTestHelpers.swift\n  TestHelpers.swift\n  TypeIndexed.swift\n\n  SWIFT_MODULE_DEPENDS SwiftPrivate SwiftPrivateThreadExtras SwiftPrivateLibcExtras ${swift_stdlib_unittest_modules}\n  SWIFT_MODULE_DEPENDS_IOS ${swift_stdlib_unittest_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_OSX ${swift_stdlib_unittest_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_TVOS ${swift_stdlib_unittest_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_WATCHOS ${swift_stdlib_unittest_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_XROS ${swift_stdlib_unittest_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_MACCATALYST ${swift_stdlib_unittest_darwin_dependencies}\n  SWIFT_MODULE_DEPENDS_FREESTANDING \"${SWIFT_FREESTANDING_TEST_DEPENDENCIES}\"\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WASI WASILibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT WinSDK\n  C_COMPILE_FLAGS -I${SWIFT_SOURCE_DIR}/stdlib/include\n  SWIFT_COMPILE_FLAGS ${swift_stdlib_unittest_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  LINK_LIBRARIES ${swift_stdlib_unittest_link_libraries}\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Options for Swift Demangling in CMake\nDESCRIPTION: Sets platform-specific compiler options for Linux and BSD, and configures installation for non-shared library builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Demangling/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(LINUX OR BSD)\n  target_compile_options(swiftDemangling PRIVATE -fno-lto)\nendif()\n\nif(NOT BUILD_SHARED_LIBS)\n  install(TARGETS swiftDemangling\n    EXPORT SwiftCoreTargets\n    COMPONENT SwiftCore_runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Module Path and Including Required Modules\nDESCRIPTION: Sets up the CMake module path and includes necessary Swift standard library build modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/../cmake/modules)\ninclude(StdlibOptions)\ninclude(AddSwiftStdlib)\ninclude(CompatibilityLibs)\n```\n\n----------------------------------------\n\nTITLE: Example of Indexing a Swift File with sourcekitd-test\nDESCRIPTION: Practical example of using sourcekitd-test to index a specific Swift file at a given path, passing the file path as both the target and a compiler argument.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ sourcekitd-test -req=index /path/to/file.swift -- /path/to/file.swift\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift LLVM Availability\nDESCRIPTION: Sets the LLVM availability property for the swiftClangImporter target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_swift_llvm_is_available(swiftClangImporter)\n```\n\n----------------------------------------\n\nTITLE: Documenting Removed Declarations in Swift\nDESCRIPTION: This section lists Swift declarations that have been removed from the API. It includes accessors, associated types, classes, constructors, functions, and variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n/* Removed Decls */\ncake: Accessor GlobalVarChangedToLet.Modify() has been removed\ncake: Accessor GlobalVarChangedToLet.Set() has been removed\ncake: Accessor RemoveSetters.Value.Modify() has been removed\ncake: Accessor RemoveSetters.Value.Set() has been removed\ncake: Accessor RemoveSetters.subscript(_:).Modify() has been removed\ncake: Accessor RemoveSetters.subscript(_:).Set() has been removed\ncake: AssociatedType RequirementChanges.removedType has been removed\ncake: Class C3 has been removed\ncake: Constructor Somestruct2.init(_:) has been removed\ncake: Func C4.foo() has been removed\ncake: Func Int.IntEnhancer() has been removed\ncake: Func RequirementChanges.removedFunc() has been removed\ncake: Var RequirementChanges.removedVar has been removed\n```\n\n----------------------------------------\n\nTITLE: Configuring SIMD Files for Swift Differentiation Library\nDESCRIPTION: Conditionally sets the SIMD files to be included in the build based on whether vector types are enabled in the Swift standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Differentiation/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_STDLIB_ENABLE_VECTOR_TYPES)\nset(swiftDifferentiationSIMDFiles SIMDDifferentiation.swift.gyb)\nelse()\nset(swiftDifferentiationSIMDFiles)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Linking Clang Libraries to Swift AST in CMake\nDESCRIPTION: Specifies the Clang libraries that the Swift AST library should link against. This includes various Clang components necessary for code generation, parsing, and analysis.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/AST/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftAST INTERFACE\n  clangCodeGen\n  clangIndex\n  clangFormat\n  clangToolingCore\n  clangFrontendTool\n  clangDependencyScanning\n  clangFrontend\n  clangDriver\n  clangSerialization\n  clangParse\n  clangSema\n  clangAnalysis\n  clangEdit\n  clangRewriteFrontend\n  clangRewrite\n  clangAST\n  clangLex\n  clangAPINotes\n  clangBasic)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Lowercase Letter (Ll) Character Ranges\nDESCRIPTION: This code snippet defines ranges and individual code points for Unicode characters categorized as Lowercase Letters (Ll). It includes Latin, Greek, and other alphabetic scripts, specifying their hexadecimal values and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_5\n\nLANGUAGE: Unicode\nCODE:\n```\n0061..007A    ; Ll #  [26] LATIN SMALL LETTER A..LATIN SMALL LETTER Z\n00B5          ; Ll #       MICRO SIGN\n00DF..00F6    ; Ll #  [24] LATIN SMALL LETTER SHARP S..LATIN SMALL LETTER O WITH DIAERESIS\n00F8..00FF    ; Ll #   [8] LATIN SMALL LETTER O WITH STROKE..LATIN SMALL LETTER Y WITH DIAERESIS\n0101          ; Ll #       LATIN SMALL LETTER A WITH MACRON\n0103          ; Ll #       LATIN SMALL LETTER A WITH BREVE\n0105          ; Ll #       LATIN SMALL LETTER A WITH OGONEK\n0107          ; Ll #       LATIN SMALL LETTER C WITH ACUTE\n0109          ; Ll #       LATIN SMALL LETTER C WITH CIRCUMFLEX\n010B          ; Ll #       LATIN SMALL LETTER C WITH DOT ABOVE\n010D          ; Ll #       LATIN SMALL LETTER C WITH CARON\n010F          ; Ll #       LATIN SMALL LETTER D WITH CARON\n0111          ; Ll #       LATIN SMALL LETTER D WITH STROKE\n0113          ; Ll #       LATIN SMALL LETTER E WITH MACRON\n0115          ; Ll #       LATIN SMALL LETTER E WITH BREVE\n0117          ; Ll #       LATIN SMALL LETTER E WITH DOT ABOVE\n0119          ; Ll #       LATIN SMALL LETTER E WITH OGONEK\n011B          ; Ll #       LATIN SMALL LETTER E WITH CARON\n011D          ; Ll #       LATIN SMALL LETTER G WITH CIRCUMFLEX\n011F          ; Ll #       LATIN SMALL LETTER G WITH BREVE\n0121          ; Ll #       LATIN SMALL LETTER G WITH DOT ABOVE\n0123          ; Ll #       LATIN SMALL LETTER G WITH CEDILLA\n0125          ; Ll #       LATIN SMALL LETTER H WITH CIRCUMFLEX\n0127          ; Ll #       LATIN SMALL LETTER H WITH STROKE\n0129          ; Ll #       LATIN SMALL LETTER I WITH TILDE\n012B          ; Ll #       LATIN SMALL LETTER I WITH MACRON\n012D          ; Ll #       LATIN SMALL LETTER I WITH BREVE\n012F          ; Ll #       LATIN SMALL LETTER I WITH OGONEK\n0131          ; Ll #       LATIN SMALL LETTER DOTLESS I\n0133          ; Ll #       LATIN SMALL LIGATURE IJ\n0135          ; Ll #       LATIN SMALL LETTER J WITH CIRCUMFLEX\n0137..0138    ; Ll #   [2] LATIN SMALL LETTER K WITH CEDILLA..LATIN SMALL LETTER KRA\n013A          ; Ll #       LATIN SMALL LETTER L WITH ACUTE\n013C          ; Ll #       LATIN SMALL LETTER L WITH CEDILLA\n013E          ; Ll #       LATIN SMALL LETTER L WITH CARON\n0140          ; Ll #       LATIN SMALL LETTER L WITH MIDDLE DOT\n0142          ; Ll #       LATIN SMALL LETTER L WITH STROKE\n0144          ; Ll #       LATIN SMALL LETTER N WITH ACUTE\n0146          ; Ll #       LATIN SMALL LETTER N WITH CEDILLA\n0148..0149    ; Ll #   [2] LATIN SMALL LETTER N WITH CARON..LATIN SMALL LETTER N PRECEDED BY APOSTROPHE\n014B          ; Ll #       LATIN SMALL LETTER ENG\n014D          ; Ll #       LATIN SMALL LETTER O WITH MACRON\n014F          ; Ll #       LATIN SMALL LETTER O WITH BREVE\n0151          ; Ll #       LATIN SMALL LETTER O WITH DOUBLE ACUTE\n0153          ; Ll #       LATIN SMALL LIGATURE OE\n0155          ; Ll #       LATIN SMALL LETTER R WITH ACUTE\n0157          ; Ll #       LATIN SMALL LETTER R WITH CEDILLA\n0159          ; Ll #       LATIN SMALL LETTER R WITH CARON\n015B          ; Ll #       LATIN SMALL LETTER S WITH ACUTE\n015D          ; Ll #       LATIN SMALL LETTER S WITH CIRCUMFLEX\n015F          ; Ll #       LATIN SMALL LETTER S WITH CEDILLA\n0161          ; Ll #       LATIN SMALL LETTER S WITH CARON\n0163          ; Ll #       LATIN SMALL LETTER T WITH CEDILLA\n0165          ; Ll #       LATIN SMALL LETTER T WITH CARON\n0167          ; Ll #       LATIN SMALL LETTER T WITH STROKE\n0169          ; Ll #       LATIN SMALL LETTER U WITH TILDE\n016B          ; Ll #       LATIN SMALL LETTER U WITH MACRON\n016D          ; Ll #       LATIN SMALL LETTER U WITH BREVE\n016F          ; Ll #       LATIN SMALL LETTER U WITH RING ABOVE\n0171          ; Ll #       LATIN SMALL LETTER U WITH DOUBLE ACUTE\n0173          ; Ll #       LATIN SMALL LETTER U WITH OGONEK\n0175          ; Ll #       LATIN SMALL LETTER W WITH CIRCUMFLEX\n0177          ; Ll #       LATIN SMALL LETTER Y WITH CIRCUMFLEX\n017A          ; Ll #       LATIN SMALL LETTER Z WITH ACUTE\n017C          ; Ll #       LATIN SMALL LETTER Z WITH DOT ABOVE\n017E..0180    ; Ll #   [3] LATIN SMALL LETTER Z WITH CARON..LATIN SMALL LETTER B WITH STROKE\n0183          ; Ll #       LATIN SMALL LETTER B WITH TOPBAR\n0185          ; Ll #       LATIN SMALL LETTER TONE SIX\n0188          ; Ll #       LATIN SMALL LETTER C WITH HOOK\n018C..018D    ; Ll #   [2] LATIN SMALL LETTER D WITH TOPBAR..LATIN SMALL LETTER TURNED DELTA\n0192          ; Ll #       LATIN SMALL LETTER F WITH HOOK\n0195          ; Ll #       LATIN SMALL LETTER HV\n0199..019B    ; Ll #   [3] LATIN SMALL LETTER K WITH HOOK..LATIN SMALL LETTER LAMBDA WITH STROKE\n019E          ; Ll #       LATIN SMALL LETTER N WITH LONG RIGHT LEG\n01A1          ; Ll #       LATIN SMALL LETTER O WITH HORN\n01A3          ; Ll #       LATIN SMALL LETTER OI\n01A5          ; Ll #       LATIN SMALL LETTER P WITH HOOK\n01A8          ; Ll #       LATIN SMALL LETTER TONE TWO\n01AA..01AB    ; Ll #   [2] LATIN LETTER REVERSED ESH LOOP..LATIN SMALL LETTER T WITH PALATAL HOOK\n01AD          ; Ll #       LATIN SMALL LETTER T WITH HOOK\n01B0          ; Ll #       LATIN SMALL LETTER U WITH HORN\n01B4          ; Ll #       LATIN SMALL LETTER Y WITH HOOK\n01B6          ; Ll #       LATIN SMALL LETTER Z WITH STROKE\n01B9..01BA    ; Ll #   [2] LATIN SMALL LETTER EZH REVERSED..LATIN SMALL LETTER EZH WITH TAIL\n01BD..01BF    ; Ll #   [3] LATIN SMALL LETTER TONE FIVE..LATIN LETTER WYNN\n01C6          ; Ll #       LATIN SMALL LETTER DZ WITH CARON\n01C9          ; Ll #       LATIN SMALL LETTER LJ\n01CC          ; Ll #       LATIN SMALL LETTER NJ\n01CE          ; Ll #       LATIN SMALL LETTER A WITH CARON\n01D0          ; Ll #       LATIN SMALL LETTER I WITH CARON\n01D2          ; Ll #       LATIN SMALL LETTER O WITH CARON\n01D4          ; Ll #       LATIN SMALL LETTER U WITH CARON\n01D6          ; Ll #       LATIN SMALL LETTER U WITH DIAERESIS AND MACRON\n01D8          ; Ll #       LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE\n01DA          ; Ll #       LATIN SMALL LETTER U WITH DIAERESIS AND CARON\n01DC..01DD    ; Ll #   [2] LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE..LATIN SMALL LETTER TURNED E\n01DF          ; Ll #       LATIN SMALL LETTER A WITH DIAERESIS AND MACRON\n01E1          ; Ll #       LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON\n01E3          ; Ll #       LATIN SMALL LETTER AE WITH MACRON\n01E5          ; Ll #       LATIN SMALL LETTER G WITH STROKE\n01E7          ; Ll #       LATIN SMALL LETTER G WITH CARON\n01E9          ; Ll #       LATIN SMALL LETTER K WITH CARON\n01EB          ; Ll #       LATIN SMALL LETTER O WITH OGONEK\n01ED          ; Ll #       LATIN SMALL LETTER O WITH OGONEK AND MACRON\n01EF..01F0    ; Ll #   [2] LATIN SMALL LETTER EZH WITH CARON..LATIN SMALL LETTER J WITH CARON\n01F3          ; Ll #       LATIN SMALL LETTER DZ\n01F5          ; Ll #       LATIN SMALL LETTER G WITH ACUTE\n01F9          ; Ll #       LATIN SMALL LETTER N WITH GRAVE\n01FB          ; Ll #       LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE\n01FD          ; Ll #       LATIN SMALL LETTER AE WITH ACUTE\n01FF          ; Ll #       LATIN SMALL LETTER O WITH STROKE AND ACUTE\n0201          ; Ll #       LATIN SMALL LETTER A WITH DOUBLE GRAVE\n0203          ; Ll #       LATIN SMALL LETTER A WITH INVERTED BREVE\n0205          ; Ll #       LATIN SMALL LETTER E WITH DOUBLE GRAVE\n0207          ; Ll #       LATIN SMALL LETTER E WITH INVERTED BREVE\n0209          ; Ll #       LATIN SMALL LETTER I WITH DOUBLE GRAVE\n020B          ; Ll #       LATIN SMALL LETTER I WITH INVERTED BREVE\n020D          ; Ll #       LATIN SMALL LETTER O WITH DOUBLE GRAVE\n020F          ; Ll #       LATIN SMALL LETTER O WITH INVERTED BREVE\n0211          ; Ll #       LATIN SMALL LETTER R WITH DOUBLE GRAVE\n0213          ; Ll #       LATIN SMALL LETTER R WITH INVERTED BREVE\n0215          ; Ll #       LATIN SMALL LETTER U WITH DOUBLE GRAVE\n0217          ; Ll #       LATIN SMALL LETTER U WITH INVERTED BREVE\n0219          ; Ll #       LATIN SMALL LETTER S WITH COMMA BELOW\n021B          ; Ll #       LATIN SMALL LETTER T WITH COMMA BELOW\n021D          ; Ll #       LATIN SMALL LETTER YOGH\n021F          ; Ll #       LATIN SMALL LETTER H WITH CARON\n0221          ; Ll #       LATIN SMALL LETTER D WITH CURL\n0223          ; Ll #       LATIN SMALL LETTER OU\n0225          ; Ll #       LATIN SMALL LETTER Z WITH HOOK\n0227          ; Ll #       LATIN SMALL LETTER A WITH DOT ABOVE\n0229          ; Ll #       LATIN SMALL LETTER E WITH CEDILLA\n022B          ; Ll #       LATIN SMALL LETTER O WITH DIAERESIS AND MACRON\n022D          ; Ll #       LATIN SMALL LETTER O WITH TILDE AND MACRON\n022F          ; Ll #       LATIN SMALL LETTER O WITH DOT ABOVE\n0231          ; Ll #       LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON\n0233..0239    ; Ll #   [7] LATIN SMALL LETTER Y WITH MACRON..LATIN SMALL LETTER QP DIGRAPH\n023C          ; Ll #       LATIN SMALL LETTER C WITH STROKE\n023F..0240    ; Ll #   [2] LATIN SMALL LETTER S WITH SWASH TAIL..LATIN SMALL LETTER Z WITH SWASH TAIL\n0242          ; Ll #       LATIN SMALL LETTER GLOTTAL STOP\n0247          ; Ll #       LATIN SMALL LETTER E WITH STROKE\n0249          ; Ll #       LATIN SMALL LETTER J WITH STROKE\n024B          ; Ll #       LATIN SMALL LETTER Q WITH HOOK TAIL\n024D          ; Ll #       LATIN SMALL LETTER R WITH STROKE\n024F..0293    ; Ll #  [69] LATIN SMALL LETTER Y WITH STROKE..LATIN SMALL LETTER EZH WITH CURL\n0295..02AF    ; Ll #  [27] LATIN LETTER PHARYNGEAL VOICED FRICATIVE..LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL\n0371          ; Ll #       GREEK SMALL LETTER HETA\n0373          ; Ll #       GREEK SMALL LETTER ARCHAIC SAMPI\n0377          ; Ll #       GREEK SMALL LETTER PAMPHYLIAN DIGAMMA\n037B..037D    ; Ll #   [3] GREEK SMALL REVERSED LUNATE SIGMA SYMBOL..GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL\n0390          ; Ll #       GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS\n03AC..03CE    ; Ll #  [35] GREEK SMALL LETTER ALPHA WITH TONOS..GREEK SMALL LETTER OMEGA WITH TONOS\n```\n\n----------------------------------------\n\nTITLE: Configuring swiftASTGen Static Library with CMake\nDESCRIPTION: Defines a pure Swift host library named swiftASTGen with static linkage and CXX interoperability. Includes multiple Swift source files for AST generation, parsing, and diagnostics functionality. Dependencies include core Swift AST components and various compiler modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ASTGen/Sources/ASTGen/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_pure_swift_host_library(swiftASTGen STATIC CXX_INTEROP\n  ASTGen.swift\n  ASTGen+CompilerBuildConfiguration.swift\n  Availability.swift\n  Bridge.swift\n  BuiltinPound.swift\n  CompilerBuildConfiguration.swift\n  DeclAttrs.swift\n  Decls.swift\n  Diagnostics.swift\n  DiagnosticsBridge.swift\n  Exprs.swift\n  Fingerprint.swift\n  Generics.swift\n  LexicalLookup.swift\n  Literals.swift\n  ParameterClause.swift\n  Patterns.swift\n  Regex.swift\n  SourceFile.swift\n  StableHasher.swift\n  Stmts.swift\n  TypeAttrs.swift\n  Types.swift\n\n  DEPENDENCIES\n    swiftAST\n  SWIFT_DEPENDENCIES\n    _CompilerRegexParser\n    _CompilerSwiftSyntax\n    _CompilerSwiftIfConfig\n    _CompilerSwiftLexicalLookup\n    _CompilerSwiftOperators\n    _CompilerSwiftSyntaxBuilder\n    _CompilerSwiftParser\n    _CompilerSwiftParserDiagnostics\n    _CompilerSwiftDiagnostics\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Buginese Script\nDESCRIPTION: Defines the Unicode code point ranges for the Buginese script, categorizing characters by their types (Lo, Mn, Mc, Po) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_31\n\nLANGUAGE: Unicode\nCODE:\n```\n1A00..1A16    ; Buginese # Lo  [23] BUGINESE LETTER KA..BUGINESE LETTER HA\n1A17..1A18    ; Buginese # Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U\n1A19..1A1A    ; Buginese # Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O\n1A1B          ; Buginese # Mn       BUGINESE VOWEL SIGN AE\n1A1E..1A1F    ; Buginese # Po   [2] BUGINESE PALLAWA..BUGINESE END OF SECTION\n\n# Total code points: 30\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Inscriptional Parthian Script\nDESCRIPTION: Defines the Unicode code point ranges for the Inscriptional Parthian script, including letters and numbers. This block contains 30 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_66\n\nLANGUAGE: Unicode\nCODE:\n```\n10B40..10B55  ; Inscriptional_Parthian # Lo  [22] INSCRIPTIONAL PARTHIAN LETTER ALEPH..INSCRIPTIONAL PARTHIAN LETTER TAW\n10B58..10B5F  ; Inscriptional_Parthian # No   [8] INSCRIPTIONAL PARTHIAN NUMBER ONE..INSCRIPTIONAL PARTHIAN NUMBER ONE THOUSAND\n\n# Total code points: 30\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Numeric Code Points with Properties and Ranges\nDESCRIPTION: Lists Unicode code points classified as Numeric type with their properties and descriptions. Contains 1114 total code points across various writing systems including Brahmi, Sinhala, Ahom, and CJK ideographs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericType.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1105B..11065  ; Numeric # No  [11] BRAHMI NUMBER TEN..BRAHMI NUMBER ONE THOUSAND\n111E1..111F4  ; Numeric # No  [20] SINHALA ARCHAIC DIGIT ONE..SINHALA ARCHAIC NUMBER ONE THOUSAND\n1173A..1173B  ; Numeric # No   [2] AHOM NUMBER TEN..AHOM NUMBER TWENTY\n118EA..118F2  ; Numeric # No   [9] WARANG CITI NUMBER TEN..WARANG CITI NUMBER NINETY\n11C5A..11C6C  ; Numeric # No  [19] BHAIKSUKI NUMBER ONE..BHAIKSUKI HUNDREDS UNIT MARK\n11FC0..11FD4  ; Numeric # No  [21] TAMIL FRACTION ONE THREE-HUNDRED-AND-TWENTIETH..TAMIL FRACTION DOWNSCALING FACTOR KIIZH\n12400..1246E  ; Numeric # Nl [111] CUNEIFORM NUMERIC SIGN TWO ASH..CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM\n16B5B..16B61  ; Numeric # No   [7] PAHAWH HMONG NUMBER TENS..PAHAWH HMONG NUMBER TRILLIONS\n16E80..16E96  ; Numeric # No  [23] MEDEFAIDRIN DIGIT ZERO..MEDEFAIDRIN DIGIT THREE ALTERNATE FORM\n1D2C0..1D2D3  ; Numeric # No  [20] KAKTOVIK NUMERAL ZERO..KAKTOVIK NUMERAL NINETEEN\n1D2E0..1D2F3  ; Numeric # No  [20] MAYAN NUMERAL ZERO..MAYAN NUMERAL NINETEEN\n1D360..1D378  ; Numeric # No  [25] COUNTING ROD UNIT DIGIT ONE..TALLY MARK FIVE\n1E8C7..1E8CF  ; Numeric # No   [9] MENDE KIKAKUI DIGIT ONE..MENDE KIKAKUI DIGIT NINE\n1EC71..1ECAB  ; Numeric # No  [59] INDIC SIYAQ NUMBER ONE..INDIC SIYAQ NUMBER PREFIXED NINE\n1ECAD..1ECAF  ; Numeric # No   [3] INDIC SIYAQ FRACTION ONE QUARTER..INDIC SIYAQ FRACTION THREE QUARTERS\n1ECB1..1ECB4  ; Numeric # No   [4] INDIC SIYAQ NUMBER ALTERNATE ONE..INDIC SIYAQ ALTERNATE LAKH MARK\n1ED01..1ED2D  ; Numeric # No  [45] OTTOMAN SIYAQ NUMBER ONE..OTTOMAN SIYAQ NUMBER NINETY THOUSAND\n1ED2F..1ED3D  ; Numeric # No  [15] OTTOMAN SIYAQ ALTERNATE NUMBER TWO..OTTOMAN SIYAQ FRACTION ONE SIXTH\n1F10B..1F10C  ; Numeric # No   [2] DINGBAT CIRCLED SANS-SERIF DIGIT ZERO..DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO\n20001         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-20001\n20064         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-20064\n200E2         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-200E2\n20121         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-20121\n2092A         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-2092A\n20983         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-20983\n2098C         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-2098C\n2099C         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-2099C\n20AEA         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-20AEA\n20AFD         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-20AFD\n20B19         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-20B19\n22390         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-22390\n22998         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-22998\n23B1B         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-23B1B\n2626D         ; Numeric # Lo       CJK UNIFIED IDEOGRAPH-2626D\n2F890         ; Numeric # Lo       CJK COMPATIBILITY IDEOGRAPH-2F890\n\n# Total code points: 1114\n```\n\n----------------------------------------\n\nTITLE: Installing Swift API Dump Tool in CMake Configuration\nDESCRIPTION: Installs the 'swift-api-dump.py' script in the bin directory as part of the tools component. This tool is likely used for analyzing Swift APIs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nswift_install_in_component(PROGRAMS swift-api-dump.py\n                           DESTINATION bin\n                           COMPONENT tools)\n```\n\n----------------------------------------\n\nTITLE: Deallocating Existential Boxes in SIL\nDESCRIPTION: Deallocates uninitialized boxed existential container.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_161\n\nLANGUAGE: sil\nCODE:\n```\ndealloc_existential_box %0 : $P, $T\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Swift Def-to-Strings Converter in CMake\nDESCRIPTION: This snippet specifies the libraries to be linked with the swift-def-to-strings-converter tool. It links the swiftLocalization library privately.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-def-to-strings-converter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swift-def-to-strings-converter PRIVATE\n  swiftLocalization)\n```\n\n----------------------------------------\n\nTITLE: Defining swiftStdlibStubs OBJECT Library in CMake\nDESCRIPTION: Creates an OBJECT library target named swiftStdlibStubs with core C++ implementation files including assertion handling, global objects, libc shims, random number generation, stubs, thread local storage, math stubs, and Unicode handling components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/stubs/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftStdlibStubs OBJECT\n  Assert.cpp\n  GlobalObjects.cpp\n  LibcShims.cpp\n  Random.cpp\n  Stubs.cpp\n  ThreadLocalStorage.cpp\n  MathStubs.cpp\n  Unicode/UnicodeData.cpp\n  Unicode/UnicodeGrapheme.cpp\n  Unicode/UnicodeNormalization.cpp\n  Unicode/UnicodeScalarProps.cpp\n  Unicode/UnicodeWord.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flag Addition for Crash Reporter Client in CMake\nDESCRIPTION: Adds a compilation flag for Swift crash reporter client support if the SWIFT_RUNTIME_CRASH_REPORTER_CLIENT option is enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Demangling/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_RUNTIME_CRASH_REPORTER_CLIENT)\n  list(APPEND swift_demangling_compile_flags\n      \"-DSWIFT_HAVE_CRASHREPORTERCLIENT=1\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Hello World Example\nDESCRIPTION: Simple Hello World program demonstrating basic Embedded Swift usage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nprint(\"Hello, embedded world!\")\n```\n\n----------------------------------------\n\nTITLE: Example Function Responsibility Pattern in Swift\nDESCRIPTION: Demonstrates a scenario where a function needs to manage reference counting based on external function calls that might invalidate a global reference.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/CallingConvention.rst#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nfoo() {\n    let r = x       // load from global\n    bar()           // unknown function call\n    use(r)          // use of loaded reference\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via Homebrew on macOS (sh)\nDESCRIPTION: Installs the required build tools CMake, Ninja, and the optional build caching tool Sccache using the Homebrew package manager on macOS. This is the recommended method for installing these dependencies for Swift development on macOS.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbrew install cmake ninja sccache\n```\n\n----------------------------------------\n\nTITLE: Unicode Alphabetic Character Range Definitions\nDESCRIPTION: A mapping of Unicode code point ranges to the 'Alphabetic' property. Each line defines either a single code point or a range of code points that are considered alphabetic characters in the Unicode standard.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n0041..005A    ; Alphabetic\n0061..007A    ; Alphabetic\n00AA          ; Alphabetic\n00B5          ; Alphabetic\n00BA          ; Alphabetic\n00C0..00D6    ; Alphabetic\n00D8..00F6    ; Alphabetic\n00F8..01BA    ; Alphabetic\n01BB          ; Alphabetic\n01BC..01BF    ; Alphabetic\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Math_Symbol (Sm) Characters\nDESCRIPTION: This snippet lists Unicode code points classified as Math_Symbol (Sm). It includes various mathematical symbols and operators used in different notations and formulas.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_27\n\nLANGUAGE: Unicode\nCODE:\n```\n002B          ; Sm #       PLUS SIGN\n003C..003E    ; Sm #   [3] LESS-THAN SIGN..GREATER-THAN SIGN\n007C          ; Sm #       VERTICAL LINE\n007E          ; Sm #       TILDE\n00AC          ; Sm #       NOT SIGN\n00B1          ; Sm #       PLUS-MINUS SIGN\n00D7          ; Sm #       MULTIPLICATION SIGN\n00F7          ; Sm #       DIVISION SIGN\n03F6          ; Sm #       GREEK REVERSED LUNATE EPSILON SYMBOL\n0606..0608    ; Sm #   [3] ARABIC-INDIC CUBE ROOT..ARABIC RAY\n2044          ; Sm #       FRACTION SLASH\n2052          ; Sm #       COMMERCIAL MINUS SIGN\n207A..207C    ; Sm #   [3] SUPERSCRIPT PLUS SIGN..SUPERSCRIPT EQUALS SIGN\n208A..208C    ; Sm #   [3] SUBSCRIPT PLUS SIGN..SUBSCRIPT EQUALS SIGN\n2118          ; Sm #       SCRIPT CAPITAL P\n2140..2144    ; Sm #   [5] DOUBLE-STRUCK N-ARY SUMMATION..TURNED SANS-SERIF CAPITAL Y\n214B          ; Sm #       TURNED AMPERSAND\n2190..2194    ; Sm #   [5] LEFTWARDS ARROW..LEFT RIGHT ARROW\n219A..219B    ; Sm #   [2] LEFTWARDS ARROW WITH STROKE..RIGHTWARDS ARROW WITH STROKE\n21A0          ; Sm #       RIGHTWARDS TWO HEADED ARROW\n21A3          ; Sm #       RIGHTWARDS ARROW WITH TAIL\n21A6          ; Sm #       RIGHTWARDS ARROW FROM BAR\n21AE          ; Sm #       LEFT RIGHT ARROW WITH STROKE\n21CE..21CF    ; Sm #   [2] LEFT RIGHT DOUBLE ARROW WITH STROKE..RIGHTWARDS DOUBLE ARROW WITH STROKE\n21D2          ; Sm #       RIGHTWARDS DOUBLE ARROW\n21D4          ; Sm #       LEFT RIGHT DOUBLE ARROW\n21F4..22FF    ; Sm # [268] RIGHT ARROW WITH SMALL CIRCLE..Z NOTATION BAG MEMBERSHIP\n2320..2321    ; Sm #   [2] TOP HALF INTEGRAL..BOTTOM HALF INTEGRAL\n237C          ; Sm #       RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW\n239B..23B3    ; Sm #  [25] LEFT PARENTHESIS UPPER HOOK..SUMMATION BOTTOM\n23DC..23E1    ; Sm #   [6] TOP PARENTHESIS..BOTTOM TORTOISE SHELL BRACKET\n25B7          ; Sm #       WHITE RIGHT-POINTING TRIANGLE\n25C1          ; Sm #       WHITE LEFT-POINTING TRIANGLE\n25F8..25FF    ; Sm #   [8] UPPER LEFT TRIANGLE..LOWER RIGHT TRIANGLE\n266F          ; Sm #       MUSIC SHARP SIGN\n27C0..27C4    ; Sm #   [5] THREE DIMENSIONAL ANGLE..OPEN SUPERSET\n27C7..27E5    ; Sm #  [31] OR WITH DOT INSIDE..WHITE SQUARE WITH RIGHTWARDS TICK\n27F0..27FF    ; Sm #  [16] UPWARDS QUADRUPLE ARROW..LONG RIGHTWARDS SQUIGGLE ARROW\n2900..2982    ; Sm # [131] RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE..Z NOTATION TYPE COLON\n2999..29D7    ; Sm #  [63] DOTTED FENCE..BLACK HOURGLASS\n29DC..29FB    ; Sm #  [32] INCOMPLETE INFINITY..TRIPLE PLUS\n29FE..2AFF    ; Sm # [258] TINY..N-ARY WHITE VERTICAL BAR\n2B30..2B44    ; Sm #  [21] LEFT ARROW WITH SMALL CIRCLE..RIGHTWARDS ARROW THROUGH SUPERSET\n2B47..2B4C    ; Sm #   [6] REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW..RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR\nFB29          ; Sm #       HEBREW LETTER ALTERNATIVE PLUS SIGN\nFE62          ; Sm #       SMALL PLUS SIGN\nFE64..FE66    ; Sm #   [3] SMALL LESS-THAN SIGN..SMALL EQUALS SIGN\nFF0B          ; Sm #       FULLWIDTH PLUS SIGN\nFF1C..FF1E    ; Sm #   [3] FULLWIDTH LESS-THAN SIGN..FULLWIDTH GREATER-THAN SIGN\nFF5C          ; Sm #       FULLWIDTH VERTICAL LINE\nFF5E          ; Sm #       FULLWIDTH TILDE\nFFE2          ; Sm #       FULLWIDTH NOT SIGN\nFFE9..FFEC    ; Sm #   [4] HALFWIDTH LEFTWARDS ARROW..HALFWIDTH DOWNWARDS ARROW\n10D8E..10D8F  ; Sm #   [2] GARAY PLUS SIGN..GARAY MINUS SIGN\n1D6C1         ; Sm #       MATHEMATICAL BOLD NABLA\n1D6DB         ; Sm #       MATHEMATICAL BOLD PARTIAL DIFFERENTIAL\n1D6FB         ; Sm #       MATHEMATICAL ITALIC NABLA\n1D715         ; Sm #       MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL\n1D735         ; Sm #       MATHEMATICAL BOLD ITALIC NABLA\n1D74F         ; Sm #       MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL\n1D76F         ; Sm #       MATHEMATICAL SANS-SERIF BOLD NABLA\n1D789         ; Sm #       MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL\n1D7A9         ; Sm #       MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA\n1D7C3         ; Sm #       MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL\n1EEF0..1EEF1  ; Sm #   [2] ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL..ARABIC MATHEMATICAL OPERATOR HAH WITH DAL\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Takri Script\nDESCRIPTION: Defines the Unicode code point ranges for the Takri script, including letters, vowel signs, and digits. The total count is 68 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_79\n\nLANGUAGE: text\nCODE:\n```\n11680..116AA  ; Takri # Lo  [43] TAKRI LETTER A..TAKRI LETTER RRA\n116AB         ; Takri # Mn       TAKRI SIGN ANUSVARA\n116AC         ; Takri # Mc       TAKRI SIGN VISARGA\n116AD         ; Takri # Mn       TAKRI VOWEL SIGN AA\n116AE..116AF  ; Takri # Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II\n116B0..116B5  ; Takri # Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU\n116B6         ; Takri # Mc       TAKRI SIGN VIRAMA\n116B7         ; Takri # Mn       TAKRI SIGN NUKTA\n116B8         ; Takri # Lo       TAKRI LETTER ARCHAIC KHA\n116B9         ; Takri # Po       TAKRI ABBREVIATION SIGN\n116C0..116C9  ; Takri # Nd  [10] TAKRI DIGIT ZERO..TAKRI DIGIT NINE\n\n# Total code points: 68\n```\n\n----------------------------------------\n\nTITLE: Configuring ObservationMacros Library in CMake for Swift\nDESCRIPTION: Adds a Swift macro library named ObservationMacros using the add_swift_macro_library function. It includes three source files and specifies four Swift dependencies required for building the library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Macros/Sources/ObservationMacros/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_macro_library(ObservationMacros\n  Availability.swift\n  Extensions.swift\n  ObservableMacro.swift\n  SWIFT_DEPENDENCIES\n    SwiftDiagnostics\n    SwiftSyntaxBuilder\n    SwiftSyntax\n    SwiftSyntaxMacros\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Decimal Code Points with Properties and Ranges\nDESCRIPTION: Lists Unicode code points classified as Decimal type with their properties and descriptions. Contains 760 total code points covering decimal digits across numerous writing systems including Arabic, Devanagari, and specialized mathematical notation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericType.txt#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n0030..0039    ; Decimal # Nd  [10] DIGIT ZERO..DIGIT NINE\n0660..0669    ; Decimal # Nd  [10] ARABIC-INDIC DIGIT ZERO..ARABIC-INDIC DIGIT NINE\n06F0..06F9    ; Decimal # Nd  [10] EXTENDED ARABIC-INDIC DIGIT ZERO..EXTENDED ARABIC-INDIC DIGIT NINE\n07C0..07C9    ; Decimal # Nd  [10] NKO DIGIT ZERO..NKO DIGIT NINE\n0966..096F    ; Decimal # Nd  [10] DEVANAGARI DIGIT ZERO..DEVANAGARI DIGIT NINE\n09E6..09EF    ; Decimal # Nd  [10] BENGALI DIGIT ZERO..BENGALI DIGIT NINE\n0A66..0A6F    ; Decimal # Nd  [10] GURMUKHI DIGIT ZERO..GURMUKHI DIGIT NINE\n0AE6..0AEF    ; Decimal # Nd  [10] GUJARATI DIGIT ZERO..GUJARATI DIGIT NINE\n0B66..0B6F    ; Decimal # Nd  [10] ORIYA DIGIT ZERO..ORIYA DIGIT NINE\n0BE6..0BEF    ; Decimal # Nd  [10] TAMIL DIGIT ZERO..TAMIL DIGIT NINE\n0C66..0C6F    ; Decimal # Nd  [10] TELUGU DIGIT ZERO..TELUGU DIGIT NINE\n0CE6..0CEF    ; Decimal # Nd  [10] KANNADA DIGIT ZERO..KANNADA DIGIT NINE\n0D66..0D6F    ; Decimal # Nd  [10] MALAYALAM DIGIT ZERO..MALAYALAM DIGIT NINE\n0DE6..0DEF    ; Decimal # Nd  [10] SINHALA LITH DIGIT ZERO..SINHALA LITH DIGIT NINE\n0E50..0E59    ; Decimal # Nd  [10] THAI DIGIT ZERO..THAI DIGIT NINE\n0ED0..0ED9    ; Decimal # Nd  [10] LAO DIGIT ZERO..LAO DIGIT NINE\n0F20..0F29    ; Decimal # Nd  [10] TIBETAN DIGIT ZERO..TIBETAN DIGIT NINE\n1040..1049    ; Decimal # Nd  [10] MYANMAR DIGIT ZERO..MYANMAR DIGIT NINE\n1090..1099    ; Decimal # Nd  [10] MYANMAR SHAN DIGIT ZERO..MYANMAR SHAN DIGIT NINE\n17E0..17E9    ; Decimal # Nd  [10] KHMER DIGIT ZERO..KHMER DIGIT NINE\n1810..1819    ; Decimal # Nd  [10] MONGOLIAN DIGIT ZERO..MONGOLIAN DIGIT NINE\n1946..194F    ; Decimal # Nd  [10] LIMBU DIGIT ZERO..LIMBU DIGIT NINE\n19D0..19D9    ; Decimal # Nd  [10] NEW TAI LUE DIGIT ZERO..NEW TAI LUE DIGIT NINE\n1A80..1A89    ; Decimal # Nd  [10] TAI THAM HORA DIGIT ZERO..TAI THAM HORA DIGIT NINE\n1A90..1A99    ; Decimal # Nd  [10] TAI THAM THAM DIGIT ZERO..TAI THAM THAM DIGIT NINE\n1B50..1B59    ; Decimal # Nd  [10] BALINESE DIGIT ZERO..BALINESE DIGIT NINE\n1BB0..1BB9    ; Decimal # Nd  [10] SUNDANESE DIGIT ZERO..SUNDANESE DIGIT NINE\n1C40..1C49    ; Decimal # Nd  [10] LEPCHA DIGIT ZERO..LEPCHA DIGIT NINE\n1C50..1C59    ; Decimal # Nd  [10] OL CHIKI DIGIT ZERO..OL CHIKI DIGIT NINE\nA620..A629    ; Decimal # Nd  [10] VAI DIGIT ZERO..VAI DIGIT NINE\nA8D0..A8D9    ; Decimal # Nd  [10] SAURASHTRA DIGIT ZERO..SAURASHTRA DIGIT NINE\nA900..A909    ; Decimal # Nd  [10] KAYAH LI DIGIT ZERO..KAYAH LI DIGIT NINE\nA9D0..A9D9    ; Decimal # Nd  [10] JAVANESE DIGIT ZERO..JAVANESE DIGIT NINE\nA9F0..A9F9    ; Decimal # Nd  [10] MYANMAR TAI LAING DIGIT ZERO..MYANMAR TAI LAING DIGIT NINE\nAA50..AA59    ; Decimal # Nd  [10] CHAM DIGIT ZERO..CHAM DIGIT NINE\nABF0..ABF9    ; Decimal # Nd  [10] MEETEI MAYEK DIGIT ZERO..MEETEI MAYEK DIGIT NINE\nFF10..FF19    ; Decimal # Nd  [10] FULLWIDTH DIGIT ZERO..FULLWIDTH DIGIT NINE\n104A0..104A9  ; Decimal # Nd  [10] OSMANYA DIGIT ZERO..OSMANYA DIGIT NINE\n10D30..10D39  ; Decimal # Nd  [10] HANIFI ROHINGYA DIGIT ZERO..HANIFI ROHINGYA DIGIT NINE\n10D40..10D49  ; Decimal # Nd  [10] GARAY DIGIT ZERO..GARAY DIGIT NINE\n11066..1106F  ; Decimal # Nd  [10] BRAHMI DIGIT ZERO..BRAHMI DIGIT NINE\n110F0..110F9  ; Decimal # Nd  [10] SORA SOMPENG DIGIT ZERO..SORA SOMPENG DIGIT NINE\n11136..1113F  ; Decimal # Nd  [10] CHAKMA DIGIT ZERO..CHAKMA DIGIT NINE\n111D0..111D9  ; Decimal # Nd  [10] SHARADA DIGIT ZERO..SHARADA DIGIT NINE\n112F0..112F9  ; Decimal # Nd  [10] KHUDAWADI DIGIT ZERO..KHUDAWADI DIGIT NINE\n11450..11459  ; Decimal # Nd  [10] NEWA DIGIT ZERO..NEWA DIGIT NINE\n114D0..114D9  ; Decimal # Nd  [10] TIRHUTA DIGIT ZERO..TIRHUTA DIGIT NINE\n11650..11659  ; Decimal # Nd  [10] MODI DIGIT ZERO..MODI DIGIT NINE\n116C0..116C9  ; Decimal # Nd  [10] TAKRI DIGIT ZERO..TAKRI DIGIT NINE\n116D0..116E3  ; Decimal # Nd  [20] MYANMAR PAO DIGIT ZERO..MYANMAR EASTERN PWO KAREN DIGIT NINE\n11730..11739  ; Decimal # Nd  [10] AHOM DIGIT ZERO..AHOM DIGIT NINE\n118E0..118E9  ; Decimal # Nd  [10] WARANG CITI DIGIT ZERO..WARANG CITI DIGIT NINE\n11950..11959  ; Decimal # Nd  [10] DIVES AKURU DIGIT ZERO..DIVES AKURU DIGIT NINE\n11BF0..11BF9  ; Decimal # Nd  [10] SUNUWAR DIGIT ZERO..SUNUWAR DIGIT NINE\n11C50..11C59  ; Decimal # Nd  [10] BHAIKSUKI DIGIT ZERO..BHAIKSUKI DIGIT NINE\n11D50..11D59  ; Decimal # Nd  [10] MASARAM GONDI DIGIT ZERO..MASARAM GONDI DIGIT NINE\n11DA0..11DA9  ; Decimal # Nd  [10] GUNJALA GONDI DIGIT ZERO..GUNJALA GONDI DIGIT NINE\n11F50..11F59  ; Decimal # Nd  [10] KAWI DIGIT ZERO..KAWI DIGIT NINE\n16130..16139  ; Decimal # Nd  [10] GURUNG KHEMA DIGIT ZERO..GURUNG KHEMA DIGIT NINE\n16A60..16A69  ; Decimal # Nd  [10] MRO DIGIT ZERO..MRO DIGIT NINE\n16AC0..16AC9  ; Decimal # Nd  [10] TANGSA DIGIT ZERO..TANGSA DIGIT NINE\n16B50..16B59  ; Decimal # Nd  [10] PAHAWH HMONG DIGIT ZERO..PAHAWH HMONG DIGIT NINE\n16D70..16D79  ; Decimal # Nd  [10] KIRAT RAI DIGIT ZERO..KIRAT RAI DIGIT NINE\n1CCF0..1CCF9  ; Decimal # Nd  [10] OUTLINED DIGIT ZERO..OUTLINED DIGIT NINE\n1D7CE..1D7FF  ; Decimal # Nd  [50] MATHEMATICAL BOLD DIGIT ZERO..MATHEMATICAL MONOSPACE DIGIT NINE\n1E140..1E149  ; Decimal # Nd  [10] NYIAKENG PUACHUE HMONG DIGIT ZERO..NYIAKENG PUACHUE HMONG DIGIT NINE\n1E2F0..1E2F9  ; Decimal # Nd  [10] WANCHO DIGIT ZERO..WANCHO DIGIT NINE\n1E4F0..1E4F9  ; Decimal # Nd  [10] NAG MUNDARI DIGIT ZERO..NAG MUNDARI DIGIT NINE\n1E5F1..1E5FA  ; Decimal # Nd  [10] OL ONAL DIGIT ZERO..OL ONAL DIGIT NINE\n1E950..1E959  ; Decimal # Nd  [10] ADLAM DIGIT ZERO..ADLAM DIGIT NINE\n1FBF0..1FBF9  ; Decimal # Nd  [10] SEGMENTED DIGIT ZERO..SEGMENTED DIGIT NINE\n\n# Total code points: 760\n```\n\n----------------------------------------\n\nTITLE: Word Break Property Test Cases - Format Characters and Special Symbols\nDESCRIPTION: Test cases validating word break behavior between format characters, joiners, and various Unicode symbols including letters, numbers, and punctuation marks. Each line tests different character combinations against Unicode segmentation rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n÷ 0300 × 0308 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] COMBINING GRAVE ACCENT (Extend_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Batak Script\nDESCRIPTION: Defines the Unicode code point ranges for the Batak script, categorizing characters as letters, vowel signs, and symbols. The total count is 56 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_70\n\nLANGUAGE: text\nCODE:\n```\n1BC0..1BE5    ; Batak # Lo  [38] BATAK LETTER A..BATAK LETTER U\n1BE6          ; Batak # Mn       BATAK SIGN TOMPI\n1BE7          ; Batak # Mc       BATAK VOWEL SIGN E\n1BE8..1BE9    ; Batak # Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE\n1BEA..1BEC    ; Batak # Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O\n1BED          ; Batak # Mn       BATAK VOWEL SIGN KARO O\n1BEE          ; Batak # Mc       BATAK VOWEL SIGN U\n1BEF..1BF1    ; Batak # Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H\n1BF2..1BF3    ; Batak # Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN\n1BFC..1BFF    ; Batak # Po   [4] BATAK SYMBOL BINDU NA METEK..BATAK SYMBOL BINDU PANGOLAT\n\n# Total code points: 56\n```\n\n----------------------------------------\n\nTITLE: Compiling Swift Generics PDF using Latexmk\nDESCRIPTION: This snippet shows how to use the 'latexmk' command to compile the Swift Generics PDF. It runs pdflatex and bibtex repeatedly until a fixed point is reached, ensuring all references are resolved.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Generics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd docs/Generics/\nlatexmk -pdf generics.tex\n```\n\n----------------------------------------\n\nTITLE: Git Commit Fixup Command Reference\nDESCRIPTION: Git command for creating fixup commits during the code review process\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/FirstPullRequest.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit commit --fixup ...\n```\n\n----------------------------------------\n\nTITLE: Adding Source Files to swiftSILOptimizer Target in CMake\nDESCRIPTION: Specifies the C++ source files that constitute the Swift SIL Optimizer component, focusing on different SILCombiner visitors for various optimization patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/SILCombiner/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  SILCombine.cpp\n  SILCombinerApplyVisitors.cpp\n  SILCombinerBuiltinVisitors.cpp\n  SILCombinerCastVisitors.cpp\n  SILCombinerMiscVisitors.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for New Tai Lue Script\nDESCRIPTION: Defines the Unicode code point ranges for the New Tai Lue script, categorizing characters by their types (Lo, Nd, No, So) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_33\n\nLANGUAGE: Unicode\nCODE:\n```\n1980..19AB    ; New_Tai_Lue # Lo  [44] NEW TAI LUE LETTER HIGH QA..NEW TAI LUE LETTER LOW SUA\n19B0..19C9    ; New_Tai_Lue # Lo  [26] NEW TAI LUE VOWEL SIGN VOWEL SHORTENER..NEW TAI LUE TONE MARK-2\n19D0..19D9    ; New_Tai_Lue # Nd  [10] NEW TAI LUE DIGIT ZERO..NEW TAI LUE DIGIT NINE\n19DA          ; New_Tai_Lue # No       NEW TAI LUE THAM DIGIT ONE\n19DE..19DF    ; New_Tai_Lue # So   [2] NEW TAI LUE SIGN LAE..NEW TAI LUE SIGN LAEV\n\n# Total code points: 83\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Swift Benchmark_O\nDESCRIPTION: Tests error handling for various invalid command-line arguments including bogus arguments, missing values, invalid numeric values, and invalid tags. Verifies proper error messages are displayed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nRUN: not %Benchmark_O --bogus 2>&1 \\\nRUN:              | %FileCheck %s --check-prefix ARGPARSE\nARGPARSE: error: unsupported argument '--bogus'\n\nRUN: not %Benchmark_O --sample-time \\\nRUN:         2>&1 | %FileCheck %s --check-prefix NOVALUE\nNOVALUE: error: missing value for '--sample-time'\n\nRUN: not %Benchmark_O --sample-time= \\\nRUN:         2>&1 | %FileCheck %s --check-prefix EMPTYVAL\nEMPTYVAL: error: missing value for '--sample-time'\n\nRUN: not %Benchmark_O --sample-time=NaN \\\nRUN:         2>&1 | %FileCheck %s --check-prefix NANVALUE\nNANVALUE: error: 'NaN' is not a valid 'Double' for '--sample-time'\n\nRUN: not %Benchmark_O --num-iters \\\nRUN:         2>&1 | %FileCheck %s --check-prefix NUMITERS\nNUMITERS: error: missing value for '--num-iters'\n\nRUN: not %Benchmark_O --num-samples \\\nRUN:         2>&1 | %FileCheck %s --check-prefix NUMSAMPLES\nNUMSAMPLES: error: missing value for '--num-samples'\n\nRUN: not %Benchmark_O --sleep \\\nRUN:         2>&1 | %FileCheck %s --check-prefix SLEEP\nSLEEP: error: missing value for '--sleep'\n\nRUN: not %Benchmark_O --delim \\\nRUN:         2>&1 | %FileCheck %s --check-prefix DELIM\nDELIM: error: missing value for '--delim'\n\nRUN: not %Benchmark_O --tags=bogus \\\nRUN:         2>&1 | %FileCheck %s --check-prefix BADTAG\nBADTAG: error: 'bogus' is not a valid 'BenchmarkCategory'\n\nRUN: not %Benchmark_O --skip-tags=bogus \\\nRUN:         2>&1 | %FileCheck %s --check-prefix BADSKIPTAG\nBADSKIPTAG: error: 'bogus' is not a valid 'BenchmarkCategory'\n```\n\n----------------------------------------\n\nTITLE: Adding Platform-Specific Dependencies for Non-Darwin Systems in CMake\nDESCRIPTION: Conditionally adds platform-specific interface dependencies for non-Darwin systems. On platforms other than macOS, this links SourceKitSupport with the dispatch library for GCD support and BlocksRuntime for C blocks functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/lib/Support/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  target_link_libraries(SourceKitSupport INTERFACE\n    dispatch\n    BlocksRuntime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Flags for Non-Resilient Build in CMake\nDESCRIPTION: Removes the -enable-library-evolution flag from the standard Swift library flags to create a non-resilient build configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RegexParser/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS_NO_RESILIENCE)\nstring(REGEX REPLACE \"-enable-library-evolution\" \"\"\n  SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS_NO_RESILIENCE\n  \"${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\")\n```\n\n----------------------------------------\n\nTITLE: Unicode Sharp S Special Casing Definition\nDESCRIPTION: Defines special case mapping for the German es-zed (ß) character, which has a normal uppercase mapping to 'SS'. The definition follows the format of code, lowercase, titlecase, and uppercase representations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_0\n\nLANGUAGE: unicode\nCODE:\n```\n00DF; 00DF; 0053 0073; 0053 0053; # LATIN SMALL LETTER SHARP S\n```\n\n----------------------------------------\n\nTITLE: Setting Darwin Platform Linking Options\nDESCRIPTION: Configures linking flags for Darwin platforms to control dyld shared cache compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\" AND\n   LLVM_LINKER_IS_APPLE AND\n   NOT SWIFT_RUNTIME_DYLD_SHARED_CACHE_COMPATIBLE)\n  set(shared_cache_link_flags \"LINKER:-not_for_dyld_shared_cache\")\n  list(APPEND SWIFT_RUNTIME_LINK_FLAGS ${shared_cache_link_flags})\n  list(APPEND SWIFT_RUNTIME_SWIFT_LINK_FLAGS ${shared_cache_link_flags})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Deallocating Box Value in SIL\nDESCRIPTION: Syntax for deallocating a box while bypassing reference counting. The box must have a retain count of one and the boxed type must match the allocated type exactly.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_17\n\nLANGUAGE: sil\nCODE:\n```\ndealloc_box %0 : $@box T\n```\n\n----------------------------------------\n\nTITLE: Nukta Character Definitions\nDESCRIPTION: Defines Unicode code points for Nukta signs used as diacritics for borrowed consonants or consonant modifications across Indic scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_1\n\nLANGUAGE: unicode\nCODE:\n```\n093C          ; Nukta # Mn       DEVANAGARI SIGN NUKTA\n09BC          ; Nukta # Mn       BENGALI SIGN NUKTA\n0A3C          ; Nukta # Mn       GURMUKHI SIGN NUKTA\n0ABC          ; Nukta # Mn       GUJARATI SIGN NUKTA\n```\n\n----------------------------------------\n\nTITLE: Defining Syllable_Modifier Unicode Character Range\nDESCRIPTION: Specifies Unicode code points classified as Syllable_Modifier in the Indic_Syllabic_Category property. These are miscellaneous combining characters that modify something in the orthographic syllable they appear in.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_24\n\nLANGUAGE: unicode\nCODE:\n```\n00B2..00B3    ; Syllable_Modifier # No   [2] SUPERSCRIPT TWO..SUPERSCRIPT THREE\n09FE          ; Syllable_Modifier # Mn       BENGALI SANDHI MARK\n0ECE          ; Syllable_Modifier # Mn       LAO YAMAKKAN\n0F35          ; Syllable_Modifier # Mn       TIBETAN MARK NGAS BZUNG NYI ZLA\n0F37          ; Syllable_Modifier # Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS\n0FC6          ; Syllable_Modifier # Mn       TIBETAN SYMBOL PADMA GDAN\n17CB          ; Syllable_Modifier # Mn       KHMER SIGN BANTOC\n17CE..17D0    ; Syllable_Modifier # Mn   [3] KHMER SIGN KAKABAT..KHMER SIGN SAMYOK SANNYA\n17D3          ; Syllable_Modifier # Mn       KHMER SIGN BATHAMASAT\n17DD          ; Syllable_Modifier # Mn       KHMER SIGN ATTHACAN\n193B          ; Syllable_Modifier # Mn       LIMBU SIGN SA-I\n1A7B..1A7C    ; Syllable_Modifier # Mn   [2] TAI THAM SIGN MAI SAM..TAI THAM SIGN KHUEN-LUE KARAN\n1A7F          ; Syllable_Modifier # Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT\n1C36          ; Syllable_Modifier # Mn       LEPCHA SIGN RAN\n1DFB          ; Syllable_Modifier # Mn       COMBINING DELETION MARK\n2074          ; Syllable_Modifier # No       SUPERSCRIPT FOUR\n2082..2084    ; Syllable_Modifier # No   [3] SUBSCRIPT TWO..SUBSCRIPT FOUR\n111C9         ; Syllable_Modifier # Mn       SHARADA SANDHI MARK\n1145E         ; Syllable_Modifier # Mn       NEWA SANDHI MARK\n11A33         ; Syllable_Modifier # Mn       ZANABAZAR SQUARE FINAL CONSONANT MARK\n```\n\n----------------------------------------\n\nTITLE: Remote Reflection Record Mangling\nDESCRIPTION: Defines mangling patterns for remote reflection records, including field descriptors, associated type descriptors, and builtin type descriptors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nremote-reflection-record ::= 'f' type                  // field descriptor\nremote-reflection-record ::= 'a' protocol-conformance  // associated type descriptor\nremote-reflection-record ::= 'b' type                  // builtin type descriptor\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Kharoshthi Script\nDESCRIPTION: Defines the Unicode code point ranges for the Kharoshthi script, categorizing characters by their types (Lo, Mn, No, Po) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_38\n\nLANGUAGE: Unicode\nCODE:\n```\n10A00         ; Kharoshthi # Lo       KHAROSHTHI LETTER A\n10A01..10A03  ; Kharoshthi # Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R\n10A05..10A06  ; Kharoshthi # Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O\n10A0C..10A0F  ; Kharoshthi # Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA\n10A10..10A13  ; Kharoshthi # Lo   [4] KHAROSHTHI LETTER KA..KHAROSHTHI LETTER GHA\n10A15..10A17  ; Kharoshthi # Lo   [3] KHAROSHTHI LETTER CA..KHAROSHTHI LETTER JA\n10A19..10A35  ; Kharoshthi # Lo  [29] KHAROSHTHI LETTER NYA..KHAROSHTHI LETTER VHA\n10A38..10A3A  ; Kharoshthi # Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW\n10A3F         ; Kharoshthi # Mn       KHAROSHTHI VIRAMA\n10A40..10A48  ; Kharoshthi # No   [9] KHAROSHTHI DIGIT ONE..KHAROSHTHI FRACTION ONE HALF\n10A50..10A58  ; Kharoshthi # Po   [9] KHAROSHTHI PUNCTUATION DOT..KHAROSHTHI PUNCTUATION LINES\n\n# Total code points: 68\n```\n\n----------------------------------------\n\nTITLE: Inject_enum_addr Instruction: Setting Enum Case Tag\nDESCRIPTION: The inject_enum_addr instruction completes enum initialization by setting the tag for a specific case, after any required data has been stored at the init_enum_data_addr address.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_142\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'inject_enum_addr' sil-operand ',' sil-decl-ref\n\ninject_enum_addr %0 : $*U, #U.Case!enumelt\n// $U must be an enum type\n// #U.Case must be a case of enum $U\n// %0 will be overlaid with the tag for #U.Case\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift CMake Template File\nDESCRIPTION: Processes the SwiftConfig.cmake.in template file to create the actual SwiftConfig.cmake configuration file in the build directory. This allows other projects to find and use Swift libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/cmake/modules/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nconfigure_file(\n  SwiftConfig.cmake.in\n  ${swift_cmake_builddir}/SwiftConfig.cmake\n  @ONLY)\n```\n\n----------------------------------------\n\nTITLE: Defining CR, LF, and Control Characters for Grapheme Cluster Break in Unicode\nDESCRIPTION: This snippet defines Unicode code points for Carriage Return (CR), Line Feed (LF), and Control characters in the context of Grapheme_Cluster_Break. It includes various control characters, format characters, and reserved code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n000D          ; CR # Cc       <control-000D>\n\n000A          ; LF # Cc       <control-000A>\n\n0000..0009    ; Control # Cc  [10] <control-0000>..<control-0009>\n000B..000C    ; Control # Cc   [2] <control-000B>..<control-000C>\n000E..001F    ; Control # Cc  [18] <control-000E>..<control-001F>\n007F..009F    ; Control # Cc  [33] <control-007F>..<control-009F>\n00AD          ; Control # Cf       SOFT HYPHEN\n061C          ; Control # Cf       ARABIC LETTER MARK\n180E          ; Control # Cf       MONGOLIAN VOWEL SEPARATOR\n200B          ; Control # Cf       ZERO WIDTH SPACE\n200E..200F    ; Control # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n2028          ; Control # Zl       LINE SEPARATOR\n2029          ; Control # Zp       PARAGRAPH SEPARATOR\n202A..202E    ; Control # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n2060..2064    ; Control # Cf   [5] WORD JOINER..INVISIBLE PLUS\n2065          ; Control # Cn       <reserved-2065>\n2066..206F    ; Control # Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES\nFEFF          ; Control # Cf       ZERO WIDTH NO-BREAK SPACE\nFFF0..FFF8    ; Control # Cn   [9] <reserved-FFF0>..<reserved-FFF8>\nFFF9..FFFB    ; Control # Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR\n13430..1343F  ; Control # Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE\n1BCA0..1BCA3  ; Control # Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP\n1D173..1D17A  ; Control # Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE\nE0000         ; Control # Cn       <reserved-E0000>\nE0001         ; Control # Cf       LANGUAGE TAG\nE0002..E001F  ; Control # Cn  [30] <reserved-E0002>..<reserved-E001F>\nE0080..E00FF  ; Control # Cn [128] <reserved-E0080>..<reserved-E00FF>\nE01F0..E0FFF  ; Control # Cn [3600] <reserved-E01F0>..<reserved-E0FFF>\n```\n\n----------------------------------------\n\nTITLE: Regex Parser Configuration\nDESCRIPTION: Adds compiler definition for regex parser support when enabled in the build configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Parse/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_REGEX_PARSER_IN_COMPILER)\n  target_compile_definitions(swiftParse\n    PUBLIC\n    SWIFT_BUILD_REGEX_PARSER_IN_COMPILER\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Configuration in CMake\nDESCRIPTION: Adds code coverage instrumentation flags when SWIFT_ANALYZE_CODE_COVERAGE is enabled. This configuration allows for generating code coverage data during test execution.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/complete-test/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_ANALYZE_CODE_COVERAGE)\n  set_property(TARGET complete-test APPEND_STRING PROPERTY\n    LINK_FLAGS \" -fprofile-instr-generate -fcoverage-mapping\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running swift-xcodegen script with basic syntax\nDESCRIPTION: Basic command to generate an Xcode project for Swift using the swift-xcodegen script. It requires specifying a build directory path as an argument, which is the Ninja build directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/swift-xcodegen/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./swift-xcodegen <build dir>\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for ALetter Category\nDESCRIPTION: This code snippet defines Unicode character ranges for the ALetter category. It includes various scripts and writing systems, specifying their code points and descriptions. The ranges cover letters from ancient and modern scripts, mathematical symbols, and other specialized characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n11213..1122B  ; ALetter # Lo  [25] KHOJKI LETTER NYA..KHOJKI LETTER LLA\n1123F..11240  ; ALetter # Lo   [2] KHOJKI LETTER QA..KHOJKI LETTER SHORT I\n11280..11286  ; ALetter # Lo   [7] MULTANI LETTER A..MULTANI LETTER GA\n11288         ; ALetter # Lo       MULTANI LETTER GHA\n1128A..1128D  ; ALetter # Lo   [4] MULTANI LETTER CA..MULTANI LETTER JJA\n1128F..1129D  ; ALetter # Lo  [15] MULTANI LETTER NYA..MULTANI LETTER BA\n1129F..112A8  ; ALetter # Lo  [10] MULTANI LETTER BHA..MULTANI LETTER RHA\n112B0..112DE  ; ALetter # Lo  [47] KHUDAWADI LETTER A..KHUDAWADI LETTER HA\n11305..1130C  ; ALetter # Lo   [8] GRANTHA LETTER A..GRANTHA LETTER VOCALIC L\n1130F..11310  ; ALetter # Lo   [2] GRANTHA LETTER EE..GRANTHA LETTER AI\n11313..11328  ; ALetter # Lo  [22] GRANTHA LETTER OO..GRANTHA LETTER NA\n1132A..11330  ; ALetter # Lo   [7] GRANTHA LETTER PA..GRANTHA LETTER RA\n11332..11333  ; ALetter # Lo   [2] GRANTHA LETTER LA..GRANTHA LETTER LLA\n11335..11339  ; ALetter # Lo   [5] GRANTHA LETTER VA..GRANTHA LETTER HA\n1133D         ; ALetter # Lo       GRANTHA SIGN AVAGRAHA\n11350         ; ALetter # Lo       GRANTHA OM\n1135D..11361  ; ALetter # Lo   [5] GRANTHA SIGN PLUTA..GRANTHA LETTER VOCALIC LL\n11380..11389  ; ALetter # Lo  [10] TULU-TIGALARI LETTER A..TULU-TIGALARI LETTER VOCALIC LL\n1138B         ; ALetter # Lo       TULU-TIGALARI LETTER EE\n1138E         ; ALetter # Lo       TULU-TIGALARI LETTER AI\n11390..113B5  ; ALetter # Lo  [38] TULU-TIGALARI LETTER OO..TULU-TIGALARI LETTER LLLA\n113B7         ; ALetter # Lo       TULU-TIGALARI SIGN AVAGRAHA\n113D1         ; ALetter # Lo       TULU-TIGALARI REPHA\n113D3         ; ALetter # Lo       TULU-TIGALARI SIGN PLUTA\n11400..11434  ; ALetter # Lo  [53] NEWA LETTER A..NEWA LETTER HA\n11447..1144A  ; ALetter # Lo   [4] NEWA SIGN AVAGRAHA..NEWA SIDDHI\n1145F..11461  ; ALetter # Lo   [3] NEWA LETTER VEDIC ANUSVARA..NEWA SIGN UPADHMANIYA\n11480..114AF  ; ALetter # Lo  [48] TIRHUTA ANJI..TIRHUTA LETTER HA\n114C4..114C5  ; ALetter # Lo   [2] TIRHUTA SIGN AVAGRAHA..TIRHUTA GVANG\n114C7         ; ALetter # Lo       TIRHUTA OM\n11580..115AE  ; ALetter # Lo  [47] SIDDHAM LETTER A..SIDDHAM LETTER HA\n115D8..115DB  ; ALetter # Lo   [4] SIDDHAM LETTER THREE-CIRCLE ALTERNATE I..SIDDHAM LETTER ALTERNATE U\n11600..1162F  ; ALetter # Lo  [48] MODI LETTER A..MODI LETTER LLA\n11644         ; ALetter # Lo       MODI SIGN HUVA\n11680..116AA  ; ALetter # Lo  [43] TAKRI LETTER A..TAKRI LETTER RRA\n116B8         ; ALetter # Lo       TAKRI LETTER ARCHAIC KHA\n11800..1182B  ; ALetter # Lo  [44] DOGRA LETTER A..DOGRA LETTER RRA\n118A0..118DF  ; ALetter # L&  [64] WARANG CITI CAPITAL LETTER NGAA..WARANG CITI SMALL LETTER VIYO\n118FF..11906  ; ALetter # Lo   [8] WARANG CITI OM..DIVES AKURU LETTER E\n11909         ; ALetter # Lo       DIVES AKURU LETTER O\n1190C..11913  ; ALetter # Lo   [8] DIVES AKURU LETTER KA..DIVES AKURU LETTER JA\n11915..11916  ; ALetter # Lo   [2] DIVES AKURU LETTER NYA..DIVES AKURU LETTER TTA\n11918..1192F  ; ALetter # Lo  [24] DIVES AKURU LETTER DDA..DIVES AKURU LETTER ZA\n1193F         ; ALetter # Lo       DIVES AKURU PREFIXED NASAL SIGN\n11941         ; ALetter # Lo       DIVES AKURU INITIAL RA\n119A0..119A7  ; ALetter # Lo   [8] NANDINAGARI LETTER A..NANDINAGARI LETTER VOCALIC RR\n119AA..119D0  ; ALetter # Lo  [39] NANDINAGARI LETTER E..NANDINAGARI LETTER RRA\n119E1         ; ALetter # Lo       NANDINAGARI SIGN AVAGRAHA\n119E3         ; ALetter # Lo       NANDINAGARI HEADSTROKE\n11A00         ; ALetter # Lo       ZANABAZAR SQUARE LETTER A\n11A0B..11A32  ; ALetter # Lo  [40] ZANABAZAR SQUARE LETTER KA..ZANABAZAR SQUARE LETTER KSSA\n11A3A         ; ALetter # Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA\n11A50         ; ALetter # Lo       SOYOMBO LETTER A\n11A5C..11A89  ; ALetter # Lo  [46] SOYOMBO LETTER KA..SOYOMBO CLUSTER-INITIAL LETTER SA\n11A9D         ; ALetter # Lo       SOYOMBO MARK PLUTA\n11AB0..11AF8  ; ALetter # Lo  [73] CANADIAN SYLLABICS NATTILIK HI..PAU CIN HAU GLOTTAL STOP FINAL\n11BC0..11BE0  ; ALetter # Lo  [33] SUNUWAR LETTER DEVI..SUNUWAR LETTER KLOKO\n11C00..11C08  ; ALetter # Lo   [9] BHAIKSUKI LETTER A..BHAIKSUKI LETTER VOCALIC L\n11C0A..11C2E  ; ALetter # Lo  [37] BHAIKSUKI LETTER E..BHAIKSUKI LETTER HA\n11C40         ; ALetter # Lo       BHAIKSUKI SIGN AVAGRAHA\n11C72..11C8F  ; ALetter # Lo  [30] MARCHEN LETTER KA..MARCHEN LETTER A\n11D00..11D06  ; ALetter # Lo   [7] MASARAM GONDI LETTER A..MASARAM GONDI LETTER E\n11D08..11D09  ; ALetter # Lo   [2] MASARAM GONDI LETTER AI..MASARAM GONDI LETTER O\n11D0B..11D30  ; ALetter # Lo  [38] MASARAM GONDI LETTER AU..MASARAM GONDI LETTER TRA\n11D46         ; ALetter # Lo       MASARAM GONDI REPHA\n11D60..11D65  ; ALetter # Lo   [6] GUNJALA GONDI LETTER A..GUNJALA GONDI LETTER UU\n11D67..11D68  ; ALetter # Lo   [2] GUNJALA GONDI LETTER EE..GUNJALA GONDI LETTER AI\n11D6A..11D89  ; ALetter # Lo  [32] GUNJALA GONDI LETTER OO..GUNJALA GONDI LETTER SA\n11D98         ; ALetter # Lo       GUNJALA GONDI OM\n11EE0..11EF2  ; ALetter # Lo  [19] MAKASAR LETTER KA..MAKASAR ANGKA\n11F02         ; ALetter # Lo       KAWI SIGN REPHA\n11F04..11F10  ; ALetter # Lo  [13] KAWI LETTER A..KAWI LETTER O\n11F12..11F33  ; ALetter # Lo  [34] KAWI LETTER KA..KAWI LETTER JNYA\n11FB0         ; ALetter # Lo       LISU LETTER YHA\n12000..12399  ; ALetter # Lo [922] CUNEIFORM SIGN A..CUNEIFORM SIGN U U\n12400..1246E  ; ALetter # Nl [111] CUNEIFORM NUMERIC SIGN TWO ASH..CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM\n12480..12543  ; ALetter # Lo [196] CUNEIFORM SIGN AB TIMES NUN TENU..CUNEIFORM SIGN ZU5 TIMES THREE DISH TENU\n12F90..12FF0  ; ALetter # Lo  [97] CYPRO-MINOAN SIGN CM001..CYPRO-MINOAN SIGN CM114\n13000..1342F  ; ALetter # Lo [1072] EGYPTIAN HIEROGLYPH A001..EGYPTIAN HIEROGLYPH V011D\n13441..13446  ; ALetter # Lo   [6] EGYPTIAN HIEROGLYPH FULL BLANK..EGYPTIAN HIEROGLYPH WIDE LOST SIGN\n13460..143FA  ; ALetter # Lo [3995] EGYPTIAN HIEROGLYPH-13460..EGYPTIAN HIEROGLYPH-143FA\n14400..14646  ; ALetter # Lo [583] ANATOLIAN HIEROGLYPH A001..ANATOLIAN HIEROGLYPH A530\n16100..1611D  ; ALetter # Lo  [30] GURUNG KHEMA LETTER A..GURUNG KHEMA LETTER SA\n16800..16A38  ; ALetter # Lo [569] BAMUM LETTER PHASE-A NGKUE MFON..BAMUM LETTER PHASE-F VUEQ\n16A40..16A5E  ; ALetter # Lo  [31] MRO LETTER TA..MRO LETTER TEK\n16A70..16ABE  ; ALetter # Lo  [79] TANGSA LETTER OZ..TANGSA LETTER ZA\n16AD0..16AED  ; ALetter # Lo  [30] BASSA VAH LETTER ENNI..BASSA VAH LETTER I\n16B00..16B2F  ; ALetter # Lo  [48] PAHAWH HMONG VOWEL KEEB..PAHAWH HMONG CONSONANT CAU\n16B40..16B43  ; ALetter # Lm   [4] PAHAWH HMONG SIGN VOS SEEV..PAHAWH HMONG SIGN IB YAM\n16B63..16B77  ; ALetter # Lo  [21] PAHAWH HMONG SIGN VOS LUB..PAHAWH HMONG SIGN CIM NRES TOS\n16B7D..16B8F  ; ALetter # Lo  [19] PAHAWH HMONG CLAN SIGN TSHEEJ..PAHAWH HMONG CLAN SIGN VWJ\n16D40..16D42  ; ALetter # Lm   [3] KIRAT RAI SIGN ANUSVARA..KIRAT RAI SIGN VISARGA\n16D43..16D6A  ; ALetter # Lo  [40] KIRAT RAI LETTER A..KIRAT RAI VOWEL SIGN AU\n16D6B..16D6C  ; ALetter # Lm   [2] KIRAT RAI SIGN VIRAMA..KIRAT RAI SIGN SAAT\n16E40..16E7F  ; ALetter # L&  [64] MEDEFAIDRIN CAPITAL LETTER M..MEDEFAIDRIN SMALL LETTER Y\n16F00..16F4A  ; ALetter # Lo  [75] MIAO LETTER PA..MIAO LETTER RTE\n16F50         ; ALetter # Lo       MIAO LETTER NASALIZATION\n16F93..16F9F  ; ALetter # Lm  [13] MIAO LETTER TONE-2..MIAO LETTER REFORMED TONE-8\n16FE0..16FE1  ; ALetter # Lm   [2] TANGUT ITERATION MARK..NUSHU ITERATION MARK\n16FE3         ; ALetter # Lm       OLD CHINESE ITERATION MARK\n1BC00..1BC6A  ; ALetter # Lo [107] DUPLOYAN LETTER H..DUPLOYAN LETTER VOCALIC M\n1BC70..1BC7C  ; ALetter # Lo  [13] DUPLOYAN AFFIX LEFT HORIZONTAL SECANT..DUPLOYAN AFFIX ATTACHED TANGENT HOOK\n1BC80..1BC88  ; ALetter # Lo   [9] DUPLOYAN AFFIX HIGH ACUTE..DUPLOYAN AFFIX HIGH VERTICAL\n1BC90..1BC99  ; ALetter # Lo  [10] DUPLOYAN AFFIX LOW ACUTE..DUPLOYAN AFFIX LOW ARROW\n1D400..1D454  ; ALetter # L&  [85] MATHEMATICAL BOLD CAPITAL A..MATHEMATICAL ITALIC SMALL G\n1D456..1D49C  ; ALetter # L&  [71] MATHEMATICAL ITALIC SMALL I..MATHEMATICAL SCRIPT CAPITAL A\n1D49E..1D49F  ; ALetter # L&   [2] MATHEMATICAL SCRIPT CAPITAL C..MATHEMATICAL SCRIPT CAPITAL D\n1D4A2         ; ALetter # L&       MATHEMATICAL SCRIPT CAPITAL G\n1D4A5..1D4A6  ; ALetter # L&   [2] MATHEMATICAL SCRIPT CAPITAL J..MATHEMATICAL SCRIPT CAPITAL K\n1D4A9..1D4AC  ; ALetter # L&   [4] MATHEMATICAL SCRIPT CAPITAL N..MATHEMATICAL SCRIPT CAPITAL Q\n1D4AE..1D4B9  ; ALetter # L&  [12] MATHEMATICAL SCRIPT CAPITAL S..MATHEMATICAL SCRIPT SMALL D\n1D4BB         ; ALetter # L&       MATHEMATICAL SCRIPT SMALL F\n1D4BD..1D4C3  ; ALetter # L&   [7] MATHEMATICAL SCRIPT SMALL H..MATHEMATICAL SCRIPT SMALL N\n1D4C5..1D505  ; ALetter # L&  [65] MATHEMATICAL SCRIPT SMALL P..MATHEMATICAL FRAKTUR CAPITAL B\n1D507..1D50A  ; ALetter # L&   [4] MATHEMATICAL FRAKTUR CAPITAL D..MATHEMATICAL FRAKTUR CAPITAL G\n1D50D..1D514  ; ALetter # L&   [8] MATHEMATICAL FRAKTUR CAPITAL J..MATHEMATICAL FRAKTUR CAPITAL Q\n1D516..1D51C  ; ALetter # L&   [7] MATHEMATICAL FRAKTUR CAPITAL S..MATHEMATICAL FRAKTUR CAPITAL Y\n1D51E..1D539  ; ALetter # L&  [28] MATHEMATICAL FRAKTUR SMALL A..MATHEMATICAL DOUBLE-STRUCK CAPITAL B\n1D53B..1D53E  ; ALetter # L&   [4] MATHEMATICAL DOUBLE-STRUCK CAPITAL D..MATHEMATICAL DOUBLE-STRUCK CAPITAL G\n1D540..1D544  ; ALetter # L&   [5] MATHEMATICAL DOUBLE-STRUCK CAPITAL I..MATHEMATICAL DOUBLE-STRUCK CAPITAL M\n1D546         ; ALetter # L&       MATHEMATICAL DOUBLE-STRUCK CAPITAL O\n1D54A..1D550  ; ALetter # L&   [7] MATHEMATICAL DOUBLE-STRUCK CAPITAL S..MATHEMATICAL DOUBLE-STRUCK CAPITAL Y\n1D552..1D6A5  ; ALetter # L& [340] MATHEMATICAL DOUBLE-STRUCK SMALL A..MATHEMATICAL ITALIC SMALL DOTLESS J\n1D6A8..1D6C0  ; ALetter # L&  [25] MATHEMATICAL BOLD CAPITAL ALPHA..MATHEMATICAL BOLD CAPITAL OMEGA\n1D6C2..1D6DA  ; ALetter # L&  [25] MATHEMATICAL BOLD SMALL ALPHA..MATHEMATICAL BOLD SMALL OMEGA\n1D6DC..1D6FA  ; ALetter # L&  [31] MATHEMATICAL BOLD EPSILON SYMBOL..MATHEMATICAL ITALIC CAPITAL OMEGA\n1D6FC..1D714  ; ALetter # L&  [25] MATHEMATICAL ITALIC SMALL ALPHA..MATHEMATICAL ITALIC SMALL OMEGA\n```\n\n----------------------------------------\n\nTITLE: Unicode ID_Continue Property Range Definitions\nDESCRIPTION: Comprehensive list of Unicode code point ranges that have the ID_Continue property, used to determine valid continuation characters in identifiers. Each line defines either a single code point or a range in hexadecimal notation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_30\n\nLANGUAGE: unicode\nCODE:\n```\n1163D         ; ID_Continue\n1163E         ; ID_Continue\n1163F..11640  ; ID_Continue\n[...truncated...]\nE0100..E01EF  ; ID_Continue\n\n# Total code points: 144541\n```\n\n----------------------------------------\n\nTITLE: Setting Up SDK Architecture Dependencies\nDESCRIPTION: Iterates through available SDKs and architectures to set up build dependencies, excluding LINUX_STATIC SDK. Creates variant-specific dependencies for the Swift Reflection Test library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftReflectionTest/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n  foreach(SDK ${SWIFT_SDKS})\n    if (\"${SDK}\" STREQUAL \"LINUX_STATIC\")\n      continue()\n    endif()\n\n    foreach(ARCH ${SWIFT_SDK_${SDK}_ARCHITECTURES})\n      set(VARIANT_SUFFIX \"-${SWIFT_SDK_${SDK}_LIB_SUBDIR}-${ARCH}\")\n      add_dependencies(\"swiftSwiftReflectionTest${VARIANT_SUFFIX}\"\n        \"swift-reflection-test${VARIANT_SUFFIX}\")\n    endforeach()\n  endforeach()\n```\n\n----------------------------------------\n\nTITLE: Linking Libraries for Swift Remangling Tests in CMake\nDESCRIPTION: Specifies the required library dependencies for the SwiftRemangleTests module, including Swift basic libraries, demangling functionality, and LLVM testing support infrastructure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Remangler/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(SwiftRemangleTests\n  PRIVATE\n  swiftBasic\n  swiftDemangling\n  LLVMTestingSupport\n  )\n```\n\n----------------------------------------\n\nTITLE: Initial Punctuation (Pi) Unicode Range Definitions\nDESCRIPTION: Defines Unicode code points classified as Initial Punctuation (Pi), including various types of opening quotation marks and brackets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_32\n\nLANGUAGE: unicode\nCODE:\n```\n00AB          ; Pi #       LEFT-POINTING DOUBLE ANGLE QUOTATION MARK\n2018          ; Pi #       LEFT SINGLE QUOTATION MARK\n201B..201C    ; Pi #   [2] SINGLE HIGH-REVERSED-9 QUOTATION MARK..LEFT DOUBLE QUOTATION MARK\n[...additional points...]\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Swift Standard Library Target\nDESCRIPTION: Establishes build dependencies between the image registration target and the standard library target for the current architecture. This ensures proper build order.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n      add_dependencies(swift-stdlib-${arch_suffix} ${swiftImageRegistration-${arch_suffix}})\n\n      add_custom_target(swiftImageRegistration-${arch_suffix}\n                        ALL DEPENDS\n                          ${swiftImageRegistration-${arch_suffix}})\n      add_dependencies(stdlib swift-stdlib-${arch_suffix} swiftImageRegistration-${arch_suffix})\n```\n\n----------------------------------------\n\nTITLE: Darwin Platform Configuration\nDESCRIPTION: Platform-specific configuration for macOS/iOS including deployment target setup and SDK selection.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n  # Choose a deployment target if none was set.\n  if (NOT SOURCEKIT_DEPLOYMENT_TARGET)\n    execute_process(COMMAND sw_vers -productVersion\n                    OUTPUT_VARIABLE SOURCEKIT_DEPLOYMENT_TARGET\n                    OUTPUT_STRIP_TRAILING_WHITESPACE)\n    string(REGEX MATCH \"[0-9]+\\\\.[0-9]+\" SOURCEKIT_DEPLOYMENT_TARGET \"${SOURCEKIT_DEPLOYMENT_TARGET}\")\n  endif()\n\n  if (SOURCEKIT_DEPLOYMENT_OS MATCHES \"^iphoneos\")\n    set(version_min_os \"ios\")\n    set(triple_os \"ios\")\n    set(SOURCEKIT_DEFAULT_TARGET_SDK \"IOS\")\n  elseif (SOURCEKIT_DEPLOYMENT_OS MATCHES \"^iphonesimulator\")\n    set(version_min_os \"ios-simulator\")\n    set(triple_os \"ios\")\n    set(SOURCEKIT_DEFAULT_TARGET_SDK \"IOS_SIMULATOR\")\n  elseif (SOURCEKIT_DEPLOYMENT_OS MATCHES \"^macosx\")\n    set(version_min_os \"macosx\")\n    set(triple_os \"macosx\")\n    set(SOURCEKIT_DEFAULT_TARGET_SDK \"OSX\")\n  else()\n    message(FATAL_ERROR \"Can't understand SOURCEKIT_DEPLOYMENT_OS '${SOURCEKIT_DEPLOYMENT_OS}';\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Hangul Leading Consonant (L) Unicode Ranges\nDESCRIPTION: This snippet defines Unicode ranges for Hangul leading consonants (L). It includes two ranges: one for the main Hangul Choseong block and another for additional Hangul Choseong characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_8\n\nLANGUAGE: Unicode\nCODE:\n```\n1100..115F    ; L # Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER\nA960..A97C    ; L # Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH\n\n# Total code points: 125\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Sora Sompeng Script\nDESCRIPTION: Defines the Unicode code point ranges for the Sora Sompeng script, including letters and digits. The total count is 35 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_78\n\nLANGUAGE: text\nCODE:\n```\n110D0..110E8  ; Sora_Sompeng # Lo  [25] SORA SOMPENG LETTER SAH..SORA SOMPENG LETTER MAE\n110F0..110F9  ; Sora_Sompeng # Nd  [10] SORA SOMPENG DIGIT ZERO..SORA SOMPENG DIGIT NINE\n\n# Total code points: 35\n```\n\n----------------------------------------\n\nTITLE: Creating Shared and Static Runtime Registrars\nDESCRIPTION: Defines the paths for both shared and static runtime registrar files. These are the output files that will be copied to their respective library directories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n      set(shared_runtime_registrar \"${SWIFTLIB_DIR}/${arch_subdir}/swiftrt${extension}\")\n      set(static_runtime_registrar \"${SWIFTSTATICLIB_DIR}/${arch_subdir}/swiftrt${extension}\")\n```\n\n----------------------------------------\n\nTITLE: Unicode Common Script Code Point Definitions\nDESCRIPTION: Defines Unicode code points that belong to the Common script category. Each line maps a code point or range to Common script with additional metadata about character categories (Cc, Zs, Po, etc.) and character descriptions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_1\n\nLANGUAGE: unicode-mapping\nCODE:\n```\n0000..001F    ; Common # Cc  [32] <control-0000>..<control-001F>\n0020          ; Common # Zs       SPACE\n0021..0023    ; Common # Po   [3] EXCLAMATION MARK..NUMBER SIGN\n0024          ; Common # Sc       DOLLAR SIGN\n# ... additional mappings ...\n214A          ; Common # So       PROPERTY LINE\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Demangle Fuzzer Tool in CMake\nDESCRIPTION: Sets up the Swift demangle fuzzer as a host tool, specifying its source file, LLVM components, and Swift component. It also links the tool with the swiftDemangling library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-demangle-fuzzer/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_fuzzer_host_tool(swift-demangle-fuzzer\n  swift-demangle-fuzzer.cpp\n  LLVM_LINK_COMPONENTS support\n  SWIFT_COMPONENT compiler\n  )\ntarget_link_libraries(swift-demangle-fuzzer\n                      PRIVATE\n                        swiftDemangling)\n```\n\n----------------------------------------\n\nTITLE: Including Swift Compiler Headers in Runtime\nDESCRIPTION: Adds the Swift compiler include directory to the swiftRuntime target to access required headers like Demangler.h and TypeLookupError.h that are needed by Private.h.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# FIXME: Private.h uses `Demangler.h` and `TypeLookupError.h` from the compiler\n#        headers. We should split out the parts that are needed by the runtime\n#        to avoid pulling in headers from the compiler.\ntarget_include_directories(swiftRuntime PRIVATE\n  \"${SwiftCore_SWIFTC_SOURCE_DIR}/include\")\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Compiler Optimizer Sources\nDESCRIPTION: This snippet defines the source files for the Swift compiler's optimizer component. It uses a custom function 'swift_compiler_sources' to specify the 'Optimizer' target and lists all the Swift files that constitute the optimizer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/FunctionPasses/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nswift_compiler_sources(Optimizer\n  AssumeSingleThreaded.swift\n  AsyncDemotion.swift\n  BooleanLiteralFolding.swift\n  CleanupDebugSteps.swift\n  ClosureSpecialization.swift\n  ComputeEscapeEffects.swift\n  ComputeSideEffects.swift\n  CopyToBorrowOptimization.swift\n  DeadStoreElimination.swift\n  DeinitDevirtualizer.swift\n  DestroyHoisting.swift\n  DiagnoseInfiniteRecursion.swift\n  InitializeStaticGlobals.swift\n  LetPropertyLowering.swift\n  LifetimeDependenceDiagnostics.swift\n  LifetimeDependenceInsertion.swift\n  LifetimeDependenceScopeFixup.swift\n  ObjectOutliner.swift\n  ObjCBridgingOptimization.swift\n  MergeCondFails.swift\n  NamedReturnValueOptimization.swift\n  RedundantLoadElimination.swift\n  ReleaseDevirtualizer.swift\n  SimplificationPasses.swift\n  StackPromotion.swift\n  StripObjectHeaders.swift\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Binary Linking\nDESCRIPTION: Sets up static binary linking configuration for supported SDK platforms, including generation of platform-specific linker argument files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(sdk ${SWIFT_SDKS})\n  if(NOT SWIFT_SDK_${sdk}_STATIC_LINKING_SUPPORTED)\n    continue()\n  endif()\n\n  if(SWIFT_BUILD_STATIC_STDLIB OR SWIFT_SDK_${sdk}_STATIC_ONLY)\n    set(lib_dir \"${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n    set(static_binary_lnk_src \"${SWIFT_SOURCE_DIR}/stdlib/public/Resources/${lib_dir}/static-executable-args.lnk\")\n    # ... additional configuration\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Property Behavior Conformance Mangling (BNF)\nDESCRIPTION: Specifies the specialized BNF-like syntax for mangling protocol conformances that implement property behaviors, identified by a leading 'b'. This mangling includes an optional generic signature ('u generic-signature'), the property behavior's identifier, the context in which the behavior is applied, another identifier, and the (typically private) protocol used for the behavior's implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_12\n\nLANGUAGE: bnf\nCODE:\n```\n// Property behavior conformance\nprotocol-conformance ::= ('u' generic-signature)?\n                         'b' identifier context identifier protocol\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Command for Merging Features in CMake\nDESCRIPTION: Sets up a custom command to merge Swift and Clang feature files using a Python script, specifying output, command, and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Option/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT\n    ${features_file_dest}\n  COMMAND\n    $<TARGET_FILE:Python3::Interpreter> ${features_merger} -f ${features_file_swift_src} -p \\\"\\\" -f ${features_file_clang_src} -p clang- > ${features_file_dest}\n  DEPENDS\n    ${features_merger}\n    ${features_file_swift_src}\n    ${features_file_clang_src}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Frontend Tool Library in CMake\nDESCRIPTION: This CMake snippet defines the swiftFrontendTool library, sets its dependencies, and configures its linked libraries. It includes both interface and private linkages to various Swift and Clang components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/FrontendTool/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftFrontendTool STATIC\n  FrontendTool.cpp\n  ImportedModules.cpp\n  LoadedModuleTrace.cpp\n  TBD.cpp)\nadd_dependencies(swiftFrontendTool\n  SwiftOptions)\ntarget_link_libraries(swiftFrontendTool INTERFACE\n  clangAPINotes\n  clangBasic)\ntarget_link_libraries(swiftFrontendTool PRIVATE\n    swiftClangImporter\n    swiftConstExtract\n    swiftDemangling\n    swiftDependencyScan\n    swiftFrontend\n    swiftImmediate\n    swiftIndex\n    swiftIRGen\n    swiftMigrator\n    swiftOption\n    swiftPrintAsClang\n    swiftSerialization\n    swiftSIL\n    swiftSILGen\n    swiftSILOptimizer\n    swiftThreading)\n\nset_swift_llvm_is_available(swiftFrontendTool)\n```\n\n----------------------------------------\n\nTITLE: Unicode Space Separator Category Definitions\nDESCRIPTION: Defines code points for various types of space characters (Zs), including regular space, no-break space, and other specialized space characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_20\n\nLANGUAGE: unicode\nCODE:\n```\n0020          ; Zs #       SPACE\n00A0          ; Zs #       NO-BREAK SPACE\n1680          ; Zs #       OGHAM SPACE MARK\n2000..200A    ; Zs #  [11] EN QUAD..HAIR SPACE\n```\n\n----------------------------------------\n\nTITLE: Copying CxxStdlib API Notes\nDESCRIPTION: Creates a custom command to copy C++ Standard Library API notes to the output directory. This ensures the latest API notes are available for the compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/std/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command_target(unused_var\n    CUSTOM_TARGET_NAME CxxStdlib-apinotes\n    COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${output_dir}\"\n    COMMAND ${CMAKE_COMMAND} \"-E\" \"copy_if_different\" \"${CMAKE_CURRENT_SOURCE_DIR}/std.apinotes\" \"${output_dir}\"\n    COMMENT \"Copying CxxStdlib API Notes to ${output_dir}\"\n    OUTPUT \"${output_dir}/std.apinotes\"\n    DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/std.apinotes\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Phags-Pa Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Phags-Pa script, including letters and punctuation marks. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_42\n\nLANGUAGE: Unicode\nCODE:\n```\nA840..A873    ; Phags_Pa # Lo  [52] PHAGS-PA LETTER KA..PHAGS-PA LETTER CANDRABINDU\nA874..A877    ; Phags_Pa # Po   [4] PHAGS-PA SINGLE HEAD MARK..PHAGS-PA MARK DOUBLE SHAD\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Chakma Script\nDESCRIPTION: Defines the Unicode code point ranges for the Chakma script, categorizing characters as letters, vowel signs, digits, and punctuation marks. The total count is 71 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_73\n\nLANGUAGE: text\nCODE:\n```\n11100..11102  ; Chakma # Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA\n11103..11126  ; Chakma # Lo  [36] CHAKMA LETTER AA..CHAKMA LETTER HAA\n11127..1112B  ; Chakma # Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU\n1112C         ; Chakma # Mc       CHAKMA VOWEL SIGN E\n1112D..11134  ; Chakma # Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA\n11136..1113F  ; Chakma # Nd  [10] CHAKMA DIGIT ZERO..CHAKMA DIGIT NINE\n11140..11143  ; Chakma # Po   [4] CHAKMA SECTION MARK..CHAKMA QUESTION MARK\n11144         ; Chakma # Lo       CHAKMA LETTER LHAA\n11145..11146  ; Chakma # Mc   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI\n11147         ; Chakma # Lo       CHAKMA LETTER VAA\n\n# Total code points: 71\n```\n\n----------------------------------------\n\nTITLE: Creating Doxygen Target and Installation for Swift\nDESCRIPTION: Creates a custom target for generating Swift API documentation with Doxygen, configures dependencies, and sets up installation of generated documentation to the specified destination directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/doxygen.cfg.in\n    ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg @ONLY)\n\n  set(abs_top_srcdir)\n  set(abs_top_builddir)\n  set(DOT)\n  set(enable_searchengine)\n  set(searchengine_url)\n  set(enable_server_based_search)\n  set(enable_external_search)\n  set(extra_search_mappings)\n\n  add_custom_target(doxygen-swift\n    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/doxygen.cfg\n    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}\n    COMMENT \"Generating swift doxygen documentation.\" VERBATIM)\n\n  if(LLVM_BUILD_DOCS)\n    add_dependencies(doxygen doxygen-swift)\n  endif()\n\n  add_dependencies(dev doxygen-swift)\n  swift_install_in_component(DIRECTORY \"${CMAKE_CURRENT_BINARY_DIR}/doxygen/html\"\n                             DESTINATION \"docs/html\"\n                             COMPONENT dev)\nendif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Analyzing Reabstraction Thunks in Swift\nDESCRIPTION: Mangled symbols for reabstraction thunk helpers that convert between different calling conventions for async functions with error handling and sending capabilities.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_26\n\nLANGUAGE: Swift\nCODE:\n```\n$s7ToolKit10TypedValueOACs5Error_pIgHTnTrzo_A2CsAD_pIegHiTrzr_TR ---> {T:} reabstraction thunk helper from @callee_guaranteed @async (@in_guaranteed sending ToolKit.TypedValue) -> sending (@out ToolKit.TypedValue, @error @owned Swift.Error) to @escaping @callee_guaranteed @async (@in sending ToolKit.TypedValue) -> (@out ToolKit.TypedValue, @error @out Swift.Error)\n$s16sending_mangling16NonSendableKlassCACIegTiTr_A2CIegTxTo_TR ---> {T:} reabstraction thunk helper from @escaping @callee_guaranteed (@in sending sending_mangling.NonSendableKlass) -> sending (@out sending_mangling.NonSendableKlass) to @escaping @callee_guaranteed (@owned sending sending_mangling.NonSendableKlass) -> sending (@owned sending_mangling.NonSendableKlass)\n```\n\n----------------------------------------\n\nTITLE: Configuring Library Dependencies\nDESCRIPTION: Links the SwiftOnoneSupport library with swiftShims and swiftCore dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(swiftSwiftOnoneSupport\n  PRIVATE\n    swiftShims\n    swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Type Changes in Swift APINotesTest\nDESCRIPTION: List of type changes for constructors, functions, and parameters in the APINotesTest module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/apinotes-diags.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nCat.init(name:) // Return type changed to Cat?\nAnimalStatusDescriptor.addingAttributes(_:) // Parameter type changed\nAnimalStatusDescriptor.addingAttributesArray(_:) // Parameter type changed\nAnimalStatusDescriptor.addingOptionalAttributes(_:) // Parameter type changed\nAnimalStatusDescriptor.addingOptionalAttributesArray(_:) // Parameter type changed\nAnimalStatusDescriptor.animalStatusSingleAttribute(_:) // Parameter type changed\nAnimalStatusDescriptor.animalStatusSingleOptionalAttribute(_:) // Parameter type changed\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift AST Section Importer Library in CMake\nDESCRIPTION: Sets up a static library target for Swift AST Section Importer with LLVM core component dependency and links against swiftBasic. Configures LLVM availability for the target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ASTSectionImporter/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftASTSectionImporter STATIC\n  ASTSectionImporter.cpp\n  LLVM_LINK_COMPONENTS core)\ntarget_link_libraries(swiftASTSectionImporter PRIVATE\n  swiftBasic)\n\nset_swift_llvm_is_available(swiftASTSectionImporter)\n```\n\n----------------------------------------\n\nTITLE: Basic Unknown Warning Group Example in Swift Compilation\nDESCRIPTION: Demonstrates how Swift compiler handles an unrecognized warning group specified in compilation flags, resulting in a warning message.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/unknown-warning-group.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -Werror non_existing_group file.swift\n<unknown>:0: warning: unknown warning group: 'non_existing_group'\n```\n\n----------------------------------------\n\nTITLE: Using Local Swift Compiler with SwiftPM\nDESCRIPTION: Example showing how to use a locally built Swift compiler to build SwiftPM packages using the SWIFT_EXEC environment variable\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/FAQ.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Assuming the current working directory contains the package, build the\n# package using a custom compiler.\nSWIFT_EXEC=/path/to/swiftc swift build\n```\n\n----------------------------------------\n\nTITLE: Annotation Inference Refactoring Example\nDESCRIPTION: Demonstrates how implementation refactoring can affect annotation inference.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_83\n\nLANGUAGE: c++\nCODE:\n```\nclass Example {\npublic:\n  int *get_mutable_value() { return get_mutable_value_impl(); }\nprivate:\n  int *get_mutable_value_impl(); // defined in example.cc\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Cuneiform Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Cuneiform script, including various signs, numeric signs, and punctuation marks. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_40\n\nLANGUAGE: Unicode\nCODE:\n```\n12000..12399  ; Cuneiform # Lo [922] CUNEIFORM SIGN A..CUNEIFORM SIGN U U\n12400..1246E  ; Cuneiform # Nl [111] CUNEIFORM NUMERIC SIGN TWO ASH..CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM\n12470..12474  ; Cuneiform # Po   [5] CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER..CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON\n12480..12543  ; Cuneiform # Lo [196] CUNEIFORM SIGN AB TIMES NUN TENU..CUNEIFORM SIGN ZU5 TIMES THREE DISH TENU\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Georgian Script\nDESCRIPTION: This code block defines the Unicode code point ranges for the Georgian script. It lists character ranges with their Unicode categories and character names, covering capital letters, small letters, and modifier letters. The block contains a total of 173 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_19\n\nLANGUAGE: Unicode\nCODE:\n```\n10A0..10C5    ; Georgian # L&  [38] GEORGIAN CAPITAL LETTER AN..GEORGIAN CAPITAL LETTER HOE\n10C7          ; Georgian # L&       GEORGIAN CAPITAL LETTER YN\n10CD          ; Georgian # L&       GEORGIAN CAPITAL LETTER AEN\n10D0..10FA    ; Georgian # L&  [43] GEORGIAN LETTER AN..GEORGIAN LETTER AIN\n10FC          ; Georgian # Lm       MODIFIER LETTER GEORGIAN NAR\n10FD..10FF    ; Georgian # L&   [3] GEORGIAN LETTER AEN..GEORGIAN LETTER LABIAL SIGN\n1C90..1CBA    ; Georgian # L&  [43] GEORGIAN MTAVRULI CAPITAL LETTER AN..GEORGIAN MTAVRULI CAPITAL LETTER AIN\n1CBD..1CBF    ; Georgian # L&   [3] GEORGIAN MTAVRULI CAPITAL LETTER AEN..GEORGIAN MTAVRULI CAPITAL LETTER LABIAL SIGN\n2D00..2D25    ; Georgian # L&  [38] GEORGIAN SMALL LETTER AN..GEORGIAN SMALL LETTER HOE\n2D27          ; Georgian # L&       GEORGIAN SMALL LETTER YN\n2D2D          ; Georgian # L&       GEORGIAN SMALL LETTER AEN\n\n# Total code points: 173\n```\n\n----------------------------------------\n\nTITLE: Basic Swift Type Mangles\nDESCRIPTION: Basic type mangling patterns showing how Swift internal symbols represent simple type references and variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n_TWv ---> _TWv\n_TWvd ---> _TWvd\n_TWvi ---> _TWvi\n_TWvx ---> _TWvx\n```\n\n----------------------------------------\n\nTITLE: Unicode Soft_Dotted Character List Definition\nDESCRIPTION: A comprehensive list of Unicode code points with the Soft_Dotted property, which identifies characters that contain a dot which disappears when combined with diacritics placed above.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_20\n\nLANGUAGE: Unicode\nCODE:\n```\n0069..006A    ; Soft_Dotted # L&   [2] LATIN SMALL LETTER I..LATIN SMALL LETTER J\n012F          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH OGONEK\n0249          ; Soft_Dotted # L&       LATIN SMALL LETTER J WITH STROKE\n0268          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH STROKE\n029D          ; Soft_Dotted # L&       LATIN SMALL LETTER J WITH CROSSED-TAIL\n02B2          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL J\n03F3          ; Soft_Dotted # L&       GREEK LETTER YOT\n0456          ; Soft_Dotted # L&       CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n0458          ; Soft_Dotted # L&       CYRILLIC SMALL LETTER JE\n1D62          ; Soft_Dotted # Lm       LATIN SUBSCRIPT SMALL LETTER I\n1D96          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH RETROFLEX HOOK\n1DA4          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL I WITH STROKE\n1DA8          ; Soft_Dotted # Lm       MODIFIER LETTER SMALL J WITH CROSSED-TAIL\n1E2D          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH TILDE BELOW\n1ECB          ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH DOT BELOW\n2071          ; Soft_Dotted # Lm       SUPERSCRIPT LATIN SMALL LETTER I\n2148..2149    ; Soft_Dotted # L&   [2] DOUBLE-STRUCK ITALIC SMALL I..DOUBLE-STRUCK ITALIC SMALL J\n2C7C          ; Soft_Dotted # Lm       LATIN SUBSCRIPT SMALL LETTER J\n1D422..1D423  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD SMALL I..MATHEMATICAL BOLD SMALL J\n1D456..1D457  ; Soft_Dotted # L&   [2] MATHEMATICAL ITALIC SMALL I..MATHEMATICAL ITALIC SMALL J\n1D48A..1D48B  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD ITALIC SMALL I..MATHEMATICAL BOLD ITALIC SMALL J\n1D4BE..1D4BF  ; Soft_Dotted # L&   [2] MATHEMATICAL SCRIPT SMALL I..MATHEMATICAL SCRIPT SMALL J\n1D4F2..1D4F3  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD SCRIPT SMALL I..MATHEMATICAL BOLD SCRIPT SMALL J\n1D526..1D527  ; Soft_Dotted # L&   [2] MATHEMATICAL FRAKTUR SMALL I..MATHEMATICAL FRAKTUR SMALL J\n1D55A..1D55B  ; Soft_Dotted # L&   [2] MATHEMATICAL DOUBLE-STRUCK SMALL I..MATHEMATICAL DOUBLE-STRUCK SMALL J\n1D58E..1D58F  ; Soft_Dotted # L&   [2] MATHEMATICAL BOLD FRAKTUR SMALL I..MATHEMATICAL BOLD FRAKTUR SMALL J\n1D5C2..1D5C3  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF SMALL I..MATHEMATICAL SANS-SERIF SMALL J\n1D5F6..1D5F7  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF BOLD SMALL I..MATHEMATICAL SANS-SERIF BOLD SMALL J\n1D62A..1D62B  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF ITALIC SMALL I..MATHEMATICAL SANS-SERIF ITALIC SMALL J\n1D65E..1D65F  ; Soft_Dotted # L&   [2] MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I..MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J\n1D692..1D693  ; Soft_Dotted # L&   [2] MATHEMATICAL MONOSPACE SMALL I..MATHEMATICAL MONOSPACE SMALL J\n1DF1A         ; Soft_Dotted # L&       LATIN SMALL LETTER I WITH STROKE AND RETROFLEX HOOK\n1E04C..1E04D  ; Soft_Dotted # Lm   [2] MODIFIER LETTER CYRILLIC SMALL BYELORUSSIAN-UKRAINIAN I..MODIFIER LETTER CYRILLIC SMALL JE\n1E068         ; Soft_Dotted # Lm       CYRILLIC SUBSCRIPT SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n\n# Total code points: 50\n```\n\n----------------------------------------\n\nTITLE: Defining Register_Shifter Unicode Character Range\nDESCRIPTION: Lists Unicode code points classified as Register_Shifter in the Indic_Syllabic_Category property. These characters shift register for consonants, similar to tone marks, in Khmer script.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_23\n\nLANGUAGE: unicode\nCODE:\n```\n17C9..17CA    ; Register_Shifter # Mn   [2] KHMER SIGN MUUSIKATOAN..KHMER SIGN TRIISAP\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Brahmi Script\nDESCRIPTION: Defines the Unicode code point ranges for the Brahmi script, including various character categories such as letters, vowel signs, numbers, and punctuation. The total count is 115 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_71\n\nLANGUAGE: text\nCODE:\n```\n11000         ; Brahmi # Mc       BRAHMI SIGN CANDRABINDU\n11001         ; Brahmi # Mn       BRAHMI SIGN ANUSVARA\n11002         ; Brahmi # Mc       BRAHMI SIGN VISARGA\n11003..11037  ; Brahmi # Lo  [53] BRAHMI SIGN JIHVAMULIYA..BRAHMI LETTER OLD TAMIL NNNA\n11038..11046  ; Brahmi # Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA\n11047..1104D  ; Brahmi # Po   [7] BRAHMI DANDA..BRAHMI PUNCTUATION LOTUS\n11052..11065  ; Brahmi # No  [20] BRAHMI NUMBER ONE..BRAHMI NUMBER ONE THOUSAND\n11066..1106F  ; Brahmi # Nd  [10] BRAHMI DIGIT ZERO..BRAHMI DIGIT NINE\n11070         ; Brahmi # Mn       BRAHMI SIGN OLD TAMIL VIRAMA\n11071..11072  ; Brahmi # Lo   [2] BRAHMI LETTER OLD TAMIL SHORT E..BRAHMI LETTER OLD TAMIL SHORT O\n11073..11074  ; Brahmi # Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O\n11075         ; Brahmi # Lo       BRAHMI LETTER OLD TAMIL LLA\n1107F         ; Brahmi # Mn       BRAHMI NUMBER JOINER\n\n# Total code points: 115\n```\n\n----------------------------------------\n\nTITLE: Linking to Original SwiftPM Xcodeproj Library\nDESCRIPTION: Provides a markdown link to the original SwiftPM library source on GitHub, which is now defunct. This reference serves as the origin of the current Xcodeproj library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/swift-xcodegen/Sources/Xcodeproj/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[1]: https://github.com/apple/swift-package-manager/tree/6595cd2b22f25056b83a7357c07301c45805e69b/Sources/Xcodeproj\n```\n\n----------------------------------------\n\nTITLE: Bridge Object to Reference Conversion in Swift SIL\nDESCRIPTION: Extracts the object reference from a BridgeObject by masking out spare bits.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_177\n\nLANGUAGE: swift\nCODE:\n```\n%1 = bridge_object_to_ref %0 : $Builtin.BridgeObject to $C\n```\n\n----------------------------------------\n\nTITLE: Configuring Darwin Dependencies for Swift Standard Library Unit Tests\nDESCRIPTION: Sets up Darwin dependencies for the Swift standard library unit tests based on the SWIFT_BUILD_SDK_OVERLAY flag.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnittest/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_BUILD_SDK_OVERLAY)\nset(swift_stdlib_unittest_darwin_dependencies Darwin)\nelse()\nset(swift_stdlib_unittest_darwin_dependencies)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Hangul Script Definition\nDESCRIPTION: Defines Unicode code point ranges for Hangul script characters including syllables, letters, and tone marks. Contains 11,739 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_20\n\nLANGUAGE: Unicode\nCODE:\n```\n1100..11FF    ; Hangul # Lo [256] HANGUL CHOSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN\n302E..302F    ; Hangul # Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK\n3131..318E    ; Hangul # Lo  [94] HANGUL LETTER KIYEOK..HANGUL LETTER ARAEAE\n```\n\n----------------------------------------\n\nTITLE: Zero Derivative Warning Example\nDESCRIPTION: Demonstrates compiler warning when the result doesn't depend on differentiation arguments, resulting in zero derivatives.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_59\n\nLANGUAGE: swift\nCODE:\n```\nlet grad = gradient(at: 1.0) { x in\n    Double(3).squareRoot()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies and Installation Instructions in CMake\nDESCRIPTION: Adds the executable to the 'tools' dependency list and configures installation parameters. This ensures the tool is built as part of the tools component and installed in the appropriate location.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/complete-test/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_dependencies(tools complete-test)\nswift_install_in_component(TARGETS complete-test\n  RUNTIME DESTINATION bin COMPONENT tools)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for SwiftSILOptimizer Target in CMake\nDESCRIPTION: This CMake code snippet specifies the source files to be included in the swiftSILOptimizer target. It lists several C++ files that implement different optimization techniques for Swift's SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/IPO/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  CapturePropagation.cpp\n  ClosureSpecializer.cpp\n  CrossModuleOptimization.cpp\n  DeadFunctionElimination.cpp\n  GlobalPropertyOpt.cpp\n  LetPropertiesOpts.cpp\n  UsePrespecialized.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Elbasan Script\nDESCRIPTION: Defines the Unicode code point range for the Elbasan script, covering all letters. The total count is 40 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_83\n\nLANGUAGE: text\nCODE:\n```\n10500..10527  ; Elbasan # Lo  [40] ELBASAN LETTER A..ELBASAN LETTER KHE\n\n# Total code points: 40\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Demangling Library Targets in CMake\nDESCRIPTION: Defines CMake targets for the Swift demangling library, including compiler flags and installation settings. Disables LTO for Linux builds to prevent test failures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Demangling/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftDemangling OBJECT_LIBRARY\n  ${swiftDemanglingSources}\n  C_COMPILE_FLAGS\n    -DswiftCore_EXPORTS\n    ${swift_demangling_cflags}\n  C_COMPILE_FLAGS_LINUX -fno-lto\n  INSTALL_IN_COMPONENT never_install)\n\nadd_swift_target_library(swiftDemanglingCR OBJECT_LIBRARY\n  ${swiftDemanglingCRSources}\n  C_COMPILE_FLAGS\n    -DswiftCore_EXPORTS\n    ${swift_demangling_cflags}\n  INSTALL_IN_COMPONENT never_install)\n```\n\n----------------------------------------\n\nTITLE: Specialization Info for Generics and Functions\nDESCRIPTION: Defines mangling rules for specialized generics and functions, including pass IDs, closure specialization, constant propagation, and other optimizations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nglobal ::= 'TS' specializationinfo '_' mangled-name\nspecializationinfo ::= 'g' passid (type protocol-conformance* '_')+            // Generic specialization info.\nspecializationinfo ::= 'f' passid (funcspecializationarginfo '_')+             // Function signature specialization kind\npassid ::= integer                                                             // The id of the pass that generated this specialization.\nfuncsigspecializationarginfo ::= 'cl' closurename type*                        // Closure specialized with closed over types in argument order.\nfuncsigspecializationarginfo ::= 'n'                                           // Unmodified argument\nfuncsigspecializationarginfo ::= 'cp' funcsigspecializationconstantproppayload // Constant propagated argument\nfuncsigspecializationarginfo ::= 'd'                                           // Dead argument\nfuncsigspecializationarginfo ::= 'g' 's'?                                      // Owned => Guaranteed and Exploded if 's' present.\nfuncsigspecializationarginfo ::= 's'                                           // Exploded\nfuncsigspecializationarginfo ::= 'k'                                           // Exploded\nfuncsigspecializationconstantpropinfo ::= 'fr' mangled-name\nfuncsigspecializationconstantpropinfo ::= 'g' mangled-name\nfuncsigspecializationconstantpropinfo ::= 'i' 64-bit-integer\nfuncsigspecializationconstantpropinfo ::= 'fl' float-as-64-bit-integer\nfuncsigspecializationconstantpropinfo ::= 'se' stringencoding 'v' md5hash\n```\n\n----------------------------------------\n\nTITLE: Generic Signature Changes in Swift APINotesTest\nDESCRIPTION: Changes in generic signatures for methods in SwiftTypeWithMethodLeft class, now conforming to SwiftTypeWithMethodRight.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/apinotes-diags.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nSwiftTypeWithMethodLeft.minusPrint() // Generic signature changed\nSwiftTypeWithMethodLeft.plusPrint() // Generic signature changed\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Tai Le Script\nDESCRIPTION: Defines the Unicode code point ranges for the Tai Le script, categorizing characters by their types (Lo) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_24\n\nLANGUAGE: Unicode\nCODE:\n```\n1950..196D    ; Tai_Le # Lo  [30] TAI LE LETTER KA..TAI LE LETTER AI\n1970..1974    ; Tai_Le # Lo   [5] TAI LE LETTER TONE-2..TAI LE LETTER TONE-6\n\n# Total code points: 35\n```\n\n----------------------------------------\n\nTITLE: Configuring RegexBuilder Library Dependencies in CMake\nDESCRIPTION: Sets up the required link libraries for the RegexBuilder component including swiftCore, RegexParser and StringProcessing modules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RegexBuilder/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift_regex_builder_link_libraries\n  swiftCore\n  swift_RegexParser\n  swift_StringProcessing)\n```\n\n----------------------------------------\n\nTITLE: Init_enum_data_addr Instruction: Projecting Enum Data Address\nDESCRIPTION: The init_enum_data_addr instruction projects the address for storing data in an enum case during initialization, without modifying the enum or checking its value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_141\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'init_enum_data_addr' sil-operand ',' sil-decl-ref\n\n%1 = init_enum_data_addr %0 : $*U, #U.DataCase!enumelt\n// $U must be an enum type\n// #U.DataCase must be a case of enum $U with data\n// %1 will be of address type $*T for the data type of case U.DataCase\n```\n\n----------------------------------------\n\nTITLE: Setting Objective-C ARC Compile Flags for Apple Platforms in CMake\nDESCRIPTION: Conditionally enables Automatic Reference Counting (ARC) for SwiftNativeNSXXXBaseARC.m file when building for Apple platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/stubs/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE)\n  set_property(SOURCE SwiftNativeNSXXXBaseARC.m\n               APPEND_STRING\n               PROPERTY COMPILE_FLAGS \"-fobjc-arc\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Cherokee Script Definition\nDESCRIPTION: Defines Unicode code point ranges for Cherokee script characters including both capital and small letters. Contains 172 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_22\n\nLANGUAGE: Unicode\nCODE:\n```\n13A0..13F5    ; Cherokee # L&  [86] CHEROKEE LETTER A..CHEROKEE LETTER MV\n13F8..13FD    ; Cherokee # L&   [6] CHEROKEE SMALL LETTER YE..CHEROKEE SMALL LETTER MV\nAB70..ABBF    ; Cherokee # L&  [80] CHEROKEE SMALL LETTER A..CHEROKEE SMALL LETTER YA\n```\n\n----------------------------------------\n\nTITLE: Linking Swift SIL Optimizer Test Dependencies\nDESCRIPTION: Specifies the required library dependencies for the Swift SIL Optimizer tests, including the optimizer itself, IR generation, AST, and frontend components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SILOptimizer/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(SwiftSILOptimizerTests\n   PRIVATE\n   swiftSILOptimizer\n   swiftIRGen\n   swiftAST\n   swiftFrontend\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties and Linking Libraries for sourcekitdInProc in CMake\nDESCRIPTION: This snippet sets target properties for sourcekitdInProc, including the define symbol, and links it with necessary libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(sourcekitdInProc PROPERTIES\n  DEFINE_SYMBOL sourcekitd_EXPORTS)\ntarget_link_libraries(sourcekitdInProc PRIVATE\n  SourceKitSwiftLang\n  sourcekitdAPI\n  sourcekitdService\n  swiftIDETool)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows VFS Overlay Generation in CMake\nDESCRIPTION: Function to generate Windows VFS overlay configuration by converting paths and configuring template file. Used to handle Windows-specific path requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(generate_windows_vfs_overlay)\n  file(TO_CMAKE_PATH ${VCToolsInstallDir} VCToolsInstallDir)\n  file(TO_CMAKE_PATH ${UniversalCRTSdkDir} UniversalCRTSdkDir)\n  configure_file(\"${PROJECT_SOURCE_DIR}/cmake/WindowsVFS.yaml.in\"\n                 \"${CMAKE_CURRENT_BINARY_DIR}/windows-vfs-overlay.yaml\"\n                 @ONLY)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic ArrayOf Container in Swift\nDESCRIPTION: Implements a generic container for Array types using class inheritance to hide concrete implementing types\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/BridgingContainerProtocolsToClassClusters.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass ArrayOfImplBase<T> {\n  var startIndex: Int { fatal() }\n  var endIndex: Int { fatal() }\n\n  func __getitem__(_ i: Int) -> T { fatal() }\n\n  // For COW\n  func _clone() -> Self { fatal() }\n}\n\nclass ArrayOfImpl<T, ArrayT: Array where ArrayT.Element == T>\n  : ArrayOfImplBase<T>\n{\n  var value: ArrayT\n  var startIndex: Int { return value.startIndex }\n  var endIndex: Int { return value.endIndex }\n  func __getitem__(_ i: Int) -> T { return __getitem__(i) }\n\n  // For COW\n  func _clone() -> Self { return self(value) }\n}\n\nstruct ArrayOf<T> : Array {\n  var value: ArrayOfImplBase<T>\n\n  var startIndex: Int { return value.startIndex }\n  var endIndex: Int { return value.endIndex }\n  func __getitem__(_ i: Int) -> T { return value.__getitem__(i) }\n\n  init<ArrayT : Array where ArrayT.Element == T>(arr: ArrayT) {\n    value = ArrayOfImpl<T, ArrayT>(arr)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode 4.0.0 Code Point Assignments\nDESCRIPTION: Comprehensive listing of Unicode code points and ranges assigned in Unicode 4.0.0, including Latin, Greek, Arabic, Syriac, and various other scripts. Each entry includes the hexadecimal code point or range and a description of the character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_8\n\nLANGUAGE: unicode\nCODE:\n```\n0221          ; 4.0 #       LATIN SMALL LETTER D WITH CURL\n0234..0236    ; 4.0 #   [3] LATIN SMALL LETTER L WITH CURL..LATIN SMALL LETTER T WITH CURL\n02AE..02AF    ; 4.0 #   [2] LATIN SMALL LETTER TURNED H WITH FISHHOOK..LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL\n# ... additional code points omitted for brevity ...\nE0100..E01EF  ; 4.0 # [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n\n# Total code points: 1226\n```\n\n----------------------------------------\n\nTITLE: Darwin-Specific Build Properties Configuration in CMake\nDESCRIPTION: Sets Darwin-specific properties including RPATH configuration and linker options to export the main symbol. These settings ensure the executable can find its dependencies at runtime on macOS.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/complete-test/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  set_target_properties(complete-test PROPERTIES\n    INSTALL_RPATH \"@executable_path/../lib\")\n  target_link_options(complete-test PRIVATE\n    \"LINKER:-exported_symbol,_main\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Simple Class Mangling Request Format\nDESCRIPTION: JSON format for requesting Swift class name mangling. Takes module name and class name as input.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.request>: (UID) <source.request.mangle_simple_class>,\n    <key.names>:   [mangle-request*] // An array of requests to mangle.\n}\n```\n\nLANGUAGE: json\nCODE:\n```\nmangle-request ::=\n{\n    <key.modulename>: (string)  // The Swift module name\n    <key.name>: (string)        // The class name\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode 15.1 Code Point Assignments\nDESCRIPTION: Lists code points and their descriptions newly assigned in Unicode version 15.1.0 (September 2023). Primarily includes ideographic description characters and CJK unified ideographs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n2FFC..2FFF    ; 15.1 #   [4] IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM RIGHT..IDEOGRAPHIC DESCRIPTION CHARACTER ROTATION\n31EF          ; 15.1 #       IDEOGRAPHIC DESCRIPTION CHARACTER SUBTRACTION\n2EBF0..2EE5D  ; 15.1 # [622] CJK UNIFIED IDEOGRAPH-2EBF0..CJK UNIFIED IDEOGRAPH-2EE5D\n```\n\n----------------------------------------\n\nTITLE: Handling Different Object Formats in Swift Image Registration\nDESCRIPTION: Conditional processing for different object formats (ELF, COFF, WASM). Sets the appropriate source file name based on the SDK's object format and configures file extension settings based on platform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n    if(\"${SWIFT_SDK_${sdk}_OBJECT_FORMAT}\" STREQUAL \"ELF\" OR\n       \"${SWIFT_SDK_${sdk}_OBJECT_FORMAT}\" STREQUAL \"COFF\" OR\n       \"${SWIFT_SDK_${sdk}_OBJECT_FORMAT}\" STREQUAL \"WASM\")\n      # TODO(compnerd) switch to the generator expression when cmake is upgraded\n      # to a version which supports it.\n      # set(swiftrtObject \"$<TARGET_OBJECTS:swiftImageRegistrationObject${SWIFT_SDK_${sdk}_OBJECT_FORMAT}-${arch_suffix}>\")\n      set(swiftrtSourceName SwiftRT-${SWIFT_SDK_${sdk}_OBJECT_FORMAT}.cpp)\n      if(\"${SWIFT_SDK_${sdk}_OBJECT_FORMAT}\" STREQUAL \"ELF\" OR\n         \"${SWIFT_SDK_${sdk}_OBJECT_FORMAT}\" STREQUAL \"WASM\")\n       set(swiftrtSourceName SwiftRT-ELF-WASM.cpp)\n      endif()\n      set(swiftrtObject ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/swiftImageRegistrationObject${SWIFT_SDK_${sdk}_OBJECT_FORMAT}-${arch_suffix}.dir/${swiftrtSourceName}${CMAKE_C_OUTPUT_EXTENSION})\n\n      if(sdk STREQUAL \"WINDOWS\")\n        set(extension .obj)\n      else()\n        set(extension .o)\n      endif()\n```\n\n----------------------------------------\n\nTITLE: Installing SwiftCore Target in CMake\nDESCRIPTION: Configures the installation of the SwiftCore target, including archive, library, and runtime components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS swiftCore\n  EXPORT SwiftCoreTargets\n  COMPONENT SwiftCore_runtime\n  ARCHIVE DESTINATION \"${SwiftCore_INSTALL_LIBDIR}\"\n  LIBRARY DESTINATION \"${SwiftCore_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nemit_swift_interface(swiftCore)\ninstall_swift_interface(swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Swift Mock Plugin Library in CMake\nDESCRIPTION: Configures the build settings for a shared library called libMockPlugin. Sets library name, adds source files, configures symbol exports, and establishes dependencies. Includes options for dead strip linking and LLVM components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/libMockPlugin/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(MOCK_PLUGIN_LIB_NAME \"_swiftMockPlugin\")\n\nset(LLVM_EXPORTED_SYMBOL_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/libMockPlugin.exports)\n\nadd_swift_host_library(libMockPlugin SHARED\n  MockPlugin.cpp\n  c-include-check.c\n  LLVM_LINK_COMPONENTS support)\n\nset_target_properties(libMockPlugin\n    PROPERTIES\n    OUTPUT_NAME ${MOCK_PLUGIN_LIB_NAME})\n\nadd_llvm_symbol_exports(libMockPlugin ${LLVM_EXPORTED_SYMBOL_FILE})\n\nadd_dependencies(tools libMockPlugin)\n# Adds -dead_strip option\nadd_link_opts(libMockPlugin)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Uppercase Character Ranges\nDESCRIPTION: Maps Unicode code points to uppercase character designation. Includes both individual code points and ranges for Latin, Greek, Cyrillic, Armenian, Georgian and other alphabets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_7\n\nLANGUAGE: unicode\nCODE:\n```\n0041..005A    ; Uppercase\n00C0..00D6    ; Uppercase\n00D8..00DE    ; Uppercase\n0100          ; Uppercase\n0102          ; Uppercase\n[...]\n1ED4          ; Uppercase\n1ED6          ; Uppercase\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Imperial Aramaic Script\nDESCRIPTION: Defines the Unicode code point ranges for the Imperial Aramaic script, including letters, section signs, and numbers. This block contains 31 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_64\n\nLANGUAGE: Unicode\nCODE:\n```\n10840..10855  ; Imperial_Aramaic # Lo  [22] IMPERIAL ARAMAIC LETTER ALEPH..IMPERIAL ARAMAIC LETTER TAW\n10857         ; Imperial_Aramaic # Po       IMPERIAL ARAMAIC SECTION SIGN\n10858..1085F  ; Imperial_Aramaic # No   [8] IMPERIAL ARAMAIC NUMBER ONE..IMPERIAL ARAMAIC NUMBER TEN THOUSAND\n\n# Total code points: 31\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift SILGen Static Library in CMake\nDESCRIPTION: Defines the swiftSILGen static library, specifies its source files, and sets up linking dependencies. It also configures LLVM availability for the library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILGen/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftSILGen STATIC\n  ArgumentSource.cpp\n  Cleanup.cpp\n  Condition.cpp\n  FormalEvaluation.cpp\n  ManagedValue.cpp\n  ResultPlan.cpp\n  RValue.cpp\n  Scope.cpp\n  SwitchEnumBuilder.cpp\n  SILGen.cpp\n  SILGenApply.cpp\n  SILGenBackDeploy.cpp\n  SILGenBridging.cpp\n  SILGenBuilder.cpp\n  SILGenBuiltin.cpp\n  SILGenConcurrency.cpp\n  SILGenConstructor.cpp\n  SILGenConvert.cpp\n  SILGenDecl.cpp\n  SILGenDestructor.cpp\n  SILGenDistributed.cpp\n  SILGenDynamicCast.cpp\n  SILGenEpilog.cpp\n  SILGenExpr.cpp\n  SILGenForeignError.cpp\n  SILGenFunction.cpp\n  SILGenGlobalVariable.cpp\n  SILGenLazyConformance.cpp\n  SILGenLocalArchetype.cpp\n  SILGenLValue.cpp\n  SILGenPack.cpp\n  SILGenPattern.cpp\n  SILGenPoly.cpp\n  SILGenProlog.cpp\n  SILGenRequests.cpp\n  SILGenStmt.cpp\n  SILGenThunk.cpp\n  SILGenTopLevel.cpp\n  SILGenType.cpp)\ntarget_link_libraries(swiftSILGen PRIVATE\n  swiftSerialization\n  swiftSIL)\n\nset_swift_llvm_is_available(swiftSILGen)\n```\n\n----------------------------------------\n\nTITLE: Indexing Entity Structure\nDESCRIPTION: Details the structure of entity objects returned in indexing responses, representing declarations, references, and their relationships in the code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n```\nentity ::=\n{\n    <key.kind>:                   (UID)             // UID for the declaration or reference kind (function, class, etc.).\n    <key.name>:                   (string)          // Displayed name for the entity.\n    <key.usr>:                    (string)          // USR string for the entity.\n    <key.line>:                   (int64)           // Line of the position of the entity in source contents.\n    <key.column>:                 (int64)           // Column of the position of the entity in source contents.\n    [opt] <key.is_test_candidate> (bool)            // Whether the instance method matches what XCTest considers\n                                                    // to be a viable test: a class instance method that takes no\n                                                    // parameters, returns void, and begins with \"test\". This key\n                                                    // is only present if the value is true.\n    [opt] <key.entities>:         (array) [entity+] // One or more entities contained in the particular entity (sub-classes, references, etc.).\n    [opt] <key.related>:          (array) [entity+] // One or more entities related with the particular entity (inherited classes, protocols, etc.).\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Consonant Codepoint Ranges\nDESCRIPTION: Defines Unicode codepoint ranges for basic consonant letters across various Indic scripts including Khudawadi, Grantha, Tulu-Tigalari, and others.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n112BA..112DE  ; Consonant # Lo  [37] KHUDAWADI LETTER KA..KHUDAWADI LETTER HA\n11315..11328  ; Consonant # Lo  [20] GRANTHA LETTER KA..GRANTHA LETTER NA\n1132A..11330  ; Consonant # Lo   [7] GRANTHA LETTER PA..GRANTHA LETTER RA\n```\n\n----------------------------------------\n\nTITLE: Adding SourceKit Subdirectory to Swift Build in CMake\nDESCRIPTION: This CMake directive adds the SourceKit subdirectory to the build process. It ensures that the SourceKit components are compiled as part of the Swift project build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/include/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(SourceKit)\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Options for Swift Core Runtime\nDESCRIPTION: Sets various build options and flags for the Swift Core runtime, including enabling/disabling features like library evolution, ObjC interop, and concurrency support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ndefaulted_option(SwiftCore_ENABLE_LIBRARY_EVOLUTION \"Generate ABI resilient runtime libraries\")\n\ndefaulted_option(SwiftCore_ENABLE_CRASH_REPORTER_CLIENT \"Enable Apple CrashReporter integration\")\ndefaulted_option(SwiftCore_ENABLE_OBJC_INTEROP \"Enable runtime ObjC interop\")\ndefaulted_option(SwiftCore_ENABLE_TYPE_PRINTING \"Enable printing type names\")\ndefaulted_option(SwiftCore_ENABLE_VECTOR_TYPES \"Enable vector support\")\ndefaulted_option(SwiftCore_ENABLE_REFLECTION \"Enable runtime support for mirrors and reflection support\")\ndefaulted_option(SwiftCore_ENABLE_COMMANDLINE_SUPPORT \"Enable command line argument support\")\ndefaulted_option(SwiftCore_ENABLE_RUNTIME_FUNCTION_COUNTERS \"Enable runtime function counter support\")\ndefaulted_option(SwiftCore_ENABLE_STDIN \"Enable functions that use stdin support\")\ndefaulted_option(SwiftCore_ENABLE_ENVIRONMENT \"Enable environment variable support\")\ndefaulted_option(SwiftCore_ENABLE_OVERRIDABLE_RETAIN_RELEASE \"Enable override hooks for retain/release\")\ndefaulted_option(SwiftCore_ENABLE_RUNTIME_OS_VERSIONING \"Enable runtime OS version detection\")\ndefaulted_option(SwiftCore_ENABLE_STATIC_PRINT \"Disable full print\")\ndefaulted_option(SwiftCore_ENABLE_COMPACT_ABSOLUTE_FUNCTION_POINTERS \"Resolve absolute function pointer as identity\")\ndefaulted_option(SwiftCore_ENABLE_BACKDEPLOYMENT_SUPPORT \"Add symbols for runtime backdeployment\")\ndefaulted_option(SwiftCore_ENABLE_STDLIB_TRACING \"Enable tracing in the runtime. Assumes the presence of os_log(3) and the os_signpost(3) API.\")\ndefaulted_option(SwiftCore_ENABLE_CONCURRENCY \"Enable Concurrency runtime support\")\ndefaulted_set(SwiftCore_CONCURRENCY_GLOBAL_EXECUTOR STRING \"Default Concurrency global executor implementation\")\noption(SwiftCore_ENABLE_UNICODE_DATA \"Include unicode data in Swift runtimes\" ON)\noption(SwiftCore_ENABLE_SHORT_MANGLING_LOOKUPS \"Build with fast-path context descriptor lookups based on well-known short manglings.\" ON)\noption(SwiftCore_ENABLE_FILESYSTEM_SUPPORT \"Build for systems that have a filesystem\" ON)\noption(SwiftCore_ENABLE_OS_TRACE_LAZY_INIT \"Use os_trace call to check if lazy init has been completed before making os_signpost calls.\" ${SwiftCore_HAS_OS_TRACE})\noption(SwiftCore_HAS_DARWIN_LIBMALLOC \"Use Darwin malloc features\" ${APPLE})\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Project Subdirectories with CMake\nDESCRIPTION: This CMake code adds three subdirectories to the Swift project build process: ASTGen for abstract syntax tree generation, MacroEvaluation for macro processing, and SwiftIDEUtilsBridging for IDE utilities bridging.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ASTGen/Sources/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(ASTGen)\nadd_subdirectory(MacroEvaluation)\nadd_subdirectory(SwiftIDEUtilsBridging)\n```\n\n----------------------------------------\n\nTITLE: Importing C++ Class Template with Specializations in Swift\nDESCRIPTION: This example shows how C++ class template specializations with different APIs are imported and used in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_65\n\nLANGUAGE: swift\nCODE:\n```\n// A shell of a generic struct only used for name lookup.\nstruct ClassTemplate<T> {}\n\nfunc useClassTemplate() {\n  var x1 = ClassTemplate<Int8>() // OK\n  var x2 = ClassTemplate<Int32>() // OK\n  var x3 = ClassTemplate<cxx_std.vector<Int32>> // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Uppercase Character Definitions\nDESCRIPTION: Defines Unicode codepoints for uppercase letters with various diacritical marks, including Latin and Greek characters. Each line contains the hex value, category (Lu for uppercase), and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n1E26          ; Lu #       LATIN CAPITAL LETTER H WITH DIAERESIS\n1E28          ; Lu #       LATIN CAPITAL LETTER H WITH CEDILLA\n1E2A          ; Lu #       LATIN CAPITAL LETTER H WITH BREVE BELOW\n# ... additional lines omitted for brevity ...\n2C67          ; Lu #       LATIN CAPITAL LETTER H WITH DESCENDER\n2C69          ; Lu #       LATIN CAPITAL LETTER K WITH DESCENDER\n```\n\n----------------------------------------\n\nTITLE: Defining Reabstraction Thunk Type Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for reabstraction thunk types, including a current and obsolete version.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nREABSTRACT-THUNK-TYPE ::= 'R'          // reabstraction thunk\nREABSTRACT-THUNK-TYPE ::= 'r'          // reabstraction thunk (obsolete)\n```\n\n----------------------------------------\n\nTITLE: Darwin-Specific Configuration\nDESCRIPTION: Sets Darwin-specific properties for sourcekitd-test, including the install runtime path and linker options to export the main symbol, ensuring proper installation and execution on macOS.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  set_target_properties(sourcekitd-test PROPERTIES\n    INSTALL_RPATH \"@executable_path/../lib\")\n  target_link_options(sourcekitd-test PRIVATE\n    \"LINKER:-exported_symbol,_main\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Output Directories\nDESCRIPTION: Creates custom commands to generate output directories for both static and dynamic libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftShims/swift/shims/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n    OUTPUT \"${output_dir}\"\n    COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${output_dir}\")\n\nadd_custom_command(\n    OUTPUT \"${output_dir_static}\"\n    COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${output_dir_static}\")\n```\n\n----------------------------------------\n\nTITLE: Unicode ID_Start Code Point Ranges\nDESCRIPTION: Exhaustive listing of Unicode code point ranges that have the ID_Start property, indicating characters that can start an identifier. Each line specifies either a single code point or a range of code points in hexadecimal format.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_26\n\nLANGUAGE: unicode\nCODE:\n```\nAAB1          ; ID_Start\nAAB5..AAB6    ; ID_Start\nAAB9..AABD    ; ID_Start\n....\n31350..323AF  ; ID_Start\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Swift Bridging\nDESCRIPTION: Conditionally adds the SwiftBridging subdirectory if C++ interop with Swift bridging header is enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_ENABLE_CXX_INTEROP_SWIFT_BRIDGING_HEADER)\n  add_subdirectory(SwiftBridging)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode ID_Start Character Ranges for Identifiers\nDESCRIPTION: This code snippet lists Unicode code point ranges that are valid for the beginning of identifiers according to Unicode Annex #31. Each line defines either a single code point or a range of code points that are permitted as the starting character of identifiers in programming languages.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_25\n\nLANGUAGE: unicode\nCODE:\n```\n#  NOTE: See UAX #31 for more information\n\n0041..005A    ; ID_Start\n0061..007A    ; ID_Start\n00AA          ; ID_Start\n00B5          ; ID_Start\n00BA          ; ID_Start\n00C0..00D6    ; ID_Start\n00D8..00F6    ; ID_Start\n00F8..01BA    ; ID_Start\n01BB          ; ID_Start\n01BC..01BF    ; ID_Start\n01C0..01C3    ; ID_Start\n01C4..0293    ; ID_Start\n0294          ; ID_Start\n0295..02AF    ; ID_Start\n02B0..02C1    ; ID_Start\n02C6..02D1    ; ID_Start\n02E0..02E4    ; ID_Start\n02EC          ; ID_Start\n02EE          ; ID_Start\n0370..0373    ; ID_Start\n0374          ; ID_Start\n0376..0377    ; ID_Start\n037A          ; ID_Start\n037B..037D    ; ID_Start\n037F          ; ID_Start\n0386          ; ID_Start\n0388..038A    ; ID_Start\n038C          ; ID_Start\n038E..03A1    ; ID_Start\n03A3..03F5    ; ID_Start\n03F7..0481    ; ID_Start\n048A..052F    ; ID_Start\n0531..0556    ; ID_Start\n0559          ; ID_Start\n0560..0588    ; ID_Start\n05D0..05EA    ; ID_Start\n05EF..05F2    ; ID_Start\n0620..063F    ; ID_Start\n0640          ; ID_Start\n0641..064A    ; ID_Start\n066E..066F    ; ID_Start\n0671..06D3    ; ID_Start\n06D5          ; ID_Start\n06E5..06E6    ; ID_Start\n06EE..06EF    ; ID_Start\n06FA..06FC    ; ID_Start\n06FF          ; ID_Start\n0710          ; ID_Start\n0712..072F    ; ID_Start\n074D..07A5    ; ID_Start\n07B1          ; ID_Start\n07CA..07EA    ; ID_Start\n07F4..07F5    ; ID_Start\n07FA          ; ID_Start\n0800..0815    ; ID_Start\n081A          ; ID_Start\n0824          ; ID_Start\n0828          ; ID_Start\n0840..0858    ; ID_Start\n0860..086A    ; ID_Start\n0870..0887    ; ID_Start\n0889..088E    ; ID_Start\n08A0..08C8    ; ID_Start\n08C9          ; ID_Start\n0904..0939    ; ID_Start\n093D          ; ID_Start\n0950          ; ID_Start\n0958..0961    ; ID_Start\n0971          ; ID_Start\n0972..0980    ; ID_Start\n0985..098C    ; ID_Start\n098F..0990    ; ID_Start\n0993..09A8    ; ID_Start\n09AA..09B0    ; ID_Start\n09B2          ; ID_Start\n09B6..09B9    ; ID_Start\n09BD          ; ID_Start\n09CE          ; ID_Start\n09DC..09DD    ; ID_Start\n09DF..09E1    ; ID_Start\n09F0..09F1    ; ID_Start\n09FC          ; ID_Start\n0A05..0A0A    ; ID_Start\n0A0F..0A10    ; ID_Start\n0A13..0A28    ; ID_Start\n0A2A..0A30    ; ID_Start\n0A32..0A33    ; ID_Start\n0A35..0A36    ; ID_Start\n0A38..0A39    ; ID_Start\n0A59..0A5C    ; ID_Start\n0A5E          ; ID_Start\n0A72..0A74    ; ID_Start\n0A85..0A8D    ; ID_Start\n0A8F..0A91    ; ID_Start\n0A93..0AA8    ; ID_Start\n0AAA..0AB0    ; ID_Start\n0AB2..0AB3    ; ID_Start\n0AB5..0AB9    ; ID_Start\n0ABD          ; ID_Start\n0AD0          ; ID_Start\n0AE0..0AE1    ; ID_Start\n0AF9          ; ID_Start\n0B05..0B0C    ; ID_Start\n0B0F..0B10    ; ID_Start\n0B13..0B28    ; ID_Start\n0B2A..0B30    ; ID_Start\n0B32..0B33    ; ID_Start\n0B35..0B39    ; ID_Start\n0B3D          ; ID_Start\n0B5C..0B5D    ; ID_Start\n0B5F..0B61    ; ID_Start\n0B71          ; ID_Start\n0B83          ; ID_Start\n0B85..0B8A    ; ID_Start\n0B8E..0B90    ; ID_Start\n0B92..0B95    ; ID_Start\n0B99..0B9A    ; ID_Start\n0B9C          ; ID_Start\n0B9E..0B9F    ; ID_Start\n0BA3..0BA4    ; ID_Start\n0BA8..0BAA    ; ID_Start\n0BAE..0BB9    ; ID_Start\n0BD0          ; ID_Start\n0C05..0C0C    ; ID_Start\n0C0E..0C10    ; ID_Start\n0C12..0C28    ; ID_Start\n0C2A..0C39    ; ID_Start\n0C3D          ; ID_Start\n0C58..0C5A    ; ID_Start\n0C5D          ; ID_Start\n0C60..0C61    ; ID_Start\n0C80          ; ID_Start\n0C85..0C8C    ; ID_Start\n0C8E..0C90    ; ID_Start\n0C92..0CA8    ; ID_Start\n0CAA..0CB3    ; ID_Start\n0CB5..0CB9    ; ID_Start\n0CBD          ; ID_Start\n0CDD..0CDE    ; ID_Start\n0CE0..0CE1    ; ID_Start\n0CF1..0CF2    ; ID_Start\n0D04..0D0C    ; ID_Start\n0D0E..0D10    ; ID_Start\n0D12..0D3A    ; ID_Start\n0D3D          ; ID_Start\n0D4E          ; ID_Start\n0D54..0D56    ; ID_Start\n0D5F..0D61    ; ID_Start\n0D7A..0D7F    ; ID_Start\n0D85..0D96    ; ID_Start\n0D9A..0DB1    ; ID_Start\n0DB3..0DBB    ; ID_Start\n0DBD          ; ID_Start\n0DC0..0DC6    ; ID_Start\n0E01..0E30    ; ID_Start\n0E32..0E33    ; ID_Start\n0E40..0E45    ; ID_Start\n0E46          ; ID_Start\n0E81..0E82    ; ID_Start\n0E84          ; ID_Start\n0E86..0E8A    ; ID_Start\n0E8C..0EA3    ; ID_Start\n0EA5          ; ID_Start\n0EA7..0EB0    ; ID_Start\n0EB2..0EB3    ; ID_Start\n0EBD          ; ID_Start\n0EC0..0EC4    ; ID_Start\n0EC6          ; ID_Start\n0EDC..0EDF    ; ID_Start\n0F00          ; ID_Start\n0F40..0F47    ; ID_Start\n0F49..0F6C    ; ID_Start\n0F88..0F8C    ; ID_Start\n1000..102A    ; ID_Start\n103F          ; ID_Start\n1050..1055    ; ID_Start\n105A..105D    ; ID_Start\n1061          ; ID_Start\n1065..1066    ; ID_Start\n106E..1070    ; ID_Start\n1075..1081    ; ID_Start\n108E          ; ID_Start\n10A0..10C5    ; ID_Start\n10C7          ; ID_Start\n10CD          ; ID_Start\n10D0..10FA    ; ID_Start\n10FC          ; ID_Start\n10FD..10FF    ; ID_Start\n1100..1248    ; ID_Start\n124A..124D    ; ID_Start\n1250..1256    ; ID_Start\n1258          ; ID_Start\n125A..125D    ; ID_Start\n1260..1288    ; ID_Start\n128A..128D    ; ID_Start\n1290..12B0    ; ID_Start\n12B2..12B5    ; ID_Start\n12B8..12BE    ; ID_Start\n12C0          ; ID_Start\n12C2..12C5    ; ID_Start\n12C8..12D6    ; ID_Start\n12D8..1310    ; ID_Start\n1312..1315    ; ID_Start\n1318..135A    ; ID_Start\n1380..138F    ; ID_Start\n13A0..13F5    ; ID_Start\n13F8..13FD    ; ID_Start\n1401..166C    ; ID_Start\n166F..167F    ; ID_Start\n1681..169A    ; ID_Start\n16A0..16EA    ; ID_Start\n16EE..16F0    ; ID_Start\n16F1..16F8    ; ID_Start\n1700..1711    ; ID_Start\n171F..1731    ; ID_Start\n1740..1751    ; ID_Start\n1760..176C    ; ID_Start\n176E..1770    ; ID_Start\n1780..17B3    ; ID_Start\n17D7          ; ID_Start\n17DC          ; ID_Start\n1820..1842    ; ID_Start\n1843          ; ID_Start\n1844..1878    ; ID_Start\n1880..1884    ; ID_Start\n1885..1886    ; ID_Start\n1887..18A8    ; ID_Start\n18AA          ; ID_Start\n18B0..18F5    ; ID_Start\n1900..191E    ; ID_Start\n1950..196D    ; ID_Start\n1970..1974    ; ID_Start\n1980..19AB    ; ID_Start\n19B0..19C9    ; ID_Start\n1A00..1A16    ; ID_Start\n1A20..1A54    ; ID_Start\n1AA7          ; ID_Start\n1B05..1B33    ; ID_Start\n1B45..1B4C    ; ID_Start\n1B83..1BA0    ; ID_Start\n1BAE..1BAF    ; ID_Start\n1BBA..1BE5    ; ID_Start\n1C00..1C23    ; ID_Start\n1C4D..1C4F    ; ID_Start\n1C5A..1C77    ; ID_Start\n1C78..1C7D    ; ID_Start\n1C80..1C8A    ; ID_Start\n1C90..1CBA    ; ID_Start\n1CBD..1CBF    ; ID_Start\n1CE9..1CEC    ; ID_Start\n1CEE..1CF3    ; ID_Start\n1CF5..1CF6    ; ID_Start\n1CFA          ; ID_Start\n1D00..1D2B    ; ID_Start\n1D2C..1D6A    ; ID_Start\n1D6B..1D77    ; ID_Start\n1D78          ; ID_Start\n1D79..1D9A    ; ID_Start\n1D9B..1DBF    ; ID_Start\n1E00..1F15    ; ID_Start\n1F18..1F1D    ; ID_Start\n1F20..1F45    ; ID_Start\n1F48..1F4D    ; ID_Start\n1F50..1F57    ; ID_Start\n1F59          ; ID_Start\n1F5B          ; ID_Start\n1F5D          ; ID_Start\n1F5F..1F7D    ; ID_Start\n1F80..1FB4    ; ID_Start\n1FB6..1FBC    ; ID_Start\n1FBE          ; ID_Start\n1FC2..1FC4    ; ID_Start\n1FC6..1FCC    ; ID_Start\n1FD0..1FD3    ; ID_Start\n1FD6..1FDB    ; ID_Start\n1FE0..1FEC    ; ID_Start\n1FF2..1FF4    ; ID_Start\n1FF6..1FFC    ; ID_Start\n2071          ; ID_Start\n207F          ; ID_Start\n2090..209C    ; ID_Start\n2102          ; ID_Start\n2107          ; ID_Start\n210A..2113    ; ID_Start\n2115          ; ID_Start\n2118          ; ID_Start\n2119..211D    ; ID_Start\n2124          ; ID_Start\n2126          ; ID_Start\n2128          ; ID_Start\n212A..212D    ; ID_Start\n212E          ; ID_Start\n212F..2134    ; ID_Start\n2135..2138    ; ID_Start\n2139          ; ID_Start\n213C..213F    ; ID_Start\n2145..2149    ; ID_Start\n214E          ; ID_Start\n2160..2182    ; ID_Start\n2183..2184    ; ID_Start\n2185..2188    ; ID_Start\n2C00..2C7B    ; ID_Start\n2C7C..2C7D    ; ID_Start\n2C7E..2CE4    ; ID_Start\n2CEB..2CEE    ; ID_Start\n2CF2..2CF3    ; ID_Start\n2D00..2D25    ; ID_Start\n2D27          ; ID_Start\n2D2D          ; ID_Start\n2D30..2D67    ; ID_Start\n2D6F          ; ID_Start\n2D80..2D96    ; ID_Start\n2DA0..2DA6    ; ID_Start\n2DA8..2DAE    ; ID_Start\n2DB0..2DB6    ; ID_Start\n2DB8..2DBE    ; ID_Start\n2DC0..2DC6    ; ID_Start\n2DC8..2DCE    ; ID_Start\n2DD0..2DD6    ; ID_Start\n2DD8..2DDE    ; ID_Start\n3005          ; ID_Start\n3006          ; ID_Start\n3007          ; ID_Start\n3021..3029    ; ID_Start\n3031..3035    ; ID_Start\n3038..303A    ; ID_Start\n303B          ; ID_Start\n303C          ; ID_Start\n3041..3096    ; ID_Start\n309B..309C    ; ID_Start\n309D..309E    ; ID_Start\n309F          ; ID_Start\n30A1..30FA    ; ID_Start\n30FC..30FE    ; ID_Start\n30FF          ; ID_Start\n3105..312F    ; ID_Start\n3131..318E    ; ID_Start\n31A0..31BF    ; ID_Start\n31F0..31FF    ; ID_Start\n3400..4DBF    ; ID_Start\n4E00..A014    ; ID_Start\nA015          ; ID_Start\nA016..A48C    ; ID_Start\nA4D0..A4F7    ; ID_Start\nA4F8..A4FD    ; ID_Start\nA500..A60B    ; ID_Start\nA60C          ; ID_Start\nA610..A61F    ; ID_Start\nA62A..A62B    ; ID_Start\nA640..A66D    ; ID_Start\nA66E          ; ID_Start\nA67F          ; ID_Start\nA680..A69B    ; ID_Start\nA69C..A69D    ; ID_Start\nA6A0..A6E5    ; ID_Start\nA6E6..A6EF    ; ID_Start\nA717..A71F    ; ID_Start\nA722..A76F    ; ID_Start\nA770          ; ID_Start\nA771..A787    ; ID_Start\nA788          ; ID_Start\nA78B..A78E    ; ID_Start\nA78F          ; ID_Start\nA790..A7CD    ; ID_Start\nA7D0..A7D1    ; ID_Start\nA7D3          ; ID_Start\nA7D5..A7DC    ; ID_Start\nA7F2..A7F4    ; ID_Start\nA7F5..A7F6    ; ID_Start\nA7F7          ; ID_Start\nA7F8..A7F9    ; ID_Start\nA7FA          ; ID_Start\nA7FB..A801    ; ID_Start\nA803..A805    ; ID_Start\nA807..A80A    ; ID_Start\nA80C..A822    ; ID_Start\nA840..A873    ; ID_Start\nA882..A8B3    ; ID_Start\nA8F2..A8F7    ; ID_Start\nA8FB          ; ID_Start\nA8FD..A8FE    ; ID_Start\nA90A..A925    ; ID_Start\nA930..A946    ; ID_Start\nA960..A97C    ; ID_Start\nA984..A9B2    ; ID_Start\nA9CF          ; ID_Start\nA9E0..A9E4    ; ID_Start\nA9E6          ; ID_Start\nA9E7..A9EF    ; ID_Start\nA9FA..A9FE    ; ID_Start\nAA00..AA28    ; ID_Start\nAA40..AA42    ; ID_Start\nAA44..AA4B    ; ID_Start\nAA60..AA6F    ; ID_Start\nAA70          ; ID_Start\nAA71..AA76    ; ID_Start\nAA7A          ; ID_Start\nAA7E..AAAF    ; ID_Start\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Duployan Script\nDESCRIPTION: Defines the Unicode code point ranges for the Duployan shorthand script, including letters, affixes, signs, and punctuation. The total count is 143 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_82\n\nLANGUAGE: text\nCODE:\n```\n1BC00..1BC6A  ; Duployan # Lo [107] DUPLOYAN LETTER H..DUPLOYAN LETTER VOCALIC M\n1BC70..1BC7C  ; Duployan # Lo  [13] DUPLOYAN AFFIX LEFT HORIZONTAL SECANT..DUPLOYAN AFFIX ATTACHED TANGENT HOOK\n1BC80..1BC88  ; Duployan # Lo   [9] DUPLOYAN AFFIX HIGH ACUTE..DUPLOYAN AFFIX HIGH VERTICAL\n1BC90..1BC99  ; Duployan # Lo  [10] DUPLOYAN AFFIX LOW ACUTE..DUPLOYAN AFFIX LOW ARROW\n1BC9C         ; Duployan # So       DUPLOYAN SIGN O WITH CROSS\n1BC9D..1BC9E  ; Duployan # Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK\n1BC9F         ; Duployan # Po       DUPLOYAN PUNCTUATION CHINOOK FULL STOP\n\n# Total code points: 143\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Swift Unicode Library Build in CMake\nDESCRIPTION: This CMake script sets up the build process for the embedded Swift Unicode library. It creates targets, sets compilation flags, and defines installation rules for different architectures and platforms. The script iterates through target triples, excluding Windows MSVC and AVR targets, and sets up custom build configurations for each supported platform.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/stubs/Unicode/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Embedded Swift Unicode library\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)\n  add_custom_target(embedded-unicode)\n  add_dependencies(embedded-libraries embedded-unicode)\n\n  foreach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})\n    string(REGEX REPLACE \"[ \\t]+\" \";\" list \"${entry}\")\n    list(GET list 0 arch)\n    list(GET list 1 mod)\n    list(GET list 2 triple)\n\n    if(\"${mod}\" MATCHES \"-windows-msvc$\")\n      continue()\n    endif()\n\n    if(\"${arch}\" MATCHES \"avr\")\n      continue()\n    endif()\n\n    if (SWIFT_HOST_VARIANT STREQUAL \"linux\")\n      set(extra_c_compile_flags -ffreestanding)\n    elseif (SWIFT_HOST_VARIANT STREQUAL \"macosx\")\n      set(extra_c_compile_flags -ffreestanding)\n    endif()\n    list(APPEND extra_c_compile_flags -nostdinc++)\n\n    set(SWIFT_SDK_embedded_ARCH_${mod}_MODULE \"${mod}\")\n    set(SWIFT_SDK_embedded_LIB_SUBDIR \"embedded\")\n    set(SWIFT_SDK_embedded_ARCH_${mod}_TRIPLE \"${triple}\")\n\n    add_swift_target_library_single(\n      embedded-unicode-${mod}\n      swiftUnicodeDataTables\n      STATIC\n      IS_FRAGILE\n\n      UnicodeData.cpp\n      UnicodeGrapheme.cpp\n      UnicodeNormalization.cpp\n      UnicodeScalarProps.cpp\n      UnicodeWord.cpp\n\n      C_COMPILE_FLAGS ${extra_c_compile_flags}\n      MODULE_DIR \"${CMAKE_BINARY_DIR}/lib/swift/embedded\"\n      SDK \"embedded\"\n      ARCHITECTURE \"${mod}\"\n      DEPENDS embedded-stdlib-${mod}\n      INSTALL_IN_COMPONENT stdlib\n      )\n    swift_install_in_component(\n      TARGETS embedded-unicode-${mod}\n      DESTINATION \"lib/swift/embedded/${mod}\"\n      COMPONENT \"stdlib\"\n      )\n    swift_install_in_component(\n      FILES \"${SWIFTLIB_DIR}/embedded/${mod}/libswiftUnicodeDataTables.a\"\n      DESTINATION \"lib/swift/embedded/${mod}/\"\n      COMPONENT \"stdlib\"\n      PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE\n      )\n    set_property(TARGET embedded-unicode-${mod} PROPERTY OSX_ARCHITECTURES \"${arch}\")\n\n    add_dependencies(embedded-unicode embedded-unicode-${mod})\n  endforeach()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift SIL Optimizer Source Files in CMake\nDESCRIPTION: CMake target_sources command that specifies the C++ source files to be included in the swiftSILOptimizer target. Contains implementation files for various optimization passes and transformations used in the Swift compiler's SIL optimization phase.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/Transforms/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  ARCCodeMotion.cpp\n  AccessEnforcementDom.cpp\n  AccessEnforcementOpts.cpp\n  AccessEnforcementReleaseSinking.cpp \n  AccessEnforcementWMO.cpp\n  AllocBoxToStack.cpp\n  ArrayCountPropagation.cpp\n  COWOpts.cpp\n  CSE.cpp\n  ConditionForwarding.cpp\n  CopyForwarding.cpp\n  CopyPropagation.cpp\n  DeadCodeElimination.cpp\n  DeadObjectElimination.cpp\n  Devirtualizer.cpp\n  DifferentiabilityWitnessDevirtualizer.cpp\n  EagerSpecializer.cpp\n  GenericSpecializer.cpp\n  Outliner.cpp\n  AssemblyVisionRemarkGenerator.cpp\n  PartialApplySimplification.cpp\n  PerformanceInliner.cpp\n  PhiArgumentOptimizations.cpp\n  PruneVTables.cpp\n  RedundantOverflowCheckRemoval.cpp\n  SILCodeMotion.cpp\n  SILLowerAggregateInstrs.cpp\n  SILMem2Reg.cpp\n  SILSROA.cpp\n  DestroyAddrHoisting.cpp\n  SimplifyCFG.cpp\n  Sink.cpp\n  SpeculativeDevirtualizer.cpp\n  StringOptimization.cpp\n  TempLValueOpt.cpp\n  TempRValueElimination.cpp)\n```\n\n----------------------------------------\n\nTITLE: Windows Error Code Example\nDESCRIPTION: Example of a Windows error code output showing a DLL not found error. Demonstrates the format of HRESULT values on Windows systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_49\n\nLANGUAGE: plaintext\nCODE:\n```\nnote: command had no output on stdout or stderr\nerror: command failed with exit status: 0xc0000135\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Swift SIL Optimizer in CMake\nDESCRIPTION: This CMake command adds multiple C++ source files to the swiftSILOptimizer target. These files implement various analyses and optimizations for the Swift Intermediate Language (SIL).\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/Analysis/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  ARCAnalysis.cpp\n  AccessSummaryAnalysis.cpp\n  AccessStorageAnalysis.cpp\n  AliasAnalysis.cpp\n  Analysis.cpp\n  ArraySemantic.cpp\n  BasicCalleeAnalysis.cpp\n  CallerAnalysis.cpp\n  ClassHierarchyAnalysis.cpp\n  ClosureScope.cpp\n  ColdBlockInfo.cpp\n  DeadEndBlocksAnalysis.cpp\n  DestructorAnalysis.cpp\n  DifferentiableActivityAnalysis.cpp\n  EpilogueARCAnalysis.cpp\n  FunctionOrder.cpp\n  IVAnalysis.cpp\n  IsSelfRecursiveAnalysis.cpp\n  LoopAnalysis.cpp\n  LoopRegionAnalysis.cpp\n  NonLocalAccessBlockAnalysis.cpp\n  PassManagerVerifierAnalysis.cpp\n  ProtocolConformanceAnalysis.cpp\n  Reachability.cpp\n  RegionAnalysis.cpp\n  RCIdentityAnalysis.cpp\n  SimplifyInstruction.cpp\n  ValueTracking.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building swift-inspect with a local copy of swift-argument-parser\nDESCRIPTION: CMake command for building swift-inspect using a local copy of swift-argument-parser, specifying the path to the modules directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/README.md#2025-04-23_snippet_6\n\nLANGUAGE: cmd\nCODE:\n```\ncmake -b out -G Ninja -S . -D ArgumentParser_DIR=S:\\swift-argument-parser\\build\\cmake\\modules\n```\n\n----------------------------------------\n\nTITLE: Defining Variadic Generic Zip Function in Swift (Proposed Syntax)\nDESCRIPTION: Shows a proposed `zip` function utilizing variadic generics. It accepts a type parameter pack `... Sequences` (conforming to `SequenceType`, likely a typo for `Sequence`) and a corresponding function parameter pack `... sequences`. It returns an instance of `ZipSequence` initialized by expanding the `sequences` pack.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\npublic func zip<... Sequences : SequenceType>(... sequences: Sequences...)\n            -> ZipSequence<Sequences...> {\n  return ZipSequence(sequences...)\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Break Test Cases with Apostrophe Interactions\nDESCRIPTION: Test cases demonstrating Unicode word breaking rules for apostrophes interacting with various character types. Each line shows Unicode code points with break symbols (÷) and non-break symbols (×) indicating where word breaks should or should not occur according to the Unicode segmentation algorithm.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n÷ 0061 ÷ 0027 × 0308 ÷ 000B ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 3031 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 3031 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]\n÷ 0061 × 0027 × 0041 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n÷ 0061 × 0027 × 0308 × 0041 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 003A ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 002C ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 002E ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 002E ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 0030 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 0030 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 005F ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 005F ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 1F1E6 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 0061 × 0027 × 05D0 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n÷ 0061 × 0027 × 0308 × 05D0 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 0022 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 0022 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 0027 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 231A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 231A ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 0020 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 0020 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 0061 ÷ 0027 × 00AD ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 × 00AD ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0300 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 × 0300 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 0061 ÷ 0027 × 200D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 × 200D ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 0061 × 0027 × 0061 × 2060 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 × 0027 × 0308 × 0061 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 × 0027 × 0061 ÷ 003A ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0061 × 0027 × 0308 × 0061 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0061 × 0027 × 0061 ÷ 0027 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0061 × 0027 × 0308 × 0061 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0061 × 0027 × 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 × 0027 × 0308 × 0061 ÷ 0027 × 2060 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 × 0027 × 0061 ÷ 002C ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 × 0027 × 0308 × 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) × [7.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 0031 ÷ 003A ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 0031 ÷ 0027 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 0031 ÷ 002C ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 0027 ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 ÷ 0027 × 0308 ÷ 0031 ÷ 002E × 2060 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 ÷ 0027 × 2060 ÷ 0001 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 0001 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Declaring Documented Functions with Multi-line Comments\nDESCRIPTION: Defines functions with extensive documentation comments in different formats, demonstrating Markdown and documentation generation support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_14\n\nLANGUAGE: Swift\nCODE:\n```\n/**\n * Aaa.  fooFuncWithComment1.  Bbb.\n * Ccc.\n *\n * Ddd.\n */\nfunc fooFuncWithComment1()\n\n/*!\n  Aaa.  fooFuncWithComment2.  Bbb.\n */\nfunc fooFuncWithComment2()\n\n/**\n * Aaa.  fooFuncWithComment3.  Bbb.\n */\n/**\n * Ccc.\n */\nfunc fooFuncWithComment3()\n\n/**\n * Aaa.  fooFuncWithComment4.  Bbb.\n */\n/// Ddd.\nfunc fooFuncWithComment4()\n\n/// Aaa.  fooFuncWithComment5.  Bbb.\n/// Ccc.\n///\n/// Ddd.\nfunc fooFuncWithComment5()\n```\n\n----------------------------------------\n\nTITLE: IWYU Debug Stub Script\nDESCRIPTION: Python script for debugging IWYU integration by intercepting compilation commands and selectively routing them to IWYU or Clang\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/RunningIncludeWhatYouUse.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python3\n\n# iwyu_stub.py\n\nimport os\nimport re\nimport subprocess\nimport sys\n\nclang_path = \"/usr/bin/clang\"\nclangxx_path = \"/usr/bin/clang++\"\nproject_dir = \"/Users/username/swift-project/\"\niwyu_bin_path = project_dir + \"iwyu/build/bin/include-what-you-use\"\nlog_dir = project_dir + \"iwyu/logs/\"\n\nlog_file = open(log_dir + \"passthrough.log\", \"a+\")\n\nargv = sys.argv\n\ndef call_with_args(executable_path, args=argv):\n    new_argv = args[:]\n    new_argv[0] = executable_path\n    log_file.write(\"# about to run:\\n{}\\n#---\\n\".format(' '.join(new_argv)))\n    sys.exit(subprocess.call(new_argv))\n\ndef try_using_iwyu(argv):\n    return (argv[-2] == \"-c\") and (\"/swift/\" in argv[-1])\n\nif argv[1] == \"--forward-to-clangxx\":\n    call_with_args(clangxx_path, args=([argv[0]] + argv[2:]))\n\nif try_using_iwyu(argv):\n  _, ext = os.path.splitext(argv[-1])\n  if ext == \".m\":\n      call_with_args(clang_path)\n  elif ext == \".mm\":\n      call_with_args(clangxx_path)\n  elif ext in [\".cxx\", \".cc\", \".cpp\", \".c\"]:\n      call_with_args(iwyu_bin_path)\n  log_file.write(\n      \"# Got a strange file extension.\\n{}\\n#---\\n\".format(' '.join(argv)))\n  call_with_args(iwyu_bin_path)\nelse:\n  log_file.write(\n      \"# Not going to try using iwyu.\\n{}\\n#---\\n\".format(' '.join(argv)))\n  _, ext = os.path.splitext(argv[-1])\n  if ext == \".m\" or ext == \".c\":\n      call_with_args(clang_path)\n  else:\n      call_with_args(clangxx_path)\n```\n\n----------------------------------------\n\nTITLE: Documenting Generic Signature Changes in Swift\nDESCRIPTION: This snippet shows changes to generic signatures for various Swift entities, including functions and protocols. It demonstrates how constraints and type requirements have been modified.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n/* Generic Signature Changes */\ncake: Func P1.P1Constraint() has generic signature change from <Self where Self : cake.P1, Self : cake.P2> to <Self where Self : cake.P1>\ncake: Func addingAnInverse(_:) has generic signature change from <T> to <T where T : ~Copyable>\ncake: Protocol P3 has generic signature change from <Self : cake.P1, Self : cake.P2> to <Self : cake.P1, Self : cake.P4>\n```\n\n----------------------------------------\n\nTITLE: Adding GyB Target for SourceKit Protocol UIDs in CMake\nDESCRIPTION: Creates a GyB (Generate Your Boilerplate) build target named 'generated_sourcekit_uids' that processes the ProtocolUIDs.def.gyb template file. The target depends on Python support modules used during generation, specifically the __init__.py and UIDs.py modules in the gyb_sourcekit_support directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/include/SourceKit/Core/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_gyb_target(generated_sourcekit_uids\n  ProtocolUIDs.def.gyb\n  DEPENDS\n    \"${SWIFT_SOURCE_DIR}/utils/gyb_sourcekit_support/__init__.py\"\n    \"${SWIFT_SOURCE_DIR}/utils/gyb_sourcekit_support/UIDs.py\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Block for Tamil Script\nDESCRIPTION: Lists Unicode code points for Tamil script characters with their character types. Includes vowels, consonants, signs, digits, and special symbols covering 123 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_10\n\nLANGUAGE: Unicode\nCODE:\n```\n0B82          ; Tamil # Mn       TAMIL SIGN ANUSVARA\n0B83          ; Tamil # Lo       TAMIL SIGN VISARGA\n0B85..0B8A    ; Tamil # Lo   [6] TAMIL LETTER A..TAMIL LETTER UU\n0B8E..0B90    ; Tamil # Lo   [3] TAMIL LETTER E..TAMIL LETTER AI\n0B92..0B95    ; Tamil # Lo   [4] TAMIL LETTER O..TAMIL LETTER KA\n0B99..0B9A    ; Tamil # Lo   [2] TAMIL LETTER NGA..TAMIL LETTER CA\n0B9C          ; Tamil # Lo       TAMIL LETTER JA\n0B9E..0B9F    ; Tamil # Lo   [2] TAMIL LETTER NYA..TAMIL LETTER TTA\n0BA3..0BA4    ; Tamil # Lo   [2] TAMIL LETTER NNA..TAMIL LETTER TA\n0BA8..0BAA    ; Tamil # Lo   [3] TAMIL LETTER NA..TAMIL LETTER PA\n0BAE..0BB9    ; Tamil # Lo  [12] TAMIL LETTER MA..TAMIL LETTER HA\n0BBE..0BBF    ; Tamil # Mc   [2] TAMIL VOWEL SIGN AA..TAMIL VOWEL SIGN I\n0BC0          ; Tamil # Mn       TAMIL VOWEL SIGN II\n0BC1..0BC2    ; Tamil # Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU\n0BC6..0BC8    ; Tamil # Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI\n0BCA..0BCC    ; Tamil # Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU\n0BCD          ; Tamil # Mn       TAMIL SIGN VIRAMA\n0BD0          ; Tamil # Lo       TAMIL OM\n0BD7          ; Tamil # Mc       TAMIL AU LENGTH MARK\n0BE6..0BEF    ; Tamil # Nd  [10] TAMIL DIGIT ZERO..TAMIL DIGIT NINE\n0BF0..0BF2    ; Tamil # No   [3] TAMIL NUMBER TEN..TAMIL NUMBER ONE THOUSAND\n0BF3..0BF8    ; Tamil # So   [6] TAMIL DAY SIGN..TAMIL AS ABOVE SIGN\n0BF9          ; Tamil # Sc       TAMIL RUPEE SIGN\n0BFA          ; Tamil # So       TAMIL NUMBER SIGN\n11FC0..11FD4  ; Tamil # No  [21] TAMIL FRACTION ONE THREE-HUNDRED-AND-TWENTIETH..TAMIL FRACTION DOWNSCALING FACTOR KIIZH\n11FD5..11FDC  ; Tamil # So   [8] TAMIL SIGN NEL..TAMIL SIGN MUKKURUNI\n11FDD..11FE0  ; Tamil # Sc   [4] TAMIL SIGN KAACU..TAMIL SIGN VARAAKAN\n11FE1..11FF1  ; Tamil # So  [17] TAMIL SIGN PAARAM..TAMIL SIGN VAKAIYARAA\n11FFF         ; Tamil # Po       TAMIL PUNCTUATION END OF TEXT\n\n# Total code points: 123\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Characters to Numerical Value 30\nDESCRIPTION: Lists Unicode code points that represent the numerical value 30 across various writing systems and notations including Ethiopic, Hangzhou, and CJK ideographs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_18\n\nLANGUAGE: plain\nCODE:\n```\n1374          ; 30.0 ; ; 30 # No       ETHIOPIC NUMBER THIRTY\n303A          ; 30.0 ; ; 30 # Nl       HANGZHOU NUMERAL THIRTY\n324A          ; 30.0 ; ; 30 # No       CIRCLED NUMBER THIRTY ON BLACK SQUARE\n325A          ; 30.0 ; ; 30 # No       CIRCLED NUMBER THIRTY\n5345          ; 30.0 ; ; 30 # Lo       CJK UNIFIED IDEOGRAPH-5345\n10112         ; 30.0 ; ; 30 # No       AEGEAN NUMBER THIRTY\n10165         ; 30.0 ; ; 30 # Nl       GREEK ACROPHONIC THESPIAN THIRTY\n102EC         ; 30.0 ; ; 30 # No       COPTIC EPACT NUMBER THIRTY\n109CB         ; 30.0 ; ; 30 # No       MEROITIC CURSIVE NUMBER THIRTY\n10E6B         ; 30.0 ; ; 30 # No       RUMI NUMBER THIRTY\n10F24         ; 30.0 ; ; 30 # No       OLD SOGDIAN NUMBER THIRTY\n1105D         ; 30.0 ; ; 30 # No       BRAHMI NUMBER THIRTY\n111EC         ; 30.0 ; ; 30 # No       SINHALA ARCHAIC NUMBER THIRTY\n118EC         ; 30.0 ; ; 30 # No       WARANG CITI NUMBER THIRTY\n11C65         ; 30.0 ; ; 30 # No       BHAIKSUKI NUMBER THIRTY\n1D36B         ; 30.0 ; ; 30 # No       COUNTING ROD TENS DIGIT THREE\n1EC7C         ; 30.0 ; ; 30 # No       INDIC SIYAQ NUMBER THIRTY\n1ED0C         ; 30.0 ; ; 30 # No       OTTOMAN SIYAQ NUMBER THIRTY\n20983         ; 30.0 ; ; 30 # Lo       CJK UNIFIED IDEOGRAPH-20983\n```\n\n----------------------------------------\n\nTITLE: Defining Other_Math Unicode Ranges\nDESCRIPTION: Defines Unicode ranges for mathematical symbols including bold, italic, and sans-serif variants of Greek letters and Arabic mathematical symbols. Covers 1362 code points in total.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode-data\nCODE:\n```\n1D6A8..1D6C0  ; Other_Math # L&  [25] MATHEMATICAL BOLD CAPITAL ALPHA..MATHEMATICAL BOLD CAPITAL OMEGA\n1D6C2..1D6DA  ; Other_Math # L&  [25] MATHEMATICAL BOLD SMALL ALPHA..MATHEMATICAL BOLD SMALL OMEGA\n1D6DC..1D6FA  ; Other_Math # L&  [31] MATHEMATICAL BOLD EPSILON SYMBOL..MATHEMATICAL ITALIC CAPITAL OMEGA\n[...shortened for brevity...]\n1EEA5..1EEA9  ; Other_Math # Lo   [5] ARABIC MATHEMATICAL DOUBLE-STRUCK WAW..ARABIC MATHEMATICAL DOUBLE-STRUCK YEH\n1EEAB..1EEBB  ; Other_Math # Lo  [17] ARABIC MATHEMATICAL DOUBLE-STRUCK LAM..ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN\n```\n\n----------------------------------------\n\nTITLE: Consonant Placeholder Unicode Ranges\nDESCRIPTION: Defines Unicode ranges for consonant placeholders used in Indic script layout, including generic placeholders like NBSP and dotted circle, as well as script-specific vowel-holder characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n002D          ; Consonant_Placeholder # Pd       HYPHEN-MINUS\n00A0          ; Consonant_Placeholder # Zs       NO-BREAK SPACE\n00D7          ; Consonant_Placeholder # Sm       MULTIPLICATION SIGN\n```\n\n----------------------------------------\n\nTITLE: SIL Implementation - Move Only Value Processing\nDESCRIPTION: Shows the SIL code generation for move-only value handling, including ownership annotations and borrowing operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_18\n\nLANGUAGE: sil\nCODE:\n```\nsil hidden [ossa] @doSomething : $@convention(thin) (@guaranteed Klass) -> () {\nbb0(%0 : @noImplicitCopy $Klass):\n  %1 = copyable_to_moveonlywrapper [guaranteed] %0 : $@moveOnly Klass\n  %2 = copy_value %1 : $@moveOnly Klass\n  %3 = mark_unresolved_non_copyable_value [no_consume_or_assign] %2 : $@moveOnly Klass\n  debug_value %3 : $@moveOnly Klass, let, name \"x\", argno 1\n  %4 = begin_borrow %3 : $@moveOnly Klass\n  %5 = function_ref @$s4test5KlassC11doSomethingyyF : $@convention(method) (@guaranteed Klass) -> ()\n  %6 = moveonlywrapper_to_copyable [guaranteed] %4 : $@moveOnly Klass\n  %7 = apply %5(%6) : $@convention(method) (@guaranteed Klass) -> ()\n  end_borrow %4 : $@moveOnly Klass\n  %9 = begin_borrow %3 : $@moveOnly Klass\n  %10 = copy_value %9 : $@moveOnly Klass\n  %11 = moveonlywrapper_to_copyable [owned] %10 : $@moveOnly Klass\n  %12 = begin_borrow [lexical] %11 : $Klass\n  debug_value %12 : $Klass, let, name \"x2\"\n  end_borrow %9 : $@moveOnly Klass\n  %15 = function_ref @$s4test5KlassC11doSomethingyyF : $@convention(method) (@guaranteed Klass) -> ()\n  %16 = apply %15(%12) : $@convention(method) (@guaranteed Klass) -> ()\n  end_borrow %12 : $Klass\n  destroy_value %11 : $Klass\n  destroy_value %3 : $@moveOnly Klass\n  %20 = tuple ()\n  return %20 : $()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Consonant_Final Unicode Character Range\nDESCRIPTION: Lists Unicode code points classified as Consonant_Final in the Indic_Syllabic_Category property. These characters represent final consonants in various scripts including Limbu, New Tai Lue, and others.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n1930..1931    ; Consonant_Final # Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA\n1933..1938    ; Consonant_Final # Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA\n1939          ; Consonant_Final # Mn       LIMBU SIGN MUKPHRENG\n19C1..19C7    ; Consonant_Final # Lo   [7] NEW TAI LUE LETTER FINAL V..NEW TAI LUE LETTER FINAL B\n1A58..1A59    ; Consonant_Final # Mn   [2] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN FINAL NGA\n1B03          ; Consonant_Final # Mn       BALINESE SIGN SURANG\n1B81          ; Consonant_Final # Mn       SUNDANESE SIGN PANGLAYAR\n1BBE..1BBF    ; Consonant_Final # Lo   [2] SUNDANESE LETTER FINAL K..SUNDANESE LETTER FINAL M\n1BF0..1BF1    ; Consonant_Final # Mn   [2] BATAK CONSONANT SIGN NG..BATAK CONSONANT SIGN H\n1C2D..1C33    ; Consonant_Final # Mn   [7] LEPCHA CONSONANT SIGN K..LEPCHA CONSONANT SIGN T\nA94F..A951    ; Consonant_Final # Mn   [3] REJANG CONSONANT SIGN NG..REJANG CONSONANT SIGN R\nA952          ; Consonant_Final # Mc       REJANG CONSONANT SIGN H\nA982          ; Consonant_Final # Mn       JAVANESE SIGN LAYAR\nAA40..AA42    ; Consonant_Final # Lo   [3] CHAM LETTER FINAL K..CHAM LETTER FINAL NG\nAA43          ; Consonant_Final # Mn       CHAM CONSONANT SIGN FINAL NG\nAA44..AA4B    ; Consonant_Final # Lo   [8] CHAM LETTER FINAL CH..CHAM LETTER FINAL SS\nAA4C          ; Consonant_Final # Mn       CHAM CONSONANT SIGN FINAL M\nAA4D          ; Consonant_Final # Mc       CHAM CONSONANT SIGN FINAL H\nABDB..ABE2    ; Consonant_Final # Lo   [8] MEETEI MAYEK LETTER KOK LONSUM..MEETEI MAYEK LETTER I LONSUM\n11A8A..11A95  ; Consonant_Final # Mn  [12] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO FINAL CONSONANT SIGN -A\n```\n\n----------------------------------------\n\nTITLE: Defining Extender Unicode Characters\nDESCRIPTION: This snippet lists Unicode code point ranges for Extender characters, including various linguistic and script-specific extenders.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_16\n\nLANGUAGE: Unicode\nCODE:\n```\n00B7          ; Extender # Po       MIDDLE DOT\n02D0..02D1    ; Extender # Lm   [2] MODIFIER LETTER TRIANGULAR COLON..MODIFIER LETTER HALF TRIANGULAR COLON\n0640          ; Extender # Lm       ARABIC TATWEEL\n07FA          ; Extender # Lm       NKO LAJANYALAN\n0A71          ; Extender # Mn       GURMUKHI ADDAK\n0AFB          ; Extender # Mn       GUJARATI SIGN SHADDA\n0B55          ; Extender # Mn       ORIYA SIGN OVERLINE\n0E46          ; Extender # Lm       THAI CHARACTER MAIYAMOK\n0EC6          ; Extender # Lm       LAO KO LA\n180A          ; Extender # Po       MONGOLIAN NIRUGU\n1843          ; Extender # Lm       MONGOLIAN LETTER TODO LONG VOWEL SIGN\n1AA7          ; Extender # Lm       TAI THAM SIGN MAI YAMOK\n1C36          ; Extender # Mn       LEPCHA SIGN RAN\n1C7B          ; Extender # Lm       OL CHIKI RELAA\n3005          ; Extender # Lm       IDEOGRAPHIC ITERATION MARK\n3031..3035    ; Extender # Lm   [5] VERTICAL KANA REPEAT MARK..VERTICAL KANA REPEAT MARK LOWER HALF\n309D..309E    ; Extender # Lm   [2] HIRAGANA ITERATION MARK..HIRAGANA VOICED ITERATION MARK\n30FC..30FE    ; Extender # Lm   [3] KATAKANA-HIRAGANA PROLONGED SOUND MARK..KATAKANA VOICED ITERATION MARK\nA015          ; Extender # Lm       YI SYLLABLE WU\nA60C          ; Extender # Lm       VAI SYLLABLE LENGTHENER\nA9CF          ; Extender # Lm       JAVANESE PANGRANGKEP\nA9E6          ; Extender # Lm       MYANMAR MODIFIER LETTER SHAN REDUPLICATION\nAA70          ; Extender # Lm       MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION\nAADD          ; Extender # Lm       TAI VIET SYMBOL SAM\nAAF3..AAF4    ; Extender # Lm   [2] MEETEI MAYEK SYLLABLE REPETITION MARK..MEETEI MAYEK WORD REPETITION MARK\nFF70          ; Extender # Lm       HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK\n10781..10782  ; Extender # Lm   [2] MODIFIER LETTER SUPERSCRIPT TRIANGULAR COLON..MODIFIER LETTER SUPERSCRIPT HALF TRIANGULAR COLON\n10D4E         ; Extender # Lm       GARAY VOWEL LENGTH MARK\n10D6A         ; Extender # Mn       GARAY CONSONANT GEMINATION MARK\n10D6F         ; Extender # Lm       GARAY REDUPLICATION MARK\n11237         ; Extender # Mn       KHOJKI SIGN SHADDA\n1135D         ; Extender # Lo       GRANTHA SIGN PLUTA\n113D2         ; Extender # Mn       TULU-TIGALARI GEMINATION MARK\n113D3         ; Extender # Lo       TULU-TIGALARI SIGN PLUTA\n115C6..115C8  ; Extender # Po   [3] SIDDHAM REPETITION MARK-1..SIDDHAM REPETITION MARK-3\n11A98         ; Extender # Mn       SOYOMBO GEMINATION MARK\n16B42..16B43  ; Extender # Lm   [2] PAHAWH HMONG SIGN VOS NRUA..PAHAWH HMONG SIGN IB YAM\n16FE0..16FE1  ; Extender # Lm   [2] TANGUT ITERATION MARK..NUSHU ITERATION MARK\n16FE3         ; Extender # Lm       OLD CHINESE ITERATION MARK\n1E13C..1E13D  ; Extender # Lm   [2] NYIAKENG PUACHUE HMONG SIGN XW XW..NYIAKENG PUACHUE HMONG SYLLABLE LENGTHENER\n1E5EF         ; Extender # Mn       OL ONAL SIGN IKIR\n1E944..1E946  ; Extender # Mn   [3] ADLAM ALIF LENGTHENER..ADLAM GEMINATION MARK\n```\n\n----------------------------------------\n\nTITLE: Constructing Tuples in Memory with tuple_addr_constructor in Swift SIL\nDESCRIPTION: The tuple_addr_constructor instruction creates a new tuple in memory from an exploded list of object and address values. It can handle both simple and complex tuple structures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_42\n\nLANGUAGE: Swift\nCODE:\n```\n%1 = tuple_addr_constructor [init] %destAddr : $*(Type1, Type2, Type3) with (%a : $Type1, %b : $*Type2, %c : $Type3)\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Range Definitions\nDESCRIPTION: A comprehensive listing of Unicode code point ranges that define emoji characters. Each line specifies a code point or range, marks it as Emoji, includes the emoji version (Ex: E0.6), count of characters in the range, and provides examples of the actual emoji symbols and their descriptions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n1F232..1F23A  ; Emoji                # E0.6   [9] (🈲..🈺)    Japanese \"prohibited\" button..Japanese \"open for business\" button\n1F250..1F251  ; Emoji                # E0.6   [2] (🉐..🉑)    Japanese \"bargain\" button..Japanese \"acceptable\" button\n1F300..1F30C  ; Emoji                # E0.6  [13] (🌀..🌌)    cyclone..milky way\n```\n\n----------------------------------------\n\nTITLE: Final Target Configuration\nDESCRIPTION: Sets up the final libcxxshim_modulemap target and configures dependencies for the SDK overlay and compiler targets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Cxx/cxxshim/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_target(libcxxshim_modulemap DEPENDS ${libcxxshim_modulemap_target_list})\nset_property(TARGET libcxxshim_modulemap PROPERTY FOLDER \"Miscellaneous\")\nadd_dependencies(sdk-overlay libcxxshim_modulemap)\nadd_dependencies(compiler libcxxshim_modulemap)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Block for Sinhala Script\nDESCRIPTION: Lists Unicode code points for Sinhala script characters with their character types. Includes vowels, consonants, signs, and digits covering 111 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_14\n\nLANGUAGE: Unicode\nCODE:\n```\n0D81          ; Sinhala # Mn       SINHALA SIGN CANDRABINDU\n0D82..0D83    ; Sinhala # Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA\n0D85..0D96    ; Sinhala # Lo  [18] SINHALA LETTER AYANNA..SINHALA LETTER AUYANNA\n0D9A..0DB1    ; Sinhala # Lo  [24] SINHALA LETTER ALPAPRAANA KAYANNA..SINHALA LETTER DANTAJA NAYANNA\n0DB3..0DBB    ; Sinhala # Lo   [9] SINHALA LETTER SANYAKA DAYANNA..SINHALA LETTER RAYANNA\n0DBD          ; Sinhala # Lo       SINHALA LETTER DANTAJA LAYANNA\n0DC0..0DC6    ; Sinhala # Lo   [7] SINHALA LETTER VAYANNA..SINHALA LETTER FAYANNA\n0DCA          ; Sinhala # Mn       SINHALA SIGN AL-LAKUNA\n0DCF..0DD1    ; Sinhala # Mc   [3] SINHALA VOWEL SIGN AELA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA\n0DD2..0DD4    ; Sinhala # Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA\n0DD6          ; Sinhala # Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA\n0DD8..0DDF    ; Sinhala # Mc   [8] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN GAYANUKITTA\n0DE6..0DEF    ; Sinhala # Nd  [10] SINHALA LITH DIGIT ZERO..SINHALA LITH DIGIT NINE\n0DF2..0DF3    ; Sinhala # Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA\n0DF4          ; Sinhala # Po       SINHALA PUNCTUATION KUNDDALIYA\n111E1..111F4  ; Sinhala # No  [20] SINHALA ARCHAIC DIGIT ONE..SINHALA ARCHAIC NUMBER ONE THOUSAND\n\n# Total code points: 111\n```\n\n----------------------------------------\n\nTITLE: Unicode Hebrew Letter Definitions\nDESCRIPTION: Defines ranges of Hebrew letters and their variations with the Hebrew_Letter word break property, including basic letters, ligatures, and letters with diacritical marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n05D0..05EA    ; Hebrew_Letter # Lo  [27] HEBREW LETTER ALEF..HEBREW LETTER TAV\n05EF..05F2    ; Hebrew_Letter # Lo   [4] HEBREW YOD TRIANGLE..HEBREW LIGATURE YIDDISH DOUBLE YOD\nFB1D          ; Hebrew_Letter # Lo       HEBREW LETTER YOD WITH HIRIQ\nFB1F..FB28    ; Hebrew_Letter # Lo  [10] HEBREW LIGATURE YIDDISH YOD YOD PATAH..HEBREW LETTER WIDE TAV\nFB2A..FB36    ; Hebrew_Letter # Lo  [13] HEBREW LETTER SHIN WITH SHIN DOT..HEBREW LETTER ZAYIN WITH DAGESH\nFB38..FB3C    ; Hebrew_Letter # Lo   [5] HEBREW LETTER TET WITH DAGESH..HEBREW LETTER LAMED WITH DAGESH\nFB3E          ; Hebrew_Letter # Lo       HEBREW LETTER MEM WITH DAGESH\nFB40..FB41    ; Hebrew_Letter # Lo   [2] HEBREW LETTER NUN WITH DAGESH..HEBREW LETTER SAMEKH WITH DAGESH\nFB43..FB44    ; Hebrew_Letter # Lo   [2] HEBREW LETTER FINAL PE WITH DAGESH..HEBREW LETTER PE WITH DAGESH\nFB46..FB4F    ; Hebrew_Letter # Lo  [10] HEBREW LETTER TSADI WITH DAGESH..HEBREW LIGATURE ALEF LAMED\n```\n\n----------------------------------------\n\nTITLE: Including Unit Test Directories in Swift Project using CMake\nDESCRIPTION: This CMake script configures which unit test directories to include in the Swift build. It conditionally adds test subdirectories based on build flags such as SWIFT_INCLUDE_TOOLS and SWIFT_BUILD_SDK_OVERLAY, with special handling for runtime tests that depend on StdlibUnittest symbols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude(AddSwiftUnittests)\n\nif(SWIFT_INCLUDE_TOOLS)\n  # We can't link C++ unit tests unless we build the tools.\n\n  add_subdirectory(AST)\n  add_subdirectory(Basic)\n  add_subdirectory(ClangImporter)\n  add_subdirectory(DependencyScan)\n  add_subdirectory(Frontend)\n  add_subdirectory(FrontendTool)\n  add_subdirectory(Localization)\n  add_subdirectory(IDE)\n  add_subdirectory(Parse)\n  add_subdirectory(Remangler)\n  add_subdirectory(Sema)\n  add_subdirectory(SIL)\n  add_subdirectory(SILOptimizer)\n  add_subdirectory(SwiftDemangle)\n\n  add_subdirectory(Threading)\n\n  if(SWIFT_BUILD_SDK_OVERLAY)\n    # Runtime tests depend on symbols in StdlibUnittest.\n    #\n    # FIXME: cross-compile runtime unittests.\n    add_subdirectory(runtime)\n    add_subdirectory(Reflection)\n  endif()\n\n  if(SWIFT_BUILD_SOURCEKIT)\n    add_subdirectory(SourceKit)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Benchmark Compilation Loop\nDESCRIPTION: Iterates through available platforms and compiles the benchmark suite for each platform using swift_benchmark_compile function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(platform ${platforms})\n  swift_benchmark_compile(PLATFORM ${platform})\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Unicode SpacingMark Classifications\nDESCRIPTION: Defines code point ranges for characters classified as SpacingMark (Mc) across various scripts including Takri, Ahom, Dogra, Dives Akuru, and others.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_8\n\nLANGUAGE: unicode\nCODE:\n```\n116AC         ; SpacingMark # Mc       TAKRI SIGN VISARGA\n116AE..116AF  ; SpacingMark # Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II\n1171E         ; SpacingMark # Mc       AHOM CONSONANT SIGN MEDIAL RA\n11726         ; SpacingMark # Mc       AHOM VOWEL SIGN E\n1182C..1182E  ; SpacingMark # Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II\n```\n\n----------------------------------------\n\nTITLE: Configuring SourceKit Include Paths and Adding Subdirectories in CMake\nDESCRIPTION: This CMake script sets up the SourceKit include directory and recursively adds all subdirectories that contain a CMakeLists.txt file. It first adds the SourceKit include directory to the include path with BEFORE priority, then iterates through all entries in the current directory and adds those that are directories with a CMakeLists.txt file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SourceKit/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(BEFORE\n  ${SWIFT_SOURCE_DIR}/tools/SourceKit/include\n)\n\nfile(GLOB entries *)\nforeach(entry ${entries})\n  if(IS_DIRECTORY ${entry} AND EXISTS ${entry}/CMakeLists.txt)\n    add_subdirectory(${entry})\n  endif()\nendforeach(entry)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Index Static Library with CMake\nDESCRIPTION: Defines a static library target 'swiftIndex' with its source files and links it with required Swift dependencies. The library includes core indexing functionality through multiple source files and depends on swiftAST and swiftIDE libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Index/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftIndex STATIC\n  Index.cpp\n  IndexDataConsumer.cpp\n  IndexRecord.cpp\n  IndexSymbol.cpp)\ntarget_link_libraries(swiftIndex PRIVATE\n  swiftAST\n  swiftIDE)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Thaana Script\nDESCRIPTION: A listing of Unicode code point ranges for the Thaana script used primarily for writing the Dhivehi language. The table shows the range of code points, their associated script, category, count, and descriptions for all Thaana characters including letters and diacritical marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n0780..07A5    ; Thaana # Lo  [38] THAANA LETTER HAA..THAANA LETTER WAAVU\n07A6..07B0    ; Thaana # Mn  [11] THAANA ABAFILI..THAANA SUKUN\n07B1          ; Thaana # Lo       THAANA LETTER NAA\n\n# Total code points: 50\n```\n\n----------------------------------------\n\nTITLE: Defining Case Mappings for Greek Characters with Ypogegrammeni\nDESCRIPTION: This snippet defines case mappings for Greek characters with ypogegrammeni, including their lowercase, titlecase, and uppercase forms. It covers characters for alpha, eta, and omega with various diacritical marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_5\n\nLANGUAGE: Unicode\nCODE:\n```\n1F80; 1F80; 1F88; 1F08 0399; # GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI\n1F81; 1F81; 1F89; 1F09 0399; # GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI\n1F82; 1F82; 1F8A; 1F0A 0399; # GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI\n# ... (additional lines omitted for brevity)\n1FAE; 1FA6; 1FAE; 1F6E 0399; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1FAF; 1FA7; 1FAF; 1F6F 0399; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Format Category Code Points\nDESCRIPTION: Lists Unicode code points classified as 'Format', which includes various control characters and formatting marks like directional controls, joiners, and special separators. All are of type 'Cf' (Other, Format).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode-data\nCODE:\n```\n00AD          ; Format # Cf       SOFT HYPHEN\n061C          ; Format # Cf       ARABIC LETTER MARK\n180E          ; Format # Cf       MONGOLIAN VOWEL SEPARATOR\n200E..200F    ; Format # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n202A..202E    ; Format # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n2060..2064    ; Format # Cf   [5] WORD JOINER..INVISIBLE PLUS\n2066..206F    ; Format # Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES\nFEFF          ; Format # Cf       ZERO WIDTH NO-BREAK SPACE\nFFF9..FFFB    ; Format # Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR\n13430..1343F  ; Format # Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE\n1BCA0..1BCA3  ; Format # Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP\n1D173..1D17A  ; Format # Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE\nE0001         ; Format # Cf       LANGUAGE TAG\n\n# Total code points: 58\n```\n\n----------------------------------------\n\nTITLE: Move-Only Wrapper to Copyable Address SIL Instruction Definition\nDESCRIPTION: Defines the syntax for moveonlywrapper_to_copyable_addr instruction that converts *@moveOnly T to *T at the address level.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_205\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'moveonlywrapper_to_copyable_addr'\n```\n\n----------------------------------------\n\nTITLE: Configuring swiftAndroid Library in CMake\nDESCRIPTION: Sets up the swiftAndroid library with its source files, module name, and compilation definitions. It also links against SwiftAndroid and swiftCore libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/Android/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftAndroid\n  tgmath.swift\n  Android.swift\n  Platform.swift\n  POSIXError.swift\n  TiocConstants.swift)\nset_target_properties(swiftAndroid PROPERTIES\n  Swift_MODULE_NAME Android)\ntarget_compile_definitions(swiftAndroid PRIVATE\n  $<$<BOOL:${SwiftOverlay_ENABLE_REFLECTION}>:SWIFT_ENABLE_REFLECTION>)\ntarget_link_libraries(swiftAndroid PRIVATE\n  SwiftAndroid\n  swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Lao Script\nDESCRIPTION: This code block defines the Unicode code point ranges for the Lao script. It lists character ranges with their Unicode categories and character names, covering letters, vowel signs, tone marks, and digits. The block contains a total of 83 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_16\n\nLANGUAGE: Unicode\nCODE:\n```\n0E81..0E82    ; Lao # Lo   [2] LAO LETTER KO..LAO LETTER KHO SUNG\n0E84          ; Lao # Lo       LAO LETTER KHO TAM\n0E86..0E8A    ; Lao # Lo   [5] LAO LETTER PALI GHA..LAO LETTER SO TAM\n0E8C..0EA3    ; Lao # Lo  [24] LAO LETTER PALI JHA..LAO LETTER LO LING\n0EA5          ; Lao # Lo       LAO LETTER LO LOOT\n0EA7..0EB0    ; Lao # Lo  [10] LAO LETTER WO..LAO VOWEL SIGN A\n0EB1          ; Lao # Mn       LAO VOWEL SIGN MAI KAN\n0EB2..0EB3    ; Lao # Lo   [2] LAO VOWEL SIGN AA..LAO VOWEL SIGN AM\n0EB4..0EBC    ; Lao # Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO\n0EBD          ; Lao # Lo       LAO SEMIVOWEL SIGN NYO\n0EC0..0EC4    ; Lao # Lo   [5] LAO VOWEL SIGN E..LAO VOWEL SIGN AI\n0EC6          ; Lao # Lm       LAO KO LA\n0EC8..0ECE    ; Lao # Mn   [7] LAO TONE MAI EK..LAO YAMAKKAN\n0ED0..0ED9    ; Lao # Nd  [10] LAO DIGIT ZERO..LAO DIGIT NINE\n0EDC..0EDF    ; Lao # Lo   [4] LAO HO NO..LAO LETTER KHMU NYO\n\n# Total code points: 83\n```\n\n----------------------------------------\n\nTITLE: Including API and Service Subdirectories in CMake Build\nDESCRIPTION: This snippet configures CMake to include the API and Service subdirectories in the build process. This tells the build system to look for CMakeLists.txt files in these directories and process them as part of the overall build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/lib/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(API)\nadd_subdirectory(Service)\n```\n\n----------------------------------------\n\nTITLE: Adding Objective-C Interoperability Sources in CMake\nDESCRIPTION: Conditionally adds Objective-C related source files to the swiftStdlibStubs target when Objective-C interoperability is enabled. Uses gyb template expansion to generate SwiftNativeNSXXXBase.mm from a gyb template.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/stubs/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SwiftCore_ENABLE_OBJC_INTEROP)\n  gyb_expand(SwiftNativeNSXXXBase.mm.gyb \"SwiftNativeNSXXXBase.mm\")\n  target_sources(swiftStdlibStubs PRIVATE\n    # ObjC files\n    Availability.mm\n    FoundationHelpers.mm\n    OptionalBridgingHelper.mm\n    Reflection.mm\n    SwiftNativeNSObject.mm\n    SwiftNativeNSXXXBaseARC.m\n    \"${CMAKE_CURRENT_BINARY_DIR}/SwiftNativeNSXXXBase.mm\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Swift Core Installation and Package Configuration\nDESCRIPTION: Configures CMake package exports, targets, and version information for installation of Swift Core components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\nexport(EXPORT SwiftCoreTargets\n  FILE \"cmake/SwiftCore/SwiftCoreTargets.cmake\")\ninstall(EXPORT SwiftCoreTargets\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/SwiftCore\"\n  FILE \"SwiftCoreTargets.cmake\"\n  COMPONENT SwiftCore_cmake)\ninclude(CMakePackageConfigHelpers)\nconfigure_package_config_file(\"${CMAKE_CURRENT_SOURCE_DIR}/cmake/interface/SwiftCoreConfig.cmake.in\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake/SwiftCore/SwiftCoreConfig.cmake\"\n  INSTALL_DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/SwiftCore\")\nwrite_basic_package_version_file(\"${CMAKE_CURRENT_BINARY_DIR}/cmake/SwiftCore/SwiftCoreConfigVersion.cmake\"\n  VERSION \"${PROJECT_VERSION}\"\n  COMPATIBILITY ExactVersion)\ninstall(FILES\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake/SwiftCore/SwiftCoreConfig.cmake\"\n  \"${CMAKE_CURRENT_BINARY_DIR}/cmake/SwiftCore/SwiftCoreConfigVersion.cmake\"\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/SwiftCore\")\n```\n\n----------------------------------------\n\nTITLE: Creating Value Type Wrapper Example\nDESCRIPTION: Example showing how to create a value type wrapper around a class without using val keyword\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Clonable.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nstruct MyClassVal {\n    var [clone] value : MyClass\n\n    constructor(x : A, y : B) {\n       value = new MyClass(x, y)\n    }\n\n    func someFunction(_ z : C) -> D {\n      return value.someFunction(z)\n    }\n\n    // ...etc...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Indic_Conjunct_Break=Consonant Code Points\nDESCRIPTION: List of Unicode code points with the Indic_Conjunct_Break=Consonant property. These 240 code points represent consonants in various Indic scripts that participate in conjunct formations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_47\n\nLANGUAGE: unicode\nCODE:\n```\n# Indic_Conjunct_Break=Consonant\n\n0915..0939    ; InCB; Consonant\n0958..095F    ; InCB; Consonant\n0978..097F    ; InCB; Consonant\n0995..09A8    ; InCB; Consonant\n09AA..09B0    ; InCB; Consonant\n09B2          ; InCB; Consonant\n09B6..09B9    ; InCB; Consonant\n09DC..09DD    ; InCB; Consonant\n09DF          ; InCB; Consonant\n09F0..09F1    ; InCB; Consonant\n0A95..0AA8    ; InCB; Consonant\n0AAA..0AB0    ; InCB; Consonant\n0AB2..0AB3    ; InCB; Consonant\n0AB5..0AB9    ; InCB; Consonant\n0AF9          ; InCB; Consonant\n0B15..0B28    ; InCB; Consonant\n0B2A..0B30    ; InCB; Consonant\n0B32..0B33    ; InCB; Consonant\n0B35..0B39    ; InCB; Consonant\n0B5C..0B5D    ; InCB; Consonant\n0B5F          ; InCB; Consonant\n0B71          ; InCB; Consonant\n0C15..0C28    ; InCB; Consonant\n0C2A..0C39    ; InCB; Consonant\n0C58..0C5A    ; InCB; Consonant\n0D15..0D3A    ; InCB; Consonant\n```\n\n----------------------------------------\n\nTITLE: Specifying Source Files for Swift SIL Optimizer in CMake\nDESCRIPTION: This CMake command adds multiple C++ source files to the swiftSILOptimizer target. These files implement different optimization passes and analyses for Swift's SIL, focusing on ownership, borrowing, and Automatic Reference Counting (ARC) optimizations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/SemanticARC/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  SemanticARCOpts.cpp\n  OwnershipLiveRange.cpp\n  BorrowScopeOpts.cpp\n  CopyValueOpts.cpp\n  OwnedToGuaranteedPhiOpt.cpp\n  Context.cpp\n  SemanticARCOptVisitor.cpp\n  OwnershipConversionElimination.cpp\n  RedundantMoveValueElimination.cpp\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for N'Ko Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the N'Ko script, including digits, letters, combining marks, and symbols. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_43\n\nLANGUAGE: Unicode\nCODE:\n```\n07C0..07C9    ; Nko # Nd  [10] NKO DIGIT ZERO..NKO DIGIT NINE\n07CA..07EA    ; Nko # Lo  [33] NKO LETTER A..NKO LETTER JONA RA\n07EB..07F3    ; Nko # Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE\n07F4..07F5    ; Nko # Lm   [2] NKO HIGH TONE APOSTROPHE..NKO LOW TONE APOSTROPHE\n07F6          ; Nko # So       NKO SYMBOL OO DENNEN\n07F7..07F9    ; Nko # Po   [3] NKO SYMBOL GBAKURUNEN..NKO EXCLAMATION MARK\n07FA          ; Nko # Lm       NKO LAJANYALAN\n07FD          ; Nko # Mn       NKO DANTAYALAN\n07FE..07FF    ; Nko # Sc   [2] NKO DOROME SIGN..NKO TAMAN SIGN\n```\n\n----------------------------------------\n\nTITLE: Unicode 3.1.0 Code Point Assignments\nDESCRIPTION: Lists Unicode code points and their descriptions that were newly assigned in Unicode 3.1.0 (March 2001). Includes various symbol ranges and their descriptions with a total of 44,978 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n03F4..03F5    ; 3.1 #   [2] GREEK CAPITAL THETA SYMBOL..GREEK LUNATE EPSILON SYMBOL\nFDD0..FDEF    ; 3.1 #  [32] <noncharacter-FDD0>..<noncharacter-FDEF>\n10300..1031E  ; 3.1 #  [31] OLD ITALIC LETTER A..OLD ITALIC LETTER UU\n[...truncated for brevity...]\nE0001         ; 3.1 #       LANGUAGE TAG\nE0020..E007F  ; 3.1 #  [96] TAG SPACE..CANCEL TAG\n```\n\n----------------------------------------\n\nTITLE: Coverage Database Touch Target\nDESCRIPTION: Creates custom target for touching covering tests when coverage database is specified.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT \"${COVERAGE_DB}\" STREQUAL \"\")\n  add_custom_target(\"touch-covering-tests\"\n      COMMAND \"${SWIFT_SOURCE_DIR}/utils/coverage/coverage-touch-tests\" \"--swift-dir\" \"${SWIFT_SOURCE_DIR}\" \"--coverage-db\" \"${COVERAGE_DB}\"\n      COMMENT \"Touching covering tests\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Hangul Vowel (V) Unicode Ranges\nDESCRIPTION: This snippet defines Unicode ranges for Hangul vowels (V). It includes two ranges: one for the main Hangul Jungseong block and another for additional Hangul Jungseong characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_9\n\nLANGUAGE: Unicode\nCODE:\n```\n1160..11A7    ; V # Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE\nD7B0..D7C6    ; V # Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E\n\n# Total code points: 95\n```\n\n----------------------------------------\n\nTITLE: Importing Swift Frameworks for Testing, 3D Modeling, and Image Processing\nDESCRIPTION: This code snippet imports three key Swift frameworks: XCTest for unit testing, SceneKit.ModelIO for 3D asset importing and exporting, and CoreImage.CIFilterBuiltins for accessing built-in Core Image filters. These imports provide access to essential functionalities for testing, 3D modeling, and image processing in a Swift application.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-clang-modules-appletvos.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nXCTest\nSceneKit.ModelIO\nCoreImage.CIFilterBuiltins\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Masaram Gondi Script\nDESCRIPTION: This snippet defines the Unicode block for the Masaram Gondi script, including letters, vowel signs, and digits.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_98\n\nLANGUAGE: Unicode\nCODE:\n```\n11D00..11D06  ; Masaram_Gondi # Lo   [7] MASARAM GONDI LETTER A..MASARAM GONDI LETTER E\n11D08..11D09  ; Masaram_Gondi # Lo   [2] MASARAM GONDI LETTER AI..MASARAM GONDI LETTER O\n11D0B..11D30  ; Masaram_Gondi # Lo  [38] MASARAM GONDI LETTER AU..MASARAM GONDI LETTER TRA\n11D31..11D36  ; Masaram_Gondi # Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R\n11D3A         ; Masaram_Gondi # Mn       MASARAM GONDI VOWEL SIGN E\n11D3C..11D3D  ; Masaram_Gondi # Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O\n11D3F..11D45  ; Masaram_Gondi # Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA\n11D46         ; Masaram_Gondi # Lo       MASARAM GONDI REPHA\n11D47         ; Masaram_Gondi # Mn       MASARAM GONDI RA-KARA\n11D50..11D59  ; Masaram_Gondi # Nd  [10] MASARAM GONDI DIGIT ZERO..MASARAM GONDI DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Omit Instruction Format\nDESCRIPTION: Bit layout for the omit instruction used to indicate skipped frames in the backtrace.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompactBacktraceFormat.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n   7   6   5   4   3   2   1   0\n ┌───────┬───┬───────────────────┐\n │ 0   1 │ x │ count             │ omit\n └───────┴───┴───────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Defining Prepend Characters for Grapheme Cluster Break in Unicode\nDESCRIPTION: This snippet defines Unicode code points with the Prepend property for Grapheme_Cluster_Break. It includes various Arabic, Syriac, Malayalam, and other script-specific characters that act as prefixes in grapheme clusters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n0600..0605    ; Prepend # Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n06DD          ; Prepend # Cf       ARABIC END OF AYAH\n070F          ; Prepend # Cf       SYRIAC ABBREVIATION MARK\n0890..0891    ; Prepend # Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE\n08E2          ; Prepend # Cf       ARABIC DISPUTED END OF AYAH\n0D4E          ; Prepend # Lo       MALAYALAM LETTER DOT REPH\n110BD         ; Prepend # Cf       KAITHI NUMBER SIGN\n110CD         ; Prepend # Cf       KAITHI NUMBER SIGN ABOVE\n111C2..111C3  ; Prepend # Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA\n113D1         ; Prepend # Lo       TULU-TIGALARI REPHA\n1193F         ; Prepend # Lo       DIVES AKURU PREFIXED NASAL SIGN\n11941         ; Prepend # Lo       DIVES AKURU INITIAL RA\n11A3A         ; Prepend # Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA\n11A84..11A89  ; Prepend # Lo   [6] SOYOMBO SIGN JIHVAMULIYA..SOYOMBO CLUSTER-INITIAL LETTER SA\n11D46         ; Prepend # Lo       MASARAM GONDI REPHA\n11F02         ; Prepend # Lo       KAWI SIGN REPHA\n```\n\n----------------------------------------\n\nTITLE: Installing Swift C++ Interop Support Files in CMake\nDESCRIPTION: This snippet sets up installation rules for the C++ interop support header, modulemap files, and related components. It uses the swift_install_in_component function to specify the destination and component for each file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/SwiftBridging/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nswift_install_in_component(FILES\n    \"${CMAKE_CURRENT_SOURCE_DIR}/swift/bridging\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/swift/bridging.modulemap\"\n    DESTINATION \"include/swift\"\n    COMPONENT compiler)\nswift_install_in_component(FILES\n    \"${CMAKE_CURRENT_SOURCE_DIR}/module.modulemap\"\n    DESTINATION \"include\"\n    COMPONENT compiler)\n```\n\n----------------------------------------\n\nTITLE: Generating Swift Features Configuration for Lit\nDESCRIPTION: Creates a Swift features configuration file for Lit by preprocessing a template using the C compiler. The function handles both MSVC and GCC-like compiler command variations and executes the generation during both build and configuration time.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(swift_generate_lit_swift_features_cfg output_path)\n  if(SWIFT_COMPILER_IS_MSVC_LIKE)\n    set(test_lit_swift_features_cmd\n      \"${CMAKE_C_COMPILER}\" \"/P\" \"/EP\" \"/I\" \"${SWIFT_MAIN_INCLUDE_DIR}\" \"/TC\"\n      \"/Fi<<<OUTPUT_FILE>>>\")\n  else()\n    set(test_lit_swift_features_cmd\n      \"${CMAKE_C_COMPILER}\" \"-E\" \"-P\" \"-I${SWIFT_MAIN_INCLUDE_DIR}\" \"-x\" \"c\" \"-o\"\n      \"<<<OUTPUT_FILE>>>\")\n  endif()\n\n  list(\n    TRANSFORM test_lit_swift_features_cmd\n    REPLACE \"<<<OUTPUT_FILE>>>\" \"${output_path}\")\n  add_custom_command(\n    OUTPUT \"${output_path}\"\n    COMMAND\n      ${test_lit_swift_features_cmd}\n      \"${CMAKE_CURRENT_SOURCE_DIR}/lit.swift-features.cfg.inc\"\n    DEPENDS\n      \"lit.swift-features.cfg.inc\"\n      \"${SWIFT_MAIN_INCLUDE_DIR}/swift/Basic/Features.def\"\n  )\n\n  # Execute during generation once, so one can run Lit without rebuilding the\n  # test suite dependencies first.\n  execute_process(\n    COMMAND\n      ${test_lit_swift_features_cmd}\n      \"${CMAKE_CURRENT_SOURCE_DIR}/lit.swift-features.cfg.inc\"\n  )\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Swift Builtin Float Library in CMake\nDESCRIPTION: Sets up the build configuration for embedded versions of the Swift Builtin float library. It creates targets for each specified architecture and module, configuring them for embedded use with specific compilation flags and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/ClangOverlays/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)\n    add_custom_target(embedded-builtin_float)\n    add_dependencies(embedded-libraries embedded-builtin_float)\n  \n    foreach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})\n      string(REGEX REPLACE \"[ \\t]+\" \";\" list \"${entry}\")\n      list(GET list 0 arch)\n      list(GET list 1 mod)\n      list(GET list 2 triple)\n  \n      set(SWIFT_SDK_embedded_ARCH_${arch}_MODULE \"${mod}\")\n      set(SWIFT_SDK_embedded_LIB_SUBDIR \"embedded\")\n      set(SWIFT_SDK_embedded_ARCH_${arch}_TRIPLE \"${triple}\")\n      set(SWIFT_SDK_embedded_PATH ${SWIFT_SDK_OSX_PATH})\n      set(SWIFT_SDK_embedded_ARCH_${arch}_PATH ${SWIFT_SDK_OSX_PATH})\n      set(SWIFT_SDK_embedded_USE_ISYSROOT TRUE)\n      add_swift_target_library_single(\n        embedded-builtin_float-${mod}\n        swift_Builtin_float\n        ONLY_SWIFTMODULE\n        IS_FRAGILE\n        \n        ${BUILTIN_FLOAT_SOURCES}\n        GYB_SOURCES\n          ${BUILTIN_FLOAT_GYB_SOURCES}\n  \n        SWIFT_COMPILE_FLAGS\n          ${BUILTIN_FLOAT_SWIFT_FLAGS}\n          -Xcc -ffreestanding -enable-experimental-feature Embedded\n  \n        MODULE_DIR \"${CMAKE_BINARY_DIR}/lib/swift/embedded\"\n        SDK \"embedded\"\n        ARCHITECTURE \"${arch}\"\n        DEPENDS embedded-stdlib-${mod}\n        INSTALL_IN_COMPONENT stdlib\n        )\n      add_dependencies(embedded-builtin_float embedded-builtin_float-${mod})\n    endforeach()\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Spacing Mark Code Points\nDESCRIPTION: A comprehensive reference list of Unicode code points categorized as Spacing Marks (Mc). Each line includes the code point or range in hexadecimal format, followed by a comment describing the character name. The list is organized by script.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_15\n\nLANGUAGE: unicode\nCODE:\n```\n# General_Category=Spacing_Mark\n\n0903          ; Mc #       DEVANAGARI SIGN VISARGA\n093B          ; Mc #       DEVANAGARI VOWEL SIGN OOE\n093E..0940    ; Mc #   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II\n0949..094C    ; Mc #   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU\n094E..094F    ; Mc #   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW\n0982..0983    ; Mc #   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA\n09BE..09C0    ; Mc #   [3] BENGALI VOWEL SIGN AA..BENGALI VOWEL SIGN II\n09C7..09C8    ; Mc #   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI\n09CB..09CC    ; Mc #   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU\n09D7          ; Mc #       BENGALI AU LENGTH MARK\n0A03          ; Mc #       GURMUKHI SIGN VISARGA\n0A3E..0A40    ; Mc #   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II\n0A83          ; Mc #       GUJARATI SIGN VISARGA\n0ABE..0AC0    ; Mc #   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II\n0AC9          ; Mc #       GUJARATI VOWEL SIGN CANDRA O\n0ACB..0ACC    ; Mc #   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU\n0B02..0B03    ; Mc #   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA\n0B3E          ; Mc #       ORIYA VOWEL SIGN AA\n0B40          ; Mc #       ORIYA VOWEL SIGN II\n0B47..0B48    ; Mc #   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI\n0B4B..0B4C    ; Mc #   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU\n0B57          ; Mc #       ORIYA AU LENGTH MARK\n0BBE..0BBF    ; Mc #   [2] TAMIL VOWEL SIGN AA..TAMIL VOWEL SIGN I\n0BC1..0BC2    ; Mc #   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU\n0BC6..0BC8    ; Mc #   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI\n0BCA..0BCC    ; Mc #   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU\n0BD7          ; Mc #       TAMIL AU LENGTH MARK\n0C01..0C03    ; Mc #   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA\n0C41..0C44    ; Mc #   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR\n0C82..0C83    ; Mc #   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA\n0CBE          ; Mc #       KANNADA VOWEL SIGN AA\n0CC0..0CC4    ; Mc #   [5] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN VOCALIC RR\n0CC7..0CC8    ; Mc #   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI\n0CCA..0CCB    ; Mc #   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO\n0CD5..0CD6    ; Mc #   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK\n0CF3          ; Mc #       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT\n0D02..0D03    ; Mc #   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA\n0D3E..0D40    ; Mc #   [3] MALAYALAM VOWEL SIGN AA..MALAYALAM VOWEL SIGN II\n0D46..0D48    ; Mc #   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI\n0D4A..0D4C    ; Mc #   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU\n0D57          ; Mc #       MALAYALAM AU LENGTH MARK\n0D82..0D83    ; Mc #   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA\n0DCF..0DD1    ; Mc #   [3] SINHALA VOWEL SIGN AELA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA\n0DD8..0DDF    ; Mc #   [8] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN GAYANUKITTA\n0DF2..0DF3    ; Mc #   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA\n0F3E..0F3F    ; Mc #   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES\n0F7F          ; Mc #       TIBETAN SIGN RNAM BCAD\n102B..102C    ; Mc #   [2] MYANMAR VOWEL SIGN TALL AA..MYANMAR VOWEL SIGN AA\n1031          ; Mc #       MYANMAR VOWEL SIGN E\n1038          ; Mc #       MYANMAR SIGN VISARGA\n103B..103C    ; Mc #   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA\n1056..1057    ; Mc #   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR\n1062..1064    ; Mc #   [3] MYANMAR VOWEL SIGN SGAW KAREN EU..MYANMAR TONE MARK SGAW KAREN KE PHO\n1067..106D    ; Mc #   [7] MYANMAR VOWEL SIGN WESTERN PWO KAREN EU..MYANMAR SIGN WESTERN PWO KAREN TONE-5\n1083..1084    ; Mc #   [2] MYANMAR VOWEL SIGN SHAN AA..MYANMAR VOWEL SIGN SHAN E\n1087..108C    ; Mc #   [6] MYANMAR SIGN SHAN TONE-2..MYANMAR SIGN SHAN COUNCIL TONE-3\n108F          ; Mc #       MYANMAR SIGN RUMAI PALAUNG TONE-5\n109A..109C    ; Mc #   [3] MYANMAR SIGN KHAMTI TONE-1..MYANMAR VOWEL SIGN AITON A\n1715          ; Mc #       TAGALOG SIGN PAMUDPOD\n1734          ; Mc #       HANUNOO SIGN PAMUDPOD\n17B6          ; Mc #       KHMER VOWEL SIGN AA\n17BE..17C5    ; Mc #   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU\n17C7..17C8    ; Mc #   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU\n1923..1926    ; Mc #   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU\n1929..192B    ; Mc #   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA\n1930..1931    ; Mc #   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA\n1933..1938    ; Mc #   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA\n1A19..1A1A    ; Mc #   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O\n1A55          ; Mc #       TAI THAM CONSONANT SIGN MEDIAL RA\n1A57          ; Mc #       TAI THAM CONSONANT SIGN LA TANG LAI\n1A61          ; Mc #       TAI THAM VOWEL SIGN A\n1A63..1A64    ; Mc #   [2] TAI THAM VOWEL SIGN AA..TAI THAM VOWEL SIGN TALL AA\n1A6D..1A72    ; Mc #   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI\n1B04          ; Mc #       BALINESE SIGN BISAH\n1B35          ; Mc #       BALINESE VOWEL SIGN TEDUNG\n1B3B          ; Mc #       BALINESE VOWEL SIGN RA REPA TEDUNG\n1B3D..1B41    ; Mc #   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG\n1B43..1B44    ; Mc #   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG\n1B82          ; Mc #       SUNDANESE SIGN PANGWISAD\n1BA1          ; Mc #       SUNDANESE CONSONANT SIGN PAMINGKAL\n1BA6..1BA7    ; Mc #   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG\n1BAA          ; Mc #       SUNDANESE SIGN PAMAAEH\n1BE7          ; Mc #       BATAK VOWEL SIGN E\n1BEA..1BEC    ; Mc #   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O\n1BEE          ; Mc #       BATAK VOWEL SIGN U\n1BF2..1BF3    ; Mc #   [2] BATAK PANGOLAT..BATAK PANONGONAN\n1C24..1C2B    ; Mc #   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU\n1C34..1C35    ; Mc #   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG\n1CE1          ; Mc #       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA\n1CF7          ; Mc #       VEDIC SIGN ATIKRAMA\n302E..302F    ; Mc #   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK\nA823..A824    ; Mc #   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I\nA827          ; Mc #       SYLOTI NAGRI VOWEL SIGN OO\nA880..A881    ; Mc #   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA\nA8B4..A8C3    ; Mc #  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU\nA952..A953    ; Mc #   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA\nA983          ; Mc #       JAVANESE SIGN WIGNYAN\nA9B4..A9B5    ; Mc #   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG\nA9BA..A9BB    ; Mc #   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE\nA9BE..A9C0    ; Mc #   [3] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE PANGKON\nAA2F..AA30    ; Mc #   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI\nAA33..AA34    ; Mc #   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA\nAA4D          ; Mc #       CHAM CONSONANT SIGN FINAL H\nAA7B          ; Mc #       MYANMAR SIGN PAO KAREN TONE\nAA7D          ; Mc #       MYANMAR SIGN TAI LAING TONE-5\nAAEB          ; Mc #       MEETEI MAYEK VOWEL SIGN II\nAAEE..AAEF    ; Mc #   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU\nAAF5          ; Mc #       MEETEI MAYEK VOWEL SIGN VISARGA\nABE3..ABE4    ; Mc #   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP\nABE6..ABE7    ; Mc #   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP\nABE9..ABEA    ; Mc #   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG\nABEC          ; Mc #       MEETEI MAYEK LUM IYEK\n11000         ; Mc #       BRAHMI SIGN CANDRABINDU\n11002         ; Mc #       BRAHMI SIGN VISARGA\n11082         ; Mc #       KAITHI SIGN VISARGA\n110B0..110B2  ; Mc #   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II\n110B7..110B8  ; Mc #   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU\n1112C         ; Mc #       CHAKMA VOWEL SIGN E\n11145..11146  ; Mc #   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI\n11182         ; Mc #       SHARADA SIGN VISARGA\n111B3..111B5  ; Mc #   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II\n111BF..111C0  ; Mc #   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA\n111CE         ; Mc #       SHARADA VOWEL SIGN PRISHTHAMATRA E\n1122C..1122E  ; Mc #   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II\n11232..11233  ; Mc #   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU\n11235         ; Mc #       KHOJKI SIGN VIRAMA\n112E0..112E2  ; Mc #   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II\n11302..11303  ; Mc #   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA\n1133E..1133F  ; Mc #   [2] GRANTHA VOWEL SIGN AA..GRANTHA VOWEL SIGN I\n11341..11344  ; Mc #   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR\n11347..11348  ; Mc #   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI\n1134B..1134D  ; Mc #   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA\n11357         ; Mc #       GRANTHA AU LENGTH MARK\n11362..11363  ; Mc #   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL\n113B8..113BA  ; Mc #   [3] TULU-TIGALARI VOWEL SIGN AA..TULU-TIGALARI VOWEL SIGN II\n113C2         ; Mc #       TULU-TIGALARI VOWEL SIGN EE\n113C5         ; Mc #       TULU-TIGALARI VOWEL SIGN AI\n113C7..113CA  ; Mc #   [4] TULU-TIGALARI VOWEL SIGN OO..TULU-TIGALARI SIGN CANDRA ANUNASIKA\n113CC..113CD  ; Mc #   [2] TULU-TIGALARI SIGN ANUSVARA..TULU-TIGALARI SIGN VISARGA\n113CF         ; Mc #       TULU-TIGALARI SIGN LOOPED VIRAMA\n11435..11437  ; Mc #   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II\n11440..11441  ; Mc #   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU\n11445         ; Mc #       NEWA SIGN VISARGA\n114B0..114B2  ; Mc #   [3] TIRHUTA VOWEL SIGN AA..TIRHUTA VOWEL SIGN II\n114B9         ; Mc #       TIRHUTA VOWEL SIGN E\n114BB..114BE  ; Mc #   [4] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN AU\n114C1         ; Mc #       TIRHUTA SIGN VISARGA\n```\n\n----------------------------------------\n\nTITLE: Hangul Syllable Unicode Code Point Mapping\nDESCRIPTION: Mapping table defining Unicode code points for Hangul syllables. Each entry contains a hexadecimal code point, category designation (LV # Lo), and the corresponding Hangul syllable name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_12\n\nLANGUAGE: unicode\nCODE:\n```\nC18C          ; LV # Lo       HANGUL SYLLABLE SO\nC1A8          ; LV # Lo       HANGUL SYLLABLE SWA\nC1C4          ; LV # Lo       HANGUL SYLLABLE SWAE\nC1E0          ; LV # Lo       HANGUL SYLLABLE SOE\nC1FC          ; LV # Lo       HANGUL SYLLABLE SYO\n[...truncated for length...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift LLVM Passes Static Library in CMake\nDESCRIPTION: Defines a static library 'swiftLLVMPasses' containing various Swift-specific LLVM optimization passes and analysis components. Links against LLVM components and swiftDemangling library, and sets up Swift LLVM availability.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/LLVMPasses/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftLLVMPasses STATIC\n  LLVMSwiftAA.cpp\n  LLVMSwiftRCIdentity.cpp\n  LLVMARCOpts.cpp\n  LLVMARCContract.cpp\n  LLVMInlineTree.cpp\n  LLVMMergeFunctions.cpp\n  LLVMEmitAsyncEntryReturnMetadata.cpp\n\n  LLVM_LINK_COMPONENTS\n  analysis\n  targetparser\n  )\ntarget_link_libraries(swiftLLVMPasses PRIVATE\n  swiftDemangling)\n\nset_swift_llvm_is_available(swiftLLVMPasses)\n```\n\n----------------------------------------\n\nTITLE: Adding Sources Subdirectory in CMake\nDESCRIPTION: This command adds the `Sources` subdirectory to the build. This directory presumably contains the C/CXX source code for the Swift compiler components being built during bootstrapping.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Sources)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Lycian Script\nDESCRIPTION: This snippet defines the Unicode character range for the Lycian script, including letters. It specifies the code points, general category, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_51\n\nLANGUAGE: Unicode\nCODE:\n```\n10280..1029C  ; Lycian # Lo  [29] LYCIAN LETTER A..LYCIAN LETTER X\n```\n\n----------------------------------------\n\nTITLE: Configuring Apple-Specific Link Options\nDESCRIPTION: Adds special linker options for header pad names when building shared libraries on Apple platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE AND BUILD_SHARED_LIBS)\n  target_link_options(swiftSwiftOnoneSupport PRIVATE \"SHELL:-Xlinker -headerpad_max_install_names\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Other_ID_Start Character List Definition\nDESCRIPTION: A list of Unicode code points with the Other_ID_Start property, which identifies additional characters that can be used as the initial character of an identifier in programming languages.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_22\n\nLANGUAGE: Unicode\nCODE:\n```\n1885..1886    ; Other_ID_Start # Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA\n2118          ; Other_ID_Start # Sm       SCRIPT CAPITAL P\n212E          ; Other_ID_Start # So       ESTIMATED SYMBOL\n309B..309C    ; Other_ID_Start # Sk   [2] KATAKANA-HIRAGANA VOICED SOUND MARK..KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n\n# Total code points: 6\n```\n\n----------------------------------------\n\nTITLE: Pure Killer Character Definitions\nDESCRIPTION: Defines Unicode code points for Pure Killer signs that are always visible and kill the inherent vowel of consonants without conjunct formation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n0D3B..0D3C    ; Pure_Killer # Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA\n0E3A          ; Pure_Killer # Mn       THAI CHARACTER PHINTHU\n0E4E          ; Pure_Killer # Mn       THAI CHARACTER YAMAKKAN\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Miao Script\nDESCRIPTION: Defines the Unicode code point ranges for the Miao script, including letters, vowel signs, tone marks, and other diacritical marks. The total count is 149 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_76\n\nLANGUAGE: text\nCODE:\n```\n16F00..16F4A  ; Miao # Lo  [75] MIAO LETTER PA..MIAO LETTER RTE\n16F4F         ; Miao # Mn       MIAO SIGN CONSONANT MODIFIER BAR\n16F50         ; Miao # Lo       MIAO LETTER NASALIZATION\n16F51..16F87  ; Miao # Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI\n16F8F..16F92  ; Miao # Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW\n16F93..16F9F  ; Miao # Lm  [13] MIAO LETTER TONE-2..MIAO LETTER REFORMED TONE-8\n\n# Total code points: 149\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift SIL Optimizer Sources in CMake\nDESCRIPTION: CMake configuration that specifies the source files to be compiled into the swiftSILOptimizer target. Includes various analysis tools, optimization passes, debug info generators, and testing utilities that work with Swift's intermediate language.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SILOptimizer/UtilityPasses/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(swiftSILOptimizer PRIVATE\n  AccessSummaryDumper.cpp\n  AccessPathVerification.cpp\n  AccessStorageAnalysisDumper.cpp\n  AccessStorageDumper.cpp\n  BasicCalleePrinter.cpp\n  BasicInstructionPropertyDumper.cpp\n  BugReducerTester.cpp\n  CFGPrinter.cpp\n  CallerAnalysisPrinter.cpp\n  ComputeDominanceInfo.cpp\n  ComputeLoopInfo.cpp\n  ConstantEvaluatorTester.cpp\n  ConstantEvaluableSubsetChecker.cpp\n  EpilogueARCMatcherDumper.cpp\n  EpilogueRetainReleaseMatcherDumper.cpp\n  FunctionOrderPrinter.cpp\n  IVInfoPrinter.cpp\n  InstCount.cpp\n  Link.cpp\n  LoopCanonicalizer.cpp\n  LoopInfoPrinter.cpp\n  LoopRegionPrinter.cpp\n  ModulePrinter.cpp\n  RCIdentityDumper.cpp\n  SerializeSILPass.cpp\n  SILDebugInfoGenerator.cpp\n  SILSkippingChecker.cpp\n  SimplifyUnreachableContainingBlocks.cpp\n  StripDebugInfo.cpp\n  TestRunner.cpp\n  OwnershipDumper.cpp\n  OwnershipVerifierTextualErrorDumper.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building Swift Runtime and Standard Library for Windows\nDESCRIPTION: Command to build the Swift runtime and standard library for Windows using Ninja build system. This is the final step after configuring the build environment.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsCrossCompile.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nninja swiftCore-windows-x86_64\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of Swift Reflection Test in CMake Build\nDESCRIPTION: This CMake directive conditionally adds the swift-reflection-test subdirectory to the build process. It only includes this component when SWIFT_BUILD_REMOTE_MIRROR and SWIFT_BUILD_DYNAMIC_STDLIB are enabled, and either SWIFT_INCLUDE_TESTS or SWIFT_INCLUDE_TEST_BINARIES is set.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/tools/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Keep in sync with test/CMakeLists.txt: swift-reflection-test is\n# only used when testing dynamic stdlib.\nif(SWIFT_BUILD_REMOTE_MIRROR AND\n  SWIFT_BUILD_DYNAMIC_STDLIB AND\n  (SWIFT_INCLUDE_TESTS OR SWIFT_INCLUDE_TEST_BINARIES))\n  add_subdirectory(swift-reflection-test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Bamum Script\nDESCRIPTION: Defines the Unicode code point ranges for the Bamum script, including letters, numbers, combining marks, punctuation, and extended characters. This block contains 657 total code points across two separate Unicode ranges.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_61\n\nLANGUAGE: Unicode\nCODE:\n```\nA6A0..A6E5    ; Bamum # Lo  [70] BAMUM LETTER A..BAMUM LETTER KI\nA6E6..A6EF    ; Bamum # Nl  [10] BAMUM LETTER MO..BAMUM LETTER KOGHOM\nA6F0..A6F1    ; Bamum # Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS\nA6F2..A6F7    ; Bamum # Po   [6] BAMUM NJAEMLI..BAMUM QUESTION MARK\n16800..16A38  ; Bamum # Lo [569] BAMUM LETTER PHASE-A NGKUE MFON..BAMUM LETTER PHASE-F VUEQ\n\n# Total code points: 657\n```\n\n----------------------------------------\n\nTITLE: Note on Error Categories and Examples\nDESCRIPTION: This section discusses error categories with references to Swift's error handling primitives like SIGINT handling, nil optional unwrapping, and NSError usage. However, it contains no actual code snippets that require documentation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandlingRationale.md#2025-04-23_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Unicode Character Code Point Definitions\nDESCRIPTION: Defines Unicode code points for lowercase Latin and Greek letters with various diacritical marks and modifications. Each entry specifies the hexadecimal code point, character class (Ll for lowercase), and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_7\n\nLANGUAGE: unicode\nCODE:\n```\n1E3D          ; Ll #       LATIN SMALL LETTER L WITH CIRCUMFLEX BELOW\n1E3F          ; Ll #       LATIN SMALL LETTER M WITH ACUTE\n1E41          ; Ll #       LATIN SMALL LETTER M WITH DOT ABOVE\n[...additional characters omitted for brevity...]\n2C73..2C74    ; Ll #   [2] LATIN SMALL LETTER W WITH HOOK..LATIN SMALL LETTER V WITH CURL\n```\n\n----------------------------------------\n\nTITLE: Encapsulating Unsafe Behavior with @safe Attribute in Swift\nDESCRIPTION: This example shows how to use the @safe attribute to indicate that an entity encapsulates unsafe behavior to provide a safe interface.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-memory-safety.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\n@safe struct MyTemporaryBuffer<T> {\n  private var storage: UnsafeBufferPointer<T>\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Feature File Paths in CMake\nDESCRIPTION: Defines paths for the feature merger script, source feature files for Swift and Clang, and the destination for the merged features file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Option/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(features_merger \"${SWIFT_SOURCE_DIR}/utils/merge-features.py\")\nset(features_file_swift_src \"${CMAKE_CURRENT_SOURCE_DIR}/features.json\")\nset(features_file_clang_src \"${LLVM_BINARY_DIR}/share/clang/features.json\")\nset(features_file_dest \"${CMAKE_BINARY_DIR}/share/swift/features.json\")\n```\n\n----------------------------------------\n\nTITLE: Defining XID_Continue Unicode Property\nDESCRIPTION: This snippet defines the XID_Continue Unicode property by listing code point ranges. XID_Continue is used for characters that can appear within identifiers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_35\n\nLANGUAGE: Unicode\nCODE:\n```\n1EE64         ; XID_Continue\n1EE67..1EE6A  ; XID_Continue\n1EE6C..1EE72  ; XID_Continue\n1EE74..1EE77  ; XID_Continue\n1EE79..1EE7C  ; XID_Continue\n1EE7E         ; XID_Continue\n1EE80..1EE89  ; XID_Continue\n1EE8B..1EE9B  ; XID_Continue\n1EEA1..1EEA3  ; XID_Continue\n1EEA5..1EEA9  ; XID_Continue\n1EEAB..1EEBB  ; XID_Continue\n1FBF0..1FBF9  ; XID_Continue\n20000..2A6DF  ; XID_Continue\n2A700..2B739  ; XID_Continue\n2B740..2B81D  ; XID_Continue\n2B820..2CEA1  ; XID_Continue\n2CEB0..2EBE0  ; XID_Continue\n2EBF0..2EE5D  ; XID_Continue\n2F800..2FA1D  ; XID_Continue\n30000..3134A  ; XID_Continue\n31350..323AF  ; XID_Continue\nE0100..E01EF  ; XID_Continue\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Meetei Mayek Script\nDESCRIPTION: Defines the Unicode code point ranges for the Meetei Mayek script, including letters, vowel signs, punctuation, and digits. This block spans two distinct ranges and contains 79 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_63\n\nLANGUAGE: Unicode\nCODE:\n```\nAAE0..AAEA    ; Meetei_Mayek # Lo  [11] MEETEI MAYEK LETTER E..MEETEI MAYEK LETTER SSA\nAAEB          ; Meetei_Mayek # Mc       MEETEI MAYEK VOWEL SIGN II\nAAEC..AAED    ; Meetei_Mayek # Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI\nAAEE..AAEF    ; Meetei_Mayek # Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU\nAAF0..AAF1    ; Meetei_Mayek # Po   [2] MEETEI MAYEK CHEIKHAN..MEETEI MAYEK AHANG KHUDAM\nAAF2          ; Meetei_Mayek # Lo       MEETEI MAYEK ANJI\nAAF3..AAF4    ; Meetei_Mayek # Lm   [2] MEETEI MAYEK SYLLABLE REPETITION MARK..MEETEI MAYEK WORD REPETITION MARK\nAAF5          ; Meetei_Mayek # Mc       MEETEI MAYEK VOWEL SIGN VISARGA\nAAF6          ; Meetei_Mayek # Mn       MEETEI MAYEK VIRAMA\nABC0..ABE2    ; Meetei_Mayek # Lo  [35] MEETEI MAYEK LETTER KOK..MEETEI MAYEK LETTER I LONSUM\nABE3..ABE4    ; Meetei_Mayek # Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP\nABE5          ; Meetei_Mayek # Mn       MEETEI MAYEK VOWEL SIGN ANAP\nABE6..ABE7    ; Meetei_Mayek # Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP\nABE8          ; Meetei_Mayek # Mn       MEETEI MAYEK VOWEL SIGN UNAP\nABE9..ABEA    ; Meetei_Mayek # Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG\nABEB          ; Meetei_Mayek # Po       MEETEI MAYEK CHEIKHEI\nABEC          ; Meetei_Mayek # Mc       MEETEI MAYEK LUM IYEK\nABED          ; Meetei_Mayek # Mn       MEETEI MAYEK APUN IYEK\nABF0..ABF9    ; Meetei_Mayek # Nd  [10] MEETEI MAYEK DIGIT ZERO..MEETEI MAYEK DIGIT NINE\n\n# Total code points: 79\n```\n\n----------------------------------------\n\nTITLE: Unicode Decimal Number (Nd) Codepoints\nDESCRIPTION: Defines ranges of unicode codepoints for decimal digits (0-9) across various scripts including Arabic, NKO, Devanagari, Bengali, and many others. Each range typically contains 10 consecutive codepoints for digits 0-9.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_17\n\nLANGUAGE: unicode\nCODE:\n```\n0030..0039    ; Nd #  [10] DIGIT ZERO..DIGIT NINE\n0660..0669    ; Nd #  [10] ARABIC-INDIC DIGIT ZERO..ARABIC-INDIC DIGIT NINE\n[...additional ranges...]\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji_Component Code Point Ranges in Unicode Data Format\nDESCRIPTION: A listing of Unicode code points with the Emoji_Component property, which indicates characters that can be used as components in emoji sequences but are not emoji themselves. These include numbers, regional indicator symbols, and variation selectors.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode-data\nCODE:\n```\n# All omitted code points have Emoji_Component=No\n\n0023          ; Emoji_Component      # E0.0   [1] (#️)       hash sign\n002A          ; Emoji_Component      # E0.0   [1] (*️)       asterisk\n0030..0039    ; Emoji_Component      # E0.0  [10] (0️..9️)    digit zero..digit nine\n200D          ; Emoji_Component      # E0.0   [1] (‍)        zero width joiner\n20E3          ; Emoji_Component      # E0.0   [1] (⃣)       combining enclosing keycap\nFE0F          ; Emoji_Component      # E0.0   [1] ()        VARIATION SELECTOR-16\n1F1E6..1F1FF  ; Emoji_Component      # E0.0  [26] (🇦..🇿)    regional indicator symbol letter a..regional indicator symbol letter z\n1F3FB..1F3FF  ; Emoji_Component      # E1.0   [5] (🏻..🏿)    light skin tone..dark skin tone\n1F9B0..1F9B3  ; Emoji_Component      # E11.0  [4] (🦰..🦳)    red hair..white hair\nE0020..E007F  ; Emoji_Component      # E0.0  [96] (󠀠..󠁿)      tag space..cancel tag\n\n# Total elements: 146\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Braille Patterns\nDESCRIPTION: Defines the Unicode code point ranges for Braille patterns, categorizing characters by their types (So) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_30\n\nLANGUAGE: Unicode\nCODE:\n```\n2800..28FF    ; Braille # So [256] BRAILLE PATTERN BLANK..BRAILLE PATTERN DOTS-12345678\n\n# Total code points: 256\n```\n\n----------------------------------------\n\nTITLE: Declaring theLastDeclInFoo Function\nDESCRIPTION: Declares a function without parameters or return type, possibly used as a marker or placeholder.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_21\n\nLANGUAGE: Swift\nCODE:\n```\nfunc theLastDeclInFoo()\n```\n\n----------------------------------------\n\nTITLE: Entity and Entity-Name Mangling Rules\nDESCRIPTION: Defines rules for mangling entities like functions, variables, subscripts, and their related accessors like getters and setters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nentity ::= nominal-type                // named type declaration\nentity ::= static? entity-kind context entity-name\nentity-kind ::= 'F'                    // function (ctor, accessor, etc.)\nentity-kind ::= 'v'                    // variable (let/var)\nentity-kind ::= 'i'                    // subscript ('i'ndex) itself (not the individual accessors)\nentity-kind ::= 'I'                    // initializer\nentity-name ::= decl-name type         // named declaration\nentity-name ::= 'A' index              // default argument generator\nentity-name ::= 'a' addressor-kind decl-name type     // mutable addressor\nentity-name ::= 'C' type               // allocating constructor\nentity-name ::= 'c' type               // non-allocating constructor\nentity-name ::= 'D'                    // deallocating destructor; untyped\nentity-name ::= 'd'                    // non-deallocating destructor; untyped\nentity-name ::= 'g' decl-name type     // getter\nentity-name ::= 'i'                    // non-local variable initializer\nentity-name ::= 'l' addressor-kind decl-name type     // non-mutable addressor\nentity-name ::= 'm' decl-name type     // materializeForSet\nentity-name ::= 's' decl-name type     // setter\nentity-name ::= 'U' index type         // explicit anonymous closure expression\nentity-name ::= 'u' index type         // implicit anonymous closure\nentity-name ::= 'w' decl-name type     // willSet\nentity-name ::= 'W' decl-name type     // didSet\nstatic ::= 'Z'                         // entity is a static member of a type\ndecl-name ::= identifier\ndecl-name ::= local-decl-name\ndecl-name ::= private-decl-name\nlocal-decl-name ::= 'L' index identifier  // locally-discriminated declaration\nprivate-decl-name ::= 'P' identifier identifier  // file-discriminated declaration\nreabstract-signature ::= ('G' generic-signature)? type type\naddressor-kind ::= 'u'                 // unsafe addressor (no owner)\naddressor-kind ::= 'O'                 // owning addressor (non-native owner)\naddressor-kind ::= 'o'                 // owning addressor (native owner)\naddressor-kind ::= 'p'                 // pinning addressor (native owner)\n```\n\n----------------------------------------\n\nTITLE: Avagraha Character Definitions\nDESCRIPTION: Lists Unicode code points for Avagraha signs across different Indic scripts. Avagraha represents the elision of initial a- in sandhi.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_0\n\nLANGUAGE: unicode\nCODE:\n```\n093D          ; Avagraha # Lo       DEVANAGARI SIGN AVAGRAHA\n09BD          ; Avagraha # Lo       BENGALI SIGN AVAGRAHA\n0ABD          ; Avagraha # Lo       GUJARATI SIGN AVAGRAHA\n0B3D          ; Avagraha # Lo       ORIYA SIGN AVAGRAHA\n```\n\n----------------------------------------\n\nTITLE: Defining Default Script Assignment in Unicode Character Database\nDESCRIPTION: This code snippet specifies the default Script property value for all Unicode code points not explicitly listed. It assigns the 'Unknown' (Zzzz) script to any unassigned code point in the entire Unicode range.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n# @missing: 0000..10FFFF; Unknown\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded Synchronization Target\nDESCRIPTION: Sets up build configuration for embedded systems, creating module-only libraries without binary code generation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Synchronization/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_SHOULD_BUILD_EMBEDDED_STDLIB)\n  add_custom_target(embedded-synchronization)\n  add_dependencies(embedded-libraries embedded-synchronization)\n\n  foreach(entry ${EMBEDDED_STDLIB_TARGET_TRIPLES})\n    string(REGEX REPLACE \"[ \\t]+\" \";\" list \"${entry}\")\n    list(GET list 0 arch)\n    list(GET list 1 mod)\n    list(GET list 2 triple)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Coptic Script\nDESCRIPTION: Defines the Unicode code point ranges for the Coptic script, categorizing characters by their types (L&, So, Mn, No, Po) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_32\n\nLANGUAGE: Unicode\nCODE:\n```\n03E2..03EF    ; Coptic # L&  [14] COPTIC CAPITAL LETTER SHEI..COPTIC SMALL LETTER DEI\n2C80..2CE4    ; Coptic # L& [101] COPTIC CAPITAL LETTER ALFA..COPTIC SYMBOL KAI\n2CE5..2CEA    ; Coptic # So   [6] COPTIC SYMBOL MI RO..COPTIC SYMBOL SHIMA SIMA\n2CEB..2CEE    ; Coptic # L&   [4] COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI..COPTIC SMALL LETTER CRYPTOGRAMMIC GANGIA\n2CEF..2CF1    ; Coptic # Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS\n2CF2..2CF3    ; Coptic # L&   [2] COPTIC CAPITAL LETTER BOHAIRIC KHEI..COPTIC SMALL LETTER BOHAIRIC KHEI\n2CF9..2CFC    ; Coptic # Po   [4] COPTIC OLD NUBIAN FULL STOP..COPTIC OLD NUBIAN VERSE DIVIDER\n2CFD          ; Coptic # No       COPTIC FRACTION ONE HALF\n2CFE..2CFF    ; Coptic # Po   [2] COPTIC FULL STOP..COPTIC MORPHOLOGICAL DIVIDER\n\n# Total code points: 137\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Pattern Syntax Properties\nDESCRIPTION: This snippet defines Unicode code points with the Pattern_Syntax property. It includes various symbols, brackets, and punctuation marks used in mathematical notation, programming languages, and other specialized contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_30\n\nLANGUAGE: Unicode\nCODE:\n```\n27EE          ; Pattern_Syntax # Ps       MATHEMATICAL LEFT FLATTENED PARENTHESIS\n27EF          ; Pattern_Syntax # Pe       MATHEMATICAL RIGHT FLATTENED PARENTHESIS\n27F0..27FF    ; Pattern_Syntax # Sm  [16] UPWARDS QUADRUPLE ARROW..LONG RIGHTWARDS SQUIGGLE ARROW\n2800..28FF    ; Pattern_Syntax # So [256] BRAILLE PATTERN BLANK..BRAILLE PATTERN DOTS-12345678\n2900..2982    ; Pattern_Syntax # Sm [131] RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE..Z NOTATION TYPE COLON\n2983          ; Pattern_Syntax # Ps       LEFT WHITE CURLY BRACKET\n2984          ; Pattern_Syntax # Pe       RIGHT WHITE CURLY BRACKET\n2985          ; Pattern_Syntax # Ps       LEFT WHITE PARENTHESIS\n2986          ; Pattern_Syntax # Pe       RIGHT WHITE PARENTHESIS\n2987          ; Pattern_Syntax # Ps       Z NOTATION LEFT IMAGE BRACKET\n2988          ; Pattern_Syntax # Pe       Z NOTATION RIGHT IMAGE BRACKET\n2989          ; Pattern_Syntax # Ps       Z NOTATION LEFT BINDING BRACKET\n298A          ; Pattern_Syntax # Pe       Z NOTATION RIGHT BINDING BRACKET\n298B          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET WITH UNDERBAR\n298C          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET WITH UNDERBAR\n298D          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET WITH TICK IN TOP CORNER\n298E          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\n298F          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\n2990          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER\n2991          ; Pattern_Syntax # Ps       LEFT ANGLE BRACKET WITH DOT\n2992          ; Pattern_Syntax # Pe       RIGHT ANGLE BRACKET WITH DOT\n2993          ; Pattern_Syntax # Ps       LEFT ARC LESS-THAN BRACKET\n2994          ; Pattern_Syntax # Pe       RIGHT ARC GREATER-THAN BRACKET\n2995          ; Pattern_Syntax # Ps       DOUBLE LEFT ARC GREATER-THAN BRACKET\n2996          ; Pattern_Syntax # Pe       DOUBLE RIGHT ARC LESS-THAN BRACKET\n2997          ; Pattern_Syntax # Ps       LEFT BLACK TORTOISE SHELL BRACKET\n2998          ; Pattern_Syntax # Pe       RIGHT BLACK TORTOISE SHELL BRACKET\n2999..29D7    ; Pattern_Syntax # Sm  [63] DOTTED FENCE..BLACK HOURGLASS\n29D8          ; Pattern_Syntax # Ps       LEFT WIGGLY FENCE\n29D9          ; Pattern_Syntax # Pe       RIGHT WIGGLY FENCE\n29DA          ; Pattern_Syntax # Ps       LEFT DOUBLE WIGGLY FENCE\n29DB          ; Pattern_Syntax # Pe       RIGHT DOUBLE WIGGLY FENCE\n29DC..29FB    ; Pattern_Syntax # Sm  [32] INCOMPLETE INFINITY..TRIPLE PLUS\n29FC          ; Pattern_Syntax # Ps       LEFT-POINTING CURVED ANGLE BRACKET\n29FD          ; Pattern_Syntax # Pe       RIGHT-POINTING CURVED ANGLE BRACKET\n29FE..2AFF    ; Pattern_Syntax # Sm [258] TINY..N-ARY WHITE VERTICAL BAR\n2B00..2B2F    ; Pattern_Syntax # So  [48] NORTH EAST WHITE ARROW..WHITE VERTICAL ELLIPSE\n2B30..2B44    ; Pattern_Syntax # Sm  [21] LEFT ARROW WITH SMALL CIRCLE..RIGHTWARDS ARROW THROUGH SUPERSET\n2B45..2B46    ; Pattern_Syntax # So   [2] LEFTWARDS QUADRUPLE ARROW..RIGHTWARDS QUADRUPLE ARROW\n2B47..2B4C    ; Pattern_Syntax # Sm   [6] REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW..RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR\n2B4D..2B73    ; Pattern_Syntax # So  [39] DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW..DOWNWARDS TRIANGLE-HEADED ARROW TO BAR\n2B74..2B75    ; Pattern_Syntax # Cn   [2] <reserved-2B74>..<reserved-2B75>\n2B76..2B95    ; Pattern_Syntax # So  [32] NORTH WEST TRIANGLE-HEADED ARROW TO BAR..RIGHTWARDS BLACK ARROW\n2B96          ; Pattern_Syntax # Cn       <reserved-2B96>\n2B97..2BFF    ; Pattern_Syntax # So [105] SYMBOL FOR TYPE A ELECTRONICS..HELLSCHREIBER PAUSE SYMBOL\n2E00..2E01    ; Pattern_Syntax # Po   [2] RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER\n2E02          ; Pattern_Syntax # Pi       LEFT SUBSTITUTION BRACKET\n2E03          ; Pattern_Syntax # Pf       RIGHT SUBSTITUTION BRACKET\n2E04          ; Pattern_Syntax # Pi       LEFT DOTTED SUBSTITUTION BRACKET\n2E05          ; Pattern_Syntax # Pf       RIGHT DOTTED SUBSTITUTION BRACKET\n2E06..2E08    ; Pattern_Syntax # Po   [3] RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER\n2E09          ; Pattern_Syntax # Pi       LEFT TRANSPOSITION BRACKET\n2E0A          ; Pattern_Syntax # Pf       RIGHT TRANSPOSITION BRACKET\n2E0B          ; Pattern_Syntax # Po       RAISED SQUARE\n2E0C          ; Pattern_Syntax # Pi       LEFT RAISED OMISSION BRACKET\n2E0D          ; Pattern_Syntax # Pf       RIGHT RAISED OMISSION BRACKET\n2E0E..2E16    ; Pattern_Syntax # Po   [9] EDITORIAL CORONIS..DOTTED RIGHT-POINTING ANGLE\n2E17          ; Pattern_Syntax # Pd       DOUBLE OBLIQUE HYPHEN\n2E18..2E19    ; Pattern_Syntax # Po   [2] INVERTED INTERROBANG..PALM BRANCH\n2E1A          ; Pattern_Syntax # Pd       HYPHEN WITH DIAERESIS\n2E1B          ; Pattern_Syntax # Po       TILDE WITH RING ABOVE\n2E1C          ; Pattern_Syntax # Pi       LEFT LOW PARAPHRASE BRACKET\n2E1D          ; Pattern_Syntax # Pf       RIGHT LOW PARAPHRASE BRACKET\n2E1E..2E1F    ; Pattern_Syntax # Po   [2] TILDE WITH DOT ABOVE..TILDE WITH DOT BELOW\n2E20          ; Pattern_Syntax # Pi       LEFT VERTICAL BAR WITH QUILL\n2E21          ; Pattern_Syntax # Pf       RIGHT VERTICAL BAR WITH QUILL\n2E22          ; Pattern_Syntax # Ps       TOP LEFT HALF BRACKET\n2E23          ; Pattern_Syntax # Pe       TOP RIGHT HALF BRACKET\n2E24          ; Pattern_Syntax # Ps       BOTTOM LEFT HALF BRACKET\n2E25          ; Pattern_Syntax # Pe       BOTTOM RIGHT HALF BRACKET\n2E26          ; Pattern_Syntax # Ps       LEFT SIDEWAYS U BRACKET\n2E27          ; Pattern_Syntax # Pe       RIGHT SIDEWAYS U BRACKET\n2E28          ; Pattern_Syntax # Ps       LEFT DOUBLE PARENTHESIS\n2E29          ; Pattern_Syntax # Pe       RIGHT DOUBLE PARENTHESIS\n2E2A..2E2E    ; Pattern_Syntax # Po   [5] TWO DOTS OVER ONE DOT PUNCTUATION..REVERSED QUESTION MARK\n2E2F          ; Pattern_Syntax # Lm       VERTICAL TILDE\n2E30..2E39    ; Pattern_Syntax # Po  [10] RING POINT..TOP HALF SECTION SIGN\n2E3A..2E3B    ; Pattern_Syntax # Pd   [2] TWO-EM DASH..THREE-EM DASH\n2E3C..2E3F    ; Pattern_Syntax # Po   [4] STENOGRAPHIC FULL STOP..CAPITULUM\n2E40          ; Pattern_Syntax # Pd       DOUBLE HYPHEN\n2E41          ; Pattern_Syntax # Po       REVERSED COMMA\n2E42          ; Pattern_Syntax # Ps       DOUBLE LOW-REVERSED-9 QUOTATION MARK\n2E43..2E4F    ; Pattern_Syntax # Po  [13] DASH WITH LEFT UPTURN..CORNISH VERSE DIVIDER\n2E50..2E51    ; Pattern_Syntax # So   [2] CROSS PATTY WITH RIGHT CROSSBAR..CROSS PATTY WITH LEFT CROSSBAR\n2E52..2E54    ; Pattern_Syntax # Po   [3] TIRONIAN SIGN CAPITAL ET..MEDIEVAL QUESTION MARK\n2E55          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET WITH STROKE\n2E56          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET WITH STROKE\n2E57          ; Pattern_Syntax # Ps       LEFT SQUARE BRACKET WITH DOUBLE STROKE\n2E58          ; Pattern_Syntax # Pe       RIGHT SQUARE BRACKET WITH DOUBLE STROKE\n2E59          ; Pattern_Syntax # Ps       TOP HALF LEFT PARENTHESIS\n2E5A          ; Pattern_Syntax # Pe       TOP HALF RIGHT PARENTHESIS\n2E5B          ; Pattern_Syntax # Ps       BOTTOM HALF LEFT PARENTHESIS\n2E5C          ; Pattern_Syntax # Pe       BOTTOM HALF RIGHT PARENTHESIS\n2E5D          ; Pattern_Syntax # Pd       OBLIQUE HYPHEN\n2E5E..2E7F    ; Pattern_Syntax # Cn  [34] <reserved-2E5E>..<reserved-2E7F>\n3001..3003    ; Pattern_Syntax # Po   [3] IDEOGRAPHIC COMMA..DITTO MARK\n3008          ; Pattern_Syntax # Ps       LEFT ANGLE BRACKET\n3009          ; Pattern_Syntax # Pe       RIGHT ANGLE BRACKET\n300A          ; Pattern_Syntax # Ps       LEFT DOUBLE ANGLE BRACKET\n300B          ; Pattern_Syntax # Pe       RIGHT DOUBLE ANGLE BRACKET\n300C          ; Pattern_Syntax # Ps       LEFT CORNER BRACKET\n300D          ; Pattern_Syntax # Pe       RIGHT CORNER BRACKET\n300E          ; Pattern_Syntax # Ps       LEFT WHITE CORNER BRACKET\n300F          ; Pattern_Syntax # Pe       RIGHT WHITE CORNER BRACKET\n3010          ; Pattern_Syntax # Ps       LEFT BLACK LENTICULAR BRACKET\n3011          ; Pattern_Syntax # Pe       RIGHT BLACK LENTICULAR BRACKET\n3012..3013    ; Pattern_Syntax # So   [2] POSTAL MARK..GETA MARK\n3014          ; Pattern_Syntax # Ps       LEFT TORTOISE SHELL BRACKET\n3015          ; Pattern_Syntax # Pe       RIGHT TORTOISE SHELL BRACKET\n3016          ; Pattern_Syntax # Ps       LEFT WHITE LENTICULAR BRACKET\n3017          ; Pattern_Syntax # Pe       RIGHT WHITE LENTICULAR BRACKET\n3018          ; Pattern_Syntax # Ps       LEFT WHITE TORTOISE SHELL BRACKET\n3019          ; Pattern_Syntax # Pe       RIGHT WHITE TORTOISE SHELL BRACKET\n301A          ; Pattern_Syntax # Ps       LEFT WHITE SQUARE BRACKET\n301B          ; Pattern_Syntax # Pe       RIGHT WHITE SQUARE BRACKET\n301C          ; Pattern_Syntax # Pd       WAVE DASH\n301D          ; Pattern_Syntax # Ps       REVERSED DOUBLE PRIME QUOTATION MARK\n301E..301F    ; Pattern_Syntax # Pe   [2] DOUBLE PRIME QUOTATION MARK..LOW DOUBLE PRIME QUOTATION MARK\n3020          ; Pattern_Syntax # So       POSTAL MARK FACE\n3030          ; Pattern_Syntax # Pd       WAVY DASH\nFD3E          ; Pattern_Syntax # Pe       ORNATE LEFT PARENTHESIS\nFD3F          ; Pattern_Syntax # Ps       ORNATE RIGHT PARENTHESIS\nFE45..FE46    ; Pattern_Syntax # Po   [2] SESAME DOT..WHITE SESAME DOT\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Static Library Build in CMake\nDESCRIPTION: Sets up installation rules for the swiftStdlibStubs target when building as a static library, including exporting it as part of the SwiftCoreTargets and assigning it to the SwiftCore_runtime component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/stubs/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT BUILD_SHARED_LIBS)\n  install(TARGETS swiftStdlibStubs\n    EXPORT SwiftCoreTargets\n    COMPONENT SwiftCore_runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Clang Importer Test Target\nDESCRIPTION: Creates a Swift unit test target named SwiftClangImporterTests with ClangImporterTests.cpp as the source file. This establishes the test suite for verifying Swift's Clang importer functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/ClangImporter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_unittest(SwiftClangImporterTests\n  ClangImporterTests.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unicode Character Breaking Rules for Prepend Characters\nDESCRIPTION: This code snippet demonstrates the grapheme breaking behavior for the MALAYALAM LETTER DOT REPH character (U+0D4E) with various combining characters. Each line shows whether a boundary break (÷) or non-break (×) occurs between characters based on Unicode rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0D4E × 0308 ÷ 0600 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]\n÷ 0D4E × 0A03 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.1] GURMUKHI SIGN VISARGA (SpacingMark) ÷ [0.3]\n÷ 0D4E × 0308 × 0A03 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.1] GURMUKHI SIGN VISARGA (SpacingMark) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Configuring Darwin Dependencies for Swift Reflection Test\nDESCRIPTION: Conditional setting of Darwin dependencies based on SDK overlay build flag\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftReflectionTest/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_SDK_OVERLAY)\nset(swift_reflection_test_darwin_dependencies Darwin)\nelse()\nset(swift_reflection_test_darwin_dependencies)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example of Nonescaping Dependencies in SIL\nDESCRIPTION: Demonstrates how nonescaping mark_dependence extends the lifetime of base through copies and forwarded values. The applied function depends on base because the value has a non-Escapable type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_70\n\nLANGUAGE: sil\nCODE:\n```\n%dependent_address = mark_dependence [nonescaping] %value : %*NonescapableType on %base\n%dependent_value = load %dependent_address\n%copied_value = copy_value %dependent_value\napply %f(%dependent_value)\ndestroy_value %base\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Code Point to Numeric Value 3.5\nDESCRIPTION: Maps the Tibetan digit half four Unicode code point to its numeric value of 3.5 (7/2).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\n0F2D          ; 3.5 ; ; 7/2 # No       TIBETAN DIGIT HALF FOUR\n```\n\n----------------------------------------\n\nTITLE: Unicode Numeric Characters Definition\nDESCRIPTION: Lists all Unicode code points categorized as Numeric characters, including digits from various writing systems. Each entry includes the code point range, property name, general category, and a description of the characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_13\n\nLANGUAGE: unicode-data\nCODE:\n```\n0030..0039    ; Numeric # Nd  [10] DIGIT ZERO..DIGIT NINE\n0600..0605    ; Numeric # Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n0660..0669    ; Numeric # Nd  [10] ARABIC-INDIC DIGIT ZERO..ARABIC-INDIC DIGIT NINE\n066B          ; Numeric # Po       ARABIC DECIMAL SEPARATOR\n06DD          ; Numeric # Cf       ARABIC END OF AYAH\n06F0..06F9    ; Numeric # Nd  [10] EXTENDED ARABIC-INDIC DIGIT ZERO..EXTENDED ARABIC-INDIC DIGIT NINE\n07C0..07C9    ; Numeric # Nd  [10] NKO DIGIT ZERO..NKO DIGIT NINE\n0890..0891    ; Numeric # Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE\n08E2          ; Numeric # Cf       ARABIC DISPUTED END OF AYAH\n0966..096F    ; Numeric # Nd  [10] DEVANAGARI DIGIT ZERO..DEVANAGARI DIGIT NINE\n09E6..09EF    ; Numeric # Nd  [10] BENGALI DIGIT ZERO..BENGALI DIGIT NINE\n0A66..0A6F    ; Numeric # Nd  [10] GURMUKHI DIGIT ZERO..GURMUKHI DIGIT NINE\n0AE6..0AEF    ; Numeric # Nd  [10] GUJARATI DIGIT ZERO..GUJARATI DIGIT NINE\n0B66..0B6F    ; Numeric # Nd  [10] ORIYA DIGIT ZERO..ORIYA DIGIT NINE\n0BE6..0BEF    ; Numeric # Nd  [10] TAMIL DIGIT ZERO..TAMIL DIGIT NINE\n0C66..0C6F    ; Numeric # Nd  [10] TELUGU DIGIT ZERO..TELUGU DIGIT NINE\n0CE6..0CEF    ; Numeric # Nd  [10] KANNADA DIGIT ZERO..KANNADA DIGIT NINE\n0D66..0D6F    ; Numeric # Nd  [10] MALAYALAM DIGIT ZERO..MALAYALAM DIGIT NINE\n0DE6..0DEF    ; Numeric # Nd  [10] SINHALA LITH DIGIT ZERO..SINHALA LITH DIGIT NINE\n0E50..0E59    ; Numeric # Nd  [10] THAI DIGIT ZERO..THAI DIGIT NINE\n0ED0..0ED9    ; Numeric # Nd  [10] LAO DIGIT ZERO..LAO DIGIT NINE\n0F20..0F29    ; Numeric # Nd  [10] TIBETAN DIGIT ZERO..TIBETAN DIGIT NINE\n1040..1049    ; Numeric # Nd  [10] MYANMAR DIGIT ZERO..MYANMAR DIGIT NINE\n1090..1099    ; Numeric # Nd  [10] MYANMAR SHAN DIGIT ZERO..MYANMAR SHAN DIGIT NINE\n17E0..17E9    ; Numeric # Nd  [10] KHMER DIGIT ZERO..KHMER DIGIT NINE\n1810..1819    ; Numeric # Nd  [10] MONGOLIAN DIGIT ZERO..MONGOLIAN DIGIT NINE\n1946..194F    ; Numeric # Nd  [10] LIMBU DIGIT ZERO..LIMBU DIGIT NINE\n19D0..19D9    ; Numeric # Nd  [10] NEW TAI LUE DIGIT ZERO..NEW TAI LUE DIGIT NINE\n19DA          ; Numeric # No       NEW TAI LUE THAM DIGIT ONE\n1A80..1A89    ; Numeric # Nd  [10] TAI THAM HORA DIGIT ZERO..TAI THAM HORA DIGIT NINE\n1A90..1A99    ; Numeric # Nd  [10] TAI THAM THAM DIGIT ZERO..TAI THAM THAM DIGIT NINE\n1B50..1B59    ; Numeric # Nd  [10] BALINESE DIGIT ZERO..BALINESE DIGIT NINE\n1BB0..1BB9    ; Numeric # Nd  [10] SUNDANESE DIGIT ZERO..SUNDANESE DIGIT NINE\n1C40..1C49    ; Numeric # Nd  [10] LEPCHA DIGIT ZERO..LEPCHA DIGIT NINE\n1C50..1C59    ; Numeric # Nd  [10] OL CHIKI DIGIT ZERO..OL CHIKI DIGIT NINE\nA620..A629    ; Numeric # Nd  [10] VAI DIGIT ZERO..VAI DIGIT NINE\nA8D0..A8D9    ; Numeric # Nd  [10] SAURASHTRA DIGIT ZERO..SAURASHTRA DIGIT NINE\nA900..A909    ; Numeric # Nd  [10] KAYAH LI DIGIT ZERO..KAYAH LI DIGIT NINE\nA9D0..A9D9    ; Numeric # Nd  [10] JAVANESE DIGIT ZERO..JAVANESE DIGIT NINE\nA9F0..A9F9    ; Numeric # Nd  [10] MYANMAR TAI LAING DIGIT ZERO..MYANMAR TAI LAING DIGIT NINE\nAA50..AA59    ; Numeric # Nd  [10] CHAM DIGIT ZERO..CHAM DIGIT NINE\nABF0..ABF9    ; Numeric # Nd  [10] MEETEI MAYEK DIGIT ZERO..MEETEI MAYEK DIGIT NINE\nFF10..FF19    ; Numeric # Nd  [10] FULLWIDTH DIGIT ZERO..FULLWIDTH DIGIT NINE\n104A0..104A9  ; Numeric # Nd  [10] OSMANYA DIGIT ZERO..OSMANYA DIGIT NINE\n10D30..10D39  ; Numeric # Nd  [10] HANIFI ROHINGYA DIGIT ZERO..HANIFI ROHINGYA DIGIT NINE\n10D40..10D49  ; Numeric # Nd  [10] GARAY DIGIT ZERO..GARAY DIGIT NINE\n11066..1106F  ; Numeric # Nd  [10] BRAHMI DIGIT ZERO..BRAHMI DIGIT NINE\n110BD         ; Numeric # Cf       KAITHI NUMBER SIGN\n110CD         ; Numeric # Cf       KAITHI NUMBER SIGN ABOVE\n110F0..110F9  ; Numeric # Nd  [10] SORA SOMPENG DIGIT ZERO..SORA SOMPENG DIGIT NINE\n11136..1113F  ; Numeric # Nd  [10] CHAKMA DIGIT ZERO..CHAKMA DIGIT NINE\n111D0..111D9  ; Numeric # Nd  [10] SHARADA DIGIT ZERO..SHARADA DIGIT NINE\n112F0..112F9  ; Numeric # Nd  [10] KHUDAWADI DIGIT ZERO..KHUDAWADI DIGIT NINE\n11450..11459  ; Numeric # Nd  [10] NEWA DIGIT ZERO..NEWA DIGIT NINE\n114D0..114D9  ; Numeric # Nd  [10] TIRHUTA DIGIT ZERO..TIRHUTA DIGIT NINE\n11650..11659  ; Numeric # Nd  [10] MODI DIGIT ZERO..MODI DIGIT NINE\n116C0..116C9  ; Numeric # Nd  [10] TAKRI DIGIT ZERO..TAKRI DIGIT NINE\n116D0..116E3  ; Numeric # Nd  [20] MYANMAR PAO DIGIT ZERO..MYANMAR EASTERN PWO KAREN DIGIT NINE\n11730..11739  ; Numeric # Nd  [10] AHOM DIGIT ZERO..AHOM DIGIT NINE\n118E0..118E9  ; Numeric # Nd  [10] WARANG CITI DIGIT ZERO..WARANG CITI DIGIT NINE\n11950..11959  ; Numeric # Nd  [10] DIVES AKURU DIGIT ZERO..DIVES AKURU DIGIT NINE\n11BF0..11BF9  ; Numeric # Nd  [10] SUNUWAR DIGIT ZERO..SUNUWAR DIGIT NINE\n11C50..11C59  ; Numeric # Nd  [10] BHAIKSUKI DIGIT ZERO..BHAIKSUKI DIGIT NINE\n11D50..11D59  ; Numeric # Nd  [10] MASARAM GONDI DIGIT ZERO..MASARAM GONDI DIGIT NINE\n11DA0..11DA9  ; Numeric # Nd  [10] GUNJALA GONDI DIGIT ZERO..GUNJALA GONDI DIGIT NINE\n11F50..11F59  ; Numeric # Nd  [10] KAWI DIGIT ZERO..KAWI DIGIT NINE\n16130..16139  ; Numeric # Nd  [10] GURUNG KHEMA DIGIT ZERO..GURUNG KHEMA DIGIT NINE\n16A60..16A69  ; Numeric # Nd  [10] MRO DIGIT ZERO..MRO DIGIT NINE\n16AC0..16AC9  ; Numeric # Nd  [10] TANGSA DIGIT ZERO..TANGSA DIGIT NINE\n16B50..16B59  ; Numeric # Nd  [10] PAHAWH HMONG DIGIT ZERO..PAHAWH HMONG DIGIT NINE\n16D70..16D79  ; Numeric # Nd  [10] KIRAT RAI DIGIT ZERO..KIRAT RAI DIGIT NINE\n1CCF0..1CCF9  ; Numeric # Nd  [10] OUTLINED DIGIT ZERO..OUTLINED DIGIT NINE\n1D7CE..1D7FF  ; Numeric # Nd  [50] MATHEMATICAL BOLD DIGIT ZERO..MATHEMATICAL MONOSPACE DIGIT NINE\n1E140..1E149  ; Numeric # Nd  [10] NYIAKENG PUACHUE HMONG DIGIT ZERO..NYIAKENG PUACHUE HMONG DIGIT NINE\n1E2F0..1E2F9  ; Numeric # Nd  [10] WANCHO DIGIT ZERO..WANCHO DIGIT NINE\n1E4F0..1E4F9  ; Numeric # Nd  [10] NAG MUNDARI DIGIT ZERO..NAG MUNDARI DIGIT NINE\n1E5F1..1E5FA  ; Numeric # Nd  [10] OL ONAL DIGIT ZERO..OL ONAL DIGIT NINE\n1E950..1E959  ; Numeric # Nd  [10] ADLAM DIGIT ZERO..ADLAM DIGIT NINE\n1FBF0..1FBF9  ; Numeric # Nd  [10] SEGMENTED DIGIT ZERO..SEGMENTED DIGIT NINE\n\n# Total code points: 774\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Demangling Library Sources in CMake\nDESCRIPTION: Sets up source file lists for the Swift demangling library, including conditional additions based on platform features like Objective-C interop and crash reporter support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Demangling/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swiftDemanglingSources\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Context.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Demangler.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/ManglingUtils.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/NodePrinter.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Punycode.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Remangler.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/NodeDumper.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/Errors.cpp\")\nset(swiftDemanglingCRSources\n  \"${SWIFT_SOURCE_DIR}/lib/Demangling/CrashReporter.cpp\")\n\nset(swift_demangling_cflags)\n\nif(SWIFT_RUNTIME_CRASH_REPORTER_CLIENT)\n  list(APPEND swift_demangling_cflags\n    \"-DSWIFT_HAVE_CRASHREPORTERCLIENT=1\")\nendif()\n\nif(SWIFT_STDLIB_ENABLE_OBJC_INTEROP)\n  list(APPEND swiftDemanglingSources\n    \"${SWIFT_SOURCE_DIR}/lib/Demangling/OldDemangler.cpp\"\n    \"${SWIFT_SOURCE_DIR}/lib/Demangling/OldRemangler.cpp\"\n  )\n  list(APPEND swift_demangling_cflags -DSWIFT_SUPPORT_OLD_MANGLING=1)\nelse()\n  list(APPEND swift_demangling_cflags -DSWIFT_SUPPORT_OLD_MANGLING=0)\nendif()\n\nif(SWIFT_STDLIB_HAS_TYPE_PRINTING)\n  list(APPEND swift_demangling_cflags -DSWIFT_STDLIB_HAS_TYPE_PRINTING)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Example of Dependent and Independent Value Access in SIL\nDESCRIPTION: Demonstrates how mark_dependence affects dependency tracking. The dependent_value load depends on base's lifetime, while independent_value does not, despite both loading from the same original address.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_69\n\nLANGUAGE: sil\nCODE:\n```\n%dependent_address = mark_dependence %original_address on %base\n%dependent_value = load [copy] %dependent_address\n%independent_value = load %original_address\ndestroy_value %base\n```\n\n----------------------------------------\n\nTITLE: Detecting Apple B&I Builds in CMake\nDESCRIPTION: Checks environment variables to detect if the build is running in Apple's Build and Integration (B&I) environment. Sets boolean variables SWIFT_BNI_OS_BUILD and SWIFT_BNI_XCODE_BUILD based on environment variable checks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# TODO: clean this up so it's less Apple-specific.\n# Detect B&I builds.\nset(SWIFT_BNI_OS_BUILD FALSE)\nset(SWIFT_BNI_XCODE_BUILD FALSE)\nif(DEFINED ENV{RC_XBS})\n  if((NOT DEFINED ENV{RC_XCODE} OR NOT \"$ENV{RC_XCODE}\") AND (NOT DEFINED ENV{RC_PLAYGROUNDS} OR NOT \"$ENV{RC_PLAYGROUNDS}\"))\n    set(SWIFT_BNI_OS_BUILD TRUE)\n  else()\n    set(SWIFT_BNI_XCODE_BUILD TRUE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Consonant_Killer Unicode Character Range\nDESCRIPTION: Lists Unicode code points classified as Consonant_Killer in the Indic_Syllabic_Category property. These characters signify that previous consonants are not pronounced in Thai and Khmer scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_25\n\nLANGUAGE: unicode\nCODE:\n```\n0E4C          ; Consonant_Killer # Mn       THAI CHARACTER THANTHAKHAT\n17CD          ; Consonant_Killer # Mn       KHMER SIGN TOANDAKHIAT\n```\n\n----------------------------------------\n\nTITLE: Generating Swift Source File with GYB in CMake\nDESCRIPTION: Uses the gyb_expand command to generate tgmath.swift from a GYB template file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Android/Android/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ngyb_expand(tgmath.swift.gyb tgmath.swift)\n```\n\n----------------------------------------\n\nTITLE: Conditional Leak Checker Source Addition\nDESCRIPTION: Conditionally adds the Leaks.mm source file to the swiftRuntime target if runtime leak checking is enabled. Leak detection is an optional component that helps identify memory leaks during development.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(SwiftCore_ENABLE_RUNTIME_LEAK_CHECKER)\n  target_sources(swiftRuntime PRIVATE\n    Leaks.mm)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Custom Delimiter for Benchmark Results in Swift\nDESCRIPTION: Tests the use of custom delimiters for benchmark output format. This is an important integration point with Benchmark_Driver which relies on consistent output format.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/benchmark/Benchmark_O.test.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nRUN: %Benchmark_O --list --skip-tags= --delim=$'\\t' --verbose \\\nRUN:              | %FileCheck %s --check-prefix LOGVERBOSEDELIM\nLOGVERBOSEDELIM: Delimiter: \"\\t\"\nLOGVERBOSEDELIM: #\\tTest\\t[Tags]\n```\n\n----------------------------------------\n\nTITLE: Releasing Values at Address with release_value_addr in SIL\nDESCRIPTION: Destroys a loadable value inside a given address by releasing any retainable pointers within it. This instruction is not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_117\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'release_value_addr' sil-operand\n\nrelease_value_addr %0 : $*A\n```\n\n----------------------------------------\n\nTITLE: Unicode Lowercase Letter Range Definitions\nDESCRIPTION: Defines ranges of Unicode code points representing lowercase letters across multiple scripts. Each line specifies either a single code point or a range with the 'Ll' (Lowercase Letter) category designation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n03D0..03D1    ; Ll #   [2] GREEK BETA SYMBOL..GREEK THETA SYMBOL\n03D5..03D7    ; Ll #   [3] GREEK PHI SYMBOL..GREEK KAI SYMBOL\n03D9          ; Ll #       GREEK SMALL LETTER ARCHAIC KOPPA\n[...truncated for brevity...]\n1E39          ; Ll #       LATIN SMALL LETTER L WITH DOT BELOW AND MACRON\n1E3B          ; Ll #       LATIN SMALL LETTER L WITH LINE BELOW\n```\n\n----------------------------------------\n\nTITLE: Extracting Lost Variables per Pass from Swift Counters using Script\nDESCRIPTION: Executes the `process-stats-lost-variables` utility script to process a CSV file containing optimizer counters (`csv_file_with_counters`) and outputs an aggregated CSV file (`csv_aggregate`) focusing specifically on the amount of lost variables per optimization pass.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nutils/process-stats-lost-variables csv_file_with_counters > csv_aggregate\n```\n\n----------------------------------------\n\nTITLE: Unicode Other_Alphabetic Characters Range Definition\nDESCRIPTION: Defines ranges of Unicode code points that are classified as Other_Alphabetic. Each line specifies either a single code point or a range of code points, followed by a comment indicating the category (Mc or Mn) and the character name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_14\n\nLANGUAGE: unicode\nCODE:\n```\nA9BA..A9BB    ; Other_Alphabetic # Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE\nA9BC..A9BD    ; Other_Alphabetic # Mn   [2] JAVANESE VOWEL SIGN PEPET..JAVANESE CONSONANT SIGN KERET\nA9BE..A9BF    ; Other_Alphabetic # Mc   [2] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE CONSONANT SIGN CAKRA\n```\n\n----------------------------------------\n\nTITLE: Defining Case Folding Entry Format in Unicode\nDESCRIPTION: Specifies the machine-readable format for case folding entries in the file. Each entry includes a code point, status, mapping, and name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n<code>; <status>; <mapping>; # <name>\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Basic Library in CMake\nDESCRIPTION: Configures the Swift Basic library as a static host library, specifying source files, include directories, and linked libraries. It also sets up platform-specific implementations for TaskQueue.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Basic/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftBasic STATIC\n  Assertions.cpp\n  BasicBridging.cpp\n  BasicSourceInfo.cpp\n  Cache.cpp\n  CASOptions.cpp\n  ClusteredBitVector.cpp\n  DiverseStack.cpp\n  Edit.cpp\n  EditorPlaceholder.cpp\n  ExponentialGrowthAppendingBinaryByteStream.cpp\n  Feature.cpp\n  FileSystem.cpp\n  FileTypes.cpp\n  Fingerprint.cpp\n  ParseableOutput.cpp\n  JSONSerialization.cpp\n  LangOptions.cpp\n  LoadDynamicLibrary.cpp\n  Located.cpp\n  Mangler.cpp\n  OutputFileMap.cpp\n  Platform.cpp\n  PrefixMap.cpp\n  PrettyStackTrace.cpp\n  PrimitiveParsing.cpp\n  Program.cpp\n  QuotedString.cpp\n  Sandbox.cpp\n  SmallBitVector.cpp\n  SourceLoc.cpp\n  StableHasher.cpp\n  Statistic.cpp\n  StringExtras.cpp\n  SupportedFeatures.cpp\n  TargetInfo.cpp\n  TaskQueue.cpp\n  ThreadSafeRefCounted.cpp\n  Unicode.cpp\n  UUID.cpp\n  Version.cpp\n  BlockList.cpp\n\n  ${llvm_revision_inc}\n  ${clang_revision_inc}\n  ${swift_revision_inc}\n\n  Unix/TaskQueue.inc\n\n  Default/TaskQueue.inc\n\n  LLVM_LINK_COMPONENTS support targetparser)\n_swift_gyb_target_sources(swiftBasic PRIVATE\n    UnicodeExtendedGraphemeClusters.cpp.gyb)\n\ntarget_include_directories(swiftBasic PRIVATE\n  clangBasic\n  ${UUID_INCLUDE})\n\ntarget_link_libraries(swiftBasic PUBLIC\n  swiftDemangling)\ntarget_link_libraries(swiftBasic PRIVATE\n  ${UUID_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Defining Hangul Trailing Consonant (T) Unicode Ranges\nDESCRIPTION: This snippet defines Unicode ranges for Hangul trailing consonants (T). It includes two ranges: one for the main Hangul Jongseong block and another for additional Hangul Jongseong characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_10\n\nLANGUAGE: Unicode\nCODE:\n```\n11A8..11FF    ; T # Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN\nD7CB..D7FB    ; T # Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH\n\n# Total code points: 137\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Localization Unit Tests with CMake\nDESCRIPTION: This CMake snippet sets up the swiftLocalizationTests target. It specifies the source files, links the swiftLocalization library, and defines the SWIFTLIB_DIR compile definition.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Localization/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_unittest(swiftLocalizationTests\n  DefToStringsConverterTests.cpp\n  SerializationTests.cpp)\n\ntarget_link_libraries(swiftLocalizationTests\n  PRIVATE\n    swiftLocalization)\n\ntarget_compile_definitions(swiftLocalizationTests PRIVATE\n  SWIFTLIB_DIR=\\\"${SWIFTLIB_DIR}\\\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Old Persian Script\nDESCRIPTION: Defines the Unicode code point ranges for the Old Persian script, categorizing characters by their types (Lo, Po, Nl) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_37\n\nLANGUAGE: Unicode\nCODE:\n```\n103A0..103C3  ; Old_Persian # Lo  [36] OLD PERSIAN SIGN A..OLD PERSIAN SIGN HA\n103C8..103CF  ; Old_Persian # Lo   [8] OLD PERSIAN SIGN AURAMAZDAA..OLD PERSIAN SIGN BUUMISH\n103D0         ; Old_Persian # Po       OLD PERSIAN WORD DIVIDER\n103D1..103D5  ; Old_Persian # Nl   [5] OLD PERSIAN NUMBER ONE..OLD PERSIAN NUMBER HUNDRED\n\n# Total code points: 50\n```\n\n----------------------------------------\n\nTITLE: CIF String Encoding Opcodes\nDESCRIPTION: Defines the opcodes used in the string encoding scheme for CIF, including end, str, framewk, and expand opcodes with their respective structures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompactImageMapFormat.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n   7   6   5   4   3   2   1   0\n ┌───────────────────────────────┐\n │ 0   0   0   0   0   0   0   0 │  end\n └───────────────────────────────┘\n\n   7   6   5   4   3   2   1   0\n ┌───────┬───────────────────────┐\n │ 0   0 │ count                 │  str\n └───────┴───────────────────────┘\n\n   7   6   5   4   3   2   1   0\n ┌───────┬───────────────────────┐\n │ 0   1 │ count                 │  framewk\n └───────┴───────────────────────┘\n\n   7   6   5   4   3   2   1   0\n ┌───┬───┬───────────────────────┐\n │ 1 │ e │ code                  │  expand\n └───┴───┴───────────────────────┘\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Fork as Git Remote using HTTPS (sh)\nDESCRIPTION: A Git command used within a shell to add a new remote repository named `my-remote`. This remote points to the user's personal fork (`username/swift`) on GitHub using the HTTPS protocol. Replace `username` with the actual GitHub username. Requires Git installed and a local clone.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n# If you used HTTPS in step 2\ngit remote add my-remote https://github.com/username/swift.git\n```\n\n----------------------------------------\n\nTITLE: Defining Language-Sensitive Case Mappings for Turkish and Azeri\nDESCRIPTION: This snippet defines language-sensitive case mappings for Turkish and Azeri, which have special rules for handling I, i, and i-dotless. It includes rules for uppercase and lowercase transformations specific to these languages.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_9\n\nLANGUAGE: Unicode\nCODE:\n```\n0130; 0069; 0130; 0130; tr; # LATIN CAPITAL LETTER I WITH DOT ABOVE\n0130; 0069; 0130; 0130; az; # LATIN CAPITAL LETTER I WITH DOT ABOVE\n\n0307; ; 0307; 0307; tr After_I; # COMBINING DOT ABOVE\n0307; ; 0307; 0307; az After_I; # COMBINING DOT ABOVE\n\n0049; 0131; 0049; 0049; tr Not_Before_Dot; # LATIN CAPITAL LETTER I\n0049; 0131; 0049; 0049; az Not_Before_Dot; # LATIN CAPITAL LETTER I\n\n0069; 0069; 0130; 0130; tr; # LATIN SMALL LETTER I\n0069; 0069; 0130; 0130; az; # LATIN SMALL LETTER I\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Demangling Static Library in CMake\nDESCRIPTION: Adds a static library named 'swiftDemangling' with various source files for demangling functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Demangling/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftDemangling STATIC\n  Demangler.cpp\n  Context.cpp\n  ManglingUtils.cpp\n  NodeDumper.cpp\n  NodePrinter.cpp\n  OldDemangler.cpp\n  OldRemangler.cpp\n  Punycode.cpp\n  Remangler.cpp\n  Errors.cpp\n  CrashReporter.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Tools Build in CMake\nDESCRIPTION: Adds build configurations for test-related tools when testing is enabled through SWIFT_INCLUDE_TESTS or SWIFT_INCLUDE_TEST_BINARIES flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_INCLUDE_TESTS OR SWIFT_INCLUDE_TEST_BINARIES)\n  add_swift_tool_subdirectory(swift-ide-test)\n  add_swift_tool_subdirectory(swift-remoteast-test)\n  add_swift_tool_subdirectory(lldb-moduleimport-test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Dumping Repository Hashes using update-checkout (sh)\nDESCRIPTION: Runs the `utils/update-checkout` script with the `--dump-hashes` flag. This command outputs the current commit hashes for all repositories managed by the script, which is helpful for diagnosing build issues related to inconsistent repository states when reporting bugs. Requires the Swift source checkout.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nutils/update-checkout --dump-hashes\n```\n\n----------------------------------------\n\nTITLE: Importing C++ Class Template Instantiation in Swift\nDESCRIPTION: This example shows how a C++ class template instantiation is imported into Swift using a mangled name and typealias.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_63\n\nLANGUAGE: swift\nCODE:\n```\nstruct __CxxTemplateInst12MagicWrapperI11MagicNumberE {\n    var t: MagicNumber\n}\nstruct MagicNumber {}\ntypealias WrappedMagicNumber = __CxxTemplateInst12MagicWrapperI11MagicNumberE\n```\n\n----------------------------------------\n\nTITLE: Unicode 4.1.0 Character Assignments\nDESCRIPTION: Lists Unicode code point ranges and their descriptions for characters newly assigned in Unicode 4.1.0 (March 2005). Includes 1273 total code points covering various scripts and symbols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n0237..0241    ; 4.1 #  [11] LATIN SMALL LETTER DOTLESS J..LATIN CAPITAL LETTER GLOTTAL STOP\n0358..035C    ; 4.1 #   [5] COMBINING DOT ABOVE RIGHT..COMBINING DOUBLE BREVE BELOW\n[...additional ranges...]\n1D6A4..1D6A5  ; 4.1 #   [2] MATHEMATICAL ITALIC SMALL DOTLESS I..MATHEMATICAL ITALIC SMALL DOTLESS J\n```\n\n----------------------------------------\n\nTITLE: NSString Hash Value Implementation for ARM Architectures\nDESCRIPTION: Assembly code verification for hash value computation on various ARM architectures (armv7, armv7s, armv7k, arm64). Tests proper message sending sequence and autorelease return value handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/runtime_autorelease_optimization.txt#2025-04-23_snippet_2\n\nLANGUAGE: assembly\nCODE:\n```\n// CHECK-arm64-LABEL: _swift_stdlib_NSStringHashValue:\n// CHECK-arm64-NOT: ret\n// CHECK-arm64: bl      {{.*}} ; Objc message: -[x0 decomposedStringWithCanonicalMapping]\n// CHECK-arm64: mov      x29, x29\n// CHECK-arm64: bl      {{.*}} ; symbol stub for: _objc_retainAutoreleasedReturnValue\n// CHECK-arm64: ret\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compatibility Span Library for Darwin Systems in CMake\nDESCRIPTION: Sets up the 'swiftCompatibilitySpan' library build configuration for Apple platforms. The configuration includes source files, build flags, deployment versions, and linkage settings. This library serves as a compatibility layer for Swift's Span types across different OS versions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CompatibilitySpan/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\" AND DEFINED SWIFT_STDLIB_LIBRARY_BUILD_TYPES)\n\n  set(library_name \"swiftCompatibilitySpan\")\n\n  add_swift_target_library(\"${library_name}\" ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n    FakeStdlib.swift\n    ../../public/core/Span/MutableRawSpan.swift\n    ../../public/core/Span/MutableSpan.swift\n    ../../public/core/Span/RawSpan.swift\n    ../../public/core/Span/Span.swift\n\n    TARGET_SDKS ${SWIFT_APPLE_PLATFORMS}\n\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n\n    SWIFT_COMPILE_FLAGS\n      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n      -parse-stdlib\n      -module-abi-name Swift\n      -DSPAN_COMPATIBILITY_STUB\n\n    NO_SWIFTMODULE\n\n    DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n    DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n    DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n    DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n    DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n    DEPLOYMENT_VERSION_MACCATALYST ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_MACCATALYST}\n\n    MACCATALYST_BUILD_FLAVOR \"zippered\"\n\n    INSTALL_IN_COMPONENT compiler\n\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\" -Xlinker -not_for_dyld_shared_cache\n\n    BACK_DEPLOYMENT_LIBRARY 6.2)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions for SourceKit Library in CMake\nDESCRIPTION: Adds a private compile definition for the sourcekitdAPI library, likely used for symbol visibility control.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/lib/API/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(sourcekitdAPI PRIVATE\n  sourcekitd_EXPORTS)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Kaithi Script\nDESCRIPTION: Defines the Unicode code point ranges for the Kaithi script, specifying character categories such as letters, vowel signs, and punctuation marks. The total count is 68 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_69\n\nLANGUAGE: text\nCODE:\n```\n11080..11081  ; Kaithi # Mn   [2] KAITHI SIGN CANDRABINDU..KAITHI SIGN ANUSVARA\n11082         ; Kaithi # Mc       KAITHI SIGN VISARGA\n11083..110AF  ; Kaithi # Lo  [45] KAITHI LETTER A..KAITHI LETTER HA\n110B0..110B2  ; Kaithi # Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II\n110B3..110B6  ; Kaithi # Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI\n110B7..110B8  ; Kaithi # Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU\n110B9..110BA  ; Kaithi # Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA\n110BB..110BC  ; Kaithi # Po   [2] KAITHI ABBREVIATION SIGN..KAITHI ENUMERATION SIGN\n110BD         ; Kaithi # Cf       KAITHI NUMBER SIGN\n110BE..110C1  ; Kaithi # Po   [4] KAITHI SECTION MARK..KAITHI DOUBLE DANDA\n110C2         ; Kaithi # Mn       KAITHI VOWEL SIGN VOCALIC R\n110CD         ; Kaithi # Cf       KAITHI NUMBER SIGN ABOVE\n\n# Total code points: 68\n```\n\n----------------------------------------\n\nTITLE: Installing build targets\nDESCRIPTION: Configures installation rules for the swift-inspect executable and, on Windows, the SwiftInspectClient shared library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-inspect/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS swift-inspect\n  DESTINATION bin)\nif(WIN32)\n  install(TARGETS SwiftInspectClient\n    RUNTIME DESTINATION bin)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Emoji Code Points with Descriptions\nDESCRIPTION: This snippet contains a list of Unicode code points that have the Emoji property, with their introduction versions, counts, and descriptions. The file notes that all omitted code points have Emoji=No property, implying this is a complete reference for emoji Unicode points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# All omitted code points have Emoji=No\n\n0023          ; Emoji                # E0.0   [1] (#️)       hash sign\n002A          ; Emoji                # E0.0   [1] (*️)       asterisk\n0030..0039    ; Emoji                # E0.0  [10] (0️..9️)    digit zero..digit nine\n00A9          ; Emoji                # E0.6   [1] (©️)       copyright\n00AE          ; Emoji                # E0.6   [1] (®️)       registered\n203C          ; Emoji                # E0.6   [1] (‼️)       double exclamation mark\n2049          ; Emoji                # E0.6   [1] (⁉️)       exclamation question mark\n2122          ; Emoji                # E0.6   [1] (™️)       trade mark\n2139          ; Emoji                # E0.6   [1] (ℹ️)       information\n2194..2199    ; Emoji                # E0.6   [6] (↔️..↙️)    left-right arrow..down-left arrow\n21A9..21AA    ; Emoji                # E0.6   [2] (↩️..↪️)    right arrow curving left..left arrow curving right\n231A..231B    ; Emoji                # E0.6   [2] (⌚..⌛)    watch..hourglass done\n2328          ; Emoji                # E1.0   [1] (⌨️)       keyboard\n23CF          ; Emoji                # E1.0   [1] (⏏️)       eject button\n23E9..23EC    ; Emoji                # E0.6   [4] (⏩..⏬)    fast-forward button..fast down button\n23ED..23EE    ; Emoji                # E0.7   [2] (⏭️..⏮️)    next track button..last track button\n23EF          ; Emoji                # E1.0   [1] (⏯️)       play or pause button\n23F0          ; Emoji                # E0.6   [1] (⏰)       alarm clock\n23F1..23F2    ; Emoji                # E1.0   [2] (⏱️..⏲️)    stopwatch..timer clock\n23F3          ; Emoji                # E0.6   [1] (⏳)       hourglass not done\n23F8..23FA    ; Emoji                # E0.7   [3] (⏸️..⏺️)    pause button..record button\n24C2          ; Emoji                # E0.6   [1] (Ⓜ️)       circled M\n25AA..25AB    ; Emoji                # E0.6   [2] (▪️..▫️)    black small square..white small square\n25B6          ; Emoji                # E0.6   [1] (▶️)       play button\n25C0          ; Emoji                # E0.6   [1] (◀️)       reverse button\n25FB..25FE    ; Emoji                # E0.6   [4] (◻️..◾)    white medium square..black medium-small square\n2600..2601    ; Emoji                # E0.6   [2] (☀️..☁️)    sun..cloud\n2602..2603    ; Emoji                # E0.7   [2] (☂️..☃️)    umbrella..snowman\n2604          ; Emoji                # E1.0   [1] (☄️)       comet\n260E          ; Emoji                # E0.6   [1] (☎️)       telephone\n2611          ; Emoji                # E0.6   [1] (☑️)       check box with check\n2614..2615    ; Emoji                # E0.6   [2] (☔..☕)    umbrella with rain drops..hot beverage\n2618          ; Emoji                # E1.0   [1] (☘️)       shamrock\n261D          ; Emoji                # E0.6   [1] (☝️)       index pointing up\n2620          ; Emoji                # E1.0   [1] (☠️)       skull and crossbones\n2622..2623    ; Emoji                # E1.0   [2] (☢️..☣️)    radioactive..biohazard\n2626          ; Emoji                # E1.0   [1] (☦️)       orthodox cross\n262A          ; Emoji                # E0.7   [1] (☪️)       star and crescent\n262E          ; Emoji                # E1.0   [1] (☮️)       peace symbol\n262F          ; Emoji                # E0.7   [1] (☯️)       yin yang\n2638..2639    ; Emoji                # E0.7   [2] (☸️..☹️)    wheel of dharma..frowning face\n263A          ; Emoji                # E0.6   [1] (☺️)       smiling face\n2640          ; Emoji                # E4.0   [1] (♀️)       female sign\n2642          ; Emoji                # E4.0   [1] (♂️)       male sign\n2648..2653    ; Emoji                # E0.6  [12] (♈..♓)    Aries..Pisces\n265F          ; Emoji                # E11.0  [1] (♟️)       chess pawn\n2660          ; Emoji                # E0.6   [1] (♠️)       spade suit\n2663          ; Emoji                # E0.6   [1] (♣️)       club suit\n2665..2666    ; Emoji                # E0.6   [2] (♥️..♦️)    heart suit..diamond suit\n2668          ; Emoji                # E0.6   [1] (♨️)       hot springs\n267B          ; Emoji                # E0.6   [1] (♻️)       recycling symbol\n267E          ; Emoji                # E11.0  [1] (♾️)       infinity\n267F          ; Emoji                # E0.6   [1] (♿)       wheelchair symbol\n2692          ; Emoji                # E1.0   [1] (⚒️)       hammer and pick\n2693          ; Emoji                # E0.6   [1] (⚓)       anchor\n2694          ; Emoji                # E1.0   [1] (⚔️)       crossed swords\n2695          ; Emoji                # E4.0   [1] (⚕️)       medical symbol\n2696..2697    ; Emoji                # E1.0   [2] (⚖️..⚗️)    balance scale..alembic\n2699          ; Emoji                # E1.0   [1] (⚙️)       gear\n269B..269C    ; Emoji                # E1.0   [2] (⚛️..⚜️)    atom symbol..fleur-de-lis\n26A0..26A1    ; Emoji                # E0.6   [2] (⚠️..⚡)    warning..high voltage\n26A7          ; Emoji                # E13.0  [1] (⚧️)       transgender symbol\n26AA..26AB    ; Emoji                # E0.6   [2] (⚪..⚫)    white circle..black circle\n26B0..26B1    ; Emoji                # E1.0   [2] (⚰️..⚱️)    coffin..funeral urn\n26BD..26BE    ; Emoji                # E0.6   [2] (⚽..⚾)    soccer ball..baseball\n26C4..26C5    ; Emoji                # E0.6   [2] (⛄..⛅)    snowman without snow..sun behind cloud\n26C8          ; Emoji                # E0.7   [1] (⛈️)       cloud with lightning and rain\n26CE          ; Emoji                # E0.6   [1] (⛎)       Ophiuchus\n26CF          ; Emoji                # E0.7   [1] (⛏️)       pick\n26D1          ; Emoji                # E0.7   [1] (⛑️)       rescue worker's helmet\n26D3          ; Emoji                # E0.7   [1] (⛓️)       chains\n26D4          ; Emoji                # E0.6   [1] (⛔)       no entry\n26E9          ; Emoji                # E0.7   [1] (⛩️)       shinto shrine\n26EA          ; Emoji                # E0.6   [1] (⛪)       church\n26F0..26F1    ; Emoji                # E0.7   [2] (⛰️..⛱️)    mountain..umbrella on ground\n26F2..26F3    ; Emoji                # E0.6   [2] (⛲..⛳)    fountain..flag in hole\n26F4          ; Emoji                # E0.7   [1] (⛴️)       ferry\n26F5          ; Emoji                # E0.6   [1] (⛵)       sailboat\n26F7..26F9    ; Emoji                # E0.7   [3] (⛷️..⛹️)    skier..person bouncing ball\n26FA          ; Emoji                # E0.6   [1] (⛺)       tent\n26FD          ; Emoji                # E0.6   [1] (⛽)       fuel pump\n2702          ; Emoji                # E0.6   [1] (✂️)       scissors\n2705          ; Emoji                # E0.6   [1] (✅)       check mark button\n2708..270C    ; Emoji                # E0.6   [5] (✈️..✌️)    airplane..victory hand\n270D          ; Emoji                # E0.7   [1] (✍️)       writing hand\n270F          ; Emoji                # E0.6   [1] (✏️)       pencil\n2712          ; Emoji                # E0.6   [1] (✒️)       black nib\n2714          ; Emoji                # E0.6   [1] (✔️)       check mark\n2716          ; Emoji                # E0.6   [1] (✖️)       multiply\n271D          ; Emoji                # E0.7   [1] (✝️)       latin cross\n2721          ; Emoji                # E0.7   [1] (✡️)       star of David\n2728          ; Emoji                # E0.6   [1] (✨)       sparkles\n2733..2734    ; Emoji                # E0.6   [2] (✳️..✴️)    eight-spoked asterisk..eight-pointed star\n2744          ; Emoji                # E0.6   [1] (❄️)       snowflake\n2747          ; Emoji                # E0.6   [1] (❇️)       sparkle\n274C          ; Emoji                # E0.6   [1] (❌)       cross mark\n274E          ; Emoji                # E0.6   [1] (❎)       cross mark button\n2753..2755    ; Emoji                # E0.6   [3] (❓..❕)    red question mark..white exclamation mark\n2757          ; Emoji                # E0.6   [1] (❗)       red exclamation mark\n2763          ; Emoji                # E1.0   [1] (❣️)       heart exclamation\n2764          ; Emoji                # E0.6   [1] (❤️)       red heart\n2795..2797    ; Emoji                # E0.6   [3] (➕..➗)    plus..divide\n27A1          ; Emoji                # E0.6   [1] (➡️)       right arrow\n27B0          ; Emoji                # E0.6   [1] (➰)       curly loop\n27BF          ; Emoji                # E1.0   [1] (➿)       double curly loop\n2934..2935    ; Emoji                # E0.6   [2] (⤴️..⤵️)    right arrow curving up..right arrow curving down\n2B05..2B07    ; Emoji                # E0.6   [3] (⬅️..⬇️)    left arrow..down arrow\n2B1B..2B1C    ; Emoji                # E0.6   [2] (⬛..⬜)    black large square..white large square\n2B50          ; Emoji                # E0.6   [1] (⭐)       star\n2B55          ; Emoji                # E0.6   [1] (⭕)       hollow red circle\n3030          ; Emoji                # E0.6   [1] (〰️)       wavy dash\n303D          ; Emoji                # E0.6   [1] (〽️)       part alternation mark\n3297          ; Emoji                # E0.6   [1] (㊗️)       Japanese \"congratulations\" button\n3299          ; Emoji                # E0.6   [1] (㊙️)       Japanese \"secret\" button\n1F004         ; Emoji                # E0.6   [1] (🀄)       mahjong red dragon\n1F0CF         ; Emoji                # E0.6   [1] (🃏)       joker\n1F170..1F171  ; Emoji                # E0.6   [2] (🅰️..🅱️)    A button (blood type)..B button (blood type)\n1F17E..1F17F  ; Emoji                # E0.6   [2] (🅾️..🅿️)    O button (blood type)..P button\n1F18E         ; Emoji                # E0.6   [1] (🆎)       AB button (blood type)\n1F191..1F19A  ; Emoji                # E0.6  [10] (🆑..🆚)    CL button..VS button\n1F1E6..1F1FF  ; Emoji                # E0.0  [26] (🇦..🇿)    regional indicator symbol letter a..regional indicator symbol letter z\n1F201..1F202  ; Emoji                # E0.6   [2] (🈁..🈂️)    Japanese \"here\" button..Japanese \"service charge\" button\n1F21A         ; Emoji                # E0.6   [1] (🈚)       Japanese \"free of charge\" button\n1F22F         ; Emoji                # E0.6   [1] (🈯)       Japanese \"reserved\" button\n```\n\n----------------------------------------\n\nTITLE: Unicode Enclosing Mark (Me) Code Point Ranges\nDESCRIPTION: Defines the Unicode code point ranges for characters in the Enclosing_Mark (Me) category. These are combining marks that surround their base character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_14\n\nLANGUAGE: unicode\nCODE:\n```\n0488..0489    ; Me #   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN\n1ABE          ; Me #       COMBINING PARENTHESES OVERLAY\n20DD..20E0    ; Me #   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH\n20E2..20E4    ; Me #   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE\nA670..A672    ; Me #   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN\n\n# Total code points: 13\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Uppercase Letters\nDESCRIPTION: This snippet defines Unicode ranges for uppercase letters across multiple scripts. It includes individual character codes and ranges, along with their corresponding Unicode names. The format is consistent throughout, using hexadecimal codes and semicolons as separators.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n037F          ; Lu #       GREEK CAPITAL LETTER YOT\n0386          ; Lu #       GREEK CAPITAL LETTER ALPHA WITH TONOS\n0388..038A    ; Lu #   [3] GREEK CAPITAL LETTER EPSILON WITH TONOS..GREEK CAPITAL LETTER IOTA WITH TONOS\n038C          ; Lu #       GREEK CAPITAL LETTER OMICRON WITH TONOS\n038E..038F    ; Lu #   [2] GREEK CAPITAL LETTER UPSILON WITH TONOS..GREEK CAPITAL LETTER OMEGA WITH TONOS\n0391..03A1    ; Lu #  [17] GREEK CAPITAL LETTER ALPHA..GREEK CAPITAL LETTER RHO\n03A3..03AB    ; Lu #   [9] GREEK CAPITAL LETTER SIGMA..GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA\n03CF          ; Lu #       GREEK CAPITAL KAI SYMBOL\n03D2..03D4    ; Lu #   [3] GREEK UPSILON WITH HOOK SYMBOL..GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL\n03D8          ; Lu #       GREEK LETTER ARCHAIC KOPPA\n03DA          ; Lu #       GREEK LETTER STIGMA\n03DC          ; Lu #       GREEK LETTER DIGAMMA\n03DE          ; Lu #       GREEK LETTER KOPPA\n03E0          ; Lu #       GREEK LETTER SAMPI\n03E2          ; Lu #       COPTIC CAPITAL LETTER SHEI\n03E4          ; Lu #       COPTIC CAPITAL LETTER FEI\n03E6          ; Lu #       COPTIC CAPITAL LETTER KHEI\n03E8          ; Lu #       COPTIC CAPITAL LETTER HORI\n03EA          ; Lu #       COPTIC CAPITAL LETTER GANGIA\n03EC          ; Lu #       COPTIC CAPITAL LETTER SHIMA\n03EE          ; Lu #       COPTIC CAPITAL LETTER DEI\n03F4          ; Lu #       GREEK CAPITAL THETA SYMBOL\n03F7          ; Lu #       GREEK CAPITAL LETTER SHO\n03F9..03FA    ; Lu #   [2] GREEK CAPITAL LUNATE SIGMA SYMBOL..GREEK CAPITAL LETTER SAN\n03FD..042F    ; Lu #  [51] GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL..CYRILLIC CAPITAL LETTER YA\n0460          ; Lu #       CYRILLIC CAPITAL LETTER OMEGA\n0462          ; Lu #       CYRILLIC CAPITAL LETTER YAT\n0464          ; Lu #       CYRILLIC CAPITAL LETTER IOTIFIED E\n0466          ; Lu #       CYRILLIC CAPITAL LETTER LITTLE YUS\n0468          ; Lu #       CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS\n046A          ; Lu #       CYRILLIC CAPITAL LETTER BIG YUS\n046C          ; Lu #       CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS\n046E          ; Lu #       CYRILLIC CAPITAL LETTER KSI\n0470          ; Lu #       CYRILLIC CAPITAL LETTER PSI\n0472          ; Lu #       CYRILLIC CAPITAL LETTER FITA\n0474          ; Lu #       CYRILLIC CAPITAL LETTER IZHITSA\n0476          ; Lu #       CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT\n0478          ; Lu #       CYRILLIC CAPITAL LETTER UK\n047A          ; Lu #       CYRILLIC CAPITAL LETTER ROUND OMEGA\n047C          ; Lu #       CYRILLIC CAPITAL LETTER OMEGA WITH TITLO\n047E          ; Lu #       CYRILLIC CAPITAL LETTER OT\n0480          ; Lu #       CYRILLIC CAPITAL LETTER KOPPA\n048A          ; Lu #       CYRILLIC CAPITAL LETTER SHORT I WITH TAIL\n048C          ; Lu #       CYRILLIC CAPITAL LETTER SEMISOFT SIGN\n048E          ; Lu #       CYRILLIC CAPITAL LETTER ER WITH TICK\n0490          ; Lu #       CYRILLIC CAPITAL LETTER GHE WITH UPTURN\n0492          ; Lu #       CYRILLIC CAPITAL LETTER GHE WITH STROKE\n0494          ; Lu #       CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK\n0496          ; Lu #       CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER\n0498          ; Lu #       CYRILLIC CAPITAL LETTER ZE WITH DESCENDER\n049A          ; Lu #       CYRILLIC CAPITAL LETTER KA WITH DESCENDER\n049C          ; Lu #       CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE\n049E          ; Lu #       CYRILLIC CAPITAL LETTER KA WITH STROKE\n04A0          ; Lu #       CYRILLIC CAPITAL LETTER BASHKIR KA\n04A2          ; Lu #       CYRILLIC CAPITAL LETTER EN WITH DESCENDER\n04A4          ; Lu #       CYRILLIC CAPITAL LIGATURE EN GHE\n04A6          ; Lu #       CYRILLIC CAPITAL LETTER PE WITH MIDDLE HOOK\n04A8          ; Lu #       CYRILLIC CAPITAL LETTER ABKHASIAN HA\n04AA          ; Lu #       CYRILLIC CAPITAL LETTER ES WITH DESCENDER\n04AC          ; Lu #       CYRILLIC CAPITAL LETTER TE WITH DESCENDER\n04AE          ; Lu #       CYRILLIC CAPITAL LETTER STRAIGHT U\n04B0          ; Lu #       CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE\n04B2          ; Lu #       CYRILLIC CAPITAL LETTER HA WITH DESCENDER\n04B4          ; Lu #       CYRILLIC CAPITAL LIGATURE TE TSE\n04B6          ; Lu #       CYRILLIC CAPITAL LETTER CHE WITH DESCENDER\n04B8          ; Lu #       CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE\n04BA          ; Lu #       CYRILLIC CAPITAL LETTER SHHA\n04BC          ; Lu #       CYRILLIC CAPITAL LETTER ABKHASIAN CHE\n04BE          ; Lu #       CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER\n04C0..04C1    ; Lu #   [2] CYRILLIC LETTER PALOCHKA..CYRILLIC CAPITAL LETTER ZHE WITH BREVE\n04C3          ; Lu #       CYRILLIC CAPITAL LETTER KA WITH HOOK\n04C5          ; Lu #       CYRILLIC CAPITAL LETTER EL WITH TAIL\n04C7          ; Lu #       CYRILLIC CAPITAL LETTER EN WITH HOOK\n04C9          ; Lu #       CYRILLIC CAPITAL LETTER EN WITH TAIL\n04CB          ; Lu #       CYRILLIC CAPITAL LETTER KHAKASSIAN CHE\n04CD          ; Lu #       CYRILLIC CAPITAL LETTER EM WITH TAIL\n04D0          ; Lu #       CYRILLIC CAPITAL LETTER A WITH BREVE\n04D2          ; Lu #       CYRILLIC CAPITAL LETTER A WITH DIAERESIS\n04D4          ; Lu #       CYRILLIC CAPITAL LIGATURE A IE\n04D6          ; Lu #       CYRILLIC CAPITAL LETTER IE WITH BREVE\n04D8          ; Lu #       CYRILLIC CAPITAL LETTER SCHWA\n04DA          ; Lu #       CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS\n04DC          ; Lu #       CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS\n04DE          ; Lu #       CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS\n04E0          ; Lu #       CYRILLIC CAPITAL LETTER ABKHASIAN DZE\n04E2          ; Lu #       CYRILLIC CAPITAL LETTER I WITH MACRON\n04E4          ; Lu #       CYRILLIC CAPITAL LETTER I WITH DIAERESIS\n04E6          ; Lu #       CYRILLIC CAPITAL LETTER O WITH DIAERESIS\n04E8          ; Lu #       CYRILLIC CAPITAL LETTER BARRED O\n04EA          ; Lu #       CYRILLIC CAPITAL LETTER BARRED O WITH DIAERESIS\n04EC          ; Lu #       CYRILLIC CAPITAL LETTER E WITH DIAERESIS\n04EE          ; Lu #       CYRILLIC CAPITAL LETTER U WITH MACRON\n04F0          ; Lu #       CYRILLIC CAPITAL LETTER U WITH DIAERESIS\n04F2          ; Lu #       CYRILLIC CAPITAL LETTER U WITH DOUBLE ACUTE\n04F4          ; Lu #       CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS\n04F6          ; Lu #       CYRILLIC CAPITAL LETTER GHE WITH DESCENDER\n04F8          ; Lu #       CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS\n04FA          ; Lu #       CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK\n04FC          ; Lu #       CYRILLIC CAPITAL LETTER HA WITH HOOK\n04FE          ; Lu #       CYRILLIC CAPITAL LETTER HA WITH STROKE\n0500          ; Lu #       CYRILLIC CAPITAL LETTER KOMI DE\n0502          ; Lu #       CYRILLIC CAPITAL LETTER KOMI DJE\n0504          ; Lu #       CYRILLIC CAPITAL LETTER KOMI ZJE\n0506          ; Lu #       CYRILLIC CAPITAL LETTER KOMI DZJE\n0508          ; Lu #       CYRILLIC CAPITAL LETTER KOMI LJE\n050A          ; Lu #       CYRILLIC CAPITAL LETTER KOMI NJE\n050C          ; Lu #       CYRILLIC CAPITAL LETTER KOMI SJE\n050E          ; Lu #       CYRILLIC CAPITAL LETTER KOMI TJE\n0510          ; Lu #       CYRILLIC CAPITAL LETTER REVERSED ZE\n0512          ; Lu #       CYRILLIC CAPITAL LETTER EL WITH HOOK\n0514          ; Lu #       CYRILLIC CAPITAL LETTER LHA\n0516          ; Lu #       CYRILLIC CAPITAL LETTER RHA\n0518          ; Lu #       CYRILLIC CAPITAL LETTER YAE\n051A          ; Lu #       CYRILLIC CAPITAL LETTER QA\n051C          ; Lu #       CYRILLIC CAPITAL LETTER WE\n051E          ; Lu #       CYRILLIC CAPITAL LETTER ALEUT KA\n0520          ; Lu #       CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK\n0522          ; Lu #       CYRILLIC CAPITAL LETTER EN WITH MIDDLE HOOK\n0524          ; Lu #       CYRILLIC CAPITAL LETTER PE WITH DESCENDER\n0526          ; Lu #       CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER\n0528          ; Lu #       CYRILLIC CAPITAL LETTER EN WITH LEFT HOOK\n052A          ; Lu #       CYRILLIC CAPITAL LETTER DZZHE\n052C          ; Lu #       CYRILLIC CAPITAL LETTER DCHE\n052E          ; Lu #       CYRILLIC CAPITAL LETTER EL WITH DESCENDER\n0531..0556    ; Lu #  [38] ARMENIAN CAPITAL LETTER AYB..ARMENIAN CAPITAL LETTER FEH\n10A0..10C5    ; Lu #  [38] GEORGIAN CAPITAL LETTER AN..GEORGIAN CAPITAL LETTER HOE\n10C7          ; Lu #       GEORGIAN CAPITAL LETTER YN\n10CD          ; Lu #       GEORGIAN CAPITAL LETTER AEN\n13A0..13F5    ; Lu #  [86] CHEROKEE LETTER A..CHEROKEE LETTER MV\n1C89          ; Lu #       CYRILLIC CAPITAL LETTER TJE\n1C90..1CBA    ; Lu #  [43] GEORGIAN MTAVRULI CAPITAL LETTER AN..GEORGIAN MTAVRULI CAPITAL LETTER AIN\n1CBD..1CBF    ; Lu #   [3] GEORGIAN MTAVRULI CAPITAL LETTER AEN..GEORGIAN MTAVRULI CAPITAL LETTER LABIAL SIGN\n1E00          ; Lu #       LATIN CAPITAL LETTER A WITH RING BELOW\n1E02          ; Lu #       LATIN CAPITAL LETTER B WITH DOT ABOVE\n1E04          ; Lu #       LATIN CAPITAL LETTER B WITH DOT BELOW\n1E06          ; Lu #       LATIN CAPITAL LETTER B WITH LINE BELOW\n1E08          ; Lu #       LATIN CAPITAL LETTER C WITH CEDILLA AND ACUTE\n1E0A          ; Lu #       LATIN CAPITAL LETTER D WITH DOT ABOVE\n1E0C          ; Lu #       LATIN CAPITAL LETTER D WITH DOT BELOW\n1E0E          ; Lu #       LATIN CAPITAL LETTER D WITH LINE BELOW\n1E10          ; Lu #       LATIN CAPITAL LETTER D WITH CEDILLA\n1E12          ; Lu #       LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW\n1E14          ; Lu #       LATIN CAPITAL LETTER E WITH MACRON AND GRAVE\n1E16          ; Lu #       LATIN CAPITAL LETTER E WITH MACRON AND ACUTE\n1E18          ; Lu #       LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW\n1E1A          ; Lu #       LATIN CAPITAL LETTER E WITH TILDE BELOW\n1E1C          ; Lu #       LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE\n1E1E          ; Lu #       LATIN CAPITAL LETTER F WITH DOT ABOVE\n1E20          ; Lu #       LATIN CAPITAL LETTER G WITH MACRON\n1E22          ; Lu #       LATIN CAPITAL LETTER H WITH DOT ABOVE\n1E24          ; Lu #       LATIN CAPITAL LETTER H WITH DOT BELOW\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Concurrency and String Processing Modules\nDESCRIPTION: Sets up link libraries and modules for experimental concurrency and string processing features if enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnittest/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_stdlib_unittest_link_libraries \"\")\nset(swift_stdlib_unittest_modules \"\")\nif (SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY)\n  list(APPEND swift_stdlib_unittest_link_libraries \"swift_Concurrency\")\n  list(APPEND swift_stdlib_unittest_modules \"_Concurrency\")\nendif()\nif (SWIFT_ENABLE_EXPERIMENTAL_STRING_PROCESSING)\n  list(APPEND swift_stdlib_unittest_modules \"_StringProcessing\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building libdispatch for Android\nDESCRIPTION: CMake and Ninja commands to build libdispatch for Android. This component is essential for concurrent programming in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/AndroidBuild.md#2025-04-23_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\nmd S:\\b\\a\\libdispatch\ncd S:\\b\\a\\libdispatch\ncmake -C S:\\swift-build\\cmake\\caches\\android-armv7.cmake                                                                ^\n  -DSWIFT_ANDROID_SDK=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk                    ^\n  -C S:\\swift-build\\cmake\\caches\\android-armv7-swift-flags.cmake                                                        ^\n  -G Ninja                                                                                                              ^\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo                                                                                     ^\n  -DCMAKE_INSTALL_PREFIX=S:/b/a/Library/Developer/Platforms/android.platform/Developer/SDKs/android.sdk/usr             ^\n  -DCMAKE_SWIFT_COMPILER=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr/bin/swiftc.exe ^\n  -DCMAKE_TOOLCHAIN_FILE=S:\\swift-build\\cmake\\toolchains\\android.toolchain.cmake                                        ^\n  -DANDROID_ALTERNATE_TOOLCHAIN=S:/b/a/Library/Developer/Toolchains/unknown-Asserts-development.xctoolchain/usr         ^\n  -DENABLE_SWIFT=YES                                                                                                    ^\n  -DENABLE_TESTING=NO                                                                                                   ^\n  S:/swift-corelibs-libdispatch\nninja\n```\n\n----------------------------------------\n\nTITLE: Setting SWIFT_PARALLEL_LINK_JOBS Cache Variable in CMake\nDESCRIPTION: Defines a CMake cache variable `SWIFT_PARALLEL_LINK_JOBS` of type STRING. This variable allows specifying the maximum number of concurrent linker jobs specifically for Swift targets. It's noted to work only with the Ninja generator in CMake 3.0 and above. Defaults to an empty string (no limit imposed here).\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_28\n\nLANGUAGE: cmake\nCODE:\n```\n# The following only works with the Ninja generator in CMake >= 3.0.\nset(SWIFT_PARALLEL_LINK_JOBS \"\" CACHE STRING\n  \"Define the maximum number of linker jobs for swift.\")\n```\n\n----------------------------------------\n\nTITLE: Defining Zero Width Joiner Code Point\nDESCRIPTION: Defines the Unicode code point for the Zero Width Joiner (ZWJ) character used for special text combining behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n200D          ; ZWJ # Cf       ZERO WIDTH JOINER\n```\n\n----------------------------------------\n\nTITLE: Generic Swift Stack Extension\nDESCRIPTION: Example of a Swift extension with a generic where clause adding functionality to Stack.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_62\n\nLANGUAGE: swift\nCODE:\n```\nextension Stack where Element: Equatable {\n  func isTop(_ item: Element) -> Bool {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Latin Unicode Character Range Definitions\nDESCRIPTION: Detailed mapping of Unicode code point ranges for Latin script characters, including their categories (L&, Lo, Lm, Nl) and character descriptions. Covers basic Latin letters, modified forms, ligatures, and special variants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n0041..005A    ; Latin # L&  [26] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER Z\n0061..007A    ; Latin # L&  [26] LATIN SMALL LETTER A..LATIN SMALL LETTER Z\n00AA          ; Latin # Lo       FEMININE ORDINAL INDICATOR\n00BA          ; Latin # Lo       MASCULINE ORDINAL INDICATOR\n00C0..00D6    ; Latin # L&  [23] LATIN CAPITAL LETTER A WITH GRAVE..LATIN CAPITAL LETTER O WITH DIAERESIS\n[...truncated for brevity...]\n1DF25..1DF2A  ; Latin # L&   [6] LATIN SMALL LETTER D WITH MID-HEIGHT LEFT HOOK..LATIN SMALL LETTER T WITH MID-HEIGHT LEFT HOOK\n```\n\n----------------------------------------\n\nTITLE: Control Flow Handling with Enum Definitions in Swift\nDESCRIPTION: Shows how enums are used to represent possible control flow paths between basic blocks in the differentiation process, with each enum case containing the struct for the successor block.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nenum EnumBB0 {\n  case BB1(StructBB1)\n  case BB2(StructBB2)\n}\nenum EnumBB1 {\n  case BB3(StructBB3)\n}\nenum EnumBB2 {\n  case BB3(StructBB3)\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Sub-Module Functions and Types\nDESCRIPTION: Defines functions and types from a submodule, including a function, enum type with constants, and an unnamed enumerator constant.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_30\n\nLANGUAGE: Swift\nCODE:\n```\nfunc fooSubFunc1(_ a: Int32) -> Int32\nstruct FooSubEnum1 : RawRepresentable, Equatable {\n  init(_ rawValue: UInt32)\n  init(rawValue: UInt32)\n  var rawValue: UInt32\n}\nvar FooSubEnum1X: FooSubEnum1 { get }\nvar FooSubEnum1Y: FooSubEnum1 { get }\nvar FooSubUnnamedEnumeratorA1: Int { get }\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Dynamic Replacements Compatibility Library Target\nDESCRIPTION: Defines and configures the swiftCompatibilityDynamicReplacements static library with specific compilation flags, dependencies, and deployment version requirements for Apple platforms. The library is set to be installed as part of the compiler component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CompatibilityDynamicReplacements/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(library_name \"swiftCompatibilityDynamicReplacements\")\n\nadd_swift_target_library(\"${library_name}\" STATIC\n  DynamicReplaceable.cpp\n\n  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}\n\n  C_COMPILE_FLAGS\n    ${CXX_COMPILE_FLAGS}\n    \"-DSWIFT_THREADING_IS_COMPATIBILITY_LIBRARY\"\n  LINK_FLAGS ${CXX_LINK_FLAGS}\n  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n\n  INSTALL_IN_COMPONENT compiler\n  INSTALL_WITH_SHARED)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for SignWriting\nDESCRIPTION: This snippet defines the Unicode block for SignWriting, including various symbols, modifiers, and punctuation marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_91\n\nLANGUAGE: Unicode\nCODE:\n```\n1D800..1D9FF  ; SignWriting # So [512] SIGNWRITING HAND-FIST INDEX..SIGNWRITING HEAD\n1DA00..1DA36  ; SignWriting # Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN\n1DA37..1DA3A  ; SignWriting # So   [4] SIGNWRITING AIR BLOW SMALL ROTATIONS..SIGNWRITING BREATH EXHALE\n1DA3B..1DA6C  ; SignWriting # Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT\n1DA6D..1DA74  ; SignWriting # So   [8] SIGNWRITING SHOULDER HIP SPINE..SIGNWRITING TORSO-FLOORPLANE TWISTING\n1DA75         ; SignWriting # Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS\n1DA76..1DA83  ; SignWriting # So  [14] SIGNWRITING LIMB COMBINATION..SIGNWRITING LOCATION DEPTH\n1DA84         ; SignWriting # Mn       SIGNWRITING LOCATION HEAD NECK\n1DA85..1DA86  ; SignWriting # So   [2] SIGNWRITING LOCATION TORSO..SIGNWRITING LOCATION LIMBS DIGITS\n1DA87..1DA8B  ; SignWriting # Po   [5] SIGNWRITING COMMA..SIGNWRITING PARENTHESIS\n1DA9B..1DA9F  ; SignWriting # Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6\n1DAA1..1DAAF  ; SignWriting # Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Carian Script\nDESCRIPTION: This snippet defines the Unicode character range for the Carian script, including letters. It specifies the code points, general category, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_52\n\nLANGUAGE: Unicode\nCODE:\n```\n102A0..102D0  ; Carian # Lo  [49] CARIAN LETTER A..CARIAN LETTER UUU3\n```\n\n----------------------------------------\n\nTITLE: Defining Variation_Selector Unicode Characters\nDESCRIPTION: This snippet defines Unicode code points for variation selector characters. These are used to specify alternate forms of characters in certain contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_27\n\nLANGUAGE: Unicode\nCODE:\n```\n180B..180D    ; Variation_Selector # Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\n180F          ; Variation_Selector # Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR\nFE00..FE0F    ; Variation_Selector # Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16\nE0100..E01EF  ; Variation_Selector # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Block for Kannada Script\nDESCRIPTION: Lists Unicode code points for Kannada script characters with their character types. Includes vowels, consonants, signs, and digits covering 91 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n0C80          ; Kannada # Lo       KANNADA SIGN SPACING CANDRABINDU\n0C81          ; Kannada # Mn       KANNADA SIGN CANDRABINDU\n0C82..0C83    ; Kannada # Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA\n0C84          ; Kannada # Po       KANNADA SIGN SIDDHAM\n0C85..0C8C    ; Kannada # Lo   [8] KANNADA LETTER A..KANNADA LETTER VOCALIC L\n0C8E..0C90    ; Kannada # Lo   [3] KANNADA LETTER E..KANNADA LETTER AI\n0C92..0CA8    ; Kannada # Lo  [23] KANNADA LETTER O..KANNADA LETTER NA\n0CAA..0CB3    ; Kannada # Lo  [10] KANNADA LETTER PA..KANNADA LETTER LLA\n0CB5..0CB9    ; Kannada # Lo   [5] KANNADA LETTER VA..KANNADA LETTER HA\n0CBC          ; Kannada # Mn       KANNADA SIGN NUKTA\n0CBD          ; Kannada # Lo       KANNADA SIGN AVAGRAHA\n0CBE          ; Kannada # Mc       KANNADA VOWEL SIGN AA\n0CBF          ; Kannada # Mn       KANNADA VOWEL SIGN I\n0CC0..0CC4    ; Kannada # Mc   [5] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN VOCALIC RR\n0CC6          ; Kannada # Mn       KANNADA VOWEL SIGN E\n0CC7..0CC8    ; Kannada # Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI\n0CCA..0CCB    ; Kannada # Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO\n0CCC..0CCD    ; Kannada # Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA\n0CD5..0CD6    ; Kannada # Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK\n0CDD..0CDE    ; Kannada # Lo   [2] KANNADA LETTER NAKAARA POLLU..KANNADA LETTER FA\n0CE0..0CE1    ; Kannada # Lo   [2] KANNADA LETTER VOCALIC RR..KANNADA LETTER VOCALIC LL\n0CE2..0CE3    ; Kannada # Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL\n0CE6..0CEF    ; Kannada # Nd  [10] KANNADA DIGIT ZERO..KANNADA DIGIT NINE\n0CF1..0CF2    ; Kannada # Lo   [2] KANNADA SIGN JIHVAMULIYA..KANNADA SIGN UPADHMANIYA\n0CF3          ; Kannada # Mc       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT\n\n# Total code points: 91\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Warang Citi Script\nDESCRIPTION: This snippet defines the Unicode block for the Warang Citi script, including capital and small letters, digits, and numbers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_85\n\nLANGUAGE: Unicode\nCODE:\n```\n118A0..118DF  ; Warang_Citi # L&  [64] WARANG CITI CAPITAL LETTER NGAA..WARANG CITI SMALL LETTER VIYO\n118E0..118E9  ; Warang_Citi # Nd  [10] WARANG CITI DIGIT ZERO..WARANG CITI DIGIT NINE\n118EA..118F2  ; Warang_Citi # No   [9] WARANG CITI NUMBER TEN..WARANG CITI NUMBER NINETY\n118FF         ; Warang_Citi # Lo       WARANG CITI OM\n```\n\n----------------------------------------\n\nTITLE: Objective-C Method SIL Instruction\nDESCRIPTION: Performs Objective-C method dispatch using objc_msgSend(). Not eligible for devirtualization optimization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_92\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'objc_method' sil-method-attributes?\n                      sil-operand ',' sil-decl-ref ':' sil-type\n\n%1 = objc_method %0 : $T, #T.method!foreign : $@convention(objc_method) U -> V\n// %0 must be of a class type or class metatype $T\n// #T.method must be a reference to an Objective-C method of T or\n// of one of its superclasses\n// %1 will be of type $U -> V\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Segmentation Test Cases with Hebrew Letter\nDESCRIPTION: Test cases showing word segmentation rules for Hebrew Letter Alef (05D0) with various combining characters and punctuation marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n÷ 05D0 ÷ 0001 ÷ #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 05D0 × 0308 ÷ 0001 ÷  #  ÷ [0.2] HEBREW LETTER ALEF (Hebrew_Letter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining Empty Protocol in Swift\nDESCRIPTION: Declares an empty protocol named SameNameProtocol without any required methods or properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\nprotocol SameNameProtocol {\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Runtime Tests Target Configuration\nDESCRIPTION: Sets up the SwiftRuntimeTests target with source files, compiler definitions, include directories, and linking configuration. Includes core runtime components and platform-specific dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/runtime/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_unittest(SwiftRuntimeTests IS_TARGET_TEST\n  Array.cpp\n  CompatibilityOverrideRuntime.cpp\n  CompatibilityOverrideConcurrency.cpp\n  Concurrent.cpp\n  Metadata.cpp\n  Enum.cpp\n  ExtendedExistential.cpp\n  Heap.cpp\n  PrebuiltStringMap.cpp\n  Refcounting.cpp\n  Stdlib.cpp\n  StackAllocator.cpp\n  TypeLayoutChecks.cpp\n  ${PLATFORM_SOURCES}\n\n  $<TARGET_OBJECTS:swiftRuntimeCore${SWIFT_PRIMARY_VARIANT_SUFFIX}>\n  $<TARGET_OBJECTS:swiftLLVMSupport${SWIFT_PRIMARY_VARIANT_SUFFIX}>\n  $<TARGET_OBJECTS:swiftDemangling${SWIFT_PRIMARY_VARIANT_SUFFIX}>)\n```\n\n----------------------------------------\n\nTITLE: Unicode ExtendNumLet Characters Definition\nDESCRIPTION: Defines the Unicode code points with the ExtendNumLet property, which are characters that can extend numeric or letter sequences. These include underscores, special spaces, and various connecting punctuation marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_14\n\nLANGUAGE: unicode-data\nCODE:\n```\n005F          ; ExtendNumLet # Pc       LOW LINE\n202F          ; ExtendNumLet # Zs       NARROW NO-BREAK SPACE\n203F..2040    ; ExtendNumLet # Pc   [2] UNDERTIE..CHARACTER TIE\n2054          ; ExtendNumLet # Pc       INVERTED UNDERTIE\nFE33..FE34    ; ExtendNumLet # Pc   [2] PRESENTATION FORM FOR VERTICAL LOW LINE..PRESENTATION FORM FOR VERTICAL WAVY LOW LINE\nFE4D..FE4F    ; ExtendNumLet # Pc   [3] DASHED LOW LINE..WAVY LOW LINE\nFF3F          ; ExtendNumLet # Pc       FULLWIDTH LOW LINE\n\n# Total code points: 11\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Prepended Concatenation Mark Properties\nDESCRIPTION: This snippet defines Unicode code points with the Prepended_Concatenation_Mark property. These are special characters used in certain writing systems that affect the layout or rendering of surrounding text.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_31\n\nLANGUAGE: Unicode\nCODE:\n```\n0600..0605    ; Prepended_Concatenation_Mark # Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n06DD          ; Prepended_Concatenation_Mark # Cf       ARABIC END OF AYAH\n070F          ; Prepended_Concatenation_Mark # Cf       SYRIAC ABBREVIATION MARK\n0890..0891    ; Prepended_Concatenation_Mark # Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE\n08E2          ; Prepended_Concatenation_Mark # Cf       ARABIC DISPUTED END OF AYAH\n110BD         ; Prepended_Concatenation_Mark # Cf       KAITHI NUMBER SIGN\n110CD         ; Prepended_Concatenation_Mark # Cf       KAITHI NUMBER SIGN ABOVE\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift String Processing Project with CMake\nDESCRIPTION: This CMake script configures the Swift String Processing project with version 6.1.0. It sets up position-independent code, adds module paths, handles build numbers, enforces top-level project constraints, defines compiler options, and adds subdirectories for the various components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Supplemental/StringProcessing/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.29)\n\nset(CMAKE_POSITION_INDEPENDENT_CODE YES)\n\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_SOURCE_DIR}/../cmake/modules\")\n\nif($ENV{BUILD_NUMBER})\n  math(EXPR BUILD_NUMBER \"$ENV{BUILD_NUMBER} % 65535\")\n  set(BUILD_NUMBER \".${BUILD_NUMBER}\")\nendif()\nproject(SwiftStringProcessing\n  LANGUAGES Swift C\n  VERSION 6.1.0${BUILD_NUMBER})\n\nif(NOT PROJECT_IS_TOP_LEVEL)\n  message(FATAL_ERROR \"Swift StringProcessing must build as a standalone project\")\nendif()\n\nset(${PROJECT_NAME}_SWIFTC_SOURCE_DIR\n  \"${PROJECT_SOURCE_DIR}/../../../\"\n  CACHE FILEPATH \"Path to the root source directory of the Swift compiler\")\n\nfind_package(SwiftCore)\n\ninclude(AvailabilityMacros)\n\nadd_compile_options(\n  $<$<COMPILE_LANGUAGE:Swift>:-explicit-module-build>\n  $<$<COMPILE_LANGUAGE:Swift>:-nostdlibimport>\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-implicit-string-processing-module-import>\")\n\nadd_subdirectory(_RegexParser)\nadd_subdirectory(_StringProcessing)\nadd_subdirectory(RegexBuilder)\n```\n\n----------------------------------------\n\nTITLE: Configuring swift-serialize-diagnostics Host Tool in CMake\nDESCRIPTION: Defines the swift-serialize-diagnostics host tool build configuration, specifying the main source file (swift-serialize-diagnostics.cpp), categorizing it under the 'tools' component, and indicating it doesn't use Swift. It also links the tool with the swiftLocalization library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-serialize-diagnostics/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_tool(swift-serialize-diagnostics\n  swift-serialize-diagnostics.cpp\n  SWIFT_COMPONENT tools\n  DOES_NOT_USE_SWIFT\n)\ntarget_link_libraries(swift-serialize-diagnostics PRIVATE\n  swiftLocalization)\n```\n\n----------------------------------------\n\nTITLE: Unicode Number Mapping Block - Number Ten\nDESCRIPTION: Mapping of Unicode code points that represent the number ten across different writing systems including Tamil, Malayalam, Ethiopian, Roman, and various ideographic representations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_14\n\nLANGUAGE: unicode\nCODE:\n```\n0BF0          ; 10.0 ; ; 10 # No       TAMIL NUMBER TEN\n0D70          ; 10.0 ; ; 10 # No       MALAYALAM NUMBER TEN\n1372          ; 10.0 ; ; 10 # No       ETHIOPIC NUMBER TEN\n2169          ; 10.0 ; ; 10 # Nl       ROMAN NUMERAL TEN\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Lydian Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Lydian script, including letters and a punctuation mark. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_53\n\nLANGUAGE: Unicode\nCODE:\n```\n10920..10939  ; Lydian # Lo  [26] LYDIAN LETTER A..LYDIAN LETTER C\n1093F         ; Lydian # Po       LYDIAN TRIANGULAR MARK\n```\n\n----------------------------------------\n\nTITLE: Defining White_Space Characters in Unicode\nDESCRIPTION: This snippet defines the Unicode code points that have the White_Space property. It includes control characters, spaces, and other whitespace characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_0\n\nLANGUAGE: unicode\nCODE:\n```\n0009..000D    ; White_Space # Cc   [5] <control-0009>..<control-000D>\n0020          ; White_Space # Zs       SPACE\n0085          ; White_Space # Cc       <control-0085>\n00A0          ; White_Space # Zs       NO-BREAK SPACE\n1680          ; White_Space # Zs       OGHAM SPACE MARK\n2000..200A    ; White_Space # Zs  [11] EN QUAD..HAIR SPACE\n2028          ; White_Space # Zl       LINE SEPARATOR\n2029          ; White_Space # Zp       PARAGRAPH SEPARATOR\n202F          ; White_Space # Zs       NARROW NO-BREAK SPACE\n205F          ; White_Space # Zs       MEDIUM MATHEMATICAL SPACE\n3000          ; White_Space # Zs       IDEOGRAPHIC SPACE\n```\n\n----------------------------------------\n\nTITLE: Configuring Sourcekitd Framework Build in CMake\nDESCRIPTION: Configures and builds the sourcekitd framework with public headers, symbol exports, and necessary dependencies. Includes system-specific linking options for Darwin and standalone build configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/XPC/Client/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(public_headers\n  ${SOURCEKITD_SOURCE_DIR}/include/sourcekitd/sourcekitd.h\n)\n\nset(EXPORTED_SYMBOL_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/sourcekitd.exports\")\n\n# FIXME: If you delete sourcekitd.framework, the soft links inside it need\n# a CMake reconfigure in order for them to be created.\n\nadd_sourcekit_framework(sourcekitd\n  ${public_headers}\n  sourcekitd.cpp\n  LLVM_LINK_COMPONENTS support\n  MODULEMAP module.modulemap\n  INSTALL_IN_COMPONENT sourcekit-xpc-service\n)\ntarget_link_libraries(sourcekitd PRIVATE sourcekitdAPI)\n\nif (SOURCEKIT_BUILT_STANDALONE)\n  # Create the symlink necessary to find the swift stdlib.\n  swift_create_post_build_symlink(sourcekitd\n    IS_DIRECTORY\n    SOURCE \"${SWIFTLIB_DIR}\"\n    DESTINATION \"${SOURCEKIT_LIBRARY_OUTPUT_INTDIR}/swift\"\n    COMMENT \"Creating symlink necessary to find the swift stdlib.\")\nendif()\n\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n  if(SWIFT_COMPILER_VERSION)\n    set_property(TARGET sourcekitd APPEND_STRING PROPERTY\n                 LINK_FLAGS \" -Wl,-current_version -Wl,${SWIFT_COMPILER_VERSION}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Logical_Order_Exception Character List Definition\nDESCRIPTION: A list of Unicode code points with the Logical_Order_Exception property, which identifies characters that do not follow the usual logical order in certain scripts, particularly for Thai and Lao vowel signs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_21\n\nLANGUAGE: Unicode\nCODE:\n```\n0E40..0E44    ; Logical_Order_Exception # Lo   [5] THAI CHARACTER SARA E..THAI CHARACTER SARA AI MAIMALAI\n0EC0..0EC4    ; Logical_Order_Exception # Lo   [5] LAO VOWEL SIGN E..LAO VOWEL SIGN AI\n19B5..19B7    ; Logical_Order_Exception # Lo   [3] NEW TAI LUE VOWEL SIGN E..NEW TAI LUE VOWEL SIGN O\n19BA          ; Logical_Order_Exception # Lo       NEW TAI LUE VOWEL SIGN AY\nAAB5..AAB6    ; Logical_Order_Exception # Lo   [2] TAI VIET VOWEL E..TAI VIET VOWEL O\nAAB9          ; Logical_Order_Exception # Lo       TAI VIET VOWEL UEA\nAABB..AABC    ; Logical_Order_Exception # Lo   [2] TAI VIET VOWEL AUE..TAI VIET VOWEL AY\n\n# Total code points: 19\n```\n\n----------------------------------------\n\nTITLE: Defining Hex_Digit Unicode Ranges\nDESCRIPTION: Defines Unicode ranges for hexadecimal digits including both ASCII and fullwidth variants. Covers digits 0-9 and letters A-F in both cases, totaling 44 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode-data\nCODE:\n```\n0030..0039    ; Hex_Digit # Nd  [10] DIGIT ZERO..DIGIT NINE\n0041..0046    ; Hex_Digit # L&   [6] LATIN CAPITAL LETTER A..LATIN CAPITAL LETTER F\n0061..0066    ; Hex_Digit # L&   [6] LATIN SMALL LETTER A..LATIN SMALL LETTER F\nFF10..FF19    ; Hex_Digit # Nd  [10] FULLWIDTH DIGIT ZERO..FULLWIDTH DIGIT NINE\nFF21..FF26    ; Hex_Digit # L&   [6] FULLWIDTH LATIN CAPITAL LETTER A..FULLWIDTH LATIN CAPITAL LETTER F\nFF41..FF46    ; Hex_Digit # L&   [6] FULLWIDTH LATIN SMALL LETTER A..FULLWIDTH LATIN SMALL LETTER F\n```\n\n----------------------------------------\n\nTITLE: Example SIL Lowered Function Type (Returning Float)\nDESCRIPTION: This snippet shows the lowered SIL type for a function stored within a generic context (specifically, `g.fn` where `g` is `Generator<(Int, Int) -> Float>`). The original function type `(Int, Int) -> Float` is lowered using the abstraction pattern `U -> V`, resulting in indirect passing/returning conventions (`@in`, `@out`) and specific ownership modifiers (`@callee_owned`, `@owned`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n@callee_owned () -> @owned @callee_owned (@in (Int, Int)) -> @out Float.\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Executable Device Tests\nDESCRIPTION: Command for running non-executable device tests using specific preset configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npreset=buildbot,tools=RA,stdlib=RD,test=non_executable\n@swift-ci Please test with preset macOS\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Compiler Sources for SIL Module\nDESCRIPTION: This snippet defines the Swift source files that make up the SIL module of the Swift compiler. It lists utility files for various operations within the SIL implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/SIL/Utilities/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nswift_compiler_sources(SIL\n  AccessUtils.swift\n  SequenceUtilities.swift\n  SmallProjectionPath.swift\n  WalkUtils.swift\n)\n```\n\n----------------------------------------\n\nTITLE: Special Consonant Form Definitions\nDESCRIPTION: Specifies codepoints for various special consonant forms including prefixed, preceding repha, subjoined, and medial consonants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\n111C2..111C3  ; Consonant_Prefixed # Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA\n0D4E          ; Consonant_Preceding_Repha # Lo       MALAYALAM LETTER DOT REPH\n0F8D..0F97    ; Consonant_Subjoined # Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unicode Character Breaking Rules for Special Characters\nDESCRIPTION: This code snippet demonstrates the grapheme breaking behavior when MALAYALAM LETTER DOT REPH (U+0D4E) interacts with special characters like emoji, control characters, and various combining marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_8\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0D4E × 231A ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] WATCH (ExtPict) ÷ [0.3]\n÷ 0D4E × 0308 ÷ 231A ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 0D4E × 0300 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING GRAVE ACCENT (Extend_ExtCccZwj) ÷ [0.3]\n÷ 0D4E × 0308 × 0300 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] COMBINING GRAVE ACCENT (Extend_ExtCccZwj) ÷ [0.3]\n÷ 0D4E × 0900 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] DEVANAGARI SIGN INVERTED CANDRABINDU (Extend_ConjunctLinkingScripts_ExtCccZwj) ÷ [0.3]\n÷ 0D4E × 0308 × 0900 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] DEVANAGARI SIGN INVERTED CANDRABINDU (Extend_ConjunctLinkingScripts_ExtCccZwj) ÷ [0.3]\n÷ 0D4E × 094D ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] DEVANAGARI SIGN VIRAMA (Extend_ConjunctLinkingScripts_ConjunctLinker_ExtCccZwj) ÷ [0.3]\n÷ 0D4E × 0308 × 094D ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] DEVANAGARI SIGN VIRAMA (Extend_ConjunctLinkingScripts_ConjunctLinker_ExtCccZwj) ÷ [0.3]\n÷ 0D4E × 200D ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [0.3]\n÷ 0D4E × 0308 × 200D ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.0] ZERO WIDTH JOINER (ZWJ_ExtCccZwj) ÷ [0.3]\n÷ 0D4E × 0378 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] <reserved-0378> (Other) ÷ [0.3]\n÷ 0D4E × 0308 ÷ 0378 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Generating Windows SDK VFS Overlay Configuration\nDESCRIPTION: Creates a YAML configuration file for VFS overlay that maps Windows SDK headers to module maps. This enables Clang to properly handle Windows SDK headers when compiling Swift code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/clang/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfile(CONFIGURE\n  OUTPUT windows-sdk-overlay.yaml\n  CONTENT [[\n---\nversion: 0\ncase-sensitive: false\nuse-external-names: false\nroots:\n  - name: \"@WindowsSdkDir@/Include/@WindowsSDKVersion@/um\"\n    type: directory\n    contents:\n      - name: module.modulemap\n        type: file\n        external-contents: \"@CMAKE_CURRENT_SOURCE_DIR@/winsdk.modulemap\"\n  - name: \"@UniversalCRTSdkDir@/Include/@UCRTVersion@/ucrt\"\n    type: directory\n    contents:\n      - name: module.modulemap\n        type: file\n        external-contents: \"@CMAKE_CURRENT_SOURCE_DIR@/ucrt.modulemap\"\n  - name: \"@VCToolsInstallDir@include\"\n    type: directory\n    contents:\n      - name: module.modulemap\n        type: file\n        external-contents: \"@CMAKE_CURRENT_SOURCE_DIR@/vcruntime.modulemap\"\n      - name: vcruntime.apinotes\n        type: file\n        external-contents: \"@CMAKE_CURRENT_SOURCE_DIR@/vcruntime.apinotes\"\n]]\nESCAPE_QUOTES @ONLY NEWLINE_STYLE LF)\n```\n\n----------------------------------------\n\nTITLE: Installing Swift API Checker Components in CMake\nDESCRIPTION: Sets up the installation of the Swift API checker components, including the main script, module lists, and baseline framework data to appropriate locations in the toolchain.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(framework \"FrameworkABIBaseline\")\nswift_install_in_component(PROGRAMS \"swift-api-checker.py\"\n                           DESTINATION \"bin\"\n                           COMPONENT toolchain-tools)\nswift_install_in_component(DIRECTORY \"sdk-module-lists\"\n                           DESTINATION \"bin\"\n                           COMPONENT toolchain-tools)\nswift_install_in_component(DIRECTORY \"${framework}\"\n                           DESTINATION \"lib/swift\"\n                           COMPONENT toolchain-tools)\n```\n\n----------------------------------------\n\nTITLE: Configuring Lit Site Configuration File for Swift Testing\nDESCRIPTION: Creates and configures a Lit site configuration file for Swift tests. This function handles path replacement based on build configuration and optionally installs the configuration file as part of the test suite.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(swift_configure_lit_site_cfg source_path destination_path installed_name)\n  if (CMAKE_CFG_INTDIR STREQUAL \".\")\n    set(SWIFT_BUILD_MODE \".\")\n  else ()\n    set(SWIFT_BUILD_MODE \"%(build_mode)s\")\n  endif ()\n\n  string(REPLACE ${CMAKE_CFG_INTDIR} ${SWIFT_BUILD_MODE} LLVM_TOOLS_DIR ${LLVM_TOOLS_BINARY_DIR})\n  string(REPLACE ${CMAKE_CFG_INTDIR} ${SWIFT_BUILD_MODE} LLVM_LIBS_DIR  ${LLVM_LIBRARY_DIR})\n\n  if (XCODE)\n    string(REPLACE ${CMAKE_CFG_INTDIR} Debug LIT_SWIFTLIB_DIR ${SWIFTLIB_DIR})\n  else ()\n    set(LIT_SWIFTLIB_DIR ${SWIFTLIB_DIR})\n  endif ()\n\n  configure_file(\"${source_path}\" \"${destination_path}\" @ONLY)\n\n  if(NOT \"${installed_name}\" STREQUAL \"\")\n    swift_install_in_component(FILES \"${destination_path}\"\n                               RENAME \"${installed_name}\"\n                               DESTINATION \"share/swift/testsuite\"\n                               COMPONENT testsuite-tools)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Testing Mangled Name Parsing - Swift\nDESCRIPTION: Collection of malformed/fuzzed mangled names that previously caused issues in Swift's getObjCClassByMangledName function. These test cases help verify the robustness of Swift's name demangling implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/objc-getclass.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n3…KySSyGSkySySSGiG3(KˇˇˇˇˇˇˇˇˇˇˇˇˇˇCwKySSiKySS\nSSmSySyySGGSGyGSyySyySySSGGSGyS78iSLccSGSyySSySSGGccLcV1yVS~^§!zzzzzzzzzzzzhzzzzzSLzSEzzzzzzzzzzzzzzzzzxxxxx8K_S0ttnIx4_\nˇyySySyySySyGnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnSgZ1laSgSg\nSSx3…KySyySGSSG_S2ItLHPˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇMd7KLPlKSSFTc•OSgS\n3…KySSiGSeySySSGiGSiySySSGiG3(KˇˇˇˇˇˇˇˇˇˇˇˇˇˇCwKySSiKySS\n3…KySSiGSyySySSGiG3(KˇˇˇˇˇˇˇˇˇˇˇˇˇˇCwKySSiKySS\nSyySyySSySyyGSyySyyGGSGyGSyySySyySySSGGSGGˇˇˇˇˇS4S_SmˇˇAGmmmmmmmmmtLHPL(LHPTVdLHV\n\n1_SxSt_S4KSgS9OSgRSLAPALÂ\n\nBwXp\n1TSpXpBOXp\nSJSJSFSrSJSKSKSKSKm_tmcXpXpStmcXpXpSE_tmcXpXpmcXpXpStmcXpXpSE_tmcXpBpXp!E_tXpXpStmcXpZpSE_tmcXpXpSE_tmc3\nx_xSx_SxTd_SySyyS6dyGˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇˇBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBˇˇˇˇˇˇˇˇˇˇXpXpXpf:8–VSBP0\n\nSlSIxip6/XXS*\"PLEPÓd}}}}}}}\n\nySfmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmf%mmmmmmmmmmmmmf%w\n\n8PDDoKcinYlistSi_natureNatur^natu`Dnat1\n```\n\n----------------------------------------\n\nTITLE: Loop Optimization with Relocated Retain Operations\nDESCRIPTION: Intermediate transformation showing retain operations moved across conditional branches with compensating releases added to preserve reference count correctness along early exit paths.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_12\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  br bb1\n\n# Iteration 1\nbb1: // preds: bb0\n  strong_retain %0 : $Builtin.NativeObject               (1)\n  cond_br ..., bb2, bb8\n\nbb2: // preds: bb1\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject              (2)\n  br bb3\n\n# Iteration 2\nbb3: // preds: bb2\n  strong_retain %0 : $Builtin.NativeObject               (3)\n  cond_br ..., bb4, bb8\n\nbb4: // preds: bb3\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject              (4)\n  br bb5\n\n# Iteration 3\nbb5: // preds: bb4\n  strong_retain %0 : $Builtin.NativeObject               (5)\n  cond_br ..., bb6, bb8\n\nbb6: // preds: bb5\n  apply %f(%0)\n  apply %f(%0)\n  cond_br ..., bb7, bb8\n\nbb7: // preds: bb6\n  strong_release %0 : $Builtin.NativeObject              (7*)\n  br bb9\n\nbb8: // Preds: bb1, bb3, bb5, bb6\n  strong_release %0 : $Builtin.NativeObject              (8*)\n  br bb9\n\nbb9:\n  return ...\n```\n\n----------------------------------------\n\nTITLE: Unicode Nonspacing Mark (Mn) Code Point Ranges\nDESCRIPTION: Defines the Unicode code point ranges for characters in the Nonspacing_Mark (Mn) category. These are combining marks that don't occupy their own spacing and attach to a base character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_13\n\nLANGUAGE: unicode\nCODE:\n```\n119D4..119D7  ; Mn #   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR\n119DA..119DB  ; Mn #   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI\n[...additional ranges...]\nE0100..E01EF  ; Mn # [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n\n# Total code points: 2020\n```\n\n----------------------------------------\n\nTITLE: Defining Grapheme_Base Unicode Code Points\nDESCRIPTION: This data file defines Unicode code points that belong to the Grapheme_Base category. Each line follows the format of either a single code point (e.g., '0020') or a code point range (e.g., '0021..0023') followed by a semicolon and the 'Grapheme_Base' classification. This information is used by text processing systems to determine grapheme cluster boundaries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_39\n\nLANGUAGE: plain text\nCODE:\n```\n#  they may be either in Grapheme_Base, or in Grapheme_Extend, or in neither.\n\n0020          ; Grapheme_Base\n0021..0023    ; Grapheme_Base\n0024          ; Grapheme_Base\n0025..0027    ; Grapheme_Base\n0028          ; Grapheme_Base\n0029          ; Grapheme_Base\n002A          ; Grapheme_Base\n002B          ; Grapheme_Base\n002C          ; Grapheme_Base\n002D          ; Grapheme_Base\n002E..002F    ; Grapheme_Base\n0030..0039    ; Grapheme_Base\n003A..003B    ; Grapheme_Base\n003C..003E    ; Grapheme_Base\n003F..0040    ; Grapheme_Base\n0041..005A    ; Grapheme_Base\n005B          ; Grapheme_Base\n005C          ; Grapheme_Base\n005D          ; Grapheme_Base\n005E          ; Grapheme_Base\n005F          ; Grapheme_Base\n0060          ; Grapheme_Base\n0061..007A    ; Grapheme_Base\n007B          ; Grapheme_Base\n007C          ; Grapheme_Base\n007D          ; Grapheme_Base\n007E          ; Grapheme_Base\n00A0          ; Grapheme_Base\n00A1          ; Grapheme_Base\n00A2..00A5    ; Grapheme_Base\n00A6          ; Grapheme_Base\n00A7          ; Grapheme_Base\n00A8          ; Grapheme_Base\n00A9          ; Grapheme_Base\n00AA          ; Grapheme_Base\n00AB          ; Grapheme_Base\n00AC          ; Grapheme_Base\n00AE          ; Grapheme_Base\n00AF          ; Grapheme_Base\n00B0          ; Grapheme_Base\n00B1          ; Grapheme_Base\n00B2..00B3    ; Grapheme_Base\n00B4          ; Grapheme_Base\n00B5          ; Grapheme_Base\n00B6..00B7    ; Grapheme_Base\n00B8          ; Grapheme_Base\n00B9          ; Grapheme_Base\n00BA          ; Grapheme_Base\n00BB          ; Grapheme_Base\n00BC..00BE    ; Grapheme_Base\n00BF          ; Grapheme_Base\n00C0..00D6    ; Grapheme_Base\n00D7          ; Grapheme_Base\n00D8..00F6    ; Grapheme_Base\n00F7          ; Grapheme_Base\n00F8..01BA    ; Grapheme_Base\n01BB          ; Grapheme_Base\n01BC..01BF    ; Grapheme_Base\n01C0..01C3    ; Grapheme_Base\n01C4..0293    ; Grapheme_Base\n0294          ; Grapheme_Base\n0295..02AF    ; Grapheme_Base\n02B0..02C1    ; Grapheme_Base\n02C2..02C5    ; Grapheme_Base\n02C6..02D1    ; Grapheme_Base\n02D2..02DF    ; Grapheme_Base\n02E0..02E4    ; Grapheme_Base\n02E5..02EB    ; Grapheme_Base\n02EC          ; Grapheme_Base\n02ED          ; Grapheme_Base\n02EE          ; Grapheme_Base\n02EF..02FF    ; Grapheme_Base\n0370..0373    ; Grapheme_Base\n0374          ; Grapheme_Base\n0375          ; Grapheme_Base\n0376..0377    ; Grapheme_Base\n037A          ; Grapheme_Base\n037B..037D    ; Grapheme_Base\n037E          ; Grapheme_Base\n037F          ; Grapheme_Base\n0384..0385    ; Grapheme_Base\n0386          ; Grapheme_Base\n0387          ; Grapheme_Base\n0388..038A    ; Grapheme_Base\n038C          ; Grapheme_Base\n038E..03A1    ; Grapheme_Base\n03A3..03F5    ; Grapheme_Base\n03F6          ; Grapheme_Base\n03F7..0481    ; Grapheme_Base\n0482          ; Grapheme_Base\n048A..052F    ; Grapheme_Base\n0531..0556    ; Grapheme_Base\n0559          ; Grapheme_Base\n055A..055F    ; Grapheme_Base\n0560..0588    ; Grapheme_Base\n0589          ; Grapheme_Base\n058A          ; Grapheme_Base\n058D..058E    ; Grapheme_Base\n058F          ; Grapheme_Base\n05BE          ; Grapheme_Base\n05C0          ; Grapheme_Base\n05C3          ; Grapheme_Base\n05C6          ; Grapheme_Base\n05D0..05EA    ; Grapheme_Base\n05EF..05F2    ; Grapheme_Base\n05F3..05F4    ; Grapheme_Base\n0606..0608    ; Grapheme_Base\n0609..060A    ; Grapheme_Base\n060B          ; Grapheme_Base\n060C..060D    ; Grapheme_Base\n060E..060F    ; Grapheme_Base\n061B          ; Grapheme_Base\n061D..061F    ; Grapheme_Base\n0620..063F    ; Grapheme_Base\n0640          ; Grapheme_Base\n0641..064A    ; Grapheme_Base\n0660..0669    ; Grapheme_Base\n066A..066D    ; Grapheme_Base\n066E..066F    ; Grapheme_Base\n0671..06D3    ; Grapheme_Base\n06D4          ; Grapheme_Base\n06D5          ; Grapheme_Base\n06DE          ; Grapheme_Base\n06E5..06E6    ; Grapheme_Base\n06E9          ; Grapheme_Base\n06EE..06EF    ; Grapheme_Base\n06F0..06F9    ; Grapheme_Base\n06FA..06FC    ; Grapheme_Base\n06FD..06FE    ; Grapheme_Base\n06FF          ; Grapheme_Base\n0700..070D    ; Grapheme_Base\n0710          ; Grapheme_Base\n0712..072F    ; Grapheme_Base\n074D..07A5    ; Grapheme_Base\n07B1          ; Grapheme_Base\n07C0..07C9    ; Grapheme_Base\n07CA..07EA    ; Grapheme_Base\n07F4..07F5    ; Grapheme_Base\n07F6          ; Grapheme_Base\n07F7..07F9    ; Grapheme_Base\n07FA          ; Grapheme_Base\n07FE..07FF    ; Grapheme_Base\n0800..0815    ; Grapheme_Base\n081A          ; Grapheme_Base\n0824          ; Grapheme_Base\n0828          ; Grapheme_Base\n0830..083E    ; Grapheme_Base\n0840..0858    ; Grapheme_Base\n085E          ; Grapheme_Base\n0860..086A    ; Grapheme_Base\n0870..0887    ; Grapheme_Base\n0888          ; Grapheme_Base\n0889..088E    ; Grapheme_Base\n08A0..08C8    ; Grapheme_Base\n08C9          ; Grapheme_Base\n0903          ; Grapheme_Base\n0904..0939    ; Grapheme_Base\n093B          ; Grapheme_Base\n093D          ; Grapheme_Base\n093E..0940    ; Grapheme_Base\n0949..094C    ; Grapheme_Base\n094E..094F    ; Grapheme_Base\n0950          ; Grapheme_Base\n0958..0961    ; Grapheme_Base\n0964..0965    ; Grapheme_Base\n0966..096F    ; Grapheme_Base\n0970          ; Grapheme_Base\n0971          ; Grapheme_Base\n0972..0980    ; Grapheme_Base\n0982..0983    ; Grapheme_Base\n0985..098C    ; Grapheme_Base\n098F..0990    ; Grapheme_Base\n0993..09A8    ; Grapheme_Base\n09AA..09B0    ; Grapheme_Base\n09B2          ; Grapheme_Base\n09B6..09B9    ; Grapheme_Base\n09BD          ; Grapheme_Base\n09BF..09C0    ; Grapheme_Base\n09C7..09C8    ; Grapheme_Base\n09CB..09CC    ; Grapheme_Base\n09CE          ; Grapheme_Base\n09DC..09DD    ; Grapheme_Base\n09DF..09E1    ; Grapheme_Base\n09E6..09EF    ; Grapheme_Base\n09F0..09F1    ; Grapheme_Base\n09F2..09F3    ; Grapheme_Base\n09F4..09F9    ; Grapheme_Base\n09FA          ; Grapheme_Base\n09FB          ; Grapheme_Base\n09FC          ; Grapheme_Base\n09FD          ; Grapheme_Base\n0A03          ; Grapheme_Base\n0A05..0A0A    ; Grapheme_Base\n0A0F..0A10    ; Grapheme_Base\n0A13..0A28    ; Grapheme_Base\n0A2A..0A30    ; Grapheme_Base\n0A32..0A33    ; Grapheme_Base\n0A35..0A36    ; Grapheme_Base\n0A38..0A39    ; Grapheme_Base\n0A3E..0A40    ; Grapheme_Base\n0A59..0A5C    ; Grapheme_Base\n0A5E          ; Grapheme_Base\n0A66..0A6F    ; Grapheme_Base\n0A72..0A74    ; Grapheme_Base\n0A76          ; Grapheme_Base\n0A83          ; Grapheme_Base\n0A85..0A8D    ; Grapheme_Base\n0A8F..0A91    ; Grapheme_Base\n0A93..0AA8    ; Grapheme_Base\n0AAA..0AB0    ; Grapheme_Base\n0AB2..0AB3    ; Grapheme_Base\n0AB5..0AB9    ; Grapheme_Base\n0ABD          ; Grapheme_Base\n0ABE..0AC0    ; Grapheme_Base\n0AC9          ; Grapheme_Base\n0ACB..0ACC    ; Grapheme_Base\n0AD0          ; Grapheme_Base\n0AE0..0AE1    ; Grapheme_Base\n0AE6..0AEF    ; Grapheme_Base\n0AF0          ; Grapheme_Base\n0AF1          ; Grapheme_Base\n0AF9          ; Grapheme_Base\n0B02..0B03    ; Grapheme_Base\n0B05..0B0C    ; Grapheme_Base\n0B0F..0B10    ; Grapheme_Base\n0B13..0B28    ; Grapheme_Base\n0B2A..0B30    ; Grapheme_Base\n0B32..0B33    ; Grapheme_Base\n0B35..0B39    ; Grapheme_Base\n0B3D          ; Grapheme_Base\n0B40          ; Grapheme_Base\n0B47..0B48    ; Grapheme_Base\n0B4B..0B4C    ; Grapheme_Base\n0B5C..0B5D    ; Grapheme_Base\n0B5F..0B61    ; Grapheme_Base\n0B66..0B6F    ; Grapheme_Base\n0B70          ; Grapheme_Base\n0B71          ; Grapheme_Base\n0B72..0B77    ; Grapheme_Base\n0B83          ; Grapheme_Base\n0B85..0B8A    ; Grapheme_Base\n0B8E..0B90    ; Grapheme_Base\n0B92..0B95    ; Grapheme_Base\n0B99..0B9A    ; Grapheme_Base\n0B9C          ; Grapheme_Base\n0B9E..0B9F    ; Grapheme_Base\n0BA3..0BA4    ; Grapheme_Base\n0BA8..0BAA    ; Grapheme_Base\n0BAE..0BB9    ; Grapheme_Base\n0BBF          ; Grapheme_Base\n0BC1..0BC2    ; Grapheme_Base\n0BC6..0BC8    ; Grapheme_Base\n0BCA..0BCC    ; Grapheme_Base\n0BD0          ; Grapheme_Base\n0BE6..0BEF    ; Grapheme_Base\n0BF0..0BF2    ; Grapheme_Base\n0BF3..0BF8    ; Grapheme_Base\n0BF9          ; Grapheme_Base\n0BFA          ; Grapheme_Base\n0C01..0C03    ; Grapheme_Base\n0C05..0C0C    ; Grapheme_Base\n0C0E..0C10    ; Grapheme_Base\n0C12..0C28    ; Grapheme_Base\n0C2A..0C39    ; Grapheme_Base\n0C3D          ; Grapheme_Base\n0C41..0C44    ; Grapheme_Base\n0C58..0C5A    ; Grapheme_Base\n0C5D          ; Grapheme_Base\n0C60..0C61    ; Grapheme_Base\n0C66..0C6F    ; Grapheme_Base\n0C77          ; Grapheme_Base\n0C78..0C7E    ; Grapheme_Base\n0C7F          ; Grapheme_Base\n0C80          ; Grapheme_Base\n0C82..0C83    ; Grapheme_Base\n0C84          ; Grapheme_Base\n0C85..0C8C    ; Grapheme_Base\n0C8E..0C90    ; Grapheme_Base\n0C92..0CA8    ; Grapheme_Base\n0CAA..0CB3    ; Grapheme_Base\n0CB5..0CB9    ; Grapheme_Base\n0CBD          ; Grapheme_Base\n0CBE          ; Grapheme_Base\n0CC1          ; Grapheme_Base\n0CC3..0CC4    ; Grapheme_Base\n0CDD..0CDE    ; Grapheme_Base\n0CE0..0CE1    ; Grapheme_Base\n0CE6..0CEF    ; Grapheme_Base\n0CF1..0CF2    ; Grapheme_Base\n0CF3          ; Grapheme_Base\n0D02..0D03    ; Grapheme_Base\n0D04..0D0C    ; Grapheme_Base\n0D0E..0D10    ; Grapheme_Base\n0D12..0D3A    ; Grapheme_Base\n0D3D          ; Grapheme_Base\n0D3F..0D40    ; Grapheme_Base\n0D46..0D48    ; Grapheme_Base\n0D4A..0D4C    ; Grapheme_Base\n0D4E          ; Grapheme_Base\n0D4F          ; Grapheme_Base\n0D54..0D56    ; Grapheme_Base\n0D58..0D5E    ; Grapheme_Base\n0D5F..0D61    ; Grapheme_Base\n0D66..0D6F    ; Grapheme_Base\n0D70..0D78    ; Grapheme_Base\n0D79          ; Grapheme_Base\n0D7A..0D7F    ; Grapheme_Base\n0D82..0D83    ; Grapheme_Base\n0D85..0D96    ; Grapheme_Base\n0D9A..0DB1    ; Grapheme_Base\n0DB3..0DBB    ; Grapheme_Base\n0DBD          ; Grapheme_Base\n0DC0..0DC6    ; Grapheme_Base\n0DD0..0DD1    ; Grapheme_Base\n0DD8..0DDE    ; Grapheme_Base\n0DE6..0DEF    ; Grapheme_Base\n0DF2..0DF3    ; Grapheme_Base\n0DF4          ; Grapheme_Base\n0E01..0E30    ; Grapheme_Base\n0E32..0E33    ; Grapheme_Base\n0E3F          ; Grapheme_Base\n0E40..0E45    ; Grapheme_Base\n0E46          ; Grapheme_Base\n0E4F          ; Grapheme_Base\n0E50..0E59    ; Grapheme_Base\n0E5A..0E5B    ; Grapheme_Base\n0E81..0E82    ; Grapheme_Base\n0E84          ; Grapheme_Base\n0E86..0E8A    ; Grapheme_Base\n0E8C..0EA3    ; Grapheme_Base\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Code Points with Changes_When_Uppercased Property\nDESCRIPTION: This listing documents Unicode code points that change form when converted to uppercase. Each entry consists of either a single hexadecimal code point or a range (start..end) followed by the property name 'Changes_When_Uppercased'. The file ends with a count of total code points (1552) and indicates the next property would be Changes_When_Titlecased.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_18\n\nLANGUAGE: unicode-data\nCODE:\n```\n2CEE          ; Changes_When_Uppercased\n2CF3          ; Changes_When_Uppercased\n2D00..2D25    ; Changes_When_Uppercased\n2D27          ; Changes_When_Uppercased\n2D2D          ; Changes_When_Uppercased\nA641          ; Changes_When_Uppercased\nA643          ; Changes_When_Uppercased\nA645          ; Changes_When_Uppercased\nA647          ; Changes_When_Uppercased\nA649          ; Changes_When_Uppercased\nA64B          ; Changes_When_Uppercased\nA64D          ; Changes_When_Uppercased\nA64F          ; Changes_When_Uppercased\nA651          ; Changes_When_Uppercased\nA653          ; Changes_When_Uppercased\nA655          ; Changes_When_Uppercased\nA657          ; Changes_When_Uppercased\nA659          ; Changes_When_Uppercased\nA65B          ; Changes_When_Uppercased\nA65D          ; Changes_When_Uppercased\nA65F          ; Changes_When_Uppercased\nA661          ; Changes_When_Uppercased\nA663          ; Changes_When_Uppercased\nA665          ; Changes_When_Uppercased\nA667          ; Changes_When_Uppercased\nA669          ; Changes_When_Uppercased\nA66B          ; Changes_When_Uppercased\nA66D          ; Changes_When_Uppercased\nA681          ; Changes_When_Uppercased\nA683          ; Changes_When_Uppercased\nA685          ; Changes_When_Uppercased\nA687          ; Changes_When_Uppercased\nA689          ; Changes_When_Uppercased\nA68B          ; Changes_When_Uppercased\nA68D          ; Changes_When_Uppercased\nA68F          ; Changes_When_Uppercased\nA691          ; Changes_When_Uppercased\nA693          ; Changes_When_Uppercased\nA695          ; Changes_When_Uppercased\nA697          ; Changes_When_Uppercased\nA699          ; Changes_When_Uppercased\nA69B          ; Changes_When_Uppercased\nA723          ; Changes_When_Uppercased\nA725          ; Changes_When_Uppercased\nA727          ; Changes_When_Uppercased\nA729          ; Changes_When_Uppercased\nA72B          ; Changes_When_Uppercased\nA72D          ; Changes_When_Uppercased\nA72F          ; Changes_When_Uppercased\nA733          ; Changes_When_Uppercased\nA735          ; Changes_When_Uppercased\nA737          ; Changes_When_Uppercased\nA739          ; Changes_When_Uppercased\nA73B          ; Changes_When_Uppercased\nA73D          ; Changes_When_Uppercased\nA73F          ; Changes_When_Uppercased\nA741          ; Changes_When_Uppercased\nA743          ; Changes_When_Uppercased\nA745          ; Changes_When_Uppercased\nA747          ; Changes_When_Uppercased\nA749          ; Changes_When_Uppercased\nA74B          ; Changes_When_Uppercased\nA74D          ; Changes_When_Uppercased\nA74F          ; Changes_When_Uppercased\nA751          ; Changes_When_Uppercased\nA753          ; Changes_When_Uppercased\nA755          ; Changes_When_Uppercased\nA757          ; Changes_When_Uppercased\nA759          ; Changes_When_Uppercased\nA75B          ; Changes_When_Uppercased\nA75D          ; Changes_When_Uppercased\nA75F          ; Changes_When_Uppercased\nA761          ; Changes_When_Uppercased\nA763          ; Changes_When_Uppercased\nA765          ; Changes_When_Uppercased\nA767          ; Changes_When_Uppercased\nA769          ; Changes_When_Uppercased\nA76B          ; Changes_When_Uppercased\nA76D          ; Changes_When_Uppercased\nA76F          ; Changes_When_Uppercased\nA77A          ; Changes_When_Uppercased\nA77C          ; Changes_When_Uppercased\nA77F          ; Changes_When_Uppercased\nA781          ; Changes_When_Uppercased\nA783          ; Changes_When_Uppercased\nA785          ; Changes_When_Uppercased\nA787          ; Changes_When_Uppercased\nA78C          ; Changes_When_Uppercased\nA791          ; Changes_When_Uppercased\nA793..A794    ; Changes_When_Uppercased\nA797          ; Changes_When_Uppercased\nA799          ; Changes_When_Uppercased\nA79B          ; Changes_When_Uppercased\nA79D          ; Changes_When_Uppercased\nA79F          ; Changes_When_Uppercased\nA7A1          ; Changes_When_Uppercased\nA7A3          ; Changes_When_Uppercased\nA7A5          ; Changes_When_Uppercased\nA7A7          ; Changes_When_Uppercased\nA7A9          ; Changes_When_Uppercased\nA7B5          ; Changes_When_Uppercased\nA7B7          ; Changes_When_Uppercased\nA7B9          ; Changes_When_Uppercased\nA7BB          ; Changes_When_Uppercased\nA7BD          ; Changes_When_Uppercased\nA7BF          ; Changes_When_Uppercased\nA7C1          ; Changes_When_Uppercased\nA7C3          ; Changes_When_Uppercased\nA7C8          ; Changes_When_Uppercased\nA7CA          ; Changes_When_Uppercased\nA7CD          ; Changes_When_Uppercased\nA7D1          ; Changes_When_Uppercased\nA7D7          ; Changes_When_Uppercased\nA7D9          ; Changes_When_Uppercased\nA7DB          ; Changes_When_Uppercased\nA7F6          ; Changes_When_Uppercased\nAB53          ; Changes_When_Uppercased\nAB70..ABBF    ; Changes_When_Uppercased\nFB00..FB06    ; Changes_When_Uppercased\nFB13..FB17    ; Changes_When_Uppercased\nFF41..FF5A    ; Changes_When_Uppercased\n10428..1044F  ; Changes_When_Uppercased\n104D8..104FB  ; Changes_When_Uppercased\n10597..105A1  ; Changes_When_Uppercased\n105A3..105B1  ; Changes_When_Uppercased\n105B3..105B9  ; Changes_When_Uppercased\n105BB..105BC  ; Changes_When_Uppercased\n10CC0..10CF2  ; Changes_When_Uppercased\n10D70..10D85  ; Changes_When_Uppercased\n118C0..118DF  ; Changes_When_Uppercased\n16E60..16E7F  ; Changes_When_Uppercased\n1E922..1E943  ; Changes_When_Uppercased\n\n# Total code points: 1552\n\n# ================================================\n\n# Derived Property:   Changes_When_Titlecased (CWT)\n#  Characters whose normalized forms are not stable under a toTitlecase mapping.\n#  For more information, see D141 in Section 3.13, \"Default Case Algorithms\".\n```\n\n----------------------------------------\n\nTITLE: Setting Compile Definitions\nDESCRIPTION: Defines the target library name for C/C++ compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftOnoneSupport/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_compile_definitions(swiftSwiftOnoneSupport PRIVATE\n  $<$<COMPILE_LANGUAGE:C,CXX>:-DSWIFT_TARGET_LIBRARY_NAME=swiftSwiftOnoneSupport>)\n```\n\n----------------------------------------\n\nTITLE: Defining Sixteenth Fraction in Various Unicode Scripts\nDESCRIPTION: This snippet defines the numeric value of one-sixteenth (1/16) for Unicode characters in Bengali, Oriya, Malayalam, North Indic, and Tamil scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n09F4          ; 0.0625 ; ; 1/16 # No       BENGALI CURRENCY NUMERATOR ONE\n0B75          ; 0.0625 ; ; 1/16 # No       ORIYA FRACTION ONE SIXTEENTH\n0D76          ; 0.0625 ; ; 1/16 # No       MALAYALAM FRACTION ONE SIXTEENTH\nA833          ; 0.0625 ; ; 1/16 # No       NORTH INDIC FRACTION ONE SIXTEENTH\n11FC9..11FCA  ; 0.0625 ; ; 1/16 # No   [2] TAMIL FRACTION ONE SIXTEENTH-1..TAMIL FRACTION ONE SIXTEENTH-2\n```\n\n----------------------------------------\n\nTITLE: Creating FooTypedef1 Type Alias\nDESCRIPTION: Defines a type alias FooTypedef1 that refers to Int32.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  FooTypedef1.  Bbb.\ntypealias FooTypedef1 = Int32\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Extend Category Code Points\nDESCRIPTION: Lists Unicode code points classified as 'Extend', which includes combining marks, emoji modifiers, and other extending characters. Each line defines a range of code points with their Unicode type (mostly 'Mn' for non-spacing marks) and description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_7\n\nLANGUAGE: unicode-data\nCODE:\n```\n1BC9D..1BC9E  ; Extend # Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK\n1CF00..1CF2D  ; Extend # Mn  [46] ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT..ZNAMENNY COMBINING MARK KRYZH ON LEFT\n1CF30..1CF46  ; Extend # Mn  [23] ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO..ZNAMENNY PRIZNAK MODIFIER ROG\n1D165..1D166  ; Extend # Mc   [2] MUSICAL SYMBOL COMBINING STEM..MUSICAL SYMBOL COMBINING SPRECHGESANG STEM\n1D167..1D169  ; Extend # Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3\n1D16D..1D172  ; Extend # Mc   [6] MUSICAL SYMBOL COMBINING AUGMENTATION DOT..MUSICAL SYMBOL COMBINING FLAG-5\n1D17B..1D182  ; Extend # Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE\n1D185..1D18B  ; Extend # Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE\n1D1AA..1D1AD  ; Extend # Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO\n1D242..1D244  ; Extend # Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME\n1DA00..1DA36  ; Extend # Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN\n1DA3B..1DA6C  ; Extend # Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT\n1DA75         ; Extend # Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS\n1DA84         ; Extend # Mn       SIGNWRITING LOCATION HEAD NECK\n1DA9B..1DA9F  ; Extend # Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6\n1DAA1..1DAAF  ; Extend # Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16\n1E000..1E006  ; Extend # Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE\n1E008..1E018  ; Extend # Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU\n1E01B..1E021  ; Extend # Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI\n1E023..1E024  ; Extend # Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS\n1E026..1E02A  ; Extend # Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA\n1E08F         ; Extend # Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n1E130..1E136  ; Extend # Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D\n1E2AE         ; Extend # Mn       TOTO SIGN RISING TONE\n1E2EC..1E2EF  ; Extend # Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI\n1E4EC..1E4EF  ; Extend # Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH\n1E5EE..1E5EF  ; Extend # Mn   [2] OL ONAL SIGN MU..OL ONAL SIGN IKIR\n1E8D0..1E8D6  ; Extend # Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\n1E944..1E94A  ; Extend # Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA\n1F3FB..1F3FF  ; Extend # Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6\nE0020..E007F  ; Extend # Cf  [96] TAG SPACE..CANCEL TAG\nE0100..E01EF  ; Extend # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n\n# Total code points: 2605\n```\n\n----------------------------------------\n\nTITLE: Normalizing Boolean Values in CMake Variables\nDESCRIPTION: A helper function that standardizes boolean variables to be either TRUE or FALSE in CMake. This ensures consistent boolean value representations throughout the build system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(normalize_boolean_spelling var_name)\n  if(${var_name})\n    set(\"${var_name}\" TRUE PARENT_SCOPE)\n  else()\n    set(\"${var_name}\" FALSE PARENT_SCOPE)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Linking Swift Core Libraries\nDESCRIPTION: Links the required Swift libraries to the swift-ide-test tool, including AST, Driver, Frontend, IDE, and Compiler Modules components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-ide-test/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(swift-ide-test\n                      PRIVATE\n                        swiftAST\n                        swiftDriver\n                        swiftFrontend\n                        swiftIDE\n                        swiftIDETool\n                        swiftCompilerModules)\n```\n\n----------------------------------------\n\nTITLE: Modifying @discardableResult Attribute on Swift Protocol Requirements\nDESCRIPTION: States that adding or removing the `@discardableResult` attribute on a function requirement within a protocol is a permitted change under ABI stability rules. This does not affect the binary interface of the protocol.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/LibraryEvolution.rst#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\n@discardableResult\n```\n\n----------------------------------------\n\nTITLE: Unicode 3.2.0 Code Point Assignments\nDESCRIPTION: Lists Unicode code points and their descriptions that were newly assigned in Unicode 3.2.0 (March 2002). Contains various character assignments with a total of 1,016 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n0220          ; 3.2 #       LATIN CAPITAL LETTER N WITH LONG RIGHT LEG\n034F          ; 3.2 #       COMBINING GRAPHEME JOINER\n0363..036F    ; 3.2 #  [13] COMBINING LATIN SMALL LETTER A..COMBINING LATIN SMALL LETTER X\n[...truncated for brevity...]\nFF5F..FF60    ; 3.2 #   [2] FULLWIDTH LEFT WHITE PARENTHESIS..FULLWIDTH RIGHT WHITE PARENTHESIS\n```\n\n----------------------------------------\n\nTITLE: Setting Up Swift Core Library Build Options\nDESCRIPTION: Configures common build options for the Swift Core library, including source files, link flags, and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nset(swiftCore_common_options\n                  IS_STDLIB IS_STDLIB_CORE\n                    ${SWIFTLIB_SOURCES}\n                  GYB_SOURCES\n                    ${SWIFTLIB_GYB_SOURCES}\n                  LINK_FLAGS\n                    ${swift_core_link_flags}\n                  PRIVATE_LINK_LIBRARIES\n                    ${swift_core_private_link_libraries}\n                  INCORPORATE_OBJECT_LIBRARIES\n                    ${swift_core_incorporate_object_libraries}\n                  FRAMEWORK_DEPENDS\n                    ${swift_core_framework_depends}\n                  SWIFT_COMPILE_FLAGS\n                    ${swift_stdlib_compile_flags} -Xcc -DswiftCore_EXPORTS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS})\n```\n\n----------------------------------------\n\nTITLE: Setting Link Flags for sourcekitdInProc on Darwin Systems in CMake\nDESCRIPTION: This snippet adds link flags to set the current version for sourcekitdInProc on Darwin systems when SWIFT_COMPILER_VERSION is defined.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n  if(SWIFT_COMPILER_VERSION)\n    set_property(TARGET sourcekitdInProc APPEND_STRING PROPERTY\n                 LINK_FLAGS \" -Wl,-current_version -Wl,${SWIFT_COMPILER_VERSION}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Resource Documentation in Markdown\nDESCRIPTION: Markdown formatted documentation listing external resources and guides for Swift development, including comments about content organization and formatting guidelines\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ExternalResources.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# External Resources\n\nThe official [Swift blog](https://swift.org/blog/) has a lot of useful\ninformation, such as [how runtime reflection works][mirror-post] and how the\ncompiler's [new diagnostic architecture][diagnostic-arch-post] is structured.\n\n[mirror-post]: https://swift.org/blog/how-mirror-works/\n[diagnostic-arch-post]: https://swift.org/blog/new-diagnostic-arch-overview/\n\nThis page lists some external resources apart from the Swift blog which may be\nhelpful for people interested in contributing to Swift. The resources are listed\nin reverse-chronological order and organized by topic.\n\n<!--\nSome resources don't fall cleanly into one topic bucket or another; in such a\ncase we break the tie arbitrarily.\n-->\n\n<!--\nThe textual descriptions should be written in a way that makes it clear\nwhich topics are discussed, and what a potential contributor to Swift\nwill gain from it. This is usually different from the talk's abstract.\n-->\n```\n\n----------------------------------------\n\nTITLE: Creating Test Dependencies Target in CMake\nDESCRIPTION: This snippet creates a dependencies-only target that contains just the dependencies required for running tests. This allows for preparing test dependencies without actually running the tests.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nset(test_dependencies_target_name\n    \"swift${test_subset_target_suffix}${test_mode_target_suffix}${VARIANT_SUFFIX}-test-depends\")\nadd_custom_target(\"${test_dependencies_target_name}\"\n    DEPENDS ${dependencies})\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Case Mapping Definitions\nDESCRIPTION: Defines mappings between uppercase and lowercase Unicode characters with their hexadecimal codes. Each line contains the uppercase character code, mapping type (C for case mapping), and corresponding lowercase character code, along with a descriptive comment.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_3\n\nLANGUAGE: config\nCODE:\n```\n04C7; C; 04C8; # CYRILLIC CAPITAL LETTER EN WITH HOOK\n04C9; C; 04CA; # CYRILLIC CAPITAL LETTER EN WITH TAIL\n04CB; C; 04CC; # CYRILLIC CAPITAL LETTER KHAKASSIAN CHE\n04CD; C; 04CE; # CYRILLIC CAPITAL LETTER EM WITH TAIL\n04D0; C; 04D1; # CYRILLIC CAPITAL LETTER A WITH BREVE\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Range Definitions\nDESCRIPTION: Unicode code point ranges that define emoji characters and their version information. Each line contains the hex code point(s), type (Emoji), Unicode version number, count of characters, and sample emoji with description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n1F5FA         ; Emoji                # E0.7   [1] (🗺️)       world map\n1F5FB..1F5FF  ; Emoji                # E0.6   [5] (🗻..🗿)    mount fuji..moai\n1F600         ; Emoji                # E1.0   [1] (😀)       grinning face\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Osmanya Script\nDESCRIPTION: Defines the Unicode code point ranges for the Osmanya script, categorizing characters by their types (Lo, Nd) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_28\n\nLANGUAGE: Unicode\nCODE:\n```\n10480..1049D  ; Osmanya # Lo  [30] OSMANYA LETTER ALEF..OSMANYA LETTER OO\n104A0..104A9  ; Osmanya # Nd  [10] OSMANYA DIGIT ZERO..OSMANYA DIGIT NINE\n\n# Total code points: 40\n```\n\n----------------------------------------\n\nTITLE: Implementing Input-Focused Benchmark in Swift\nDESCRIPTION: Example of an input-focused benchmark where array sizes and string lengths are varied to test performance. This pattern is ideal for benchmarks where input characteristics strongly influence performance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/1.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport TestsUtils\n\npublic let benchmarks = [\n  BenchmarkInfo(name: \"ArrayAppend\", runFunction: run_ArrayAppend, tags: [.validation, .api, .Array]),\n  BenchmarkInfo(name: \"ArrayAppendArrayOfInt\", runFunction: run_ArrayAppendArrayOfInt),\n]\n\n@inline(never)\npublic func run_ArrayAppend(_ N: Int) {\n  // Length is fixed in this case. Focus on benchmarking repeated appends.\n  let initialCount = 512\n  var array: [Int] = []\n  // Reserve capacity to ensure no reallocations happen during the benchmark.\n  array.reserveCapacity(initialCount)\n\n  for _ in 1...N {\n    array.removeAll(keepingCapacity: true)\n\n    // In case we want to benchmark a specific range of append operations\n    for j in 0..<initialCount {\n      array.append(j)\n    }\n  }\n  blackHole(array)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Non-ASCII Identifiers in Swift Mangling\nDESCRIPTION: This snippet defines the grammar for identifiers containing non-ASCII characters in Swift mangling. It explains how Punycode encoding is used with modifications for Swift-specific requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\nidentifier ::= 'X' natural identifier-start-char identifier-char*\nidentifier ::= 'X' 'o' operator-fixity natural identifier-char*\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Warnings and Errors in CMake\nDESCRIPTION: Sets compiler options to treat certain warnings as errors, specifically for GNU and C++98 compatibility warnings when using Clang.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_54\n\nLANGUAGE: CMake\nCODE:\n```\nif(CMAKE_C_COMPILER_ID MATCHES Clang)\n  add_compile_options($<$<OR:$<COMPILE_LANGUAGE:C>,$<COMPILE_LANGUAGE:CXX>>:-Werror=gnu>)\nendif()\n\n# Make some warnings errors as they are commonly occurring and flood the build\n# with unnecessary noise.\nif(CMAKE_C_COMPILER_ID MATCHES Clang)\n  add_compile_options($<$<COMPILE_LANGUAGE:CXX>:-Werror=c++98-compat-extra-semi>)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Characters to Numerical Value 20\nDESCRIPTION: Lists Unicode code points that represent the numerical value 20 across various writing systems and notations including Ethiopic, Circled Numbers, and CJK ideographs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_16\n\nLANGUAGE: plain\nCODE:\n```\n1373          ; 20.0 ; ; 20 # No       ETHIOPIC NUMBER TWENTY\n2473          ; 20.0 ; ; 20 # No       CIRCLED NUMBER TWENTY\n2487          ; 20.0 ; ; 20 # No       PARENTHESIZED NUMBER TWENTY\n249B          ; 20.0 ; ; 20 # No       NUMBER TWENTY FULL STOP\n24F4          ; 20.0 ; ; 20 # No       NEGATIVE CIRCLED NUMBER TWENTY\n3039          ; 20.0 ; ; 20 # Nl       HANGZHOU NUMERAL TWENTY\n3249          ; 20.0 ; ; 20 # No       CIRCLED NUMBER TWENTY ON BLACK SQUARE\n5344          ; 20.0 ; ; 20 # Lo       CJK UNIFIED IDEOGRAPH-5344\n5EFF          ; 20.0 ; ; 20 # Lo       CJK UNIFIED IDEOGRAPH-5EFF\n10111         ; 20.0 ; ; 20 # No       AEGEAN NUMBER TWENTY\n102EB         ; 20.0 ; ; 20 # No       COPTIC EPACT NUMBER TWENTY\n103D4         ; 20.0 ; ; 20 # Nl       OLD PERSIAN NUMBER TWENTY\n1085C         ; 20.0 ; ; 20 # No       IMPERIAL ARAMAIC NUMBER TWENTY\n1087F         ; 20.0 ; ; 20 # No       PALMYRENE NUMBER TWENTY\n108AE         ; 20.0 ; ; 20 # No       NABATAEAN NUMBER TWENTY\n108FE         ; 20.0 ; ; 20 # No       HATRAN NUMBER TWENTY\n10918         ; 20.0 ; ; 20 # No       PHOENICIAN NUMBER TWENTY\n109CA         ; 20.0 ; ; 20 # No       MEROITIC CURSIVE NUMBER TWENTY\n10A45         ; 20.0 ; ; 20 # No       KHAROSHTHI NUMBER TWENTY\n10A9F         ; 20.0 ; ; 20 # No       OLD NORTH ARABIAN NUMBER TWENTY\n10AEE         ; 20.0 ; ; 20 # No       MANICHAEAN NUMBER TWENTY\n10B5D         ; 20.0 ; ; 20 # No       INSCRIPTIONAL PARTHIAN NUMBER TWENTY\n10B7D         ; 20.0 ; ; 20 # No       INSCRIPTIONAL PAHLAVI NUMBER TWENTY\n10BAE         ; 20.0 ; ; 20 # No       PSALTER PAHLAVI NUMBER TWENTY\n10E6A         ; 20.0 ; ; 20 # No       RUMI NUMBER TWENTY\n10F23         ; 20.0 ; ; 20 # No       OLD SOGDIAN NUMBER TWENTY\n10F53         ; 20.0 ; ; 20 # No       SOGDIAN NUMBER TWENTY\n10FCA         ; 20.0 ; ; 20 # No       CHORASMIAN NUMBER TWENTY\n1105C         ; 20.0 ; ; 20 # No       BRAHMI NUMBER TWENTY\n111EB         ; 20.0 ; ; 20 # No       SINHALA ARCHAIC NUMBER TWENTY\n1173B         ; 20.0 ; ; 20 # No       AHOM NUMBER TWENTY\n118EB         ; 20.0 ; ; 20 # No       WARANG CITI NUMBER TWENTY\n11C64         ; 20.0 ; ; 20 # No       BHAIKSUKI NUMBER TWENTY\n1D36A         ; 20.0 ; ; 20 # No       COUNTING ROD TENS DIGIT TWO\n1EC7B         ; 20.0 ; ; 20 # No       INDIC SIYAQ NUMBER TWENTY\n1ED0B         ; 20.0 ; ; 20 # No       OTTOMAN SIYAQ NUMBER TWENTY\n```\n\n----------------------------------------\n\nTITLE: Using @_must_specialize Attribute in Swift Generic Functions\nDESCRIPTION: This example shows how to use the @_must_specialize attribute in Swift generic functions and structures to enable C++ template calls.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_61\n\nLANGUAGE: swift\nCODE:\n```\n@_must_specialize\nfunc genericFunction<T>(_ t: T) {\n  functionTemplate<T>(t) // OK!\n}\n\nstruct GenericStruct<T> {\n  init GenericStruct(_ t: T) { self.t = t }\n  var t: T\n\n  @_must_specialize\n  func callGenericFunction() {\n    genericFunction(t) // OK!\n  }\n}\n\nfunc example() {\n  GenericStruct(42).callGenericFunction()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Currency_Symbol (Sc) Characters\nDESCRIPTION: This snippet lists Unicode code points classified as Currency_Symbol (Sc). It includes various currency symbols used in different countries and regions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_28\n\nLANGUAGE: Unicode\nCODE:\n```\n0024          ; Sc #       DOLLAR SIGN\n00A2..00A5    ; Sc #   [4] CENT SIGN..YEN SIGN\n058F          ; Sc #       ARMENIAN DRAM SIGN\n060B          ; Sc #       AFGHANI SIGN\n07FE..07FF    ; Sc #   [2] NKO DOROME SIGN..NKO TAMAN SIGN\n09F2..09F3    ; Sc #   [2] BENGALI RUPEE MARK..BENGALI RUPEE SIGN\n09FB          ; Sc #       BENGALI GANDA MARK\n0AF1          ; Sc #       GUJARATI RUPEE SIGN\n0BF9          ; Sc #       TAMIL RUPEE SIGN\n0E3F          ; Sc #       THAI CURRENCY SYMBOL BAHT\n17DB          ; Sc #       KHMER CURRENCY SYMBOL RIEL\n20A0..20C0    ; Sc #  [33] EURO-CURRENCY SIGN..SOM SIGN\nA838          ; Sc #       NORTH INDIC RUPEE MARK\nFDFC          ; Sc #       RIAL SIGN\nFE69          ; Sc #       SMALL DOLLAR SIGN\nFF04          ; Sc #       FULLWIDTH DOLLAR SIGN\nFFE0..FFE1    ; Sc #   [2] FULLWIDTH CENT SIGN..FULLWIDTH POUND SIGN\nFFE5..FFE6    ; Sc #   [2] FULLWIDTH YEN SIGN..FULLWIDTH WON SIGN\n11FDD..11FE0  ; Sc #   [4] TAMIL SIGN KAACU..TAMIL SIGN VARAAKAN\n1E2FF         ; Sc #       WANCHO NGUN SIGN\n1ECB0         ; Sc #       INDIC SIYAQ RUPEE MARK\n```\n\n----------------------------------------\n\nTITLE: Function Signature Specializations\nDESCRIPTION: Complex function signature specialization patterns showing how Swift mangles specialized generic functions and closures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n_TTSf1cl35_TFF7specgen6callerFSiT_U_FTSiSi_T_Si___TF7specgen12take_closureFFTSiSi_T_T_ ---> function signature specialization <Arg[0] = [Closure Propagated : closure #1 (Swift.Int, Swift.Int) -> () in specgen.caller(Swift.Int) -> (), Argument Types : [Swift.Int]> of specgen.take_closure((Swift.Int, Swift.Int) -> ()) -> ()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Definitions for swiftStdlibStubs in CMake\nDESCRIPTION: Configures compile definitions for the swiftStdlibStubs target, including export symbols for shared library builds, enabling Unicode data support, and locale support based on configuration options.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/stubs/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_compile_definitions(swiftStdlibStubs PRIVATE\n  $<$<BOOL:${BUILD_SHARED_LIBS}>:-DswiftCore_EXPORTS>\n  $<$<BOOL:${SwiftCore_ENABLE_UNICODE_DATA}>:-DSWIFT_STDLIB_ENABLE_UNICODE_DATA>\n  $<$<BOOL:${SwiftCore_HAS_LOCALE}>:-DSWIFT_STDLIB_HAS_LOCALE>)\n```\n\n----------------------------------------\n\nTITLE: Adding Unicode Subdirectory in CMake\nDESCRIPTION: Includes the Unicode subdirectory in the build process, likely containing additional CMake configurations for Unicode-related functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/stubs/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Unicode)\n```\n\n----------------------------------------\n\nTITLE: Symbol Other (So) Unicode Range Definitions\nDESCRIPTION: Defines ranges of Unicode code points classified as Symbol Other (So), including various symbols like mahjong tiles, playing cards, emojis, and other special characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_31\n\nLANGUAGE: unicode\nCODE:\n```\n1D300..1D356  ; So #  [87] MONOGRAM FOR EARTH..TETRAGRAM FOR FOSTERING\n1D800..1D9FF  ; So # [512] SIGNWRITING HAND-FIST INDEX..SIGNWRITING HEAD\n[...additional ranges...]\n```\n\n----------------------------------------\n\nTITLE: Unicode Reserved Code Points Range Definition\nDESCRIPTION: Defines ranges of reserved and unassigned Unicode code points. Each line follows the format of hexadecimal range followed by category (Cn) and description of the reserved status. Used for Unicode character mapping and validation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1774..177F    ; Cn #  [12] <reserved-1774>..<reserved-177F>\n17DE..17DF    ; Cn #   [2] <reserved-17DE>..<reserved-17DF>\n17EA..17EF    ; Cn #   [6] <reserved-17EA>..<reserved-17EF>\n```\n\n----------------------------------------\n\nTITLE: Line Feed Code Point Definition\nDESCRIPTION: Defines the Grapheme_Cluster_Break property for the Line Feed (LF) control character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n000A          ; LF # Cc       <control-000A>\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji_Presentation Code Point Ranges in Unicode Data Format\nDESCRIPTION: A comprehensive listing of Unicode code points that have the Emoji_Presentation property, which means they display as emoji by default without needing a variation selector. Each line defines a range with version information and character examples.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode-data\nCODE:\n```\n1F980..1F984  ; Emoji_Presentation   # E1.0   [5] (🦀..🦄)    crab..unicorn\n1F985..1F991  ; Emoji_Presentation   # E3.0  [13] (🦅..🦑)    eagle..squid\n1F992..1F997  ; Emoji_Presentation   # E5.0   [6] (🦒..🦗)    giraffe..cricket\n1F998..1F9A2  ; Emoji_Presentation   # E11.0 [11] (🦘..🦢)    kangaroo..swan\n1F9A3..1F9A4  ; Emoji_Presentation   # E13.0  [2] (🦣..🦤)    mammoth..dodo\n1F9A5..1F9AA  ; Emoji_Presentation   # E12.0  [6] (🦥..🦪)    sloth..oyster\n1F9AB..1F9AD  ; Emoji_Presentation   # E13.0  [3] (🦫..🦭)    beaver..seal\n1F9AE..1F9AF  ; Emoji_Presentation   # E12.0  [2] (🦮..🦯)    guide dog..white cane\n1F9B0..1F9B9  ; Emoji_Presentation   # E11.0 [10] (🦰..🦹)    red hair..supervillain\n1F9BA..1F9BF  ; Emoji_Presentation   # E12.0  [6] (🦺..🦿)    safety vest..mechanical leg\n1F9C0         ; Emoji_Presentation   # E1.0   [1] (🧀)       cheese wedge\n1F9C1..1F9C2  ; Emoji_Presentation   # E11.0  [2] (🧁..🧂)    cupcake..salt\n1F9C3..1F9CA  ; Emoji_Presentation   # E12.0  [8] (🧃..🧊)    beverage box..ice\n1F9CB         ; Emoji_Presentation   # E13.0  [1] (🧋)       bubble tea\n1F9CC         ; Emoji_Presentation   # E14.0  [1] (🧌)       troll\n1F9CD..1F9CF  ; Emoji_Presentation   # E12.0  [3] (🧍..🧏)    person standing..deaf person\n1F9D0..1F9E6  ; Emoji_Presentation   # E5.0  [23] (🧐..🧦)    face with monocle..socks\n1F9E7..1F9FF  ; Emoji_Presentation   # E11.0 [25] (🧧..🧿)    red envelope..nazar amulet\n1FA70..1FA73  ; Emoji_Presentation   # E12.0  [4] (🩰..🩳)    ballet shoes..shorts\n1FA74         ; Emoji_Presentation   # E13.0  [1] (🩴)       thong sandal\n1FA75..1FA77  ; Emoji_Presentation   # E15.0  [3] (🩵..🩷)    light blue heart..pink heart\n1FA78..1FA7A  ; Emoji_Presentation   # E12.0  [3] (🩸..🩺)    drop of blood..stethoscope\n1FA7B..1FA7C  ; Emoji_Presentation   # E14.0  [2] (🩻..🩼)    x-ray..crutch\n1FA80..1FA82  ; Emoji_Presentation   # E12.0  [3] (🪀..🪂)    yo-yo..parachute\n1FA83..1FA86  ; Emoji_Presentation   # E13.0  [4] (🪃..🪆)    boomerang..nesting dolls\n1FA87..1FA88  ; Emoji_Presentation   # E15.0  [2] (🪇..🪈)    maracas..flute\n1FA89         ; Emoji_Presentation   # E16.0  [1] (🪉)       harp\n1FA8F         ; Emoji_Presentation   # E16.0  [1] (🪏)       shovel\n1FA90..1FA95  ; Emoji_Presentation   # E12.0  [6] (🪐..🪕)    ringed planet..banjo\n1FA96..1FAA8  ; Emoji_Presentation   # E13.0 [19] (🪖..🪨)    military helmet..rock\n1FAA9..1FAAC  ; Emoji_Presentation   # E14.0  [4] (🪩..🪬)    mirror ball..hamsa\n1FAAD..1FAAF  ; Emoji_Presentation   # E15.0  [3] (🪭..🪯)    folding hand fan..khanda\n1FAB0..1FAB6  ; Emoji_Presentation   # E13.0  [7] (🪰..🪶)    fly..feather\n1FAB7..1FABA  ; Emoji_Presentation   # E14.0  [4] (🪷..🪺)    lotus..nest with eggs\n1FABB..1FABD  ; Emoji_Presentation   # E15.0  [3] (🪻..🪽)    hyacinth..wing\n1FABE         ; Emoji_Presentation   # E16.0  [1] (🪾)       leafless tree\n1FABF         ; Emoji_Presentation   # E15.0  [1] (🪿)       goose\n1FAC0..1FAC2  ; Emoji_Presentation   # E13.0  [3] (🫀..🫂)    anatomical heart..people hugging\n1FAC3..1FAC5  ; Emoji_Presentation   # E14.0  [3] (🫃..🫅)    pregnant man..person with crown\n1FAC6         ; Emoji_Presentation   # E16.0  [1] (🫆)       fingerprint\n1FACE..1FACF  ; Emoji_Presentation   # E15.0  [2] (🫎..🫏)    moose..donkey\n1FAD0..1FAD6  ; Emoji_Presentation   # E13.0  [7] (🫐..🫖)    blueberries..teapot\n1FAD7..1FAD9  ; Emoji_Presentation   # E14.0  [3] (🫗..🫙)    pouring liquid..jar\n1FADA..1FADB  ; Emoji_Presentation   # E15.0  [2] (🫚..🫛)    ginger root..pea pod\n1FADC         ; Emoji_Presentation   # E16.0  [1] (🫜)       root vegetable\n1FADF         ; Emoji_Presentation   # E16.0  [1] (🫟)       splatter\n1FAE0..1FAE7  ; Emoji_Presentation   # E14.0  [8] (🫠..🫧)    melting face..bubbles\n1FAE8         ; Emoji_Presentation   # E15.0  [1] (🫨)       shaking face\n1FAE9         ; Emoji_Presentation   # E16.0  [1] (🫩)       face with bags under eyes\n1FAF0..1FAF6  ; Emoji_Presentation   # E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands\n1FAF7..1FAF8  ; Emoji_Presentation   # E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand\n\n# Total elements: 1212\n```\n\n----------------------------------------\n\nTITLE: Defining Non_Joiner Unicode Character Range\nDESCRIPTION: Specifies the Unicode code point for Zero Width Non-Joiner, classified as Non_Joiner in the Indic_Syllabic_Category property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_26\n\nLANGUAGE: unicode\nCODE:\n```\n200C          ; Non_Joiner # Cf       ZERO WIDTH NON-JOINER\n```\n\n----------------------------------------\n\nTITLE: Tuple Type Syntax in Swift\nDESCRIPTION: Demonstrates the syntax for a tuple type in Swift, which is a non-nominal type. This example shows a tuple containing an Int and a String value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/nominal-types.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n(Int, String)\n```\n\n----------------------------------------\n\nTITLE: Defining Fractional Numeric Values in Unicode (Tamil and Malayalam)\nDESCRIPTION: This snippet defines fractional numeric values for various Tamil and Malayalam Unicode characters, including very small fractions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n11FC0         ; 0.003125 ; ; 1/320 # No       TAMIL FRACTION ONE THREE-HUNDRED-AND-TWENTIETH\n11FD4         ; 0.003125 ; ; 1/320 # No       TAMIL FRACTION DOWNSCALING FACTOR KIIZH\n\n0D58          ; 0.00625 ; ; 1/160 # No       MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH\n11FC1         ; 0.00625 ; ; 1/160 # No       TAMIL FRACTION ONE ONE-HUNDRED-AND-SIXTIETH\n\n11FC2         ; 0.0125 ; ; 1/80 # No       TAMIL FRACTION ONE EIGHTIETH\n\n11FC3         ; 0.015625 ; ; 1/64 # No       TAMIL FRACTION ONE SIXTY-FOURTH\n\n0D59          ; 0.025 ; ; 1/40 # No       MALAYALAM FRACTION ONE FORTIETH\n11FC4         ; 0.025 ; ; 1/40 # No       TAMIL FRACTION ONE FORTIETH\n\n11FC5         ; 0.03125 ; ; 1/32 # No       TAMIL FRACTION ONE THIRTY-SECOND\n\n0D5A          ; 0.0375 ; ; 3/80 # No       MALAYALAM FRACTION THREE EIGHTIETHS\n11FC6         ; 0.0375 ; ; 3/80 # No       TAMIL FRACTION THREE EIGHTIETHS\n\n11FC7         ; 0.046875 ; ; 3/64 # No       TAMIL FRACTION THREE SIXTY-FOURTHS\n\n0D5B          ; 0.05 ; ; 1/20 # No       MALAYALAM FRACTION ONE TWENTIETH\n11FC8         ; 0.05 ; ; 1/20 # No       TAMIL FRACTION ONE TWENTIETH\n```\n\n----------------------------------------\n\nTITLE: Independent Vowel Unicode Ranges\nDESCRIPTION: Specifies Unicode ranges for independent vowels that are analyzed as ordinary alphabetic letters or marks, including characters from Tai Le, Phags-pa, and Kayah Li scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode\nCODE:\n```\n1963..196D    ; Vowel # Lo  [11] TAI LE LETTER A..TAI LE LETTER AI\nA85E..A861    ; Vowel # Lo   [4] PHAGS-PA LETTER I..PHAGS-PA LETTER O\nA866          ; Vowel # Lo       PHAGS-PA LETTER EE\n```\n\n----------------------------------------\n\nTITLE: Unicode ID_Compat_Math_Continue Character List Definition\nDESCRIPTION: A comprehensive list of Unicode code points with the ID_Compat_Math_Continue property, which identifies characters allowed in identifiers for backward compatibility with mathematical notation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_24\n\nLANGUAGE: Unicode\nCODE:\n```\n00B2..00B3    ; ID_Compat_Math_Continue # No   [2] SUPERSCRIPT TWO..SUPERSCRIPT THREE\n00B9          ; ID_Compat_Math_Continue # No       SUPERSCRIPT ONE\n2070          ; ID_Compat_Math_Continue # No       SUPERSCRIPT ZERO\n2074..2079    ; ID_Compat_Math_Continue # No   [6] SUPERSCRIPT FOUR..SUPERSCRIPT NINE\n207A..207C    ; ID_Compat_Math_Continue # Sm   [3] SUPERSCRIPT PLUS SIGN..SUPERSCRIPT EQUALS SIGN\n207D          ; ID_Compat_Math_Continue # Ps       SUPERSCRIPT LEFT PARENTHESIS\n207E          ; ID_Compat_Math_Continue # Pe       SUPERSCRIPT RIGHT PARENTHESIS\n2080..2089    ; ID_Compat_Math_Continue # No  [10] SUBSCRIPT ZERO..SUBSCRIPT NINE\n208A..208C    ; ID_Compat_Math_Continue # Sm   [3] SUBSCRIPT PLUS SIGN..SUBSCRIPT EQUALS SIGN\n208D          ; ID_Compat_Math_Continue # Ps       SUBSCRIPT LEFT PARENTHESIS\n208E          ; ID_Compat_Math_Continue # Pe       SUBSCRIPT RIGHT PARENTHESIS\n2202          ; ID_Compat_Math_Continue # Sm       PARTIAL DIFFERENTIAL\n2207          ; ID_Compat_Math_Continue # Sm       NABLA\n221E          ; ID_Compat_Math_Continue # Sm       INFINITY\n1D6C1         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL BOLD NABLA\n1D6DB         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL BOLD PARTIAL DIFFERENTIAL\n1D6FB         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL ITALIC NABLA\n1D715         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL\n1D735         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL BOLD ITALIC NABLA\n1D74F         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL\n1D76F         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL SANS-SERIF BOLD NABLA\n1D789         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL\n1D7A9         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA\n1D7C3         ; ID_Compat_Math_Continue # Sm       MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL\n\n# Total code points: 43\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Standard Library Unicode Unit Test Target in CMake\nDESCRIPTION: Sets up the swiftStdlibUnicodeUnittest target library with specified source files, module dependencies, compiler flags, and installation options. This configuration is part of the Swift Standard Library build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/StdlibUnicodeUnittest/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_stdlib_unittest_compile_flags)\n\nadd_swift_target_library(swiftStdlibUnicodeUnittest ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  # This file should be listed the first.  Module name is inferred from the\n  # filename.\n  StdlibUnicodeUnittest.swift\n  Collation.swift\n  UnicodeScalarProperties.swift\n  GraphemeBreaking.swift\n  WordBreaking.swift\n\n  SWIFT_MODULE_DEPENDS StdlibUnittest\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT\n  SWIFT_COMPILE_FLAGS ${swift_stdlib_unittest_compile_flags} ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT stdlib-experimental\n  DARWIN_INSTALL_NAME_DIR \"${SWIFT_DARWIN_STDLIB_PRIVATE_INSTALL_NAME_DIR}\"\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Arabic Script\nDESCRIPTION: A comprehensive listing of Unicode code point ranges for the Arabic script, categorized by their Unicode General Category properties (Cf, Sm, Po, etc.). Each line specifies a range of code points, the script name, the Unicode category abbreviation, count of characters, and a description of the characters in that range.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n0600..0604    ; Arabic # Cf   [5] ARABIC NUMBER SIGN..ARABIC SIGN SAMVAT\n0606..0608    ; Arabic # Sm   [3] ARABIC-INDIC CUBE ROOT..ARABIC RAY\n0609..060A    ; Arabic # Po   [2] ARABIC-INDIC PER MILLE SIGN..ARABIC-INDIC PER TEN THOUSAND SIGN\n060B          ; Arabic # Sc       AFGHANI SIGN\n060D          ; Arabic # Po       ARABIC DATE SEPARATOR\n060E..060F    ; Arabic # So   [2] ARABIC POETIC VERSE SIGN..ARABIC SIGN MISRA\n0610..061A    ; Arabic # Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA\n061C          ; Arabic # Cf       ARABIC LETTER MARK\n061D..061E    ; Arabic # Po   [2] ARABIC END OF TEXT MARK..ARABIC TRIPLE DOT PUNCTUATION MARK\n0620..063F    ; Arabic # Lo  [32] ARABIC LETTER KASHMIRI YEH..ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE\n0641..064A    ; Arabic # Lo  [10] ARABIC LETTER FEH..ARABIC LETTER YEH\n0656..065F    ; Arabic # Mn  [10] ARABIC SUBSCRIPT ALEF..ARABIC WAVY HAMZA BELOW\n0660..0669    ; Arabic # Nd  [10] ARABIC-INDIC DIGIT ZERO..ARABIC-INDIC DIGIT NINE\n066A..066D    ; Arabic # Po   [4] ARABIC PERCENT SIGN..ARABIC FIVE POINTED STAR\n066E..066F    ; Arabic # Lo   [2] ARABIC LETTER DOTLESS BEH..ARABIC LETTER DOTLESS QAF\n0671..06D3    ; Arabic # Lo  [99] ARABIC LETTER ALEF WASLA..ARABIC LETTER YEH BARREE WITH HAMZA ABOVE\n06D4          ; Arabic # Po       ARABIC FULL STOP\n06D5          ; Arabic # Lo       ARABIC LETTER AE\n06D6..06DC    ; Arabic # Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN\n06DE          ; Arabic # So       ARABIC START OF RUB EL HIZB\n06DF..06E4    ; Arabic # Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA\n06E5..06E6    ; Arabic # Lm   [2] ARABIC SMALL WAW..ARABIC SMALL YEH\n06E7..06E8    ; Arabic # Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON\n06E9          ; Arabic # So       ARABIC PLACE OF SAJDAH\n06EA..06ED    ; Arabic # Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM\n06EE..06EF    ; Arabic # Lo   [2] ARABIC LETTER DAL WITH INVERTED V..ARABIC LETTER REH WITH INVERTED V\n06F0..06F9    ; Arabic # Nd  [10] EXTENDED ARABIC-INDIC DIGIT ZERO..EXTENDED ARABIC-INDIC DIGIT NINE\n06FA..06FC    ; Arabic # Lo   [3] ARABIC LETTER SHEEN WITH DOT BELOW..ARABIC LETTER GHAIN WITH DOT BELOW\n06FD..06FE    ; Arabic # So   [2] ARABIC SIGN SINDHI AMPERSAND..ARABIC SIGN SINDHI POSTPOSITION MEN\n06FF          ; Arabic # Lo       ARABIC LETTER HEH WITH INVERTED V\n0750..077F    ; Arabic # Lo  [48] ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW..ARABIC LETTER KAF WITH TWO DOTS ABOVE\n0870..0887    ; Arabic # Lo  [24] ARABIC LETTER ALEF WITH ATTACHED FATHA..ARABIC BASELINE ROUND DOT\n0888          ; Arabic # Sk       ARABIC RAISED ROUND DOT\n0889..088E    ; Arabic # Lo   [6] ARABIC LETTER NOON WITH INVERTED SMALL V..ARABIC VERTICAL TAIL\n0890..0891    ; Arabic # Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE\n0897..089F    ; Arabic # Mn   [9] ARABIC PEPET..ARABIC HALF MADDA OVER MADDA\n08A0..08C8    ; Arabic # Lo  [41] ARABIC LETTER BEH WITH SMALL V BELOW..ARABIC LETTER GRAF\n08C9          ; Arabic # Lm       ARABIC SMALL FARSI YEH\n08CA..08E1    ; Arabic # Mn  [24] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH SIGN SAFHA\n08E3..08FF    ; Arabic # Mn  [29] ARABIC TURNED DAMMA BELOW..ARABIC MARK SIDEWAYS NOON GHUNNA\nFB50..FBB1    ; Arabic # Lo  [98] ARABIC LETTER ALEF WASLA ISOLATED FORM..ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM\nFBB2..FBC2    ; Arabic # Sk  [17] ARABIC SYMBOL DOT ABOVE..ARABIC SYMBOL WASLA ABOVE\nFBD3..FD3D    ; Arabic # Lo [363] ARABIC LETTER NG ISOLATED FORM..ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM\nFD40..FD4F    ; Arabic # So  [16] ARABIC LIGATURE RAHIMAHU ALLAAH..ARABIC LIGATURE RAHIMAHUM ALLAAH\nFD50..FD8F    ; Arabic # Lo  [64] ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM..ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM\nFD92..FDC7    ; Arabic # Lo  [54] ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM..ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM\nFDCF          ; Arabic # So       ARABIC LIGATURE SALAAMUHU ALAYNAA\nFDF0..FDFB    ; Arabic # Lo  [12] ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM..ARABIC LIGATURE JALLAJALALOUHOU\nFDFC          ; Arabic # Sc       RIAL SIGN\nFDFD..FDFF    ; Arabic # So   [3] ARABIC LIGATURE BISMILLAH AR-RAHMAN AR-RAHEEM..ARABIC LIGATURE AZZA WA JALL\nFE70..FE74    ; Arabic # Lo   [5] ARABIC FATHATAN ISOLATED FORM..ARABIC KASRATAN ISOLATED FORM\nFE76..FEFC    ; Arabic # Lo [135] ARABIC FATHA ISOLATED FORM..ARABIC LIGATURE LAM WITH ALEF FINAL FORM\n10E60..10E7E  ; Arabic # No  [31] RUMI DIGIT ONE..RUMI FRACTION TWO THIRDS\n10EC2..10EC4  ; Arabic # Lo   [3] ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW..ARABIC LETTER KAF WITH TWO DOTS VERTICALLY BELOW\n10EFC..10EFF  ; Arabic # Mn   [4] ARABIC COMBINING ALEF OVERLAY..ARABIC SMALL LOW WORD MADDA\n1EE00..1EE03  ; Arabic # Lo   [4] ARABIC MATHEMATICAL ALEF..ARABIC MATHEMATICAL DAL\n1EE05..1EE1F  ; Arabic # Lo  [27] ARABIC MATHEMATICAL WAW..ARABIC MATHEMATICAL DOTLESS QAF\n1EE21..1EE22  ; Arabic # Lo   [2] ARABIC MATHEMATICAL INITIAL BEH..ARABIC MATHEMATICAL INITIAL JEEM\n1EE24         ; Arabic # Lo       ARABIC MATHEMATICAL INITIAL HEH\n1EE27         ; Arabic # Lo       ARABIC MATHEMATICAL INITIAL HAH\n1EE29..1EE32  ; Arabic # Lo  [10] ARABIC MATHEMATICAL INITIAL YEH..ARABIC MATHEMATICAL INITIAL QAF\n1EE34..1EE37  ; Arabic # Lo   [4] ARABIC MATHEMATICAL INITIAL SHEEN..ARABIC MATHEMATICAL INITIAL KHAH\n1EE39         ; Arabic # Lo       ARABIC MATHEMATICAL INITIAL DAD\n1EE3B         ; Arabic # Lo       ARABIC MATHEMATICAL INITIAL GHAIN\n1EE42         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED JEEM\n1EE47         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED HAH\n1EE49         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED YEH\n1EE4B         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED LAM\n1EE4D..1EE4F  ; Arabic # Lo   [3] ARABIC MATHEMATICAL TAILED NOON..ARABIC MATHEMATICAL TAILED AIN\n1EE51..1EE52  ; Arabic # Lo   [2] ARABIC MATHEMATICAL TAILED SAD..ARABIC MATHEMATICAL TAILED QAF\n1EE54         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED SHEEN\n1EE57         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED KHAH\n1EE59         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED DAD\n1EE5B         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED GHAIN\n1EE5D         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED DOTLESS NOON\n1EE5F         ; Arabic # Lo       ARABIC MATHEMATICAL TAILED DOTLESS QAF\n1EE61..1EE62  ; Arabic # Lo   [2] ARABIC MATHEMATICAL STRETCHED BEH..ARABIC MATHEMATICAL STRETCHED JEEM\n1EE64         ; Arabic # Lo       ARABIC MATHEMATICAL STRETCHED HEH\n1EE67..1EE6A  ; Arabic # Lo   [4] ARABIC MATHEMATICAL STRETCHED HAH..ARABIC MATHEMATICAL STRETCHED KAF\n1EE6C..1EE72  ; Arabic # Lo   [7] ARABIC MATHEMATICAL STRETCHED MEEM..ARABIC MATHEMATICAL STRETCHED QAF\n1EE74..1EE77  ; Arabic # Lo   [4] ARABIC MATHEMATICAL STRETCHED SHEEN..ARABIC MATHEMATICAL STRETCHED KHAH\n1EE79..1EE7C  ; Arabic # Lo   [4] ARABIC MATHEMATICAL STRETCHED DAD..ARABIC MATHEMATICAL STRETCHED DOTLESS BEH\n1EE7E         ; Arabic # Lo       ARABIC MATHEMATICAL STRETCHED DOTLESS FEH\n1EE80..1EE89  ; Arabic # Lo  [10] ARABIC MATHEMATICAL LOOPED ALEF..ARABIC MATHEMATICAL LOOPED YEH\n1EE8B..1EE9B  ; Arabic # Lo  [17] ARABIC MATHEMATICAL LOOPED LAM..ARABIC MATHEMATICAL LOOPED GHAIN\n1EEA1..1EEA3  ; Arabic # Lo   [3] ARABIC MATHEMATICAL DOUBLE-STRUCK BEH..ARABIC MATHEMATICAL DOUBLE-STRUCK DAL\n1EEA5..1EEA9  ; Arabic # Lo   [5] ARABIC MATHEMATICAL DOUBLE-STRUCK WAW..ARABIC MATHEMATICAL DOUBLE-STRUCK YEH\n1EEAB..1EEBB  ; Arabic # Lo  [17] ARABIC MATHEMATICAL DOUBLE-STRUCK LAM..ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN\n1EEF0..1EEF1  ; Arabic # Sm   [2] ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL..ARABIC MATHEMATICAL OPERATOR HAH WITH DAL\n\n# Total code points: 1373\n```\n\n----------------------------------------\n\nTITLE: Unicode Half Number Mapping\nDESCRIPTION: Special case mapping for the Tibetan half-two digit character, representing the numeric value 1.5\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_7\n\nLANGUAGE: unicode\nCODE:\n```\n0F2B          ; 1.5 ; ; 3/2 # No       TIBETAN DIGIT HALF TWO\n```\n\n----------------------------------------\n\nTITLE: Virama Character Definitions\nDESCRIPTION: Specifies Unicode code points for Virama signs that can function as both visible killer viramas and consonant stackers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n094D          ; Virama # Mn       DEVANAGARI SIGN VIRAMA\n09CD          ; Virama # Mn       BENGALI SIGN VIRAMA\n0A4D          ; Virama # Mn       GURMUKHI SIGN VIRAMA\n0ACD          ; Virama # Mn       GUJARATI SIGN VIRAMA\n```\n\n----------------------------------------\n\nTITLE: Setting Link Options for SwiftCore in CMake\nDESCRIPTION: Configures link options for SwiftCore, including nostartfiles for Swift linking language.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_options(swiftCore PUBLIC\n  $<$<LINK_LANGUAGE:Swift>:-nostartfiles>)\n```\n\n----------------------------------------\n\nTITLE: Apple-Specific Link Options for SwiftCore in CMake\nDESCRIPTION: Adds a specific linker option for maximum header pad on Apple platforms when building shared libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nif(APPLE AND BUILD_SHARED_LIBS)\n  target_link_options(swiftCore PRIVATE \"SHELL:-Xlinker -headerpad_max_install_names\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Other_Alphabetic Character Range Definitions\nDESCRIPTION: Defines code point ranges for characters classified as Other_Alphabetic in Unicode. Each line specifies a range or single code point with character type (Mn, Mc, or So) and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_13\n\nLANGUAGE: unicode\nCODE:\n```\n0E34..0E3A    ; Other_Alphabetic # Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n0E4D          ; Other_Alphabetic # Mn       THAI CHARACTER NIKHAHIT\n0EB1          ; Other_Alphabetic # Mn       LAO VOWEL SIGN MAI KAN\n[...additional ranges omitted for brevity...]\nA9B6..A9B9    ; Other_Alphabetic # Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT\n```\n\n----------------------------------------\n\nTITLE: Using getVersion Function in Swift Resilience Tests\nDESCRIPTION: Demonstrates how to use the getVersion helper function in the main test file to determine which version of the library to expect at runtime. This is crucial for verifying the correct behavior across different library versions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/validation-test/Evolution/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\ngetVersion()\n```\n\n----------------------------------------\n\nTITLE: Illustrating Closure Application (apply) in Canonical SIL\nDESCRIPTION: This SIL snippet shows the application of the previously created closure using the `apply` instruction in Canonical SIL (with opaque values). It shows the argument `i` being passed as the single applied argument at index #0.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILFunctionConventions.md#2025-04-23_snippet_5\n\nLANGUAGE: sil\nCODE:\n```\n```\n%resultTuple = apply %closure(#0: i)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Structure for Swift Benchmark\nDESCRIPTION: Creates necessary directory structure for benchmark compilation including bin, lib, and lib/swift directories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(swift-bin-dir \"${CMAKE_BINARY_DIR}/bin\")\nset(benchmark-bin-dir \"${CMAKE_CURRENT_BINARY_DIR}/bin\")\nset(benchmark-lib-dir \"${CMAKE_CURRENT_BINARY_DIR}/lib\")\nset(benchmark-lib-swift-dir \"${CMAKE_CURRENT_BINARY_DIR}/lib/swift\")\n\nfile(MAKE_DIRECTORY \"${swift-bin-dir}\")\nfile(MAKE_DIRECTORY \"${benchmark-bin-dir}\")\nfile(MAKE_DIRECTORY \"${benchmark-lib-dir}\")\nfile(MAKE_DIRECTORY \"${benchmark-lib-swift-dir}\")\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Code Point Range Definitions\nDESCRIPTION: Defines ranges of Unicode code points that have the Emoji_Presentation property set to Yes. Each line specifies a code point or range along with version information and representative emoji characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n231A..231B    ; Emoji_Presentation   # E0.6   [2] (⌚..⌛)    watch..hourglass done\n23E9..23EC    ; Emoji_Presentation   # E0.6   [4] (⏩..⏬)    fast-forward button..fast down button\n23F0          ; Emoji_Presentation   # E0.6   [1] (⏰)       alarm clock\n23F3          ; Emoji_Presentation   # E0.6   [1] (⏳)       hourglass not done\n25FD..25FE    ; Emoji_Presentation   # E0.6   [2] (◽..◾)    white medium-small square..black medium-small square\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Ugaritic Script\nDESCRIPTION: Defines the Unicode code point ranges for the Ugaritic script, categorizing characters by their types (Lo, Po) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_26\n\nLANGUAGE: Unicode\nCODE:\n```\n10380..1039D  ; Ugaritic # Lo  [30] UGARITIC LETTER ALPA..UGARITIC LETTER SSU\n1039F         ; Ugaritic # Po       UGARITIC WORD DIVIDER\n\n# Total code points: 31\n```\n\n----------------------------------------\n\nTITLE: Swift Compiler Options and Platform-Specific Subdirectories\nDESCRIPTION: Sets Swift-specific compiler options and conditionally adds platform-specific subdirectories for Android and Windows builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_compile_options(\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-implicit-concurrency-module-import>\"\n  \"$<$<COMPILE_LANGUAGE:Swift>:SHELL:-Xfrontend -disable-implicit-string-processing-module-import>\")\n\nadd_subdirectory(clang)\nif(ANDROID)\n  add_subdirectory(Android)\nendif()\nif(WIN32)\n  add_subdirectory(Windows)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Case Mapping Data\nDESCRIPTION: A structured data file containing Unicode character case folding information. Each line follows the format of code point, mapping type (C for case, F for full, S for special), target code point(s), and a comment with the character name. This mapping is used for case conversion operations in text processing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_6\n\nLANGUAGE: Data\nCODE:\n```\n1FF9; C; 1F79; # GREEK CAPITAL LETTER OMICRON WITH OXIA\n1FFA; C; 1F7C; # GREEK CAPITAL LETTER OMEGA WITH VARIA\n1FFB; C; 1F7D; # GREEK CAPITAL LETTER OMEGA WITH OXIA\n1FFC; F; 03C9 03B9; # GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI\n1FFC; S; 1FF3; # GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI\n2126; C; 03C9; # OHM SIGN\n212A; C; 006B; # KELVIN SIGN\n212B; C; 00E5; # ANGSTROM SIGN\n2132; C; 214E; # TURNED CAPITAL F\n2160; C; 2170; # ROMAN NUMERAL ONE\n2161; C; 2171; # ROMAN NUMERAL TWO\n2162; C; 2172; # ROMAN NUMERAL THREE\n2163; C; 2173; # ROMAN NUMERAL FOUR\n2164; C; 2174; # ROMAN NUMERAL FIVE\n2165; C; 2175; # ROMAN NUMERAL SIX\n2166; C; 2176; # ROMAN NUMERAL SEVEN\n2167; C; 2177; # ROMAN NUMERAL EIGHT\n2168; C; 2178; # ROMAN NUMERAL NINE\n2169; C; 2179; # ROMAN NUMERAL TEN\n216A; C; 217A; # ROMAN NUMERAL ELEVEN\n216B; C; 217B; # ROMAN NUMERAL TWELVE\n216C; C; 217C; # ROMAN NUMERAL FIFTY\n216D; C; 217D; # ROMAN NUMERAL ONE HUNDRED\n216E; C; 217E; # ROMAN NUMERAL FIVE HUNDRED\n216F; C; 217F; # ROMAN NUMERAL ONE THOUSAND\n2183; C; 2184; # ROMAN NUMERAL REVERSED ONE HUNDRED\n24B6; C; 24D0; # CIRCLED LATIN CAPITAL LETTER A\n24B7; C; 24D1; # CIRCLED LATIN CAPITAL LETTER B\n24B8; C; 24D2; # CIRCLED LATIN CAPITAL LETTER C\n24B9; C; 24D3; # CIRCLED LATIN CAPITAL LETTER D\n24BA; C; 24D4; # CIRCLED LATIN CAPITAL LETTER E\n24BB; C; 24D5; # CIRCLED LATIN CAPITAL LETTER F\n24BC; C; 24D6; # CIRCLED LATIN CAPITAL LETTER G\n24BD; C; 24D7; # CIRCLED LATIN CAPITAL LETTER H\n24BE; C; 24D8; # CIRCLED LATIN CAPITAL LETTER I\n24BF; C; 24D9; # CIRCLED LATIN CAPITAL LETTER J\n24C0; C; 24DA; # CIRCLED LATIN CAPITAL LETTER K\n24C1; C; 24DB; # CIRCLED LATIN CAPITAL LETTER L\n24C2; C; 24DC; # CIRCLED LATIN CAPITAL LETTER M\n24C3; C; 24DD; # CIRCLED LATIN CAPITAL LETTER N\n24C4; C; 24DE; # CIRCLED LATIN CAPITAL LETTER O\n24C5; C; 24DF; # CIRCLED LATIN CAPITAL LETTER P\n24C6; C; 24E0; # CIRCLED LATIN CAPITAL LETTER Q\n24C7; C; 24E1; # CIRCLED LATIN CAPITAL LETTER R\n24C8; C; 24E2; # CIRCLED LATIN CAPITAL LETTER S\n24C9; C; 24E3; # CIRCLED LATIN CAPITAL LETTER T\n24CA; C; 24E4; # CIRCLED LATIN CAPITAL LETTER U\n24CB; C; 24E5; # CIRCLED LATIN CAPITAL LETTER V\n24CC; C; 24E6; # CIRCLED LATIN CAPITAL LETTER W\n24CD; C; 24E7; # CIRCLED LATIN CAPITAL LETTER X\n24CE; C; 24E8; # CIRCLED LATIN CAPITAL LETTER Y\n24CF; C; 24E9; # CIRCLED LATIN CAPITAL LETTER Z\n2C00; C; 2C30; # GLAGOLITIC CAPITAL LETTER AZU\n2C01; C; 2C31; # GLAGOLITIC CAPITAL LETTER BUKY\n2C02; C; 2C32; # GLAGOLITIC CAPITAL LETTER VEDE\n2C03; C; 2C33; # GLAGOLITIC CAPITAL LETTER GLAGOLI\n2C04; C; 2C34; # GLAGOLITIC CAPITAL LETTER DOBRO\n2C05; C; 2C35; # GLAGOLITIC CAPITAL LETTER YESTU\n2C06; C; 2C36; # GLAGOLITIC CAPITAL LETTER ZHIVETE\n2C07; C; 2C37; # GLAGOLITIC CAPITAL LETTER DZELO\n2C08; C; 2C38; # GLAGOLITIC CAPITAL LETTER ZEMLJA\n2C09; C; 2C39; # GLAGOLITIC CAPITAL LETTER IZHE\n2C0A; C; 2C3A; # GLAGOLITIC CAPITAL LETTER INITIAL IZHE\n2C0B; C; 2C3B; # GLAGOLITIC CAPITAL LETTER I\n2C0C; C; 2C3C; # GLAGOLITIC CAPITAL LETTER DJERVI\n2C0D; C; 2C3D; # GLAGOLITIC CAPITAL LETTER KAKO\n2C0E; C; 2C3E; # GLAGOLITIC CAPITAL LETTER LJUDIJE\n2C0F; C; 2C3F; # GLAGOLITIC CAPITAL LETTER MYSLITE\n2C10; C; 2C40; # GLAGOLITIC CAPITAL LETTER NASHI\n2C11; C; 2C41; # GLAGOLITIC CAPITAL LETTER ONU\n2C12; C; 2C42; # GLAGOLITIC CAPITAL LETTER POKOJI\n2C13; C; 2C43; # GLAGOLITIC CAPITAL LETTER RITSI\n2C14; C; 2C44; # GLAGOLITIC CAPITAL LETTER SLOVO\n2C15; C; 2C45; # GLAGOLITIC CAPITAL LETTER TVRIDO\n2C16; C; 2C46; # GLAGOLITIC CAPITAL LETTER UKU\n2C17; C; 2C47; # GLAGOLITIC CAPITAL LETTER FRITU\n2C18; C; 2C48; # GLAGOLITIC CAPITAL LETTER HERU\n2C19; C; 2C49; # GLAGOLITIC CAPITAL LETTER OTU\n2C1A; C; 2C4A; # GLAGOLITIC CAPITAL LETTER PE\n2C1B; C; 2C4B; # GLAGOLITIC CAPITAL LETTER SHTA\n2C1C; C; 2C4C; # GLAGOLITIC CAPITAL LETTER TSI\n2C1D; C; 2C4D; # GLAGOLITIC CAPITAL LETTER CHRIVI\n2C1E; C; 2C4E; # GLAGOLITIC CAPITAL LETTER SHA\n2C1F; C; 2C4F; # GLAGOLITIC CAPITAL LETTER YERU\n2C20; C; 2C50; # GLAGOLITIC CAPITAL LETTER YERI\n2C21; C; 2C51; # GLAGOLITIC CAPITAL LETTER YATI\n2C22; C; 2C52; # GLAGOLITIC CAPITAL LETTER SPIDERY HA\n2C23; C; 2C53; # GLAGOLITIC CAPITAL LETTER YU\n2C24; C; 2C54; # GLAGOLITIC CAPITAL LETTER SMALL YUS\n2C25; C; 2C55; # GLAGOLITIC CAPITAL LETTER SMALL YUS WITH TAIL\n2C26; C; 2C56; # GLAGOLITIC CAPITAL LETTER YO\n2C27; C; 2C57; # GLAGOLITIC CAPITAL LETTER IOTATED SMALL YUS\n2C28; C; 2C58; # GLAGOLITIC CAPITAL LETTER BIG YUS\n2C29; C; 2C59; # GLAGOLITIC CAPITAL LETTER IOTATED BIG YUS\n2C2A; C; 2C5A; # GLAGOLITIC CAPITAL LETTER FITA\n2C2B; C; 2C5B; # GLAGOLITIC CAPITAL LETTER IZHITSA\n2C2C; C; 2C5C; # GLAGOLITIC CAPITAL LETTER SHTAPIC\n2C2D; C; 2C5D; # GLAGOLITIC CAPITAL LETTER TROKUTASTI A\n2C2E; C; 2C5E; # GLAGOLITIC CAPITAL LETTER LATINATE MYSLITE\n2C2F; C; 2C5F; # GLAGOLITIC CAPITAL LETTER CAUDATE CHRIVI\n2C60; C; 2C61; # LATIN CAPITAL LETTER L WITH DOUBLE BAR\n2C62; C; 026B; # LATIN CAPITAL LETTER L WITH MIDDLE TILDE\n2C63; C; 1D7D; # LATIN CAPITAL LETTER P WITH STROKE\n2C64; C; 027D; # LATIN CAPITAL LETTER R WITH TAIL\n2C67; C; 2C68; # LATIN CAPITAL LETTER H WITH DESCENDER\n2C69; C; 2C6A; # LATIN CAPITAL LETTER K WITH DESCENDER\n2C6B; C; 2C6C; # LATIN CAPITAL LETTER Z WITH DESCENDER\n2C6D; C; 0251; # LATIN CAPITAL LETTER ALPHA\n2C6E; C; 0271; # LATIN CAPITAL LETTER M WITH HOOK\n2C6F; C; 0250; # LATIN CAPITAL LETTER TURNED A\n2C70; C; 0252; # LATIN CAPITAL LETTER TURNED ALPHA\n2C72; C; 2C73; # LATIN CAPITAL LETTER W WITH HOOK\n2C75; C; 2C76; # LATIN CAPITAL LETTER HALF H\n2C7E; C; 023F; # LATIN CAPITAL LETTER S WITH SWASH TAIL\n2C7F; C; 0240; # LATIN CAPITAL LETTER Z WITH SWASH TAIL\n2C80; C; 2C81; # COPTIC CAPITAL LETTER ALFA\n2C82; C; 2C83; # COPTIC CAPITAL LETTER VIDA\n2C84; C; 2C85; # COPTIC CAPITAL LETTER GAMMA\n2C86; C; 2C87; # COPTIC CAPITAL LETTER DALDA\n2C88; C; 2C89; # COPTIC CAPITAL LETTER EIE\n2C8A; C; 2C8B; # COPTIC CAPITAL LETTER SOU\n2C8C; C; 2C8D; # COPTIC CAPITAL LETTER ZATA\n2C8E; C; 2C8F; # COPTIC CAPITAL LETTER HATE\n2C90; C; 2C91; # COPTIC CAPITAL LETTER THETHE\n2C92; C; 2C93; # COPTIC CAPITAL LETTER IAUDA\n2C94; C; 2C95; # COPTIC CAPITAL LETTER KAPA\n2C96; C; 2C97; # COPTIC CAPITAL LETTER LAULA\n2C98; C; 2C99; # COPTIC CAPITAL LETTER MI\n2C9A; C; 2C9B; # COPTIC CAPITAL LETTER NI\n2C9C; C; 2C9D; # COPTIC CAPITAL LETTER KSI\n2C9E; C; 2C9F; # COPTIC CAPITAL LETTER O\n2CA0; C; 2CA1; # COPTIC CAPITAL LETTER PI\n2CA2; C; 2CA3; # COPTIC CAPITAL LETTER RO\n2CA4; C; 2CA5; # COPTIC CAPITAL LETTER SIMA\n2CA6; C; 2CA7; # COPTIC CAPITAL LETTER TAU\n2CA8; C; 2CA9; # COPTIC CAPITAL LETTER UA\n2CAA; C; 2CAB; # COPTIC CAPITAL LETTER FI\n2CAC; C; 2CAD; # COPTIC CAPITAL LETTER KHI\n2CAE; C; 2CAF; # COPTIC CAPITAL LETTER PSI\n2CB0; C; 2CB1; # COPTIC CAPITAL LETTER OOU\n2CB2; C; 2CB3; # COPTIC CAPITAL LETTER DIALECT-P ALEF\n2CB4; C; 2CB5; # COPTIC CAPITAL LETTER OLD COPTIC AIN\n2CB6; C; 2CB7; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE\n2CB8; C; 2CB9; # COPTIC CAPITAL LETTER DIALECT-P KAPA\n2CBA; C; 2CBB; # COPTIC CAPITAL LETTER DIALECT-P NI\n2CBC; C; 2CBD; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC NI\n2CBE; C; 2CBF; # COPTIC CAPITAL LETTER OLD COPTIC OOU\n2CC0; C; 2CC1; # COPTIC CAPITAL LETTER SAMPI\n2CC2; C; 2CC3; # COPTIC CAPITAL LETTER CROSSED SHEI\n2CC4; C; 2CC5; # COPTIC CAPITAL LETTER OLD COPTIC SHEI\n2CC6; C; 2CC7; # COPTIC CAPITAL LETTER OLD COPTIC ESH\n2CC8; C; 2CC9; # COPTIC CAPITAL LETTER AKHMIMIC KHEI\n2CCA; C; 2CCB; # COPTIC CAPITAL LETTER DIALECT-P HORI\n2CCC; C; 2CCD; # COPTIC CAPITAL LETTER OLD COPTIC HORI\n2CCE; C; 2CCF; # COPTIC CAPITAL LETTER OLD COPTIC HA\n2CD0; C; 2CD1; # COPTIC CAPITAL LETTER L-SHAPED HA\n2CD2; C; 2CD3; # COPTIC CAPITAL LETTER OLD COPTIC HEI\n2CD4; C; 2CD5; # COPTIC CAPITAL LETTER OLD COPTIC HAT\n2CD6; C; 2CD7; # COPTIC CAPITAL LETTER OLD COPTIC GANGIA\n2CD8; C; 2CD9; # COPTIC CAPITAL LETTER OLD COPTIC DJA\n2CDA; C; 2CDB; # COPTIC CAPITAL LETTER OLD COPTIC SHIMA\n2CDC; C; 2CDD; # COPTIC CAPITAL LETTER OLD NUBIAN SHIMA\n2CDE; C; 2CDF; # COPTIC CAPITAL LETTER OLD NUBIAN NGI\n2CE0; C; 2CE1; # COPTIC CAPITAL LETTER OLD NUBIAN NYI\n2CE2; C; 2CE3; # COPTIC CAPITAL LETTER OLD NUBIAN WAU\n2CEB; C; 2CEC; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI\n2CED; C; 2CEE; # COPTIC CAPITAL LETTER CRYPTOGRAMMIC GANGIA\n2CF2; C; 2CF3; # COPTIC CAPITAL LETTER BOHAIRIC KHEI\nA640; C; A641; # CYRILLIC CAPITAL LETTER ZEMLYA\nA642; C; A643; # CYRILLIC CAPITAL LETTER DZELO\nA644; C; A645; # CYRILLIC CAPITAL LETTER REVERSED DZE\nA646; C; A647; # CYRILLIC CAPITAL LETTER IOTA\nA648; C; A649; # CYRILLIC CAPITAL LETTER DJERV\nA64A; C; A64B; # CYRILLIC CAPITAL LETTER MONOGRAPH UK\nA64C; C; A64D; # CYRILLIC CAPITAL LETTER BROAD OMEGA\nA64E; C; A64F; # CYRILLIC CAPITAL LETTER NEUTRAL YER\nA650; C; A651; # CYRILLIC CAPITAL LETTER YERU WITH BACK YER\nA652; C; A653; # CYRILLIC CAPITAL LETTER IOTIFIED YAT\nA654; C; A655; # CYRILLIC CAPITAL LETTER REVERSED YU\nA656; C; A657; # CYRILLIC CAPITAL LETTER IOTIFIED A\nA658; C; A659; # CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS\nA65A; C; A65B; # CYRILLIC CAPITAL LETTER BLENDED YUS\nA65C; C; A65D; # CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS\nA65E; C; A65F; # CYRILLIC CAPITAL LETTER YN\nA660; C; A661; # CYRILLIC CAPITAL LETTER REVERSED TSE\nA662; C; A663; # CYRILLIC CAPITAL LETTER SOFT DE\nA664; C; A665; # CYRILLIC CAPITAL LETTER SOFT EL\nA666; C; A667; # CYRILLIC CAPITAL LETTER SOFT EM\nA668; C; A669; # CYRILLIC CAPITAL LETTER MONOCULAR O\nA66A; C; A66B; # CYRILLIC CAPITAL LETTER BINOCULAR O\nA66C; C; A66D; # CYRILLIC CAPITAL LETTER DOUBLE MONOCULAR O\nA680; C; A681; # CYRILLIC CAPITAL LETTER DWE\nA682; C; A683; # CYRILLIC CAPITAL LETTER DZWE\nA684; C; A685; # CYRILLIC CAPITAL LETTER ZHWE\nA686; C; A687; # CYRILLIC CAPITAL LETTER CCHE\nA688; C; A689; # CYRILLIC CAPITAL LETTER DZZE\nA68A; C; A68B; # CYRILLIC CAPITAL LETTER TE WITH MIDDLE HOOK\nA68C; C; A68D; # CYRILLIC CAPITAL LETTER TWE\nA68E; C; A68F; # CYRILLIC CAPITAL LETTER TSWE\nA690; C; A691; # CYRILLIC CAPITAL LETTER TSSE\nA692; C; A693; # CYRILLIC CAPITAL LETTER TCHE\nA694; C; A695; # CYRILLIC CAPITAL LETTER HWE\nA696; C; A697; # CYRILLIC CAPITAL LETTER SHWE\nA698; C; A699; # CYRILLIC CAPITAL LETTER DOUBLE O\nA69A; C; A69B; # CYRILLIC CAPITAL LETTER CROSSED O\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Linking for Non-Darwin Systems in CMake\nDESCRIPTION: Adds platform-specific library dependencies (dispatch and BlocksRuntime) when building on non-Darwin platforms. These libraries are required for proper functionality on Linux and other non-macOS systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/complete-test/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  target_link_libraries(complete-test PRIVATE\n    dispatch\n    BlocksRuntime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating a Documented Structure in Swift\nDESCRIPTION: This snippet defines a structure named FooSwiftStruct with documentation comments. It includes a constructor and an instance method, both with their own documentation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/foo_swift_module.printed.comments.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n/// FooSwiftStruct Aaa.\n/**\n * Bbb.\n * Ccc.\n */\nstruct FooSwiftStruct {\n  /// fooInstanceFunc Aaa.\n  /**\n   * Bbb\n   */\n  /**\n   * Ccc.\n   */\n  func fooInstanceFunc()\n  init()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode ALetter Character Ranges\nDESCRIPTION: This snippet defines ranges of Unicode code points that belong to the ALetter category, which includes alphabetic letters from various writing systems worldwide. Each line specifies a hex range and includes a comment describing the script/character type and count.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\nD7CB..D7FB    ; ALetter # Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH\nFB00..FB06    ; ALetter # L&   [7] LATIN SMALL LIGATURE FF..LATIN SMALL LIGATURE ST\nFB13..FB17    ; ALetter # L&   [5] ARMENIAN SMALL LIGATURE MEN NOW..ARMENIAN SMALL LIGATURE MEN XEH\nFB50..FBB1    ; ALetter # Lo  [98] ARABIC LETTER ALEF WASLA ISOLATED FORM..ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM\nFBD3..FD3D    ; ALetter # Lo [363] ARABIC LETTER NG ISOLATED FORM..ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM\nFD50..FD8F    ; ALetter # Lo  [64] ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM..ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM\nFD92..FDC7    ; ALetter # Lo  [54] ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM..ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM\nFDF0..FDFB    ; ALetter # Lo  [12] ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM..ARABIC LIGATURE JALLAJALALOUHOU\nFE70..FE74    ; ALetter # Lo   [5] ARABIC FATHATAN ISOLATED FORM..ARABIC KASRATAN ISOLATED FORM\nFE76..FEFC    ; ALetter # Lo [135] ARABIC FATHA ISOLATED FORM..ARABIC LIGATURE LAM WITH ALEF FINAL FORM\nFF21..FF3A    ; ALetter # L&  [26] FULLWIDTH LATIN CAPITAL LETTER A..FULLWIDTH LATIN CAPITAL LETTER Z\nFF41..FF5A    ; ALetter # L&  [26] FULLWIDTH LATIN SMALL LETTER A..FULLWIDTH LATIN SMALL LETTER Z\nFFA0..FFBE    ; ALetter # Lo  [31] HALFWIDTH HANGUL FILLER..HALFWIDTH HANGUL LETTER HIEUH\nFFC2..FFC7    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER A..HALFWIDTH HANGUL LETTER E\nFFCA..FFCF    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER YEO..HALFWIDTH HANGUL LETTER OE\nFFD2..FFD7    ; ALetter # Lo   [6] HALFWIDTH HANGUL LETTER YO..HALFWIDTH HANGUL LETTER YU\nFFDA..FFDC    ; ALetter # Lo   [3] HALFWIDTH HANGUL LETTER EU..HALFWIDTH HANGUL LETTER I\n10000..1000B  ; ALetter # Lo  [12] LINEAR B SYLLABLE B008 A..LINEAR B SYLLABLE B046 JE\n1000D..10026  ; ALetter # Lo  [26] LINEAR B SYLLABLE B036 JO..LINEAR B SYLLABLE B032 QO\n10028..1003A  ; ALetter # Lo  [19] LINEAR B SYLLABLE B060 RA..LINEAR B SYLLABLE B042 WO\n1003C..1003D  ; ALetter # Lo   [2] LINEAR B SYLLABLE B017 ZA..LINEAR B SYLLABLE B074 ZE\n1003F..1004D  ; ALetter # Lo  [15] LINEAR B SYLLABLE B020 ZO..LINEAR B SYLLABLE B091 TWO\n10050..1005D  ; ALetter # Lo  [14] LINEAR B SYMBOL B018..LINEAR B SYMBOL B089\n10080..100FA  ; ALetter # Lo [123] LINEAR B IDEOGRAM B100 MAN..LINEAR B IDEOGRAM VESSEL B305\n10140..10174  ; ALetter # Nl  [53] GREEK ACROPHONIC ATTIC ONE QUARTER..GREEK ACROPHONIC STRATIAN FIFTY MNAS\n10280..1029C  ; ALetter # Lo  [29] LYCIAN LETTER A..LYCIAN LETTER X\n102A0..102D0  ; ALetter # Lo  [49] CARIAN LETTER A..CARIAN LETTER UUU3\n10300..1031F  ; ALetter # Lo  [32] OLD ITALIC LETTER A..OLD ITALIC LETTER ESS\n1032D..10340  ; ALetter # Lo  [20] OLD ITALIC LETTER YE..GOTHIC LETTER PAIRTHRA\n10341         ; ALetter # Nl       GOTHIC LETTER NINETY\n10342..10349  ; ALetter # Lo   [8] GOTHIC LETTER RAIDA..GOTHIC LETTER OTHAL\n1034A         ; ALetter # Nl       GOTHIC LETTER NINE HUNDRED\n10350..10375  ; ALetter # Lo  [38] OLD PERMIC LETTER AN..OLD PERMIC LETTER IA\n10380..1039D  ; ALetter # Lo  [30] UGARITIC LETTER ALPA..UGARITIC LETTER SSU\n103A0..103C3  ; ALetter # Lo  [36] OLD PERSIAN SIGN A..OLD PERSIAN SIGN HA\n103C8..103CF  ; ALetter # Lo   [8] OLD PERSIAN SIGN AURAMAZDAA..OLD PERSIAN SIGN BUUMISH\n103D1..103D5  ; ALetter # Nl   [5] OLD PERSIAN NUMBER ONE..OLD PERSIAN NUMBER HUNDRED\n10400..1044F  ; ALetter # L&  [80] DESERET CAPITAL LETTER LONG I..DESERET SMALL LETTER EW\n10450..1049D  ; ALetter # Lo  [78] SHAVIAN LETTER PEEP..OSMANYA LETTER OO\n104B0..104D3  ; ALetter # L&  [36] OSAGE CAPITAL LETTER A..OSAGE CAPITAL LETTER ZHA\n104D8..104FB  ; ALetter # L&  [36] OSAGE SMALL LETTER A..OSAGE SMALL LETTER ZHA\n10500..10527  ; ALetter # Lo  [40] ELBASAN LETTER A..ELBASAN LETTER KHE\n10530..10563  ; ALetter # Lo  [52] CAUCASIAN ALBANIAN LETTER ALT..CAUCASIAN ALBANIAN LETTER KIW\n10570..1057A  ; ALetter # L&  [11] VITHKUQI CAPITAL LETTER A..VITHKUQI CAPITAL LETTER GA\n1057C..1058A  ; ALetter # L&  [15] VITHKUQI CAPITAL LETTER HA..VITHKUQI CAPITAL LETTER RE\n1058C..10592  ; ALetter # L&   [7] VITHKUQI CAPITAL LETTER SE..VITHKUQI CAPITAL LETTER XE\n10594..10595  ; ALetter # L&   [2] VITHKUQI CAPITAL LETTER Y..VITHKUQI CAPITAL LETTER ZE\n10597..105A1  ; ALetter # L&  [11] VITHKUQI SMALL LETTER A..VITHKUQI SMALL LETTER GA\n105A3..105B1  ; ALetter # L&  [15] VITHKUQI SMALL LETTER HA..VITHKUQI SMALL LETTER RE\n105B3..105B9  ; ALetter # L&   [7] VITHKUQI SMALL LETTER SE..VITHKUQI SMALL LETTER XE\n105BB..105BC  ; ALetter # L&   [2] VITHKUQI SMALL LETTER Y..VITHKUQI SMALL LETTER ZE\n105C0..105F3  ; ALetter # Lo  [52] TODHRI LETTER A..TODHRI LETTER OO\n10600..10736  ; ALetter # Lo [311] LINEAR A SIGN AB001..LINEAR A SIGN A664\n10740..10755  ; ALetter # Lo  [22] LINEAR A SIGN A701 A..LINEAR A SIGN A732 JE\n10760..10767  ; ALetter # Lo   [8] LINEAR A SIGN A800..LINEAR A SIGN A807\n10780..10785  ; ALetter # Lm   [6] MODIFIER LETTER SMALL CAPITAL AA..MODIFIER LETTER SMALL B WITH HOOK\n10787..107B0  ; ALetter # Lm  [42] MODIFIER LETTER SMALL DZ DIGRAPH..MODIFIER LETTER SMALL V WITH RIGHT HOOK\n107B2..107BA  ; ALetter # Lm   [9] MODIFIER LETTER SMALL CAPITAL Y..MODIFIER LETTER SMALL S WITH CURL\n10800..10805  ; ALetter # Lo   [6] CYPRIOT SYLLABLE A..CYPRIOT SYLLABLE JA\n10808         ; ALetter # Lo       CYPRIOT SYLLABLE JO\n1080A..10835  ; ALetter # Lo  [44] CYPRIOT SYLLABLE KA..CYPRIOT SYLLABLE WO\n10837..10838  ; ALetter # Lo   [2] CYPRIOT SYLLABLE XA..CYPRIOT SYLLABLE XE\n1083C         ; ALetter # Lo       CYPRIOT SYLLABLE ZA\n1083F..10855  ; ALetter # Lo  [23] CYPRIOT SYLLABLE ZO..IMPERIAL ARAMAIC LETTER TAW\n10860..10876  ; ALetter # Lo  [23] PALMYRENE LETTER ALEPH..PALMYRENE LETTER TAW\n10880..1089E  ; ALetter # Lo  [31] NABATAEAN LETTER FINAL ALEPH..NABATAEAN LETTER TAW\n108E0..108F2  ; ALetter # Lo  [19] HATRAN LETTER ALEPH..HATRAN LETTER QOPH\n108F4..108F5  ; ALetter # Lo   [2] HATRAN LETTER SHIN..HATRAN LETTER TAW\n10900..10915  ; ALetter # Lo  [22] PHOENICIAN LETTER ALF..PHOENICIAN LETTER TAU\n10920..10939  ; ALetter # Lo  [26] LYDIAN LETTER A..LYDIAN LETTER C\n10980..109B7  ; ALetter # Lo  [56] MEROITIC HIEROGLYPHIC LETTER A..MEROITIC CURSIVE LETTER DA\n109BE..109BF  ; ALetter # Lo   [2] MEROITIC CURSIVE LOGOGRAM RMT..MEROITIC CURSIVE LOGOGRAM IMN\n10A00         ; ALetter # Lo       KHAROSHTHI LETTER A\n10A10..10A13  ; ALetter # Lo   [4] KHAROSHTHI LETTER KA..KHAROSHTHI LETTER GHA\n10A15..10A17  ; ALetter # Lo   [3] KHAROSHTHI LETTER CA..KHAROSHTHI LETTER JA\n10A19..10A35  ; ALetter # Lo  [29] KHAROSHTHI LETTER NYA..KHAROSHTHI LETTER VHA\n10A60..10A7C  ; ALetter # Lo  [29] OLD SOUTH ARABIAN LETTER HE..OLD SOUTH ARABIAN LETTER THETH\n10A80..10A9C  ; ALetter # Lo  [29] OLD NORTH ARABIAN LETTER HEH..OLD NORTH ARABIAN LETTER ZAH\n10AC0..10AC7  ; ALetter # Lo   [8] MANICHAEAN LETTER ALEPH..MANICHAEAN LETTER WAW\n10AC9..10AE4  ; ALetter # Lo  [28] MANICHAEAN LETTER ZAYIN..MANICHAEAN LETTER TAW\n10B00..10B35  ; ALetter # Lo  [54] AVESTAN LETTER A..AVESTAN LETTER HE\n10B40..10B55  ; ALetter # Lo  [22] INSCRIPTIONAL PARTHIAN LETTER ALEPH..INSCRIPTIONAL PARTHIAN LETTER TAW\n10B60..10B72  ; ALetter # Lo  [19] INSCRIPTIONAL PAHLAVI LETTER ALEPH..INSCRIPTIONAL PAHLAVI LETTER TAW\n10B80..10B91  ; ALetter # Lo  [18] PSALTER PAHLAVI LETTER ALEPH..PSALTER PAHLAVI LETTER TAW\n10C00..10C48  ; ALetter # Lo  [73] OLD TURKIC LETTER ORKHON A..OLD TURKIC LETTER ORKHON BASH\n10C80..10CB2  ; ALetter # L&  [51] OLD HUNGARIAN CAPITAL LETTER A..OLD HUNGARIAN CAPITAL LETTER US\n10CC0..10CF2  ; ALetter # L&  [51] OLD HUNGARIAN SMALL LETTER A..OLD HUNGARIAN SMALL LETTER US\n10D00..10D23  ; ALetter # Lo  [36] HANIFI ROHINGYA LETTER A..HANIFI ROHINGYA MARK NA KHONNA\n10D4A..10D4D  ; ALetter # Lo   [4] GARAY VOWEL SIGN A..GARAY VOWEL SIGN EE\n10D4E         ; ALetter # Lm       GARAY VOWEL LENGTH MARK\n10D4F         ; ALetter # Lo       GARAY SUKUN\n10D50..10D65  ; ALetter # L&  [22] GARAY CAPITAL LETTER A..GARAY CAPITAL LETTER OLD NA\n10D6F         ; ALetter # Lm       GARAY REDUPLICATION MARK\n10D70..10D85  ; ALetter # L&  [22] GARAY SMALL LETTER A..GARAY SMALL LETTER OLD NA\n10E80..10EA9  ; ALetter # Lo  [42] YEZIDI LETTER ELIF..YEZIDI LETTER ET\n10EB0..10EB1  ; ALetter # Lo   [2] YEZIDI LETTER LAM WITH DOT ABOVE..YEZIDI LETTER YOT WITH CIRCUMFLEX ABOVE\n10EC2..10EC4  ; ALetter # Lo   [3] ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW..ARABIC LETTER KAF WITH TWO DOTS VERTICALLY BELOW\n10F00..10F1C  ; ALetter # Lo  [29] OLD SOGDIAN LETTER ALEPH..OLD SOGDIAN LETTER FINAL TAW WITH VERTICAL TAIL\n10F27         ; ALetter # Lo       OLD SOGDIAN LIGATURE AYIN-DALETH\n10F30..10F45  ; ALetter # Lo  [22] SOGDIAN LETTER ALEPH..SOGDIAN INDEPENDENT SHIN\n10F70..10F81  ; ALetter # Lo  [18] OLD UYGHUR LETTER ALEPH..OLD UYGHUR LETTER LESH\n10FB0..10FC4  ; ALetter # Lo  [21] CHORASMIAN LETTER ALEPH..CHORASMIAN LETTER TAW\n10FE0..10FF6  ; ALetter # Lo  [23] ELYMAIC LETTER ALEPH..ELYMAIC LIGATURE ZAYIN-YODH\n11003..11037  ; ALetter # Lo  [53] BRAHMI SIGN JIHVAMULIYA..BRAHMI LETTER OLD TAMIL NNNA\n11071..11072  ; ALetter # Lo   [2] BRAHMI LETTER OLD TAMIL SHORT E..BRAHMI LETTER OLD TAMIL SHORT O\n11075         ; ALetter # Lo       BRAHMI LETTER OLD TAMIL LLA\n11083..110AF  ; ALetter # Lo  [45] KAITHI LETTER A..KAITHI LETTER HA\n110D0..110E8  ; ALetter # Lo  [25] SORA SOMPENG LETTER SAH..SORA SOMPENG LETTER MAE\n11103..11126  ; ALetter # Lo  [36] CHAKMA LETTER AA..CHAKMA LETTER HAA\n11144         ; ALetter # Lo       CHAKMA LETTER LHAA\n11147         ; ALetter # Lo       CHAKMA LETTER VAA\n11150..11172  ; ALetter # Lo  [35] MAHAJANI LETTER A..MAHAJANI LETTER RRA\n11176         ; ALetter # Lo       MAHAJANI LIGATURE SHRI\n11183..111B2  ; ALetter # Lo  [48] SHARADA LETTER A..SHARADA LETTER HA\n111C1..111C4  ; ALetter # Lo   [4] SHARADA SIGN AVAGRAHA..SHARADA OM\n111DA         ; ALetter # Lo       SHARADA EKAM\n111DC         ; ALetter # Lo       SHARADA HEADSTROKE\n11200..11211  ; ALetter # Lo  [18] KHOJKI LETTER A..KHOJKI LETTER JJA\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Compiler Sources for Optimizer Component\nDESCRIPTION: This snippet defines the source files that make up the Optimizer component of the Swift compiler. It includes files for handling basic blocks, dead end blocks, function uses, instruction ranges, reachable blocks, sets, stacks, and worklists.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/DataStructures/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nswift_compiler_sources(Optimizer\n  BasicBlockRange.swift\n  DeadEndBlocks.swift\n  FunctionUses.swift\n  InstructionRange.swift\n  ReachableBlocks.swift\n  Set.swift\n  Stack.swift\n  Worklist.swift)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unicode Character Breaking Rules for Devanagari Letter Ka\nDESCRIPTION: This code snippet demonstrates the grapheme breaking behavior for the DEVANAGARI LETTER KA character (U+0915) with various character types including control characters, spaces, and special characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0915 ÷ 0020 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ 0915 × 0308 ÷ 0020 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ 0915 ÷ 000D ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 0915 × 0308 ÷ 000D ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 0915 ÷ 000A ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 0915 × 0308 ÷ 000A ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 0915 ÷ 0001 ÷ #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]\n÷ 0915 × 0308 ÷ 0001 ÷  #  ÷ [0.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Overlay Dependencies in CMake\nDESCRIPTION: Sets up conditional SDK overlay dependencies based on the SWIFT_BUILD_SDK_OVERLAY flag. This determines which SDK-specific modules will be included in the build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/libexec/swift-backtrace/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(darwin)\nset(wincrt_sdk)\nset(glibc)\nset(musl)\n\nif(SWIFT_BUILD_SDK_OVERLAY)\n  set(darwin Darwin)\n  set(wincrt_sdk CRT WinSDK)\n  set(glibc Glibc)\n  set(musl Musl)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Characters to Numerical Values 21-29\nDESCRIPTION: Lists Unicode code points that represent numerical values from 21 to 29, primarily focusing on circled number notation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_17\n\nLANGUAGE: plain\nCODE:\n```\n3251          ; 21.0 ; ; 21 # No       CIRCLED NUMBER TWENTY ONE\n\n# Total code points: 1\n\n# ================================================\n\n3252          ; 22.0 ; ; 22 # No       CIRCLED NUMBER TWENTY TWO\n\n# Total code points: 1\n\n# ================================================\n\n3253          ; 23.0 ; ; 23 # No       CIRCLED NUMBER TWENTY THREE\n\n# Total code points: 1\n\n# ================================================\n\n3254          ; 24.0 ; ; 24 # No       CIRCLED NUMBER TWENTY FOUR\n\n# Total code points: 1\n\n# ================================================\n\n3255          ; 25.0 ; ; 25 # No       CIRCLED NUMBER TWENTY FIVE\n\n# Total code points: 1\n\n# ================================================\n\n3256          ; 26.0 ; ; 26 # No       CIRCLED NUMBER TWENTY SIX\n\n# Total code points: 1\n\n# ================================================\n\n3257          ; 27.0 ; ; 27 # No       CIRCLED NUMBER TWENTY SEVEN\n\n# Total code points: 1\n\n# ================================================\n\n3258          ; 28.0 ; ; 28 # No       CIRCLED NUMBER TWENTY EIGHT\n\n# Total code points: 1\n\n# ================================================\n\n3259          ; 29.0 ; ; 29 # No       CIRCLED NUMBER TWENTY NINE\n\n# Total code points: 1\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Break Test Data with Character Annotations and Break Points\nDESCRIPTION: A comprehensive set of test cases for Unicode word breaking algorithms. Each line shows character sequences with explicitly marked break points (÷) and non-break points (×), followed by detailed annotations explaining each character and the applicable rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n÷ 0061 ÷ 002C ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 ÷ 002C × 0308 ÷ 0061 ÷ 0027 × 2060 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 ÷ 002C ÷ 0061 ÷ 002C ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 002C × 0308 ÷ 0061 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 002C ÷ 0031 ÷ 003A ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0061 ÷ 002C × 0308 ÷ 0031 ÷ 003A ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0061 ÷ 002C ÷ 0031 ÷ 0027 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0061 ÷ 002C × 0308 ÷ 0031 ÷ 0027 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0061 ÷ 002C ÷ 0031 ÷ 002C ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 002C × 0308 ÷ 0031 ÷ 002C ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0061 ÷ 002C ÷ 0031 ÷ 002E × 2060 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0061 ÷ 002C × 0308 ÷ 0031 ÷ 002E × 2060 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0001 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0001 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 000D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 000D ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 000A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 000A ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 000B ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 000B ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 3031 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 3031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0041 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0041 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 003A ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 002C ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 002C ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 002E ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 002E ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0030 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0030 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 005F ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 005F ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 1F1E6 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 1F1E6 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 05D0 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 05D0 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0022 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0022 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0027 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 231A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 231A ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0020 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0020 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 0031 ÷ 003A × 00AD ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 × 00AD ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 0031 ÷ 003A × 0300 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 × 0300 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 0031 ÷ 003A × 200D ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 × 200D ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0061 × 2060 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0061 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0061 ÷ 003A ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0061 ÷ 003A ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0061 ÷ 0027 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0031 ÷ 003A × 0308 ÷ 0061 ÷ 0027 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 0061 ÷ 0027 × 2060 ÷  #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Testing swift-corelibs-libdispatch Build with Ninja - Batchfile\nDESCRIPTION: This command line runs the test suite for a previously built swift-corelibs-libdispatch package using Ninja in the build directory. It expects all prior build and dependency steps to have completed successfully, and that tests can locate all required binaries and libraries in the environment. Output is test results for dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_8\n\nLANGUAGE: Batchfile\nCODE:\n```\nninja -C S:\\\\b\\\\2 check\n```\n\n----------------------------------------\n\nTITLE: Publishing Allocating Initializer to the Class VTable in Swift SIL\nDESCRIPTION: This snippet illustrates how the allocating entry-point for a class initializer is recorded in the class's vtable within SIL. This mapping enables the Swift runtime to discover the correct initializer, emphasizing that only the allocating entry-point is vtable-exposed. Prerequisite: understanding of Swift vtable emission and how SIL encoding affects runtime dispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILInitializerConventions.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nsil_vtable MyClass {\n  // ...\n  #MyClass.init!allocator: (MyClass.Type) -> (<...>) -> MyClass : @$s4test7MyClassC5finalACSi_tcfC\t// MyClass.__allocating_init(final:)\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Threading Package Overrides\nDESCRIPTION: Displays a message when the threading package has been overridden, showing which SDK is using which package. This helps with debugging threading-related build configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_69\n\nLANGUAGE: cmake\nCODE:\n```\n#\n# Display a message if the threading package has been overridden\n#\n\nif(SWIFT_THREADING_PACKAGE)\n  message(STATUS \"\")\n  message(STATUS \"Threading package override enabled\")\n  foreach(elt ${SWIFT_THREADING_PACKAGE})\n    string(REPLACE \":\" \";\" elt_list \"${elt}\")\n    list(LENGTH elt_list elt_list_len)\n    if(elt_list_len EQUAL 1)\n      set(elt_sdk \"Global\")\n      list(GET elt_list 0 elt_package)\n    elseif(elt_list_len EQUAL 2)\n      list(GET elt_list 0 elt_sdk)\n      list(GET elt_list 1 elt_package)\n      string(TOUPPER \"${elt_sdk}\" elt_sdk)\n    else()\n      message(FATAL_ERROR \"Bad threading override \\\"${elt}\\\" - SWIFT_THREADING_PACKAGE must be a semicolon separated list of package or sdk:package pairs.\")\n    endif()\n    string(TOLOWER \"${elt_package}\" elt_package)\n    message(STATUS \"  ${elt_sdk}: ${elt_package}\")\n  endforeach()\n  message(STATUS \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Reference Count using swift_retainCount (C Convention)\nDESCRIPTION: This function is intended for use by allocation profiling tools. It takes an unowned `NativeObject` reference and returns a `UInt`. However, the documentation explicitly states it returns a random number, not the actual reference count.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Runtime.md#2025-04-23_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n@convention(c) (@unowned NativeObject) -> UInt\n```\n\n----------------------------------------\n\nTITLE: Float Literal SIL Instruction\nDESCRIPTION: Creates a floating-point literal value of type Builtin.FP<n>. The literal value is specified as a hexadecimal integer representing the bitwise layout of the float.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_88\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'float_literal' sil-type ',' int-literal\n\n%1 = float_literal $Builtin.FP<n>, 0x3F800000\n// $Builtin.FP<n> must be a builtin floating-point type\n// %1 has type $Builtin.FP<n>\n```\n\n----------------------------------------\n\nTITLE: Creating Primary Test Target in CMake\nDESCRIPTION: This snippet creates the main test target with configuration for uploading the standard library, reflection test tools, and running tests via LIT (LLVM Integrated Tester). It sets up proper test environment and parameters for the test execution.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nset(test_target_name\n    \"check-swift${test_subset_target_suffix}${test_mode_target_suffix}${VARIANT_SUFFIX}\")\nadd_custom_target(\"${test_target_name}\"\n    ${maybe_command_upload_stdlib}\n    ${command_upload_swift_reflection_test}\n    ${command_clean_test_results_dir}\n    COMMAND\n      ${CMAKE_COMMAND} -E env ${SWIFT_LIT_ENVIRONMENT}\n      $<TARGET_FILE:Python3::Interpreter> \"${LIT}\"\n      ${LIT_ARGS}\n      \"--param\" \"swift_test_subset=${test_subset}\"\n      \"--param\" \"swift_test_mode=${test_mode}\"\n      ${directories}\n    DEPENDS ${dependencies}\n    COMMENT \"Running ${test_subset} Swift tests for ${VARIANT_TRIPLE}\"\n    USES_TERMINAL)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Regional_Indicator Property\nDESCRIPTION: This snippet defines the Unicode code point range for characters with the 'Regional_Indicator' property. These are used to represent country flags in emoji implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_5\n\nLANGUAGE: Unicode\nCODE:\n```\n1F1E6..1F1FF  ; Regional_Indicator # So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: Setting Target Folder Properties in CMake\nDESCRIPTION: This snippet organizes test targets into folders for better organization in IDEs that support CMake's folder property (like Visual Studio). All test targets are placed in the 'Tests/check-swift' folder.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nset_property(TARGET\n    \"${test_target_name}\"\n    \"${test_target_name}-custom\"\n    \"${test_dependencies_target_name}\"\n    PROPERTY FOLDER \"Tests/check-swift\")\n```\n\n----------------------------------------\n\nTITLE: Documenting Unicode Word Boundary Rules with Test Cases\nDESCRIPTION: A comprehensive set of test cases for Unicode word segmentation rules. Each line represents a test sequence with explicit notation for break points (÷) and non-break points (×), followed by detailed character information including Unicode code points and character classes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n÷ 0031 ÷ 003A × 0308 ÷ 0061 ÷ 0027 × 2060 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Testing Unicode Word Segmentation Rules with Various Character Combinations\nDESCRIPTION: A comprehensive set of test cases for Unicode word segmentation algorithms. Each line shows a sequence of Unicode code points with boundaries (÷) and non-boundaries (×) marked, followed by comments explaining the characters and their properties like ExtPict, Extend_FE, ZWJ_FE, etc.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n÷ 1F6D1 × 1F3FF ÷ #  ÷ [0.2] OCTAGONAL SIGN (ExtPict) × [4.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend_FE) ÷ [0.3]\n÷ 200D × 1F6D1 × 1F3FF ÷  #  ÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] OCTAGONAL SIGN (ExtPict) × [4.0] EMOJI MODIFIER FITZPATRICK TYPE-6 (Extend_FE) ÷ [0.3]\n÷ 200D × 1F6D1 ÷  #  ÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] OCTAGONAL SIGN (ExtPict) ÷ [0.3]\n÷ 200D × 1F6D1 ÷  #  ÷ [0.2] ZERO WIDTH JOINER (ZWJ_FE) × [3.3] OCTAGONAL SIGN (ExtPict) ÷ [0.3]\n÷ 1F6D1 ÷ 1F6D1 ÷ #  ÷ [0.2] OCTAGONAL SIGN (ExtPict) ÷ [999.0] OCTAGONAL SIGN (ExtPict) ÷ [0.3]\n÷ 0061 × 0308 × 200D × 0308 × 0062 ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) × [5.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]\n÷ 0061 ÷ 0020 × 0020 ÷ 0062 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] SPACE (WSegSpace) × [3.4] SPACE (WSegSpace) ÷ [999.0] LATIN SMALL LETTER B (ALetter) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 003A ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 003A ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 003A ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 003A ÷ 003A ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 003A ÷ 003A ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 002E ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 003A ÷ 002E ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 003A ÷ 002E ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 002E ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 003A ÷ 002E ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 003A ÷ 002E ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 002C ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 003A ÷ 002C ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 003A ÷ 002C ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 ÷ 003A ÷ 002C ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 003A ÷ 002C ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 003A ÷ 002C ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COLON (MidLetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 ÷ 002E ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 002E ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 002E ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 ÷ 002E ÷ 003A ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 002E ÷ 003A ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 002E ÷ 003A ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 ÷ 002E ÷ 002E ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 002E ÷ 002E ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 002E ÷ 002E ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 ÷ 002E ÷ 002E ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 002E ÷ 002E ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 002E ÷ 002E ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 ÷ 002E ÷ 002C ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 002E ÷ 002C ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 002E ÷ 002C ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 ÷ 002E ÷ 002C ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 002E ÷ 002C ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 002E ÷ 002C ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] FULL STOP (MidNumLet) ÷ [999.0] COMMA (MidNum) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 ÷ 002C ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 002C ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 × 005F × 0061 ÷ 002C ÷ 003A ÷ 0031 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] DIGIT ONE (Numeric) ÷ [0.3]\n÷ 0031 ÷ 002C ÷ 003A ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n÷ 0031 × 005F × 0031 ÷ 002C ÷ 003A ÷ 0061 ÷ #  ÷ [0.2] DIGIT ONE (Numeric) × [13.1] LOW LINE (ExtendNumLet) × [13.2] DIGIT ONE (Numeric) ÷ [999.0] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Unicode Age Property Default Definition\nDESCRIPTION: Specifies the default value for code points not explicitly listed in the Age property definitions. All unspecified code points are considered Unassigned (NA).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n@missing: 0000..10FFFF; Unassigned\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Segmentation Test Cases with Regional Indicator Symbol\nDESCRIPTION: Test cases demonstrating word segmentation rules for Regional Indicator Symbol Letter A (1F1E6) with various combining characters and punctuation marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_7\n\nLANGUAGE: txt\nCODE:\n```\n÷ 1F1E6 ÷ 231A ÷  #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 1F1E6 × 0308 ÷ 231A ÷ #  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (RI) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Unicode Hangul T Classification\nDESCRIPTION: Defines code point ranges for Hangul Jongseong characters classified as T (Trailing consonant).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\n11A8..11FF    ; T # Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN\nD7CB..D7FB    ; T # Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Test Location Target in CMake\nDESCRIPTION: This snippet creates a custom test target that allows running tests from specific custom test locations. It sets up similar environment to the main test target but uses SWIFT_LIT_TEST_PATHS instead of the default test directories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_target(\"${test_target_name}-custom\"\n    ${command_upload_stdlib}\n    ${command_upload_swift_reflection_test}\n    ${command_clean_test_results_dir}\n    COMMAND\n      ${CMAKE_COMMAND} -E env ${SWIFT_LIT_ENVIRONMENT}\n      $<TARGET_FILE:Python3::Interpreter> \"${LIT}\"\n      ${LIT_ARGS}\n      \"--param\" \"swift_test_subset=${test_subset}\"\n      \"--param\" \"swift_test_mode=${test_mode}\"\n      ${SWIFT_LIT_TEST_PATHS}\n    DEPENDS ${dependencies}\n    COMMENT \"Running ${test_subset} Swift tests for ${VARIANT_TRIPLE} from custom test locations\"\n    USES_TERMINAL)\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Characters with Changes_When_Casemapped Property\nDESCRIPTION: This code snippet defines ranges of Unicode code points that change when case mapping operations are applied. Each line specifies a range (or single code point) in hexadecimal format followed by the property name. The property is true when a character changes in lowercase (CWL), titlecase (CWT), or uppercase (CWU) transformations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_24\n\nLANGUAGE: unicode\nCODE:\n```\n#  Changes_When_Casemapped(X) is true when CWL(X), or CWT(X), or CWU(X)\n\n0041..005A    ; Changes_When_Casemapped\n0061..007A    ; Changes_When_Casemapped\n00B5          ; Changes_When_Casemapped\n00C0..00D6    ; Changes_When_Casemapped\n00D8..00F6    ; Changes_When_Casemapped\n00F8..0137    ; Changes_When_Casemapped\n0139..018C    ; Changes_When_Casemapped\n018E..01A9    ; Changes_When_Casemapped\n01AC..01B9    ; Changes_When_Casemapped\n01BC..01BD    ; Changes_When_Casemapped\n01BF          ; Changes_When_Casemapped\n01C4..0220    ; Changes_When_Casemapped\n0222..0233    ; Changes_When_Casemapped\n023A..0254    ; Changes_When_Casemapped\n0256..0257    ; Changes_When_Casemapped\n0259          ; Changes_When_Casemapped\n025B..025C    ; Changes_When_Casemapped\n0260..0261    ; Changes_When_Casemapped\n0263..0266    ; Changes_When_Casemapped\n0268..026C    ; Changes_When_Casemapped\n026F          ; Changes_When_Casemapped\n0271..0272    ; Changes_When_Casemapped\n0275          ; Changes_When_Casemapped\n027D          ; Changes_When_Casemapped\n0280          ; Changes_When_Casemapped\n0282..0283    ; Changes_When_Casemapped\n0287..028C    ; Changes_When_Casemapped\n0292          ; Changes_When_Casemapped\n029D..029E    ; Changes_When_Casemapped\n0345          ; Changes_When_Casemapped\n0370..0373    ; Changes_When_Casemapped\n0376..0377    ; Changes_When_Casemapped\n037B..037D    ; Changes_When_Casemapped\n037F          ; Changes_When_Casemapped\n0386          ; Changes_When_Casemapped\n0388..038A    ; Changes_When_Casemapped\n038C          ; Changes_When_Casemapped\n038E..03A1    ; Changes_When_Casemapped\n03A3..03D1    ; Changes_When_Casemapped\n03D5..03F5    ; Changes_When_Casemapped\n03F7..03FB    ; Changes_When_Casemapped\n03FD..0481    ; Changes_When_Casemapped\n048A..052F    ; Changes_When_Casemapped\n0531..0556    ; Changes_When_Casemapped\n0561..0587    ; Changes_When_Casemapped\n10A0..10C5    ; Changes_When_Casemapped\n10C7          ; Changes_When_Casemapped\n10CD          ; Changes_When_Casemapped\n10D0..10FA    ; Changes_When_Casemapped\n10FD..10FF    ; Changes_When_Casemapped\n13A0..13F5    ; Changes_When_Casemapped\n13F8..13FD    ; Changes_When_Casemapped\n1C80..1C8A    ; Changes_When_Casemapped\n1C90..1CBA    ; Changes_When_Casemapped\n1CBD..1CBF    ; Changes_When_Casemapped\n1D79          ; Changes_When_Casemapped\n1D7D          ; Changes_When_Casemapped\n1D8E          ; Changes_When_Casemapped\n1E00..1E9B    ; Changes_When_Casemapped\n1E9E          ; Changes_When_Casemapped\n1EA0..1F15    ; Changes_When_Casemapped\n1F18..1F1D    ; Changes_When_Casemapped\n1F20..1F45    ; Changes_When_Casemapped\n1F48..1F4D    ; Changes_When_Casemapped\n1F50..1F57    ; Changes_When_Casemapped\n1F59          ; Changes_When_Casemapped\n1F5B          ; Changes_When_Casemapped\n1F5D          ; Changes_When_Casemapped\n1F5F..1F7D    ; Changes_When_Casemapped\n1F80..1FB4    ; Changes_When_Casemapped\n1FB6..1FBC    ; Changes_When_Casemapped\n1FBE          ; Changes_When_Casemapped\n1FC2..1FC4    ; Changes_When_Casemapped\n1FC6..1FCC    ; Changes_When_Casemapped\n1FD0..1FD3    ; Changes_When_Casemapped\n1FD6..1FDB    ; Changes_When_Casemapped\n1FE0..1FEC    ; Changes_When_Casemapped\n1FF2..1FF4    ; Changes_When_Casemapped\n1FF6..1FFC    ; Changes_When_Casemapped\n2126          ; Changes_When_Casemapped\n212A..212B    ; Changes_When_Casemapped\n2132          ; Changes_When_Casemapped\n214E          ; Changes_When_Casemapped\n2160..217F    ; Changes_When_Casemapped\n2183..2184    ; Changes_When_Casemapped\n24B6..24E9    ; Changes_When_Casemapped\n2C00..2C70    ; Changes_When_Casemapped\n2C72..2C73    ; Changes_When_Casemapped\n2C75..2C76    ; Changes_When_Casemapped\n2C7E..2CE3    ; Changes_When_Casemapped\n2CEB..2CEE    ; Changes_When_Casemapped\n2CF2..2CF3    ; Changes_When_Casemapped\n2D00..2D25    ; Changes_When_Casemapped\n2D27          ; Changes_When_Casemapped\n2D2D          ; Changes_When_Casemapped\nA640..A66D    ; Changes_When_Casemapped\nA680..A69B    ; Changes_When_Casemapped\nA722..A72F    ; Changes_When_Casemapped\nA732..A76F    ; Changes_When_Casemapped\nA779..A787    ; Changes_When_Casemapped\nA78B..A78D    ; Changes_When_Casemapped\nA790..A794    ; Changes_When_Casemapped\nA796..A7AE    ; Changes_When_Casemapped\nA7B0..A7CD    ; Changes_When_Casemapped\nA7D0..A7D1    ; Changes_When_Casemapped\nA7D6..A7DC    ; Changes_When_Casemapped\nA7F5..A7F6    ; Changes_When_Casemapped\nAB53          ; Changes_When_Casemapped\nAB70..ABBF    ; Changes_When_Casemapped\nFB00..FB06    ; Changes_When_Casemapped\nFB13..FB17    ; Changes_When_Casemapped\nFF21..FF3A    ; Changes_When_Casemapped\nFF41..FF5A    ; Changes_When_Casemapped\n10400..1044F  ; Changes_When_Casemapped\n104B0..104D3  ; Changes_When_Casemapped\n104D8..104FB  ; Changes_When_Casemapped\n10570..1057A  ; Changes_When_Casemapped\n1057C..1058A  ; Changes_When_Casemapped\n1058C..10592  ; Changes_When_Casemapped\n10594..10595  ; Changes_When_Casemapped\n10597..105A1  ; Changes_When_Casemapped\n105A3..105B1  ; Changes_When_Casemapped\n105B3..105B9  ; Changes_When_Casemapped\n105BB..105BC  ; Changes_When_Casemapped\n10C80..10CB2  ; Changes_When_Casemapped\n10CC0..10CF2  ; Changes_When_Casemapped\n10D50..10D65  ; Changes_When_Casemapped\n10D70..10D85  ; Changes_When_Casemapped\n118A0..118DF  ; Changes_When_Casemapped\n16E40..16E7F  ; Changes_When_Casemapped\n1E900..1E943  ; Changes_When_Casemapped\n\n# Total code points: 2981\n\n# ================================================\n\n# Derived Property: ID_Start\n#  Characters that can start an identifier.\n#  Generated from:\n#      Lu + Ll + Lt + Lm + Lo + Nl\n#    + Other_ID_Start\n#    - Pattern_Syntax\n#    - Pattern_White_Space\n```\n\n----------------------------------------\n\nTITLE: Registering Swift SIL Optimizer Test Files\nDESCRIPTION: Adds a unit test file for the Swift SIL Optimizer component using the add_swift_unittest CMake function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SILOptimizer/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_unittest(SwiftSILOptimizerTests\n  PartitionUtilsTest.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Defining BasicBlockSet in Swift for SIL\nDESCRIPTION: Defines `BasicBlockSet`, an extremely efficient implementation of a set specifically designed to hold basic blocks within the SIL representation. It mirrors the functionality of the `BasicBlockSet` found in the C++ SIL optimizer. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nBasicBlockSet\n```\n\n----------------------------------------\n\nTITLE: Registering Swift Pass in registerSwiftPasses Function\nDESCRIPTION: Add the newly created instruction pass to the registerSwiftPasses function to enable its use in the compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nfunc registerSwiftPasses()\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Point Mappings for Other_Alphabetic Category\nDESCRIPTION: Defines ranges and individual code points that belong to the Other_Alphabetic Unicode category. Each entry includes the hex code point(s) and descriptive names for the characters. The data covers various scripts including Greek, Hebrew, Arabic, Devanagari, Bengali, and others.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_12\n\nLANGUAGE: unicode\nCODE:\n```\n0345          ; Other_Alphabetic # Mn       COMBINING GREEK YPOGEGRAMMENI\n0363..036F    ; Other_Alphabetic # Mn  [13] COMBINING LATIN SMALL LETTER A..COMBINING LATIN SMALL LETTER X\n05B0..05BD    ; Other_Alphabetic # Mn  [14] HEBREW POINT SHEVA..HEBREW POINT METEG\n05BF          ; Other_Alphabetic # Mn       HEBREW POINT RAFE\n# ... additional entries omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Unicode SpacingMark Character Definitions\nDESCRIPTION: Defines Unicode characters categorized as SpacingMark (Mc), including their code points and descriptive names. Each line contains the Unicode code point(s), category indicator, and the official Unicode character name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n0903          ; SpacingMark # Mc       DEVANAGARI SIGN VISARGA\\n093B          ; SpacingMark # Mc       DEVANAGARI VOWEL SIGN OOE\\n093E..0940    ; SpacingMark # Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II\\n0949..094C    ; SpacingMark # Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU\n```\n\n----------------------------------------\n\nTITLE: C++ and Swift Function Example\nDESCRIPTION: Example showing how C++ structs and functions are mangled when used in Swift\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_53\n\nLANGUAGE: c++\nCODE:\n```\nstruct CxxStruct {};\n\ninline void cxxFunction(CxxStruct s) {}\n```\n\nLANGUAGE: swift\nCODE:\n```\nimport CxxStructModule\n\npublic func swiftFunction(_ s: CxxStruct) {}\n```\n\n----------------------------------------\n\nTITLE: Defining Tone_Mark Unicode Character Range\nDESCRIPTION: Specifies Unicode code points classified as Tone_Mark in the Indic_Syllabic_Category property. These are nonspacing or spacing lexical tone marks used in various scripts including Thai, Lao, and Myanmar.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_20\n\nLANGUAGE: unicode\nCODE:\n```\n0E48..0E4B    ; Tone_Mark # Mn   [4] THAI CHARACTER MAI EK..THAI CHARACTER MAI CHATTAWA\n0EC8..0ECB    ; Tone_Mark # Mn   [4] LAO TONE MAI EK..LAO TONE MAI CATAWA\n1037          ; Tone_Mark # Mn       MYANMAR SIGN DOT BELOW\n1063..1064    ; Tone_Mark # Mc   [2] MYANMAR TONE MARK SGAW KAREN HATHI..MYANMAR TONE MARK SGAW KAREN KE PHO\n1069..106D    ; Tone_Mark # Mc   [5] MYANMAR SIGN WESTERN PWO KAREN TONE-1..MYANMAR SIGN WESTERN PWO KAREN TONE-5\n1087..108C    ; Tone_Mark # Mc   [6] MYANMAR SIGN SHAN TONE-2..MYANMAR SIGN SHAN COUNCIL TONE-3\n108D          ; Tone_Mark # Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE\n108F          ; Tone_Mark # Mc       MYANMAR SIGN RUMAI PALAUNG TONE-5\n109A..109B    ; Tone_Mark # Mc   [2] MYANMAR SIGN KHAMTI TONE-1..MYANMAR SIGN KHAMTI TONE-3\n19C8..19C9    ; Tone_Mark # Lo   [2] NEW TAI LUE TONE MARK-1..NEW TAI LUE TONE MARK-2\n1A75..1A79    ; Tone_Mark # Mn   [5] TAI THAM SIGN TONE-1..TAI THAM SIGN KHUEN TONE-5\nA92B..A92D    ; Tone_Mark # Mn   [3] KAYAH LI TONE PLOPHU..KAYAH LI TONE CALYA PLOPHU\nAA7B          ; Tone_Mark # Mc       MYANMAR SIGN PAO KAREN TONE\nAA7C          ; Tone_Mark # Mn       MYANMAR SIGN TAI LAING TONE-2\nAA7D          ; Tone_Mark # Mc       MYANMAR SIGN TAI LAING TONE-5\nAABF          ; Tone_Mark # Mn       TAI VIET TONE MAI EK\nAAC1          ; Tone_Mark # Mn       TAI VIET TONE MAI THO\nABEC          ; Tone_Mark # Mc       MEETEI MAYEK LUM IYEK\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Saurashtra Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Saurashtra script, including signs, letters, consonant signs, vowel signs, punctuation marks, and digits. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_48\n\nLANGUAGE: Unicode\nCODE:\n```\nA880..A881    ; Saurashtra # Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA\nA882..A8B3    ; Saurashtra # Lo  [50] SAURASHTRA LETTER A..SAURASHTRA LETTER LLA\nA8B4..A8C3    ; Saurashtra # Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU\nA8C4..A8C5    ; Saurashtra # Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU\nA8CE..A8CF    ; Saurashtra # Po   [2] SAURASHTRA DANDA..SAURASHTRA DOUBLE DANDA\nA8D0..A8D9    ; Saurashtra # Nd  [10] SAURASHTRA DIGIT ZERO..SAURASHTRA DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Characters to Numerical Values 41-49\nDESCRIPTION: Lists Unicode code points that represent numerical values from 41 to 49, exclusively focusing on circled number notation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_21\n\nLANGUAGE: plain\nCODE:\n```\n32B6          ; 41.0 ; ; 41 # No       CIRCLED NUMBER FORTY ONE\n\n# Total code points: 1\n\n# ================================================\n\n32B7          ; 42.0 ; ; 42 # No       CIRCLED NUMBER FORTY TWO\n\n# Total code points: 1\n\n# ================================================\n\n32B8          ; 43.0 ; ; 43 # No       CIRCLED NUMBER FORTY THREE\n\n# Total code points: 1\n\n# ================================================\n\n32B9          ; 44.0 ; ; 44 # No       CIRCLED NUMBER FORTY FOUR\n\n# Total code points: 1\n\n# ================================================\n\n32BA          ; 45.0 ; ; 45 # No       CIRCLED NUMBER FORTY FIVE\n\n# Total code points: 1\n\n# ================================================\n\n32BB          ; 46.0 ; ; 46 # No       CIRCLED NUMBER FORTY SIX\n\n# Total code points: 1\n\n# ================================================\n\n32BC          ; 47.0 ; ; 47 # No       CIRCLED NUMBER FORTY SEVEN\n\n# Total code points: 1\n\n# ================================================\n\n32BD          ; 48.0 ; ; 48 # No       CIRCLED NUMBER FORTY EIGHT\n\n# Total code points: 1\n\n# ================================================\n\n32BE          ; 49.0 ; ; 49 # No       CIRCLED NUMBER FORTY NINE\n\n# Total code points: 1\n```\n\n----------------------------------------\n\nTITLE: Unicode Fraction Code Points Listing\nDESCRIPTION: Detailed mapping of Unicode code points to their corresponding fraction values. Includes characters from various scripts including Malayalam, Tamil, Bengali, Oriya, Greek, Meroitic, and others. Each entry provides the hexadecimal code point, decimal equivalent, fractional representation, and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n0D5C          ; 0.1 ; ; 1/10 # No       MALAYALAM FRACTION ONE TENTH\n2152          ; 0.1 ; ; 1/10 # No       VULGAR FRACTION ONE TENTH\n11FCB         ; 0.1 ; ; 1/10 # No       TAMIL FRACTION ONE TENTH\n```\n\nLANGUAGE: unicode\nCODE:\n```\n2151          ; 0.11111111 ; ; 1/9 # No       VULGAR FRACTION ONE NINTH\n```\n\nLANGUAGE: unicode\nCODE:\n```\n09F5          ; 0.125 ; ; 1/8 # No       BENGALI CURRENCY NUMERATOR TWO\n0B76          ; 0.125 ; ; 1/8 # No       ORIYA FRACTION ONE EIGHTH\n0D77          ; 0.125 ; ; 1/8 # No       MALAYALAM FRACTION ONE EIGHTH\n215B          ; 0.125 ; ; 1/8 # No       VULGAR FRACTION ONE EIGHTH\nA834          ; 0.125 ; ; 1/8 # No       NORTH INDIC FRACTION ONE EIGHTH\n11FCC         ; 0.125 ; ; 1/8 # No       TAMIL FRACTION ONE EIGHTH\n1245F         ; 0.125 ; ; 1/8 # Nl       CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Adlam Script\nDESCRIPTION: This snippet defines the Unicode block for the Adlam script, including capital and small letters, modifiers, digits, and punctuation marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_92\n\nLANGUAGE: Unicode\nCODE:\n```\n1E900..1E943  ; Adlam # L&  [68] ADLAM CAPITAL LETTER ALIF..ADLAM SMALL LETTER SHA\n1E944..1E94A  ; Adlam # Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA\n1E94B         ; Adlam # Lm       ADLAM NASALIZATION MARK\n1E950..1E959  ; Adlam # Nd  [10] ADLAM DIGIT ZERO..ADLAM DIGIT NINE\n1E95E..1E95F  ; Adlam # Po   [2] ADLAM INITIAL EXCLAMATION MARK..ADLAM INITIAL QUESTION MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Limbu Script\nDESCRIPTION: Specifies the Unicode code point ranges for the Limbu script, categorizing characters by their types (Lo, Mn, Mc, So, Po, Nd) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_23\n\nLANGUAGE: Unicode\nCODE:\n```\n1900..191E    ; Limbu # Lo  [31] LIMBU VOWEL-CARRIER LETTER..LIMBU LETTER TRA\n1920..1922    ; Limbu # Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U\n1923..1926    ; Limbu # Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU\n1927..1928    ; Limbu # Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O\n1929..192B    ; Limbu # Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA\n1930..1931    ; Limbu # Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA\n1932          ; Limbu # Mn       LIMBU SMALL LETTER ANUSVARA\n1933..1938    ; Limbu # Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA\n1939..193B    ; Limbu # Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n1940          ; Limbu # So       LIMBU SIGN LOO\n1944..1945    ; Limbu # Po   [2] LIMBU EXCLAMATION MARK..LIMBU QUESTION MARK\n1946..194F    ; Limbu # Nd  [10] LIMBU DIGIT ZERO..LIMBU DIGIT NINE\n\n# Total code points: 68\n```\n\n----------------------------------------\n\nTITLE: Including SwiftVersion.cmake File\nDESCRIPTION: Includes another CMake file named `SwiftVersion.cmake`, located in the `cmake` subdirectory relative to the current file. This included file likely contains logic for determining and setting Swift version information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(${CMAKE_CURRENT_LIST_DIR}/cmake/SwiftVersion.cmake)\n```\n\n----------------------------------------\n\nTITLE: Unicode Terminal Punctuation Character Definitions\nDESCRIPTION: Defines Unicode code points for terminal punctuation characters including common punctuation marks like periods, commas, and question marks across different writing systems. Each line contains the Unicode code point(s), property type, and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n0021          ; Terminal_Punctuation # Po       EXCLAMATION MARK\n002C          ; Terminal_Punctuation # Po       COMMA\n002E          ; Terminal_Punctuation # Po       FULL STOP\n003A..003B    ; Terminal_Punctuation # Po   [2] COLON..SEMICOLON\n003F          ; Terminal_Punctuation # Po       QUESTION MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Tone_Letter Unicode Character Range\nDESCRIPTION: Lists Unicode code points classified as Tone_Letter in the Indic_Syllabic_Category property. These are spacing lexical tone marks with the status of letters in Tai Le and Tai Viet scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_19\n\nLANGUAGE: unicode\nCODE:\n```\n1970..1974    ; Tone_Letter # Lo   [5] TAI LE LETTER TONE-2..TAI LE LETTER TONE-6\nAAC0          ; Tone_Letter # Lo       TAI VIET TONE MAI NUENG\nAAC2          ; Tone_Letter # Lo       TAI VIET TONE MAI SONG\n```\n\n----------------------------------------\n\nTITLE: Example Directory Structure for Dependencies - Shell/Bash\nDESCRIPTION: This snippet illustrates the expected layout for prebuilt library dependencies (ICU, libcurl, libxml2, sqlite3, zlib) under the S:/Library directory. It does not perform actions but serves as a directory tree schematic referenced in the text to aid manual setup or validation. It has no language semantic value and is for user guidance only.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsBuild.md#2025-04-23_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n/Library\\n  ┝ icu-67\\n  │   ┕ usr/...\\n  ├ libcurl-development\\n  │   ┕ usr/...\\n  ├ libxml2-development\\n  │   ┕ usr/...\\n  ├ sqlite-3.28.0\\n  │   ┕ usr/...\\n  ┕ zlib-1.2.11\\n      ┕ usr/...\n```\n\n----------------------------------------\n\nTITLE: Encoding Function Specializations in Swift Mangling\nDESCRIPTION: Defines the grammar for mangling function specializations, including generic specializations, partial specializations, and argument specializations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_49\n\nLANGUAGE: Swift\nCODE:\n```\nspecialization ::= type '_' type* 'T' dropped-arg* 'g' SPEC-INFO  // Generic re-abstracted specialization\nspecialization ::= type '_' type* 'T' dropped-arg* 'B' SPEC-INFO  // Alternative mangling for generic re-abstracted specializations,\n                                                                    // used for functions with re-abstracted resilient parameter types.\nspecialization ::= type '_' type* 'T' dropped-arg* 'G' SPEC-INFO  // Generic not re-abstracted specialization\nspecialization ::= type '_' type* 'Ts' SPEC-INFO     // Generic re-abstracted prespecialization\nspecialization ::= type '_' type* 'Ti' SPEC-INFO     // Inlined function with generic substitutions.\nspecialization ::= type '_' type* 'Ta' SPEC-INFO     // Non-async specialization\n\ndropped-arg ::= 't'                                  // The first argument is dropped\ndropped-arg ::= 't' NATURAL                          // The `N+1`th argument is dropped\n```\n\n----------------------------------------\n\nTITLE: Unicode 2.1 Code Point Assignments\nDESCRIPTION: This snippet lists Unicode code points assigned in version 2.1.2 (May, 1998). It includes two new characters: the Euro sign and the object replacement character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n20AC          ; 2.1 #       EURO SIGN\nFFFC          ; 2.1 #       OBJECT REPLACEMENT CHARACTER\n```\n\n----------------------------------------\n\nTITLE: Defining Noncharacter_Code_Point Unicode Characters\nDESCRIPTION: This snippet defines Unicode code point ranges for Noncharacter_Code_Point, which are code points permanently reserved in the Unicode Standard and not used for character encoding.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_19\n\nLANGUAGE: Unicode\nCODE:\n```\nFDD0..FDEF    ; Noncharacter_Code_Point # Cn  [32] <noncharacter-FDD0>..<noncharacter-FDEF>\nFFFE..FFFF    ; Noncharacter_Code_Point # Cn   [2] <noncharacter-FFFE>..<noncharacter-FFFF>\n1FFFE..1FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-1FFFE>..<noncharacter-1FFFF>\n2FFFE..2FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-2FFFE>..<noncharacter-2FFFF>\n3FFFE..3FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-3FFFE>..<noncharacter-3FFFF>\n4FFFE..4FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-4FFFE>..<noncharacter-4FFFF>\n5FFFE..5FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-5FFFE>..<noncharacter-5FFFF>\n6FFFE..6FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-6FFFE>..<noncharacter-6FFFF>\n7FFFE..7FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-7FFFE>..<noncharacter-7FFFF>\n8FFFE..8FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-8FFFE>..<noncharacter-8FFFF>\n9FFFE..9FFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-9FFFE>..<noncharacter-9FFFF>\nAFFFE..AFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-AFFFE>..<noncharacter-AFFFF>\nBFFFE..BFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-BFFFE>..<noncharacter-BFFFF>\nCFFFE..CFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-CFFFE>..<noncharacter-CFFFF>\nDFFFE..DFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-DFFFE>..<noncharacter-DFFFF>\nEFFFE..EFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-EFFFE>..<noncharacter-EFFFF>\nFFFFE..FFFFF  ; Noncharacter_Code_Point # Cn   [2] <noncharacter-FFFFE>..<noncharacter-FFFFF>\n10FFFE..10FFFF; Noncharacter_Code_Point # Cn   [2] <noncharacter-10FFFE>..<noncharacter-10FFFF>\n```\n\n----------------------------------------\n\nTITLE: Current Approach: Swift Import of C++ Move-Only Classes Using UnsafePointers\nDESCRIPTION: Implementation of C++ move-only classes imported as Swift structs with special handling. Access to move-only members is provided through withUnsafePointer-style APIs to prevent copying.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_28\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct File {\n  public init(_ filename: std.string_view)\n  public func ReadAll() -> std.string\n}\n\nstruct TwoFiles {\n  private var _firstFile: <unspecified-opaque-storage>\n  private var _secondFile: <unspecified-opaque-storage>\n\n  func withUnsafePointerToFirstFile<Result>(\n    _ body: (UnsafePointer<File>)->Result\n  ) -> Result {\n    body(&_firstFile)\n    _fixLifetime(self)\n  }\n\n  func withUnsafePointerToSecondFile<Result>(\n    _ body: (UnsafePointer<File>)->Result\n  ) -> Result {\n    body(&_secondFile)\n    _fixLifetime(self)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Resync Script for Swift Standard Library Source Files\nDESCRIPTION: This command runs the Resync.cmake script to copy the latest Swift standard library source files into the build. This is a temporary measure during the transition to a new standard library build system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cmake -P Resync.cmake\n```\n\n----------------------------------------\n\nTITLE: Unicode Vowel_Dependent Character Ranges\nDESCRIPTION: Defines Unicode code point ranges for dependent vowel characters across multiple scripts including Devanagari, Bengali, Gurmukhi, Gujarati, and others. Each line specifies a single code point or range along with its classification and description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n093A          ; Vowel_Dependent # Mn       DEVANAGARI VOWEL SIGN OE\n093B          ; Vowel_Dependent # Mc       DEVANAGARI VOWEL SIGN OOE\n093E..0940    ; Vowel_Dependent # Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II\n0941..0948    ; Vowel_Dependent # Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in Swift Project CMake Configuration\nDESCRIPTION: Adds subdirectories 'vim', 'lldb', and 'api_checker' to the CMake build configuration. This includes these components in the build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(vim)\nadd_subdirectory(lldb)\nadd_subdirectory(api_checker)\n```\n\n----------------------------------------\n\nTITLE: Compiling Swift Code for Android Target\nDESCRIPTION: Shell command for compiling Swift source code targeting Android. Uses the Swift compiler with specific target, SDK, and resource directory configurations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Android.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ NDK_PATH=\"path/to/android-ndk-r27c\"\n$ SWIFT_PATH=path/to/swift-DEVELOPMENT-SNAPSHOT-2024-11-09-a-ubuntu22.04/usr/bin\n$ $SWIFT_PATH/swiftc \\\n    -tools-directory ${NDK_PATH}/toolchains/llvm/prebuilt/linux-x86_64/bin/ \\\n    -target aarch64-unknown-linux-android21 \\\n    -sdk ${NDK_PATH}/toolchains/llvm/prebuilt/linux-x86_64/sysroot \\\n    -resource-dir build/Ninja-ReleaseAssert/swift-linux-x86_64/lib/swift \n    hello.swift\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Mapping for Latin Letters\nDESCRIPTION: This snippet shows a portion of the Unicode character mapping table for Latin letters. It includes the Unicode code points for capital letters, their corresponding lowercase mappings, and descriptions of each character. The mapping types 'C' (lowercase), 'T' (titlecase), and 'F' (special folding) are used.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n0041; C; 0061; # LATIN CAPITAL LETTER A\n0042; C; 0062; # LATIN CAPITAL LETTER B\n0043; C; 0063; # LATIN CAPITAL LETTER C\n0044; C; 0064; # LATIN CAPITAL LETTER D\n0045; C; 0065; # LATIN CAPITAL LETTER E\n0046; C; 0066; # LATIN CAPITAL LETTER F\n0047; C; 0067; # LATIN CAPITAL LETTER G\n0048; C; 0068; # LATIN CAPITAL LETTER H\n0049; C; 0069; # LATIN CAPITAL LETTER I\n0049; T; 0131; # LATIN CAPITAL LETTER I\n004A; C; 006A; # LATIN CAPITAL LETTER J\n004B; C; 006B; # LATIN CAPITAL LETTER K\n004C; C; 006C; # LATIN CAPITAL LETTER L\n004D; C; 006D; # LATIN CAPITAL LETTER M\n004E; C; 006E; # LATIN CAPITAL LETTER N\n004F; C; 006F; # LATIN CAPITAL LETTER O\n0050; C; 0070; # LATIN CAPITAL LETTER P\n0051; C; 0071; # LATIN CAPITAL LETTER Q\n0052; C; 0072; # LATIN CAPITAL LETTER R\n0053; C; 0073; # LATIN CAPITAL LETTER S\n0054; C; 0074; # LATIN CAPITAL LETTER T\n0055; C; 0075; # LATIN CAPITAL LETTER U\n0056; C; 0076; # LATIN CAPITAL LETTER V\n0057; C; 0077; # LATIN CAPITAL LETTER W\n0058; C; 0078; # LATIN CAPITAL LETTER X\n0059; C; 0079; # LATIN CAPITAL LETTER Y\n005A; C; 007A; # LATIN CAPITAL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: Swift Generic Context Type Trait Definition\nDESCRIPTION: Defines the swift::isUsableInGenericContext type trait, which determines if a C++ type can be used as a generic parameter in Swift contexts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_72\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<class T>\ninline constexpr const bool swift::isUsableInGenericContext\n```\n\n----------------------------------------\n\nTITLE: Dead Consonant Definitions\nDESCRIPTION: Specifies Unicode codepoints for dead consonants (special consonants with killed vowels) in various Indic scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_13\n\nLANGUAGE: Unicode\nCODE:\n```\n09CE          ; Consonant_Dead # Lo       BENGALI LETTER KHANDA TA\n0C5D          ; Consonant_Dead # Lo       TELUGU LETTER NAKAARA POLLU\n0CDD          ; Consonant_Dead # Lo       KANNADA LETTER NAKAARA POLLU\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping for Hangul Syllables\nDESCRIPTION: Defines Unicode code points for Korean Hangul syllables. Each entry maps a hexadecimal code point to a Hangul syllable with LV (Leading consonant + Vowel) composition type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_12\n\nLANGUAGE: unicode\nCODE:\n```\nAC00          ; LV # Lo       HANGUL SYLLABLE GA\nAC1C          ; LV # Lo       HANGUL SYLLABLE GAE\nAC38          ; LV # Lo       HANGUL SYLLABLE GYA\nAC54          ; LV # Lo       HANGUL SYLLABLE GYAE\nAC70          ; LV # Lo       HANGUL SYLLABLE GEO\nAC8C          ; LV # Lo       HANGUL SYLLABLE GE\nACA8          ; LV # Lo       HANGUL SYLLABLE GYEO\nACC4          ; LV # Lo       HANGUL SYLLABLE GYE\nACE0          ; LV # Lo       HANGUL SYLLABLE GO\n```\n\n----------------------------------------\n\nTITLE: Unsafe Interior Pointer Example in C++\nDESCRIPTION: Demonstrates the dangers of unsafe interior pointers in C++ using std::vector as an example.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Ownership.md#2025-04-23_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nint unfortunateFunction() {\n  int *unsafeInteriorPointer = nullptr;\n  {\n    std::vector<int> vector;\n    vector.push_back(5);\n    unsafeInteriorPointer = vector.data();\n    printf(\"%d\\n\", *unsafeInteriorPointer); // Prints \"5\".\n  } // vector deallocated here\n  return *unsafeInteriorPointer; // Kaboom\n}\n```\n\n----------------------------------------\n\nTITLE: Mutating Array Elements in Swift\nDESCRIPTION: Example of mutating array elements within another array using Swift subscripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_45\n\nLANGUAGE: swift\nCODE:\n```\n// Swift module 'Matrix'\nfunc appendColumn(to matrix: inout [[Int]], value: Int) {\n  for rowIndex in matrix.indices() {\n    matrix[rowIndex].append(value)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP, Company, and Related Packages in Emacs - Emacs Lisp\nDESCRIPTION: This block configures Emacs with use-package for company, lsp-mode, lsp-ui, helm-lsp, and lsp-treemacs to enable developer productivity features like autocompletion, symbol navigation, LSP integration, and error browsing in C++ development. Dependencies include use-package and the specified packages, which must be installed from MELPA or GNU ELPA. Key parameters include customizing completion delay, minimum prefix length, hooking LSP into c-mode, preventing header decorators, and customizing completion providers. The configuration must be placed in the user's .emacs or init.el file and is intended as a comprehensive setup for C++ LSP workflows.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/SettingUpLSPEmacs.md#2025-04-23_snippet_1\n\nLANGUAGE: Emacs Lisp\nCODE:\n```\n(use-package company\n  :ensure t\n  :config\n  ;; Enable completion-as-you-type behavior.\n  ;; don't add any dely before trying to complete thing being typed\n  ;; the call/response to gopls is asynchronous so this should have little\n  ;; to no affect on edit latency\n  (setq company-idle-delay 0.1)\n  ;; start completing after a single character instead of 3\n  (setq company-minimum-prefix-length 1)\n  ;; align fields in completions\n  (setq company-tooltip-align-annotations t)\n  )\n(use-package lsp-mode\n  :ensure t\n  :commands (lsp lsp-deferred)\n  :hook (c-mode-common . lsp)\n  :custom\n  ;; Prevent lsp from inserting header decorators.\n  (lsp-clients-clangd-args '(\"--header-insertion-decorators=0\" \"--header-insertion=never\"))\n  :init\n  ;; Enable easy local renaming using LSP\n  (bind-key \"C-x l\" 'lsp-rename)\n  :config\n  ;; The CAPF back-end provides a bridge to the standard\n  ;; completion-at-point-functions facility, and thus works with any major mode\n  ;; that defines a proper completion function.\n  (setq lsp-completion-provider :capf)\n  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks))\n\n(use-package lsp-ui :commands lsp-ui-mode)\n(use-package helm-lsp :commands helm-lsp-workspace-symbol\n  :config\n  (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))\n(use-package lsp-treemacs :commands lsp-treemacs-errors-list)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode SpacingMark Code Points\nDESCRIPTION: Defines a range of Unicode code points that are classified as SpacingMark (Mc) characters. These include various vowel signs, visargas, and other combining marks from scripts like Devanagari, Bengali, Tamil, and other Indic and Asian writing systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_7\n\nLANGUAGE: unicode\nCODE:\n```\n0903          ; SpacingMark # Mc       DEVANAGARI SIGN VISARGA\n093B          ; SpacingMark # Mc       DEVANAGARI VOWEL SIGN OOE\n093E..0940    ; SpacingMark # Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II\n0949..094C    ; SpacingMark # Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU\n...\n```\n\n----------------------------------------\n\nTITLE: Defining LTO Codegen Control Option for ld64 on Darwin in CMake\nDESCRIPTION: Defines a CMake option `SWIFT_TOOLS_LD64_LTO_CODEGEN_ONLY_FOR_SUPPORTING_TARGETS`. This boolean option, defaulting to FALSE, controls whether LLVM IR optimizations are skipped during ThinLTO linking with ld64 on Darwin for targets less likely to benefit (e.g., bootstrapping tools).\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\noption(SWIFT_TOOLS_LD64_LTO_CODEGEN_ONLY_FOR_SUPPORTING_TARGETS\n    \"When building ThinLTO using ld64 on Darwin, controls whether to opt out of\n    LLVM IR optimizations when linking targets that will get\n    little benefit from it (e.g. tools for bootstrapping or\n    debugging Swift)\"\n    FALSE)\n```\n\n----------------------------------------\n\nTITLE: Word Break Test Cases with LOW LINE Character\nDESCRIPTION: Test cases showing word break behavior when combining LOW LINE (ExtendNumLet) with various Unicode characters and combining marks. Tests include combinations with digits, letters, punctuation and special characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\n÷ 005F ÷ 002E ÷ #  ÷ [0.2] LOW LINE (ExtendNumLet) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 005F × 0308 ÷ 002E ÷  #  ÷ [0.2] LOW LINE (ExtendNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Common Script Characters\nDESCRIPTION: This snippet defines Unicode character ranges for the Common script, including various symbols, punctuation marks, and mathematical operators. It specifies the hexadecimal ranges and provides descriptions for each character or group of characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n214B          ; Common # Sm       TURNED AMPERSAND\n214C..214D    ; Common # So   [2] PER SIGN..AKTIESELSKAB\n214F          ; Common # So       SYMBOL FOR SAMARITAN SOURCE\n2150..215F    ; Common # No  [16] VULGAR FRACTION ONE SEVENTH..FRACTION NUMERATOR ONE\n2189          ; Common # No       VULGAR FRACTION ZERO THIRDS\n218A..218B    ; Common # So   [2] TURNED DIGIT TWO..TURNED DIGIT THREE\n2190..2194    ; Common # Sm   [5] LEFTWARDS ARROW..LEFT RIGHT ARROW\n2195..2199    ; Common # So   [5] UP DOWN ARROW..SOUTH WEST ARROW\n219A..219B    ; Common # Sm   [2] LEFTWARDS ARROW WITH STROKE..RIGHTWARDS ARROW WITH STROKE\n219C..219F    ; Common # So   [4] LEFTWARDS WAVE ARROW..UPWARDS TWO HEADED ARROW\n21A0          ; Common # Sm       RIGHTWARDS TWO HEADED ARROW\n21A1..21A2    ; Common # So   [2] DOWNWARDS TWO HEADED ARROW..LEFTWARDS ARROW WITH TAIL\n21A3          ; Common # Sm       RIGHTWARDS ARROW WITH TAIL\n21A4..21A5    ; Common # So   [2] LEFTWARDS ARROW FROM BAR..UPWARDS ARROW FROM BAR\n21A6          ; Common # Sm       RIGHTWARDS ARROW FROM BAR\n21A7..21AD    ; Common # So   [7] DOWNWARDS ARROW FROM BAR..LEFT RIGHT WAVE ARROW\n21AE          ; Common # Sm       LEFT RIGHT ARROW WITH STROKE\n21AF..21CD    ; Common # So  [31] DOWNWARDS ZIGZAG ARROW..LEFTWARDS DOUBLE ARROW WITH STROKE\n21CE..21CF    ; Common # Sm   [2] LEFT RIGHT DOUBLE ARROW WITH STROKE..RIGHTWARDS DOUBLE ARROW WITH STROKE\n21D0..21D1    ; Common # So   [2] LEFTWARDS DOUBLE ARROW..UPWARDS DOUBLE ARROW\n21D2          ; Common # Sm       RIGHTWARDS DOUBLE ARROW\n21D3          ; Common # So       DOWNWARDS DOUBLE ARROW\n21D4          ; Common # Sm       LEFT RIGHT DOUBLE ARROW\n21D5..21F3    ; Common # So  [31] UP DOWN DOUBLE ARROW..UP DOWN WHITE ARROW\n21F4..22FF    ; Common # Sm [268] RIGHT ARROW WITH SMALL CIRCLE..Z NOTATION BAG MEMBERSHIP\n2300..2307    ; Common # So   [8] DIAMETER SIGN..WAVY LINE\n2308          ; Common # Ps       LEFT CEILING\n2309          ; Common # Pe       RIGHT CEILING\n230A          ; Common # Ps       LEFT FLOOR\n230B          ; Common # Pe       RIGHT FLOOR\n230C..231F    ; Common # So  [20] BOTTOM RIGHT CROP..BOTTOM RIGHT CORNER\n2320..2321    ; Common # Sm   [2] TOP HALF INTEGRAL..BOTTOM HALF INTEGRAL\n2322..2328    ; Common # So   [7] FROWN..KEYBOARD\n2329          ; Common # Ps       LEFT-POINTING ANGLE BRACKET\n232A          ; Common # Pe       RIGHT-POINTING ANGLE BRACKET\n232B..237B    ; Common # So  [81] ERASE TO THE LEFT..NOT CHECK MARK\n237C          ; Common # Sm       RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW\n237D..239A    ; Common # So  [30] SHOULDERED OPEN BOX..CLEAR SCREEN SYMBOL\n239B..23B3    ; Common # Sm  [25] LEFT PARENTHESIS UPPER HOOK..SUMMATION BOTTOM\n23B4..23DB    ; Common # So  [40] TOP SQUARE BRACKET..FUSE\n23DC..23E1    ; Common # Sm   [6] TOP PARENTHESIS..BOTTOM TORTOISE SHELL BRACKET\n23E2..2429    ; Common # So  [72] WHITE TRAPEZIUM..SYMBOL FOR DELETE MEDIUM SHADE FORM\n2440..244A    ; Common # So  [11] OCR HOOK..OCR DOUBLE BACKSLASH\n2460..249B    ; Common # No  [60] CIRCLED DIGIT ONE..NUMBER TWENTY FULL STOP\n249C..24E9    ; Common # So  [78] PARENTHESIZED LATIN SMALL LETTER A..CIRCLED LATIN SMALL LETTER Z\n24EA..24FF    ; Common # No  [22] CIRCLED DIGIT ZERO..NEGATIVE CIRCLED DIGIT ZERO\n2500..25B6    ; Common # So [183] BOX DRAWINGS LIGHT HORIZONTAL..BLACK RIGHT-POINTING TRIANGLE\n25B7          ; Common # Sm       WHITE RIGHT-POINTING TRIANGLE\n25B8..25C0    ; Common # So   [9] BLACK RIGHT-POINTING SMALL TRIANGLE..BLACK LEFT-POINTING TRIANGLE\n25C1          ; Common # Sm       WHITE LEFT-POINTING TRIANGLE\n25C2..25F7    ; Common # So  [54] BLACK LEFT-POINTING SMALL TRIANGLE..WHITE CIRCLE WITH UPPER RIGHT QUADRANT\n25F8..25FF    ; Common # Sm   [8] UPPER LEFT TRIANGLE..LOWER RIGHT TRIANGLE\n2600..266E    ; Common # So [111] BLACK SUN WITH RAYS..MUSIC NATURAL SIGN\n266F          ; Common # Sm       MUSIC SHARP SIGN\n2670..2767    ; Common # So [248] WEST SYRIAC CROSS..ROTATED FLORAL HEART BULLET\n2768          ; Common # Ps       MEDIUM LEFT PARENTHESIS ORNAMENT\n2769          ; Common # Pe       MEDIUM RIGHT PARENTHESIS ORNAMENT\n276A          ; Common # Ps       MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT\n276B          ; Common # Pe       MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT\n276C          ; Common # Ps       MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT\n276D          ; Common # Pe       MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT\n276E          ; Common # Ps       HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT\n276F          ; Common # Pe       HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT\n2770          ; Common # Ps       HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT\n2771          ; Common # Pe       HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT\n2772          ; Common # Ps       LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT\n2773          ; Common # Pe       LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT\n2774          ; Common # Ps       MEDIUM LEFT CURLY BRACKET ORNAMENT\n2775          ; Common # Pe       MEDIUM RIGHT CURLY BRACKET ORNAMENT\n2776..2793    ; Common # No  [30] DINGBAT NEGATIVE CIRCLED DIGIT ONE..DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN\n2794..27BF    ; Common # So  [44] HEAVY WIDE-HEADED RIGHTWARDS ARROW..DOUBLE CURLY LOOP\n27C0..27C4    ; Common # Sm   [5] THREE DIMENSIONAL ANGLE..OPEN SUPERSET\n27C5          ; Common # Ps       LEFT S-SHAPED BAG DELIMITER\n27C6          ; Common # Pe       RIGHT S-SHAPED BAG DELIMITER\n27C7..27E5    ; Common # Sm  [31] OR WITH DOT INSIDE..WHITE SQUARE WITH RIGHTWARDS TICK\n27E6          ; Common # Ps       MATHEMATICAL LEFT WHITE SQUARE BRACKET\n27E7          ; Common # Pe       MATHEMATICAL RIGHT WHITE SQUARE BRACKET\n27E8          ; Common # Ps       MATHEMATICAL LEFT ANGLE BRACKET\n27E9          ; Common # Pe       MATHEMATICAL RIGHT ANGLE BRACKET\n27EA          ; Common # Ps       MATHEMATICAL LEFT DOUBLE ANGLE BRACKET\n27EB          ; Common # Pe       MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET\n27EC          ; Common # Ps       MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET\n27ED          ; Common # Pe       MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET\n27EE          ; Common # Ps       MATHEMATICAL LEFT FLATTENED PARENTHESIS\n27EF          ; Common # Pe       MATHEMATICAL RIGHT FLATTENED PARENTHESIS\n27F0..27FF    ; Common # Sm  [16] UPWARDS QUADRUPLE ARROW..LONG RIGHTWARDS SQUIGGLE ARROW\n2900..2982    ; Common # Sm [131] RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE..Z NOTATION TYPE COLON\n2983          ; Common # Ps       LEFT WHITE CURLY BRACKET\n2984          ; Common # Pe       RIGHT WHITE CURLY BRACKET\n2985          ; Common # Ps       LEFT WHITE PARENTHESIS\n2986          ; Common # Pe       RIGHT WHITE PARENTHESIS\n2987          ; Common # Ps       Z NOTATION LEFT IMAGE BRACKET\n2988          ; Common # Pe       Z NOTATION RIGHT IMAGE BRACKET\n2989          ; Common # Ps       Z NOTATION LEFT BINDING BRACKET\n298A          ; Common # Pe       Z NOTATION RIGHT BINDING BRACKET\n298B          ; Common # Ps       LEFT SQUARE BRACKET WITH UNDERBAR\n298C          ; Common # Pe       RIGHT SQUARE BRACKET WITH UNDERBAR\n298D          ; Common # Ps       LEFT SQUARE BRACKET WITH TICK IN TOP CORNER\n298E          ; Common # Pe       RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\n298F          ; Common # Ps       LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER\n2990          ; Common # Pe       RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER\n2991          ; Common # Ps       LEFT ANGLE BRACKET WITH DOT\n2992          ; Common # Pe       RIGHT ANGLE BRACKET WITH DOT\n2993          ; Common # Ps       LEFT ARC LESS-THAN BRACKET\n2994          ; Common # Pe       RIGHT ARC GREATER-THAN BRACKET\n2995          ; Common # Ps       DOUBLE LEFT ARC GREATER-THAN BRACKET\n2996          ; Common # Pe       DOUBLE RIGHT ARC LESS-THAN BRACKET\n2997          ; Common # Ps       LEFT BLACK TORTOISE SHELL BRACKET\n2998          ; Common # Pe       RIGHT BLACK TORTOISE SHELL BRACKET\n2999..29D7    ; Common # Sm  [63] DOTTED FENCE..BLACK HOURGLASS\n29D8          ; Common # Ps       LEFT WIGGLY FENCE\n29D9          ; Common # Pe       RIGHT WIGGLY FENCE\n29DA          ; Common # Ps       LEFT DOUBLE WIGGLY FENCE\n29DB          ; Common # Pe       RIGHT DOUBLE WIGGLY FENCE\n29DC..29FB    ; Common # Sm  [32] INCOMPLETE INFINITY..TRIPLE PLUS\n29FC          ; Common # Ps       LEFT-POINTING CURVED ANGLE BRACKET\n29FD          ; Common # Pe       RIGHT-POINTING CURVED ANGLE BRACKET\n29FE..2AFF    ; Common # Sm [258] TINY..N-ARY WHITE VERTICAL BAR\n2B00..2B2F    ; Common # So  [48] NORTH EAST WHITE ARROW..WHITE VERTICAL ELLIPSE\n2B30..2B44    ; Common # Sm  [21] LEFT ARROW WITH SMALL CIRCLE..RIGHTWARDS ARROW THROUGH SUPERSET\n2B45..2B46    ; Common # So   [2] LEFTWARDS QUADRUPLE ARROW..RIGHTWARDS QUADRUPLE ARROW\n2B47..2B4C    ; Common # Sm   [6] REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW..RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR\n2B4D..2B73    ; Common # So  [39] DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW..DOWNWARDS TRIANGLE-HEADED ARROW TO BAR\n2B76..2B95    ; Common # So  [32] NORTH WEST TRIANGLE-HEADED ARROW TO BAR..RIGHTWARDS BLACK ARROW\n2B97..2BFF    ; Common # So [105] SYMBOL FOR TYPE A ELECTRONICS..HELLSCHREIBER PAUSE SYMBOL\n2E00..2E01    ; Common # Po   [2] RIGHT ANGLE SUBSTITUTION MARKER..RIGHT ANGLE DOTTED SUBSTITUTION MARKER\n2E02          ; Common # Pi       LEFT SUBSTITUTION BRACKET\n2E03          ; Common # Pf       RIGHT SUBSTITUTION BRACKET\n2E04          ; Common # Pi       LEFT DOTTED SUBSTITUTION BRACKET\n2E05          ; Common # Pf       RIGHT DOTTED SUBSTITUTION BRACKET\n2E06..2E08    ; Common # Po   [3] RAISED INTERPOLATION MARKER..DOTTED TRANSPOSITION MARKER\n2E09          ; Common # Pi       LEFT TRANSPOSITION BRACKET\n2E0A          ; Common # Pf       RIGHT TRANSPOSITION BRACKET\n2E0B          ; Common # Po       RAISED SQUARE\n2E0C          ; Common # Pi       LEFT RAISED OMISSION BRACKET\n2E0D          ; Common # Pf       RIGHT RAISED OMISSION BRACKET\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Grapheme Base Code Points in Plaintext Notation\nDESCRIPTION: This data file defines ranges of Unicode code points that have the Grapheme_Base property. Each line contains either a single hexadecimal code point or a range in the format 'XXXX..YYYY', followed by the property name 'Grapheme_Base'. This information is used in text processing to identify base characters that can form grapheme clusters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_40\n\nLANGUAGE: plaintext\nCODE:\n```\n0EA5          ; Grapheme_Base\n0EA7..0EB0    ; Grapheme_Base\n0EB2..0EB3    ; Grapheme_Base\n0EBD          ; Grapheme_Base\n0EC0..0EC4    ; Grapheme_Base\n0EC6          ; Grapheme_Base\n0ED0..0ED9    ; Grapheme_Base\n0EDC..0EDF    ; Grapheme_Base\n0F00          ; Grapheme_Base\n0F01..0F03    ; Grapheme_Base\n0F04..0F12    ; Grapheme_Base\n0F13          ; Grapheme_Base\n0F14          ; Grapheme_Base\n0F15..0F17    ; Grapheme_Base\n0F1A..0F1F    ; Grapheme_Base\n0F20..0F29    ; Grapheme_Base\n0F2A..0F33    ; Grapheme_Base\n0F34          ; Grapheme_Base\n0F36          ; Grapheme_Base\n0F38          ; Grapheme_Base\n0F3A          ; Grapheme_Base\n0F3B          ; Grapheme_Base\n0F3C          ; Grapheme_Base\n0F3D          ; Grapheme_Base\n0F3E..0F3F    ; Grapheme_Base\n0F40..0F47    ; Grapheme_Base\n0F49..0F6C    ; Grapheme_Base\n0F7F          ; Grapheme_Base\n0F85          ; Grapheme_Base\n0F88..0F8C    ; Grapheme_Base\n0FBE..0FC5    ; Grapheme_Base\n0FC7..0FCC    ; Grapheme_Base\n0FCE..0FCF    ; Grapheme_Base\n0FD0..0FD4    ; Grapheme_Base\n0FD5..0FD8    ; Grapheme_Base\n0FD9..0FDA    ; Grapheme_Base\n1000..102A    ; Grapheme_Base\n102B..102C    ; Grapheme_Base\n1031          ; Grapheme_Base\n1038          ; Grapheme_Base\n103B..103C    ; Grapheme_Base\n103F          ; Grapheme_Base\n1040..1049    ; Grapheme_Base\n104A..104F    ; Grapheme_Base\n1050..1055    ; Grapheme_Base\n1056..1057    ; Grapheme_Base\n105A..105D    ; Grapheme_Base\n1061          ; Grapheme_Base\n1062..1064    ; Grapheme_Base\n1065..1066    ; Grapheme_Base\n1067..106D    ; Grapheme_Base\n106E..1070    ; Grapheme_Base\n1075..1081    ; Grapheme_Base\n1083..1084    ; Grapheme_Base\n1087..108C    ; Grapheme_Base\n108E          ; Grapheme_Base\n108F          ; Grapheme_Base\n1090..1099    ; Grapheme_Base\n109A..109C    ; Grapheme_Base\n109E..109F    ; Grapheme_Base\n10A0..10C5    ; Grapheme_Base\n10C7          ; Grapheme_Base\n10CD          ; Grapheme_Base\n10D0..10FA    ; Grapheme_Base\n10FB          ; Grapheme_Base\n10FC          ; Grapheme_Base\n10FD..10FF    ; Grapheme_Base\n1100..1248    ; Grapheme_Base\n124A..124D    ; Grapheme_Base\n1250..1256    ; Grapheme_Base\n1258          ; Grapheme_Base\n125A..125D    ; Grapheme_Base\n1260..1288    ; Grapheme_Base\n128A..128D    ; Grapheme_Base\n1290..12B0    ; Grapheme_Base\n12B2..12B5    ; Grapheme_Base\n12B8..12BE    ; Grapheme_Base\n12C0          ; Grapheme_Base\n12C2..12C5    ; Grapheme_Base\n12C8..12D6    ; Grapheme_Base\n12D8..1310    ; Grapheme_Base\n1312..1315    ; Grapheme_Base\n1318..135A    ; Grapheme_Base\n1360..1368    ; Grapheme_Base\n1369..137C    ; Grapheme_Base\n1380..138F    ; Grapheme_Base\n1390..1399    ; Grapheme_Base\n13A0..13F5    ; Grapheme_Base\n13F8..13FD    ; Grapheme_Base\n1400          ; Grapheme_Base\n1401..166C    ; Grapheme_Base\n166D          ; Grapheme_Base\n166E          ; Grapheme_Base\n166F..167F    ; Grapheme_Base\n1680          ; Grapheme_Base\n1681..169A    ; Grapheme_Base\n169B          ; Grapheme_Base\n169C          ; Grapheme_Base\n16A0..16EA    ; Grapheme_Base\n16EB..16ED    ; Grapheme_Base\n16EE..16F0    ; Grapheme_Base\n16F1..16F8    ; Grapheme_Base\n1700..1711    ; Grapheme_Base\n171F..1731    ; Grapheme_Base\n1735..1736    ; Grapheme_Base\n1740..1751    ; Grapheme_Base\n1760..176C    ; Grapheme_Base\n176E..1770    ; Grapheme_Base\n1780..17B3    ; Grapheme_Base\n17B6          ; Grapheme_Base\n17BE..17C5    ; Grapheme_Base\n17C7..17C8    ; Grapheme_Base\n17D4..17D6    ; Grapheme_Base\n17D7          ; Grapheme_Base\n17D8..17DA    ; Grapheme_Base\n17DB          ; Grapheme_Base\n17DC          ; Grapheme_Base\n17E0..17E9    ; Grapheme_Base\n17F0..17F9    ; Grapheme_Base\n1800..1805    ; Grapheme_Base\n1806          ; Grapheme_Base\n1807..180A    ; Grapheme_Base\n1810..1819    ; Grapheme_Base\n1820..1842    ; Grapheme_Base\n1843          ; Grapheme_Base\n1844..1878    ; Grapheme_Base\n1880..1884    ; Grapheme_Base\n1887..18A8    ; Grapheme_Base\n18AA          ; Grapheme_Base\n18B0..18F5    ; Grapheme_Base\n1900..191E    ; Grapheme_Base\n1923..1926    ; Grapheme_Base\n1929..192B    ; Grapheme_Base\n1930..1931    ; Grapheme_Base\n1933..1938    ; Grapheme_Base\n1940          ; Grapheme_Base\n1944..1945    ; Grapheme_Base\n1946..194F    ; Grapheme_Base\n1950..196D    ; Grapheme_Base\n1970..1974    ; Grapheme_Base\n1980..19AB    ; Grapheme_Base\n19B0..19C9    ; Grapheme_Base\n19D0..19D9    ; Grapheme_Base\n19DA          ; Grapheme_Base\n19DE..19FF    ; Grapheme_Base\n1A00..1A16    ; Grapheme_Base\n1A19..1A1A    ; Grapheme_Base\n1A1E..1A1F    ; Grapheme_Base\n1A20..1A54    ; Grapheme_Base\n1A55          ; Grapheme_Base\n1A57          ; Grapheme_Base\n1A61          ; Grapheme_Base\n1A63..1A64    ; Grapheme_Base\n1A6D..1A72    ; Grapheme_Base\n1A80..1A89    ; Grapheme_Base\n1A90..1A99    ; Grapheme_Base\n1AA0..1AA6    ; Grapheme_Base\n1AA7          ; Grapheme_Base\n1AA8..1AAD    ; Grapheme_Base\n1B04          ; Grapheme_Base\n1B05..1B33    ; Grapheme_Base\n1B3E..1B41    ; Grapheme_Base\n1B45..1B4C    ; Grapheme_Base\n1B4E..1B4F    ; Grapheme_Base\n1B50..1B59    ; Grapheme_Base\n1B5A..1B60    ; Grapheme_Base\n1B61..1B6A    ; Grapheme_Base\n1B74..1B7C    ; Grapheme_Base\n1B7D..1B7F    ; Grapheme_Base\n1B82          ; Grapheme_Base\n1B83..1BA0    ; Grapheme_Base\n1BA1          ; Grapheme_Base\n1BA6..1BA7    ; Grapheme_Base\n1BAE..1BAF    ; Grapheme_Base\n1BB0..1BB9    ; Grapheme_Base\n1BBA..1BE5    ; Grapheme_Base\n1BE7          ; Grapheme_Base\n1BEA..1BEC    ; Grapheme_Base\n1BEE          ; Grapheme_Base\n1BFC..1BFF    ; Grapheme_Base\n1C00..1C23    ; Grapheme_Base\n1C24..1C2B    ; Grapheme_Base\n1C34..1C35    ; Grapheme_Base\n1C3B..1C3F    ; Grapheme_Base\n1C40..1C49    ; Grapheme_Base\n1C4D..1C4F    ; Grapheme_Base\n1C50..1C59    ; Grapheme_Base\n1C5A..1C77    ; Grapheme_Base\n1C78..1C7D    ; Grapheme_Base\n1C7E..1C7F    ; Grapheme_Base\n1C80..1C8A    ; Grapheme_Base\n1C90..1CBA    ; Grapheme_Base\n1CBD..1CBF    ; Grapheme_Base\n1CC0..1CC7    ; Grapheme_Base\n1CD3          ; Grapheme_Base\n1CE1          ; Grapheme_Base\n1CE9..1CEC    ; Grapheme_Base\n1CEE..1CF3    ; Grapheme_Base\n1CF5..1CF6    ; Grapheme_Base\n1CF7          ; Grapheme_Base\n1CFA          ; Grapheme_Base\n1D00..1D2B    ; Grapheme_Base\n1D2C..1D6A    ; Grapheme_Base\n1D6B..1D77    ; Grapheme_Base\n1D78          ; Grapheme_Base\n1D79..1D9A    ; Grapheme_Base\n1D9B..1DBF    ; Grapheme_Base\n1E00..1F15    ; Grapheme_Base\n1F18..1F1D    ; Grapheme_Base\n1F20..1F45    ; Grapheme_Base\n1F48..1F4D    ; Grapheme_Base\n1F50..1F57    ; Grapheme_Base\n1F59          ; Grapheme_Base\n1F5B          ; Grapheme_Base\n1F5D          ; Grapheme_Base\n1F5F..1F7D    ; Grapheme_Base\n1F80..1FB4    ; Grapheme_Base\n1FB6..1FBC    ; Grapheme_Base\n1FBD          ; Grapheme_Base\n1FBE          ; Grapheme_Base\n1FBF..1FC1    ; Grapheme_Base\n1FC2..1FC4    ; Grapheme_Base\n1FC6..1FCC    ; Grapheme_Base\n1FCD..1FCF    ; Grapheme_Base\n1FD0..1FD3    ; Grapheme_Base\n1FD6..1FDB    ; Grapheme_Base\n1FDD..1FDF    ; Grapheme_Base\n1FE0..1FEC    ; Grapheme_Base\n1FED..1FEF    ; Grapheme_Base\n1FF2..1FF4    ; Grapheme_Base\n1FF6..1FFC    ; Grapheme_Base\n1FFD..1FFE    ; Grapheme_Base\n2000..200A    ; Grapheme_Base\n2010..2015    ; Grapheme_Base\n2016..2017    ; Grapheme_Base\n2018          ; Grapheme_Base\n2019          ; Grapheme_Base\n201A          ; Grapheme_Base\n201B..201C    ; Grapheme_Base\n201D          ; Grapheme_Base\n201E          ; Grapheme_Base\n201F          ; Grapheme_Base\n2020..2027    ; Grapheme_Base\n202F          ; Grapheme_Base\n2030..2038    ; Grapheme_Base\n2039          ; Grapheme_Base\n203A          ; Grapheme_Base\n203B..203E    ; Grapheme_Base\n203F..2040    ; Grapheme_Base\n2041..2043    ; Grapheme_Base\n2044          ; Grapheme_Base\n2045          ; Grapheme_Base\n2046          ; Grapheme_Base\n2047..2051    ; Grapheme_Base\n2052          ; Grapheme_Base\n2053          ; Grapheme_Base\n2054          ; Grapheme_Base\n2055..205E    ; Grapheme_Base\n205F          ; Grapheme_Base\n2070          ; Grapheme_Base\n2071          ; Grapheme_Base\n2074..2079    ; Grapheme_Base\n207A..207C    ; Grapheme_Base\n207D          ; Grapheme_Base\n207E          ; Grapheme_Base\n207F          ; Grapheme_Base\n2080..2089    ; Grapheme_Base\n208A..208C    ; Grapheme_Base\n208D          ; Grapheme_Base\n208E          ; Grapheme_Base\n2090..209C    ; Grapheme_Base\n20A0..20C0    ; Grapheme_Base\n2100..2101    ; Grapheme_Base\n2102          ; Grapheme_Base\n2103..2106    ; Grapheme_Base\n2107          ; Grapheme_Base\n2108..2109    ; Grapheme_Base\n210A..2113    ; Grapheme_Base\n2114          ; Grapheme_Base\n2115          ; Grapheme_Base\n2116..2117    ; Grapheme_Base\n2118          ; Grapheme_Base\n2119..211D    ; Grapheme_Base\n211E..2123    ; Grapheme_Base\n2124          ; Grapheme_Base\n2125          ; Grapheme_Base\n2126          ; Grapheme_Base\n2127          ; Grapheme_Base\n2128          ; Grapheme_Base\n2129          ; Grapheme_Base\n212A..212D    ; Grapheme_Base\n212E          ; Grapheme_Base\n212F..2134    ; Grapheme_Base\n2135..2138    ; Grapheme_Base\n2139          ; Grapheme_Base\n213A..213B    ; Grapheme_Base\n213C..213F    ; Grapheme_Base\n2140..2144    ; Grapheme_Base\n2145..2149    ; Grapheme_Base\n214A          ; Grapheme_Base\n214B          ; Grapheme_Base\n214C..214D    ; Grapheme_Base\n214E          ; Grapheme_Base\n214F          ; Grapheme_Base\n2150..215F    ; Grapheme_Base\n2160..2182    ; Grapheme_Base\n2183..2184    ; Grapheme_Base\n2185..2188    ; Grapheme_Base\n2189          ; Grapheme_Base\n218A..218B    ; Grapheme_Base\n2190..2194    ; Grapheme_Base\n2195..2199    ; Grapheme_Base\n219A..219B    ; Grapheme_Base\n219C..219F    ; Grapheme_Base\n21A0          ; Grapheme_Base\n21A1..21A2    ; Grapheme_Base\n21A3          ; Grapheme_Base\n21A4..21A5    ; Grapheme_Base\n21A6          ; Grapheme_Base\n21A7..21AD    ; Grapheme_Base\n21AE          ; Grapheme_Base\n21AF..21CD    ; Grapheme_Base\n21CE..21CF    ; Grapheme_Base\n21D0..21D1    ; Grapheme_Base\n21D2          ; Grapheme_Base\n21D3          ; Grapheme_Base\n21D4          ; Grapheme_Base\n21D5..21F3    ; Grapheme_Base\n21F4..22FF    ; Grapheme_Base\n2300..2307    ; Grapheme_Base\n2308          ; Grapheme_Base\n2309          ; Grapheme_Base\n230A          ; Grapheme_Base\n```\n\n----------------------------------------\n\nTITLE: Defining Gemination_Mark Unicode Character Range\nDESCRIPTION: Lists Unicode code points classified as Gemination_Mark in the Indic_Syllabic_Category property. These marks indicate doubling of adjacent consonants, with Gurmukhi Addak preceding the consonant it geminates while others follow it.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_21\n\nLANGUAGE: unicode\nCODE:\n```\n0A71          ; Gemination_Mark # Mn       GURMUKHI ADDAK\n0AFB          ; Gemination_Mark # Mn       GUJARATI SIGN SHADDA\n11237         ; Gemination_Mark # Mn       KHOJKI SIGN SHADDA\n113D2         ; Gemination_Mark # Mn       TULU-TIGALARI GEMINATION MARK\n11A98         ; Gemination_Mark # Mn       SOYOMBO GEMINATION MARK\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Characters with Changes_When_Lowercased Property\nDESCRIPTION: This snippet defines a comprehensive list of Unicode code points that change their form when converted to lowercase. The data follows the standard Unicode Character Database format, listing hexadecimal code points (either individual or ranges) followed by the property name 'Changes_When_Lowercased'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_14\n\nLANGUAGE: unicode\nCODE:\n```\n0504          ; Changes_When_Lowercased\n0506          ; Changes_When_Lowercased\n0508          ; Changes_When_Lowercased\n050A          ; Changes_When_Lowercased\n050C          ; Changes_When_Lowercased\n050E          ; Changes_When_Lowercased\n0510          ; Changes_When_Lowercased\n0512          ; Changes_When_Lowercased\n0514          ; Changes_When_Lowercased\n0516          ; Changes_When_Lowercased\n0518          ; Changes_When_Lowercased\n051A          ; Changes_When_Lowercased\n051C          ; Changes_When_Lowercased\n051E          ; Changes_When_Lowercased\n0520          ; Changes_When_Lowercased\n0522          ; Changes_When_Lowercased\n0524          ; Changes_When_Lowercased\n0526          ; Changes_When_Lowercased\n0528          ; Changes_When_Lowercased\n052A          ; Changes_When_Lowercased\n052C          ; Changes_When_Lowercased\n052E          ; Changes_When_Lowercased\n0531..0556    ; Changes_When_Lowercased\n10A0..10C5    ; Changes_When_Lowercased\n10C7          ; Changes_When_Lowercased\n10CD          ; Changes_When_Lowercased\n13A0..13F5    ; Changes_When_Lowercased\n1C89          ; Changes_When_Lowercased\n1C90..1CBA    ; Changes_When_Lowercased\n1CBD..1CBF    ; Changes_When_Lowercased\n1E00          ; Changes_When_Lowercased\n1E02          ; Changes_When_Lowercased\n1E04          ; Changes_When_Lowercased\n1E06          ; Changes_When_Lowercased\n1E08          ; Changes_When_Lowercased\n1E0A          ; Changes_When_Lowercased\n1E0C          ; Changes_When_Lowercased\n1E0E          ; Changes_When_Lowercased\n1E10          ; Changes_When_Lowercased\n1E12          ; Changes_When_Lowercased\n1E14          ; Changes_When_Lowercased\n1E16          ; Changes_When_Lowercased\n1E18          ; Changes_When_Lowercased\n1E1A          ; Changes_When_Lowercased\n1E1C          ; Changes_When_Lowercased\n1E1E          ; Changes_When_Lowercased\n1E20          ; Changes_When_Lowercased\n1E22          ; Changes_When_Lowercased\n1E24          ; Changes_When_Lowercased\n1E26          ; Changes_When_Lowercased\n1E28          ; Changes_When_Lowercased\n1E2A          ; Changes_When_Lowercased\n1E2C          ; Changes_When_Lowercased\n1E2E          ; Changes_When_Lowercased\n1E30          ; Changes_When_Lowercased\n1E32          ; Changes_When_Lowercased\n1E34          ; Changes_When_Lowercased\n1E36          ; Changes_When_Lowercased\n1E38          ; Changes_When_Lowercased\n1E3A          ; Changes_When_Lowercased\n1E3C          ; Changes_When_Lowercased\n1E3E          ; Changes_When_Lowercased\n1E40          ; Changes_When_Lowercased\n1E42          ; Changes_When_Lowercased\n1E44          ; Changes_When_Lowercased\n1E46          ; Changes_When_Lowercased\n1E48          ; Changes_When_Lowercased\n1E4A          ; Changes_When_Lowercased\n1E4C          ; Changes_When_Lowercased\n1E4E          ; Changes_When_Lowercased\n1E50          ; Changes_When_Lowercased\n1E52          ; Changes_When_Lowercased\n1E54          ; Changes_When_Lowercased\n1E56          ; Changes_When_Lowercased\n1E58          ; Changes_When_Lowercased\n1E5A          ; Changes_When_Lowercased\n1E5C          ; Changes_When_Lowercased\n1E5E          ; Changes_When_Lowercased\n1E60          ; Changes_When_Lowercased\n1E62          ; Changes_When_Lowercased\n1E64          ; Changes_When_Lowercased\n1E66          ; Changes_When_Lowercased\n1E68          ; Changes_When_Lowercased\n1E6A          ; Changes_When_Lowercased\n1E6C          ; Changes_When_Lowercased\n1E6E          ; Changes_When_Lowercased\n1E70          ; Changes_When_Lowercased\n1E72          ; Changes_When_Lowercased\n1E74          ; Changes_When_Lowercased\n1E76          ; Changes_When_Lowercased\n1E78          ; Changes_When_Lowercased\n1E7A          ; Changes_When_Lowercased\n1E7C          ; Changes_When_Lowercased\n1E7E          ; Changes_When_Lowercased\n1E80          ; Changes_When_Lowercased\n1E82          ; Changes_When_Lowercased\n1E84          ; Changes_When_Lowercased\n1E86          ; Changes_When_Lowercased\n1E88          ; Changes_When_Lowercased\n1E8A          ; Changes_When_Lowercased\n1E8C          ; Changes_When_Lowercased\n1E8E          ; Changes_When_Lowercased\n1E90          ; Changes_When_Lowercased\n1E92          ; Changes_When_Lowercased\n1E94          ; Changes_When_Lowercased\n1E9E          ; Changes_When_Lowercased\n1EA0          ; Changes_When_Lowercased\n1EA2          ; Changes_When_Lowercased\n1EA4          ; Changes_When_Lowercased\n1EA6          ; Changes_When_Lowercased\n1EA8          ; Changes_When_Lowercased\n1EAA          ; Changes_When_Lowercased\n1EAC          ; Changes_When_Lowercased\n1EAE          ; Changes_When_Lowercased\n1EB0          ; Changes_When_Lowercased\n1EB2          ; Changes_When_Lowercased\n1EB4          ; Changes_When_Lowercased\n1EB6          ; Changes_When_Lowercased\n1EB8          ; Changes_When_Lowercased\n1EBA          ; Changes_When_Lowercased\n1EBC          ; Changes_When_Lowercased\n1EBE          ; Changes_When_Lowercased\n1EC0          ; Changes_When_Lowercased\n1EC2          ; Changes_When_Lowercased\n1EC4          ; Changes_When_Lowercased\n1EC6          ; Changes_When_Lowercased\n1EC8          ; Changes_When_Lowercased\n1ECA          ; Changes_When_Lowercased\n1ECC          ; Changes_When_Lowercased\n1ECE          ; Changes_When_Lowercased\n1ED0          ; Changes_When_Lowercased\n1ED2          ; Changes_When_Lowercased\n1ED4          ; Changes_When_Lowercased\n1ED6          ; Changes_When_Lowercased\n1ED8          ; Changes_When_Lowercased\n1EDA          ; Changes_When_Lowercased\n1EDC          ; Changes_When_Lowercased\n1EDE          ; Changes_When_Lowercased\n1EE0          ; Changes_When_Lowercased\n1EE2          ; Changes_When_Lowercased\n1EE4          ; Changes_When_Lowercased\n1EE6          ; Changes_When_Lowercased\n1EE8          ; Changes_When_Lowercased\n1EEA          ; Changes_When_Lowercased\n1EEC          ; Changes_When_Lowercased\n1EEE          ; Changes_When_Lowercased\n1EF0          ; Changes_When_Lowercased\n1EF2          ; Changes_When_Lowercased\n1EF4          ; Changes_When_Lowercased\n1EF6          ; Changes_When_Lowercased\n1EF8          ; Changes_When_Lowercased\n1EFA          ; Changes_When_Lowercased\n1EFC          ; Changes_When_Lowercased\n1EFE          ; Changes_When_Lowercased\n1F08..1F0F    ; Changes_When_Lowercased\n1F18..1F1D    ; Changes_When_Lowercased\n1F28..1F2F    ; Changes_When_Lowercased\n1F38..1F3F    ; Changes_When_Lowercased\n1F48..1F4D    ; Changes_When_Lowercased\n1F59          ; Changes_When_Lowercased\n1F5B          ; Changes_When_Lowercased\n1F5D          ; Changes_When_Lowercased\n1F5F          ; Changes_When_Lowercased\n1F68..1F6F    ; Changes_When_Lowercased\n1F88..1F8F    ; Changes_When_Lowercased\n1F98..1F9F    ; Changes_When_Lowercased\n1FA8..1FAF    ; Changes_When_Lowercased\n1FB8..1FBC    ; Changes_When_Lowercased\n1FC8..1FCC    ; Changes_When_Lowercased\n1FD8..1FDB    ; Changes_When_Lowercased\n1FE8..1FEC    ; Changes_When_Lowercased\n1FF8..1FFC    ; Changes_When_Lowercased\n2126          ; Changes_When_Lowercased\n212A..212B    ; Changes_When_Lowercased\n2132          ; Changes_When_Lowercased\n2160..216F    ; Changes_When_Lowercased\n2183          ; Changes_When_Lowercased\n24B6..24CF    ; Changes_When_Lowercased\n2C00..2C2F    ; Changes_When_Lowercased\n2C60          ; Changes_When_Lowercased\n2C62..2C64    ; Changes_When_Lowercased\n2C67          ; Changes_When_Lowercased\n2C69          ; Changes_When_Lowercased\n2C6B          ; Changes_When_Lowercased\n2C6D..2C70    ; Changes_When_Lowercased\n2C72          ; Changes_When_Lowercased\n2C75          ; Changes_When_Lowercased\n2C7E..2C80    ; Changes_When_Lowercased\n2C82          ; Changes_When_Lowercased\n2C84          ; Changes_When_Lowercased\n2C86          ; Changes_When_Lowercased\n2C88          ; Changes_When_Lowercased\n2C8A          ; Changes_When_Lowercased\n2C8C          ; Changes_When_Lowercased\n2C8E          ; Changes_When_Lowercased\n2C90          ; Changes_When_Lowercased\n2C92          ; Changes_When_Lowercased\n2C94          ; Changes_When_Lowercased\n2C96          ; Changes_When_Lowercased\n2C98          ; Changes_When_Lowercased\n2C9A          ; Changes_When_Lowercased\n2C9C          ; Changes_When_Lowercased\n2C9E          ; Changes_When_Lowercased\n2CA0          ; Changes_When_Lowercased\n2CA2          ; Changes_When_Lowercased\n2CA4          ; Changes_When_Lowercased\n2CA6          ; Changes_When_Lowercased\n2CA8          ; Changes_When_Lowercased\n2CAA          ; Changes_When_Lowercased\n2CAC          ; Changes_When_Lowercased\n2CAE          ; Changes_When_Lowercased\n2CB0          ; Changes_When_Lowercased\n2CB2          ; Changes_When_Lowercased\n2CB4          ; Changes_When_Lowercased\n2CB6          ; Changes_When_Lowercased\n2CB8          ; Changes_When_Lowercased\n2CBA          ; Changes_When_Lowercased\n2CBC          ; Changes_When_Lowercased\n2CBE          ; Changes_When_Lowercased\n2CC0          ; Changes_When_Lowercased\n2CC2          ; Changes_When_Lowercased\n2CC4          ; Changes_When_Lowercased\n2CC6          ; Changes_When_Lowercased\n2CC8          ; Changes_When_Lowercased\n2CCA          ; Changes_When_Lowercased\n2CCC          ; Changes_When_Lowercased\n2CCE          ; Changes_When_Lowercased\n2CD0          ; Changes_When_Lowercased\n2CD2          ; Changes_When_Lowercased\n2CD4          ; Changes_When_Lowercased\n2CD6          ; Changes_When_Lowercased\n2CD8          ; Changes_When_Lowercased\n2CDA          ; Changes_When_Lowercased\n2CDC          ; Changes_When_Lowercased\n2CDE          ; Changes_When_Lowercased\n2CE0          ; Changes_When_Lowercased\n2CE2          ; Changes_When_Lowercased\n2CEB          ; Changes_When_Lowercased\n2CED          ; Changes_When_Lowercased\n2CF2          ; Changes_When_Lowercased\nA640          ; Changes_When_Lowercased\nA642          ; Changes_When_Lowercased\nA644          ; Changes_When_Lowercased\nA646          ; Changes_When_Lowercased\nA648          ; Changes_When_Lowercased\nA64A          ; Changes_When_Lowercased\nA64C          ; Changes_When_Lowercased\nA64E          ; Changes_When_Lowercased\nA650          ; Changes_When_Lowercased\nA652          ; Changes_When_Lowercased\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftSIL Target Sources in CMake\nDESCRIPTION: Specifies the source files to be included in the swiftSIL target build. Includes ParseTestSpecification.cpp and ParseSIL.cpp as private source files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SIL/Parser/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_sources(swiftSIL PRIVATE\n  ParseTestSpecification.cpp\n  ParseSIL.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Tai Viet Script\nDESCRIPTION: Defines the Unicode code point ranges for the Tai Viet script, including letters, vowel signs, tone marks, and symbols. This block contains 72 total code points across various character categories.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_56\n\nLANGUAGE: Unicode\nCODE:\n```\nAA80..AAAF    ; Tai_Viet # Lo  [48] TAI VIET LETTER LOW KO..TAI VIET LETTER HIGH O\nAAB0          ; Tai_Viet # Mn       TAI VIET MAI KANG\nAAB1          ; Tai_Viet # Lo       TAI VIET VOWEL AA\nAAB2..AAB4    ; Tai_Viet # Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U\nAAB5..AAB6    ; Tai_Viet # Lo   [2] TAI VIET VOWEL E..TAI VIET VOWEL O\nAAB7..AAB8    ; Tai_Viet # Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA\nAAB9..AABD    ; Tai_Viet # Lo   [5] TAI VIET VOWEL UEA..TAI VIET VOWEL AN\nAABE..AABF    ; Tai_Viet # Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK\nAAC0          ; Tai_Viet # Lo       TAI VIET TONE MAI NUENG\nAAC1          ; Tai_Viet # Mn       TAI VIET TONE MAI THO\nAAC2          ; Tai_Viet # Lo       TAI VIET TONE MAI SONG\nAADB..AADC    ; Tai_Viet # Lo   [2] TAI VIET SYMBOL KON..TAI VIET SYMBOL NUENG\nAADD          ; Tai_Viet # Lm       TAI VIET SYMBOL SAM\nAADE..AADF    ; Tai_Viet # Po   [2] TAI VIET SYMBOL HO HOI..TAI VIET SYMBOL KOI KOI\n\n# Total code points: 72\n```\n\n----------------------------------------\n\nTITLE: Defining Extend Property Unicode Ranges\nDESCRIPTION: Defines Unicode code point ranges that have the Extend property, including various combining marks, modifiers and variation selectors. Used for text segmentation and processing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode-data\nCODE:\n```\n1DA75         ; Extend # Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS\n1DA84         ; Extend # Mn       SIGNWRITING LOCATION HEAD NECK\n1DA9B..1DA9F  ; Extend # Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6\n1DAA1..1DAAF  ; Extend # Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16\n1E000..1E006  ; Extend # Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE\n1E008..1E018  ; Extend # Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU\n1E01B..1E021  ; Extend # Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI\n1E023..1E024  ; Extend # Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS\n1E026..1E02A  ; Extend # Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA\n1E08F         ; Extend # Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n1E130..1E136  ; Extend # Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D\n1E2AE         ; Extend # Mn       TOTO SIGN RISING TONE\n1E2EC..1E2EF  ; Extend # Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI\n1E4EC..1E4EF  ; Extend # Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH\n1E5EE..1E5EF  ; Extend # Mn   [2] OL ONAL SIGN MU..OL ONAL SIGN IKIR\n1E8D0..1E8D6  ; Extend # Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\n1E944..1E94A  ; Extend # Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA\n1F3FB..1F3FF  ; Extend # Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6\nE0020..E007F  ; Extend # Cf  [96] TAG SPACE..CANCEL TAG\nE0100..E01EF  ; Extend # Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Optimizer Source Files\nDESCRIPTION: This snippet defines the Swift source files that make up the Optimizer component of the Swift compiler. It includes various analysis modules that are essential for compiler optimization phases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/Analysis/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nswift_compiler_sources(Optimizer\n  AliasAnalysis.swift\n  CalleeAnalysis.swift\n  DeadEndBlocksAnalysis.swift\n  DominatorTree.swift\n  PostDominatorTree.swift)\n```\n\n----------------------------------------\n\nTITLE: Defining Modifying_Letter Unicode Character Range\nDESCRIPTION: Defines Unicode code points classified as Modifying_Letter in the Indic_Syllabic_Category property. These are reanalyzed letters that modify adjacent vowels or consonants rather than participating in the abugida structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_18\n\nLANGUAGE: unicode\nCODE:\n```\n0B83          ; Modifying_Letter # Lo       TAMIL SIGN VISARGA\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Mandaic Script\nDESCRIPTION: Defines the Unicode code point ranges for the Mandaic script, including letters, diacritical marks, and punctuation. The total count is 29 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_72\n\nLANGUAGE: text\nCODE:\n```\n0840..0858    ; Mandaic # Lo  [25] MANDAIC LETTER HALQA..MANDAIC LETTER AIN\n0859..085B    ; Mandaic # Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK\n085E          ; Mandaic # Po       MANDAIC PUNCTUATION\n\n# Total code points: 29\n```\n\n----------------------------------------\n\nTITLE: Exporting FooHelper Module in Swift\nDESCRIPTION: Exports the FooHelper module to make its declarations available in the importing module without requiring qualification.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.FooSub.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@_exported import FooHelper\n```\n\n----------------------------------------\n\nTITLE: Defining Default_Ignorable_Code_Point Unicode Property\nDESCRIPTION: This snippet defines the Default_Ignorable_Code_Point Unicode property by listing code point ranges. It includes comments explaining its derivation and usage constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_36\n\nLANGUAGE: Unicode\nCODE:\n```\n00AD          ; Default_Ignorable_Code_Point\n034F          ; Default_Ignorable_Code_Point\n061C          ; Default_Ignorable_Code_Point\n115F..1160    ; Default_Ignorable_Code_Point\n17B4..17B5    ; Default_Ignorable_Code_Point\n180B..180D    ; Default_Ignorable_Code_Point\n180E          ; Default_Ignorable_Code_Point\n180F          ; Default_Ignorable_Code_Point\n200B..200F    ; Default_Ignorable_Code_Point\n202A..202E    ; Default_Ignorable_Code_Point\n2060..2064    ; Default_Ignorable_Code_Point\n2065          ; Default_Ignorable_Code_Point\n2066..206F    ; Default_Ignorable_Code_Point\n3164          ; Default_Ignorable_Code_Point\nFE00..FE0F    ; Default_Ignorable_Code_Point\nFEFF          ; Default_Ignorable_Code_Point\nFFA0          ; Default_Ignorable_Code_Point\nFFF0..FFF8    ; Default_Ignorable_Code_Point\n1BCA0..1BCA3  ; Default_Ignorable_Code_Point\n1D173..1D17A  ; Default_Ignorable_Code_Point\nE0000         ; Default_Ignorable_Code_Point\nE0001         ; Default_Ignorable_Code_Point\nE0002..E001F  ; Default_Ignorable_Code_Point\nE0020..E007F  ; Default_Ignorable_Code_Point\nE0080..E00FF  ; Default_Ignorable_Code_Point\nE0100..E01EF  ; Default_Ignorable_Code_Point\nE01F0..E0FFF  ; Default_Ignorable_Code_Point\n```\n\n----------------------------------------\n\nTITLE: Regional Indicator Symbol Definition\nDESCRIPTION: Defines the code point range for Regional Indicator symbols from letter A through Z (26 code points total). These are used for regional indicators in Unicode.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_32\n\nLANGUAGE: unicode\nCODE:\n```\n1F1E6..1F1FF  ; Regional_Indicator # So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: Configuring BlocksRuntimeStub Library Build in CMake\nDESCRIPTION: Sets up CMake configuration to build BlocksRuntimeStub as a shared library across multiple Swift SDKs and architectures. Handles build flavor variants, output directory configuration, and compiler dependencies in unified builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/BlocksRuntimeStubs/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/../../../test/cmake/modules\")\n\ninclude(SwiftTestUtils)\n\nforeach(SDK ${SWIFT_SDKS})\n  foreach(ARCH ${SWIFT_SDK_${SDK}_ARCHITECTURES})\n    get_swift_test_build_flavors(build_flavors \"${SDK}\")\n\n    foreach(BUILD_FLAVOR ${build_flavors})\n      get_swift_test_variant_suffix(VARIANT_SUFFIX \"${SDK}\" \"${ARCH}\" \"${BUILD_FLAVOR}\")\n\n      set(test_bin_dir \"${SWIFT_BINARY_DIR}/test${VARIANT_SUFFIX}\")\n\n      add_swift_target_library_single(\n        BlocksRuntimeStub${VARIANT_SUFFIX}\n        BlocksRuntimeStub\n        SHARED NOSWIFTRT\n        ARCHITECTURE ${ARCH}\n        SDK ${SDK}\n        INSTALL_IN_COMPONENT never_install\n        BlocksRuntime.c\n      )\n      set_target_properties(BlocksRuntimeStub${VARIANT_SUFFIX} PROPERTIES\n        ARCHIVE_OUTPUT_DIRECTORY ${test_bin_dir}\n        LIBRARY_OUTPUT_DIRECTORY ${test_bin_dir}\n        RUNTIME_OUTPUT_DIRECTORY ${test_bin_dir}\n        OUTPUT_NAME BlocksRuntime)\n\n      # When built in a unified build, ensure that we add a dependency on the\n      # compiler to serialize this behind the compiler.  Otherwise, we would\n      # attempt to build this before the compiler is ready, which breaks the\n      # build.\n      if(NOT SWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER AND NOT BUILD_STANDALONE AND\n          TARGET clang)\n        add_dependencies(BlocksRuntimeStub${VARIANT_SUFFIX} clang)\n      endif()\n    endforeach()\n  endforeach()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Indic_Conjunct_Break Property\nDESCRIPTION: Description of the Indic_Conjunct_Break property generation from Grapheme_Cluster_Break, Indic_Syllabic_Category, Canonical_Combining_Class, and Script properties. All code points not explicitly listed have the value None.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_45\n\nLANGUAGE: unicode\nCODE:\n```\n# Derived Property: Indic_Conjunct_Break\n#  Generated from the Grapheme_Cluster_Break, Indic_Syllabic_Category,\n#  Canonical_Combining_Class, and Script properties as described in UAX #44:\n#  https://www.unicode.org/reports/tr44/.\n\n#  All code points not explicitly listed for Indic_Conjunct_Break\n#  have the value None.\n\n# @missing: 0000..10FFFF; InCB; None\n```\n\n----------------------------------------\n\nTITLE: Unicode Mathematical Symbol Code Point Mappings\nDESCRIPTION: Defines the Unicode code points for various mathematical symbols, including accents, Greek symbols, mathematical operators, brackets, geometric shapes, and mathematical alphabets. Each line specifies either a single code point or a range of code points with their category and description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_8\n\nLANGUAGE: unicode\nCODE:\n```\n005E          ; Other_Math # Sk       CIRCUMFLEX ACCENT\n03D0..03D2    ; Other_Math # L&   [3] GREEK BETA SYMBOL..GREEK UPSILON WITH HOOK SYMBOL\n03D5          ; Other_Math # L&       GREEK PHI SYMBOL\n03F0..03F1    ; Other_Math # L&   [2] GREEK KAPPA SYMBOL..GREEK RHO SYMBOL\n03F4..03F5    ; Other_Math # L&   [2] GREEK CAPITAL THETA SYMBOL..GREEK LUNATE EPSILON SYMBOL\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Targets for All SDKs\nDESCRIPTION: Iterates through all Swift SDKs and ensures the library targets are included in the main build by setting EXCLUDE_FROM_ALL property to FALSE.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/Compatibility50/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(sdk ${SWIFT_SDKS})\n  set(target_name \"${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n  if(NOT TARGET \"${target_name}\")\n    continue()\n  endif()\n\n  set_target_properties(\"${target_name}\"\n    PROPERTIES\n      EXCLUDE_FROM_ALL FALSE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Unicode Quotation Mark Definition\nDESCRIPTION: Defines the Double_Quote word break property for the standard quotation mark character (U+0022).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n0022          ; Double_Quote # Po       QUOTATION MARK\n```\n\n----------------------------------------\n\nTITLE: Configuring Darwin Platform Library in CMake\nDESCRIPTION: Sets up the swiftDarwin target library with platform-specific sources, compile flags, and dependencies. Includes conditional logic for bootstrapping and embedded builds.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swiftDarwin_common_options\n      IS_SDK_OVERLAY\n      ${swift_platform_sources}\n      POSIXError.swift\n      MachError.swift\n\n      \"${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c\"\n\n      GYB_SOURCES\n        ${swift_platform_gyb_sources}\n        Darwin.swift.gyb\n\n      SWIFT_COMPILE_FLAGS\n        ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\n        ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n        -Xfrontend -disable-objc-attr-requires-foundation-module\n        ${swift_platform_compile_flags}\n      LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n      DEPENDS ${darwin_depends})\n\nadd_swift_target_library(swiftDarwin ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES}\n    ${swiftDarwin_common_options}\n    TARGET_SDKS \"${swiftDarwin_target_sdks}\"\n    INSTALL_IN_COMPONENT sdk-overlay\n    MACCATALYST_BUILD_FLAVOR \"zippered\"\n    INSTALL_BINARY_SWIFTMODULE FALSE)\n```\n\n----------------------------------------\n\nTITLE: Defining _BuiltinInOutAddressConvertible Protocol in Swift\nDESCRIPTION: Protocol definition for converting inout references to pointer types. It requires conforming types to implement a static method that converts a raw pointer from an inout parameter to the conforming type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nprotocol _BuiltinInOutAddressConvertible {\n  /// The type from which inout conversions are allowed to the conforming\n  /// type.\n  typealias InOutType\n\n  /// Create a value of the conforming type using the address of an inout\n  /// argument.\n  class func _convertFromInOutAddress(_ p: Builtin.RawPointer) -> Self\n}\n```\n\n----------------------------------------\n\nTITLE: Regional Indicator Symbol Sequence Processing\nDESCRIPTION: Test cases for processing sequences of Regional Indicator symbols with rules for joining and breaking, including cases with zero-width spaces and joiners. The sequences demonstrate proper Unicode segmentation behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakTest.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 1F1F7 × 1F1FA × 1F1F8 × 1F1EA ÷\n```\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 1F1F7 × 1F1FA ÷ 200B ÷ 1F1F8 × 1F1EA ÷\n```\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 1F1E6 × 1F1E7 × 1F1E8 ÷\n```\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 1F1E6 × 200D ÷ 1F1E7 × 1F1E8 ÷\n```\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 1F1E6 × 1F1E7 × 200D ÷ 1F1E8 ÷\n```\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0020 × 200D ÷ 0646 ÷\n```\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0646 × 200D ÷ 0020 ÷\n```\n\n----------------------------------------\n\nTITLE: Testing Unicode Word Segmentation for COMMA (MidNum)\nDESCRIPTION: This snippet shows multiple test cases for Unicode word segmentation rules involving the COMMA character (U+002C). It demonstrates how COMMA interacts with various other characters and Unicode properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_2\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 002C ÷ 0001 ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 002C × 0308 ÷ 0001 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 002C ÷ 000D ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 002C × 0308 ÷ 000D ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 002C ÷ 000A ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 002C × 0308 ÷ 000A ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 002C ÷ 000B ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]\n÷ 002C × 0308 ÷ 000B ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE TABULATION> (Newline) ÷ [0.3]\n÷ 002C ÷ 3031 ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]\n÷ 002C × 0308 ÷ 3031 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] VERTICAL KANA REPEAT MARK (Katakana) ÷ [0.3]\n÷ 002C ÷ 0041 ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n÷ 002C × 0308 ÷ 0041 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n÷ 002C ÷ 003A ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 002C × 0308 ÷ 003A ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COLON (MidLetter) ÷ [0.3]\n÷ 002C ÷ 002C ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 002C × 0308 ÷ 002C ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n÷ 002C ÷ 002E ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 002C × 0308 ÷ 002E ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] FULL STOP (MidNumLet) ÷ [0.3]\n÷ 002C ÷ 0030 ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]\n÷ 002C × 0308 ÷ 0030 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] DIGIT ZERO (Numeric) ÷ [0.3]\n÷ 002C ÷ 005F ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]\n÷ 002C × 0308 ÷ 005F ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LOW LINE (ExtendNumLet) ÷ [0.3]\n÷ 002C ÷ 1F1E6 ÷  #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 002C × 0308 ÷ 1F1E6 ÷ #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]\n÷ 002C ÷ 05D0 ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n÷ 002C × 0308 ÷ 05D0 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n÷ 002C ÷ 0022 ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]\n÷ 002C × 0308 ÷ 0022 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] QUOTATION MARK (Double_Quote) ÷ [0.3]\n÷ 002C ÷ 0027 ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 002C × 0308 ÷ 0027 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] APOSTROPHE (Single_Quote) ÷ [0.3]\n÷ 002C ÷ 231A ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 002C × 0308 ÷ 231A ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] WATCH (ExtPict) ÷ [0.3]\n÷ 002C ÷ 0020 ÷ #  ÷ [0.2] COMMA (MidNum) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 002C × 0308 ÷ 0020 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] SPACE (WSegSpace) ÷ [0.3]\n÷ 002C × 00AD ÷ #  ÷ [0.2] COMMA (MidNum) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 002C × 0308 × 00AD ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] SOFT HYPHEN (Format_FE) ÷ [0.3]\n÷ 002C × 0300 ÷ #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 002C × 0308 × 0300 ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] COMBINING GRAVE ACCENT (Extend_FE) ÷ [0.3]\n÷ 002C × 200D ÷ #  ÷ [0.2] COMMA (MidNum) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n÷ 002C × 0308 × 200D ÷  #  ÷ [0.2] COMMA (MidNum) × [4.0] COMBINING DIAERESIS (Extend_FE) × [4.0] ZERO WIDTH JOINER (ZWJ_FE) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Querying Function Creation/Deletion Delta per Pass in Swift Counters DB\nDESCRIPTION: This SQL query identifies the net change (creation or deletion) in the number of functions per optimization transformation (pass). It sums the `Delta` column for module-level function counters (`C.counter = 'functions'`, `C.kind = 'module'`) from the `Counters` table, grouping the results by the transformation name (`C.Transform`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect C.Transform, sum(C.Delta)\nfrom Counters C\nwhere C.counter = 'functions' and C.kind = 'module'\ngroup by C.Transform;\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Type with Static Property\nDESCRIPTION: Shows how to define a Swift type with a static property that will be bridged to C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_41\n\nLANGUAGE: swift\nCODE:\n```\nstruct Config {\n  static var binaryName = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Latin Ligature Special Casing Definitions\nDESCRIPTION: Defines special case mappings for Latin ligatures, specifying how these combined characters should be uppercase and titlecase. Each ligature has specific rules for maintaining proper character relationships.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\nFB00; FB00; 0046 0066; 0046 0046; # LATIN SMALL LIGATURE FF\nFB01; FB01; 0046 0069; 0046 0049; # LATIN SMALL LIGATURE FI\nFB02; FB02; 0046 006C; 0046 004C; # LATIN SMALL LIGATURE FL\nFB03; FB03; 0046 0066 0069; 0046 0046 0049; # LATIN SMALL LIGATURE FFI\nFB04; FB04; 0046 0066 006C; 0046 0046 004C; # LATIN SMALL LIGATURE FFL\nFB05; FB05; 0053 0074; 0053 0054; # LATIN SMALL LIGATURE LONG S T\nFB06; FB06; 0053 0074; 0053 0054; # LATIN SMALL LIGATURE ST\n```\n\n----------------------------------------\n\nTITLE: Final Punctuation (Pf) Unicode Range Definitions\nDESCRIPTION: Defines Unicode code points classified as Final Punctuation (Pf), including various types of closing quotation marks and brackets.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_33\n\nLANGUAGE: unicode\nCODE:\n```\n00BB          ; Pf #       RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK\n2019          ; Pf #       RIGHT SINGLE QUOTATION MARK\n201D          ; Pf #       RIGHT DOUBLE QUOTATION MARK\n[...additional points...]\n```\n\n----------------------------------------\n\nTITLE: Extra CMake Options for Cross-compiling Swift on macOS\nDESCRIPTION: Specifies the additional CMake options needed when invoking build-script on macOS to cross-compile Swift for Windows. These options ensure the correct compiler and tools are used with proper SDK selection.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WindowsCrossCompile.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--extra-cmake-options=-DSWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER=FALSE,\\\n-DCMAKE_AR=<path to llvm-ar>,\\\n-DCMAKE_RANLIB=<path to llvm-ranlib>,\\\n-DSWIFT_SDKS='OSX;WINDOWS'\n```\n\n----------------------------------------\n\nTITLE: Implementing Resilient Boxed Swift SHA256 in C++\nDESCRIPTION: C++ class representation for a resilient boxed Swift value type like SHA256. The value is stored on the heap and accessed via a pointer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nclass CryptoKit::SHA256 {\n  ...\n  uintptr_t pointer;         // Swift value is stored on the heap pointed by this pointer.\n  alignas(8) char buffer[8];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Properties for Macros in Swift\nDESCRIPTION: Declares computed properties MY_MACRO and MACRO_DUP of type Int32, likely representing macro values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.command-line-include.printed.txt#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\nvar MY_MACRO: Int32 { get }\nvar MACRO_DUP: Int32 { get }\n```\n\n----------------------------------------\n\nTITLE: Subtyping with @differentiable Function Types in Swift\nDESCRIPTION: Illustrates the subtyping rule for differentiable function types, where a function type is a subtype of the same function type with more @noDerivative parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_51\n\nLANGUAGE: swift\nCODE:\n```\nlet f0: @differentiable (Float, Float) -> Float = { $0 * $1 }\n_ = f0 as @differentiable (Float, @noDerivative Float) -> Float\n_ = f0 as @differentiable (@noDerivative Float, Float) -> Float\n_ = f0 as @differentiable (@noDerivative Float, @noDerivative Float) -> Float\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Collection Extension Mangling\nDESCRIPTION: Swift symbol mangling for complex collection extensions with multiple generic constraints. These examples show how Swift encodes extension methods with complex type constraints and multiple generic parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\n_T0s17MutableCollectionP1asAARzs012RandomAccessB0RzsAA11SubSequences013BidirectionalB0PRpzsAdHRQlE06rotatecD05Indexs01_A9IndexablePQzAM15shiftingToStart_tFAJs01_J4BasePQzAQcfU_ ---> closure #1 (A.Swift._IndexableBase.Index) -> A.Swift._IndexableBase.Index in (extension in a):Swift.MutableCollection<A where A: Swift.MutableCollection, A: Swift.RandomAccessCollection, A.Swift.BidirectionalCollection.SubSequence: Swift.MutableCollection, A.Swift.BidirectionalCollection.SubSequence: Swift.RandomAccessCollection>.rotateRandomAccess(shiftingToStart: A.Swift._MutableIndexable.Index) -> A.Swift._MutableIndexable.Index\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_$Ss17MutableCollectionP1asAARzs012RandomAccessB0RzsAA11SubSequences013BidirectionalB0PRpzsAdHRQlE06rotatecD015shiftingToStart5Indexs01_A9IndexablePQzAN_tFAKs01_M4BasePQzAQcfU_ ---> closure #1 (A.Swift._IndexableBase.Index) -> A.Swift._IndexableBase.Index in (extension in a):Swift.MutableCollection<A where A: Swift.MutableCollection, A: Swift.RandomAccessCollection, A.Swift.BidirectionalCollection.SubSequence: Swift.MutableCollection, A.Swift.BidirectionalCollection.SubSequence: Swift.RandomAccessCollection>.rotateRandomAccess(shiftingToStart: A.Swift._MutableIndexable.Index) -> A.Swift._MutableIndexable.Index\n```\n\n----------------------------------------\n\nTITLE: Unicode Consonant Code Point Definitions\nDESCRIPTION: Comprehensive listing of Unicode code point ranges that define consonant characters across various writing systems. Each line specifies either a single code point or a range of code points that are classified as consonants, along with script name and category information.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\n0915..0939    ; Consonant # Lo  [37] DEVANAGARI LETTER KA..DEVANAGARI LETTER HA\n0958..095F    ; Consonant # Lo   [8] DEVANAGARI LETTER QA..DEVANAGARI LETTER YYA\n0978..097F    ; Consonant # Lo   [8] DEVANAGARI LETTER MARWARI DDA..DEVANAGARI LETTER BBA\n```\n\n----------------------------------------\n\nTITLE: Adding Project Subdirectories\nDESCRIPTION: Configures the build structure by adding various project subdirectories based on build flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_78\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(include)\nif(SWIFT_INCLUDE_TOOLS)\n  add_subdirectory(lib)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Unicode Character Ranges with XID_Continue Property\nDESCRIPTION: A comprehensive list of Unicode code point ranges that have the XID_Continue property. Each line specifies either a single code point or a range of code points, followed by the property name 'XID_Continue'. This property indicates characters that can be used in programming language identifiers after the initial character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_34\n\nLANGUAGE: text\nCODE:\n```\n113CF         ; XID_Continue\n113D0         ; XID_Continue\n113D1         ; XID_Continue\n113D2         ; XID_Continue\n113D3         ; XID_Continue\n113E1..113E2  ; XID_Continue\n11400..11434  ; XID_Continue\n11435..11437  ; XID_Continue\n11438..1143F  ; XID_Continue\n11440..11441  ; XID_Continue\n11442..11444  ; XID_Continue\n11445         ; XID_Continue\n11446         ; XID_Continue\n11447..1144A  ; XID_Continue\n11450..11459  ; XID_Continue\n1145E         ; XID_Continue\n1145F..11461  ; XID_Continue\n11480..114AF  ; XID_Continue\n114B0..114B2  ; XID_Continue\n114B3..114B8  ; XID_Continue\n114B9         ; XID_Continue\n114BA         ; XID_Continue\n114BB..114BE  ; XID_Continue\n114BF..114C0  ; XID_Continue\n114C1         ; XID_Continue\n114C2..114C3  ; XID_Continue\n114C4..114C5  ; XID_Continue\n114C7         ; XID_Continue\n114D0..114D9  ; XID_Continue\n11580..115AE  ; XID_Continue\n115AF..115B1  ; XID_Continue\n115B2..115B5  ; XID_Continue\n115B8..115BB  ; XID_Continue\n115BC..115BD  ; XID_Continue\n115BE         ; XID_Continue\n115BF..115C0  ; XID_Continue\n115D8..115DB  ; XID_Continue\n115DC..115DD  ; XID_Continue\n11600..1162F  ; XID_Continue\n11630..11632  ; XID_Continue\n11633..1163A  ; XID_Continue\n1163B..1163C  ; XID_Continue\n1163D         ; XID_Continue\n1163E         ; XID_Continue\n1163F..11640  ; XID_Continue\n11644         ; XID_Continue\n11650..11659  ; XID_Continue\n11680..116AA  ; XID_Continue\n116AB         ; XID_Continue\n116AC         ; XID_Continue\n116AD         ; XID_Continue\n116AE..116AF  ; XID_Continue\n116B0..116B5  ; XID_Continue\n116B6         ; XID_Continue\n116B7         ; XID_Continue\n116B8         ; XID_Continue\n116C0..116C9  ; XID_Continue\n116D0..116E3  ; XID_Continue\n11700..1171A  ; XID_Continue\n1171D         ; XID_Continue\n1171E         ; XID_Continue\n1171F         ; XID_Continue\n11720..11721  ; XID_Continue\n11722..11725  ; XID_Continue\n11726         ; XID_Continue\n11727..1172B  ; XID_Continue\n11730..11739  ; XID_Continue\n11740..11746  ; XID_Continue\n11800..1182B  ; XID_Continue\n1182C..1182E  ; XID_Continue\n1182F..11837  ; XID_Continue\n11838         ; XID_Continue\n11839..1183A  ; XID_Continue\n118A0..118DF  ; XID_Continue\n118E0..118E9  ; XID_Continue\n118FF..11906  ; XID_Continue\n11909         ; XID_Continue\n1190C..11913  ; XID_Continue\n11915..11916  ; XID_Continue\n11918..1192F  ; XID_Continue\n11930..11935  ; XID_Continue\n11937..11938  ; XID_Continue\n1193B..1193C  ; XID_Continue\n1193D         ; XID_Continue\n1193E         ; XID_Continue\n1193F         ; XID_Continue\n11940         ; XID_Continue\n11941         ; XID_Continue\n11942         ; XID_Continue\n11943         ; XID_Continue\n11950..11959  ; XID_Continue\n119A0..119A7  ; XID_Continue\n119AA..119D0  ; XID_Continue\n119D1..119D3  ; XID_Continue\n119D4..119D7  ; XID_Continue\n119DA..119DB  ; XID_Continue\n119DC..119DF  ; XID_Continue\n119E0         ; XID_Continue\n119E1         ; XID_Continue\n119E3         ; XID_Continue\n119E4         ; XID_Continue\n11A00         ; XID_Continue\n11A01..11A0A  ; XID_Continue\n11A0B..11A32  ; XID_Continue\n11A33..11A38  ; XID_Continue\n11A39         ; XID_Continue\n11A3A         ; XID_Continue\n11A3B..11A3E  ; XID_Continue\n11A47         ; XID_Continue\n11A50         ; XID_Continue\n11A51..11A56  ; XID_Continue\n11A57..11A58  ; XID_Continue\n11A59..11A5B  ; XID_Continue\n11A5C..11A89  ; XID_Continue\n11A8A..11A96  ; XID_Continue\n11A97         ; XID_Continue\n11A98..11A99  ; XID_Continue\n11A9D         ; XID_Continue\n11AB0..11AF8  ; XID_Continue\n11BC0..11BE0  ; XID_Continue\n11BF0..11BF9  ; XID_Continue\n11C00..11C08  ; XID_Continue\n11C0A..11C2E  ; XID_Continue\n11C2F         ; XID_Continue\n11C30..11C36  ; XID_Continue\n11C38..11C3D  ; XID_Continue\n11C3E         ; XID_Continue\n11C3F         ; XID_Continue\n11C40         ; XID_Continue\n11C50..11C59  ; XID_Continue\n11C72..11C8F  ; XID_Continue\n11C92..11CA7  ; XID_Continue\n11CA9         ; XID_Continue\n11CAA..11CB0  ; XID_Continue\n11CB1         ; XID_Continue\n11CB2..11CB3  ; XID_Continue\n11CB4         ; XID_Continue\n11CB5..11CB6  ; XID_Continue\n11D00..11D06  ; XID_Continue\n11D08..11D09  ; XID_Continue\n11D0B..11D30  ; XID_Continue\n11D31..11D36  ; XID_Continue\n11D3A         ; XID_Continue\n11D3C..11D3D  ; XID_Continue\n11D3F..11D45  ; XID_Continue\n11D46         ; XID_Continue\n11D47         ; XID_Continue\n11D50..11D59  ; XID_Continue\n11D60..11D65  ; XID_Continue\n11D67..11D68  ; XID_Continue\n11D6A..11D89  ; XID_Continue\n11D8A..11D8E  ; XID_Continue\n11D90..11D91  ; XID_Continue\n11D93..11D94  ; XID_Continue\n11D95         ; XID_Continue\n11D96         ; XID_Continue\n11D97         ; XID_Continue\n11D98         ; XID_Continue\n11DA0..11DA9  ; XID_Continue\n11EE0..11EF2  ; XID_Continue\n11EF3..11EF4  ; XID_Continue\n11EF5..11EF6  ; XID_Continue\n11F00..11F01  ; XID_Continue\n11F02         ; XID_Continue\n11F03         ; XID_Continue\n11F04..11F10  ; XID_Continue\n11F12..11F33  ; XID_Continue\n11F34..11F35  ; XID_Continue\n11F36..11F3A  ; XID_Continue\n11F3E..11F3F  ; XID_Continue\n11F40         ; XID_Continue\n11F41         ; XID_Continue\n11F42         ; XID_Continue\n11F50..11F59  ; XID_Continue\n11F5A         ; XID_Continue\n11FB0         ; XID_Continue\n12000..12399  ; XID_Continue\n12400..1246E  ; XID_Continue\n12480..12543  ; XID_Continue\n12F90..12FF0  ; XID_Continue\n13000..1342F  ; XID_Continue\n13440         ; XID_Continue\n13441..13446  ; XID_Continue\n13447..13455  ; XID_Continue\n13460..143FA  ; XID_Continue\n14400..14646  ; XID_Continue\n16100..1611D  ; XID_Continue\n1611E..16129  ; XID_Continue\n1612A..1612C  ; XID_Continue\n1612D..1612F  ; XID_Continue\n16130..16139  ; XID_Continue\n16800..16A38  ; XID_Continue\n16A40..16A5E  ; XID_Continue\n16A60..16A69  ; XID_Continue\n16A70..16ABE  ; XID_Continue\n16AC0..16AC9  ; XID_Continue\n16AD0..16AED  ; XID_Continue\n16AF0..16AF4  ; XID_Continue\n16B00..16B2F  ; XID_Continue\n16B30..16B36  ; XID_Continue\n16B40..16B43  ; XID_Continue\n16B50..16B59  ; XID_Continue\n16B63..16B77  ; XID_Continue\n16B7D..16B8F  ; XID_Continue\n16D40..16D42  ; XID_Continue\n16D43..16D6A  ; XID_Continue\n16D6B..16D6C  ; XID_Continue\n16D70..16D79  ; XID_Continue\n16E40..16E7F  ; XID_Continue\n16F00..16F4A  ; XID_Continue\n16F4F         ; XID_Continue\n16F50         ; XID_Continue\n16F51..16F87  ; XID_Continue\n16F8F..16F92  ; XID_Continue\n16F93..16F9F  ; XID_Continue\n16FE0..16FE1  ; XID_Continue\n16FE3         ; XID_Continue\n16FE4         ; XID_Continue\n16FF0..16FF1  ; XID_Continue\n17000..187F7  ; XID_Continue\n18800..18CD5  ; XID_Continue\n18CFF..18D08  ; XID_Continue\n1AFF0..1AFF3  ; XID_Continue\n1AFF5..1AFFB  ; XID_Continue\n1AFFD..1AFFE  ; XID_Continue\n1B000..1B122  ; XID_Continue\n1B132         ; XID_Continue\n1B150..1B152  ; XID_Continue\n1B155         ; XID_Continue\n1B164..1B167  ; XID_Continue\n1B170..1B2FB  ; XID_Continue\n1BC00..1BC6A  ; XID_Continue\n1BC70..1BC7C  ; XID_Continue\n1BC80..1BC88  ; XID_Continue\n1BC90..1BC99  ; XID_Continue\n1BC9D..1BC9E  ; XID_Continue\n1CCF0..1CCF9  ; XID_Continue\n1CF00..1CF2D  ; XID_Continue\n1CF30..1CF46  ; XID_Continue\n1D165..1D166  ; XID_Continue\n1D167..1D169  ; XID_Continue\n1D16D..1D172  ; XID_Continue\n1D17B..1D182  ; XID_Continue\n1D185..1D18B  ; XID_Continue\n1D1AA..1D1AD  ; XID_Continue\n1D242..1D244  ; XID_Continue\n1D400..1D454  ; XID_Continue\n1D456..1D49C  ; XID_Continue\n1D49E..1D49F  ; XID_Continue\n1D4A2         ; XID_Continue\n1D4A5..1D4A6  ; XID_Continue\n1D4A9..1D4AC  ; XID_Continue\n1D4AE..1D4B9  ; XID_Continue\n1D4BB         ; XID_Continue\n1D4BD..1D4C3  ; XID_Continue\n1D4C5..1D505  ; XID_Continue\n1D507..1D50A  ; XID_Continue\n1D50D..1D514  ; XID_Continue\n1D516..1D51C  ; XID_Continue\n1D51E..1D539  ; XID_Continue\n1D53B..1D53E  ; XID_Continue\n1D540..1D544  ; XID_Continue\n1D546         ; XID_Continue\n1D54A..1D550  ; XID_Continue\n1D552..1D6A5  ; XID_Continue\n1D6A8..1D6C0  ; XID_Continue\n1D6C2..1D6DA  ; XID_Continue\n1D6DC..1D6FA  ; XID_Continue\n1D6FC..1D714  ; XID_Continue\n1D716..1D734  ; XID_Continue\n1D736..1D74E  ; XID_Continue\n1D750..1D76E  ; XID_Continue\n1D770..1D788  ; XID_Continue\n1D78A..1D7A8  ; XID_Continue\n1D7AA..1D7C2  ; XID_Continue\n1D7C4..1D7CB  ; XID_Continue\n1D7CE..1D7FF  ; XID_Continue\n1DA00..1DA36  ; XID_Continue\n1DA3B..1DA6C  ; XID_Continue\n1DA75         ; XID_Continue\n1DA84         ; XID_Continue\n1DA9B..1DA9F  ; XID_Continue\n1DAA1..1DAAF  ; XID_Continue\n1DF00..1DF09  ; XID_Continue\n1DF0A         ; XID_Continue\n1DF0B..1DF1E  ; XID_Continue\n1DF25..1DF2A  ; XID_Continue\n1E000..1E006  ; XID_Continue\n1E008..1E018  ; XID_Continue\n1E01B..1E021  ; XID_Continue\n1E023..1E024  ; XID_Continue\n1E026..1E02A  ; XID_Continue\n1E030..1E06D  ; XID_Continue\n1E08F         ; XID_Continue\n1E100..1E12C  ; XID_Continue\n1E130..1E136  ; XID_Continue\n1E137..1E13D  ; XID_Continue\n1E140..1E149  ; XID_Continue\n1E14E         ; XID_Continue\n1E290..1E2AD  ; XID_Continue\n1E2AE         ; XID_Continue\n1E2C0..1E2EB  ; XID_Continue\n1E2EC..1E2EF  ; XID_Continue\n1E2F0..1E2F9  ; XID_Continue\n1E4D0..1E4EA  ; XID_Continue\n1E4EB         ; XID_Continue\n1E4EC..1E4EF  ; XID_Continue\n1E4F0..1E4F9  ; XID_Continue\n1E5D0..1E5ED  ; XID_Continue\n1E5EE..1E5EF  ; XID_Continue\n1E5F0         ; XID_Continue\n1E5F1..1E5FA  ; XID_Continue\n1E7E0..1E7E6  ; XID_Continue\n1E7E8..1E7EB  ; XID_Continue\n1E7ED..1E7EE  ; XID_Continue\n1E7F0..1E7FE  ; XID_Continue\n1E800..1E8C4  ; XID_Continue\n1E8D0..1E8D6  ; XID_Continue\n1E900..1E943  ; XID_Continue\n1E944..1E94A  ; XID_Continue\n1E94B         ; XID_Continue\n1E950..1E959  ; XID_Continue\n1EE00..1EE03  ; XID_Continue\n1EE05..1EE1F  ; XID_Continue\n1EE21..1EE22  ; XID_Continue\n1EE24         ; XID_Continue\n1EE27         ; XID_Continue\n1EE29..1EE32  ; XID_Continue\n1EE34..1EE37  ; XID_Continue\n1EE39         ; XID_Continue\n1EE3B         ; XID_Continue\n1EE42         ; XID_Continue\n1EE47         ; XID_Continue\n1EE49         ; XID_Continue\n1EE4B         ; XID_Continue\n1EE4D..1EE4F  ; XID_Continue\n1EE51..1EE52  ; XID_Continue\n1EE54         ; XID_Continue\n1EE57         ; XID_Continue\n1EE59         ; XID_Continue\n1EE5B         ; XID_Continue\n1EE5D         ; XID_Continue\n1EE5F         ; XID_Continue\n1EE61..1EE62  ; XID_Continue\n```\n\n----------------------------------------\n\nTITLE: Unicode Extended Pictographic Range Definitions\nDESCRIPTION: Defines Unicode code point ranges for Extended Pictographic symbols with their corresponding emoji versions and descriptions. Each line specifies either a single code point or a range, along with the Unicode version (E0.0 - E1.0) and the symbol description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n2702          ; Extended_Pictographic# E0.6   [1] (✂️)       scissors\n2703..2704    ; Extended_Pictographic# E0.0   [2] (✃..✄)    LOWER BLADE SCISSORS..WHITE SCISSORS\n2705          ; Extended_Pictographic# E0.6   [1] (✅)       check mark button\n```\n\n----------------------------------------\n\nTITLE: Defining Case Ignorable Unicode Code Points\nDESCRIPTION: This snippet defines ranges and individual code points that are considered case-ignorable in Unicode. It includes a wide range of code points from various Unicode blocks, including combining marks, format characters, and other special characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\nF870..F87F    ; Case_Ignorable\nF884..F899    ; Case_Ignorable\nF89F          ; Case_Ignorable\nF8B8          ; Case_Ignorable\nFB1E          ; Case_Ignorable\nFBB2..FBC2    ; Case_Ignorable\nFE00..FE0F    ; Case_Ignorable\nFE13          ; Case_Ignorable\nFE20..FE2F    ; Case_Ignorable\nFE52          ; Case_Ignorable\nFE55          ; Case_Ignorable\nFEFF          ; Case_Ignorable\nFF07          ; Case_Ignorable\nFF0E          ; Case_Ignorable\nFF1A          ; Case_Ignorable\nFF3E          ; Case_Ignorable\nFF40          ; Case_Ignorable\nFF70          ; Case_Ignorable\nFF9E..FF9F    ; Case_Ignorable\nFFE3          ; Case_Ignorable\nFFF9..FFFB    ; Case_Ignorable\n101FD         ; Case_Ignorable\n102E0         ; Case_Ignorable\n10376..1037A  ; Case_Ignorable\n10780..10785  ; Case_Ignorable\n10787..107B0  ; Case_Ignorable\n107B2..107BA  ; Case_Ignorable\n10A01..10A03  ; Case_Ignorable\n10A05..10A06  ; Case_Ignorable\n10A0C..10A0F  ; Case_Ignorable\n10A38..10A3A  ; Case_Ignorable\n10A3F         ; Case_Ignorable\n10AE5..10AE6  ; Case_Ignorable\n10D24..10D27  ; Case_Ignorable\n10D4E         ; Case_Ignorable\n10D69..10D6D  ; Case_Ignorable\n10D6F         ; Case_Ignorable\n10EAB..10EAC  ; Case_Ignorable\n10EFC..10EFF  ; Case_Ignorable\n10F46..10F50  ; Case_Ignorable\n10F82..10F85  ; Case_Ignorable\n11001         ; Case_Ignorable\n11038..11046  ; Case_Ignorable\n11070         ; Case_Ignorable\n11073..11074  ; Case_Ignorable\n1107F..11081  ; Case_Ignorable\n110B3..110B6  ; Case_Ignorable\n110B9..110BA  ; Case_Ignorable\n110BD         ; Case_Ignorable\n110C2         ; Case_Ignorable\n110CD         ; Case_Ignorable\n11100..11102  ; Case_Ignorable\n11127..1112B  ; Case_Ignorable\n1112D..11134  ; Case_Ignorable\n11173         ; Case_Ignorable\n11180..11181  ; Case_Ignorable\n111B6..111BE  ; Case_Ignorable\n111C9..111CC  ; Case_Ignorable\n111CF         ; Case_Ignorable\n1122F..11231  ; Case_Ignorable\n11234         ; Case_Ignorable\n11236..11237  ; Case_Ignorable\n1123E         ; Case_Ignorable\n11241         ; Case_Ignorable\n112DF         ; Case_Ignorable\n112E3..112EA  ; Case_Ignorable\n11300..11301  ; Case_Ignorable\n1133B..1133C  ; Case_Ignorable\n11340         ; Case_Ignorable\n11366..1136C  ; Case_Ignorable\n11370..11374  ; Case_Ignorable\n113BB..113C0  ; Case_Ignorable\n113CE         ; Case_Ignorable\n113D0         ; Case_Ignorable\n113D2         ; Case_Ignorable\n113E1..113E2  ; Case_Ignorable\n11438..1143F  ; Case_Ignorable\n11442..11444  ; Case_Ignorable\n11446         ; Case_Ignorable\n1145E         ; Case_Ignorable\n114B3..114B8  ; Case_Ignorable\n114BA         ; Case_Ignorable\n114BF..114C0  ; Case_Ignorable\n114C2..114C3  ; Case_Ignorable\n115B2..115B5  ; Case_Ignorable\n115BC..115BD  ; Case_Ignorable\n115BF..115C0  ; Case_Ignorable\n115DC..115DD  ; Case_Ignorable\n11633..1163A  ; Case_Ignorable\n1163D         ; Case_Ignorable\n1163F..11640  ; Case_Ignorable\n116AB         ; Case_Ignorable\n116AD         ; Case_Ignorable\n116B0..116B5  ; Case_Ignorable\n116B7         ; Case_Ignorable\n1171D         ; Case_Ignorable\n1171F         ; Case_Ignorable\n11722..11725  ; Case_Ignorable\n11727..1172B  ; Case_Ignorable\n1182F..11837  ; Case_Ignorable\n11839..1183A  ; Case_Ignorable\n1193B..1193C  ; Case_Ignorable\n1193E         ; Case_Ignorable\n11943         ; Case_Ignorable\n119D4..119D7  ; Case_Ignorable\n119DA..119DB  ; Case_Ignorable\n119E0         ; Case_Ignorable\n11A01..11A0A  ; Case_Ignorable\n11A33..11A38  ; Case_Ignorable\n11A3B..11A3E  ; Case_Ignorable\n11A47         ; Case_Ignorable\n11A51..11A56  ; Case_Ignorable\n11A59..11A5B  ; Case_Ignorable\n11A8A..11A96  ; Case_Ignorable\n11A98..11A99  ; Case_Ignorable\n11C30..11C36  ; Case_Ignorable\n11C38..11C3D  ; Case_Ignorable\n11C3F         ; Case_Ignorable\n11C92..11CA7  ; Case_Ignorable\n11CAA..11CB0  ; Case_Ignorable\n11CB2..11CB3  ; Case_Ignorable\n11CB5..11CB6  ; Case_Ignorable\n11D31..11D36  ; Case_Ignorable\n11D3A         ; Case_Ignorable\n11D3C..11D3D  ; Case_Ignorable\n11D3F..11D45  ; Case_Ignorable\n11D47         ; Case_Ignorable\n11D90..11D91  ; Case_Ignorable\n11D95         ; Case_Ignorable\n11D97         ; Case_Ignorable\n11EF3..11EF4  ; Case_Ignorable\n11F00..11F01  ; Case_Ignorable\n11F36..11F3A  ; Case_Ignorable\n11F40         ; Case_Ignorable\n11F42         ; Case_Ignorable\n11F5A         ; Case_Ignorable\n13430..1343F  ; Case_Ignorable\n13440         ; Case_Ignorable\n13447..13455  ; Case_Ignorable\n1611E..16129  ; Case_Ignorable\n1612D..1612F  ; Case_Ignorable\n16AF0..16AF4  ; Case_Ignorable\n16B30..16B36  ; Case_Ignorable\n16B40..16B43  ; Case_Ignorable\n16D40..16D42  ; Case_Ignorable\n16D6B..16D6C  ; Case_Ignorable\n16F4F         ; Case_Ignorable\n16F8F..16F92  ; Case_Ignorable\n16F93..16F9F  ; Case_Ignorable\n16FE0..16FE1  ; Case_Ignorable\n16FE3         ; Case_Ignorable\n16FE4         ; Case_Ignorable\n1AFF0..1AFF3  ; Case_Ignorable\n1AFF5..1AFFB  ; Case_Ignorable\n1AFFD..1AFFE  ; Case_Ignorable\n1BC9D..1BC9E  ; Case_Ignorable\n1BCA0..1BCA3  ; Case_Ignorable\n1CF00..1CF2D  ; Case_Ignorable\n1CF30..1CF46  ; Case_Ignorable\n1D167..1D169  ; Case_Ignorable\n1D173..1D17A  ; Case_Ignorable\n1D17B..1D182  ; Case_Ignorable\n1D185..1D18B  ; Case_Ignorable\n1D1AA..1D1AD  ; Case_Ignorable\n1D242..1D244  ; Case_Ignorable\n1DA00..1DA36  ; Case_Ignorable\n1DA3B..1DA6C  ; Case_Ignorable\n1DA75         ; Case_Ignorable\n1DA84         ; Case_Ignorable\n1DA9B..1DA9F  ; Case_Ignorable\n1DAA1..1DAAF  ; Case_Ignorable\n1E000..1E006  ; Case_Ignorable\n1E008..1E018  ; Case_Ignorable\n1E01B..1E021  ; Case_Ignorable\n1E023..1E024  ; Case_Ignorable\n1E026..1E02A  ; Case_Ignorable\n1E030..1E06D  ; Case_Ignorable\n1E08F         ; Case_Ignorable\n1E130..1E136  ; Case_Ignorable\n1E137..1E13D  ; Case_Ignorable\n1E2AE         ; Case_Ignorable\n1E2EC..1E2EF  ; Case_Ignorable\n1E4EB         ; Case_Ignorable\n1E4EC..1E4EF  ; Case_Ignorable\n1E5EE..1E5EF  ; Case_Ignorable\n1E8D0..1E8D6  ; Case_Ignorable\n1E944..1E94A  ; Case_Ignorable\n1E94B         ; Case_Ignorable\n1F3FB..1F3FF  ; Case_Ignorable\nE0001         ; Case_Ignorable\nE0020..E007F  ; Case_Ignorable\nE0100..E01EF  ; Case_Ignorable\n```\n\n----------------------------------------\n\nTITLE: Optimized Version of Swift Deinit Example\nDESCRIPTION: This snippet shows an alternative, optimized version of the main function from the previous example. It demonstrates how the optimizer can reorder operations while maintaining memory safety.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\nfunc main() {\n  let c = C()\n  useC(c)\n  let d = GLOBAL_D\n  useD(d)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FooClassPropertyOwnership with Memory Management Attributes\nDESCRIPTION: Defines a class with properties that have explicit memory management attributes like unowned, weak, and NSCopying to control object ownership.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_23\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooClassPropertyOwnership : FooClassBase {\n  unowned(unsafe) var assignable: @sil_unmanaged AnyObject!\n  unowned(unsafe) var unsafeAssignable: @sil_unmanaged AnyObject!\n  var retainable: AnyObject!\n  var strongRef: AnyObject!\n  @NSCopying var copyable: AnyObject!\n  weak var weakRef: @sil_weak AnyObject!\n  var scalar: Int32\n  init!()\n  convenience init!(float f: Float)\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Hangul L Classification\nDESCRIPTION: Defines code point ranges for Hangul Choseong characters classified as L (Leading consonant).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_9\n\nLANGUAGE: unicode\nCODE:\n```\n1100..115F    ; L # Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER\nA960..A97C    ; L # Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping for Digit Two\nDESCRIPTION: Defines Unicode code points that represent the numeric value 2 across different scripts and number systems. Each line contains the Unicode code point, numeric value, and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\n0032          ; 2.0 ; ; 2 # Nd       DIGIT TWO\n00B2          ; 2.0 ; ; 2 # No       SUPERSCRIPT TWO\n0662          ; 2.0 ; ; 2 # Nd       ARABIC-INDIC DIGIT TWO\n[...additional entries...]\n```\n\n----------------------------------------\n\nTITLE: Defining Sentence_Terminal Unicode Characters\nDESCRIPTION: This snippet defines Unicode code points for characters that are considered sentence terminators. It includes various punctuation marks from different writing systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_26\n\nLANGUAGE: Unicode\nCODE:\n```\n0021          ; Sentence_Terminal # Po       EXCLAMATION MARK\n002E          ; Sentence_Terminal # Po       FULL STOP\n003F          ; Sentence_Terminal # Po       QUESTION MARK\n0589          ; Sentence_Terminal # Po       ARMENIAN FULL STOP\n061D..061F    ; Sentence_Terminal # Po   [3] ARABIC END OF TEXT MARK..ARABIC QUESTION MARK\n06D4          ; Sentence_Terminal # Po       ARABIC FULL STOP\n0700..0702    ; Sentence_Terminal # Po   [3] SYRIAC END OF PARAGRAPH..SYRIAC SUBLINEAR FULL STOP\n07F9          ; Sentence_Terminal # Po       NKO EXCLAMATION MARK\n0837          ; Sentence_Terminal # Po       SAMARITAN PUNCTUATION MELODIC QITSA\n0839          ; Sentence_Terminal # Po       SAMARITAN PUNCTUATION QITSA\n083D..083E    ; Sentence_Terminal # Po   [2] SAMARITAN PUNCTUATION SOF MASHFAAT..SAMARITAN PUNCTUATION ANNAAU\n0964..0965    ; Sentence_Terminal # Po   [2] DEVANAGARI DANDA..DEVANAGARI DOUBLE DANDA\n104A..104B    ; Sentence_Terminal # Po   [2] MYANMAR SIGN LITTLE SECTION..MYANMAR SIGN SECTION\n1362          ; Sentence_Terminal # Po       ETHIOPIC FULL STOP\n1367..1368    ; Sentence_Terminal # Po   [2] ETHIOPIC QUESTION MARK..ETHIOPIC PARAGRAPH SEPARATOR\n166E          ; Sentence_Terminal # Po       CANADIAN SYLLABICS FULL STOP\n1735..1736    ; Sentence_Terminal # Po   [2] PHILIPPINE SINGLE PUNCTUATION..PHILIPPINE DOUBLE PUNCTUATION\n17D4..17D5    ; Sentence_Terminal # Po   [2] KHMER SIGN KHAN..KHMER SIGN BARIYOOSAN\n1803          ; Sentence_Terminal # Po       MONGOLIAN FULL STOP\n1809          ; Sentence_Terminal # Po       MONGOLIAN MANCHU FULL STOP\n1944..1945    ; Sentence_Terminal # Po   [2] LIMBU EXCLAMATION MARK..LIMBU QUESTION MARK\n1AA8..1AAB    ; Sentence_Terminal # Po   [4] TAI THAM SIGN KAAN..TAI THAM SIGN SATKAANKUU\n1B4E..1B4F    ; Sentence_Terminal # Po   [2] BALINESE INVERTED CARIK SIKI..BALINESE INVERTED CARIK PAREREN\n1B5A..1B5B    ; Sentence_Terminal # Po   [2] BALINESE PANTI..BALINESE PAMADA\n1B5E..1B5F    ; Sentence_Terminal # Po   [2] BALINESE CARIK SIKI..BALINESE CARIK PAREREN\n1B7D..1B7F    ; Sentence_Terminal # Po   [3] BALINESE PANTI LANTANG..BALINESE PANTI BAWAK\n1C3B..1C3C    ; Sentence_Terminal # Po   [2] LEPCHA PUNCTUATION TA-ROL..LEPCHA PUNCTUATION NYET THYOOM TA-ROL\n1C7E..1C7F    ; Sentence_Terminal # Po   [2] OL CHIKI PUNCTUATION MUCAAD..OL CHIKI PUNCTUATION DOUBLE MUCAAD\n2024          ; Sentence_Terminal # Po       ONE DOT LEADER\n203C..203D    ; Sentence_Terminal # Po   [2] DOUBLE EXCLAMATION MARK..INTERROBANG\n2047..2049    ; Sentence_Terminal # Po   [3] DOUBLE QUESTION MARK..EXCLAMATION QUESTION MARK\n2CF9..2CFB    ; Sentence_Terminal # Po   [3] COPTIC OLD NUBIAN FULL STOP..COPTIC OLD NUBIAN INDIRECT QUESTION MARK\n2E2E          ; Sentence_Terminal # Po       REVERSED QUESTION MARK\n2E3C          ; Sentence_Terminal # Po       STENOGRAPHIC FULL STOP\n2E53..2E54    ; Sentence_Terminal # Po   [2] MEDIEVAL EXCLAMATION MARK..MEDIEVAL QUESTION MARK\n3002          ; Sentence_Terminal # Po       IDEOGRAPHIC FULL STOP\nA4FF          ; Sentence_Terminal # Po       LISU PUNCTUATION FULL STOP\nA60E..A60F    ; Sentence_Terminal # Po   [2] VAI FULL STOP..VAI QUESTION MARK\nA6F3          ; Sentence_Terminal # Po       BAMUM FULL STOP\nA6F7          ; Sentence_Terminal # Po       BAMUM QUESTION MARK\nA876..A877    ; Sentence_Terminal # Po   [2] PHAGS-PA MARK SHAD..PHAGS-PA MARK DOUBLE SHAD\nA8CE..A8CF    ; Sentence_Terminal # Po   [2] SAURASHTRA DANDA..SAURASHTRA DOUBLE DANDA\nA92F          ; Sentence_Terminal # Po       KAYAH LI SIGN SHYA\nA9C8..A9C9    ; Sentence_Terminal # Po   [2] JAVANESE PADA LINGSA..JAVANESE PADA LUNGSI\nAA5D..AA5F    ; Sentence_Terminal # Po   [3] CHAM PUNCTUATION DANDA..CHAM PUNCTUATION TRIPLE DANDA\nAAF0..AAF1    ; Sentence_Terminal # Po   [2] MEETEI MAYEK CHEIKHAN..MEETEI MAYEK AHANG KHUDAM\nABEB          ; Sentence_Terminal # Po       MEETEI MAYEK CHEIKHEI\nFE12          ; Sentence_Terminal # Po       PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP\nFE15..FE16    ; Sentence_Terminal # Po   [2] PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK..PRESENTATION FORM FOR VERTICAL QUESTION MARK\nFE52          ; Sentence_Terminal # Po       SMALL FULL STOP\nFE56..FE57    ; Sentence_Terminal # Po   [2] SMALL QUESTION MARK..SMALL EXCLAMATION MARK\nFF01          ; Sentence_Terminal # Po       FULLWIDTH EXCLAMATION MARK\nFF0E          ; Sentence_Terminal # Po       FULLWIDTH FULL STOP\nFF1F          ; Sentence_Terminal # Po       FULLWIDTH QUESTION MARK\nFF61          ; Sentence_Terminal # Po       HALFWIDTH IDEOGRAPHIC FULL STOP\n10A56..10A57  ; Sentence_Terminal # Po   [2] KHAROSHTHI PUNCTUATION DANDA..KHAROSHTHI PUNCTUATION DOUBLE DANDA\n10F55..10F59  ; Sentence_Terminal # Po   [5] SOGDIAN PUNCTUATION TWO VERTICAL BARS..SOGDIAN PUNCTUATION HALF CIRCLE WITH DOT\n10F86..10F89  ; Sentence_Terminal # Po   [4] OLD UYGHUR PUNCTUATION BAR..OLD UYGHUR PUNCTUATION FOUR DOTS\n11047..11048  ; Sentence_Terminal # Po   [2] BRAHMI DANDA..BRAHMI DOUBLE DANDA\n110BE..110C1  ; Sentence_Terminal # Po   [4] KAITHI SECTION MARK..KAITHI DOUBLE DANDA\n11141..11143  ; Sentence_Terminal # Po   [3] CHAKMA DANDA..CHAKMA QUESTION MARK\n111C5..111C6  ; Sentence_Terminal # Po   [2] SHARADA DANDA..SHARADA DOUBLE DANDA\n111CD         ; Sentence_Terminal # Po       SHARADA SUTRA MARK\n111DE..111DF  ; Sentence_Terminal # Po   [2] SHARADA SECTION MARK-1..SHARADA SECTION MARK-2\n11238..11239  ; Sentence_Terminal # Po   [2] KHOJKI DANDA..KHOJKI DOUBLE DANDA\n1123B..1123C  ; Sentence_Terminal # Po   [2] KHOJKI SECTION MARK..KHOJKI DOUBLE SECTION MARK\n112A9         ; Sentence_Terminal # Po       MULTANI SECTION MARK\n113D4..113D5  ; Sentence_Terminal # Po   [2] TULU-TIGALARI DANDA..TULU-TIGALARI DOUBLE DANDA\n1144B..1144C  ; Sentence_Terminal # Po   [2] NEWA DANDA..NEWA DOUBLE DANDA\n115C2..115C3  ; Sentence_Terminal # Po   [2] SIDDHAM DANDA..SIDDHAM DOUBLE DANDA\n115C9..115D7  ; Sentence_Terminal # Po  [15] SIDDHAM END OF TEXT MARK..SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES\n11641..11642  ; Sentence_Terminal # Po   [2] MODI DANDA..MODI DOUBLE DANDA\n1173C..1173E  ; Sentence_Terminal # Po   [3] AHOM SIGN SMALL SECTION..AHOM SIGN RULAI\n11944         ; Sentence_Terminal # Po       DIVES AKURU DOUBLE DANDA\n11946         ; Sentence_Terminal # Po       DIVES AKURU END OF TEXT MARK\n11A42..11A43  ; Sentence_Terminal # Po   [2] ZANABAZAR SQUARE MARK SHAD..ZANABAZAR SQUARE MARK DOUBLE SHAD\n11A9B..11A9C  ; Sentence_Terminal # Po   [2] SOYOMBO MARK SHAD..SOYOMBO MARK DOUBLE SHAD\n11C41..11C42  ; Sentence_Terminal # Po   [2] BHAIKSUKI DANDA..BHAIKSUKI DOUBLE DANDA\n11EF7..11EF8  ; Sentence_Terminal # Po   [2] MAKASAR PASSIMBANG..MAKASAR END OF SECTION\n11F43..11F44  ; Sentence_Terminal # Po   [2] KAWI DANDA..KAWI DOUBLE DANDA\n16A6E..16A6F  ; Sentence_Terminal # Po   [2] MRO DANDA..MRO DOUBLE DANDA\n16AF5         ; Sentence_Terminal # Po       BASSA VAH FULL STOP\n16B37..16B38  ; Sentence_Terminal # Po   [2] PAHAWH HMONG SIGN VOS THOM..PAHAWH HMONG SIGN VOS TSHAB CEEB\n16B44         ; Sentence_Terminal # Po       PAHAWH HMONG SIGN XAUS\n16D6E..16D6F  ; Sentence_Terminal # Po   [2] KIRAT RAI DANDA..KIRAT RAI DOUBLE DANDA\n16E98         ; Sentence_Terminal # Po       MEDEFAIDRIN FULL STOP\n1BC9F         ; Sentence_Terminal # Po       DUPLOYAN PUNCTUATION CHINOOK FULL STOP\n1DA88         ; Sentence_Terminal # Po       SIGNWRITING FULL STOP\n```\n\n----------------------------------------\n\nTITLE: Non-movable C++ Class Example\nDESCRIPTION: Example of a non-movable C++ class with deleted copy and move operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_37\n\nLANGUAGE: c++\nCODE:\n```\nclass NonMovable {\npublic:\n  NonMovable(const NonMovable &) = delete;\n  NonMovable(NonMovable &&) = delete;\n  ~NonMovable();\n\n  NonMovable &operator=(const NonMovable &) = delete;\n  NonMovable &operator=(NonMovable &&) = delete;\n\n  void debugPrint() const;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Other_Uppercase Unicode Characters\nDESCRIPTION: This snippet defines Unicode code point ranges for Other_Uppercase characters, including Roman numerals and various enclosed capital letters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_18\n\nLANGUAGE: Unicode\nCODE:\n```\n2160..216F    ; Other_Uppercase # Nl  [16] ROMAN NUMERAL ONE..ROMAN NUMERAL ONE THOUSAND\n24B6..24CF    ; Other_Uppercase # So  [26] CIRCLED LATIN CAPITAL LETTER A..CIRCLED LATIN CAPITAL LETTER Z\n1F130..1F149  ; Other_Uppercase # So  [26] SQUARED LATIN CAPITAL LETTER A..SQUARED LATIN CAPITAL LETTER Z\n1F150..1F169  ; Other_Uppercase # So  [26] NEGATIVE CIRCLED LATIN CAPITAL LETTER A..NEGATIVE CIRCLED LATIN CAPITAL LETTER Z\n1F170..1F189  ; Other_Uppercase # So  [26] NEGATIVE SQUARED LATIN CAPITAL LETTER A..NEGATIVE SQUARED LATIN CAPITAL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: Continuing Math Property Definition for Unicode Characters\nDESCRIPTION: This code block continues the definition of Unicode code points with the 'Math' property, including additional mathematical symbols and characters from various Unicode blocks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_1\n\nLANGUAGE: Unicode\nCODE:\n```\nF8BC          ; Math\nF8BD          ; Math\nF8C0          ; Math\nFB29          ; Math\nFE61          ; Math\nFE62          ; Math\nFE63          ; Math\nFE64..FE66    ; Math\nFE68          ; Math\nFF0B          ; Math\nFF1C..FF1E    ; Math\nFF3C          ; Math\nFF3E          ; Math\nFF5C          ; Math\nFF5E          ; Math\nFFE2          ; Math\nFFE9..FFEC    ; Math\n10D8E..10D8F  ; Math\n1D400..1D454  ; Math\n1D456..1D49C  ; Math\n1D49E..1D49F  ; Math\n1D4A2         ; Math\n1D4A5..1D4A6  ; Math\n1D4A9..1D4AC  ; Math\n1D4AE..1D4B9  ; Math\n1D4BB         ; Math\n1D4BD..1D4C3  ; Math\n1D4C5..1D505  ; Math\n1D507..1D50A  ; Math\n1D50D..1D514  ; Math\n1D516..1D51C  ; Math\n1D51E..1D539  ; Math\n1D53B..1D53E  ; Math\n1D540..1D544  ; Math\n1D546         ; Math\n1D54A..1D550  ; Math\n1D552..1D6A5  ; Math\n1D6A8..1D6C0  ; Math\n1D6C1         ; Math\n1D6C2..1D6DA  ; Math\n1D6DB         ; Math\n1D6DC..1D6FA  ; Math\n1D6FB         ; Math\n1D6FC..1D714  ; Math\n1D715         ; Math\n1D716..1D734  ; Math\n1D735         ; Math\n1D736..1D74E  ; Math\n1D74F         ; Math\n1D750..1D76E  ; Math\n1D76F         ; Math\n1D770..1D788  ; Math\n1D789         ; Math\n1D78A..1D7A8  ; Math\n1D7A9         ; Math\n1D7AA..1D7C2  ; Math\n1D7C3         ; Math\n1D7C4..1D7CB  ; Math\n1D7CE..1D7FF  ; Math\n1EE00..1EE03  ; Math\n1EE05..1EE1F  ; Math\n1EE21..1EE22  ; Math\n1EE24         ; Math\n1EE27         ; Math\n1EE29..1EE32  ; Math\n1EE34..1EE37  ; Math\n1EE39         ; Math\n1EE3B         ; Math\n1EE42         ; Math\n1EE47         ; Math\n1EE49         ; Math\n1EE4B         ; Math\n1EE4D..1EE4F  ; Math\n1EE51..1EE52  ; Math\n1EE54         ; Math\n1EE57         ; Math\n1EE59         ; Math\n1EE5B         ; Math\n1EE5D         ; Math\n1EE5F         ; Math\n1EE61..1EE62  ; Math\n1EE64         ; Math\n1EE67..1EE6A  ; Math\n1EE6C..1EE72  ; Math\n1EE74..1EE77  ; Math\n1EE79..1EE7C  ; Math\n1EE7E         ; Math\n1EE80..1EE89  ; Math\n1EE8B..1EE9B  ; Math\n1EEA1..1EEA3  ; Math\n1EEA5..1EEA9  ; Math\n1EEAB..1EEBB  ; Math\n1EEF0..1EEF1  ; Math\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Code Points to Numeric Value 8\nDESCRIPTION: This snippet lists Unicode code points that represent the numeric value 8 in various scripts and notations. Each line contains the Unicode code point, numeric value, and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n0038          ; 8.0 ; ; 8 # Nd       DIGIT EIGHT\n0668          ; 8.0 ; ; 8 # Nd       ARABIC-INDIC DIGIT EIGHT\n06F8          ; 8.0 ; ; 8 # Nd       EXTENDED ARABIC-INDIC DIGIT EIGHT\n07C8          ; 8.0 ; ; 8 # Nd       NKO DIGIT EIGHT\n096E          ; 8.0 ; ; 8 # Nd       DEVANAGARI DIGIT EIGHT\n09EE          ; 8.0 ; ; 8 # Nd       BENGALI DIGIT EIGHT\n0A6E          ; 8.0 ; ; 8 # Nd       GURMUKHI DIGIT EIGHT\n0AEE          ; 8.0 ; ; 8 # Nd       GUJARATI DIGIT EIGHT\n0B6E          ; 8.0 ; ; 8 # Nd       ORIYA DIGIT EIGHT\n0BEE          ; 8.0 ; ; 8 # Nd       TAMIL DIGIT EIGHT\n0C6E          ; 8.0 ; ; 8 # Nd       TELUGU DIGIT EIGHT\n0CEE          ; 8.0 ; ; 8 # Nd       KANNADA DIGIT EIGHT\n0D6E          ; 8.0 ; ; 8 # Nd       MALAYALAM DIGIT EIGHT\n0DEE          ; 8.0 ; ; 8 # Nd       SINHALA LITH DIGIT EIGHT\n0E58          ; 8.0 ; ; 8 # Nd       THAI DIGIT EIGHT\n0ED8          ; 8.0 ; ; 8 # Nd       LAO DIGIT EIGHT\n0F28          ; 8.0 ; ; 8 # Nd       TIBETAN DIGIT EIGHT\n1048          ; 8.0 ; ; 8 # Nd       MYANMAR DIGIT EIGHT\n1098          ; 8.0 ; ; 8 # Nd       MYANMAR SHAN DIGIT EIGHT\n1370          ; 8.0 ; ; 8 # No       ETHIOPIC DIGIT EIGHT\n17E8          ; 8.0 ; ; 8 # Nd       KHMER DIGIT EIGHT\n17F8          ; 8.0 ; ; 8 # No       KHMER SYMBOL LEK ATTAK PRAM-BEI\n1818          ; 8.0 ; ; 8 # Nd       MONGOLIAN DIGIT EIGHT\n194E          ; 8.0 ; ; 8 # Nd       LIMBU DIGIT EIGHT\n19D8          ; 8.0 ; ; 8 # Nd       NEW TAI LUE DIGIT EIGHT\n1A88          ; 8.0 ; ; 8 # Nd       TAI THAM HORA DIGIT EIGHT\n1A98          ; 8.0 ; ; 8 # Nd       TAI THAM THAM DIGIT EIGHT\n1B58          ; 8.0 ; ; 8 # Nd       BALINESE DIGIT EIGHT\n1BB8          ; 8.0 ; ; 8 # Nd       SUNDANESE DIGIT EIGHT\n1C48          ; 8.0 ; ; 8 # Nd       LEPCHA DIGIT EIGHT\n1C58          ; 8.0 ; ; 8 # Nd       OL CHIKI DIGIT EIGHT\n2078          ; 8.0 ; ; 8 # No       SUPERSCRIPT EIGHT\n2088          ; 8.0 ; ; 8 # No       SUBSCRIPT EIGHT\n2167          ; 8.0 ; ; 8 # Nl       ROMAN NUMERAL EIGHT\n2177          ; 8.0 ; ; 8 # Nl       SMALL ROMAN NUMERAL EIGHT\n2467          ; 8.0 ; ; 8 # No       CIRCLED DIGIT EIGHT\n247B          ; 8.0 ; ; 8 # No       PARENTHESIZED DIGIT EIGHT\n248F          ; 8.0 ; ; 8 # No       DIGIT EIGHT FULL STOP\n24FC          ; 8.0 ; ; 8 # No       DOUBLE CIRCLED DIGIT EIGHT\n277D          ; 8.0 ; ; 8 # No       DINGBAT NEGATIVE CIRCLED DIGIT EIGHT\n2787          ; 8.0 ; ; 8 # No       DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT\n2791          ; 8.0 ; ; 8 # No       DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT\n3028          ; 8.0 ; ; 8 # Nl       HANGZHOU NUMERAL EIGHT\n3227          ; 8.0 ; ; 8 # No       PARENTHESIZED IDEOGRAPH EIGHT\n3287          ; 8.0 ; ; 8 # No       CIRCLED IDEOGRAPH EIGHT\n516B          ; 8.0 ; ; 8 # Lo       CJK UNIFIED IDEOGRAPH-516B\n634C          ; 8.0 ; ; 8 # Lo       CJK UNIFIED IDEOGRAPH-634C\nA628          ; 8.0 ; ; 8 # Nd       VAI DIGIT EIGHT\nA6ED          ; 8.0 ; ; 8 # Nl       BAMUM LETTER FAAMAE\nA8D8          ; 8.0 ; ; 8 # Nd       SAURASHTRA DIGIT EIGHT\nA908          ; 8.0 ; ; 8 # Nd       KAYAH LI DIGIT EIGHT\nA9D8          ; 8.0 ; ; 8 # Nd       JAVANESE DIGIT EIGHT\nA9F8          ; 8.0 ; ; 8 # Nd       MYANMAR TAI LAING DIGIT EIGHT\nAA58          ; 8.0 ; ; 8 # Nd       CHAM DIGIT EIGHT\nABF8          ; 8.0 ; ; 8 # Nd       MEETEI MAYEK DIGIT EIGHT\nFF18          ; 8.0 ; ; 8 # Nd       FULLWIDTH DIGIT EIGHT\n1010E         ; 8.0 ; ; 8 # No       AEGEAN NUMBER EIGHT\n102E8         ; 8.0 ; ; 8 # No       COPTIC EPACT DIGIT EIGHT\n104A8         ; 8.0 ; ; 8 # Nd       OSMANYA DIGIT EIGHT\n109C7         ; 8.0 ; ; 8 # No       MEROITIC CURSIVE NUMBER EIGHT\n10D38         ; 8.0 ; ; 8 # Nd       HANIFI ROHINGYA DIGIT EIGHT\n10D48         ; 8.0 ; ; 8 # Nd       GARAY DIGIT EIGHT\n10E67         ; 8.0 ; ; 8 # No       RUMI DIGIT EIGHT\n11059         ; 8.0 ; ; 8 # No       BRAHMI NUMBER EIGHT\n1106E         ; 8.0 ; ; 8 # Nd       BRAHMI DIGIT EIGHT\n110F8         ; 8.0 ; ; 8 # Nd       SORA SOMPENG DIGIT EIGHT\n1113E         ; 8.0 ; ; 8 # Nd       CHAKMA DIGIT EIGHT\n111D8         ; 8.0 ; ; 8 # Nd       SHARADA DIGIT EIGHT\n111E8         ; 8.0 ; ; 8 # No       SINHALA ARCHAIC DIGIT EIGHT\n112F8         ; 8.0 ; ; 8 # Nd       KHUDAWADI DIGIT EIGHT\n11458         ; 8.0 ; ; 8 # Nd       NEWA DIGIT EIGHT\n114D8         ; 8.0 ; ; 8 # Nd       TIRHUTA DIGIT EIGHT\n11658         ; 8.0 ; ; 8 # Nd       MODI DIGIT EIGHT\n116C8         ; 8.0 ; ; 8 # Nd       TAKRI DIGIT EIGHT\n116D8         ; 8.0 ; ; 8 # Nd       MYANMAR PAO DIGIT EIGHT\n116E2         ; 8.0 ; ; 8 # Nd       MYANMAR EASTERN PWO KAREN DIGIT EIGHT\n11738         ; 8.0 ; ; 8 # Nd       AHOM DIGIT EIGHT\n118E8         ; 8.0 ; ; 8 # Nd       WARANG CITI DIGIT EIGHT\n11958         ; 8.0 ; ; 8 # Nd       DIVES AKURU DIGIT EIGHT\n11BF8         ; 8.0 ; ; 8 # Nd       SUNUWAR DIGIT EIGHT\n11C58         ; 8.0 ; ; 8 # Nd       BHAIKSUKI DIGIT EIGHT\n11C61         ; 8.0 ; ; 8 # No       BHAIKSUKI NUMBER EIGHT\n11D58         ; 8.0 ; ; 8 # Nd       MASARAM GONDI DIGIT EIGHT\n11DA8         ; 8.0 ; ; 8 # Nd       GUNJALA GONDI DIGIT EIGHT\n11F58         ; 8.0 ; ; 8 # Nd       KAWI DIGIT EIGHT\n12406         ; 8.0 ; ; 8 # Nl       CUNEIFORM NUMERIC SIGN EIGHT ASH\n1240D         ; 8.0 ; ; 8 # Nl       CUNEIFORM NUMERIC SIGN EIGHT DISH\n12413         ; 8.0 ; ; 8 # Nl       CUNEIFORM NUMERIC SIGN EIGHT U\n1241C         ; 8.0 ; ; 8 # Nl       CUNEIFORM NUMERIC SIGN EIGHT GESH2\n1242A         ; 8.0 ; ; 8 # Nl       CUNEIFORM NUMERIC SIGN EIGHT SHAR2\n12444..12445  ; 8.0 ; ; 8 # Nl   [2] CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU..CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3\n1246D         ; 8.0 ; ; 8 # Nl       CUNEIFORM NUMERIC SIGN EIGHT U VARIANT FORM\n16138         ; 8.0 ; ; 8 # Nd       GURUNG KHEMA DIGIT EIGHT\n16A68         ; 8.0 ; ; 8 # Nd       MRO DIGIT EIGHT\n16AC8         ; 8.0 ; ; 8 # Nd       TANGSA DIGIT EIGHT\n16B58         ; 8.0 ; ; 8 # Nd       PAHAWH HMONG DIGIT EIGHT\n16D78         ; 8.0 ; ; 8 # Nd       KIRAT RAI DIGIT EIGHT\n16E88         ; 8.0 ; ; 8 # No       MEDEFAIDRIN DIGIT EIGHT\n1CCF8         ; 8.0 ; ; 8 # Nd       OUTLINED DIGIT EIGHT\n1D2C8         ; 8.0 ; ; 8 # No       KAKTOVIK NUMERAL EIGHT\n1D2E8         ; 8.0 ; ; 8 # No       MAYAN NUMERAL EIGHT\n1D367         ; 8.0 ; ; 8 # No       COUNTING ROD UNIT DIGIT EIGHT\n1D7D6         ; 8.0 ; ; 8 # Nd       MATHEMATICAL BOLD DIGIT EIGHT\n1D7E0         ; 8.0 ; ; 8 # Nd       MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT\n1D7EA         ; 8.0 ; ; 8 # Nd       MATHEMATICAL SANS-SERIF DIGIT EIGHT\n1D7F4         ; 8.0 ; ; 8 # Nd       MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT\n1D7FE         ; 8.0 ; ; 8 # Nd       MATHEMATICAL MONOSPACE DIGIT EIGHT\n1E148         ; 8.0 ; ; 8 # Nd       NYIAKENG PUACHUE HMONG DIGIT EIGHT\n1E2F8         ; 8.0 ; ; 8 # Nd       WANCHO DIGIT EIGHT\n1E4F8         ; 8.0 ; ; 8 # Nd       NAG MUNDARI DIGIT EIGHT\n1E5F9         ; 8.0 ; ; 8 # Nd       OL ONAL DIGIT EIGHT\n1E8CE         ; 8.0 ; ; 8 # No       MENDE KIKAKUI DIGIT EIGHT\n1E958         ; 8.0 ; ; 8 # Nd       ADLAM DIGIT EIGHT\n1EC78         ; 8.0 ; ; 8 # No       INDIC SIYAQ NUMBER EIGHT\n1ECAA         ; 8.0 ; ; 8 # No       INDIC SIYAQ NUMBER PREFIXED EIGHT\n1ED08         ; 8.0 ; ; 8 # No       OTTOMAN SIYAQ NUMBER EIGHT\n1ED35         ; 8.0 ; ; 8 # No       OTTOMAN SIYAQ ALTERNATE NUMBER EIGHT\n1F109         ; 8.0 ; ; 8 # No       DIGIT EIGHT COMMA\n1FBF8         ; 8.0 ; ; 8 # Nd       SEGMENTED DIGIT EIGHT\n```\n\n----------------------------------------\n\nTITLE: Conditional Swift Syntax Library Linking\nDESCRIPTION: Conditionally links the swiftIDEUtilsBridging library when SWIFT_BUILD_SWIFT_SYNTAX is enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Refactoring/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_SWIFT_SYNTAX)\n  target_link_libraries(swiftRefactoring PRIVATE\n    swiftIDEUtilsBridging\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unicode Grapheme Cluster Boundary Test Data\nDESCRIPTION: Test data for Unicode grapheme cluster boundary analysis showing how characters combine or separate. This data demonstrates break patterns (÷) and non-break patterns (×) between various Unicode character types including Regional Indicators, Hangul characters, combining marks, and control characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakTest.txt#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n÷ 1F1E6 × 0308 ÷ 1160 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 1F1E6 ÷ 11A8 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 1F1E6 × 0308 ÷ 11A8 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 1F1E6 ÷ AC00 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 1F1E6 × 0308 ÷ AC00 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 1F1E6 ÷ AC01 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ 1F1E6 × 0308 ÷ AC01 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ 1F1E6 × 1F1E6 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [8.1] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3]\n÷ 1F1E6 × 0308 ÷ 1F1E6 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3]\n÷ 1F1E6 ÷ 0378 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n÷ 1F1E6 × 0308 ÷ 0378 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n÷ 1F1E6 ÷ D800 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]\n÷ 1F1E6 × 0308 ÷ D800 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]\n÷ 0378 ÷ 0020 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ 0378 × 0308 ÷ 0020 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ 0378 ÷ 000D ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 0378 × 0308 ÷ 000D ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 0378 ÷ 000A ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 0378 × 0308 ÷ 000A ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 0378 ÷ 0001 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]\n÷ 0378 × 0308 ÷ 0001 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]\n÷ 0378 × 0300 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]\n÷ 0378 × 0308 × 0300 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]\n÷ 0378 × 0903 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]\n÷ 0378 × 0308 × 0903 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]\n÷ 0378 ÷ 1100 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ 0378 × 0308 ÷ 1100 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ 0378 ÷ 1160 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 0378 × 0308 ÷ 1160 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ 0378 ÷ 11A8 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 0378 × 0308 ÷ 11A8 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ 0378 ÷ AC00 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 0378 × 0308 ÷ AC00 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ 0378 ÷ AC01 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ 0378 × 0308 ÷ AC01 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ 0378 ÷ 1F1E6 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3]\n÷ 0378 × 0308 ÷ 1F1E6 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3]\n÷ 0378 ÷ 0378 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n÷ 0378 × 0308 ÷ 0378 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n÷ 0378 ÷ D800 ÷\t#  ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]\n÷ 0378 × 0308 ÷ D800 ÷\t#  ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]\n÷ D800 ÷ 0020 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] SPACE (Other) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 0020 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]\n÷ D800 ÷ 000D ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 000D ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ D800 ÷ 000A ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 000A ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ D800 ÷ 0001 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <START OF HEADING> (Control) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 0001 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]\n÷ D800 ÷ 0300 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]\n÷ D800 ÷ 0308 × 0300 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]\n÷ D800 ÷ 0903 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]\n÷ D800 ÷ 0308 × 0903 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]\n÷ D800 ÷ 1100 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 1100 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]\n÷ D800 ÷ 1160 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 1160 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]\n÷ D800 ÷ 11A8 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 11A8 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]\n÷ D800 ÷ AC00 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ AC00 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]\n÷ D800 ÷ AC01 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ AC01 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]\n÷ D800 ÷ 1F1E6 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 1F1E6 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [0.3]\n÷ D800 ÷ 0378 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <reserved-0378> (Other) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ 0378 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]\n÷ D800 ÷ D800 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] <surrogate-D800> (Control) ÷ [0.3]\n÷ D800 ÷ 0308 ÷ D800 ÷\t#  ÷ [0.2] <surrogate-D800> (Control) ÷ [4.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]\n÷ 0061 ÷ 1F1E6 ÷ 0062 ÷\t#  ÷ [0.2] LATIN SMALL LETTER A (Other) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (Regional_Indicator) ÷ [999.0] LATIN SMALL LETTER B (Other) ÷ [0.3]\n÷ 1F1F7 × 1F1FA ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER R (Regional_Indicator) × [8.1] REGIONAL INDICATOR SYMBOL LETTER U (Regional_Indicator) ÷ [0.3]\n# NOTE: disabled because Unicode 9.0. TODO: splat in proper file here. Original: ÷ 1F1F7 × 1F1FA × 1F1F8 ÷\t#  ÷ [0.2] REGIONAL INDICATOR SYMBOL LETTER R (Regional_Indicator) × [8.1] REGIONAL INDICATOR SYMBOL LETTER U (Regional_Indicator) × [8.1] REGIONAL INDICATOR SYMBOL LETTER S (Regional_Indicator) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Functions with Context Mangling in Swift\nDESCRIPTION: Demonstrates different scenarios of generic function definitions with varying context mangling and generic signature rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\n// 'g1' uses 'entity' context mangling with and has no mangled signatures.\nfunc g1() where A: Copyable, B: Copyable {}\n\n// 'g2' uses 'entity' context mangling. The requirement `B: ~Copyable` is\n//mangled into the generic signature for 'g2'.\nfunc g2() where A: Copyable {}\n\n// 'g3' uses extension mangling with generic signature 'A: ~Copyable'.\n// The mangled generic signature of 'g3' is empty.\nfunc g3() where B: Copyable {}\n\n// 'g4' uses extension mangling with generic signature 'A: ~Copyable'.\n// The mangled generic signature of 'g4' contains 'B: ~Copyable'.\nfunc g4() {}\n```\n\n----------------------------------------\n\nTITLE: Hangul Syllable Unicode Range Definitions - Group B\nDESCRIPTION: Unicode ranges for Hangul syllables starting with B consonant, including variations like BAG, BAEG, BYAG, etc. Each range defines 27 consecutive code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\nBC15..BC2F    ; LVT # Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH\nBC31..BC4B    ; LVT # Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH\nBC4D..BC67    ; LVT # Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH\n```\n\n----------------------------------------\n\nTITLE: Extending Central Namespace Enum in Imported Swift Module (CppButton)\nDESCRIPTION: Shows how the Swift import of the 'CppButton' module would work with the synthetic module approach. It imports 'CppNamespaces' and uses a Swift extension to add the 'Button' struct to the centrally defined 'widgets' enum.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\n// C++ module `CppButton` imported to Swift.\n\nimport CppNamespaces\n\nextension widgets {\n  struct Button {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Other_Punctuation (Po) Characters\nDESCRIPTION: This snippet lists Unicode code points classified as Other_Punctuation (Po). It includes various punctuation marks from different scripts and writing systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_26\n\nLANGUAGE: Unicode\nCODE:\n```\n111DB         ; Po #       SHARADA SIGN SIDDHAM\n111DD..111DF  ; Po #   [3] SHARADA CONTINUATION SIGN..SHARADA SECTION MARK-2\n11238..1123D  ; Po #   [6] KHOJKI DANDA..KHOJKI ABBREVIATION SIGN\n112A9         ; Po #       MULTANI SECTION MARK\n113D4..113D5  ; Po #   [2] TULU-TIGALARI DANDA..TULU-TIGALARI DOUBLE DANDA\n113D7..113D8  ; Po #   [2] TULU-TIGALARI SIGN OM PUSHPIKA..TULU-TIGALARI SIGN SHRII PUSHPIKA\n1144B..1144F  ; Po #   [5] NEWA DANDA..NEWA ABBREVIATION SIGN\n1145A..1145B  ; Po #   [2] NEWA DOUBLE COMMA..NEWA PLACEHOLDER MARK\n1145D         ; Po #       NEWA INSERTION SIGN\n114C6         ; Po #       TIRHUTA ABBREVIATION SIGN\n115C1..115D7  ; Po #  [23] SIDDHAM SIGN SIDDHAM..SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES\n11641..11643  ; Po #   [3] MODI DANDA..MODI ABBREVIATION SIGN\n11660..1166C  ; Po #  [13] MONGOLIAN BIRGA WITH ORNAMENT..MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT\n116B9         ; Po #       TAKRI ABBREVIATION SIGN\n1173C..1173E  ; Po #   [3] AHOM SIGN SMALL SECTION..AHOM SIGN RULAI\n1183B         ; Po #       DOGRA ABBREVIATION SIGN\n11944..11946  ; Po #   [3] DIVES AKURU DOUBLE DANDA..DIVES AKURU END OF TEXT MARK\n119E2         ; Po #       NANDINAGARI SIGN SIDDHAM\n11A3F..11A46  ; Po #   [8] ZANABAZAR SQUARE INITIAL HEAD MARK..ZANABAZAR SQUARE CLOSING DOUBLE-LINED HEAD MARK\n11A9A..11A9C  ; Po #   [3] SOYOMBO MARK TSHEG..SOYOMBO MARK DOUBLE SHAD\n11A9E..11AA2  ; Po #   [5] SOYOMBO HEAD MARK WITH MOON AND SUN AND TRIPLE FLAME..SOYOMBO TERMINAL MARK-2\n11B00..11B09  ; Po #  [10] DEVANAGARI HEAD MARK..DEVANAGARI SIGN MINDU\n11BE1         ; Po #       SUNUWAR SIGN PVO\n11C41..11C45  ; Po #   [5] BHAIKSUKI DANDA..BHAIKSUKI GAP FILLER-2\n11C70..11C71  ; Po #   [2] MARCHEN HEAD MARK..MARCHEN MARK SHAD\n11EF7..11EF8  ; Po #   [2] MAKASAR PASSIMBANG..MAKASAR END OF SECTION\n11F43..11F4F  ; Po #  [13] KAWI DANDA..KAWI PUNCTUATION CLOSING SPIRAL\n11FFF         ; Po #       TAMIL PUNCTUATION END OF TEXT\n12470..12474  ; Po #   [5] CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER..CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON\n12FF1..12FF2  ; Po #   [2] CYPRO-MINOAN SIGN CM301..CYPRO-MINOAN SIGN CM302\n16A6E..16A6F  ; Po #   [2] MRO DANDA..MRO DOUBLE DANDA\n16AF5         ; Po #       BASSA VAH FULL STOP\n16B37..16B3B  ; Po #   [5] PAHAWH HMONG SIGN VOS THOM..PAHAWH HMONG SIGN VOS FEEM\n16B44         ; Po #       PAHAWH HMONG SIGN XAUS\n16D6D..16D6F  ; Po #   [3] KIRAT RAI SIGN YUPI..KIRAT RAI DOUBLE DANDA\n16E97..16E9A  ; Po #   [4] MEDEFAIDRIN COMMA..MEDEFAIDRIN EXCLAMATION OH\n16FE2         ; Po #       OLD CHINESE HOOK MARK\n1BC9F         ; Po #       DUPLOYAN PUNCTUATION CHINOOK FULL STOP\n1DA87..1DA8B  ; Po #   [5] SIGNWRITING COMMA..SIGNWRITING PARENTHESIS\n1E5FF         ; Po #       OL ONAL ABBREVIATION SIGN\n1E95E..1E95F  ; Po #   [2] ADLAM INITIAL EXCLAMATION MARK..ADLAM INITIAL QUESTION MARK\n```\n\n----------------------------------------\n\nTITLE: Disallowed Non-final Generic Method Example in Swift\nDESCRIPTION: Shows an example of a disallowed non-final generic method on a class where the generic type isn't from the class context, which prevents monomorphization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass MyClass {\n  func write<T>(t: T) { /* implementation */ }\n}\n\nlet instance: MyClass = ... // could be MyClass, or a subclass\ninstance.write(t: 42) // ❌\n```\n\n----------------------------------------\n\nTITLE: Alternative Dynamic Type Approach in Swift\nDESCRIPTION: Shows an alternative approach using dynamic type checking instead of generic constraints.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/protocol-type-non-conformance.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc declareAnimalSpeciesDynamically(_ animal: Animal) {\n    animal.makeNoise()\n    print(\"My species is known as \\(type(of: animal).species)\")\n}\n\ndeclareAnimalSpeciesDynamically(animal)\n// Prints:\n// \"Meow\"\n// \"My species is known as Felis catus\"\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Protocol Witness Tables Mangling\nDESCRIPTION: Swift symbol mangling examples for protocol witness tables, showing how Swift encodes conformance information for generic types. These examples demonstrate mangling patterns for protocol witness methods with various generic parameter requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n_TTWurGV23interface_type_mangling18GenericTypeContextx_S_18GenericWitnessTestS_FS1_23closureInGenericContextuRxS1_rfqd__T_ ---> protocol witness for interface_type_mangling.GenericWitnessTest.closureInGenericContext<A where A: interface_type_mangling.GenericWitnessTest>(A1) -> () in conformance <A> interface_type_mangling.GenericTypeContext<A> : interface_type_mangling.GenericWitnessTest in interface_type_mangling\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TTWurGV23interface_type_mangling18GenericTypeContextx_S_18GenericWitnessTestS_FS1_g31closureInGenericPropertyContextwx3Tee ---> protocol witness for interface_type_mangling.GenericWitnessTest.closureInGenericPropertyContext.getter : A.Tee in conformance <A> interface_type_mangling.GenericTypeContext<A> : interface_type_mangling.GenericWitnessTest in interface_type_mangling\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TTWurGV23interface_type_mangling18GenericTypeContextx_S_18GenericWitnessTestS_FS1_16twoParamsAtDepthu0_RxS1_rfTqd__1yqd_0__T_ ---> protocol witness for interface_type_mangling.GenericWitnessTest.twoParamsAtDepth<A, B where A: interface_type_mangling.GenericWitnessTest>(A1, y: B1) -> () in conformance <A> interface_type_mangling.GenericTypeContext<A> : interface_type_mangling.GenericWitnessTest in interface_type_mangling\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Code Point to Numeric Value 8.5\nDESCRIPTION: This snippet lists a single Unicode code point that represents the numeric value 8.5 in Tibetan script.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_13\n\nLANGUAGE: Unicode\nCODE:\n```\n0F32          ; 8.5 ; ; 17/2 # No       TIBETAN DIGIT HALF NINE\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode ID_Continue Character Ranges for Identifier Syntax\nDESCRIPTION: This is a Unicode property definition file that specifies which code points have the ID_Continue property, used to determine valid characters that can appear in identifiers after the first character. These definitions are often used by programming languages like Swift to determine valid identifier character rules.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_28\n\nLANGUAGE: unicode\nCODE:\n```\n1056..1057    ; ID_Continue\n1058..1059    ; ID_Continue\n105A..105D    ; ID_Continue\n105E..1060    ; ID_Continue\n1061          ; ID_Continue\n1062..1064    ; ID_Continue\n1065..1066    ; ID_Continue\n1067..106D    ; ID_Continue\n106E..1070    ; ID_Continue\n1071..1074    ; ID_Continue\n1075..1081    ; ID_Continue\n1082          ; ID_Continue\n1083..1084    ; ID_Continue\n1085..1086    ; ID_Continue\n1087..108C    ; ID_Continue\n108D          ; ID_Continue\n108E          ; ID_Continue\n108F          ; ID_Continue\n1090..1099    ; ID_Continue\n109A..109C    ; ID_Continue\n109D          ; ID_Continue\n10A0..10C5    ; ID_Continue\n10C7          ; ID_Continue\n10CD          ; ID_Continue\n10D0..10FA    ; ID_Continue\n10FC          ; ID_Continue\n10FD..10FF    ; ID_Continue\n1100..1248    ; ID_Continue\n124A..124D    ; ID_Continue\n1250..1256    ; ID_Continue\n1258          ; ID_Continue\n125A..125D    ; ID_Continue\n1260..1288    ; ID_Continue\n128A..128D    ; ID_Continue\n1290..12B0    ; ID_Continue\n12B2..12B5    ; ID_Continue\n12B8..12BE    ; ID_Continue\n12C0          ; ID_Continue\n12C2..12C5    ; ID_Continue\n12C8..12D6    ; ID_Continue\n12D8..1310    ; ID_Continue\n1312..1315    ; ID_Continue\n1318..135A    ; ID_Continue\n135D..135F    ; ID_Continue\n1369..1371    ; ID_Continue\n1380..138F    ; ID_Continue\n13A0..13F5    ; ID_Continue\n13F8..13FD    ; ID_Continue\n1401..166C    ; ID_Continue\n166F..167F    ; ID_Continue\n1681..169A    ; ID_Continue\n16A0..16EA    ; ID_Continue\n16EE..16F0    ; ID_Continue\n16F1..16F8    ; ID_Continue\n1700..1711    ; ID_Continue\n1712..1714    ; ID_Continue\n1715          ; ID_Continue\n171F..1731    ; ID_Continue\n1732..1733    ; ID_Continue\n1734          ; ID_Continue\n1740..1751    ; ID_Continue\n1752..1753    ; ID_Continue\n1760..176C    ; ID_Continue\n176E..1770    ; ID_Continue\n1772..1773    ; ID_Continue\n1780..17B3    ; ID_Continue\n17B4..17B5    ; ID_Continue\n17B6          ; ID_Continue\n17B7..17BD    ; ID_Continue\n17BE..17C5    ; ID_Continue\n17C6          ; ID_Continue\n17C7..17C8    ; ID_Continue\n17C9..17D3    ; ID_Continue\n17D7          ; ID_Continue\n17DC          ; ID_Continue\n17DD          ; ID_Continue\n17E0..17E9    ; ID_Continue\n180B..180D    ; ID_Continue\n180F          ; ID_Continue\n1810..1819    ; ID_Continue\n1820..1842    ; ID_Continue\n1843          ; ID_Continue\n1844..1878    ; ID_Continue\n1880..1884    ; ID_Continue\n1885..1886    ; ID_Continue\n1887..18A8    ; ID_Continue\n18A9          ; ID_Continue\n18AA          ; ID_Continue\n18B0..18F5    ; ID_Continue\n1900..191E    ; ID_Continue\n1920..1922    ; ID_Continue\n1923..1926    ; ID_Continue\n1927..1928    ; ID_Continue\n1929..192B    ; ID_Continue\n1930..1931    ; ID_Continue\n1932          ; ID_Continue\n1933..1938    ; ID_Continue\n1939..193B    ; ID_Continue\n1946..194F    ; ID_Continue\n1950..196D    ; ID_Continue\n1970..1974    ; ID_Continue\n1980..19AB    ; ID_Continue\n19B0..19C9    ; ID_Continue\n19D0..19D9    ; ID_Continue\n19DA          ; ID_Continue\n1A00..1A16    ; ID_Continue\n1A17..1A18    ; ID_Continue\n1A19..1A1A    ; ID_Continue\n1A1B          ; ID_Continue\n1A20..1A54    ; ID_Continue\n1A55          ; ID_Continue\n1A56          ; ID_Continue\n1A57          ; ID_Continue\n1A58..1A5E    ; ID_Continue\n1A60          ; ID_Continue\n1A61          ; ID_Continue\n1A62          ; ID_Continue\n1A63..1A64    ; ID_Continue\n1A65..1A6C    ; ID_Continue\n1A6D..1A72    ; ID_Continue\n1A73..1A7C    ; ID_Continue\n1A7F          ; ID_Continue\n1A80..1A89    ; ID_Continue\n1A90..1A99    ; ID_Continue\n1AA7          ; ID_Continue\n1AB0..1ABD    ; ID_Continue\n1ABF..1ACE    ; ID_Continue\n1B00..1B03    ; ID_Continue\n1B04          ; ID_Continue\n1B05..1B33    ; ID_Continue\n1B34          ; ID_Continue\n1B35          ; ID_Continue\n1B36..1B3A    ; ID_Continue\n1B3B          ; ID_Continue\n1B3C          ; ID_Continue\n1B3D..1B41    ; ID_Continue\n1B42          ; ID_Continue\n1B43..1B44    ; ID_Continue\n1B45..1B4C    ; ID_Continue\n1B50..1B59    ; ID_Continue\n1B6B..1B73    ; ID_Continue\n1B80..1B81    ; ID_Continue\n1B82          ; ID_Continue\n1B83..1BA0    ; ID_Continue\n1BA1          ; ID_Continue\n1BA2..1BA5    ; ID_Continue\n1BA6..1BA7    ; ID_Continue\n1BA8..1BA9    ; ID_Continue\n1BAA          ; ID_Continue\n1BAB..1BAD    ; ID_Continue\n1BAE..1BAF    ; ID_Continue\n1BB0..1BB9    ; ID_Continue\n1BBA..1BE5    ; ID_Continue\n1BE6          ; ID_Continue\n1BE7          ; ID_Continue\n1BE8..1BE9    ; ID_Continue\n1BEA..1BEC    ; ID_Continue\n1BED          ; ID_Continue\n1BEE          ; ID_Continue\n1BEF..1BF1    ; ID_Continue\n1BF2..1BF3    ; ID_Continue\n1C00..1C23    ; ID_Continue\n1C24..1C2B    ; ID_Continue\n1C2C..1C33    ; ID_Continue\n1C34..1C35    ; ID_Continue\n1C36..1C37    ; ID_Continue\n1C40..1C49    ; ID_Continue\n1C4D..1C4F    ; ID_Continue\n1C50..1C59    ; ID_Continue\n1C5A..1C77    ; ID_Continue\n1C78..1C7D    ; ID_Continue\n1C80..1C8A    ; ID_Continue\n1C90..1CBA    ; ID_Continue\n1CBD..1CBF    ; ID_Continue\n1CD0..1CD2    ; ID_Continue\n1CD4..1CE0    ; ID_Continue\n1CE1          ; ID_Continue\n1CE2..1CE8    ; ID_Continue\n1CE9..1CEC    ; ID_Continue\n1CED          ; ID_Continue\n1CEE..1CF3    ; ID_Continue\n1CF4          ; ID_Continue\n1CF5..1CF6    ; ID_Continue\n1CF7          ; ID_Continue\n1CF8..1CF9    ; ID_Continue\n1CFA          ; ID_Continue\n1D00..1D2B    ; ID_Continue\n1D2C..1D6A    ; ID_Continue\n1D6B..1D77    ; ID_Continue\n1D78          ; ID_Continue\n1D79..1D9A    ; ID_Continue\n1D9B..1DBF    ; ID_Continue\n1DC0..1DFF    ; ID_Continue\n1E00..1F15    ; ID_Continue\n1F18..1F1D    ; ID_Continue\n1F20..1F45    ; ID_Continue\n1F48..1F4D    ; ID_Continue\n1F50..1F57    ; ID_Continue\n1F59          ; ID_Continue\n1F5B          ; ID_Continue\n1F5D          ; ID_Continue\n1F5F..1F7D    ; ID_Continue\n1F80..1FB4    ; ID_Continue\n1FB6..1FBC    ; ID_Continue\n1FBE          ; ID_Continue\n1FC2..1FC4    ; ID_Continue\n1FC6..1FCC    ; ID_Continue\n1FD0..1FD3    ; ID_Continue\n1FD6..1FDB    ; ID_Continue\n1FE0..1FEC    ; ID_Continue\n1FF2..1FF4    ; ID_Continue\n1FF6..1FFC    ; ID_Continue\n200C..200D    ; ID_Continue\n203F..2040    ; ID_Continue\n2054          ; ID_Continue\n2071          ; ID_Continue\n207F          ; ID_Continue\n2090..209C    ; ID_Continue\n20D0..20DC    ; ID_Continue\n20E1          ; ID_Continue\n20E5..20F0    ; ID_Continue\n2102          ; ID_Continue\n2107          ; ID_Continue\n210A..2113    ; ID_Continue\n2115          ; ID_Continue\n2118          ; ID_Continue\n2119..211D    ; ID_Continue\n2124          ; ID_Continue\n2126          ; ID_Continue\n2128          ; ID_Continue\n212A..212D    ; ID_Continue\n212E          ; ID_Continue\n212F..2134    ; ID_Continue\n2135..2138    ; ID_Continue\n2139          ; ID_Continue\n213C..213F    ; ID_Continue\n2145..2149    ; ID_Continue\n214E          ; ID_Continue\n2160..2182    ; ID_Continue\n2183..2184    ; ID_Continue\n2185..2188    ; ID_Continue\n2C00..2C7B    ; ID_Continue\n2C7C..2C7D    ; ID_Continue\n2C7E..2CE4    ; ID_Continue\n2CEB..2CEE    ; ID_Continue\n2CEF..2CF1    ; ID_Continue\n2CF2..2CF3    ; ID_Continue\n2D00..2D25    ; ID_Continue\n2D27          ; ID_Continue\n2D2D          ; ID_Continue\n2D30..2D67    ; ID_Continue\n2D6F          ; ID_Continue\n2D7F          ; ID_Continue\n2D80..2D96    ; ID_Continue\n2DA0..2DA6    ; ID_Continue\n2DA8..2DAE    ; ID_Continue\n2DB0..2DB6    ; ID_Continue\n2DB8..2DBE    ; ID_Continue\n2DC0..2DC6    ; ID_Continue\n2DC8..2DCE    ; ID_Continue\n2DD0..2DD6    ; ID_Continue\n2DD8..2DDE    ; ID_Continue\n2DE0..2DFF    ; ID_Continue\n3005          ; ID_Continue\n3006          ; ID_Continue\n3007          ; ID_Continue\n3021..3029    ; ID_Continue\n302A..302D    ; ID_Continue\n302E..302F    ; ID_Continue\n3031..3035    ; ID_Continue\n3038..303A    ; ID_Continue\n303B          ; ID_Continue\n303C          ; ID_Continue\n3041..3096    ; ID_Continue\n3099..309A    ; ID_Continue\n309B..309C    ; ID_Continue\n309D..309E    ; ID_Continue\n309F          ; ID_Continue\n30A1..30FA    ; ID_Continue\n30FB          ; ID_Continue\n30FC..30FE    ; ID_Continue\n30FF          ; ID_Continue\n3105..312F    ; ID_Continue\n3131..318E    ; ID_Continue\n31A0..31BF    ; ID_Continue\n31F0..31FF    ; ID_Continue\n3400..4DBF    ; ID_Continue\n4E00..A014    ; ID_Continue\nA015          ; ID_Continue\nA016..A48C    ; ID_Continue\nA4D0..A4F7    ; ID_Continue\nA4F8..A4FD    ; ID_Continue\nA500..A60B    ; ID_Continue\nA60C          ; ID_Continue\nA610..A61F    ; ID_Continue\nA620..A629    ; ID_Continue\nA62A..A62B    ; ID_Continue\nA640..A66D    ; ID_Continue\nA66E          ; ID_Continue\nA66F          ; ID_Continue\nA674..A67D    ; ID_Continue\nA67F          ; ID_Continue\nA680..A69B    ; ID_Continue\nA69C..A69D    ; ID_Continue\nA69E..A69F    ; ID_Continue\nA6A0..A6E5    ; ID_Continue\nA6E6..A6EF    ; ID_Continue\nA6F0..A6F1    ; ID_Continue\nA717..A71F    ; ID_Continue\nA722..A76F    ; ID_Continue\nA770          ; ID_Continue\nA771..A787    ; ID_Continue\nA788          ; ID_Continue\nA78B..A78E    ; ID_Continue\nA78F          ; ID_Continue\nA790..A7CD    ; ID_Continue\nA7D0..A7D1    ; ID_Continue\nA7D3          ; ID_Continue\nA7D5..A7DC    ; ID_Continue\nA7F2..A7F4    ; ID_Continue\nA7F5..A7F6    ; ID_Continue\nA7F7          ; ID_Continue\nA7F8..A7F9    ; ID_Continue\nA7FA          ; ID_Continue\nA7FB..A801    ; ID_Continue\nA802          ; ID_Continue\nA803..A805    ; ID_Continue\nA806          ; ID_Continue\nA807..A80A    ; ID_Continue\nA80B          ; ID_Continue\nA80C..A822    ; ID_Continue\nA823..A824    ; ID_Continue\nA825..A826    ; ID_Continue\nA827          ; ID_Continue\nA82C          ; ID_Continue\nA840..A873    ; ID_Continue\nA880..A881    ; ID_Continue\nA882..A8B3    ; ID_Continue\nA8B4..A8C3    ; ID_Continue\nA8C4..A8C5    ; ID_Continue\nA8D0..A8D9    ; ID_Continue\nA8E0..A8F1    ; ID_Continue\nA8F2..A8F7    ; ID_Continue\nA8FB          ; ID_Continue\nA8FD..A8FE    ; ID_Continue\nA8FF          ; ID_Continue\nA900..A909    ; ID_Continue\nA90A..A925    ; ID_Continue\nA926..A92D    ; ID_Continue\nA930..A946    ; ID_Continue\nA947..A951    ; ID_Continue\nA952..A953    ; ID_Continue\nA960..A97C    ; ID_Continue\nA980..A982    ; ID_Continue\nA983          ; ID_Continue\nA984..A9B2    ; ID_Continue\nA9B3          ; ID_Continue\n```\n\n----------------------------------------\n\nTITLE: Defining Emoji_Modifier_Base Code Point Ranges in Unicode Data Format\nDESCRIPTION: A detailed listing of Unicode code points with the Emoji_Modifier_Base property, which indicates emoji that can be modified by Emoji_Modifier characters (such as skin tones). These are primarily human-form emoji.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_8\n\nLANGUAGE: unicode-data\nCODE:\n```\n# All omitted code points have Emoji_Modifier_Base=No\n\n261D          ; Emoji_Modifier_Base  # E0.6   [1] (☝️)       index pointing up\n26F9          ; Emoji_Modifier_Base  # E0.7   [1] (⛹️)       person bouncing ball\n270A..270C    ; Emoji_Modifier_Base  # E0.6   [3] (✊..✌️)    raised fist..victory hand\n270D          ; Emoji_Modifier_Base  # E0.7   [1] (✍️)       writing hand\n1F385         ; Emoji_Modifier_Base  # E0.6   [1] (🎅)       Santa Claus\n1F3C2..1F3C4  ; Emoji_Modifier_Base  # E0.6   [3] (🏂..🏄)    snowboarder..person surfing\n1F3C7         ; Emoji_Modifier_Base  # E1.0   [1] (🏇)       horse racing\n1F3CA         ; Emoji_Modifier_Base  # E0.6   [1] (🏊)       person swimming\n1F3CB..1F3CC  ; Emoji_Modifier_Base  # E0.7   [2] (🏋️..🏌️)    person lifting weights..person golfing\n1F442..1F443  ; Emoji_Modifier_Base  # E0.6   [2] (👂..👃)    ear..nose\n1F446..1F450  ; Emoji_Modifier_Base  # E0.6  [11] (👆..👐)    backhand index pointing up..open hands\n1F466..1F46B  ; Emoji_Modifier_Base  # E0.6   [6] (👦..👫)    boy..woman and man holding hands\n1F46C..1F46D  ; Emoji_Modifier_Base  # E1.0   [2] (👬..👭)    men holding hands..women holding hands\n1F46E..1F478  ; Emoji_Modifier_Base  # E0.6  [11] (👮..👸)    police officer..princess\n1F47C         ; Emoji_Modifier_Base  # E0.6   [1] (👼)       baby angel\n1F481..1F483  ; Emoji_Modifier_Base  # E0.6   [3] (💁..💃)    person tipping hand..woman dancing\n1F485..1F487  ; Emoji_Modifier_Base  # E0.6   [3] (💅..💇)    nail polish..person getting haircut\n1F48F         ; Emoji_Modifier_Base  # E0.6   [1] (💏)       kiss\n1F491         ; Emoji_Modifier_Base  # E0.6   [1] (💑)       couple with heart\n1F4AA         ; Emoji_Modifier_Base  # E0.6   [1] (💪)       flexed biceps\n1F574..1F575  ; Emoji_Modifier_Base  # E0.7   [2] (🕴️..🕵️)    person in suit levitating..detective\n1F57A         ; Emoji_Modifier_Base  # E3.0   [1] (🕺)       man dancing\n1F590         ; Emoji_Modifier_Base  # E0.7   [1] (🖐️)       hand with fingers splayed\n1F595..1F596  ; Emoji_Modifier_Base  # E1.0   [2] (🖕..🖖)    middle finger..vulcan salute\n1F645..1F647  ; Emoji_Modifier_Base  # E0.6   [3] (🙅..🙇)    person gesturing NO..person bowing\n1F64B..1F64F  ; Emoji_Modifier_Base  # E0.6   [5] (🙋..🙏)    person raising hand..folded hands\n1F6A3         ; Emoji_Modifier_Base  # E1.0   [1] (🚣)       person rowing boat\n1F6B4..1F6B5  ; Emoji_Modifier_Base  # E1.0   [2] (🚴..🚵)    person biking..person mountain biking\n1F6B6         ; Emoji_Modifier_Base  # E0.6   [1] (🚶)       person walking\n1F6C0         ; Emoji_Modifier_Base  # E0.6   [1] (🛀)       person taking bath\n1F6CC         ; Emoji_Modifier_Base  # E1.0   [1] (🛌)       person in bed\n1F90C         ; Emoji_Modifier_Base  # E13.0  [1] (🤌)       pinched fingers\n1F90F         ; Emoji_Modifier_Base  # E12.0  [1] (🤏)       pinching hand\n1F918         ; Emoji_Modifier_Base  # E1.0   [1] (🤘)       sign of the horns\n1F919..1F91E  ; Emoji_Modifier_Base  # E3.0   [6] (🤙..🤞)    call me hand..crossed fingers\n1F91F         ; Emoji_Modifier_Base  # E5.0   [1] (🤟)       love-you gesture\n1F926         ; Emoji_Modifier_Base  # E3.0   [1] (🤦)       person facepalming\n1F930         ; Emoji_Modifier_Base  # E3.0   [1] (🤰)       pregnant woman\n1F931..1F932  ; Emoji_Modifier_Base  # E5.0   [2] (🤱..🤲)    breast-feeding..palms up together\n1F933..1F939  ; Emoji_Modifier_Base  # E3.0   [7] (🤳..🤹)    selfie..person juggling\n1F93C..1F93E  ; Emoji_Modifier_Base  # E3.0   [3] (🤼..🤾)    people wrestling..person playing handball\n1F977         ; Emoji_Modifier_Base  # E13.0  [1] (🥷)       ninja\n1F9B5..1F9B6  ; Emoji_Modifier_Base  # E11.0  [2] (🦵..🦶)    leg..foot\n1F9B8..1F9B9  ; Emoji_Modifier_Base  # E11.0  [2] (🦸..🦹)    superhero..supervillain\n1F9BB         ; Emoji_Modifier_Base  # E12.0  [1] (🦻)       ear with hearing aid\n1F9CD..1F9CF  ; Emoji_Modifier_Base  # E12.0  [3] (🧍..🧏)    person standing..deaf person\n1F9D1..1F9DD  ; Emoji_Modifier_Base  # E5.0  [13] (🧑..🧝)    person..elf\n1FAC3..1FAC5  ; Emoji_Modifier_Base  # E14.0  [3] (🫃..🫅)    pregnant man..person with crown\n1FAF0..1FAF6  ; Emoji_Modifier_Base  # E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands\n1FAF7..1FAF8  ; Emoji_Modifier_Base  # E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand\n\n# Total elements: 134\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Break Rules Test Cases\nDESCRIPTION: Test cases showing Unicode word break rules between different character combinations including numbers, letters, punctuation marks and special characters. Each line tests a specific rule with character codes and expected break behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n÷ 002E × 0308 ÷ 0031 ÷ 002C ÷ \n÷ 002E ÷ 0031 ÷ 002E × 2060 ÷\n÷ 002E × 0308 ÷ 0031 ÷ 002E × 2060 ÷\n÷ 0030 ÷ 0001 ÷\n÷ 0030 × 0308 ÷ 0001 ÷\n```\n\n----------------------------------------\n\nTITLE: Using sourcekitd-repl for Module Documentation Requests\nDESCRIPTION: Interactive example showing how to retrieve documentation for the Foundation module using sourcekitd-repl, specifying the module name and SDK path for compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ sourcekitd-repl\nWelcome to SourceKit.  Type ':help' for assistance.\n(SourceKit) {\n    key.request: source.request.docinfo,\n    key.modulename: \"Foundation\",\n    key.compilerargs: [\"-sdk\", \"/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Old South Arabian Script\nDESCRIPTION: Defines the Unicode code point ranges for the Old South Arabian script, including letters, numbers, and a numeric indicator. This block contains 32 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_65\n\nLANGUAGE: Unicode\nCODE:\n```\n10A60..10A7C  ; Old_South_Arabian # Lo  [29] OLD SOUTH ARABIAN LETTER HE..OLD SOUTH ARABIAN LETTER THETH\n10A7D..10A7E  ; Old_South_Arabian # No   [2] OLD SOUTH ARABIAN NUMBER ONE..OLD SOUTH ARABIAN NUMBER FIFTY\n10A7F         ; Old_South_Arabian # Po       OLD SOUTH ARABIAN NUMERIC INDICATOR\n\n# Total code points: 32\n```\n\n----------------------------------------\n\nTITLE: Swift Function Template Import Example\nDESCRIPTION: Shows how a C++ function template is imported into Swift as a generic function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_55\n\nLANGUAGE: swift\nCODE:\n```\nfunc functionTemplate<T>(_ t: T)\n```\n\n----------------------------------------\n\nTITLE: Arabic Modifier Combining Mark Definitions\nDESCRIPTION: Defines various code points for Arabic modifier combining marks, including hamza, noon ghunna, seen, and other diacritical marks. Contains 14 total code points across multiple ranges.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_33\n\nLANGUAGE: unicode\nCODE:\n```\n0654..0655    ; Modifier_Combining_Mark # Mn   [2] ARABIC HAMZA ABOVE..ARABIC HAMZA BELOW\n0658          ; Modifier_Combining_Mark # Mn       ARABIC MARK NOON GHUNNA\n06DC          ; Modifier_Combining_Mark # Mn       ARABIC SMALL HIGH SEEN\n06E3          ; Modifier_Combining_Mark # Mn       ARABIC SMALL LOW SEEN\n06E7..06E8    ; Modifier_Combining_Mark # Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON\n08CA..08CB    ; Modifier_Combining_Mark # Mn   [2] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH YEH BARREE WITH TWO DOTS BELOW\n08CD..08CF    ; Modifier_Combining_Mark # Mn   [3] ARABIC SMALL HIGH ZAH..ARABIC LARGE ROUND DOT BELOW\n08D3          ; Modifier_Combining_Mark # Mn       ARABIC SMALL LOW WAW\n08F3          ; Modifier_Combining_Mark # Mn       ARABIC SMALL HIGH WAW\n```\n\n----------------------------------------\n\nTITLE: Post-Optimization Unrolled Loop in SIL Reflecting ARC Pair Elimination\nDESCRIPTION: This snippet shows the same unrolled loop after eliminating redundant retain/release pairs according to ARC optimization. It is used to demonstrate how the compiler can minimize unnecessary retains/releases across loop iterations by analyzing reference lifetimes. The code serves as an illustrative step between the original and the hoisted form. All operations continue on %x and follow standard SIL structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_4\n\nLANGUAGE: SIL\nCODE:\n```\nbb0:\\n  # Loop Iteration 0\\n  retain %x\\n  apply %f(%x)\\n  apply %f(%x)\\n\\n  # Loop Iteration 1\\n  apply %f(%x)\\n  apply %f(%x)\\n\\n  # Loop Iteration 2\\n  apply %f(%x)\\n  apply %f(%x)\\n  release %x\\n\\n  return ...\\n\n```\n\n----------------------------------------\n\nTITLE: Defining SIL Declaration Reference Syntax\nDESCRIPTION: This snippet defines the syntax for SIL declaration references. It includes the structure for sil-decl-ref, sil-decl-subref, sil-decl-subref-part, sil-decl-lang, and sil-decl-autodiff, which are used to reference Swift declarations in SIL.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_32\n\nLANGUAGE: sil\nCODE:\n```\nsil-decl-ref ::= '#' sil-identifier ('.' sil-identifier)* sil-decl-subref?\nsil-decl-subref ::= '!' sil-decl-subref-part ('.' sil-decl-lang)? ('.' sil-decl-autodiff)?\nsil-decl-subref ::= '!' sil-decl-lang\nsil-decl-subref ::= '!' sil-decl-autodiff\nsil-decl-subref-part ::= 'getter'\nsil-decl-subref-part ::= 'setter'\nsil-decl-subref-part ::= 'allocator'\nsil-decl-subref-part ::= 'initializer'\nsil-decl-subref-part ::= 'enumelt'\nsil-decl-subref-part ::= 'destroyer'\nsil-decl-subref-part ::= 'deallocator'\nsil-decl-subref-part ::= 'globalaccessor'\nsil-decl-subref-part ::= 'ivardestroyer'\nsil-decl-subref-part ::= 'ivarinitializer'\nsil-decl-subref-part ::= 'defaultarg' '.' [0-9]+\nsil-decl-lang ::= 'foreign'\nsil-decl-autodiff ::= sil-decl-autodiff-kind '.' sil-decl-autodiff-indices\nsil-decl-autodiff-kind ::= 'jvp'\nsil-decl-autodiff-kind ::= 'vjp'\nsil-decl-autodiff-indices ::= [SU]+\n```\n\n----------------------------------------\n\nTITLE: Defining Value Witness Kinds in Swift Mangling\nDESCRIPTION: This snippet defines the grammar for value witness kinds used in Swift mangling. Each line specifies a different kind of value witness function with its corresponding two-letter code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/OldMangling.rst#2025-04-23_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nvalue-witness-kind ::= 'Xx'           // destroyArray\nvalue-witness-kind ::= 'CP'           // initializeBufferWithCopyOfBuffer\nvalue-witness-kind ::= 'Cp'           // initializeBufferWithCopy\nvalue-witness-kind ::= 'cp'           // initializeWithCopy\nvalue-witness-kind ::= 'TK'           // initializeBufferWithTakeOfBuffer\nvalue-witness-kind ::= 'Tk'           // initializeBufferWithTake\nvalue-witness-kind ::= 'tk'           // initializeWithTake\nvalue-witness-kind ::= 'pr'           // projectBuffer\nvalue-witness-kind ::= 'xs'           // storeExtraInhabitant\nvalue-witness-kind ::= 'xg'           // getExtraInhabitantIndex\nvalue-witness-kind ::= 'Cc'           // initializeArrayWithCopy\nvalue-witness-kind ::= 'Tt'           // initializeArrayWithTakeFrontToBack\nvalue-witness-kind ::= 'tT'           // initializeArrayWithTakeBackToFront\nvalue-witness-kind ::= 'ug'           // getEnumTag\nvalue-witness-kind ::= 'up'           // destructiveProjectEnumData\nvalue-witness-kind ::= 'ui'           // destructiveInjectEnumTag\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Differentiation Library Target\nDESCRIPTION: Configures the Swift Differentiation library target with source files, dependencies, and build options for various platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Differentiation/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swift_Differentiation ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  Differentiable.swift\n  DifferentialOperators.swift\n  DifferentiationUtilities.swift\n  AnyDifferentiable.swift\n  ArrayDifferentiation.swift\n  OptionalDifferentiation.swift\n\n  \"${SWIFT_SOURCE_DIR}/stdlib/linker-support/magic-symbols-for-install-name.c\"\n\n  GYB_SOURCES\n    FloatingPointDifferentiation.swift.gyb\n    TgmathDerivatives.swift.gyb\n    ${swiftDifferentiationSIMDFiles}\n\n  SWIFT_MODULE_DEPENDS_OSX ${swiftDifferentiationDarwinDependencies}\n  SWIFT_MODULE_DEPENDS_IOS ${swiftDifferentiationDarwinDependencies}\n  SWIFT_MODULE_DEPENDS_TVOS ${swiftDifferentiationDarwinDependencies}\n  SWIFT_MODULE_DEPENDS_WATCHOS ${swiftDifferentiationDarwinDependencies}\n  SWIFT_MODULE_DEPENDS_XROS ${swiftDifferentiationDarwinDependencies}\n  SWIFT_MODULE_DEPENDS_ANDROID Android\n  SWIFT_MODULE_DEPENDS_LINUX Glibc\n  SWIFT_MODULE_DEPENDS_LINUX_STATIC Musl\n  SWIFT_MODULE_DEPENDS_FREEBSD Glibc\n  SWIFT_MODULE_DEPENDS_OPENBSD Glibc\n  SWIFT_MODULE_DEPENDS_CYGWIN Glibc\n  SWIFT_MODULE_DEPENDS_HAIKU Glibc\n  SWIFT_MODULE_DEPENDS_WASI WASILibc\n  SWIFT_MODULE_DEPENDS_WINDOWS CRT\n\n  C_COMPILE_FLAGS\n    -Dswift_Differentiation_EXPORTS\n  SWIFT_COMPILE_FLAGS\n    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    -parse-stdlib\n  LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n  INSTALL_IN_COMPONENT stdlib\n  SWIFT_MODULE_DEPENDS_MACCATALYST ${swiftDifferentiationDarwinDependencies}\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating First Parameter Labeling in Swift Functions - Swift\nDESCRIPTION: These snippets illustrate correct and incorrect usage of parameter labels for the first parameter in Swift functions, following standard Swift API conventions as opposed to Cocoa guidelines. The examples emphasize omitting argument labels for the initial parameter in most cases and avoiding suffixes that duplicate the role of argument labels. Each example uses Swift's set APIs and shows recommended patterns and discouraged alternatives for method signatures and calls.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StdlibAPIGuidelines.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nalligators.insert(fred)           // yes\nif alligators.contains(george) {  // yes\n  return\n}\n\nalligators.insert(element: fred)           // no\nif alligators.contains(element: george) {  // no\n  return\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Hangul LV Syllables\nDESCRIPTION: Maps hexadecimal code points to Hangul syllables HEU, HYI, and HI with LV (Leading/Vowel) category designations. Each entry specifies the code point, category, and corresponding Hangul syllable name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_13\n\nLANGUAGE: unicode\nCODE:\n```\nD750          ; LV # Lo       HANGUL SYLLABLE HEU\nD76C          ; LV # Lo       HANGUL SYLLABLE HYI\nD788          ; LV # Lo       HANGUL SYLLABLE HI\n```\n\n----------------------------------------\n\nTITLE: Adding Refactoring Kind Flag in C++\nDESCRIPTION: This code shows how to add a refactoring kind flag in swift-refactor.cpp to specify the action being tested. It adds an entry for String Localization refactoring.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nclEnumValN(RefactoringKind::LocalizeString, \"localize-string\", \"Perform String Localization refactoring\"),\n```\n\n----------------------------------------\n\nTITLE: Synthesized Conversion APIs for C++ Classes in Swift\nDESCRIPTION: Proposes synthesized conversion APIs for base and derived C++ classes when imported into Swift, to handle upcasts and downcasts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_51\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\npublic struct Derived {\n  @returnsInnerPointer\n  public var asBase: UnsafePointer<Base> { get }\n\n  public static func downcast(from basePointer: UnsafePointer<Base>) -> UnsafePointer<Derived>?\n}\n\npublic struct Base {\n  public static func upcast(from basePointer: UnsafePointer<Derived>) -> UnsafePointer<Base>\n}\n```\n\n----------------------------------------\n\nTITLE: Making OSSA Values Available Across Blocks in Swift\nDESCRIPTION: Provides OSSA utility methods `Value.makeAvailable()` and `Value.copy(at:)`. These are used to ensure a value is correctly available (potentially by inserting copies or phis) in a block where it is used, especially when the value is defined or copied in a different block. Depends on `BasicBlockRange`. Related to C++ `makeValueAvailable()` and `OwnershipLifetimeExtender`. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nValue.makeAvailable()\n```\n\nLANGUAGE: swift\nCODE:\n```\nValue.copy(at:)\n```\n\n----------------------------------------\n\nTITLE: Referencing Clang Node Owners in SIL Attributes (BNF)\nDESCRIPTION: Presents grammar for linking a SIL function to its original Clang AST node owner, using '[clang \"identifier\"]'. This connects generated Swift code with its imported C/C++ origin. String parameter is the identifier of the Clang node.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_16\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[clang \"' identifier '\"]'\n```\n\n----------------------------------------\n\nTITLE: Defining Other_Lowercase Unicode Characters\nDESCRIPTION: This snippet defines Unicode code point ranges for Other_Lowercase characters, including various modifiers and small letter forms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_17\n\nLANGUAGE: Unicode\nCODE:\n```\n00AA          ; Other_Lowercase # Lo       FEMININE ORDINAL INDICATOR\n00BA          ; Other_Lowercase # Lo       MASCULINE ORDINAL INDICATOR\n02B0..02B8    ; Other_Lowercase # Lm   [9] MODIFIER LETTER SMALL H..MODIFIER LETTER SMALL Y\n02C0..02C1    ; Other_Lowercase # Lm   [2] MODIFIER LETTER GLOTTAL STOP..MODIFIER LETTER REVERSED GLOTTAL STOP\n02E0..02E4    ; Other_Lowercase # Lm   [5] MODIFIER LETTER SMALL GAMMA..MODIFIER LETTER SMALL REVERSED GLOTTAL STOP\n0345          ; Other_Lowercase # Mn       COMBINING GREEK YPOGEGRAMMENI\n037A          ; Other_Lowercase # Lm       GREEK YPOGEGRAMMENI\n10FC          ; Other_Lowercase # Lm       MODIFIER LETTER GEORGIAN NAR\n1D2C..1D6A    ; Other_Lowercase # Lm  [63] MODIFIER LETTER CAPITAL A..GREEK SUBSCRIPT SMALL LETTER CHI\n1D78          ; Other_Lowercase # Lm       MODIFIER LETTER CYRILLIC EN\n1D9B..1DBF    ; Other_Lowercase # Lm  [37] MODIFIER LETTER SMALL TURNED ALPHA..MODIFIER LETTER SMALL THETA\n2071          ; Other_Lowercase # Lm       SUPERSCRIPT LATIN SMALL LETTER I\n207F          ; Other_Lowercase # Lm       SUPERSCRIPT LATIN SMALL LETTER N\n2090..209C    ; Other_Lowercase # Lm  [13] LATIN SUBSCRIPT SMALL LETTER A..LATIN SUBSCRIPT SMALL LETTER T\n2170..217F    ; Other_Lowercase # Nl  [16] SMALL ROMAN NUMERAL ONE..SMALL ROMAN NUMERAL ONE THOUSAND\n24D0..24E9    ; Other_Lowercase # So  [26] CIRCLED LATIN SMALL LETTER A..CIRCLED LATIN SMALL LETTER Z\n2C7C..2C7D    ; Other_Lowercase # Lm   [2] LATIN SUBSCRIPT SMALL LETTER J..MODIFIER LETTER CAPITAL V\nA69C..A69D    ; Other_Lowercase # Lm   [2] MODIFIER LETTER CYRILLIC HARD SIGN..MODIFIER LETTER CYRILLIC SOFT SIGN\nA770          ; Other_Lowercase # Lm       MODIFIER LETTER US\nA7F2..A7F4    ; Other_Lowercase # Lm   [3] MODIFIER LETTER CAPITAL C..MODIFIER LETTER CAPITAL Q\nA7F8..A7F9    ; Other_Lowercase # Lm   [2] MODIFIER LETTER CAPITAL H WITH STROKE..MODIFIER LETTER SMALL LIGATURE OE\nAB5C..AB5F    ; Other_Lowercase # Lm   [4] MODIFIER LETTER SMALL HENG..MODIFIER LETTER SMALL U WITH LEFT HOOK\nAB69          ; Other_Lowercase # Lm       MODIFIER LETTER SMALL TURNED W\n10780         ; Other_Lowercase # Lm       MODIFIER LETTER SMALL CAPITAL AA\n10783..10785  ; Other_Lowercase # Lm   [3] MODIFIER LETTER SMALL AE..MODIFIER LETTER SMALL B WITH HOOK\n10787..107B0  ; Other_Lowercase # Lm  [42] MODIFIER LETTER SMALL DZ DIGRAPH..MODIFIER LETTER SMALL V WITH RIGHT HOOK\n107B2..107BA  ; Other_Lowercase # Lm   [9] MODIFIER LETTER SMALL CAPITAL Y..MODIFIER LETTER SMALL S WITH CURL\n1E030..1E06D  ; Other_Lowercase # Lm  [62] MODIFIER LETTER CYRILLIC SMALL A..MODIFIER LETTER CYRILLIC SMALL STRAIGHT U WITH STROKE\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Bootstrapping Mode\nDESCRIPTION: Sets up the Swift compiler bootstrapping mode based on whether native Swift tools are available or cross-compilation is being used. This determines how the Swift modules will be built during compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_59\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_ENABLE_SWIFT_IN_SWIFT)\n  if(NOT SWIFT_NATIVE_SWIFT_TOOLS_PATH)\n    # This is the normal case. We are not cross-compiling.\n    set(SWIFT_NATIVE_SWIFT_TOOLS_PATH \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n    set(SWIFT_EXEC_FOR_SWIFT_MODULES \"${CMAKE_Swift_COMPILER}\")\n    if(NOT SWIFT_EXEC_FOR_SWIFT_MODULES)\n      message(WARNING \"BOOTSTRAPPING set to OFF because no Swift compiler is defined\")\n      set(BOOTSTRAPPING_MODE \"OFF\")\n    endif()\n  elseif(BOOTSTRAPPING_MODE MATCHES \"BOOTSTRAPPING.*\")\n    # If cross-compiling, we don't have to bootstrap. We can just use the previously\n    # built native swiftc to build the swift compiler modules.\n    message(STATUS \"Building swift modules with previously built tools instead of bootstrapping\")\n    set(SWIFT_EXEC_FOR_SWIFT_MODULES \"${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/swiftc\")\n    if(BOOTSTRAPPING_MODE STREQUAL \"BOOTSTRAPPING-WITH-HOSTLIBS\")\n      set(BOOTSTRAPPING_MODE \"CROSSCOMPILE-WITH-HOSTLIBS\")\n    elseif(BOOTSTRAPPING_MODE STREQUAL \"BOOTSTRAPPING\")\n      set(BOOTSTRAPPING_MODE \"CROSSCOMPILE\")\n    else()\n      set(BOOTSTRAPPING_MODE \"HOSTTOOLS\")\n    endif()\n  elseif(BOOTSTRAPPING_MODE STREQUAL \"HOSTTOOLS\" OR SWIFT_BUILD_SWIFT_SYNTAX)\n    # We are building using a pre-installed host toolchain but not bootstrapping\n    # the Swift modules. This happens when building using 'build-tooling-libs'\n    # where we haven't built a new Swift compiler. Use the Swift compiler from the\n    # pre-installed host toolchain to build the Swift modules.\n    set(SWIFT_EXEC_FOR_SWIFT_MODULES \"${CMAKE_Swift_COMPILER}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Swift Source Files for Backtrace Executable in CMake\nDESCRIPTION: Defines the list of Swift source files that compose the swift-backtrace executable. These files contain the core functionality of the backtrace tool.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/libexec/swift-backtrace/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(BACKTRACING_SOURCES\n  main.swift\n  AnsiColor.swift\n  JSON.swift\n  TargetMacOS.swift\n  TargetLinux.swift\n  Themes.swift\n  Utils.swift\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining SIL Differentiability Witness Syntax\nDESCRIPTION: Specifies the grammar for SIL differentiability witnesses, including the witness declaration, differentiability kinds, and witness body structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_44\n\nLANGUAGE: sil\nCODE:\n```\ndecl ::= sil-differentiability-witness\nsil-differentiability-witness ::=\n    'sil_differentiability_witness'\n    sil-linkage?\n    '[' differentiability-kind ']'\n    '[' 'parameters' sil-differentiability-witness-function-index-list ']'\n    '[' 'results' sil-differentiability-witness-function-index-list ']'\n    generic-parameter-clause?\n    sil-function-name ':' sil-type\n    sil-differentiability-witness-body?\n\ndifferentiability-kind ::= 'forward' | 'reverse' | 'normal' | 'linear'\n\nsil-differentiability-witness-body ::=\n    '{' sil-differentiability-witness-entry?\n        sil-differentiability-witness-entry? '}'\n\nsil-differentiability-witness-entry ::=\n    sil-differentiability-witness-entry-kind ':'\n    sil-entry-name ':' sil-type\n\nsil-differentiability-witness-entry-kind ::= 'jvp' | 'vjp'\n```\n\n----------------------------------------\n\nTITLE: Documenting Declaration Attribute Changes in Swift\nDESCRIPTION: This section lists changes to declaration attributes in Swift, including new APIs, modifications to existing attributes, and changes to access modifiers. It covers various types of declarations such as accessors, associated types, classes, and functions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n/* Decl Attribute changes */\ncake: Accessor GlobalLetChangedToVar.Modify() is a new API without @available attribute\ncake: Accessor GlobalLetChangedToVar.Set() is a new API without @available attribute\ncake: Accessor fixedLayoutStruct2.BecomeFixedBinaryOrder.Modify() is a new API without @available attribute\ncake: Accessor fixedLayoutStruct2.BecomeFixedBinaryOrder.Set() is a new API without @available attribute\ncake: AssociatedType RequirementChanges.addedTypeWithDefault is a new API without @available attribute\ncake: AssociatedType RequirementChanges.addedTypeWithoutDefault is a new API without @available attribute\ncake: Class C0 is a new API without @available attribute\ncake: Class C8 is a new API without @available attribute\ncake: Constructor AddingNewDesignatedInit.init(_:) is a new API without @available attribute\ncake: Constructor C1.init(_:) is a new API without @available attribute\ncake: Constructor ClassWithMissingDesignatedInits.init() is a new API without @available attribute\ncake: Constructor SubclassWithMissingDesignatedInits.init() is a new API without @available attribute\ncake: Enum IceKind is now without @frozen\ncake: EnumElement FrozenKind.AddedCase is a new API without @available attribute\ncake: EnumElement FutureKind.FineToAdd is a new API without @available attribute\ncake: Func C1.foo1() is now not static\ncake: Func FinalFuncContainer.NewFinalFunc() is now with final\ncake: Func FinalFuncContainer.NoLongerFinalFunc() is now without final\ncake: Func Float.floatHigher() is a new API without @available attribute\ncake: Func FutureKind.==(_:_:) is a new API without @available attribute\ncake: Func FutureKind.hash(into:) is a new API without @available attribute\ncake: Func HasMutatingMethodClone.foo() has self access kind changing from Mutating to NonMutating\ncake: Func RequirementChanges.addedFunc() is a new API without @available attribute\ncake: Func S1.foo1() has self access kind changing from NonMutating to Mutating\ncake: Func S1.foo3() is now static\ncake: Func _NoResilientClass.NoLongerFinalFunc() is now without final\ncake: Func fixedLayoutStruct.OKChange() is a new API without @available attribute\ncake: Protocol P4 is a new API without @available attribute\ncake: Struct C6 is now with @frozen\ncake: Var C1.CIIns1 changes from weak to strong\ncake: Var C1.CIIns2 changes from strong to weak\ncake: Var FutureKind.hashValue is a new API without @available attribute\ncake: Var RequirementChanges.addedVar is a new API without @available attribute\ncake: Var fixedLayoutStruct.$__lazy_storage_$_lazy_d is a new API without @available attribute\ncake: Var fixedLayoutStruct.c is a new API without @available attribute\n```\n\n----------------------------------------\n\nTITLE: Objective-C Initialization Call Example\nDESCRIPTION: Demonstrates an incomplete initialization pattern where B's dictionary instance variable is not properly initialized when calling C's initWithString method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_8\n\nLANGUAGE: objective-c\nCODE:\n```\nreturn [C initWithString:str]; // doesn't initialize B's dict ivar\n```\n\n----------------------------------------\n\nTITLE: Analyzing Unicode Character Breaking Rules for Indic Scripts\nDESCRIPTION: This code snippet demonstrates the grapheme breaking behavior when MALAYALAM LETTER DOT REPH (U+0D4E) interacts with other Indic script characters, particularly those with the ConjunctLinkingScripts property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/GraphemeBreakTest.txt#2025-04-23_snippet_7\n\nLANGUAGE: unicode\nCODE:\n```\n÷ 0D4E × 0903 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [0.3]\n÷ 0D4E × 0308 × 0903 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark_ConjunctLinkingScripts) ÷ [0.3]\n÷ 0D4E × 0904 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] DEVANAGARI LETTER SHORT A (ConjunctLinkingScripts) ÷ [0.3]\n÷ 0D4E × 0308 ÷ 0904 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] DEVANAGARI LETTER SHORT A (ConjunctLinkingScripts) ÷ [0.3]\n÷ 0D4E × 0D4E ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) ÷ [0.3]\n÷ 0D4E × 0308 ÷ 0D4E ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) ÷ [0.3]\n÷ 0D4E × 0915 ÷ #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.2] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [0.3]\n÷ 0D4E × 0308 ÷ 0915 ÷  #  ÷ [0.2] MALAYALAM LETTER DOT REPH (Prepend_ConjunctLinkingScripts) × [9.0] COMBINING DIAERESIS (Extend_ExtCccZwj) ÷ [999.0] DEVANAGARI LETTER KA (ConjunctLinkingScripts_LinkingConsonant) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Importing SceneKit.ModelIO Subframework in Swift\nDESCRIPTION: This code snippet shows importing the ModelIO subframework of SceneKit, which provides tools for working with 3D model assets and integrating them with SceneKit.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-clang-modules-macosx.txt#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nSceneKit.ModelIO\n```\n\n----------------------------------------\n\nTITLE: Testing Unicode Word Break Rules for FULL STOP (MidNumLet)\nDESCRIPTION: This snippet contains multiple test cases for Unicode word breaking rules, focusing on the FULL STOP character (U+002E) and its interactions with various other Unicode characters. Each line represents a separate test case, showing the expected word break behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_3\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 002E ÷ 0001 ÷ #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 002E × 0308 ÷ 0001 ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] <START OF HEADING> (Other) ÷ [0.3]\n÷ 002E ÷ 000D ÷ #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 002E × 0308 ÷ 000D ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n÷ 002E ÷ 000A ÷ #  ÷ [0.2] FULL STOP (MidNumLet) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]\n÷ 002E × 0308 ÷ 000A ÷  #  ÷ [0.2] FULL STOP (MidNumLet) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <LINE FEED (LF)> (LF) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Unicode Armenian Ligature Special Casing Definitions\nDESCRIPTION: Defines special case mappings for Armenian ligatures, specifying how these combined characters should be uppercase and titlecase. These rules ensure proper representation of Armenian script when case transformations are applied.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n0587; 0587; 0535 0582; 0535 0552; # ARMENIAN SMALL LIGATURE ECH YIWN\nFB13; FB13; 0544 0576; 0544 0546; # ARMENIAN SMALL LIGATURE MEN NOW\nFB14; FB14; 0544 0565; 0544 0535; # ARMENIAN SMALL LIGATURE MEN ECH\nFB15; FB15; 0544 056B; 0544 053B; # ARMENIAN SMALL LIGATURE MEN INI\nFB16; FB16; 054E 0576; 054E 0546; # ARMENIAN SMALL LIGATURE VEW NOW\nFB17; FB17; 0544 056D; 0544 053D; # ARMENIAN SMALL LIGATURE MEN XEH\n```\n\n----------------------------------------\n\nTITLE: Bridging std::span Template Class\nDESCRIPTION: Shows the template implementation of std::span in C++ and its different possible imports in Swift based on const/non-const type parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_79\n\nLANGUAGE: c++\nCODE:\n```\ntemplate<typename T>\nclass span {\npublic:\n  constexpr T& front() const noexcept;\n};\n```\n\nLANGUAGE: c++\nCODE:\n```\n// When T is non-const.\nstruct span<T> {\n  public func front() -> UnsafeMutablePointer<T>\n}\n\n// When T is const.\nstruct span<T> {\n  public func front() -> UnsafePointer<T>\n}\n\n// Need to choose one way to import, can't have both!\n```\n\n----------------------------------------\n\nTITLE: Running Swift Build Script Unit Tests\nDESCRIPTION: Command to execute the unit test suite for the build_swift module using Python 3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/build_swift/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ python3 utils/build_swift/run_tests.py\n```\n\n----------------------------------------\n\nTITLE: Unicode Extended Pictographic Character Range Definitions\nDESCRIPTION: Defines Unicode code point ranges for extended pictographic characters including emoji symbols, showing the version introduced and visual representation. Each line contains hex code points, property declaration, version number, count, and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/emoji-data.txt#2025-04-23_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\n1F400..1F407  ; Extended_Pictographic# E1.0   [8] (🐀..🐇)    rat..rabbit\n1F408         ; Extended_Pictographic# E0.7   [1] (🐈)       cat\n1F409..1F40B  ; Extended_Pictographic# E1.0   [3] (🐉..🐋)    dragon..whale\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Blocks for Inscriptional Pahlavi Script\nDESCRIPTION: Defines the Unicode code point ranges for the Inscriptional Pahlavi script, including letters and numbers. This block contains 27 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_67\n\nLANGUAGE: Unicode\nCODE:\n```\n10B60..10B72  ; Inscriptional_Pahlavi # Lo  [19] INSCRIPTIONAL PAHLAVI LETTER ALEPH..INSCRIPTIONAL PAHLAVI LETTER TAW\n10B78..10B7F  ; Inscriptional_Pahlavi # No   [8] INSCRIPTIONAL PAHLAVI NUMBER ONE..INSCRIPTIONAL PAHLAVI NUMBER ONE THOUSAND\n\n# Total code points: 27\n```\n\n----------------------------------------\n\nTITLE: Defining Cantillation_Mark Unicode Character Range\nDESCRIPTION: Specifies Unicode code points classified as Cantillation_Mark in the Indic_Syllabic_Category property. These are recitation marks, such as svara markers for the Samaveda, used across various Indic scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_22\n\nLANGUAGE: unicode\nCODE:\n```\n0951..0952    ; Cantillation_Mark # Mn   [2] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI STRESS SIGN ANUDATTA\n0A51          ; Cantillation_Mark # Mn       GURMUKHI SIGN UDAAT\n0AFA          ; Cantillation_Mark # Mn       GUJARATI SIGN SUKUN\n0AFC          ; Cantillation_Mark # Mn       GUJARATI SIGN MADDAH\n1CD0..1CD2    ; Cantillation_Mark # Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA\n1CD4..1CE0    ; Cantillation_Mark # Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA\n1CE1          ; Cantillation_Mark # Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA\n1CF4          ; Cantillation_Mark # Mn       VEDIC TONE CANDRA ABOVE\n1CF7          ; Cantillation_Mark # Mc       VEDIC SIGN ATIKRAMA\n1CF8..1CF9    ; Cantillation_Mark # Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE\n20F0          ; Cantillation_Mark # Mn       COMBINING ASTERISK ABOVE\nA8E0..A8F1    ; Cantillation_Mark # Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA\n1123E         ; Cantillation_Mark # Mn       KHOJKI SIGN SUKUN\n11366..1136C  ; Cantillation_Mark # Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX\n11370..11374  ; Cantillation_Mark # Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA\n113E1..113E2  ; Cantillation_Mark # Mn   [2] TULU-TIGALARI VEDIC TONE SVARITA..TULU-TIGALARI VEDIC TONE ANUDATTA\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Optimizer Source Files with CMake\nDESCRIPTION: Defines a list of Swift source files that implement various optimization passes for the Swift compiler. These files handle different aspects of code optimization like simplifying allocations, branches, casts, and other Swift operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/InstructionSimplification/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nswift_compiler_sources(Optimizer\n  SimplifyAllocRefDynamic.swift\n  SimplifyAllocStack.swift\n  SimplifyApply.swift\n  SimplifyBeginAndLoadBorrow.swift\n  SimplifyBeginCOWMutation.swift\n  SimplifyBranch.swift\n  SimplifyBuiltin.swift\n  SimplifyCheckedCast.swift\n  SimplifyClassifyBridgeObject.swift\n  SimplifyCondBranch.swift\n  SimplifyCondFail.swift\n  SimplifyConvertEscapeToNoEscape.swift\n  SimplifyCopyBlock.swift\n  SimplifyCopyValue.swift\n  SimplifyDebugStep.swift\n  SimplifyDestroyValue.swift\n  SimplifyDestructure.swift\n  SimplifyFixLifetime.swift\n  SimplifyGlobalValue.swift\n  SimplifyInitEnumDataAddr.swift\n  SimplifyKeyPath.swift\n  SimplifyLoad.swift\n  SimplifyMisc.swift\n  SimplifyPartialApply.swift\n  SimplifyPointerToAddress.swift\n  SimplifyRefCasts.swift\n  SimplifyRetainReleaseValue.swift\n  SimplifyStrongRetainRelease.swift\n  SimplifyStructExtract.swift\n  SimplifySwitchEnum.swift\n  SimplifyTuple.swift\n  SimplifyTupleExtract.swift\n  SimplifyUncheckedEnumData.swift\n  SimplifyValueToBridgeObject.swift\n  SimplifyWitnessMethod.swift)\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftIDETests Unit Testing Module with CMake\nDESCRIPTION: Sets up the SwiftIDETests unit testing module by specifying source files and linking with the swiftIDE library. The test includes files for testing code completion tokens, fuzzy string matching, and placeholders functionality.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/IDE/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_unittest(SwiftIDETests\n  CodeCompletionToken.cpp\n  FuzzyStringMatcherTest.cpp\n  Placeholders.cpp\n  )\ntarget_link_libraries(SwiftIDETests\n  PRIVATE\n  swiftIDE\n)\n```\n\n----------------------------------------\n\nTITLE: Static Property Access on Protocol Types in Swift\nDESCRIPTION: Demonstrates the limitation of accessing static properties on protocol types versus concrete types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/protocol-type-non-conformance.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nprint(Dog.species)    // Prints \"Canus familiaris\"\nprint(Cat.species)    // Prints \"Felis catus\"\nprint(Animal.species) // error: static member 'species' cannot be used...\n```\n\n----------------------------------------\n\nTITLE: Swift Differentiable Function Symbols\nDESCRIPTION: Mangled symbols for various differentiable function types including forward, reverse, and linear differentiation modes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_17\n\nLANGUAGE: Swift\nCODE:\n```\n$sxq_Ifgnr_D\n$sxq_Irgnr_D\n$sxq_Idgnr_D\n$sxq_Ilgnr_D\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Meroitic Hieroglyphs\nDESCRIPTION: Defines the Unicode code point range for the Meroitic Hieroglyphs, covering letters and symbols. The total count is 32 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_75\n\nLANGUAGE: text\nCODE:\n```\n10980..1099F  ; Meroitic_Hieroglyphs # Lo  [32] MEROITIC HIEROGLYPHIC LETTER A..MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2\n\n# Total code points: 32\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftObservation Library Build in CMake\nDESCRIPTION: Defines the build configuration for the SwiftObservation library including source files, compilation flags, and dependencies. Sets up experimental macro features and configures the library as part of the Swift standard library with specific build requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Observation/Sources/Observation/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND swift_runtime_library_compile_flags -I${SWIFT_SOURCE_DIR}/stdlib/include -I${SWIFT_SOURCE_DIR}/include)\n\nadd_swift_target_library(swiftObservation ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_STDLIB\n  Locking.cpp\n  Locking.swift\n  Observable.swift\n  ObservationRegistrar.swift\n  ObservationTracking.swift\n  ThreadLocal.cpp\n  ThreadLocal.swift\n\n  SWIFT_COMPILE_FLAGS\n    ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n    \"-enable-experimental-feature\" \"Macros\"\n    \"-enable-experimental-feature\" \"ExtensionMacros\"\n    -Xfrontend -disable-implicit-string-processing-module-import\n\n  C_COMPILE_FLAGS\n    ${swift_runtime_library_compile_flags}\n  LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n\n  SWIFT_MODULE_DEPENDS _Concurrency\n  INSTALL_IN_COMPONENT stdlib\n\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating CF-Compatible Class in Swift\nDESCRIPTION: Defines a class that inherits from _CFObject to provide Core Foundation compatibility.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.module.printed.txt#2025-04-23_snippet_7\n\nLANGUAGE: Swift\nCODE:\n```\nclass MyLittleCFType : _CFObject {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Build Options and Dependencies in CMake\nDESCRIPTION: Sets various CMake options for Swift build configuration, including SourceKit, threading packages, MacCatalyst support, and backtracing. Also configures dependencies like libdispatch.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_53\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_dependent_option(SWIFT_BUILD_SOURCEKIT\n  \"Build SourceKit\" TRUE\n  \"SWIFT_ENABLE_DISPATCH\" FALSE)\ncmake_dependent_option(SWIFT_ENABLE_SOURCEKIT_TESTS\n  \"Enable running SourceKit tests\" TRUE\n  \"SWIFT_BUILD_SOURCEKIT\" FALSE)\n\noption(SWIFT_THREADING_PACKAGE\n  \"Override the threading package used for the build.  This can either be a\n   single package name, or a semicolon separated sequence of sdk:package pairs.\n   Valid package names are 'pthreads', 'darwin', 'linux', 'win32', 'c11', 'none'\n   or the empty string for the SDK default.\")\n\noption(SWIFT_THREADING_HAS_DLSYM\n  \"Enable the use of the dlsym() function.  This gets used to provide TSan\n   support on some platforms.\"\n  TRUE)\n\noption(SWIFT_ENABLE_MACCATALYST\n  \"Build the Standard Library and overlays with MacCatalyst support\"\n  FALSE)\n\noption(SWIFT_ENABLE_BACKTRACING\n  \"Build backtracing runtime support\"\n  FALSE)\n\nset(SWIFT_DARWIN_DEPLOYMENT_VERSION_MACCATALYST \"14.5\" CACHE STRING\n  \"Minimum deployment target version for macCatalyst\")\n```\n\n----------------------------------------\n\nTITLE: Git Push Command Reference\nDESCRIPTION: Basic git push command mentioned in the context of submitting changes to GitHub\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/FirstPullRequest.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Newa Script\nDESCRIPTION: This snippet defines the Unicode block for the Newa script, including letters, vowel signs, various marks, digits, and punctuation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_95\n\nLANGUAGE: Unicode\nCODE:\n```\n11400..11434  ; Newa # Lo  [53] NEWA LETTER A..NEWA LETTER HA\n11435..11437  ; Newa # Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II\n11438..1143F  ; Newa # Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI\n11440..11441  ; Newa # Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU\n11442..11444  ; Newa # Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA\n11445         ; Newa # Mc       NEWA SIGN VISARGA\n11446         ; Newa # Mn       NEWA SIGN NUKTA\n11447..1144A  ; Newa # Lo   [4] NEWA SIGN AVAGRAHA..NEWA SIDDHI\n1144B..1144F  ; Newa # Po   [5] NEWA DANDA..NEWA ABBREVIATION SIGN\n11450..11459  ; Newa # Nd  [10] NEWA DIGIT ZERO..NEWA DIGIT NINE\n1145A..1145B  ; Newa # Po   [2] NEWA DOUBLE COMMA..NEWA PLACEHOLDER MARK\n1145D         ; Newa # Po       NEWA INSERTION SIGN\n1145E         ; Newa # Mn       NEWA SANDHI MARK\n1145F..11461  ; Newa # Lo   [3] NEWA LETTER VEDIC ANUSVARA..NEWA SIGN UPADHMANIYA\n```\n\n----------------------------------------\n\nTITLE: Unicode Extend Property Character Ranges\nDESCRIPTION: Defines character ranges that have the 'Extend' property in Unicode. Includes combining marks (Mn), enclosing marks (Me), and spacing combining marks (Mc) from various scripts including Latin, Cyrillic, Hebrew, Arabic, and many Indic scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_2\n\nLANGUAGE: unicode\nCODE:\n```\n0300..036F    ; Extend # Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X\n0483..0487    ; Extend # Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE\n0488..0489    ; Extend # Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN\n# ... additional ranges omitted for brevity ...\n1712..1714    ; Extend # Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA\n1715          ; Extend # Mc       TAGALOG SIGN PAMUDPOD\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Ahom Script\nDESCRIPTION: This snippet defines the Unicode block for the Ahom script, including letters, consonant signs, vowel signs, digits, and symbols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_86\n\nLANGUAGE: Unicode\nCODE:\n```\n11700..1171A  ; Ahom # Lo  [27] AHOM LETTER KA..AHOM LETTER ALTERNATE BA\n1171D         ; Ahom # Mn       AHOM CONSONANT SIGN MEDIAL LA\n1171E         ; Ahom # Mc       AHOM CONSONANT SIGN MEDIAL RA\n1171F         ; Ahom # Mn       AHOM CONSONANT SIGN MEDIAL LIGATING RA\n11720..11721  ; Ahom # Mc   [2] AHOM VOWEL SIGN A..AHOM VOWEL SIGN AA\n11722..11725  ; Ahom # Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU\n11726         ; Ahom # Mc       AHOM VOWEL SIGN E\n11727..1172B  ; Ahom # Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER\n11730..11739  ; Ahom # Nd  [10] AHOM DIGIT ZERO..AHOM DIGIT NINE\n1173A..1173B  ; Ahom # No   [2] AHOM NUMBER TEN..AHOM NUMBER TWENTY\n1173C..1173E  ; Ahom # Po   [3] AHOM SIGN SMALL SECTION..AHOM SIGN RULAI\n1173F         ; Ahom # So       AHOM SYMBOL VI\n11740..11746  ; Ahom # Lo   [7] AHOM LETTER CA..AHOM LETTER LLA\n```\n\n----------------------------------------\n\nTITLE: Defining Extended Existential Shapes in Swift Mangling\nDESCRIPTION: Specifies mangling rules for extended existential shapes, with and without generalization signatures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_45\n\nLANGUAGE: Swift\nCODE:\n```\nextended-existential-shape ::= type 'Xg' // no generalization signature\nextended-existential-shape ::= generic-signature type 'XG'\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Regional_Indicator Category Code Points\nDESCRIPTION: Lists Unicode code points classified as 'Regional_Indicator', which includes the 26 regional indicator symbols used to represent country flags. All are of type 'So' (Symbol, Other).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_8\n\nLANGUAGE: unicode-data\nCODE:\n```\n1F1E6..1F1FF  ; Regional_Indicator # So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n\n# Total code points: 26\n```\n\n----------------------------------------\n\nTITLE: Optimized Loop with Eliminated Retain-Release Pairs\nDESCRIPTION: Next optimization phase where redundant retain-release pairs have been eliminated while maintaining correct reference counting semantics, moving toward the fully optimized form.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_13\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  strong_retain %0 : $Builtin.NativeObject               (1)\n  br bb1\n\n# Iteration 1\nbb1: // preds: bb0\n  cond_br ..., bb2, bb8\n\nbb2: // preds: bb1\n  apply %f(%0)\n  apply %f(%0)\n  br bb3\n\n# Iteration 2\nbb3: // preds: bb2\n  cond_br ..., bb4, bb8\n\nbb4: // preds: bb3\n  apply %f(%0)\n  apply %f(%0)\n  br bb5\n\n# Iteration 3\nbb5: // preds: bb4\n  cond_br ..., bb6, bb8\n\nbb6: // preds: bb5\n  apply %f(%0)\n  apply %f(%0)\n  cond_br ..., bb7, bb8\n\nbb7: // preds: bb6\n  strong_release %0 : $Builtin.NativeObject              (7*)\n  br bb9\n\nbb8: // Preds: bb1, bb3, bb5, bb6\n  strong_release %0 : $Builtin.NativeObject              (8*)\n  br bb9\n\nbb9:\n  return ...\n```\n\n----------------------------------------\n\nTITLE: Querying Function Instruction Count Changes per Stage in Swift Counters DB\nDESCRIPTION: This SQL query analyzes the `function_history` kind of instruction counters to find the minimum and maximum instruction counts (`Old` value) for each function (`Symbol`) within each optimization stage (`Stage`). It filters results to include only functions where the count actually changed (`min(C.Old) <> max(C.Old)`) and orders them by the magnitude of the change (`abs(max(C.Old)-min(C.Old))`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect C.Stage, min(C.Old), max(C.Old), Symbol\nfrom Counters C where C.counter = 'inst' and C.kind = 'function_history'\ngroup by C.Symbol, C.Stage\nhaving min(C.Old) <> max(C.Old)\norder by abs(max(C.Old)-min(C.Old)); \n```\n\n----------------------------------------\n\nTITLE: Unicode Word Segmentation Space Definition\nDESCRIPTION: Lists Unicode code points classified as word segmentation spaces (WSegSpace). These are various space characters from different scripts and typographical traditions that are used for word separation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_16\n\nLANGUAGE: unicode-data\nCODE:\n```\n0020          ; WSegSpace # Zs       SPACE\n1680          ; WSegSpace # Zs       OGHAM SPACE MARK\n2000..2006    ; WSegSpace # Zs   [7] EN QUAD..SIX-PER-EM SPACE\n2008..200A    ; WSegSpace # Zs   [3] PUNCTUATION SPACE..HAIR SPACE\n205F          ; WSegSpace # Zs       MEDIUM MATHEMATICAL SPACE\n3000          ; WSegSpace # Zs       IDEOGRAPHIC SPACE\n\n# Total code points: 14\n```\n\n----------------------------------------\n\nTITLE: Same-type Constraint Sets Example 1\nDESCRIPTION: First possible set of constraints to establish type equivalence between three Collection Element types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/GenericSignature.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nC1.Element == C2.Element, C1.Element == C3.Element\n```\n\n----------------------------------------\n\nTITLE: JSON Definition of Type Aliases in Objective-C\nDESCRIPTION: JSON representation of several Objective-C type aliases including __NSConstantString, __builtin_ms_va_list, and __builtin_va_list that bridge C types to Swift equivalents.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/clang-module-dump.txt#2025-04-23_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"kind\": \"TypeAlias\",\n    \"name\": \"__NSConstantString\",\n    \"printedName\": \"__NSConstantString\",\n    \"children\": [\n      {\n        \"kind\": \"TypeNominal\",\n        \"name\": \"__NSConstantString_tag\",\n        \"printedName\": \"__ObjC.__NSConstantString_tag\",\n        \"usr\": \"c:@S@__NSConstantString_tag\"\n      }\n    ],\n    \"declKind\": \"TypeAlias\",\n    \"usr\": \"c:@T@__NSConstantString\",\n    \"moduleName\": \"__ObjC\"\n  },\n  {\n    \"kind\": \"TypeAlias\",\n    \"name\": \"__builtin_ms_va_list\",\n    \"printedName\": \"__builtin_ms_va_list\",\n    \"children\": [\n      {\n        \"kind\": \"TypeNominal\",\n        \"name\": \"UnsafeMutablePointer\",\n        \"printedName\": \"Swift.UnsafeMutablePointer<Swift.CChar>\",\n        \"children\": [\n          {\n            \"kind\": \"TypeNameAlias\",\n            \"name\": \"CChar\",\n            \"printedName\": \"Swift.CChar\",\n            \"children\": [\n              {\n                \"kind\": \"TypeNominal\",\n                \"name\": \"Int8\",\n                \"printedName\": \"Swift.Int8\",\n                \"usr\": \"s:s4Int8V\"\n              }\n            ]\n          }\n        ],\n        \"usr\": \"s:Sp\"\n      }\n    ],\n    \"declKind\": \"TypeAlias\",\n    \"usr\": \"c:@T@__builtin_ms_va_list\",\n    \"moduleName\": \"__ObjC\"\n  },\n  {\n    \"kind\": \"TypeAlias\",\n    \"name\": \"__builtin_va_list\",\n    \"printedName\": \"__builtin_va_list\",\n    \"children\": [\n      {\n        \"kind\": \"TypeNominal\",\n        \"name\": \"__va_list_tag\",\n        \"printedName\": \"__ObjC.__va_list_tag\",\n        \"usr\": \"c:@S@__va_list_tag\"\n      }\n    ],\n    \"declKind\": \"TypeAlias\",\n    \"usr\": \"c:@T@__builtin_va_list\",\n    \"moduleName\": \"__ObjC\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Anatolian Hieroglyphs\nDESCRIPTION: This snippet defines the Unicode block for Anatolian Hieroglyphs, consisting of 583 characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_87\n\nLANGUAGE: Unicode\nCODE:\n```\n14400..14646  ; Anatolian_Hieroglyphs # Lo [583] ANATOLIAN HIEROGLYPH A001..ANATOLIAN HIEROGLYPH A530\n```\n\n----------------------------------------\n\nTITLE: Setting Test Target Naming and Dependencies in CMake\nDESCRIPTION: This snippet configures test target names based on test subset and mode, and sets up dependencies for running Swift tests. It handles special cases for different test modes and prepares command-line arguments for test execution.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(test_subset_target_suffix \"-${test_subset}\")\nif(test_subset STREQUAL \"primary\")\n  set(test_subset_target_suffix \"\")\nendif()\n\nset(test_mode_target_suffix \"\")\nif(NOT test_mode STREQUAL \"optimize_none\")\n  set(test_mode_target_suffix \"-${test_mode}\")\nendif()\n\nset(maybe_command_upload_stdlib)\nif(NOT test_mode STREQUAL \"only_non_executable\")\n  set(maybe_command_upload_stdlib ${command_upload_stdlib})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Swift SIL Unit Tests in CMake\nDESCRIPTION: This snippet adds a new unit test suite for Swift SIL using the add_swift_unittest CMake function. It specifies the test file SILBitfieldTest.cpp as part of the SwiftSILTests suite.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SIL/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_unittest(SwiftSILTests\n  SILBitfieldTest.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Checking Swift Frontend Version After Incremental Build\nDESCRIPTION: This command checks the version of the Swift frontend after an incremental build to verify that changes have been applied correctly.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\n../build/Ninja-RelWithDebInfoAssert/swift-${platform}-$(uname -m)/bin/swift-frontend --version\n```\n\n----------------------------------------\n\nTITLE: Extracting Reference from Value-Qualified Class Instance in Swift\nDESCRIPTION: Demonstrates a technique to extract the underlying reference from a class instance declared as val, using an extension method.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nval x : SomeClass\n\nextension SomeClass {\n  func get_ref() { return this }\n}\n\nref y : x.get_ref()\ny.mutate()          // mutates x\n```\n\n----------------------------------------\n\nTITLE: Builtin Type Symbol Mapping\nDESCRIPTION: Mapping of mangled symbols to Swift builtin types like integers, floating point, pointers and vectors\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/simplified-manglings.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n_TtBf80_ ---> Builtin.FPIEEE80\n_TtBi32_ ---> Builtin.Int32\n_TtBw ---> Builtin.Word\n_TtBO ---> Builtin.UnknownObject\n_TtBo ---> Builtin.NativeObject\n_TtBp ---> Builtin.RawPointer\n_TtBv4Bi8_ ---> Builtin.Vec4xInt8\n_TtBv4Bf16_ ---> Builtin.Vec4xFPIEEE16\n_TtBv4Bp ---> Builtin.Vec4xRawPointer\n```\n\n----------------------------------------\n\nTITLE: Implementing FooComparisonResult Enumeration\nDESCRIPTION: Defines a Swift enum FooComparisonResult with Int raw values representing ordering relationships (ascending, same, descending).\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_5\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  FooComparisonResult.  Bbb.\nenum FooComparisonResult : Int {\n  init?(rawValue: Int)\n  var rawValue: Int { get }\n  case orderedAscending\n  case orderedSame\n  case orderedDescending\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Value Semantics Operations in Swift\nDESCRIPTION: This code illustrates the behavior of types with value semantics through various function examples. It demonstrates how copies created during initialization, assignment, and argument-passing are independently modifiable without affecting the original value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ValueSemantics.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc f1() -> T {\n   var x : T\n   return x\n}\n\nfunc f2() -> T {\n   var x : T\n   var y = x\n   return y  // a copy of x is equivalent to x\n}\n\nfunc f2a() -> T {\n   var x : T\n   var y : T\n   y = x\n   return y  // a copy of x is equivalent to x\n}\n\nfunc f3() -> T {\n   var x : T\n   var y = x\n   y.mutate() // a copy of x is modifiable\n   return x   // without affecting x\n}\n\nfunc f3a() -> T {\n   var x : T\n   var y : T\n   y = x;\n   y.mutate() // a copy of x is modifiable\n   return x   // without affecting x\n}\n\nfunc g(_ x : T) { x.mutate() }\n\nfunc f4() -> T {\n   var x : T\n   g(x)         // when x is passed by-value the copy\n   return x     // is modifiable without affecting x\n}\n```\n\n----------------------------------------\n\nTITLE: Running Pygments Mapping Configuration Script\nDESCRIPTION: Shell command to execute the Pygments configuration script that updates the lexer mappings after installation, making the Swift lexer available to Pygments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/pygments/README.txt#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ python3 _mapping.py\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Points for Number One\nDESCRIPTION: Mapping of Unicode code points to various representations of the number one, including decimal digits (Nd), other numbers (No), letter numbers (Nl), and other letter (Lo) categories. Each entry includes the hex code point, numeric value, and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n0031          ; 1.0 ; ; 1 # Nd       DIGIT ONE\n00B9          ; 1.0 ; ; 1 # No       SUPERSCRIPT ONE\n0661          ; 1.0 ; ; 1 # Nd       ARABIC-INDIC DIGIT ONE\n[...additional lines omitted for brevity...]\n2092A         ; 1.0 ; ; 1 # Lo       CJK UNIFIED IDEOGRAPH-2092A\n```\n\n----------------------------------------\n\nTITLE: Illustrating Potential Aliasing with Pointer-to-Address Conversion in Swift\nDESCRIPTION: This example demonstrates a case where the optimizer cannot assume non-aliasing due to the use of pointer_to_address instruction, which is an alias-introducing operation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_53\n\nLANGUAGE: swift\nCODE:\n```\n%adr1 = struct_element_addr %ptr1 : $*S1, #S.elt\n%adr2 = pointer_to_address %ptr2 : $Builtin.RawPointer to $*Element\n```\n\n----------------------------------------\n\nTITLE: Unicode Extend Character Properties Data File\nDESCRIPTION: A structured listing of Unicode characters with the 'Extend' property. Each line follows the format of code point range, property value, general category, and character names. This data is likely used for Unicode text processing and grapheme cluster determination in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode-data\nCODE:\n```\n11341..11344  ; Extend # Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR\n11347..11348  ; Extend # Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI\n1134B..1134D  ; Extend # Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA\n11357         ; Extend # Mc       GRANTHA AU LENGTH MARK\n11362..11363  ; Extend # Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL\n11366..1136C  ; Extend # Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX\n11370..11374  ; Extend # Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA\n113B8..113BA  ; Extend # Mc   [3] TULU-TIGALARI VOWEL SIGN AA..TULU-TIGALARI VOWEL SIGN II\n113BB..113C0  ; Extend # Mn   [6] TULU-TIGALARI VOWEL SIGN U..TULU-TIGALARI VOWEL SIGN VOCALIC LL\n113C2         ; Extend # Mc       TULU-TIGALARI VOWEL SIGN EE\n113C5         ; Extend # Mc       TULU-TIGALARI VOWEL SIGN AI\n113C7..113CA  ; Extend # Mc   [4] TULU-TIGALARI VOWEL SIGN OO..TULU-TIGALARI SIGN CANDRA ANUNASIKA\n113CC..113CD  ; Extend # Mc   [2] TULU-TIGALARI SIGN ANUSVARA..TULU-TIGALARI SIGN VISARGA\n113CE         ; Extend # Mn       TULU-TIGALARI SIGN VIRAMA\n113CF         ; Extend # Mc       TULU-TIGALARI SIGN LOOPED VIRAMA\n113D0         ; Extend # Mn       TULU-TIGALARI CONJOINER\n113D2         ; Extend # Mn       TULU-TIGALARI GEMINATION MARK\n113E1..113E2  ; Extend # Mn   [2] TULU-TIGALARI VEDIC TONE SVARITA..TULU-TIGALARI VEDIC TONE ANUDATTA\n11435..11437  ; Extend # Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II\n11438..1143F  ; Extend # Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI\n11440..11441  ; Extend # Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU\n11442..11444  ; Extend # Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA\n11445         ; Extend # Mc       NEWA SIGN VISARGA\n11446         ; Extend # Mn       NEWA SIGN NUKTA\n1145E         ; Extend # Mn       NEWA SANDHI MARK\n114B0..114B2  ; Extend # Mc   [3] TIRHUTA VOWEL SIGN AA..TIRHUTA VOWEL SIGN II\n114B3..114B8  ; Extend # Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL\n114B9         ; Extend # Mc       TIRHUTA VOWEL SIGN E\n114BA         ; Extend # Mn       TIRHUTA VOWEL SIGN SHORT E\n114BB..114BE  ; Extend # Mc   [4] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN AU\n114BF..114C0  ; Extend # Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA\n114C1         ; Extend # Mc       TIRHUTA SIGN VISARGA\n114C2..114C3  ; Extend # Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA\n115AF..115B1  ; Extend # Mc   [3] SIDDHAM VOWEL SIGN AA..SIDDHAM VOWEL SIGN II\n115B2..115B5  ; Extend # Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR\n115B8..115BB  ; Extend # Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU\n115BC..115BD  ; Extend # Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA\n115BE         ; Extend # Mc       SIDDHAM SIGN VISARGA\n115BF..115C0  ; Extend # Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA\n115DC..115DD  ; Extend # Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU\n11630..11632  ; Extend # Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II\n11633..1163A  ; Extend # Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI\n1163B..1163C  ; Extend # Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU\n1163D         ; Extend # Mn       MODI SIGN ANUSVARA\n1163E         ; Extend # Mc       MODI SIGN VISARGA\n1163F..11640  ; Extend # Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA\n116AB         ; Extend # Mn       TAKRI SIGN ANUSVARA\n116AC         ; Extend # Mc       TAKRI SIGN VISARGA\n116AD         ; Extend # Mn       TAKRI VOWEL SIGN AA\n116AE..116AF  ; Extend # Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II\n116B0..116B5  ; Extend # Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU\n116B6         ; Extend # Mc       TAKRI SIGN VIRAMA\n116B7         ; Extend # Mn       TAKRI SIGN NUKTA\n1171D         ; Extend # Mn       AHOM CONSONANT SIGN MEDIAL LA\n1171E         ; Extend # Mc       AHOM CONSONANT SIGN MEDIAL RA\n1171F         ; Extend # Mn       AHOM CONSONANT SIGN MEDIAL LIGATING RA\n11720..11721  ; Extend # Mc   [2] AHOM VOWEL SIGN A..AHOM VOWEL SIGN AA\n11722..11725  ; Extend # Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU\n11726         ; Extend # Mc       AHOM VOWEL SIGN E\n11727..1172B  ; Extend # Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER\n1182C..1182E  ; Extend # Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II\n1182F..11837  ; Extend # Mn   [9] DOGRA VOWEL SIGN U..DOGRA SIGN ANUSVARA\n11838         ; Extend # Mc       DOGRA SIGN VISARGA\n11839..1183A  ; Extend # Mn   [2] DOGRA SIGN VIRAMA..DOGRA SIGN NUKTA\n11930..11935  ; Extend # Mc   [6] DIVES AKURU VOWEL SIGN AA..DIVES AKURU VOWEL SIGN E\n11937..11938  ; Extend # Mc   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O\n1193B..1193C  ; Extend # Mn   [2] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN CANDRABINDU\n1193D         ; Extend # Mc       DIVES AKURU SIGN HALANTA\n1193E         ; Extend # Mn       DIVES AKURU VIRAMA\n11940         ; Extend # Mc       DIVES AKURU MEDIAL YA\n11942         ; Extend # Mc       DIVES AKURU MEDIAL RA\n11943         ; Extend # Mn       DIVES AKURU SIGN NUKTA\n119D1..119D3  ; Extend # Mc   [3] NANDINAGARI VOWEL SIGN AA..NANDINAGARI VOWEL SIGN II\n119D4..119D7  ; Extend # Mn   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR\n119DA..119DB  ; Extend # Mn   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI\n119DC..119DF  ; Extend # Mc   [4] NANDINAGARI VOWEL SIGN O..NANDINAGARI SIGN VISARGA\n119E0         ; Extend # Mn       NANDINAGARI SIGN VIRAMA\n119E4         ; Extend # Mc       NANDINAGARI VOWEL SIGN PRISHTHAMATRA E\n11A01..11A0A  ; Extend # Mn  [10] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL LENGTH MARK\n11A33..11A38  ; Extend # Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA\n11A39         ; Extend # Mc       ZANABAZAR SQUARE SIGN VISARGA\n11A3B..11A3E  ; Extend # Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA\n11A47         ; Extend # Mn       ZANABAZAR SQUARE SUBJOINER\n11A51..11A56  ; Extend # Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE\n11A57..11A58  ; Extend # Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU\n11A59..11A5B  ; Extend # Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK\n11A8A..11A96  ; Extend # Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA\n11A97         ; Extend # Mc       SOYOMBO SIGN VISARGA\n11A98..11A99  ; Extend # Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER\n11C2F         ; Extend # Mc       BHAIKSUKI VOWEL SIGN AA\n11C30..11C36  ; Extend # Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L\n11C38..11C3D  ; Extend # Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA\n11C3E         ; Extend # Mc       BHAIKSUKI SIGN VISARGA\n11C3F         ; Extend # Mn       BHAIKSUKI SIGN VIRAMA\n11C92..11CA7  ; Extend # Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA\n11CA9         ; Extend # Mc       MARCHEN SUBJOINED LETTER YA\n11CAA..11CB0  ; Extend # Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA\n11CB1         ; Extend # Mc       MARCHEN VOWEL SIGN I\n11CB2..11CB3  ; Extend # Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E\n11CB4         ; Extend # Mc       MARCHEN VOWEL SIGN O\n11CB5..11CB6  ; Extend # Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU\n11D31..11D36  ; Extend # Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R\n11D3A         ; Extend # Mn       MASARAM GONDI VOWEL SIGN E\n11D3C..11D3D  ; Extend # Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O\n11D3F..11D45  ; Extend # Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA\n11D47         ; Extend # Mn       MASARAM GONDI RA-KARA\n11D8A..11D8E  ; Extend # Mc   [5] GUNJALA GONDI VOWEL SIGN AA..GUNJALA GONDI VOWEL SIGN UU\n11D90..11D91  ; Extend # Mn   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI\n11D93..11D94  ; Extend # Mc   [2] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI VOWEL SIGN AU\n11D95         ; Extend # Mn       GUNJALA GONDI SIGN ANUSVARA\n11D96         ; Extend # Mc       GUNJALA GONDI SIGN VISARGA\n11D97         ; Extend # Mn       GUNJALA GONDI VIRAMA\n11EF3..11EF4  ; Extend # Mn   [2] MAKASAR VOWEL SIGN I..MAKASAR VOWEL SIGN U\n11EF5..11EF6  ; Extend # Mc   [2] MAKASAR VOWEL SIGN E..MAKASAR VOWEL SIGN O\n11F00..11F01  ; Extend # Mn   [2] KAWI SIGN CANDRABINDU..KAWI SIGN ANUSVARA\n11F03         ; Extend # Mc       KAWI SIGN VISARGA\n11F34..11F35  ; Extend # Mc   [2] KAWI VOWEL SIGN AA..KAWI VOWEL SIGN ALTERNATE AA\n11F36..11F3A  ; Extend # Mn   [5] KAWI VOWEL SIGN I..KAWI VOWEL SIGN VOCALIC R\n11F3E..11F3F  ; Extend # Mc   [2] KAWI VOWEL SIGN E..KAWI VOWEL SIGN AI\n11F40         ; Extend # Mn       KAWI VOWEL SIGN EU\n11F41         ; Extend # Mc       KAWI SIGN KILLER\n11F42         ; Extend # Mn       KAWI CONJOINER\n11F5A         ; Extend # Mn       KAWI SIGN NUKTA\n13440         ; Extend # Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY\n13447..13455  ; Extend # Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED\n1611E..16129  ; Extend # Mn  [12] GURUNG KHEMA VOWEL SIGN AA..GURUNG KHEMA VOWEL LENGTH MARK\n1612A..1612C  ; Extend # Mc   [3] GURUNG KHEMA CONSONANT SIGN MEDIAL YA..GURUNG KHEMA CONSONANT SIGN MEDIAL HA\n1612D..1612F  ; Extend # Mn   [3] GURUNG KHEMA SIGN ANUSVARA..GURUNG KHEMA SIGN THOLHOMA\n16AF0..16AF4  ; Extend # Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE\n16B30..16B36  ; Extend # Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM\n16F4F         ; Extend # Mn       MIAO SIGN CONSONANT MODIFIER BAR\n16F51..16F87  ; Extend # Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI\n16F8F..16F92  ; Extend # Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW\n16FE4         ; Extend # Mn       KHITAN SMALL SCRIPT FILLER\n16FF0..16FF1  ; Extend # Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Sanitizer Support\nDESCRIPTION: Adds thread sanitizer flags to compilation and linking when SWIFT_RUNTIME_USE_SANITIZERS includes Thread option.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_RUNTIME_USE_SANITIZERS)\n  if(\"Thread\" IN_LIST SWIFT_RUNTIME_USE_SANITIZERS)\n    list(APPEND SWIFT_RUNTIME_CXX_FLAGS \"-fsanitize=thread\")\n    list(APPEND SWIFT_RUNTIME_LINK_FLAGS \"-fsanitize=thread\")\n    list(APPEND SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS \"-sanitize=thread\")\n    list(APPEND SWIFT_RUNTIME_SWIFT_LINK_FLAGS \"-fsanitize=thread\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Script Extensions Property in Plain Text\nDESCRIPTION: This snippet provides the header and introductory comments for the Unicode Script_Extensions property definition file. It includes version information, copyright notice, and explanations of the property's purpose and format.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/ScriptExtensions.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n# ScriptExtensions-16.0.0.txt\n# Date: 2024-07-30, 19:38:00 GMT\n# © 2024 Unicode®, Inc.\n# Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.\n# For terms of use and license, see https://www.unicode.org/terms_of_use.html\n#\n# Unicode Character Database\n#   For documentation, see https://www.unicode.org/reports/tr44/\n#\n# The Script_Extensions property indicates which characters are commonly used\n# with more than one script, but with a limited number of scripts.\n# For each code point, there is one or more property values.  Each such value is a Script property value.\n# For more information, see:\n#   UAX #24, Unicode Script Property: https://www.unicode.org/reports/tr24/\n#     Especially the sections:\n#       https://www.unicode.org/reports/tr24/#Assignment_Script_Values\n#       https://www.unicode.org/reports/tr24/#Assignment_ScriptX_Values\n#\n# Each Script_Extensions value in this file consists of a set\n# of one or more abbreviated Script property values. The ordering of the\n# values in that set is not material, but for stability in presentation\n# it is given here as alphabetical.\n#\n# All code points not explicitly listed for Script_Extensions\n# have as their value the corresponding Script property value.\n#\n```\n\n----------------------------------------\n\nTITLE: Solution 3: Using @preconcurrency for Runtime Actor Isolation Checking in Swift\nDESCRIPTION: Deferring actor isolation checking to runtime by using @preconcurrency annotation, which will trigger a fatal error if a method is called from the wrong isolation context.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/conformance-isolation.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nstruct MyData: @preconcurrency P {\n  func f() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Code Point Ranges to Character Descriptions\nDESCRIPTION: This data format maps Unicode code point ranges to their respective character descriptions. Each line follows the pattern of 'range ; version # [count] description', where range is the code point range in hexadecimal, version is the Unicode version (1.1), count is the number of characters in the range, and description lists the character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_1\n\nLANGUAGE: data\nCODE:\n```\n0000..001F    ; 1.1 #  [32] <control-0000>..<control-001F>\n0020..007E    ; 1.1 #  [95] SPACE..TILDE\n007F..009F    ; 1.1 #  [33] <control-007F>..<control-009F>\n00A0..00AC    ; 1.1 #  [13] NO-BREAK SPACE..NOT SIGN\n00AD          ; 1.1 #       SOFT HYPHEN\n00AE..01F5    ; 1.1 # [328] REGISTERED SIGN..LATIN SMALL LETTER G WITH ACUTE\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftRemoteMirror Static Library Build\nDESCRIPTION: CMake configuration that sets up the SwiftRemoteMirror static library build, linking it with swiftDemangling and adding Windows-specific compile definitions when needed. The library is built from SwiftRemoteMirror.cpp source file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SwiftRemoteMirror/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftRemoteMirror STATIC\n  ${SWIFT_SOURCE_DIR}/stdlib/public/SwiftRemoteMirror/SwiftRemoteMirror.cpp)\ntarget_link_libraries(swiftRemoteMirror PRIVATE\n  swiftDemangling)\n\nif(CMAKE_SYSTEM_NAME STREQUAL \"Windows\")\n  target_compile_definitions(swiftRemoteMirror PRIVATE _LIB)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Declaring Documented Class in Swift\nDESCRIPTION: Defines a class named SameName with a documentation comment indicating it has an 'Awesome name'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.printed.txt#2025-04-23_snippet_4\n\nLANGUAGE: Swift\nCODE:\n```\n/// Awesome name.\nclass SameName {\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Derivative Function Implementation in Swift\nDESCRIPTION: Demonstrates different ways to specify differentiability parameters using the wrt argument in derivative functions. Shows examples with single and multiple parameter differentiation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_39\n\nLANGUAGE: swift\nCODE:\n```\nfunc foo<T: Differentiable>(_ x: T, _ y: T, _ z: T) -> T { ... }\n\n// Derivative with respect to all parameters.\n@derivative(of: foo)\nfunc _<T: Differentiable>(_ x: T, _ y: T, _ z: T) -> (\n    value: T, \n    differential: @differentiable(linear) (T.TangentVector, T.TangentVector, T.TangentVector) -> T.TangentVector\n) {\n    ...\n}\n\n// Derivative with respect to `x`.\n@derivative(of: foo, wrt: x)\nfunc _<T: Differentiable>(_ x: T, _ y: T, _ z: T) -> (\n    value: T, \n    differential: @differentiable(linear) (T.TangentVector) -> T.TangentVector\n) {\n    ...\n}\n\n// Derivative with respect to `x` and `z`.\n@derivative(of: foo, wrt: (x, z))\nfunc _<T: Differentiable>(_ x: T, _ y: T, _ z: T) -> (\n    value: T, \n    differential: @differentiable(linear) (T.TangentVector, T.TangentVector) -> T.TangentVector\n) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Expanding GYB Template for tgmath.swift in CMake\nDESCRIPTION: Uses the gyb_expand command to generate tgmath.swift from a template file tgmath.swift.gyb.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/CRT/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ngyb_expand(tgmath.swift.gyb tgmath.swift)\n```\n\n----------------------------------------\n\nTITLE: Illustrating Forwarding Instructions with Guaranteed Values in Swift\nDESCRIPTION: This code shows how forwarding instructions do not end the lifetime of guaranteed values, but instead create an interior use within the borrow scope.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_19\n\nLANGUAGE: swift\nCODE:\n```\n  // borrow introducer\n  %1 = begin_borrow                          -+\n  ...                                         |\n  // forwarding instruction                   | lifetime = borrow scope\n  %2 = struct $S (%1)  // forwarded use =     |   \n  ...                  //   interior use      |\n  end_borrow %1                              -+\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compatibility Threading Library in CMake\nDESCRIPTION: Adds a Swift target library named 'swiftCompatibilityThreading' as an object library. It includes multiple source files, sets compiler flags, and specifies deployment versions for various Apple platforms. The library is configured for Darwin platforms and uses a 'zippered' build flavor for Mac Catalyst.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CompatibilityThreading/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftCompatibilityThreading OBJECT_LIBRARY\n  \"${SWIFT_SOURCE_DIR}/lib/Threading/C11.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Threading/Linux.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Threading/Pthreads.cpp\"\n  \"${SWIFT_SOURCE_DIR}/lib/Threading/Win32.cpp\"\n  INSTALL_IN_COMPONENT never_install\n  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}\n\n  C_COMPILE_FLAGS\n    ${CXX_COMPILE_FLAGS}\n    \"-DSWIFT_THREADING_IS_COMPATIBILITY_LIBRARY\"\n  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n\n  MACCATALYST_BUILD_FLAVOR \"zippered\")\n```\n\n----------------------------------------\n\nTITLE: Defining Case Mappings for Greek Characters without Titlecase\nDESCRIPTION: This snippet defines case mappings for Greek characters that have no corresponding titlecases. It includes characters with ypogegrammeni and various diacritical marks for alpha, eta, and omega.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_6\n\nLANGUAGE: Unicode\nCODE:\n```\n1FB2; 1FB2; 1FBA 0345; 1FBA 0399; # GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI\n1FB4; 1FB4; 0386 0345; 0386 0399; # GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI\n1FC2; 1FC2; 1FCA 0345; 1FCA 0399; # GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI\n# ... (additional lines omitted for brevity)\n1FF7; 1FF7; 03A9 0342 0345; 03A9 0342 0399; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI\n```\n\n----------------------------------------\n\nTITLE: Configuring Glibc Platform Library in CMake\nDESCRIPTION: Sets up the swiftGlibc target library for Unix-like systems, including compile flags and dependencies. Configures target SDKs based on the build environment.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(swiftGlibc_target_sdks CYGWIN FREEBSD OPENBSD LINUX HAIKU)\nif(SWIFT_FREESTANDING_FLAVOR STREQUAL \"linux\")\n  set(swiftGlibc_target_sdks CYGWIN FREEBSD OPENBSD LINUX HAIKU FREESTANDING)\nendif()\nadd_swift_target_library(swiftGlibc ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY\n    ${swift_platform_sources}\n    POSIXError.swift\n\n    GYB_SOURCES\n      ${swift_platform_gyb_sources}\n      Glibc.swift.gyb\n\n    SWIFT_COMPILE_FLAGS\n      ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\n      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n      ${swift_platform_compile_flags}\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n    TARGET_SDKS \"${swiftGlibc_target_sdks}\"\n    INSTALL_IN_COMPONENT sdk-overlay\n    DEPENDS glibc_modulemap)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Lowercase Character Ranges\nDESCRIPTION: This snippet defines Unicode code points classified as lowercase characters. The file specifies ranges and individual code points in hexadecimal notation, each marked with the 'Lowercase' property. This data is likely used for character classification in Swift's string handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode\nCODE:\n```\n#  Generated from: Ll + Other_Lowercase\n\n0061..007A    ; Lowercase\n00AA          ; Lowercase\n00B5          ; Lowercase\n00BA          ; Lowercase\n00DF..00F6    ; Lowercase\n00F8..00FF    ; Lowercase\n0101          ; Lowercase\n0103          ; Lowercase\n0105          ; Lowercase\n0107          ; Lowercase\n0109          ; Lowercase\n010B          ; Lowercase\n010D          ; Lowercase\n010F          ; Lowercase\n0111          ; Lowercase\n0113          ; Lowercase\n0115          ; Lowercase\n0117          ; Lowercase\n0119          ; Lowercase\n011B          ; Lowercase\n011D          ; Lowercase\n011F          ; Lowercase\n0121          ; Lowercase\n0123          ; Lowercase\n0125          ; Lowercase\n0127          ; Lowercase\n0129          ; Lowercase\n012B          ; Lowercase\n012D          ; Lowercase\n012F          ; Lowercase\n0131          ; Lowercase\n0133          ; Lowercase\n0135          ; Lowercase\n0137..0138    ; Lowercase\n013A          ; Lowercase\n013C          ; Lowercase\n013E          ; Lowercase\n0140          ; Lowercase\n0142          ; Lowercase\n0144          ; Lowercase\n0146          ; Lowercase\n0148..0149    ; Lowercase\n014B          ; Lowercase\n014D          ; Lowercase\n014F          ; Lowercase\n0151          ; Lowercase\n0153          ; Lowercase\n0155          ; Lowercase\n0157          ; Lowercase\n0159          ; Lowercase\n015B          ; Lowercase\n015D          ; Lowercase\n015F          ; Lowercase\n0161          ; Lowercase\n0163          ; Lowercase\n0165          ; Lowercase\n0167          ; Lowercase\n0169          ; Lowercase\n016B          ; Lowercase\n016D          ; Lowercase\n016F          ; Lowercase\n0171          ; Lowercase\n0173          ; Lowercase\n0175          ; Lowercase\n0177          ; Lowercase\n017A          ; Lowercase\n017C          ; Lowercase\n017E..0180    ; Lowercase\n0183          ; Lowercase\n0185          ; Lowercase\n0188          ; Lowercase\n018C..018D    ; Lowercase\n0192          ; Lowercase\n0195          ; Lowercase\n0199..019B    ; Lowercase\n019E          ; Lowercase\n01A1          ; Lowercase\n01A3          ; Lowercase\n01A5          ; Lowercase\n01A8          ; Lowercase\n01AA..01AB    ; Lowercase\n01AD          ; Lowercase\n01B0          ; Lowercase\n01B4          ; Lowercase\n01B6          ; Lowercase\n01B9..01BA    ; Lowercase\n01BD..01BF    ; Lowercase\n01C6          ; Lowercase\n01C9          ; Lowercase\n01CC          ; Lowercase\n01CE          ; Lowercase\n01D0          ; Lowercase\n01D2          ; Lowercase\n01D4          ; Lowercase\n01D6          ; Lowercase\n01D8          ; Lowercase\n01DA          ; Lowercase\n01DC..01DD    ; Lowercase\n01DF          ; Lowercase\n01E1          ; Lowercase\n01E3          ; Lowercase\n01E5          ; Lowercase\n01E7          ; Lowercase\n01E9          ; Lowercase\n01EB          ; Lowercase\n01ED          ; Lowercase\n01EF..01F0    ; Lowercase\n01F3          ; Lowercase\n01F5          ; Lowercase\n01F9          ; Lowercase\n01FB          ; Lowercase\n01FD          ; Lowercase\n01FF          ; Lowercase\n0201          ; Lowercase\n0203          ; Lowercase\n0205          ; Lowercase\n0207          ; Lowercase\n0209          ; Lowercase\n020B          ; Lowercase\n020D          ; Lowercase\n020F          ; Lowercase\n0211          ; Lowercase\n0213          ; Lowercase\n0215          ; Lowercase\n0217          ; Lowercase\n0219          ; Lowercase\n021B          ; Lowercase\n021D          ; Lowercase\n021F          ; Lowercase\n0221          ; Lowercase\n0223          ; Lowercase\n0225          ; Lowercase\n0227          ; Lowercase\n0229          ; Lowercase\n022B          ; Lowercase\n022D          ; Lowercase\n022F          ; Lowercase\n0231          ; Lowercase\n0233..0239    ; Lowercase\n023C          ; Lowercase\n023F..0240    ; Lowercase\n0242          ; Lowercase\n0247          ; Lowercase\n0249          ; Lowercase\n024B          ; Lowercase\n024D          ; Lowercase\n024F..0293    ; Lowercase\n0295..02AF    ; Lowercase\n02B0..02B8    ; Lowercase\n02C0..02C1    ; Lowercase\n02E0..02E4    ; Lowercase\n0345          ; Lowercase\n0371          ; Lowercase\n0373          ; Lowercase\n0377          ; Lowercase\n037A          ; Lowercase\n037B..037D    ; Lowercase\n0390          ; Lowercase\n03AC..03CE    ; Lowercase\n03D0..03D1    ; Lowercase\n03D5..03D7    ; Lowercase\n03D9          ; Lowercase\n03DB          ; Lowercase\n03DD          ; Lowercase\n03DF          ; Lowercase\n03E1          ; Lowercase\n03E3          ; Lowercase\n03E5          ; Lowercase\n03E7          ; Lowercase\n03E9          ; Lowercase\n03EB          ; Lowercase\n03ED          ; Lowercase\n03EF..03F3    ; Lowercase\n03F5          ; Lowercase\n03F8          ; Lowercase\n03FB..03FC    ; Lowercase\n0430..045F    ; Lowercase\n0461          ; Lowercase\n0463          ; Lowercase\n0465          ; Lowercase\n0467          ; Lowercase\n0469          ; Lowercase\n046B          ; Lowercase\n046D          ; Lowercase\n046F          ; Lowercase\n0471          ; Lowercase\n0473          ; Lowercase\n0475          ; Lowercase\n0477          ; Lowercase\n0479          ; Lowercase\n047B          ; Lowercase\n047D          ; Lowercase\n047F          ; Lowercase\n0481          ; Lowercase\n048B          ; Lowercase\n048D          ; Lowercase\n048F          ; Lowercase\n0491          ; Lowercase\n0493          ; Lowercase\n0495          ; Lowercase\n0497          ; Lowercase\n0499          ; Lowercase\n049B          ; Lowercase\n049D          ; Lowercase\n049F          ; Lowercase\n04A1          ; Lowercase\n04A3          ; Lowercase\n04A5          ; Lowercase\n04A7          ; Lowercase\n04A9          ; Lowercase\n04AB          ; Lowercase\n04AD          ; Lowercase\n04AF          ; Lowercase\n04B1          ; Lowercase\n04B3          ; Lowercase\n04B5          ; Lowercase\n04B7          ; Lowercase\n04B9          ; Lowercase\n04BB          ; Lowercase\n04BD          ; Lowercase\n04BF          ; Lowercase\n04C2          ; Lowercase\n04C4          ; Lowercase\n04C6          ; Lowercase\n04C8          ; Lowercase\n04CA          ; Lowercase\n04CC          ; Lowercase\n04CE..04CF    ; Lowercase\n04D1          ; Lowercase\n04D3          ; Lowercase\n04D5          ; Lowercase\n04D7          ; Lowercase\n04D9          ; Lowercase\n04DB          ; Lowercase\n04DD          ; Lowercase\n04DF          ; Lowercase\n04E1          ; Lowercase\n04E3          ; Lowercase\n04E5          ; Lowercase\n04E7          ; Lowercase\n04E9          ; Lowercase\n04EB          ; Lowercase\n04ED          ; Lowercase\n04EF          ; Lowercase\n04F1          ; Lowercase\n04F3          ; Lowercase\n04F5          ; Lowercase\n04F7          ; Lowercase\n04F9          ; Lowercase\n04FB          ; Lowercase\n04FD          ; Lowercase\n04FF          ; Lowercase\n0501          ; Lowercase\n0503          ; Lowercase\n0505          ; Lowercase\n0507          ; Lowercase\n0509          ; Lowercase\n050B          ; Lowercase\n050D          ; Lowercase\n050F          ; Lowercase\n0511          ; Lowercase\n0513          ; Lowercase\n0515          ; Lowercase\n0517          ; Lowercase\n0519          ; Lowercase\n051B          ; Lowercase\n051D          ; Lowercase\n051F          ; Lowercase\n0521          ; Lowercase\n0523          ; Lowercase\n0525          ; Lowercase\n0527          ; Lowercase\n0529          ; Lowercase\n052B          ; Lowercase\n052D          ; Lowercase\n052F          ; Lowercase\n0560..0588    ; Lowercase\n10D0..10FA    ; Lowercase\n10FC          ; Lowercase\n10FD..10FF    ; Lowercase\n13F8..13FD    ; Lowercase\n1C80..1C88    ; Lowercase\n1C8A          ; Lowercase\n1D00..1D2B    ; Lowercase\n1D2C..1D6A    ; Lowercase\n1D6B..1D77    ; Lowercase\n1D78          ; Lowercase\n1D79..1D9A    ; Lowercase\n1D9B..1DBF    ; Lowercase\n1E01          ; Lowercase\n1E03          ; Lowercase\n1E05          ; Lowercase\n1E07          ; Lowercase\n1E09          ; Lowercase\n1E0B          ; Lowercase\n1E0D          ; Lowercase\n1E0F          ; Lowercase\n1E11          ; Lowercase\n1E13          ; Lowercase\n1E15          ; Lowercase\n1E17          ; Lowercase\n1E19          ; Lowercase\n1E1B          ; Lowercase\n1E1D          ; Lowercase\n1E1F          ; Lowercase\n1E21          ; Lowercase\n1E23          ; Lowercase\n1E25          ; Lowercase\n1E27          ; Lowercase\n1E29          ; Lowercase\n1E2B          ; Lowercase\n1E2D          ; Lowercase\n1E2F          ; Lowercase\n1E31          ; Lowercase\n1E33          ; Lowercase\n1E35          ; Lowercase\n1E37          ; Lowercase\n1E39          ; Lowercase\n1E3B          ; Lowercase\n1E3D          ; Lowercase\n1E3F          ; Lowercase\n1E41          ; Lowercase\n1E43          ; Lowercase\n1E45          ; Lowercase\n1E47          ; Lowercase\n1E49          ; Lowercase\n1E4B          ; Lowercase\n1E4D          ; Lowercase\n1E4F          ; Lowercase\n1E51          ; Lowercase\n1E53          ; Lowercase\n1E55          ; Lowercase\n1E57          ; Lowercase\n1E59          ; Lowercase\n1E5B          ; Lowercase\n1E5D          ; Lowercase\n1E5F          ; Lowercase\n1E61          ; Lowercase\n1E63          ; Lowercase\n1E65          ; Lowercase\n1E67          ; Lowercase\n1E69          ; Lowercase\n1E6B          ; Lowercase\n1E6D          ; Lowercase\n1E6F          ; Lowercase\n1E71          ; Lowercase\n1E73          ; Lowercase\n1E75          ; Lowercase\n1E77          ; Lowercase\n1E79          ; Lowercase\n1E7B          ; Lowercase\n1E7D          ; Lowercase\n1E7F          ; Lowercase\n1E81          ; Lowercase\n1E83          ; Lowercase\n1E85          ; Lowercase\n1E87          ; Lowercase\n1E89          ; Lowercase\n1E8B          ; Lowercase\n1E8D          ; Lowercase\n1E8F          ; Lowercase\n1E91          ; Lowercase\n1E93          ; Lowercase\n1E95..1E9D    ; Lowercase\n1E9F          ; Lowercase\n1EA1          ; Lowercase\n1EA3          ; Lowercase\n1EA5          ; Lowercase\n1EA7          ; Lowercase\n1EA9          ; Lowercase\n1EAB          ; Lowercase\n1EAD          ; Lowercase\n1EAF          ; Lowercase\n1EB1          ; Lowercase\n1EB3          ; Lowercase\n1EB5          ; Lowercase\n1EB7          ; Lowercase\n1EB9          ; Lowercase\n1EBB          ; Lowercase\n1EBD          ; Lowercase\n1EBF          ; Lowercase\n1EC1          ; Lowercase\n1EC3          ; Lowercase\n```\n\n----------------------------------------\n\nTITLE: Potential Implicit Static Properties for Options\nDESCRIPTION: Suggestion for addressing the nonuniformity issue by implicitly generating static properties for individual options, improving the consistency of the API.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nstruct MyOptions : OptionSet {\n  // Stored properties of instances\n  var Foo, Bar, Bas : Bool = false\n\n  static func Foobar() -> MyOptions {\n    return MyOptions(Foo: true, Bar: true)\n  }\n\n  // Implicitly-generated static properties?\n  static func Foo() -> MyOptions { return MyOptions(Foo: true) }\n  static func Bar() -> MyOptions { return MyOptions(Bar: true) }\n  static func Bas() -> MyOptions { return MyOptions(Bas: true) }\n}\n\nvar x: MyOptions = .Foobar() | .Bas()\n```\n\n----------------------------------------\n\nTITLE: Unicode Zero Width Joiner Definition\nDESCRIPTION: Defines the Zero Width Joiner (ZWJ) character, a special control character used to join two characters together that would not normally be connected.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_15\n\nLANGUAGE: unicode-data\nCODE:\n```\n200D          ; ZWJ # Cf       ZERO WIDTH JOINER\n\n# Total code points: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Symlinks for Swift Tools in CMake\nDESCRIPTION: Creates symlinks for various Swift-related tools, pointing them to the swift-frontend executable. This includes tools like sil-opt, sil-func-extractor, and swift-symbolgraph-extract.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/driver/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"sil-opt${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"sil-func-extractor${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"sil-nm${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"sil-llvm-gen${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"sil-passpipeline-dumper${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"swift-dependency-tool${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"swift-llvm-opt${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"swift-symbolgraph-extract${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"swift-autolink-extract${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"swift-api-digester${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"swift-cache-tool${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"swift-parse-test${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n\nswift_create_post_build_symlink(swift-frontend\n  SOURCE \"swift-frontend${CMAKE_EXECUTABLE_SUFFIX}\"\n  DESTINATION \"swift-synthesize-interface${CMAKE_EXECUTABLE_SUFFIX}\"\n  WORKING_DIRECTORY \"${SWIFT_RUNTIME_OUTPUT_INTDIR}\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Immutable Loading from COW Structure in SIL\nDESCRIPTION: Shows how loading from a Copy-on-Write (COW) data structure is performed in SIL, using immutable references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_47\n\nLANGUAGE: sil\nCODE:\n```\n  %field1 = ref_element_addr [immutable] %immutable_buffer : $BufferClass, #BufferClass.Field\n  %value1 = load %field1 : $*FieldType\n...\n  %field2 = ref_element_addr [immutable] %immutable_buffer : $BufferClass, #BufferClass.Field\n  %value2 = load %field2 : $*FieldType\n```\n\n----------------------------------------\n\nTITLE: Unicode Vowel_Independent Code Point Ranges\nDESCRIPTION: Comprehensive listing of Unicode code point ranges that represent independent vowel characters across various scripts. Each range is annotated with script name and character type information. The ranges cover both historical and modern scripts used in South and Southeast Asia.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_5\n\nLANGUAGE: unicode\nCODE:\n```\n0904..0914    ; Vowel_Independent # Lo  [17] DEVANAGARI LETTER SHORT A..DEVANAGARI LETTER AU\n0960..0961    ; Vowel_Independent # Lo   [2] DEVANAGARI LETTER VOCALIC RR..DEVANAGARI LETTER VOCALIC LL\n0972..0977    ; Vowel_Independent # Lo   [6] DEVANAGARI LETTER CANDRA A..DEVANAGARI LETTER UUE\n0985..098C    ; Vowel_Independent # Lo   [8] BENGALI LETTER A..BENGALI LETTER VOCALIC L\n# ... additional ranges omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Unicode Extend Property Code Point Definitions\nDESCRIPTION: Defines ranges and individual code points of Unicode characters that have the 'Extend' property. Each line specifies either a single code point or a range of code points, followed by property name (Extend) and character category (Mn, Me, Mc, etc.), with descriptive comments for the characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode-data\nCODE:\n```\n1932          ; Extend # Mn       LIMBU SMALL LETTER ANUSVARA\n1939..193B    ; Extend # Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n1A17..1A18    ; Extend # Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U\n# [Additional lines omitted for brevity]\n```\n\n----------------------------------------\n\nTITLE: Defining ID_Continue Unicode Character Ranges\nDESCRIPTION: This code snippet defines which Unicode code points are valid for identifier continuation in programming languages according to Unicode Annex #31 (UAX #31). Each line specifies either a single code point or a range of code points that have the ID_Continue property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_27\n\nLANGUAGE: unicode-data\nCODE:\n```\n#  NOTE: See UAX #31 for more information\n\n0030..0039    ; ID_Continue\n0041..005A    ; ID_Continue\n005F          ; ID_Continue\n0061..007A    ; ID_Continue\n00AA          ; ID_Continue\n00B5          ; ID_Continue\n00B7          ; ID_Continue\n00BA          ; ID_Continue\n00C0..00D6    ; ID_Continue\n00D8..00F6    ; ID_Continue\n00F8..01BA    ; ID_Continue\n01BB          ; ID_Continue\n01BC..01BF    ; ID_Continue\n01C0..01C3    ; ID_Continue\n01C4..0293    ; ID_Continue\n0294          ; ID_Continue\n0295..02AF    ; ID_Continue\n02B0..02C1    ; ID_Continue\n02C6..02D1    ; ID_Continue\n02E0..02E4    ; ID_Continue\n02EC          ; ID_Continue\n02EE          ; ID_Continue\n0300..036F    ; ID_Continue\n0370..0373    ; ID_Continue\n0374          ; ID_Continue\n0376..0377    ; ID_Continue\n037A          ; ID_Continue\n037B..037D    ; ID_Continue\n037F          ; ID_Continue\n0386          ; ID_Continue\n0387          ; ID_Continue\n0388..038A    ; ID_Continue\n038C          ; ID_Continue\n038E..03A1    ; ID_Continue\n03A3..03F5    ; ID_Continue\n03F7..0481    ; ID_Continue\n0483..0487    ; ID_Continue\n048A..052F    ; ID_Continue\n0531..0556    ; ID_Continue\n0559          ; ID_Continue\n0560..0588    ; ID_Continue\n0591..05BD    ; ID_Continue\n05BF          ; ID_Continue\n05C1..05C2    ; ID_Continue\n05C4..05C5    ; ID_Continue\n05C7          ; ID_Continue\n05D0..05EA    ; ID_Continue\n05EF..05F2    ; ID_Continue\n0610..061A    ; ID_Continue\n0620..063F    ; ID_Continue\n0640          ; ID_Continue\n0641..064A    ; ID_Continue\n064B..065F    ; ID_Continue\n0660..0669    ; ID_Continue\n066E..066F    ; ID_Continue\n0670          ; ID_Continue\n0671..06D3    ; ID_Continue\n06D5          ; ID_Continue\n06D6..06DC    ; ID_Continue\n06DF..06E4    ; ID_Continue\n06E5..06E6    ; ID_Continue\n06E7..06E8    ; ID_Continue\n06EA..06ED    ; ID_Continue\n06EE..06EF    ; ID_Continue\n06F0..06F9    ; ID_Continue\n06FA..06FC    ; ID_Continue\n06FF          ; ID_Continue\n0710          ; ID_Continue\n0711          ; ID_Continue\n0712..072F    ; ID_Continue\n0730..074A    ; ID_Continue\n074D..07A5    ; ID_Continue\n07A6..07B0    ; ID_Continue\n07B1          ; ID_Continue\n07C0..07C9    ; ID_Continue\n07CA..07EA    ; ID_Continue\n07EB..07F3    ; ID_Continue\n07F4..07F5    ; ID_Continue\n07FA          ; ID_Continue\n07FD          ; ID_Continue\n0800..0815    ; ID_Continue\n0816..0819    ; ID_Continue\n081A          ; ID_Continue\n081B..0823    ; ID_Continue\n0824          ; ID_Continue\n0825..0827    ; ID_Continue\n0828          ; ID_Continue\n0829..082D    ; ID_Continue\n0840..0858    ; ID_Continue\n0859..085B    ; ID_Continue\n0860..086A    ; ID_Continue\n0870..0887    ; ID_Continue\n0889..088E    ; ID_Continue\n0897..089F    ; ID_Continue\n08A0..08C8    ; ID_Continue\n08C9          ; ID_Continue\n08CA..08E1    ; ID_Continue\n08E3..0902    ; ID_Continue\n0903          ; ID_Continue\n0904..0939    ; ID_Continue\n093A          ; ID_Continue\n093B          ; ID_Continue\n093C          ; ID_Continue\n093D          ; ID_Continue\n093E..0940    ; ID_Continue\n0941..0948    ; ID_Continue\n0949..094C    ; ID_Continue\n094D          ; ID_Continue\n094E..094F    ; ID_Continue\n0950          ; ID_Continue\n0951..0957    ; ID_Continue\n0958..0961    ; ID_Continue\n0962..0963    ; ID_Continue\n0966..096F    ; ID_Continue\n0971          ; ID_Continue\n0972..0980    ; ID_Continue\n0981          ; ID_Continue\n0982..0983    ; ID_Continue\n0985..098C    ; ID_Continue\n098F..0990    ; ID_Continue\n0993..09A8    ; ID_Continue\n09AA..09B0    ; ID_Continue\n09B2          ; ID_Continue\n09B6..09B9    ; ID_Continue\n09BC          ; ID_Continue\n09BD          ; ID_Continue\n09BE..09C0    ; ID_Continue\n09C1..09C4    ; ID_Continue\n09C7..09C8    ; ID_Continue\n09CB..09CC    ; ID_Continue\n09CD          ; ID_Continue\n09CE          ; ID_Continue\n09D7          ; ID_Continue\n09DC..09DD    ; ID_Continue\n09DF..09E1    ; ID_Continue\n09E2..09E3    ; ID_Continue\n09E6..09EF    ; ID_Continue\n09F0..09F1    ; ID_Continue\n09FC          ; ID_Continue\n09FE          ; ID_Continue\n0A01..0A02    ; ID_Continue\n0A03          ; ID_Continue\n0A05..0A0A    ; ID_Continue\n0A0F..0A10    ; ID_Continue\n0A13..0A28    ; ID_Continue\n0A2A..0A30    ; ID_Continue\n0A32..0A33    ; ID_Continue\n0A35..0A36    ; ID_Continue\n0A38..0A39    ; ID_Continue\n0A3C          ; ID_Continue\n0A3E..0A40    ; ID_Continue\n0A41..0A42    ; ID_Continue\n0A47..0A48    ; ID_Continue\n0A4B..0A4D    ; ID_Continue\n0A51          ; ID_Continue\n0A59..0A5C    ; ID_Continue\n0A5E          ; ID_Continue\n0A66..0A6F    ; ID_Continue\n0A70..0A71    ; ID_Continue\n0A72..0A74    ; ID_Continue\n0A75          ; ID_Continue\n0A81..0A82    ; ID_Continue\n0A83          ; ID_Continue\n0A85..0A8D    ; ID_Continue\n0A8F..0A91    ; ID_Continue\n0A93..0AA8    ; ID_Continue\n0AAA..0AB0    ; ID_Continue\n0AB2..0AB3    ; ID_Continue\n0AB5..0AB9    ; ID_Continue\n0ABC          ; ID_Continue\n0ABD          ; ID_Continue\n0ABE..0AC0    ; ID_Continue\n0AC1..0AC5    ; ID_Continue\n0AC7..0AC8    ; ID_Continue\n0AC9          ; ID_Continue\n0ACB..0ACC    ; ID_Continue\n0ACD          ; ID_Continue\n0AD0          ; ID_Continue\n0AE0..0AE1    ; ID_Continue\n0AE2..0AE3    ; ID_Continue\n0AE6..0AEF    ; ID_Continue\n0AF9          ; ID_Continue\n0AFA..0AFF    ; ID_Continue\n0B01          ; ID_Continue\n0B02..0B03    ; ID_Continue\n0B05..0B0C    ; ID_Continue\n0B0F..0B10    ; ID_Continue\n0B13..0B28    ; ID_Continue\n0B2A..0B30    ; ID_Continue\n0B32..0B33    ; ID_Continue\n0B35..0B39    ; ID_Continue\n0B3C          ; ID_Continue\n0B3D          ; ID_Continue\n0B3E          ; ID_Continue\n0B3F          ; ID_Continue\n0B40          ; ID_Continue\n0B41..0B44    ; ID_Continue\n0B47..0B48    ; ID_Continue\n0B4B..0B4C    ; ID_Continue\n0B4D          ; ID_Continue\n0B55..0B56    ; ID_Continue\n0B57          ; ID_Continue\n0B5C..0B5D    ; ID_Continue\n0B5F..0B61    ; ID_Continue\n0B62..0B63    ; ID_Continue\n0B66..0B6F    ; ID_Continue\n0B71          ; ID_Continue\n0B82          ; ID_Continue\n0B83          ; ID_Continue\n0B85..0B8A    ; ID_Continue\n0B8E..0B90    ; ID_Continue\n0B92..0B95    ; ID_Continue\n0B99..0B9A    ; ID_Continue\n0B9C          ; ID_Continue\n0B9E..0B9F    ; ID_Continue\n0BA3..0BA4    ; ID_Continue\n0BA8..0BAA    ; ID_Continue\n0BAE..0BB9    ; ID_Continue\n0BBE..0BBF    ; ID_Continue\n0BC0          ; ID_Continue\n0BC1..0BC2    ; ID_Continue\n0BC6..0BC8    ; ID_Continue\n0BCA..0BCC    ; ID_Continue\n0BCD          ; ID_Continue\n0BD0          ; ID_Continue\n0BD7          ; ID_Continue\n0BE6..0BEF    ; ID_Continue\n0C00          ; ID_Continue\n0C01..0C03    ; ID_Continue\n0C04          ; ID_Continue\n0C05..0C0C    ; ID_Continue\n0C0E..0C10    ; ID_Continue\n0C12..0C28    ; ID_Continue\n0C2A..0C39    ; ID_Continue\n0C3C          ; ID_Continue\n0C3D          ; ID_Continue\n0C3E..0C40    ; ID_Continue\n0C41..0C44    ; ID_Continue\n0C46..0C48    ; ID_Continue\n0C4A..0C4D    ; ID_Continue\n0C55..0C56    ; ID_Continue\n0C58..0C5A    ; ID_Continue\n0C5D          ; ID_Continue\n0C60..0C61    ; ID_Continue\n0C62..0C63    ; ID_Continue\n0C66..0C6F    ; ID_Continue\n0C80          ; ID_Continue\n0C81          ; ID_Continue\n0C82..0C83    ; ID_Continue\n0C85..0C8C    ; ID_Continue\n0C8E..0C90    ; ID_Continue\n0C92..0CA8    ; ID_Continue\n0CAA..0CB3    ; ID_Continue\n0CB5..0CB9    ; ID_Continue\n0CBC          ; ID_Continue\n0CBD          ; ID_Continue\n0CBE          ; ID_Continue\n0CBF          ; ID_Continue\n0CC0..0CC4    ; ID_Continue\n0CC6          ; ID_Continue\n0CC7..0CC8    ; ID_Continue\n0CCA..0CCB    ; ID_Continue\n0CCC..0CCD    ; ID_Continue\n0CD5..0CD6    ; ID_Continue\n0CDD..0CDE    ; ID_Continue\n0CE0..0CE1    ; ID_Continue\n0CE2..0CE3    ; ID_Continue\n0CE6..0CEF    ; ID_Continue\n0CF1..0CF2    ; ID_Continue\n0CF3          ; ID_Continue\n0D00..0D01    ; ID_Continue\n0D02..0D03    ; ID_Continue\n0D04..0D0C    ; ID_Continue\n0D0E..0D10    ; ID_Continue\n0D12..0D3A    ; ID_Continue\n0D3B..0D3C    ; ID_Continue\n0D3D          ; ID_Continue\n0D3E..0D40    ; ID_Continue\n0D41..0D44    ; ID_Continue\n0D46..0D48    ; ID_Continue\n0D4A..0D4C    ; ID_Continue\n0D4D          ; ID_Continue\n0D4E          ; ID_Continue\n0D54..0D56    ; ID_Continue\n0D57          ; ID_Continue\n0D5F..0D61    ; ID_Continue\n0D62..0D63    ; ID_Continue\n0D66..0D6F    ; ID_Continue\n0D7A..0D7F    ; ID_Continue\n0D81          ; ID_Continue\n0D82..0D83    ; ID_Continue\n0D85..0D96    ; ID_Continue\n0D9A..0DB1    ; ID_Continue\n0DB3..0DBB    ; ID_Continue\n0DBD          ; ID_Continue\n0DC0..0DC6    ; ID_Continue\n0DCA          ; ID_Continue\n0DCF..0DD1    ; ID_Continue\n0DD2..0DD4    ; ID_Continue\n0DD6          ; ID_Continue\n0DD8..0DDF    ; ID_Continue\n0DE6..0DEF    ; ID_Continue\n0DF2..0DF3    ; ID_Continue\n0E01..0E30    ; ID_Continue\n0E31          ; ID_Continue\n0E32..0E33    ; ID_Continue\n0E34..0E3A    ; ID_Continue\n0E40..0E45    ; ID_Continue\n0E46          ; ID_Continue\n0E47..0E4E    ; ID_Continue\n0E50..0E59    ; ID_Continue\n0E81..0E82    ; ID_Continue\n0E84          ; ID_Continue\n0E86..0E8A    ; ID_Continue\n0E8C..0EA3    ; ID_Continue\n0EA5          ; ID_Continue\n0EA7..0EB0    ; ID_Continue\n0EB1          ; ID_Continue\n0EB2..0EB3    ; ID_Continue\n0EB4..0EBC    ; ID_Continue\n0EBD          ; ID_Continue\n0EC0..0EC4    ; ID_Continue\n0EC6          ; ID_Continue\n0EC8..0ECE    ; ID_Continue\n0ED0..0ED9    ; ID_Continue\n0EDC..0EDF    ; ID_Continue\n0F00          ; ID_Continue\n0F18..0F19    ; ID_Continue\n0F20..0F29    ; ID_Continue\n0F35          ; ID_Continue\n0F37          ; ID_Continue\n0F39          ; ID_Continue\n0F3E..0F3F    ; ID_Continue\n0F40..0F47    ; ID_Continue\n0F49..0F6C    ; ID_Continue\n0F71..0F7E    ; ID_Continue\n0F7F          ; ID_Continue\n0F80..0F84    ; ID_Continue\n0F86..0F87    ; ID_Continue\n0F88..0F8C    ; ID_Continue\n0F8D..0F97    ; ID_Continue\n0F99..0FBC    ; ID_Continue\n0FC6          ; ID_Continue\n1000..102A    ; ID_Continue\n102B..102C    ; ID_Continue\n102D..1030    ; ID_Continue\n1031          ; ID_Continue\n1032..1037    ; ID_Continue\n1038          ; ID_Continue\n1039..103A    ; ID_Continue\n103B..103C    ; ID_Continue\n103D..103E    ; ID_Continue\n103F          ; ID_Continue\n1040..1049    ; ID_Continue\n1050..1055    ; ID_Continue\n```\n\n----------------------------------------\n\nTITLE: Empty Swift File Comment\nDESCRIPTION: A code comment indicating an empty Swift source file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-swift-modules-iosmac.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Empty\n```\n\n----------------------------------------\n\nTITLE: Defining SpacingMark Unicode Ranges\nDESCRIPTION: This snippet defines Unicode ranges for SpacingMark characters from various scripts including Takri, Ahom, Miao, and Musical Symbols. It specifies individual code points and ranges for characters with the SpacingMark property.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_7\n\nLANGUAGE: Unicode\nCODE:\n```\n116AE..116AF  ; SpacingMark # Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II\n116B6         ; SpacingMark # Mc       TAKRI SIGN VIRAMA\n11720..11721  ; SpacingMark # Mc   [2] AHOM VOWEL SIGN A..AHOM VOWEL SIGN AA\n11726         ; SpacingMark # Mc       AHOM VOWEL SIGN E\n16F51..16F7E  ; SpacingMark # Mc  [46] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN NG\n1D166         ; SpacingMark # Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM\n1D16D         ; SpacingMark # Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT\n\n# Total code points: 330\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Ranges for Linear B Script\nDESCRIPTION: Defines the Unicode code point ranges for the Linear B script, categorizing characters by their types (Lo) and providing the total count of code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_25\n\nLANGUAGE: Unicode\nCODE:\n```\n10000..1000B  ; Linear_B # Lo  [12] LINEAR B SYLLABLE B008 A..LINEAR B SYLLABLE B046 JE\n1000D..10026  ; Linear_B # Lo  [26] LINEAR B SYLLABLE B036 JO..LINEAR B SYLLABLE B032 QO\n10028..1003A  ; Linear_B # Lo  [19] LINEAR B SYLLABLE B060 RA..LINEAR B SYLLABLE B042 WO\n1003C..1003D  ; Linear_B # Lo   [2] LINEAR B SYLLABLE B017 ZA..LINEAR B SYLLABLE B074 ZE\n1003F..1004D  ; Linear_B # Lo  [15] LINEAR B SYLLABLE B020 ZO..LINEAR B SYLLABLE B091 TWO\n10050..1005D  ; Linear_B # Lo  [14] LINEAR B SYMBOL B018..LINEAR B SYMBOL B089\n10080..100FA  ; Linear_B # Lo [123] LINEAR B IDEOGRAM B100 MAN..LINEAR B IDEOGRAM VESSEL B305\n\n# Total code points: 211\n```\n\n----------------------------------------\n\nTITLE: Listing Demangled Symbols from Object Code (Shell)\nDESCRIPTION: Uses the `nm` tool to list symbols from an object file (`tmp.o`), sorting them numerically by address (`-n`) and including section names (`-m`). The output is then piped to `swift demangle` to show human-readable symbol names, saving the result to `tmp.txt`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n# Look at where different symbols are located, sorting by address (-n)\n# and displaying section names (-m)\nnm -n -m tmp.o | swift demangle > tmp.txt\n```\n\n----------------------------------------\n\nTITLE: Unicode Extended Character Range Definitions\nDESCRIPTION: Comprehensive list of Unicode code point ranges that have the Extend property. Each line defines either a single code point or a range of code points with comments indicating the specific characters or ranges covered. These are primarily combining marks, diacritics, and other modifying characters from various scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n11001         ; Extend # Mn       BRAHMI SIGN ANUSVARA\n11038..11046  ; Extend # Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA\n11070         ; Extend # Mn       BRAHMI SIGN OLD TAMIL VIRAMA\n11073..11074  ; Extend # Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O\n1107F..11081  ; Extend # Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA\n```\n\n----------------------------------------\n\nTITLE: Using do and catch for Error Handling (Swift)\nDESCRIPTION: Demonstrates how Swift manages error catching using the `do` and `catch` constructs, including conditional and catch-all clauses. This snippet must appear within a context capable of handling errors (e.g., a function marked `throws`). It outlines exhaustive handling via Swift’s pattern matching in catch and indicates how scope can be managed within a do block.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Simple do statement (without a trailing while condition),\n// just provides a scope for variables defined inside of it.\ndo {\n    let x = foo()\n}\n\n// do statement with two catch clauses.\ndo {\n    ...\n\n} catch HomeworkError.Overworked {\n    // a conditionally-executed catch clause\n\n} catch _ {\n    // a catch-all clause.\n}\n\n```\n\n----------------------------------------\n\nTITLE: Unicode Bidi_Mirrored Character Definitions\nDESCRIPTION: Defines Unicode characters that have the Bidi_Mirrored property, including basic punctuation, mathematical symbols, brackets, and specialized Unicode characters. Each entry includes the Unicode code point, property confirmation, and character description.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedBinaryProperties.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n0028          ; Bidi_Mirrored # Ps       LEFT PARENTHESIS\n0029          ; Bidi_Mirrored # Pe       RIGHT PARENTHESIS\n003C          ; Bidi_Mirrored # Sm       LESS-THAN SIGN\n003E          ; Bidi_Mirrored # Sm       GREATER-THAN SIGN\n005B          ; Bidi_Mirrored # Ps       LEFT SQUARE BRACKET\n005D          ; Bidi_Mirrored # Pe       RIGHT SQUARE BRACKET\n007B          ; Bidi_Mirrored # Ps       LEFT CURLY BRACKET\n007D          ; Bidi_Mirrored # Pe       RIGHT CURLY BRACKET\n00AB          ; Bidi_Mirrored # Pi       LEFT-POINTING DOUBLE ANGLE QUOTATION MARK\n00BB          ; Bidi_Mirrored # Pf       RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK\n```\n\n----------------------------------------\n\nTITLE: Configuring swiftWinSDK Library with CMake\nDESCRIPTION: Defines a swiftWinSDK library using WinSDK.swift source file, sets module name, configures build properties, manages dependencies, and sets up installation. The configuration includes conditional compilation definition for reflection support and generates Swift interface files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/WinSDK/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftWinSDK\n  WinSDK.swift)\nset_target_properties(swiftWinSDK PROPERTIES\n  Swift_MODULE_NAME WinSDK)\ntarget_compile_definitions(swiftCRT PRIVATE\n  $<$<BOOL:${SwiftOverlay_ENABLE_REFLECTION}>:SWIFT_ENABLE_REFLECTION>)\ntarget_link_libraries(swiftWinSDK PRIVATE\n  ClangModules\n  swiftCore)\n\ninstall(TARGETS swiftWinSDK\n  ARCHIVE DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  LIBRARY DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nemit_swift_interface(swiftWinSDK)\ninstall_swift_interface(swiftWinSDK)\n\nembed_manifest(swiftWinSDK)\n```\n\n----------------------------------------\n\nTITLE: Installing Swift CRT Library in CMake\nDESCRIPTION: Configures the installation of the swiftCRT library, including archive, library, and runtime components. It also generates and installs the Swift interface.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/CRT/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS swiftCRT\n  ARCHIVE DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  LIBRARY DESTINATION \"${SwiftOverlay_INSTALL_LIBDIR}\"\n  RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\")\nemit_swift_interface(swiftCRT)\ninstall_swift_interface(swiftCRT)\n```\n\n----------------------------------------\n\nTITLE: Configuring Objective-C ARC for Darwin Platforms in CMake\nDESCRIPTION: Sets the -fobjc-arc compile flag for SwiftNativeNSXXXBaseARC.m when building for Darwin platforms. This ensures proper Automatic Reference Counting (ARC) behavior.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/stubs/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(\"${SWIFT_PRIMARY_VARIANT_SDK}\" IN_LIST SWIFT_DARWIN_PLATFORMS)\n  set_property(SOURCE\n                 SwiftNativeNSXXXBaseARC.m\n               APPEND_STRING PROPERTY COMPILE_FLAGS\n                 \"-fobjc-arc\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Base Class with Class and Instance Methods in Swift\nDESCRIPTION: Declares a BaseInHead class with a class method and an instance method, both named doIt and taking an Int32 argument.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.command-line-include.printed.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nclass BaseInHead {\n  class func doIt(_ arg: Int32)\n  func doIt(_ arg: Int32)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Meroitic Cursive Script\nDESCRIPTION: Defines the Unicode code point ranges for the Meroitic Cursive script, including letters, numbers, and special characters. The total count is 90 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_74\n\nLANGUAGE: text\nCODE:\n```\n109A0..109B7  ; Meroitic_Cursive # Lo  [24] MEROITIC CURSIVE LETTER A..MEROITIC CURSIVE LETTER DA\n109BC..109BD  ; Meroitic_Cursive # No   [2] MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS..MEROITIC CURSIVE FRACTION ONE HALF\n109BE..109BF  ; Meroitic_Cursive # Lo   [2] MEROITIC CURSIVE LOGOGRAM RMT..MEROITIC CURSIVE LOGOGRAM IMN\n109C0..109CF  ; Meroitic_Cursive # No  [16] MEROITIC CURSIVE NUMBER ONE..MEROITIC CURSIVE NUMBER SEVENTY\n109D2..109FF  ; Meroitic_Cursive # No  [46] MEROITIC CURSIVE NUMBER ONE HUNDRED..MEROITIC CURSIVE FRACTION TEN TWELFTHS\n\n# Total code points: 90\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping for Half Three (2.5)\nDESCRIPTION: Defines the Unicode code point for the Tibetan digit representing the value 2.5 (half three).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_9\n\nLANGUAGE: txt\nCODE:\n```\n0F2C          ; 2.5 ; ; 5/2 # No       TIBETAN DIGIT HALF THREE\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Parser Link Libraries in CMake\nDESCRIPTION: Function to add additional libraries for linking when building the Swift parser. It conditionally links swiftCore and adds dependencies for Swift macro plugins.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/driver/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(add_swift_parser_link_libraries target)\n  if(SWIFT_BUILD_SWIFT_SYNTAX)\n    target_link_libraries(${target}\n                          PRIVATE swiftCore)\n\n    get_property(SWIFT_MACRO_PLUGINS GLOBAL PROPERTY SWIFT_MACRO_PLUGINS)\n    foreach(macrolib ${SWIFT_MACRO_PLUGINS})\n      add_dependencies(${target} ${macrolib})\n    endforeach()\n    add_dependencies(${target} SwiftInProcPluginServer)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Compiler Selection for Swift Runtime Tests\nDESCRIPTION: Sets up compiler configuration based on the host environment and build settings. Handles different compiler scenarios including Clang, MSVC-like environments, and disables distcc if present.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/runtime/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(\"${CMAKE_C_COMPILER_ID}\" MATCHES \"Clang\")\n    if(NOT SWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER)\n      set(CMAKE_CXX_COMPILER \"${SWIFT_NATIVE_CLANG_TOOLS_PATH}/clang++\")\n      set(CMAKE_C_COMPILER \"${SWIFT_NATIVE_CLANG_TOOLS_PATH}/clang\")\n    endif()\n  elseif(SWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER)\n    message(FATAL_ERROR \"Building the swift runtime is not supported with ${CMAKE_C_COMPILER_ID}. Use the just-built clang instead.\")\n  else()\n    message(WARNING \"Building the swift runtime using the host compiler, and not the just-built clang.\")\n\n    if(SWIFT_COMPILER_IS_MSVC_LIKE)\n      set(CMAKE_CXX_COMPILER \"${SWIFT_NATIVE_CLANG_TOOLS_PATH}/clang-cl\")\n      set(CMAKE_C_COMPILER \"${SWIFT_NATIVE_CLANG_TOOLS_PATH}/clang-cl\")\n    else()\n      set(CMAKE_CXX_COMPILER \"${SWIFT_NATIVE_CLANG_TOOLS_PATH}/clang++\")\n      set(CMAKE_C_COMPILER \"${SWIFT_NATIVE_CLANG_TOOLS_PATH}/clang\")\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Forwarding Enum Payloads in switch_enum in Swift SIL (Swift)\nDESCRIPTION: This snippet demonstrates how a SIL terminator instruction (switch_enum) forwards a value (payload) to a successor block's argument. It highlights the use of case-based control flow, where successor blocks may accept values depending on the matched enum case. Requires proper enum typing and block argument matching as enforced by the SIL checker.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\n      ...\n      switch_enum %1, case #Optional.some!enumelt: bb1, default: bb2\n    bb1(%term_result : $Int):\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Marchen Script\nDESCRIPTION: This snippet defines the Unicode block for the Marchen script, including punctuation marks, letters, and various signs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_94\n\nLANGUAGE: Unicode\nCODE:\n```\n11C70..11C71  ; Marchen # Po   [2] MARCHEN HEAD MARK..MARCHEN MARK SHAD\n11C72..11C8F  ; Marchen # Lo  [30] MARCHEN LETTER KA..MARCHEN LETTER A\n11C92..11CA7  ; Marchen # Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA\n11CA9         ; Marchen # Mc       MARCHEN SUBJOINED LETTER YA\n11CAA..11CB0  ; Marchen # Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA\n11CB1         ; Marchen # Mc       MARCHEN VOWEL SIGN I\n11CB2..11CB3  ; Marchen # Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E\n11CB4         ; Marchen # Mc       MARCHEN VOWEL SIGN O\n11CB5..11CB6  ; Marchen # Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU\n```\n\n----------------------------------------\n\nTITLE: Defining a Differentiable Cubing Function in Swift (Swift)\nDESCRIPTION: This Swift function, annotated with @differentiable(wrt: x), defines a cubing operation. It's used to show how Swift and SIL generate differentiability witnesses and trigger automatic derivative synthesis when jvp: or vjp: functions are not manually specified. The function parameter is x and computes x cubed as output. Required: Swift with automatic differentiation support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\n@differentiable(wrt: x)\nfunc cubed(_ x: Float) -> Float {\n  return x * x * x\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compatibility Concurrency Library in CMake\nDESCRIPTION: Sets up a static Swift library called 'swiftCompatibilityConcurrency' with specific compilation flags, dependencies, and deployment requirements. The library is configured for Apple platforms and incorporates the swiftCompatibilityThreading object library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CompatibilityConcurrency/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(library_name \"swiftCompatibilityConcurrency\")\n\nadd_swift_target_library(\"${library_name}\" STATIC\n  CompatibilityConcurrency.cpp\n\n  TARGET_SDKS ${SWIFT_APPLE_PLATFORMS}\n\n  C_COMPILE_FLAGS\n    ${CXX_COMPILE_FLAGS}\n    \"-DSWIFT_THREADING_IS_COMPATIBILITY_LIBRARY\"\n  LINK_FLAGS ${CXX_LINK_FLAGS}\n  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n\n  INSTALL_IN_COMPONENT compiler\n  INSTALL_WITH_SHARED)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Single-Payload Enum Layout\nDESCRIPTION: Examples of single-payload enums showing how Swift represents cases with data by using the data type's binary representation and utilizing extra inhabitants for no-data cases when available.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nenum CharOrSectionMarker { => LLVM i32\n  case Paragraph            => i32 0x0020_0000\n  case Char(UnicodeScalar)  => i32 (zext i21 %Char to i32)\n  case Chapter              => i32 0x0020_0001\n}\n\nCharOrSectionMarker.Char('\\x00') => i32 0x0000_0000\nCharOrSectionMarker.Char('\\u10FFFF') => i32 0x0010_FFFF\n\nenum CharOrSectionMarkerOrFootnoteMarker { => LLVM i32\n  case CharOrSectionMarker(CharOrSectionMarker) => i32 %CharOrSectionMarker\n  case Asterisk                                 => i32 0x0020_0002\n  case Dagger                                   => i32 0x0020_0003\n  case DoubleDagger                             => i32 0x0020_0004\n}\n```\n\n----------------------------------------\n\nTITLE: Toolchain Activation Command for macOS\nDESCRIPTION: Command to activate the swift.org toolchain on macOS by setting the TOOLCHAINS environment variable.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export TOOLCHAINS=$(plutil -extract CFBundleIdentifier raw /Library/Developer/Toolchains/swift-latest.xctoolchain/Info.plist)\n```\n\n----------------------------------------\n\nTITLE: Installing Static Stdlib Args Link File\nDESCRIPTION: Installs the generated static-stdlib-args.lnk file to the appropriate lib/swift_static directory. This file provides necessary linker arguments for statically linking the Swift standard library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/runtime/CMakeLists.txt#2025-04-23_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n    swift_install_in_component(FILES \"${SWIFTSTATICLIB_DIR}/${linkfile}\"\n      DESTINATION \"lib/swift_static/${lib_dir}\"\n      COMPONENT stdlib)\n```\n\n----------------------------------------\n\nTITLE: Configuring sourcekitdInProc Build for Darwin Systems in CMake\nDESCRIPTION: This snippet sets up the build configuration for sourcekitdInProc on Darwin systems. It adds a SourceKit framework, sets link flags, and adds definitions based on the deployment OS.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif (SOURCEKIT_INSTALLING_INPROC)\n  if(\"${CMAKE_SYSTEM_NAME}\" STREQUAL \"Darwin\")\n    add_sourcekit_framework(sourcekitdInProc\n      ${SOURCEKITD_SOURCE_DIR}/include/sourcekitd/sourcekitd.h\n      ${SOURCEKITD_SOURCE_DIR}/include/sourcekitd/plugin.h\n      ${CMAKE_CURRENT_SOURCE_DIR}/CodeCompletionSwiftInterop.h\n      ${sourcekitdInProc_args}\n      MODULEMAP module.modulemap\n      INSTALL_IN_COMPONENT sourcekit-inproc\n      HAS_SWIFT_MODULES\n    )\n    set_property(TARGET sourcekitdInProc APPEND_STRING PROPERTY LINK_FLAGS \" -fapplication-extension\")\n    if (SOURCEKIT_DEPLOYMENT_OS MATCHES \"^macosx\")\n      add_definitions(-DSOURCEKIT_VERSIONED_FRAMEWORK_BUNDLE)\n    else()\n      add_definitions(-DSOURCEKIT_UNVERSIONED_FRAMEWORK_BUNDLE)\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Illustrating Limitations of CSE with Readonly Functions in Swift\nDESCRIPTION: This code demonstrates a scenario where Common Subexpression Elimination (CSE) cannot be applied to calls of a `readonly` function (`lookup2`). Although `lookup2` only reads memory, the state it reads (`instance.i`) is modified between the two calls. Therefore, the results of the two calls may differ, making CSE invalid.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\n```swift\n  let a = lookup2(instance)\n  instance.i += 1\n  let b = lookup2(instance)   // cannot be CSE'd with the first call\n```\n```\n\n----------------------------------------\n\nTITLE: Analyzing Type Changes in Swift API\nDESCRIPTION: This section details changes to types in Swift API, including modifications to accessors, associated types, classes, constructors, functions, and variables. It covers changes in return types, parameter types, and ownership.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n/* Type Changes */\ncake: Accessor Zoo.current.Get() has return type change from cake.Cat to cake.Dog\ncake: AssociatedType AssociatedTypePro.T3 has default type change from cake.C1 to cake.C6\ncake: Class TChangesFromIntToString has type witness type for AssociatedTypesProtocol.T changing from Swift.Int to Swift.String\ncake: Constructor S1.init(_:) has parameter 0 type change from Swift.Int to Swift.Double\ncake: Func C1.foo2(_:) has parameter 0 type change from Swift.Int to () -> ()\ncake: Func C7.foo(_:_:) has removed default argument from parameter 0\ncake: Func C7.foo(_:_:) has removed default argument from parameter 1\ncake: Func EscapingFunctionType.addedEscaping(_:) has added @escaping in parameter 0\ncake: Func EscapingFunctionType.removedEscaping(_:) has removed @escaping in parameter 0\ncake: Func Somestruct2.foo1(_:) has parameter 0 type change from cake.C3 to cake.C1\ncake: Func Zoo.getCurrentAnimalInlinable() has return type change from [cake.Cat] to [cake.Dog]\ncake: Func ownershipChange(_:_:) has parameter 0 changing from InOut to Default\ncake: Func ownershipChange(_:_:) has parameter 1 changing from Shared to Owned\ncake: Func returnFunctionTypeOwnershipChange() has return type change from (cake.C1) -> () to (__owned cake.C1) -> ()\ncake: Var Zoo.current has declared type change from cake.Cat to cake.Dog\n```\n\n----------------------------------------\n\nTITLE: Unicode Special Characters Without Precomposed Uppercase Forms\nDESCRIPTION: Defines case mappings for characters that don't have corresponding uppercase precomposed characters. These rules specify how to handle characters that require multiple code points when converted to uppercase or titlecase.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/SpecialCasing.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n0149; 0149; 02BC 004E; 02BC 004E; # LATIN SMALL LETTER N PRECEDED BY APOSTROPHE\n0390; 0390; 0399 0308 0301; 0399 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS\n03B0; 03B0; 03A5 0308 0301; 03A5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS\n01F0; 01F0; 004A 030C; 004A 030C; # LATIN SMALL LETTER J WITH CARON\n1E96; 1E96; 0048 0331; 0048 0331; # LATIN SMALL LETTER H WITH LINE BELOW\n1E97; 1E97; 0054 0308; 0054 0308; # LATIN SMALL LETTER T WITH DIAERESIS\n1E98; 1E98; 0057 030A; 0057 030A; # LATIN SMALL LETTER W WITH RING ABOVE\n1E99; 1E99; 0059 030A; 0059 030A; # LATIN SMALL LETTER Y WITH RING ABOVE\n1E9A; 1E9A; 0041 02BE; 0041 02BE; # LATIN SMALL LETTER A WITH RIGHT HALF RING\n1F50; 1F50; 03A5 0313; 03A5 0313; # GREEK SMALL LETTER UPSILON WITH PSILI\n1F52; 1F52; 03A5 0313 0300; 03A5 0313 0300; # GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA\n1F54; 1F54; 03A5 0313 0301; 03A5 0313 0301; # GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA\n1F56; 1F56; 03A5 0313 0342; 03A5 0313 0342; # GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI\n1FB6; 1FB6; 0391 0342; 0391 0342; # GREEK SMALL LETTER ALPHA WITH PERISPOMENI\n1FC6; 1FC6; 0397 0342; 0397 0342; # GREEK SMALL LETTER ETA WITH PERISPOMENI\n1FD2; 1FD2; 0399 0308 0300; 0399 0308 0300; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA\n1FD3; 1FD3; 0399 0308 0301; 0399 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n1FD6; 1FD6; 0399 0342; 0399 0342; # GREEK SMALL LETTER IOTA WITH PERISPOMENI\n1FD7; 1FD7; 0399 0308 0342; 0399 0308 0342; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI\n1FE2; 1FE2; 03A5 0308 0300; 03A5 0308 0300; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA\n1FE3; 1FE3; 03A5 0308 0301; 03A5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n1FE4; 1FE4; 03A1 0313; 03A1 0313; # GREEK SMALL LETTER RHO WITH PSILI\n1FE6; 1FE6; 03A5 0342; 03A5 0342; # GREEK SMALL LETTER UPSILON WITH PERISPOMENI\n1FE7; 1FE7; 03A5 0308 0342; 03A5 0308 0342; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI\n1FF6; 1FF6; 03A9 0342; 03A9 0342; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI\n```\n\n----------------------------------------\n\nTITLE: Using @differentiable(linear) with Implied Constraints in Swift\nDESCRIPTION: Shows how Swift adds implicit generic constraints for function types marked with @differentiable(linear), requiring parameters and return type to conform to Differentiable & AdditiveArithmetic and satisfy Self == Self.TangentVector.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_49\n\nLANGUAGE: swift\nCODE:\n```\n// With all explicit generic constraints:\nfunc foo<T: Differentiable & AdditiveArithmetic,\n         U: Differentiable & AdditiveArithmetic,\n         V: Differentiable & AdditiveArithmetic>(\n    _ f: @differentiable(linear) (T, U) -> V\n) where T.TangentVector == T, U.TangentVector == U, V.TangentVector == V\n{\n    ...\n}\n\n// With implied constraints:\n//     where T: Differentiable & AdditiveArithmetic,\n//           U: Differentiable & AdditiveArithmetic,\n//           V: Differentiable & AdditiveArithmetic,\n//           T.TangentVector == T,\n//           U.TangentVector == U,\n//           V.TangentVector == V\nfunc foo<T, U, V>(_ f: @differentiable(linear) (T, U) -> V) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Host Tool for Compatibility Symbols in CMake\nDESCRIPTION: Configures the build for the swift-compatibility-symbols tool which is used to generate compatibility symbols for Swift. The tool is compiled from C++ and depends on LLVM support components.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-compatibility-symbols/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(swift-compatibility-symbols\n  swift-compatibility-symbols.cpp\n  LLVM_LINK_COMPONENTS support\n  SWIFT_COMPONENT tools\n  DOES_NOT_USE_SWIFT\n)\n```\n\n----------------------------------------\n\nTITLE: Querying Function Creation/Deletion Delta per Stage/Pass in Swift Counters DB\nDESCRIPTION: This SQL query calculates the net change (delta) in the number of functions for each unique combination of optimization pipeline stage (`C.Stage`) and transformation pass (`C.Transform`). It sums the `Delta` for module-level function counters (`C.counter = 'functions'`, `C.kind = 'module'`) grouped by both stage and transformation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect C.Stage, C.Transform, sum(C.Delta)\nfrom Counters C where C.counter = 'functions' and C.kind = 'module'\ngroup by C.Stage, C.Transform;\n```\n\n----------------------------------------\n\nTITLE: Defining SourceKitSwiftLang Library in CMake\nDESCRIPTION: This snippet defines the SourceKitSwiftLang library by specifying its source files and LLVM component dependencies. It includes various Swift language support source files and links against essential LLVM components for code generation, optimization, and debugging.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/lib/SwiftLang/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sourcekit_library(SourceKitSwiftLang\n  CodeCompletionOrganizer.cpp\n  SwiftASTManager.cpp\n  SwiftCompile.cpp\n  SwiftCompletion.cpp\n  SwiftConformingMethodList.cpp\n  SwiftDocSupport.cpp\n  SwiftEditor.cpp\n  SwiftEditorInterfaceGen.cpp\n  SwiftIndexing.cpp\n  SwiftLangSupport.cpp\n  SwiftMangling.cpp\n  SwiftSourceDocInfo.cpp\n  SwiftSyntacticMacroExpansion.cpp\n  SwiftTypeContextInfo.cpp\n    LLVM_LINK_COMPONENTS ${LLVM_TARGETS_TO_BUILD}\n      bitreader\n      bitwriter\n      coverage\n      debuginfodwarf\n      instrumentation\n      ipo\n      lto\n      mc\n      mcparser\n      option\n      objcarcopts\n      profiledata\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Generic Class in Swift\nDESCRIPTION: This snippet shows the definition of a simple generic class `MySwiftFunc<T>` in Swift. It illustrates the basic syntax for declaring a type that can work with any placeholder type `T`. The compiler generates code that handles different concrete types like `Int` or `String` potentially using type metadata and witness tables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizationTips.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nclass MySwiftFunc<T> { ... }\n\nMySwiftFunc<Int> X    // Will emit code that works with Int...\nMySwiftFunc<String> Y // ... as well as String.\n```\n\n----------------------------------------\n\nTITLE: Thread-Safe Shared Data Structure in Swift\nDESCRIPTION: This example demonstrates a thread-safe PrimesCache class that allows concurrent access to the isPrime method. It uses a critical section and inherits from the Sync class for thread safety.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nfinal class PrimesCache : Sync, Copyable {\n  var cache: [Int : Bool] = [:]\n\n  @_semantics(\"swift.concurrent.safe\")\n  func isPrime(_ num: Int) -> Bool {\n    return self.critical {\n      if let r = self.cache[num] { return r }\n      let b = calcIsPrime(num)\n      self.cache[num] = b\n      return b\n    }\n  }\n}\n\nfunc countPrimes(_ p: PrimesCache) -> Int {\n  var sum = 0\n  for i in 2..<10_000 where p.isPrime(i) { sum += 1 }\n  return sum\n}\n\nlet shared = PrimesCache()\nlet r1 = async(shared, callback: countPrimes)\nlet r2 = async(shared, callback: countPrimes)\n\nprint([r1.await(), r2.await()])\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Driver Components and Dependencies\nDESCRIPTION: CMake configuration that sets up the Swift driver library, defines its source files, establishes dependencies, and configures build options. Includes conditional compilation for standalone builds and LLVM integration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/DriverTool/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(driver_sources_and_options\n                driver.cpp\n                sil_opt_main.cpp\n                sil_func_extractor_main.cpp\n                sil_nm_main.cpp)\n\nset_swift_llvm_is_available(swiftDriverTool)\n\nif(NOT SWIFT_BUILT_STANDALONE)\n  add_dependencies(swiftDriverTool clang-resource-headers)\nendif()\n\nset(LLVM_TARGET_DEFINITIONS SwiftCacheToolOptions.td)\nswift_tablegen(SwiftCacheToolOptions.inc -gen-opt-parser-defs)\nswift_add_public_tablegen_target(SwiftCacheToolOptions)\n\nadd_dependencies(swiftDriverTool SwiftCacheToolOptions)\n\nif (SWIFT_BUILD_SWIFT_AST_GEN)\n  add_dependencies(swiftDriverTool swiftASTGen)\n  set_target_properties(swiftDriverTool PROPERTIES\n    SWIFT_AST_GEN_AVAILABLE TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Multi-Payload Enum with Additional Tag Bits\nDESCRIPTION: Example of a multi-payload enum that requires additional bits for the tag because there aren't enough spare bits available, showing how tag values are assigned in declaration order.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nclass Bignum {}\n\nenum IntDoubleOrBignum { => LLVM <{ i64, i2 }>\n  case Int(Int)           => <{ i64, i2 }> {           %Int,            0 }\n  case Double(Double)     => <{ i64, i2 }> { (bitcast  %Double to i64), 1 }\n  case Bignum(Bignum)     => <{ i64, i2 }> { (ptrtoint %Bignum to i64), 2 }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift IDE Test Tool Build\nDESCRIPTION: Defines the swift-ide-test tool build configuration with required source files and component settings. Specifies build options including THINLTO and Swift modules support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-ide-test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_tool(swift-ide-test\n  swift-ide-test.cpp\n  ModuleAPIDiff.cpp\n  XMLValidator.cpp\n  SWIFT_COMPONENT tools\n  THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY\n  HAS_SWIFT_MODULES\n)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating @_rawLayout Usage in Swift\nDESCRIPTION: This snippet shows how to use the @_rawLayout attribute to create custom memory layouts for structs. It compares the memory layout of a regular struct with two different @_rawLayout implementations, highlighting the differences in size and stride.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_23\n\nLANGUAGE: swift\nCODE:\n```\n// struct Weird has size 5, stride 8, alignment 4\nstruct Weird {\n    var x: Int32\n    var y: Int8\n}\n\n// struct LikeWeird has size 5, stride 8, alignment 4\n@_rawLayout(like: Weird)\nstruct LikeWeird { }\n\n// struct LikeWeirdSingleArray has **size 8**, stride 8, alignment 4\n@_rawLayout(likeArrayOf: Weird, count: 1)\nstruct LikeWeirdSingleArray { }\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Swift Function\nDESCRIPTION: This Swift code defines a generic function `generateArray`. It takes an integer `n` and a generator function `() -> T` as input and returns an array of type `[T]`. This example is used to illustrate how the `generator` function, returning a value of an unconstrained generic type `T`, might need to store its result indirectly in SIL due to abstraction differences.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Types.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc generateArray<T>(n : Int, generator : () -> T) -> [T]\n```\n\n----------------------------------------\n\nTITLE: Exploring Property Accessor Representations in Swift\nDESCRIPTION: Mangled symbols for property accessors including a default override of a property modifier and its coroutine function pointer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\n$s7Library1BC1iSivxTwd ---> default override of Library.B.i.modify2 : Swift.Int\n$s7Library1BC1iSivxTwdTwc ---> coro function pointer to default override of Library.B.i.modify2 : Swift.Int\n```\n\n----------------------------------------\n\nTITLE: Configuring Embedded AVR Test Environment in CMake\nDESCRIPTION: This snippet sets up test configuration for embedded AVR targets when cross-compiling. It configures the testing environment with specific platform parameters for an ATmega2560 device using QEMU.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n  set(VARIANT_SUFFIX \"-embedded-avr\")\n  set(VARIANT_TRIPLE \"avr-none-none-elf\")\n  set(VARIANT_EXTERNAL_EMBEDDED_PLATFORM TRUE)\n  set(VARIANT_EXTERNAL_EMBEDDED_DEVICE \"avr-qemu-atmega2560\")\n  set(SWIFT_TEST_RESULTS_DIR \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/swift-test-results/${VARIANT_TRIPLE}\")\n  swift_configure_lit_site_cfg(\n      \"${CMAKE_CURRENT_SOURCE_DIR}/lit.site.cfg.in\"\n      \"${CMAKE_CURRENT_BINARY_DIR}${VARIANT_SUFFIX}/lit.site.cfg\"\n      \"test${VARIANT_SUFFIX}.lit.site.cfg\")\n  swift_generate_lit_swift_features_cfg(\"${CMAKE_CURRENT_BINARY_DIR}${VARIANT_SUFFIX}/lit.swift-features.cfg\")\n```\n\n----------------------------------------\n\nTITLE: Code Coverage Configuration\nDESCRIPTION: Conditionally adds code coverage instrumentation flags when Swift code coverage analysis is enabled, allowing for measuring test coverage of the sourcekitd-test tool.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_ANALYZE_CODE_COVERAGE)\n  set_property(TARGET sourcekitd-test APPEND_STRING PROPERTY\n    LINK_FLAGS \" -fprofile-instr-generate -fcoverage-mapping\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Throwing Function Mangling\nDESCRIPTION: Swift symbol mangling for throwing functions and error handling mechanisms. These examples show how Swift encodes error handling-related information in mangled symbols, including throwing initializers and reabstraction thunks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_6\n\nLANGUAGE: Swift\nCODE:\n```\n_TFC3red11BaseClassEHcfzT1aSi_S0_ ---> red.BaseClassEH.init(a: Swift.Int) throws -> red.BaseClassEH\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TTRXFo_iT__iT_zoPs5Error__XFo__dT_zoPS___ ---> reabstraction thunk helper from @callee_owned () -> (@unowned (), @error @owned Swift.Error) to @callee_owned (@in ()) -> (@out (), @error @owned Swift.Error)\n```\n\n----------------------------------------\n\nTITLE: Formatting Signalled Message for Abnormal Task Termination\nDESCRIPTION: Demonstrates the structure of a 'signalled' message, used when a task exits abnormally due to a signal. It includes error information, signal details, and process usage data.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DriverParseableOutput.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n \"kind\": \"signalled\",\\n \"name\": \"compile\",\\n \"pid\": 12345,\\n \"error-message\": \"Segmentation fault: 11\",\\n \"signal\": 4,\\n \"process\": {\\n   \"real_pid\": 12345,\\n   \"usage\": {\\n     \"utime\": 22740,\\n     \"stime\": 91107,\\n     \"maxrss\": 7745536\\n   }\\n  }\\n // \"output\" key omitted because there was no stdout/stderr.\\n}\n```\n\n----------------------------------------\n\nTITLE: Tool Dependencies and Installation\nDESCRIPTION: Adds sourcekitd-test to the tools dependency list and configures installation parameters, specifying the binary should be installed in the bin directory as part of the tools component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd-test/CMakeLists.txt#2025-04-23_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nadd_dependencies(tools sourcekitd-test)\nswift_install_in_component(TARGETS sourcekitd-test\n  RUNTIME DESTINATION bin COMPONENT tools)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Swift Multi-Payload Enum with Spare Bits\nDESCRIPTION: Example of a multi-payload enum that utilizes spare bits to store tag information, showing how bits are scattered in the available bit space of primitive integer types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/TypeLayout.rst#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nenum TerminalChar {             => LLVM i32\n  case Plain(UnicodeScalar)     => i32     (zext i21 %Plain     to i32)\n  case Bold(UnicodeScalar)      => i32 (or (zext i21 %Bold      to i32), 0x0020_0000)\n  case Underline(UnicodeScalar) => i32 (or (zext i21 %Underline to i32), 0x0040_0000)\n  case Blink(UnicodeScalar)     => i32 (or (zext i21 %Blink     to i32), 0x0060_0000)\n  case Empty                    => i32 0x0080_0000\n  case Cursor                   => i32 0x0080_0001\n}\n```\n\n----------------------------------------\n\nTITLE: Final Rerolled Loop with Optimized Reference Counting\nDESCRIPTION: The final optimized form after rerolling the loop with retain/release pairs hoisted out of the loop and compensating releases added to handle early exits correctly.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_14\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  strong_retain %0 : $Builtin.NativeObject               (1)\n  br bb1\n\n# Iteration 1\nbb1: // preds: bb0\n  cond_br ..., bb2, bb8\n\nbb2:\n  apply %f(%0)\n  apply %f(%0)\n  cond_br bb1, bb7\n\nbb7:\n  strong_release %0 : $Builtin.NativeObject              (7*)\n  br bb9\n\nbb8: // Preds: bb1, bb3, bb5, bb6\n  strong_release %0 : $Builtin.NativeObject              (8*)\n  br bb9\n\nbb9:\n  return ...\n```\n\n----------------------------------------\n\nTITLE: Configuring LLVM TableGen for Swift Compiler Options\nDESCRIPTION: Sets up LLVM TableGen to generate Swift compiler options. It specifies the input definitions file, generates option parser definitions, and creates a public target for Swift options that can be used by other parts of the build system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/include/swift/Option/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(LLVM_TARGET_DEFINITIONS Options.td)\nswift_tablegen(Options.inc -gen-opt-parser-defs)\nswift_add_public_tablegen_target(SwiftOptions)\n```\n\n----------------------------------------\n\nTITLE: Usage Example for Future Move-Only Swift Types\nDESCRIPTION: Demonstrates how move-only C++ classes would be used in Swift once native move-only types are supported. Shows moving objects with the move() function and compile-time errors when accessing moved values.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\n// Usage example.\n\nfunc useOneFile(_ f: File) {\n  print(f.ReadAll()) // OK\n\n  // Move `f` to a different memory location.\n  var f2 = move(f)\n\n  // print(f.ReadAll()) // compile-time error: can't access `f`, its value was moved\n\n  print(f2.ReadAll()) // OK\n  endScope(f2) // OK\n  // The file is closed now.\n}\n\nfunc useTwoFiles(_ files: TwoFiles) {\n  print(files.first.ReadAll()) // OK\n}\n```\n\n----------------------------------------\n\nTITLE: Showing SILFunctionArguments in Lowered SIL\nDESCRIPTION: This snippet displays the SILFunctionArgument list for the `foo` closure's definition in Lowered SIL. It demonstrates how lowering introduces an indirect result argument (*T) at index #0, shifting the original parameters to indices #1 (Int) and #2 (T). The direct return type becomes Int.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILFunctionConventions.md#2025-04-23_snippet_3\n\nLANGUAGE: sil\nCODE:\n```\n```\nSILFunctionArguments: (#0: *T, #1: Int, #2: T) -> Int\n```\n```\n\n----------------------------------------\n\nTITLE: Repeat Instruction Format\nDESCRIPTION: Bit layout for the repeat instruction used to compress repeated frame patterns in the backtrace.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CompactBacktraceFormat.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n   7   6   5   4   3   2   1   0\n ┌────────────────┬───┬──────────┐\n │ 1   0   0   0  │ x │ count    │ repeat\n └────────────────┴───┴──────────┘\n```\n\n----------------------------------------\n\nTITLE: Filesystem Support Validation in Swift Runtime\nDESCRIPTION: Validates that necessary architecture and platform subdirectory variables are set when filesystem support is enabled. These are required for the runtime to properly locate the backtracer.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/runtime/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# runtime/Paths.cpp uses `SWIFT_ARCH` and `SWIFT_LIB_SUBDIR` to find the\n# subdirectory under `libexec` in which to find the backtracer.\n# Fail the configuration if it isn't set appropriately.\n# TODO: In the future, we might consider moving the backtracer up to\n# `libexec/swift` and drop the platform/architecture specific subdirectories\nif(SwiftCore_ENABLE_FILESYSTEM_SUPPORT AND (NOT SwiftCore_ARCH_SUBDIR OR NOT SwiftCore_PLATFORM_SUBDIR))\n  message(SEND_ERROR \"Filesystem support requires setting `SwiftCore_ARCH_SUBDIR` and `SwiftCore_PLATFORM_SUBDIR`\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Default for Including API Notes based on OS in CMake\nDESCRIPTION: Sets a temporary CMake variable `_swift_include_apinotes_default`. It defaults to FALSE, but is set to TRUE if the target system is Darwin (macOS/iOS/etc.). This variable is used later to set the default value for the `SWIFT_INCLUDE_APINOTES` option.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_13\n\nLANGUAGE: cmake\nCODE:\n```\nset(_swift_include_apinotes_default FALSE)\nif(CMAKE_SYSTEM_NAME STREQUAL \"Darwin\")\n  set(_swift_include_apinotes_default TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Swift Mangled Symbol Reference\nDESCRIPTION: Collection of Swift mangled symbols and their demangled interpretations, demonstrating various patterns used in the Swift ABI mangling scheme including function signatures, protocols, generics, and special runtime records.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\n_T08_ElementQzSbs5Error_pIxxdzo_ABSbsAC_pIxidzo_s26RangeReplaceableCollectionRzABRLClTR\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T0Ix_IyB_Tr\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_T0s18EnumeratedIteratorVyxGs8Sequencess0B8ProtocolRzlsADP5splitSay03SubC0QzGSi9maxSplits_Sb25omittingEmptySubsequencesSb7ElementQzKc14whereSeparatortKFTW\n```\n\nLANGUAGE: Swift\nCODE:\n```\n$S28protocol_conformance_records15NativeValueTypeVAA8RuncibleAAMc\n```\n\nLANGUAGE: Swift\nCODE:\n```\n$s20mangling_retroactive5test0yyAA1ZVy12RetroactiveB1XVSiAE1YVAG0D1A1PHPyHCg_AiJ1QHPyHCg1_GF\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Source Checkout on OpenBSD (JSON)\nDESCRIPTION: A JSON configuration file used with the `update-checkout` script's `--config` flag. It defines the specific repositories (cmark, llvm-project, swift) and branches (e.g., main, stable/20211026) needed to fetch the correct source code versions for building Swift on OpenBSD.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OpenBSD.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ssh-clone-pattern\": \"git@github.com:%s.git\",\n  \"https-clone-pattern\": \"https://github.com/%s.git\",\n  \"default-branch-scheme\": \"main\",\n  \"repos\": {\n    \"cmark\": { \"remote\": { \"id\": \"swiftlang/swift-cmark\" } },\n    \"llvm-project\": { \"remote\": { \"id\": \"swiftlang/llvm-project\" } },\n    \"swift\": { \"remote\": { \"id\": \"swiftlang/swift\" } }\n  },\n  \"branch-schemes\": {\n    \"main\": {\n      \"aliases\": [ \"main\", \"swift/main\" ],\n      \"repos\": {\n        \"cmark\": \"main\",\n        \"llvm-project\": \"stable/20211026\",\n        \"swift\": \"main\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Previous Build Artifacts for BOOTSTRAPPING-WITH-HOSTLIBS Mode in CMake\nDESCRIPTION: This conditional block executes only if `BOOTSTRAPPING_MODE` is exactly `BOOTSTRAPPING-WITH-HOSTLIBS`. It searches for potentially conflicting Swift module directories (`*.swiftmodule`) left over from previous 'bootstrapping' builds within the build directory's bootstrapping subdirectories and removes them recursively to ensure a clean build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/CMakeLists.txt#2025-04-23_snippet_12\n\nLANGUAGE: cmake\nCODE:\n```\nif(BOOTSTRAPPING_MODE STREQUAL \"BOOTSTRAPPING-WITH-HOSTLIBS\")\n      file(GLOB module_dirs \"${CMAKE_BINARY_DIR}/bootstrapping*/lib/swift/macosx/*.swiftmodule\")\n      foreach(module_dir ${module_dirs})\n        message(WARNING \"${module_dir} found from a previous 'bootstrapping' build: removing\")\n        file(REMOVE_RECURSE \"${module_dir}\")\n      endforeach()\n    endif()\n```\n\n----------------------------------------\n\nTITLE: Executing SIL Bug Reducer with Swift Build Directory and SIB File\nDESCRIPTION: This snippet demonstrates how to run the bug_reducer.py script with various options, including specifying the SDK path, module name, work directory, and module cache. It uses the Swift build directory and a SIB file as input.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/bug_reducer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n./swift/utils/bug-reducer/bug_reducer.py \\\n    opt \\\n    --sdk=$(xcrun --sdk macosx --toolchain default --show-sdk-path) \\\n    --module-name=${MODULE_NAME} \\\n    --work-dir=${PWD}/bug_reducer \\\n    --module-cache=${PWD}/bug_reducer/module-cache \\\n    ${SWIFT_BUILD_DIR} \\\n    ${SIB_FILE}\n```\n\n----------------------------------------\n\nTITLE: Setting GYB Line Directive Flags for Cross-Platform Swift Build\nDESCRIPTION: Configures the SWIFT_GYB_FLAGS variable with platform-specific line directive formatting. Handles Windows and non-Windows systems differently due to escaping requirements. The flags are used by GYB to generate appropriate line directives in the output files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/include/swift/AST/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Windows\")\n  set(SWIFT_GYB_FLAGS --line-directive \"^\\\"#line %(line)d \\\\\\\"%(file)s\\\\\\\"^\\\"\")\nelse()\n  set(SWIFT_GYB_FLAGS --line-directive \"'#line\" \"%(line)d\" \"\\\"%(file)s\\\"'\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Resolving Strong Reference Cycles with Weak References\nDESCRIPTION: This code defines the Person and Apartment classes with a weak reference in the Apartment class to avoid a reference cycle. The weak keyword indicates that the tenant property doesn't keep a strong hold on the referenced Person instance.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/remote-run/Inputs/upload/3.txt#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nclass Person {\n    let name: String\n    var apartment: Apartment?\n    \n    init(name: String) {\n        self.name = name\n    }\n    \n    deinit {\n        print(\"\\(name) is being deinitialized\")\n    }\n}\n\nclass Apartment {\n    let unit: String\n    weak var tenant: Person?\n    \n    init(unit: String) {\n        self.unit = unit\n    }\n    \n    deinit {\n        print(\"Apartment \\(unit) is being deinitialized\")\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining await_async_continuation Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax and behavior of the await_async_continuation instruction, which suspends execution of an @async function until a continuation is resumed. It includes details on successor blocks and handling of different continuation types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_195\n\nLANGUAGE: sil\nCODE:\n```\nsil-terminator ::= 'await_async_continuation' sil-value\n                      ',' 'resume' sil-identifier\n                      (',' 'error' sil-identifier)?\n\nawait_async_continuation %0 : $UnsafeContinuation<T>, resume bb1\nawait_async_continuation %0 : $UnsafeThrowingContinuation<T>, resume bb1, error bb2\n\nbb1(%1 : @owned $T):\nbb2(%2 : @owned $Error):\n```\n\n----------------------------------------\n\nTITLE: Illustrating SILFunctionType for a Closure\nDESCRIPTION: This snippet shows the SILFunctionType for the closure `foo` defined in the Swift example. It represents the function's signature before lowering, indicating two direct formal parameters (#0: Int, #1: T) and one direct formal result of a tuple type, returned indirectly via @out.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILFunctionConventions.md#2025-04-23_snippet_1\n\nLANGUAGE: sil\nCODE:\n```\n```\nSILFunctionType(foo): (#0: Int, #1: T) -> @out (Int, T)\n```\n```\n\n----------------------------------------\n\nTITLE: Analyzing Function Uses Inter-procedurally in Swift\nDESCRIPTION: Provides the `FunctionUses` utility, which analyzes all functions within a module to collect a list of instructions that reference (call or take the address of) any given function. This enables inter-procedural caller analysis. It relates to the `CallerAnalysis` utility in C++. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nFunctionUses\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Differential Operators in Swift\nDESCRIPTION: Defines the fundamental differential operators valueWithDifferential and transpose that serve as the basis for all other differentiation APIs in Swift's differentiable programming system.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgramming.md#2025-04-23_snippet_53\n\nLANGUAGE: swift\nCODE:\n```\n/// Returns `body(x)` and the differential of `body` at `x`.\nfunc valueWithDifferential<T, R>(\n    at x: T, of body: @differentiable (T) -> R\n) -> (value: R,\n      differential: @differentiable(linear) (T.TangentVector) -> R.TangentVector) {\n    // Compiler built-in.\n    Builtin.applyDerivative_arity1(body, x)\n}\n\n\n/// Returns the transpose of the linear map `body`.\nfunc transpose<T, R>(\n    of body: @escaping @differentiable(linear) (T) -> R\n) -> @differentiable(linear) (R) -> T {\n    // Compiler built-in.\n    { x in Builtin.applyTranspose_arity1(body, x) }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Array COW Checks in Host Libraries Mode\nDESCRIPTION: Disables array Copy-On-Write (COW) checks when building Swift modules with host libraries. This ensures consistent behavior when using pre-existing libraries rather than building them from source.\nSOURCE: https://github.com/swiftlang/swift/blob/main/CMakeLists.txt#2025-04-23_snippet_61\n\nLANGUAGE: cmake\nCODE:\n```\nif(BOOTSTRAPPING_MODE MATCHES \"HOSTTOOLS|.*-WITH-HOSTLIBS\")\n  if(SWIFT_ENABLE_ARRAY_COW_CHECKS)\n    message(STATUS \"array COW checks disabled when building the swift modules with host libraries\")\n    set(SWIFT_ENABLE_ARRAY_COW_CHECKS FALSE)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Hangul Syllable Unicode Range Definitions - Group S\nDESCRIPTION: Unicode ranges for Hangul syllables starting with S consonant, including variations like SAG, SAEG, SYAG, etc. Each range specifies 27 consecutive code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakProperty.txt#2025-04-23_snippet_17\n\nLANGUAGE: unicode\nCODE:\n```\nC0AD..C0C7    ; LVT # Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH\nC0C9..C0E3    ; LVT # Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH\nC0E5..C0FF    ; LVT # Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH\n```\n\n----------------------------------------\n\nTITLE: Defining Pattern_White_Space Unicode Characters\nDESCRIPTION: This snippet defines Unicode code points for characters that are considered pattern white space. These include various control characters and space characters used in text processing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_28\n\nLANGUAGE: Unicode\nCODE:\n```\n0009..000D    ; Pattern_White_Space # Cc   [5] <control-0009>..<control-000D>\n0020          ; Pattern_White_Space # Zs       SPACE\n0085          ; Pattern_White_Space # Cc       <control-0085>\n200E..200F    ; Pattern_White_Space # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n2028          ; Pattern_White_Space # Zl       LINE SEPARATOR\n2029          ; Pattern_White_Space # Zp       PARAGRAPH SEPARATOR\n```\n\n----------------------------------------\n\nTITLE: Running Swift Tests with lit.py\nDESCRIPTION: These commands demonstrate how to run Swift tests using the lit.py script directly, which doesn't rebuild dependencies. It includes examples for running all tests and filtering tests.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\n# Run all tests under test/.\n../llvm-project/llvm/utils/lit/lit.py -s -vv \\\n  ../build/Ninja-RelWithDebInfoAssert/swift-macosx-$(uname -m)/test-macosx-$(uname -m)\n\n# Run tests containing \"MyTest\"\n../llvm-project/llvm/utils/lit/lit.py -s -vv \\\n  ../build/Ninja-RelWithDebInfoAssert/swift-macosx-$(uname -m)/test-macosx-$(uname -m) \\\n  --filter=\"MyTest\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Entitlements for macOS Backtrace Support\nDESCRIPTION: XML property list file for enabling the com.apple.security.get-task-allow entitlement, which is required for the backtracer to work on macOS when not using Xcode.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Backtracing.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\"\n  \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n<key>com.apple.security.get-task-allow</key>\n<true/>\n</dict>\n</plist>\n```\n\n----------------------------------------\n\nTITLE: Creating Swift Standard Library Target Groups in CMake\nDESCRIPTION: Function to create grouped targets for different SDK and architecture combinations when building the Swift standard library. Handles variant suffixes and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(swift_create_stdlib_targets name variant define_all_alias)\n  if(NOT variant STREQUAL \"\")\n    set(variant \"-${variant}\")\n  endif()\n\n  if(define_all_alias)\n    add_custom_target(${name}${variant}-all)\n    set_target_properties(${name}${variant}-all\n      PROPERTIES\n      FOLDER \"Swift libraries/Aggregate\")\n  endif()\n\n  foreach(sdk ${SWIFT_SDKS})\n    add_custom_target(${name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}${variant})\n    set_target_properties(${name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}${variant}\n      PROPERTIES\n      FOLDER \"Swift libraries/Aggregate\")\n\n    foreach(arch ${SWIFT_SDK_${sdk}_ARCHITECTURES})\n      set(target_variant -${SWIFT_SDK_${sdk}_LIB_SUBDIR}-${arch})\n\n      add_custom_target(${name}${target_variant}${variant})\n      set_target_properties(${name}${target_variant}${variant}\n        PROPERTIES\n        FOLDER \"Swift libraries/Aggregate\")\n      if(define_all_alias)\n        add_dependencies(${name}${variant}-all\n          ${name}${target_variant}${variant})\n      endif()\n      add_dependencies(${name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}${variant}\n        ${name}${target_variant}${variant})\n    endforeach()\n  endforeach()\n\n  if(NOT define_all_alias)\n    set(ALL_keyword ALL)\n  endif()\n\n  if(SWIFT_PRIMARY_VARIANT_SDK IN_LIST SWIFT_SDKS)\n    add_custom_target(${name}${variant}\n      ${ALL_keyword}\n      DEPENDS\n      ${name}${SWIFT_PRIMARY_VARIANT_SUFFIX}${variant})\n    set_target_properties(${name}${variant}\n      PROPERTIES\n      FOLDER \"Swift libraries/Aggregate\")\n  else()\n    message(WARNING \"Primary variant ${SWIFT_PRIMARY_VARIANT_SDK} is not being built, not creating ${name}${variant} alias target for it.\")\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configure LLVM Availability\nDESCRIPTION: Sets up LLVM availability configuration for the Swift driver library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Driver/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_swift_llvm_is_available(swiftDriver)\n```\n\n----------------------------------------\n\nTITLE: Alternative Loop Pattern with Early Exits for Reference Counting\nDESCRIPTION: Another loop pattern example where retain/release pairs need to be carefully managed when moved across early exit points to maintain correct reference counts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_10\n\nLANGUAGE: sil\nCODE:\n```\nbb0(%0 : $Builtin.NativeObject):\n  br bb1\n\nbb1:\n  cond_br ..., bb2, bb3\n\nbb2:\n  strong_retain %0 : $Builtin.NativeObject\n  apply %f(%0)\n  apply %f(%0)\n  strong_release %0 : $Builtin.NativeObject\n  cond_br ..., bb1, bb4\n\nbb3:\n  br bb5\n\nbb4:\n  br bb5\n\nbb6:\n  return ...\n```\n\n----------------------------------------\n\nTITLE: Defining Debug and Conformance Witness Manglings in Swift\nDESCRIPTION: Specifies mangling patterns for debugger type information, continuation prototypes, and various conformance witness thunks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_9\n\nLANGUAGE: Swift\nCODE:\n```\nglobal ::= type label-list? 'D'        // type mangling for the debugger with label list for function types.\nglobal ::= type 'TC'                   // continuation prototype (not actually used for real symbols)\nglobal ::= protocol-conformance entity 'TW' // protocol witness thunk\nglobal ::= entity 'TS'                 // protocol self-conformance witness thunk\nglobal ::= context identifier identifier 'TB' // property behavior initializer thunk (not used currently)\nglobal ::= context identifier identifier 'Tb' // property behavior setter thunk (not used currently)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Rejang Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Rejang script, including letters, vowel signs, consonant signs, and a section mark. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_50\n\nLANGUAGE: Unicode\nCODE:\n```\nA930..A946    ; Rejang # Lo  [23] REJANG LETTER KA..REJANG LETTER A\nA947..A951    ; Rejang # Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R\nA952..A953    ; Rejang # Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA\nA95F          ; Rejang # Po       REJANG SECTION MARK\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Access Conflict in Swift\nDESCRIPTION: Example code showing how nested access to the same variable through inout parameters can create conflicts not evident in the caller. The conflict occurs in hasNestedAccess when passing the same variable to both inout parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc takesTwoInouts(_ : inout Int, _ : inout Int) -> () {}\n\nfunc hasNestedAccess(_ x : inout Int) -> () {\n  takesTwoInouts(&x, &x)\n}\n\nvar x = 0\nhasNestedAccess(&x)\n```\n\n----------------------------------------\n\nTITLE: Default Arguments with Trailing Closures in Swift\nDESCRIPTION: Shows how the forward scanning rule handles parameters with default values and demonstrates the structural resemblance rules for function types.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/trailing-closure-matching.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nfunc animate(\n  withDuration duration: Double = 1.0, \n  animations: () -> Void, \n  completion: (() -> Void)? = nil\n) { /* ... */ }\n\nanimate {\n  // Animate something.\n  //\n  // The closure is not matched to `withDuration` but to `animations` because\n  // the first parameter doesn't structurally resemble a function type.\n  //\n  // If, in place of `withDuration`, there is a parameter with a default value\n  // that does structurally resemble a function type, the closure would still be\n  // matched to `animations` because it requires an argument while the first\n  // parameter does not.\n}\n```\n\n----------------------------------------\n\nTITLE: Using @concurrent and nonisolated(nonsending) in Swift for Actor Execution Control\nDESCRIPTION: This demonstrates the two key modifiers for controlling async function execution in relation to actors. The @concurrent attribute forces a function to run off the caller's actor, while nonisolated(nonsending) ensures execution on the caller's actor.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/async-caller-execution.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n* The `@concurrent` attribute specifies that a function must always \n  switch off of an actor to run.\n  This is the default behavior without `AsyncCallerExecution`.\n* The `nonisolated(nonsending)` modifier specifies that a function must always \n  run on the caller's actor.\n  This is the default behavior with `AsyncCallerExecution`.\n```\n\n----------------------------------------\n\nTITLE: Adding GYB Target for Sorted CF Database\nDESCRIPTION: Adds a GYB target to generate the SortedCFDatabase.def file. This target depends on the CFDatabase.def file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/ClangImporter/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_gyb_target(generated_sorted_cf_database\n    SortedCFDatabase.def.gyb\n    DEPENDS \"${SWIFT_SOURCE_DIR}/lib/ClangImporter/CFDatabase.def\")\n```\n\n----------------------------------------\n\nTITLE: Declaring and Calling Functions with UnsafeMutableRawPointer Parameters in Swift\nDESCRIPTION: Examples showing how to declare a function taking an UnsafeMutableRawPointer parameter and the various ways to call it with different types, demonstrating its type-agnostic nature.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerInteropLanguageModel.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc bar(_ x: UnsafeMutableRawPointer)\n\nvar x: Float = 0.0, y: Int = 0\nvar p: UnsafeMutablePointer<Float> = nil, q: UnsafeMutablePointer<Int> = nil\nvar a: [Float] = [1.0, 2.0, 3.0], b: Int = [1, 2, 3]\nbar(nil)\nbar(p)\nbar(q)\nbar(&x)\nbar(&y)\nbar(&a)\nbar(&b)\n```\n\n----------------------------------------\n\nTITLE: Defining SingleInlineArray in Swift for SIL\nDESCRIPTION: Defines `SingleInlineArray`, an array data structure optimized for cases where the array usually contains only one element. The first element is stored inline to improve performance, making it useful for analyses that typically produce 1-to-1 mappings but occasionally 1-to-N mappings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nSingleInlineArray\n```\n\n----------------------------------------\n\nTITLE: Risky Async Method Call Causing Data Race in Swift\nDESCRIPTION: This example demonstrates code that triggers a 'sending risks causing data races' error. The Person class has an async method that runs off the Main actor, creating a potential data race when called from a Main actor-isolated function.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sending-risks-data-race.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass Person {\n  var name: String = \"\"\n    \n  func printNameConcurrently() async {\n    print(name)\n  }\n}\n\n@MainActor\nfunc onMainActor(person: Person) async {\n  await person.printNameConcurrently()\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Tail-Allocated Arrays in Classes in SIL\nDESCRIPTION: The ref_tail_addr instruction derives the address of the first element of the first tail-allocated array in a class instance. It is used with objects created by alloc_ref with tail_elems and supports an 'immutable' attribute.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_135\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'ref_tail_addr' '[immutable]'? sil-operand ',' sil-type\n\n%1 = ref_tail_addr %0 : $C, $E\n// %0 must be a value of class type $C with tail-allocated elements $E\n// %1 will be of type $*E\n```\n\n----------------------------------------\n\nTITLE: Linking SourceKit Support Library\nDESCRIPTION: Links the SourceKit Support library as a private dependency for the unit test target\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/SourceKit/Support/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(SourceKitSupportTests\n  PRIVATE\n  SourceKitSupport\n  )\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Segmentation Test Cases\nDESCRIPTION: These test cases demonstrate Unicode word segmentation rules for various character combinations. Each line represents a test case with character codes and their classifications, showing how word boundaries are determined.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 0061 ÷ 0027 × 2060 ÷ 000D ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n```\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 0061 ÷ 0027 × 2060 × 0308 ÷ 000D ÷  #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) ÷ [999.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [4.0] COMBINING DIAERESIS (Extend_FE) ÷ [3.2] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]\n```\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 0061 × 0027 × 2060 × 0041 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] LATIN CAPITAL LETTER A (ALetter) ÷ [0.3]\n```\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 0061 × 0027 × 2060 × 05D0 ÷ #  ÷ [0.2] LATIN SMALL LETTER A (ALetter) × [6.0] APOSTROPHE (Single_Quote) × [4.0] WORD JOINER (Format_FE) × [7.0] HEBREW LETTER ALEF (Hebrew_Letter) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed-Arity Zip Function without Variadic Generics in Swift\nDESCRIPTION: Illustrates the traditional way of implementing `zip` in Swift before variadic generics. It requires defining a specific struct (`Zip2Sequence`) and function overload for handling exactly two input sequences (`Sequence1`, `Sequence2`).\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/GenericsManifesto.md#2025-04-23_snippet_18\n\nLANGUAGE: Swift\nCODE:\n```\npublic struct Zip2Sequence<Sequence1 : Sequence,\n                           Sequence2 : Sequence> : Sequence { ... }\n\npublic func zip<Sequence1 : Sequence, Sequence2 : Sequence>(\n              sequence1: Sequence1, _ sequence2: Sequence2)\n            -> Zip2Sequence<Sequence1, Sequence2> { ... }\n```\n\n----------------------------------------\n\nTITLE: ARM64 Stack Frame Layout\nDESCRIPTION: Detailed layout of the stack frame structure showing the relationships between frame pointer (fp), stack pointer (sp), and memory arguments. The stack pointer is 16-byte aligned and includes local storage and red zone areas.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/CallingConventionSummary.rst#2025-04-23_snippet_2\n\nLANGUAGE: assembly\nCODE:\n```\nfp+8n+16    - last memory argument\n...\nfp+16       - memory argument 0\nfp+8        - saved lr (return address)\nfp          - previous fp value\nfp-8        - local storage\n...\nsp          - current stack pointer\nsp-8        - red zone\n...\nsp-128      - end of red zone\n```\n\n----------------------------------------\n\nTITLE: Defining a Transparent Function in Swift\nDESCRIPTION: The `@_transparent` attribute in Swift marks a function to be treated semantically as a primitive operation. It forces the function to be inlined before any dataflow-related diagnostics are performed, even when optimizations are disabled (`-Onone`). This implies the function is inlinable and should only reference public symbols if it is public or `@usableFromInline`.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/TransparentAttr.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@_transparent\n```\n\n----------------------------------------\n\nTITLE: Reproducing Apple Intel macOS Standard Library Build\nDESCRIPTION: Commands to reproduce a specific build configuration using a CMake cache file. This example shows how to build the Apple Intel macOS standard library with appropriate deployment target and sysroot settings.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Readme.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncmake -B build -S . -G Ninja \\\n    -DCMAKE_OSX_DEPLOYMENT_TARGET=15.3 \\\n    -DCMAKE_OSX_SYSROOT=macosx \\\n    -DCMAKE_Swift_COMPILER=<swiftc> \\\n    --toolchain cmake/caches/Vendors/Apple/Darwin.toolchain.cmake \\\n    -C cmake/caches/Vendors/Apple/x86_64-MacOSX.cmake\ncmake --build build\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Leak Suppressions for Swift Compiler and LLVM Tools\nDESCRIPTION: Suppression configuration that identifies specific memory leak patterns to be ignored during compiler development and testing. The file lists three patterns that should not trigger memory leak warnings: any leaks containing 'buildCompilation', any with 'llvm::TableGenMain', and leaks from 'llvm-tblgen'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/lsan_leaks_suppression_list.txt#2025-04-23_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\nleak:*buildCompilation*\nleak:*llvm::TableGenMain*\nleak:llvm-tblgen\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Host Plugins Directory Path in CMake\nDESCRIPTION: Defines the destination directory for host plugins/macros relative to the Swift host libraries destination directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Macros/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_HOST_PLUGINS_DEST_DIR ${SWIFT_HOST_LIBRARIES_DEST_DIR}/plugins)\n```\n\n----------------------------------------\n\nTITLE: Defining InstructionRange in Swift for SIL\nDESCRIPTION: Defines `InstructionRange`, which is analogous to `BasicBlockRange` but operates at the finer granularity of individual instructions. It defines a range of instructions within the control flow graph. It depends on `BasicBlockRange`. Related to C++ utilities `PrunedLiveness` and `ValueLifetimeAnalysis`. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nInstructionRange\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Reflection Tests for Darwin Variants\nDESCRIPTION: Configures Swift Reflection unit tests with specific SDK and architecture conditions. Sets up include directories, compile definitions, and links required libraries when building for Darwin variants.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Reflection/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif((\"${SWIFT_HOST_VARIANT_SDK}\" STREQUAL \"${SWIFT_PRIMARY_VARIANT_SDK}\") AND\n   (\"${SWIFT_HOST_VARIANT_ARCH}\" STREQUAL \"${SWIFT_PRIMARY_VARIANT_ARCH}\"))\n  if(SWIFT_HOST_VARIANT MATCHES \"${SWIFT_DARWIN_VARIANTS}\")\n    add_swift_unittest(SwiftReflectionTests\n      TypeRef.cpp)\n    target_include_directories(SwiftReflectionTests BEFORE PRIVATE\n      ${SWIFT_SOURCE_DIR}/stdlib/include)\n    target_compile_definitions(SwiftReflectionTests PRIVATE\n      SWIFT_INLINE_NAMESPACE=__runtime)\n    target_link_libraries(SwiftReflectionTests\n      PRIVATE\n      swiftRemoteInspection${SWIFT_PRIMARY_VARIANT_SUFFIX})\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Listing Type Changes in Swift API\nDESCRIPTION: This snippet documents various type changes in the Swift API, including modifications to associated types, constructor parameters, function parameters, and type aliases.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n/* Type Changes */\ncake: AssociatedType AssociatedTypePro.T3 has default type change from cake.C1 to cake.C6\ncake: Constructor S1.init(_:) has parameter 0 type change from Swift.Int to Swift.Double\ncake: Func C1.foo2(_:) has parameter 0 type change from Swift.Int to () -> ()\ncake: Func C7.foo(_:_:) has removed default argument from parameter 0\ncake: Func C7.foo(_:_:) has removed default argument from parameter 1\ncake: Func ownershipChange(_:_:) has parameter 0 changing from InOut to Default\ncake: Func ownershipChange(_:_:) has parameter 1 changing from Shared to Owned\ncake: TypeAlias TChangesFromIntToString.T has underlying type change from Swift.Int to Swift.String\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Compiler Flags for Core Library\nDESCRIPTION: Sets up various compiler flags for the Swift Core library, including experimental features, debug options, and memory safety checks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT \"${CMAKE_BUILD_TYPE}\" STREQUAL \"MinSizeRel\")\n  list(APPEND swift_stdlib_compile_flags \"-Xllvm\" \"-sil-inline-generics\")\n  list(APPEND swift_stdlib_compile_flags \"-Xllvm\" \"-sil-partial-specialization\")\nendif()\nif(SWIFT_STDLIB_ENABLE_STDLIBCORE_EXCLUSIVITY_CHECKING)\n  list(APPEND swift_stdlib_compile_flags \"-enforce-exclusivity=checked\")\nendif()\nif(SWIFT_STDLIB_ENABLE_DEBUG_PRECONDITIONS_IN_RELEASE)\n  list(APPEND swift_stdlib_compile_flags \"-DSWIFT_STDLIB_ENABLE_DEBUG_PRECONDITIONS_IN_RELEASE\")\nendif()\nset(compile_flags_for_final_build)\nif(SWIFT_ENABLE_ARRAY_COW_CHECKS)\n  list(APPEND compile_flags_for_final_build \"-DCOW_CHECKS_ENABLED\")\nendif()\n\nlist(APPEND swift_stdlib_compile_flags \"-Xfrontend\" \"-enable-experimental-concise-pound-file\")\n\nlist(APPEND swift_stdlib_compile_flags \"-enable-experimental-feature\" \"Macros\")\nlist(APPEND swift_stdlib_compile_flags \"-enable-experimental-feature\" \"FreestandingMacros\")\nlist(APPEND swift_stdlib_compile_flags \"-enable-experimental-feature\" \"Extern\")\nlist(APPEND swift_stdlib_compile_flags \"-enable-experimental-feature\" \"BitwiseCopyable\")\nlist(APPEND swift_stdlib_compile_flags \"-enable-experimental-feature\" \"ValueGenerics\")\nlist(APPEND swift_stdlib_compile_flags \"-enable-experimental-feature\" \"AddressableParameters\")\nlist(APPEND swift_stdlib_compile_flags \"-enable-experimental-feature\" \"AddressableTypes\")\nlist(APPEND swift_stdlib_compile_flags \"-enable-experimental-feature\" \"AllowUnsafeAttribute\")\nlist(APPEND swift_stdlib_compile_flags \"-strict-memory-safety\"\n```\n\n----------------------------------------\n\nTITLE: Unicode Combining Spacing Mark (Mc) Codepoints\nDESCRIPTION: Defines ranges of unicode codepoints that belong to the Mc (combining spacing mark) category. Includes marks from Siddham, Modi, Takri, Ahom, Dogra, and other scripts.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n115AF..115B1  ; Mc #   [3] SIDDHAM VOWEL SIGN AA..SIDDHAM VOWEL SIGN II\n115B8..115BB  ; Mc #   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU\n115BE         ; Mc #       SIDDHAM SIGN VISARGA\n[...additional ranges...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift CRT Library in CMake\nDESCRIPTION: Defines the swiftCRT library with its source files, sets the module name, and configures compile definitions and options. It also specifies dependencies on ClangModules and swiftCore.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Overlay/Windows/CRT/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(swiftCRT\n  tgmath.swift\n  ucrt.swift\n  Platform.swift\n  POSIXError.swift\n  TiocConstants.swift)\nset_target_properties(swiftCRT PROPERTIES\n  Swift_MODULE_NAME CRT)\ntarget_compile_definitions(swiftCRT PRIVATE\n  $<$<BOOL:${SwiftOverlay_ENABLE_REFLECTION}>:SWIFT_ENABLE_REFLECTION>)\ntarget_compile_options(swiftCRT PRIVATE\n  \"SHELL:-Xcc -D_USE_MATH_DEFINES\")\ntarget_link_libraries(swiftCRT PRIVATE\n  ClangModules\n  swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Unicode Apostrophe Definition\nDESCRIPTION: Defines the Single_Quote word break property for the apostrophe character (U+0027).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/WordBreakProperty.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n0027          ; Single_Quote # Po       APOSTROPHE\n```\n\n----------------------------------------\n\nTITLE: Controlling Inlining Behavior of SIL Functions in Swift (BNF)\nDESCRIPTION: Presents attributes '[noinline]' and '[always_inline]' to explicitly disable or enforce function inlining, respectively. These override the compiler's default heuristics, enabling fine-tuned performance or debugging strategies. Should be set with understanding of performance trade-offs.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/FunctionAttributes.md#2025-04-23_snippet_11\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-attribute ::= '[' sil-function-inlining ']'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-inlining ::= 'noinline'\n```\n\nLANGUAGE: bnf\nCODE:\n```\nsil-function-inlining ::= 'always_inline'\n```\n\n----------------------------------------\n\nTITLE: Access Path Example with Index and Struct Element\nDESCRIPTION: Example showing a more complex access path with both an index offset and a struct field access. The path notation (@1, #0) indicates index 1 followed by field 0.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILMemoryAccess.md#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nclass A {}\n\n%tail  = ref_tail_addr %ref : $A, $S\n%one   = integer_literal $Builtin.Word, 1\n%elt   = index_addr %tail : $*S, %one : $Builtin.Word\n%field = struct_element_addr %elt : $*S, $S.field0\n\nPath: (@1, #0)\n```\n\n----------------------------------------\n\nTITLE: Implementing Superclass Delegation in Swift Class Initialization\nDESCRIPTION: This example demonstrates Swift's two-phase initialization where a subclass must initialize all its instance variables before delegating to the superclass initializer with super.init(). This ensures the entire object hierarchy is properly initialized.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass A {\n  var x: Int\n\n  init(x: Int) {\n    self.x = x\n  }\n}\n\nclass B : A {\n  var value: String\n\n  init() {\n    value = \"Hello\"\n    super.init(5) // superclass delegation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Crashing the Compiler for Debugging in C++\nDESCRIPTION: Shows how to intentionally crash the compiler using LLVM's error reporting functions, after accumulating debug information in a string stream. This can be useful for debugging complex issues.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_37\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string msg; llvm::raw_string_ostream os(msg);\nos << \"unexpected canTypes = [\";\nllvm::interleaveComma(canTypes, os, [&](auto ty) { ty.dump(os); });\nos << \"] !!!\\n\";\nllvm::report_fatal_error(os.str());\n```\n\n----------------------------------------\n\nTITLE: Missing implementation for protocol requirements with deprecated defaults in Swift\nDESCRIPTION: This snippet shows warnings that occur when a conforming type relies on deprecated default implementations of protocol requirements instead of providing its own implementations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/deprecated-declaration.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nprotocol P {\n  func f()\n  func g()\n}\n\nextension P {\n  @available(*, deprecated)\n  func f() {}\n  @available(*, deprecated, message: \"write it yourself\")\n  func g() {}\n}\n\nstruct S: P {} // deprecated default implementation is used to satisfy instance method 'f()' required by protocol 'P'\n              // deprecated default implementation is used to satisfy instance method 'g()' required by protocol 'P': write it yourself\n```\n\n----------------------------------------\n\nTITLE: Demonstrating COW Mutation in Loop using SIL\nDESCRIPTION: Shows how a Copy-on-Write (COW) value is mutated within a loop in SIL, illustrating the use of phi arguments for buffer references.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL.md#2025-04-23_snippet_49\n\nLANGUAGE: sil\nCODE:\n```\nheader_block(%b_phi : $BufferClass):\n  (%u, %b_mutate) = begin_cow_mutation %b_phi : $BufferClass\n  // Store something to %b_mutate\n  %b_immutable = end_cow_mutation %b_mutate : $BufferClass\n  cond_br %loop_cond, exit_block, backedge_block\nbackedge_block:\n  br header_block(b_immutable : $BufferClass)\nexit_block:\n```\n\n----------------------------------------\n\nTITLE: Defining global_value Instruction in Swift SIL\nDESCRIPTION: Specifies the syntax for global_value which returns the value of an initialized global variable, with an optional bare attribute indicating the object header is not used throughout its lifetime.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_86\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'global_value' ('[' 'bare' ']')? sil-global-name ':' sil-type\n\n%1 = global_value @v : $T\n```\n\n----------------------------------------\n\nTITLE: Unsafe Swift Deinit Example with Potential Undefined Behavior\nDESCRIPTION: This snippet demonstrates a case where optimization could lead to undefined behavior. It uses unsafe operations to potentially access a deallocated object, highlighting the importance of careful optimization around deinits.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/ARCOptimization.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nfunc main() {\n  let c = C()\n  let d = unsafe_unowned_load(GLOBAL_D)\n  useC(c)\n  let owned_d = retain(d)\n  useD(owned_d)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hidden Frontend Help Flags for Swiftc (sh)\nDESCRIPTION: A shell command (`swiftc -frontend --help-hidden`) used to display hidden frontend-specific help options for the Swift compiler (`swiftc`). This reveals internal or less common flags related to the compiler's frontend. Requires `swiftc` to be installed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowToGuides/GettingStarted.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nswiftc -frontend --help-hidden\n```\n\n----------------------------------------\n\nTITLE: Begin Deallocation of Reference in Swift Intermediate Language (SIL)\nDESCRIPTION: The begin_dealloc_ref instruction explicitly sets the state of an object to deallocated. It marks the beginning of a de-virtualized destructor of a class and returns a new SSA value for the reference.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_54\n\nLANGUAGE: sil\nCODE:\n```\n%2 = begin_dealloc_ref %0 : $T of %1 : $V\n// $T and $V must be reference types where $T is or is derived from $V\n// %1 must be an alloc_ref or alloc_ref_dynamic instruction\n```\n\n----------------------------------------\n\nTITLE: Configuring SwiftSIL Target Sources in CMake\nDESCRIPTION: This CMake code snippet specifies the private source files to be included in the swiftSIL target. It lists several C++ files that implement various verifiers and checkers for Swift's SIL (Swift Intermediate Language).\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/SIL/Verifier/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_sources(swiftSIL PRIVATE\n  DebugInfoVerifier.cpp\n  LinearLifetimeChecker.cpp\n  MemoryLifetimeVerifier.cpp\n  GuaranteedPhiVerifier.cpp\n  SILOwnershipVerifier.cpp\n  SILVerifier.cpp)\n```\n\n----------------------------------------\n\nTITLE: Implementing deprecated protocol requirements in Swift\nDESCRIPTION: This example shows warnings generated when implementing protocol requirements that have been deprecated in favor of newer alternatives. The compiler suggests the newer requirements that should be implemented instead.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/deprecated-declaration.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nstruct S: Hashable {\n  var hashValue: Int { // 'Hashable.hashValue' is deprecated as a protocol requirement; conform type 'S' to 'Hashable' by implementing 'hash(into:)' instead\n    ...\n  }\n}\nfinal class C: Executor {\n  func enqueue(_ job: __owned Job) {} // 'Executor.enqueue(Job)' is deprecated as a protocol requirement; conform type 'C' to 'Executor' by implementing 'func enqueue(ExecutorJob)' instead\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Stdlib Stubs Library Target in CMake\nDESCRIPTION: Defines the swiftStdlibStubs library target using add_swift_target_library. Specifies source files, compile flags, link flags, and installation components for the library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/stubs/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_target_library(swiftStdlibStubs\n                  OBJECT_LIBRARY\n                    ${swift_stubs_sources}\n                    ${swift_stubs_objc_sources}\n                  GYB_SOURCES\n                    ${swift_stubs_gyb_sources}\n                  C_COMPILE_FLAGS\n                    ${swift_stubs_c_compile_flags}\n                  LINK_FLAGS\n                    ${SWIFT_RUNTIME_CORE_LINK_FLAGS}\n                  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n                  INSTALL_IN_COMPONENT\n                    stdlib)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Syriac Script\nDESCRIPTION: A listing of Unicode code point ranges for the Syriac script, showing the range, script name, Unicode category, count, and description for each entry. The data covers all Syriac characters including letters, punctuation, and diacritical marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n0700..070D    ; Syriac # Po  [14] SYRIAC END OF PARAGRAPH..SYRIAC HARKLEAN ASTERISCUS\n070F          ; Syriac # Cf       SYRIAC ABBREVIATION MARK\n0710          ; Syriac # Lo       SYRIAC LETTER ALAPH\n0711          ; Syriac # Mn       SYRIAC LETTER SUPERSCRIPT ALAPH\n0712..072F    ; Syriac # Lo  [30] SYRIAC LETTER BETH..SYRIAC LETTER PERSIAN DHALATH\n0730..074A    ; Syriac # Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH\n074D..074F    ; Syriac # Lo   [3] SYRIAC LETTER SOGDIAN ZHAIN..SYRIAC LETTER SOGDIAN FE\n0860..086A    ; Syriac # Lo  [11] SYRIAC LETTER MALAYALAM NGA..SYRIAC LETTER MALAYALAM SSA\n\n# Total code points: 88\n```\n\n----------------------------------------\n\nTITLE: Adding Swift Compatibility Library Targets to CMake ALL Target\nDESCRIPTION: This CMake script ensures that the Swift Compatibility library targets are included in the ALL target for each supported SDK. It iterates through the list of Swift SDKs and sets the EXCLUDE_FROM_ALL property to FALSE for each corresponding library target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/Compatibility56/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(sdk ${SWIFT_SDKS})\n  set(target_name \"${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n  if(NOT TARGET \"${target_name}\")\n    continue()\n  endif()\n\n  set_target_properties(\"${target_name}\"\n    PROPERTIES\n      EXCLUDE_FROM_ALL FALSE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Using Escape Analysis Utilities in Swift for SIL\nDESCRIPTION: Provides utilities for performing escape analysis on SIL values and addresses, commonly used in optimizations like stack promotion or alias analysis. Functionality is accessed via methods on `ProjectedValue` and `Value`, such as `isEscaping()`, `isAddressEscaping()`, `visit()`, and `visitAddress()`. These utilities depend on the Walk Utilities and `ProjectedValue`. They relate to `EscapeAnalysis` and various def-use walkers in C++. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nProjectedValue.isEscaping()\nProjectedValue.isAddressEscaping()\nProjectedValue.visit()\nProjectedValue.visitAddress()\nValue.isEscaping()\nValue.isAddressEscaping()\nValue.visit()\nValue.visitAddress()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Project Components with CMake\nDESCRIPTION: Configures the build system for Swift project components using CMake. Includes conditional compilation for SwiftRemoteMirror when SWIFT_BUILD_REMOTE_MIRROR is enabled, and AST/Option modules when SWIFT_INCLUDE_TOOLS is enabled. Also handles configuration file generation for Config.h.\nSOURCE: https://github.com/swiftlang/swift/blob/main/include/swift/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(Runtime)\n\nif(SWIFT_BUILD_REMOTE_MIRROR)\n  add_subdirectory(SwiftRemoteMirror)\nendif()\n\nif(SWIFT_INCLUDE_TOOLS)\n  configure_file(Config.h.in ${CMAKE_CURRENT_BINARY_DIR}/Config.h\n                ESCAPE_QUOTES @ONLY)\n  add_subdirectory(AST)\n  add_subdirectory(Option)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Swift Core Runtime\nDESCRIPTION: Sets up the CMake project for SwiftCore, including version information and language support. It also checks if the project is built as a top-level project.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.29)\n\nset(CMAKE_C_VISIBILITY_PRESET \"hidden\")\nset(CMAKE_CXX_VISIBILITY_PRESET \"hidden\")\nset(CMAKE_VISIBILITY_INLINES_HIDDEN YES)\n\nset(CMAKE_POSITION_INDEPENDENT_CODE YES)\n\nset(SwiftCore_CMAKE_MODULES_DIR \"${CMAKE_SOURCE_DIR}/cmake/modules\")\nlist(APPEND CMAKE_MODULE_PATH ${SwiftCore_CMAKE_MODULES_DIR})\n\ninclude(CMakeWorkarounds)\n# NOTE: always use the 3-component style as the expansion as\n# `${PROJECT_VERSION}` will not extend this to the complete form and this can\n# change the behaviour for comparison with non-SemVer compliant parsing. If\n# possible, use the 4-version component as that is used to differentiate the\n# builds of the runtime for Windows.\nif($ENV{BUILD_NUMBER})\n  # NOTE: SxS modules have a limit on each component being [0-65535].\n  # https://learn.microsoft.com/en-us/windows/win32/sbscs/assembly-versions\n  math(EXPR BUILD_NUMBER \"$ENV{BUILD_NUMBER} % 65535\")\n  set(BUILD_NUMBER \".${BUILD_NUMBER}\")\nendif()\nproject(SwiftCore\n  LANGUAGES C CXX Swift\n  VERSION 6.1.0${BUILD_NUMBER})\n\n# The Swift standard library is not intended for use as a sub-library as part of\n# another project. It is tightly coupled with the compiler version.\nif(NOT PROJECT_IS_TOP_LEVEL)\n  message(FATAL_ERROR \"Swift Core must build as a standalone project\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Reflection Fuzzer Host Tool with CMake\nDESCRIPTION: This CMake configuration adds a Swift fuzzer host tool named 'swift-reflection-fuzzer' and links it with the required libraries. It specifies the source file, required LLVM components, and component categorization within the Swift project structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-reflection-fuzzer/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_fuzzer_host_tool(swift-reflection-fuzzer\n  swift-reflection-fuzzer.cpp\n  LLVM_LINK_COMPONENTS support\n  SWIFT_COMPONENT testsuite-tools\n  )\ntarget_link_libraries(swift-reflection-fuzzer\n                      PRIVATE\n                        swiftRemoteInspection)\n```\n\n----------------------------------------\n\nTITLE: Defining Bidi_Control Characters in Unicode\nDESCRIPTION: This snippet defines the Unicode code points that have the Bidi_Control property. These characters are used for controlling bidirectional text.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_1\n\nLANGUAGE: unicode\nCODE:\n```\n061C          ; Bidi_Control # Cf       ARABIC LETTER MARK\n200E..200F    ; Bidi_Control # Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n202A..202E    ; Bidi_Control # Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n2066..2069    ; Bidi_Control # Cf   [4] LEFT-TO-RIGHT ISOLATE..POP DIRECTIONAL ISOLATE\n```\n\n----------------------------------------\n\nTITLE: Customizing C function names with swift_name\nDESCRIPTION: Shows how to customize parameter labels for C functions when imported into Swift. This enables creating more idiomatic Swift APIs that follow Swift naming conventions for parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CToSwiftNameTranslation.md#2025-04-23_snippet_18\n\nLANGUAGE: objc\nCODE:\n```\n__attribute__((swift_name(\"doSomething(to:bar:)\")))\nvoid doSomethingToFoo(Foo *foo, int bar);\n```\n\nLANGUAGE: swift\nCODE:\n```\nfunc doSomething(to foo: UnsafeMutablePointer<Foo>, bar: Int32)\n```\n\n----------------------------------------\n\nTITLE: Declaring and Calling Functions with AutoreleasingUnsafeMutablePointer Parameters in Swift\nDESCRIPTION: Examples showing how to declare a function taking an AutoreleasingUnsafeMutablePointer<NSBas?> parameter and the ways to call it, including passing nil, a pointer variable, or an inout expression.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerInteropLanguageModel.rst#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc bas(_ x: AutoreleasingUnsafeMutablePointer<NSBas?>)\n\nvar x: NSBas?\nvar p: AutoreleasingUnsafeMutablePointer<NSBas?> = nil\nbas(nil)\nbas(p)\nbas(&x)\n```\n\n----------------------------------------\n\nTITLE: Using inout Arguments for Non-Const Pointer Parameters in Swift\nDESCRIPTION: Shows how to use inout arguments in Swift to pass mutable scalar values to C functions expecting non-const pointer parameters. This approach requires initialization of variables before passing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nvar s, c: Double\n// error, 's' and 'c' aren't initialized\nsincos(0.5, &s, &c)\n\nvar s1 = 0.0, c1 = 0.0\n// OK\nsincos(0.5, &s1, &c1)\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Standard Library Component Build\nDESCRIPTION: Controls the build process for various Swift standard library components including core modules, experimental features, and platform-specific overlays based on build configuration flags.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_STDLIB)\n  add_subdirectory(runtime)\n  add_subdirectory(stubs)\n  add_subdirectory(core)\n  add_subdirectory(SwiftOnoneSupport)\n\n  if(SWIFT_BUILD_CLANG_OVERLAYS OR SWIFT_BUILD_TEST_SUPPORT_MODULES)\n    add_subdirectory(ClangOverlays)\n  endif()\n\n  if(SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY)\n    add_subdirectory(Concurrency)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Non-Local Memory Safety Issue with Addressors in Swift\nDESCRIPTION: This example shows how memory safety issues with addressors can occur through non-local modifications, making them harder to detect. The global variable modification invalidates the address being used.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nclass C { var array: [Int] }\nlet global_C = C()\n\nfunc assign(value: inout Int) {\n  C.array = []\n  value = 0\n}\n\nassign(&global_C.array[0])\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Multani Script\nDESCRIPTION: This snippet defines the Unicode block for the Multani script, including letters and a section mark.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_89\n\nLANGUAGE: Unicode\nCODE:\n```\n11280..11286  ; Multani # Lo   [7] MULTANI LETTER A..MULTANI LETTER GA\n11288         ; Multani # Lo       MULTANI LETTER GHA\n1128A..1128D  ; Multani # Lo   [4] MULTANI LETTER CA..MULTANI LETTER JJA\n1128F..1129D  ; Multani # Lo  [15] MULTANI LETTER NYA..MULTANI LETTER BA\n1129F..112A8  ; Multani # Lo  [10] MULTANI LETTER BHA..MULTANI LETTER RHA\n112A9         ; Multani # Po       MULTANI SECTION MARK\n```\n\n----------------------------------------\n\nTITLE: Implementing makeUnique and getElementAddr Methods in Swift Array\nDESCRIPTION: Demonstrates the implementation of makeUnique and getElementAddr methods in a Swift Array struct, along with a subscript that uses these methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: ArrayStorage<T>\n\n  @makeunique\n  func makeUnique() {\n    if (isUniquelyReferenced(&storage))\n     return;\n    storage = storage.copy()\n  }\n\n  @preserveunique\n  func getElementAddr(_ index: Int) -> UnsafeMutablePointer<T> {\n    return storage.elementAddrAt(index)\n  }\n\n  subscript(index: Int) -> UnsafeMutablePointer<T> {\n    mutableAddressor {\n      makeUnique()\n      return getElementAddr(index)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SIL Instruction: increment_profiler_counter\nDESCRIPTION: Increments a profiler counter for PGO function name. Gets lowered to llvm.instrprof.increment intrinsic and enables features like code coverage and profile-guided optimization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_25\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'increment_profiler_counter' int-literal ',' string-literal ',' 'num_counters' int-literal ',' 'hash' int-literal\n\nincrement_profiler_counter 1, \"$foo\", num_counters 3, hash 0\n```\n\n----------------------------------------\n\nTITLE: Unmanaged Releasing with unmanaged_release_value in SIL\nDESCRIPTION: Has the same local semantics as release_value but is valid in ownership qualified SIL and is not intended to be statically paired. Used to implement unmanaged constructs. Not available in OSSA.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_118\n\nLANGUAGE: sil\nCODE:\n```\nsil-instruction ::= 'unmanaged_release_value' sil-value\n\nunmanaged_release_value %0 : $A\n```\n\n----------------------------------------\n\nTITLE: Swift Code Transformed by Type Checker\nDESCRIPTION: Shows how the Swift type checker transforms user code to use the proper bridging functions. This demonstrates the actual implementation with explicit bridging function calls.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_73\n\nLANGUAGE: swift\nCODE:\n```\n// Using the imported C++ API in Swift: code rewritten by the type checker.\n\nfunc callGetVector() -> CInt {\n  var xs: [CInt] =\n    StdVectorToArray(_cxx_IncrementVectorValues(ArrayToStdVector([10, 20, 30])))\n  return xs[0] // = 11.\n}\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Nested Generic Types Mangling\nDESCRIPTION: Swift symbol mangling for nested generic types and their initializers. These examples show how Swift encodes initialization functions for nested generic types with multiple generic parameters and transformations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n_TFVV15nested_generics5Lunch6DinnerCfT11firstCoursex12secondCourseGSqqd___9leftoversx14transformationFxqd___GS1_x_qd___ ---> nested_generics.Lunch.Dinner.init(firstCourse: A, secondCourse: A1?, leftovers: A, transformation: (A) -> A1) -> nested_generics.Lunch<A>.Dinner<A1>\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TFVFC15nested_generics7HotDogs11applyRelishFT_T_L_6RelishCfT8materialx_GS1_x_ ---> init(material: A) -> Relish #1 in nested_generics.HotDogs.applyRelish() -> ()<A> in Relish #1 in nested_generics.HotDogs.applyRelish() -> ()\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TFVFE15nested_genericsSS3fooFT_T_L_6CheeseCfT8materialx_GS0_x_ ---> init(material: A) -> Cheese #1 in (extension in nested_generics):Swift.String.foo() -> ()<A> in Cheese #1 in (extension in nested_generics):Swift.String.foo() -> ()\n```\n\n----------------------------------------\n\nTITLE: Unicode Other_ID_Continue Character List Definition\nDESCRIPTION: A list of Unicode code points with the Other_ID_Continue property, which identifies additional characters that can be used in identifiers beyond the initial position in programming languages.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/PropList.txt#2025-04-23_snippet_23\n\nLANGUAGE: Unicode\nCODE:\n```\n00B7          ; Other_ID_Continue # Po       MIDDLE DOT\n0387          ; Other_ID_Continue # Po       GREEK ANO TELEIA\n1369..1371    ; Other_ID_Continue # No   [9] ETHIOPIC DIGIT ONE..ETHIOPIC DIGIT NINE\n19DA          ; Other_ID_Continue # No       NEW TAI LUE THAM DIGIT ONE\n200C..200D    ; Other_ID_Continue # Cf   [2] ZERO WIDTH NON-JOINER..ZERO WIDTH JOINER\n30FB          ; Other_ID_Continue # Po       KATAKANA MIDDLE DOT\nFF65          ; Other_ID_Continue # Po       HALFWIDTH KATAKANA MIDDLE DOT\n\n# Total code points: 16\n```\n\n----------------------------------------\n\nTITLE: Illustrating Closure Creation with partial_apply in SIL\nDESCRIPTION: This SIL snippet shows the creation of the `foo` closure using the `partial_apply` instruction. It demonstrates that only the captured variable `t` is listed as an 'applied argument' at index #0 for the `partial_apply` itself.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SILFunctionConventions.md#2025-04-23_snippet_4\n\nLANGUAGE: sil\nCODE:\n```\n```\n%closure = partial_apply @foo(#0: t)\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Swift Command Line Support Library\nDESCRIPTION: CMake target configuration that sets up a static library for Swift command line support. Specifies compilation flags, linking options, and installation settings for the library build process.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/CommandLineSupport/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftCommandLineSupport\n  STATIC DONT_EMBED_BITCODE NOSWIFTRT\n  CommandLine.cpp\n  C_COMPILE_FLAGS ${SWIFT_RUNTIME_CXX_FLAGS}\n  LINK_FLAGS ${SWIFT_RUNTIME_LINK_FLAGS}\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  INSTALL_IN_COMPONENT never_install\n  )\n```\n\n----------------------------------------\n\nTITLE: Conditional Darwin Dependencies Setup\nDESCRIPTION: Conditionally sets Darwin dependencies based on SDK overlay build flag\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/private/SwiftPrivate/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_BUILD_SDK_OVERLAY)\nset(swift_swiftprivate_darwin_dependencies Darwin)\nelse()\nset(swift_swiftprivate_darwin_dependencies)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Storing Swift Optimizer Counters CSV into SQLite Database using Script\nDESCRIPTION: Uses the `optimizer_counters_to_sql.py` Python script to parse a CSV file containing Swift optimizer counters (`csv_file_with_counters`) and load the data into a specified SQLite database file (`your_database.db`). This enables structured querying of the counter data.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/OptimizerCountersAnalysis.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nutils/optimizer_counters_to_sql.py  csv_file_with_counters your_database.db\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Mirror Library in CMake\nDESCRIPTION: Sets up the Static Mirror library with its name, dependencies, and build properties. It also configures symbol exports and installation rules for the library and its headers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/libStaticMirror/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Use an 'internal' name, for now\nset(SWIFT_SCAN_LIB_NAME \"_InternalSwiftStaticMirror\")\n\nset(LLVM_EXPORTED_SYMBOL_FILE\n    ${CMAKE_CURRENT_SOURCE_DIR}/libStaticMirror.exports)\n\nadd_swift_host_library(libStaticMirror SHARED\n  libStaticMirror.cpp\n  c-include-check.c\n  LLVM_LINK_COMPONENTS object support\n)\nif(NOT SWIFT_BUILT_STANDALONE AND NOT CMAKE_C_COMPILER_ID MATCHES Clang)\n  add_dependencies(libStaticMirror clang)\nendif()\n\nadd_dependencies(libStaticMirror\n    swiftStaticMirror)\n\ntarget_link_libraries(libStaticMirror PRIVATE\n    swiftStaticMirror\n    swiftRemoteInspection)\n\nset_target_properties(libStaticMirror\n    PROPERTIES\n    OUTPUT_NAME ${SWIFT_SCAN_LIB_NAME})\n\nadd_llvm_symbol_exports(libStaticMirror ${LLVM_EXPORTED_SYMBOL_FILE})\n\n# Adds -dead_strip option\nadd_link_opts(libStaticMirror)\n\nadd_dependencies(static-mirror-lib libStaticMirror)\nswift_install_in_component(TARGETS libStaticMirror\n  ARCHIVE DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}\" COMPONENT static-mirror-lib\n  LIBRARY DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_LIB_SUBDIR}\" COMPONENT static-mirror-lib\n  RUNTIME DESTINATION \"bin\" COMPONENT static-mirror-lib)\nswift_install_in_component(DIRECTORY \"${SWIFT_MAIN_INCLUDE_DIR}/swift-c/StaticMirror/\"\n                           DESTINATION \"lib${LLVM_LIBDIR_SUFFIX}/swift/${SWIFT_SCAN_LIB_NAME}\"\n                           COMPONENT static-mirror-lib)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Swift Compatibility Library Build Target\nDESCRIPTION: Configures the swiftCompatibility51 static library build with platform-specific deployment versions, compiler flags, and installation settings. Targets multiple Apple platforms including macOS, iOS, tvOS, watchOS and xrOS.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/Compatibility51/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(library_name \"swiftCompatibility51\")\n\nadd_swift_target_library(\"${library_name}\" STATIC\n  Overrides.cpp\n  ProtocolConformance.cpp\n\n  TARGET_SDKS ${SWIFT_DARWIN_PLATFORMS}\n\n  C_COMPILE_FLAGS\n    ${CXX_COMPILE_FLAGS}\n    \"-DSWIFT_THREADING_IS_COMPATIBILITY_LIBRARY\"\n  LINK_FLAGS ${CXX_LINK_FLAGS}\n  INCORPORATE_OBJECT_LIBRARIES swiftCompatibilityThreading\n  SWIFT_COMPILE_FLAGS ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n  DEPLOYMENT_VERSION_OSX ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_OSX}\n  DEPLOYMENT_VERSION_IOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_IOS}\n  DEPLOYMENT_VERSION_TVOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_TVOS}\n  DEPLOYMENT_VERSION_WATCHOS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_WATCHOS}\n  DEPLOYMENT_VERSION_XROS ${COMPATIBILITY_MINIMUM_DEPLOYMENT_VERSION_XROS}\n\n  MACCATALYST_BUILD_FLAVOR \"zippered\"\n\n  INSTALL_IN_COMPONENT compiler\n  INSTALL_WITH_SHARED)\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Code Points to Numeric Value 3\nDESCRIPTION: Maps various Unicode code points to their numeric value of 3, including digits, ideographs, and special numeric symbols across different writing systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n0033          ; 3.0 ; ; 3 # Nd       DIGIT THREE\n00B3          ; 3.0 ; ; 3 # No       SUPERSCRIPT THREE\n0663          ; 3.0 ; ; 3 # Nd       ARABIC-INDIC DIGIT THREE\n06F3          ; 3.0 ; ; 3 # Nd       EXTENDED ARABIC-INDIC DIGIT THREE\n```\n\n----------------------------------------\n\nTITLE: Using Swift Enum with Associated Values in C++\nDESCRIPTION: Demonstrates how to use the bridged Swift enum with associated values in C++, including type checking and value extraction.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_28\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Store-Swift.h\"\nusing namespace Store;\n\nBarcode normalizeBarcode(Barcode barcode) {\n  switch (barcode) {\n  case Barcode::qrCode: {\n    auto qrCode = barcode.getQrCode();\n    swift::Array<swift::Int> loadedBarcode = loadQrCode(qrCode);\n    return Barcode::upc(loadedBarcode[0], loadedBarcode[1], loadedBarcode[2], loadedBarcode[3]);\n  }\n  case Barcode::upc:\n    return barcode;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Slice Accessor Implementation\nDESCRIPTION: Shows the implementation of array slice accessors using getForMutation and setForMutation patterns.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Accessors.rst#2025-04-23_snippet_13\n\nLANGUAGE: swift\nCODE:\n```\nextension Array {\n  subscript(range: Range<Int>) -> Slice<Element> {\n    // `getForMutation` must declare its return value, a pair of both\n    // the value to mutate and a state value that is passed to\n    // `setForMutation`.\n    getForMutation() -> (Slice<Element>, PinToken) {\n      let slice = _makeSlice(range)\n      let pinToken = _pin()\n      return (slice, pinToken)\n    }\n\n    // `setForMutation` receives two arguments--the result of the\n    // mutation to write back, and the state value returned by\n    // `getForMutation`.\n    setForMutation(slice, pinToken) {\n      _unpin(pinToken)\n      _writeSlice(slice, backToRange: range)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Objective-C Method Name Including 'AndReturnError'\nDESCRIPTION: This Objective-C code snippet shows a method signature from `NSDocument` where the method name explicitly includes 'AndReturnError', following a common naming convention for methods using the `NSError**` pattern.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ErrorHandling.md#2025-04-23_snippet_16\n\nLANGUAGE: objective-c\nCODE:\n```\n```objc\n- (NSDocument *)duplicateAndReturnError:(NSError **)outError;\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Name Aliases in Plain Text\nDESCRIPTION: This code snippet demonstrates the format used to define formal name aliases for Unicode characters. Each line contains three fields: code point, alias, and type. Multiple aliases for a single code point are listed on separate lines.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/NameAliases.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n0000;NULL;control\n0000;NUL;abbreviation\n0001;START OF HEADING;control\n0001;SOH;abbreviation\n0002;START OF TEXT;control\n0002;STX;abbreviation\n0003;END OF TEXT;control\n0003;ETX;abbreviation\n0004;END OF TRANSMISSION;control\n0004;EOT;abbreviation\n0005;ENQUIRY;control\n0005;ENQ;abbreviation\n0006;ACKNOWLEDGE;control\n0006;ACK;abbreviation\n```\n\n----------------------------------------\n\nTITLE: Using Peer Delegation for Swift Initializers\nDESCRIPTION: This snippet shows peer delegation in Swift, where an initializer delegates to another initializer of the same type. This approach prevents code duplication and is particularly useful for convenience initializers or initializations in extensions.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nextension A {\n  init fromString(s: String) {\n    self.init(Int(s)) // peer delegation to init(Int)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Swift Import of Annotated C++ Employee Class\nDESCRIPTION: Shows how the C++ Employee class is imported into Swift with string bridging applied according to annotations. The DebugDescription method returns a Swift String while SerializedAsProtobuf keeps std::string.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_77\n\nLANGUAGE: swift\nCODE:\n```\n// C++ header imported in Swift.\n\nstruct Employee {\n  func DebugDescription() -> String\n  func SerializedAsProtobuf() -> std.string\n}\n```\n\n----------------------------------------\n\nTITLE: Covariant Self References in Protocol Members in Swift\nDESCRIPTION: Shows an exception to the Self-reference limitation where a protocol member with Self in covariant position (return type) can be accessed via a protocol type. In this case, Self can be safely substituted with the protocol type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/existential-member-access-limitations.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Shape {\n  func duplicate() -> Self\n}\n\nfunc duplicateShape(_ shape: Shape) -> Shape {\n  return shape.duplicate // OK, produces a value of type 'Shape'\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Type Info Structure\nDESCRIPTION: Detailed structure of the variable type information object returned in the response, including offset, length, type, and explicit type annotation status.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n    <key.variable_offset>:       (int64)    // Offset of a variable identifier in the source file\n    <key.variable_length>:       (int64)    // Length of a variable identifier an expression in the source file\n    <key.variable_type>:         (string)   // Printed type of the variable declaration\n    <key.variable_type_explicit> (bool)     // Whether the declaration has an explicit type annotation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Syntax Build Conditions in CMake\nDESCRIPTION: Checks if swift-syntax should be built and if the source path exists. Exits the script if conditions are not met.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/CompilerSwiftSyntax/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT SWIFT_BUILD_SWIFT_SYNTAX)\n  return()\nendif()\nif(NOT EXISTS \"${SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE}\")\n  message(SEND_ERROR \"swift-syntax is required to build the Swift compiler. Please run update-checkout or specify SWIFT_PATH_TO_SWIFT_SYNTAX_SOURCE\")\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: User-Defined Range as ADT in Swift\nDESCRIPTION: A representation of a Language enum that uses an ADT pattern to handle both predefined cases and user-defined values, showing how Swift enums can replace C enums with special ranges.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Enums.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nenum Language {\n  case C89, C99, Cplusplus98, Cplusplus11\n  case UserDefined(UInt16)\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Class Inheritance Changes in Swift\nDESCRIPTION: This section outlines changes to class inheritance in Swift, including modifications to superclasses, addition of designated initializers, and removal of superclasses.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/api-digester/Outputs/Cake-abi.txt#2025-04-23_snippet_8\n\nLANGUAGE: Swift\nCODE:\n```\n/* Class Inheritance Change */\ncake: Class SubGenericClass has changed its super class from cake.GenericClass<any cake.P1> to cake.GenericClass<any cake.P2>\ncake: Class SuperClassRemoval has removed its super class cake.C3\ncake: Constructor AddingNewDesignatedInit.init(_:) has been added as a designated initializer to an open class\ncake: Constructor ClassWithMissingDesignatedInits.init() has been added as a designated initializer to an open class\n```\n\n----------------------------------------\n\nTITLE: Using inout Arguments for Const Pointer Parameters in Swift\nDESCRIPTION: Shows how to use inout arguments in Swift to pass scalar values to C functions expecting const pointer parameters. This approach maintains value identity across multiple calls.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/CPointerArgumentInterop.rst#2025-04-23_snippet_1\n\nLANGUAGE: Swift\nCODE:\n```\n// From C: void foo(const pthread_mutex_t *);\nimport Foo\n\nvar mutex = pthread_mutex_create()\nfoo(&mutex)\nfoo(&mutex)\nfoo(&mutex)\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Parameter Count in Swift Mangling\nDESCRIPTION: Specifies how to encode the number of generic parameters at each depth of a signature using <GENERIC-PARAM-COUNT>. Includes examples of mangled generic signatures.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ABI/Mangling.rst#2025-04-23_snippet_43\n\nLANGUAGE: Swift\nCODE:\n```\nx_xCru                           // <T_0_0> T_0_0 -> T_0_0\nd_0__xCr_0_u                     // <T_0_0><T_1_0, T_1_1> T_0_0 -> T_1_1\n```\n\n----------------------------------------\n\nTITLE: Declaring FooEnum3 Variables in Swift\nDESCRIPTION: Declares two global read-only variables of type FooEnum3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nvar FooEnum3X: FooEnum3 { get }\nvar FooEnum3Y: FooEnum3 { get }\n```\n\n----------------------------------------\n\nTITLE: Cross Repository Testing - Short Format\nDESCRIPTION: Example of testing with cross-repository pull request using short reference format.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ContinuousIntegration.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\napple/swift-lldb#48\n\n@swift-ci Please test Linux platform\n```\n\n----------------------------------------\n\nTITLE: Including Swift Subdirectory in CMake Build\nDESCRIPTION: This CMake command adds the 'swift' subdirectory to the build process, allowing CMake to process the CMakeLists.txt file in that directory.\nSOURCE: https://github.com/swiftlang/swift/blob/main/include/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(swift)\n```\n\n----------------------------------------\n\nTITLE: Setting Link Libraries for Swift Matching Engine in CMake\nDESCRIPTION: Defines the libraries to link against for the Swift matching engine. In this case, it's set to link against the swiftCore library.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RegexParser/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(swift_matching_engine_link_libraries\n  swiftCore)\n```\n\n----------------------------------------\n\nTITLE: Vowel Dependent Unicode Ranges\nDESCRIPTION: Defines Unicode code point ranges for dependent vowel signs in various scripts including Bhaiksuki, Marchen, Masaram Gondi, Gunjala Gondi, Makasar, and Kawi writing systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_8\n\nLANGUAGE: unicode\nCODE:\n```\n11C30..11C36  ; Vowel_Dependent # Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L\n11C38..11C3B  ; Vowel_Dependent # Mn   [4] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI VOWEL SIGN AU\n11CB0         ; Vowel_Dependent # Mn       MARCHEN VOWEL SIGN AA\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Virtual Initializers in Subclasses\nDESCRIPTION: This example shows how subclasses must provide implementations for all virtual initializers declared in the superclass. This ensures dynamic initialization works correctly regardless of the concrete type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Initialization.rst#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nclass D : A {\n  var floating: Double\n\n  @virtual init(x: Int) {\n    floating = 3.14159\n    super.init(x)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MainActor Solution for Data Race Prevention\nDESCRIPTION: Demonstrates using @MainActor attribute to serialize access to the MyModel instance and prevent data races by ensuring all access occurs on the main actor.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sending-closure-risks-data-race.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nclass MyModel {\n  func perform() {\n    Task {\n      self.update()\n    }\n  }\n\n  func update() { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing C++ Function Template as Swift Generic Function\nDESCRIPTION: This snippet demonstrates how to import a C++ function template as a Swift generic function with dynamic dispatch based on known type arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_62\n\nLANGUAGE: swift\nCODE:\n```\nfunc _cxx_functionTemplate<T>(_ t: T) // Imported as explained before.\n\nfunc functionTemplate<T>(_ t: T) {\n  if T == Int.self {\n    return _cxx_functionTemplate(t as! Int)\n  }\n  if T == UInt.self {\n    return _cxx_functionTemplate(t as! UInt)\n  }\n  fatalError()\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Using a Task with actor isolation to call from any context\nDESCRIPTION: An alternative solution that allows the function to be called from any context by creating a Task with explicit MainActor isolation for the actor-isolated call.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/actor-isolated-call.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc runUpdate(model: MyModel) {\n  Task { @MainActor in\n    model.update()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Android Library Target\nDESCRIPTION: Sets up the main Swift Android library target with platform sources, compile flags and dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/Platform/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_target_library(swiftAndroid ${SWIFT_STDLIB_LIBRARY_BUILD_TYPES} IS_SDK_OVERLAY\n    Android.swift\n    ${swift_platform_sources}\n    POSIXError.swift\n\n    GYB_SOURCES\n      ${swift_platform_gyb_sources}\n\n    SWIFT_COMPILE_FLAGS\n      ${SWIFT_RUNTIME_SWIFT_COMPILE_FLAGS}\n      ${SWIFT_STANDARD_LIBRARY_SWIFT_FLAGS}\n      ${swift_platform_compile_flags}\n    LINK_FLAGS \"${SWIFT_RUNTIME_SWIFT_LINK_FLAGS}\"\n    TARGET_SDKS \"ANDROID\"\n    INSTALL_IN_COMPONENT sdk-overlay\n    DEPENDS android_modulemap)\n```\n\n----------------------------------------\n\nTITLE: Nested Closure Capture Example in Swift\nDESCRIPTION: Demonstrates a problematic case of nested closures with unowned captures, showing potential memory management issues when capturing view references across multiple closure levels.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/WeakReferences.md#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nasync { doSomething(); GUI.sync { unowned(view).fireCompleted() } }\n```\n\n----------------------------------------\n\nTITLE: Accessing Swift Array Elements in C++\nDESCRIPTION: Demonstrates how to use the subscript operator to access elements from a Swift Array in C++. Uses the bridged operator[] for getting elements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_43\n\nLANGUAGE: c++\nCODE:\n```\n#include \"Swift-Swift.h\"\n#include <iostream>\n\nvoid printElementsInArray(const swift::Array<swift::Int> &elements) {\n  for (size_t i = 0; i < elements.getCount(); ++i) {\n    std::cout << elements[i] << \"\\n\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Library Build for sourcekitdInProc in CMake\nDESCRIPTION: This snippet adds an option to build sourcekitdInProc as a static library, setting up the target and linking necessary libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/InProc/CMakeLists.txt#2025-04-23_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif (SOURCEKITD_BUILD_STATIC_INPROC)\n  add_sourcekit_library(sourcekitdInProc_Static\n    ${sourcekitdInProc_args}\n    HEADERS\n      ${SOURCEKITD_SOURCE_DIR}/include/sourcekitd/sourcekitd.h\n  )\n  target_link_libraries(sourcekitdInProc_Static PRIVATE\n    SourceKitSwiftLang\n    sourcekitdAPI)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Development Symlink for API Dump Script\nDESCRIPTION: Creates a symbolic link for the swift-api-dump.py utility in the binary output directory for development purposes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-ide-test/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nswift_create_post_build_symlink(swift-ide-test\n  SOURCE \"${SWIFT_SOURCE_DIR}/utils/swift-api-dump.py\"\n  DESTINATION \"${SWIFT_RUNTIME_OUTPUT_INTDIR}/swift-api-dump.py\"\n  COMMENT \"Creating development symlink for swift-api-dump.py.\")\n```\n\n----------------------------------------\n\nTITLE: String Comparison Operators in Swift\nDESCRIPTION: Lists the comparison operators available for Swift Strings, which provide similar functionality to NSString's isEqualToString: and compare: methods.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\nfunc == (lhs: String, rhs: String) -> Bool\nfunc != (lhs: String, rhs: String) -> Bool\nfunc <  (lhs: String, rhs: String) -> Bool\nfunc >  (lhs: String, rhs: String) -> Bool\nfunc <= (lhs: String, rhs: String) -> Bool\nfunc >= (lhs: String, rhs: String) -> Bool\n```\n\n----------------------------------------\n\nTITLE: Unicode 12.0 Version Marker\nDESCRIPTION: Contains only a version marker for Unicode 12.0 with no actual code point assignments listed. This appears to be a placeholder for Unicode 12.0 code points that would follow in the complete document.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_13\n\nLANGUAGE: unicode\nCODE:\n```\n# Age=V12_0\n```\n\n----------------------------------------\n\nTITLE: Forward Scanning Rule Example in Swift 5.3\nDESCRIPTION: Demonstrates the new forward scanning rule introduced in Swift 5.3, showing how it matches trailing closures to parameters from left to right after matching non-trailing arguments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/trailing-closure-matching.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nanimate(withDuration: 0.3) {\n  // Animate something.\n} // `completion` has the default value `nil`.\n```\n\n----------------------------------------\n\nTITLE: Defining ValueSet in Swift for SIL\nDESCRIPTION: Defines `ValueSet`, an extremely efficient implementation of a set tailored for holding SIL values. This utility corresponds to the `ValueSet` structure available in the C++ SIL optimizer utilities. Status: Implemented.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/SIL-Utilities.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nValueSet\n```\n\n----------------------------------------\n\nTITLE: Invisible Stacker Character Definitions\nDESCRIPTION: Lists Unicode code points for Invisible Stacker signs that cause conjunct formation or consonant stacking while remaining invisible.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_4\n\nLANGUAGE: unicode\nCODE:\n```\n1039          ; Invisible_Stacker # Mn       MYANMAR SIGN VIRAMA\n17D2          ; Invisible_Stacker # Mn       KHMER SIGN COENG\n1A60          ; Invisible_Stacker # Mn       TAI THAM SIGN SAKOT\n```\n\n----------------------------------------\n\nTITLE: Swift Access Control Class Property Example\nDESCRIPTION: Example showing how access control affects property visibility and override capabilities across module boundaries. Private properties can be accessed directly while module-private is the default.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ObjCInteroperation.rst#2025-04-23_snippet_2\n\nLANGUAGE: Swift\nCODE:\n```\n@public struct Bag<T> : ... {\n   ...\n}\n```\n\n----------------------------------------\n\nTITLE: Entering LLDB Python Interpreter\nDESCRIPTION: Enters the interactive Python interpreter embedded within LLDB. This allows defining and executing Python functions that can interact with the debugger state using the LLDB Python API.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_26\n\nLANGUAGE: lldb\nCODE:\n```\n(lldb) script\n```\n\n----------------------------------------\n\nTITLE: MainActor Isolation Solution\nDESCRIPTION: Shows how to safely handle non-Sendable types by isolating them to the main actor and marking safe methods as nonisolated.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sendable-closure-captures.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nclass MyModel {\n  nonisolated func log() { ... }\n}\n\nfunc capture(model: MyModel) async {\n  callConcurrently {\n    model.log()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Problematic Data Race Example in Swift\nDESCRIPTION: Shows an example of code that could cause data races by accessing a non-Sendable class instance from multiple concurrent tasks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sending-closure-risks-data-race.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nclass MyModel {\n  var count: Int = 0\n\n  func perform() {\n    Task {\n      self.update()\n    }\n  }\n\n  func update() { count += 1 }\n}\n```\n\n----------------------------------------\n\nTITLE: Demangling Swift Function Signature with C Convention\nDESCRIPTION: This code snippet shows a Swift function signature and its demangled representation. The function takes no parameters and returns an Int, using the C calling convention.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings-with-clang-types.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n$s3tmp1fyySiyXzC9_ZTSPFmvEF ---> tmp.f(@convention(c, mangledCType: \"_ZTSPFmvE\") () -> Swift.Int) -> ()\n```\n\n----------------------------------------\n\nTITLE: CF Types Casting to Protocol Existentials in Swift\nDESCRIPTION: This snippet demonstrates how CF types can now be cast to protocol existentials, addressing issue #44896.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nprotocol P {}\nextension CFBitVector : P {\n  static func makeImmutable(from values: Array<UInt8>) -> CFBitVector {\n    return CFBitVectorCreate(nil, values, values.count * 8)\n  }\n}\n// Swift 5.3: Crashes in unoptimized build, prints true in optimized build\n// Specification: prints true\nprint(CFBitVector.makeImmutable(from: [10,20]) is P)\n```\n\n----------------------------------------\n\nTITLE: Endpoint-based Task Communication in Swift\nDESCRIPTION: Shows how to use typed endpoints for task communication with automatic stream handling and type inference.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet comm : _Endpoint<String, Int> = createTask {\n  var counter = 0\n  while true {\n    $0.pop()\n    $0.push(counter)\n    counter += 1\n  }\n}\n\n// CHECK: 0, 1, 2,\nfor ss in [\"\",\"\",\"\"] {\n  comm.push(ss)\n  print(\"\\(comm.pop()), \", terminator: \"\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Basic Unit Tests in CMake\nDESCRIPTION: This snippet sets up the Swift Basic unit tests by specifying test files, handling GYB-generated sources, and configuring build dependencies and link libraries.\nSOURCE: https://github.com/swiftlang/swift/blob/main/unittests/Basic/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(generated_tests UnicodeGraphemeBreakTest.cpp.gyb)\n\nhandle_gyb_sources(\n    gyb_dependency_targets\n    generated_tests\n    ARCH ${SWIFT_HOST_VARIANT_ARCH})\n\nadd_swift_unittest(SwiftBasicTests\n  BlotMapVectorTest.cpp\n  BlocklistTest.cpp\n  CacheTest.cpp\n  ClangImporterOptionsTest.cpp\n  ClusteredBitVectorTest.cpp\n  DemangleTest.cpp\n  DiverseStackTest.cpp\n  EditorPlaceholderTest.cpp\n  EnumMapTest.cpp\n  EncodedSequenceTest.cpp\n  ExponentialGrowthAppendingBinaryByteStreamTests.cpp\n  FileSystemTest.cpp\n  FileTypes.cpp\n  FixedBitSetTest.cpp\n  FrozenMultiMapTest.cpp\n  ImmutablePointerSetTest.cpp\n  JSONSerialization.cpp\n  OptionSetTest.cpp\n  Options.cpp\n  OwnedStringTest.cpp\n  MultiMapCacheTest.cpp\n  PointerIntEnumTest.cpp\n  PrefixMapTest.cpp\n  RangeTest.cpp\n  SmallMapTest.cpp\n  SourceManagerTest.cpp\n  StableHasher.cpp\n  STLExtrasTest.cpp\n  StringExtrasTest.cpp\n  SuccessorMapTest.cpp\n  TaggedUnionTest.cpp\n  ThreadSafeRefCntPointerTest.cpp\n  TransformRangeTest.cpp\n  TypeLookupError.cpp\n  UnicodeTest.cpp\n  ${generated_tests}\n  )\n\nadd_dependencies(SwiftBasicTests \"${gyb_dependency_targets}\")\n\ntarget_link_libraries(SwiftBasicTests\n  PRIVATE\n  swiftBasic\n  swiftOption\n  swiftThreading\n  clangBasic\n  LLVMOption\n  LLVMTestingSupport\n  )\n\nif(SWIFT_HOST_VARIANT STREQUAL \"windows\")\n  target_link_libraries(SwiftBasicTests PRIVATE Synchronization)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating and Installing Swift Compatibility Symbols in CMake\nDESCRIPTION: Conditional block that sets up the generation and installation of compatibility symbols if SWIFT_NATIVE_SWIFT_TOOLS_PATH is defined. It creates a custom command to run the tool, generates the symbols file, and installs it in the Swift compiler package.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-compatibility-symbols/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(SWIFT_NATIVE_SWIFT_TOOLS_PATH)\n  set(syms_file \"${CMAKE_BINARY_DIR}/share/swift/compatibility-symbols\")\n\n  add_custom_command_target(copy_compat_target\n    COMMAND\n      \"${SWIFT_NATIVE_SWIFT_TOOLS_PATH}/swift-compatibility-symbols\"\n      --output-filename ${syms_file}\n    OUTPUT\n      ${syms_file}\n    DEPENDS\n      swift-compatibility-symbols\n  )\n\n  add_dependencies(swift-frontend \"${copy_compat_target}\")\n\n  swift_install_in_component(\n    FILES\n      ${syms_file}\n    DESTINATION\n      \"share/swift\"\n    COMPONENT\n      compiler\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Remote AST Test Tool Build\nDESCRIPTION: CMake configuration that sets up the swift-remoteast-test tool build, including tool definition, dependencies, library linking, and export settings. Also includes conditional logic for handling Clang header dependencies when building as part of Clang.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-remoteast-test/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_tool(swift-remoteast-test\n  swift-remoteast-test.cpp\n  SWIFT_COMPONENT testsuite-tools\n  THINLTO_LD64_ADD_FLTO_CODEGEN_ONLY\n)\ntarget_link_libraries(swift-remoteast-test\n                      PRIVATE\n                        swiftFrontendTool\n                        swiftRemoteAST)\nset_target_properties(swift-remoteast-test PROPERTIES ENABLE_EXPORTS 1)\n\n# If building as part of clang, make sure the headers are installed.\nif(NOT SWIFT_BUILT_STANDALONE)\n  add_dependencies(swift-frontend clang-resource-headers)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Static Mirror Library in CMake\nDESCRIPTION: Configures the swiftStaticMirror library as a static library, specifying its source files and LLVM component dependencies. It also sets up the library's link dependencies.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/StaticMirror/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_library(swiftStaticMirror STATIC\n   BinaryScanningTool.cpp\n   ObjectFileContext.cpp\n   LLVM_LINK_COMPONENTS object support)\n\n target_link_libraries(swiftStaticMirror PRIVATE\n     swiftRemoteInspection)\n```\n\n----------------------------------------\n\nTITLE: Declaring Special Functions\nDESCRIPTION: Defines functions with special attributes, including one declared in multiple modules and one with unavailable variadic parameters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_15\n\nLANGUAGE: Swift\nCODE:\n```\n/// Aaa.  redeclaredInMultipleModulesFunc1.  Bbb.\nfunc redeclaredInMultipleModulesFunc1(_ a: Int32) -> Int32\n@available(*, unavailable, message: \"Variadic function is unavailable\")\nfunc fooFuncUsingVararg(_ a: Int32, _ varargs: Any...) -> Int32\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Source Configuration\nDESCRIPTION: Conditional source file inclusion based on platform (Linux/Android) and feature flags (CommandLine support, vector types).\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/core/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT LINUX AND NOT ANDROID)\n  target_sources(swiftCore PRIVATE ObjectIdentifier+DebugDescription.swift)\nendif()\n\nif(SwiftCore_ENABLE_COMMANDLINE_SUPPORT)\n  target_sources(swiftCore PRIVATE CommandLine.swift)\n  target_link_libraries(swiftCore PRIVATE swiftCommandLineSupport)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inline Buffer Alignment for Swift Types in C++\nDESCRIPTION: Examples of how the pointer value is used to determine buffer alignment for inline-allocated Swift types in C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/SwiftTypeRepresentationInC++.md#2025-04-23_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\n// representation for buffer aligned at 8:\n{/*pointer=*/0x3, ....}; // buffer is alignas(2^3 = 8)\n\n// representation for buffer aligned at 16:\n{/*pointer=*/0x4, ....}; // buffer is alignas(2^4 = 16)\n\n// where pointer < 10 for inline stores.\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation in Embedded Swift\nDESCRIPTION: Demonstrates how to write code that can be compiled for both regular Swift and Embedded Swift using the #if hasFeature(Embedded) directive.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nfunc sayHello() {\n  #if hasFeature(Embedded)\n  print(\"I'm Embedded Swift\")\n  #else\n  print(\"I'm regular Swift\")\n  #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Optional NSNumber Projection in Swift\nDESCRIPTION: This snippet demonstrates how Optional<NSNumber> now projects correctly, which was not the case in Swift 5.3.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DynamicCasting.md#2025-04-23_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nimport Foundation\nlet a: Optional<NSNumber> = NSNumber()\n// Swift 5.3: false\n// Specification: true\nprint(a is NSNumber)\n// Swift 5.3: nil\n// Specification: .some(NSNumber())\nprint(a as? NSNumber)\n```\n\n----------------------------------------\n\nTITLE: Defining Regional Indicator Unicode Ranges\nDESCRIPTION: Defines Unicode code point range for Regional Indicator symbols used to represent country/region flags in text display\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/GraphemeBreakProperty.txt#2025-04-23_snippet_6\n\nLANGUAGE: unicode-data\nCODE:\n```\n1F1E6..1F1FF  ; Regional_Indicator # So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n```\n\n----------------------------------------\n\nTITLE: URL and Path Handling Methods\nDESCRIPTION: Methods for working with URLs and file paths, including percent encoding, file operations, and path manipulation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/StringDesign.rst#2025-04-23_snippet_30\n\nLANGUAGE: objective-c\nCODE:\n```\n- (instancetype)initWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error;\n- (NSString *)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet *)allowedCharacters;\n- (NSString *)stringByRemovingPercentEncoding;\n```\n\n----------------------------------------\n\nTITLE: Option Subsets with Static Properties\nDESCRIPTION: Proposed syntax improvement using static constant properties rather than functions for option subsets, which would provide a cleaner API.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptionSets.rst#2025-04-23_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\n// Swift\nstruct MyOptions : OptionSet {\n  // Stored properties of instances\n  var Foo, Bar, Bas : Bool = false\n\n  static val Foobar = MyOptions(Foo: true, Bar: true)\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Compilation Flags\nDESCRIPTION: Configures compiler flags and include paths for building the Runtime module.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/RuntimeModule/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(RUNTIME_COMPILE_FLAGS\n  \"-cxx-interoperability-mode=default\"\n  \"-Xfrontend;-experimental-spi-only-imports\"\n  \"-Xcc;-I${SWIFT_SOURCE_DIR}/include\"\n  \"-Xcc;-I${CMAKE_BINARY_DIR}/include\"\n  \"-Xcc;-I${SWIFT_STDLIB_SOURCE_DIR}/public/RuntimeModule/modules\"\n  \"-disable-upcoming-feature;MemberImportVisibility\")\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Isolating Protocol Conformance to Main Actor in Swift\nDESCRIPTION: Resolving the actor isolation error by applying the same actor isolation (@MainActor) to the protocol conformance, making it usable only within that actor's context.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/conformance-isolation.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n@MainActor\nstruct MyData: @MainActor P {\n  func f() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing @set_subobject Method in Swift Array\nDESCRIPTION: Shows the implementation of a @set_subobject method in a Swift Array struct. This method sets an element at a specific index in the array.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/OptimizerEffects.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nstruct Array<T> {\n  var storage: ArrayStorage\n\n  @set_subobject\n  func setElement(_ elt: T, at index: Int) {\n    storage.set(elt, index)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Existential References in SIL\nDESCRIPTION: Extracts class instance reference from class existential container. Associates protocol conformances with opened archetype.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_154\n\nLANGUAGE: sil\nCODE:\n```\n%1 = open_existential_ref %0 : $P to $@opened P\n```\n\n----------------------------------------\n\nTITLE: Unicode Control Characters Category Definitions\nDESCRIPTION: Defines code point ranges for control characters (Cc), including basic ASCII control characters and extended control characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_21\n\nLANGUAGE: unicode\nCODE:\n```\n0000..001F    ; Cc #  [32] <control-0000>..<control-001F>\n007F..009F    ; Cc #  [33] <control-007F>..<control-009F>\n```\n\n----------------------------------------\n\nTITLE: Defining Private Function and Public Struct with Private Member in Swift\nDESCRIPTION: Declares a private function and a public struct with a private member variable and initializer. The struct provides a default initializer and a parameterized initializer for the private value.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/ClangImporter/Inputs/SwiftPrivateAttr.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\nfunc __privTest()\nstruct S0 {\n  init()\n  init(__privValue: Int32)\n  var __privValue: Int32\n}\n```\n\n----------------------------------------\n\nTITLE: Code Completion Testing with sourcekitd-repl\nDESCRIPTION: Shows how to test code completion by manually constructing a request in the sourcekitd-repl interactive environment.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/docs/Protocol.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n```\n$ sourcekitd-repl\nWelcome to SourceKit.  Type ':help' for assistance.\n(SourceKit) {\n    key.request: source.request.codecomplete,\n    key.sourcefile: \"/path/to/file.swift\",\n    key.offset: 57,\n    key.compilerargs: [\"/path/to/file.swift\"]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Differentiable Function Type Conversion Examples - Swift\nDESCRIPTION: Examples demonstrating implicit and explicit differentiable function type conversions in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\n// Takes a differentiable function argument.\nfunc f(_ x: @differentiable (Float) -> Float) { }\n\n// Calling `f` with a function declaration reference triggers an implicit\n// `@differentiable` function type conversion.\nfunc identity(_ x: Float) -> Float { x }\nf(identity)\n\n// Calling `f` with a closure literal also triggers an implicit\n// `@differentiable` function type conversion.\nf({ x in x })\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Segmentation Test Cases\nDESCRIPTION: Test cases showing word segmentation rules with various Unicode characters including quotation marks, apostrophes, combining marks, and control characters. Each line shows expected segmentation behavior with Unicode codepoints and their properties.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_10\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 0022 × 0308 ÷ 0031 ÷ 003A ÷\n÷ 0022 ÷ 0031 ÷ 0027 ÷\n÷ 0022 × 0308 ÷ 0031 ÷ 0027 ÷\n÷ 0022 ÷ 0031 ÷ 002C ÷\n```\n\n----------------------------------------\n\nTITLE: Understanding Swift Name Mangling System for String Functions\nDESCRIPTION: Swift symbol mangling examples for LegacyStringCore initialization functions with various parameter specializations. These examples show how Swift encodes function signature information including argument promotions in the compiled symbol names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/Demangle/Inputs/manglings.txt#2025-04-23_snippet_3\n\nLANGUAGE: Swift\nCODE:\n```\n_TTSf3d_i_d_i_d_i___TFVs17_LegacyStringCoreCfVs13_StringBufferS_ ---> function signature specialization <Arg[0] = Dead, Arg[1] = Value Promoted from Box, Arg[2] = Dead, Arg[3] = Value Promoted from Box, Arg[4] = Dead, Arg[5] = Value Promoted from Box> of Swift._LegacyStringCore.init(Swift._StringBuffer) -> Swift._LegacyStringCore\n```\n\nLANGUAGE: Swift\nCODE:\n```\n_TTSf3d_i_n_i_d_i___TFVs17_LegacyStringCoreCfVs13_StringBufferS_ ---> function signature specialization <Arg[0] = Dead, Arg[1] = Value Promoted from Box, Arg[3] = Value Promoted from Box, Arg[4] = Dead, Arg[5] = Value Promoted from Box> of Swift._LegacyStringCore.init(Swift._StringBuffer) -> Swift._LegacyStringCore\n```\n\n----------------------------------------\n\nTITLE: Linking swiftDependencyScanImpl as Public Dependency to swiftDependencyScan in CMake\nDESCRIPTION: Specifies that swiftDependencyScanImpl is a public dependency of swiftDependencyScan. This means that the swiftDependencyScanImpl library will be available to any target that links against swiftDependencyScan.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/DependencyScan/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(swiftDependencyScan PUBLIC\n  swiftDependencyScanImpl)\n```\n\n----------------------------------------\n\nTITLE: Configuring Objective-C Interop for Swift Demangling in CMake\nDESCRIPTION: Conditionally adds additional source files for Objective-C interoperability support if enabled.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/Demangling/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(SwiftCore_ENABLE_OBJC_INTEROP)\n  target_sources(swiftDemangling PRIVATE\n    \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/OldDemangler.cpp\"\n    \"${SwiftCore_SWIFTC_SOURCE_DIR}/lib/Demangling/OldRemangler.cpp\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: C++ Header with Pointer to Vector Example\nDESCRIPTION: C++ header example showing a function that returns a pointer to a std::vector. This illustrates a case where bridging has limitations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/CppInteroperabilityManifesto.md#2025-04-23_snippet_74\n\nLANGUAGE: c++\nCODE:\n```\n// C++ header.\n\nconst std::vector<int> *GetPtrToVector();\n```\n\n----------------------------------------\n\nTITLE: Converting Swift String to Objective-C NSString in Objective-C++ Mode\nDESCRIPTION: Shows how to bridge a swift::String to an Objective-C NSString value through direct assignment or casting in Objective-C++ mode.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_66\n\nLANGUAGE: c++\nCODE:\n```\nvoid useObjCString(const swift::String &swStr) {\n  // This cast will bridge the Swift String to an Objective-C NSString value.\n  NSString *nsStr = swStr;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Gradient Function in Swift\nDESCRIPTION: Demonstrates using the gradient function with a closure expression that computes a cube function. Shows how the closure is implicitly converted to a differentiable function type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DifferentiableProgrammingImplementation.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\ngradient(at: 4, of: { x in x * x * x }) // 48.0\n```\n\n----------------------------------------\n\nTITLE: Importing Foo Framework Modules in Swift\nDESCRIPTION: Exports symbols from Foo.FooSub and FooHelper modules, making them accessible in the current module without explicit imports.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n@_exported import Foo.FooSub\n@_exported import FooHelper\n```\n\n----------------------------------------\n\nTITLE: Defining Twelfth Fraction in Meroitic Cursive\nDESCRIPTION: This snippet defines the numeric value of one-twelfth (1/12) for a Meroitic Cursive Unicode character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_4\n\nLANGUAGE: Unicode\nCODE:\n```\n109F6         ; 0.08333333 ; ; 1/12 # No       MEROITIC CURSIVE FRACTION ONE TWELFTH\n```\n\n----------------------------------------\n\nTITLE: Opening Existential Metatypes in SIL\nDESCRIPTION: Extracts metatype from existential metatype and associates protocol conformances with opened archetype.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_156\n\nLANGUAGE: sil\nCODE:\n```\n%1 = open_existential_metatype %0 : $@<rep> P.Type to $@<rep> (@opened P).Type\n```\n\n----------------------------------------\n\nTITLE: Basic Virtual Initializer Implementation in Swift\nDESCRIPTION: Demonstrates the basic usage of @virtual attribute for class initialization. The virtual initializer ensures subclasses must provide an implementation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InitializerInheritance.rst#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nclass D {\n  @virtual init() { }\n}\n\nfunc f(_ meta: D.Type) {\n  meta() // okay: every subclass of D guaranteed to have an init()\n}\n```\n\n----------------------------------------\n\nTITLE: C++ Constructor Inheritance Example\nDESCRIPTION: Shows C++11's opt-in constructor inheritance syntax using the using declaration. This demonstrates how superclass constructors can be inherited in C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_8\n\nLANGUAGE: C++\nCODE:\n```\nusing MySuperclass::MySuperclass;\n```\n\n----------------------------------------\n\nTITLE: Declaring Non-Returning Functions\nDESCRIPTION: Defines functions that never return (marked with Swift's Never return type), typically used for fatal errors or infinite loops.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.printed.recursive.txt#2025-04-23_snippet_13\n\nLANGUAGE: Swift\nCODE:\n```\nfunc fooFuncNoreturn1() -> Never\nfunc fooFuncNoreturn2() -> Never\n```\n\n----------------------------------------\n\nTITLE: Concurrent Closure Implementation\nDESCRIPTION: Shows the implementation of callConcurrently using task groups to execute the closure multiple times concurrently.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sendable-closure-captures.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nfunc callConcurrently(\n  _ closure: @escaping @Sendable () -> Void\n) {\n  Task {\n    await withDiscardingTaskGroup { group in\n      for _ in 0..<10 {\n        group.addTask {\n          closure()\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unowned to Reference Conversion in Swift SIL\nDESCRIPTION: Removes @unowned qualifier from a heap object reference type. Has no runtime effect.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/SIL/Instructions.md#2025-04-23_snippet_170\n\nLANGUAGE: swift\nCODE:\n```\n%1 = unowned_to_ref %0 : $@unowned T\n```\n\n----------------------------------------\n\nTITLE: Defining Protocols with Reference Semantics Constraints in Swift\nDESCRIPTION: Demonstrates how to define protocols that inherit from ref constraints, requiring conforming types to have reference semantics.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/valref.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Disposable : ref {\n  func dispose()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Optimizer Source Files\nDESCRIPTION: Lists the Swift source files that constitute the Optimizer module of the Swift compiler. The optimizer is responsible for performing code optimizations during compilation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/Sources/Optimizer/PassManager/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nswift_compiler_sources(Optimizer\n  Context.swift\n  ModulePassContext.swift\n  Options.swift\n  Passes.swift\n  PassRegistration.swift)\n```\n\n----------------------------------------\n\nTITLE: Incomplete Type Pointer Imported to Swift\nDESCRIPTION: The Swift translation of a C function taking a pointer to an incomplete type. Swift imports such pointers as OpaquePointer since it cannot represent the incomplete type.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/HowSwiftImportsCAPIs.md#2025-04-23_snippet_20\n\nLANGUAGE: swift\nCODE:\n```\nfunc Print(_ foo: OpaquePointer)\n```\n\n----------------------------------------\n\nTITLE: Basic @Sendable Closure Capture Example\nDESCRIPTION: Demonstrates an incorrect attempt to capture a mutable variable in a @Sendable closure, resulting in a compiler error.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sendable-closure-captures.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nfunc callConcurrently(\n  _ closure: @escaping @Sendable () -> Void\n) { ... }\n\nfunc capture() {\n  var result = 0\n  result += 1\n  \n  callConcurrently {\n    print(result)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Word Segmentation Test Case\nDESCRIPTION: A single test case for Unicode word segmentation, showing the expected segmentation behavior for a specific sequence of characters. Each character is represented by its Unicode code point and description, with ÷ indicating a word boundary.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/Inputs/WordBreakTest.txt#2025-04-23_snippet_1\n\nLANGUAGE: Unicode\nCODE:\n```\n÷ 000B ÷ 0308 ÷ 0061 ÷ 002C ÷ #  ÷ [0.2] <LINE TABULATION> (Newline) ÷ [3.1] COMBINING DIAERESIS (Extend_FE) ÷ [999.0] LATIN SMALL LETTER A (ALetter) ÷ [999.0] COMMA (MidNum) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Incorrect Temporary Pointer Usage in Swift\nDESCRIPTION: Demonstrates an invalid pattern where a temporary pointer is stored, causing undefined behavior as the pointer outlives its valid scope.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/temporary-pointers.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nvar x = 42\nlet ptr = UnsafePointer(&x)\n// Do something with ptr.\n```\n\n----------------------------------------\n\nTITLE: Defining FooProtocolDerived Protocol in Swift\nDESCRIPTION: Declares a protocol that inherits from FooProtocolBase, demonstrating protocol inheritance without adding additional requirements.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nprotocol FooProtocolDerived : FooProtocolBase {\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Compatibility Libraries Configuration\nDESCRIPTION: Configures the build system for Swift compatibility libraries with back deployment support.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/CMakeLists.txt#2025-04-23_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif(SWIFT_STDLIB_SUPPORT_BACK_DEPLOYMENT)\n  add_subdirectory(legacy_layouts)\n  add_subdirectory(Compatibility50)\n  add_subdirectory(Compatibility51)\n  add_subdirectory(Compatibility56)\n  add_subdirectory(CompatibilitySpan)\n  add_subdirectory(CompatibilityDynamicReplacements)\n  add_subdirectory(CompatibilityConcurrency)\n  add_subdirectory(CompatibilityThreading)\n  add_subdirectory(CompatibilityPacks)\n\n  add_library(HostCompatibilityLibs INTERFACE)\n  get_compatibility_libs(\n    \"${SWIFT_HOST_VARIANT_SDK}\"\n    \"${SWIFT_HOST_VARIANT_ARCH}\"\n    compatibility_libs\n    )\n  target_link_libraries(HostCompatibilityLibs INTERFACE\n    ${compatibility_libs}\n    )\n  set_property(GLOBAL APPEND PROPERTY SWIFT_BUILDTREE_EXPORTS HostCompatibilityLibs)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing Swift Shim Header Files with CMake\nDESCRIPTION: CMake install command that copies various Swift shim header files to the installation directory. These shim files provide interfaces between Swift and other languages/frameworks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftShims/swift/shims/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(FILES\n  AssertionReporting.h\n  CoreFoundationShims.h\n  EmbeddedShims.h\n  FoundationShims.h\n  GlobalObjects.h\n  HeapObject.h\n  KeyPath.h\n  LibcOverlayShims.h\n  LibcShims.h\n  MetadataSections.h\n  ObjCShims.h\n  Random.h\n  RefCount.h\n  Reflection.h\n  RuntimeShims.h\n  RuntimeStubs.h\n  SwiftStdbool.h\n  SwiftStddef.h\n  SwiftStdint.h\n  System.h\n  Target.h\n  ThreadLocalStorage.h\n  UnicodeData.h\n  Visibility.h\n  _SwiftConcurrency.h\n  _SwiftDistributed.h\n  _SynchronizationShims.h\n  module.modulemap\n  DESTINATION \"${CMAKE_INSTALL_LIBDIR}/swift/shims\"\n  COMPONENT SwiftCore_development)\n```\n\n----------------------------------------\n\nTITLE: Module Ambiguity Resolution in Swift\nDESCRIPTION: Demonstrates how to resolve naming ambiguities when multiple modules declare the same name.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/Modules.md#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport Chess\nimport Xiangqi\n\nif userGame == \"chess\" {\n  Chess.playGame()\n} else if userGame == \"xiangqi\" {\n  Xiangqi.playGame()\n}\n```\n\n----------------------------------------\n\nTITLE: Importing XPC Framework in Swift\nDESCRIPTION: This code snippet shows importing the XPC (Inter-Process Communication) framework that provides a lightweight mechanism for communication between processes in Apple platforms.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-clang-modules-macosx.txt#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nXPC\n```\n\n----------------------------------------\n\nTITLE: Unsafe Protocol Conformance in Swift\nDESCRIPTION: This snippet demonstrates conforming to a protocol using an unsafe property, which triggers a memory safety warning.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/strict-memory-safety.md#2025-04-23_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\n// conformance of 'MyType' to protocol 'CustomStringConvertible' involves unsafe code\nstruct MyType: CustomStringConvertible {\n  @unsafe var description: String {\n    \"I am unsafe!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WatchOS Architecture Exclusions\nDESCRIPTION: Removes 64-bit architectures from WatchOS build targets since they don't support back-deployment\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/Compatibility51/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nlist(REMOVE_ITEM SWIFT_SDK_WATCHOS_ARCHITECTURES \"arm64\" \"arm64e\")\n```\n\n----------------------------------------\n\nTITLE: Defining Core Foundation Type and Memory Management\nDESCRIPTION: Declares a Core Foundation-style type and an unavailable release function, indicating automatic memory management.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/mock-sdk/Foo.annotated.txt#2025-04-23_snippet_28\n\nLANGUAGE: Swift\nCODE:\n```\nclass FooCFType {\n}\n@available(*, unavailable, message: \"Core Foundation objects are automatically memory managed\")\nfunc FooCFTypeRelease(_: FooCFType!)\n```\n\n----------------------------------------\n\nTITLE: Generic Class Solution Instead of Generic Method in Swift\nDESCRIPTION: Illustrates moving generic type parameter from method to class level.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/NonFinalGenericMethods.md#2025-04-23_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nclass MyClass<T> {\n  func write(t: T) { /* implementation */ }\n}\n\nlet instance: MyClass = ... // can only be MyClass<Int>\ninstance.write(t: 42) // ✅\n```\n\n----------------------------------------\n\nTITLE: Swift Unicode Operator Example\nDESCRIPTION: Shows how Unicode operators can be implemented to provide alternative syntax for set operations.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Inplace.rst#2025-04-23_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\npublic func ⊃ <T>(a: Set<T>, b: Set<T>) -> Bool {\n  return a.isStrictSupersetOf(b)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Enum with Associated Values in Swift\nDESCRIPTION: Demonstrates how to define an enumeration with associated values in Swift, which will be bridged to C++.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nenum Barcode {\n  case upc(Int, Int, Int, Int)\n  case qrCode(String)\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Host SDK Root Path\nDESCRIPTION: Configures the SWIFT_HOST_SDKROOT variable using SDK and architecture path variables.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFT_HOST_SDKROOT \"${SWIFT_SDK_${SWIFT_HOST_VARIANT_SDK}_ARCH_${SWIFT_HOST_VARIANT_ARCH}_PATH}\")\n```\n\n----------------------------------------\n\nTITLE: C++ Extension Interface\nDESCRIPTION: Generated C++ interface for Swift extensions on Rect structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_53\n\nLANGUAGE: c++\nCODE:\n```\n// C++ interface for 'Geometry'\n\nclass Rect {\npublic:\n  // init(x:,y:,width:,height:)\n  static Rect init(double x, double y, double width, double height);\n  \n  // init(size:)\n  static Rect init(double size);\n  \n  Rect squareThatFits() const { ... }\n  \n  swift::String getDebugDescription() const { ... }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Swift Instruction Pass in Passes.def\nDESCRIPTION: Add a SWIFT_SILCOMBINE_PASS entry in the Passes.def file to register a new instruction pass for the Swift compiler.\nSOURCE: https://github.com/swiftlang/swift/blob/main/SwiftCompilerSources/README.md#2025-04-23_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nSWIFT_SILCOMBINE_PASS\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Ranges for Vai Script\nDESCRIPTION: This snippet defines the Unicode character ranges for the Vai script, including syllables, a lengthener, punctuation marks, symbols, and digits. It specifies the code points, general categories, and character names.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_47\n\nLANGUAGE: Unicode\nCODE:\n```\nA500..A60B    ; Vai # Lo [268] VAI SYLLABLE EE..VAI SYLLABLE NG\nA60C          ; Vai # Lm       VAI SYLLABLE LENGTHENER\nA60D..A60F    ; Vai # Po   [3] VAI COMMA..VAI QUESTION MARK\nA610..A61F    ; Vai # Lo  [16] VAI SYLLABLE NDOLE FA..VAI SYMBOL JONG\nA620..A629    ; Vai # Nd  [10] VAI DIGIT ZERO..VAI DIGIT NINE\nA62A..A62B    ; Vai # Lo   [2] VAI SYLLABLE NDOLE MA..VAI SYLLABLE NDOLE DO\n```\n\n----------------------------------------\n\nTITLE: Declaring Macro Variables in Swift\nDESCRIPTION: Defines read-only macro variables with Int32 type that can be accessed throughout the code.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/IDE/Inputs/print_clang_header/header-to-print.h.module.printed.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\nvar MY_MACRO: Int32 { get }\nvar MACRO_DUP: Int32 { get }\n```\n\n----------------------------------------\n\nTITLE: Ensuring Library Targets are Included in Build\nDESCRIPTION: Temporary workaround to ensure generated lipo targets are included in the ALL target. Iterates through Swift SDKs and sets EXCLUDE_FROM_ALL property to FALSE for each valid target.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/toolchain/Compatibility51/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(sdk ${SWIFT_SDKS})\n  set(target_name \"${library_name}-${SWIFT_SDK_${sdk}_LIB_SUBDIR}\")\n  if(NOT TARGET \"${target_name}\")\n    continue()\n  endif()\n\n  set_target_properties(\"${target_name}\"\n    PROPERTIES\n      EXCLUDE_FROM_ALL FALSE)\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: File Copy Loop Configuration\nDESCRIPTION: Sets up a loop to copy each source file to both static and dynamic library output directories, creating custom commands for each file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftShims/swift/shims/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nforeach(input ${sources})\n  add_custom_command(\n      OUTPUT \"${output_dir}/${input}\"\n      DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\"\n      COMMAND\n        \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n        \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\"\n        \"${output_dir}/${input}\"\n      COMMENT \"Copying ${input} to ${output_dir}\")\n  list(APPEND outputs \"${output_dir}/${input}\")\n\n  add_custom_command(\n    OUTPUT \"${output_dir_static}/${input}\"\n    DEPENDS \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\"\n    COMMAND\n      \"${CMAKE_COMMAND}\" \"-E\" \"copy_if_different\"\n      \"${CMAKE_CURRENT_SOURCE_DIR}/${input}\"\n      \"${output_dir_static}/${input}\"\n    COMMENT \"Copying ${input} to ${output_dir_static}\")\n  list(APPEND outputs \"${output_dir_static}/${input}\")\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Ninja Command for Swift stdlib SIL Dumping\nDESCRIPTION: Shell command to extract the Swift stdlib compilation command from ninja build system for SIL dumping purposes.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/DebuggingTheCompiler.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nninja -t commands | grep swiftc | grep 'Swift\\.o'\n```\n\n----------------------------------------\n\nTITLE: Defining Benchmark Name Regular Expression in Swift\nDESCRIPTION: A regular expression pattern that defines the valid format for benchmark names in the Swift Benchmark Suite.\nSOURCE: https://github.com/swiftlang/swift/blob/main/benchmark/Naming.md#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n[A-Z][a-zA-Z0-9\\-.!?]+\n```\n\n----------------------------------------\n\nTITLE: Safe Value Capture Solution\nDESCRIPTION: Shows how to safely capture a value in a @Sendable closure using an explicit capture list.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/sendable-closure-captures.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nfunc capture() {\n  var result = 0\n  result += 1\n  \n  callConcurrently { [result] in\n    print(result)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initialize Target Defines Variable\nDESCRIPTION: Creates an empty variable for Swift driver target definitions that can be populated later if needed.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Driver/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(swiftDriver_targetDefines)\n```\n\n----------------------------------------\n\nTITLE: Creating Output Directory Command\nDESCRIPTION: Creates a custom command to ensure the output directory exists.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/Migrator/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n    OUTPUT \"${output_dir}\"\n    COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${output_dir}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Bhaiksuki Script\nDESCRIPTION: This snippet defines the Unicode block for the Bhaiksuki script, including letters, vowel signs, digits, and other symbols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_93\n\nLANGUAGE: Unicode\nCODE:\n```\n11C00..11C08  ; Bhaiksuki # Lo   [9] BHAIKSUKI LETTER A..BHAIKSUKI LETTER VOCALIC L\n11C0A..11C2E  ; Bhaiksuki # Lo  [37] BHAIKSUKI LETTER E..BHAIKSUKI LETTER HA\n11C2F         ; Bhaiksuki # Mc       BHAIKSUKI VOWEL SIGN AA\n11C30..11C36  ; Bhaiksuki # Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L\n11C38..11C3D  ; Bhaiksuki # Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA\n11C3E         ; Bhaiksuki # Mc       BHAIKSUKI SIGN VISARGA\n11C3F         ; Bhaiksuki # Mn       BHAIKSUKI SIGN VIRAMA\n11C40         ; Bhaiksuki # Lo       BHAIKSUKI SIGN AVAGRAHA\n11C41..11C45  ; Bhaiksuki # Po   [5] BHAIKSUKI DANDA..BHAIKSUKI GAP FILLER-2\n11C50..11C59  ; Bhaiksuki # Nd  [10] BHAIKSUKI DIGIT ZERO..BHAIKSUKI DIGIT NINE\n11C5A..11C6C  ; Bhaiksuki # No  [19] BHAIKSUKI NUMBER ONE..BHAIKSUKI HUNDREDS UNIT MARK\n```\n\n----------------------------------------\n\nTITLE: PackagedTask Subclass Implementation\nDESCRIPTION: Shows how to properly override designated initializers in an Objective-C subclass while maintaining initialization chain.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Constructors.rst#2025-04-23_snippet_3\n\nLANGUAGE: Objective-C\nCODE:\n```\n@interface PackagedTask : Task\n@property dispatch_queue_t queue;\n\n- (id)initWithTitle:(NSString *)aTitle date:(NSDate *)aDate;\n- (id)initWithTitle:(NSString *)aTitle date:(NSDate *)aDate queue:(dispatch_queue_t)aQueue;\n@end\n\n@implementation PackagedTask\n- (id)initWithTitle:(NSString *)aTitle date:(NSDate *)aDate {\n  return [self initWithTitle:aTitle\n               date:aDate\n               queue:dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)];\n}\n\n- (id)initWithTitle:(NSString * aTitle date:(NSDate *)aDate queue:(dispatch_queue_t)aQueue {\n  self = [super initWithTitle:aTitle date:aDate];\n  if (self) {\n    queue = aQueue;\n  }\n  return self;\n}\n@end\n```\n\n----------------------------------------\n\nTITLE: Installing swiftShims Target with CMake\nDESCRIPTION: CMake install command for the swiftShims interface library target. This exports the target to the SwiftCoreTargets export set as part of the SwiftCore_development component.\nSOURCE: https://github.com/swiftlang/swift/blob/main/Runtimes/Core/SwiftShims/swift/shims/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS swiftShims\n  EXPORT SwiftCoreTargets\n  COMPONENT SwiftCore_development)\n```\n\n----------------------------------------\n\nTITLE: Unicode 5.0.0 Character Assignments\nDESCRIPTION: Lists Unicode code point ranges and their descriptions for characters newly assigned in Unicode 5.0.0 (July 2006). Includes 1369 total code points across various scripts and symbols.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n0242..024F    ; 5.0 #  [14] LATIN SMALL LETTER GLOTTAL STOP..LATIN SMALL LETTER Y WITH STROKE\n037B..037D    ; 5.0 #   [3] GREEK SMALL REVERSED LUNATE SIGMA SYMBOL..GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL\n[...additional ranges...]\n1D7CA..1D7CB  ; 5.0 #   [2] MATHEMATICAL BOLD CAPITAL DIGAMMA..MATHEMATICAL BOLD SMALL DIGAMMA\n```\n\n----------------------------------------\n\nTITLE: Generic Swift Stack Definition\nDESCRIPTION: Example of a generic Swift Stack structure with Element type parameter.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_60\n\nLANGUAGE: swift\nCODE:\n```\nstruct Stack<Element> {\n  mutating func push(_ item: Element) {\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Swift Constrained Function\nDESCRIPTION: Example of a generic Swift function with a Comparable protocol constraint.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/CppInteroperability/UserGuide-CallingSwiftFromC++.md#2025-04-23_snippet_61\n\nLANGUAGE: swift\nCODE:\n```\nfunc isWithinRange<T: Comparable>(_ value: T, lowerBound: T, upperBound: T) -> Bool {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Swift Comment\nDESCRIPTION: A simple comment indicating the file is empty. This is likely used as a placeholder or template file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-swift-modules-iphoneos.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Empty\n```\n\n----------------------------------------\n\nTITLE: Function Move Operation Syntax Example\nDESCRIPTION: Example of how move operations could be extended to function arguments in Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/ValueSemantics.rst#2025-04-23_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nf(<-x)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Bassa Vah Script\nDESCRIPTION: Defines the Unicode code point ranges for the Bassa Vah script, including letters, tone marks, and punctuation. The total count is 36 code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_81\n\nLANGUAGE: text\nCODE:\n```\n16AD0..16AED  ; Bassa_Vah # Lo  [30] BASSA VAH LETTER ENNI..BASSA VAH LETTER I\n16AF0..16AF4  ; Bassa_Vah # Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE\n16AF5         ; Bassa_Vah # Po       BASSA VAH FULL STOP\n\n# Total code points: 36\n```\n\n----------------------------------------\n\nTITLE: Defining Consonant_Head_Letter Unicode Character Range\nDESCRIPTION: Specifies Unicode code points classified as Consonant_Head_Letter in the Indic_Syllabic_Category property. These characters are head letters in Tibetan script.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/IndicSyllabicCategory.txt#2025-04-23_snippet_17\n\nLANGUAGE: unicode\nCODE:\n```\n0F88..0F8C    ; Consonant_Head_Letter # Lo   [5] TIBETAN SIGN LCE TSA CAN..TIBETAN SIGN INVERTED MCHU CAN\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift API Digester Static Library Build\nDESCRIPTION: CMake configuration that defines and configures the swiftAPIDigester static library. The library is built from ModuleAnalyzerNodes.cpp and ModuleDiagsConsumer.cpp source files, links against swiftIDE, and includes LLVM configuration.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/APIDigester/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_swift_host_library(swiftAPIDigester STATIC\n  ModuleAnalyzerNodes.cpp\n  ModuleDiagsConsumer.cpp)\n\ntarget_link_libraries(swiftAPIDigester PRIVATE\n  swiftIDE)\n\nset_swift_llvm_is_available(swiftAPIDigester)\n```\n\n----------------------------------------\n\nTITLE: Unicode 14.0 Code Point Assignments\nDESCRIPTION: Lists code points and their descriptions newly assigned in Unicode version 14.0.0 (September 2021). Includes various scripts like Arabic, Telugu, Tagalog, and new emoji characters.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedAge.txt#2025-04-23_snippet_14\n\nLANGUAGE: unicode\nCODE:\n```\n061D          ; 14.0 #       ARABIC END OF TEXT MARK\n0870..088E    ; 14.0 #  [31] ARABIC LETTER ALEF WITH ATTACHED FATHA..ARABIC VERTICAL TAIL\n# Additional entries omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Generic Reference Class Definition\nDESCRIPTION: Definition of a generic Reference class for wrapping value types\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/Clonable.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nclass Reference<T> { value : T }\n```\n\n----------------------------------------\n\nTITLE: Metadata Declaration for Swift Diagnostics Documentation\nDESCRIPTION: Declares metadata for Swift compiler diagnostics documentation using TechnologyRoot annotation.\nSOURCE: https://github.com/swiftlang/swift/blob/main/userdocs/diagnostics/diagnostics.md#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n@Metadata {\n   @TechnologyRoot\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Block for Malayalam Script\nDESCRIPTION: Lists Unicode code points for Malayalam script characters with their character types. Includes vowels, consonants, signs, and numeric symbols covering 118 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_13\n\nLANGUAGE: Unicode\nCODE:\n```\n0D00..0D01    ; Malayalam # Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU\n0D02..0D03    ; Malayalam # Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA\n0D04..0D0C    ; Malayalam # Lo   [9] MALAYALAM LETTER VEDIC ANUSVARA..MALAYALAM LETTER VOCALIC L\n0D0E..0D10    ; Malayalam # Lo   [3] MALAYALAM LETTER E..MALAYALAM LETTER AI\n0D12..0D3A    ; Malayalam # Lo  [41] MALAYALAM LETTER O..MALAYALAM LETTER TTTA\n0D3B..0D3C    ; Malayalam # Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA\n0D3D          ; Malayalam # Lo       MALAYALAM SIGN AVAGRAHA\n0D3E..0D40    ; Malayalam # Mc   [3] MALAYALAM VOWEL SIGN AA..MALAYALAM VOWEL SIGN II\n0D41..0D44    ; Malayalam # Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR\n0D46..0D48    ; Malayalam # Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI\n0D4A..0D4C    ; Malayalam # Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU\n0D4D          ; Malayalam # Mn       MALAYALAM SIGN VIRAMA\n0D4E          ; Malayalam # Lo       MALAYALAM LETTER DOT REPH\n0D4F          ; Malayalam # So       MALAYALAM SIGN PARA\n0D54..0D56    ; Malayalam # Lo   [3] MALAYALAM LETTER CHILLU M..MALAYALAM LETTER CHILLU LLL\n0D57          ; Malayalam # Mc       MALAYALAM AU LENGTH MARK\n0D58..0D5E    ; Malayalam # No   [7] MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH..MALAYALAM FRACTION ONE FIFTH\n0D5F..0D61    ; Malayalam # Lo   [3] MALAYALAM LETTER ARCHAIC II..MALAYALAM LETTER VOCALIC LL\n0D62..0D63    ; Malayalam # Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL\n0D66..0D6F    ; Malayalam # Nd  [10] MALAYALAM DIGIT ZERO..MALAYALAM DIGIT NINE\n0D70..0D78    ; Malayalam # No   [9] MALAYALAM NUMBER TEN..MALAYALAM FRACTION THREE SIXTEENTHS\n0D79          ; Malayalam # So       MALAYALAM DATE MARK\n0D7A..0D7F    ; Malayalam # Lo   [6] MALAYALAM LETTER CHILLU NN..MALAYALAM LETTER CHILLU K\n\n# Total code points: 118\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Tirhuta Script\nDESCRIPTION: This snippet defines the Unicode block for the Tirhuta script, including various character types such as letters, vowel signs, and digits.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_84\n\nLANGUAGE: Unicode\nCODE:\n```\n11480..114AF  ; Tirhuta # Lo  [48] TIRHUTA ANJI..TIRHUTA LETTER HA\n114B0..114B2  ; Tirhuta # Mc   [3] TIRHUTA VOWEL SIGN AA..TIRHUTA VOWEL SIGN II\n114B3..114B8  ; Tirhuta # Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL\n114B9         ; Tirhuta # Mc       TIRHUTA VOWEL SIGN E\n114BA         ; Tirhuta # Mn       TIRHUTA VOWEL SIGN SHORT E\n114BB..114BE  ; Tirhuta # Mc   [4] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN AU\n114BF..114C0  ; Tirhuta # Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA\n114C1         ; Tirhuta # Mc       TIRHUTA SIGN VISARGA\n114C2..114C3  ; Tirhuta # Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA\n114C4..114C5  ; Tirhuta # Lo   [2] TIRHUTA SIGN AVAGRAHA..TIRHUTA GVANG\n114C6         ; Tirhuta # Po       TIRHUTA ABBREVIATION SIGN\n114C7         ; Tirhuta # Lo       TIRHUTA OM\n114D0..114D9  ; Tirhuta # Nd  [10] TIRHUTA DIGIT ZERO..TIRHUTA DIGIT NINE\n```\n\n----------------------------------------\n\nTITLE: Importing SceneKit ModelIO and CoreImage Filter Builtins in Swift\nDESCRIPTION: These import statements bring in specific framework components for use in a Swift application. SceneKit.ModelIO provides functionality for 3D model handling, while CoreImage.CIFilterBuiltins enables access to built-in image filters in CoreImage.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-clang-modules-iosmac.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Empty\nSceneKit.ModelIO\nCoreImage.CIFilterBuiltins\n```\n\n----------------------------------------\n\nTITLE: XID_Continue Property Documentation Comment\nDESCRIPTION: Describes the XID_Continue derived property which modifies Mod_ID_Continue for NFKx closure according to UAX #15 specifications. Notes that non-NFKx characters are not removed but ensures identifier validation is consistent after NFKx normalization.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n# Total code points: 141246\n\n# ================================================\n\n# Derived Property: XID_Continue\n#  Mod_ID_Continue modified for closure under NFKx\n#  Modified as described in UAX #15\n#  NOTE: Does NOT remove the non-NFKx characters.\n#        Merely ensures that if isIdentifer(string) then isIdentifier(NFKx(string))\n```\n\n----------------------------------------\n\nTITLE: Empty Swift File Comment\nDESCRIPTION: A single line comment indicating an empty Swift source file.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-clang-modules-watchos.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Empty\n```\n\n----------------------------------------\n\nTITLE: Empty Swift File Comment\nDESCRIPTION: A simple comment indicating the file is empty.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/api_checker/sdk-module-lists/fixed-swift-modules-appletvos.txt#2025-04-23_snippet_0\n\nLANGUAGE: Swift\nCODE:\n```\n// Empty\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Block for Old Hungarian Script\nDESCRIPTION: This snippet defines the Unicode block for the Old Hungarian script, including capital and small letters, and numbers.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_90\n\nLANGUAGE: Unicode\nCODE:\n```\n10C80..10CB2  ; Old_Hungarian # L&  [51] OLD HUNGARIAN CAPITAL LETTER A..OLD HUNGARIAN CAPITAL LETTER US\n10CC0..10CF2  ; Old_Hungarian # L&  [51] OLD HUNGARIAN SMALL LETTER A..OLD HUNGARIAN SMALL LETTER US\n10CFA..10CFF  ; Old_Hungarian # No   [6] OLD HUNGARIAN NUMBER ONE..OLD HUNGARIAN NUMBER ONE THOUSAND\n```\n\n----------------------------------------\n\nTITLE: Unicode Ethiopic Script Definition\nDESCRIPTION: Defines Unicode code point ranges for Ethiopic script characters including syllables, numbers, and punctuation marks. Contains 523 total code points.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Scripts.txt#2025-04-23_snippet_21\n\nLANGUAGE: Unicode\nCODE:\n```\n1200..1248    ; Ethiopic # Lo  [73] ETHIOPIC SYLLABLE HA..ETHIOPIC SYLLABLE QWA\n124A..124D    ; Ethiopic # Lo   [4] ETHIOPIC SYLLABLE QWI..ETHIOPIC SYLLABLE QWE\n1250..1256    ; Ethiopic # Lo   [7] ETHIOPIC SYLLABLE QHA..ETHIOPIC SYLLABLE QHO\n```\n\n----------------------------------------\n\nTITLE: Defining Array Protocol Refinements in Swift\nDESCRIPTION: Defines Array and MutableArray protocols as refinements of Collection with integer indices\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/rejected/BridgingContainerProtocolsToClassClusters.rst#2025-04-23_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nprotocol Array : Collection {\n  where IndexType == Int\n}\nprotocol MutableArray : MutableCollection {\n  where IndexType == Int\n}\n```\n\n----------------------------------------\n\nTITLE: Unicode Alphabetic Character Range Definitions\nDESCRIPTION: Defines ranges of Unicode code points that are classified as alphabetic characters. Each line contains either a single code point or a range in hexadecimal format, followed by the classification 'Alphabetic'.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/Apple/DerivedCoreProperties.txt#2025-04-23_snippet_3\n\nLANGUAGE: unicode\nCODE:\n```\n1760..176C    ; Alphabetic\n176E..1770    ; Alphabetic\n1772..1773    ; Alphabetic\n1780..17B3    ; Alphabetic\n17B6          ; Alphabetic\n/* Additional ranges omitted for brevity */\n10500..10527  ; Alphabetic\n10530..10563  ; Alphabetic\n```\n\n----------------------------------------\n\nTITLE: Adding SourceKit Library Sources in CMake\nDESCRIPTION: Defines the core source files for the sourcekitdAPI library. This includes various components for code completion, documentation support, and data handling.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/lib/API/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_sourcekit_library(sourcekitdAPI\n  CodeCompletionResultsArray.cpp\n  CompactArray.cpp\n  DocStructureArray.cpp\n  DocSupportAnnotationArray.cpp\n  RawData.cpp\n  sourcekitdAPI-Common.cpp\n  DeclarationsArray.cpp\n  TokenAnnotationsArray.cpp\n  ExpressionTypeArray.cpp\n  VariableTypeArray.cpp\n  UIDHandling.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Negative Numeric Value in Unicode (Tibetan)\nDESCRIPTION: This snippet defines a negative numeric value (-0.5) for the Tibetan Digit Half Zero character.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedNumericValues.txt#2025-04-23_snippet_0\n\nLANGUAGE: Unicode\nCODE:\n```\n0F33          ; -0.5 ; ; -1/2 # No       TIBETAN DIGIT HALF ZERO\n```\n\n----------------------------------------\n\nTITLE: String Property Mutation Example\nDESCRIPTION: Example showing O(N) performance impact on COW String property mutation\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/InoutCOWOptimization.rst#2025-04-23_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nanObject.title.append('.')\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Character Mappings for Greek Letters\nDESCRIPTION: A comprehensive character mapping table for Greek Unicode characters. Each line specifies a character code followed by a mapping type (C for compatibility, F for full decomposition, S for special case) and then the resulting character code(s). These mappings are essential for Unicode normalization processes when handling Greek text with various diacritical marks.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n1F5B; C; 1F53; # GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA\n1F5D; C; 1F55; # GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA\n1F5F; C; 1F57; # GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI\n1F68; C; 1F60; # GREEK CAPITAL LETTER OMEGA WITH PSILI\n1F69; C; 1F61; # GREEK CAPITAL LETTER OMEGA WITH DASIA\n1F6A; C; 1F62; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA\n1F6B; C; 1F63; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA\n1F6C; C; 1F64; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA\n1F6D; C; 1F65; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA\n1F6E; C; 1F66; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI\n1F6F; C; 1F67; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI\n1F80; F; 1F00 03B9; # GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI\n1F81; F; 1F01 03B9; # GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI\n1F82; F; 1F02 03B9; # GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI\n1F83; F; 1F03 03B9; # GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI\n1F84; F; 1F04 03B9; # GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI\n1F85; F; 1F05 03B9; # GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI\n1F86; F; 1F06 03B9; # GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI\n1F87; F; 1F07 03B9; # GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI\n1F88; F; 1F00 03B9; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI\n1F88; S; 1F80; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI\n1F89; F; 1F01 03B9; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI\n1F89; S; 1F81; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI\n1F8A; F; 1F02 03B9; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1F8A; S; 1F82; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1F8B; F; 1F03 03B9; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1F8B; S; 1F83; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1F8C; F; 1F04 03B9; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1F8C; S; 1F84; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1F8D; F; 1F05 03B9; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1F8D; S; 1F85; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1F8E; F; 1F06 03B9; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1F8E; S; 1F86; # GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1F8F; F; 1F07 03B9; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1F8F; S; 1F87; # GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1F90; F; 1F20 03B9; # GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI\n1F91; F; 1F21 03B9; # GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI\n1F92; F; 1F22 03B9; # GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI\n1F93; F; 1F23 03B9; # GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI\n1F94; F; 1F24 03B9; # GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI\n1F95; F; 1F25 03B9; # GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI\n1F96; F; 1F26 03B9; # GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI\n1F97; F; 1F27 03B9; # GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI\n1F98; F; 1F20 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI\n1F98; S; 1F90; # GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI\n1F99; F; 1F21 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI\n1F99; S; 1F91; # GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI\n1F9A; F; 1F22 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1F9A; S; 1F92; # GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1F9B; F; 1F23 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1F9B; S; 1F93; # GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1F9C; F; 1F24 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1F9C; S; 1F94; # GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1F9D; F; 1F25 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1F9D; S; 1F95; # GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1F9E; F; 1F26 03B9; # GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1F9E; S; 1F96; # GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1F9F; F; 1F27 03B9; # GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1F9F; S; 1F97; # GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1FA0; F; 1F60 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI\n1FA1; F; 1F61 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI\n1FA2; F; 1F62 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI\n1FA3; F; 1F63 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI\n1FA4; F; 1F64 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI\n1FA5; F; 1F65 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI\n1FA6; F; 1F66 03B9; # GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI\n1FA7; F; 1F67 03B9; # GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI\n1FA8; F; 1F60 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI\n1FA8; S; 1FA0; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI\n1FA9; F; 1F61 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI\n1FA9; S; 1FA1; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI\n1FAA; F; 1F62 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1FAA; S; 1FA2; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI\n1FAB; F; 1F63 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1FAB; S; 1FA3; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI\n1FAC; F; 1F64 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1FAC; S; 1FA4; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI\n1FAD; F; 1F65 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1FAD; S; 1FA5; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI\n1FAE; F; 1F66 03B9; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1FAE; S; 1FA6; # GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI\n1FAF; F; 1F67 03B9; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1FAF; S; 1FA7; # GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI\n1FB2; F; 1F70 03B9; # GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI\n1FB3; F; 03B1 03B9; # GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI\n1FB4; F; 03AC 03B9; # GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI\n1FB6; F; 03B1 0342; # GREEK SMALL LETTER ALPHA WITH PERISPOMENI\n1FB7; F; 03B1 0342 03B9; # GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI\n1FB8; C; 1FB0; # GREEK CAPITAL LETTER ALPHA WITH VRACHY\n1FB9; C; 1FB1; # GREEK CAPITAL LETTER ALPHA WITH MACRON\n1FBA; C; 1F70; # GREEK CAPITAL LETTER ALPHA WITH VARIA\n1FBB; C; 1F71; # GREEK CAPITAL LETTER ALPHA WITH OXIA\n1FBC; F; 03B1 03B9; # GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI\n1FBC; S; 1FB3; # GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI\n1FBE; C; 03B9; # GREEK PROSGEGRAMMENI\n1FC2; F; 1F74 03B9; # GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI\n1FC3; F; 03B7 03B9; # GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI\n1FC4; F; 03AE 03B9; # GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI\n1FC6; F; 03B7 0342; # GREEK SMALL LETTER ETA WITH PERISPOMENI\n1FC7; F; 03B7 0342 03B9; # GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI\n1FC8; C; 1F72; # GREEK CAPITAL LETTER EPSILON WITH VARIA\n1FC9; C; 1F73; # GREEK CAPITAL LETTER EPSILON WITH OXIA\n1FCA; C; 1F74; # GREEK CAPITAL LETTER ETA WITH VARIA\n1FCB; C; 1F75; # GREEK CAPITAL LETTER ETA WITH OXIA\n1FCC; F; 03B7 03B9; # GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI\n1FCC; S; 1FC3; # GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI\n1FD2; F; 03B9 0308 0300; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA\n1FD3; F; 03B9 0308 0301; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n1FD3; S; 0390; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA\n1FD6; F; 03B9 0342; # GREEK SMALL LETTER IOTA WITH PERISPOMENI\n1FD7; F; 03B9 0308 0342; # GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI\n1FD8; C; 1FD0; # GREEK CAPITAL LETTER IOTA WITH VRACHY\n1FD9; C; 1FD1; # GREEK CAPITAL LETTER IOTA WITH MACRON\n1FDA; C; 1F76; # GREEK CAPITAL LETTER IOTA WITH VARIA\n1FDB; C; 1F77; # GREEK CAPITAL LETTER IOTA WITH OXIA\n1FE2; F; 03C5 0308 0300; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA\n1FE3; F; 03C5 0308 0301; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n1FE3; S; 03B0; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA\n1FE4; F; 03C1 0313; # GREEK SMALL LETTER RHO WITH PSILI\n1FE6; F; 03C5 0342; # GREEK SMALL LETTER UPSILON WITH PERISPOMENI\n1FE7; F; 03C5 0308 0342; # GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI\n1FE8; C; 1FE0; # GREEK CAPITAL LETTER UPSILON WITH VRACHY\n1FE9; C; 1FE1; # GREEK CAPITAL LETTER UPSILON WITH MACRON\n1FEA; C; 1F7A; # GREEK CAPITAL LETTER UPSILON WITH VARIA\n1FEB; C; 1F7B; # GREEK CAPITAL LETTER UPSILON WITH OXIA\n1FEC; C; 1FE5; # GREEK CAPITAL LETTER RHO WITH DASIA\n1FF2; F; 1F7C 03B9; # GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI\n1FF3; F; 03C9 03B9; # GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI\n1FF4; F; 03CE 03B9; # GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI\n1FF6; F; 03C9 0342; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI\n1FF7; F; 03C9 0342 03B9; # GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI\n1FF8; C; 1F78; # GREEK CAPITAL LETTER OMICRON WITH VARIA\n```\n\n----------------------------------------\n\nTITLE: Unicode Line Breaking Test Case with Combining Character\nDESCRIPTION: Example test case showing line breaking behavior with a combining character (COMBINING DIAERESIS).\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/UnicodeData/GraphemeBreakTest.txt#2025-04-23_snippet_2\n\nLANGUAGE: Plain Text\nCODE:\n```\n÷ 0020 × 0308 ÷ 0020 ÷\t#  ÷ [0.2] SPACE (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]\n```\n\n----------------------------------------\n\nTITLE: Unicode Case Mapping Configuration for Multiple Scripts\nDESCRIPTION: A configuration mapping uppercase Unicode code points to their lowercase equivalents across various scripts including Deseret, Osage, Vithkuqi, Old Hungarian, Garay, and Warang Citi. Each line follows the format of uppercase code point, mapping type, and lowercase code point with descriptive comments.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/CaseFolding.txt#2025-04-23_snippet_8\n\nLANGUAGE: configuration\nCODE:\n```\nFF3A; C; FF5A; # FULLWIDTH LATIN CAPITAL LETTER Z\n10400; C; 10428; # DESERET CAPITAL LETTER LONG I\n10401; C; 10429; # DESERET CAPITAL LETTER LONG E\n10402; C; 1042A; # DESERET CAPITAL LETTER LONG A\n10403; C; 1042B; # DESERET CAPITAL LETTER LONG AH\n10404; C; 1042C; # DESERET CAPITAL LETTER LONG O\n10405; C; 1042D; # DESERET CAPITAL LETTER LONG OO\n10406; C; 1042E; # DESERET CAPITAL LETTER SHORT I\n10407; C; 1042F; # DESERET CAPITAL LETTER SHORT E\n10408; C; 10430; # DESERET CAPITAL LETTER SHORT A\n10409; C; 10431; # DESERET CAPITAL LETTER SHORT AH\n1040A; C; 10432; # DESERET CAPITAL LETTER SHORT O\n1040B; C; 10433; # DESERET CAPITAL LETTER SHORT OO\n1040C; C; 10434; # DESERET CAPITAL LETTER AY\n1040D; C; 10435; # DESERET CAPITAL LETTER OW\n1040E; C; 10436; # DESERET CAPITAL LETTER WU\n1040F; C; 10437; # DESERET CAPITAL LETTER YEE\n10410; C; 10438; # DESERET CAPITAL LETTER H\n10411; C; 10439; # DESERET CAPITAL LETTER PEE\n10412; C; 1043A; # DESERET CAPITAL LETTER BEE\n10413; C; 1043B; # DESERET CAPITAL LETTER TEE\n10414; C; 1043C; # DESERET CAPITAL LETTER DEE\n10415; C; 1043D; # DESERET CAPITAL LETTER CHEE\n10416; C; 1043E; # DESERET CAPITAL LETTER JEE\n10417; C; 1043F; # DESERET CAPITAL LETTER KAY\n10418; C; 10440; # DESERET CAPITAL LETTER GAY\n10419; C; 10441; # DESERET CAPITAL LETTER EF\n1041A; C; 10442; # DESERET CAPITAL LETTER VEE\n1041B; C; 10443; # DESERET CAPITAL LETTER ETH\n1041C; C; 10444; # DESERET CAPITAL LETTER THEE\n1041D; C; 10445; # DESERET CAPITAL LETTER ES\n1041E; C; 10446; # DESERET CAPITAL LETTER ZEE\n1041F; C; 10447; # DESERET CAPITAL LETTER ESH\n10420; C; 10448; # DESERET CAPITAL LETTER ZHEE\n10421; C; 10449; # DESERET CAPITAL LETTER ER\n10422; C; 1044A; # DESERET CAPITAL LETTER EL\n10423; C; 1044B; # DESERET CAPITAL LETTER EM\n10424; C; 1044C; # DESERET CAPITAL LETTER EN\n10425; C; 1044D; # DESERET CAPITAL LETTER ENG\n10426; C; 1044E; # DESERET CAPITAL LETTER OI\n10427; C; 1044F; # DESERET CAPITAL LETTER EW\n104B0; C; 104D8; # OSAGE CAPITAL LETTER A\n104B1; C; 104D9; # OSAGE CAPITAL LETTER AI\n104B2; C; 104DA; # OSAGE CAPITAL LETTER AIN\n104B3; C; 104DB; # OSAGE CAPITAL LETTER AH\n104B4; C; 104DC; # OSAGE CAPITAL LETTER BRA\n104B5; C; 104DD; # OSAGE CAPITAL LETTER CHA\n104B6; C; 104DE; # OSAGE CAPITAL LETTER EHCHA\n104B7; C; 104DF; # OSAGE CAPITAL LETTER E\n104B8; C; 104E0; # OSAGE CAPITAL LETTER EIN\n104B9; C; 104E1; # OSAGE CAPITAL LETTER HA\n104BA; C; 104E2; # OSAGE CAPITAL LETTER HYA\n104BB; C; 104E3; # OSAGE CAPITAL LETTER I\n104BC; C; 104E4; # OSAGE CAPITAL LETTER KA\n104BD; C; 104E5; # OSAGE CAPITAL LETTER EHKA\n104BE; C; 104E6; # OSAGE CAPITAL LETTER KYA\n104BF; C; 104E7; # OSAGE CAPITAL LETTER LA\n104C0; C; 104E8; # OSAGE CAPITAL LETTER MA\n104C1; C; 104E9; # OSAGE CAPITAL LETTER NA\n104C2; C; 104EA; # OSAGE CAPITAL LETTER O\n104C3; C; 104EB; # OSAGE CAPITAL LETTER OIN\n104C4; C; 104EC; # OSAGE CAPITAL LETTER PA\n104C5; C; 104ED; # OSAGE CAPITAL LETTER EHPA\n104C6; C; 104EE; # OSAGE CAPITAL LETTER SA\n104C7; C; 104EF; # OSAGE CAPITAL LETTER SHA\n104C8; C; 104F0; # OSAGE CAPITAL LETTER TA\n104C9; C; 104F1; # OSAGE CAPITAL LETTER EHTA\n104CA; C; 104F2; # OSAGE CAPITAL LETTER TSA\n104CB; C; 104F3; # OSAGE CAPITAL LETTER EHTSA\n104CC; C; 104F4; # OSAGE CAPITAL LETTER TSHA\n104CD; C; 104F5; # OSAGE CAPITAL LETTER DHA\n104CE; C; 104F6; # OSAGE CAPITAL LETTER U\n104CF; C; 104F7; # OSAGE CAPITAL LETTER WA\n104D0; C; 104F8; # OSAGE CAPITAL LETTER KHA\n104D1; C; 104F9; # OSAGE CAPITAL LETTER GHA\n104D2; C; 104FA; # OSAGE CAPITAL LETTER ZA\n104D3; C; 104FB; # OSAGE CAPITAL LETTER ZHA\n10570; C; 10597; # VITHKUQI CAPITAL LETTER A\n10571; C; 10598; # VITHKUQI CAPITAL LETTER BBE\n10572; C; 10599; # VITHKUQI CAPITAL LETTER BE\n10573; C; 1059A; # VITHKUQI CAPITAL LETTER CE\n10574; C; 1059B; # VITHKUQI CAPITAL LETTER CHE\n10575; C; 1059C; # VITHKUQI CAPITAL LETTER DE\n10576; C; 1059D; # VITHKUQI CAPITAL LETTER DHE\n10577; C; 1059E; # VITHKUQI CAPITAL LETTER EI\n10578; C; 1059F; # VITHKUQI CAPITAL LETTER E\n10579; C; 105A0; # VITHKUQI CAPITAL LETTER FE\n1057A; C; 105A1; # VITHKUQI CAPITAL LETTER GA\n1057C; C; 105A3; # VITHKUQI CAPITAL LETTER HA\n1057D; C; 105A4; # VITHKUQI CAPITAL LETTER HHA\n1057E; C; 105A5; # VITHKUQI CAPITAL LETTER I\n1057F; C; 105A6; # VITHKUQI CAPITAL LETTER IJE\n10580; C; 105A7; # VITHKUQI CAPITAL LETTER JE\n10581; C; 105A8; # VITHKUQI CAPITAL LETTER KA\n10582; C; 105A9; # VITHKUQI CAPITAL LETTER LA\n10583; C; 105AA; # VITHKUQI CAPITAL LETTER LLA\n10584; C; 105AB; # VITHKUQI CAPITAL LETTER ME\n10585; C; 105AC; # VITHKUQI CAPITAL LETTER NE\n10586; C; 105AD; # VITHKUQI CAPITAL LETTER NJE\n10587; C; 105AE; # VITHKUQI CAPITAL LETTER O\n10588; C; 105AF; # VITHKUQI CAPITAL LETTER PE\n10589; C; 105B0; # VITHKUQI CAPITAL LETTER QA\n1058A; C; 105B1; # VITHKUQI CAPITAL LETTER RE\n1058C; C; 105B3; # VITHKUQI CAPITAL LETTER SE\n1058D; C; 105B4; # VITHKUQI CAPITAL LETTER SHE\n1058E; C; 105B5; # VITHKUQI CAPITAL LETTER TE\n1058F; C; 105B6; # VITHKUQI CAPITAL LETTER THE\n10590; C; 105B7; # VITHKUQI CAPITAL LETTER U\n10591; C; 105B8; # VITHKUQI CAPITAL LETTER VE\n10592; C; 105B9; # VITHKUQI CAPITAL LETTER XE\n10594; C; 105BB; # VITHKUQI CAPITAL LETTER Y\n10595; C; 105BC; # VITHKUQI CAPITAL LETTER ZE\n10C80; C; 10CC0; # OLD HUNGARIAN CAPITAL LETTER A\n10C81; C; 10CC1; # OLD HUNGARIAN CAPITAL LETTER AA\n10C82; C; 10CC2; # OLD HUNGARIAN CAPITAL LETTER EB\n10C83; C; 10CC3; # OLD HUNGARIAN CAPITAL LETTER AMB\n10C84; C; 10CC4; # OLD HUNGARIAN CAPITAL LETTER EC\n10C85; C; 10CC5; # OLD HUNGARIAN CAPITAL LETTER ENC\n10C86; C; 10CC6; # OLD HUNGARIAN CAPITAL LETTER ECS\n10C87; C; 10CC7; # OLD HUNGARIAN CAPITAL LETTER ED\n10C88; C; 10CC8; # OLD HUNGARIAN CAPITAL LETTER AND\n10C89; C; 10CC9; # OLD HUNGARIAN CAPITAL LETTER E\n10C8A; C; 10CCA; # OLD HUNGARIAN CAPITAL LETTER CLOSE E\n10C8B; C; 10CCB; # OLD HUNGARIAN CAPITAL LETTER EE\n10C8C; C; 10CCC; # OLD HUNGARIAN CAPITAL LETTER EF\n10C8D; C; 10CCD; # OLD HUNGARIAN CAPITAL LETTER EG\n10C8E; C; 10CCE; # OLD HUNGARIAN CAPITAL LETTER EGY\n10C8F; C; 10CCF; # OLD HUNGARIAN CAPITAL LETTER EH\n10C90; C; 10CD0; # OLD HUNGARIAN CAPITAL LETTER I\n10C91; C; 10CD1; # OLD HUNGARIAN CAPITAL LETTER II\n10C92; C; 10CD2; # OLD HUNGARIAN CAPITAL LETTER EJ\n10C93; C; 10CD3; # OLD HUNGARIAN CAPITAL LETTER EK\n10C94; C; 10CD4; # OLD HUNGARIAN CAPITAL LETTER AK\n10C95; C; 10CD5; # OLD HUNGARIAN CAPITAL LETTER UNK\n10C96; C; 10CD6; # OLD HUNGARIAN CAPITAL LETTER EL\n10C97; C; 10CD7; # OLD HUNGARIAN CAPITAL LETTER ELY\n10C98; C; 10CD8; # OLD HUNGARIAN CAPITAL LETTER EM\n10C99; C; 10CD9; # OLD HUNGARIAN CAPITAL LETTER EN\n10C9A; C; 10CDA; # OLD HUNGARIAN CAPITAL LETTER ENY\n10C9B; C; 10CDB; # OLD HUNGARIAN CAPITAL LETTER O\n10C9C; C; 10CDC; # OLD HUNGARIAN CAPITAL LETTER OO\n10C9D; C; 10CDD; # OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE\n10C9E; C; 10CDE; # OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE\n10C9F; C; 10CDF; # OLD HUNGARIAN CAPITAL LETTER OEE\n10CA0; C; 10CE0; # OLD HUNGARIAN CAPITAL LETTER EP\n10CA1; C; 10CE1; # OLD HUNGARIAN CAPITAL LETTER EMP\n10CA2; C; 10CE2; # OLD HUNGARIAN CAPITAL LETTER ER\n10CA3; C; 10CE3; # OLD HUNGARIAN CAPITAL LETTER SHORT ER\n10CA4; C; 10CE4; # OLD HUNGARIAN CAPITAL LETTER ES\n10CA5; C; 10CE5; # OLD HUNGARIAN CAPITAL LETTER ESZ\n10CA6; C; 10CE6; # OLD HUNGARIAN CAPITAL LETTER ET\n10CA7; C; 10CE7; # OLD HUNGARIAN CAPITAL LETTER ENT\n10CA8; C; 10CE8; # OLD HUNGARIAN CAPITAL LETTER ETY\n10CA9; C; 10CE9; # OLD HUNGARIAN CAPITAL LETTER ECH\n10CAA; C; 10CEA; # OLD HUNGARIAN CAPITAL LETTER U\n10CAB; C; 10CEB; # OLD HUNGARIAN CAPITAL LETTER UU\n10CAC; C; 10CEC; # OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE\n10CAD; C; 10CED; # OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE\n10CAE; C; 10CEE; # OLD HUNGARIAN CAPITAL LETTER EV\n10CAF; C; 10CEF; # OLD HUNGARIAN CAPITAL LETTER EZ\n10CB0; C; 10CF0; # OLD HUNGARIAN CAPITAL LETTER EZS\n10CB1; C; 10CF1; # OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN\n10CB2; C; 10CF2; # OLD HUNGARIAN CAPITAL LETTER US\n10D50; C; 10D70; # GARAY CAPITAL LETTER A\n10D51; C; 10D71; # GARAY CAPITAL LETTER CA\n10D52; C; 10D72; # GARAY CAPITAL LETTER MA\n10D53; C; 10D73; # GARAY CAPITAL LETTER KA\n10D54; C; 10D74; # GARAY CAPITAL LETTER BA\n10D55; C; 10D75; # GARAY CAPITAL LETTER JA\n10D56; C; 10D76; # GARAY CAPITAL LETTER SA\n10D57; C; 10D77; # GARAY CAPITAL LETTER WA\n10D58; C; 10D78; # GARAY CAPITAL LETTER LA\n10D59; C; 10D79; # GARAY CAPITAL LETTER GA\n10D5A; C; 10D7A; # GARAY CAPITAL LETTER DA\n10D5B; C; 10D7B; # GARAY CAPITAL LETTER XA\n10D5C; C; 10D7C; # GARAY CAPITAL LETTER YA\n10D5D; C; 10D7D; # GARAY CAPITAL LETTER TA\n10D5E; C; 10D7E; # GARAY CAPITAL LETTER RA\n10D5F; C; 10D7F; # GARAY CAPITAL LETTER NYA\n10D60; C; 10D80; # GARAY CAPITAL LETTER FA\n10D61; C; 10D81; # GARAY CAPITAL LETTER NA\n10D62; C; 10D82; # GARAY CAPITAL LETTER PA\n10D63; C; 10D83; # GARAY CAPITAL LETTER HA\n10D64; C; 10D84; # GARAY CAPITAL LETTER OLD KA\n10D65; C; 10D85; # GARAY CAPITAL LETTER OLD NA\n118A0; C; 118C0; # WARANG CITI CAPITAL LETTER NGAA\n118A1; C; 118C1; # WARANG CITI CAPITAL LETTER A\n118A2; C; 118C2; # WARANG CITI CAPITAL LETTER WI\n118A3; C; 118C3; # WARANG CITI CAPITAL LETTER YU\n118A4; C; 118C4; # WARANG CITI CAPITAL LETTER YA\n118A5; C; 118C5; # WARANG CITI CAPITAL LETTER YO\n118A6; C; 118C6; # WARANG CITI CAPITAL LETTER II\n118A7; C; 118C7; # WARANG CITI CAPITAL LETTER UU\n118A8; C; 118C8; # WARANG CITI CAPITAL LETTER E\n118A9; C; 118C9; # WARANG CITI CAPITAL LETTER O\n118AA; C; 118CA; # WARANG CITI CAPITAL LETTER ANG\n118AB; C; 118CB; # WARANG CITI CAPITAL LETTER GA\n118AC; C; 118CC; # WARANG CITI CAPITAL LETTER KO\n118AD; C; 118CD; # WARANG CITI CAPITAL LETTER ENY\n118AE; C; 118CE; # WARANG CITI CAPITAL LETTER YUJ\n118AF; C; 118CF; # WARANG CITI CAPITAL LETTER UC\n118B0; C; 118D0; # WARANG CITI CAPITAL LETTER ENN\n118B1; C; 118D1; # WARANG CITI CAPITAL LETTER ODD\n118B2; C; 118D2; # WARANG CITI CAPITAL LETTER TTE\n118B3; C; 118D3; # WARANG CITI CAPITAL LETTER NUNG\n118B4; C; 118D4; # WARANG CITI CAPITAL LETTER DA\n118B5; C; 118D5; # WARANG CITI CAPITAL LETTER AT\n118B6; C; 118D6; # WARANG CITI CAPITAL LETTER AM\n118B7; C; 118D7; # WARANG CITI CAPITAL LETTER BU\n118B8; C; 118D8; # WARANG CITI CAPITAL LETTER PU\n```\n\n----------------------------------------\n\nTITLE: NSString Hash Value Implementation for i386\nDESCRIPTION: Assembly code verification for _swift_stdlib_NSStringHashValue and _swift_stdlib_NSStringHashValuePointer on i386 architecture. Validates message sending and autorelease return value retention.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/stdlib/runtime_autorelease_optimization.txt#2025-04-23_snippet_1\n\nLANGUAGE: assembly\nCODE:\n```\n// CHECK-i386-LABEL: _swift_stdlib_NSStringHashValue:\n// CHECK-i386-NOT: ret\n// CHECK-i386: calll   {{.*}} ## symbol stub for: _objc_msgSend\n// CHECK-i386: movl    %ebp, %ebp\n// CHECK-i386: calll   {{.*}} ## symbol stub for: _objc_retainAutoreleasedReturnValue\n// CHECK-i386: ret\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Point Listing for Other_Symbol Category\nDESCRIPTION: Lists Unicode code points classified as 'Other_Symbol' (So). Each entry shows the hexadecimal code point or range, followed by a comment with the official Unicode character name. This data is typically used in Unicode processing libraries and character classification systems.\nSOURCE: https://github.com/swiftlang/swift/blob/main/utils/gen-unicode-data/Data/16/DerivedGeneralCategory.txt#2025-04-23_snippet_30\n\nLANGUAGE: unicode\nCODE:\n```\n00A6          ; So #       BROKEN BAR\n00A9          ; So #       COPYRIGHT SIGN\n00AE          ; So #       REGISTERED SIGN\n00B0          ; So #       DEGREE SIGN\n0482          ; So #       CYRILLIC THOUSANDS SIGN\n058D..058E    ; So #   [2] RIGHT-FACING ARMENIAN ETERNITY SIGN..LEFT-FACING ARMENIAN ETERNITY SIGN\n060E..060F    ; So #   [2] ARABIC POETIC VERSE SIGN..ARABIC SIGN MISRA\n06DE          ; So #       ARABIC START OF RUB EL HIZB\n06E9          ; So #       ARABIC PLACE OF SAJDAH\n06FD..06FE    ; So #   [2] ARABIC SIGN SINDHI AMPERSAND..ARABIC SIGN SINDHI POSTPOSITION MEN\n07F6          ; So #       NKO SYMBOL OO DENNEN\n09FA          ; So #       BENGALI ISSHAR\n0B70          ; So #       ORIYA ISSHAR\n0BF3..0BF8    ; So #   [6] TAMIL DAY SIGN..TAMIL AS ABOVE SIGN\n0BFA          ; So #       TAMIL NUMBER SIGN\n0C7F          ; So #       TELUGU SIGN TUUMU\n0D4F          ; So #       MALAYALAM SIGN PARA\n0D79          ; So #       MALAYALAM DATE MARK\n0F01..0F03    ; So #   [3] TIBETAN MARK GTER YIG MGO TRUNCATED A..TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA\n0F13          ; So #       TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN\n0F15..0F17    ; So #   [3] TIBETAN LOGOTYPE SIGN CHAD RTAGS..TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS\n0F1A..0F1F    ; So #   [6] TIBETAN SIGN RDEL DKAR GCIG..TIBETAN SIGN RDEL DKAR RDEL NAG\n0F34          ; So #       TIBETAN MARK BSDUS RTAGS\n0F36          ; So #       TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN\n0F38          ; So #       TIBETAN MARK CHE MGO\n0FBE..0FC5    ; So #   [8] TIBETAN KU RU KHA..TIBETAN SYMBOL RDO RJE\n0FC7..0FCC    ; So #   [6] TIBETAN SYMBOL RDO RJE RGYA GRAM..TIBETAN SYMBOL NOR BU BZHI -KHYIL\n0FCE..0FCF    ; So #   [2] TIBETAN SIGN RDEL NAG RDEL DKAR..TIBETAN SIGN RDEL NAG GSUM\n0FD5..0FD8    ; So #   [4] RIGHT-FACING SVASTI SIGN..LEFT-FACING SVASTI SIGN WITH DOTS\n109E..109F    ; So #   [2] MYANMAR SYMBOL SHAN ONE..MYANMAR SYMBOL SHAN EXCLAMATION\n1390..1399    ; So #  [10] ETHIOPIC TONAL MARK YIZET..ETHIOPIC TONAL MARK KURT\n166D          ; So #       CANADIAN SYLLABICS CHI SIGN\n1940          ; So #       LIMBU SIGN LOO\n19DE..19FF    ; So #  [34] NEW TAI LUE SIGN LAE..KHMER SYMBOL DAP-PRAM ROC\n1B61..1B6A    ; So #  [10] BALINESE MUSICAL SYMBOL DONG..BALINESE MUSICAL SYMBOL DANG GEDE\n1B74..1B7C    ; So #   [9] BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG..BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING\n2100..2101    ; So #   [2] ACCOUNT OF..ADDRESSED TO THE SUBJECT\n2103..2106    ; So #   [4] DEGREE CELSIUS..CADA UNA\n2108..2109    ; So #   [2] SCRUPLE..DEGREE FAHRENHEIT\n2114          ; So #       L B BAR SYMBOL\n2116..2117    ; So #   [2] NUMERO SIGN..SOUND RECORDING COPYRIGHT\n211E..2123    ; So #   [6] PRESCRIPTION TAKE..VERSICLE\n2125          ; So #       OUNCE SIGN\n2127          ; So #       INVERTED OHM SIGN\n2129          ; So #       TURNED GREEK SMALL LETTER IOTA\n212E          ; So #       ESTIMATED SYMBOL\n213A..213B    ; So #   [2] ROTATED CAPITAL Q..FACSIMILE SIGN\n214A          ; So #       PROPERTY LINE\n214C..214D    ; So #   [2] PER SIGN..AKTIESELSKAB\n214F          ; So #       SYMBOL FOR SAMARITAN SOURCE\n218A..218B    ; So #   [2] TURNED DIGIT TWO..TURNED DIGIT THREE\n2195..2199    ; So #   [5] UP DOWN ARROW..SOUTH WEST ARROW\n219C..219F    ; So #   [4] LEFTWARDS WAVE ARROW..UPWARDS TWO HEADED ARROW\n21A1..21A2    ; So #   [2] DOWNWARDS TWO HEADED ARROW..LEFTWARDS ARROW WITH TAIL\n21A4..21A5    ; So #   [2] LEFTWARDS ARROW FROM BAR..UPWARDS ARROW FROM BAR\n21A7..21AD    ; So #   [7] DOWNWARDS ARROW FROM BAR..LEFT RIGHT WAVE ARROW\n21AF..21CD    ; So #  [31] DOWNWARDS ZIGZAG ARROW..LEFTWARDS DOUBLE ARROW WITH STROKE\n21D0..21D1    ; So #   [2] LEFTWARDS DOUBLE ARROW..UPWARDS DOUBLE ARROW\n21D3          ; So #       DOWNWARDS DOUBLE ARROW\n21D5..21F3    ; So #  [31] UP DOWN DOUBLE ARROW..UP DOWN WHITE ARROW\n2300..2307    ; So #   [8] DIAMETER SIGN..WAVY LINE\n230C..231F    ; So #  [20] BOTTOM RIGHT CROP..BOTTOM RIGHT CORNER\n2322..2328    ; So #   [7] FROWN..KEYBOARD\n232B..237B    ; So #  [81] ERASE TO THE LEFT..NOT CHECK MARK\n237D..239A    ; So #  [30] SHOULDERED OPEN BOX..CLEAR SCREEN SYMBOL\n23B4..23DB    ; So #  [40] TOP SQUARE BRACKET..FUSE\n23E2..2429    ; So #  [72] WHITE TRAPEZIUM..SYMBOL FOR DELETE MEDIUM SHADE FORM\n2440..244A    ; So #  [11] OCR HOOK..OCR DOUBLE BACKSLASH\n249C..24E9    ; So #  [78] PARENTHESIZED LATIN SMALL LETTER A..CIRCLED LATIN SMALL LETTER Z\n2500..25B6    ; So # [183] BOX DRAWINGS LIGHT HORIZONTAL..BLACK RIGHT-POINTING TRIANGLE\n25B8..25C0    ; So #   [9] BLACK RIGHT-POINTING SMALL TRIANGLE..BLACK LEFT-POINTING TRIANGLE\n25C2..25F7    ; So #  [54] BLACK LEFT-POINTING SMALL TRIANGLE..WHITE CIRCLE WITH UPPER RIGHT QUADRANT\n2600..266E    ; So # [111] BLACK SUN WITH RAYS..MUSIC NATURAL SIGN\n2670..2767    ; So # [248] WEST SYRIAC CROSS..ROTATED FLORAL HEART BULLET\n2794..27BF    ; So #  [44] HEAVY WIDE-HEADED RIGHTWARDS ARROW..DOUBLE CURLY LOOP\n2800..28FF    ; So # [256] BRAILLE PATTERN BLANK..BRAILLE PATTERN DOTS-12345678\n2B00..2B2F    ; So #  [48] NORTH EAST WHITE ARROW..WHITE VERTICAL ELLIPSE\n2B45..2B46    ; So #   [2] LEFTWARDS QUADRUPLE ARROW..RIGHTWARDS QUADRUPLE ARROW\n2B4D..2B73    ; So #  [39] DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW..DOWNWARDS TRIANGLE-HEADED ARROW TO BAR\n2B76..2B95    ; So #  [32] NORTH WEST TRIANGLE-HEADED ARROW TO BAR..RIGHTWARDS BLACK ARROW\n2B97..2BFF    ; So # [105] SYMBOL FOR TYPE A ELECTRONICS..HELLSCHREIBER PAUSE SYMBOL\n2CE5..2CEA    ; So #   [6] COPTIC SYMBOL MI RO..COPTIC SYMBOL SHIMA SIMA\n2E50..2E51    ; So #   [2] CROSS PATTY WITH RIGHT CROSSBAR..CROSS PATTY WITH LEFT CROSSBAR\n2E80..2E99    ; So #  [26] CJK RADICAL REPEAT..CJK RADICAL RAP\n2E9B..2EF3    ; So #  [89] CJK RADICAL CHOKE..CJK RADICAL C-SIMPLIFIED TURTLE\n2F00..2FD5    ; So # [214] KANGXI RADICAL ONE..KANGXI RADICAL FLUTE\n2FF0..2FFF    ; So #  [16] IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT..IDEOGRAPHIC DESCRIPTION CHARACTER ROTATION\n3004          ; So #       JAPANESE INDUSTRIAL STANDARD SYMBOL\n3012..3013    ; So #   [2] POSTAL MARK..GETA MARK\n3020          ; So #       POSTAL MARK FACE\n3036..3037    ; So #   [2] CIRCLED POSTAL MARK..IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL\n303E..303F    ; So #   [2] IDEOGRAPHIC VARIATION INDICATOR..IDEOGRAPHIC HALF FILL SPACE\n3190..3191    ; So #   [2] IDEOGRAPHIC ANNOTATION LINKING MARK..IDEOGRAPHIC ANNOTATION REVERSE MARK\n3196..319F    ; So #  [10] IDEOGRAPHIC ANNOTATION TOP MARK..IDEOGRAPHIC ANNOTATION MAN MARK\n31C0..31E5    ; So #  [38] CJK STROKE T..CJK STROKE SZP\n31EF          ; So #       IDEOGRAPHIC DESCRIPTION CHARACTER SUBTRACTION\n3200..321E    ; So #  [31] PARENTHESIZED HANGUL KIYEOK..PARENTHESIZED KOREAN CHARACTER O HU\n322A..3247    ; So #  [30] PARENTHESIZED IDEOGRAPH MOON..CIRCLED IDEOGRAPH KOTO\n3250          ; So #       PARTNERSHIP SIGN\n3260..327F    ; So #  [32] CIRCLED HANGUL KIYEOK..KOREAN STANDARD SYMBOL\n328A..32B0    ; So #  [39] CIRCLED IDEOGRAPH MOON..CIRCLED IDEOGRAPH NIGHT\n32C0..33FF    ; So # [320] IDEOGRAPHIC TELEGRAPH SYMBOL FOR JANUARY..SQUARE GAL\n4DC0..4DFF    ; So #  [64] HEXAGRAM FOR THE CREATIVE HEAVEN..HEXAGRAM FOR BEFORE COMPLETION\nA490..A4C6    ; So #  [55] YI RADICAL QOT..YI RADICAL KE\nA828..A82B    ; So #   [4] SYLOTI NAGRI POETRY MARK-1..SYLOTI NAGRI POETRY MARK-4\nA836..A837    ; So #   [2] NORTH INDIC QUARTER MARK..NORTH INDIC PLACEHOLDER MARK\nA839          ; So #       NORTH INDIC QUANTITY MARK\nAA77..AA79    ; So #   [3] MYANMAR SYMBOL AITON EXCLAMATION..MYANMAR SYMBOL AITON TWO\nFD40..FD4F    ; So #  [16] ARABIC LIGATURE RAHIMAHU ALLAAH..ARABIC LIGATURE RAHIMAHUM ALLAAH\nFDCF          ; So #       ARABIC LIGATURE SALAAMUHU ALAYNAA\nFDFD..FDFF    ; So #   [3] ARABIC LIGATURE BISMILLAH AR-RAHMAN AR-RAHEEM..ARABIC LIGATURE AZZA WA JALL\nFFE4          ; So #       FULLWIDTH BROKEN BAR\nFFE8          ; So #       HALFWIDTH FORMS LIGHT VERTICAL\nFFED..FFEE    ; So #   [2] HALFWIDTH BLACK SQUARE..HALFWIDTH WHITE CIRCLE\nFFFC..FFFD    ; So #   [2] OBJECT REPLACEMENT CHARACTER..REPLACEMENT CHARACTER\n10137..1013F  ; So #   [9] AEGEAN WEIGHT BASE UNIT..AEGEAN MEASURE THIRD SUBUNIT\n10179..10189  ; So #  [17] GREEK YEAR SIGN..GREEK TRYBLION BASE SIGN\n1018C..1018E  ; So #   [3] GREEK SINUSOID SIGN..NOMISMA SIGN\n10190..1019C  ; So #  [13] ROMAN SEXTANS SIGN..ASCIA SYMBOL\n101A0         ; So #       GREEK SYMBOL TAU RHO\n101D0..101FC  ; So #  [45] PHAISTOS DISC SIGN PEDESTRIAN..PHAISTOS DISC SIGN WAVY BAND\n10877..10878  ; So #   [2] PALMYRENE LEFT-POINTING FLEURON..PALMYRENE RIGHT-POINTING FLEURON\n10AC8         ; So #       MANICHAEAN SIGN UD\n1173F         ; So #       AHOM SYMBOL VI\n11FD5..11FDC  ; So #   [8] TAMIL SIGN NEL..TAMIL SIGN MUKKURUNI\n11FE1..11FF1  ; So #  [17] TAMIL SIGN PAARAM..TAMIL SIGN VAKAIYARAA\n16B3C..16B3F  ; So #   [4] PAHAWH HMONG SIGN XYEEM NTXIV..PAHAWH HMONG SIGN XYEEM FAIB\n16B45         ; So #       PAHAWH HMONG SIGN CIM TSOV ROG\n1BC9C         ; So #       DUPLOYAN SIGN O WITH CROSS\n1CC00..1CCEF  ; So # [240] UP-POINTING GO-KART..OUTLINED LATIN CAPITAL LETTER Z\n1CD00..1CEB3  ; So # [436] BLOCK OCTANT-3..BLACK RIGHT TRIANGLE CARET\n1CF50..1CFC3  ; So # [116] ZNAMENNY NEUME KRYUK..ZNAMENNY NEUME PAUK\n1D000..1D0F5  ; So # [246] BYZANTINE MUSICAL SYMBOL PSILI..BYZANTINE MUSICAL SYMBOL GORGON NEO KATO\n1D100..1D126  ; So #  [39] MUSICAL SYMBOL SINGLE BARLINE..MUSICAL SYMBOL DRUM CLEF-2\n1D129..1D164  ; So #  [60] MUSICAL SYMBOL MULTIPLE MEASURE REST..MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE\n1D16A..1D16C  ; So #   [3] MUSICAL SYMBOL FINGERED TREMOLO-1..MUSICAL SYMBOL FINGERED TREMOLO-3\n1D183..1D184  ; So #   [2] MUSICAL SYMBOL ARPEGGIATO UP..MUSICAL SYMBOL ARPEGGIATO DOWN\n1D18C..1D1A9  ; So #  [30] MUSICAL SYMBOL RINFORZANDO..MUSICAL SYMBOL DEGREE SLASH\n1D1AE..1D1EA  ; So #  [61] MUSICAL SYMBOL PEDAL MARK..MUSICAL SYMBOL KORON\n1D200..1D241  ; So #  [66] GREEK VOCAL NOTATION SYMBOL-1..GREEK INSTRUMENTAL NOTATION SYMBOL-54\n1D245         ; So #       GREEK MUSICAL LEIMMA\n```\n\n----------------------------------------\n\nTITLE: Installing Clang Built-in Headers for Swift Using CMake\nDESCRIPTION: This CMake code converts the LLVM library output path to a CMake path format and then installs Clang's header files and module maps into the lib directory. The installation is configured as a specific component, targeting only .h and .modulemap files.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/SwiftShims/swift/shims/CMakeLists.txt#2025-04-23_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# should be used in conjunction with clang-resource-dir-symlink.\nfile(TO_CMAKE_PATH \"${LLVM_LIBRARY_OUTPUT_INTDIR}\"\n  _SWIFT_SHIMS_PATH_TO_CLANG_LIB_BUILD)\nswift_install_in_component(DIRECTORY \"${_SWIFT_SHIMS_PATH_TO_CLANG_LIB_BUILD}/clang\"\n                           DESTINATION \"lib\"\n                           COMPONENT clang-builtin-headers-in-clang-resource-dir\n                           REGEX \"\\.(h|modulemap)$\")\n```\n\n----------------------------------------\n\nTITLE: No-Allocations Mode Example in Embedded Swift\nDESCRIPTION: Shows how the -no-allocations compiler flag prevents heap allocations and generates errors for allocation attempts in Embedded Swift.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/EmbeddedSwift/UserManual.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cat test.swift\nlet p = UnsafeMutablePointer<UInt8>.allocate(capacity: 10)\n$ swiftc test.swift -enable-experimental-feature Embedded -wmo -no-allocations\ntest.swift:1:37: error: cannot use allocating operation in -no-allocations mode\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Reflection Dump Tool in CMake\nDESCRIPTION: Defines the swift-reflection-dump tool using add_swift_host_tool and specifies its source files and LLVM component dependencies. It also sets the target link libraries for the tool, including swiftStaticMirror and swiftRemoteInspection.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/swift-reflection-dump/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_swift_host_tool(swift-reflection-dump\n  swift-reflection-dump.cpp\n  LLVM_LINK_COMPONENTS object support\n  SWIFT_COMPONENT tools\n)\ntarget_link_libraries(swift-reflection-dump\n                      PRIVATE\n                        swiftStaticMirror\n                        swiftRemoteInspection)\n```\n\n----------------------------------------\n\nTITLE: Emitting Refactoring Diagnostics in C++\nDESCRIPTION: This code demonstrates how to emit a diagnostic in the performChange() function of a Local Rename refactoring action. It checks if the preferred name is valid and emits an error if not.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/refactoring/SwiftLocalRefactoring.md#2025-04-23_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nbool RefactoringActionLocalRename::performChange() {\n   ...\n    if (!DeclNameViewer(PreferredName).isValid()) {\n      DiagEngine.diagnose(SourceLoc(), diag::invalid_name, PreferredName);\n      return true; // Return true if code change aborted.\n    }\n   ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Directory Setup\nDESCRIPTION: Sets up the output directory paths for Swift library components and creates the directory structure.\nSOURCE: https://github.com/swiftlang/swift/blob/main/lib/PrintAsClang/CMakeLists.txt#2025-04-23_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(SWIFTLIB_DIR\n    \"${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib/swift\")\nset(output_dir \"${SWIFTLIB_DIR}/swiftToCxx\")\n\nadd_custom_command(\n    OUTPUT \"${output_dir}\"\n    COMMAND ${CMAKE_COMMAND} \"-E\" \"make_directory\" \"${output_dir}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Swift Standard Library GYB Source Files in CMake\nDESCRIPTION: This CMake code block defines the GYB (Generate Your Boilerplate) source files for the Swift standard library, categorizing them as either 'EMBEDDED' or 'NORMAL'. It uses the split_embedded_sources function to separate the sources.\nSOURCE: https://github.com/swiftlang/swift/blob/main/stdlib/public/core/CMakeLists.txt#2025-04-23_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nsplit_embedded_sources(\n  OUT_LIST_EMBEDDED SWIFTLIB_EMBEDDED_GYB_SOURCES\n  OUT_LIST_NORMAL SWIFTLIB_GYB_SOURCES\n\n    NORMAL AtomicInt.swift.gyb\n  EMBEDDED FloatingPointParsing.swift.gyb\n  EMBEDDED FloatingPointTypes.swift.gyb\n  EMBEDDED IntegerTypes.swift.gyb\n  EMBEDDED LegacyInt128.swift.gyb\n  EMBEDDED UnsafeBufferPointer.swift.gyb\n  EMBEDDED UnsafeRawBufferPointer.swift.gyb\n  EMBEDDED Tuple.swift.gyb\n  )\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await for Prime Number Calculation in Swift\nDESCRIPTION: This snippet demonstrates the use of async/await in Swift to calculate prime numbers asynchronously. It uses a closure to perform the calculation and updates a UI label with the result.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/proposals/Concurrency.rst#2025-04-23_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nasyncWith (1_000_000) { (num: Int) -> Int in\n  var sum = 0\n  for i in 1..<num {\n    if isPrime(i) { sum += 1 }\n  }\n  return sum\n}.setOnComplete { (x: Int) in\n  self.label!.text = \"Found \\(x) primes.\\n\"\n  self.progress.stopAnimating()\n}\n```\n\n----------------------------------------\n\nTITLE: Android Device Upload Commands\nDESCRIPTION: Configures commands for uploading Swift stdlib and test files to Android devices for testing.\nSOURCE: https://github.com/swiftlang/swift/blob/main/test/CMakeLists.txt#2025-04-23_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset(command_upload_stdlib\n    COMMAND\n        $<TARGET_FILE:Python3::Interpreter> \"${SWIFT_SOURCE_DIR}/utils/android/adb_clean.py\"\n    COMMAND\n        $<TARGET_FILE:Python3::Interpreter> \"${SWIFT_SOURCE_DIR}/utils/android/adb_push_built_products.py\"\n        --ndk \"${SWIFT_ANDROID_NDK_PATH}\"\n        --destination \"${SWIFT_ANDROID_DEPLOY_DEVICE_PATH}\"\n        --destination-arch \"${ARCH}\"\n        \"${SWIFTLIB_DIR}/android\")\n```\n\n----------------------------------------\n\nTITLE: Including Client and Service Subdirectories in CMake Build\nDESCRIPTION: Adds Client and Service subdirectories to the CMake build process. This instructs the build system to look for CMakeLists.txt files in those directories and process them as part of the build.\nSOURCE: https://github.com/swiftlang/swift/blob/main/tools/SourceKit/tools/sourcekitd/bin/XPC/CMakeLists.txt#2025-04-23_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(Client)\nadd_subdirectory(Service)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Equivalent Calls with readnone Functions - Swift\nDESCRIPTION: Shows the equivalence transformation enabled by marking functions with @_effects(readnone) in Swift. Two separate calls with the same parameter are shown being reduced to a single call under the guarantee of no side effects. No dependencies other than the definition of lookup. Inputs/outputs are integer arguments and results; this highlights call equivalence due to absence of side effects. Limitation: Only correct when the function is genuinely side-effect free as marked.\nSOURCE: https://github.com/swiftlang/swift/blob/main/docs/ReferenceGuides/UnderscoredAttributes.md#2025-04-23_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet a = lookup(i)\n// some other code, including memory writes\nlet b = lookup(i)\n```"
  }
]