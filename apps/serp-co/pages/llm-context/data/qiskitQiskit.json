[
  {
    "owner": "qiskit",
    "repo": "qiskit",
    "content": "TITLE: Creating a GHZ State Quantum Circuit\nDESCRIPTION: Creates a quantum circuit that prepares a GHZ state (|000⟩ + i|111⟩)/√2 using Hadamard, Phase, and CNOT gates on three qubits.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport numpy as np\nfrom qiskit import QuantumCircuit\n\n# 1. A quantum circuit for preparing the quantum state |000> + i |111> / √2\nqc = QuantumCircuit(3)\nqc.h(0)             # generate superposition\nqc.p(np.pi / 2, 0)  # add quantum phase\nqc.cx(0, 1)         # 0th-qubit-Controlled-NOT gate on 1st qubit\nqc.cx(0, 2)         # 0th-qubit-Controlled-NOT gate on 2nd qubit\n```\n\n----------------------------------------\n\nTITLE: Installing Qiskit via pip\nDESCRIPTION: Basic pip installation command for the Qiskit SDK. This is the recommended installation method that handles all dependencies automatically.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install qiskit\n```\n\n----------------------------------------\n\nTITLE: Quantum State Estimation\nDESCRIPTION: Shows how to use the StatevectorEstimator primitive to measure expectation values of Pauli operators on a quantum state.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# 2. Define the observable to be measured \nfrom qiskit.quantum_info import SparsePauliOp\noperator = SparsePauliOp.from_list([(\"XXY\", 1), (\"XYX\", 1), (\"YXX\", 1), (\"YYY\", -1)])\n\n# 3. Execute using the Estimator primitive\nfrom qiskit.primitives import StatevectorEstimator\nestimator = StatevectorEstimator()\njob = estimator.run([(qc, operator)], precision=1e-3)\nresult = job.result()\nprint(f\" > Expectation values: {result[0].data.evs}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment for Qiskit Development\nDESCRIPTION: Commands to create and activate a Python virtual environment using the built-in venv module, then upgrade pip and install Qiskit in development mode.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell/Bash\nCODE:\n```\npython3 -m venv ~/.venvs/qiskit-dev\n```\n\nLANGUAGE: Shell/Bash\nCODE:\n```\nsource ~/.venvs/qiskit-dev/bin/activate\n```\n\nLANGUAGE: Shell/Bash\nCODE:\n```\npip install -U pip\n```\n\nLANGUAGE: Shell/Bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Circuit Transpilation\nDESCRIPTION: Demonstrates transpiling a quantum circuit to match specific hardware constraints, including basis gates and coupling map requirements.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom qiskit import transpile\nqc_transpiled = transpile(qc, basis_gates=[\"cz\", \"sx\", \"rz\"], coupling_map=[[0, 1], [1, 2]], optimization_level=3)\n```\n\n----------------------------------------\n\nTITLE: Creating a Conda Environment for Qiskit Development\nDESCRIPTION: Commands to create and activate a Conda environment with Python 3, then install Qiskit in development mode.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell/Bash\nCODE:\n```\nconda create -y -n QiskitDevenv python=3\nconda activate QiskitDevenv\n```\n\nLANGUAGE: Shell/Bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for Qiskit Framework\nDESCRIPTION: Lists the required Python packages with their version constraints for the Qiskit quantum computing framework. Includes numeric libraries (numpy, scipy), symbolic math libraries (sympy, symengine), and utility packages for the framework's operation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrustworkx>=0.15.0\nnumpy>=1.17,<3\nscipy>=1.5\nsympy>=1.3\ndill>=0.3\npython-dateutil>=2.8.0\nstevedore>=3.0.0\ntyping-extensions\n\n# If updating the version range here, consider updating the \n# list of symengine dependencies used in the cross-version tests\n# in 'test/qpy_compat/run_tests.sh' and 'test/qpy_compat/qpy_test_constraints.txt'\nsymengine>=0.11,<0.14\n```\n\n----------------------------------------\n\nTITLE: Sampling Quantum Measurements\nDESCRIPTION: Demonstrates using the StatevectorSampler primitive to measure and sample from a quantum circuit, executing 1000 shots and collecting measurement statistics.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# 2. Add the classical output in the form of measurement of all qubits\nqc_measured = qc.measure_all(inplace=False)\n\n# 3. Execute using the Sampler primitive\nfrom qiskit.primitives import StatevectorSampler\nsampler = StatevectorSampler()\njob = sampler.run([qc_measured], shots=1000)\nresult = job.result()\nprint(f\" > Counts: {result[0].data[\\\"meas\\\"].get_counts()}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Dependencies for Qiskit Installation\nDESCRIPTION: Comprehensive list of optional Qiskit dependencies divided into three main categories: test-runner enhancements, interactivity components, and core functionality/accelerators. Each package listed may include minimum version requirements where necessary.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/requirements-optional.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Optional dependencies of Qiskit that can (mostly) reliably be installed with\n# `pip`.  This file is still called `requirements-optional.txt` just to match\n# standard pip conventions, even though none of these are required.\n#\n# If updating this, you probably want to update `qiskit.utils.optionals` and\n# maybe `pyproject.toml` too.\n\n# Test-runner enhancements.\nfixtures\ntesttools\n\n# Interactivity.\nipython\nmatplotlib>=3.3\npillow>=4.2.1\npydot\npylatexenc>=1.4\nseaborn>=0.9.0\n\n# Functionality and accelerators.\nqiskit-aer\nqiskit-qasm3-import>=0.5.0\npython-constraint>=1.4\ncvxpy\nscikit-learn>=0.20.0\nz3-solver>=4.7\n```\n\n----------------------------------------\n\nTITLE: Qiskit Development Requirements Configuration\nDESCRIPTION: Comprehensive requirements file defining development dependencies for Qiskit. Includes build tools (setuptools, setuptools-rust), code style tools (black), linting packages (pylint, ruff), testing frameworks (coverage, hypothesis, stestr), and documentation generators (Sphinx, reno). Version constraints are carefully specified to ensure CI stability.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/requirements-dev.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Requirements to develop Qiskit, and the minimum needed to run its CI.  All\n# optional requirements should go in `requirements-optionals.txt` instead.\n#\n# Version requirements here can be more restrictive than elsewhere, because they\n# never become actual package requirements, but still try to be as relaxed as\n# possible so it's easy to develop multiple packages from the same venv.\n\n# Build Rust directly\nsetuptools\nsetuptools-rust\n\n# Style\nblack[jupyter]~=24.1\n\n\n# Lint\n#\n# These versions are pinned precisely because pylint frequently includes new\n# on-by-default lint failures in new versions, which breaks our CI.\nastroid==3.2.2\npylint==3.2.3\nruff==0.0.267\n\n\n# Tests\ncoverage>=4.4.0\nhypothesis>=4.24.3\nstestr>=2.0.0,!=4.0.0\nddt>=1.2.0,!=1.4.0,!=1.4.3\n# used to get more complete information on Numpy/Scipy and their BLAS usage during\n# CI reporting\nthreadpoolctl\n\n\n# Documentation tooling.\n#\n# This alone is not sufficient to fully build the documentation, because several\n# components of Qiskit use some of its optional dependencies in order to document\n# themselves. These are the requirements that are _only_ required for the docs\n# build, and are not used by Qiskit itself.\n#\n# Be careful when adding new requirements. We want to keep the docs build simple because\n# we only build docs in this repo to generate API references that get consumed by\n# https://github.com/Qiskit/documentation. For example, coordinate adding dependencies\n# like `sphinx-design` to make sure that `Qiskit/documentation` will be able to\n# consume it properly.\nSphinx>=6.0,<7.2\nreno >= 4.1.0\nsphinxcontrib-katex==0.9.9\nbreathe>=4.35.0\n```\n\n----------------------------------------\n\nTITLE: Defining CircuitData Structure in Rust for Qiskit\nDESCRIPTION: CircuitData is the core representation of a quantum circuit in Rust. It contains a list of CircuitInstructions, which are compacted into PackedInstructions for memory efficiency. It also includes a param_table for tracking parameterized instructions and a global phase field.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/circuit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nstruct CircuitData {\n    instructions: Vec<PackedInstruction>,\n    param_table: ParamTable,\n    global_phase: f64,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Operation Trait in Rust for Qiskit\nDESCRIPTION: The Operation trait defines common access patterns for the four OperationType variants. It includes methods to access standard data model attributes of operations in Qiskit, such as name, number of qubits, matrix, and definition.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/circuit/README.md#2025-04-21_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\ntrait Operation {\n    fn name(&self) -> &str;\n    fn num_qubits(&self) -> usize;\n    fn matrix(&self) -> Option<Matrix>;\n    fn definition(&self) -> Option<CircuitDefinition>;\n    // Other methods...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Deprecation Decorators in Python for Qiskit Functions and Arguments\nDESCRIPTION: Demonstrates how to use the '@deprecate_func' and '@deprecate_arg' decorators from qiskit.utils.deprecation to mark functions and arguments as deprecated. These decorators generate standardized warnings and automatically update docstrings to reflect deprecation status.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/DEPRECATION.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom qiskit.utils.deprecation import deprecate_arg, deprecate_func\n\n@deprecate_func(since=\"1.2\", additional_msg=\"No replacement is provided.\")\ndef deprecated_func():\n    pass\n\n@deprecate_arg(\"bad_arg\", new_alias=\"new_name\", since=\"1.2\")\ndef another_func(bad_arg: str, new_name: str):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Environment Variables\nDESCRIPTION: Commands to run Python tests with specified log levels and arguments for both Linux/Mac and Windows environments.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd out\nLOG_LEVEL=\"DEBUG\" ARGS=\"-V\" make test\n```\n\n----------------------------------------\n\nTITLE: Basic Rust Unit Test Structure\nDESCRIPTION: Example of a basic Rust test module showing the standard structure for unit testing in Qiskit's Rust components.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(test)]\nmod tests {\n    #[test]\n    fn my_first_test() {\n        assert_eq!(2, 1 + 1);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Deprecations in Python Docstrings Using Sphinx Directives\nDESCRIPTION: Shows how to manually document deprecations in docstrings using Sphinx's deprecated directive. This ensures that deprecation information appears in generated API documentation, informing users about upcoming changes and migration paths.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/DEPRECATION.md#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef deprecated_function():\n    \"\"\"\n    Short description of the deprecated function.\n\n    .. deprecated:: 1.2\n       The function qiskit.deprecated_function() is deprecated since\n       Qiskit 1.2, and will be removed in 2.0 or a later major release.\n       Instead, you should use qiskit.other_function().\n\n    <rest of the docstring>\n    \"\"\"\n    # ... the rest of the function ...\n```\n\n----------------------------------------\n\nTITLE: Running Rust Tests via Tox\nDESCRIPTION: Command for running Rust tests using tox in an isolated environment\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ntox -erust\n```\n\n----------------------------------------\n\nTITLE: Running Rust Tests in Custom Environment\nDESCRIPTION: Commands for running Rust tests in a custom virtual environment without tox\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npython setup.py build_rust --inplace\ntools/run_cargo_test.py\n```\n\n----------------------------------------\n\nTITLE: Memory Management for Quantum Observables in C\nDESCRIPTION: Demonstrates memory management and equality comparison of quantum observables. Shows cleanup of temporary QkObs variables after canonicalization and comparison operations.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/cdoc/qk-obs.rst#2025-04-21_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nQkObs *canonical = qk_obs_canonicalize(diff, tol);\n\nQkObs *zero = qk_obs_zero(qk_obs_num_qubits(left));\nbool equiv = qk_obs_equal(diff, zero);\n// free all temporary variables\nqk_obs_free(neg_right);\nqk_obs_free(diff);\nqk_obs_free(canonical);\nqk_obs_free(zero);\nreturn equiv;\n```\n\n----------------------------------------\n\nTITLE: Installing Miri for Rust Testing\nDESCRIPTION: Command for installing Miri on nightly Rust channel for undefined-behavior testing\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrustup install nightly --components miri\n```\n\n----------------------------------------\n\nTITLE: Running Miri Test Suite\nDESCRIPTION: Command for running the Miri test suite with custom flags\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nMIRIFLAGS=\"<flags go here>\" cargo +nightly miri test\n```\n\n----------------------------------------\n\nTITLE: Iterating Over QkObs Terms in C\nDESCRIPTION: Shows how to iterate over individual observable sum terms in a QkObs object using qk_obs_term(). Demonstrates proper term access and error handling when retrieving observable terms.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/cdoc/qk-obs.rst#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nsize_t num_terms = qk_obs_num_terms(obs);  // obs is QkObs*\nfor (size_t i = 0; i < num_terms; i++) {\n    QkObsTerm term;  // allocate term on stack\n    int exit = qk_obs_term(obs, i, &term);  // get the term (exit > 0 upon index errors)\n    // do something with the term...\n}\n```\n\n----------------------------------------\n\nTITLE: C API Test Template\nDESCRIPTION: Template structure for creating C API tests in Qiskit\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_16\n\nLANGUAGE: c\nCODE:\n```\n#include \"common.h\"\n\nint test_something()\n{\n    return Ok;\n}\n\nint test_FILE_NAME()\n{\n    int num_failed = 0;\n    num_failed += RUN_TEST(test_something);\n    fprintf(stderr, \"=== Number of failed subtests: %i\\n\", num_failed);\n    fflush(stderr);\n    return num_failed;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Release Note in YAML\nDESCRIPTION: Shows the proper format for writing release notes using reno, demonstrating how to document new features and deprecations with restructured text syntax.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfeatures:\n  - |\n    Introduced a new feature foo, that adds support for doing something to\n    :class:`.QuantumCircuit` objects. It can be used by using the foo function,\n    for example::\n\n      from qiskit import foo\n      from qiskit import QuantumCircuit\n      foo(QuantumCircuit())\n\n  - |\n    The :class:`.QuantumCircuit` class has a new method :meth:`~.QuantumCircuit.foo`. \n    This is the equivalent of calling the :func:`~qiskit.foo` to do something to your\n    :class:`.QuantumCircuit`. This is the equivalent of running :func:`~qiskit.foo` \n    on your circuit, but provides the convenience of running it natively on\n    an object. For example::\n\n      from qiskit import QuantumCircuit\n\n      circ = QuantumCircuit()\n      circ.foo()\n\ndeprecations:\n  - |\n    The ``qiskit.bar`` module has been deprecated and will be removed in a\n    future release. Its sole function, ``foobar()`` has been superseded by the\n    :func:`~qiskit.foo` function which provides similar functionality but with\n    more accurate results and better performance. You should update your\n    :func:`~qiskit.bar.foobar` calls to :func:`~qiskit.foo`.\n```\n\n----------------------------------------\n\nTITLE: Defining ParamTable Structure in Rust for Qiskit\nDESCRIPTION: ParamTable tracks circuit instructions using ParameterExpression objects. It maps Parameter objects to CircuitInstructions using three HashMaps: uuid to ParamEntry, name to uuid, and uuid to PyObject for the actual Parameter.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/circuit/README.md#2025-04-21_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nstruct ParamTable {\n    uuid_to_entry: HashMap<u128, ParamEntry>,\n    name_to_uuid: HashMap<String, u128>,\n    uuid_to_pyobject: HashMap<u128, PyObject>,\n}\n\ntype ParamEntry = HashSet<(usize, usize)>;\n```\n\n----------------------------------------\n\nTITLE: Visualizing Complex Quantum Circuit with Multiple Gates and Measurements\nDESCRIPTION: This ASCII art diagram represents a sophisticated quantum circuit involving three qubits and three classical bits. It demonstrates the application of numerous quantum gates including X, Y, Z, H, S, T, rotation gates, and controlled operations. The circuit concludes with measurements on all qubits, indicating a readout of the quantum state.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/test/python/visualization/references/circuit_text_ref_utf8.txt#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n        ┌───┐┌───┐┌───┐ ░ ┌───┐┌───┐┌─────┐┌───┐┌─────┐┌────┐┌──────┐┌───┐     ┌───────┐┌───────┐┌───────┐┌───────┐┌─────────┐┌───────────┐                                                                             ┌─┐      \nq_0: |0>┤ X ├┤ Y ├┤ Z ├─░─┤ H ├┤ S ├┤ Sdg ├┤ T ├┤ Tdg ├┤ √X ├┤ √Xdg ├┤ I ├─|0>─┤ Rx(π) ├┤ Ry(π) ├┤ Rz(π) ├┤ U1(π) ├┤ U2(π,π) ├┤ U3(π,π,π) ├─X───■────■───■───■───■────────────■──────────■────────■────────■──────■───■─┤M├──────\n        └─░─┘└───┘└───┘ ░ └───┘└───┘└─────┘└───┘└─────┘└────┘└──────┘└───┘     └───────┘└───────┘└───────┘└───────┘└─────────┘└───────────┘ │ ┌─┴─┐┌─┴─┐ │ ┌─┴─┐ │U1(π) ┌─────┴─────┐┌───┴───┐┌───┴───┐┌───┴───┐  │   │ └╥┘┌─┐   \nq_1: |0>──░─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────X─┤ X ├┤ Y ├─■─┤ H ├─■──────┤ U3(π,π,π) ├┤ Rz(π) ├┤ Ry(π) ├┤ Rx(π) ├──■───X──╫─┤M├───\n          ░                                                                                                                                   └───┘└───┘   └───┘        └───────────┘└───────┘└───────┘└───────┘┌─┴─┐ │  ║ └╥┘┌─┐\nq_2: |0>──░─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤ X ├─X──╫──╫─┤M├\n          ░                                                                                                                                                                                                     └───┘    ║  ║ └╥┘\n c_0: 0 ═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╩══╬══╬═\n                                                                                                                                                                                                                            ║  ║ \n c_1: 0 ════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╩══╬═\n                                                                                                                                                                                                                               ║ \n c_2: 0 ═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╩═\n                                                                                                                                                                                                                                 \n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating a Quantum Observable in C\nDESCRIPTION: Example C program demonstrating the use of the Qiskit C API to create a 100-qubit observable, add a term to it, and print its properties. It includes necessary header inclusions and memory management.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/cext/README.md#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include <complex.h>\n#include <qiskit.h>\n#include <stdint.h>\n#include <stdio.h>\n\nint main(int argc, char *argv[]) {\n    // build a 100-qubit empty observable\n    uint32_t num_qubits = 100;\n    QkObs *obs = qk_obs_zero(num_qubits);\n\n    // add the term 2 * (X0 Y1 Z2) to the observable\n    complex double coeff = 2;\n    QkBitTerm bit_terms[3] = {QkBitTerm_X, QkBitTerm_Y, QkBitTerm_Z};\n    uint32_t indices[3] = {0, 1, 2};\n    QkObsTerm term = {coeff, 3, bit_terms, indices, num_qubits};\n    qk_obs_add_term(obs, &term);\n\n    // print some properties\n    printf(\"num_qubits: %u\\n\", qk_obs_num_qubits(obs));\n    printf(\"num_terms: %lu\\n\", qk_obs_num_terms(obs));\n\n    // free the memory allocated for the observable\n    qk_obs_free(obs);\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OperationType Enum in Rust for Qiskit\nDESCRIPTION: OperationType is an enum with four variants representing different types of operations in a circuit: StandardGate, PyGate, PyInstruction, and PyOperation. Each variant wraps different levels of Python integration for gate and instruction representation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/circuit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nenum OperationType {\n    StandardGate(StandardGateEnum),\n    PyGate(PyGateStruct),\n    PyInstruction(PyInstructionStruct),\n    PyOperation(PyOperationStruct),\n}\n```\n\n----------------------------------------\n\nTITLE: Observable Equivalence Comparison in C\nDESCRIPTION: Example code showing how to compare two QkObs observables with floating-point tolerance, using canonicalization and subtraction to test equivalence.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/cdoc/qk-obs.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nbool equivalent(QkObs *left, QkObs *right, double tol) {\n    // compare a canonicalized version of left - right to the zero observable\n    QkObs *neg_right = qk_obs_mul(right, -1);\n    QkObs *diff = qk_obs_add(left, neg_right);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Test Driver for Qiskit\nDESCRIPTION: CMake configuration script that discovers test files, creates a unified test driver, and sets up test execution. Includes special handling for MSVC environments by managing Python DLL paths. The script automatically discovers test files matching 'test_*.c' pattern and creates a single executable for all tests.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/test/c/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required (VERSION 3.27)\n\nfile (\n    GLOB discovered_tests\n    LIST_DIRECTORIES FALSE\n    RELATIVE ${CMAKE_CURRENT_SOURCE_DIR}\n    test_*.c\n)\n\ncreate_test_sourcelist (source_files test_driver.c ${discovered_tests})\n\nadd_executable (test_driver ${source_files})\ntarget_include_directories (test_driver PRIVATE ${CMAKE_SOURCE_DIR})\ntarget_link_libraries (test_driver ${qiskit})\n\nif (MSVC)\n    get_filename_component(qiskit_dll_dir ${qiskit} DIRECTORY)\n\n    file(READ \"${CMAKE_SOURCE_DIR}/target/pyo3_python.config\" pyo3_config)\n    string(REGEX MATCH \"PYO3_PYTHON_LIB_DIR=([^\\n]*)\" _match \"${pyo3_config}\")\n    set(pyo3_python_lib_dir ${CMAKE_MATCH_1})\nendif ()\n\nforeach (test ${discovered_tests})\n    get_filename_component (test_name ${test} NAME_WE)\n\n    add_test (\n        NAME ${test_name}\n        COMMAND test_driver ${test_name}\n    )\n\n    if (MSVC)\n        set_tests_properties(\n            ${test_name} PROPERTIES ENVIRONMENT \"PATH=%PATH%\\;${qiskit_dll_dir}\\;${pyo3_python_lib_dir}\"\n        )\n    endif ()\nendforeach ()\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated Methods in Python\nDESCRIPTION: Example showing how to properly test deprecated methods using Python's unittest assertWarns context manager while maintaining test coverage for both old and new methods.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef test_method1_deprecated(self):\n   with self.assertWarns(DeprecationWarning):\n       result = Obj.method1()\n   self.assertEqual(result, <expected>)\n\ndef test_method2(self):\n   result = Obj.method2()\n   self.assertEqual(result, <expected>)\n```\n\n----------------------------------------\n\nTITLE: Directly Raising Deprecation Warnings in Python Using the Warnings Module\nDESCRIPTION: Shows how to manually issue deprecation warnings when the standard decorators are insufficient. Uses the warnings module from the Python standard library with the DeprecationWarning category and proper stacklevel configuration.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/DEPRECATION.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport warnings\n\ndef deprecated_function():\n   warnings.warn(\n      \"The function qiskit.deprecated_function() is deprecated since \"\n      \"Qiskit 1.2, and will be removed in 2.0 or a later major release.\"\n      \"Instead, you should use qiskit.other_function().\",\n      category=DeprecationWarning,\n      stacklevel=2,\n   )\n   # ... the rest of the function ...\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated Functionality in Python Using assertWarns\nDESCRIPTION: Demonstrates how to properly test deprecated functionality by using the assertWarns context manager in test classes inheriting from unittest.TestCase. This ensures that tests continue to pass while validating that proper deprecation warnings are raised.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/DEPRECATION.md#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyTestSuite(QiskitTestCase):\n   def test_deprecated_function(self):\n      with self.assertWarns(DeprecationWarning):\n         output = deprecated_function()\n      # ... do some things with output ...\n      self.assertEqual(output, expected)\n```\n\n----------------------------------------\n\nTITLE: Rust Test Module with Python Integration\nDESCRIPTION: Example of a Rust test module that includes Python interpreter interaction using PyO3\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n#[cfg(all(test, not(miri)))] // disable for Miri!\nmod tests {\n    use pyo3::prelude::*;\n    \n    #[test]\n    fn my_first_test() {\n        Python::with_gil(|py| {\n            todo!() // do something that needs a `py` token.\n        })\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: QkBitTerm Enum Declaration\nDESCRIPTION: Defines an enumeration type for representing single-qubit alphabet terms including Pauli operators and eigenstate projectors.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/cdoc/qk-bit-term.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nenum QkBitTerm\n```\n\n----------------------------------------\n\nTITLE: Defining QkExitCode Enumeration in C for Qiskit\nDESCRIPTION: This code snippet defines an enumeration called QkExitCode that contains various exit codes for functions. It includes codes for successful execution and different types of errors such as input errors, pointer errors, and arithmetic errors. These codes are used to indicate the result of operations in the Qiskit C implementation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/cdoc/qk-exit-code.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nenum QkExitCode\n```\n\n----------------------------------------\n\nTITLE: Building Optimized Rust Extensions for Qiskit Development Mode\nDESCRIPTION: Command to rebuild the Rust extensions in release mode after installing Qiskit in editable mode, which improves runtime performance by enabling optimizations.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: Shell/Bash\nCODE:\n```\npython setup.py build_rust --release --inplace\n```\n\n----------------------------------------\n\nTITLE: Constraining SciPy Version for Python <3.12\nDESCRIPTION: Limits SciPy version to below 1.11 for Python versions less than 3.12 due to instability in Weyl coordinates eigensystem code.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/constraints.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nscipy<1.11; python_version<'3.12'\n```\n\n----------------------------------------\n\nTITLE: Specifying z3-solver Version for macOS\nDESCRIPTION: Sets z3-solver version to 4.12.2.0 specifically for Darwin (macOS) platforms to ensure compatibility with CI environments using older macOS versions.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/constraints.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nz3-solver==4.12.2.0; platform_system==\"Darwin\"\n```\n\n----------------------------------------\n\nTITLE: Building Qiskit C API Shared Library and Header\nDESCRIPTION: Commands to build the Qiskit C API shared library and header file using Make or Cargo. The resulting files are stored in the dist/c directory.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/cext/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake c\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake cheader\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake clib\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo rustc --release --crate-type cdylib -p qiskit-cext\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Blame Ignore List\nDESCRIPTION: Git command to configure the repository to ignore specific commits during blame operations, useful for excluding formatting-only changes.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ngit blame --ignore-revs-file .git-blame-ignore-revs qiskit/version.py\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Exclusions in Gitignore for Qiskit\nDESCRIPTION: Defines pattern matching rules to exclude the stable, locale, and dev directories and all their contents from git version control tracking. Uses the ** wildcard pattern to match all nested subdirectories.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/tools/docs_exclude.txt#2025-04-21_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\n/stable/**\n/locale/**\n/dev/**\n```\n\n----------------------------------------\n\nTITLE: Testing Qiskit Graph Drawing with Matplotlib in Python\nDESCRIPTION: This code snippet executes an external Python file that contains the test suite for Qiskit's graph drawing functionality using Matplotlib.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/test/visual/mpl_tester.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Testing Graphs\n%run \"mpl/graph/test_graph_matplotlib_drawer.py\"\n```\n\n----------------------------------------\n\nTITLE: Compiling C Program with Qiskit C API\nDESCRIPTION: Command to compile a C program using the Qiskit C API. It includes the necessary include path and library linking options.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/cext/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake c\ngcc program.c -I$/path/to/dist/c/include -lqiskit -L/path/to/dist/c/lib\n```\n\n----------------------------------------\n\nTITLE: Displaying Graph Test Results in Python\nDESCRIPTION: This code snippet displays the results for graph tests using the RESULTS_GRAPH variable, which is assumed to be defined in the previously executed 'results.py' file.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/test/visual/mpl_tester.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nRESULTS_GRAPH\n```\n\n----------------------------------------\n\nTITLE: Referencing Qiskit PyExt Crate in Markdown\nDESCRIPTION: This code snippet shows how to reference the qiskit-pyext Rust crate in Markdown. It's used to identify the specific crate being discussed in the documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/pyext/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n`qiskit-pyext`\n```\n\n----------------------------------------\n\nTITLE: Running Compiled C Program with Qiskit C API\nDESCRIPTION: Command to run the compiled C program that uses the Qiskit C API, along with the expected output.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/cext/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./a.out\n```\n\nLANGUAGE: text\nCODE:\n```\nnum_qubits: 100\nnum_terms: 1\n```\n\n----------------------------------------\n\nTITLE: Referencing Accelerate Crate in Markdown\nDESCRIPTION: This code snippet shows how to reference the accelerate crate in Markdown. It's used to specify the crate that contains various components to be rewrapped into the qiskit._accelerate extension module.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/pyext/README.md#2025-04-21_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n`crates/accerelate`\n```\n\n----------------------------------------\n\nTITLE: File Path Description for qiskit._qasm3 Module\nDESCRIPTION: Identifies the file path for the Rust-level Qiskit interface crate that connects to the external OpenQASM 3 parser.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/qasm3/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `qiskit._qasm3`\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for Qiskit C API Tests\nDESCRIPTION: Sets up the CMake build environment for Qiskit's C API test suite. Configures minimum CMake version, project name, enables testing, finds the qiskit_cext library, and sets up include directories for the C header files.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required (VERSION 3.27)\nproject (Qiskit)\n\n# We are using CMake to build our C API test suite, and we leverage ctest to run\n# those tests.\nenable_testing ()\n\n# The C API is provided by the qiskit_cext Rust crate. Its header gets\n# generated by cbindgen (see `make cheader`). It is important that this done as\n# a Release-build for cbindgen to work properly.\nfind_library (qiskit qiskit_cext PATHS target/release REQUIRED)\n\n# Generally include the directory for the ``qiskit.h`` file.\ninclude_directories (dist/c/include)\n\n# The remaining CMake configuration is done inside of the C API test suite.\nadd_subdirectory (test/c)\n```\n\n----------------------------------------\n\nTITLE: Importing Qiskit QPY Module in Python\nDESCRIPTION: This code snippet demonstrates how to import the Qiskit QPY module. It uses Sphinx documentation syntax to automatically generate module documentation without including members, inherited members, or special members.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/qpy.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: qiskit.qpy\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for Qiskit Transpiler Plugin Module\nDESCRIPTION: RST directives that configure the Sphinx autodoc extension for documenting the qiskit.transpiler.preset_passmanagers.plugin module. The configuration excludes members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/transpiler_plugins.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-transpiler-plugins:\n\n.. automodule:: qiskit.transpiler.preset_passmanagers.plugin\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Running Manual Python Tests\nDESCRIPTION: Commands to run Python unittest manually with log level configuration for both Linux/Mac and Windows.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nLOG_LEVEL=INFO python -m unittest test/python/circuit/test_circuit_operations.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for Qiskit Visualization\nDESCRIPTION: Sphinx restructuredText directive that configures the documentation generation for the qiskit.visualization module. It sets up a reference label and excludes member documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/visualization.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-visualization:\n\n.. automodule:: qiskit.visualization\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for Qiskit Providers Module in RST\nDESCRIPTION: This RST directive configures the autodoc extension to generate documentation for the qiskit.providers module. It excludes individual members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/providers.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-providers:\n\n.. automodule:: qiskit.providers\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Running Individual Python Test Module\nDESCRIPTION: Commands showing different ways to run specific test modules, classes, or methods using tox with the no-discover option.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ntox -epy310 -- -n test.python.compiler.test_transpiler\ntox -epy310 -- -n test/python/compiler/test_transpiler.py\ntox -epy310 -- -n test.python.compiler.test_transpiler.TestTranspile\ntox -epy310 -- -n test.python.compiler.test_transpiler.TestTranspile.test_transpile_non_adjacent_layout\n```\n\n----------------------------------------\n\nTITLE: Importing Qiskit Transpiler Synthesis Plugins Module\nDESCRIPTION: This code snippet demonstrates how to import the synthesis plugins module from Qiskit's transpiler. The module is likely used for customizing or extending the circuit synthesis capabilities of the Qiskit transpiler.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/transpiler_synthesis_plugins.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom qiskit.transpiler.passes.synthesis import plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring Automodule for Qiskit Quantum Info in reStructuredText\nDESCRIPTION: This snippet configures the automodule directive for the qiskit.quantum_info module. It sets options to exclude members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/quantum_info.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: qiskit.quantum_info\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Running C API Tests\nDESCRIPTION: Command for running C API tests using cmake and ctest\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmake ctest\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation for Qiskit Transpiler Preset Pass Managers\nDESCRIPTION: ReStructuredText directives for documenting the preset_passmanagers module in Qiskit's transpiler. The directives create a reference label and set up automodule documentation with specific configuration options.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/transpiler_preset.rst#2025-04-21_snippet_0\n\nLANGUAGE: ReStructuredText\nCODE:\n```\n.. _qiskit-transpiler-preset_passmanagers:\n\n.. automodule:: qiskit.transpiler.preset_passmanagers\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule directive for Qiskit circuit library\nDESCRIPTION: This RST directive configures Sphinx to automatically generate documentation for the qiskit.circuit.library module. It sets options to exclude members, inherited members, and special members from the documentation output.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/circuit_library.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-circuit-library:\n\n.. automodule:: qiskit.circuit.library\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Testing Qiskit Circuit Drawing with Matplotlib in Python\nDESCRIPTION: This code snippet sets up the environment for testing Qiskit's circuit drawing functionality using Matplotlib. It suppresses warnings and executes an external Python file containing the test suite for circuit drawing.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/test/visual/mpl_tester.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Testing Circuits\nimport warnings\n\nwarnings.simplefilter(\"ignore\")\n%run \"mpl/circuit/test_circuit_matplotlib_drawer.py\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoDoc for Qiskit Compiler in RST\nDESCRIPTION: Sphinx documentation directives that configure the automatic documentation generation for the qiskit.compiler module. It creates a reference label and specifies which members to include in the documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/compiler.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-compiler:\n\n.. automodule:: qiskit.compiler\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for Qiskit Transpiler Passes\nDESCRIPTION: Sphinx documentation configuration that sets up the automodule directive for the qiskit.transpiler.passes module. The configuration excludes member listings, inherited members, and special members to produce a focused module overview.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/transpiler_passes.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-transpiler-passes:\n\n.. automodule:: qiskit.transpiler.passes\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Executing Results Script and Displaying Circuit Results in Python\nDESCRIPTION: This code snippet runs an external Python file named 'results.py' in the current namespace and then displays the results for circuit tests using the RESULTS_CIRCUIT variable.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/test/visual/mpl_tester.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n%run -i \"results.py\"\nRESULTS_CIRCUIT\n```\n\n----------------------------------------\n\nTITLE: Sphinx Autodoc Configuration for Qiskit Circuit Module\nDESCRIPTION: Configures the Sphinx autodoc extension to generate documentation for the qiskit.circuit module while excluding specific types of members. The directive specifies that no members, inherited members, or special members should be included in the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/circuit.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _qiskit-circuit:\n\n.. automodule:: qiskit.circuit\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule for Qiskit QASM2\nDESCRIPTION: Sphinx documentation configuration for the qiskit.qasm2 module. The directives specify to exclude member documentation, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/qasm2.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-qasm2:\n\n.. automodule:: qiskit.qasm2\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: QkBitTerm Type Definition\nDESCRIPTION: Defines QkBitTerm as an 8-bit unsigned integer type. Not all uint8_t values are valid bit terms, and using invalid values results in undefined behavior.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/cdoc/qk-bit-term.rst#2025-04-21_snippet_1\n\nLANGUAGE: c\nCODE:\n```\ntypedef uint8_t QkBitTerm\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule for Qiskit QASM3 Documentation\nDESCRIPTION: reStructuredText directive for configuring the Sphinx documentation generator to document the qiskit.qasm3 module. The directive specifies that no members, inherited members, or special members should be included in the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/qasm3.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _qiskit-qasm3:\n\n.. automodule:: qiskit.qasm3\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Including Qiskit Synthesis Module in Sphinx Documentation\nDESCRIPTION: Configuration for including the qiskit.synthesis module in Sphinx documentation. The directives specify to include the module without listing its members, inherited members, or special members.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/synthesis.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-synthesis:\n\n.. automodule:: qiskit.synthesis\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: QkObs Structure Definition in C\nDESCRIPTION: Basic C structure definition for the QkObs type which represents quantum observables.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/cdoc/qk-obs.rst#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct QkObs QkObs\n```\n\n----------------------------------------\n\nTITLE: Sphinx directive for documenting Qiskit's classical circuit module\nDESCRIPTION: This RST code snippet uses Sphinx automodule directive to generate documentation for the qiskit.circuit.classical module, while excluding members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/circuit_classical.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-circuit-classical:\n\n.. automodule:: qiskit.circuit.classical\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Running Qiskit Rust Tests Without Default Features\nDESCRIPTION: Command to run Rust tests for Qiskit crates with the extension-module feature disabled, which is necessary for standalone test execution that properly links to libpython.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --no-default-features\n```\n\n----------------------------------------\n\nTITLE: Setting LD_LIBRARY_PATH for Python Library on Linux\nDESCRIPTION: Command to extend the LD_LIBRARY_PATH environment variable to include the Python library path, which may be necessary for the dynamic linker to find libpython on Linux systems.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport LD_LIBRARY_PATH=\"$(python -c 'import sys; print(sys.base_prefix)')/lib:$LD_LIBRARY_PATH\"\n```\n\n----------------------------------------\n\nTITLE: Running Reno Report Command\nDESCRIPTION: Commands to generate release notes using reno, either for all releases or a specific version.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nreno report\nreno report --version 0.9.0\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints for Qiskit\nDESCRIPTION: This requirements specification defines exact versions of NumPy and SciPy, along with an upper bound for SymEngine version. The SymEngine constraint is specifically set to prevent incompatibility with QPY functionality, as noted in the comment.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/test/qpy_compat/qpy_test_constraints.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy===1.24.4\nscipy===1.10.1\n\n# This is a loose constraint because we want to test different versions,\n# as defined in 'test/qpy_compat/run_tests.sh', but any symengine version \n# above (and including) 0.14 will be incompatible with qpy.\nsymengine<0.14\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum pydot Version\nDESCRIPTION: Specifies a minimum version of 3.0.0 for pydot to ensure consistent output in test suites, particularly for features like the pass-manager drawer.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/constraints.txt#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\npydot>=3.0.0\n```\n\n----------------------------------------\n\nTITLE: Applying Apache License 2.0 Copyright Notice for IBM Qiskit\nDESCRIPTION: Standard boilerplate text for applying the Apache License 2.0 to the Qiskit project. This text should be included in project files to properly license the software and provide notice of copyright and usage terms.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/LICENSE.txt#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCopyright 2017 IBM and its contributors.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Generating Class Documentation with Jinja2 for reStructuredText\nDESCRIPTION: This Jinja2 template generates class documentation in reStructuredText format. It includes the class name, module, inheritance information, attributes, and methods. The template filters out inherited members and the __init__ method from the methods list.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/_templates/autosummary/class_no_inherited_members.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{# This is identical to class.rst, except for the filtering in `set wanted_methods`. -#}\n\n{{ objname | escape | underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :no-members:\n   :show-inheritance:\n\n{% block attributes_summary %}\n  {% if attributes %}\n   .. rubric:: Attributes\n    {% for item in attributes %}\n   .. autoattribute:: {{ item }}\n    {%- endfor %}\n  {% endif %}\n{% endblock -%}\n\n{% block methods_summary %}\n  {% set wanted_methods = (methods | reject('in', inherited_members) | reject('==', '__init__') | list) %}\n  {% if wanted_methods %}\n   .. rubric:: Methods\n    {% for item in wanted_methods %}\n   .. automethod:: {{ item }}\n    {%- endfor %}\n  {% endif %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Qiskit Class Documentation with Jinja2 Template\nDESCRIPTION: A Jinja2 template that structures the documentation for Qiskit Python classes. It renders the class name as a header, shows inheritance information, and displays attributes and methods in separate sections. The template specifically filters out the '__init__' method from the methods list to improve readability.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/_templates/autosummary/class.rst#2025-04-21_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{#\n   We show all the class's methods and attributes on the same page. By default, we document\n   all methods, including those defined by parent classes.\n-#}\n\n{{ objname | escape | underline }}\n\n.. currentmodule:: {{ module }}\n\n.. autoclass:: {{ objname }}\n   :no-members:\n   :show-inheritance:\n\n{% block attributes_summary %}\n  {% if attributes %}\n   .. rubric:: Attributes\n    {% for item in attributes %}\n   .. autoattribute:: {{ item }}\n    {%- endfor %}\n  {% endif %}\n{% endblock -%}\n\n{% block methods_summary %}\n  {% set wanted_methods = (methods | reject('==', '__init__') | list) %}\n  {% if wanted_methods %}\n   .. rubric:: Methods\n    {% for item in wanted_methods %}\n   .. automethod:: {{ item }}\n    {%- endfor %}\n  {% endif %}\n{% endblock %}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Autodoc for Qiskit Transpiler Module in RST\nDESCRIPTION: This RST code snippet configures Sphinx autodoc to generate documentation for the Qiskit transpiler module. It excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/transpiler.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-transpiler:\n\n.. automodule:: qiskit.transpiler\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for Qiskit Result Module in reStructuredText\nDESCRIPTION: Sphinx automodule directive configuration to generate documentation for the qiskit.result module. The directive excludes members, inherited members, and special members, providing just the module-level documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/result.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _qiskit-result:\n\n.. automodule:: qiskit.result\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Documentation for Qiskit Fake Provider Module\nDESCRIPTION: ReStructuredText configuration for autodocumenting the qiskit.providers.fake_provider module. The configuration excludes members, inherited members, and special members from the documentation generation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/providers_fake_provider.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-providers-fakeprovider:\n\n.. automodule:: qiskit.providers.fake_provider\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring RST Automodule for Qiskit Basic Provider\nDESCRIPTION: RST directive configuration for documenting the basic_provider module. Specifies documentation generation options including exclusion of members, inherited members, and special members.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/providers_basic_provider.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-providers-basicprovider:\n\n.. automodule:: qiskit.providers.basic_provider\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx automodule directive for Qiskit pass manager documentation\nDESCRIPTION: Sphinx configuration that uses the automodule directive to generate documentation for the qiskit.passmanager module. The configuration excludes members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/passmanager.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-passmanager:\n\n.. automodule:: qiskit.passmanager\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for Qiskit Exceptions Module in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to configure the autodoc extension for the qiskit.exceptions module. It sets up a label for linking and specifies that no members, inherited members, or special members should be included in the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/exceptions.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _qiskit-exceptions:\n\n.. automodule:: qiskit.exceptions\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Qiskit Circuit Singleton Module in RST\nDESCRIPTION: Sphinx documentation configuration for the qiskit.circuit.singleton module. The directives specify that no members, inherited members, or special members should be included in the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/circuit_singleton.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-circuit-singleton:\n\n.. automodule:: qiskit.circuit.singleton\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Automodule for qiskit.dagcircuit in reStructuredText\nDESCRIPTION: This snippet configures the Sphinx automodule directive for the qiskit.dagcircuit module. It excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/dagcircuit.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _qiskit-dagcircuit:\n\n.. automodule:: qiskit.dagcircuit\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for Qiskit Converters Module in reStructuredText\nDESCRIPTION: This snippet configures the autodoc extension for the qiskit.converters module. It specifies that no members, inherited members, or special members should be included in the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/converters.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _qiskit-converters:\n\n.. automodule:: qiskit.converters\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodoc for Qiskit Random Circuit Module\nDESCRIPTION: Sphinx autodoc directive configuration for documenting the qiskit.circuit.random module. Excludes member documentation, inherited members, and special members to generate focused module-level documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/circuit_random.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: qiskit.circuit.random\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx AutoModule Documentation for Qiskit Utils\nDESCRIPTION: Sphinx documentation configuration that sets up the automodule directive for qiskit.utils module. It excludes member documentation, inherited members, and special members from the generated documentation output.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/utils.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _qiskit-utils:\n\n.. automodule:: qiskit.utils\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Documentation for Qiskit Primitives Module\nDESCRIPTION: Sphinx documentation configuration that specifies how to document the qiskit.primitives module. The directive excludes members, inherited members, and special members from the generated documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/primitives.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-primitives:\n\n.. automodule:: qiskit.primitives\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Module Documentation Directive for Qiskit Synthesis Unitary AQC\nDESCRIPTION: This snippet contains Sphinx documentation directives that automatically generate documentation for the qiskit.synthesis.unitary.aqc module. It uses the automodule directive with options to exclude members, inherited members, and special members from the documentation.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/qiskit.synthesis.unitary.aqc.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. _qiskit-synthesis_unitary_aqc:\n\n.. automodule:: qiskit.synthesis.unitary.aqc\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Configuration for QuantumCircuit Class\nDESCRIPTION: Sphinx documentation configuration that defines how the QuantumCircuit class should be displayed in the documentation. It specifies that the class should have its own page in the documentation and configures the autoclass directive to only show the class documentation without listing members.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/apidoc/qiskit.circuit.QuantumCircuit.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. _qiskit-circuit-quantumcircuit:\n\n==============================\n:class:`.QuantumCircuit` class\n==============================\n\n..\n   This is so big it gets its own page in the toctree, and because we\n   don't want it to use autosummary.\n\n.. currentmodule:: qiskit.circuit\n\n.. autoclass:: qiskit.circuit.QuantumCircuit\n   :no-members:\n   :no-inherited-members:\n   :no-special-members:\n   :class-doc-from: class\n```\n\n----------------------------------------\n\nTITLE: Fetching Git Tags for Documentation Build\nDESCRIPTION: Command to fetch Qiskit's git tags and stable branches from upstream repository to resolve documentation build errors related to version references.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch --tags upstream\n```\n\n----------------------------------------\n\nTITLE: Cleaning Sphinx Documentation Cache\nDESCRIPTION: Tox command to clean out all documentation build artifacts and partial builds when encountering import or naming errors during documentation building.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ntox -e docs-clean\n```\n\n----------------------------------------\n\nTITLE: Release Note with Issue Link in YAML\nDESCRIPTION: Demonstrates how to properly link to GitHub issues within release notes using restructured text syntax.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/CONTRIBUTING.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfixes:\n  - |\n    Fixes a race condition in the function ``foo()``. Refer to\n    `#12345 <https://github.com/Qiskit/qiskit/issues/12345>` for more\n    details.\n```\n\n----------------------------------------\n\nTITLE: Configuring Release Notes Generation in ReStructuredText\nDESCRIPTION: This snippet sets up the configuration for generating Qiskit release notes. It specifies the earliest version from which to start generating notes, which is set to 1.1.0rc1.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/docs/release_notes.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. release-notes::\n   :earliest-version: 1.1.0rc1\n```\n\n----------------------------------------\n\nTITLE: Referencing Qiskit Accelerate Module in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the qiskit._accelerate Python extension module in Markdown. It's used to specify the module that the qiskit-pyext crate builds.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/pyext/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n`qiskit._accelerate`\n```\n\n----------------------------------------\n\nTITLE: Referencing QASM2 Submodule in Markdown\nDESCRIPTION: This code snippet demonstrates how to reference the qasm2 submodule crate in Markdown. It's used as an example of a self-contained submodule that can define its own pymodule.\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/pyext/README.md#2025-04-21_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n`qasm2`\n```\n\n----------------------------------------\n\nTITLE: Rust Library Module Names\nDESCRIPTION: Code reference showing the module naming convention where Rust modules should be defined as submodules of qiskit._accelerate\nSOURCE: https://github.com/qiskit/qiskit/blob/main/crates/accelerate/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nqiskit._accelerate\n```"
  }
]