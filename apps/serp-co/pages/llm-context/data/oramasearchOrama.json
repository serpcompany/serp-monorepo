[
  {
    "owner": "oramasearch",
    "repo": "orama",
    "content": "TITLE: Creating Basic Orama Instance with String Schema\nDESCRIPTION: Demonstrates how to create a simple Orama database instance with a basic string schema property.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/create.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    word: \"string\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Answers with JavaScript SDK\nDESCRIPTION: This code demonstrates how to use the askStream() method to get streamed answers from the Orama JavaScript SDK. It returns an async iterator that yields chunks of the answer as they are received.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nconst answer = await answerSession.askStream({\n  term: \"What is Orama?\",\n});\n\nfor await (const msg of answer) {\n  console.log(msg);\n}\n\n// Orama\n//  is a\n// next-gener\n// ation answer\n//  engine\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG Pipeline with Orama\nDESCRIPTION: Complete implementation of a Retrieval-Augmented Generation (RAG) pipeline using Orama. Includes database initialization, document population, and response generation with vector search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/answer-engine/introduction.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { create, insert, search, AnswerSession } from \"@orama/orama\";\nimport { pluginSecureProxy } from \"@orama/plugin-secure-proxy\";\n\nconst CONFIG = {\n  API_KEY: process.env.ORAMA_SECURE_PROXY_API_KEY,\n  VECTOR_DIMENSIONS: 1536,\n};\n\nconst SAMPLE_DOCS = [\n  { description: \"John Doe is a programmer, and he has 14 years.\" },\n  { description: \"Mitch Smith is a programmer, and he has 32 years.\" },\n];\n\nasync function initializeDatabase() {\n  const secureProxy = await pluginSecureProxy({\n    apiKey: CONFIG.API_KEY,\n    embeddings: {\n      model: \"openai/text-embedding-ada-002\",\n      defaultProperty: \"embeddings\",\n      onInsert: {\n        generate: true,\n        properties: [\"description\"],\n        verbose: true,\n      },\n    },\n    chat: {\n      model: \"openai/gpt-3.5-turbo\",\n    },\n  });\n\n  return create({\n    schema: {\n      description: \"string\",\n      embeddings: `vector[${CONFIG.VECTOR_DIMENSIONS}]`,\n    },\n    plugins: [secureProxy],\n  });\n}\n\nasync function populateDatabase(db, documents) {\n  const insertPromises = documents.map((doc) =>\n    insert(db, { description: doc.description })\n  );\n  await Promise.all(insertPromises);\n}\n\nasync function generateResponse(db, userPrompt) {\n  try {\n    const searchResults = await search(db, {\n      mode: \"vector\",\n      term: userPrompt,\n    });\n\n    const formattedPrompt = `### Context: \\n\\n${JSON.stringify(\n      searchResults?.hits\n    )}\\n\\n### Prompt:\\n\\n${userPrompt}`;\n\n    const session = new AnswerSession(db, {});\n    return await session.ask({ term: formattedPrompt });\n  } catch (error) {\n    console.error(\"Error generating response:\", error);\n    throw error;\n  }\n}\n\nasync function main() {\n  try {\n    const db = await initializeDatabase();\n    await populateDatabase(db, SAMPLE_DOCS);\n    const userPrompt = \"Who is John Doe?\";\n    const response = await generateResponse(db, userPrompt);\n    console.log(\"Response:\", response);\n  } catch (error) {\n    console.error(\"Application error:\", error);\n  }\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG and Chat Experience with Orama and Secure Proxy Plugin in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a ChatGPT-like experience using Orama and the Secure Proxy Plugin. It shows the process of setting up the plugin, creating a database, inserting data, and using an AnswerSession to generate responses based on user input.\nSOURCE: https://github.com/oramasearch/orama/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from '@orama/orama'\nimport { pluginSecureProxy } from '@orama/plugin-secure-proxy'\n\nconst secureProxy = await pluginSecureProxy({\n  apiKey: 'my-api-key',\n  defaultProperty: 'embeddings',\n  models: {\n    // The chat model to use to generate the chat answer\n    chat: 'openai/gpt-4o-mini'\n  }\n})\n\nconst db = create({\n  schema: {\n    name: 'string'\n  },\n  plugins: [secureProxy]\n})\n\ninsert(db, { name: 'John Doe' })\ninsert(db, { name: 'Jane Doe' })\n\nconst session = new AnswerSession(db, {\n  // Customize the prompt for the system\n  systemPrompt: 'You will get a name as context, please provide a greeting message',\n  events: {\n    // Log all state changes. Useful to reactively update a UI on a new message chunk, sources, etc.\n    onStateChange: console.log,\n  }\n})\n\nconst response = await session.ask({\n  term: 'john'\n})\n\nconsole.log(response) // Hello, John Doe! How are you doing?\n```\n\n----------------------------------------\n\nTITLE: Typing Variables in Orama with TypeScript\nDESCRIPTION: This snippet demonstrates how to use TypeScript with Orama, including importing types, defining a schema, creating a database, inserting data, and performing a search with proper typing.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/typescript.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { TypedDocument, Orama, Results, SearchParams } from \"@orama/orama\";\nimport { create, insert, search } from \"@orama/orama\";\n\ntype MovieDocument = TypedDocument<Orama<typeof movieSchema>>;\n\nconst movieSchema = {\n  title: \"string\",\n  year: \"number\",\n  actors: \"string[]\",\n  isFavorite: \"boolean\",\n  stars: \"enum\",\n} as const; // <-- this is important\n\nconst movieDB: Orama<typeof movieSchema> = create({\n  schema: movieSchema,\n});\n\nconst idP: string = insert(movieDB, {\n  title: \"The Godfather\",\n  year: 1972,\n  actors: [\"Marlon Brando\", \"Al Pacino\"],\n  isFavorite: true,\n});\n\nconst searchParams: SearchParams<Orama<typeof movieSchema>> = {\n  term: \"godfather\",\n};\nconst result: Results<MovieDocument> = search(movieDB, searchParams);\nconst title = result.hits[0].document.title; // well typed!\n```\n\n----------------------------------------\n\nTITLE: Basic Orama Usage with Full-Text and Vector Search\nDESCRIPTION: Demonstrates core Orama functionality including creating a database with schema, inserting documents, and performing a full-text search. The example includes vector fields for embedding support.\nSOURCE: https://github.com/oramasearch/orama/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, remove, search, searchVector } from '@orama/orama'\n\nconst db = create({\n  schema: {\n    name: 'string',\n    description: 'string',\n    price: 'number',\n    embedding: 'vector[1536]', // Vector size must be expressed during schema initialization\n    meta: {\n      rating: 'number',\n    },\n  },\n})\n\ninsert(db, {\n  name: 'Noise cancelling headphones',\n  description: 'Best noise cancelling headphones on the market',\n  price: 99.99,\n  embedding: [0.2432, 0.9431, 0.5322, 0.4234, ...],\n  meta: {\n    rating: 4.5\n  }\n})\n\nconst results = search(db, {\n  term: 'Best headphones'\n})\n\n// {\n//   elapsed: {\n//     raw: 21492,\n//     formatted: '21Î¼s',\n//   },\n//   hits: [\n//     {\n//       id: '41013877-56',\n//       score: 0.925085832971998432,\n//       document: {\n//         name: 'Noise cancelling headphones',\n//         description: 'Best noise cancelling headphones on the market',\n//         price: 99.99,\n//         embedding: [0.2432, 0.9431, 0.5322, 0.4234, ...],\n//         meta: {\n//           rating: 4.5\n//         }\n//       }\n//     }\n//   ],\n//   count: 1\n// }\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating an Orama Movie Database\nDESCRIPTION: Creates an Orama database with a movie schema and inserts three sample movies. This demonstrates the basic structure for creating a searchable collection of documents with different data types.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n    plot: \"string\",\n    year: \"number\",\n    isFavorite: \"boolean\",\n  },\n});\n\ninsert(movieDB, {\n  title: \"The prestige\",\n  director: \"Christopher Nolan\",\n  plot: \"Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.\",\n  year: 2006,\n  isFavorite: true,\n});\n\ninsert(movieDB, {\n  title: \"Big Fish\",\n  director: \"Tim Burton\",\n  plot: \"Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.\",\n  year: 2004,\n  isFavorite: true,\n});\n\ninsert(movieDB, {\n  title: \"Harry Potter and the Philosopher's Stone\",\n  director: \"Chris Columbus\",\n  plot: \"Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.\",\n  year: 2001,\n  isFavorite: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search with Orama Cloud Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to use the Orama Cloud client in Kotlin to perform a full-text search query. It includes setting up the data class, defining search parameters, and executing the search within a coroutine.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\nimport com.orama.model.search.*\nimport kotlinx.serialization.Serializable\n\n// Keep in mind that search is a suspended function, \n// so you need to call it from a coroutine ;)\n\n@Serializable\ndata class MyDoc (\n    val title: String,\n    val category: String,\n    val path: String,\n    val content: String,\n    val section: String\n)\n\nval searchParams = SearchParams.builder(\n        term = \"red shoes\",\n        mode = Mode.FULLTEXT\n    )\n    .where(listOf(\n        Condition(\"price\", ConditionType.GreaterThan(99.99))\n    ))\n    .build()\n\nval results = client.search(searchParams, MyDoc.serializer())\n```\n\n----------------------------------------\n\nTITLE: Basic Orama Usage with TypeScript\nDESCRIPTION: This code snippet demonstrates the core functionality of Orama by creating a search database with a schema, inserting a document, and performing a search query. It shows how to structure data with nested fields and retrieve search results.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { create, search, insert } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    name: \"string\",\n    description: \"string\",\n    price: \"number\",\n    meta: {\n      rating: \"number\",\n    },\n  },\n});\n\ninsert(db, {\n  name: \"Wireless Headphones\",\n  description:\n    \"Experience immersive sound quality with these noise-cancelling wireless headphones.\",\n  price: 99.99,\n  meta: {\n    rating: 4.5,\n  },\n});\n\nconst searchResult = search(db, {\n  term: \"headphones\",\n});\n\nconsole.log(searchResult.hits.map((hit) => hit.document));\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Client\nDESCRIPTION: Demonstrates how to create an instance of OramaClient by providing the endpoint URL and public API key from the Orama Dashboard.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/javascript-sdk.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst client = new OramaClient({\n  endpoint: \"YOUR_ENDPOINT_URL\",\n  api_key: \"YOUR_PUBLIC_API_KEY\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating RAG and Chat Experience with Orama and OpenAI\nDESCRIPTION: This code snippet demonstrates how to create a ChatGPT-like experience using Orama and the Secure Proxy Plugin. It includes setting up the database, inserting data, and creating an answer session to generate responses based on user input.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/orama/README.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from '@orama/orama'\nimport { pluginSecureProxy } from '@orama/plugin-secure-proxy'\n\nconst secureProxy = await pluginSecureProxy({\n  apiKey: 'my-api-key',\n  defaultProperty: 'embeddings',\n  models: {\n    // The chat model to use to generate the chat answer\n    chat: 'openai/gpt-4o-mini'\n  }\n})\n\nconst db = create({\n  schema: {\n    name: 'string'\n  },\n  plugins: [secureProxy]\n})\n\ninsert(db, { name: 'John Doe' })\ninsert(db, { name: 'Jane Doe' })\n\nconst session = new AnswerSession(db, {\n  // Customize the prompt for the system\n  systemPrompt: 'You will get a name as context, please provide a greeting message',\n  events: {\n    // Log all state changes. Useful to reactively update a UI on a new message chunk, sources, etc.\n    onStateChange: console.log,\n  }\n})\n\nconst response = await session.ask({\n  term: 'john'\n})\n\nconsole.log(response) // Hello, John Doe! How are you doing?\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating Documents in Orama Cloud Index (JavaScript)\nDESCRIPTION: Demonstrates how to insert and update documents in an Orama Cloud index using the JavaScript SDK. It shows the process of creating a CloudManager instance, accessing an index, and performing insert and update operations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CloudManager } from \"@oramacloud/client\"\n\nconst oramaCloudManager = new CloudManager({\n  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,\n})\n\nconst myIndex = oramaCloudManager.index(\"my-index-id\")\n\nawait myIndex.insert([{ id: \"3\", name: \"Rick Sanchez\", age: 80 }])\nawait myIndex.update([{ id: \"3\", name: \"Rick Doe\", age: 75 }])\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Search with JavaScript SDK\nDESCRIPTION: Demonstrates how to perform hybrid search using the Orama JavaScript client. The example shows searching for 'Super Mario videogame' with a price filter, combining vector and full-text search capabilities.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/hybrid-search.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst client = new OramaClient({\n  endpoint: \"\",\n  api_key: \"\",\n});\n\nconst results = await client.search({\n  term: \"Super Mario videogame\",\n  mode: \"hybrid\",\n  where: {\n    price: {\n      lt: 19.99,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Search in Orama with Vector Embeddings\nDESCRIPTION: Complete example demonstrating how to create a database, insert documents with embeddings, and perform hybrid search using both text terms and vector similarity.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/hybrid-search.mdx#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { create, insertMultiple, search } from '@orama/orama'\n\nconst db = create({\n  schema: {\n    title: 'string',        // To make it simple, let's pretend that\n    embedding: 'vector[5]', // we are using a 5-dimensional vector.\n  }\n})\n\ninsertMultiple(db, [\n  { title: 'The Prestige', embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.564720] },\n  { title: 'Barbie',       embedding: [0.192839, 0.028471, 0.284738, 0.937463, 0.092827] },\n  { title: 'Oppenheimer',  embedding: [0.827391, 0.927381, 0.001982, 0.983821, 0.294841] },\n])\n\nconst results = search(db, {\n  mode: 'hybrid',\n  term: 'The Prestige'\n  vector: {\n    value: [0.938292, 0.284961, 0.248264, 0.748276, 0.264720],\n    property: 'embedding',\n  },\n  similarity: 0.85,      // Minimum vector search similarity. Defaults to `0.8`\n  includeVectors: true,  // Defaults to `false`\n  limit: 10,             // Defaults to `10`\n  offset: 0,             // Defaults to `0`\n})\n```\n\n----------------------------------------\n\nTITLE: Using Number Operators for Filtering in Orama\nDESCRIPTION: This example demonstrates how to create a database with numeric properties and filter search results using various number operators such as gte, between, and lte. It filters for movies after 2000 with ratings between 5-10 and length under 60.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/filters.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    id: \"string\",\n    title: \"string\",\n    year: \"number\",\n    meta: {\n      rating: \"number\",\n      length: \"number\",\n      favorite: \"boolean\",\n      tags: \"string\",\n    },\n  },\n  components: {\n    tokenizer: {\n      stemming: true,\n      stemmerSkipProperties: [\"meta.tags\"],\n    },\n  },\n});\n\nconst results = search(db, {\n  term: \"prestige\",\n  where: {\n    year: {\n      gte: 2000,\n    },\n    \"meta.rating\": {\n      between: [5, 10],\n    },\n    \"meta.length\": {\n      lte: 60,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Multi-Index Search with Orama JavaScript SDK\nDESCRIPTION: Demonstrates how to set up and perform a search query across multiple Orama Cloud indexes using the JavaScript SDK. Shows configuration with multiple API keys and endpoints with the option to merge or separate results.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/multi-index-search.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst client = new OramaClient({\n  mergeResults: false\n  indexes:[\n        {api_key: \"<Your Orama Cloud API Key index 1>\", endpoint:\"<Your Orama Cloud Endpoint index 1>\"},\n        {api_key: \"<Your Orama Cloud API Key index 2>\", endpoint:\"<Your Orama Cloud Endpoint index 2>\"},\n      ]\n});\n\nconst results = await client.search({\n  term: \"red shoes\",\n  mode: \"fulltext\", // optional, default is \"fulltext\" but can also be \"vector\" or \"hybrid\"\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Vector Search Implementation with Orama\nDESCRIPTION: A comprehensive example showing how to create a database with vector capability, insert multiple documents with embeddings, and perform a vector search with specific parameters. The example uses a 5-dimensional vector for simplicity.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/vector-search.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insertMultiple, search } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    title: \"string\", // To make it simple, let's pretend that\n    embedding: \"vector[5]\", // we are using a 5-dimensional vector.\n  },\n});\n\ninsertMultiple(db, [\n  {\n    title: \"The Prestige\",\n    embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.56472],\n  },\n  {\n    title: \"Barbie\",\n    embedding: [0.192839, 0.028471, 0.284738, 0.937463, 0.092827],\n  },\n  {\n    title: \"Oppenheimer\",\n    embedding: [0.827391, 0.927381, 0.001982, 0.983821, 0.294841],\n  },\n]);\n\nconst results = search(db, {\n  mode: \"vector\",\n  vector: {\n    value: [0.938292, 0.284961, 0.248264, 0.748276, 0.26472],\n    property: \"embedding\",\n  },\n  similarity: 0.85, // Minimum similarity. Defaults to `0.8`\n  includeVectors: true, // Defaults to `false`\n  limit: 10, // Defaults to `10`\n  offset: 0, // Defaults to `0`\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Search with JavaScript SDK\nDESCRIPTION: Example of performing a search operation using the JavaScript SDK with full-text, vector, or hybrid search modes.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/official-sdk.mdx#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst client = new OramaClient({\n  endpoint: '<Your Orama Cloud Endpoint>',\n  api_key: '<Your Orama Cloud API Key>',\n});\n\nconst results = await client.search({\n  term: \"red shoes\",\n  mode: \"fulltext\", // optional, default is \"fulltext\" but can also be \"vector\" or \"hybrid\"\n  where: {\n    price: {\n      gt: 99.99,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search with Orama Cloud Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Orama Cloud client and perform a full-text search query with optional filtering in JavaScript. It uses the @oramacloud/client package.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst client = new OramaClient({\n  endpoint: '<Your Orama Cloud Endpoint>',\n  api_key: '<Your Orama Cloud API Key>',\n});\n\nconst results = await client.search({\n  term: \"red shoes\",\n  mode: \"fulltext\", // optional, default is \"fulltext\" but can also be \"vector\" or \"hybrid\"\n  where: {\n    price: {\n      gt: 99.99,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering String Properties with Exact Matching in Orama\nDESCRIPTION: This example demonstrates how to create a database with string properties and filter search results using exact string matching. It shows how to use the stemmerSkipProperties configuration to disable stemming for properties that need exact matching.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/filters.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    title: \"string\",\n    tag: \"string\",\n  },\n  components: {\n    tokenizer: {\n      stemming: true,\n      stemmerSkipProperties: [\"tag\"],\n    },\n  },\n});\n\nconst results = search(db, {\n  term: \"prestige\",\n  where: {\n    tag: \"new\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Embeddings Plugin with Orama\nDESCRIPTION: Demonstrates how to use the @orama/plugin-embeddings plugin to automatically generate embeddings at insert-time and perform vector searches.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/orama/README.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { pluginEmbeddings } from '@orama/plugin-embeddings'\nimport '@tensorflow/tfjs-node' // Or any other appropriate TensorflowJS backend, like @tensorflow/tfjs-backend-webgl\n\nconst plugin = await pluginEmbeddings({\n  embeddings: {\n    // Schema property used to store generated embeddings\n    defaultProperty: 'embeddings',\n    onInsert: {\n      // Generate embeddings at insert-time\n      generate: true,\n      // properties to use for generating embeddings at insert time.\n      // Will be concatenated to generate a unique embedding.\n      properties: ['description'],\n      verbose: true,\n    }\n  }\n})\n\nconst db = create({\n  schema: {\n    description: 'string',\n    // Orama generates 512-dimensions vectors.\n    // When using @orama/plugin-embeddings, set the property where you want to store embeddings as `vector[512]`.\n    embeddings: 'vector[512]'\n  },\n  plugins: [plugin]\n})\n\n// Orama will generate and store embeddings at insert-time!\nawait insert(db, { description: 'Classroom Headphones Bulk 5 Pack, Student On Ear Color Varieties' })\nawait insert(db, { description: 'Kids Wired Headphones for School Students K-12' })\nawait insert(db, { description: 'Kids Headphones Bulk 5-Pack for K-12 School' })\nawait insert(db, { description: 'Bose QuietComfort Bluetooth Headphones' })\n\n// Orama will also generate and use embeddings at search time when search mode is set to \"vector\" or \"hybrid\"!\nconst searchResults = await search(db, {\n  term: 'Headphones for 12th grade students',\n  mode: 'vector'\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Search with Swift SDK\nDESCRIPTION: Shows how to implement hybrid search using the Orama Swift client. Includes document structure definition and search parameter configuration with optional limit, offset, and field selection.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/hybrid-search.mdx#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nstruct MyDoc: Encodable & Decodable {\n  let title: String\n  let description: String\n}\n\nlet clientParams = OramaClientParams(endpoint: \"\", apiKey: \"\")\nlet orama = OramaClient(params: clientParams)\n\nlet searchParams = ClientSearchParams.builder(\n    term: \"Super Mario videogame\",\n    mode: .hybrid\n  )\n  .limit(10) // optional\n  .offset(0) // optional\n  .returning([\"title\", \"description\"]) // optional\n  .build()\n\nlet searchResults: SearchResults<MyDoc> = try await orama.search(query: searchParams)\n```\n\n----------------------------------------\n\nTITLE: Vector Search Implementation with Orama\nDESCRIPTION: Shows how to perform vector search using Orama by creating a database with vector fields, inserting multiple documents with embeddings, and searching with vector similarity comparison.\nSOURCE: https://github.com/oramasearch/orama/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insertMultiple, search } from '@orama/orama'\n\nconst db = create({\n  schema: {\n    title: 'string',\n    embedding: 'vector[5]', // we are using a 5-dimensional vector.\n  },\n});\n\ninsertMultiple(db, [\n  { title: 'The Prestige', embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.56472] },\n  { title: 'Barbie', embedding: [0.192839, 0.028471, 0.284738, 0.937463, 0.092827] },\n  { title: 'Oppenheimer', embedding: [0.827391, 0.927381, 0.001982, 0.983821, 0.294841] },\n])\n\nconst results = search(db, {\n  // Search mode. Can be 'vector', 'hybrid', or 'fulltext'\n  mode: 'vector',\n  vector: {\n    // The vector (text embedding) to use for search\n    value: [0.938292, 0.284961, 0.248264, 0.748276, 0.26472],\n    // The schema property where Orama should compare embeddings\n    property: 'embedding',\n  },\n  // Minimum similarity to determine a match. Defaults to `0.8`\n  similarity: 0.85,\n  // Defaults to `false`. Setting to 'true' will return the embeddings in the response (which can be very large).\n  includeVectors: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid and Vector Searches with Orama\nDESCRIPTION: Demonstrates how to perform both hybrid and vector searches using the configured Orama database. Shows async search operations with automatic vector embedding generation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-secure-proxy.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from '@orama/orama'\n\nconst resultsHybrid = await search(db, {\n  mode: 'hybrid',\n  term: 'Videogame for little kids with a passion about ice cream'\n})\n\nconst resultsVector = await search(db, {\n  mode: 'vector',\n  term: 'Videogame for little kids with a passion about ice cream'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating an Orama Database\nDESCRIPTION: Creates an Orama database instance with a schema for quotes and authors, and inserts three sample quotes into it. This example serves as the foundation for the persistence examples that follow.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-data-persistence.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\n\nconst originalInstance = create({\n  schema: {\n    author: \"string\",\n    quote: \"string\",\n  },\n});\n\ninsert(originalInstance, {\n  quote: \"He who is brave is free\",\n  author: \"Seneca\",\n});\n\ninsert(originalInstance, {\n  quote: \"Make each day your masterpiece\",\n  author: \"John Wooden\",\n});\n\ninsert(originalInstance, {\n  quote: \"You must be the change you wish to see in the world\",\n  author: \"Mahatma Gandhi\",\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Hybrid Search Weights in Orama\nDESCRIPTION: Demonstrates how to adjust the relative importance of text and vector search results by customizing the hybridWeights parameter, allowing more control over result ranking.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/hybrid-search.mdx#2025-04-11_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst results = search(db, {\n  mode: \"hybrid\",\n  term: \"The Prestige\",\n  vector: {\n    value: [0.912729, 0.49271, 0.291728, 0.93819, 0.53618],\n    property: \"embedding\",\n  },\n  hybridWeights: {\n    text: 0.8,\n    vector: 0.2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Text Embeddings with Orama Secure Proxy\nDESCRIPTION: Code for initializing the OramaProxy class and generating text embeddings using a specified model without exposing your OpenAI API key to users. Available models include orama/gte variants and openai embedding models.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/orama-ai/orama-secure-proxy.mdx#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { OramaProxy } from \"@oramacloud/secure-proxy\";\n\nconst proxy = new OramaProxy({\n  api_key: \"<YOUR API KEY>\",\n});\n\nconst embeddings = await proxy.generateEmbeddings(\n  \"Red leather shoes\",\n  \"orama/gte-small\" // Specify the model you want to use\n);\n\nconsole.log(embeddings);\n// [-0.019633075, -0.00820422, -0.013555876, -0.011825735, 0.006641511, -0.012948156, ...]\n```\n\n----------------------------------------\n\nTITLE: Basic Orama Usage with Full-Text Search\nDESCRIPTION: Demonstrates the core functionality of Orama including creating a database with a schema, inserting data, and performing a full-text search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/orama/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, remove, search, searchVector } from '@orama/orama'\n\nconst db = create({\n  schema: {\n    name: 'string',\n    description: 'string',\n    price: 'number',\n    embedding: 'vector[1536]', // Vector size must be expressed during schema initialization\n    meta: {\n      rating: 'number',\n    },\n  },\n})\n\ninsert(db, {\n  name: 'Noise cancelling headphones',\n  description: 'Best noise cancelling headphones on the market',\n  price: 99.99,\n  embedding: [0.2432, 0.9431, 0.5322, 0.4234, ...],\n  meta: {\n    rating: 4.5\n  }\n})\n\nconst results = search(db, {\n  term: 'Best headphones'\n})\n\n// {\n//   elapsed: {\n//     raw: 21492,\n//     formatted: '21Î¼s',\n//   },\n//   hits: [\n//     {\n//       id: '41013877-56',\n//       score: 0.925085832971998432,\n//       document: {\n//         name: 'Noise cancelling headphones',\n//         description: 'Best noise cancelling headphones on the market',\n//         price: 99.99,\n//         embedding: [0.2432, 0.9431, 0.5322, 0.4234, ...],\n//         meta: {\n//           rating: 4.5\n//         }\n//       }\n//     }\n//   ],\n//   count: 1\n// }\n```\n\n----------------------------------------\n\nTITLE: Searching Nested Properties in Orama\nDESCRIPTION: Shows how to search within nested properties by using dot notation. This example searches for 'Chris' within the nested property 'cast.director'.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Chris\",\n  properties: [\"cast.director\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Embeddings Plugin and TensorFlow Backend\nDESCRIPTION: Shows how to install the Orama embeddings plugin and a TensorFlow backend using a package manager. The specific backend depends on the environment (browser or Node.js).\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-embeddings.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<Install pkg=\"@orama/plugin-embeddings\" />\n```\n\nLANGUAGE: shell\nCODE:\n```\n<Install pkg=\"@tensorflow/tfjs-backend-webgl\" />\n```\n\nLANGUAGE: shell\nCODE:\n```\n<Install pkg=\"@tensorflow/tfjs-node\" />\n```\n\n----------------------------------------\n\nTITLE: Installing Orama via Package Managers\nDESCRIPTION: Shows how to install Orama using npm, which can also be applied to yarn, pnpm, or bun package managers.\nSOURCE: https://github.com/oramasearch/orama/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @orama/orama\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with Automatic Embedding Generation\nDESCRIPTION: Example demonstrating how to insert data into the database with automatic embedding generation for the description field.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-embeddings/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nawait insert(db, {\n  description: 'Classroom Headphones Bulk 5 Pack, Student On Ear Color Varieties'\n})\n\nawait insert(db, {\n  description: 'Kids Wired Headphones for School Students K-12'\n})\n\nawait insert(db, {\n  description: 'Kids Headphones Bulk 5-Pack for K-12 School'\n})\n\nawait insert(db, {\n  description: 'Bose QuietComfort Bluetooth Headphones'\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Answer Session with Custom System Prompts\nDESCRIPTION: This snippet demonstrates how to create an answer session with the OramaClient and specify custom system prompts. The client can be configured to randomly choose from multiple system prompt options or use a specific one.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/customizing-the-answers.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OramaClient } from '@oramacloud/client'\n\nconst client = new OramaClient({\n  endpoint: 'your-endpoint',\n  api_key: 'your-api-key'\n})\n\nconst session = client\n  .createAnswerSession({\n    events: { ... },\n    // Orama will randomly choose one of the system prompts.\n    // Set just one prompt if you want to force Orama to use it.\n    systemPrompts: [\n      'sp_italian-prompt-chc4o0',\n      'sp_italian-prompt-with-greetings-2bx7d3'\n    ]\n  })\n\nawait session.ask({\n  term: 'what is Orama?'\n})\n```\n\n----------------------------------------\n\nTITLE: Installing TensorFlow.js Node Backend\nDESCRIPTION: Command to install the recommended TensorFlow.js backend for Node.js environments.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-embeddings/README.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @tensorflow/tfjs-node\n```\n\n----------------------------------------\n\nTITLE: Vector Search with Orama\nDESCRIPTION: Shows how to use vector search in Orama by creating a database with embeddings, inserting multiple documents, and performing a vector search with similarity threshold.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/orama/README.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insertMultiple, search } from '@orama/orama'\n\nconst db = create({\n  schema: {\n    title: 'string',\n    embedding: 'vector[5]'', // we are using a 5-dimensional vector.\n  },\n});\n\ninsertMultiple(db, [\n  { title: 'The Prestige', embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.56472] },\n  { title: 'Barbie', embedding: [0.192839, 0.028471, 0.284738, 0.937463, 0.092827] },\n  { title: 'Oppenheimer', embedding: [0.827391, 0.927381, 0.001982, 0.983821, 0.294841] },\n])\n\nconst results = search(db, {\n  // Search mode. Can be 'vector', 'hybrid', or 'fulltext'\n  mode: 'vector',\n  vector: {\n    // The vector (text embedding) to use for search\n    value: [0.938292, 0.284961, 0.248264, 0.748276, 0.26472],\n    // The schema property where Orama should compare embeddings\n    property: 'embedding',\n  },\n  // Minimum similarity to determine a match. Defaults to `0.8`\n  similarity: 0.85,\n  // Defaults to `false`. Setting to 'true' will return the embeddings in the response (which can be very large).\n  includeVectors: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing QPS Plugin in Orama\nDESCRIPTION: This code demonstrates how to integrate the Quantum Proximity Scoring (QPS) plugin into an Orama database instance. The plugin replaces the default BM25 scoring algorithm with QPS, enhancing search relevance based on token proximity.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-qps.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { pluginQPS } from '@orama/plugin-qps'\n\nconst db = create({\n  schema: {\n    title: 'string',\n    description: 'string',\n    rating: 'number',\n  },\n  plugins: [pluginQPS()],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Orama Instance with Vector Search\nDESCRIPTION: Shows how to initialize and use vector properties for vector search capabilities in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/create.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    title: \"string\",\n    embedding: \"vector[10]\", // replace 10 with the appropriate size of your vector\n  },\n});\n\ninsert(db, {\n  title: \"The Godfather\",\n  embedding: [\n    -0.8469661901208547, 0.6762289692745016, 0.3294302068627739,\n    -0.9269241187762711, -0.8340635986042049, -0.9940330715457502,\n    -0.46761552816396046, 0.2818135926099674, -0.5812061227183709,\n    0.6443446315273054,\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering by Radius in JavaScript\nDESCRIPTION: Demonstrates how to filter search results by distance from a central point. The example searches for documents containing 'Duomo' within 1000 meters from Milan's Vittorio Emanuele II Gallery. The filter can be configured with different units of measurement including cm, m, km, ft, yd, and mi.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = await client.search({\n  term: 'Duomo',\n  where: {\n    location: {           // The property we want to filter by\n      radius: {           // The filter we want to apply (in that case: \"radius\")\n        coordinates: {    // The central coordinate\n          lat: 45.4648,\n          lon: 9.18998\n        },\n        unit: 'm',        // The unit of measurement. The default is \"m\" (meters)\n        value: 1000,      // The radius length. In that case, 1km\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Orama Chat Box Component in React\nDESCRIPTION: Example of implementing the OramaChatBox component in a React application. It shows how to provide the necessary index configuration, source mapping, and suggested queries for initializing the chat interface.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/chat-box.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OramaChatBox } from '@orama/react-components';\n\n<OramaChatBox\n  index={{\n    endpoint: 'https://your-index-endpoint-url',\n    api_key: 'YOUR_PUBLIC_API_KEY'\n  }}\n  sourceBaseUrl=\"https://your-website-url\"\n  sourcesMap={{\n    title: 'name',\n    description: 'content',\n    path: 'url'\n  }}\n  suggestions={[\n    'How to use the Chat Box?',\n    'What is the Chat Box component?',\n    'How to integrate the Chat Box in my website?'\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using the Analytics Plugin in Orama\nDESCRIPTION: This snippet demonstrates how to install the Analytics plugin, configure it with API credentials, initialize an Orama database with the plugin, insert data, and perform a search operation that collects analytics.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-analytics.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Orama } from '@orama/core';\nimport { pluginAnalytics } from '@orama/plugin-analytics';\n\nconst db = create({\n  schema: { name: 'string' } as const,\n  plugins: [\n    pluginAnalytics({\n      apiKey: 'your-api-key',\n      indexId: 'your-index-id',\n    })\n  ]\n})\n\ninsertMultiple(db, [\n  { name: 'foo' },\n  { name: 'bar' },\n  { name: 'baz' },\n])\n\n// Collects anonymous analytics data and sends it to Orama Cloud\nsearch(db, { term: 'foo' })\n```\n\n----------------------------------------\n\nTITLE: Restoring an Orama Database from In-Memory Snapshot\nDESCRIPTION: Demonstrates how to restore an Orama database from an in-memory snapshot using the restore function. This example also shows how to perform a search on the restored database.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-data-persistence.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from \"@orama/orama\";\nimport { restore } from \"@orama/plugin-data-persistence\";\n\nconst newInstance = await restore(\"json\", JSONIndex);\n\nsearch(newInstance, {\n  term: \"...\",\n});\n```\n\n----------------------------------------\n\nTITLE: Exact Match Search in Orama\nDESCRIPTION: Performs an exact match search for the term 'Chris' in the director field. This ensures only documents with exactly the word 'Chris' will match, not partial matches like 'Christopher'.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Chris\",\n  properties: [\"director\"],\n  exact: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing PT15 Plugin in Orama Search Configuration\nDESCRIPTION: Demonstrates how to create an Orama database instance with the PT15 plugin enabled. This replaces the default BM25 scoring algorithm with PT15, potentially improving search speed and reducing index size.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-pt15.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { pluginPT15 } from '@orama/plugin-pt15'\n\nconst db = create({\n  schema: {\n    title: 'string',\n    description: 'string',\n    rating: 'number',\n  },\n  plugins: [pluginPT15()],\n})\n```\n\n----------------------------------------\n\nTITLE: Custom Sort Algorithm in Orama\nDESCRIPTION: This snippet shows how to implement a custom sorting algorithm in Orama. The function receives document IDs, scores, and the documents themselves, allowing for complex sorting logic based on any document property.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/sorting.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    title: \"string\",\n    year: \"number\",\n    inPromotion: \"boolean\",\n    meta: {\n      tag: \"string\",\n      rating: \"number\",\n      favorite: \"boolean\",\n    },\n  },\n  sortBy: (a, b) => {\n    // Implement the custom sort algorithm\n    return a[2].year - b[2].year;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting a Snapshot with JavaScript SDK\nDESCRIPTION: JavaScript example showing how to use the Orama Cloud SDK to create a snapshot of an index. This operation completely replaces the index content with the provided documents.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CloudManager } from \"@oramacloud/client\"\n\nconst oramaCloudManager = new CloudManager({\n  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,\n})\n\nconst myIndex = oramaCloudManager.index(\"my-index-id\")\n\nawait myIndex.snapshot([\n  { id: \"1\", name: \"John Doe\", age: 30 },\n  { id: \"2\", name: \"Jane Doe\", age: 25 },\n])\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Database with Secure Proxy Plugin\nDESCRIPTION: Creates a new Orama database instance with the secure proxy plugin configured for OpenAI embeddings. Defines schema with vector embeddings and sets up the plugin with API key and model configuration.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-secure-proxy.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { pluginSecureProxy } from \"@orama/plugin-secure-proxy\";\n\nconst secureProxy = secureProxyPlugin({\n  apiKey: \"YOUR API KEY\",\n  defaultProperty: \"embeddings\",\n  model: \"openai/text-embedding-ada-002\",\n});\n\nconst db = create({\n  schema: {\n    title: \"string\",\n    description: \"string\",\n    embeddings: \"vector[1536]\",\n  },\n  plugins: [secureProxy],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Orama Vector Search with Embeddings Plugin\nDESCRIPTION: Demonstrates how to use the Orama embeddings plugin to generate embeddings for documents at insert and search time, enabling vector and hybrid searches. It includes creating the database, inserting documents, and performing a vector search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-embeddings.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from '@orama/orama'\nimport { pluginEmbeddings } from '@orama/plugin-embeddings'\nimport '@tensorflow/tfjs-node' // Or any other appropriate TensorflowJS backend\n\nconst plugin = await pluginEmbeddings({\n  embeddings: {\n    // Property used to store generated embeddings. Must be defined in the schema.\n    defaultProperty: 'embeddings',\n    onInsert: {\n      // Generate embeddings at insert-time.\n      // Turn off if you're inserting documents with embeddings already generated.\n      generate: true,\n      // Properties to use for generating embeddings at insert time.\n      // These properties will be concatenated and used to generate embeddings.\n      properties: ['description'],\n      verbose: true,\n    }\n  }\n})\n\nconst db = create({\n  schema: {\n    description: 'string',\n    // Orama generates 512-dimensions vectors.\n    // When using this plugin, use `vector[512]` as a type.\n    embeddings: 'vector[512]'\n  },\n  plugins: [plugin]\n})\n\n// When using this plugin, document insertion becomes async\nawait insert(db, { description: 'The quick brown fox jumps over the lazy dog' })\nawait insert(db, { description: \"I've seen a lazy dog dreaming of jumping over a quick brown fox\" })\n\n// When using this plugin, search becomes async\nconst results = await search(db, {\n  term: 'Dreaming of a quick brown fox',\n  mode: 'vector'\n})\n```\n\n----------------------------------------\n\nTITLE: Vector Search Results Structure in Orama\nDESCRIPTION: Demonstrates the structure of the results object returned from a vector search operation, including count, elapsed time, and matching documents with their similarity scores.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/vector-search.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  count: 1,\n  elapsed: {\n    raw: 25000,\n    formatted: '25ms',\n  },\n  hits: [\n    {\n      id: '1-19238',\n      score: 0.812383129,\n      document: {\n        title: 'The Prestige',\n        embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.564720],\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Single Documents into Orama Database\nDESCRIPTION: This code shows how to insert individual movie documents into the Orama database using the insert function. It demonstrates the insertion of three different movies with their respective details.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/insert.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst thePrestigeId = insert(movieDB, {\n  title: \"The prestige\",\n  director: \"Christopher Nolan\",\n  plot: \"Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.\",\n  year: 2006,\n  isFavorite: true,\n});\n\nconst bigFishId = insert(movieDB, {\n  title: \"Big Fish\",\n  director: \"Tim Burton\",\n  plot: \"Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.\",\n  year: 2004,\n  isFavorite: true,\n});\n\nconst harryPotterId = insert(movieDB, {\n  title: \"Harry Potter and the Philosopher's Stone\",\n  director: \"Chris Columbus\",\n  plot: \"Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.\",\n  year: 2001,\n  isFavorite: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Vector Search Implementation in TypeScript\nDESCRIPTION: Demonstrates how to initialize the Orama client and perform a vector search with filtering in TypeScript. The example shows searching for 'Super Mario videogame' with a price filter.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/vector-search.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst client = new OramaClient({\n  endpoint: \"\",\n  api_key: \"\",\n});\n\nconst results = await client.search({\n  term: \"Super Mario videogame\",\n  mode: \"vector\",\n  where: {\n    price: {\n      lt: 19.99,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing QPS or PT15 Search Algorithm Plugins in Orama\nDESCRIPTION: This code demonstrates how to change the default search algorithm in Orama by installing either the QPS (Quantum Proximity Scoring) or PT15 (Positional Token 15) plugin when creating an Orama database instance.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/changing-search-algorithm.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { pluginQPS } from '@orama/plugin-qps'\nimport { pluginPT15 } from '@orama/plugin-pt15'\n\nconst db = create({\n  schema: {\n    title: 'string',\n    description: 'string',\n    rating: 'number',\n  },\n  plugins: [\n    pluginQPS() // or pluginPT15()\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Remote Document Storing in Orama\nDESCRIPTION: This code demonstrates how to implement remote document storing in Orama by providing a custom documentsStore component. It shows an example of storing documents on the filesystem and retrieving them when needed.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/insert.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { readFile, readdir, writeFile, rm } from \"node:fs/promises\";\nimport { resolve } from \"node:path\";\nimport { create } from \"@orama/orama\";\n\nconst ROOT_LOCATION = \"/var/db/orama-example\";\n\nasync function getDocument(id) {\n  return JSON.parse(\n    await readFile(resolve(ROOT_LOCATION, `${id}.json`), \"utf-8\")\n  );\n}\n\nasync function listDocuments() {\n  const allFiles = await readdir(ROOT_LOCATION);\n\n  return allFiles.filter((id) => id.endsWith(\".json\"));\n}\n\nconst database = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n  },\n  components: {\n    // override partially the default documents store\n    documentsStore: {\n      create() {\n        return {};\n      },\n      load(raw) {\n        return {};\n      },\n      save(store) {\n        return {};\n      },\n      get(_, id) {\n        return getDocument(id);\n      },\n      getMultiple(_, ids) {\n        return Promise.all(\n          ids.map(async (id) => {\n            return JSON.parse(await getDocument(id));\n          })\n        );\n      },\n      async getAll() {\n        const docs = await listDocuments();\n\n        return Promise.all(\n          docs.map(async (id) => {\n            return JSON.parse(await getDocument(id));\n          })\n        );\n      },\n      store() {\n        // No-op\n      },\n      remove() {\n        // No-op\n      },\n      async count() {\n        const docs = await listDocuments();\n\n        return docs.count;\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting initialMessages in JavaScript for Answer Session\nDESCRIPTION: This snippet demonstrates how to configure initialMessages when creating an answer session in JavaScript. It allows you to prepopulate the conversation with user and assistant messages.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst initialMessages = [\n  { role: \"user\", content: \"What is Orama?\" },\n  { role: \"assistant\", content: \"Orama is a next-generation answer engine\" },\n];\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search with useSearch Hook in React\nDESCRIPTION: Shows how to use the useSearch hook to perform a full-text search query against an Orama Cloud index and render the results.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/react-sdk.mdx#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSearch } from \"@oramacloud/react-client\";\n\nfunction Search() {\n  const { results, error } = useSearch({\n    term: \"red leather shoes\",\n    limit: 5,\n  });\n\n  return (\n    <>\n      {results.hits.map((hit) => (\n        <div key={hit.id}>\n          <pre> {JSON.stringify(hit.document, null, 2)} </pre>\n        </div>\n      ))}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Database with Secure Proxy Plugin\nDESCRIPTION: Example showing how to create an Orama database with the secure proxy plugin configured for embeddings generation and chat functionality. The configuration includes schema definition with vector embeddings and plugin settings for API authentication and model selection.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-secure-proxy/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from '@orama/orama'\nimport { pluginSecureProxy} from '@orama/plugin-secure-proxy'\n\nconst db = await create({\n  schema: {\n    title: 'string',\n    description: 'string',\n    embeddings: 'vector[384]'\n  },\n  plugins: [\n    pluginSecureProxy({\n      apiKey: 'xyz',\n      embeddings: {\n        defaultProperty: 'embeddings',\n        model: 'orama/gte-small',\n        onInsert: {\n          generate: true, // Generate the embeddings at insert-time\n          properties: ['title', 'description'], // Properties to generate embeddings from\n          verbose: false\n        },\n      },\n      chat: {\n        model: 'openai/gpt-4o'\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Reverse Order Sorting in Orama\nDESCRIPTION: This snippet shows how to implement reverse order sorting in Orama using the 'order' parameter with a value of 'DESC'. The default sorting order is 'ASC' (ascending).\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/sorting.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    title: \"string\",\n    year: \"number\",\n    inPromotion: \"boolean\",\n    meta: {\n      tag: \"string\",\n      rating: \"number\",\n      favorite: \"boolean\",\n    },\n  },\n});\nconst results = search(db, {\n  term: \"prestige\",\n  sortBy: {\n    property: \"title\", // or 'year', 'inPromotion'\n    order: \"DESC\", // default is \"ASC\"\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Client for API Requests\nDESCRIPTION: Demonstrates how to create an instance of the OramaClient class to interact with the Orama Cloud API. The client is configured with an endpoint URL and an API key.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst client = new OramaClient({\n  endpoint: \"YOUR_ENDPOINT_URL\",\n  api_key: \"YOUR_PUBLIC_API_KEY\",\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Chat Completion with Single Response Variable\nDESCRIPTION: Example of using the Orama Secure Proxy to execute chat completion requests with OpenAI models and store the entire response in a single variable, allowing secure API access from browsers.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/orama-ai/orama-secure-proxy.mdx#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { OramaProxy } from '@oramacloud/secure-proxy'\n\nconst proxy = new OramaProxy({\n  api_key: '<YOUR API KEY>'\n})\n\nconst chatParams = {\n  model 'openai/gpt-4',\n  messages: [{ role: 'user', content: 'Who is Michael Scott?' }]\n}\n\nconst response = await proxy.chat(chatParams)\nconsole.log(response)\n\n// \"Michael Scott is a fictional character from the television show \"The Office\" (US version) ...\"\n```\n\n----------------------------------------\n\nTITLE: Boosting Multiple Fields in Orama Search\nDESCRIPTION: This example shows how to boost multiple fields with different values when searching. The 'title' field is boosted by 2 and the 'director' field by 1.5, making matches in these fields more important than others when searching for 'Harry'.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/fields-boosting.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Harry\",\n  properties: \"*\",\n  boost: {\n    title: 2,\n    director: 1.5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring userContext as String in JavaScript\nDESCRIPTION: This snippet demonstrates how to configure the userContext as a string when creating an answer session. This parameter helps provide a more personalized experience by describing the user.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst answerSession = orama.createAnswerSession({\n  userContext: 'The user is called John Doe and he loves rock music. He has been a customer for 5 years.'\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search with Filtering\nDESCRIPTION: Shows how to perform a full-text search query with additional filtering criteria using the search method of the OramaClient instance.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/javascript-sdk.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst client = new OramaClient({\n  endpoint: \"YOUR_ENDPOINT_URL\",\n  api_key: \"YOUR_PUBLIC_API_KEY\",\n});\n\nconst results = await client.search({\n  term: \"red shoes\",\n  where: {\n    price: {\n      gt: 99.99,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Simplified Vector Search with Orama Plugins\nDESCRIPTION: Shows how to perform vector search using Orama plugins (secure proxy or embeddings) which automatically convert text queries to vectors, eliminating the need to provide explicit vector configurations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/vector-search.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  mode: \"vector\",\n  term: \"Videogame for little kids with a passion about ice cream\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Orama Plugin for Automatic Embeddings Generation\nDESCRIPTION: Demonstrates how to use the Orama embeddings plugin to automatically generate and store embeddings at insert time and use them for vector search. Requires TensorFlow.js as a dependency.\nSOURCE: https://github.com/oramasearch/orama/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { pluginEmbeddings } from '@orama/plugin-embeddings'\nimport '@tensorflow/tfjs-node' // Or any other appropriate TensorflowJS backend, like @tensorflow/tfjs-backend-webgl\n\nconst plugin = await pluginEmbeddings({\n  embeddings: {\n    // Schema property used to store generated embeddings\n    defaultProperty: 'embeddings',\n    onInsert: {\n      // Generate embeddings at insert-time\n      generate: true,\n      // properties to use for generating embeddings at insert time.\n      // Will be concatenated to generate a unique embedding.\n      properties: ['description'],\n      verbose: true,\n    }\n  }\n})\n\nconst db = create({\n  schema: {\n    description: 'string',\n    // Orama generates 512-dimensions vectors.\n    // When using @orama/plugin-embeddings, set the property where you want to store embeddings as `vector[512]`.\n    embeddings: 'vector[512]'\n  },\n  plugins: [plugin]\n})\n\n// Orama will generate and store embeddings at insert-time!\nawait insert(db, { description: 'Classroom Headphones Bulk 5 Pack, Student On Ear Color Varieties' })\nawait insert(db, { description: 'Kids Wired Headphones for School Students K-12' })\nawait insert(db, { description: 'Kids Headphones Bulk 5-Pack for K-12 School' })\nawait insert(db, { description: 'Bose QuietComfort Bluetooth Headphones' })\n\n// Orama will also generate and use embeddings at search time when search mode is set to \"vector\" or \"hybrid\"!\nconst searchResults = await search(db, {\n  term: 'Headphones for 12th grade students',\n  mode: 'vector',\n  similarity: 0.75,\n})\n```\n\n----------------------------------------\n\nTITLE: Using Orama Switch with Orama OSS in JavaScript\nDESCRIPTION: Example of how to use Orama Switch to interact with Orama OSS. It shows importing necessary modules, creating a database with a schema, and performing a search query with the same interface as Orama Cloud.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/switch/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch } from '@orama/switch'\nimport { create } from '@orama/orama'\n\nconst db = await create({\n  schema: {\n    productName: 'string',\n    price: 'number'\n  }\n})\n\nconst orama = new Switch(client)\n\nconst results = await orama.search({\n  term: 'noise cancelling headphones',\n  where: {\n    price: {\n      lte: 99.99\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search with Generated Embeddings\nDESCRIPTION: Example showing how to perform a vector search using automatically generated embeddings from search terms.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-embeddings/README.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nawait search(db, {\n  term: 'Headphones for 12th grade students',\n  mode: 'vector'\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Properties in Orama Schema\nDESCRIPTION: This example shows how to define nested properties in an Orama schema. Nested properties are defined as standard JavaScript objects with their respective property types.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/working-with-indexes/searchable-schema.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"string\",\n    \"plot\": \"string\",\n    \"cast\": {\n        \"director\": \"string\",\n        \"actors\": \"string[]\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Search with Kotlin SDK\nDESCRIPTION: Demonstrates hybrid search implementation using the Orama Kotlin client. Includes data class definition and search parameter configuration with price filtering.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/hybrid-search.mdx#2025-04-11_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\nimport com.orama.model.search.*\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class MyDoc (\n    val title: String,\n    val category: String,\n    val path: String,\n    val content: String,\n    val section: String\n)\n\nval client = OramaClient(\n    endpoint = \"\",\n    apiKey = \"\"\n)\n\nval searchParams = SearchParams.builder(\n      term = \"Super Mario videogame\",\n      mode = Mode.HYBRID\n  )\n  .where(listOf(\n      Condition(\"price\", ConditionType.LessThan(19.99))\n  ))\n  .build()\n\nval results = client.search(searchParams, MyDoc.serializer())\n```\n\n----------------------------------------\n\nTITLE: Basic Property Sorting in Orama\nDESCRIPTION: This snippet demonstrates how to create an Orama database with a schema and perform a search with sorting by a specific property. The schema defines string, number, and boolean properties, including nested ones.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/sorting.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    title: \"string\",\n    year: \"number\",\n    inPromotion: \"boolean\",\n    meta: {\n      tag: \"string\",\n      rating: \"number\",\n      favorite: \"boolean\",\n    },\n  },\n});\nconst results = search(db, {\n  term: \"prestige\",\n  sortBy: {\n    property: \"title\", // or 'year', 'inPromotion'\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Faceted Search in Swift\nDESCRIPTION: This Swift code shows how to use the OramaCloudClient to perform a faceted search. It demonstrates setting up the client, configuring search parameters, and specifying facets for different field types.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_16\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nstruct MyDoc: Codable {\n  let title: String\n  let description: String\n}\n\nlet clientParams = OramaClientParams(endpoint: \"<Your Orama Cloud Endpoint>\", apiKey: \"<Your Orama Cloud API Key>\")\nlet client = OramaClient(params: clientParams)\n\nlet searchParams = ClientSearchParams.builder(\n    term: \"Movie about cars and racing\",\n    mode: .hybrid\n  )\n  .properties([\"description\"]) // optional\n  .facets([\n    \"category.primary\": .string(limit: 3, order: .desc),\n    \"category.secondary\": .string(limit: 2, order: .desc),\n    \"rating\": .number(ranges: [\n      ClientSearchParams.Facet.NumberRange(from: 0, to: 3),\n      ClientSearchParams.Facet.NumberRange(from: 3, to: 7),\n      ClientSearchParams.Facet.NumberRange(from: 7, to: 10),\n    ]),\n    \"isFavorite\": .boolean(isTrue: true, isFalse: true),\n  ])\n  .build()\n\nlet searchResults: SearchResults<MyDoc> = try await client.search(query: searchParams)\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Button in React\nDESCRIPTION: Example of how to use the OramaSearchButton component in a React application. The example demonstrates setting size, color scheme, and custom theme configuration with a custom background color.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/search-button.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OramaSearchButton } from '@orama/react-components';\n\n<OramaSearchButton\n  size=\"large\"\n  colorScheme=\"dark\"\n  themeConfig={{\n    themeConfig: {\n      colors: {\n        dark: {\n          '--background-color-primary': '#231102'\n        },\n      },\n    },\n  }}\n>\n  Search something...\n</OramaSearchButton>\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Plugin Embeddings\nDESCRIPTION: Example showing how to initialize and configure the Orama Plugin Embeddings with a database schema. Demonstrates setting up automatic embedding generation for specified properties.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-embeddings/README.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { pluginEmbeddings } from '@orama/plugin-embeddings'\nimport '@tensorflow/tfjs-node' // Or any other appropriate TensorflowJS backend\n\nconst plugin = await pluginEmbeddings({\n  embeddings: {\n    defaultProperty: 'embeddings', // Property used to store generated embeddings\n    onInsert: {\n      generate: true, // Generate embeddings at insert-time\n      properties: ['description'], // properties to use for generating embeddings at insert time\n      verbose: true,\n    }\n  }\n})\n\nconst db = await create({\n  schema: {\n    description: 'string',\n    embeddings: 'vector[512]' // Orama generates 512-dimensions vectors\n  },\n  plugins: [plugin]\n})\n```\n\n----------------------------------------\n\nTITLE: Enriching Document Types in Orama with TypeScript\nDESCRIPTION: This example shows how to enrich the type of documents in Orama by defining an interface that includes non-indexed properties, allowing for proper typing of search results.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/typescript.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst movieSchema = {\n  title: \"string\",\n} as const;\nconst db = create({ schema: movieSchema });\n\ninterface Movie {\n  title: string;\n  year: number;\n}\n\n//             this is important ---v\nconst r = search<typeof db, Movie>(db, { term: \"\" });\nconst title = r.hits[0].document.title; // well typed!\nconst year = r.hits[0].document.year; // well typed!\n```\n\n----------------------------------------\n\nTITLE: Sorting by Nested Properties in Orama\nDESCRIPTION: This example shows how to sort search results by a nested property using dot notation. In this case, it's sorting by the 'rating' property inside the 'meta' object.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/sorting.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"prestige\",\n  sortBy: {\n    property: \"meta.rating\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Answer Session in Swift with Orama Cloud SDK\nDESCRIPTION: This snippet shows how to create an answer session with the Orama Swift SDK. It sets up the client with endpoint and API key parameters, and configures an answer session with custom settings.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nlet clientParams = OramaClientParams(endpoint: \"YOUR_ENDPOINT_URL\", apiKey: \"YOUR_PUBLIC_API_KEY\")\nlet orama = OramaClient(params: clientParams)\n\nlet answerParams = AnswerParams<E2EDoc>(\n  userContext: \"The user is a very skilled programmer but has never used Orama before.\",\n  inferenceType: .documentation,\n  initialMessages: [],\n  oramaClient: oramaClient,\n)\nanswerSession = AnswerSession(params: answerParams)\n```\n\n----------------------------------------\n\nTITLE: Multi-Property Grouping Example\nDESCRIPTION: Demonstrates how to group results based on multiple properties simultaneously.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/grouping.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"red t-shirt\",\n  groupBy: {\n    properties: [\"design\", \"rank\", \"isPromoted\"], // group on the combination of the values\n  },\n  sortBy: {\n    property: \"id\",\n    order: \"ASC\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Faceted Search in Orama\nDESCRIPTION: Shows how to configure faceted search with different facet types including range-based facets for numbers, string facets with limits, and boolean facets.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/facets.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"Movie about cars and racing\",\n  properties: [\"description\"],\n  facets: {\n    \"categories.primary\": {\n      limit: 3,\n      order: \"DESC\",\n    },\n    \"categories.secondary\": {\n      limit: 2,\n      order: \"DESC\",\n    },\n    rating: {\n      ranges: [\n        { from: 0, to: 3 },\n        { from: 3, to: 7 },\n        { from: 7, to: 10 },\n      ],\n    },\n    isFavorite: {\n      true: true,\n      false: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Faceted Search in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to set up faceted search using the Orama client. It shows the configuration of search parameters and facets for various field types.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_17\n\nLANGUAGE: kotlin\nCODE:\n```\nval searchParams = SearchParams.builder(\n        term = \"Movie about cars and racing\",\n        mode = Mode.HYBRID,\n    )\n    .properties(listOf(\"description\"))\n    .facets(\n        mapOf(\n            \"category.primary\" to Facet.StringFacet(limit = 3, order = Order.DESC),\n            \"category.secondary\" to Facet.StringFacet(limit = 2, order = Order.DESC),\n            \"rating\" to Facet.NumberFacet(\n                ranges = listOf(\n                    Facet.NumberRange(from = 0, to = 3),\n                    Facet.NumberRange(from = 3, to = 7),\n                    Facet.NumberRange(from = 7, to = 10)\n                )\n            ),\n            \"isFavorite\" to Facet.BooleanFacet(isTrue = true, isFalse = true)\n        )\n    )\n    .build()\n\nval results = client.search(searchParams, MyDoc.serializer())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Orama Cloud Provider in React Application\nDESCRIPTION: Demonstrates how to set up the OramaCloud provider component at the top of a React component tree, which enables the use of search functionality throughout the application.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/react-sdk.mdx#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App.jsx\";\nimport { OramaCloud } from \"@oramacloud/react-client\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n  <OramaCloud endpoint=\"<your-endpoint>\" apiKey=\"<your-apikey>\">\n    <App />\n  </OramaCloud>\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering by Bounding Polygon in Orama Geosearch\nDESCRIPTION: Demonstrates how to perform a polygon-based geosearch that finds documents located within a defined polygon area. The example searches for documents containing 'Duomo' that fall within the specified geographical boundary.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/geosearch.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from '@orama/orama'\n\nconst db = create({ ... })\n\ninsert(db, { ... })\ninsert(db, { ... })\ninsert(db, { ... })\n\nconst searchResult = search(db, {\n  term: 'Duomo',\n  where: {\n    location: {            // The property we want to filter by\n      polygon: {           // The filter we want to apply (in that case: \"polygon\")\n        coordinates: [     // The polygon coordinate\n          { lat: 45.46472, lon: 9.1886  },\n          { lat: 45.46352, lon: 9.19177 },\n          { lat: 45.46278, lon: 9.19176 },\n          { lat: 45.4628,  lon: 9.18857 },\n          { lat: 45.46472, lon: 9.1886  },\n        ],\n        inside: true      // Whether we want to return the documents inside or outside the polygon. The default is \"true\"\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Search with PHP SDK\nDESCRIPTION: Shows how to implement hybrid search using the Orama PHP client. Includes client initialization and query building with price filtering.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/hybrid-search.mdx#2025-04-11_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Client;\nuse OramaCloud\\Client\\Query;\nuse OramaCloud\\Client\\QueryParams\\WhereOperator;\nuse OramaCloud\\Client\\QueryParams\\SortByOrder;\n\n$client = new Client([\n  'api_key' => '<Your Orama Cloud API Key>',\n  'endpoint' => '<Your Orama Cloud Endpoint>'\n]);\n\n$query = (new Query())\n  ->term('Super Mario videogame')\n  ->mode('hybrid')\n  ->where('price', WhereOperator::LT, 19.99);\n\n$results = $client->search($query);\n```\n\n----------------------------------------\n\nTITLE: Inserting Multiple Documents into Orama Database\nDESCRIPTION: This snippet demonstrates how to insert multiple documents into the Orama database using the insertMultiple function. It's recommended for handling a large number of records to avoid blocking the event loop.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/insert.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst docs = [\n  {\n    title: \"The prestige\",\n    director: \"Christopher Nolan\",\n    plot: \"Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.\",\n    year: 2006,\n    isFavorite: true,\n  },\n  {\n    title: \"Big Fish\",\n    director: \"Tim Burton\",\n    plot: \"Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.\",\n    year: 2004,\n    isFavorite: true,\n  },\n  {\n    title: \"Harry Potter and the Philosopher's Stone\",\n    director: \"Chris Columbus\",\n    plot: \"Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.\",\n    year: 2001,\n    isFavorite: false,\n  },\n];\n\ninsertMultiple(movieDB, docs);\n```\n\n----------------------------------------\n\nTITLE: Performing Faceted Search in JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to perform a faceted search using the Orama client. It includes facet configurations for different field types and specifies search parameters.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await client.search({\n  term: \"Movie about cars and racing\",\n  mode: \"hybrid\",\n  properties: [\"description\"],\n  facets: {\n    \"categories.primary\": {\n      limit: 3,\n      order: \"DESC\",\n    },\n    \"categories.secondary\": {\n      limit: 2,\n      order: \"DESC\",\n    },\n    rating: {\n      ranges: [\n        { from: 0, to: 3 },\n        { from: 3, to: 7 },\n        { from: 7, to: 10 },\n      ],\n    },\n    isFavorite: {\n      true: true,\n      false: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Array Field Facets Example\nDESCRIPTION: Demonstrates how Orama handles facets for array fields by treating each array element as a separate facet value.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/facets.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    name: \"string[]\",\n  },\n});\ninsert(db, {\n  name: [\"Albus\", \"Percival Wulfric Brian\"],\n});\n\nconst results = search(db, {\n  facets: {\n    name: {},\n  },\n});\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"count\": 2,\n  \"values\": {\n    \"Albus\": 1,\n    \"Percival Wulfric Brian\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Orama Search Box in React\nDESCRIPTION: Basic example showing how to implement the OramaSearchBox component with custom placeholder, index configuration, and result mapping. The component requires either an index configuration with endpoint and API key or a clientInstance.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/search-box.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { OramaSearchBox } from '@orama/react-components';\n\n<OramaSearchBox\n  placeholder=\"Search something...\"\n  index={{\n    endpoint: 'https://your-index-endpoint-url',\n    api_key: 'YOUR_PUBLIC_API_KEY'\n  }}\n  resultMap={{\n    title: 'name',\n    description: 'content',\n    section: 'category',\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Match Highlight Plugin in Orama\nDESCRIPTION: Example showing how to create an Orama database instance with the match highlight plugin, insert documents, and perform highlighted searches.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-match-highlight.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\nimport {\n  afterInsert as highlightAfterInsert,\n  searchWithHighlight,\n} from \"@orama/plugin-match-highlight\";\n\n// Create a new Orama instance\nconst db = create({\n  schema: {\n    text: \"string\",\n  },\n  plugins: [\n    // Register the hook\n    {\n      name: \"highlight\",\n      afterInsert: highlightAfterInsert,\n    },\n  ],\n});\n\n// Insert a document\ninsert(db, { text: \"hello world\" });\n\n// Use the plugin's searchWithHighlight function to query the database\nconst results = searchWithHighlight(db, { term: \"hello\" });\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating Documents in Orama Cloud Index (PHP)\nDESCRIPTION: Shows how to insert and update documents in an Orama Cloud index using the PHP SDK. It demonstrates creating an IndexManager instance and performing insert and update operations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Manager\\IndexManager;\n$indexManager = new IndexManager(\"my-index-id\", PRIVATE_API_KEY);\n\n$indexManager->insert([\n  [\"id\" => \"3\", \"name\" => \"Rick Sanchez\", \"age\" => 80]\n]);\n$indexManager->update([\n  [\"id\" => \"3\", \"name\" => \"Rick Doe\", \"age\" => 75]\n]);\n```\n\n----------------------------------------\n\nTITLE: Vector Search Implementation in PHP\nDESCRIPTION: Shows how to perform vector search operations using PHP with the Orama Cloud client, including query building and condition specification.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/vector-search.mdx#2025-04-11_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Client;\nuse OramaCloud\\Client\\Query;\nuse OramaCloud\\Client\\QueryParams\\WhereOperator;\nuse OramaCloud\\Client\\QueryParams\\SortByOrder;\n\n$client = new Client([\n  'api_key' => '<Your Orama Cloud API Key>',\n  'endpoint' => '<Your Orama Cloud Endpoint>'\n]);\n\n$query = (new Query())\n  ->term('Super Mario videogame')\n  ->mode('vector')\n  ->where('price', WhereOperator::LT, 19.99);\n\n$results = $client->search($query);\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents with Geopoint Data in Orama\nDESCRIPTION: Demonstrates how to create a database and insert multiple documents containing geopoint location data. This example inserts three landmarks in Milan with their respective coordinates.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/geosearch.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    name: \"string\",\n    location: \"geopoint\",\n  },\n});\n\ninsert(db, {\n  name: \"Duomo di Milano\",\n  location: { lat: 45.46409, lon: 9.19192 },\n});\ninsert(db, {\n  name: \"Piazza Duomo\",\n  location: { lat: 45.46416, lon: 9.18945 },\n});\ninsert(db, {\n  name: \"Piazzetta Reale\",\n  location: { lat: 45.46339, lon: 9.19092 },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Italian Stemming in Orama\nDESCRIPTION: Example of creating an Orama database with Italian stemming enabled. This code imports the Italian stemmer and language configuration from @orama/stemmers package and applies it during database creation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/text-analysis/stemming.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { stemmer, language } from \"@orama/stemmers/italian\";\n\nconst db = create({\n  schema: {\n    author: \"string\",\n    quote: \"string\",\n  },\n  components: {\n    tokenizer: {\n      stemming: true,\n      language,\n      stemmer,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Limited Results Per Group Example\nDESCRIPTION: Shows how to limit the number of results returned per group using maxResult parameter.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/grouping.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"t-shirt\",\n  groupBy: {\n    properties: [\"design\"],\n    maxResult: 1, // for every group, how many results we want\n  },\n  sortBy: {\n    property: \"rank\",\n    order: \"DESC\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Boosting a Single Field in Orama Search\nDESCRIPTION: This example demonstrates how to boost the importance of the 'title' field by a factor of 2 when searching for 'Harry'. This means matches in the title field will be considered twice as important as matches in other fields.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/fields-boosting.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Harry\",\n  properties: \"*\",\n  boost: {\n    title: 2,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Search with Tolerance in Orama\nDESCRIPTION: Performs a search for 'Cris' in the director field with a typo tolerance of 1. This example shows how to search with specific properties and handle potential misspellings.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Cris\",\n  properties: [\"director\"],\n  tolerance: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Orama Database Creation with Custom Component\nDESCRIPTION: Demonstrates creating an Orama database with a custom afterInsert component that logs when documents are inserted.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n    plot: \"string\",\n    year: \"number\",\n    isFavorite: \"boolean\",\n  },\n  components: {\n    afterInsert() {\n      console.log(\"INSERTED\");\n    },\n  },\n});\n\ninsert(movieDB, {\n  title: \"Harry Potter and the Philosopher's Stone\",\n  director: \"Chris Columbus\",\n  plot: \"Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.\",\n  year: 2001,\n  isFavorite: false,\n});\n\nconst results = search(movieDB, { term: \"Harry\" });\nconsole.log(results.count);\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating Documents in Orama Cloud Index (Swift)\nDESCRIPTION: Shows how to insert and update documents in an Orama Cloud index using the Swift SDK. It includes creating a CloudManager, defining a document structure, and performing insert and update operations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\n// This is an example document. It should reflect your index schema.\nstruct OramaDoc: Codable {\n  let id: String\n  let name: String\n  let age: Int\n}\n\nlet cloudManager = CloudManager(apiKey: \"YOUR_API_KEY\")\nlet indexManager = cloudManager.index<OramaDoc>(\"my-index-id\")\n\nawait try indexManager.insert([OramaDoc(id: \"3\", name: \"Rick Sanchez\", age: 80)])\nawait try indexManager.update([OramaDoc(id: \"3\", name: \"Rick Doe\", age: 75)])\n```\n\n----------------------------------------\n\nTITLE: Typo-Tolerant Search in Orama\nDESCRIPTION: Demonstrates a search with typo tolerance using the Levenshtein distance algorithm. This search will find 'Chris' even when the term is misspelled as 'Cris'.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Cris\",\n  properties: [\"director\"],\n  tolerance: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Answer Session in Kotlin with Orama Cloud SDK\nDESCRIPTION: This snippet demonstrates how to create an answer session with the Orama Kotlin SDK. It includes defining a serializable document class, initializing the client, and creating an answer session with custom parameters.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\n\n@Serializable\ndata class MyDoc (\n    val title: String,\n    val category: String,\n    val path: String,\n    val content: String,\n    val section: String\n)\n\nval client = OramaClient(\n  apiKey = \"YOUR_PUBLIC_API_KEY\",\n  endpoint = \"YOUR_ENDPOINT_URL\"\n)\n\nval answerParams = AnswerParams(\n  oramaClient = client,\n  serializer = MyDoc.serializer(),\n  userContext = \"The user is a very skilled programmer but has never used Orama before.\"\n)\n\nval answerSession = AnswerSession(answerParams)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Orama with Chinese Language Support\nDESCRIPTION: This code snippet demonstrates how to create an Orama database with Chinese language support, insert Chinese city and university names, and perform a search query. It uses a custom Mandarin tokenizer and stopwords from the @orama/tokenizers and @orama/stopwords packages.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/using-chinese-with-orama.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from \"@orama/orama\";\nimport { createTokenizer } from '@orama/tokenizers/mandarin'\nimport { stopwords as mandarinStopwords } from \"@orama/stopwords/mandarin\";\n\nconst db = create({\n  schema: {\n    name: \"string\",\n  },\n  components: {\n    tokenizer: createTokenizer({\n      stopWords: mandarinStopwords,\n    }),\n  },\n});\n\ninsert(db, { name: \"åäº¬\" }); // Beijing\ninsert(db, { name: \"ä¸æµ·\" }); // Shanghai\ninsert(db, { name: \"å¹¿å·\" }); // Guangzhou\ninsert(db, { name: \"æ·±å³\" }); // Shenzhen\ninsert(db, { name: \"æé½\" }); // Chengdu\ninsert(db, { name: \"æ­å·\" }); // Hangzhou\ninsert(db, { name: \"åäº¬\" }); // Nanjing\ninsert(db, { name: \"åäº¬å¤§å­¦\" }); // Peking University\ninsert(db, { name: \"ä¸æµ·äº¤éå¤§å­¦\" }); // Shanghai Jiao Tong University\ninsert(db, { name: \"å¹¿å·ä¸­å»è¯å¤§å­¦\" }); // Guangzhou University of Chinese Medicine\n\nconst results = search(db, {\n  term: \"å¹¿å·\",\n  threshold: 0,\n});\n\nconsole.log(results);\n\n// {\n//   \"elapsed\": {\n//     \"raw\": 89554625,\n//     \"formatted\": \"89ms\"\n//   },\n//   \"hits\": [\n//     {\n//       \"id\": \"36666208-3\",\n//       \"score\": 4.210224897276653,\n//       \"document\": {\n//         \"name\": \"å¹¿å·\"\n//       }\n//     },\n//     {\n//       \"id\": \"36666208-10\",\n//       \"score\": 1.9335268122510698,\n//       \"document\": {\n//         \"name\": \"å¹¿å·ä¸­å»è¯å¤§å­¦\"\n//       }\n//     }\n//   ],\n//   \"count\": 2\n// }\n```\n\n----------------------------------------\n\nTITLE: Using Orama Switch with Orama Cloud in JavaScript\nDESCRIPTION: Example of how to use Orama Switch to interact with Orama Cloud. It demonstrates importing necessary modules, initializing the client, and performing a search query with specific criteria.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/switch/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Switch } from '@orama/switch'\nimport { OramaClient } from '@oramacloud/client'\n\nconst client = new OramaClient({\n  endpoint: '<Your Orama Cloud Endpoint>',\n  api_key: '<Your Orama Cloud API Key>',\n})\n\nconst orama = new Switch(client)\n\nconst results = await orama.search({\n  term: 'noise cancelling headphones',\n  where: {\n    price: {\n      lte: 99.99\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search in Vue Using Orama\nDESCRIPTION: Illustrates how to use the useSearch composable from @oramacloud/vue-client to perform a full-text search query in a Vue component. The example shows how to display search results in the template.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/vue-sdk.mdx#2025-04-11_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { client } from \"./orama\";\nimport { useSearch } from \"@oramacloud/vue-client\";\n\nconst { results } = useSearch({\n  client,\n  term: \"guitar\",\n});\n</script>\n\n<template>\n  <div v-for=\"result in results?.hits\">\n    <pre>{{ result }}</pre>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript SDK with Package Managers\nDESCRIPTION: Commands for installing the Orama Cloud JavaScript SDK using different package managers (npm, yarn, pnpm, bun).\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/official-sdk.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @oramacloud/client\n```\n\n----------------------------------------\n\nTITLE: Using threshold set to 0 for exact matching\nDESCRIPTION: This example shows how setting threshold to 0 restricts results to only documents containing all the search terms, providing more precise matching.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/threshold.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"slim fit\",\n  threshold: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Asking Questions with Kotlin SDK\nDESCRIPTION: Example of asking a question with the Orama Kotlin SDK using the ask() method. It takes AskParams with the query to be processed.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_25\n\nLANGUAGE: kotlin\nCODE:\n```\nval answer = answerSession.ask(AskParams(\n  query = \"What is Orama?\"\n))\n```\n\n----------------------------------------\n\nTITLE: Handling Answer Aborted Events with JavaScript SDK\nDESCRIPTION: Code demonstrating how to set up an event listener for when an answer session is aborted in the JavaScript SDK. It uses the onAnswerAborted event in the createAnswerSession configuration.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst answerSession = orama.createAnswerSession({\n  events: {\n    onAnswerAborted: (aborted) => {\n      alert(\"The user aborted the answer session!\");\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Search Using Orama\nDESCRIPTION: Performs a simple search on the movie database for documents containing the term 'Harry'. This demonstrates the basic search syntax used in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Harry\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Plugin in Astro Configuration\nDESCRIPTION: Configuration setup for the Orama plugin in astro.config.mjs, demonstrating how to define database configurations with path matching, language settings, and content selectors.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-astro.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport orama from \"@orama/plugin-astro\";\n\n// https://astro.build/config\nexport default defineConfig({\n  integrations: [\n    orama({\n      // We can generate more than one DB, with different configurations\n      mydb: {\n        // Required. Only pages matching this path regex will be indexed\n        pathMatcher: /blog\\/[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}\\/.+$/,\n\n        // Optional. 'english' by default\n        language: \"spanish\",\n\n        // Optional. ['body'] by default. Use it to constraint what is used to\n        // index a page.\n        contentSelectors: [\"h1\", \"main\"],\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents with Missing Fields in Orama\nDESCRIPTION: This example shows how Orama handles document insertion with missing fields and extra fields. It demonstrates that missing fields are allowed, while extra fields are ignored during indexing.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/insert.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    year: \"number\",\n  },\n});\n\ninsert(movieDB, {\n  title: \"The prestige\",\n  // `year` field is missing but it's ok\n  // year: 2006,\n  // Extra fields `director` and `isFavorite` will not be indexed\n  director: \"Christopher Nolan\",\n  isFavorite: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Search with Kotlin SDK\nDESCRIPTION: Example of performing a search operation using the Kotlin SDK with serializable document type and search conditions.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/official-sdk.mdx#2025-04-11_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\nimport com.orama.model.search.*\nimport kotlinx.serialization.Serializable\n\n// Keep in mind that search is a suspended function, \n// so you need to call it from a coroutine ;)\n\n@Serializable\ndata class MyDoc (\n    val title: String,\n    val category: String,\n    val path: String,\n    val content: String,\n    val section: String\n)\n\nval searchParams = SearchParams.builder(\n        term = \"red shoes\",\n        mode = Mode.FULLTEXT\n    )\n    .where(listOf(\n        Condition(\"price\", ConditionType.GreaterThan(99.99))\n    ))\n    .build()\n\nval results = client.search(searchParams, MyDoc.serializer())\n```\n\n----------------------------------------\n\nTITLE: Creating and Populating an Orama Database with Movie Data\nDESCRIPTION: This snippet demonstrates how to create an Orama database with a movie schema and insert multiple documents. It imports necessary functions, defines a schema with string, number, and boolean properties, and inserts three movie records.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/remove.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, remove, search } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n    plot: \"string\",\n    year: \"number\",\n    isFavorite: \"boolean\",\n  },\n});\n\nconst thePrestigeId = insert(movieDB, {\n  title: \"The prestige\",\n  director: \"Christopher Nolan\",\n  plot: \"Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.\",\n  year: 2006,\n  isFavorite: true,\n});\n\nconst bigFishId = insert(movieDB, {\n  title: \"Big Fish\",\n  director: \"Tim Burton\",\n  plot: \"Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.\",\n  year: 2004,\n  isFavorite: true,\n});\n\nconst harryPotterId = insert(movieDB, {\n  title: \"Harry Potter and the Philosopher's Stone\",\n  director: \"Chris Columbus\",\n  plot: \"Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.\",\n  year: 2001,\n  isFavorite: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Adding User Data to Answer Session (String format)\nDESCRIPTION: Demonstrates providing user data as a string when making an answer request. This format allows for more flexible, free-form context information.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/providing-additional-knowledge.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst answer = await answerSession.ask({\n  term: \"What is Orama?\",\n  userData: \"The user is a beginner in programming\"\n});\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet answer = try await answerSession.ask(params: AnswerParams.AskParams(\n  query: \"What is Orama?\",\n  userData: \"The user is a beginner in programming\",\n  related: nil\n))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nprint(\"coming soon\")\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Operations with JavaScript SDK\nDESCRIPTION: This example demonstrates how to check for pending operations in an Orama Cloud index using the JavaScript SDK. It initializes a CloudManager with an API key, references an index by ID, and then uses the hasPendingOperations method to check for pending operations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CloudManager } from \"@oramacloud/client\"\n\nconst oramaCloudManager = new CloudManager({\n  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,\n})\n\nconst myIndex = oramaCloudManager.index(\"my-index-id\")\n\nconst hasPendingOperations = await myIndex.hasPendingOperations()\nconsole.log(hasPendingOperations) // true or false\n```\n\n----------------------------------------\n\nTITLE: Distinct Search with Sorting in Orama\nDESCRIPTION: Performs a search that returns only distinct values for the 'type' property, sorted by the 'rank' property in descending order. This is useful for getting unique categories or types within search results.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  distinctOn: \"type\",\n  sortBy: {\n    property: \"rank\",\n    order: \"DESC\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering with Boolean Properties in Orama\nDESCRIPTION: This example shows how to filter search results using boolean properties. It returns documents where the specified boolean property is set to true.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/filters.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"prestige\",\n  where: {\n    \"meta.favorite\": true,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Italian Stemming in Orama Database Creation\nDESCRIPTION: This code snippet demonstrates how to create an Orama database with Italian stemming enabled. It imports the necessary stemmer and language modules from the Italian stemmer package and configures the tokenizer to use stemming.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/stemmers/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { stemmer, language } from '@orama/stemmers/italian'\n\nconst db = create({\n  schema: {\n  components: {\n    tokenizer: {\n      stemming: true,\n      stemmer,\n      language\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Radius-Based Geosearch in Orama\nDESCRIPTION: Shows how to search for documents within a specified radius from a central geopoint. This example filters results that are within 1000 meters from a specific location and contain 'Duomo' in their name property.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/geosearch.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from '@orama/orama'\n\nconst db = create({ ... })\n\ninsert(db, { ... })\ninsert(db, { ... })\ninsert(db, { ... })\n\nconst searchResult = search(db, {\n  term: 'Duomo',\n  where: {\n    location: {           // The property we want to filter by\n      radius: {           // The filter we want to apply (in that case: \"radius\")\n        coordinates: {    // The central coordinate\n          lat: 45.4648,\n          lon: 9.18998\n        },\n        unit: 'm',        // The unit of measurement. The default is \"m\" (meters)\n        value: 1000,      // The radius length. In that case, 1km\n        inside: true      // Whether we want to return the documents inside or outside the radius. The default is \"true\"\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search with Orama Cloud Client in Swift\nDESCRIPTION: This snippet shows how to use the OramaCloudClient in Swift to perform a full-text search query. It includes setting up the client, defining search parameters, and executing the search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nstruct MyDoc: Codable {\n  let title: String\n  let description: String\n}\n\nlet clientParams = OramaClientParams(endpoint: \"<Your Orama Cloud Endpoint>\", apiKey: \"<Your Orama Cloud API Key>\")\nlet client = OramaClient(params: clientParams)\n\nlet searchParams = ClientSearchParams.builder(\n    term: \"red shoes\",\n    mode: .fulltext // optional, default is .fulltext but can also be .vector or .hybrid\n  )\n  .limit(10) // optional\n  .offset(0) // optional\n  .returning([\"title\", \"description\"]) // optional\n  .build()\n\nlet searchResults: SearchResults<MyDoc> = try await client.search(query: searchParams)\n```\n\n----------------------------------------\n\nTITLE: Performing Search with PHP SDK\nDESCRIPTION: Example of performing a search operation using the PHP SDK with query parameters and conditions.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/official-sdk.mdx#2025-04-11_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Client;\nuse OramaCloud\\Client\\Query;\nuse OramaCloud\\Client\\QueryParams\\WhereOperator;\nuse OramaCloud\\Client\\QueryParams\\SortByOrder;\n\n$client = new Client([\n  'endpoint' => '<Your Orama Cloud Endpoint>',\n  'api_key' => '<Your Orama Cloud API Key>'\n]);\n\n$query = (new Query())\n  ->term('red shoes')\n  ->mode('fulltext') // 'fulltext' is optional, but can also be \"vector\" or \"hybrid\"\n  ->where('price', WhereOperator::GT, 99.99);\n\n$results = $client->search($query);\n```\n\n----------------------------------------\n\nTITLE: Restoring an Orama Database from File (Server-side)\nDESCRIPTION: Demonstrates how to restore an Orama database from a file on disk using the restoreFromFile function. This method is only available in server environments with a Node.js-compatible file system.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-data-persistence.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { restoreFromFile } from \"@orama/plugin-data-persistence/server\";\nconst db = await restoreFromFile(\"binary\", filePath);\n```\n\n----------------------------------------\n\nTITLE: Inserting a Snapshot with Swift SDK\nDESCRIPTION: Swift example demonstrating how to use the Orama Cloud SDK to create a snapshot of an index. It defines a document structure that matches the index schema and uploads documents in a single operation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\n// This is an example document. It should reflect your index schema.\nstruct OramaDoc: Codable {\n  let id: String\n  let name: String\n  let age: Int\n}\n\nlet cloudManager = CloudManager(apiKey: \"YOUR_API_KEY\")\nlet indexManager = cloudManager.index<OramaDoc>(\"my-index-id\")\n\nawait try indexManager.snapshot([\n  OramaDoc(id: \"1\", name: \"John Doe\", age: 30),\n  OramaDoc(id: \"2\", name: \"Jane Doe\", age: 25)\n])\n```\n\n----------------------------------------\n\nTITLE: Aborting Answer Sessions with JavaScript SDK\nDESCRIPTION: Example showing how to abort an ongoing answer request using the abortAnswer() method in the JavaScript SDK. This can be useful when a user cancels an answer request.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nanswerSession.abortAnswer();\n```\n\n----------------------------------------\n\nTITLE: Property-Specific Search in Orama\nDESCRIPTION: Demonstrates how to search for the term 'Chris' specifically in the director property. This allows for more targeted searches by restricting which fields are considered.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Chris\",\n  properties: [\"director\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating Hooks to Plugins in Orama\nDESCRIPTION: Demonstrates how to migrate from the old hooks system to the new plugin system in Orama. Shows the conversion of a beforeInsert hook into a plugin format while maintaining backward compatibility.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/writing-your-own-plugins.mdx#2025-04-11_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nimport { create } from '@orama/orama'\n\nconst db = create({\n  schema: {\n    name: 'string'\n  },\n- components: {\n-   beforeInsert: (orama, id, document) => {\n-     console.log('Orama instance: ', orama)\n-     console.log('Document id: ', id)\n-     console.log('Document to be inserted: ', document)\n-   }\n- }\n+ plugins: [\n+   {\n+     name: 'before-insert-plugin',\n+     beforeInsert: (orama, id, document) => {\n+       console.log('Orama instance: ', orama)\n+       console.log('Document id: ', id)\n+       console.log('Document to be inserted: ', document)\n+     }\n+   }\n+ ]\n})\n```\n\n----------------------------------------\n\nTITLE: Performing Full-Text Search with Orama Cloud Client in PHP\nDESCRIPTION: This snippet shows how to use the Orama Cloud client in PHP to perform a full-text search query. It includes setting up the client, defining search parameters, and executing the search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Client;\nuse OramaCloud\\Client\\Query;\nuse OramaCloud\\Client\\QueryParams\\WhereOperator;\nuse OramaCloud\\Client\\QueryParams\\SortByOrder;\n\n$client = new Client([\n  'endpoint' => '<Your Orama Cloud Endpoint>',\n  'api_key' => '<Your Orama Cloud API Key>'\n]);\n\n$query = (new Query())\n  ->term('red shoes')\n  ->mode('fulltext') // 'fulltext' is optional, but can also be \"vector\" or \"hybrid\"\n  ->where('price', WhereOperator::GT, 99.99);\n\n$results = $client->search($query);\n```\n\n----------------------------------------\n\nTITLE: Filtering with Multiple String Values in Orama\nDESCRIPTION: This example shows how to filter search results using an array of string values. The search will return documents that match at least one of the provided values in the specified property.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/filters.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"prestige\",\n  where: {\n    tag: [\"favorite\", \"new\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering by Polygon in JavaScript\nDESCRIPTION: Demonstrates how to filter search results by a bounding polygon. The example searches for documents containing 'Duomo' within a polygon defined by coordinates around Milan's Duomo. The filter can be configured to include or exclude documents inside the polygon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(db, {\n  term: 'Duomo',\n  where: {\n    location: {            // The property we want to filter by\n      polygon: {           // The filter we want to apply (in that case: \"polygon\")\n        coordinates: [     // The polygon coordinate\n          { lat: 45.46472, lon: 9.1886  },\n          { lat: 45.46352, lon: 9.19177 },\n          { lat: 45.46278, lon: 9.19176 },\n          { lat: 45.4628,  lon: 9.18857 },\n          { lat: 45.46472, lon: 9.1886  },\n        ]\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Persisting an Orama Database to File (Server-side)\nDESCRIPTION: Shows how to use the persistToFile function to save an Orama database to a file on disk. This method is only available in server environments with a Node.js-compatible file system.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-data-persistence.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { persistToFile } from \"@orama/plugin-data-persistence/server\";\n\nconst filePath = await persistToFile(\n  originalInstance,\n  \"binary\",\n  \"./quotes.msp\"\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sorter in Orama\nDESCRIPTION: Example demonstrating how to customize the default sorter component by extending its functionality. Shows how to override the remove method while maintaining other default behaviors.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { sorter as defaultSorter } from \"@orama/orama/components.js\";\n\nconst s = await defaultSort.createSorter();\nconst db = create({\n  schema: {\n    number: \"number\",\n  },\n  components: {\n    sorter: {\n      // override partially the default sorter\n      ...s,\n      async remove(sort, prop, id) {\n        // Apply custom logic here\n        return s.remove(sort, prop, id);\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Cloud Plugin in Docusaurus\nDESCRIPTION: This code snippet shows how to add the @orama/plugin-docusaurus-v3 plugin to the Docusaurus configuration file. It includes settings for the Orama Cloud API key, index ID, and deployment options.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/native-integrations/docusaurus.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n  [\n    \"@orama/plugin-docusaurus-v3\",\n    {\n      cloud: {\n        apiKey: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,\n        indexId: \"YOUR_ORAMA_CLOUD_INDEX_ID\",\n        deploy: process.env.ENABLE_ORAMA_CLOUD_DEPLOY,\n      },\n    },\n  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Filtering with Array Properties in Orama\nDESCRIPTION: This example demonstrates how to create a database with array properties (string[], number[], boolean[]) and filter search results. The query matches if at least one array element matches the filter condition.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/filters.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    title: \"string\",\n    tags: \"string[]\",\n    editions: \"number[]\",\n    limited: \"boolean[]\",\n  }\n});\n\ninsertMultiple(db, [\n  {title: \"a\", tags: [\"foo\", \"bar\"], editions: [1990, 2024], limited: [false, false]},\n  {title: \"b\", tags: [\"foo\"], editions: [1942, 2024], limited: [false, true]},\n  {title: \"c\", tags: [\"bar\"], editions: [2020], limited: [false]},\n])\n\n// Books with tag foo\nsearch(db, {where: {tags: \"foo\"}}); // returns  a, b\n\n// Books tagged either as foo or bar\nsearch(db, {where: {tags: [\"foo\", \"bar\"]}}); // returns a, b, c\n\n// Books with a 2024 edition\nsearch(db, {where: {editions: {eq: 2024}}}); // returns a, b\n\n// Books with a limited edition\nsearch(db, {where: {limited: true}}); // returns b\n```\n\n----------------------------------------\n\nTITLE: Simplified Vector Search using Orama Plugins\nDESCRIPTION: Shows how to perform vector search with plugins like secure proxy or embeddings, which automatically convert text to vectors without needing explicit vector configuration.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/hybrid-search.mdx#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst results = search(db, {\n  mode: \"vector\",\n  term: \"Videogame for little kids with a passion about ice cream\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Orama Schema with Multiple Data Types\nDESCRIPTION: Demonstrates creating a basic Orama database schema with various data types including strings, nested objects, numbers, and booleans.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/facets.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    title: \"string\",\n    description: \"string\",\n    categories: {\n      primary: \"string\",\n      secondary: \"string\",\n    },\n    rating: \"number\",\n    isFavorite: \"boolean\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Persisting an Orama Database In-Memory\nDESCRIPTION: Uses the persist function from the plugin-data-persistence package to save an Orama database to an in-memory JSON format. This method works in any JavaScript environment including browsers.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-data-persistence.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { persist } from \"@orama/plugin-data-persistence\";\n\nconst JSONIndex = await persist(originalInstance, \"json\");\n```\n\n----------------------------------------\n\nTITLE: Custom Index Implementation with Default Components\nDESCRIPTION: Demonstrates how to create a custom index by extending the default index implementation with custom deserialization.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { index as defaultIndex } from \"@orama/orama/components\";\n\nconst index = await defaultIndex.createIndex();\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n  },\n  components: {\n    // This index will only customize the deserialization\n    index: {\n      ...index,\n      load(documentsIdsMapper, raw) {\n        // Do something here\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Offset Results Search in Orama\nDESCRIPTION: Demonstrates how to skip the first result by using an offset. This search skips the first document and returns results starting from the second document that contains 'Chris' in the director field.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Chris\",\n  properties: [\"director\"],\n  offset: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring BM25 Parameters in Orama Search\nDESCRIPTION: Example showing how to customize BM25 relevance parameters when performing a search. Demonstrates configuration of term frequency saturation (k), length normalization (b), and frequency normalization lower bound (d) parameters.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/bm25-algorithm.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Chris\",\n  properties: [\"director\"],\n  relevance: {\n    // Term frequency saturation parameter.\n    // Default value: 1.2\n    // Recommended value: between 1.2 and 2\n    k: 1.2,\n\n    // Length normalization parameter.\n    // Default value: 0.75\n    // Recommended value: > 0.75\n    b: 0.75,\n\n    // Frequency normalization lower bound.\n    // Default value: 0.5\n    // Recommended value: between 0.5 and 1\n    d: 0.5,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Clearing Orama Cloud Index (JavaScript)\nDESCRIPTION: Shows how to clear all data from an Orama Cloud index using the JavaScript SDK. It demonstrates creating a CloudManager instance, accessing an index, and triggering a clear operation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CloudManager } from \"@oramacloud/client\"\n\nconst oramaCloudManager = new CloudManager({\n  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,\n})\n\nconst myIndex = oramaCloudManager.index(\"my-index-id\")\n\nawait myIndex.clear()\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Last Answer in Orama Sessions in Swift\nDESCRIPTION: This code demonstrates how to regenerate the last answer in an Orama answer session using Swift. It shows asking a question with AnswerParams, regenerating the answer with streaming control, and accessing the conversation messages.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_54\n\nLANGUAGE: swift\nCODE:\n```\n// Ask the question\nlet answer = try await answerSession.ask(params: AnswerParams.AskParams(\n  query: \"What is Orama?\",\n  userData: nil,\n  related: nil\n))\n\n// Regenerate the answer\n// \"stream\" is true by default, but you can set it to false if you want to get the entire answer at once\nlet answer = try await answerSession.regenerateLast(stream: false)\n\n// Check the messages\nlet messages = answerSession.getMessages()\n\nprint(messages)\n\n// [\n//   { role: 'user', content: 'What is Orama?' },\n//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Creating Orama Instance with Nested Properties\nDESCRIPTION: Demonstrates how to create and use nested properties in an Orama schema, including arrays and nested objects.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/create.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    plot: \"string\",\n    cast: {\n      director: \"string\",\n      leading: \"string\",\n      supporting: \"string[]\",\n    },\n    year: \"number\",\n    isFavorite: \"boolean\",\n  },\n});\n\ninsert(movieDB, {\n  title: \"The Godfather\",\n  plot: \"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.\",\n  cast: {\n    director: \"Francis Ford Coppola\",\n    leading: \"Marlon Brando\",\n    supporting: [\"Al Pacino\", \"James Caan\", \"Robert Duvall\"],\n  },\n  year: 1972,\n  isFavorite: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Corresponding Orama Schema for Movie Data\nDESCRIPTION: This example shows the Orama schema that corresponds to the movie data structure. It defines the property types for each field in the data.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/working-with-indexes/searchable-schema.mdx#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"string\",\n    \"director\": \"string\",\n    \"description\": \"string\",\n    \"rating\": \"number\",\n    \"year\": \"number\",\n    \"isFavorite\": \"boolean\",\n    \"genres\": \"string[]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vector Search Implementation in Kotlin\nDESCRIPTION: Demonstrates vector search implementation in Kotlin using the Orama client, including data class definition and search parameter configuration with conditions.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/vector-search.mdx#2025-04-11_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\nimport com.orama.model.search.*\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class MyDoc (\n    val title: String,\n    val category: String,\n    val path: String,\n    val content: String,\n    val section: String\n)\n\nval client = OramaClient(\n    endpoint = \"\",\n    apiKey = \"\"\n)\n\nval searchParams = SearchParams.builder(\n      term = \"Super Mario videogame\",\n      mode = Mode.VECTOR\n  )\n  .where(listOf(\n      Condition(\"price\", ConditionType.LessThan(19.99))\n  ))\n  .build()\n\nval results = client.search(searchParams, MyDoc.serializer())\n```\n\n----------------------------------------\n\nTITLE: Importing search function from Orama\nDESCRIPTION: Shows how to import the search function from @orama/orama, which is used to perform hybrid search operations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/hybrid-search.mdx#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { search } from \"@orama/orama\";\n```\n\n----------------------------------------\n\nTITLE: Setting up an Orama database with example documents\nDESCRIPTION: This code snippet demonstrates how to create an Orama database, define a schema with a title field, and insert four sample t-shirt documents with varying descriptions.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/threshold.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    title: \"string\",\n  },\n});\n\ninsert(db, { title: \"Blue t-shirt, slim fit\" });\ninsert(db, { title: \"Blue t-shirt, regular fit\" });\ninsert(db, { title: \"Red t-shirt, slim fit\" });\ninsert(db, { title: \"Red t-shirt, oversize fit\" });\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results with Orama Cloud Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to sort search results using the Orama Cloud client in Kotlin. It shows sorting by a single property with order specification.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval searchParams = SearchParams.builder(\n        term = \"prestige\"\n    )\n  .sortBy([\n    sortByDirective(\"year\", SortByOrder.ASC)\n  ])\n  .build()\n\nval results = client.search(searchParams, MyDoc.serializer())\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results with Orama Cloud Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to sort search results using the Orama Cloud client in JavaScript. It shows sorting by a single property with optional order specification.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await client.search({\n  term: \"prestige\",\n  sortBy: {\n    property: \"year\",\n    order: \"desc\" // optional, default is \"asc\" \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Executing Preflight Search with Orama in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the preflight search feature in Orama. It creates a database, inserts sample data, and performs a preflight search query. The result includes the count of matching items and execution time, but no actual hits.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/preflight.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    title: \"string\",\n  },\n});\n\ninsert(db, { title: \"Red headphones\" });\ninsert(db, { title: \"Green headphones\" });\ninsert(db, { title: \"Blue headphones\" });\ninsert(db, { title: \"Yellow headphones\" });\n\nconst results = search(db, {\n  term: \"headphones\",\n  preflight: true,\n});\n\nconsole.log(results);\n\n// {\n//   elapsed: {\n//     raw: 181208,\n//     formatted: '181Î¼s'\n//   }\n//   hits: []\n//   count: 4\n// }\n```\n\n----------------------------------------\n\nTITLE: High Precision Geosearch with Vincenty Formula in Orama\nDESCRIPTION: Shows how to enable high precision geosearch using the Vincenty Formula instead of the default Haversine Formula. This approach provides more accurate distance calculations for long distances at the cost of performance.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/geosearch.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from '@orama/orama'\n\nconst db = create({ ... })\n\ninsert(db, { ... })\ninsert(db, { ... })\ninsert(db, { ... })\n\nconst searchResult = search(db, {\n  term: 'Duomo',\n  where: {\n    location: {\n      polygon: {\n        coordinates: [\n          { lat: 45.46472, lon: 9.1886  },\n          { lat: 45.46352, lon: 9.19177 },\n          { lat: 45.46278, lon: 9.19176 },\n          { lat: 45.4628,  lon: 9.18857 },\n          { lat: 45.46472, lon: 9.1886  },\n        ],\n        highPrecision: true\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Orama in Browser with HTML\nDESCRIPTION: This snippet demonstrates how to import Orama directly in a browser using an HTML script with ESM module import. It shows the basic structure for loading Orama from a CDN (unpkg).\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <script type=\"module\">\n      import {\n        create,\n        search,\n        insert,\n      } from \"https://unpkg.com/@orama/orama@latest/dist/index.js\";\n\n      // ...\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Integrating Orama Plugin QPS with Database Creation\nDESCRIPTION: This snippet demonstrates how to import and use the Orama Plugin QPS when creating a new Orama database. It includes setting up a schema and adding the plugin to the database configuration.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-qps/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { pluginQPS } from '@orama/plugin-qps'\n\nconst db = await create({\n  schema: {\n    description: 'string',\n  },\n  plugins: [ pluginQPS() ],\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting and Updating Documents in Orama Cloud Index (Kotlin)\nDESCRIPTION: Demonstrates inserting and updating documents in an Orama Cloud index using the Kotlin SDK. It shows how to create a CloudManager, define a document structure, and perform insert and update operations within a coroutine scope.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.CloudManager\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class OramaDoc (\n  let id: String\n  let name: String\n  let age: Int\n)\n\nval cloudManager = CloudManager(apiKey = \"YOUR_API_KEY\")\nval indexManager = cloudManager.index<OramaDoc>(indexId)\n\nrunBlocking {\n  index.insert(listOf(\n      OramaDoc(id = \"3\", name = \"Rick Sanchez\", age = 80)\n  ), OramaDoc.serializer())\n\n  index.update(listOf(\n      OramaDoc(id = \"3\", name = \"Rick Doe\", age = 75)\n  ), OramaDoc.serializer())\n}\n```\n\n----------------------------------------\n\nTITLE: Grouped Search with Sorting\nDESCRIPTION: Example of combining groupBy with sortBy to order results within groups based on specific properties.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/grouping.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"t-shirt\",\n  groupBy: {\n    properties: [\"design\"], // property on which we want to group on\n  },\n  sortBy: {\n    property: \"rank\", // inside a group, the result is ordered following this property\n    order: \"DESC\", // with this order\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Property Sorting with Orama Cloud Client in PHP\nDESCRIPTION: This snippet shows how to sort search results by multiple properties using the Orama Cloud client in PHP. It demonstrates sorting by two properties with independent order specifications.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Client;\nuse OramaCloud\\Client\\Query;\nuse OramaCloud\\Client\\QueryParams\\SortByOrder;\n\n$query = (new Query())\n    ->term('prestige')\n    ->sortBy('year' SortByOrder::DESC)\n    ->sortBy('meta.rating' SortByOrder::DESC);\n\n$results = $client->search($query);\n```\n\n----------------------------------------\n\nTITLE: Advanced Orama Cloud Plugin Configuration with Document Transformation\nDESCRIPTION: This configuration demonstrates how to set up advanced features of the Orama Cloud plugin, including schema definition and document transformation for flattening nested structures.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/native-integrations/strapi.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  \"orama-cloud\": {\n    config: {\n      privateApiKey: env(\"ORAMA_PRIVATE_API_KEY\"),\n      collectionSettings: {\n        \"<your_collection_index_id>\": {\n          /* Mandatory */\n          /* Define the schema of your document */\n          schema: {\n            id: { type: \"integer\" },\n            owner: { type: \"string\" },\n            cars: {\n              brands: { type: \"string\" },\n              models: { type: \"string\" },\n            }\n          },\n          /* Mandatory */\n          /* Define the transformer function */\n          transformer: entry => {\n            return {\n              ...entry,\n              owner: \"Overriding owner\",\n              cars: {\n                source: entry.cars,\n                ...entry.cars.reduce((acc, curr) => {\n                  acc.brands.push(curr.brand);\n                  acc.models.push(curr.model);\n                  return acc;\n                }, {\n                  brands: [],\n                  models: []\n                })\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Orama Database with Schema\nDESCRIPTION: This snippet demonstrates how to create an Orama database with a specified schema for movie entries. It defines the structure of the data to be indexed.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/insert.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n    plot: \"string\",\n    year: \"number\",\n    isFavorite: \"boolean\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Geopoint Data Example\nDESCRIPTION: Example of documents with geopoint data\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"name\": \"Duomo di Milano\",\n    \"location\": {\n      \"lat\": 45.46409,\n      \"lon\": 9.19192\n    }\n  },\n  {\n    \"name\": \"Piazza Duomo\",\n    \"location\": {\n      \"lat\": 45.46416,\n      \"lon\": 9.18945\n    }\n  },\n  {\n    \"name\": \"Piazzetta Reale\",\n    \"location\": {\n      \"lat\": 45.46339,\n      \"lon\": 9.19092\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Vitepress Plugin in Config File\nDESCRIPTION: Shows how to import and configure the Orama Vitepress plugin in the Vitepress configuration file. The plugin automatically indexes all markdown files in the documentation directory.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-vitepress.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OramaPlugin } from \"@orama/plugin-vitepress\";\n\nexport default {\n  // ...\n  extends: {\n    vite: {\n      plugins: [OramaPlugin()],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Inserting a Snapshot with PHP SDK\nDESCRIPTION: PHP example demonstrating how to use the Orama Cloud SDK to insert documents into an index. The example creates an IndexManager and uses the insert method to add documents.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Manager\\IndexManager;\n$indexManager = new IndexManager(\"my-index-id\", PRIVATE_API_KEY);\n\n$indexManager->insert([\n  [\"id\" => \"1\", \"name\" => \"John Doe\", \"age\" => 30],\n  [\"id\" => \"2\", \"name\" => \"Jane Doe\", \"age\" => 25],\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Orama Instance with Multiple Property Types\nDESCRIPTION: Shows how to create an Orama database with various property types including strings, numbers, and booleans.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/create.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n    plot: \"string\",\n    year: \"number\",\n    isFavorite: \"boolean\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating System Prompt Configuration in Orama Client\nDESCRIPTION: This code shows how to change the system prompt configuration during an active session using the setSystemPromptConfiguration method. This allows for dynamic adjustment of prompt behavior based on user context.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/customizing-the-answers.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OramaClient } from '@oramacloud/client'\n\nconst client = new OramaClient({\n  endpoint: 'your-endpoint',\n  api_key: 'your-api-key'\n})\n\nconst session = client\n  .createAnswerSession({\n    events: { ... },\n    systemPrompts: ['sp_italian-prompt-with-greetings-2bx7d3']\n  })\n\nsession.setSystemPromptConfiguration({\n  systemPrompts: ['sp_italian-prompt-with-greetings-2bx7d3'] // Overrides the previous configuration\n})\n\nawait session.ask({\n  term: 'what is Orama?'\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Operations with Kotlin SDK\nDESCRIPTION: This example demonstrates how to check for pending operations in an Orama Cloud index using the Kotlin SDK. It defines a serializable document class, initializes a CloudManager with an API key, and then uses a coroutine to call the hasPendingOperations method.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nimport com.orama.client.CloudManager\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class OramaDoc (\n  let id: String\n  let name: String\n  let age: Int\n)\n\nval cloudManager = CloudManager(apiKey = \"YOUR_API_KEY\")\nval indexManager = cloudManager.index<OramaDoc>(indexId)\n\nrunBlocking {\n  val hasPendingOperations = index.hasPendingOperations()\n  println(hasPendingOperations) // true or false\n}\n```\n\n----------------------------------------\n\nTITLE: Persisting Highlight Data in Orama\nDESCRIPTION: Example demonstrating how to save and load an Orama database while preserving highlight information using saveWithHighlight and loadWithHighlight functions.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-match-highlight.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\nimport {\n  afterInsert as highlightAfterInsert,\n  saveWithHighlight,\n  loadWithHighlight,\n} from \"@orama/plugin-match-highlight\";\n\nconst db = create({\n  schema: {\n    text: \"string\",\n  },\n  plugins: [\n    // Register the hook\n    {\n      name: \"highlight\",\n      afterInsert: highlightAfterInsert,\n    },\n  ],\n});\n\ninsert(db, { text: \"hello world\" });\n\nconst savedDB = await saveWithHighlight(db);\n\nconst restoredDB = await loadWithHighlight(savedDB);\n```\n\n----------------------------------------\n\nTITLE: Basic GroupBy Search Operation in JavaScript\nDESCRIPTION: Demonstrates the basic structure of a groupBy search operation in Orama, showing the main configuration options including properties selection and result limiting.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/grouping.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"t-shirt\",\n  groupBy: {\n    properties: [\"design\"], // required: property on which we want to group on\n    maxResult: 1, // optional: for every group, how many results we want\n    reduce: {\n      // optional: customize the aggregation logic\n      reducer: Function,\n      getInitialValue: Function,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search in Vue Using Orama\nDESCRIPTION: Shows how to perform vector search with the useSearch composable by specifying the mode as 'vector' and providing additional parameters like similarity threshold and result limit.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/vue-sdk.mdx#2025-04-11_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { client } from \"./orama\";\nimport { useSearch } from \"@oramacloud/vue-client\";\n\nconst { results } = useSearch({\n  client,\n  term: \"Super Mario videogame\",\n  mode: \"vector\",\n  similarity: 0.8, // Minimum similarity, between 0 and 1. Default is 0.8 (80% similar).\n  limit: 5, // How many results to return. Default is 10.\n});\n</script>\n\n<template>\n  <div v-for=\"result in results?.hits\">\n    <pre>{{ result }}</pre>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Asking Questions with Swift SDK\nDESCRIPTION: Code showing how to ask a question using the ask() method in the Orama Swift SDK. It accepts parameters for the query and optional user data.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_24\n\nLANGUAGE: swift\nCODE:\n```\nlet answer = try await answerSession.ask(params: AnswerParams.AskParams(\n  query: \"What is Orama?\",\n  userData: nil,\n  related: nil\n))\n```\n\n----------------------------------------\n\nTITLE: Asking Questions with JavaScript SDK\nDESCRIPTION: This code demonstrates how to ask a question using the ask() method in the Orama JavaScript SDK. It returns the complete answer once it has been streamed from the server.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst answer = await answerSession.ask({\n  term: \"What is Orama?\",\n});\n\nconsole.log(answer);\n// Orama is a next-generation answer engine\n```\n\n----------------------------------------\n\nTITLE: Inserting Documents in Orama Cloud Index (cURL)\nDESCRIPTION: Demonstrates how to insert documents into an Orama Cloud index using cURL. It shows the HTTP request format for the notify API endpoint, including the authorization header and JSON payload.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/notify \\\n  -H \"authorization: Bearer $PRIVATE_API_KEY\" \\\n  -d \"{ \\\"upsert\\\": [{ \\\"id\\\": \\\"3\\\", \\\"name\\\": \\\"Rick Sanchez\\\", \\\"age\\\": 80 }] }\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Orama Analytics Plugin with Database Creation and Search Functionality\nDESCRIPTION: This code demonstrates how to set up the Orama Analytics Plugin when creating a database. The plugin requires an API key and endpoint obtained from an Orama Cloud account, which enables tracking of search analytics.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-analytics/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from '@orama/orama'\nimport { pluginAnalytics} from '@orama/plugin-analytics'\n\nconst db = await create({\n  schema: {\n    title: 'string',\n    description: 'string'\n  },\n  plugins: [\n    pluginAnalytics({\n      apiKey: '<API-KEY>',\n      endpoint: '<ENDPOINT>'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Using onStateChange Event in Orama Answer Session with Swift\nDESCRIPTION: Shows how to use the onStateChange event in Swift implementation of Orama's Answer Session API. The event is triggered whenever the state of the answer session changes, allowing for reactive updates to the UI.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_18\n\nLANGUAGE: swift\nCODE:\n```\nlet answerSession = AnswerSession(params: answerParams)\n  .on(event: .stateChange) { state in\n    if state.allSatisfy({ !$0.loading }) {\n      print(state)\n    }\n  }\n\n  try await answerSession.ask(params: AnswerParams.AskParams(\n    query: \"What is Orama?\",\n    userData: nil,\n    related: nil\n  ))\n\n// [{\n//   interactionId: \"clyru4rl8000008l062b26fk1\",\n//   query: \"What is Orama?\",\n//   response: \"Orama is a next-generation answer engine [...]\",\n//   relatedQueries: [\"How Orama works\", \"Why Orama is the best\", \"Vector search with orama\"],\n//   sources: [{\n//     count: 15,\n//     elapsed: { formatted: \"78ms\", raw: 78000000 },\n//     hits: [\n//       { document: { title: \"What is Orama\", ... } },\n//       { document: { title: \"How Orama works\", ... } },\n//       { document: { title: \"Why Orama is the best\", ... } }\n//     ]\n//   }],\n//   translatedQuery: { term: \"What is Orama?\" },\n//   aborted: false,\n//   loading: false\n// }]\n```\n\n----------------------------------------\n\nTITLE: Handling Answer Aborted Events with Kotlin SDK\nDESCRIPTION: Code showing how to set up an event listener for when an answer session is aborted in the Kotlin SDK. It implements the AnswerEventListener interface with an onAnswerAborted method.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_40\n\nLANGUAGE: kotlin\nCODE:\n```\nval answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {\n  override fun onAnswerAborted(aborted: Boolean) {\n    if (aborted) {\n      println(\"The user has aborted this answer generation!\")\n    }\n  }\n}, abortHandler = abortHandler)\n```\n\n----------------------------------------\n\nTITLE: Search Results Structure with Highlights\nDESCRIPTION: Example of the search results structure showing how positions are included in the response for highlighted matches.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-match-highlight.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  elapsed: {...},\n  count: ...,\n  hits: [\n    {\n      id: ...,\n      score: ...,\n      document: { text: 'hello world' },\n      positions: {\n        text: {\n          hello: [\n            {\n              start: 0,\n              length: 5\n            }\n          ]\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OramaClient Instance in JavaScript\nDESCRIPTION: Demonstrates how to create and export an OramaClient instance by providing an endpoint and API key. This client is used to connect to Orama Cloud from a Vue application.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/vue-sdk.mdx#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nexport const client = new OramaClient({\n  endpoint: \"\",\n  api_key: \"\",\n});\n```\n\n----------------------------------------\n\nTITLE: Streaming Chat Completion Responses with Async Iterators\nDESCRIPTION: Implementation of streaming chat responses from OpenAI through the Orama Secure Proxy using asynchronous iterators, allowing real-time processing of tokens as they arrive from the API.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/orama-ai/orama-secure-proxy.mdx#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport { OramaProxy } from '@oramacloud/secure-proxy'\n\nconst proxy = new OramaProxy({\n  api_key: 'zrqplaxa-H46c3f-D9vk8Fg_eJlomMP3'\n})\n\nconst chatParams = {\n  model 'openai/gpt-4',\n  messages: [{ role: 'user', content: 'Who is Michael Scott?' }]\n}\n\nfor await (const message of proxy.chatStream(chatParams)) {\n  console.log(message)\n}\n\n// Michael\n// Scott is\n// a fictional\n//  character from the\n//  television show\n// \"The\n// Office\" (US\n// version)\n// ...\n```\n\n----------------------------------------\n\nTITLE: Multi-Property Sorting with Orama Cloud Client in Swift\nDESCRIPTION: This snippet shows how to sort search results by multiple properties using the Orama Cloud client in Swift. It demonstrates sorting by two properties with independent order specifications.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet searchQuery = ClientSearchParams\n  .builder(term: \"prestige\", mode: .fulltext)\n  .sortBy([\n    ClientSearchParams.SortByDirective(\n      property: \"year\",\n      order: .asc\n    ),\n    ClientSearchParams.SortByDirective(\n      property: \"meta.rating\",\n      order: .desc\n    ),\n  ])\n  .build()\n\nlet results: SearchResults<MyDoc> = try await client.search(query: searchQuery)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message History with Kotlin SDK\nDESCRIPTION: Example showing how to retrieve the full conversation history using the getMessages() method in the Kotlin SDK. It returns an array of message objects with role and content properties.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_50\n\nLANGUAGE: kotlin\nCODE:\n```\nval messages = answerSession.getMessages()\n\n// [\n//   { role: 'user', content: 'What is Orama?' },\n//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Using threshold set to default value (1)\nDESCRIPTION: This code shows the default behavior with threshold set to 1, which returns all documents containing any of the search terms, explaining why broad searches can return many results.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/threshold.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"slim fit\",\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Related Queries with Swift SDK\nDESCRIPTION: Code showing how to request related queries when asking a question in the Swift SDK. It includes parameters for the query, optional user data, and related query settings.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_44\n\nLANGUAGE: swift\nCODE:\n```\n  let answer = try await answerSession.ask(params: AnswerParams.AskParams(\n    query: \"What is Orama?\",\n    userData: \"The user is a beginner in programming\",\n    related: AnswerParams<MyDoc>.RelatedQueries(howMany: 3, format: \"query\")\n  ))\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from Orama Cloud Index (Swift)\nDESCRIPTION: Demonstrates deleting documents from an Orama Cloud index using the Swift SDK. It shows creating a CloudManager, defining a document structure, and performing a delete operation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\n// This is an example document. It should reflect your index schema.\nstruct OramaDoc: Codable {\n  let id: String\n  let name: String\n  let age: Int\n}\n\nlet cloudManager = CloudManager(apiKey: \"YOUR_API_KEY\")\nlet indexManager = cloudManager.index<OramaDoc>(\"my-index-id\")\n\nawait try indexManager.delete([\"2\"])\n```\n\n----------------------------------------\n\nTITLE: Retrieving documents by ID in Orama using getByID\nDESCRIPTION: The getByID function retrieves a document from an Orama database using its unique identifier. It returns the complete original document without any transformations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/utilities.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getByID } from \"@orama/orama\";\n\nconst thePrestige = await getByID(movieDB, \"tt0482571\");\n\n// Returns the original, full document\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Search Plugin in Nextra Theme\nDESCRIPTION: Shows how to integrate the Orama search component into a Nextra theme configuration file. The plugin automatically handles search index generation and supports multiple locales out of the box.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-nextra.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OramaSearch } from \"@orama/plugin-nextra\";\n\nexport default {\n  // ...\n  search: {\n    component: OramaSearch,\n  },\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Answer Session in JavaScript with Orama Cloud SDK\nDESCRIPTION: This snippet demonstrates how to create an answer session with the Orama JavaScript SDK. It includes setting up the client with endpoint and API key, configuring the session with optional parameters, and sending the first question.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"@oramacloud/client\";\n\nconst orama = new OramaClient({\n  endpoint: \"YOUR_ENDPOINT_URL\",\n  api_key: \"YOUR_PUBLIC_API_KEY\",\n});\n\nconst answerSession = orama.createAnswerSession({\n  // optional\n  userContext: \"The user is a very skilled programmer but has never used Orama before.\",\n  // optional\n  inferenceType: \"documentation\",\n  // optional\n  initialMessages: [],\n  // optional\n  events: {\n    onMessageChange: (messages) => console.log({ messages }),\n    onMessageLoading: (loading) => console.log({ loading }),\n    onAnswerAborted: (aborted) => console.log({ aborted }),\n    onSourceChange: (sources) => console.log({ sources }),\n    onQueryTranslated: (query) => console.log({ query }),\n    onStateChange: (state) => console.log({ state }),\n    onNewInteractionStarted: (interactionId) => console.log({ interactionId }),\n  },\n});\n\nawait answerSession.ask({\n  term: \"How do I get started with Orama?\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from Orama Cloud Index (JavaScript)\nDESCRIPTION: Shows how to delete documents from an Orama Cloud index using the JavaScript SDK. It demonstrates creating a CloudManager instance, accessing an index, and performing a delete operation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CloudManager } from \"@oramacloud/client\"\n\nconst oramaCloudManager = new CloudManager({\n  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,\n})\n\nconst myIndex = oramaCloudManager.index(\"my-index-id\")\n\nawait myIndex.delete([\"2\"])\n```\n\n----------------------------------------\n\nTITLE: Streaming Answers with Swift SDK\nDESCRIPTION: Code showing how to use the askStream() method to receive streamed answers from the Orama Swift SDK. It returns an async sequence that can be iterated using for-await.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_29\n\nLANGUAGE: swift\nCODE:\n```\nlet answer = try await answerSession.askStream(params: AnswerParams.AskParams(\n  query: \"What is Orama?\",\n  userData: nil,\n  related: nil\n))\n\nfor try await msg in answer {\n  print(msg)\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Property Sorting with Orama Cloud Client in Kotlin\nDESCRIPTION: This snippet demonstrates how to sort search results by multiple properties using the Orama Cloud client in Kotlin. It shows sorting by two properties with independent order specifications.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nval searchParams = SearchParams.builder(\n        term = \"prestige\"\n    )\n  .sortBy([\n    sortByDirective(\"year\", Order.ASC),\n    sortByDirective(\"meta.rating\", Order.DESC)\n  ])\n  .build()\n\nval results = client.search(searchParams, MyDoc.serializer())\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Database with HTML Parser\nDESCRIPTION: Example showing how to create an Orama database with the default HTML schema and populate it from HTML files using glob patterns.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-parsedoc.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\nimport { populateFromGlob, defaultHtmlSchema } from \"@orama/plugin-parsedoc\";\n\nconst db = create({\n  schema: defaultHtmlSchema,\n});\n\nawait populateFromGlob(db, \"docs/**/*.html\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Cloud Plugin in Strapi\nDESCRIPTION: This snippet shows how to configure the Orama Cloud plugin in Strapi's config/plugins.js file. It sets up the plugin with a private API key from the environment variables.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/native-integrations/strapi.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = ({ env }) => ({\n  \"orama-cloud\": {\n    config: {\n      privateApiKey: env('ORAMACLOUD_PRIVATE_API_KEY'),\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting initialMessages in Swift for Answer Session\nDESCRIPTION: This snippet shows how to configure initialMessages when creating an answer session in Swift. It prepopulates the conversation with user and assistant messages.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_12\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nlet initialMessages = [\n  AnswerParams<Doc>.Message(role: .user, content: \"What is Orama?\")\n  AnswerParams<Doc>.Message(role: .assistant, content: \"Orama is a next-generation answer engine\")\n]\n```\n\n----------------------------------------\n\nTITLE: Counting documents in Orama using count\nDESCRIPTION: The count function returns the total number of documents stored in an Orama database. This is useful for understanding the size of your database and pagination calculations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/utilities.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { count } from \"@orama/orama\";\n\nconst docNumber = await count(movieDB);\n\n// Returns the number of documents in the database\n```\n\n----------------------------------------\n\nTITLE: Setting initialMessages in Kotlin for Answer Session\nDESCRIPTION: This snippet demonstrates how to configure initialMessages when creating an answer session in Kotlin. It prepopulates the conversation with user and assistant messages.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\n\nvar initialMessages = listOf(\n  Message(role = Role.USER, content = \"What is Orama?\"),\n  Message(role = Role.ASSISTANT, content = \"Orama is a next-generation answer engine.\"),\n)\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from Orama Cloud Index (Kotlin)\nDESCRIPTION: Shows how to delete documents from an Orama Cloud index using the Kotlin SDK. It demonstrates creating a CloudManager, defining a document structure, and performing a delete operation within a coroutine scope.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_13\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.CloudManager\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class OramaDoc (\n  let id: String\n  let name: String\n  let age: Int\n)\n\nval cloudManager = CloudManager(apiKey = \"YOUR_API_KEY\")\nval indexManager = cloudManager.index<OramaDoc>(indexId)\n\nrunBlocking {\n  index.delete(listOf(\"2\"), OramaDoc.serializer())\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Documents Store in Orama\nDESCRIPTION: Example showing how to customize the default documents store component by extending its functionality while preserving core features. Demonstrates overriding the remove method with custom logic.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { documentsStore as defaultDocumentsStore } from \"@orama/orama/components\";\n\nconst store = await defaultDocumentsStore.createDocumentsStore();\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n  },\n  components: {\n    // override partially the default documents store\n    documentsStore: {\n      ...store,\n      remove(s, id) {\n        // Apply custom logic\n        return store.remove(s, id);\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Search Results Object in Orama\nDESCRIPTION: Shows the format of the search results object returned when performing hybrid search, including count, elapsed time, and hit information.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/hybrid-search.mdx#2025-04-11_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  count: 1,\n  elapsed: {\n    raw: 25000,\n    formatted: '25ms',\n  },\n  hits: [\n    {\n      id: '1-19238',\n      score: 0.812383129,\n      document: {\n        title: 'The Prestige',\n        embedding: [0.938293, 0.284951, 0.348264, 0.948276, 0.564720],\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Orama Cloud Index (cURL)\nDESCRIPTION: Demonstrates how to deploy changes to an Orama Cloud index using cURL. It shows the HTTP request format for the deploy API endpoint, including the authorization header.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/deploy \\\n  -X POST \\\n  -H \"Authorization: Bearer $PRIVATE_API_KEY\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from Orama Cloud Index (PHP)\nDESCRIPTION: Demonstrates deleting documents from an Orama Cloud index using the PHP SDK. It shows creating an IndexManager instance and performing a delete operation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Manager\\IndexManager;\n$indexManager = new IndexManager(\"my-index-id\", PRIVATE_API_KEY);\n\n$indexManager->delete([\"2\"]);\n```\n\n----------------------------------------\n\nTITLE: Removing a Single Document from an Orama Database\nDESCRIPTION: This snippet shows how to remove a single document from an Orama database using the 'remove' function. It requires the database instance and the document ID that was returned when the document was inserted.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/remove.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nremove(movieDB, harryPotterId);\n```\n\n----------------------------------------\n\nTITLE: Document Property Extraction in Orama\nDESCRIPTION: Implementation of a custom document property extraction component using lodash's get function. Shows how to extract and map document properties using dot notation paths.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { get } from \"lodash/get\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n  },\n  components: {\n    getDocumentProperties(doc, paths) {\n      return Object.fromEntries(\n        paths.map((path) => {\n          return [path, get(doc, path)];\n        })\n      );\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring userContext in Kotlin with Orama\nDESCRIPTION: This snippet demonstrates how to set the userContext parameter in Kotlin when creating an answer session with Orama. This helps provide personalized responses based on user information.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\n\nval client = OramaClient(apiKey = \"\", endpoint = \"\" )\n\nval answerParams = AnswerParams(\n  oramaClient = client,\n  serializer = MyDoc.serializer(),\n  userContext = \"The user is a very skilled programmer but has never used Orama before.\"\n)\n\nval answerSession = AnswerSession(answerParams)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message History with JavaScript SDK\nDESCRIPTION: Example showing how to retrieve the full conversation history using the getMessages() method in the JavaScript SDK. It returns an array of message objects with role and content properties.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nconst messages = answerSession.getMessages();\n\nconsole.log(messages);\n\n// [\n//   { role: 'user', content: 'What is Orama?' },\n//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Deploying Orama Cloud Index (JavaScript)\nDESCRIPTION: Demonstrates how to deploy changes to an Orama Cloud index using the JavaScript SDK. It shows creating a CloudManager instance, accessing an index, and triggering a deployment.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { CloudManager } from \"@oramacloud/client\"\n\nconst oramaCloudManager = new CloudManager({\n  api_key: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,\n})\n\nconst myIndex = oramaCloudManager.index(\"my-index-id\")\n\nawait myIndex.deploy()\n```\n\n----------------------------------------\n\nTITLE: Document ID Generation in Orama\nDESCRIPTION: Example showing custom document ID generation component implementation. Demonstrates how to generate unique IDs for documents using either existing ID or timestamp.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n  },\n  components: {\n    getDocumentIndexId(doc) {\n      return doc.id ?? Date.now().toString();\n    },\n    afterInsert(_orama, _doc, id) {\n      console.log(id);\n    },\n  },\n});\n\n// This will print something like \"1679476550629\"\ninsert(movieDB, {\n  title: \"Harry Potter and the Philosopher's Stone\",\n  director: \"Chris Columbus\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Orama Instance with Custom ID\nDESCRIPTION: Demonstrates how to create an Orama instance with a custom identifier.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/create.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    word: \"string\",\n  },\n  id: \"my-orama-instance\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Default Functionality\nDESCRIPTION: Shows the implementation of a new component including both individual functions and a factory function for component creation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n+ import { IShiningDetector } from '../src/types.js'\n+\n+ export function isShining(shining: Record<string, number>, subject: string): number {\n+   return shining[subject] ?? 0\n+ }\n+\n+ export function createShiningDetector(): IShiningDetector {\n+   return { isShining }\n+ }\n+\n```\n\n----------------------------------------\n\nTITLE: Multi-Property Sorting with Orama Cloud Client in JavaScript\nDESCRIPTION: This snippet demonstrates how to sort search results by multiple properties using the Orama Cloud client in JavaScript. It shows sorting by two properties with independent order specifications.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await client.search({\n  term: \"prestige\",\n  sortBy: [\n    {\n      property: \"year\",\n      order: \"desc\"\n    },\n    {\n      property: \"meta.rating\",\n      order: \"desc\"\n    }\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Using Logger Plugin with Orama Instance\nDESCRIPTION: Demonstrates how to integrate and use a custom plugin with Orama instance, including creation, insertion, and search operations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/writing-your-own-plugins.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from \"@orama/orama\";\n\nfunction loggerPlugin() {\n  return {\n    name: \"logger\",\n    beforeSearch: (orama, query) => {\n      console.log(\n        `About to search for ${query.term} on Orama instance ${orama.id}`\n      );\n    },\n  };\n}\n\nconst orama = create({\n  id: \"my-instance\", // Remember, IDs are automatically generated if not provided\n  schema: {\n    name: \"string\",\n  },\n  plugins: [loggerPlugin()],\n});\n\ninsert(orama, { name: \"John\" });\nsearch(orama, { term: \"John\" });\n\n// Console logs: \"About to search for john on Orama instance my-instance\"\n```\n\n----------------------------------------\n\nTITLE: Aborting Answer Sessions with Kotlin SDK\nDESCRIPTION: Example showing how to abort an ongoing answer request using an abort handler in the Kotlin SDK. It demonstrates creating an AbortHandler and calling abort() after a delay.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_35\n\nLANGUAGE: kotlin\nCODE:\n```\nval myAbortHandler = AbortHandler()\n\nval answerSession = AnswerSession(answerParams, abortHandler = myAbortHandler)\n\nval answer = answerSession.ask(AskParams(\n  query = \"Query is Orama?\"\n))\n\ndelay(2000)\nmyAbortHandler.abort()\n```\n\n----------------------------------------\n\nTITLE: Streaming Answers with Kotlin SDK\nDESCRIPTION: Example of using the askStream() method to get streamed answers from the Orama Kotlin SDK. It takes the query parameters and a context, then provides updates through an incoming callback.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_30\n\nLANGUAGE: kotlin\nCODE:\n```\nval answer = answerSession.askStream(AskParams(\n  query = \"What is Orama?\"\n), this)\n\nanswer.incoming {\n  println(it)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interaction Type for Orama Answer Session\nDESCRIPTION: Defines the structure of an Interaction object used in Orama's Answer Session API. It includes properties such as interactionId, query, response, relatedQueries, sources, translatedQuery, aborted, and loading.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AnyDocument, AnyOrama, Nullable, Results, SearchParams } from \"@oramacloud/client\";\n\nexport type Interaction<T = AnyDocument> = {\n  interactionId: string,\n  query: string,\n  response: string,\n  relatedQueries: Nullable<string[]>,\n  sources: Nullable<Results<T>>,\n  translatedQuery: Nullable<SearchParams<AnyOrama>>,\n  aborted: boolean,\n  loading: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting a Snapshot with cURL\nDESCRIPTION: cURL example showing how to directly call the Orama Cloud REST API to create a snapshot of an index. This command sends a POST request with document data and authorization header.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/snapshot \\\n  -H \"authorization: Bearer $PRIVATE_API_KEY\" ]\n  -d \"[ { \\\"id\\\": \\\"1\\\", \\\"name\\\": \\\"John Doe\\\", \\\"age\\\": 30 }, { \\\"id\\\": \\\"2\\\", \\\"name\\\": \\\"Jane Doe\\\", \\\"age\\\": 25 } ]\"\n```\n\n----------------------------------------\n\nTITLE: Using Default English Stop-words in Orama (JavaScript)\nDESCRIPTION: This example shows how to use the default English stop-words list provided by the @orama/stopwords package. It imports the English stop-words and applies them to the Orama instance during creation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/text-analysis/stopwords.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { stopwords as englishStopwords } from \"@orama/stopwords/english\";\n\nconst db = create({\n  schema: {\n    author: \"string\",\n    quote: \"string\",\n  },\n  components: {\n    tokenizer: {\n      stopWords: englishStopwords,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Component Interface in TypeScript\nDESCRIPTION: Shows how to define a new interface for a component (ShiningDetector) and add it to the ObjectComponents interface. Demonstrates proper typing with SyncOrAsyncValue for async compatibility.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n+ interface IShiningDetector {\n+   isShining(): SyncOrAsyncValue<boolean>\n+ }\n\nexport interface ObjectComponents {\n  tokenizer: Tokenizer | TokenizerConfig\n  index: IIndex\n  documentsStore: IDocumentsStore\n+ shiningDetector: IShiningDetector\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results with Orama Cloud Client in PHP\nDESCRIPTION: This snippet shows how to sort search results using the Orama Cloud client in PHP. It demonstrates sorting by a single property with order specification.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Client;\nuse OramaCloud\\Client\\Query;\nuse OramaCloud\\Client\\QueryParams\\SortByOrder;\n\n$query = (new Query())\n    ->term('prestige')\n    ->sortBy('year' SortByOrder::DESC); // optional, default is \"ASC\"\n\n$results = $client->search($query);\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Plugin Example\nDESCRIPTION: Shows how to properly implement an async plugin using the async keyword for hook functions.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/writing-your-own-plugins.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function afterInsertPluginExample() {\n  return {\n    name: \"after-insert-plugin\",\n    afterInsert: async (orama, id, document) => {\n      console.log(\"Orama instance: \", orama);\n      console.log(\"Document id: \", id);\n      console.log(\"Document inserted: \", document);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using a partial threshold value for balanced results\nDESCRIPTION: This snippet demonstrates setting threshold to 0.6, which returns documents with all search terms plus 60% of documents with partial matches, offering a balance between precision and recall.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/threshold.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"slim fit\",\n  threshold: 0.6,\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Support Table for Latin Alphabet in Markdown\nDESCRIPTION: This snippet shows a markdown table listing the support for tokenization, stop-words, and stemming in various languages using the Latin alphabet in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Language       | Tokenizer | Stop-words | Stemmer |\n| -------------- | --------- | ---------- | ------- |\n| Danish         | â        | â         | â      |\n| Dutch          | â        | â         | â      |\n| English        | â        | â         | â      |\n| Finnish        | â        | â         | â      |\n| French         | â        | â         | â      |\n| German         | â        | â         | â      |\n| Hungarian      | â        | â         | â      |\n| Indonesian     | â        | â         | â      |\n| Irish          | â        | â         | â      |\n| Italian        | â        | â         | â      |\n| Norwegian      | â        | â         | â      |\n| Portuguese     | â        | â         | â      |\n| Romanian (*)   | â        | â         | â      |\n| Serbian (**)   | â        | â         | â      |\n| Slovenian      | â        | â         | â      |\n| Spanish        | â        | â         | â      |\n| Swedish        | â        | â         | â      |\n| Turkish        | â        | â         | â      |\n```\n\n----------------------------------------\n\nTITLE: Getting Related Queries with JavaScript SDK\nDESCRIPTION: Example showing how to request related queries when asking a question in the JavaScript SDK. It sets up an event listener for onRelatedQueries and specifies howMany related queries to retrieve and in what format.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst answerSession = orama.createAnswerSession({\n  events: {\n    onRelatedQueries: (relatedQueries) => {\n      console.log(relatedQueries);\n      // [\"How Orama works\", \"Why Orama is the best\", \"Vector search with Orama\"]\n    },\n  }\n});\n\nawait answerSession.ask({\n  term: \"What is Orama?\",\n  related: {\n    howMany: 3, // How many related queries you want to get. Maximum is 5.\n    format: 'query'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Sample Movie Data Structure for Orama Schema\nDESCRIPTION: This example shows a sample movie data structure that would be indexed in Orama. It includes various property types like strings, numbers, booleans, and arrays.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/working-with-indexes/searchable-schema.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"Avatar\",\n    \"director\": \"James Cameron\",\n    \"description\": \"A paraplegic marine dispatched to the moon Pandora on a unique mission becomes torn between following his orders and protecting the world he feels is his home.\",\n    \"rating\": 7.8,\n    \"year\": 2009,\n    \"isFavorite\": true,\n    \"genres\": [\"Action\", \"Adventure\", \"Fantasy\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Interaction Struct for Orama Answer Session in Swift\nDESCRIPTION: Defines the structure of an Interaction object for Swift implementation of Orama's Answer Session API. It includes properties such as interactionId, query, response, relatedQueries, sources, translatedQuery, aborted, and loading.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_15\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nstruct Interaction<T: Codable> {\n  var interactionId: String\n  var query: String\n  var response: String\n  var relatedQueries: [String]?\n  var sources: SearchResults<T>?\n  var translatedQuery: ClientSearchParams?\n  var aborted: Bool = false\n  var loading: Bool\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Database with Italian Stop-words in JavaScript\nDESCRIPTION: This snippet demonstrates how to create an Orama database instance with Italian stop-words. It imports the necessary functions and stop-words, then configures the database schema with a tokenizer that uses the imported stop-words.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/stopwords/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { stopwords as italianStopwords } from '@orama/stopwords/italian'\n\nconst db = create({\n  schema: {\n  components: {\n    tokenizer: {\n      stopwords: italianStopwords\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing Orama Cloud Index (Kotlin)\nDESCRIPTION: Shows how to clear all data from an Orama Cloud index using the Kotlin SDK. It demonstrates creating a CloudManager, defining a document structure, and triggering a clear operation within a coroutine scope.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_23\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.CloudManager\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class OramaDoc (\n  let id: String\n  let name: String\n  let age: Int\n)\n\nval cloudManager = CloudManager(apiKey = \"YOUR_API_KEY\")\nval indexManager = cloudManager.index<OramaDoc>(indexId)\n\nrunBlocking {\n  index.clear()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding User Data to Answer Session (Object format)\nDESCRIPTION: Shows how to provide user data as an object when making an answer request. This example demonstrates setting the user's programming experience level.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/providing-additional-knowledge.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst answer = await answerSession.ask({\n  term: \"What is Orama?\",\n  userData: {\n    userLevel: \"beginner\"\n  }\n});\n```\n\nLANGUAGE: swift\nCODE:\n```\nlet answer = try await answerSession.ask(params: AnswerParams.AskParams(\n  query: \"What is Orama?\",\n  userData: \"{ userLevel: \\\"beginner\\\" }\",\n  related: nil\n))\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nprint(\"coming soon\")\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Logger Plugin in Orama\nDESCRIPTION: Example of a simple logger plugin that logs search operations before they are executed. Shows basic plugin structure with name and hook function.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/writing-your-own-plugins.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nfunction loggerPlugin() {\n  return {\n    name: \"logger\",\n    beforeSearch: (orama, query) => {\n      console.log(\n        `About to search for ${query.term} on Orama instance ${orama.id}`\n      );\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Support Table for Armenian Alphabet in Markdown\nDESCRIPTION: This snippet presents a markdown table showing the support for tokenization, stop-words, and stemming in Armenian language using the Armenian alphabet in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/index.mdx#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Tokenizer | Stop-words | Stemmer |\n| -------- | --------- | ---------- | ------- |\n| Armenian | â        | â         | â      |\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Last Answer in Orama Sessions in Kotlin\nDESCRIPTION: This code demonstrates how to regenerate the last answer in an Orama answer session using Kotlin. It shows asking a question with AskParams, regenerating the answer, and accessing the conversation messages.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_55\n\nLANGUAGE: kotlin\nCODE:\n```\nvar answer = answerSession.ask(AskParams(\n  query = \"What is Orama?\"\n))\n\nanswer = answerSession.regenerateLast()\n\nval messages = answerSession.getMessages()\n\n// [\n//   { role: 'user', content: 'What is Orama?' },\n//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Static State in Orama Answer Session\nDESCRIPTION: Demonstrates how to access the static state of an Orama Answer Session using the state getter. This provides a snapshot of the current state without subscribing to real-time updates.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst answerSession = orama.createAnswerSession();\n\nawait answerSession.ask({\n  term: \"What is Orama?\",\n});\n\nconsole.log(answerSession.state);\n\n// [{\n//   interactionId: \"clyru4rl8000008l062b26fk1\",\n//   query: \"What is Orama?\",\n//   response: \"Orama is a next-generation answer engine [...]\",\n//   relatedQueries: [\"How Orama works\", \"Why Orama is the best\", \"Vector search with orama\"],\n//   sources: [{\n//     count: 15,\n//     elapsed: { formatted: \"78ms\", raw: 78000000 },\n//     hits: [\n//       { document: { title: \"What is Orama\", ... } },\n//       { document: { title: \"How Orama works\", ... } },\n//       { document: { title: \"Why Orama is the best\", ... } }\n//     ]\n//   }],\n//   translatedQuery: { term: \"What is Orama?\" },\n//   aborted: false,\n//   loading: false\n// }]\n```\n\n----------------------------------------\n\nTITLE: Importing Search Function for Vector Search in Orama\nDESCRIPTION: Imports the search function from the @orama/orama package, which is used for performing vector search operations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/vector-search.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { search } from \"@orama/orama\";\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Operations with Swift SDK\nDESCRIPTION: This example shows how to check for pending operations in an Orama Cloud index using the Swift SDK. It defines a document structure that matches the index schema, initializes a CloudManager with an API key, and then uses the hasPendingOperations method to check for pending operations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_26\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\n// This is an example document. It should reflect your index schema.\nstruct OramaDoc: Codable {\n  let id: String\n  let name: String\n  let age: Int\n}\n\nlet cloudManager = CloudManager(apiKey: \"YOUR_API_KEY\")\nlet indexManager = cloudManager.index<OramaDoc>(\"my-index-id\")\n\nlet hasPendingOperations = await try indexManager.hasPendingOperations()\n\nprint(hasPendingOperations) // true or false\n```\n\n----------------------------------------\n\nTITLE: Clearing the Orama Answer Session in Swift\nDESCRIPTION: This code shows how to clear an Orama answer session in Swift, which resets all conversation messages to an empty array.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_59\n\nLANGUAGE: swift\nCODE:\n```\nanswerSession.clearSession()\n```\n\n----------------------------------------\n\nTITLE: Implementing afterUpdateMultiple Plugin in Orama\nDESCRIPTION: Example implementation of a plugin using the afterUpdateMultiple hook. The hook receives the Orama instance and updated document IDs as arguments, executing after multiple documents are updated.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/writing-your-own-plugins.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction afterUpdateMultiplePluginExample() {\n  return {\n    name: \"after-update-multiple-plugin\",\n    afterUpdateMultiple: (orama, ids) => {\n      console.log(\"Orama instance: \", orama);\n      console.log(\"Document IDs updated: \", ids);\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Document IDs in Orama\nDESCRIPTION: This snippet illustrates how Orama automatically uses the 'id' field of a document if present. It shows the creation of a database schema with an 'id' field and the insertion of a document with a custom ID.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/insert.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, search } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    id: \"string\",\n    author: \"string\",\n    quote: \"string\",\n  },\n});\n\ninsert(db, {\n  id: \"73cbcc79-2203-49b8-bb52-60d8e9a66c5f\",\n  author: \"Fernando Pessoa\",\n  quote: \"I wasn't meant for reality, but life came and found me\",\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Support Table for Chinese Characters in Markdown\nDESCRIPTION: This snippet presents a markdown table showing the support for tokenization, stop-words, and stemming in Chinese (Mandarin) and Japanese languages using Chinese characters (logographic script) in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/index.mdx#2025-04-11_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Language           | Tokenizer | Stop-words | Stemmer |\n| ------------------ | --------- | ---------- | ------- |\n| Chinese (Mandarin) | â        | â         | â      |\n| Japanese           | â        | â         | â      |\n```\n\n----------------------------------------\n\nTITLE: Sorting Search Results with Orama Cloud Client in Swift\nDESCRIPTION: This snippet shows how to sort search results using the Orama Cloud client in Swift. It demonstrates sorting by a single property with order specification.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet searchQuery = ClientSearchParams\n  .builder(term: \"prestige\", mode: .fulltext)\n  .sortBy([\n    ClientSearchParams.SortByDirective(\n      property: \"year\",\n      order: .asc\n    )\n  ])\n  .build()\n\nlet results: SearchResults<MyDoc> = try await client.search(query: searchQuery)\n```\n\n----------------------------------------\n\nTITLE: Deploying Orama Cloud Index (Swift)\nDESCRIPTION: Shows how to deploy changes to an Orama Cloud index using the Swift SDK. It demonstrates creating a CloudManager, defining a document structure, and triggering a deployment.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_17\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\n// This is an example document. It should reflect your index schema.\nstruct OramaDoc: Codable {\n  let id: String\n  let name: String\n  let age: Int\n}\n\nlet cloudManager = CloudManager(apiKey: \"YOUR_API_KEY\")\nlet indexManager = cloudManager.index<OramaDoc>(\"my-index-id\")\n\nawait try indexManager.deploy()\n```\n\n----------------------------------------\n\nTITLE: Accessing Static State in Orama Answer Session with Swift\nDESCRIPTION: Shows how to access the static state of an Orama Answer Session in Swift using the getState() method. This provides a snapshot of the current state without subscribing to real-time updates.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_21\n\nLANGUAGE: swift\nCODE:\n```\nlet answerSession = AnswerSession(params: answerParams)\n\ntry await answerSession.ask(params: AnswerParams.AskParams(\n  query: \"What is Orama?\",\n  userData: nil,\n  related: nil\n))\n\nprint(answerSession.getState())\n\n// [{\n//   interactionId: \"clyru4rl8000008l062b26fk1\",\n//   query: \"What is Orama?\",\n//   response: \"Orama is a next-generation answer engine [...]\",\n//   relatedQueries: [\"How Orama works\", \"Why Orama is the best\", \"Vector search with orama\"],\n//   sources: [{\n//     count: 15,\n//     elapsed: { formatted: \"78ms\", raw: 78000000 },\n//     hits: [\n//       { document: { title: \"What is Orama\", ... } },\n//       { document: { title: \"How Orama works\", ... } },\n//       { document: { title: \"Why Orama is the best\", ... } }\n//     ]\n//   }],\n//   translatedQuery: { term: \"What is Orama?\" },\n//   aborted: false,\n//   loading: false\n// }]\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Vector Property for Search\nDESCRIPTION: Shows how to override the default vector property when performing a search operation by explicitly specifying an alternative property in the search options.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-secure-proxy.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst resultsVector = await search(db, {\n  mode: 'vector',\n  term: 'Videogame for little kids with a passion about ice cream',\n  vector: {\n    property: 'myAlternativeProperty'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Tokenizer Interface Definition\nDESCRIPTION: TypeScript interface definition for creating custom tokenizers in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Tokenizer {\n  language: string;\n  normalizationCache: Map<string, string>;\n  tokenize: (\n    raw: string,\n    language?: string,\n    prop?: string\n  ) => string[] | Promise<string[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing the Orama Answer Session in Kotlin\nDESCRIPTION: This code shows how to clear an Orama answer session in Kotlin, which resets all conversation messages to an empty array.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_60\n\nLANGUAGE: kotlin\nCODE:\n```\nanswerSession.clearSession()\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Database with PT15 Plugin\nDESCRIPTION: Example showing how to create an Orama database instance with the PT15 plugin enabled. The code demonstrates setting up a schema with a description field and incorporating the plugin.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-pt15/README.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { pluginPT15 } from '@orama/plugin-pt15'\n\nconst db = await create({\n  schema: {\n    description: 'string',\n  },\n  plugins: [ pluginPT15() ],\n})\n```\n\n----------------------------------------\n\nTITLE: Installing PT15 Plugin for Orama Search in Node.js\nDESCRIPTION: Shows how to install the PT15 plugin using a Node.js package manager. The specific package manager command is not shown in the code snippet.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-pt15.mdx#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n<Install pkg=\"@orama/plugin-pt15\" />\n```\n\n----------------------------------------\n\nTITLE: Deleting Documents from Orama Cloud Index (cURL)\nDESCRIPTION: Shows how to delete documents from an Orama Cloud index using cURL. It demonstrates the HTTP request format for the notify API endpoint, including the authorization header and JSON payload for removal.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/notify \\\n  -H \"authorization: Bearer $PRIVATE_API_KEY\" \\\n  -d \"{ \\\"remove\\\": [\\\"2\\\"] }\"\n```\n\n----------------------------------------\n\nTITLE: Creating React Component Page\nDESCRIPTION: Example of creating a basic React component page with Layout wrapper that renders a heading and paragraph. The file should be placed in src/pages directory and will be automatically routed.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/create-a-page.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Layout from '@theme/Layout';\n\nexport default function MyReactPage() {\n  return (\n    <Layout>\n      <h1>My React page</h1>\n      <p>This is a React page</p>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Searching Japanese Text with Orama\nDESCRIPTION: This code snippet demonstrates how to create an Orama database with Japanese language support, insert Japanese city names, and perform a search. It uses a custom Japanese tokenizer and includes Japanese stopwords.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/using-japanese-with-orama.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from \"@orama/orama\";\nimport { createTokenizer } from '@orama/tokenizers/japanese'\nimport { stopwords as japaneseStopwords } from \"@orama/stopwords/japanese\";\n\nconst db = create({\n  schema: {\n    name: \"string\",\n  },\n  components: {\n    tokenizer: createTokenizer({\n      stopWords: japaneseStopwords,\n    }),\n  },\n});\n\ninsert(db, { name: \"æ±äº¬\" }); // Tokyo\ninsert(db, { name: \"å¤§éª\" }); // Osaka\ninsert(db, { name: \"äº¬é½\" }); // Kyoto\ninsert(db, { name: \"æ¨ªæµ\" }); // Yokohama\ninsert(db, { name: \"æ­å¹\" }); // Sapporo\ninsert(db, { name: \"ä»å°\" }); // Sendai\ninsert(db, { name: \"åºå³¶\" }); // Hiroshima\ninsert(db, { name: \"æ±äº¬å¤§å­¦\" }); // University of Tokyo\ninsert(db, { name: \"äº¬é½å¤§å­¦\" }); // Kyoto University\ninsert(db, { name: \"å¤§éªå¤§å­¦\" }); // Osaka University\n\nconst results = search(db, {\n  term: \"å¤§éª\",\n  threshold: 0,\n});\n\nconsole.log(results);\n\n// {\n//   \"elapsed\": {\n//     \"raw\": 89554625,\n//     \"formatted\": \"89ms\"\n//   },\n//   \"hits\": [\n//     {\n//       \"id\": \"36666208-3\",\n//       \"score\": 4.210224897276653,\n//       \"document\": {\n//         \"name\": \"å¤§éª\"\n//       }\n//     },\n//     {\n//       \"id\": \"36666208-10\",\n//       \"score\": 1.9335268122510698,\n//       \"document\": {\n//         \"name\": \"å¤§éªå¤§å­¦\"\n//       }\n//     }\n//   ],\n//   \"count\": 2\n// }\n```\n\n----------------------------------------\n\nTITLE: Sample Schema for Orama Cloud Search\nDESCRIPTION: This JSON snippet defines a sample schema for Orama Cloud search, including various data types and nested properties.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"string\",\n  \"year\": \"number\",\n  \"inPromotion\": \"boolean\",\n  \"meta\": {\n    \"tag\": \"string\",\n    \"rating\": \"number\",\n    \"favorite\": \"boolean\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Orama Cloud Index (PHP)\nDESCRIPTION: Shows how to deploy changes to an Orama Cloud index using the PHP SDK. It demonstrates creating an IndexManager instance and triggering a deployment.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Manager\\IndexManager;\n$indexManager = new IndexManager(\"my-index-id\", PRIVATE_API_KEY);\n\n$indexManager->deploy();\n```\n\n----------------------------------------\n\nTITLE: Initializing Orama Search Engine with Custom Tokenizer in JavaScript\nDESCRIPTION: This code snippet demonstrates how to create an Orama database instance with a custom Mandarin tokenizer. It imports the necessary functions from Orama and the tokenizers package, then configures the database schema and components.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/tokenizers/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from '@orama/orama'\nimport { createTokenizer } from '@orama/tokenizers/mandarin'\n\nconst db = await create({\n  schema: {\n    myProperty: 'string',\n    anotherProperty: 'number'\n  },\n  components: {\n    tokenizer: await createTokenizer()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Stop-words in Orama (JavaScript)\nDESCRIPTION: This snippet demonstrates how to create an Orama instance with custom stop-words. It defines a schema and enables stop-word removal by specifying an array of words to be filtered out during tokenization.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/text-analysis/stopwords.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    author: \"string\",\n    quote: \"string\",\n  },\n  components: {\n    tokenizer: {\n      stopWords: [\"foo\", \"bar\"], // Enable custom stop-words\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Plugin Embeddings via NPM\nDESCRIPTION: Command to install the main Orama Plugin Embeddings package using npm.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-embeddings/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @orama/plugin-embeddings\n```\n\n----------------------------------------\n\nTITLE: Faceted Search Results Structure\nDESCRIPTION: Example of the response structure from a faceted search query, showing counts and values for different facet types.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/facets.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  elapsed: ...,\n  count: ...,\n  hits: { ... },\n  facets: {\n    'categories.first': {\n      count: 14,\n      values: {\n        'Action': 4,\n        'Adventure': 3,\n        'Comedy': 2,\n      }\n    },\n    'categories.second': {\n      count: 14,\n      values: {\n        'Cars': 4,\n        'Racing': 3,\n      }\n    },\n    rating: {\n      count: 3,\n      values: {\n        '0-3': 5,\n        '3-7': 15,\n        '7-10': 80,\n      }\n    },\n    isFavorite: {\n      count: 2,\n      values: {\n        'true': 5,\n        'false': 95,\n      }\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Orama Cloud Index (Kotlin)\nDESCRIPTION: Demonstrates deploying changes to an Orama Cloud index using the Kotlin SDK. It shows creating a CloudManager, defining a document structure, and triggering a deployment within a coroutine scope.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.CloudManager\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class OramaDoc (\n  let id: String\n  let name: String\n  let age: Int\n)\n\nval cloudManager = CloudManager(apiKey = \"YOUR_API_KEY\")\nval indexManager = cloudManager.index<OramaDoc>(indexId)\n\nrunBlocking {\n  index.deploy()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Markdown Document in Docusaurus\nDESCRIPTION: This snippet shows how to create a simple Markdown document for Docusaurus. It demonstrates the basic structure of a document with a title and some formatted text.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/create-a-document.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Plugin in Astro Configuration\nDESCRIPTION: This snippet demonstrates how to configure the Orama plugin in the Astro configuration file. It shows setting up a database with path matching, language specification, and content selectors.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-astro/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// In `astro.config.mjs`\nimport orama from '@orama/plugin-astro'\n\n// https://astro.build/config\nexport default defineConfig({\n  integrations: [\n    orama({\n      // We can generate more than one DB, with different configurations\n      mydb: {\n        // Required. Only pages matching this path regex will be indexed\n        pathMatcher: /blog\\/[0-9]{4}\\/[0-9]{2}\\/[0-9]{2}\\/.+$/,\n\n        // Optional. 'english' by default\n        language: 'spanish',\n\n        // Optional. ['body'] by default. Use it to constraint what is used to\n        // index a page.\n        contentSelectors: ['h1', 'main']\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Orama in Deno\nDESCRIPTION: Shows how to import Orama in Deno using either CDN URLs or npm specifiers.\nSOURCE: https://github.com/oramasearch/orama/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, search, insert } from 'npm:@orama/orama'\n```\n\n----------------------------------------\n\nTITLE: Default Tokenizer Customization\nDESCRIPTION: Shows how to customize the default Orama tokenizer with specific language and stemming options.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { tokenizer as defaultTokenizer } from \"@orama/orama/components\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n  },\n  components: {\n    tokenizer: await defaultTokenizer.createTokenizer({\n      language: \"english\",\n      stemming: false,\n    }),\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Memory Optimization for Sorting in Orama\nDESCRIPTION: This example demonstrates how to optimize memory usage by specifying properties that should not be sortable. By declaring 'unsortableProperties', Orama won't create in-memory sort indexes for those fields.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/sorting.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    title: \"string\",\n    year: \"number\",\n    inPromotion: \"boolean\",\n    meta: {\n      tag: \"string\",\n      rating: \"number\",\n      favorite: \"boolean\",\n    },\n  },\n  sortBy: {\n    unsortableProperties: [\"year\", \"meta.tag\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Polygon Filter Placeholder in Kotlin\nDESCRIPTION: Placeholder for upcoming Kotlin implementation of polygon filtering in Orama Search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_33\n\nLANGUAGE: kotlin\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Importing Orama in Browser Modules\nDESCRIPTION: Demonstrates how to import Orama directly in a browser using ES modules via CDN.\nSOURCE: https://github.com/oramasearch/orama/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <script type=\"module\">\n      import { create, insert, search } from 'https://cdn.jsdelivr.net/npm/@orama/orama@latest/+esm'\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Documentation Version in Docusaurus\nDESCRIPTION: This command creates a version 1.0 of the project documentation. It copies the 'docs' folder into 'versioned_docs/version-1.0' and creates a 'versions.json' file.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-extras/manage-docs-versions.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version 1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Orama with npm\nDESCRIPTION: Shows how to install the Orama search engine using npm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/orama/README.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @orama/orama\n```\n\n----------------------------------------\n\nTITLE: Importing Orama Client in Deno\nDESCRIPTION: Shows how to import the OramaClient class in a Deno environment using the npm namespace.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/javascript-sdk.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"npm:@oramacloud/client\";\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Document IDs\nDESCRIPTION: Generates a unique identifier string for documents.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/utilities.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { uniqueId } from \"@orama/orama/internals\";\n\nawait uniqueId(); // 37149225-243\n```\n\n----------------------------------------\n\nTITLE: Disabling Sort Functionality in Orama\nDESCRIPTION: This example demonstrates how to completely disable the sorting functionality in Orama. This can be useful to reduce memory usage when sorting is not required for the application.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/sorting.mdx#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    // The schema\n  },\n  sort: {\n    enabled: false,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Performing Vector Search with useSearch Hook in React\nDESCRIPTION: Demonstrates how to use the useSearch hook with vector search mode to find semantically similar content in an Orama Cloud index with customizable similarity threshold.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/react-sdk.mdx#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useSearch } from \"@oramacloud/react-client\";\n\nfunction Search() {\n  const { results, error } = useSearch({\n    term: \"Super Mario videogame\",\n    mode: \"vector\",\n    similarity: 0.8, // Minimum similarity, between 0 and 1. Default is 0.8 (80% similar).\n    limit: 5, // How many results to return. Default is 10.\n  });\n\n  return (\n    <>\n      {results.hits.map((hit) => (\n        <div key={hit.id}>\n          <pre> {JSON.stringify(hit.document, null, 2)} </pre>\n        </div>\n      ))}\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Asking Questions with PHP SDK\nDESCRIPTION: Placeholder for the PHP SDK implementation of the ask functionality, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Extending Default Stop-words List in Orama (JavaScript)\nDESCRIPTION: This snippet illustrates how to extend the default stop-words list for a specific language (Italian in this case) by adding custom words. It combines the imported stop-words with additional terms.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/text-analysis/stopwords.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\nimport { stopwords as italianStopwords } from \"@orama/stopwords/italian\";\n\nconst db = create({\n  schema: {\n    author: \"string\",\n    quote: \"string\",\n  },\n  components: {\n    tokenizer: {\n      stopWords: [...italianStopwords, \"ciao\", \"buongiorno\"],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom First-Character Tokenizer Implementation\nDESCRIPTION: Example of implementing a simple custom tokenizer that only indexes the first character of each string.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n  },\n  components: {\n    tokenizer: {\n      language: \"english\",\n      normalizationCache: new Map(),\n      tokenize(raw) {\n        return raw[0];\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Version Dropdown to Docusaurus Navigation\nDESCRIPTION: This code snippet modifies the 'docusaurus.config.js' file to add a version dropdown to the navbar. It allows users to navigate between different versions of the documentation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-extras/manage-docs-versions.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'docsVersionDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Searchbox and Search Button in Docusaurus\nDESCRIPTION: Configure the appearance and behavior of the Orama searchbox and search button components by passing props through the plugin configuration.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-docusaurus.mdx#2025-04-11_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nplugins: [\n\t  [\n\t    \"@orama/plugin-docusaurus-v3\",\n\t    {\n\t      searchbox: {\n\t        placeholder: \"Search...\",\n\t      }\n\t      searchButton: {\n\t        text: \"Click here to search...\"\n\t      }\n\t    },\n\t  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Clearing Orama Cloud Index (cURL)\nDESCRIPTION: Demonstrates how to clear all data from an Orama Cloud index using cURL. It shows the HTTP request format for the snapshot API endpoint with an empty array payload, effectively clearing the index.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/snapshot \\\n  -H \"authorization: Bearer $PRIVATE_API_KEY\" ]\n  -d \"[]\"\n```\n\n----------------------------------------\n\nTITLE: Extending Data Interface for Component Storage\nDESCRIPTION: Demonstrates how to add data storage for a new component by extending the Data interface and updating component interfaces with proper typing.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n+ export interface IShiningDetector {\n+   isShining(shining: Record<string, number>): SyncOrAsyncValue<number>\n+ }\n\nexport interface ObjectComponents {\n  tokenizer: Tokenizer | TokenizerConfig\n  index: IIndex\n  documentsStore: IDocumentsStore\n+ shiningDetector: IShiningDetector\n}\n\ninterface Data<I extends OpaqueIndex, D extends OpaqueDocumentStore> {\n  index: I\n  docs: D\n+ shining: Record<string, number>\n}\n```\n\n----------------------------------------\n\nTITLE: Search with multiple keywords showing unexpected results\nDESCRIPTION: This example demonstrates searching for \"regular fit\" and getting all four documents in results, even though only one document contains both words exactly as specified.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/threshold.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"regular fit\",\n});\n\n// results.count = 4\n```\n\n----------------------------------------\n\nTITLE: Aborting Answer Sessions with Swift SDK\nDESCRIPTION: Placeholder for the Swift SDK implementation of the abortAnswer functionality, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_34\n\nLANGUAGE: swift\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Merged Results Response Format\nDESCRIPTION: Shows the JSON response structure when mergeResults is set to true, combining results from all indexes into a single response object.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/multi-index-search.mdx#2025-04-11_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elapsed\": ...,\n  \"count\": ...,\n  \"hits\": { ... },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n Support in Docusaurus\nDESCRIPTION: Configures the Docusaurus i18n settings to support English and French locales. Sets English as the default locale while enabling French as an additional language option.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  i18n: {\n    defaultLocale: 'en',\n    locales: ['en', 'fr'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Import for Parsedoc Plugin\nDESCRIPTION: Example showing the correct way to import types from the parsedoc plugin in TypeScript projects.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-parsedoc.mdx#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { populateFromGlob } from \"@orama/plugin-data-parsedoc\";\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Operations with cURL Command\nDESCRIPTION: This example shows how to check for pending operations in an Orama Cloud index using a direct API call with cURL. Note that the API endpoint will be renamed in the future, so using the SDK is recommended.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\n# Beware: this API will be renamed to \"/has-pending-operations\" in the future.\n# We recommend using the SDK instead.\ncurl https://api.oramasearch.com/api/v1/webhooks/$INDEX_ID/has-data \\\n  -H \"authorization: Bearer $PRIVATE_API_KEY\" ]\n```\n\n----------------------------------------\n\nTITLE: Defining Interaction Data Class for Orama Answer Session in Kotlin\nDESCRIPTION: Defines the structure of an Interaction object for Kotlin implementation of Orama's Answer Session API. It includes properties such as interactionId, query, response, relatedQueries, sources, translatedQuery, aborted, and loading.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\n\ndata class Interaction<T> (\n  val interactionId: String,\n  val query: String,\n  val response: String,\n  val relatedQueries: List<String>?,\n  val sources: List<Hit<T>>,\n  val translatedQuery: Map<String, JsonElement>,\n  val aborted: Boolean = false,\n  val loading: Boolean\n)\n```\n\n----------------------------------------\n\nTITLE: Searching with default threshold behavior\nDESCRIPTION: This snippet shows a basic search for the term \"t-shirt\" without specifying a threshold, returning all four documents since they all contain this keyword.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/threshold.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = search(db, {\n  term: \"t-shirt\",\n});\n\n// results.count = 4\n```\n\n----------------------------------------\n\nTITLE: Batch Removal of Multiple Documents from an Orama Database\nDESCRIPTION: This snippet demonstrates how to efficiently remove multiple documents from an Orama database using the 'removeMultiple' function. It shows defining an array of document objects, inserting them with 'insertMultiple', and then removing them with 'removeMultiple' using a batch size to prevent blocking the event loop.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/remove.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst docs = [\n  {\n    title: \"The prestige\",\n    director: \"Christopher Nolan\",\n    plot: \"Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.\",\n    year: 2006,\n    isFavorite: true,\n  },\n  {\n    title: \"Big Fish\",\n    director: \"Tim Burton\",\n    plot: \"Will Bloom returns home to care for his dying father, who had a penchant for telling unbelievable stories. After he passes away, Will tries to find out if his tales were really true.\",\n    year: 2004,\n    isFavorite: true,\n  },\n  {\n    title: \"Harry Potter and the Philosopher's Stone\",\n    director: \"Chris Columbus\",\n    plot: \"Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.\",\n    year: 2001,\n    isFavorite: false,\n  },\n];\n\nconst ids = insertMultiple(movieDB, docs, 500);\nremoveMultiple(movieDB, ids, 500);\n```\n\n----------------------------------------\n\nTITLE: Python Placeholder for Answer Session with Orama\nDESCRIPTION: This is a placeholder for the upcoming Python implementation of creating an answer session with Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Schema Validation Component in Orama\nDESCRIPTION: Implementation of a custom schema validation component that validates documents against a defined schema. Shows how to validate string properties for title and director fields.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n  },\n  components: {\n    validateSchema(doc) {\n      return typeof doc.name === \"string\" && typeof doc.director === \"string\";\n    },\n  },\n});\n\n// This will throw\ninsert(movieDB, {\n  title: \"Harry Potter and the Philosopher's Stone\",\n  director: 42,\n});\n```\n\n----------------------------------------\n\nTITLE: String Filtering Implementation\nDESCRIPTION: Examples of string filtering in different programming languages using exact matching\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = client.search({\n  term: \"prestige\",\n  where: {\n    tag: \"new\",\n  },\n});\n```\n\nLANGUAGE: swift\nCODE:\n```\nprint(\"coming soon\")\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nval searchParams = SearchParams.builder(\n      term = \"prestige\",\n    )\n    .where(listOf(\n        Condition(\"tag\", ConditionType.Equals(\"new\"))\n    ))\n    .build()\n\nval results = client.search(searchParams, MyDoc.serializer())\n```\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\nLANGUAGE: php\nCODE:\n```\nuse OramaCloud\\Client;\nuse OramaCloud\\Client\\Query;\nuse OramaCloud\\Client\\QueryParams\\WhereOperator;\n\n$query = (new Query())\n  ->term('prestige')\n  ->where('tag', WhereOperator::EQ, 'new');\n\n$results = $client->search($query);\n```\n\n----------------------------------------\n\nTITLE: Building Localized Site\nDESCRIPTION: Commands for building the Docusaurus site either for a specific locale (French) or for all configured locales simultaneously.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build -- --locale fr\n\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing TensorFlow.js WebGL Backend\nDESCRIPTION: Command to install the recommended TensorFlow.js backend for browser environments.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-embeddings/README.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @tensorflow/tfjs-backend-webgl\n```\n\n----------------------------------------\n\nTITLE: Formatting Bytes to Human Readable String\nDESCRIPTION: Converts a BigInt byte value into a human-readable string format.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/utilities.mdx#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { formatBytes } from \"@orama/orama/internals\";\n\nawait formatBytes(1024); // '1 KB'\n```\n\n----------------------------------------\n\nTITLE: Optional Complex Property Configuration for Orama Search\nDESCRIPTION: This JSON snippet demonstrates a more complex configuration for specifying search properties in Orama. It includes various data types such as strings, numbers, and arrays, as well as nested objects.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/remote-json.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"string\",\n  \"description\": \"string\",\n  \"category\": \"string\",\n  \"price\": \"number\",\n  \"rating\": \"number\",\n  \"stock\": \"number\",\n  \"tags\": \"string[]\",\n  \"brand\": \"string\",\n  \"sku\": \"string\",\n  \"meta\": {\n    \"barcode\": \"string\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling the Analytics Plugin in Orama\nDESCRIPTION: This example shows how to explicitly disable the Analytics plugin by setting the 'enabled' flag to false in the configuration. This is useful for disabling analytics in development environments.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-analytics.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Orama } from '@orama/core';\nimport { pluginAnalytics } from '@orama/plugin-analytics';\n\nconst db = create({\n  schema: { name: 'string' } as const,\n  plugins: [\n    pluginAnalytics({\n      apiKey: 'your-api-key',\n      indexId: 'your-index-id',\n      enabled: false, // <--- disable analytics\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: React ShowcaseImage Component Implementation\nDESCRIPTION: JSX code demonstrating the usage of a ShowcaseImage component to display file import options for JSON and CSV files in the Orama Cloud interface.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/static-files/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ShowcaseImage\n  entries={[\n    {\n      thumbnail: import('../../../../../assets/data-sources/json-file.jpg'),\n      href: '/cloud/data-sources/static-files/json-file',\n      title: 'JSON File',\n      description: 'Import a JSON file from your computer.',\n    },\n    {\n      thumbnail: import('../../../../../assets/data-sources/csv-file.jpg'),\n      href: '/cloud/data-sources/static-files/csv-file',\n      title: 'CSV File',\n      description: 'Import a CSV file from your computer.',\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Example Strapi Document Structure\nDESCRIPTION: This JSON snippet illustrates the structure of a document in Strapi with nested objects, which may need transformation for indexing in Orama Cloud.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/native-integrations/strapi.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": 1,\n  \"owner\": \"John\",\n  \"cars\": [\n    {\n      \"brand\": \"Toyota\",\n      \"model\": \"Corolla\"\n    },\n    {\n      \"brand\": \"Ford\",\n      \"model\": \"Focus\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Localized Development Server\nDESCRIPTION: Command to start the Docusaurus development server with French locale.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start -- --locale fr\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Plugin PT15 via NPM\nDESCRIPTION: Command to install the Orama Plugin PT15 package using npm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-pt15/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @orama/plugin-pt15\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Vue Components via npm\nDESCRIPTION: Command to install Orama Vue Components using npm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @orama/vue-components\n```\n\n----------------------------------------\n\nTITLE: Multiple String Values Filtering\nDESCRIPTION: Example of filtering with multiple string values\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst results = await client.search({\n  term: \"prestige\",\n  where: {\n    tag: [\"favorite\", \"new\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Limited Results Search in Orama\nDESCRIPTION: Shows how to limit search results to a specific number of documents. This example returns only the first document containing 'Chris' in the director field.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst searchResult = search(movieDB, {\n  term: \"Chris\",\n  properties: [\"director\"],\n  limit: 1,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Angular Components via yarn\nDESCRIPTION: Command to install Orama Angular Components using yarn package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @orama/angular-components\n```\n\n----------------------------------------\n\nTITLE: Inserting a Snapshot with Kotlin SDK\nDESCRIPTION: Kotlin example showing how to use the Orama Cloud SDK to create a snapshot of an index. The example demonstrates defining a serializable document class and uploading a list of documents.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport com.orama.client.CloudManager\nimport kotlinx.coroutines.runBlocking\nimport kotlinx.serialization.Serializable\n\n@Serializable\ndata class OramaDoc (\n  let id: String\n  let name: String\n  let age: Int\n)\n\nval cloudManager = CloudManager(apiKey = \"YOUR_API_KEY\")\nval indexManager = cloudManager.index<Product>(indexId)\n\nrunBlocking {\n  val snapshot = index.snapshot(listOf(\n    OramaDoc(id = \"1\", name = \"John Doe\", age = 30),\n    OramaDoc(id = \"2\", name = \"Jane Doe\", age = 25)\n  ), OramaDoc.serializer())\n}\n```\n\n----------------------------------------\n\nTITLE: Using onStateChange Event in Orama Answer Session with Kotlin\nDESCRIPTION: Illustrates how to use the onStateChange event in Kotlin implementation of Orama's Answer Session API. The event is triggered whenever the state of the answer session changes, allowing for reactive updates to the UI.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_19\n\nLANGUAGE: kotlin\nCODE:\n```\nval answerSession = AnswerSession(answerParams, events = object: AnswerEventListener<MyDoc> {\n  override fun onStateChange(state: MutableList<Interaction<MyDoc>>) {\n    println(state)\n  }\n})\n\n// [{\n//   interactionId: \"clyru4rl8000008l062b26fk1\",\n//   query: \"What is Orama?\",\n//   response: \"Orama is a next-generation answer engine [...]\",\n//   relatedQueries: [\"How Orama works\", \"Why Orama is the best\", \"Vector search with orama\"],\n//   sources: [{\n//     count: 15,\n//     elapsed: { formatted: \"78ms\", raw: 78000000 },\n//     hits: [\n//       { document: { title: \"What is Orama\", ... } },\n//       { document: { title: \"How Orama works\", ... } },\n//       { document: { title: \"Why Orama is the best\", ... } }\n//     ]\n//   }],\n//   translatedQuery: { term: \"What is Orama?\" },\n//   aborted: false,\n//   loading: false\n// }]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Front Matter in Markdown for Docusaurus\nDESCRIPTION: Shows the structure of front matter in a Markdown document, including metadata like id, title, description, and custom URL slug.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\nid: my-doc-id\ntitle: My document title\ndescription: My document description\nslug: /my-custom-url\n---\n\n## Markdown heading\n\nMarkdown text with [links](./hello.md)\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Support Table for Devanagari Script in Markdown\nDESCRIPTION: This snippet presents a markdown table showing the support for tokenization, stop-words, and stemming in languages using the Devanagari script in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/index.mdx#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Tokenizer | Stop-words | Stemmer |\n| -------- | --------- | ---------- | ------- |\n| Hindi    | â        | â         | â      |\n| Nepali   | â        | â         | â      |\n| Sanskrit | â        | â         | â      |\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Angular Components via pnpm\nDESCRIPTION: Command to install Orama Angular Components using pnpm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @orama/angular-components\n```\n\n----------------------------------------\n\nTITLE: Clearing Orama Cloud Index (Swift)\nDESCRIPTION: Demonstrates how to clear all data from an Orama Cloud index using the Swift SDK. It shows creating a CloudManager, defining a document structure, and triggering a clear operation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_22\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\n// This is an example document. It should reflect your index schema.\nstruct OramaDoc: Codable {\n  let id: String\n  let name: String\n  let age: Int\n}\n\nlet cloudManager = CloudManager(apiKey: \"YOUR_API_KEY\")\nlet indexManager = cloudManager.index<OramaDoc>(\"my-index-id\")\n\nawait try indexManager.clear()\n```\n\n----------------------------------------\n\nTITLE: Getting Current Time in Nanoseconds\nDESCRIPTION: Returns the current time with nanosecond precision as a BigInt value.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/utilities.mdx#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getNanosecondsTime } from \"@orama/orama/internals\";\n\nawait getNanosecondsTime(); // 1363500821581208n\n```\n\n----------------------------------------\n\nTITLE: Advanced Configuration for Orama Cloud Plugin in Docusaurus\nDESCRIPTION: This code snippet demonstrates advanced configuration options for the @orama/plugin-docusaurus-v3 plugin. It includes settings for customizing the searchbox placeholder and search button text.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/native-integrations/docusaurus.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: [\n\t  [\n\t    \"@orama/plugin-docusaurus-v3\",\n\t    {\n\t      cloud: {\n\t        apiKey: process.env.ORAMA_CLOUD_PRIVATE_API_KEY,\n\t        indexId: \"YOUR_ORAMA_CLOUD_INDEX_ID\",\n\t        deploy: \"default\"\n\t      },\n\t      searchbox: {\n\t        placeholder: \"Search...\",\n\t      }\n\t      searchButton: {\n\t        text: \"Click here to search...\"\n\t      }\n\t    },\n\t  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Markdown\nDESCRIPTION: Demonstrates how to create links in Markdown using both URL paths and relative file paths.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLet's see how to [Create a page](/create-a-page).\n```\n\nLANGUAGE: markdown\nCODE:\n```\nLet's see how to [Create a page](./create-a-page.md).\n```\n\n----------------------------------------\n\nTITLE: Configuring userContext as JSON String in Kotlin\nDESCRIPTION: This snippet shows how to configure userContext as a JSON string in Kotlin. It provides structured user information to help personalize the answer session responses.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimport com.orama.client.OramaClient\n\nval client = OramaClient(apiKey = \"\", endpoint = \"\" )\n\nval answerParams = AnswerParams(\n  oramaClient = client,\n  serializer = MyDoc.serializer(),\n  userContext = \"{ name: \\\"John Doe\\\", musicTaste: [\\\"Rock\\\", \\\"Punk\\\", \\\"Metal\\\"], customerSince: 2019 }\"\n)\n\nval answerSession = AnswerSession(answerParams)\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to a Docusaurus Markdown Document\nDESCRIPTION: This snippet demonstrates how to add metadata to a Docusaurus document to customize the sidebar label and position. It uses YAML front matter at the beginning of the Markdown file.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/create-a-document.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: 'Hi!'\nsidebar_position: 3\n---\n\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies using PNPM package manager with frozen lockfile to ensure consistent installations.\nSOURCE: https://github.com/oramasearch/orama/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install --frozen-lockfile\n```\n\n----------------------------------------\n\nTITLE: Formatting Nanoseconds to Human Readable String\nDESCRIPTION: Converts a BigInt nanosecond value into a human-readable string format.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/utilities.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { formatNanoseconds } from \"@orama/orama/internals\";\n\nawait formatNanoseconds(30000n); // '30Î¼s'\n```\n\n----------------------------------------\n\nTITLE: Vector Search Implementation in Swift\nDESCRIPTION: Shows how to perform vector search operations using Swift with the Orama Cloud client. Includes custom type definition and search parameter configuration.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/vector-search.mdx#2025-04-11_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nstruct MyDoc: Encodable & Decodable {\n  let title: String\n  let description: String\n}\n\nlet clientParams = OramaClientParams(endpoint: \"\", apiKey: \"\")\nlet orama = OramaClient(params: clientParams)\n\nlet searchParams = ClientSearchParams.builder(\n    term: \"Super Mario videogame\",\n    mode: .vector\n  )\n  .limit(10) // optional\n  .offset(0) // optional\n  .returning([\"title\", \"description\"]) // optional\n  .build()\n\nlet searchResults: SearchResults<MyDoc> = try await orama.search(query: searchParams)\n```\n\n----------------------------------------\n\nTITLE: Committing Changes with Linting\nDESCRIPTION: Command to commit changes with enforced linting and tests using package manager commit scripts.\nSOURCE: https://github.com/oramasearch/orama/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm|yarn|npm commit\n```\n\n----------------------------------------\n\nTITLE: Example of a Valid Geopoint Object in JavaScript\nDESCRIPTION: Shows the structure of a valid geopoint object that contains latitude and longitude coordinates. Geopoints require both lat and lon properties with numeric values expressed in degrees.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/geosearch.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  lat: 45.46409,\n  lon: 9.19192\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Orama Utility Functions\nDESCRIPTION: Shows how to import various utility functions from Orama's internal modules.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/utilities.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  boundedLevenshtein,\n  sprintf,\n  formatBytes,\n  formatNanoseconds,\n  getNanosecondsTime,\n  uniqueId,\n} from \"@orama/orama/internals\";\n```\n\n----------------------------------------\n\nTITLE: Inserting Images in Markdown for Docusaurus\nDESCRIPTION: Shows how to insert images in Markdown using both absolute paths to the static directory and relative paths to the current file.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Docusaurus logo](/img/docusaurus.png)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n![Docusaurus logo](./img/docusaurus.png)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Front Matter in Markdown\nDESCRIPTION: Shows the structure of front matter in a Markdown document, including metadata fields like id, title, description, and slug.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n---\nid: my-doc-id\ntitle: My document title\ndescription: My document description\nslug: /my-custom-url\n---\n\n## Markdown heading\n\nMarkdown text with [links](./hello.md)\n```\n\n----------------------------------------\n\nTITLE: String Property Schema Definition\nDESCRIPTION: JSON schema definition for string properties used in filtering\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"string\",\n  \"tag\": \"string\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Swift SDK with CocoaPods\nDESCRIPTION: Configuration for installing the Orama Cloud Swift SDK using CocoaPods dependency manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/official-sdk.mdx#2025-04-11_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nsource 'https://github.com/CocoaPods/Specs.git'\nplatform :ios, '10.0'\nuse_frameworks!\n\ntarget '<Your Target Name>' do\n    pod 'OramaCloudClient', '~> 0.0.1'\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Installation for Docusaurus v3\nDESCRIPTION: Add the Orama plugin to your Docusaurus configuration by including it in the plugins array.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-docusaurus.mdx#2025-04-11_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nplugins: [\"@orama/plugin-docusaurus-v3\"];\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks with Syntax Highlighting\nDESCRIPTION: Demonstrates how to create code blocks with syntax highlighting and a title in Markdown.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Orama Types in TypeScript\nDESCRIPTION: This snippet shows how to import types from the Orama package for TypeScript development. It demonstrates the correct import syntax for accessing Orama's type definitions.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Language } from \"@orama/orama\";\n```\n\n----------------------------------------\n\nTITLE: Using Admonitions in Docusaurus Markdown\nDESCRIPTION: Shows how to create admonitions and callouts using Docusaurus' special syntax for tips and warnings.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip My tip\n\nUse this awesome feature option\n\n:::\n\n:::danger Take care\n\nThis action is dangerous\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Using Admonitions in Docusaurus\nDESCRIPTION: Shows how to create admonitions and callouts using Docusaurus' special syntax for tips and warnings.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip My tip\n\nUse this awesome feature option\n\n:::\n\n:::danger Take care\n\nThis action is dangerous\n\n:::\n```\n\n----------------------------------------\n\nTITLE: Installing Orama React Components via npm\nDESCRIPTION: Command to install Orama React Components using npm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @orama/react-components\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Analytics Plugin for Docusaurus\nDESCRIPTION: Add analytics functionality to your Docusaurus search by configuring the analytics plugin with your API key and index ID.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-docusaurus.mdx#2025-04-11_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nplugins: [\n\t  [\n\t    \"@orama/plugin-docusaurus-v3\",\n\t    {\n\t      plugins: {\n\t        analytics: {\n\t          enabled: true,\n\t          apiKey: process.env.ORAMA_ANALYTICS_API_KEY,\n\t          indexId: process.env.ORAMA_ANALYTICS_INDEX_ID,\n\t        },\n\t      },\n\t    },\n\t  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Custom Reducer Implementation\nDESCRIPTION: Shows how to implement a custom reducer for complex group aggregations with TypeScript interfaces.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/grouping.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Doc extends Document {\n  type: string;\n  design: string;\n  rank: number;\n  color: string;\n  isPromoted: boolean;\n}\ninterface AggregationValue {\n  type: string;\n  design: string;\n  colors: string[];\n  ranks: number[];\n  isPromoted: boolean;\n}\n\nconst results = search(db, {\n  term: \"red t-shirt\",\n  groupBy: {\n    properties: [\"type\", \"design\"],\n    reduce: {\n      reducer: (\n        values: ScalarSearchableValue[],\n        acc: AggregationValue,\n        item: Result\n      ) => {\n        const doc = item.document as Doc;\n        acc.type ||= doc.type;\n        acc.design ||= doc.design;\n        acc.isPromoted ||= doc.isPromoted;\n        acc.colors.push(doc.color);\n        acc.ranks.push(doc.rank);\n        return acc;\n      },\n      getInitialValue: (): AggregationValue => ({\n        type: \"\",\n        design: \"\",\n        colors: [],\n        ranks: [],\n        isPromoted: false,\n      }),\n    },\n  },\n  sortBy: {\n    property: \"rank\",\n    order: \"DESC\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Links in Markdown for Docusaurus\nDESCRIPTION: Demonstrates how to create links in Markdown using both URL paths and relative file paths.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLet's see how to [Create a page](/create-a-page).\n```\n\nLANGUAGE: markdown\nCODE:\n```\nLet's see how to [Create a page](./create-a-page.md).\n```\n\n----------------------------------------\n\nTITLE: Configuring userContext as Object in JavaScript\nDESCRIPTION: This snippet shows how to configure userContext as a structured object with user properties when creating an answer session in JavaScript. This provides a more structured context about the user.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst answerSession = orama.createAnswerSession({\n  userContext: {\n    name: 'John Doe',\n    musicTaste: ['Rock', 'Punk', 'Metal'],\n    customerSince: 2019\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Clearing the Orama Answer Session in JavaScript\nDESCRIPTION: This code shows how to clear an Orama answer session in JavaScript, which resets all conversation messages to an empty array.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nanswerSession.clearSession();\n```\n\n----------------------------------------\n\nTITLE: Integrating React Components with MDX in Docusaurus\nDESCRIPTION: Demonstrates how to use React components within Markdown using MDX, creating an interactive highlighted text component.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '20px',\n      color: '#fff',\n      padding: '10px',\n      cursor: 'pointer',\n    }}\n    onClick={() => {\n      alert(`You clicked the color ${color} with label ${children}`)\n    }}>\n    {children}\n  </span>\n);\n\nThis is <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> !\n\nThis is <Highlight color=\"#1877F2\">Facebook blue</Highlight> !\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Page\nDESCRIPTION: Example of creating a simple Markdown page with a heading and text content. The file should be placed in src/pages directory and will be automatically converted to HTML.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/create-a-page.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# My Markdown page\n\nThis is a Markdown page\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Vue Components via yarn\nDESCRIPTION: Command to install Orama Vue Components using yarn package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @orama/vue-components\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Plugin with npm\nDESCRIPTION: Command to install the Orama plugin for Docusaurus using npm package manager. This step is necessary to add the plugin to your Docusaurus project.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-docusaurus/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @orama/plugin-docusaurus\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button Using React in MDX\nDESCRIPTION: Demonstrates how to create an interactive button component using React within an MDX blog post. The button shows an alert message when clicked.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/blog/2021-08-01-mdx-blog-post.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Swift SDK with Swift Package Manager\nDESCRIPTION: Configuration for installing the Orama Cloud Swift SDK using Swift Package Manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/official-sdk.mdx#2025-04-11_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\ndependencies: [\n    .package(url: \"https://github.com/oramasearch/oramacloud-client-swift.git\", from: \"0.0.1\")\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Page in Orama\nDESCRIPTION: This snippet shows how to create a simple Markdown page in an Orama project. It includes a main heading and a paragraph of text, demonstrating the basic structure of a Markdown file.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/create-a-page.md#2025-04-11_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n# My Markdown page\n\nThis is a Markdown page\n```\n\n----------------------------------------\n\nTITLE: Integrating React Components with MDX in Markdown\nDESCRIPTION: Demonstrates how to use React components within Markdown using MDX, creating an interactive highlighted text component.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '20px',\n      color: '#fff',\n      padding: '10px',\n      cursor: 'pointer',\n    }}\n    onClick={() => {\n      alert(`You clicked the color ${color} with label ${children}`)\n    }}>\n    {children}\n  </span>\n);\n\nThis is <Highlight color=\"#25c2a0\">Docusaurus green</Highlight> !\n\nThis is <Highlight color=\"#1877F2\">Facebook blue</Highlight> !\n```\n\n----------------------------------------\n\nTITLE: Creating a New Documentation Version in Docusaurus\nDESCRIPTION: This command creates a new version of the documentation by copying the 'docs' folder into 'versioned_docs/version-1.0' and creating a 'versions.json' file.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-extras/manage-docs-versions.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run docusaurus docs:version 1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Vue Components via pnpm\nDESCRIPTION: Command to install Orama Vue Components using pnpm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @orama/vue-components\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Plugin with Yarn\nDESCRIPTION: Command to install the Orama plugin for Docusaurus using Yarn package manager. This is an alternative method to add the plugin to your Docusaurus project.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-docusaurus/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @orama/plugin-docusaurus\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Last Answer in Orama Sessions in JavaScript\nDESCRIPTION: This code demonstrates how to regenerate the last answer in an Orama answer session using JavaScript. It shows asking a question, regenerating the answer with optional streaming control, and accessing the conversation messages.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\n// Ask the question\nawait answerSession.ask({ term: \"What is Orama?\" });\n\n// Regenerate the answer\n// \"stream\" is true by default, but you can set it to false if you want to get the entire answer at once\nawait answerSession.regenerateLast({ stream: false });\n\n// Check the messages\nconst messages = answerSession.getMessages();\n\nconsole.log(messages);\n\n// [\n//   { role: 'user', content: 'What is Orama?' },\n//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Creating a React Page in Orama\nDESCRIPTION: This snippet demonstrates how to create a basic React page in an Orama project. It imports the necessary components, defines a functional component, and renders a simple layout with a heading and paragraph.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/create-a-page.md#2025-04-11_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport Layout from '@theme/Layout';\n\nexport default function MyReactPage() {\n  return (\n    <Layout>\n      <h1>My React page</h1>\n      <p>This is a React page</p>\n    </Layout>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring userContext in Swift with Orama\nDESCRIPTION: This snippet shows how to set up the userContext parameter in Swift when creating an answer session with Orama. It helps provide personalized responses based on user information.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nlet clientParams = OramaClientParams(endpoint: \"\", apiKey: \"\")\nlet orama = OramaClient(params: clientParams)\n\nlet answerParams = AnswerParams<E2EDoc>(\n  userContext: \"The user is a very skilled programmer but has never used Orama before.\",\n  inferenceType: .documentation,\n  initialMessages: [],\n  oramaClient: oramaClient,\n)\nlet answerSession = AnswerSession(params: answerParams)\n```\n\n----------------------------------------\n\nTITLE: Installing Orama React Components via yarn\nDESCRIPTION: Command to install Orama React Components using yarn package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @orama/react-components\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Support Table for Tamil Script in Markdown\nDESCRIPTION: This snippet shows a markdown table illustrating the support for tokenization, stop-words, and stemming in Tamil language using the Tamil script in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/index.mdx#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Tokenizer | Stop-words | Stemmer |\n| -------- | --------- | ---------- | ------- |\n| Tamil    | â        | â         | â      |\n```\n\n----------------------------------------\n\nTITLE: Importing Orama Cloud SDK in Deno Environment\nDESCRIPTION: Shows how to import the Orama Cloud SDK when developing in a Deno environment using the npm namespace.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/react-sdk.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaCloud } from \"npm:@oramacloud/react-client\";\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Plugin for Vitepress in JavaScript\nDESCRIPTION: This code snippet demonstrates how to set up the Orama plugin in a Vitepress configuration file. It imports the necessary dependencies and adds the OramaPlugin to the Vite plugins array.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-vitepress/README.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// .vitepress/config.js\n\nimport { defineConfig } from 'vitepress'\nimport { OramaPlugin } from '@orama/plugin-vitepress'\n\nexport default defineConfig({\n  // ...\n  extends: {\n    vite: {\n      plugins: [OramaPlugin()]\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Initial Docusaurus Blog Post in Markdown\nDESCRIPTION: Example of creating a basic blog post file in Docusaurus with frontmatter metadata including authors, tags, and content. The post demonstrates proper formatting for author information including names, titles, URLs, and profile images.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/create-a-blog-post.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: greetings\ntitle: Greetings!\nauthors:\n  - name: Joel Marcey\n    title: Co-creator of Docusaurus 1\n    url: https://github.com/JoelMarcey\n    image_url: https://github.com/JoelMarcey.png\n  - name: SÃ©bastien Lorber\n    title: Docusaurus maintainer\n    url: https://sebastienlorber.com\n    image_url: https://github.com/slorber.png\ntags: [greetings]\n---\n\nCongratulations, you have made your first post!\n\nFeel free to play around and edit this post as much you like.\n```\n\n----------------------------------------\n\nTITLE: Installing Orama React Components via pnpm\nDESCRIPTION: Command to install Orama React Components using pnpm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @orama/react-components\n```\n\n----------------------------------------\n\nTITLE: Number Property Schema Definition\nDESCRIPTION: JSON schema definition for number properties with nested structure\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"string\",\n  \"year\": \"number\",\n  \"meta\": {\n    \"rating\": \"number\",\n    \"length\": \"number\",\n    \"favorite\": \"boolean\",\n    \"tags\": \"string\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Directory Structure\nDESCRIPTION: Shell commands to create the necessary directory structure for translations and copy the source documentation file for French translation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p i18n/fr/docusaurus-plugin-content-docs/current/\n\ncp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md\n```\n\n----------------------------------------\n\nTITLE: Importing Orama SDK with Deno\nDESCRIPTION: Shows how to import the Orama SDK when developing using Deno by utilizing the npm namespace.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OramaClient } from \"npm:@oramacloud/client\";\n```\n\n----------------------------------------\n\nTITLE: Importing Orama in a Browser Module\nDESCRIPTION: Example of importing Orama directly in a browser using ES modules from a CDN.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/orama/README.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <body>\n    <script type=\"module\">\n      import { create, insert, search } from 'https://cdn.jsdelivr.net/npm/@orama/orama@latest/+esm'\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Orama Database in Astro Pages\nDESCRIPTION: This snippet shows how to use the generated Orama database in Astro pages. It demonstrates loading the database and performing a search operation using client-side JavaScript.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-astro/README.md#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- Other stuff -->\n  <script>\n    // Astro will do the job of bundling everything for you\n    import { getOramaDB, search } from \"@orama/plugin-astro/client\"\n\n    // We load the DB that we generated at build time, this is an asynchronous\n    // operation, so we must either await, or rely on `.then` calls.\n    const db = await getOramaDB('mydb')\n\n    // Now we can search inside our DB. Of course, feel free to use it in more\n    // interesting ways.\n    console.log('Search Results')\n    console.log(search(db, { term: 'mySearchTerm' }))\n  </script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Configuring i18n in Docusaurus\nDESCRIPTION: Configuration to add French language support in docusaurus.config.js by specifying default and supported locales.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  i18n: {\n    defaultLocale: 'en',\n    locales: ['en', 'fr'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Orama Plugin in Docusaurus\nDESCRIPTION: JavaScript code snippet to add the Orama plugin to the Docusaurus configuration file. This step is required to enable the plugin in your Docusaurus project.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-docusaurus/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: ['@orama/plugin-docusaurus']\n```\n\n----------------------------------------\n\nTITLE: Geopoint Schema Definition\nDESCRIPTION: JSON schema definition for geopoint properties\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"string\",\n  \"location\": \"geopoint\"\n}\n```\n\n----------------------------------------\n\nTITLE: Radius Filter Placeholder in Kotlin\nDESCRIPTION: Placeholder for upcoming Kotlin implementation of radius filtering in Orama Search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Site with SSH\nDESCRIPTION: Command to deploy the website using SSH authentication method.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Python Implementation of Orama Cloud Search\nDESCRIPTION: This snippet is a placeholder for the upcoming Python implementation of the Orama Cloud search functionality.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Importing Orama in Deno\nDESCRIPTION: Shows how to import Orama in Deno using either a CDN URL or npm specifiers.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/orama/README.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, search, insert } from 'npm:@orama/orama'\n```\n\n----------------------------------------\n\nTITLE: Creating Translation Directory Structure\nDESCRIPTION: Command line instructions to create the required directory structure for French translations and copy the source file.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p i18n/fr/docusaurus-plugin-content-docs/current/\n\ncp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Web Components via npm\nDESCRIPTION: Command to install Orama Web Components using npm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @orama/wc-components\n```\n\n----------------------------------------\n\nTITLE: Vector Search Implementation in Python\nDESCRIPTION: Placeholder for upcoming Python implementation of vector search with Orama Cloud.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/vector-search.mdx#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Website Dependencies\nDESCRIPTION: Command to install all required dependencies for the Docusaurus website using Yarn package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Handling Answer Aborted Events with PHP SDK\nDESCRIPTION: Placeholder for the PHP SDK implementation of the answer aborted event listener, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_42\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Client-side Orama DB Implementation\nDESCRIPTION: HTML script implementation showing how to load and use the Orama database on the client side, including importing the necessary functions and performing searches.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-astro.mdx#2025-04-11_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- Other stuff -->\n  <script>\n    // Astro will do the job of bundling everything for you\n    import { getOramaDB, search } from \"@orama/plugin-astro/client\"\n\n    // We load the DB that we generated at build time, this is an asynchronous\n    // operation, so we must either await, or rely on `.then` calls.\n    const db = await getOramaDB('mydb')\n\n    // Now we can search inside our DB. Of course, feel free to use it in more\n    // interesting ways.\n    console.log('Search Results')\n    console.log(search(db, { term: 'mySearchTerm' }))\n  </script>\n</head>\n```\n\n----------------------------------------\n\nTITLE: Starting Localized Development Server\nDESCRIPTION: Command to start the Docusaurus development server with French locale settings for testing translated content.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start -- --locale fr\n```\n\n----------------------------------------\n\nTITLE: Custom Elapsed Time Formatting in Orama\nDESCRIPTION: Example showing how to implement custom elapsed time formatting for search results. Demonstrates formatting BigInt elapsed time into a custom string format.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert, search } from \"@orama/orama\";\n\nconst movieDB = create({\n  schema: {\n    title: \"string\",\n    director: \"string\",\n    plot: \"string\",\n    year: \"number\",\n    isFavorite: \"boolean\",\n  },\n  components: {\n    formatElapsedTime(n) {\n      return `${Number(n)} - custom`;\n    },\n  },\n});\n\ninsert(movieDB, {\n  title: \"Harry Potter and the Philosopher's Stone\",\n  director: \"Chris Columbus\",\n  plot: \"Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.\",\n  year: 2001,\n  isFavorite: false,\n});\n\nconst results = search(movieDB, { term: \"Harry\" });\n\n// This will print something like: 100 - custom\nconsole.log(results.elapsed);\n```\n\n----------------------------------------\n\nTITLE: TypeScript Alternative Import Method\nDESCRIPTION: Alternative import method for TypeScript when moduleResolution cannot be set to nodenext or node16.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/utilities.mdx#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { internals } from \"@orama/orama\";\n\nawait internals.boundedLevenshtein();\n```\n\n----------------------------------------\n\nTITLE: Aborting Answer Sessions with Python SDK\nDESCRIPTION: Placeholder for the Python SDK implementation of the abortAnswer functionality, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Website\nDESCRIPTION: Generates optimized static website content in the build directory for production deployment.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Getting Related Queries with PHP SDK\nDESCRIPTION: Placeholder for the PHP SDK implementation of retrieving related queries, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_47\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Building Site for Specific Locale\nDESCRIPTION: Command to build the Docusaurus site for the French locale specifically.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build -- --locale fr\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Development Server\nDESCRIPTION: These commands navigate to the project directory and start the local development server. The site will be available at http://localhost:3000/ and will automatically reload when changes are made.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/intro.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-website\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Last Answer in Orama Sessions in PHP (Coming Soon)\nDESCRIPTION: This is a placeholder for the upcoming PHP implementation for regenerating the last answer in an Orama answer session.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_57\n\nLANGUAGE: php\nCODE:\n```\necho \"coming soon\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message History with PHP SDK\nDESCRIPTION: Placeholder for the PHP SDK implementation of retrieving message history, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_52\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Using onStateChange Event in Orama Answer Session\nDESCRIPTION: Demonstrates how to use the onStateChange event in Orama's Answer Session API. The event is triggered whenever the state of the answer session changes, allowing for reactive updates to the UI.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst answerSession = orama.createAnswerSession({\n  events: {\n    onStateChange: (state) => {\n      if (state.every(interaction => !interaction.loading)) {\n        console.log(state)\n      }\n    },\n  },\n});\n\nawait answerSession.ask({\n  term: \"What is Orama?\",\n});\n\n// [{\n//   interactionId: \"clyru4rl8000008l062b26fk1\",\n//   query: \"What is Orama?\",\n//   response: \"Orama is a next-generation answer engine [...]\",\n//   relatedQueries: [\"How Orama works\", \"Why Orama is the best\", \"Vector search with orama\"],\n//   sources: [{\n//     count: 15,\n//     elapsed: { formatted: \"78ms\", raw: 78000000 },\n//     hits: [\n//       { document: { title: \"What is Orama\", ... } },\n//       { document: { title: \"How Orama works\", ... } },\n//       { document: { title: \"Why Orama is the best\", ... } }\n//     ]\n//   }],\n//   translatedQuery: { term: \"What is Orama?\" },\n//   aborted: false,\n//   loading: false\n// }]\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Local Development Server\nDESCRIPTION: Launches a local development server with hot-reload capabilities for real-time preview of website changes.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Using Bounded Levenshtein Distance Calculator\nDESCRIPTION: Demonstrates how to compute the Levenshtein distance between two strings with a tolerance limit. Returns early with -1 if distance exceeds tolerance.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/utilities.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { boundedLevenshtein } from \"@orama/orama/internals\";\n\nawait boundedLevenshtein(\"moon\", \"lions\", 3); // { isBounded: true, distance: 3 }\n```\n\n----------------------------------------\n\nTITLE: Radius Filter Placeholder in Python\nDESCRIPTION: Placeholder for upcoming Python implementation of radius filtering in Orama Search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Operations with PHP SDK (Coming Soon)\nDESCRIPTION: This is a placeholder for the upcoming PHP SDK implementation for checking pending operations in Orama Cloud.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Site without SSH\nDESCRIPTION: Command to deploy the website using GitHub username authentication method.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Python Faceted Search Implementation\nDESCRIPTION: This is a placeholder for the Python implementation of faceted search using Orama. The actual implementation is not provided in the given content.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Radius Filter Placeholder in PHP\nDESCRIPTION: Placeholder for upcoming PHP implementation of radius filtering in Orama Search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Defining Orama Schema in JSON\nDESCRIPTION: This snippet shows the JSON schema definition for an Orama search index. It includes various field types such as string, number, and boolean.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"string\",\n  \"description\": \"string\",\n  \"categories\": {\n    \"primary\": \"string\",\n    \"secondary\": \"string\",\n  },\n  \"rating\": \"number\",\n  \"isFavorite\": \"boolean\",\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown File Naming for Date Extraction in Docusaurus\nDESCRIPTION: Shows examples of how to name Markdown files for automatic date extraction in Docusaurus blog posts. This includes both single file and folder-based approaches.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/blog/2021-08-26-welcome/index.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message History with Swift SDK\nDESCRIPTION: Code showing how to retrieve the full conversation history using the getMessages() method in the Swift SDK. It returns an array of message objects with role and content properties.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_49\n\nLANGUAGE: swift\nCODE:\n```\nlet messages = answerSession.getMessages()\n\nprint(messages)\n\n// [\n//   { role: 'user', content: 'What is Orama?' },\n//   { role: 'assistant', content: 'Orama is a next-generation answer engine' }\n// ]\n```\n\n----------------------------------------\n\nTITLE: Streaming Answers with Python SDK\nDESCRIPTION: Placeholder for the Python SDK implementation of the askStream functionality, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Polygon Filter Placeholder in Swift\nDESCRIPTION: Placeholder for upcoming Swift implementation of polygon filtering in Orama Search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_32\n\nLANGUAGE: swift\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Markdown File Naming Convention for Docusaurus Blog Posts\nDESCRIPTION: Shows the recommended file naming format for Docusaurus blog posts. The date is extracted from the filename to set the post's publication date.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/blog/2021-08-26-welcome/index.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Message History with Python SDK\nDESCRIPTION: Placeholder for the Python SDK implementation of retrieving message history, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Creating an Orama Database with Geopoint Schema in JavaScript\nDESCRIPTION: Creates an Orama database instance with a schema that includes a geopoint property for location-based data. This schema structure is necessary to enable geosearch functionality.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/geosearch.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create } from \"@orama/orama\";\n\nconst db = create({\n  schema: {\n    name: \"string\",\n    location: \"geopoint\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using HTML Comment for Content Truncation\nDESCRIPTION: Demonstrates the use of an HTML comment to limit blog post content in list views. The truncate comment serves as a marker for where content should be cut off in preview displays.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/blog/2019-05-29-long-blog-post.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Accessing Static State in Orama Answer Session with Kotlin\nDESCRIPTION: Illustrates how to access the static state of an Orama Answer Session in Kotlin using the getState() method. This provides a snapshot of the current state without subscribing to real-time updates.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nval answerSession = AnswerSession(answerParams)\n\nval answer = answerSession.ask(AskParams(\n  query = \"Query is Orama?\"\n))\n\nprintln(answerSession.getState())\n\n// [{\n//   interactionId: \"clyru4rl8000008l062b26fk1\",\n//   query: \"What is Orama?\",\n//   response: \"Orama is a next-generation answer engine [...]\",\n//   relatedQueries: [\"How Orama works\", \"Why Orama is the best\", \"Vector search with orama\"],\n//   sources: [{\n//     count: 15,\n//     elapsed: { formatted: \"78ms\", raw: 78000000 },\n//     hits: [\n//       { document: { title: \"What is Orama\", ... } },\n//       { document: { title: \"How Orama works\", ... } },\n//       { document: { title: \"Why Orama is the best\", ... } }\n//     ]\n//   }],\n//   translatedQuery: { term: \"What is Orama?\" },\n//   aborted: false,\n//   loading: false\n// }]\n```\n\n----------------------------------------\n\nTITLE: Clearing the Orama Answer Session in Python (Coming Soon)\nDESCRIPTION: This is a placeholder for the upcoming Python implementation for clearing an Orama answer session.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_61\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: PHP Placeholder for Answer Session with Orama\nDESCRIPTION: This is a placeholder for the upcoming PHP implementation of creating an answer session with Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Integrating Component in Create Method\nDESCRIPTION: Shows how to integrate a new component into Orama's create method, including initialization and data structure setup.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n\nimport { createShiningDetector } from '../components/shiningDetector.js'\n\nexport async function create({ schema, language, components }: CreateArguments): Promise<Orama> {\n\n  // ...\n\n  const orama = {\n    data: {},\n    caches: {},\n    // ...\n+   shiningDetector: components.shiningDetector ?? createShiningDetector()\n  } as Orama\n\n  orama.data = {\n    index: await orama.index.create(orama, schema),\n    docs: await orama.documentsStore.create(orama),\n    shining: { Paolo: 10 }\n  }\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Structure from Remote API\nDESCRIPTION: This JSON snippet shows the structure of data returned by the dummyjson.com/products API endpoint. It includes detailed product information such as id, title, description, price, and nested objects for dimensions, reviews, and metadata.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/remote-json.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"products\": [\n    {\n      \"id\": 1,\n      \"title\": \"Essence Mascara Lash Princess\",\n      \"description\": \"The Essence Mascara Lash Princess is a popular mascara known for its volumizing and lengthening effects. Achieve dramatic lashes with this long-lasting and cruelty-free formula.\",\n      \"category\":\"beauty\",\n      \"price\":9.99,\n      \"discountPercentage\":7.17,\n      \"rating\":4.94,\n      \"stock\":5,\n      \"tags\":[\"beauty\",\"mascara\"],\n      \"brand\":\"Essence\",\n      \"sku\":\"RCH45Q1A\",\n      \"weight\":2,\n      \"dimensions\":{\n        \"width\":23.17,\n        \"height\":14.43,\n        \"depth\":28.01\n        },\n      \"warrantyInformation\":\"1 month warranty\",\n      \"shippingInformation\":\"Ships in 1 month\",\n      \"availabilityStatus\":\"Low Stock\",\n      \"reviews\":[\n        {\n          \"rating\":2,\n          \"comment\":\"Very unhappy with my purchase!\",\n          \"date\":\"2024-05-23T08:56:21.618Z\",\n          \"reviewerName\":\"John Doe\",\n          \"reviewerEmail\":\"john.doe@x.dummyjson.com\"\n        },\n        {\n          \"rating\":5,\n          \"comment\":\"Very satisfied!\",\n          \"date\":\"2024-05-23T08:56:21.618Z\",\n          \"reviewerName\":\"Scarlett Wright\",\n          \"reviewerEmail\":\"scarlett.wright@x.dummyjson.com\"\n        }\n      ],\n      \"returnPolicy\":\"30 days return policy\",\n      \"minimumOrderQuantity\":24,\n      \"meta\": {\n        \"createdAt\":\"2024-05-23T08:56:21.618Z\",\n        \"updatedAt\":\"2024-05-23T08:56:21.618Z\",\n        \"barcode\":\"9164035109868\",\n        \"qrCode\":\"https://assets.dummyjson.com/public/qr-code.png\"\n      },\n      \"images\":[\"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/1.png\"],\n      \"thumbnail\":\"https://cdn.dummyjson.com/products/images/beauty/Essence%20Mascara%20Lash%20Princess/thumbnail.png\"\n    },\n    // More products...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Component in Search Function\nDESCRIPTION: Demonstrates how to use the newly created component within existing functionality like the search method.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/internals/components.mdx#2025-04-11_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nexport async function search(orama: Orama, params: SearchParams, language?: string): Promise<Results> {\n+   console.log('Shining level', await orama.shiningDetector.isShining(params.term))\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Performing Hybrid Search with Python SDK\nDESCRIPTION: Placeholder for Python implementation of hybrid search using the Orama SDK.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/hybrid-search.mdx#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic AnswerSession with Orama and Secure Proxy\nDESCRIPTION: Demonstrates how to create a basic answer session using Orama's database and secure proxy plugin. The code shows setup, data insertion, and querying with custom prompt handling.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/answer-engine/introduction.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { create, insert } from \"@orama/orama\";\nimport { pluginSecureProxy } from \"@orama/plugin-secure-proxy\";\n\nconst secureProxy = await pluginSecureProxy({\n  apiKey: \"my-api-key\",\n  defaultProperty: \"embeddings\",\n  models: {\n    embeddings: \"openai/text-embedding-3-small\",\n    chat: \"openai/gpt-4o-mini\"\n  }\n})\n\nconst db = await create({\n  schema: {\n    name: 'string'\n  } as const,\n  plugins: [secureProxy]\n})\n\nawait insert(db, { name: \"John Doe\" })\nawait insert(db, { name: \"Michele Riva\" })\n\nconst session = new AnswerSession(db, {\n  systemPrompt: 'You will get a name as context, please provide a greeting message',\n  events: {\n    onStateChange: console.log\n  }\n})\n\nconst response = await session.ask({\n  term: 'john',\n})\n\nconsole.log(response)\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Website Dependencies\nDESCRIPTION: Installs all required dependencies for the Docusaurus website using Yarn package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Database Schema and Data Insertion Example\nDESCRIPTION: Shows how to create a database schema and insert multiple records for demonstration of grouping functionality.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/grouping.mdx#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    id: \"string\",\n    type: \"string\",\n    design: \"string\",\n    color: \"string\",\n    rank: \"number\",\n    isPromoted: \"boolean\",\n  },\n});\nconst ids = insertMultiple(db, [\n  {\n    id: \"0\",\n    type: \"t-shirt\",\n    design: \"A\",\n    color: \"blue\",\n    rank: 3,\n    isPromoted: true,\n  },\n  // ... more items\n]);\n```\n\n----------------------------------------\n\nTITLE: Customizing Elapsed Time Format in Orama\nDESCRIPTION: Shows how to customize the elapsed time format in search results by providing a custom formatElapsedTime function when creating the database. This allows for customized performance metrics in search results.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = create({\n  schema: {\n    title: \"string\",\n    body: \"string\",\n  },\n  components: {\n    formatElapsedTime: (n: bigint) => {\n      return `custom value: ${n}`;\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Support Table for Cyrillic Alphabet in Markdown\nDESCRIPTION: This snippet presents a markdown table showing the support for tokenization, stop-words, and stemming in languages using the Cyrillic alphabet in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/index.mdx#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Language     | Tokenizer | Stop-words | Stemmer |\n| ------------ | --------- | ---------- | ------- |\n| Bulgarian    | â        | â         | â      |\n| Russian      | â        | â         | â      |\n| Serbian (*)  | â        | â         | â      |\n| Ukrainian    | â        | â         | â      |\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Support Table for Greek Alphabet in Markdown\nDESCRIPTION: This snippet shows a markdown table illustrating the support for tokenization, stop-words, and stemming in Greek language using the Greek alphabet in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/index.mdx#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Tokenizer | Stop-words | Stemmer |\n| -------- | --------- | ---------- | ------- |\n| Greek    | â        | â         | â      |\n```\n\n----------------------------------------\n\nTITLE: Separate Results Response Format\nDESCRIPTION: Shows the JSON response structure when mergeResults is set to false, returning an array of separate search results from each index.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/multi-index-search.mdx#2025-04-11_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"elapsed\": ...,\n    \"count\": ...,\n    \"hits\": { ... },\n  },\n  {\n    \"elapsed\": ...,\n    \"count\": ...,\n    \"hits\": { ... },\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Elapsed Time Format Result in Orama\nDESCRIPTION: Shows the structure of a search result with a customized elapsed time format. The elapsed property now contains a string value instead of the default object with raw and formatted values.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  elapsed: 'custom value: 181208', // instead of { raw: 181208, formatted: '181Î¼s' }\n  count: 2,\n  hits: [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Plugin QPS via npm\nDESCRIPTION: This command installs the Orama Plugin Quantum Proximity Scoring package using npm.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-qps/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @orama/plugin-qps\n```\n\n----------------------------------------\n\nTITLE: Performing Search with Swift SDK\nDESCRIPTION: Example of performing a search operation using the Swift SDK with custom document type and search parameters.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/official-sdk.mdx#2025-04-11_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nstruct MyDoc: Codable {\n  let title: String\n  let description: String\n}\n\nlet clientParams = OramaClientParams(endpoint: \"<Your Orama Cloud Endpoint>\", apiKey: \"<Your Orama Cloud API Key>\")\nlet client = OramaClient(params: clientParams)\n\nlet searchParams = ClientSearchParams.builder(\n    term: \"red shoes\",\n    mode: .fulltext // optional, default is .fulltext but can also be .vector or .hybrid\n  )\n  .limit(10) // optional\n  .offset(0) // optional\n  .returning([\"title\", \"description\"]) // optional\n  .build()\n\nlet searchResults: SearchResults<MyDoc> = try await client.search(query: searchParams)\n```\n\n----------------------------------------\n\nTITLE: Example JSON Documents for Index\nDESCRIPTION: Example of JSON documents that would be inserted into an Orama Cloud index. Each document has an ID, name, and age property matching the defined schema.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/data-sources/custom-integrations/rest-apis.mdx#2025-04-11_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"1\",\n    \"name\": \"John Doe\",\n    \"age\": 30\n  },\n  {\n    \"id\": \"2\",\n    \"name\": \"Jane Doe\",\n    \"age\": 25\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Installing Kotlin SDK with Gradle\nDESCRIPTION: Gradle configuration for installing the Orama Cloud Kotlin SDK using Maven Central repository.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/integrating-orama-cloud/official-sdk.mdx#2025-04-11_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nrepositories {\n    mavenCentral()\n}\n\nval oramaClientVersion = \"0.0.3\"\n\ndependencies {\n    implementation \"com.orama:oramacloud-client-kotlin:${oramaClientVersion}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Orama Usage\nDESCRIPTION: This snippet shows how to import types from Orama in TypeScript, and mentions the required compiler option for module resolution in tsconfig.json.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/typescript.mdx#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { Language } from \"@orama/orama\";\n```\n\n----------------------------------------\n\nTITLE: Getting Related Queries with Kotlin SDK\nDESCRIPTION: Placeholder for the Kotlin SDK implementation of retrieving related queries, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_45\n\nLANGUAGE: kotlin\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Markdown Document in Docusaurus\nDESCRIPTION: This snippet shows how to create a simple Markdown document for Docusaurus. It demonstrates the basic structure of a document with a title and formatted text.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/create-a-document.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Streaming Answers with PHP SDK\nDESCRIPTION: Placeholder for the PHP SDK implementation of the askStream functionality, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Development Server\nDESCRIPTION: Commands to navigate to the project directory and start the local development server. The server runs at http://localhost:3000/ with hot-reload functionality.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/intro.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-website\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Importing Types for Orama Persistence Plugin in TypeScript\nDESCRIPTION: Shows how to properly import types from the plugin-data-persistence package when using TypeScript. This example demonstrates the recommended approach for type imports with Orama plugins.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-data-persistence.mdx#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { persistToFile } from \"@orama/plugin-data-persistence\";\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Example for Orama Plugin\nDESCRIPTION: Example showing the correct way to import types from the match highlight plugin in TypeScript.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/plugins/plugin-match-highlight.mdx#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { searchWithHighlight } from \"@orama/plugin-match-highlight\";\n```\n\n----------------------------------------\n\nTITLE: Aborting Answer Sessions with PHP SDK\nDESCRIPTION: Placeholder for the PHP SDK implementation of the abortAnswer functionality, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_37\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Static Content\nDESCRIPTION: Command to generate static website content in the build directory for production deployment.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/README.md#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Getting Related Queries with Python SDK\nDESCRIPTION: Placeholder for the Python SDK implementation of retrieving related queries, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Docusaurus Blog Post Front Matter in Markdown\nDESCRIPTION: This code snippet demonstrates how to set up the front matter for a Docusaurus blog post. It includes fields for slug, title, author details (name, title, GitHub URL, and avatar), and tags.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/blog/2019-05-28-first-blog-post.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: first-blog-post\ntitle: First Blog Post\nauthors:\n  name: Gao Wei\n  title: Docusaurus Core Team\n  url: https://github.com/wgao19\n  image_url: https://github.com/wgao19.png\ntags: [hola, docusaurus]\n---\n```\n\n----------------------------------------\n\nTITLE: Explicitly Defining Sidebar Structure in JavaScript for Docusaurus\nDESCRIPTION: This snippet shows how to explicitly define the sidebar structure in Docusaurus using JavaScript. It exports an object that defines the sidebar items, including documents and categories.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/create-a-document.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  tutorialSidebar: [\n    'intro',\n    // highlight-next-line\n    'hello',\n    {\n      type: 'category',\n      label: 'Tutorial',\n      items: ['tutorial-basics/create-a-document'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Code Blocks with Syntax Highlighting in Docusaurus\nDESCRIPTION: Demonstrates how to create code blocks with syntax highlighting and titles in Docusaurus Markdown.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nfunction HelloDocusaurus() {\n  return <h1>Hello, Docusaurus!</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating the Last Answer in Orama Sessions in Python (Coming Soon)\nDESCRIPTION: This is a placeholder for the upcoming Python implementation for regenerating the last answer in an Orama answer session.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_56\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview in Markdown\nDESCRIPTION: Directory structure explanation outlining the src folder containing server and client components, and the example-doc folder for testing.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-docusaurus-v3/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing\n\n## Project structure\n\n### The `src` folder\n\nIn the `src` directory there is the source code of the plugin to be modified.\n\nAs any other Docusaurus plugin, there is a division between the `server` and the `client` parts of the plugin.\n\nThe `server` part implements the generation of the JSON index at build time, reading the documentation content through each produced HTML file.\n\nThe `client` part implements the React component that will be shown to the user once docusaurus is up and running.\n\n### The `example-doc` folder\n\nIn the `example-doc` directory there is a generated docusaurus instance with the plugin already configured.\n\nDuring development, you don't have to build anything to make it loadable, as it is loaded by the Webpack instance of Docusaurus.\n```\n\n----------------------------------------\n\nTITLE: Apache 2.0 License Header Text\nDESCRIPTION: Standard copyright and license notice using Apache License 2.0. Establishes OramaSearch Inc. as the copyright holder and specifies terms of use under the Apache License.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/stopwords/LICENSE.md#2025-04-11_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright 2023 OramaSearch Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Placeholder for PHP Faceted Search Implementation\nDESCRIPTION: This is a placeholder for the PHP implementation of faceted search using Orama. The actual implementation is not provided in the given content.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Configuring Sidebar Metadata in Markdown for Docusaurus\nDESCRIPTION: This snippet demonstrates how to add metadata to a Markdown document to customize its sidebar label and position in Docusaurus. It includes YAML frontmatter with sidebar-specific properties.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/create-a-document.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\nsidebar_label: 'Hi!'\nsidebar_position: 3\n---\n\n# Hello\n\nThis is my **first Docusaurus document**!\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Support Table for Arabic Script in Markdown\nDESCRIPTION: This snippet shows a markdown table illustrating the support for tokenization, stop-words, and stemming in Arabic language using the Arabic script in Orama.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/supported-languages/index.mdx#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Language | Tokenizer | Stop-words | Stemmer |\n| -------- | --------- | ---------- | ------- |\n| Arabic   | â        | â         | â      |\n```\n\n----------------------------------------\n\nTITLE: Radius Filter Placeholder in Swift\nDESCRIPTION: Placeholder for upcoming Swift implementation of radius filtering in Orama Search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_27\n\nLANGUAGE: swift\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Polygon Filter Placeholder in Python\nDESCRIPTION: Placeholder for upcoming Python implementation of polygon filtering in Orama Search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Adding Language Dropdown to Navigation\nDESCRIPTION: Configuration to add a language selector dropdown menu to the navigation bar in docusaurus.config.js.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'localeDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Switch via npm\nDESCRIPTION: Command to install the Orama Switch library using npm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/switch/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @orama/switch\n```\n\n----------------------------------------\n\nTITLE: Adding a Version Dropdown to Docusaurus Navigation\nDESCRIPTION: This code snippet modifies the 'docusaurus.config.js' file to add a version dropdown to the navigation bar, allowing users to switch between different versions of the documentation.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-extras/manage-docs-versions.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'docsVersionDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Using HTML Comments for Blog Post Truncation in Docusaurus\nDESCRIPTION: Shows how to implement the truncate comment tag in Docusaurus to limit blog post preview length in list views. This comment acts as a marker for where the post should be truncated in preview mode.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/blog/2019-05-29-long-blog-post.md#2025-04-11_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- truncate -->\n```\n\n----------------------------------------\n\nTITLE: Configuring Docusaurus Sidebar Manually in JavaScript\nDESCRIPTION: This snippet shows how to manually configure the Docusaurus sidebar in the sidebars.js file. It demonstrates how to add documents and create categories in the sidebar structure.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/create-a-document.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  tutorialSidebar: [\n    'intro',\n    // highlight-next-line\n    'hello',\n    {\n      type: 'category',\n      label: 'Tutorial',\n      items: ['tutorial-basics/create-a-document'],\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button with React in MDX\nDESCRIPTION: This snippet demonstrates how to create an interactive button using React within an MDX blog post. It uses an onClick event handler to display an alert when the button is clicked.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/blog/2021-08-01-mdx-blog-post.mdx#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Blog Post in Docusaurus\nDESCRIPTION: This snippet demonstrates how to create a basic blog post in Docusaurus using Markdown. It includes frontmatter metadata such as slug, title, authors, and tags, followed by the post content. The file should be placed in the 'blog' directory with a date-based filename.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/create-a-blog-post.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: greetings\ntitle: Greetings!\nauthors:\n  - name: Joel Marcey\n    title: Co-creator of Docusaurus 1\n    url: https://github.com/JoelMarcey\n    image_url: https://github.com/JoelMarcey.png\n  - name: SÃ©bastien Lorber\n    title: Docusaurus maintainer\n    url: https://sebastienlorber.com\n    image_url: https://github.com/slorber.png\ntags: [greetings]\n---\n\nCongratulations, you have made your first post!\n\nFeel free to play around and edit this post as much you like.\n```\n\n----------------------------------------\n\nTITLE: Generating New Docusaurus Site with Classic Template\nDESCRIPTION: Command to create a new Docusaurus site using the classic template. This initializes the project and installs all required dependencies.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/intro.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init docusaurus@latest my-website classic\n```\n\n----------------------------------------\n\nTITLE: Generating New Docusaurus Site with Classic Template\nDESCRIPTION: This command initializes a new Docusaurus site using the classic template. It creates a new project directory and installs all necessary dependencies.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/intro.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init docusaurus@latest my-website classic\n```\n\n----------------------------------------\n\nTITLE: Adding Language Selector to Navigation\nDESCRIPTION: Adds a language dropdown menu to the Docusaurus navigation bar for easy switching between available locales.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'localeDropdown',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter in Markdown for Orama Search\nDESCRIPTION: This snippet shows how to define frontmatter in a markdown file, which can be used by Orama for indexing and organizing content. The frontmatter includes a title that could be used as metadata for the search index.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/plugin-astro/test/sandbox/src/content/posts/article.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: 'A cool article'\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Post Frontmatter in YAML\nDESCRIPTION: YAML configuration block defining metadata for a blog post including slug, title, author information (name, title, GitHub URL, and avatar), and associated tags.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/blog/2019-05-28-first-blog-post.md#2025-04-11_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nslug: first-blog-post\ntitle: First Blog Post\nauthors:\n  name: Gao Wei\n  title: Docusaurus Core Team\n  url: https://github.com/wgao19\n  image_url: https://github.com/wgao19.png\ntags: [hola, docusaurus]\n```\n\n----------------------------------------\n\nTITLE: Styling Root and Main Frame Container in CSS\nDESCRIPTION: Custom CSS styles for the documentation page layout, including content width configuration and decorative background blur effect. Defines styles for the root element and a main-frame container with a positioned blur background.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/index.mdx#2025-04-11_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n:root {\n  --sl-content-width: 1024px !important;\n}\n.main-frame {\n  overflow: hidden;\n  position: relative;\n}\n.main-frame:before {\n  position: absolute;\n  z-index: 0;\n  content: '';\n  top: 60px;\n  right: -25px;\n  width: 500px;\n  height: 500px;\n  max-width: 70vw;\n  background-color: var(--sl-color-blur-bg);\n  border-radius: 800px;\n  filter: blur(67px);\n  will-change: transform;\n  transform: perspective(1200px);\n  opacity: 0.3;\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Images in Markdown\nDESCRIPTION: Shows how to insert images in Markdown using both absolute paths to the static directory and relative paths.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/markdown-features.mdx#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Docusaurus logo](/img/docusaurus.png)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n![Docusaurus logo](./img/docusaurus.png)\n```\n\n----------------------------------------\n\nTITLE: Handling Answer Aborted Events with Python SDK\nDESCRIPTION: Placeholder for the Python SDK implementation of the answer aborted event listener, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_41\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Page Frontmatter\nDESCRIPTION: Basic markdown frontmatter setup defining the page title using YAML syntax.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/src/pages/markdown-page.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown page example\n---\n\n# Markdown page example\n\nYou don't need React to write simple standalone pages.\n```\n\n----------------------------------------\n\nTITLE: Handling Answer Aborted Events with Swift SDK\nDESCRIPTION: Placeholder for the Swift SDK implementation of the answer aborted event listener, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_39\n\nLANGUAGE: swift\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Testing Production Build Locally\nDESCRIPTION: Command to serve the production build locally for testing at http://localhost:3000/. Serves the contents of the build folder.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/deploy-your-site.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Building Multi-locale Site\nDESCRIPTION: Command to build the Docusaurus site with all configured locales.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-extras/translate-your-site.md#2025-04-11_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Polygon Filter Placeholder in PHP\nDESCRIPTION: Placeholder for upcoming PHP implementation of polygon filtering in Orama Search.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/performing-search/full-text-search.mdx#2025-04-11_snippet_35\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Site for Production\nDESCRIPTION: Command to build the Docusaurus site for production deployment. Generates static files in the build folder.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/docs/tutorial-basics/deploy-your-site.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Angular Components via npm\nDESCRIPTION: Command to install Orama Angular Components using npm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @orama/angular-components\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Web Components via pnpm\nDESCRIPTION: Command to install Orama Web Components using pnpm package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i @orama/wc-components\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Without SSH\nDESCRIPTION: Deploys the website using GitHub username authentication to GitHub Pages or similar hosting platform.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/README.md#2025-04-11_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ GIT_USER=<Your GitHub username> yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Orama Web Components via yarn\nDESCRIPTION: Command to install Orama Web Components using yarn package manager.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/ui-components/design-system.mdx#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @orama/wc-components\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using SSH\nDESCRIPTION: Deploys the website using SSH authentication method to the hosting platform.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/README.md#2025-04-11_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ USE_SSH=true yarn deploy\n```\n\n----------------------------------------\n\nTITLE: Starting Docusaurus Development Server\nDESCRIPTION: Command to start the local development server which provides live preview of changes in the browser.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v2.4.3-sandbox/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Building Docusaurus Site for Production using npm\nDESCRIPTION: This command builds the Docusaurus site for production, generating static files in the 'build' folder.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/deploy-your-site.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Orama Project\nDESCRIPTION: Command to build the Orama project using PNPM build script.\nSOURCE: https://github.com/oramasearch/orama/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Configuring userContext as JSON String in Swift\nDESCRIPTION: This snippet demonstrates how to configure userContext as a JSON string in Swift. It provides structured user information to help personalize the answer session responses.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nimport OramaCloudClient\n\nlet clientParams = OramaClientParams(endpoint: \"\", apiKey: \"\")\nlet orama = OramaClient(params: clientParams)\n\nlet answerParams = AnswerParams<E2EDoc>(\n  userContext: \"{ name: \\\"John Doe\\\", musicTaste: [\\\"Rock\\\", \\\"Punk\\\", \\\"Metal\\\"], customerSince: 2019 }\",\n  inferenceType: .documentation,\n  initialMessages: [],\n  oramaClient: orama,\n)\nlet answerSession = AnswerSession(params: answerParams)\n```\n\n----------------------------------------\n\nTITLE: Serving Docusaurus Production Build Locally using npm\nDESCRIPTION: This command serves the production build locally for testing, making the 'build' folder accessible at http://localhost:3000/.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/docs/tutorial-basics/deploy-your-site.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Search Result Structure in Orama\nDESCRIPTION: Shows the structure of a search result object from Orama, including elapsed time, result count, and hit entries with scores and documents. Each hit contains an ID, relevance score, and the original document.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/open-source/usage/search/introduction.mdx#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  elapsed: {\n    raw: 181208,\n    formatted: '181Î¼s',\n  },\n  count: 2,\n  hits: [\n    {\n      id: '37149225-243',\n      score: 0.23856062735983122,\n      document: {\n        title: 'Harry Potter and the Philosopher\\'s Stone',\n        director: 'Chris Columbus',\n        plot: 'Harry Potter, an eleven-year-old orphan, discovers that he is a wizard and is invited to study at Hogwarts. Even as he escapes a dreary life and enters a world of magic, he finds trouble awaiting him.',\n        year: 2001,\n        isFavorite: false\n      }\n    },\n    {\n      id: '37149225-5',\n      score: 0.21267890323564321,\n      document: {\n        title: 'The prestige',\n        director: 'Christopher Nolan',\n        plot: 'Two friends and fellow magicians become bitter enemies after a sudden tragedy. As they devote themselves to this rivalry, they make sacrifices that bring them fame but with terrible consequences.',\n        year: 2006,\n        isFavorite: true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Markdown Page Front Matter\nDESCRIPTION: Example of markdown front matter for a simple standalone page that demonstrates basic page metadata configuration.\nSOURCE: https://github.com/oramasearch/orama/blob/main/sandboxes/plugin-docusaurus-v3-sandbox/src/pages/markdown-page.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Markdown page example\n---\n\n# Markdown page example\n\nYou don't need React to write simple standalone pages.\n```\n\n----------------------------------------\n\nTITLE: Asking Questions with Python SDK\nDESCRIPTION: Placeholder for the Python SDK implementation of the ask functionality, which is coming soon.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nprint(\"coming soon\")\n```\n\n----------------------------------------\n\nTITLE: Clearing the Orama Answer Session in PHP (Coming Soon)\nDESCRIPTION: This is a placeholder for the upcoming PHP implementation for clearing an Orama answer session.\nSOURCE: https://github.com/oramasearch/orama/blob/main/packages/docs/src/content/docs/cloud/answer-engine/creating-an-answer-session.mdx#2025-04-11_snippet_62\n\nLANGUAGE: php\nCODE:\n```\n// coming soon\n```"
  }
]