[
  {
    "owner": "rossumai",
    "repo": "rossum-sdk",
    "content": "TITLE: Asynchronous Rossum API Client Example\nDESCRIPTION: This Python code demonstrates how to use the asynchronous Rossum API client to interact with the Rossum API. It includes creating a workspace, retrieving it, listing workspaces, and deleting a workspace. It uses `asyncio` for asynchronous operations and environment variables for credentials.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport asyncio\nfrom rossum_api import AsyncRossumAPIClient\nfrom rossum_api.dtos import UserCredentials\n\nWORKSPACE = {\n  \"name\": \"Rossum Client NG Test\",\n  \"organization\": \"https://elis.rossum.ai/api/v1/organizations/116390\",\n}\n\n\nasync def main_with_async_client():\n  client = AsyncRossumAPIClient(\n    base_url=\"https://elis.rossum.ai/api/v1\",\n    credentials=UserCredentials(os.environ[\"ELIS_USERNAME\"], os.environ[\"ELIS_PASSWORD\"]),\n  )\n  ws = await client.create_new_workspace(data=WORKSPACE)\n  workspace_id = ws.id\n  ws = await client.retrieve_workspace(workspace_id)\n  print(\"GET result:\", ws)\n  print(\"LIST results:\")\n  async for w in client.list_workspaces(ordering=[\"-id\"], name=WORKSPACE[\"name\"]):\n    print(w)\n  await client.delete_workspace(workspace_id)\n  print(f\"Workspace {workspace_id} deleted.\")\n\n\nasyncio.run(main_with_async_client())\n```\n\n----------------------------------------\n\nTITLE: Synchronous Rossum API Client Example\nDESCRIPTION: This Python code demonstrates how to use the synchronous Rossum API client to interact with the Rossum API. It includes creating a workspace, retrieving it, listing workspaces, and deleting a workspace. It relies on environment variables for credentials and does not require an event loop.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom rossum_api import SyncRossumAPIClient\nfrom rossum_api.dtos import UserCredentials\n\nWORKSPACE = {\n    \"name\": \"Rossum Client NG Test\",\n    \"organization\": \"https://elis.rossum.ai/api/v1/organizations/116390\",\n}\n\n\ndef main_with_sync_client():\n    client = SyncRossumAPIClient(\n        base_url=\"https://elis.rossum.ai/api/v1\",\n        credentials=UserCredentials(os.environ[\"ELIS_USERNAME\"], os.environ[\"ELIS_PASSWORD\"]),\n    )\n    ws = client.create_new_workspace(data=WORKSPACE)\n    workspace_id = ws.id\n    ws = client.retrieve_workspace(workspace_id)\n    print(\"GET result:\", ws)\n    print(\"LIST results:\")\n    for w in client.list_workspaces(ordering=[\"-id\"], name=WORKSPACE[\"name\"]):\n        print(w)\n    client.delete_workspace(workspace_id)\n    print(f\"Workspace {workspace_id} deleted.\")\n\n\nmain_with_sync_client()\n```\n\n----------------------------------------\n\nTITLE: Installing Pre-Commit Hooks\nDESCRIPTION: These commands install pre-commit hooks to automatically enforce coding style and quality checks before each commit. This helps maintain a consistent codebase and prevents common errors from being introduced.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n\npre-commit install-hooks\n```\n\n----------------------------------------\n\nTITLE: Creating a Python Virtual Environment\nDESCRIPTION: This command creates a Python virtual environment in the .env directory. A virtual environment isolates project dependencies, preventing conflicts with other projects or system-level packages.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd rossum-sdk\n\npython -m venv .env\n\nsource .env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup with Makefile\nDESCRIPTION: These Makefile commands help to set up a development environment quickly. The first command creates a virtual environment, and the second installs project dependencies, including those needed for testing.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake .venv  # Creates virtualenv in .venv folder\nmake install # Installs all project dependencies including test ones\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Make\nDESCRIPTION: This command uses the make utility to run the test suite. It leverages Tox to execute tests under multiple Python versions.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd rossum-sdk\n\nmake test\n```\n\n----------------------------------------\n\nTITLE: Running Tests Manually\nDESCRIPTION: These commands demonstrate how to run tests manually using pytest. It includes steps for creating and activating a virtual environment, installing the SDK and test requirements, and executing the pytest command.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd rossum-sdk\n\n# create virtual environment\npython -m venv .env\n\n# activate virtual environment\nsource .env/bin/activate\n\n# install sentry-python\npip install -e .\n\n# install requirements\npip install -e .\"[tests]\"\n\n# run tests\npytest tests/\n```\n\n----------------------------------------\n\nTITLE: Installing Rossum SDK in Editable Mode\nDESCRIPTION: This command installs the rossum-sdk package in editable mode using pip. The -e flag allows modifications to the package source code to be reflected immediately without reinstalling.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Installing rossum-api from PyPI\nDESCRIPTION: This command installs the `rossum-api` package directly from the GitHub repository using pip. It specifies the repository URL and the package name for installation.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://github.com/rossumai/rossum-sdk#egg=rossum-api\n```\n\n----------------------------------------\n\nTITLE: Cloning the Rossum SDK Repository\nDESCRIPTION: This command clones the Rossum SDK repository from GitHub. It's the first step in setting up the development environment.\nSOURCE: https://github.com/rossumai/rossum-sdk/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit@github.com:rossumai/rossum-sdk.git\n```"
  }
]