[
  {
    "owner": "mikemcl",
    "repo": "decimal.js",
    "content": "TITLE: Creating Decimal Instances\nDESCRIPTION: Shows how to create Decimal instances from numbers, strings, and other Decimal objects, highlighting the importance of using strings for precision.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nx = new Decimal(123.4567)\ny = new Decimal('123456.7e-3')\nz = new Decimal(x)\nx.equals(y) && y.equals(z) && x.equals(z)        // true\n```\n\n----------------------------------------\n\nTITLE: Performing Arithmetic Operations with Decimal\nDESCRIPTION: Illustrates how to perform basic arithmetic operations using Decimal instances, showing the immutability of Decimal objects and method chaining.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n0.3 - 0.1                     // 0.19999999999999998\nx = new Decimal(0.3)\nx.minus(0.1)                  // '0.2'\nx                             // '0.3'\n\nx.dividedBy(y).plus(z).times(9).floor()\nx.times('1.23456780123456789e+9').plus(9876.5432321).dividedBy('4444562598.111772').ceil()\n```\n\n----------------------------------------\n\nTITLE: Configuring Decimal Precision and Rounding\nDESCRIPTION: Shows how to configure the precision and rounding mode for Decimal calculations, including creating multiple Decimal constructors with different configurations.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Set the precision and rounding of the default Decimal constructor\nDecimal.set({ precision: 5, rounding: 4 })\n\n// Create another Decimal constructor, optionally passing in a configuration object\nDec = Decimal.clone({ precision: 9, rounding: 1 })\n\nx = new Decimal(5)\ny = new Dec(5)\n\nx.div(3)                           // '1.6667'\ny.div(3)                           // '1.66666666'\n```\n\n----------------------------------------\n\nTITLE: Installing and Importing Decimal.js in Node.js\nDESCRIPTION: Demonstrates how to install Decimal.js using npm and import it in Node.js using CommonJS and ES module syntax.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install decimal.js\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst Decimal = require('decimal.js');\n\nimport Decimal from 'decimal.js';\n\nimport {Decimal} from 'decimal.js';\n```\n\n----------------------------------------\n\nTITLE: Loading Decimal.js in HTML\nDESCRIPTION: Shows how to include Decimal.js in a browser environment using both script tags and ES modules.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script src='path/to/decimal.js'></script>\n\n<script type=\"module\">\n  import Decimal from './path/to/decimal.mjs';\n  ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using Decimal Methods and Aliases\nDESCRIPTION: Shows the usage of various Decimal methods, including those that replicate JavaScript's Number.prototype and Math objects, as well as method aliases.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nx.squareRoot().dividedBy(y).toPower(3).equals(x.sqrt().div(y).pow(3))     // true\nx.comparedTo(y.modulo(z).negated() === x.cmp(y.mod(z).neg())              // true\n\nx = new Decimal(255.5)\nx.toExponential(5)                       // '2.55500e+2'\nx.toFixed(5)                             // '255.50000'\nx.toPrecision(5)                         // '255.50'\n\nDecimal.sqrt('6.98372465832e+9823')      // '8.3568682281821340204e+4911'\nDecimal.pow(2, 0.0979843)                // '1.0702770511687781839'\n\n// Using `toFixed()` to avoid exponential notation:\nx = new Decimal('0.0000001')\nx.toString()                             // '1e-7'\nx.toFixed()                              // '0.0000001'\n```\n\n----------------------------------------\n\nTITLE: Handling Large Numbers and Different Notations\nDESCRIPTION: Demonstrates creating Decimal instances from large numbers, binary, hexadecimal, and octal notations, as well as using underscores as separators.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nx = new Decimal('2_147_483_647')\n\nx = new Decimal('0xff.f')            // '255.9375'\ny = new Decimal('0b10101100')        // '172'\nz = x.plus(y)                        // '427.9375'\n\nz.toBinary()                         // '0b110101011.1111'\nz.toBinary(13)                       // '0b1.101010111111p+8'\n\n// Using binary exponential notation to create a Decimal with the value of `Number.MAX_VALUE`.\nx = new Decimal('0b1.1111111111111111111111111111111111111111111111111111p+1023')\n// '1.7976931348623157081e+308'\n```\n\n----------------------------------------\n\nTITLE: Handling Special Values and Fractions\nDESCRIPTION: Demonstrates how Decimal handles NaN and Infinity, and shows the usage of the toFraction method.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nx = new Decimal(NaN)                                           // 'NaN'\ny = new Decimal(Infinity)                                      // 'Infinity'\nx.isNaN() && !y.isNaN() && !x.isFinite() && !y.isFinite()      // true\n\nz = new Decimal(355)\npi = z.dividedBy(113)        // '3.1415929204'\npi.toFraction()              // [ '7853982301', '2500000000' ]\npi.toFraction(1000)          // [ '355', '113' ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Decimal Properties\nDESCRIPTION: Demonstrates how to access the internal properties of a Decimal instance, which represent its value in a floating-point format.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nx = new Decimal(-12345.67);\nx.d                            // [ 12345, 6700000 ]    digits (base 10000000)\nx.e                            // 4                     exponent (base 10)\nx.s                            // -1                   sign\n```\n\n----------------------------------------\n\nTITLE: Minifying Decimal.js Files\nDESCRIPTION: Provides examples of how to minify the Decimal.js library using uglify-js for the standard version and terser for the ES module version.\nSOURCE: https://github.com/mikemcl/decimal.js/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install uglify-js -g\nuglifyjs decimal.js --source-map url=decimal.min.js.map -c -m -o decimal.min.js\n```\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install terser -g\nterser decimal.mjs --source-map url=decimal.min.mjs.map -c -m --toplevel -o decimal.min.mjs\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Decimal from './decimal.min.mjs';\n```"
  }
]