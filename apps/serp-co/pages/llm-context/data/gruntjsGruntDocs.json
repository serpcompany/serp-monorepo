[
  {
    "owner": "gruntjs",
    "repo": "grunt-docs",
    "content": "TITLE: Complete Gruntfile Example\nDESCRIPTION: Example Gruntfile.js showing configuration for uglify task with dynamic file banner\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Getting-started.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    uglify: {\n      options: {\n        banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\n      },\n      build: {\n        src: 'src/<%= pkg.name %>.js',\n        dest: 'build/<%= pkg.name %>.min.js'\n      }\n    }\n  });\n\n  // Load the plugin that provides the \"uglify\" task.\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n\n  // Default task(s).\n  grunt.registerTask('default', ['uglify']);\n\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Tasks in JavaScript\nDESCRIPTION: This Gruntfile.js configures multiple Grunt tasks including concat, uglify, qunit, jshint, and watch. It sets up file paths, options, and registers custom tasks for testing and default build process.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    concat: {\n      options: {\n        separator: ';'\n      },\n      dist: {\n        src: ['src/**/*.js'],\n        dest: 'dist/<%= pkg.name %>.js'\n      }\n    },\n    uglify: {\n      options: {\n        banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"dd-mm-yyyy\") %> */\\n'\n      },\n      dist: {\n        files: {\n          'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']\n        }\n      }\n    },\n    qunit: {\n      files: ['test/**/*.html']\n    },\n    jshint: {\n      files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n      options: {\n        // options here to override JSHint defaults\n        globals: {\n          jQuery: true,\n          console: true,\n          module: true,\n          document: true\n        }\n      }\n    },\n    watch: {\n      files: ['<%= jshint.files %>'],\n      tasks: ['jshint', 'qunit']\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-qunit');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n\n  grunt.registerTask('test', ['jshint', 'qunit']);\n\n  grunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);\n\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Alias Tasks in Grunt\nDESCRIPTION: Demonstrates how to register alias tasks in Grunt, which allow running multiple tasks in sequence. The example shows creating a default task and a custom 'dist' task with arguments.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-tasks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask(taskName, [description, ] taskList)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('dist', ['concat:dist', 'uglify:dist']);\n```\n\n----------------------------------------\n\nTITLE: Initializing Grunt Configuration in JavaScript\nDESCRIPTION: This snippet demonstrates how to use grunt.initConfig to set up task configurations for concat and uglify, as well as arbitrary properties. It shows the basic structure of a Grunt configuration object.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  concat: {\n    // concat task configuration goes here.\n  },\n  uglify: {\n    // uglify task configuration goes here.\n  },\n  // Arbitrary non-task-specific properties.\n  my_property: 'whatever',\n  my_src_files: ['foo/*.js', 'bar/*.js'],\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Gruntfile Structure for JavaScript Project\nDESCRIPTION: A complete example of a Gruntfile that sets up tasks for linting and watching files in a JavaScript project. It uses grunt-contrib-jshint for linting and grunt-contrib-watch for monitoring file changes.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n    jshint: {\n      files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n      options: {\n        globals: {\n          jQuery: true\n        }\n      }\n    },\n    watch: {\n      files: ['<%= jshint.files %>'],\n      tasks: ['jshint']\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n\n  grunt.registerTask('default', ['jshint']);\n\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Grunt Tasks for JavaScript Project\nDESCRIPTION: Defines custom Grunt tasks, including a 'test' task that runs jshint and qunit, and a default task that runs jshint, qunit, concat, and uglify.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// this would be run by typing \"grunt test\" on the command line\ngrunt.registerTask('test', ['jshint', 'qunit']);\n\n// the default task can be run just by typing \"grunt\" on the command line\ngrunt.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);\n```\n\n----------------------------------------\n\nTITLE: Importing External Data in Grunt Configuration\nDESCRIPTION: This snippet demonstrates how to import external data (from a package.json file) into the Grunt configuration. It shows how to use the imported data to configure the 'uglify' task, including generating a dynamic banner comment.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  pkg: grunt.file.readJSON('package.json'),\n  uglify: {\n    options: {\n      banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"yyyy-mm-dd\") %> */\\n'\n    },\n    dist: {\n      src: 'src/<%= pkg.name %>.js',\n      dest: 'dist/<%= pkg.name %>.min.js'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using Templates in Grunt Configuration\nDESCRIPTION: This example illustrates the use of templates in Grunt configuration. It shows how to reference properties within the config object, use inline JavaScript, and import external data from a package.json file. The snippet includes a sample 'concat' task configuration using templates.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  concat: {\n    sample: {\n      options: {\n        banner: '/* <%= baz %> */\\n',   // '/* abcde */\\n'\n      },\n      src: ['<%= qux %>', 'baz/*.js'],  // [['foo/*.js', 'bar/*.js'], 'baz/*.js']\n      dest: 'build/<%= baz %>.js',      // 'build/abcde.js'\n    },\n  },\n  // Arbitrary properties used in task configuration templates.\n  foo: 'c',\n  bar: 'b<%= foo %>d', // 'bcd'\n  baz: 'a<%= bar %>e', // 'abcde'\n  qux: ['foo/*.js', 'bar/*.js'],\n});\n```\n\n----------------------------------------\n\nTITLE: Registering an Alias Task in Grunt\nDESCRIPTION: Demonstrates how to register an alias task that runs multiple other tasks in sequence. This example defines a 'default' task that runs 'jshint', 'qunit', 'concat', and 'uglify' tasks.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.task.md#2025-04-10_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.registerTask('default', ['jshint', 'qunit', 'concat', 'uglify']);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Tasks in Grunt\nDESCRIPTION: Shows various examples of creating custom tasks in Grunt, including tasks that run other tasks, asynchronous tasks, tasks that access their own name and arguments, and tasks that can fail.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-tasks.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('default', 'My \"default\" task description.', function() {\n  grunt.log.writeln('Currently running the \"default\" task.');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Enqueue \"bar\" and \"baz\" tasks, to run after \"foo\" finishes, in-order.\n  grunt.task.run('bar', 'baz');\n  // Or:\n  grunt.task.run(['bar', 'baz']);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('asyncfoo', 'My \"asyncfoo\" task.', function() {\n  // Force task into async mode and grab a handle to the \"done\" function.\n  var done = this.async();\n  // Run some sync stuff.\n  grunt.log.writeln('Processing task...');\n  // And some async stuff.\n  setTimeout(function() {\n    grunt.log.writeln('All done!');\n    done();\n  }, 1000);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('foo', 'My \"foo\" task.', function(a, b) {\n  grunt.log.writeln(this.name, a, b);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('foo', 'My \"foo\" task.', function() {\n  if (failureOfSomeKind) {\n    grunt.log.error('This is an error message.');\n  }\n\n  // Fail by returning false if this task had errors\n  if (ifErrors) { return false; }\n\n  grunt.log.writeln('This is the success message');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Fail synchronously.\n  return false;\n});\n\ngrunt.registerTask('bar', 'My \"bar\" task.', function() {\n  var done = this.async();\n  setTimeout(function() {\n    // Fail asynchronously.\n    done(false);\n  }, 1000);\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('foo', 'My \"foo\" task.', function() {\n  return false;\n});\n\ngrunt.registerTask('bar', 'My \"bar\" task.', function() {\n  // Fail task if \"foo\" task failed or never ran.\n  grunt.task.requires('foo');\n  // This code executes if the \"foo\" task ran successfully.\n  grunt.log.writeln('Hello, world.');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Fail task if \"meta.name\" config prop is missing\n  // Format 1: String\n  grunt.config.requires('meta.name');\n  // or Format 2: Array\n  grunt.config.requires(['meta', 'name']);\n  // Log... conditionally.\n  grunt.log.writeln('This will only log if meta.name is defined in the config.');\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Log the property value. Returns null if the property is undefined.\n  grunt.log.writeln('The meta.name property is: ' + grunt.config('meta.name'));\n  // Also logs the property value. Returns null if the property is undefined.\n  grunt.log.writeln('The meta.name property is: ' + grunt.config(['meta', 'name']));\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Grunt Copy Task with Custom Filter and Globbing\nDESCRIPTION: This snippet demonstrates an advanced Grunt copy task configuration using globbing patterns, expand: true, and a custom filter function. It copies CSS files only if their destinations are unoccupied, avoiding overwriting existing files.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  copy: {\n    templates: {\n      files: [{\n        expand: true,\n        cwd: ['templates/css/'],     // Parent folder of original CSS templates\n        src: '**/*.css',             // Collects all `*.css` files within the parent folder (and its subfolders)\n        dest: 'src/css/',            // Stores the collected `*.css` files in your `src/css/` folder\n        filter: function (dest) {    // `dest`, in this instance, is the filepath of each matched `src`\n          var cwd = this.cwd,        // Configures variables (these are documented for your convenience only)\n              src = dest.replace(new RegExp('^' + cwd), '');\n              dest = grunt.task.current.data.files[0].dest;\n          return (!grunt.file.exists(dest + src));    // Copies `src` files ONLY if their destinations are unoccupied\n        }\n      }]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing New Gruntfile Format in JavaScript\nDESCRIPTION: Example of the new Gruntfile configuration format for Grunt 0.5, demonstrating task registration, parallel execution, and CLI options. Includes configuration for dry run, stack traces, verbose logging, and task registration using require statements.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Roadmap.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar grunt = require('grunt');\n\ngrunt.initConfig({\n  // defaults for cli\n  grunt: {\n    dryRun: true,\n    stack: true,\n    verbose: true,\n    // what about defining loggers specific to a task?\n    // is this required in your gruntfile or on by default?\n    logger: [require('grunt-logger')]\n  },\n  jshint: {\n    // ...\n  },\n  concat: {\n    // ...\n  },\n  min: {\n    // ...\n  }\n});\n\ngrunt.registerTask(require('grunt-contrib-jshint'));\ngrunt.registerTask(require('grunt-contrib-concat'));\ngrunt.registerTask(require('grunt-contrib-uglify'), 'min'); // optional second param renames\n\n// generates a node-task compliant object and runs grunt.registerTask on it\ngrunt.registerTask('name','description', function (config) {\n  //...\n});\n\n// load a set of tasks to be run in parallel\ngrunt.registerTask('name', ['jshint', 'concat'], { parallel:true });\n\n// i think the cli should call this, but putting it here because you mentioned thinking it should go here.\ngrunt.run();\n```\n\n----------------------------------------\n\nTITLE: Initializing Grunt Configuration\nDESCRIPTION: Initialize configuration object using grunt.config.init method. Used to set up project-wide configuration that can be accessed by tasks.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.init(configObject)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Task Targets in Grunt\nDESCRIPTION: This example shows how to configure multiple targets for the concat task and a single target for the uglify task. It demonstrates the structure for defining task-specific configurations with multiple targets.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  concat: {\n    foo: {\n      // concat task \"foo\" target options and files go here.\n    },\n    bar: {\n      // concat task \"bar\" target options and files go here.\n    },\n  },\n  uglify: {\n    bar: {\n      // uglify task \"bar\" target options and files go here.\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Multi Task in Grunt\nDESCRIPTION: Shows how to register a multi task that iterates over named sub-properties. This example defines a 'log' task that logs different messages based on the target specified.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.task.md#2025-04-10_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrunt.initConfig({\n  log: {\n    foo: [1, 2, 3],\n    bar: 'hello world',\n    baz: false\n  }\n});\n\ngrunt.task.registerMultiTask('log', 'Log stuff.', function() {\n  grunt.log.writeln(this.target + ': ' + this.data);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Task and Target-Level Options in Grunt\nDESCRIPTION: This snippet illustrates how to set options at both the task level and target level for the concat task. It shows that target-level options override task-level options, and that options are optional.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  concat: {\n    options: {\n      // Task-level options may go here, overriding task defaults.\n    },\n    foo: {\n      options: {\n        // \"foo\" target options may go here, overriding task-level options.\n      },\n    },\n    bar: {\n      // No options specified; this target will use task-level options.\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Task in Grunt\nDESCRIPTION: Demonstrates how to make a Grunt task asynchronous using this.async(). Shows error handling and success/failure signaling using the done callback.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Inside-Tasks.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Tell Grunt this task is asynchronous.\nvar done = this.async();\n// Your async code.\nsetTimeout(function() {\n  // Let's simulate an error, sometimes.\n  var success = Math.random() > 0.5;\n  // All done!\n  done(success);\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Configuring JSHint Task with Grunt and Task-Specific Options\nDESCRIPTION: This example demonstrates how to configure the JSHint task using Grunt file options (src and filter) and task-specific options (-W015). It shows the distinction between Grunt built-in options and task-specific options.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  jshint: {\n    ignore_warning: {\n      options: {\n        '-W015': true,\n      },\n      src: 'js/**',\n      filter: 'isFile'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Tasks with Files Object Format\nDESCRIPTION: This example demonstrates the files object format for configuring Grunt tasks. It shows how to specify multiple src-dest mappings per target for the concat task, using destination file names as property names.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  concat: {\n    foo: {\n      files: {\n        'dest/a.js': ['src/aa.js', 'src/aaa.js'],\n        'dest/a1.js': ['src/aa1.js', 'src/aaa1.js'],\n      },\n    },\n    bar: {\n      files: {\n        'dest/b.js': ['src/bb.js', 'src/bbb.js'],\n        'dest/b1.js': ['src/bb1.js', 'src/bbb1.js'],\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Compact Format for Grunt Task Configuration\nDESCRIPTION: This snippet shows how to use the compact format for configuring tasks in Grunt. It demonstrates configurations for jshint and concat tasks, illustrating single src-dest mappings per target.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  jshint: {\n    foo: {\n      src: ['src/aa.js', 'src/aaa.js']\n    },\n  },\n  concat: {\n    bar: {\n      src: ['src/bb.js', 'src/bbb.js'],\n      dest: 'dest/b.js',\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Grunt Tasks in JavaScript Project\nDESCRIPTION: Loads the necessary Grunt plugins for the project, including uglify, jshint, qunit, watch, and concat.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.loadNpmTasks('grunt-contrib-uglify');\ngrunt.loadNpmTasks('grunt-contrib-jshint');\ngrunt.loadNpmTasks('grunt-contrib-qunit');\ngrunt.loadNpmTasks('grunt-contrib-watch');\ngrunt.loadNpmTasks('grunt-contrib-concat');\n```\n\n----------------------------------------\n\nTITLE: Using Files Array Format in Grunt Task Configuration\nDESCRIPTION: This snippet illustrates the files array format for configuring Grunt tasks. It shows how to specify multiple src-dest mappings per target with additional properties like nonull and filter for the concat task.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  concat: {\n    foo: {\n      files: [\n        {src: ['src/aa.js', 'src/aaa.js'], dest: 'dest/a.js'},\n        {src: ['src/aa1.js', 'src/aaa1.js'], dest: 'dest/a1.js'},\n      ],\n    },\n    bar: {\n      files: [\n        {src: ['src/bb.js', 'src/bbb.js'], dest: 'dest/b/', nonull: true},\n        {src: ['src/bb1.js', 'src/bbb1.js'], dest: 'dest/b1/', filter: 'isFile'},\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing an Asynchronous Task in Grunt.js\nDESCRIPTION: This code demonstrates how to properly implement an asynchronous task in Grunt by using the this.async() method to get a done callback and passing it to the asynchronous operation.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Frequently-Asked-Questions.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('asyncme', 'My asynchronous task.', function() {\n  var done = this.async();\n  doSomethingAsync(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Filter Function in Grunt Clean Task\nDESCRIPTION: This example shows how to use a custom filter function in a Grunt clean task configuration. The filter function checks if a filepath is a directory and if it's empty, allowing for more specific file targeting.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  clean: {\n    foo: {\n      src: ['tmp/**/*'],\n      filter: function(filepath) {\n        return (grunt.file.isDir(filepath) && require('fs').readdirSync(filepath).length === 0);\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Task Options Configuration in Grunt\nDESCRIPTION: Shows how to handle task options with default values using this.options().\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Inside-Tasks.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = this.options({\n  enabled: false,\n});\n\ndoSomething(options.enabled);\n```\n\n----------------------------------------\n\nTITLE: Building Dynamic File Mappings in Grunt Configuration\nDESCRIPTION: This example demonstrates how to use the 'expand' option to dynamically build file mappings in Grunt. It shows both static and dynamic file mappings for the 'uglify' task, explaining how Grunt expands the dynamic mappings into individual static mappings.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  uglify: {\n    static_mappings: {\n      // Because these src-dest file mappings are manually specified, every\n      // time a new file is added or removed, the Gruntfile has to be updated.\n      files: [\n        {src: 'lib/a.js', dest: 'build/a.min.js'},\n        {src: 'lib/b.js', dest: 'build/b.min.js'},\n        {src: 'lib/subdir/c.js', dest: 'build/subdir/c.min.js'},\n        {src: 'lib/subdir/d.js', dest: 'build/subdir/d.min.js'},\n      ],\n    },\n    dynamic_mappings: {\n      // Grunt will search for \"**/*.js\" under \"lib/\" when the \"uglify\" task\n      // runs and build the appropriate src-dest file mappings then, so you\n      // don't need to update the Gruntfile when files are added or removed.\n      files: [\n        {\n          expand: true,     // Enable dynamic expansion.\n          cwd: 'lib/',      // Src matches are relative to this path.\n          src: ['**/*.js'], // Actual pattern(s) to match.\n          dest: 'build/',   // Destination path prefix.\n          ext: '.min.js',   // Dest filepaths will have this extension.\n          extDot: 'first'   // Extensions in filenames begin after the first dot\n        },\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Function Task in Grunt\nDESCRIPTION: Demonstrates how to register a function task that logs custom messages based on the provided arguments. The task handles both cases with and without arguments.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.task.md#2025-04-10_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\ngrunt.task.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) {\n  if (arguments.length === 0) {\n    grunt.log.writeln(this.name + \", no args\");\n  } else {\n    grunt.log.writeln(this.name + \", \" + arg1 + \" \" + arg2);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Using the 'rename' Property in Grunt File Mappings\nDESCRIPTION: This snippet demonstrates how to use the 'rename' property in Grunt file mappings. It shows two examples: one for creating a backup of a file, and another for renaming files during a copy operation by removing a specific word from the filename.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  copy: {\n    backup: {\n      files: [{\n        expand: true,\n        src: ['docs/README.md'],    // The README.md file has been specified for backup\n        rename: function () {       // The value for rename must be a function\n          return 'docs/BACKUP.txt'; // The function must return a string with the complete destination\n        }\n      }]\n    }\n  }\n});\n\ngrunt.initConfig({\n  copy: {\n    production: {\n      files: [{\n        expand: true,\n        cwd: 'dev/',\n        src: ['*'],\n        dest: 'dist/',\n        rename: function (dest, src) {          // The `dest` and `src` values can be passed into the function\n          return dest + src.replace('beta',''); // The `src` is being renamed; the `dest` remains the same\n        }\n      }]\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-Task Files Configuration Example\nDESCRIPTION: Demonstrates the new multi-task file mapping structure in Grunt 0.4, where multiple src-dest file mappings can be specified per target in a files object.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Upgrading-from-0.3-to-0.4.md#2025-04-10_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nMultiple src-dest file mappings may now be specified per target in a `files` object (this is optional).\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Concat Task for JavaScript Files\nDESCRIPTION: Configures the grunt-contrib-concat plugin to concatenate all JavaScript files in the src directory into a single file in the dist directory.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconcat: {\n  options: {\n    // define a string to put between each file in the concatenated output\n    separator: ';'\n  },\n  dist: {\n    // the files to concatenate\n    src: ['src/**/*.js'],\n    // the location of the resulting JS file\n    dest: 'dist/<%= pkg.name %>.js'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Grunt Configuration in JavaScript\nDESCRIPTION: Sets up the basic structure for a Gruntfile, including the wrapper function and initialization of the configuration object.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json')\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Uglify Task for JavaScript Minification\nDESCRIPTION: Sets up the grunt-contrib-uglify plugin to minify the concatenated JavaScript file and add a banner comment with the package name and date.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nuglify: {\n  options: {\n    // the banner is inserted at the top of the output\n    banner: '/*! <%= pkg.name %> <%= grunt.template.today(\"dd-mm-yyyy\") %> */\\n'\n  },\n  dist: {\n    files: {\n      'dist/<%= pkg.name %>.min.js': ['<%= concat.dist.dest %>']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Grunt Plugin Task\nDESCRIPTION: Command to execute a Grunt plugin task directly from the command line.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-plugins.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrunt uglify\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt QUnit Task for JavaScript Testing\nDESCRIPTION: Configures the grunt-contrib-qunit plugin to run QUnit tests on all HTML files in the test directory.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nqunit: {\n  files: ['test/**/*.html']\n},\n```\n\n----------------------------------------\n\nTITLE: Custom Grunt Task Definition\nDESCRIPTION: Example of defining a custom Grunt task that logs a message\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Getting-started.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(grunt) {\n\n  // A very basic default task.\n  grunt.registerTask('default', 'Log some stuff.', function() {\n    grunt.log.write('Logging some stuff...').ok();\n  });\n\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt JSHint Task for JavaScript Linting\nDESCRIPTION: Sets up the grunt-contrib-jshint plugin to lint JavaScript files in the project, including the Gruntfile, source files, and test files.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\njshint: {\n  // define the files to lint\n  files: ['Gruntfile.js', 'src/**/*.js', 'test/**/*.js'],\n  // configure JSHint (documented at http://www.jshint.com/docs/)\n  options: {\n    // more options here if you want to override JSHint defaults\n    globals: {\n      jQuery: true,\n      console: true,\n      module: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Tasks with Command-line Options in JavaScript\nDESCRIPTION: This snippet demonstrates how to use grunt.option() to configure tasks based on command-line arguments. It shows how to set up different configurations for development and staging environments.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.option.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  compass: {\n    dev: {\n      options: {\n        /* ... */\n        outputStyle: 'expanded'\n      },\n    },\n    staging: {\n      options: {\n        /* ... */\n        outputStyle: 'compressed'\n      },\n    },\n  },\n});\nvar target = grunt.option('target') || 'dev';\ngrunt.registerTask('deploy', ['compass:' + target]);\n```\n\n----------------------------------------\n\nTITLE: Configuring File Writing Options in Grunt\nDESCRIPTION: Defines options for writing files, including encoding. If contents is a Buffer, encoding is ignored.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If `contents` is a Buffer, encoding is ignored.\n  encoding: encodingName\n};\n```\n\n----------------------------------------\n\nTITLE: Using Grunt Options for Parameter Sharing\nDESCRIPTION: An example of using grunt.option() to share parameters across multiple tasks. This allows command-line options like --target=staging to be accessed by different tasks in the workflow.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Frequently-Asked-Questions.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('upload', 'Upload code to specified target.', function() {\n  var target = grunt.option('target');\n  // do something useful with target here\n});\ngrunt.registerTask('deploy', ['validate', 'upload']);\n```\n\n----------------------------------------\n\nTITLE: Defining File Reading Options in Grunt\nDESCRIPTION: Specifies options for reading files, including encoding. If encoding is null, a Buffer is returned instead of a string.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If specified as null, returns a non-decoded Buffer instead of a string.\n  encoding: encodingName\n};\n```\n\n----------------------------------------\n\nTITLE: Installing grunt-init globally with npm\nDESCRIPTION: Command to install grunt-init globally on the system to make it available from any directory\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g grunt-init\n```\n\n----------------------------------------\n\nTITLE: Defining File Mapping Options in Grunt\nDESCRIPTION: Specifies options for mapping source files to destination paths, including flattening, changing extensions, and custom renaming functions.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  // The directory from which patterns are matched. Any string specified as\n  // cwd is effectively stripped from the beginning of all matched paths.\n  cwd: String,\n  // Remove the path component from all matched src files. The src file path\n  // is still joined to the specified dest.\n  flatten: Boolean,\n  // Remove anything after (and including) either the first or last \".\" in the\n  // destination path (indicated by options.extDot), then append this value.\n  ext: String,\n  // *Added in 0.4.3*\n  // Indicates where the period demarcating the extension is located. Can take:\n  // - 'first' (extension begins after the first period in the file name)\n  // - 'last' (extension begins after the last period)\n  // Default: 'first'\n  extDot: String,\n  // If specified, this function will be responsible for returning the final\n  // dest filepath. By default, it joins dest and matchedSrcPath like so:\n  rename: function(dest, matchedSrcPath, options) {\n    return path.join(dest, matchedSrcPath);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Merging Configuration Objects\nDESCRIPTION: Recursively merge configuration objects with existing config.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.merge(configObject)\n```\n\n----------------------------------------\n\nTITLE: Checking Directory Existence with grunt.file.isDir in JavaScript\nDESCRIPTION: This method checks if a given path is a directory. It joins all arguments and normalizes the resulting path. Returns a boolean, and false if the path doesn't exist.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.isDir(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Demonstrating File Globbing Patterns in Grunt Configuration\nDESCRIPTION: This snippet shows various ways to specify file patterns in Grunt configuration, including single files, arrays, glob patterns, and exclusions. It demonstrates how to use templates and reference other config properties in file paths.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Configuring-tasks.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// You can specify single files:\n{src: 'foo/this.js', dest: ...}\n// Or arrays of files:\n{src: ['foo/this.js', 'foo/that.js', 'foo/the-other.js'], dest: ...}\n// Or you can generalize with a glob pattern:\n{src: 'foo/th*.js', dest: ...}\n\n// This single node-glob pattern:\n{src: 'foo/{a,b}*.js', dest: ...}\n// Could also be written like this:\n{src: ['foo/a*.js', 'foo/b*.js'], dest: ...}\n\n// All .js files, in foo/, in alpha order:\n{src: ['foo/*.js'], dest: ...}\n// Here, bar.js is first, followed by the remaining files, in alpha order:\n{src: ['foo/bar.js', 'foo/*.js'], dest: ...}\n\n// All files except for bar.js, in alpha order:\n{src: ['foo/*.js', '!foo/bar.js'], dest: ...}\n// All files in alpha order, but with bar.js at the end.\n{src: ['foo/*.js', '!foo/bar.js', 'foo/bar.js'], dest: ...}\n\n// Templates may be used in filepaths or glob patterns:\n{src: ['src/<%= basename %>.js'], dest: 'build/<%= basename %>.min.js'}\n// But they may also reference file lists defined elsewhere in the config:\n{src: ['foo/*.js', '<%= jshint.all.src %>'], dest: ...}\n```\n\n----------------------------------------\n\nTITLE: Changing Working Directory with grunt.file.setBase in JavaScript\nDESCRIPTION: This method changes Grunt's current working directory (CWD). By default, all file paths are relative to the Gruntfile. It joins all arguments and normalizes the resulting path.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.setBase(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Config Property Validation in Grunt\nDESCRIPTION: Demonstrates how to validate required configuration properties using this.requiresConfig().\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Inside-Tasks.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.requiresConfig(prop [, prop [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Using Type Checking with grunt.util.kindOf\nDESCRIPTION: Returns the internal [[Class]] value of a given input, providing more detailed type information than typeof.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.util.kindOf(value)\n```\n\n----------------------------------------\n\nTITLE: Getting Configuration Values\nDESCRIPTION: Retrieve processed configuration values with template expansion.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.get([prop])\n```\n\n----------------------------------------\n\nTITLE: Array Conversion with grunt.util.toArray\nDESCRIPTION: Converts array-like objects into proper arrays.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.util.toArray(arrayLikeObject)\n```\n\n----------------------------------------\n\nTITLE: Using grunt.option() in Custom Grunt Tasks in JavaScript\nDESCRIPTION: This example shows how to use grunt.option() within a custom Grunt task. It demonstrates accessing the 'target' option set from the command line.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.option.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('upload', 'Upload code to specified target.', function(n) {\n  var target = grunt.option('target');\n  // do something useful with target here\n});\ngrunt.registerTask('deploy', ['validate', 'upload']);\n```\n\n----------------------------------------\n\nTITLE: String Pluralization with grunt.util.pluralize\nDESCRIPTION: Handles string pluralization based on a count, using a separator to split singular/plural forms.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.util.pluralize(n, str, separator)\n```\n\n----------------------------------------\n\nTITLE: Displaying Grunt Help\nDESCRIPTION: Command to display Grunt's help text and available options.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-the-CLI.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngrunt -h\n```\n\n----------------------------------------\n\nTITLE: String Repetition with grunt.util.repeat\nDESCRIPTION: Repeats a given string a specified number of times.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.util.repeat(n, str)\n```\n\n----------------------------------------\n\nTITLE: Configuring File Expansion Options in Grunt\nDESCRIPTION: Sets options for expanding file paths, including filtering, retaining unmatched patterns, matching basename, and changing the working directory.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  filter: 'isFile', // or custom function\n  nonull: true,\n  matchBase: true,\n  cwd: 'path/to/working/directory'\n};\n```\n\n----------------------------------------\n\nTITLE: Process Spawning Configuration\nDESCRIPTION: Configuration options for spawning child processes with grunt.util.spawn.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  // The command to execute. It should be in the system path.\n  cmd: commandToExecute,\n  // If specified, the same grunt bin that is currently running will be\n  // spawned as the child command, instead of the \"cmd\" option. Defaults\n  // to false.\n  grunt: boolean,\n  // An array of arguments to pass to the command.\n  args: arrayOfArguments,\n  // Additional options for the Node.js child_process spawn method.\n  opts: nodeSpawnOptions,\n  // If this value is set and an error occurs, it will be used as the value\n  // and null will be passed as the error value.\n  fallback: fallbackValue\n};\n```\n\n----------------------------------------\n\nTITLE: Watch Configuration Example\nDESCRIPTION: Example showing how to merge additional watch task configuration.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.merge({\n  watch: {\n    files: [\"path/to/files\"],\n    tasks: [\"task\"]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Process Spawn Callback Function\nDESCRIPTION: Callback function structure for handling spawned process results.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfunction doneFunction(error, result, code) {\n  // If the exit code was non-zero and a fallback wasn't specified, an Error\n  // object, otherwise null.\n  error\n  // The result object is an object with the properties .stdout, .stderr, and\n  // .code (exit code).\n  result\n  // When result is coerced to a string, the value is stdout if the exit code\n  // was zero, the fallback if the exit code was non-zero and a fallback was\n  // specified, or stderr if the exit code was non-zero and a fallback was\n  // not specified.\n  String(result)\n  // The numeric exit code.\n  code\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Configuration Values\nDESCRIPTION: Process configuration values by expanding template strings recursively.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.process(value)\n```\n\n----------------------------------------\n\nTITLE: Logging Debug Messages in Grunt (JavaScript)\nDESCRIPTION: Demonstrates the usage of grunt.log.debug() to log debugging messages, which only appear if the --debug command-line option is specified.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.debug(msg)\n```\n\n----------------------------------------\n\nTITLE: Task Dependency Declaration in Grunt\nDESCRIPTION: Shows how to declare task dependencies using this.requires() to ensure required tasks have run successfully.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Inside-Tasks.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.requires(tasksList)\n```\n\n----------------------------------------\n\nTITLE: Accessing Non-Verbose Logging in Grunt (JavaScript)\nDESCRIPTION: Demonstrates how to access the non-verbose logging object, which logs only if the --verbose command-line option was not specified.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.verbose.or\n```\n\n----------------------------------------\n\nTITLE: Registering Grunt Task Alias\nDESCRIPTION: JavaScript code to create a new task alias that includes the plugin task in its execution sequence.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-plugins.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask(\"dist\", [\"uglify\"])\n```\n\n----------------------------------------\n\nTITLE: Logging Object Properties in Grunt (JavaScript)\nDESCRIPTION: Shows how to use grunt.log.writeflags() to log a list of object properties, useful for debugging flags.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.writeflags(obj, prefix)\n```\n\n----------------------------------------\n\nTITLE: Setting File Copy Options in Grunt\nDESCRIPTION: Specifies options for copying files, including encoding, processing function, and globbing patterns for preventing processing.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  // If an encoding is not specified, default to grunt.file.defaultEncoding.\n  // If null, the `process` function will receive a Buffer instead of String.\n  encoding: encodingName,\n  // The source file contents, source file path, and destination file path\n  // are passed into this function, whose return value will be used as the\n  // destination file's contents. If this function returns `false`, the file\n  // copy will be aborted.\n  process: processFunction,\n  // These optional globbing patterns will be matched against the filepath\n  // (not the filename) using grunt.file.isMatch. If any specified globbing\n  // pattern matches, the file won't be processed via the `process` function.\n  // If `true` is specified, processing will be prevented.\n  noProcess: globbingPatterns\n};\n```\n\n----------------------------------------\n\nTITLE: Logging Wrapped Error Messages in Grunt (JavaScript)\nDESCRIPTION: Shows how to use grunt.log.errorlns() to log error messages wrapped to 80 columns using grunt.log.wraptext.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.errorlns(msg)\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values\nDESCRIPTION: Set values in Grunt configuration with template string support.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.set(prop, value)\n```\n\n----------------------------------------\n\nTITLE: Implementing Verbose Logging Pattern in Grunt Tasks (JavaScript)\nDESCRIPTION: Demonstrates a common pattern for implementing verbose logging in Grunt tasks, including error handling and conditional output based on verbose mode.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('something', 'Do something interesting.', function(arg) {\n  var msg = 'Doing something...';\n  grunt.verbose.write(msg);\n  try {\n    doSomethingThatThrowsAnExceptionOnError(arg);\n    // Success!\n    grunt.verbose.ok();\n  } catch(e) {\n    // Something went wrong.\n    grunt.verbose.or.write(msg).error().error(e.message);\n    grunt.fail.warn('Something went wrong.');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Raw Configuration\nDESCRIPTION: Retrieve configuration values without processing template strings.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.getRaw([prop])\n```\n\n----------------------------------------\n\nTITLE: Removing Color from Strings in Grunt (JavaScript)\nDESCRIPTION: Demonstrates the usage of grunt.log.uncolor() to remove all color information from a string, useful for testing or file logging.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.uncolor(str)\n```\n\n----------------------------------------\n\nTITLE: Accessing Grunt Configuration\nDESCRIPTION: Get or set values in Grunt configuration using dot notation or array syntax.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config([prop [, value]])\n```\n\n----------------------------------------\n\nTITLE: Writing Console Output in Grunt (JavaScript)\nDESCRIPTION: Demonstrates the basic usage of grunt.log.write() method to log messages to the console without a trailing newline.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.write(msg)\n```\n\n----------------------------------------\n\nTITLE: Requiring Configuration Properties\nDESCRIPTION: Validate required configuration properties exist before task execution.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.requires(prop [, prop [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Logging Errors in Grunt (JavaScript)\nDESCRIPTION: Demonstrates the usage of grunt.log.error() method to log error messages. If no message is provided, it logs 'ERROR' in red.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.error([msg])\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Watch Task for JavaScript Development\nDESCRIPTION: Configures the grunt-contrib-watch plugin to run JSHint and QUnit tasks whenever JavaScript files are modified, added, or deleted.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Sample-Gruntfile.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nwatch: {\n  files: ['<%= jshint.files %>'],\n  tasks: ['jshint', 'qunit']\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Events in Grunt\nDESCRIPTION: Executes all listeners for a specified event name in order, with optional arguments passed to each listener using grunt.event.emit method.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.event.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.event.emit(event, [arg1], [arg2], [...])\n```\n\n----------------------------------------\n\nTITLE: Adding 'Built with Grunt' Badge in Markdown\nDESCRIPTION: This snippet demonstrates how to add the 'Built with Grunt' badge to a project README using Markdown syntax. It creates a clickable image that links to the Grunt website.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Built-with-Grunt-Badge.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Built with Grunt](https://gruntjs.com/builtwith.svg)](https://gruntjs.com/)\n```\n\n----------------------------------------\n\nTITLE: Removing All Event Listeners in Grunt\nDESCRIPTION: Removes all listeners or those of a specified event using grunt.event.removeAllListeners method. The event parameter is optional.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.event.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.event.removeAllListeners([event])\n```\n\n----------------------------------------\n\nTITLE: Adding One-Time Event Listener in Grunt\nDESCRIPTION: Adds a single-use listener that automatically removes itself after the first event execution using grunt.event.once method.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.event.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.event.once(event, listener)\n```\n\n----------------------------------------\n\nTITLE: Adding Multi-Use Event Listener in Grunt\nDESCRIPTION: Adds a listener that executes a specified number of times before being automatically removed using grunt.event.many method.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.event.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.event.many(event, timesToListen, listener)\n```\n\n----------------------------------------\n\nTITLE: Displaying Fatal Error and Aborting Grunt with grunt.fail.fatal\nDESCRIPTION: This method displays a fatal error and aborts Grunt immediately. It accepts an error message or object and an optional error code. A beep is emitted unless the --no-color option is specified.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.fail.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.fail.fatal(error [, errorcode])\n```\n\n----------------------------------------\n\nTITLE: Template Description Export\nDESCRIPTION: JavaScript code showing how to export a template description\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexports.description = descriptionString;\n```\n\n----------------------------------------\n\nTITLE: Displaying Warning and Aborting Grunt with grunt.fail.warn\nDESCRIPTION: This method displays a warning and aborts Grunt immediately, unless the --force option is used. It accepts an error message or object and an optional error code.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.fail.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.fail.warn(error [, errorcode])\n```\n\n----------------------------------------\n\nTITLE: Getting Available Templates in JavaScript\nDESCRIPTION: Uses init.getTemplates to return an object of all available templates.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ninit.getTemplates()\n```\n\n----------------------------------------\n\nTITLE: Cloning grunt-init template with git\nDESCRIPTION: Example command to clone the grunt-init-jquery template into the local templates directory\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/gruntjs/grunt-init-jquery.git ~/.grunt-init/jquery\n```\n\n----------------------------------------\n\nTITLE: Copying Files with Renaming Rules in JavaScript\nDESCRIPTION: Demonstrates using init.filesToCopy to return an object containing files to copy with their source and destination paths, applying renaming rules from rename.json if it exists.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nvar files = init.filesToCopy(props);\n/* files === { '.gitignore': 'template/root/.gitignore',\n  '.jshintrc': 'template/root/.jshintrc',\n  'Gruntfile.js': 'template/root/Gruntfile.js',\n  'README.md': 'template/root/README.md',\n  'test/test_test.js': 'template/root/test/name_test.js' } */\n```\n\n----------------------------------------\n\nTITLE: Executing Grunt Project Maintenance Tasks\nDESCRIPTION: Shell commands for managing multiple Grunt projects and plugins. Includes git pull operations, dependency management, symlink verification, test execution, and version checking across multiple repositories. Uses 'eachdir' to execute commands across grunt-contrib and grunt-lib projects.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Development-helpers.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\neachdir grunt grunt-{contrib,lib}-* -- 'git pull'\neachdir grunt grunt-{contrib,lib}-* -- 'rm -rf node_modules; linken . --src ..; npm install'\n\n# Make sure symlinks were created, if not there's a version mismatch\neachdir grunt grunt-{contrib,lib}-* -- 'll node_modules | grep grunt'\n\n# Make sure everything passes\neachdir grunt grunt-{contrib,lib}-* -- grunt\n\n# Make sure all versions are final\neachdir grunt grunt-{contrib,lib}-* -- 'git branch; node -pe \"require(\\\"./package.json\\\").version\"'\n```\n\n----------------------------------------\n\nTITLE: Accessing Template Search Directories in JavaScript\nDESCRIPTION: Demonstrates accessing the init.searchDirs array containing directories to search for templates.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nvar dirs = init.searchDirs;\n/* dirs === [ '/Users/shama/.grunt-init',\n  '/usr/local/lib/node_modules/grunt-init/templates' ] */\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Option Keys in JavaScript\nDESCRIPTION: This code snippet shows how to use grunt.option.keys() to retrieve all option keys. This method is available since Grunt version 1.2.0+.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.option.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.option.keys()\n```\n\n----------------------------------------\n\nTITLE: Writing package.json File in JavaScript\nDESCRIPTION: Uses init.writePackageJSON to save a package.json file in the destination directory, with an optional callback for post-processing properties.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\ninit.writePackageJSON(filename, props[, callback])\n```\n\n----------------------------------------\n\nTITLE: Checking Path Containment with grunt.file.doesPathContain in JavaScript\nDESCRIPTION: This method checks if all descendant paths are contained within the specified ancestor path. Returns a boolean. Note: it does not check if paths actually exist.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.doesPathContain(ancestorPath, descendantPath1 [, descendantPath2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Searching for Template Files in JavaScript\nDESCRIPTION: Uses init.srcpath to search init template paths for a filename and return an absolute path.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ninit.srcpath(filepath[, ...])\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence with grunt.file.exists in JavaScript\nDESCRIPTION: This method checks if a given path exists. It joins all arguments and normalizes the resulting path, similar to Node.js path.join method. Returns a boolean.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.exists(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Getting User's Template Directory in JavaScript\nDESCRIPTION: Uses init.userDir to return the absolute path to the user's template directory.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nvar dir = init.userDir();\n// dir === '/Users/shama/.grunt-init'\n```\n\n----------------------------------------\n\nTITLE: Logging Success Messages in Grunt (JavaScript)\nDESCRIPTION: Demonstrates the usage of grunt.log.ok() method to log success messages. If no message is provided, it logs 'OK' in green.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.ok([msg])\n```\n\n----------------------------------------\n\nTITLE: Processing User Prompts in JavaScript\nDESCRIPTION: Demonstrates using init.process to start the prompting process for user input, with example prompts for name, description, and version.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ninit.process(options, prompts, done)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ninit.process({}, [\n  // Prompt for these values\n  init.prompt('name'),\n  init.prompt('description'),\n  init.prompt('version')\n], function(err, props) {\n  // All finished, do something with the properties\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Console Output with Newline in Grunt (JavaScript)\nDESCRIPTION: Shows how to use grunt.log.writeln() method to log messages to the console with a trailing newline. The message parameter is optional.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.writeln([msg])\n```\n\n----------------------------------------\n\nTITLE: Initializing Template Search Directories in JavaScript\nDESCRIPTION: Uses init.initSearchDirs to initialize directories for searching init templates, including user and core template locations.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ninit.initSearchDirs([filename])\n```\n\n----------------------------------------\n\nTITLE: Defining File Recursion Callback in Grunt\nDESCRIPTION: Specifies the callback function used when recursing into directories. The function receives the full path, root directory, subdirectory, and filename as arguments.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction callback(abspath, rootdir, subdir, filename) {\n  // The full path to the current file, which is nothing more than\n  // the rootdir + subdir + filename arguments, joined.\n  abspath\n  // The root director, as originally specified.\n  rootdir\n  // The current file's directory, relative to rootdir.\n  subdir\n  // The filename of the current file, without any directory parts.\n  filename\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing All Prompts in JavaScript\nDESCRIPTION: Demonstrates accessing the init.prompts object containing all available prompts.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nvar prompts = init.prompts;\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener in Grunt\nDESCRIPTION: Adds a persistent listener to the end of the listeners array for a specified event using grunt.event.on method.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.event.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.event.on(event, listener)\n```\n\n----------------------------------------\n\nTITLE: Template Warning Patterns\nDESCRIPTION: JavaScript examples of different warning patterns for file matching\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexports.warnOn = 'Gruntfile.js';    // Warn on a Gruntfile.js file.\nexports.warnOn = '*.js';            // Warn on any .js file.\nexports.warnOn = '*';               // Warn on any non-dotfile or non-dotdir.\nexports.warnOn = '.*';              // Warn on any dotfile or dotdir.\nexports.warnOn = '{.*,*}';          // Warn on any file or dir (dot or non-dot).\nexports.warnOn = '!*/**';           // Warn on any file (ignoring dirs).\nexports.warnOn = '*.{png,gif,jpg}'; // Warn on any image file.\n\n// This is another way of writing the last example.\nexports.warnOn = ['*.png', '*.gif', '*.jpg'];\n```\n\n----------------------------------------\n\nTITLE: Error Handling with grunt.util.error\nDESCRIPTION: Creates a new Error instance with custom message and optional original error stack trace when --stack option is used.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.util.error(message [, origError])\n```\n\n----------------------------------------\n\nTITLE: Default prompt configuration\nDESCRIPTION: Example JSON configuration for setting default prompt values in defaults.json\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"author_name\": \"\\\"Cowboy\\\" Ben Alman\",\n  \"author_email\": \"none\",\n  \"author_url\": \"http://benalman.com/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Default prompt configuration\nDESCRIPTION: Example JSON configuration for setting default prompt values in defaults.json\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"author_name\": \"\\\"Cowboy\\\" Ben Alman\",\n  \"author_email\": \"none\",\n  \"author_url\": \"http://benalman.com/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Template Function Export\nDESCRIPTION: JavaScript code showing the basic structure of a template function export\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexports.template = function(grunt, init, done) {\n  // See the \"Inside an init template\" section.\n};\n```\n\n----------------------------------------\n\nTITLE: Cloning the gruntplugin template repository\nDESCRIPTION: Command to clone the grunt-init-gruntplugin template into the .grunt-init directory. Different paths are used for Unix-based systems and Windows.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-plugins.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://github.com/gruntjs/grunt-init-gruntplugin.git ~/.grunt-init/gruntplugin\n```\n\n----------------------------------------\n\nTITLE: Setting Template Delimiters\nDESCRIPTION: Shows how to set predefined template delimiters for Lo-Dash templates.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.template.setDelimiters(name)\n```\n\n----------------------------------------\n\nTITLE: Checking File Existence with grunt.file.isFile in JavaScript\nDESCRIPTION: This method checks if a given path is a file. It joins all arguments and normalizes the resulting path. Returns a boolean, and false if the path doesn't exist.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.isFile(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Example\nDESCRIPTION: Demonstrates formatting a specific date using grunt.template.date.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.template.date(847602000000, 'yyyy-mm-dd') // '1996-11-10'\n```\n\n----------------------------------------\n\nTITLE: Logging Wrapped Success Messages in Grunt (JavaScript)\nDESCRIPTION: Shows how to use grunt.log.oklns() to log success messages wrapped to 80 columns using grunt.log.wraptext.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.oklns(msg)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Delimiters\nDESCRIPTION: Demonstrates how to add custom named delimiters for template processing.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.template.addDelimiters(name, opener, closer)\n```\n\n----------------------------------------\n\nTITLE: Logging Subheadings in Grunt (JavaScript)\nDESCRIPTION: Demonstrates how to use grunt.log.subhead() to log messages in bold with a trailing newline.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.subhead(msg)\n```\n\n----------------------------------------\n\nTITLE: Today's Date Formatting\nDESCRIPTION: Shows how to format today's date using the dateformat library.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.template.today(format)\n```\n\n----------------------------------------\n\nTITLE: Initializing a new Grunt plugin project\nDESCRIPTION: Command to create a new Grunt plugin project using the installed template. This should be run in an empty directory.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-plugins.md#2025-04-10_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngrunt-init gruntplugin\n```\n\n----------------------------------------\n\nTITLE: Date Formatting with grunt.template.date\nDESCRIPTION: Shows how to format dates using the dateformat library through Grunt's template system.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.template.date(date, format)\n```\n\n----------------------------------------\n\nTITLE: Checking Absolute Path with grunt.file.isPathAbsolute in JavaScript\nDESCRIPTION: This method checks if a given file path is absolute. It joins all arguments and normalizes the resulting path. Returns a boolean.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.isPathAbsolute(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Processing Templates with grunt.template.process\nDESCRIPTION: Demonstrates how to process Lo-Dash templates with custom data objects and delimiters. The method processes templates recursively until no more templates remain to be processed.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.template.process(template [, options])\n```\n\n----------------------------------------\n\nTITLE: Object Recursion with grunt.util.recurse\nDESCRIPTION: Recursively traverses nested objects and arrays, executing a callback for each non-object value.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.util.recurse(object, callbackFunction, continueFunction)\n```\n\n----------------------------------------\n\nTITLE: JSHint Merge Example\nDESCRIPTION: Complete example demonstrating config merging behavior with arrays.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  jshint: {\n    files: ['Gruntfile.js', 'src/**/*.js'],\n  }\n);\n\nvar config = {\n  jshint: {\n    files: ['hello.js'],\n  }\n};\n\ngrunt.config.merge(config);\n```\n\n----------------------------------------\n\nTITLE: Loading NPM Grunt Tasks\nDESCRIPTION: Alternative method to programmatically load Grunt tasks from npm packages.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-the-CLI.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.loadNpmTasks(...)\n```\n\n----------------------------------------\n\nTITLE: JSHint Configuration Example\nDESCRIPTION: Sample configuration for the grunt-contrib-jshint plugin showing how to specify files for linting.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.init({\n  jshint: {\n    all: ['lib/*.js', 'test/*.js', 'Gruntfile.js']\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Paths with grunt.file.arePathsEquivalent in JavaScript\nDESCRIPTION: This method checks if all specified paths refer to the same path. Returns a boolean.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.arePathsEquivalent(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Registering an Alias Task with Arguments in Grunt\nDESCRIPTION: Shows how to register an alias task with arguments. This example creates a 'dist' task that runs 'concat' and 'uglify' tasks, both with the 'dist' argument.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.task.md#2025-04-10_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ntask.registerTask('dist', ['concat:dist', 'uglify:dist']);\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener in Grunt\nDESCRIPTION: Removes a specific listener from the listener array for the specified event using grunt.event.off method.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.event.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.event.off(event, listener)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Command-line Options in Grunt\nDESCRIPTION: Method to retrieve the value of a command-line option. Can test for both positive and negative (no-) variants of options.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.option(optionName)\n```\n\n----------------------------------------\n\nTITLE: Accessing Verbose Logging in Grunt (JavaScript)\nDESCRIPTION: Shows how to access the verbose logging object, which contains all methods of grunt.log but only logs if the --verbose command-line option was specified.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.verbose\n```\n\n----------------------------------------\n\nTITLE: Accessing Grunt Package Metadata\nDESCRIPTION: Property that provides access to Grunt's package.json metadata as an object.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.package\n```\n\n----------------------------------------\n\nTITLE: Checking Symbolic Link with grunt.file.isLink in JavaScript\nDESCRIPTION: This method checks if a given path is a symbolic link. It joins all arguments and normalizes the resulting path. Returns a boolean, and false if the path doesn't exist.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.isLink(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Flags as Command-line Parameters in JavaScript\nDESCRIPTION: This snippet demonstrates how to use grunt.option.flags() to retrieve all options as an array of command-line parameters.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.option.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.option.flags()\n```\n\n----------------------------------------\n\nTITLE: Getting Grunt Version\nDESCRIPTION: Property that provides quick access to the current Grunt version string. Shortcut to grunt.package.version.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.version\n```\n\n----------------------------------------\n\nTITLE: Setting and Negating Boolean Options with grunt.option() in JavaScript\nDESCRIPTION: This snippet demonstrates how to set and negate boolean options using grunt.option(). It shows how to use the 'no-' prefix to negate an option.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.option.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.option('staging', false);\nvar isDev = grunt.option('no-staging');\n// isDev === true\n```\n\n----------------------------------------\n\nTITLE: Setting Grunt Base Path\nDESCRIPTION: Alternative method to programmatically set Grunt's base path in code.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-the-CLI.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.setBase(...)\n```\n\n----------------------------------------\n\nTITLE: File Processing in Grunt Multi-Task\nDESCRIPTION: Demonstrates how to process files in a multi-task using this.files, including file existence checking and content manipulation.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Inside-Tasks.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.files.forEach(function(file) {\n  var contents = file.src.filter(function(filepath) {\n    // Remove nonexistent files (it's up to you to filter or warn here).\n    if (!grunt.file.exists(filepath)) {\n      grunt.log.warn('Source file \"' + filepath + '\" not found.');\n      return false;\n    } else {\n      return true;\n    }\n  }).map(function(filepath) {\n    // Read and return the file's source.\n    return grunt.file.read(filepath);\n  }).join('\\n');\n  // Write joined contents to destination filepath.\n  grunt.file.write(file.dest, contents);\n  // Print a success message.\n  grunt.log.writeln('File \"' + file.dest + '\" created.');\n});\n```\n\n----------------------------------------\n\nTITLE: Recursive Template Processing Example\nDESCRIPTION: Shows how nested templates are processed recursively using grunt.template.process with a custom data object.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar obj = {\n  foo: 'c',\n  bar: 'b<%= foo %>d',\n  baz: 'a<%= bar %>e'\n};\ngrunt.template.process('<%= baz %>', {data: obj}) // 'abcde'\n```\n\n----------------------------------------\n\nTITLE: File Linting in Grunt Multi-Task\nDESCRIPTION: Shows how to implement a file linting task using this.filesSrc for read-only file operations.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Inside-Tasks.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Lint specified files.\nvar files = this.filesSrc;\nvar errorCount = 0;\nfiles.forEach(function(filepath) {\n  if (!lint(grunt.file.read(filepath))) {\n    errorCount++;\n  }\n});\n\n// Fail task if errors were logged.\nif (errorCount > 0) { return false; }\n\n// Otherwise, print a success message.\ngrunt.log.ok('Files lint free: ' + files.length);\n```\n\n----------------------------------------\n\nTITLE: Configuring File Deletion Options in Grunt\nDESCRIPTION: Sets options for deleting files, including the ability to delete files outside the current working directory.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar options = {\n  // Enable deleting outside the current working directory. This option may\n  // be overridden by the --force command-line option.\n  force: true\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt Plugin\nDESCRIPTION: Example command to install a Grunt plugin (JSHint) and save it as a devDependency\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Getting-started.md#2025-04-10_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install grunt-contrib-jshint --save-dev\n```\n\n----------------------------------------\n\nTITLE: Custom Delimiters Example\nDESCRIPTION: Shows how to add custom {% %} style delimiters for template processing.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.template.addDelimiters('myDelimiters', '{%', '%}')\n```\n\n----------------------------------------\n\nTITLE: Basic package.json Configuration for Grunt\nDESCRIPTION: Example package.json file showing basic Grunt project configuration with common plugins as devDependencies\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Getting-started.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"name\": \"my-project-name\",\n  \"version\": \"0.1.0\",\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.5\",\n    \"grunt-contrib-jshint\": \"~0.10.0\",\n    \"grunt-contrib-nodeunit\": \"~0.4.1\",\n    \"grunt-contrib-uglify\": \"~0.5.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing grunt.option Object in JavaScript\nDESCRIPTION: This code snippet shows how to initialize the grunt.option object. It can be initialized empty or with a provided initial object.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.option.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.option.init([initObject])\n```\n\n----------------------------------------\n\nTITLE: Gruntfile Wrapper Function\nDESCRIPTION: Basic wrapper function required in every Gruntfile\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Getting-started.md#2025-04-10_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function(grunt) {\n  // Do grunt-related things in here\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Word Lists in Grunt (JavaScript)\nDESCRIPTION: Shows how to use grunt.log.wordlist() to create a comma-separated list of array items with optional formatting.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.wordlist(arr [, options])\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt Locally\nDESCRIPTION: Command to install Grunt locally in a project and save it as a devDependency\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Getting-started.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install grunt --save-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Default Encoding in Grunt\nDESCRIPTION: Sets the default encoding used by all grunt.file methods. It's recommended to set this early in the Gruntfile if needed.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.defaultEncoding = 'utf8';\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt CLI Globally\nDESCRIPTION: Command to install Grunt's command line interface globally using npm\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Getting-started.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g grunt-cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Byte Order Mark Preservation in Grunt\nDESCRIPTION: Sets whether to preserve the Byte Order Mark (BOM) when reading files. This option was added in Grunt 0.4.2.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.preserveBOM = false;\n```\n\n----------------------------------------\n\nTITLE: Installing development dependencies\nDESCRIPTION: Command to install the necessary dependencies for developing a Grunt plugin, as defined in the package.json file created by the template.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-plugins.md#2025-04-10_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Grunt Tasks\nDESCRIPTION: Alternative method to programmatically load custom Grunt tasks.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-the-CLI.md#2025-04-10_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.loadTasks(...)\n```\n\n----------------------------------------\n\nTITLE: Installing grunt-init globally with npm\nDESCRIPTION: Command to install the grunt-init tool globally on your system. This is the first step in creating a Grunt plugin.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g grunt-init\n```\n\n----------------------------------------\n\nTITLE: Checking Path Inside CWD with grunt.file.isPathInCwd in JavaScript\nDESCRIPTION: This method checks if a given file path is inside the current working directory (CWD). Note: CWD is not considered inside CWD. It joins all arguments and normalizes the resulting path. Returns a boolean.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.isPathInCwd(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Resolving file paths relative to Gruntfile\nDESCRIPTION: JavaScript code demonstrating how to get an absolute file path relative to the Gruntfile location, regardless of the current working directory. This is useful when creating Grunt plugins.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-plugins.md#2025-04-10_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\npath.resolve('foo')\n```\n\n----------------------------------------\n\nTITLE: Expanding File Paths with Wildcard Patterns in JavaScript\nDESCRIPTION: Uses init.expand to return a unique array of file or directory paths matching given wildcard patterns. Supports inclusion and exclusion patterns.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ninit.expand([options, ] patterns)\n```\n\n----------------------------------------\n\nTITLE: Creating a Grunt debugging alias in bash\nDESCRIPTION: Creates an alias in bash shell to always run Grunt with the --stack option, which enables error stack traces for easier debugging of Grunt tasks.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-plugins.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nalias grunt='grunt --stack'\n```\n\n----------------------------------------\n\nTITLE: Running Tasks with Space-Containing Arguments (Shell)\nDESCRIPTION: Demonstrates how to run Grunt tasks with arguments containing spaces in Grunt 0.4. Quotes are used to properly parse space-containing arguments.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Upgrading-from-0.3-to-0.4.md#2025-04-10_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngrunt my-task:argument-without-spaces \"other-task:argument with spaces\"\n```\n\n----------------------------------------\n\nTITLE: Publishing a Grunt plugin to npm\nDESCRIPTION: Command to publish the completed Grunt plugin to the npm registry, making it available for other developers to install and use.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-plugins.md#2025-04-10_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm publish\n```\n\n----------------------------------------\n\nTITLE: NPM Cache Clear Command\nDESCRIPTION: Command to clear npm cache when upgrading from development versions of Grunt 0.4 to ensure clean installation of final versions.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Upgrading-from-0.3-to-0.4.md#2025-04-10_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm cache clean\n```\n\n----------------------------------------\n\nTITLE: Registering Multi Tasks in Grunt\nDESCRIPTION: Shows how to register multi tasks in Grunt, which can have multiple configurations defined using named targets. The example demonstrates a 'log' task that processes different targets based on the configuration.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-tasks.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerMultiTask(taskName, [description, ] taskFunction)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.initConfig({\n  log: {\n    foo: [1, 2, 3],\n    bar: 'hello world',\n    baz: false\n  }\n});\n\ngrunt.registerMultiTask('log', 'Log stuff.', function() {\n  grunt.log.writeln(this.target + ': ' + this.data);\n});\n```\n\n----------------------------------------\n\nTITLE: String Normalization with grunt.util.normalizelf\nDESCRIPTION: Normalizes line endings in a string based on the current operating system.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.util.normalizelf(string)\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Tasks in Grunt\nDESCRIPTION: Demonstrates how to register basic tasks in Grunt, which run a specified function without looking at configuration. The example shows a task that logs different messages based on the presence of arguments.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-tasks.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask(taskName, [description, ] taskFunction)\n```\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('foo', 'A sample task that logs stuff.', function(arg1, arg2) {\n  if (arguments.length === 0) {\n    grunt.log.writeln(this.name + \", no args\");\n  } else {\n    grunt.log.writeln(this.name + \", \" + arg1 + \" \" + arg2);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Escaping Property Names\nDESCRIPTION: Escape dot characters in configuration property names.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.config.md#2025-04-10_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.config.escape(propString)\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous Tasks in Grunt\nDESCRIPTION: Demonstrates how to create asynchronous tasks in Grunt using the this.async() method. The example shows a task that performs an asynchronous operation and completes after a delay.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Creating-tasks.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('asyncme', 'My asynchronous task.', function() {\n  var done = this.async();\n  doSomethingAsync(done);\n});\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Global Grunt 0.3 (Shell)\nDESCRIPTION: Command to uninstall the global Grunt 0.3 installation before upgrading to Grunt 0.4.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Upgrading-from-0.3-to-0.4.md#2025-04-10_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm uninstall -g grunt\n```\n\n----------------------------------------\n\nTITLE: Task Options Configuration Example\nDESCRIPTION: Shows how to specify default options in a Grunt 0.4 task using the new this.options method.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Upgrading-from-0.3-to-0.4.md#2025-04-10_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nvar options = this.options({option: 'defaultvalue', ...});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Text in Grunt (JavaScript)\nDESCRIPTION: Shows how to use grunt.log.wraptext() to wrap text to a specified width, ensuring words are not split unnecessarily.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.wraptext(width, text)\n```\n\n----------------------------------------\n\nTITLE: Registering Alias Tasks (JavaScript)\nDESCRIPTION: Demonstrates the change in syntax for registering alias tasks in Grunt 0.4. Task lists must now be specified as arrays.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Upgrading-from-0.3-to-0.4.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// v0.3.x (old format)\ngrunt.registerTask(\"default\", \"jshint nodeunit concat\");\n// v0.4.x (new format)\ngrunt.registerTask(\"default\", [\"jshint\", \"nodeunit\", \"concat\"]);\n```\n\n----------------------------------------\n\nTITLE: Creating Tabular Output in Grunt (JavaScript)\nDESCRIPTION: Demonstrates how to use grunt.log.table() to create tabular output by wrapping an array of strings into columns of specified widths.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.log.md#2025-04-10_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.log.table(widths, texts)\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt Plugin via NPM\nDESCRIPTION: Command to install a Grunt plugin locally using npm with --save-dev flag to add it to package.json devDependencies.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev grunt-contrib-uglify\n```\n\n----------------------------------------\n\nTITLE: Enabling Bash Tab Auto-completion for Grunt\nDESCRIPTION: A shell command to enable bash tab auto-completion for Grunt. This should be added to the ~/.bashrc file and assumes Grunt has been installed globally.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Frequently-Asked-Questions.md#2025-04-10_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(grunt --completion=bash)\"\n```\n\n----------------------------------------\n\nTITLE: Loading Grunt Plugin Tasks\nDESCRIPTION: JavaScript code to load tasks from an installed Grunt plugin within the Gruntfile.js configuration. This should be placed in the top-level function scope.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-plugins.md#2025-04-10_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.loadNpmTasks('grunt-contrib-uglify')\n```\n\n----------------------------------------\n\nTITLE: Checking Current Working Directory with grunt.file.isPathCwd in JavaScript\nDESCRIPTION: This method checks if a given file path is the current working directory (CWD). It joins all arguments and normalizes the resulting path. Returns a boolean.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.file.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.file.isPathCwd(path1 [, path2 [, ...]])\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Grunt Version with npm\nDESCRIPTION: Command to install a specific version of Grunt and add it to package.json devDependencies. Replace VERSION with the desired Grunt version.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Installing-grunt.md#2025-04-10_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install grunt@VERSION --save-dev\n```\n\n----------------------------------------\n\nTITLE: Prompting User for Input in JavaScript\nDESCRIPTION: Uses init.prompt to prompt a user for a value, optionally providing a default value.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ninit.prompt(name[, default])\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt Dependencies with npm\nDESCRIPTION: Command to install all project dependencies defined in package.json, including Grunt and its plugins.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Installing-grunt.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Function Normalization Example with grunt.util.callbackify\nDESCRIPTION: Demonstrates how to normalize synchronous and asynchronous functions to use callbacks consistently.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.util.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfunction add1(a, b) {\n  return a + b;\n}\nfunction add2(a, b, callback) {\n  callback(a + b);\n}\n\nvar fn1 = grunt.util.callbackify(add1);\nvar fn2 = grunt.util.callbackify(add2);\n\nfn1(1, 2, function(result) {\n  console.log('1 plus 2 equals ' + result);\n});\nfn2(1, 2, function(result) {\n  console.log('1 plus 2 equals ' + result);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables and Config Properties in Grunt.js\nDESCRIPTION: Two utility tasks that allow setting global variables and configuration properties that can be accessed by other tasks. This provides another method for sharing values across multiple tasks.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Frequently-Asked-Questions.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('set_global', 'Set a global variable.', function(name, val) {\n  global[name] = val;\n});\n\ngrunt.registerTask('set_config', 'Set a config property.', function(name, val) {\n  grunt.config.set(name, val);\n});\n```\n\n----------------------------------------\n\nTITLE: Reading Default Values from Task Files in JavaScript\nDESCRIPTION: Uses init.readDefaults to read JSON defaults from task files and merge them into a single data object.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ninit.readDefaults(filepath[, ...])\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Alias Task in Grunt.js\nDESCRIPTION: A method for sharing parameters across multiple tasks by creating a 'dynamic' alias task using grunt.task.run. This example creates a build task that accepts a number parameter and passes it to multiple subtasks.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Frequently-Asked-Questions.md#2025-04-10_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.registerTask('build', 'Run all my build tasks.', function(n) {\n  if (n == null) {\n    grunt.warn('Build num must be specified, like build:001.');\n  }\n  grunt.task.run('foo:' + n, 'bar:' + n, 'baz:' + n);\n});\n```\n\n----------------------------------------\n\nTITLE: Template Notes Export\nDESCRIPTION: JavaScript code showing how to export template notes for user guidance\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexports.notes = notesString;\n```\n\n----------------------------------------\n\nTITLE: Implementing Built with Grunt Badge - Markdown\nDESCRIPTION: Markdown code snippet for adding the official 'Built with Grunt' badge to project README files or documentation.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Grunt-Brand-Guide.md#2025-04-10_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.svg)](https://gruntjs.com/)\n```\n\n----------------------------------------\n\nTITLE: Creating a Grunt Macro for Windows with DOSKEY\nDESCRIPTION: A DOSKEY command for Windows that creates a macro allowing users to use 'grunt' instead of 'grunt.cmd' when executing Grunt from the command line.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Frequently-Asked-Questions.md#2025-04-10_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nDOSKEY grunt=grunt.cmd $*\n```\n\n----------------------------------------\n\nTITLE: Implementing Built with Grunt Badge - HTML\nDESCRIPTION: HTML version of the code for adding the official 'Built with Grunt' badge to project websites or HTML documentation.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Grunt-Brand-Guide.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://gruntjs.com/\">\n  <img src=\"https://cdn.gruntjs.com/builtwith.svg\" alt=\"Built with Grunt\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Adding 'Built with Grunt' Badge in HTML\nDESCRIPTION: This snippet shows how to incorporate the 'Built with Grunt' badge into a project website using HTML. It creates an image with alt text wrapped in a link to the Grunt website.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Built-with-Grunt-Badge.md#2025-04-10_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://gruntjs.com/\">\n  <img src=\"https://gruntjs.com/builtwith.svg\" alt=\"Built with Grunt\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt CLI Globally\nDESCRIPTION: Command to install the Grunt CLI tool globally using npm package manager.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/blog/Blog-2018-08-15-Grunt-CLI-1.3.0-released.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install grunt-cli -g\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt 1.0.0 using npm\nDESCRIPTION: Command to install Grunt 1.0.0 as a dev dependency in a project using npm. This updates the project to use the latest major version of Grunt.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/blog/Blog-2016-04-04-Grunt-1.0.0-released.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install grunt@1.0.0 --save-dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Rename Rules in JavaScript\nDESCRIPTION: Demonstrates accessing the init.renames object containing rename rules for the template.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nvar renames = init.renames;\n// renames === { 'test/name_test.js': 'test/{%= name %}_test.js' }\n```\n\n----------------------------------------\n\nTITLE: Updating Grunt Version in package.json\nDESCRIPTION: Shows how to specify the Grunt version dependency in package.json to use version 0.4.1\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/blog/Blog-2013-03-13-Grunt-0.4.1-released.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"~0.4.1\"\n```\n\n----------------------------------------\n\nTITLE: Today's Date Formatting Example\nDESCRIPTION: Demonstrates formatting today's date to show the current year.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/grunt.template.md#2025-04-10_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\ngrunt.template.today('yyyy') // This returns a year in format such as '2020'\n```\n\n----------------------------------------\n\nTITLE: Updating Grunt Plugin Peer Dependencies\nDESCRIPTION: Example of the recommended peerDependencies configuration in package.json for Grunt plugins to ensure compatibility with both Grunt 0.4.x and 1.0\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Upgrading-from-0.4-to-1.0.md#2025-04-10_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"peerDependencies\": {\n  \"grunt\": \">=0.4.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Code Style Example\nDESCRIPTION: Example showing preferred JavaScript coding style conventions including indentation, string delimiters, and variable declarations\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Contributing.md#2025-04-10_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar foo = 'bar';  // Single quotes for strings\n\\t  // Use \\t for tab character\nif (condition) {  // Prefer if/else over ternary\n  doSomething();\n} else {\n  doSomethingElse();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Note About Plugin Listing Requirements in HTML\nDESCRIPTION: This HTML snippet creates a note explaining the requirements for a Grunt plugin to be listed, including npm publication and keyword usage. It also recommends using a specific grunt-init template for creating plugins.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Grunt-Plugins.md#2025-04-10_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"plugins-note\">\nIn order for a Grunt plugin to be listed here, it must be published on\n<a href=\"https://www.npmjs.org/\">npm</a> with the\n<a href=\"https://www.npmjs.org/browse/keyword/gruntplugin\">gruntplugin</a> keyword.\nAdditionally, we recommend that you use the\n<a href=\"https://github.com/gruntjs/grunt-init-gruntplugin\">gruntplugin grunt-init template</a>\nwhen creating a Grunt plugin.\n</div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task File Path in JavaScript\nDESCRIPTION: Uses init.getFile to get a single task file path.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Project-Scaffolding.md#2025-04-10_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ninit.getFile(filepath[, ...])\n```\n\n----------------------------------------\n\nTITLE: Installing Grunt CLI Globally\nDESCRIPTION: Command to globally install the Grunt command line interface using npm. Windows users should omit 'sudo' and may need administrator privileges.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Using-the-CLI.md#2025-04-10_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo npm install -g grunt-cli\n```\n\n----------------------------------------\n\nTITLE: HTML Documentation Navigation Structure\nDESCRIPTION: HTML markup defining a two-column layout for organizing Grunt documentation links into Documentation and Advanced sections\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Documentation.md#2025-04-10_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"row-fluid\">\n  <div class=\"span6\">\n    <h3>Documentation</h3>\n\n    <ul>\n      <li><a href=\"https://gruntjs.com/getting-started\">Getting Started</a></li>\n      <li><a href=\"https://gruntjs.com/configuring-tasks\">Configuring Tasks</a></li>\n      <li><a href=\"https://gruntjs.com/sample-gruntfile\">Sample Gruntfile</a></li>\n      <li><a href=\"https://gruntjs.com/creating-tasks\">Creating Tasks</a></li>\n      <li><a href=\"https://gruntjs.com/creating-plugins\">Creating Plugins</a></li>\n      <li><a href=\"https://gruntjs.com/using-the-cli\">Using the CLI</a></li>\n    </ul>\n  </div>\n  <div class=\"span6\">\n    <h3>Advanced</h3>\n\n    <ul>\n      <li><a href=\"https://gruntjs.com/api\">API</a></li>\n      <li><a href=\"https://gruntjs.com/installing-grunt\">Installing Grunt</a></li>\n      <li><a href=\"https://gruntjs.com/frequently-asked-questions\">Frequently Asked Questions</a></li>\n      <li><a href=\"https://gruntjs.com/project-scaffolding\">Project Scaffolding</a></li>\n    </ul>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Displaying Star Icon for Official Contrib Plugins in HTML\nDESCRIPTION: This HTML snippet shows how to display a star icon to mark officially maintained 'contrib' plugins in the Grunt plugin listing.\nSOURCE: https://github.com/gruntjs/grunt-docs/blob/main/Grunt-Plugins.md#2025-04-10_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<span class='icon-star-full'></span>\n```"
  }
]