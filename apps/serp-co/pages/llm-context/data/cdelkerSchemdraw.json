[
  {
    "owner": "cdelker",
    "repo": "schemdraw",
    "content": "TITLE: Creating Electrical Circuit Schematic with Schemdraw in Python\nDESCRIPTION: Demonstrates how to use Schemdraw to create a basic electrical circuit schematic. The example includes resistor, capacitor, ground, and voltage source elements with labels.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nimport schemdraw.elements as elm\nwith schemdraw.Drawing(file='schematic.svg') as d:\n    elm.Resistor().label('100KΩ')\n    elm.Capacitor().down().label('0.1μF', loc='bottom')\n    elm.Line().left()\n    elm.Ground()\n    elm.SourceV().up().label('10V')\n```\n\n----------------------------------------\n\nTITLE: Drawing Discharging Capacitor Circuit in Python with Schemdraw\nDESCRIPTION: Creates a schematic of a capacitor discharge circuit with a voltage source, switch, and resistor. Uses anchors to connect components and adds labels for voltage and component values.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/analog.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    V1 = elm.SourceV().label('5V')\n    elm.Line().right(d.unit*.75)\n    S1 = elm.SwitchSpdt2(action='close').up().anchor('b').label('$t=0$', loc='rgt')\n    elm.Line().right(d.unit*.75).at(S1.c)\n    elm.Resistor().down().label(r'$100\\Omega$').label(['+','$v_o$','-'], loc='bot')\n    elm.Line().to(V1.start)\n    elm.Capacitor().at(S1.a).toy(V1.start).label(r'1$\\mu$F').dot()\n```\n\n----------------------------------------\n\nTITLE: Drawing Superheterodyne Receiver\nDESCRIPTION: Illustrates a superheterodyne receiver circuit with RF filters, amplifiers, mixer, and demodulator stages.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/signalproc.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=12)\n    dsp.Antenna()\n    dsp.Line().right(d.unit/4)\n    dsp.Filter(response='bp').fill('thistle').anchor('W').label('RF filter\\n#1', 'bottom', ofst=.2)\n    dsp.Line().length(d.unit/4)\n    dsp.Amp().fill('lightblue').label('LNA')\n    dsp.Line().length(d.unit/4)\n    dsp.Filter(response='bp').anchor('W').fill('thistle').label('RF filter\\n#2', 'bottom', ofst=.2)\n    dsp.Line().length(d.unit/3)\n    mix = dsp.Mixer().fill('navajowhite').label('Mixer')\n    dsp.Line().at(mix.S).down(d.unit/3)\n    dsp.Oscillator().right().anchor('N').fill('navajowhite').label('Local\\nOscillator', 'right', ofst=.2)\n    dsp.Line().at(mix.E).right(d.unit/3)\n    dsp.Filter(response='bp').anchor('W').fill('thistle').label('IF filter', 'bottom', ofst=.2)\n    dsp.Line().right(d.unit/4)\n    dsp.Amp().fill('lightblue').label('IF\\namplifier')\n    dsp.Line().length(d.unit/4)\n    dsp.Demod().anchor('W').fill('navajowhite').label('Demodulator', 'bottom', ofst=.2)\n    dsp.Arrow().right(d.unit/3)\n```\n\n----------------------------------------\n\nTITLE: Drawing Full Adder Circuit with Schemdraw\nDESCRIPTION: This code creates a full adder circuit diagram using Schemdraw. It uses XOR, AND, and OR gates along with wires to represent the full adder circuit, including carry-in and carry-out.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/logicgate.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(unit=0.5)\n    X1 = logic.Xor()\n    A = logic.Line().left(d.unit*2).at(X1.in1).idot().label('A', 'left')\n    B = logic.Line().left().at(X1.in2).dot()\n    logic.Line().left().label('B', 'left')\n\n    logic.Line().right().at(X1.out).idot()\n    X2 = logic.Xor().anchor('in1')\n    C = logic.Line().down(d.unit*2).at(X2.in2)\n    d.push()\n    logic.Dot().at(C.center)\n    logic.Line().tox(A.end).label('C$_{in}$', 'left')\n    d.pop()\n\n    A1 = logic.And().right().anchor('in1')\n    logic.Wire('-|').at(A1.in2).to(X1.out)\n    d.move_from(A1.in2, dy=-d.unit*2)\n    A2 = logic.And().right().anchor('in1')\n    logic.Wire('-|').at(A2.in1).to(A.start)\n    logic.Wire('-|').at(A2.in2).to(B.end)\n    d.move_from(A1.out, dy=-(A1.out.y-A2.out.y)/2)\n    O1 = logic.Or().right().label('C$_{out}$', 'right')\n    logic.Line().at(A1.out).toy(O1.in1)\n    logic.Line().at(A2.out).toy(O1.in2)\n    logic.Line().at(X2.out).tox(O1.out).label('S', 'right')\n```\n\n----------------------------------------\n\nTITLE: Drawing Loop Currents Circuit in Schemdraw\nDESCRIPTION: Creates a circuit with loop currents using LoopCurrent element. Shows how to add current labels and rotate component labels for better fit.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/analog.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(unit=5)\n    V1 = elm.SourceV().label('20V')\n    R1 = elm.Resistor().right().label('400Ω')\n    elm.Dot()\n    d.push()\n    R2 = elm.Resistor().down().label('100Ω', loc='bot', rotate=True)\n    elm.Dot()\n    d.pop()\n    L1 = elm.Line()\n    I1 = elm.SourceI().down().label('1A', loc='bot')\n    L2 = elm.Line().tox(V1.start)\n    elm.LoopCurrent([R1,R2,L2,V1], pad=1.25).label('$I_1$')\n    elm.LoopCurrent([R1,I1,L2,R2], pad=1.25).label('$I_2$')\n```\n\n----------------------------------------\n\nTITLE: Drawing S-R Latch Circuit with Schemdraw\nDESCRIPTION: This code creates an S-R latch circuit diagram using Schemdraw. It uses NOR gates and wires to represent the latch, including S and R inputs, and Q and Q-bar outputs.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/logicgate.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    g1 = logic.Nor()\n    d.move_from(g1.in1, dy=-2.5)\n    g2 = logic.Nor().anchor('in1')\n    g1out = logic.Line().right(.25).at(g1.out)\n    logic.Wire('N', k=.5).at(g2.in1).to(g1out.end).dot()\n    g2out = logic.Line().right(.25).at(g2.out)\n    logic.Wire('N', k=.5).at(g1.in2).to(g2out.end).dot()\n    logic.Line().at(g1.in1).left(.5).label('R', 'left')\n    logic.Line().at(g2.in2).left(.5).label('S', 'left')\n    logic.Line().at(g1.out).right(.75).label('Q', 'right')\n    logic.Line().at(g2.out).right(.75).label(r'$\\overline{Q}$', 'right')\n```\n\n----------------------------------------\n\nTITLE: Creating Electronic Circuit Diagram with SchemDraw in Python\nDESCRIPTION: This code creates an electronic circuit diagram using the SchemDraw library, connecting various components like transistors and nodes. It places voltage and current labels, draws connection lines, and creates dots at junction points. The circuit includes input/output voltage markers (Vi and Vo) and current indicators (Ii and Io).\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/analog.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nelm.Gap().down().label(('+','$V_o$','–')).toy(N1.out_n)\nelm.Line().idot(open=True).down().toy(T4.in_n)\nelm.Line().left().to(T4.in_n)\nelm.Dot()\nelm.CurrentLabelInline(direction='in', ofst=-0.15).at(outline).label('$I_o$')\n\nelm.Line().at(T2.in_p).right().tox(out)\nelm.Dot()\n\nelm.Line().right().at(T4.in_p).tox(pre_out)\nelm.Line().up().toy(pre_out)\nelm.Dot()\n\nelm.Line().right().at(T3.in_p).tox(pre_out)\nelm.Dot()\n\n# left side\nelm.Line().down().at(N1.in_n).to(T1.out_n)\n\nelm.Line().up().at(T3.out_p).to(T1.out_p)\n\nelm.Line().left().at(N1.in_p).length(1)\npre_in = d.here\ninline = elm.Line().length(1).dot(open=True).left()\nin_node = d.here\nelm.Gap().down().label(('+','$V_i$','–')).toy(N1.in_n)\nelm.Line().idot(open=True).down().toy(T4.out_n)\nelm.Line().right().to(T4.out_n)\nelm.CurrentLabelInline(direction='out', ofst=-0.15).at(inline).label('$I_i$')\n\nelm.Line().left().at(T2.out_p).tox(in_node)\nelm.Dot()\nelm.Line().left().at(T3.out_n).tox(in_node)\nelm.Dot()\n\nelm.Line().left().at(T4.out_p).tox(pre_in)\nelm.Line().up().toy(pre_in)\nelm.Dot()\n\nelm.Line().left().at(T2.out_n).tox(pre_in)\nelm.Dot()\n```\n\n----------------------------------------\n\nTITLE: Drawing Inverting Opamp Circuit with Schemdraw\nDESCRIPTION: Creates a schematic diagram of an inverting operational amplifier circuit with input and feedback resistors. Includes ground connection, voltage labels and component annotations.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/opamp.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    op = elm.Opamp(leads=True)\n    elm.Line().down(d.unit/4).at(op.in2)\n    elm.Ground(lead=False)\n    Rin = elm.Resistor().at(op.in1).left().idot().label('$R_{in}$', loc='bot').label('$v_{in}$', loc='left')\n    elm.Line().up(d.unit/2).at(op.in1)\n    elm.Resistor().tox(op.out).label('$R_f$')\n    elm.Line().toy(op.out).dot()\n    elm.Line().right(d.unit/4).at(op.out).label('$v_{o}$', loc='right')\n```\n\n----------------------------------------\n\nTITLE: Drawing J-K Flip-Flop Circuit with Schemdraw\nDESCRIPTION: This code creates a J-K flip-flop circuit diagram using Schemdraw. It uses NAND gates and wires to represent the flip-flop, including J, K, and CLK inputs, and Q and Q-bar outputs.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/logicgate.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    # Two front gates (SR latch)\n    G1 = logic.Nand(leadout=.75).anchor('in1')\n    logic.Line().length(d.unit/2).label('Q', 'right')\n    d.move_from(G1.in1, dy=-2.5)\n    G2 = logic.Nand(leadout=.75).anchor('in1')\n    logic.Line().length(d.unit/2).label(r'$\\overline{Q}$', 'right')\n    logic.Wire('N', k=.5).at(G2.in1).to(G1.out).dot()\n    logic.Wire('N', k=.5).at(G1.in2).to(G2.out).dot()\n\n    # Two back gates\n    logic.Line().left(d.unit/6).at(G1.in1)\n    J = logic.Nand(inputs=3).anchor('out').right()\n    logic.Wire('n', k=.5).at(J.in1).to(G2.out, dx=1).dot()\n    logic.Line().left(d.unit/4).at(J.in2).label('J', 'left')\n    logic.Line().left(d.unit/6).at(G2.in2)\n    K = logic.Nand(inputs=3).right().anchor('out')\n    logic.Wire('n', k=-.5).at(K.in3).to(G1.out, dx=.5).dot()\n    logic.Line().left(d.unit/4).at(K.in2).label('K', 'left')\n    C = logic.Line().at(J.in3).toy(K.in1)\n    logic.Dot().at(C.center)\n    logic.Line().left(d.unit/4).label('CLK', 'left')\n```\n\n----------------------------------------\n\nTITLE: Creating an Arduino Board Schematic with Atmega328 Microcontroller\nDESCRIPTION: This code creates a detailed schematic of an Arduino board based on the Atmega328 microcontroller. It first defines a custom Atmega328 IC class with all necessary pins, then creates a complete board diagram with headers, crystal oscillator, capacitors, and reset circuit.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/ic.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Atmega328(elm.Ic):\n    def __init__(self, *args, **kwargs):\n        pins=[elm.IcPin(name='PD0', pin='2', side='r', slot='1/22'),\n              elm.IcPin(name='PD1', pin='3', side='r', slot='2/22'),\n              elm.IcPin(name='PD2', pin='4', side='r', slot='3/22'),\n              elm.IcPin(name='PD3', pin='5', side='r', slot='4/22'),\n              elm.IcPin(name='PD4', pin='6', side='r', slot='5/22'),\n              elm.IcPin(name='PD5', pin='11', side='r', slot='6/22'),             \n              elm.IcPin(name='PD6', pin='12', side='r', slot='7/22'),             \n              elm.IcPin(name='PD7', pin='13', side='r', slot='8/22'),\n              elm.IcPin(name='PC0', pin='23', side='r', slot='10/22'),\n              elm.IcPin(name='PC1', pin='24', side='r', slot='11/22'),\n              elm.IcPin(name='PC2', pin='25', side='r', slot='12/22'),\n              elm.IcPin(name='PC3', pin='26', side='r', slot='13/22'),\n              elm.IcPin(name='PC4', pin='27', side='r', slot='14/22'),\n              elm.IcPin(name='PC5', pin='28', side='r', slot='15/22'),\n              elm.IcPin(name='PB0', pin='14', side='r', slot='17/22'),\n              elm.IcPin(name='PB1', pin='15', side='r', slot='18/22'),\n              elm.IcPin(name='PB2', pin='16', side='r', slot='19/22'),\n              elm.IcPin(name='PB3', pin='17', side='r', slot='20/22'),\n              elm.IcPin(name='PB4', pin='18', side='r', slot='21/22'),\n              elm.IcPin(name='PB5', pin='19', side='r', slot='22/22'),\n\n              elm.IcPin(name='RESET', side='l', slot='22/22', invert=True, pin='1'),\n              elm.IcPin(name='XTAL2', side='l', slot='19/22', pin='10'),\n              elm.IcPin(name='XTAL1', side='l', slot='17/22', pin='9'),\n              elm.IcPin(name='AREF', side='l', slot='15/22', pin='21'),\n              elm.IcPin(name='AVCC', side='l', slot='14/22', pin='20'),\n              elm.IcPin(name='AGND', side='l', slot='13/22', pin='22'),\n              elm.IcPin(name='VCC', side='l', slot='11/22', pin='7'),\n              elm.IcPin(name='GND', side='l', slot='10/22', pin='8')]\n        super().__init__(pins=pins, w=5, plblofst=.05, botlabel='ATMEGA328', **kwargs)\n\n\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=11, inches_per_unit=.4)\n    Q1 = Atmega328()\n    JP4 = (elm.Header(rows=10, shownumber=True,\n                      pinsright=['D8', 'D9', 'D10', 'D11', 'D12', 'D13', '', '', '', ''],\n                      pinalignright='center')\n                .flip().at(Q1.PB5, dx=4, dy=1).anchor('pin6').label('JP4', fontsize=10))\n\n    JP3 = (elm.Header(rows=6, shownumber=True, pinsright=['A0', 'A1', 'A2', 'A3', 'A4', 'A5'], pinalignright='center')\n                        .flip().at(Q1.PC5, dx=4).anchor('pin6').label('JP3', fontsize=10))\n\n    JP2 = (elm.Header(rows=8, shownumber=True, pinsright=['D0', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7'],\n                      pinalignright='center')).at(Q1.PD7, dx=3).flip().anchor('pin8').label('JP2', fontsize=10)\n\n    elm.OrthoLines(n=6).at(Q1.PB5).to(JP4.pin6)\n    elm.OrthoLines(n=6).at(Q1.PC5).to(JP3.pin6)\n    elm.OrthoLines(n=8).at(Q1.PD7).to(JP2.pin8)\n\n    elm.Line().left(.9).at(JP4.pin7).label('GND', 'left')\n    elm.Line().left(.9).at(JP4.pin8).label('AREF', 'left')\n    elm.Line().left(.9).at(JP4.pin9).label('AD4/SDA', 'left')\n    elm.Line().left(.9).at(JP4.pin10).label('AD5/SCL', 'left')\n\n    JP1 = (elm.Header(rows=6, shownumber=True, pinsright=['VCC', 'RXD', 'TXD', 'DTR', 'RTS', 'GND'],\n                      pinalignright='center').right().at(Q1.PD0, dx=4, dy=-2).anchor('pin1'))\n    elm.Line().left(d.unit/2).at(JP1.pin1)\n    elm.Vdd().label('+5V')\n    elm.Line().left().at(JP1.pin2)\n    elm.Line().toy(Q1.PD0).dot()\n    elm.Line().left(d.unit+.6).at(JP1.pin3)\n    elm.Line().toy(Q1.PD1).dot()\n    elm.Line().left(d.unit/2).at(JP1.pin6)\n    elm.Ground()\n\n    elm.Line().left(d.unit*2).at(Q1.XTAL2).dot()\n    d.push()\n    elm.Capacitor().left(d.unit/2).scale(.75)\n    elm.Line().toy(Q1.XTAL1).dot()\n    elm.Ground()\n    elm.Capacitor().right(d.unit/2).scale(.75).dot()\n    d.pop()\n    elm.Crystal().toy(Q1.XTAL1).label('16MHz', 'bottom')\n    elm.Line().tox(Q1.XTAL1)\n\n    elm.Line().left(d.unit/3).at(Q1.AREF).label('AREF', 'left')\n    elm.Line().left(1.5*d.unit).at(Q1.AVCC)\n    elm.Vdd().label('+5V')\n    elm.Line().toy(Q1.VCC).dot().idot()\n    elm.Line().tox(Q1.VCC).hold()\n    elm.Capacitor().down().label('100n')\n    GND = elm.Ground()\n\n    elm.Line().left().at(Q1.AGND)\n    elm.Line().toy(Q1.GND).dot()\n    elm.Line().tox(Q1.GND).hold()\n    elm.Wire('|-').to(GND.center).dot()\n\n    elm.Line().left().at(Q1.RESET).dot()\n    d.push()\n    elm.RBox().up().label('10K')\n    elm.Vdd().label('+5V')\n    d.pop()\n    elm.Line().left().dot()\n    d.push()\n    RST = elm.Button().up().label('Reset')\n    elm.Line().left(d.unit/2)\n    elm.Ground()\n    d.pop()\n```\n\n----------------------------------------\n\nTITLE: Creating a LED Blinker Circuit on a Breadboard\nDESCRIPTION: Builds a complete LED blinker circuit using a 555 timer IC on a breadboard. The code places components including the breadboard, DIP IC, resistors, LED, capacitors, and connects them with lines and wires of different colors and thicknesses.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/pictorial.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nelm.Line.defaults['lw'] = 4\n\nwith schemdraw.Drawing():\n    bb = pictorial.Breadboard().up()\n    pictorial.DIP().up().at(bb.E5).label('555', color='#DDD')\n    elm.Line().at(bb.A8).to(bb.L1_7)\n    elm.Line().at(bb.J5).to(bb.R1_4)\n    elm.Line().at(bb.A5).to(bb.L2_4).color('black')\n    pictorial.Resistor(330).at(bb.B7).to(bb.B12)\n    pictorial.LED(lead_length=.3*pictorial.INCH).at(bb.C12)\n    elm.Line().at(bb.A13).to(bb.L2_13).color('black')\n    pictorial.Resistor(520).at(bb.G6).to(bb.G3)\n    pictorial.Resistor(520).at(bb.J6).to(bb.R1_10)\n    elm.Line().at(bb.H3).to(bb.H7).color('green')\n    elm.Wire('c').at(bb.G7).to(bb.D6).linewidth(4).color('green')\n    elm.Line().at(bb.H8).to(bb.H12).color('green')\n    elm.Line().at(bb.J13).to(bb.R2_14).color('black')\n    pictorial.CapacitorMylar(lead_length=.2*pictorial.INCH).at(bb.I12)\n    elm.Line().at(bb.C6).to(bb.C3).color('green')\n    pictorial.CapacitorMylar(lead_length=.2*pictorial.INCH).at(bb.D2)\n    elm.Line().at(bb.A2).to(bb.L2_1).color('black')\n```\n\n----------------------------------------\n\nTITLE: Drawing ECE201-Style Circuit using Push/Pop Operations\nDESCRIPTION: Demonstrates use of push() and pop() stack operations to create a complex circuit with multiple voltage sources, resistors and current sources. Shows how to use tox and toy methods for alignment.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/analog.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(unit=2)\n    d.push()\n    R1 = elm.Resistor().down().label('20Ω')\n    V1 = elm.SourceV().down().reverse().label('120V')\n    elm.Line().right(3).dot()\n    d.pop()\n    elm.Line().right(3).dot()\n    elm.SourceV().down().reverse().label('60V')\n    elm.Resistor().label('5Ω').dot()\n    elm.Line().right(3).dot()\n    elm.SourceI().up().label('36A')\n    elm.Resistor().label('10Ω').dot()\n    elm.Line().left(3).hold()\n    elm.Line().right(3).dot()\n    R6 = elm.Resistor().toy(V1.end).label('6Ω').dot()\n    elm.Line().left(3).hold()\n    elm.Resistor().right().at(R6.start).label('1.6Ω').dot(open=True).label('a', 'right')\n    elm.Line().right().at(R6.end).dot(open=True).label('b', 'right')\n```\n\n----------------------------------------\n\nTITLE: Drawing an S-R Latch with Transistors in SchémDraw\nDESCRIPTION: Creates a detailed schematic of an S-R (Set-Reset) latch implemented with BJT transistors. The diagram shows transistors Q1 and Q2 in a cross-coupled configuration with resistors, power connections, and Set/Reset control inputs.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/solidstate.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    Q1 = elm.BjtNpn(circle=True).reverse().label('Q1', 'left')\n    Q2 = elm.BjtNpn(circle=True).at((d.unit*2, 0)).label('Q2')\n    elm.Line().up(d.unit/2).at(Q1.collector)\n\n    R1 = elm.Resistor().up().label('R1').hold()\n    elm.Dot().label('V1', 'left')\n    elm.Resistor().right(d.unit*.75).label('R3', 'bottom').dot()\n    elm.Line().up(d.unit/8).dot(open=True).label('Set', 'right').hold()\n    elm.Line().to(Q2.base)\n\n    elm.Line().up(d.unit/2).at(Q2.collector)\n    elm.Dot().label('V2', 'right')\n    R2 = elm.Resistor().up().label('R2', 'bottom').hold()\n    elm.Resistor().left(d.unit*.75).label('R4', 'bottom').dot()\n    elm.Line().up(d.unit/8).dot(open=True).label('Reset', 'right').hold()\n    elm.Line().to(Q1.base)\n\n    elm.Line().down(d.unit/4).at(Q1.emitter)\n    BOT = elm.Line().tox(Q2.emitter)\n    elm.Line().to(Q2.emitter)\n    elm.Dot().at(BOT.center)\n    elm.Ground().at(BOT.center)\n\n    TOP = elm.Line().endpoints(R1.end, R2.end)\n    elm.Dot().at(TOP.center)\n    elm.Vdd().at(TOP.center).label('+Vcc')\n```\n\n----------------------------------------\n\nTITLE: Drawing 741 Opamp with Pin Labels using Schemdraw\nDESCRIPTION: Illustrates how to create a detailed 741 operational amplifier schematic with pin numbers and offset labels. Includes connections for trimming and power supply.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/opamp.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=12)\n    op = (elm.Opamp().label('741', loc='center', ofst=0)\n                 .label('1', 'n1', fontsize=9, ofst=(-.1, -.25), halign='right', valign='top')\n                 .label('5', 'n1a', fontsize=9, ofst=(-.1, -.25), halign='right', valign='top')\n                 .label('4', 'vs', fontsize=9, ofst=(-.1, -.2), halign='right', valign='top')\n                 .label('7', 'vd', fontsize=9, ofst=(-.1, .2), halign='right', valign='bottom')\n                 .label('2', 'in1', fontsize=9, ofst=(-.1, .1), halign='right', valign='bottom')\n                 .label('3', 'in2', fontsize=9, ofst=(-.1, .1), halign='right', valign='bottom')\n                 .label('6', 'out', fontsize=9, ofst=(-.1, .1), halign='left', valign='bottom'))\n    elm.Line().left(.5).at(op.in1)\n    elm.Line().down(d.unit/2)\n    elm.Ground(lead=False)\n    elm.Line().left(.5).at(op.in2)\n    elm.Line().right(.5).at(op.out).label('$V_o$', 'right')\n    elm.Line().up(1).at(op.vd).label('$+V_s$', 'right')\n    trim = elm.Potentiometer().down().at(op.n1).flip().scale(0.7)\n    elm.Line().tox(op.n1a)\n    elm.Line().up().to(op.n1a)\n    elm.Line().at(trim.tap).tox(op.vs).dot()\n    d.push()\n    elm.Line().down(d.unit/3)\n    elm.Ground()\n    d.pop()\n    elm.Line().toy(op.vs)\n```\n\n----------------------------------------\n\nTITLE: Creating a Complete Drawing with SchimDraw Elements and Wires\nDESCRIPTION: This example creates a full SchimDraw drawing with dots (A through F) and connects them with various wire styles. The drawing demonstrates how to position elements, connect them with different wire types, and apply styling like colors and labels.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nd = schemdraw.Drawing()\nd += (A := elm.Dot().label('A', halign='right', ofst=(-.1, 0)))\nd += (B := elm.Dot().label('B').at((4, 4)))\nd += (C := elm.Dot().label('C', ofst=(-.2, 0)).at((7, 4)))\nd += (D := elm.Dot().label('D', ofst=(-.2, 0)).at((9, 0)))\nd += (E := elm.Dot().label('E', ofst=(-.2, 0)).at((11, 4)))\nd += (F := elm.Dot().label('F', ofst=(-.2, 0)).at((13, 0)))\nd += elm.Wire('-', arrow='->').at(A.center).to(B.center).color('deeppink').label('\"-\"')\nd += elm.Wire('|-', arrow='->').at(A.center).to(B.center).color('mediumblue').label('\"|-\"')\nd += elm.Wire('-|', arrow='->').at(A.center).to(B.center).color('darkseagreen').label('\"-|\"')\nd += elm.Wire('c', k=-1, arrow='->').at(C.center).to(D.center).color('darkorange').label('\"c\"', halign='left')\nd += elm.Wire('n', arrow='->').at(C.center).to(D.center).color('orchid').label('\"n\"')\nd += elm.Wire('N', arrow='->').at(E.center).to(F.center).color('darkred').label('\"N\"', 'start', ofst=(-.1, -.75))\nd += elm.Wire('z', k=.5, arrow='->').at(E.center).to(F.center).color('teal').label('\"z\"', halign='left', ofst=(0, .5))\nd.draw()\n```\n\n----------------------------------------\n\nTITLE: Drawing Half Adder Circuit with Schemdraw\nDESCRIPTION: This code creates a half adder circuit diagram using Schemdraw. It sets the drawing unit to 0.5 and uses XOR and AND gates along with wires to represent the circuit.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/logicgate.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(unit=0.5)\n    S = logic.Xor().label('S', 'right')\n    logic.Line().left(d.unit*2).at(S.in1).idot().label('A', 'left')\n    B = logic.Line().left().at(S.in2).dot()\n    logic.Line().left().label('B', 'left')\n    logic.Line().down(d.unit*3).at(S.in1)\n    C = logic.And().right().anchor('in1').label('C', 'right')\n    logic.Wire('|-').at(B.end).to(C.in2)\n```\n\n----------------------------------------\n\nTITLE: Creating SRAM Read Cycle Timing Diagram\nDESCRIPTION: Demonstrates creating a timing diagram for SRAM read cycle with address, chip select, output enable, and data signals. Includes timing annotations and edge markers.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/timing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogic.TimingDiagram({\n    'signal': [\n        {'name': 'Address',     'wave': 'x4......x.', 'data': ['Valid address']},\n        {'name': 'Chip Select', 'wave': '1.0.....1.'},\n        {'name': 'Out Enable',  'wave': '1.0.....1.'},\n        {'name': 'Data Out',    'wave': 'z...x6...z', 'data': ['Valid data']},\n    ],\n    'edge': ['[0^:1.2]+[0^:8] $t_{WC}$',\n             '[0v:1]+[0v:5] $t_{AQ}$',\n             '[1:2]+[1:5] $t_{EQ}$',\n             '[2:2]+[2:5] $t_{GQ}$',\n             '[0^:5]-[3v:5]{lightgray,:}',\n            ]\n}, ygap=.5, grid=False)\n```\n\n----------------------------------------\n\nTITLE: Drawing Capacitor Network with Schemdraw\nDESCRIPTION: Illustrates a network of capacitors with specific values using endpoints for precise placement. Shows how to create complex connections between components and add labels.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/analog.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=12)\n    C1 = elm.Capacitor().label('8nF').idot().label('a', 'left')\n    C2 = elm.Capacitor().label('18nF')\n    C3 = elm.Capacitor().down().label('8nF', loc='bottom')\n    C4 = elm.Capacitor().left().label('32nF')\n    C5 = elm.Capacitor().label('40nF', loc='bottom').dot().label('b', 'left')\n    C6 = elm.Capacitor().endpoints(C1.end, C5.start).label('2.8nF')\n    C7 = (elm.Capacitor().endpoints(C2.end, C5.start)\n              .label('5.6nF', loc='center', ofst=(-.3, -.1), halign='right', valign='bottom'))\n```\n\n----------------------------------------\n\nTITLE: Drawing Triaxial Cable Driver Circuit with Schemdraw\nDESCRIPTION: Creates a schematic of a specialized triaxial cable driver circuit with SMU and buffer amplifiers. Includes detailed connections and shield arrangements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/opamp.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=10)\n    elm.Line().length(d.unit/5).label('V', 'left')\n    smu = (elm.Opamp(sign=False).anchor('in2')\n                      .label('SMU', 'center', ofst=[-.4, 0], halign='center', valign='center'))\n    elm.Line().at(smu.out).length(.3)\n    d.push()\n    elm.Line().length(d.unit/4)\n    triax = elm.Triax(length=5, shieldofststart=.75)\n    d.pop()\n    elm.Resistor().up().scale(0.6).idot()\n    elm.Line().left().dot()\n    elm.Wire('|-').to(smu.in1).hold()\n    elm.Wire('|-').delta(d.unit/5, d.unit/5)\n    buf = (elm.Opamp(sign=False).anchor('in2').scale(0.6)\n                         .label('BUF', 'center', ofst=(-.4, 0), halign='center', valign='center'))\n    elm.Line().left(d.unit/5).at(buf.in1)\n    elm.Wire('n').to(buf.out, dx=.5).dot()\n    elm.Wire('-|').at(buf.out).to(triax.guardstart_top)\n    elm.GroundChassis().at(triax.shieldcenter)\n```\n\n----------------------------------------\n\nTITLE: Creating a 555 Timer LED Blinker Circuit in Python with SchemeDrawing\nDESCRIPTION: This code creates a schematic diagram of a 555 timer IC configured as an LED blinker circuit. It demonstrates how to create a custom IC component with proper pin placement, and connect it to external components such as resistors, capacitors, and an LED.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/ic.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=12)\n    T = (elm.Ic()\n         .side('L', spacing=1.5, pad=1.5, leadlen=1)\n         .side('R', spacing=2)\n         .side('T', pad=1.5, spacing=1)\n         .pin(name='TRG', side='left', pin='2')\n         .pin(name='THR', side='left', pin='6')\n         .pin(name='DIS', side='left', pin='7')\n         .pin(name='CTL', side='right', pin='5')\n         .pin(name='OUT', side='right', pin='3')\n         .pin(name='RST', side='top', pin='4')\n         .pin(name='Vcc', side='top', pin='8')\n         .pin(name='GND', side='bot', pin='1')\n         .label('555'))\n    BOT = elm.Ground().at(T.GND)\n    elm.Dot()\n    elm.Resistor().endpoints(T.DIS, T.THR).label('Rb').idot()\n    elm.Resistor().up().at(T.DIS).label('Ra').label('+Vcc', 'right')\n    elm.Line().endpoints(T.THR, T.TRG)\n    elm.Capacitor().at(T.TRG).toy(BOT.start).label('C')\n    elm.Line().tox(BOT.start)\n    elm.Capacitor().at(T.CTL).toy(BOT.start).label(r'.01$\\mu$F', 'bottom').dot()\n    elm.Dot().at(T.DIS)\n    elm.Dot().at(T.THR)\n    elm.Dot().at(T.TRG)\n    elm.Line().endpoints(T.RST,T.Vcc).dot()\n    elm.Line().up(d.unit/4).label('+Vcc', 'right')\n    elm.Resistor().right().at(T.OUT).label('330')\n    elm.LED().flip().toy(BOT.start)\n    elm.Line().tox(BOT.start)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Fritzing Parts in Python with Schemdraw\nDESCRIPTION: This example shows how to import a Fritzing part file and use it in a Schemdraw drawing. It downloads an OLED display part and adds connections to it.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/pictorial.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.use('svg')\nfrom urllib.request import urlretrieve\npart = 'https://github.com/adafruit/Fritzing-Library/raw/master/parts/Adafruit%20OLED%20Monochrome%20128x32%20SPI.fzpz'\nfname, msg = urlretrieve(part)\n\nwith schemdraw.Drawing() as d:\n    oled = pictorial.FritzingPart(fname)\n    elm.Line().down().at(oled.GND).length(.5)\n    elm.Ground()\n    elm.Line().down().at(oled.absanchors['3.3V']).color('red').length(1.5).label('3.3V', loc='left')\n    elm.Button().at(oled.RESET)\n    elm.Ground(lead=False)\n```\n\n----------------------------------------\n\nTITLE: Drawing a 741 Op-Amp Internal Schematic in SchémDraw\nDESCRIPTION: Creates a comprehensive internal schematic of a 741 operational amplifier showing all transistors (Q1-Q22), resistors, and capacitors with their connections. The diagram includes input pins, offset null connections, power supply connections, and output.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/solidstate.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=12, unit=2.5)\n    Q1 = elm.BjtNpn().label('Q1').label('+IN', 'left')\n    Q3 = elm.BjtPnp().left().at(Q1.emitter).anchor('emitter').flip().label('Q3', 'left')\n    elm.Line().down().at(Q3.collector).dot()\n    d.push()\n    elm.Line().right(d.unit/4)\n    Q7 = elm.BjtNpn().anchor('base').label('Q7')\n    d.pop()\n    elm.Line().down(d.unit*1.25)\n    Q5 = elm.BjtNpn().left().flip().anchor('collector').label('Q5', 'left')\n    elm.Line().left(d.unit/2).at(Q5.emitter).label('OFST\\nNULL', 'left').flip()\n    elm.Resistor().down().at(Q5.emitter).label('R1\\n1K')\n    elm.Line().right(d.unit*.75).dot()\n    R3 = elm.Resistor().up().label('R3\\n50K')\n    elm.Line().toy(Q5.base).dot()\n    d.push()\n    elm.Line().left().to(Q5.base)\n    elm.Line().at(Q7.emitter).toy(Q5.base).dot()\n    d.pop()\n    elm.Line().right(d.unit/4)\n    Q6 = elm.BjtNpn().anchor('base').label('Q6')\n    elm.Line().at(Q6.emitter).length(d.unit/3).label('\\nOFST\\nNULL', 'right').hold()\n    elm.Resistor().down().at(Q6.emitter).label('R2\\n1K').dot()\n\n    elm.Line().at(Q6.collector).toy(Q3.collector)\n    Q4 = elm.BjtPnp().right().anchor('collector').label('Q4')\n    elm.Line().at(Q4.base).tox(Q3.base)\n    elm.Line().at(Q4.emitter).toy(Q1.emitter)\n    Q2 = elm.BjtNpn().left().flip().anchor('emitter').label('Q2', 'left').label('$-$IN', 'right')\n    elm.Line().up(d.unit/3).at(Q2.collector).dot()\n    Q8 = elm.BjtPnp().left().flip().anchor('base').label('Q8', 'left')\n    elm.Line().at(Q8.collector).toy(Q2.collector).dot()\n    elm.Line().at(Q2.collector).tox(Q1.collector)\n    elm.Line().up(d.unit/4).at(Q8.emitter)\n    top = elm.Line().tox(Q7.collector)\n    elm.Line().toy(Q7.collector)\n\n    elm.Line().right(d.unit*2).at(top.start)\n    elm.Line().down(d.unit/4)\n    Q9 = elm.BjtPnp().right().anchor('emitter').label('Q9', ofst=-.1)\n    elm.Line().at(Q9.base).tox(Q8.base)\n    elm.Dot().at(Q4.base)\n    elm.Line().down(d.unit/2).at(Q4.base)\n    elm.Line().tox(Q9.collector).dot()\n    elm.Line().at(Q9.collector).toy(Q6.collector)\n    Q10 = elm.BjtNpn().left().flip().anchor('collector').label('Q10', 'left')\n    elm.Resistor().at(Q10.emitter).toy(R3.start).label('R4\\n5K').dot()\n\n    Q11 = elm.BjtNpn().right().at(Q10.base).anchor('base').label('Q11')\n    elm.Dot().at(Q11.base)\n    elm.Line().up(d.unit/2)\n    elm.Line().tox(Q11.collector).dot()\n    elm.Line().at(Q11.emitter).toy(R3.start).dot()\n    elm.Line().up(d.unit*2).at(Q11.collector)\n    elm.Resistor().toy(Q9.collector).label('R5\\n39K')\n    Q12 = elm.BjtPnp().left().flip().anchor('collector').label('Q12', 'left', ofst=-.1)\n    elm.Line().up(d.unit/4).at(Q12.emitter).dot()\n    elm.Line().tox(Q9.emitter).dot()\n    elm.Line().right(d.unit/4).at(Q12.base).dot()\n    elm.Wire('|-').to(Q12.collector).dot().hold()\n    elm.Line().right(d.unit*1.5)\n    Q13 = elm.BjtPnp().anchor('base').label('Q13')\n    elm.Line().up(d.unit/4).dot()\n    elm.Line().tox(Q12.emitter)\n    K = elm.Line().down(d.unit/5).at(Q13.collector).dot()\n    elm.Line().down()\n    Q16 = elm.BjtNpn().right().anchor('collector').label('Q16', ofst=-.1)\n    elm.Line().left(d.unit/3).at(Q16.base).dot()\n    R7 = elm.Resistor().up().toy(K.end).label('R7\\n4.5K').dot()\n    elm.Line().tox(Q13.collector).hold()\n    R8 = elm.Resistor().down().at(R7.start).label('R8\\n7.5K').dot()\n    elm.Line().tox(Q16.emitter)\n    J = elm.Dot()\n    elm.Line().toy(Q16.emitter)\n    Q15 = elm.BjtNpn().right().at(R8.end).anchor('collector').label('Q15')\n    elm.Line().left(d.unit/2).at(Q15.base).dot()\n    C1 = elm.Capacitor().toy(R7.end).label('C1\\n30pF')\n    elm.Line().tox(Q13.collector)\n    elm.Line().at(C1.start).tox(Q6.collector).dot()\n    elm.Line().down(d.unit/2).at(J.center)\n    Q19 = elm.BjtNpn().right().anchor('collector').label('Q19')\n    elm.Line().at(Q19.base).tox(Q15.emitter).dot()\n    elm.Line().toy(Q15.emitter).hold()\n    elm.Line().down(d.unit/4).at(Q19.emitter).dot()\n    elm.Line().left()\n    Q22 = elm.BjtNpn().left().anchor('base').flip().label('Q22', 'left')\n    elm.Line().at(Q22.collector).toy(Q15.base).dot()\n    elm.Line().at(Q22.emitter).toy(R3.start).dot()\n    elm.Line().tox(R3.start).hold()\n    elm.Line().tox(Q15.emitter).dot()\n    d.push()\n    elm.Resistor().up().label('R12\\n50K')\n    elm.Line().toy(Q19.base)\n    d.pop()\n    elm.Line().tox(Q19.emitter).dot()\n    R11 = elm.Resistor().up().label('R11\\n50')\n    elm.Line().toy(Q19.emitter)\n\n    elm.Line().up(d.unit/4).at(Q13.emitter)\n    elm.Line().right(d.unit*1.5).dot()\n    elm.Line().length(d.unit/4).label('V+', 'right').hold()\n    elm.Line().down(d.unit*.75)\n    Q14 = elm.BjtNpn().right().anchor('collector').label('Q14')\n    elm.Line().left(d.unit/2).at(Q14.base)\n    d.push()\n    elm.Line().down(d.unit/2).idot()\n    Q17 = elm.BjtNpn().left().anchor('collector').flip().label('Q17', 'left', ofst=-.1)\n    elm.Line().at(Q17.base).tox(Q14.emitter).dot()\n    J = elm.Line().toy(Q14.emitter)\n    d.pop()\n    elm.Line().tox(Q13.collector).dot()\n    elm.Resistor().down().at(J.start).label('R9\\n25').dot()\n    elm.Wire('-|').to(Q17.emitter).hold()\n    elm.Line().down(d.unit/4).dot()\n    elm.Line().right(d.unit/4).label('OUT', 'right').hold()\n    elm.Resistor().down().label('R10\\n50')\n    Q20 = elm.BjtPnp().right().anchor('emitter').label('Q20')\n    elm.Wire('c', k=-1).at(Q20.base).to(Q15.collector)\n    elm.Line().at(Q20.collector).toy(R3.start).dot()\n    elm.Line().right(d.unit/4).label('V-', 'right').hold()\n    elm.Line().tox(R11.start)\n```\n\n----------------------------------------\n\nTITLE: Creating a Seven-Segment Display Counter with 555 Timer and 4026 IC\nDESCRIPTION: This code creates a schematic diagram of a counter circuit using a 555 timer IC to generate clock pulses and a 4026 IC to drive a seven-segment display. It demonstrates connecting these components with proper wiring and resistor placement.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/ic.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=12)\n    IC555 = elm.Ic555(size=(5,8))\n    gnd = elm.Ground().at(IC555.GND)\n    elm.Dot()\n    elm.Resistor().endpoints(IC555.DIS, IC555.THR).label('100 kΩ')\n    elm.Resistor().up().at(IC555.DIS).label('1 kΩ').label('+Vcc', 'right')\n    elm.Line().endpoints(IC555.THR, IC555.TRG)\n    elm.Capacitor(polar=True).at(IC555.TRG).toy(gnd.start).label('10 μF')\n    elm.Line().tox(gnd.start)\n    elm.Capacitor().at(IC555.CTL).toy(gnd.start).label('.01 μF', 'bottom')\n    elm.Line().tox(gnd.start)\n\n    elm.Dot().at(IC555.DIS)\n    elm.Dot().at(IC555.THR)\n    elm.Dot().at(IC555.TRG)\n    elm.Line().endpoints(IC555.RST,IC555.Vcc).dot()\n    elm.Line().up(d.unit/4).label('+Vcc', 'right')\n    d.move_from(IC555.OUT, dx=5, dy=-1)\n\n    IC4026 = (elm.Ic()\n              .pin('L', 'CLK', pin='1')\n              .pin('L', 'INH', pin='2') # Inhibit\n              .pin('L', 'RST', pin='15')\n              .pin('L', 'DEI', pin='3') # Display Enable In\n              .pin('B', 'Vss', pin='8')\n              .pin('T', 'Vdd', pin='16')\n              .pin('B', 'UCS', pin='14') # Ungated C Segment\n              .pin('B', 'DEO', pin='4')  # Display Enable Out\n              .pin('B', 'Co', pin='4')   # Carry out\n              .pin('R', 'g', pin='7')\n              .pin('R', 'f', pin='6')                      \n              .pin('R', 'e', pin='11')\n              .pin('R', 'd', pin='9')\n              .pin('R', 'c', pin='13')\n              .pin('R', 'b', pin='12')\n              .pin('R', 'a', pin='10')\n              .side('B', spacing=1, pad=.75, leadlen=.75)\n              .side('L', spacing=1, pad=1.5, leadlen=.6)\n              .label('4026').right().anchor('center'))\n    elm.Wire('c').at(IC555.OUT).to(IC4026.CLK)\n    elm.Line().endpoints(IC4026.INH, IC4026.RST).dot()\n    elm.Line().left(d.unit/4)\n    elm.Ground()\n    elm.Wire('|-').at(IC4026.DEI).to(IC4026.Vdd).dot()\n    elm.Line().up(d.unit/4).label('+Vcc', 'right')\n    elm.Line().at(IC4026.Vss).tox(IC4026.UCS).dot()\n    elm.Ground()\n    elm.Line().tox(IC4026.DEO).dot()\n    elm.Line().tox(IC4026.Co)\n\n    elm.Resistor().right().at(IC4026.a)\n    disp = elm.SevenSegment(cathode=True).anchor('a')\n    elm.Resistor().at(IC4026.b)\n    elm.Resistor().at(IC4026.c)\n    elm.Resistor().at(IC4026.d)\n    elm.Resistor().at(IC4026.e)\n    elm.Resistor().at(IC4026.f)\n    elm.Resistor().at(IC4026.g).label('7 x 330', loc='bottom')\n    elm.Ground(lead=False).at(disp.cathode)\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Signal Protocol Timing Diagram\nDESCRIPTION: Demonstrates creating a complex timing diagram with multiple signals including clock, data, request, and acknowledge signals using JSON string format.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/timing.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlogic.TimingDiagram.from_json('''{ signal: [\n  { name: \"clk\",         wave: \"p.....|...\" },\n  { name: \"Data\",        wave: \"x.345x|=.x\", data: [\"head\", \"body\", \"tail\", \"data\"] },\n  { name: \"Request\",     wave: \"0.1..0|1.0\" },\n  {},\n  { name: \"Acknowledge\", wave: \"1.....|01.\" }\n  ]}''')\n```\n\n----------------------------------------\n\nTITLE: Drawing Digital Filter Implementation\nDESCRIPTION: Creates a diagram of a digital filter showing delay elements, multiplication blocks, and summation nodes.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/signalproc.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(unit=1, fontsize=14)\n    dsp.Line().length(d.unit*2).label('x[n]', 'left').dot()\n\n    d.push()\n    dsp.Line().right()\n    dsp.Amp().label('$b_0$', 'bottom')\n    dsp.Arrow()\n    s0 = dsp.Sum().anchor('W')\n    d.pop()\n\n    dsp.Arrow().down()\n    z1 = dsp.Square(label='$z^{-1}$')\n    dsp.Line().length(d.unit/2).dot()\n\n    d.push()\n    dsp.Line().right()\n    dsp.Amp().label('$b_1$', 'bottom')\n    dsp.Arrow()\n    s1 = dsp.Sum().anchor('W')\n    d.pop()\n\n    dsp.Arrow().down(d.unit*.75)\n    dsp.Square().label('$z^{-1}$')\n    dsp.Line().length(d.unit*.75)\n    dsp.Line().right()\n    dsp.Amp().label('$b_2$', 'bottom')\n    dsp.Arrow()\n    s2 = dsp.Sum().anchor('W')\n\n    dsp.Arrow().at(s2.N).toy(s1.S)\n    dsp.Arrow().at(s1.N).toy(s0.S)\n\n    dsp.Line().right(d.unit*2.75).at(s0.E).dot()\n    dsp.Arrow().right().label('y[n]', 'right').hold()\n    dsp.Arrow().down()\n    dsp.Square().label('$z^{-1}$')\n    dsp.Line().length(d.unit/2).dot()\n    d.push()\n    dsp.Line().left()\n    a1 = dsp.Amp().label('$-a_1$', 'bottom')\n    dsp.Arrow().at(a1.out).tox(s1.E)\n    d.pop()\n\n    dsp.Arrow().down(d.unit*.75)\n    dsp.Square().label('$z^{-1}$')\n    dsp.Line().length(d.unit*.75)\n    dsp.Line().left()\n    a2 = dsp.Amp().label('$-a_2$', 'bottom')\n    dsp.Arrow().at(a2.out).tox(s2.E)\n```\n\n----------------------------------------\n\nTITLE: Drawing Complete Circuit with Multiple Components\nDESCRIPTION: Creates a circuit diagram with a resistor, capacitor, connecting line, and sinusoidal voltage source, demonstrating component chaining and positioning.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/index.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor().right().label('1Ω')\n    elm.Capacitor().down().label('10μF')\n    elm.Line().left()\n    elm.SourceSin().up().label('10V')\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Flowchart with Schemdraw in Python\nDESCRIPTION: This example demonstrates how to create a simple flowchart using Schemdraw. It includes a start terminal, process blocks, arrows, and a connect element.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/flow.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=10, unit=.5)\n    flow.Terminal().label('Start')\n    flow.Arrow()\n    flow.Process().label('Do something').drop('E')\n    flow.Arrow().right()\n    flow.Process().label('Do something\\nelse')\n```\n\n----------------------------------------\n\nTITLE: Creating a Prime Factorization Flowchart in Python with Schemdraw\nDESCRIPTION: This code creates a complex flowchart for prime factorization. It demonstrates advanced techniques for creating and connecting various flowchart elements, including decision nodes, process boxes, and arrows with labels.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/flowcharting.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Set default flowchart box fill colors\nflow.Box.defaults['fill'] = '#eeffff'\nflow.Start.defaults['fill'] = '#ffeeee'\nflow.Decision.defaults['fill'] = '#ffffee'\n\nwith schemdraw.Drawing() as d:\n    d.config(unit=.75)\n    flow.Start(h=1.5).label('Select\\n$N>1$').drop('S')\n    flow.Arrow().down()\n    flow.Box().label('Let k=2\\nLet $n=N$')\n    flow.Arrow()\n    k2 = flow.Decision(E='Yes', S='No').label('Is $k^2 < n$?').drop('E')\n    flow.Arrow().length(1)\n    flow.Box().label('Add final\\nelement\\nto dictionary').drop('S')\n    flow.Arrow().down()\n    flow.Start().label('Stop')\n    flow.Arrow().at(k2.S)\n    kn = flow.Decision(W='No', S='Yes').label('Is $k$ a\\nfactor of $n$?').drop('W')\n    flow.Arrow().left().length(1)\n    flow.Box().label('Replace $k$\\nby $k+1$').drop('N')\n    flow.Arrow().toy(k2.W).dot(open=True)\n    flow.Arrow().tox(k2.W)\n\n    flow.Arrow().down().at(kn.S)\n    flow.Box().label('Replace $n$\\nby $n/k$')\n    flow.Arrow()\n    k3 = flow.Decision(E='No', W='Yes').label('Is $k$ in\\ndictionary?').drop('E')\n    \n    flow.Arrow().left().at(k3.W).length(1)\n    rep = flow.Box().label('Replace $v$\\nby $v+1$')\n    flow.Arrow()\n    dot = flow.Arrow().up().toy(k2.W).dot(open=True)\n    flow.Arrow().right().tox(rep.N)\n\n    flow.Arrow().at(k3.E).right().length(1)\n    flow.Box().label('Add $k$ to\\ndictionary\\nwith $v=1$').drop('S')\n    flow.Arrow().down()\n    flow.Arrow().left().to(rep.W, dx=-1.5)\n    flow.Arrow().up().toy(k2.W)\n    flow.Arrow().right().tox(dot.center)\n```\n\n----------------------------------------\n\nTITLE: Drawing Non-inverting Opamp Circuit with Schemdraw\nDESCRIPTION: Generates a schematic of a non-inverting amplifier configuration with multiple resistors and voltage source. Includes detailed component labeling and connections.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/opamp.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    op = elm.Opamp(leads=True)\n    out = elm.Line().at(op.out).length(.75)\n    elm.Line().up().at(op.in1).length(1.5).dot()\n    d.push()\n    elm.Resistor().left().label('$R_1$')\n    elm.Ground()\n    d.pop()\n    elm.Resistor().tox(op.out).label('$R_f$')\n    elm.Line().toy(op.out).dot()\n    elm.Resistor().left().at(op.in2).idot().label('$R_2$')\n    elm.SourceV().down().reverse().label('$v_{in}$')\n    elm.Line().right().dot()\n    elm.Resistor().up().label('$R_3$').hold()\n    elm.Line().tox(out.end)\n    elm.Gap().toy(op.out).label(['–','$v_o$','+'])\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom J-K Flip Flop IC in Schemdraw\nDESCRIPTION: Demonstrates how to create a custom J-K flip flop IC with named pins and custom anchors. It shows pin configuration with labels, pin numbers, and how to define custom anchor names for accessing elements with special characters.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/intcircuits.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nJK = elm.Ic(pins=[elm.IcPin(name='>', pin='1', side='left'),\n                      elm.IcPin(name='K', pin='16', side='left'),\n                      elm.IcPin(name='J', pin='4', side='left'),\n                      elm.IcPin(name=r'$\\overline{Q}$', pin='14', side='right', anchorname='QBAR'),\n                      elm.IcPin(name='Q', pin='15', side='right')],\n                edgepadW = .5,  # Make it a bit wider\n                pinspacing=1).label('HC7476', 'bottom', fontsize=12)\ndisplay(JK)\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Labels to Schemdraw Elements in Python\nDESCRIPTION: Demonstrates how to add labels to various electrical components using the Schemdraw library. Labels can include Unicode characters and LaTeX math expressions.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor().label('1MΩ')\n    elm.Capacitor().label('1μF')\n    elm.Capacitor().label(r'$v = \\frac{1}{C} \\int i dt$')\n    elm.Resistor().at((0, -2)).label('$R_0$')\n    elm.Capacitor().label('$x^2$')\n```\n\n----------------------------------------\n\nTITLE: Creating SRAM Write Cycle Timing Diagram\nDESCRIPTION: Shows how to create a timing diagram for SRAM write cycle including address, chip select, write enable, and data input signals with timing annotations.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/timing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlogic.TimingDiagram({\n    'signal': [\n        {'name': 'Address',      'wave': 'x4......x.', 'data': ['Valid address']},\n        {'name': 'Chip Select',  'wave': '1.0......1'},\n        {'name': 'Write Enable', 'wave': '1..0...1..'},\n        {'name': 'Data In',      'wave': 'x...5....x', 'data': ['Valid data']},\n    ],\n    'edge': ['[0^:1]+[0^:8] $t_{WC}$',\n             '[2:1]+[2:3] $t_{SA}$',\n             '[3^:4]+[3^:7] $t_{WD}$',\n             '[3^:7]+[3^:9] $t_{HD}$',\n             '[0^:1]-[2:1]{lightgray,:}'],\n}, ygap=.4, grid=False)\n```\n\n----------------------------------------\n\nTITLE: Grouping Elements with ElementDrawing in Schemdraw\nDESCRIPTION: Demonstrates how to create reusable element groups by creating a drawing with show=False, then converting it to an ElementDrawing that can be added multiple times to other drawings.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/customizing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(show=False) as d1:\n    d1 += elm.Resistor()\n    d1.push()\n    d1 += elm.Capacitor().down()\n    d1 += elm.Line().left()\n    d1.pop()\n\nwith schemdraw.Drawing() as d2:  # Add a second drawing\n    for i in range(3):\n        d2 += elm.ElementDrawing(d1)   # Add the first drawing to it 3 times\n```\n\n----------------------------------------\n\nTITLE: Drawing Different Wire Styles with SchimDraw\nDESCRIPTION: This code demonstrates various wire path styles in SchimDraw including straight, L-shaped, C-shaped, N-shaped, and Z-shaped paths. Each wire is drawn with distinct colors and labels to illustrate the different path options.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nelm.Wire('-', arrow='->').at(A.center).to(B.center).color('deeppink').label('\"-\"')\nelm.Wire('|-', arrow='->').at(A.center).to(B.center).color('mediumblue').label('\"|-\"')\nelm.Wire('-|', arrow='->').at(A.center).to(B.center).color('darkseagreen').label('\"-|\"')\nelm.Wire('c', k=-1, arrow='->').at(C.center).to(D.center).color('darkorange').label('\"c\"', halign='left')\nelm.Wire('n', arrow='->').at(C.center).to(D.center).color('orchid').label('\"n\"')\nelm.Wire('N', arrow='->').at(E.center).to(F.center).color('darkred').label('\"N\"', 'start', ofst=(-.1, -.75))\nelm.Wire('z', k=.5, arrow='->').at(E.center).to(F.center).color('teal').label('\"z\"', halign='left', ofst=(0, .5))\n```\n\n----------------------------------------\n\nTITLE: Creating Wheatstone Bridge with Output Terminal\nDESCRIPTION: Creates a Wheatstone bridge circuit with an additional output terminal, allowing connection to the bridge voltage measurement points.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\nelm.Wheatstone(vout=True)\n```\n\n----------------------------------------\n\nTITLE: Extending Schemdraw with Matplotlib Customizations\nDESCRIPTION: Shows how to access the underlying Matplotlib figure and axis from a Schemdraw drawing. This example adds vertical lines to the schematic using direct Matplotlib calls after creating a basic resistor circuit.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/customizing.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.use('matplotlib')\nd = schemdraw.Drawing()\nd.add(elm.Resistor())\nschemfig = d.draw()\nschemfig.ax.axvline(.5, color='purple', ls='--')\nschemfig.ax.axvline(2.5, color='orange', ls='-', lw=3);\ndisplay(schemfig)\n```\n\n----------------------------------------\n\nTITLE: Creating Wheatstone Bridge Elements in Schemdraw\nDESCRIPTION: Illustrates how to create Wheatstone bridge elements with and without output voltage taps using Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/compound.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nWheatstone()\nWheatstone(vout=True)\n```\n\n----------------------------------------\n\nTITLE: Drawing Multi-stage Amplifier Circuit with Schemdraw\nDESCRIPTION: Creates a schematic of a two-stage operational amplifier circuit with specific resistance values and voltage source. Shows cascaded amplifier configuration with interconnections.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/opamp.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    elm.Ground(lead=False)\n    elm.SourceV().label('500mV')\n    elm.Resistor().right().label(r'20k$\\Omega$').dot()\n    O1 = elm.Opamp(leads=True).anchor('in1')\n    elm.Ground().at(O1.in2)\n    elm.Line().up(2).at(O1.in1)\n    elm.Resistor().tox(O1.out).label(r'100k$\\Omega$')\n    elm.Line().toy(O1.out).dot()\n    elm.Line().right(5).at(O1.out)\n    O2 = elm.Opamp(leads=True).anchor('in2')\n    elm.Resistor().left().at(O2.in1).idot().label(r'30k$\\Omega$')\n    elm.Ground()\n    elm.Line().up(1.5).at(O2.in1)\n    elm.Resistor().tox(O2.out).label(r'90k$\\Omega$')\n    elm.Line().toy(O2.out).dot()\n    elm.Line().right(1).at(O2.out).label('$v_{out}$', loc='rgt')\n```\n\n----------------------------------------\n\nTITLE: Configuring Line Arrow Styles in SchimDraw\nDESCRIPTION: This example shows different arrow styles that can be applied to Line elements in SchimDraw. Various arrow configurations are demonstrated including forward arrows, backward arrows, bidirectional arrows, and combinations with endcaps and dots.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Line(arrow='->').label('\"->\\'', 'right')\n    elm.Line(arrow='<-').at((0, -.75)).label('\"<-\"', 'right')\n    elm.Line(arrow='<->').at((0, -1.5)).label('\"<->\"', 'right')\n    elm.Line(arrow='|->').at((0, -2.25)).label('\"|->\\'', 'right')\n    elm.Line(arrow='|-o').at((0, -3.0)).label('\"|-o\"', 'right')\n```\n\n----------------------------------------\n\nTITLE: Drawing 741 Opamp DIP Layout with Schemdraw\nDESCRIPTION: Creates a detailed diagram of a 741 opamp in DIP-8 package using Schemdraw. The code labels all pins of the IC and connects them appropriately to an operational amplifier symbol with proper wire routing.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/ic.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    Q = (elm.IcDIP(pins=8)\n                 .label('Offset Null', loc='p1', fontsize=10)\n                 .label('Inverting Input', loc='p2', fontsize=10)\n                 .label('Non-inverting Input', loc='p3', fontsize=10)\n                 .label('V-', loc='p4', fontsize=10)\n                 .label('Offset Null', loc='p5', fontsize=10)\n                 .label('Output', loc='p6', fontsize=10)\n                 .label('V+', loc='p7', fontsize=10)\n                 .label('NC', loc='p8', fontsize=10))\n    elm.Line().at(Q.p2_in).length(d.unit/5)\n    op = elm.Opamp().anchor('in1').scale(.8)\n    elm.Line().at(Q.p3_in).length(d.unit/5)\n    elm.Wire('c', k=.3).at(op.out).to(Q.p6_in)\n    elm.Wire('-|').at(Q.p4_in).to(op.n1)\n    elm.Wire('-|').at(Q.p7_in).to(op.n2)\n```\n\n----------------------------------------\n\nTITLE: Drawing Resistors with Color Bands in Python using Schemdraw\nDESCRIPTION: This snippet shows how to draw resistors with color bands representing their values using Schemdraw's pictorial elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/pictorial.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    pictorial.Resistor(100)\n    pictorial.Resistor(220)\n    pictorial.Resistor(520)\n    pictorial.Resistor(10000)\n```\n\n----------------------------------------\n\nTITLE: Creating Colored Resistor Circle\nDESCRIPTION: Creates a circular arrangement of resistors with different colors using a loop through color names. Each resistor is rotated and labeled sequentially.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/styles.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    for i, color in enumerate(['red', 'orange', 'yellow', 'yellowgreen', 'green', 'blue', 'indigo', 'violet']):\n        elm.Resistor().theta(45*i+20).color(color).label('R{}'.format(i))\n```\n\n----------------------------------------\n\nTITLE: Drawing Karnaugh Maps with Schemdraw\nDESCRIPTION: Shows how to create Karnaugh maps (K-maps) using Schemdraw's Kmap class. Includes examples of defining input variables, truth tables, and groupings.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/logic.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogic.Kmap(names='ABCD',\n           truthtable=[('1100', '1'),\n                       ('1101', '1'),\n                       ('1111', '1'),\n                       ('1110', '1'),\n                       ('0101', '1'),\n                       ('0111', 'X'),\n                       ('1101', '1'),\n                       ('1111', '1'),\n                       ('0000', '1'),\n                       ('1000', '1')],\n           groups={'11..': {'color': 'red', 'fill': '#ff000033'},\n                   '.1.1': {'color': 'blue', 'fill': '#0000ff33'},\n                   '.000': {'color': 'green', 'fill': '#00ff0033'}})\n```\n\n----------------------------------------\n\nTITLE: Drawing AC Loop Analysis Circuit\nDESCRIPTION: Creates an AC circuit with complex impedances, current and voltage sources. Demonstrates placement of components with specific angles and complex number notation.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/analog.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    I1 = elm.SourceI().label('5∠0° A').dot()\n    d.push()\n    elm.Capacitor().right().label('-j3Ω').dot()\n    elm.Inductor().down().label('j2Ω').dot().hold()\n    elm.Resistor().right().label('5Ω').dot()\n    V1 = elm.SourceV().down().reverse().label('5∠-90° V', loc='bot')\n    elm.Line().tox(I1.start)\n    d.pop()\n    elm.Line().up(d.unit*.8)\n    L1 = elm.Inductor().tox(V1.start).label('j3Ω')\n    elm.Line().down(d.unit*.8)\n    elm.CurrentLabel(top=False, ofst=.3).at(L1).label('$i_g$')\n```\n\n----------------------------------------\n\nTITLE: Creating J-K Flip Flop Timing Diagram\nDESCRIPTION: Creates a timing diagram for a J-K flip flop showing clock, J, K, Q, and Q̄ signals with asynchronous transitions and colored outputs.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/timing.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogic.TimingDiagram({\n    'signal': [\n        {'name': 'clk', 'wave': 'P......'},\n        {'name': 'J', 'wave': '0101', 'async': [0, .8, 1.3, 3.7, 7]},\n        {'name': 'K', 'wave': '010101', 'async': [0, 1.2, 2.3, 2.8, 3.2, 3.7, 7]},\n        {'name': 'Q', 'wave': '010.101', 'color': 'red', 'lw': 1.5},\n        {'name': r'$\\overline{Q}$', 'wave': '101.010', 'color': 'blue', 'lw': 1.5}],\n    'config': {'hscale': 1.5}}, risetime=.05)\n```\n\n----------------------------------------\n\nTITLE: Drawing Hand-Drawn Style Circuit with OpAmp\nDESCRIPTION: Creates a circuit diagram with an operational amplifier using Matplotlib's XKCD mode for a hand-drawn appearance. Includes resistors, ground connection, and voltage labels.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/styles.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nplt.xkcd()\nschemdraw.use('matplotlib')\n\nwith schemdraw.Drawing() as d:\n    op = elm.Opamp(leads=True)\n    elm.Line().down().at(op.in2).length(d.unit/4)\n    elm.Ground(lead=False)\n    Rin = elm.Resistor().at(op.in1).left().idot().label('$R_{in}$', loc='bot').label('$v_{in}$', loc='left')\n    elm.Line().up().at(op.in1).length(d.unit/2)\n    elm.Resistor().tox(op.out).label('$R_f$')\n    elm.Line().toy(op.out).dot()\n    elm.Line().right().at(op.out).length(d.unit/4).label('$v_{o}$', loc='right')\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex State Machine Diagram in Python with Schemdraw\nDESCRIPTION: This code creates a more complex state machine diagram with multiple states and transitions. It demonstrates advanced techniques for positioning and connecting states with various types of arrows and labels.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/flowcharting.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    a = flow.Circle().label('a').fill('lightblue')\n    b = flow.Circle().at((4, 0)).label('b').fill('lightblue')\n    c = flow.Circle().at((8, 0)).label('c').fill('lightblue')\n    f = flow.Circle().at((0, -4)).label('f').fill('lightblue')\n    e = flow.Circle().at((4, -6)).label('e').fill('lightblue')\n    d = flow.Circle().at((8, -4)).label('d').fill('lightblue')\n    elm.ArcLoop(arrow='->').at(a.NW).to(a.NNE).label('00/0', fontsize=10)\n    elm.ArcLoop(arrow='->').at(b.NNW).to(b.NE).label('01/0', fontsize=10)\n    elm.ArcLoop(arrow='->').at(c.NNW).to(c.NE).label('11/0', fontsize=10)\n    elm.ArcLoop(arrow='->').at(d.E).to(d.SE).label('10/0', fontsize=10)\n    elm.ArcLoop(arrow='->').at(e.SSE).to(e.SW).label('11/1', fontsize=10)\n    elm.ArcLoop(arrow='->').at(f.S).to(f.SW).label('01/1', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(a.ENE).to(b.WNW).label('01/0', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(b.W).to(a.E).label('00/0', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(b.ENE).to(c.WNW).label('11/0', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(c.W).to(b.E).label('01/0', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(a.ESE).to(d.NW).label('00/0', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(d.WNW).to(a.SE).label('10/0', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(f.ENE).to(e.NW).label('01/1', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(e.WNW).to(f.ESE).label('11/1', fontsize=10)\n    elm.Arc2(k=.1, arrow='->').at(e.NE).to(d.WSW).label('11/1', fontsize=10)\n    elm.Arc2(k=.1, arrow='->').at(d.SSW).to(e.ENE).label('10/0', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(f.NNW).to(a.SSW).label('00/0', fontsize=10)\n    elm.Arc2(k=.1, arrow='<-').at(c.SSE).to(d.NNE).label('10/0', fontsize=10)\n```\n\n----------------------------------------\n\nTITLE: Drawing Dual-inline Packages (DIPs) in Python using Schemdraw\nDESCRIPTION: This example demonstrates how to draw DIP packages with different pin counts and widths using Schemdraw's pictorial elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/pictorial.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    pictorial.DIP()\n    pictorial.DIP(npins=14).at((2, 0))\n    pictorial.DIP(npins=28, wide=True).at((4, 0))\n```\n\n----------------------------------------\n\nTITLE: Parsing Simple Logic Expression with NOT, AND, and OR Gates in Python\nDESCRIPTION: This example uses logicparse to create a circuit diagram for the expression '(not a) and b or c'. The gateH parameter is set to 0.5 to improve the alignment of gates with only one child.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_parselogic.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nlogicparse('(not a) and b or c', gateH=.5)  # gateH=0.5 makes them line up nicer when there's only one child\n```\n\n----------------------------------------\n\nTITLE: Creating Truth Tables with Schemdraw\nDESCRIPTION: Demonstrates how to create a truth table using Schemdraw's Table class. The table is defined using Markdown-like syntax.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/logic.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntable = '''\n A | B | C\n---|---|---\n 0 | 0 | 0\n 0 | 1 | 0\n 1 | 0 | 0\n 1 | 1 | 1\n'''    \nlogic.Table(table, colfmt='cc||c')\n```\n\n----------------------------------------\n\nTITLE: Drawing Signal Processing Network\nDESCRIPTION: Creates a signal processing diagram with delay, summation, and integration blocks connected by arrows.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/signalproc.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    dsp.Line().length(d.unit/3).label('in')\n    inpt = dsp.Dot()\n    dsp.Arrow().length(d.unit/3)\n    delay = dsp.Box(w=2, h=2).anchor('W').label('Delay\\nT')\n    dsp.Arrow().right(d.unit/2).at(delay.E)\n    sm = dsp.SumSigma()\n    dsp.Arrow().at(sm.E).length(d.unit/2)\n    intg = dsp.Box(w=2, h=2).anchor('W').label(r'$\\int$')\n    dsp.Arrow().right(d.unit/2).at(intg.E).label('out', loc='right')\n    dsp.Line().down(d.unit/2).at(inpt.center)\n    dsp.Line().tox(sm.S)\n    dsp.Arrow().toy(sm.S).label('+', loc='bot')\n```\n\n----------------------------------------\n\nTITLE: Applying Themes in Schemdraw\nDESCRIPTION: Shows how to apply a predefined theme to change the color scheme of all elements. This example applies the 'monokai' theme, which is one of several predefined themes that match Jupyter Themes.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/styles.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.theme('monokai')\nwith schemdraw.Drawing():\n    elm.Resistor().label('100KΩ')\n    elm.Capacitor().down().label('0.1μF', loc='bottom')\n    elm.Line().left()\n    elm.Ground()\n    elm.SourceV().up().label('10V')\n```\n\n----------------------------------------\n\nTITLE: Drawing Pictorial Elements on a Breadboard in Python\nDESCRIPTION: This example demonstrates how to place various pictorial elements on a breadboard using Schemdraw. It includes capacitors, LEDs, transistors, and other components.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/pictorial.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    bb = pictorial.Breadboard().up()\n    pictorial.CapacitorCeramic().at(bb.J1)\n    pictorial.CapacitorMylar().at(bb.J4)\n    pictorial.CapacitorElectrolytic().at(bb.J7)\n    pictorial.TO92().at(bb.J10)\n    pictorial.LED().at(bb.J13)\n    pictorial.LEDOrange().at(bb.J16)\n    pictorial.LEDYellow().at(bb.J19)\n    pictorial.LEDGreen().at(bb.J22)\n    pictorial.LEDBlue().at(bb.J25)\n    pictorial.LEDWhite().at(bb.J28)\n    pictorial.Diode().at(bb.F9).to(bb.F14)\n    pictorial.Resistor().at(bb.F2).to(bb.F7)\n    pictorial.DIP().at(bb.E18).up()\n```\n\n----------------------------------------\n\nTITLE: Creating Loop Current Labels in Schemdraw\nDESCRIPTION: Demonstrates how to add loop current labels to a circuit using existing elements in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    R1 = elm.Resistor()\n    C1 = elm.Capacitor().down()\n    D1 = elm.Diode().fill(True).left()\n    L1 = elm.Inductor().up()\n    elm.LoopCurrent([R1, C1, D1, L1], direction='cw').label('$I_1$')\n```\n\n----------------------------------------\n\nTITLE: Setting European IEC Style for Circuit Elements\nDESCRIPTION: Shows how to switch from the default IEEE (U.S.) style to IEC (European) style for circuit elements using the style method with a predefined style dictionary.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/styles.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nelm.style(elm.STYLE_IEC)\nelm.Resistor()\n```\n\n----------------------------------------\n\nTITLE: Parsing Logic Expressions with Schemdraw\nDESCRIPTION: Shows how to use the logicparse function to create logic diagrams from string expressions. Requires the pyparsing module.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/logic.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw.parsing import logicparse\nlogicparse('not ((w and x) or (y and z))', outlabel=r'$\\overline{Q}$')\n```\n\n----------------------------------------\n\nTITLE: Labeling Voltage Across Terminals in Schemdraw\nDESCRIPTION: Demonstrates how to label voltage across terminals using the Gap element in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Line().dot(open=True)\n    elm.Gap().label(('–','$V_o$','+'))\n    elm.Line().idot(open=True)\n```\n\n----------------------------------------\n\nTITLE: Creating a State Machine Diagram in Python with Schemdraw\nDESCRIPTION: This code creates a state machine diagram with states and transitions. It demonstrates how to create circular states and connect them with arcs and loops.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/flowcharting.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    elm.Arrow().length(1)\n    s1 = flow.StateEnd().anchor('W').label('$S_1$')\n    elm.Arc2(arrow='<-').at(s1.NE).label('0')\n    s2 = flow.State().anchor('NW').label('$S_2$')\n    elm.Arc2(arrow='<-').at(s2.SW).to(s1.SE).label('0')\n    elm.ArcLoop(arrow='<-').at(s2.NE).to(s2.E).label('1')\n    elm.ArcLoop(arrow='<-').at(s1.NW).to(s1.N).label('1')\n```\n\n----------------------------------------\n\nTITLE: Advanced IC Configuration with Custom Styling\nDESCRIPTION: Creates a complex IC with various pin configurations including labels, colors, inversions, and custom positioning.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_intcircuits.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Test various aspects of ic() function\n# including labels, pin labels, colors, fontsizes, invertbubbles, and anchors\nic = elm.Ic(pins=[\n      elm.IcPin(name='>', pin='1', side='left'),\n      elm.IcPin(name='K', pin='2', side='left', lblsize=10, color='red'),\n      elm.IcPin(name='J', pin='3', side='left', invert=True),\n      elm.IcPin(name='Q', pin='12', side='right'),\n      elm.IcPin(name=r'$\\overline{Q}$', pin='14', side='right', invert=True, anchorname='QBAR'),\n      elm.IcPin(name='RST', pin='16', side='top', slot='2/3', rotation=65, invert=True, color='blue'),\n      elm.IcPin(name='CLR', pin='17', side='top', slot='1/3', rotation=65, invert=True),\n      elm.IcPin(name='ABC', pin='13', side='top', slot='3/3', rotation=65, invert=False),\n      elm.IcPin(side='bot', pos=.6),\n      elm.IcPin(side='bot', pos=.4)],\n      edgepadH = 1,\n      edgepadW = 1,\n      leadlen=.4,\n      slant=0,\n      pinspacing=1\n      )\n\nwith schemdraw.Drawing() as d:\n    I = d.add(ic)\n    elm.Line().right().at(I.QBAR)\n    elm.Crystal().down().toy(I.Q)\n    elm.Line().left().tox(I.Q)\n```\n\n----------------------------------------\n\nTITLE: Defining a Resistor Element in Schemdraw\nDESCRIPTION: Shows the implementation of a Resistor element by subclassing Element2Term and adding a zigzag path segment. Demonstrates how coordinates are defined in element coordinates with the element starting at (0, 0).\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/customizing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Resistor(Element2Term):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.segments.append(Segment([(0, 0),\n                                      (0.5*reswidth, resheight),\n                                      (1.5*reswidth, -resheight),\n                                      (2.5*reswidth, resheight),\n                                      (3.5*reswidth, -resheight),\n                                      (4.5*reswidth, resheight),\n                                      (5.5*reswidth, -resheight),\n                                      (6*reswidth, 0)]))\n```\n\n----------------------------------------\n\nTITLE: Placing LoopCurrent within Defined Elements using SchemDraw in Python\nDESCRIPTION: This code snippet demonstrates how to create a circuit diagram using SchemDraw and place a LoopCurrent within four defined elements (Resistor, Capacitor, Diode, and Inductor). The LoopCurrent is set to counterclockwise direction.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# LoopCurrent to place within 4 defined elements\nwith schemdraw.Drawing():\n    R = elm.Resistor()\n    C = elm.Capacitor().down()\n    D = elm.Diode().left()\n    L = elm.Inductor().up()\n    elm.LoopCurrent([R, C, D, L], direction='ccw')\n```\n\n----------------------------------------\n\nTITLE: Using ArcLoop for Self-Referencing States in Schemdraw\nDESCRIPTION: This example demonstrates the use of the ArcLoop element to create a partial circle connector that starts and ends at the same state, often used in state machine diagrams.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/flow.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(fontsize=12, unit=1):\n    a = flow.State().label('A')\n    flow.ArcLoop(arrow='<-').at(a.NW).to(a.NNE).color('mediumblue').label('ArcLoop', halign='center')\n```\n\n----------------------------------------\n\nTITLE: Setting U.S. IEEE Style for Circuit Elements\nDESCRIPTION: Demonstrates switching back to the IEEE (U.S.) style for circuit elements, which is useful when needing to ensure elements follow the American convention.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/styles.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nelm.style(elm.STYLE_IEEE)\nelm.Resistor()\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Flowchart in Python with Schemdraw\nDESCRIPTION: This code creates a more complex flowchart with multiple decision nodes, boxes, and connections. It demonstrates advanced flowchart creation techniques and element positioning.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/flowcharting.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=11)\n    b = flow.Start().label('START')\n    flow.Arrow().down(d.unit/2)\n    d1 = flow.Decision(w=5, h=3.9, E='YES', S='NO').label('DO YOU\\nUNDERSTAND\\nFLOW CHARTS?')\n    flow.Arrow().length(d.unit/2)\n    d2 = flow.Decision(w=5, h=3.9, E='YES', S='NO').label('OKAY,\\nYOU SEE THE\\nLINE LABELED\\n\"YES\"?')\n    flow.Arrow().length(d.unit/2)\n    d3 = flow.Decision(w=5.2, h=3.9, E='YES', S='NO').label('BUT YOU\\nSEE THE ONES\\nLABELED \"NO\".')\n\n    flow.Arrow().right(d.unit/2).at(d3.E)\n    flow.Box(w=2, h=1.25).anchor('W').label('WAIT,\\nWHAT?')\n    flow.Arrow().down(d.unit/2).at(d3.S)\n    listen = flow.Box(w=2, h=1).label('LISTEN.')\n    flow.Arrow().right(d.unit/2).at(listen.E)\n    hate = flow.Box(w=2, h=1.25).anchor('W').label('I HATE\\nYOU.')\n\n    flow.Arrow().right(d.unit*3.5).at(d1.E)\n    good = flow.Box(w=2, h=1).anchor('W').label('GOOD')\n    flow.Arrow().right(d.unit*1.5).at(d2.E)\n    d4 = flow.Decision(w=5.3, h=4.0, E='YES', S='NO').anchor('W').label('...AND YOU CAN\\nSEE THE ONES\\nLABELED \"NO\"?')\n\n    flow.Wire('-|', arrow='->').at(d4.E).to(good.S)\n    flow.Arrow().down(d.unit/2).at(d4.S)\n    d5 = flow.Decision(w=5, h=3.6, E='YES', S='NO').label('BUT YOU\\nJUST FOLLOWED\\nTHEM TWICE!')\n    flow.Arrow().right().at(d5.E)\n    question = flow.Box(w=3.5, h=1.75).anchor('W').label(\"(THAT WASN'T\\nA QUESTION.)\")\n    flow.Wire('n', k=-1, arrow='->').at(d5.S).to(question.S)\n\n    flow.Line().at(good.E).tox(question.S)\n    flow.Arrow().down()\n    drink = flow.Box(w=2.5, h=1.5).label(\"LET'S GO\\nDRINK.\")\n    flow.Arrow().right().at(drink.E).label('6 DRINKS')\n    flow.Box(w=3.7, h=2).anchor('W').label('HEY, I SHOULD\\nTRY INSTALLING\\nFREEBSD!')\n    flow.Arrow().up(d.unit*.75).at(question.N)\n    screw = flow.Box(w=2.5, h=1).anchor('S').label('SCREW IT.')\n    flow.Arrow().at(screw.N).toy(drink.S)\n```\n\n----------------------------------------\n\nTITLE: Using ArcN and ArcZ for Symmetric Cubic Bezier Curves in Schemdraw\nDESCRIPTION: This example demonstrates the use of ArcN and ArcZ elements to create symmetric cubic Bezier curves between flowchart states, with vertical and horizontal endpoint approaches respectively.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/flow.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(fontsize=12, unit=1):\n    a = flow.State().label('A')\n    b = flow.State().label('B').at((4, 4))\n    c = flow.State().label('C').at((8, 0))\n    flow.ArcN(arrow='<->').at(a.N).to(b.S).color('deeppink').label('ArcN')\n    flow.ArcZ(arrow='<->').at(b.E).to(c.W).color('mediumblue').label('ArcZ')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom FluxCapacitor Element in Schemdraw\nDESCRIPTION: Demonstrates creating a custom element by defining a FluxCapacitor class that inherits from Element. The implementation includes adding segments for paths and circles, and defining anchor points for connections.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/customizing.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass FluxCapacitor(elm.Element):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        radius = 0.075\n        fclen = 0.5\n        self.segments.append(SegmentCircle((0, 0), radius))\n        self.segments.append(Segment([(0, 0), (0, -fclen*1.41)]))\n        self.segments.append(Segment([(0, 0), (fclen, fclen)]))\n        self.segments.append(Segment([(0, 0), (-fclen, fclen)]))\n        self.segments.append(SegmentCircle((0, -fclen*1.41), 0.2, fill=None))\n        self.segments.append(SegmentCircle((fclen, fclen), 0.2, fill=None))\n        self.segments.append(SegmentCircle((-fclen, fclen), 0.2, fill=None))\n        self.anchors['p1'] = (-fclen, fclen)\n```\n\n----------------------------------------\n\nTITLE: Getting image data for GUI/web applications\nDESCRIPTION: Example showing how to obtain raw image data as bytes from a drawing for integration with GUI or web applications.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as drawing:\n    ...\nimage_bytes = drawing.get_imagedata('svg')\n```\n\n----------------------------------------\n\nTITLE: Styling Individual Elements in Schemdraw\nDESCRIPTION: Demonstrates applying different styling methods to individual elements, including color, fill, linestyle, and linewidth. Shows how these properties can override drawing-level defaults.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/styles.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# All elements are blue with lightgray fill unless specified otherwise    \nwith schemdraw.Drawing(color='blue', fill='lightgray'):\n    elm.Diode()\n    elm.Diode().fill('red')        # Fill overrides drawing color here\n    elm.Resistor().fill('purple')  # Fill has no effect on non-closed elements\n    elm.RBox().linestyle('--').color('orange')\n    elm.Resistor().linewidth(5)\n```\n\n----------------------------------------\n\nTITLE: Creating Triaxial Cable with Anchor Point Visualization\nDESCRIPTION: Creates a drawing with three triaxial cable variants (default and two custom configurations) with colored dots showing all available anchor points for connecting to the inner conductor, guard, and outer shield.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    T = elm.Triax()  # Default triax\n    elm.Dot().at(T.shieldstart).color('red')\n    elm.Dot().at(T.shieldend).color('green')\n    elm.Dot().at(T.shieldstart_top).color('blue')\n    elm.Dot().at(T.shieldend_top).color('orange')\n    elm.Dot().at(T.shieldcenter).color('yellow')\n    elm.Dot().at(T.shieldcenter_top).color('cyan')\n    elm.Dot().at(T.guardstart).color('magenta')\n    elm.Dot().at(T.guardend).color('maroon')\n    elm.Dot().at(T.guardstart_top).color('pink')\n    elm.Dot().at(T.guardend_top).color('gray')\n\n    # Custom triax - end is covered up\n    T2 = elm.Triax(length=5, radiusinner=1, radiusouter=1.5, \n                   shieldofststart=.5, shieldofstend=.5).at(T.end)\n    elm.Dot().at(T2.shieldstart).color('red')\n    elm.Dot().at(T2.shieldend).color('green')\n    elm.Dot().at(T2.shieldstart_top).color('blue')\n    elm.Dot().at(T2.shieldend_top).color('orange')\n    elm.Dot().at(T2.shieldcenter).color('yellow')\n    elm.Dot().at(T2.shieldcenter_top).color('cyan')\n    elm.Dot().at(T2.guardstart).color('magenta')\n    elm.Dot().at(T2.guardend).color('maroon')\n    elm.Dot().at(T2.guardstart_top).color('pink')\n    elm.Dot().at(T2.guardend_top).color('gray')\n\n    # Custom triax - end is shown\n    T3 = elm.Triax(length=5, radiusinner=.5, radiusouter=.7, \n                   shieldofststart=.5, shieldofstend=.5).at(T2.end)\n    elm.Dot().at(T3.shieldstart).color('red')\n    elm.Dot().at(T3.shieldend).color('green')\n    elm.Dot().at(T3.shieldstart_top).color('blue')\n    elm.Dot().at(T3.shieldend_top).color('orange')\n    elm.Dot().at(T3.shieldcenter).color('yellow')\n    elm.Dot().at(T3.shieldcenter_top).color('cyan')\n    elm.Dot().at(T3.guardstart).color('magenta')\n    elm.Dot().at(T3.guardend).color('maroon')\n    elm.Dot().at(T3.guardstart_top).color('pink')\n    elm.Dot().at(T3.guardend_top).color('gray')\n```\n\n----------------------------------------\n\nTITLE: Aligning Elements with Anchor Method in Schemdraw\nDESCRIPTION: Shows how to align elements using the anchor method, which specifies which part of the new element should connect to the current drawing position.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor().label('R1')\n    elm.Opamp().anchor('in1')  # Place the `in1` anchor at the current drawing position\n```\n\n----------------------------------------\n\nTITLE: Creating a Logical Flow Diagram in Python with Schemdraw\nDESCRIPTION: This code creates a logical flow diagram with decision nodes and circular endpoints. It demonstrates how to create and connect different types of flowchart elements to represent logical operations.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/flowcharting.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(unit=1) as dwg:\n    a = flow.Circle(r=.5).label('a')\n    x = flow.Decision(w=1.5, h=1.5).label('$X$').at(a.S).anchor('N')\n    elm.RightLines(arrow='->').at(x.E).label(r'$\\overline{X}$')\n    y1 = flow.Decision(w=1.5, h=1.5).label('$Y$')\n    dwg.move_from(y1.N, dx=-5)\n    y2 = flow.Decision(w=1.5, h=1.5).label('$Y$')\n    elm.RightLines(arrow='->').at(x.W).to(y2.N).label('$X$')\n    elm.Arrow().at(y2.S).label('$Y$')\n    b = flow.Circle(r=.5).label('b')\n    dwg.move_from(b.N, dx=2)\n    c = flow.Circle(r=.5).label('c')\n    elm.RightLines(arrow='->').at(y2.E).to(c.N).label(r'$\\overline{Y}$')\n    elm.Arrow().at(y1.S).label('$Y$')\n    d = flow.Circle(r=.5).label('d')\n    dwg.move_from(d.N, dx=2)\n    e = flow.Circle(r=.5).label('e')\n    elm.RightLines(arrow='->').at(y1.E).to(e.N).label(r'$\\overline{Y}$')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Dot Element with Parameters in Schemdraw\nDESCRIPTION: Illustrates how to create an element with configurable parameters and defaults. The Dot element allows customization of radius and appearance (open or filled), demonstrating how to handle element parameters.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/customizing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Dot(Element):\n    ''' Connection Dot\n\n        Keyword Args:\n            radius: Radius of dot [default: 0.075]\n            open: Draw as an open circle [default: False]\n    '''\n    _element_defaults = {\n        'radius': 0.075,\n        'open': False}\n    def __init__(self,\n                radius: Optional[float] = None,\n                open: Optional[bool] = None,\n                **kwargs):\n        super().__init__(**kwargs)\n        fill = 'bg' if self.params['open'] else True\n        self.elmparams['fill'] = fill\n        self.segments.append(SegmentCircle((0, 0), self.params['radius']))\n        self.anchors['center'] = (0, 0)\n```\n\n----------------------------------------\n\nTITLE: Parsing Extended Logic Expression with XOR, AND, and OR Gates in Python\nDESCRIPTION: This example shows how to parse a complex expression involving XOR, AND, and OR gates, demonstrating Schemdraw's ability to handle intricate logic circuits.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_parselogic.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlogicparse('((a xor b) and (b or c) and (d or e)) or ((w and x) or (y and z))')\n```\n\n----------------------------------------\n\nTITLE: Adding Standalone Loop Arrows in Schemdraw\nDESCRIPTION: Shows how to add standalone loop current arrows of any size anywhere in the schematic using Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    a = elm.Line().dot()\n    elm.LoopArrow(width=.75, height=.75).at(a.end)\n```\n\n----------------------------------------\n\nTITLE: Creating Relay Elements with Various Switch Configurations\nDESCRIPTION: Shows how to create Relay elements with different switch configurations (SPST, SPDT, DPST, DPDT) using Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/compound.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRelay()\nRelay(switch='spdt')\nRelay(swithc='dpst')\nRelay(switch='dpdt')\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Relay Component\nDESCRIPTION: Creates a basic relay component using the default settings. This includes a coil, core, and switch mechanism in a box enclosure.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Compound Elements\nelm.Relay()\n```\n\n----------------------------------------\n\nTITLE: Adding Inline Current Labels in Schemdraw\nDESCRIPTION: Shows how to add inline current labels as arrowheads on the leads of 2-terminal elements in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    R1 = elm.Resistor()\n    elm.CurrentLabelInline(direction='in').at(R1).label('10 mA')\n```\n\n----------------------------------------\n\nTITLE: Creating a Door Controller State Diagram in Python with Schemdraw\nDESCRIPTION: This code creates a state diagram for a door controller. It demonstrates how to create circular states and connect them with labeled arcs to represent state transitions.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/flowcharting.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(fontsize=12)\n    delta = 4\n    c4 = flow.Circle(r=1).label('4\\nopening')\n    c1 = flow.Circle(r=1).at((delta, delta)).label('1\\nopened')\n    c2 = flow.Circle(r=1).at((2*delta, 0)).label('2\\nclosing')\n    c3 = flow.Circle(r=1).at((delta, -delta)).label('3\\nclosed')\n    elm.Arc2(arrow='->', k=.3).at(c4.NNE).to(c1.WSW).label('sensor\\nopened')\n    elm.Arc2(arrow='->', k=.3).at(c1.ESE).to(c2.NNW).label('close')\n    elm.Arc2(arrow='->', k=.3).at(c2.SSW).to(c3.ENE).label('sensor\\nclosed')\n    elm.Arc2(arrow='->', k=.3).at(c3.WNW).to(c4.SSE).label('open')\n    elm.Arc2(arrow='<-', k=.3).at(c4.ENE).to(c2.WNW).label('open')\n    elm.Arc2(arrow='<-', k=.3).at(c2.WSW).to(c4.ESE).label('close')\n```\n\n----------------------------------------\n\nTITLE: Creating Rectifier Elements in Schemdraw\nDESCRIPTION: Shows how to create a Rectifier element, which draws four diodes at 45 degree angles, using Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/compound.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nRectifier()\n```\n\n----------------------------------------\n\nTITLE: Adding Impedance Labels in Schemdraw\nDESCRIPTION: Demonstrates how to add right-angle arrow labels for indicating impedance looking into a node in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    R = elm.RBox().right()\n    elm.ZLabel().at(R).label('$Z_{in}$')\n```\n\n----------------------------------------\n\nTITLE: Drawing Right Lines Connector in Python with Schemdraw\nDESCRIPTION: Demonstrates connecting IC pins to a header using RightLines element for perpendicular connections.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/connectors.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='t', slot='1/4'),\n                      elm.IcPin(name='B', side='t', slot='2/4'),\n                      elm.IcPin(name='C', side='t', slot='3/4'),\n                      elm.IcPin(name='D', side='t', slot='4/4')])\n    D2 = elm.Header(rows=4).at((5,4))\n    elm.RightLines(n=4).at(D2.pin1).to(D1.D).label('RightLines')\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Logic Expression with NOT, AND, and OR Gates in Python\nDESCRIPTION: This snippet demonstrates parsing a more complex logic expression 'not ((w and x) or (y and z))' and adds an output label using LaTeX notation.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_parselogic.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nlogicparse('not ((w and x) or (y and z))', outlabel=r'$\\overline{Q}$')\n```\n\n----------------------------------------\n\nTITLE: Setting Element Rotation Angle in Schemdraw\nDESCRIPTION: Demonstrates using the theta method to set a specific rotation angle in degrees for elements, showing how subsequent elements inherit the direction.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor().theta(20).label('R1')\n    elm.Resistor().label('R2')  # Takes position and direction from R1\n```\n\n----------------------------------------\n\nTITLE: Using Containers for Grouping Elements in Schemdraw Flowcharts\nDESCRIPTION: This example demonstrates how to use the container method to group and enclose multiple flowchart elements within a box, creating a subprocess or grouped section in the diagram.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/flow.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(unit=1) as d:\n    flow.Start().label('Start')\n    flow.Arrow().down().length(1.5)\n    with d.container() as c:\n        flow.Box().label('Step 1').drop('E')\n        flow.Arrow().right()\n        flow.Box().label('Step 2')\n        c.color('red')\n        c.label('Subprocess', loc='N', halign='center', valign='top')\n    flow.Arrow().right()\n    flow.Start().label('End').anchor('W')\n```\n\n----------------------------------------\n\nTITLE: Drawing Bus Connections in Python with Schemdraw\nDESCRIPTION: Illustrates how to create data bus connections between headers using BusConnect and BusLine elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/connectors.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    J = elm.Header(rows=6)\n    B = elm.BusConnect(n=6).at(J.pin1)\n    elm.BusLine().down().at(B.end).length(3)\n    B2 = elm.BusConnect(n=6).anchor('start').reverse()\n    elm.Header(rows=6).at(B2.pin1).anchor('pin1')\n```\n\n----------------------------------------\n\nTITLE: Labeling Transistor Terminals in Schemdraw\nDESCRIPTION: Demonstrates how to label specific terminals of a transistor using anchor names in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    (elm.BjtNpn()\n        .label('b', loc='base')\n        .label('c', loc='collector')\n        .label('e', loc='emitter'))\n```\n\n----------------------------------------\n\nTITLE: Using Endpoints Method for Specific Connections in Schemdraw\nDESCRIPTION: Shows how to specify both start and end points of a two-terminal element using the endpoints method.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    R = elm.Resistor()\n    Q = elm.Diode().down(6)\n    elm.Line().tox(R.start)\n    elm.Capacitor().toy(R.start)\n    elm.SourceV().endpoints(Q.end, R.start)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multiplexer in Schemdraw\nDESCRIPTION: Shows how to create a multiplexer using the Multiplexer class with custom pin configuration. The example defines select pins (A, B, C), output pin (Q), and an inverted pin (T) at the bottom.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/intcircuits.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nelm.Multiplexer(\n    pins=[elm.IcPin(name='C', side='L'),\n          elm.IcPin(name='B', side='L'),\n          elm.IcPin(name='A', side='L'),\n          elm.IcPin(name='Q', side='R'),\n          elm.IcPin(name='T', side='B', invert=True)],\n    edgepadH=-.5)\n```\n\n----------------------------------------\n\nTITLE: Using Arduino Uno Element in Schemdraw Circuit Diagram\nDESCRIPTION: This code demonstrates how to use the ArduinoUno element in a Schemdraw circuit diagram. It creates a simple circuit with a resistor and LED connected to the Arduino.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/images.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(color='#dd2222', unit=2)\n    arduino = ArduinoUno()\n    elm.Dot().at(arduino.gnd)\n    elm.Resistor().up().scale(.7)\n    elm.Line().right().tox(arduino.pin8)\n    elm.LED().down().reverse().toy(arduino.pin8).scale(.7)\n    elm.Dot().at(arduino.pin8)\n```\n\n----------------------------------------\n\nTITLE: Setting Unit Size in Schemdraw\nDESCRIPTION: Shows how to configure the drawing unit size which affects the default dimensions of elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    d.config(unit=2)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Arbitrary Cubic Bezier Curves with Arc3 in Schemdraw\nDESCRIPTION: This snippet shows how to use the Arc3 element to create an arbitrary cubic Bezier curve between flowchart states, specifying the angles of approach at each endpoint.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/flow.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(fontsize=12, unit=1):\n    a = flow.State().label('A')\n    b = flow.State().label('B').at((3, 3))\n    flow.Arc3(th1=75, th2=-45, arrow='<->').at(a.N).to(b.SE).color('deeppink').label('Arc3')\n```\n\n----------------------------------------\n\nTITLE: Creating Decision Elements with Labeled Branches in Schemdraw\nDESCRIPTION: This snippet shows how to create a decision element in a flowchart with labeled branches for different outcomes using the Decision class from Schemdraw's flow module.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/flow.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndecision = flow.Decision(W='Yes', E='No', S='Maybe').label('Question?')\n```\n\n----------------------------------------\n\nTITLE: Creating a Mixer with labeled ports\nDESCRIPTION: Creates a DSP Mixer element with labeled ports at each cardinal direction (North, South, West, East).\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_dsp.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndsp.Mixer(N='a', S='b', W='c', E='d')\n```\n\n----------------------------------------\n\nTITLE: Parsing Complex Logic Expression with XOR and XNOR Gates in Python\nDESCRIPTION: This snippet shows parsing of a complex expression involving XOR and XNOR gates, demonstrating Schemdraw's capability to handle exclusive logic operations in circuit diagrams.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_parselogic.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlogicparse('((a xor b) xnor (c xor d)) and ((x xor y) or (z xor f))')\n```\n\n----------------------------------------\n\nTITLE: Creating Optocoupler Elements in Schemdraw\nDESCRIPTION: Demonstrates how to create Optocoupler elements with and without a base contact using Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/compound.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nOptocoupler()\nOptocoupler(base=True)\n```\n\n----------------------------------------\n\nTITLE: Adding Current Labels to Elements in Schemdraw\nDESCRIPTION: Shows how to add current labels with arrows to electrical components using the CurrentLabel element in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    R1 = elm.Resistor()\n    elm.CurrentLabel().at(R1).label('10 mA')\n```\n\n----------------------------------------\n\nTITLE: Using Drop Method to Control Cursor Position in Schemdraw\nDESCRIPTION: Shows how to use the drop method to specify which anchor of an element should be used as the next drawing position after placing the element.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    bjt1 = elm.BjtNpn()\n    elm.Resistor().label('R1')  # Default cursor placement after placing BJT\n\n    d.move_from(bjt1.base, dx=5)\n    bjt2 = elm.BjtNpn().drop('emitter')  # Leave the cursor on the emitter after placing BJT\n    elm.Resistor().label('R2')\n```\n\n----------------------------------------\n\nTITLE: Creating Curved Connectors with Arc2 in Schemdraw\nDESCRIPTION: This snippet shows how to use the Arc2 element to create curved connectors between states in a flowchart. It demonstrates different curvature and arrow options.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/flow.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(fontsize=12, unit=1):\n    a = flow.State().label('A')\n    b = flow.State(arrow='->').label('B').at((4, 0))\n    flow.Arc2(arrow='->').at(a.NE).to(b.NW).color('deeppink').label('Arc2')\n    flow.Arc2(k=.2, arrow='<->').at(b.SW).to(a.SE).color('mediumblue').label('Arc2')\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Elements with Labels in Schemdraw\nDESCRIPTION: Demonstrates how to create a custom integrator element by using the Square element with a mathematical label.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/dsp.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndsp.Square().label(r'$\\int$')\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Element Properties in Schemdraw\nDESCRIPTION: Demonstrates how to set default properties for a specific element type by modifying its defaults dictionary. In this example, all Diode elements and their subclasses are configured to be filled.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/styles.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nelm.Diode.defaults['fill'] = True\nwith schemdraw.Drawing():\n    elm.Diode()\n    elm.Diode()\n    elm.DiodeTunnel()\n```\n\n----------------------------------------\n\nTITLE: Parsing Logic Expression with Output Label in Python\nDESCRIPTION: This example demonstrates adding a custom output label 'X' to the parsed logic circuit, useful for identifying the output of the logical operation.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_parselogic.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlogicparse('(not a) or (b and c)', outlabel='X')\n```\n\n----------------------------------------\n\nTITLE: Drawing DSP elements with default styling\nDESCRIPTION: Renders the defined list of DSP elements using the default styling and displays the result.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_dsp.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndisplay(drawElements(elist, d='right'))\n```\n\n----------------------------------------\n\nTITLE: Adding Current Labels to Transistors in Schemdraw\nDESCRIPTION: Demonstrates how to add current labels to transistors, following sensible bias currents by default in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    Q1 = elm.AnalogNFet()\n    elm.CurrentLabel().at(Q1).label('10 µA')\n\n    Q2 = elm.AnalogNFet().at([4,0]).flip().reverse()\n    elm.CurrentLabel().at(Q2).label('10 µA')\n```\n\n----------------------------------------\n\nTITLE: Creating Voltage Labels in Schemdraw\nDESCRIPTION: Shows how to create voltage labels with positive and negative signs for electrical components in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nelm.Resistor().label(('–','$V_1$','+'))  # Note: using endash U+2013 character\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Flow Module in Python\nDESCRIPTION: This snippet shows how to import the flow module from Schemdraw, which contains functions for defining flowchart blocks and connecting lines.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/flow.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw import flow\n```\n\n----------------------------------------\n\nTITLE: Customizing Label Appearance in Schemdraw\nDESCRIPTION: Shows various ways to customize label appearance, including offset, rotation, and positioning in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor().label('no offset')\n    elm.Resistor().label('offset', ofst=1)\n    elm.Resistor().label('offset (x, y)', ofst=(-.6, .2))\n    elm.Resistor().theta(-45).label('no rotate')\n    elm.Resistor().theta(-45).label('rotate', rotate=True)\n    elm.Resistor().theta(45).label('90°', rotate=90)\n```\n\n----------------------------------------\n\nTITLE: Parsing Logic Expression Using Logic Symbols in Python\nDESCRIPTION: This snippet illustrates the use of logic symbols (¬, ∨, &, ⊻) instead of words in the logic expression, showing Schemdraw's support for symbolic notation.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_parselogic.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlogicparse('¬ (a ∨ b) & (c ⊻ d)')  # Using logic symbols\n```\n\n----------------------------------------\n\nTITLE: Connecting IC with Flipped Header using OrthoLines\nDESCRIPTION: Creates a drawing with an IC that has six pins on the right side, connected to a flipped header using OrthoLines. This example demonstrates anchoring with the bottom pin of the header.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='r', slot='1/6'),\n                      elm.IcPin(name='B', side='r', slot='2/6'),\n                      elm.IcPin(name='C', side='r', slot='3/6'),\n                      elm.IcPin(name='D', side='r', slot='4/6'),\n                      elm.IcPin(name='E', side='r', slot='5/6'),\n                      elm.IcPin(name='F', side='r', slot='6/6')])\n    D2 = elm.Header(rows=6).at((4, D1.F[1])).flip().anchor('pin6')\n    elm.OrthoLines(n=6).at(D2.pin6).to(D1.F)\n```\n\n----------------------------------------\n\nTITLE: Creating Annotations and Enclosures in Schemdraw\nDESCRIPTION: Shows how to create text and arrow annotations, and enclosures for grouping elements in Schemdraw schematics.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nparallel = elm.Encircle([R1, R2], padx=.8).linestyle('--').linewidth(1).color('red')\nseries = elm.Encircle([R3, R4], padx=.8).linestyle('--').linewidth(1).color('blue')\n\nelm.Annotate().at(parallel.NNE).delta(dx=1, dy=1).label('Parallel').color('red')\nelm.Annotate(th1=0).at(series.ENE).delta(dx=1.5, dy=1).label('Series').color('blue')\n```\n\n----------------------------------------\n\nTITLE: Basic circuit drawing with context manager\nDESCRIPTION: Simple example showing how to create a drawing using a context manager and add basic circuit elements without explicit placement.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor()\n    elm.Capacitor()\n    elm.Diode()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Arduino Element in Python using Schemdraw\nDESCRIPTION: This snippet defines a custom Arduino Uno element by subclassing ElementImage and setting up anchor points for pins. It then demonstrates how to use this element in a drawing with a breadboard and other components.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/pictorial.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ArduinoUno(elm.ElementImage):\n    ''' Arduino Element '''\n    def __init__(self):\n        width = 10.3  # Set the width to scale properly for 0.1 inch pin spacing on headers\n        height = width/1.397  # Based on image dimensions\n        super().__init__('ArduinoUNO.png', width=width, height=height, xy=(-.75, 0))\n\n        # Define all the anchors\n        top = height * .956\n        arefx = 3.4\n        pinspace = pictorial.PINSPACING\n        for i, pinname in enumerate(['aref', 'gnd_top', 'pin13', 'pin12', 'pin11',\n                                    'pin10', 'pin9', 'pin8']):\n            self.anchors[pinname] = (arefx + i*pinspace, top)\n\n        bot = .11*pictorial.INCH\n        botx = 1.23*pictorial.INCH\n        for i, pinname in enumerate(['ioref', 'reset', 'threev3',\n                                    'fivev', 'gnd1', 'gnd2', 'vin']):\n            self.anchors[pinname] = (botx + i*pinspace, bot)\n\n        botx += i*pinspace + pictorial.PINSPACING*2\n        for i, pinname in enumerate(['A0', 'A1', 'A2', 'A3', 'A4', 'A5']):\n            self.anchors[pinname] = (botx + i*pinspace, bot)\n\n\nwith schemdraw.Drawing():\n    ard = ArduinoUno()\n    bb = pictorial.Breadboard().at((0, 9)).up()\n    elm.Wire('n', k=-1).at(ard.gnd2).to(bb.L2_29).linewidth(4)\n    elm.Wire().at(ard.pin12).to(bb.A14).color('red').linewidth(4)\n    pictorial.LED().at(bb.E14)\n    pictorial.Resistor(330).at(bb.D15).to(bb.L2_15)\n```\n\n----------------------------------------\n\nTITLE: Connecting Components to Relay Anchor Points\nDESCRIPTION: Creates a drawing with a rotated relay and connects a resistor to its input. Also demonstrates accessing the relay's switch terminals by adding colored dots at points 'a' and 'b'.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    R = elm.Relay().theta(30)\n    elm.Resistor().up().at(R.in1)\n    elm.Dot().at(R.a).color('red')\n    elm.Dot().at(R.b).color('blue')\n```\n\n----------------------------------------\n\nTITLE: Creating a scaled Mixer with larger font\nDESCRIPTION: Creates a DSP Mixer element with labeled ports, larger font size, and twice the normal scale.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_dsp.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndsp.Mixer(N='a', S='b', W='c', E='d', fontsize=15).scale(2)\n```\n\n----------------------------------------\n\nTITLE: Placing LoopArrows at Various Positions using SchemDraw in Python\nDESCRIPTION: This code snippet shows how to create a circuit diagram with a Potentiometer and place LoopArrows at different positions. It demonstrates customizing arrow colors, directions, and sizes.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\n# LoopArrow to place anywhere\nwith schemdraw.Drawing():\n    R = elm.Potentiometer()\n    elm.LoopArrow().at(R.start).color('red')\n    elm.LoopArrow(direction='ccw').at(R.end).color('blue')\n    elm.LoopArrow(width=2, height=1).at(R.tap).color('orange')\n```\n\n----------------------------------------\n\nTITLE: Creating Coaxial Cable with Anchor Point Visualization\nDESCRIPTION: Creates a drawing showing default and custom coaxial cables with colored dots highlighting all the available anchor points for connecting to the cable shield and center conductor.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    C = elm.Coax()  # Default coax\n    elm.Dot().at(C.shieldstart).color('red')\n    elm.Dot().at(C.shieldend).color('green')\n    elm.Dot().at(C.shieldstart_top).color('blue')\n    elm.Dot().at(C.shieldend_top).color('orange')\n    elm.Dot().at(C.shieldcenter).color('yellow')\n    elm.Dot().at(C.shieldcenter_top).color('cyan')\n\n    C2 = elm.Coax(length=5, radius=1).at(C.end)  # Custom coax\n    elm.Dot().at(C2.shieldstart).color('red')\n    elm.Dot().at(C2.shieldend).color('green')\n    elm.Dot().at(C2.shieldstart_top).color('blue')\n    elm.Dot().at(C2.shieldend_top).color('orange')\n    elm.Dot().at(C2.shieldcenter).color('yellow')\n    elm.Dot().at(C2.shieldcenter_top).color('cyan')\n```\n\n----------------------------------------\n\nTITLE: Creating Headers with Different Numbering Styles\nDESCRIPTION: Creates multiple headers with different pin numbering directions (left-right, up-down, counter-clockwise) and displays pin numbers. Also demonstrates adding a jumper to a pin with a light gray fill.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Header(numbering='lr', shownumber=True, rows=6, cols=2)\n    elm.Header(numbering='ud', shownumber=True, rows=6, cols=2).at((3, 0))\n    J = elm.Header(numbering='ccw', shownumber=True, rows=6, cols=2).at((6, 0))\n    elm.Jumper().at(J.pin2).fill('lightgray')\n```\n\n----------------------------------------\n\nTITLE: Creating Wheatstone Bridge with Labeled Resistors\nDESCRIPTION: Creates a Wheatstone bridge circuit with labeled resistors (R1 through R4). This compound element combines multiple resistors in a specific configuration for bridge measurements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nelm.Wheatstone(labels=['R1', 'R2', 'R3', 'R4'])\n```\n\n----------------------------------------\n\nTITLE: Defining Arduino Uno Element Using ElementImage in Python\nDESCRIPTION: This code snippet defines an ArduinoUno class that inherits from ElementImage. It sets up the image file, dimensions, and pin anchors for an Arduino Uno board.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/images.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ArduinoUno(elm.ElementImage):\n    ''' Arduino Element '''\n    def __init__(self):\n        # Dimensions based on image size to make it about the right\n        # size relative to other components\n        width = 10.3\n        height = width/1.397\n        pinspacing = .35   # Spacing between header pins\n\n        super().__init__('ArduinoUNO.png', width=width, height=height, xy=(-.75, 0))\n\n        # Only defining the top header pins as anchors for now\n        top = height * .956\n        arefx = 3.4\n        for i, pinname in enumerate(['aref', 'gnd', 'pin13', 'pin12', 'pin11',\n                                    'pin10', 'pin9', 'pin8']):\n            self.anchors[pinname] = (arefx + i*pinspacing, top)\n```\n\n----------------------------------------\n\nTITLE: Connecting Elements with At Method in Schemdraw\nDESCRIPTION: Demonstrates connecting elements by placing a new element starting at an anchor point of a previously placed element using the at method.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    opamp = elm.Opamp()\n    elm.Resistor().right().at(opamp.out)\n```\n\n----------------------------------------\n\nTITLE: Creating Optocoupler with Filled Box\nDESCRIPTION: Creates an optocoupler component with a light gray box fill and blue element fill, demonstrating fill color application to compound elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nelm.Optocoupler(boxfill='lightgray').fill('blue')\n```\n\n----------------------------------------\n\nTITLE: Drawing Header Numbering Styles in Python with Schemdraw\nDESCRIPTION: Demonstrates different header pin numbering styles (left-to-right, up-down, and counterclockwise) using Schemdraw's Header element.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/connectors.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Header(shownumber=True, cols=2, numbering='lr', label=\"lr\")\n    elm.Header(at=[3, 0], shownumber=True, cols=2, numbering='ud', label=\"ud\")\n    elm.Header(at=[6, 0], shownumber=True, cols=2, numbering='ccw', label=\"ccw\")\n```\n\n----------------------------------------\n\nTITLE: Using Drawing State Stack in Schemdraw\nDESCRIPTION: Shows how to save and restore drawing position and direction using the push and pop methods, useful for complex layouts.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    elm.Inductor()\n    elm.Dot()\n    print('d.here:', d.here)\n    d.push()  # Save this drawing position/direction for later\n\n    elm.Capacitor().down()  # Go off in another direction temporarily\n    elm.Ground(lead=False)\n    print('d.here:', d.here)\n\n    d.pop()   # Return to the pushed position/direction\n    print('d.here:', d.here)\n    elm.Diode()\n```\n\n----------------------------------------\n\nTITLE: Creating Bridge Rectifier Circuit\nDESCRIPTION: Creates a bridge rectifier circuit, which is a compound element containing four diodes arranged to convert AC to DC.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nelm.Rectifier()\n```\n\n----------------------------------------\n\nTITLE: Saving Timing Diagram to File\nDESCRIPTION: Example showing how to save a TimingDiagram to an SVG file by adding it to a Drawing object.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/timing.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(file='timing.svg'):\n    logic.TimingDiagram(\n        {'signal': [\n            {'name': 'A', 'wave': '0..1..01.'},\n            {'name': 'B', 'wave': '101..0...'}]})\n```\n\n----------------------------------------\n\nTITLE: Drawing Header with Jumper in Python using Schemdraw\nDESCRIPTION: Shows how to create a header with a square style and add a jumper element with light gray fill.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/connectors.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    J = elm.Header(cols=2, style='square')\n    elm.Jumper().at(J.pin3).fill('lightgray')\n```\n\n----------------------------------------\n\nTITLE: Drawing Single Resistor Component\nDESCRIPTION: Creates a simple drawing with a resistor oriented to the right and labeled '1Ω'.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor().right().label('1Ω')\n```\n\n----------------------------------------\n\nTITLE: Creating DPDT Relay with Filled Box\nDESCRIPTION: Creates a double-pole double-throw (DPDT) relay with a light gray fill color for the enclosure box, showing a more complex switch configuration.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nelm.Relay(switch='dpdt', boxfill='lightgray')\n```\n\n----------------------------------------\n\nTITLE: Closing Loops with Tox Method in Schemdraw\nDESCRIPTION: Demonstrates using the tox method to extend an element horizontally to match the x-coordinate of another anchor point, useful for closing circuit loops.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    C = elm.Capacitor()\n    elm.Diode()\n    elm.Line().down()\n\n    # Now we want to close the loop, but can use `tox` \n    # to avoid having to know exactly how far to go.\n    # The Line will extend horizontally to the same x-position\n    # as the Capacitor's `start` anchor.\n    elm.Line().tox(C.start)\n\n    # Now close the loop by relying on the fact that all\n    # two-terminal elements (including Source and Line)\n    # are the same length by default\n    elm.Source().up()\n```\n\n----------------------------------------\n\nTITLE: Positioning Labels on Schemdraw Elements in Python\nDESCRIPTION: Shows how to position labels on different sides of electrical components using the 'loc' parameter in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    (elm.Resistor()\n        .label('Label')  # 'top' is default\n        .label('Bottom', loc='bottom')\n        .label('Right', loc='right')\n        .label('Left', loc='left'))\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Flowchart in Python with Schemdraw\nDESCRIPTION: This code creates a simple flowchart with a start node, an arrow, a decision node, and a wire connection. It demonstrates basic flowchart element creation and positioning.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/flowcharting.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    flow.Start().label('START')\n    flow.Arrow().down(d.unit/3)\n    h = flow.Decision(w=5.5, h=4, S='YES').label('Hey, wait,\\nthis flowchart\\nis a trap!')\n    flow.Line().down(d.unit/4)\n    flow.Wire('c', k=3.5, arrow='->').to(h.E)\n```\n\n----------------------------------------\n\nTITLE: Creating SPDT Relay without Box and Core\nDESCRIPTION: Creates a single-pole double-throw (SPDT) relay switch without the box enclosure and core, showing just the switch mechanism and coil.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nelm.Relay(switch='spdt', box=False, core=False)\n```\n\n----------------------------------------\n\nTITLE: Connecting Header to IC with OrthoLines from Header Side\nDESCRIPTION: Creates a drawing with an IC that has pins on the right side, connected to a header using OrthoLines with custom vertical spacing, starting from the header.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='r', slot='1/4'),\n                      elm.IcPin(name='B', side='r', slot='2/4'),\n                      elm.IcPin(name='C', side='r', slot='3/4'),\n                      elm.IcPin(name='D', side='r', slot='4/4')])\n    D2 = elm.Header(rows=4).at((7,4))\n    elm.OrthoLines(n=4, dy=.6).at(D2.pin1).to(D1.D)\n```\n\n----------------------------------------\n\nTITLE: Drawing on Matplotlib Canvas with Additional Annotations\nDESCRIPTION: Creates a drawing using the Matplotlib backend and adds additional Matplotlib-specific annotations (vertical lines) to the resulting figure.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.use('matplotlib')\nd = schemdraw.Drawing()\nd.add(elm.Resistor())\nschemfig = d.draw()\nschemfig.ax.axvline(.5, color='purple', ls='--')\nschemfig.ax.axvline(2.5, color='orange', ls='-', lw=3);\ndisplay(schemfig)\n```\n\n----------------------------------------\n\nTITLE: Using To Method for Exact Endpoints in Schemdraw\nDESCRIPTION: Shows how to specify an exact endpoint for two-terminal elements using the to method, which stretches the element to reach the target point.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    R = elm.Resistor()\n    C = elm.Capacitor().up()\n    Q = elm.Diode().to(R.start)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fonts in Schemdraw\nDESCRIPTION: Shows different font configuration options for labels, including system fonts, TTF files, and font families. This code demonstrates how to apply different fonts to individual elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/styles.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    # Default font\n    elm.RBox().label('R1\\n500K')\n\n    # Named font in system fonts path\n    elm.RBox().label('R1\\n500K', font='Comic Sans MS')\n\n    # Path to a TTF file\n    elm.RBox().label('R1\\n500K', font='Peralta-Regular.ttf')\n\n    # Font family\n    elm.RBox().label('R1\\n500K', font='serif')\n```\n\n----------------------------------------\n\nTITLE: Creating a complex circuit diagram with DSP elements\nDESCRIPTION: Draws a more complex circuit diagram combining DSP elements like Mixer and Square with basic elements like arrows and lines. The diagram includes mathematical notations as labels.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_dsp.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    elm.Arrow().length(d.unit/2).label('$E_i(s)$')\n    mx = dsp.Mixer(W='+', S='–')\n    elm.Arrow().length(d.unit/2)\n    dsp.Square().label(r'1/R').anchor('W')\n    elm.Arrow().length(d.unit/2).label('$I(s)$')\n    d.move(0, -d.unit)\n    elm.Line().left().tox(mx.S)\n    elm.Arrow().up().toy(mx.S).label('$E_o(s)$')\n```\n\n----------------------------------------\n\nTITLE: Setting Length of Two-Terminal Elements in Schemdraw\nDESCRIPTION: Demonstrates how to specify an exact length for two-terminal elements using the length method.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    elm.Dot()\n    elm.Resistor()\n    elm.Dot()\n    elm.Diode().length(6)\n    elm.Dot()\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw modules\nDESCRIPTION: Standard import pattern for Schemdraw, importing the main module and the elements submodule for circuit components.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nimport schemdraw.elements as elm\n```\n\n----------------------------------------\n\nTITLE: Using Drawing Context Manager with File Save\nDESCRIPTION: Demonstrates using the Drawing class as a context manager to create and save a circuit diagram to a PNG file.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Context Manager - file save, should still draw in Jupyter\ntry:\n    os.remove('savetest.png')\nexcept FileNotFoundError:\n    pass\n\nwith schemdraw.Drawing(file='savetest.png') as d:\n    d += elm.Resistor()\n    d += elm.Capacitor()\n    d += elm.Diode()\n    \nassert os.path.exists('savetest.png')\n```\n\n----------------------------------------\n\nTITLE: Changing Element Orientation in Schemdraw\nDESCRIPTION: Demonstrates using flip and reverse methods to change the orientation of directional elements without affecting the drawing direction.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Zener().label('Normal')\n    elm.Zener().flip().label('Flip')\n    elm.Zener().reverse().label('Reverse')\n```\n\n----------------------------------------\n\nTITLE: Creating a function to draw multiple DSP elements\nDESCRIPTION: Defines a utility function that automatically arranges and draws a list of DSP elements in a grid layout. The function takes parameters for customizing the layout, appearance, and spacing of elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_dsp.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef drawElements(elm_list, n=5, dx=1, dy=2, ofst=.8, fname=None, **kwargs):\n    x, y = 0, 0\n    d = schemdraw.Drawing(fontsize=12)\n    for e in elm_list:\n        element = getattr(dsp, e)\n        d += element().at(((d.unit+1)*x+1,y)).label(e, loc='top', ofst=.1)\n        x = x + dx\n        if x >= n:\n            x=0\n            y=y-dy\n    return d\n\nelist = ['Square', 'Demod', 'Mixer', 'Filter', 'Oscillator', 'OscillatorBox',\n         'Sum', 'SumSigma', 'Adc', 'Dac', 'Speaker', 'Amp', 'Circulator', 'Isolator', 'VGA']\n```\n\n----------------------------------------\n\nTITLE: Using OrthoLines to Connect Header to IC with Left Pins\nDESCRIPTION: Creates a drawing with an IC that has pins on the left side, connected to a header using OrthoLines, which creates orthogonal (right-angle) connections between components.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='l', slot='1/4'),\n                      elm.IcPin(name='B', side='l', slot='2/4'),\n                      elm.IcPin(name='C', side='l', slot='3/4'),\n                      elm.IcPin(name='D', side='l', slot='4/4')])\n    D2 = elm.Header(rows=4).at((-7,-4))\n    elm.OrthoLines(n=4).at(D2.pin1).to(D1.D)\n```\n\n----------------------------------------\n\nTITLE: Connecting IC to Header with OrthoLines and Larger xstart\nDESCRIPTION: Creates a drawing with an IC connected to a header using OrthoLines with custom vertical spacing and a larger horizontal start offset of 1 unit.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='l', slot='1/4'),\n                      elm.IcPin(name='B', side='l', slot='2/4'),\n                      elm.IcPin(name='C', side='l', slot='3/4'),\n                      elm.IcPin(name='D', side='l', slot='4/4')])\n    D2 = elm.Header(rows=4).at((-7,4))\n    elm.OrthoLines(n=4, dy=.6, xstart=1).at(D2.pin1).to(D1.D)\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Schemdraw Components\nDESCRIPTION: Imports the required Schemdraw package and elements module for circuit components.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw import elements as elm\n```\n\n----------------------------------------\n\nTITLE: Testing Capstyle in SVG Backend\nDESCRIPTION: Creates a drawing with two resistors using different cap styles ('butt' and 'projecting') to demonstrate how cap styles are rendered in the SVG backend.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nd = schemdraw.Drawing()\nd += elm.Resistor(capstyle='butt')\nd += elm.Resistor(capstyle='projecting')\nd.draw(canvas='svg')\n```\n\n----------------------------------------\n\nTITLE: Drawing ICs with Multiple Pins and Slants\nDESCRIPTION: Creates two IC components with multiple labeled pins on all sides and different slant angles.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_intcircuits.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\npins = [elm.IcPin('A', side='l'),\n        elm.IcPin('B', side='l'),\n        elm.IcPin('C', side='l'), \n        elm.IcPin('D', side='r'),\n        elm.IcPin('E', side='r'),\n        elm.IcPin('F', side='r'), \n        elm.IcPin('1', side='t'),\n        elm.IcPin('2', side='t'),\n        elm.IcPin('3', side='t'), \n        elm.IcPin('4', side='b'),\n        elm.IcPin('5', side='b'),\n        elm.IcPin('6', side='b'),]\n\nwith schemdraw.Drawing():\n    elm.Ic(slant=-20, pins=pins)\n    elm.Ic(slant=20, pins=pins).at((5, 0))\n```\n\n----------------------------------------\n\nTITLE: Configuring Math Fonts in Schemdraw SVG Backend\nDESCRIPTION: Demonstrates how to set custom fonts for mathematical expressions in circuit diagrams. With the SVG backend, custom TTF fonts with MATH tables can be used via the mathfont parameter.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/styles.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(canvas='svg'):\n    # Default math font\n    elm.RBox().label(r'$\\sqrt{a^2+b^2}$').at((0, -2))\n\n    # Path to a TTF file with MATH font table (SVG backend only)\n    elm.RBox().label(r'$\\sqrt{a^2+b^2}$', mathfont='Asana-Math.ttf')\n```\n\n----------------------------------------\n\nTITLE: Connecting Header to IC with Bottom Pins\nDESCRIPTION: Creates a drawing with an IC that has pins on the bottom side, connected to a header positioned below-left using RightLines for connection.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='b', slot='1/4'),\n                      elm.IcPin(name='B', side='b', slot='2/4'),\n                      elm.IcPin(name='C', side='b', slot='3/4'),\n                      elm.IcPin(name='D', side='b', slot='4/4')])\n    D2 = elm.Header(rows=4).at((-3,-4))\n    elm.RightLines(n=4).at(D2.pin1).to(D1.A)\n```\n\n----------------------------------------\n\nTITLE: Rendering Mathematical Expression with Left Alignment and Rotation\nDESCRIPTION: Creates an SVG text element containing a mathematical expression with superscript and subscript notations. The text is positioned at coordinates (50, 50) with left alignment and rotated 145 degrees.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_38\n\nLANGUAGE: python\nCODE:\n```\nsvghead = '<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\" height=\"150pt\" width=\"150pt\">{}</svg>'\ns = svgtext.text_tosvg('$A^x$ + $B_1$', 50, 50, halign='left', rotation=145, testmode=True)\nSVG(svghead.format(ET.tostring(s)))\n```\n\n----------------------------------------\n\nTITLE: Connecting IC to Header with OrthoLines and Custom xstart\nDESCRIPTION: Creates a drawing with an IC connected to a header using OrthoLines with custom vertical spacing and horizontal start offset. This example sets xstart to 0.1.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='l', slot='1/4'),\n                      elm.IcPin(name='B', side='l', slot='2/4'),\n                      elm.IcPin(name='C', side='l', slot='3/4'),\n                      elm.IcPin(name='D', side='l', slot='4/4')])\n    D2 = elm.Header(rows=4).at((-7,4))\n    elm.OrthoLines(n=4, dy=.6, xstart=.1).at(D2.pin1).to(D1.D)\n```\n\n----------------------------------------\n\nTITLE: Customizing Individual Element Segments in Schemdraw\nDESCRIPTION: Demonstrates how to access and modify properties of specific segments within a logic NAND gate element. The code changes the color of the second segment to red and adjusts its z-order to ensure proper layering.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/customizing.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nd += (n := logic.Nand())\nn.segments[1].color = 'red'\nn.segments[1].zorder = 5  # Put the bubble on top\n```\n\n----------------------------------------\n\nTITLE: Testing Deep Copy of Schemdraw Drawing\nDESCRIPTION: Creates a Schemdraw drawing with a resistor element and makes a deep copy of the drawing object. This tests that Schemdraw drawings can be properly copied with all their attributes preserved.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_44\n\nLANGUAGE: python\nCODE:\n```\nd = schemdraw.Drawing()\nd.add(r:=elm.Resistor())\ncopy.deepcopy(d)\n```\n\n----------------------------------------\n\nTITLE: Connecting IC with Right Pins to Header using OrthoLines\nDESCRIPTION: Creates a drawing with an IC that has pins on the right side, connected to a header positioned to the right using OrthoLines. Note the direction is from IC to header.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='r', slot='1/4'),\n                      elm.IcPin(name='B', side='r', slot='2/4'),\n                      elm.IcPin(name='C', side='r', slot='3/4'),\n                      elm.IcPin(name='D', side='r', slot='4/4')])\n    D2 = elm.Header(rows=4).at((7,-4))\n    elm.OrthoLines(n=4).at(D1.D).to(D2.pin1)\n```\n\n----------------------------------------\n\nTITLE: Changing Element Direction in Schemdraw\nDESCRIPTION: Shows how to change the drawing direction using direction methods (up, down, left, right) which rotates the current element and affects placement of subsequent elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Capacitor()\n    elm.Resistor().up()\n    elm.Diode()\n```\n\n----------------------------------------\n\nTITLE: Drawing Ortho Lines Connector in Python with Schemdraw\nDESCRIPTION: Shows how to connect IC pins to a header using OrthoLines element for parallel but vertically offset connections.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/connectors.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='r', slot='1/4'),\n                      elm.IcPin(name='B', side='r', slot='2/4'),\n                      elm.IcPin(name='C', side='r', slot='3/4'),\n                      elm.IcPin(name='D', side='r', slot='4/4')])\n    D2 = elm.Header(rows=4).at((7, -3))\n    elm.OrthoLines(n=4).at(D1.D).to(D2.pin1).label('OrthoLines')\n```\n\n----------------------------------------\n\nTITLE: Connecting Left-Side Header to IC using RightLines\nDESCRIPTION: Creates a drawing with an IC that has pins on the top side, connected to a header positioned on the left using RightLines to connect from header to IC.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='t', slot='1/4'),\n                      elm.IcPin(name='B', side='t', slot='2/4'),\n                      elm.IcPin(name='C', side='t', slot='3/4'),\n                      elm.IcPin(name='D', side='t', slot='4/4')])\n    D2 = elm.Header(rows=4).at((-3,4))\n    elm.RightLines(n=4).at(D2.pin1).to(D1.A)\n```\n\n----------------------------------------\n\nTITLE: Accessing Element Anchor Points in Schemdraw\nDESCRIPTION: Shows how anchor points are defined within a custom element, likely part of the FluxCapacitor implementation. Anchors are named points that can be referenced when connecting elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/customizing.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nself.anchors['p2'] = (fclen, fclen)\nself.anchors['p3'] = (0, -fclen*1.41)\n```\n\n----------------------------------------\n\nTITLE: Saving a drawing to a file\nDESCRIPTION: Example of creating a drawing and saving it directly to a file by specifying the file parameter in the Drawing constructor.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(file='my_circuit.svg') as d:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating Seven-Segment Display Components\nDESCRIPTION: Demonstrates creation of seven-segment display elements with various configurations and styles.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_intcircuits.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nelm.SevenSegment()\n\nelm.SevenSegment(segcolor='blue', decimal=True, digit=5, tilt=0, labelsegments=False, anode=True, cathode=True)\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Logic Module\nDESCRIPTION: This snippet shows how to import the logic module from Schemdraw, which is used to create digital logic circuit diagrams.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/logicgate.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw import logic\n```\n\n----------------------------------------\n\nTITLE: Creating Bus Connections Between Headers\nDESCRIPTION: Creates a drawing with two headers connected via a bus line. Uses BusConnect elements at each end and a BusLine to create the connecting path between them.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    J = elm.Header(rows=6)\n    B = elm.BusConnect(n=6).at(J.pin1)\n    elm.BusLine().down().at(B.end).length(3)\n    B2 = elm.BusConnect(n=6).anchor('start').reverse()\n    H = elm.Header(rows=6).at(B2.pin1).anchor('pin1')\n```\n\n----------------------------------------\n\nTITLE: Connecting Right-Positioned Header to IC with Bottom Pins\nDESCRIPTION: Creates a drawing with an IC that has pins on the bottom side, connected to a header positioned below-right using RightLines for connection.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='b', slot='1/4'),\n                      elm.IcPin(name='B', side='b', slot='2/4'),\n                      elm.IcPin(name='C', side='b', slot='3/4'),\n                      elm.IcPin(name='D', side='b', slot='4/4')])\n    D2 = elm.Header(rows=4).at((3,-4))\n    elm.RightLines(n=4).at(D2.pin1).to(D1.D)\n```\n\n----------------------------------------\n\nTITLE: Drawing DSP elements with blue outline\nDESCRIPTION: Renders the defined list of DSP elements using blue outline color and displays the result.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_dsp.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndisplay(drawElements(elist, d='right', color='blue'))\n```\n\n----------------------------------------\n\nTITLE: Importing and Configuring Schemdraw for Logic Gate Parsing in Python\nDESCRIPTION: This snippet imports the necessary modules from Schemdraw and configures the drawing settings. It sets up the environment for parsing and drawing logic gate circuits.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_parselogic.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw.parsing import logicparse\nschemdraw.use('svg')\n#schemdraw.settextmode('text')\n```\n\n----------------------------------------\n\nTITLE: Basic Element Placement in Schemdraw\nDESCRIPTION: Demonstrates sequential element placement in Schemdraw where elements are automatically added one after another in the direction of the drawing.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Capacitor()\n    elm.Resistor()\n    elm.Diode()\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Backend for Searchable Text in Schemdraw\nDESCRIPTION: Code snippet that configures the SVG backend to render text as searchable SVG text elements. Note that this mode does not support full LaTeX compatibility.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/backends.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.text = 'text'\n```\n\n----------------------------------------\n\nTITLE: Creating an IC with Header Connection using RightLines\nDESCRIPTION: Creates a drawing with an IC component that has pins on the top side, connected to a header component using RightLines. This demonstrates connecting multiple pins in parallel.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = (elm.Ic(pins=[elm.IcPin(name='A', side='t', slot='1/4'),\n                       elm.IcPin(name='B', side='t', slot='2/4'),\n                       elm.IcPin(name='C', side='t', slot='3/4'),\n                       elm.IcPin(name='D', side='t', slot='4/4')]))\n    D2 = elm.Header(rows=4).at((5,4))\n    elm.RightLines(n=4).at(D2.pin1).to(D1.D)\n```\n\n----------------------------------------\n\nTITLE: Testing Different Text Styles in SVG Backend\nDESCRIPTION: Demonstrates various text styling options (sans, serif, bold, italic) in the SVG backend by creating a drawing with multiple resistors with different label styles.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# These text styles only work in SVG backend\nd = schemdraw.Drawing(fontsize=20)\nd += elm.Resistor().label('sans', font='sans')\nd += elm.Resistor().label('serif', font='serif')\nd += elm.Resistor().label('bold', font='bold')\nd += elm.Resistor().label('italic', font='italic')\nd.draw(canvas='svg')\n```\n\n----------------------------------------\n\nTITLE: Connecting IC to Upper-Right Header using OrthoLines\nDESCRIPTION: Creates a drawing with an IC that has pins on the right side, connected to a header positioned to the upper-right using OrthoLines from IC to header.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='r', slot='1/4'),\n                      elm.IcPin(name='B', side='r', slot='2/4'),\n                      elm.IcPin(name='C', side='r', slot='3/4'),\n                      elm.IcPin(name='D', side='r', slot='4/4')])\n    D2 = elm.Header(rows=4).at((7,4))\n    elm.OrthoLines(n=4).at(D1.D).to(D2.pin1)\n```\n\n----------------------------------------\n\nTITLE: Saving Standalone Kmap or Table in Schemdraw\nDESCRIPTION: Demonstrates how to save a standalone Kmap or Table to an image file by adding it to a Schemdraw Drawing object.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/logic.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(file='truthtable.svg'):\n    logic.Table(table, colfmt='cc||c')\n```\n\n----------------------------------------\n\nTITLE: Alternative Anchor Alignment in Schemdraw\nDESCRIPTION: Demonstrates another example of element alignment using a different anchor point for connection.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor().label('R2')\n    elm.Opamp().anchor('in2')  # Place the `in2` anchor at the current drawing position\n```\n\n----------------------------------------\n\nTITLE: Setting SVG as Default Backend in Schemdraw\nDESCRIPTION: Code snippet that sets SVG as the default drawing backend for all Schemdraw drawings in the current session.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/backends.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.use('svg')\n```\n\n----------------------------------------\n\nTITLE: Creating SPDT Relay with Reversed Switch\nDESCRIPTION: Creates a single-pole double-throw (SPDT) relay switch without a box and with the switch orientation reversed. Also removes the linking line between coil and switch.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nelm.Relay(switch='spdt', box=False, swreverse=True, link=False)\n```\n\n----------------------------------------\n\nTITLE: Testing Label Positioning in SVG Backend\nDESCRIPTION: Tests various label positioning options using horizontal alignment, vertical alignment, and rotation parameters in the SVG backend.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# Test some mathtext in svg backend\nschemdraw.use('svg')\nd = schemdraw.Drawing()\nd += elm.Dot().label('R1', rotate=45)\nd += elm.Dot().at((1, 0)).label('R1', rotate=45, halign='center')\nd += elm.Dot().at((2, 0)).label('R1', rotate=45, halign='right')\nd += elm.Dot().at((0, 1)).label('R1', rotate=45, valign='top')\nd += elm.Dot().at((1, 1)).label('R1', rotate=45, valign='bottom')\nd += elm.Dot().at((2, 1)).label('R1', rotate=45, valign='center')\nd.draw()\n```\n\n----------------------------------------\n\nTITLE: Drawing on Custom Matplotlib Axes\nDESCRIPTION: Creates a custom Matplotlib figure and axes, then renders a Schemdraw drawing on the custom axes with additional annotations.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfig, ax = plt.subplots()\nax.set_aspect('equal')\nd = schemdraw.Drawing()\nd += elm.Inductor()\nd.draw(canvas=ax)\nax.axvline(0, ls='--', color='red');\n```\n\n----------------------------------------\n\nTITLE: Using RightLines with Coordinate Target\nDESCRIPTION: Demonstrates using the RightLines element with a coordinate tuple as the target instead of an element anchor point.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nelm.RightLines().to((5, 5))\n```\n\n----------------------------------------\n\nTITLE: Using Hold Method to Maintain Drawing Position in Schemdraw\nDESCRIPTION: Shows how to place an element without changing the current drawing position by using the hold method.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as d:\n    elm.Diode()  # Normal placement: drawing position moves to end of element\n    elm.Dot().color('red')\n\n    d.move(dx=-d.unit, dy=-1)\n    elm.Diode().hold()  # Hold method prevents position from changing\n    elm.Dot().color('blue')\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Backend for Path-based Text in Schemdraw\nDESCRIPTION: Code snippet that configures the SVG backend to render text as SVG paths instead of text elements, enabling full LaTeX support at the cost of text searchability.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/backends.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.text = 'path'\n```\n\n----------------------------------------\n\nTITLE: Connecting Capacitor and Wire in Schemdraw\nDESCRIPTION: Creates a capacitor and connects it to a wire in a circuit diagram. The capacitor is placed to the left of JP1.pin4 with a '100n' label at the bottom, and a wire is drawn with a curve and connected to RST.start.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/ic.rst#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nelm.Capacitor().left().at(JP1.pin4).label('100n', 'bottom')\nelm.Wire('c', k=-16).to(RST.start)\n```\n\n----------------------------------------\n\nTITLE: Creating Rotated Text in SVG\nDESCRIPTION: Creates a rotated text element in SVG format and displays it using IPython's SVG display functionality.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nsvghead = '<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\" height=\"150pt\" width=\"150pt\">{}</svg>'\ns = svgtext.text_tosvg('ABC', 50, 50, halign='left', rotation=45, testmode=True)\nSVG(svghead.format(ET.tostring(s, encoding='unicode')))\n```\n\n----------------------------------------\n\nTITLE: Drawing with Custom Font in Matplotlib\nDESCRIPTION: Creates a circuit diagram with a resistor labeled 'Hello' using serif font and custom font size, rendered with the Matplotlib backend.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nd = schemdraw.Drawing(font='serif', fontsize=20)\nd += elm.Resistor().label('Hello')\nd.draw(canvas='matplotlib')\n```\n\n----------------------------------------\n\nTITLE: Circuit drawing with explicit element addition\nDESCRIPTION: Example showing alternative ways to add elements to a drawing using the += operator or add() method within a context manager.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing() as drawing:\n    drawing += elm.Resistor()\n    drawing += elm.Capacitor()\n    drawing.add(elm.Diode())   # Same as `drawing +=`\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Backend for SVG 1.x Compatibility in Schemdraw\nDESCRIPTION: Code snippet that disables SVG 2.0 features for better compatibility with older SVG renderers that only support SVG 1.x.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/backends.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.svg2 = False\n```\n\n----------------------------------------\n\nTITLE: Creating DB25 Connector with Pin Numbers\nDESCRIPTION: Creates a DB25 connector with pin numbers displayed, demonstrating the larger connector variant from the D-subminiature family.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nelm.DB25(number=True)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic IC Element\nDESCRIPTION: Creates a basic integrated circuit element with no customization.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_intcircuits.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nelm.Ic()\n```\n\n----------------------------------------\n\nTITLE: Drawing without showing window\nDESCRIPTION: Creates a drawing without displaying the pop-up window, useful for scripts and non-interactive environments.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(show=False) as d:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Drawing Image Data in Python\nDESCRIPTION: Shows the usage of the new Drawing.get_imagedata function for retrieving raw image bytes.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/CHANGES.txt#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nDrawing.get_imagedata()\n```\n\n----------------------------------------\n\nTITLE: Drawing without context manager\nDESCRIPTION: Example showing how to create a circuit diagram without using the context manager, requiring explicit adding of elements and calling draw/save methods.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nd = schemdraw.Drawing()\nd += elm.Resistor()\n...\nd.draw()\nd.save('my_circuit.svg')\n```\n\n----------------------------------------\n\nTITLE: Configuring Matplotlib SVG Text Rendering in Schemdraw\nDESCRIPTION: Code snippet that configures Matplotlib to render text as SVG text elements instead of primitive lines and arcs. This enables text searchability in SVG editors like Inkscape.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/backends.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib\nmatplotplot.rcParams['svg.fonttype'] = 'none'\n```\n\n----------------------------------------\n\nTITLE: Using DB9 Connector with Pin Numbers\nDESCRIPTION: Creates a drawing with a DB9 connector with pin numbers displayed, and attaches a resistor to pin 2 of the connector.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    db = elm.DB9(number=True)\n    elm.Resistor().at(db.pin2)\n```\n\n----------------------------------------\n\nTITLE: Creating a Drawing with SVG Backend in Schemdraw\nDESCRIPTION: Code snippet showing how to create a Schemdraw Drawing instance with the SVG backend for a specific drawing without changing the global default.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/backends.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing(canvas='svg') as d:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Matplotlib backend for headless servers\nDESCRIPTION: Code to set Matplotlib to use the Agg backend for environments without a display, such as headless servers.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib\nmatplotlib.use('Agg') # Set Matplotlib's backend here\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Logic Module\nDESCRIPTION: Demonstrates how to import the logic module from Schemdraw for drawing logic gates and circuits.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/logic.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw import logic\n```\n\n----------------------------------------\n\nTITLE: Using FluxCapacitor Element in Schemdraw\nDESCRIPTION: A simple demonstration of creating a FluxCapacitor element in a drawing. This shows how to instantiate this custom element directly.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/customizing.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nFluxCapacitor()\n```\n\n----------------------------------------\n\nTITLE: Creating DPST Relay\nDESCRIPTION: Creates a double-pole single-throw (DPST) relay, showing a different switch configuration variant for the relay component.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nelm.Relay(switch='dpst')\n```\n\n----------------------------------------\n\nTITLE: Drawing DSP elements with yellow fill\nDESCRIPTION: Renders the defined list of DSP elements using yellow fill color and displays the result.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_dsp.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndisplay(drawElements(elist, d='right', fill='yellow'))\n```\n\n----------------------------------------\n\nTITLE: Testing Arc Segments in Matplotlib Backend\nDESCRIPTION: Creates a custom element with arc segments and renders it using the Matplotlib backend. This demonstrates how to create filled and unfilled arcs in Matplotlib despite its limitations with filled arcs.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n# Matplotlib doesn't support filled Arcs, so\n# we have to fake them with a path\n\nclass ArcTest(elm.Element):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.segments.append(SegmentArc((0,0), 1, 2, 90, 20, angle=20, fill='red'))\n        self.segments.append(SegmentArc((2,0), 1, 2, 90, 20, angle=20, fill=None))\n\n        self.segments.append(SegmentCircle((0,0), .1, color='orange'))\n        self.segments.append(SegmentCircle((2,0), .1, color='purple'))\n\nschemdraw.use('matplotlib')\nArcTest().theta(45)\n```\n\n----------------------------------------\n\nTITLE: Testing Pickle Serialization of Schemdraw Drawing\nDESCRIPTION: Tests serialization and deserialization of a Schemdraw drawing object using pickle. This verifies that Schemdraw drawings can be properly saved to and loaded from persistent storage.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_45\n\nLANGUAGE: python\nCODE:\n```\npickle.loads(pickle.dumps(d))\n```\n\n----------------------------------------\n\nTITLE: Installing Schemdraw with SVG math support\nDESCRIPTION: Pip command for installing Schemdraw with ziamath dependency to enable math expressions in SVG drawings.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install schemdraw[svgmath]\n```\n\n----------------------------------------\n\nTITLE: Drawing Math Expressions with Ziamath in SVG2\nDESCRIPTION: Creates a drawing with a mathematical expression ($x^2$) as a label, using ziamath rendering with SVG2 support.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.text = 'path'\nd = schemdraw.Drawing(font='serif', fontsize=20)\nd += elm.Resistor().label(r'$x^2$', valign='bottom')\nd.draw(canvas='svg')\nassert '<symbol' in d.get_imagedata('svg').decode()\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with Default Rotation Mode in SVG\nDESCRIPTION: Creates SVG text elements with various horizontal and vertical alignments using the 'default' rotation mode. The text is positioned at different coordinates with a rotation of 30 degrees, demonstrating the effect of different alignment combinations.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_37\n\nLANGUAGE: python\nCODE:\n```\n# \"default\" rotation mode\ns = ET.tostring(svgtext.text_tosvg('ABC', 30, 30, rotation=30,\n                       halign='left', valign='top', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 30, rotation=30,\n                       halign='center', valign='top', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 30, rotation=30,\n                       halign='right', valign='top', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 30, 80, rotation=30,\n                       halign='left', valign='center', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 80, rotation=30,\n                       halign='center', valign='center', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 80, rotation=30,\n                       halign='right', valign='center', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 30, 130, rotation=30,\n                       halign='left', valign='bottom', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 130, rotation=30,\n                       halign='center', valign='bottom', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 130, rotation=30,\n                       halign='right', valign='bottom', \n                       rotation_mode='default', testmode=True),\n                encoding='unicode')\n\nSVG(svghead.format(s))\n```\n\n----------------------------------------\n\nTITLE: Creating Dual-Column Header with Screw Terminal Style\nDESCRIPTION: Creates a dual-column header with screw terminal style pins, demonstrating an alternative terminal style for headers.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nelm.Header(rows=6, cols=2, style='screw')\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Library and Setting Defaults\nDESCRIPTION: Initializes the Schemdraw library by importing the necessary modules, including the pictorial module for breadboard-style drawings, and sets the rendering backend to SVG.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/pictorial.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw import elements as elm\nfrom schemdraw import pictorial\nschemdraw.use('svg')\n```\n\n----------------------------------------\n\nTITLE: Testing Mathematical Text Rendering in SVG Backend\nDESCRIPTION: Tests various mathematical expressions and special characters in the SVG backend, including subscripts, superscripts, Greek symbols, and other mathematical notations.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# Test some mathtext in svg backend\nschemdraw.use('svg')\nd = schemdraw.Drawing(font='sans')\nd += elm.Resistor().label('$R_{11}$')\nd += elm.Resistor().label('$R^{22}$')\nd += elm.Resistor().label(r'$\\theta$')\nd += elm.Resistor().label(r'$\\overline{Q_1}$')\nd += elm.Resistor().label('$R_1$')\nd += elm.Resistor().label(r'$\\sqrt{x}$')\nd.here = (0, -2)\nd += elm.Resistor().label('Ω')\nd += elm.Resistor().label('∠')\nd += elm.Resistor().label('10%')\nd += elm.Resistor().label('$R^2$')\nd += elm.Resistor().label('$R_2$')\nd.draw()\n```\n\n----------------------------------------\n\nTITLE: Setting Matplotlib to inline mode for Jupyter\nDESCRIPTION: Jupyter magic command to set Matplotlib to inline mode for displaying schematics in notebook cells.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n%matplotlib inline\n```\n\n----------------------------------------\n\nTITLE: Edge Notation Syntax\nDESCRIPTION: Demonstrates the syntax for edge notation in timing diagrams, showing the format for specifying wave positions and labels.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/timing.rst#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n'[WaveNum:Period]<->[WaveNum:Period]{color,ls} Label'\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Elements to a Drawing\nDESCRIPTION: Creates a Drawing object and adds multiple circuit elements (resistor, capacitor, diode) using the add_elements method.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# add_elements function\nd = schemdraw.Drawing()\nd.add_elements(\n    elm.Resistor(),\n    elm.Capacitor(),\n    elm.Diode())\nd\n```\n\n----------------------------------------\n\nTITLE: Creating DB9 Connector with Fill Color\nDESCRIPTION: Creates a DB9 connector without pin numbers and applies a light gray fill color to the connector body.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nelm.DB9(number=False).fill('lightgray')\n```\n\n----------------------------------------\n\nTITLE: Importing DSP Module in Schemdraw\nDESCRIPTION: Shows how to import the DSP module from Schemdraw to create signal processing diagrams.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/dsp.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw import dsp\n```\n\n----------------------------------------\n\nTITLE: Testing Text Anchoring and Alignment with Rotation\nDESCRIPTION: Creates a test SVG with multiple text elements using different combinations of horizontal alignment, vertical alignment, and rotation, demonstrating the 'anchor' rotation mode.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_36\n\nLANGUAGE: python\nCODE:\n```\n# \"anchor\" rotation mode\ns = ET.tostring(svgtext.text_tosvg('ABC', 30, 30, rotation=30,\n                       halign='left', valign='top', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 30, rotation=30,\n                       halign='center', valign='top', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 30, rotation=30,\n                       halign='right', valign='top', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 30, 80, rotation=30,\n                       halign='left', valign='center', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 80, rotation=30,\n                       halign='center', valign='center', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 80, rotation=30,\n                       halign='right', valign='center', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 30, 130, rotation=30,\n                       halign='left', valign='bottom', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 130, rotation=30,\n                       halign='center', valign='bottom', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 130, rotation=30,\n                       halign='right', valign='bottom', \n                       testmode=True),\n                encoding='unicode')\n\nSVG(svghead.format(s))\n```\n\n----------------------------------------\n\nTITLE: Importing SchemDraw Elements in Python\nDESCRIPTION: Demonstrates the preferred import statement for SchemDraw elements to avoid naming conflicts.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/CHANGES.txt#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport SchemDraw.elements as elm\n```\n\n----------------------------------------\n\nTITLE: Adding Standalone Labels in Schemdraw\nDESCRIPTION: Demonstrates how to add a standalone label without attaching it to any specific element in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/labels.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nelm.Label().label('Hello')\n```\n\n----------------------------------------\n\nTITLE: Creating Dual-Column Header with Custom Labels\nDESCRIPTION: Creates a dual-column header with square pins and custom labels. Left pins are labeled with letters, right pins with numbers, and includes custom alignment and font size settings.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nelm.Header(rows=6, cols=2, style='square',\n           pinsleft=['A', 'B', 'C', 'D', 'E', 'F'], pinalignleft='center', pinfontsizeleft=14,\n           pinsright=['1', '2', '3', '4', '5', '6']\n          )\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiplexer and Demultiplexer\nDESCRIPTION: Creates and connects multiplexer and demultiplexer components with labeled pins.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_intcircuits.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Multiplexer/demultiplexer\nwith schemdraw.Drawing():\n    M1 = (elm.Multiplexer()\n          .pin(name='A', side='L')\n          .pin(name='B', side='L')\n          .pin(name='C', side='L') \n          .pin(name='D', side='L')\n          .pin(name='X', side='R') \n          .pin(name='0', side='B')\n          .pin(name='1', side='B'))\n    M2 = (elm.Multiplexer(demux=True)\n          .pin(name='F', side='L')\n          .pin(name='J', side='R')\n          .pin(name='L', side='R')\n          .pin(name='L', side='R')\n          .pin(name='M', side='R')\n          .pin(name='0', side='T')\n          .pin(name='1', side='T')\n          .at(M1.X).anchor('F'))\n```\n\n----------------------------------------\n\nTITLE: Initializing Schemdraw DSP Module\nDESCRIPTION: Basic imports required for using Schemdraw's DSP functionality with SVG output.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/signalproc.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw import elements as elm\nfrom schemdraw import dsp\nschemdraw.use('svg')\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode in Matplotlib Backend\nDESCRIPTION: Enables debug mode in Schemdraw to visualize control points and anchors, then draws a BJT transistor using the Matplotlib backend.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.theme('default')\nschemdraw.debug()\nd = schemdraw.Drawing()\nd += elm.Bjt()\nd.draw(canvas='matplotlib')\n```\n\n----------------------------------------\n\nTITLE: Installing Schemdraw using pip\nDESCRIPTION: Basic pip command for installing the Schemdraw library without optional dependencies.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install schemdraw\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Pictorial Elements in Python\nDESCRIPTION: This snippet shows how to import the necessary modules for using pictorial elements in Schemdraw, including setting the SVG backend.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/pictorial.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw import elements as elm\nschemdraw.use('svg')\n\nfrom schemdraw import pictorial\n```\n\n----------------------------------------\n\nTITLE: Using Matplotlib Backend\nDESCRIPTION: Demonstrates drawing a circuit using the Matplotlib backend and getting the image data in SVG format.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Matplotlib backend\nd.draw(canvas='matplotlib')\nd.get_imagedata('svg')\n```\n\n----------------------------------------\n\nTITLE: Circuit drawing with positioning and labels\nDESCRIPTION: Advanced example showing element placement with directional methods and labeling of components with values and units.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    elm.Resistor().label('100KΩ')\n    elm.Capacitor().down().label('0.1μF', loc='bottom')\n    elm.Line().left()\n    elm.Ground()\n    elm.SourceV().up().label('10V')\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Logic Module\nDESCRIPTION: Basic import statement for accessing timing diagram functionality in Schemdraw\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/timing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw import logic\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Margin and Drawing in SVG Backend\nDESCRIPTION: Creates a drawing with custom margin settings and renders a BJT transistor using the SVG backend.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nd = schemdraw.Drawing()\nd.config(margin=1)\nd += elm.Bjt()\nd.draw(canvas='svg')\n```\n\n----------------------------------------\n\nTITLE: Setting SVG Precision in Schemdraw\nDESCRIPTION: Code snippet that configures the decimal precision used for SVG elements in the SVG backend, which affects file size and rendering precision.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/backends.rst#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.precision = 2\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Wave Pattern Timing Diagram\nDESCRIPTION: Example of creating a simple timing diagram with a single signal using JSON string input format.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/timing.rst#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlogic.TimingDiagram.from_json('''{ signal: [{ name: \"Alfa\", wave: \"01.zx=ud.23.456789\" }] }''')\n```\n\n----------------------------------------\n\nTITLE: Creating Relay with Cycloid and Rotation\nDESCRIPTION: Creates a relay with a cycloid coil symbol and rotated 45 degrees from the horizontal. Demonstrates customizing the appearance of the relay coil.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nelm.Relay(cycloid=True, theta=45)\n```\n\n----------------------------------------\n\nTITLE: Importing Copy and Pickle Modules\nDESCRIPTION: Imports the copy and pickle modules which are used for creating deep copies of objects and serializing/deserializing Python objects respectively.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_43\n\nLANGUAGE: python\nCODE:\n```\nimport copy\nimport pickle\n```\n\n----------------------------------------\n\nTITLE: Using Dark Theme for Drawing\nDESCRIPTION: Sets the Schemdraw theme to 'dark' and creates a drawing with a fuse component to demonstrate the dark theme styling.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.theme('dark')\nd = schemdraw.Drawing()\nd += elm.FuseUS()\nd.draw()\n```\n\n----------------------------------------\n\nTITLE: Importing Matplotlib for Advanced Integration\nDESCRIPTION: Imports Matplotlib's pyplot module for more advanced plotting and integration with Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Draw on matplotlib axis, or specify existing axis\nimport matplotlib.pyplot as plt\n```\n\n----------------------------------------\n\nTITLE: Setting up Schemdraw with DSP elements\nDESCRIPTION: Imports necessary modules from the Schemdraw library, including the main package, basic elements, and DSP-specific components. Sets the output format to SVG.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_dsp.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nimport schemdraw.elements as elm\nfrom schemdraw import dsp\nschemdraw.use('svg')\n```\n\n----------------------------------------\n\nTITLE: Using SVG Backend\nDESCRIPTION: Demonstrates drawing a circuit using the SVG backend and getting the image data in SVG format.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# SVG backend\nd.draw(canvas='svg')\nd.get_imagedata('svg')\n```\n\n----------------------------------------\n\nTITLE: Setting Global Font Configuration in Schemdraw\nDESCRIPTION: Shows how to configure global styling for all new drawings using schemdraw.config(). This example changes the default line width and font for all subsequent elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/styles.rst#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.config(lw=1, font='serif')\nwith schemdraw.Drawing():\n    elm.Resistor().label('100KΩ')\n    elm.Capacitor().down().label('0.1μF', loc='bottom')\n    elm.Line().left()\n    elm.Ground()\n    elm.SourceV().up().label('10V')\n```\n\n----------------------------------------\n\nTITLE: Saving Drawing as PNG from Matplotlib\nDESCRIPTION: Saves the current drawing (rendered with Matplotlib) to a PNG file named 'testMPL.png'.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nd.save('testMPL.png')\n```\n\n----------------------------------------\n\nTITLE: Initializing Schemdraw with SVG Output\nDESCRIPTION: Basic setup for Schemdraw library with SVG output mode configuration.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_intcircuits.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw import elements as elm\nschemdraw.use('svg')\n#schemdraw.settextmode('text')\n```\n\n----------------------------------------\n\nTITLE: Creating Optocoupler with Base Connection and Rotation\nDESCRIPTION: Creates an optocoupler with a transistor base connection and rotates it 45 degrees. Connects a ground element to the base terminal.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    Q = elm.Optocoupler(base=True).theta(45)\n    elm.Ground().at((Q, 'base'))\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Dots to Elements in SchimDraw\nDESCRIPTION: This snippet demonstrates how to add connection dots to elements using the dot() method. In electrical schematics, dots indicate connected wires, and SchimDraw provides convenience methods for adding them to the ends of two-terminal elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/placement.rst#2025-04-21_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nelm.Resistor().dot()\n```\n\n----------------------------------------\n\nTITLE: Drawing Math Expressions with Ziamath in SVG1\nDESCRIPTION: Creates a drawing with a mathematical expression ($x^2$) as a label, using ziamath rendering with SVG1.x compatibility mode.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.svg2 = False   # use ziamath with SVG1.x\nd = schemdraw.Drawing(font='serif', fontsize=20)\nd += elm.Resistor().label(r'$x^2$', valign='bottom')\nd.draw(canvas='svg')\nd.get_imagedata('svg').decode()\nassert '<symbol' not in d.get_imagedata('svg').decode()\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Logic Module\nDESCRIPTION: Basic import statement for the schemdraw logic module required for timing diagrams.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/timing.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw import logic\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Flow Module in Python\nDESCRIPTION: This snippet shows how to import the flow module from Schemdraw, which is necessary for creating flowchart elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/flowcharting.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw import flow\n```\n\n----------------------------------------\n\nTITLE: Saving a Drawing to SVG File\nDESCRIPTION: Saves the current drawing to an SVG file named 'savetest.svg'.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nd.save('savetest.svg')\n```\n\n----------------------------------------\n\nTITLE: Testing Mathematical Text Rendering in SVG Backend\nDESCRIPTION: Creates a circuit diagram using the SVG backend with various mathematical expressions as labels for resistor elements. Demonstrates support for subscripts, superscripts, Greek symbols, and special characters.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_42\n\nLANGUAGE: python\nCODE:\n```\n# Test some mathtext in svg backend - text mode\nschemdraw.use('svg')\nd = schemdraw.Drawing(font='Times')\nd += elm.Resistor().label('$R_{11}$')\nd += elm.Resistor().label('$R^{22}$')\nd += elm.Resistor().label(r'$\\theta$')\nd += elm.Resistor().label(r'$\\overline{Q_1}$')\nd += elm.Resistor().label('$R_1$')\nd += elm.Resistor().label(r'$\\sqrt{x}$')\nd.here = (0, -2)\nd += elm.Resistor().label('Ω')\nd += elm.Resistor().label('∠')\nd += elm.Resistor().label('10%')\nd += elm.Resistor().label('$R^2$')\nd += elm.Resistor().label('$R_2$')\nd.draw()\n```\n\n----------------------------------------\n\nTITLE: Importing SVG Text Utilities\nDESCRIPTION: Imports the SVG text utilities, ElementTree for XML parsing, and IPython's SVG display functionality for testing text rotation modes.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw.backends import svgtext\nfrom IPython.display import SVG\nfrom xml.etree import ElementTree as ET\n# These should appear similar to\n# https://matplotlib.org/3.1.1/gallery/text_labels_and_annotations/demo_text_rotation_mode.html\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw and Setting Up Environment\nDESCRIPTION: This snippet imports the necessary Schemdraw modules and configures the drawing environment to use SVG output.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/compound.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw import elements as elm\nschemdraw.use('svg')\n```\n\n----------------------------------------\n\nTITLE: Creating Relay with Abbreviated Cycloid Parameter\nDESCRIPTION: Creates a relay using the abbreviated parameter 'cycl' instead of 'cycloid' to enable the cycloid coil appearance.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nelm.Relay(cycl=True)\n```\n\n----------------------------------------\n\nTITLE: Rendering Text with Anchor Rotation Mode in SVG\nDESCRIPTION: Creates SVG text elements with various horizontal and vertical alignments using the 'anchor' rotation mode (default). The text is positioned at different coordinates with a rotation of 30 degrees to demonstrate anchor-based rotation behavior.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_41\n\nLANGUAGE: python\nCODE:\n```\n# \"anchor\" rotation mode\ns = ET.tostring(svgtext.text_tosvg('ABC', 30, 30, rotation=30,\n                       halign='left', valign='top', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 30, rotation=30,\n                       halign='center', valign='top', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 30, rotation=30,\n                       halign='right', valign='top', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 30, 80, rotation=30,\n                       halign='left', valign='center', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 80, rotation=30,\n                       halign='center', valign='center', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 80, rotation=30,\n                       halign='right', valign='center', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 30, 130, rotation=30,\n                       halign='left', valign='bottom', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 90, 130, rotation=30,\n                       halign='center', valign='bottom', \n                       testmode=True),\n                encoding='unicode')\ns += ET.tostring(svgtext.text_tosvg('ABC', 150, 130, rotation=30,\n                       halign='right', valign='bottom', \n                       testmode=True),\n                encoding='unicode')\n\nSVG(svghead.format(s))\n```\n\n----------------------------------------\n\nTITLE: Installing Schemdraw from source\nDESCRIPTION: Command for installing Schemdraw directly from a local source directory.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install ./\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Library and Dependencies\nDESCRIPTION: Imports the necessary modules from the Schemdraw library, including elements for circuit components, logic elements, transform utilities, Point class, and drawing stack management.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nimport schemdraw\nfrom schemdraw import elements as elm\nfrom schemdraw import logic\nfrom schemdraw import transform\nfrom schemdraw.util import Point\nfrom schemdraw.drawing_stack import drawing_stack\n```\n\n----------------------------------------\n\nTITLE: Connecting Upper Header to IC with OrthoLines\nDESCRIPTION: Creates a drawing with an IC with left pins connected to a header positioned above using OrthoLines with custom vertical spacing.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='l', slot='1/4'),\n                      elm.IcPin(name='B', side='l', slot='2/4'),\n                      elm.IcPin(name='C', side='l', slot='3/4'),\n                      elm.IcPin(name='D', side='l', slot='4/4')])\n    D2 = elm.Header(rows=4).at((-7,4))\n    elm.OrthoLines(n=4, dy=.6).at(D2.pin1).to(D1.D)\n```\n\n----------------------------------------\n\nTITLE: Testing Arc Segments in SVG Backend\nDESCRIPTION: Renders the same custom ArcTest element using the SVG backend. This allows comparison of how the same segments are rendered in SVG versus Matplotlib backends.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_48\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.use('svg')\nArcTest().theta(45)\n```\n\n----------------------------------------\n\nTITLE: RST Table of Contents Definition\nDESCRIPTION: ReStructuredText directive defining the table of contents structure for the SchemDraw usage documentation\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   placement\n   labels\n   styles\n   backends\n```\n\n----------------------------------------\n\nTITLE: Autodoc RST Directive for Flowchart Module\nDESCRIPTION: ReStructuredText directive to automatically generate documentation for the schemdraw.flow.flow module and its members.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/classes/flow.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: schemdraw.flow.flow\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Setting SVG backend for Schemdraw\nDESCRIPTION: Hidden code that sets the backend to SVG for rendering the circuit diagrams.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.use('svg')\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Text Rendering\nDESCRIPTION: Sets the SVG text rendering method to use path-based rendering with ziamath.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.text = 'path'  # use ziamath\n```\n\n----------------------------------------\n\nTITLE: Drawing Math Expressions with Text SVG Mode\nDESCRIPTION: Creates a drawing with a mathematical expression ($x^2$) as a label, using basic text mode in SVG rendering.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.text = 'text'   # use <text>\nd = schemdraw.Drawing(font='serif', fontsize=20)\nd += elm.Resistor().label(r'$x^2$', valign='bottom')\nd.draw(canvas='svg')\nassert '<text' in d.get_imagedata('svg').decode()\n```\n\n----------------------------------------\n\nTITLE: Point Addition Operations\nDESCRIPTION: Demonstrates Point addition operations, showing how coordinates of Point objects can be added together and verified using assertions.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\np1 = Point((1, 1))\np2 = Point((2, 2))\np3 = p1 + p2\nassert p3 == Point((3, 3))\np3\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Libraries\nDESCRIPTION: Basic setup for Schemdraw with SVG rendering mode.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/styles.rst#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw import elements as elm\nschemdraw.use('svg')\n```\n\n----------------------------------------\n\nTITLE: Documenting FritzingPart Class in Schemdraw\nDESCRIPTION: Autodoc for the FritzingPart class from the schemdraw.pictorial.fritz module, which likely represents Fritzing-compatible parts in Schemdraw.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/classes/pictorial.rst#2025-04-21_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: schemdraw.pictorial.fritz.FritzingPart\n```\n\n----------------------------------------\n\nTITLE: Point Subtraction Operations\nDESCRIPTION: Demonstrates Point subtraction operations, including subtracting one Point from another and interactions between Points and scalars.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\np4 = p2-p1\nassert p4 == Point((1, 1))\nassert p2-1 == Point((1, 1))\nassert 1 - p2 == Point((-1, -1))\np4\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Pictorial Module\nDESCRIPTION: Automodule documentation for the schemdraw.pictorial.pictorial module, which includes all members of the module.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/classes/pictorial.rst#2025-04-21_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: schemdraw.pictorial.pictorial\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Drawing with Custom Font in SVG\nDESCRIPTION: Creates a circuit diagram with a resistor labeled 'Hello' using serif font and custom font size, rendered with the SVG backend.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nd = schemdraw.Drawing(font='serif', fontsize=20)\nd += elm.Resistor().label('Hello')\nd.draw(canvas='svg')\n```\n\n----------------------------------------\n\nTITLE: Adding an HTML button link to external resources using reStructuredText\nDESCRIPTION: Embeds an HTML button image that links to additional Schemdraw examples available for purchase on buymeacoffee.com. Uses the raw HTML directive in reStructuredText to insert custom HTML.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/index.rst#2025-04-21_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. raw:: html\n\n    <a href=\"https://www.buymeacoffee.com/cdelker/e/55648\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" ></a>\n```\n\n----------------------------------------\n\nTITLE: Creating a Transform Object\nDESCRIPTION: Creates a Transform object with a rotation angle of 0 and translation vector of (0,0).\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nt = transform.Transform(0, (0,0))\nt\n```\n\n----------------------------------------\n\nTITLE: Defining reStructuredText Table of Contents for Schemdraw API Documentation\nDESCRIPTION: This snippet defines a table of contents in reStructuredText format for the Schemdraw API documentation. It includes references to various modules that define drawing elements, electrical components, logic gates, DSP elements, pictorial representations, and flowchart shapes.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/classes/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _api:\n\nClass Definitions\n=================\n\n\n.. toctree::\n\n    drawing\n    segments\n    electrical\n    logic\n    dsp\n    pictorial\n    flow\n```\n\n----------------------------------------\n\nTITLE: Rendering Complex Mathematical Expression with Size and Rotation\nDESCRIPTION: Creates an SVG text element with a more complex mathematical expression including nested superscripts and subscripts. This example sets a custom font size of 22 with left alignment and -45 degree rotation.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_39\n\nLANGUAGE: python\nCODE:\n```\nsvghead = '<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\" height=\"150pt\" width=\"150pt\">{}</svg>'\ns = svgtext.text_tosvg('$A^{xy}$ + $B_{11}$', 50, 50, halign='left', size=22, rotation=-45, testmode=True)\nSVG(svghead.format(ET.tostring(s)))\n```\n\n----------------------------------------\n\nTITLE: Importing SchemDraw Module in Python\nDESCRIPTION: Illustrates the correct way to import the SchemDraw module after a pip installation issue fix.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/CHANGES.txt#2025-04-21_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nimport schemdraw\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for schemdraw.segments Module in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the schemdraw.segments module. It includes all members of the module except for 'roundcorners'.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/classes/segments.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: schemdraw.segments\n    :members:\n    :exclude-members: roundcorners\n```\n\n----------------------------------------\n\nTITLE: Setting inline SVG format in Jupyter\nDESCRIPTION: Jupyter configuration to use SVG as the inline figure format for better vector quality in notebooks.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n%config InlineBackend.figure_format = 'svg'\n```\n\n----------------------------------------\n\nTITLE: Including External Changes File in RST\nDESCRIPTION: ReStructuredText directive to include the contents of CHANGES.txt file from the parent directory into the current document\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/changes.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGES.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Circuit Elements Documentation in RestructuredText\nDESCRIPTION: This code creates a table of contents (toctree) for the circuit elements documentation using RestructuredText markup. It sets the maximum depth to 2 and includes references to various module documentation pages.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/elements/elements.rst#2025-04-21_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n  :maxdepth: 2\n  \n  electrical\n  intcircuits\n  connectors\n  compound\n  logic\n  timing\n  dsp\n  images\n  pictorial\n  flow\n```\n\n----------------------------------------\n\nTITLE: Testing Drawing Stack and Containers\nDESCRIPTION: Tests the drawing stack management and container functionality, verifying that the drawing stack is properly maintained during nested operations.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Drawing stack, containers\nwith schemdraw.Drawing() as d:\n    assert len(drawing_stack) == 1\n    r = elm.Resistor()\n    assert r.start is not None  # Make sure attributes are accessible\n    c = elm.Capacitor()\n    with d.container() as c:\n        q = elm.Diode()\n        assert len(drawing_stack) == 2\n    assert q.start is not None  # Variables set inside the container are still accessible\n    assert len(drawing_stack) == 1\nassert len(drawing_stack) == 0\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw Segments Module\nDESCRIPTION: Imports the segments module from Schemdraw which provides primitives for creating custom schematic elements.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_46\n\nLANGUAGE: python\nCODE:\n```\nfrom schemdraw.segments import *\n```\n\n----------------------------------------\n\nTITLE: Importing Schemdraw for Circuit Diagrams in Python\nDESCRIPTION: Basic import statements for the Schemdraw library, setting up the environment for creating circuit diagrams. This snippet configures Schemdraw to use SVG as the output format.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport schemdraw\nfrom schemdraw import elements as elm\nschemdraw.use('svg')\n```\n\n----------------------------------------\n\nTITLE: Transform Point with No Offset\nDESCRIPTION: Tests transforming a point with a Transform object that has no rotation or translation.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nassert t.transform((1, 1)) == Point((1, 1))\n```\n\n----------------------------------------\n\nTITLE: Creating a Point Object\nDESCRIPTION: Creates a Point object with x and y coordinates of (1,1).\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPoint((1, 1))\n```\n\n----------------------------------------\n\nTITLE: Setting up Autodocumentation for DSP Module in RST\nDESCRIPTION: This RST (reStructuredText) directive configures Sphinx to automatically generate documentation for all members of the schemdraw.dsp.dsp module. It includes documentation for all public classes, methods, and functions within that module.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/classes/dsp.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: schemdraw.dsp.dsp\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Transform Point with Translation\nDESCRIPTION: Tests transforming a point with a Transform object that has a translation vector of (1,1).\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nt = transform.Transform(0, (1, 1))\nassert t.transform((1, 1)) == Point((2, 2))\n```\n\n----------------------------------------\n\nTITLE: Resetting SVG Configuration to Default\nDESCRIPTION: Resets SVG configuration to use path-based text rendering with SVG2 support.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.svgconfig.text = 'path'\nschemdraw.svgconfig.svg2 = True\n```\n\n----------------------------------------\n\nTITLE: Setting Text Mode Configuration in Schemdraw\nDESCRIPTION: Configures Schemdraw to use 'text' mode for rendering text. This setting affects how text will be rendered in subsequent drawing operations.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_40\n\nLANGUAGE: python\nCODE:\n```\n#schemdraw.settextmode('text')\nschemdraw.svgconfig.text = 'text'\n```\n\n----------------------------------------\n\nTITLE: Getting SVG Image Data as String\nDESCRIPTION: Retrieves the SVG image data of the current drawing as a decoded string.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nd.get_imagedata('svg').decode()\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode\nDESCRIPTION: Turns off debug mode by setting both debug arguments to False.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nschemdraw.debug(False, False)\n```\n\n----------------------------------------\n\nTITLE: Defining a reStructuredText Table of Contents for Circuit Diagram Gallery\nDESCRIPTION: Creates a table of contents for different types of circuit diagrams using reStructuredText toctree directive. This organizes various circuit diagram categories into a structured navigation menu.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/gallery/index.rst#2025-04-21_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n   analog\n   opamp\n   logicgate\n   timing\n   solidstate\n   ic\n   signalproc\n   pictorial\n   flowcharting\n   styles\n```\n\n----------------------------------------\n\nTITLE: Using OrthoLines with Custom Spacing Parameters\nDESCRIPTION: Creates a drawing with an IC and header connected by OrthoLines with custom spacing parameters dy and xstart, which control the vertical spacing and starting point offset of the connections.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_elements2.ipynb#2025-04-21_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nwith schemdraw.Drawing():\n    D1 = elm.Ic(pins=[elm.IcPin(name='A', side='l', slot='1/4'),\n                      elm.IcPin(name='B', side='l', slot='2/4'),\n                      elm.IcPin(name='C', side='l', slot='3/4'),\n                      elm.IcPin(name='D', side='l', slot='4/4')])\n    D2 = elm.Header(rows=4).at((-7,-4))\n    elm.OrthoLines(n=4, dy=.6, xstart=.1).at(D2.pin1).to(D1.D)\n```\n\n----------------------------------------\n\nTITLE: Embedded HTML Button for BuyMeACoffee\nDESCRIPTION: HTML code snippet for displaying a BuyMeACoffee button with specific styling parameters\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/contributing.rst#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://www.buymeacoffee.com/cdelker/e/55648\" target=\"_blank\"><img src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" alt=\"Buy Me A Coffee\" style=\"height: 60px !important;width: 217px !important;\" ></a>\n```\n\n----------------------------------------\n\nTITLE: Testing Capstyle in Matplotlib Backend\nDESCRIPTION: Creates a drawing with two resistors using different cap styles ('butt' and 'projecting') to demonstrate how cap styles are rendered in the Matplotlib backend.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/test/test_backend.ipynb#2025-04-21_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# Capstyle names are different in SVG vs Matplotlib\n# projecting == butt\nd = schemdraw.Drawing()\nd += elm.Resistor(capstyle='butt')\nd += elm.Resistor(capstyle='projecting')\nd.draw()\n```\n\n----------------------------------------\n\nTITLE: Installing Schemdraw with matplotlib backend\nDESCRIPTION: Pip command for installing Schemdraw with matplotlib backend dependencies for additional rendering options.\nSOURCE: https://github.com/cdelker/schemdraw/blob/master/docs/usage/start.rst#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install schemdraw[matplotlib]\n```"
  }
]