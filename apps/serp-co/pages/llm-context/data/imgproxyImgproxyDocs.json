[
  {
    "owner": "imgproxy",
    "repo": "imgproxy-docs",
    "content": "TITLE: Installing imgproxy with Docker\nDESCRIPTION: These commands pull the latest imgproxy Docker image and run it on port 8080. This is the quickest way to get imgproxy running on a local machine with Docker already installed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy Processing URLs - imgproxy_url_template - Markdown\nDESCRIPTION: Demonstrates the format of URLs used to request processed images from imgproxy. Shows several valid templates, including with direct, encoded, and encrypted source URLs and optional extensions. Inputs include signature, processing options, and source URLs; outputs are processed image responses. No external dependencies beyond an imgproxy server; extension and encoding specifics depend on application context.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/%signature/%processing_options/plain/%source_url@%extension\\nhttp://imgproxy.example.com/%signature/%processing_options/%encoded_source_url.%extension\\nhttp://imgproxy.example.com/%signature/%processing_options/enc/%encrypted_source_url.%extension\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Docker\nDESCRIPTION: Commands to pull and run the official imgproxy Docker image on port 8080. This setup provides a basic working installation of imgproxy with default configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy using Docker\nDESCRIPTION: Docker commands to pull and run the latest imgproxy image. Maps port 8080 and runs the container in interactive mode.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy URL Templates\nDESCRIPTION: The basic URL structure for imgproxy requests showing three different formats for handling source URLs: plain, encoded, and encrypted.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/%signature/%processing_options/plain/%source_url@%extension\nhttp://imgproxy.example.com/%signature/%processing_options/%encoded_source_url.%extension\nhttp://imgproxy.example.com/%signature/%processing_options/enc/%encrypted_source_url.%extension\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy using Docker\nDESCRIPTION: Commands to pull and run the latest imgproxy Docker image. This will download the official imgproxy image and start a container that listens on port 8080.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy Container Using Docker - bash\nDESCRIPTION: These bash commands pull the latest official imgproxy Docker image from the GitHub Container Registry and run it, exposing port 8080. No dependencies are required except Docker. Input parameters correspond to image versions, and output is a running Docker container with imgproxy service listening on port 8080. Ensure Docker is installed and running.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Docker\nDESCRIPTION: These commands pull the latest imgproxy Docker image and run it on port 8080. This is the quickest way to get imgproxy up and running locally.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair for imgproxy\nDESCRIPTION: Bash command to quickly generate a random 64-byte hex-encoded string suitable for use as an imgproxy key or salt.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Cloning imgproxy Source from GitHub - bash\nDESCRIPTION: This snippet clones the imgproxy repository from GitHub and changes into its directory. Dependencies: git. There are no parameters. The expected output is a new 'imgproxy' directory containing the source code, setting up for subsequent installation steps.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\\ncd imgproxy\n```\n\n----------------------------------------\n\nTITLE: Resizing Images with Resizing Meta-Option - imgproxy_url_option - Markdown\nDESCRIPTION: Describes how to resize images using the meta-option in the imgproxy URL, allowing specification of resizing type, dimensions, and optional parameters. Offers both full and abbreviated ('rs') syntax. All arguments are optional; setting width or height to zero triggers aspect ratio calculations based on the other. No dependencies besides conforming to the imgproxy URL structure.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresize:%resizing_type:%width:%height:%enlarge:%extend\\nrs:%resizing_type:%width:%height:%enlarge:%extend\n```\n\n----------------------------------------\n\nTITLE: Composing Image Proxy Request URLs in imgproxy Documentation (imgproxy_url_template)\nDESCRIPTION: These snippets provide example templates for constructing an imgproxy HTTP URL that references the proxy server, includes signing information, specifies processing options, and defines the source image as well as the target extension. This approach demonstrates the multiple ways to encode the image source (plaintext, encoded, encrypted) and clarifies the structure a client should follow to make a valid imgproxy request for image processing. Inputs include the HTTP host, signature, processing options, and the source image identifier; outputs are processed images returned by imgproxy, subject to correct signature and options specified.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/%signature/%processing_options/plain/%source_url@%extension\nhttp://imgproxy.example.com/%signature/%processing_options/%encoded_source_url.%extension\nhttp://imgproxy.example.com/%signature/%processing_options/enc/%encrypted_source_url.%extension\n```\n\n----------------------------------------\n\nTITLE: Building and Running Custom imgproxy Docker Image - bash\nDESCRIPTION: This snippet builds a custom imgproxy Docker image using the provided Dockerfile and runs it. It requires Docker and the imgproxy source. The build command uses the Dockerfile at docker/Dockerfile and tags the image as 'imgproxy.' The run command then starts the container, exposing port 8080 to the host.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy dependencies on Ubuntu\nDESCRIPTION: Commands for installing libvips, a dependency of imgproxy, on Ubuntu using apt package manager.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install libvips-dev\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on macOS using Homebrew and Go\nDESCRIPTION: Installs dependencies (`vips`, `go`) using Homebrew, then compiles the imgproxy source code. It sets environment variables `PKG_CONFIG_PATH` (to help find libffi installed by Homebrew), `CGO_LDFLAGS_ALLOW`, and `CGO_CFLAGS_ALLOW` to handle CGO build requirements on macOS. The final binary is placed in `/usr/local/bin/imgproxy`. Requires Homebrew, Go, Xcode Command Line Tools (for CGO), and the imgproxy source code.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring the Resizing Type in the URL - imgproxy_url_option - Markdown\nDESCRIPTION: Shows how to set the resizing type using either the full ('resizing_type') or abbreviated ('rt') option name. Values control aspect ratio preservation and crop behavior during resizing, with several supported types. Defaults are applied if omitted; requires corresponding parameter insertion in the URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresizing_type:%resizing_type\\nrt:%resizing_type\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy using Docker\nDESCRIPTION: Commands to pull and run the official imgproxy Docker image from GitHub Container Registry, or build and run a custom Docker image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Constructing Complete imgproxy URL with Processing Options\nDESCRIPTION: Shows a complete imgproxy URL example with multiple processing options, including preset, resize, and gravity. The example demonstrates both full and shortened option names.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_81\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/preset:sharp/resize:fill:300:400:0/gravity:sm/plain/http://example.com/images/curiosity.jpg@png\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/pr:sharp/rs:fill:300:400:0/g:sm/plain/http://example.com/images/curiosity.jpg@png\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/pr:sharp/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Docker\nDESCRIPTION: Commands to pull and run the latest imgproxy Docker image. Maps port 8080 and runs the container in interactive mode.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Enabling Cookie Passthrough for imgproxy - plaintext\nDESCRIPTION: Provides environment variables to enable and configure cookie forwarding in imgproxy requests, which may be required when transmitting authentication cookies to remote image sources. Use IMGPROXY_COOKIE_PASSTHROUGH to enable this feature, and optionally set IMGPROXY_COOKIE_BASE_URL if you need to define cookie scope explicitly beyond the default hostname/port/scheme detection. No additional dependencies are required; the configuration is suitable for applications needing image protection behind authentication. By default, both values are unset, which disables cookie passthrough.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_COOKIE_PASSTHROUGH=false\nIMGPROXY_COOKIE_BASE_URL=\n```\n\n----------------------------------------\n\nTITLE: Monitoring and Metrics Configuration\nDESCRIPTION: Environment variables for setting up various monitoring integrations including New Relic, Prometheus, Datadog, OpenTelemetry, and CloudWatch\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_74\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_NEW_RELIC_KEY=\nIMGPROXY_NEW_RELIC_APP_NAME=imgproxy\nIMGPROXY_NEW_RELIC_LABELS=label1=value1;label2=value2\nIMGPROXY_PROMETHEUS_BIND=\nIMGPROXY_PROMETHEUS_NAMESPACE=\nIMGPROXY_DATADOG_ENABLE=false\nIMGPROXY_DATADOG_ENABLE_ADDITIONAL_METRICS=false\nIMGPROXY_OPEN_TELEMETRY_ENABLE=false\nIMGPROXY_CLOUD_WATCH_SERVICE_NAME=\n```\n\n----------------------------------------\n\nTITLE: Installing and Running imgproxy with Docker\nDESCRIPTION: These commands pull the latest imgproxy Docker image and run it, mapping port 8080. This sets up imgproxy for immediate use without additional configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Objects with imgproxy\nDESCRIPTION: Example of blurring detected faces in an image with a blur strength of 7. This feature can be used for anonymization or hiding sensitive content.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Unlimited PNG Chunks\nDESCRIPTION: When set to 'true', disables the internal limit on the number of chunks processed in a PNG file. The default is 'false'. Warning: Enabling this can expose the server to memory exhaustion and Denial-of-Service (DoS) attacks via malicious PNGs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_15\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_PNG_UNLIMITED\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Source URL Prefixes\nDESCRIPTION: Defines a comma-separated whitelist of allowed source image URL prefixes. Wildcards (*) can match any characters except '/'. If blank (default), all source URLs are allowed. Example: 's3://,https://*.example.com/,local://'. Caution: Always include a trailing slash after hosts (e.g., 'http://example.com/') to prevent potential exploits like 'http://example.com@baddomain.com'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_11\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_ALLOWED_SOURCES\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Docker\nDESCRIPTION: Commands to pull and run the official imgproxy Docker image from GitHub Container Registry. This allows running imgproxy as a standalone application inside a Docker container on port 8080.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on Ubuntu - bash\nDESCRIPTION: This build command compiles imgproxy with Go on Ubuntu and outputs the binary to /usr/local/bin/imgproxy. Prerequisites: Go (latest version installed), libvips-dev, and project source code present. No custom parameters; the environment variables are set to permit certain linker and C flags. Output is the imgproxy binary ready to use.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\\\"-s|-w\\\" \\\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy URL for Image Info\nDESCRIPTION: Shows the URL structure for requesting image info from imgproxy, including signature, options, and source URL encoding methods.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/info/%signature/%info_options/plain/%source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/%encoded_source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/enc/%encrypted_source_url\n```\n\n----------------------------------------\n\nTITLE: URL Template Structure for imgproxy Info Endpoint\nDESCRIPTION: Demonstrates the three possible URL formats for accessing the /info endpoint, including plain, encoded, and encrypted source URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/info/%signature/%info_options/plain/%source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/%encoded_source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/enc/%encrypted_source_url\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy on macOS using Homebrew\nDESCRIPTION: Install imgproxy on macOS using the Homebrew package manager. This provides a simple way to install imgproxy on macOS systems.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Docker using the official image\nDESCRIPTION: Instructions for pulling and running the official imgproxy Docker image from GitHub Container Registry on port 8080.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Complete imgproxy URL Examples\nDESCRIPTION: Full examples of imgproxy URLs showing different formatting options including signed URLs, presets, and various source URL formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_78\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/preset:sharp/resize:fill:300:400:0/gravity:sm/plain/http://example.com/images/curiosity.jpg@png\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/pr:sharp/rs:fill:300:400:0/g:sm/plain/http://example.com/images/curiosity.jpg@png\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/pr:sharp/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair for imgproxy\nDESCRIPTION: Bash command to generate a random 64-byte hex-encoded string suitable for use as an imgproxy key or salt.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Launching imgproxy with Docker - Bash\nDESCRIPTION: This Bash snippet pulls and runs the latest official imgproxy Docker image. It requires Docker to be installed on your system. The 'docker pull' command fetches the image, and 'docker run -p 8080:8080 -it' launches imgproxy, exposing it on port 8080. No additional configuration is necessary for a basic start, but further options can be set via environment variables or config files if desired.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy using Docker\nDESCRIPTION: Pull the official imgproxy Docker image from GitHub Container Registry and run it. Alternatively, build a custom Docker image using the provided Dockerfile.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair for imgproxy URL Signatures in Bash\nDESCRIPTION: A Bash snippet that generates a random 64-byte hex-encoded string suitable for use as an imgproxy key or salt. Uses xxd to generate random bytes from /dev/random and formats them as a continuous hex string.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy using Docker\nDESCRIPTION: Commands to pull the official imgproxy Docker image and run it locally on port 8080. This provides a quick setup without any additional configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Latest imgproxy Source Tarball using Bash\nDESCRIPTION: Creates a directory named `imgproxy`, navigates into it, downloads the latest source code tarball (`master.tar.gz`) from the GitHub repository using `curl`, and extracts its contents into the current directory using `tar`, removing the top-level directory from the archive. Requires `curl` and `tar` utilities.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Example Signed imgproxy URL\nDESCRIPTION: This snippet shows the final, securely signed imgproxy URL. It incorporates the calculated signature (`oKfUtW34Dvo...`) placed between the host and the processing options/path, verifying the integrity and authenticity of the request parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/signing_url.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nhttp://imgproxy.example.com/oKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy DEB Package on Debian/Ubuntu using Bash\nDESCRIPTION: Installs a downloaded imgproxy DEB package on a Debian or Ubuntu system using the `dpkg` command with superuser privileges. The filename `imgproxy-3.25.0.arm64.deb` is an example and should be replaced with the actual package name. Requires root access and the `.deb` file.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg -i imgproxy-3.25.0.arm64.deb\n```\n\n----------------------------------------\n\nTITLE: Adding and Installing imgproxy with Helm to Kubernetes Cluster - bash\nDESCRIPTION: These Helm commands add the official imgproxy Helm chart repository, then install or upgrade the imgproxy deployment for Kubernetes. Helm 3 and Helm 2 commands are provided. Dependencies: Helm (version 2 or 3) and access to a Kubernetes cluster. The main parameter is the chart name and repository URL. Output is a deployed imgproxy service on the cluster.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\\n\\n# With Helm 3\\nhelm upgrade -i imgproxy imgproxy/imgproxy\\n\\n# With Helm 2\\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Gravity Option for Cropping/Alignment - imgproxy_url_option - Markdown\nDESCRIPTION: Demonstrates usage of 'gravity' and 'g' options to control cropping focus and image alignment during resizing or extending. Accepts gravity type and optional x/y offsets, with multiple available gravity types for basic and advanced positioning strategies. Also supports special gravities for smart, object-based, or focus-point-driven cropping.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_16\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ngravity:%type:%x_offset:%y_offset\\ng:%type:%x_offset:%y_offset\n```\n\n----------------------------------------\n\nTITLE: Gravity Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: These snippets define how imgproxy should align the output when cropping or resizing, using various gravity types and optional offsets. Both long ('gravity') and short ('g') forms are shown. Additional gravity types (smart, object, focus-point) cater to advanced scenarios. Inputs include gravity type, and optional X/Y offsets; output is content-centered as instructed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_16\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ngravity:%type:%x_offset:%y_offset\ng:%type:%x_offset:%y_offset\n```\n\n----------------------------------------\n\nTITLE: Drawing Detection Bounding Boxes with imgproxy\nDESCRIPTION: Example of drawing bounding boxes around detected faces in an image. This is useful for testing and visualizing object detection models.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Sanitization\nDESCRIPTION: When set to 'true' (the default), imgproxy removes potentially harmful scripts from SVG images to prevent Cross-Site Scripting (XSS) attacks. Set to 'false' to disable sanitization.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_17\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_SANITIZE_SVG\n```\n\n----------------------------------------\n\nTITLE: Setting Image Size with Size Meta-Option - imgproxy_url_option - Markdown\nDESCRIPTION: Defines the 'size' meta-option and its abbreviation ('s') for specifying output dimensions and behavior such as enlargement or extension. All arguments are optional, and defaults apply when omitted. Inputs are parsed from URL path segments, guiding the image processor accordingly.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsize:%width:%height:%enlarge:%extend\\ns:%width:%height:%enlarge:%extend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building imgproxy from Source on macOS - bash\nDESCRIPTION: This macOS-specific snippet installs libvips and Go with Homebrew, configures PKG_CONFIG_PATH, and builds imgproxy with Go. Prerequisites: Homebrew, macOS. Environment variables adapt build flags for correct compilation. Output is the compiled imgproxy binary at /usr/local/bin/imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\\nPKG_CONFIG_PATH=\\\"$(brew --prefix libffi)/lib/pkgconfig\\\" \\\\n  CGO_LDFLAGS_ALLOW=\\\"-s|-w\\\" \\\\n  CGO_CFLAGS_ALLOW=\\\"-Xpreprocessor\\\" \\\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dominant Colors with imgproxy\nDESCRIPTION: Enables calculation and return of an image's dominant colors (vibrant, light vibrant, dark vibrant, muted, light muted, dark muted). Optional parameter allows building missing colors based on found ones.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_16\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndominant_colors:%dominant_colors:%build_missed\ndc:%dominant_colors:%build_missed\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dominant_colors\": {\n    \"dark_muted\": { \"R\": 75, \"G\": 70, \"B\": 57 },\n    \"dark_vibrant\": { \"R\": 90, \"G\": 78, \"B\": 43 },\n    \"light_muted\": { \"R\": 167, \"G\": 156, \"B\": 130 },\n    \"light_vibrant\": { \"R\": 212, \"G\": 198, \"B\": 165 },\n    \"muted\": { \"R\": 155, \"G\": 146, \"B\": 120 },\n    \"vibrant\": { \"R\": 172, \"G\": 146, \"B\": 83 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing/Upgrading imgproxy via Helm using Bash\nDESCRIPTION: Adds the official imgproxy Helm chart repository and then installs or upgrades the imgproxy release within a Kubernetes cluster. Separate commands are shown for Helm 3 and Helm 2 compatibility. Requires Helm (version 2 or 3) and kubectl configured for a Kubernetes cluster.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Source File Size in imgproxy\nDESCRIPTION: Sets the maximum allowed file size for source images in bytes. Images larger than this limit will be rejected. When set to 0, the file size check is disabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_SRC_FILE_SIZE=0\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Encryption Key using Bash\nDESCRIPTION: This Bash snippet demonstrates how to generate a random 32-byte hex-encoded key suitable for AES-256 encryption using `xxd` to get random bytes from `/dev/random` and `tr` to remove newlines. This key can be used for the `IMGPROXY_SOURCE_URL_ENCRYPTION_KEY`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Docker\nDESCRIPTION: Commands to pull and run the official imgproxy Docker image from GitHub Container Registry\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair with xxd in Bash\nDESCRIPTION: This command generates a random hex-encoded string suitable for use as an imgproxy key or salt. It uses xxd to create a 64-byte random hex string from /dev/random and removes newlines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair for imgproxy URL Signing in Bash\nDESCRIPTION: A bash command that generates a random 64-byte hex-encoded string suitable for use as an imgproxy key or salt. It uses xxd to convert random bytes from /dev/random into a hex string.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Basic Chained Pipeline Syntax in imgproxy\nDESCRIPTION: Demonstrates the basic syntax for creating a chained pipeline using a minus sign (-) to separate processing steps. Shows width adjustment in first pipeline followed by trim operation in second pipeline.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Kubernetes with Helm\nDESCRIPTION: Commands to deploy imgproxy to a Kubernetes cluster using Helm. Shows installation methods for both Helm 3 and Helm 2 with the official imgproxy Helm chart.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Using Plain Source URL in imgproxy\nDESCRIPTION: Provides the source image URL directly, prepended by the '/plain/' segment. Source URLs with query strings or '@' characters need to be escaped. The extension can be specified after '@'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_78\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Key/Salt Environment Variables using Bash\nDESCRIPTION: This Bash command starts the imgproxy service, configuring it to use the provided hex-encoded key (`736563726574` for 'secret') and salt (`68656C6C6F` for 'hello') via environment variables. This enables URL signature checking, requiring all subsequent requests to include a valid signature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/signing_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Resolution for Autoquality in imgproxy\nDESCRIPTION: Specifies the maximum resolution for applying autoquality. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_MAX_RESOLUTION=0\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy using Docker\nDESCRIPTION: Pull the official imgproxy Docker image from GitHub Container Registry and run it. Alternatively, build a custom Docker image using the provided Dockerfile.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Drawing Detections on Image with imgproxy URL Option (Pro)\nDESCRIPTION: Detects objects of the specified `class_name`(s) and draws their bounding boxes, class labels, and confidence scores onto the image when `draw` is set to `1`, `t`, or `true`. If no class names are provided, detections for all found objects are drawn. Requires the object detection feature. This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_35\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndraw_detections:%draw:%class_name1:%class_name2:...:%class_nameN\ndd:%draw:%class_name1:%class_name2:...:%class_nameN\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Rotation in imgproxy URL\nDESCRIPTION: Automatically rotates images based on EXIF Orientation parameter. Allows overriding the global auto-rotate configuration for individual requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nauto_rotate:%auto_rotate\nar:%auto_rotate\n```\n\n----------------------------------------\n\nTITLE: Defining URL Processing Option Syntax for imgproxy (imgproxy_url_option)\nDESCRIPTION: This code snippet shows the standard syntax for specifying a processing option in an imgproxy URL path. The option name is followed by one or more arguments, separated by a colon (or other configured separator). It informs developers how processing parameters such as resize, crop, or gravity should be added to the URL in a structured manner. The main dependency is adherence to imgproxy's routing and options specification. Inputs are the option name and argument values; output is a properly parsed processing instruction by imgproxy. If the argument separator is changed via configuration, the format adapts accordingly as shown in the alternate example provided below.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on macOS\nDESCRIPTION: Commands for building imgproxy from source code on macOS using Homebrew-installed dependencies.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Zoom Option in imgproxy\nDESCRIPTION: Multiplies image dimensions by specified factors. Can be specified as a single value or as separate x and y factors. Can be combined with width and height.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_10\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nzoom:%zoom_x_y\nz:%zoom_x_y\n\nzoom:%zoom_x:%zoom_y\nz:%zoom_x:%zoom_y\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Authorization Secret\nDESCRIPTION: Specifies a secret token for request authorization. If set, incoming requests must include an 'Authorization: Bearer %secret%' HTTP header for imgproxy to process them. This is recommended for production environments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_8\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_SECRET\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Source Image Resolution Limit\nDESCRIPTION: Sets the maximum resolution of the source image in megapixels. Images with an actual size larger than this value will be rejected. The default value is 50. Important: For animated images, imgproxy sums the resolutions of all frames for this check unless IMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION is greater than zero.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_MAX_SRC_RESOLUTION\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on macOS with Homebrew\nDESCRIPTION: Build imgproxy from source on macOS using dependencies installed via Homebrew. This includes setting necessary environment variables for the build process.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Resize Option in imgproxy\nDESCRIPTION: The resize option defines image resizing parameters including type, dimensions, and behavior for enlarging or extending images.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresize:%resizing_type:%width:%height:%enlarge:%extend\nrs:%resizing_type:%width:%height:%enlarge:%extend\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables\nDESCRIPTION: Examples of setting AWS credentials using environment variables for both direct execution and Docker container.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from source on Ubuntu\nDESCRIPTION: Compile imgproxy from source code on Ubuntu after installing the necessary dependencies. This command builds the binary and installs it to /usr/local/bin.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy with Docker\nDESCRIPTION: Pull the official imgproxy Docker image from GitHub Container Registry and run it as a container exposing port 8080. This is the recommended way to use imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy from Source\nDESCRIPTION: Commands to clone and build imgproxy from source code\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with an Encrypted Source URL Key (Bash)\nDESCRIPTION: This Bash command sets the IMGPROXY_SOURCE_URL_ENCRYPTION_KEY environment variable to a previously generated 32-byte hex key and starts the imgproxy service. This enables source URL encryption throughout imgproxy using the specified AES-256-CBC key. The key value must be securely generated and kept confidential, and imgproxy must be installed on your system.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring TCMalloc for imgproxy\nDESCRIPTION: Commands to install TCMalloc and configure it using LD_PRELOAD for improved memory allocation in imgproxy on Debian-based systems.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy Source URLs for Swift Objects\nDESCRIPTION: Demonstrates the required URL format for referencing images stored in OpenStack Swift when using imgproxy. It shows how to convert a standard Swift object URL path (like `/v1/{account}/{container}/{object_path}`) to the 'swift://' scheme required by imgproxy, using placeholders for the container and object path. An example conversion is provided.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nswift://%{container}/%{object_path}\n\n# Example conversion:\n# Original Swift URL Path format: /v1/{account}/{container}/{object_path}\n# Example Original URL: http://127.0.0.1:8080/v1/AUTH_test/images/flowers/rose.jpg\n# Corresponding imgproxy URL: swift://images/flowers/rose.jpg\n```\n\n----------------------------------------\n\nTITLE: Resizing Image Options in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: These code snippets illustrate how to specify resizing operations in the imgproxy URL's processing options part. They offer both the full and abbreviated forms for the resize command, supporting optional arguments for resizing type, width, height, enlargement, and extension. By using these options, a developer controls how an input image is resized for the response. All parameters are optional and omitted parameters default to pre-configured values. Output is a resized image, provided arguments are valid.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresize:%resizing_type:%width:%height:%enlarge:%extend\nrs:%resizing_type:%width:%height:%enlarge:%extend\n```\n\n----------------------------------------\n\nTITLE: Applying Pixelate Effect in imgproxy URL\nDESCRIPTION: Applies a pixelate filter to the resulting image. The size value defines the individual pixel size.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_32\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npixelate:%size\npix:%size\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Source URLs in imgproxy\nDESCRIPTION: Sets a whitelist of source image URL prefixes. Wildcards can be used to match all characters except '/'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_ALLOWED_SOURCES`]: a whitelist of source image URL prefixes divided by comma. Wildcards can be included with `*` to match all characters except `/`. When blank, imgproxy allows all source image URLs. Example: `s3://,https://*.example.com/,local://`. Default: blank\n```\n\n----------------------------------------\n\nTITLE: Source URL Configuration Variables\nDESCRIPTION: Environment variables for configuring source image URL handling and replacements\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BASE_URL=\nIMGPROXY_URL_REPLACEMENTS=\"mys3://=s3://my_bucket/images/;mys3://*/=s3://my_bucket/${1}/images\"\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy RPM Package on Fedora/CentOS/RHEL\nDESCRIPTION: Command to install an exported RPM package on a Fedora, CentOS, or RHEL system. This is used when deploying imgproxy on Red Hat-based Linux distributions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm -i imgproxy-3.25.0.arm64.rpm\n```\n\n----------------------------------------\n\nTITLE: Enlarge Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: These snippets let users control whether images smaller than the requested size should be enlarged. The flag is specified using either 'enlarge' or 'el' in the path, with recognized values of 1, t, or true. Useful for ensuring minimum displayed size. Input is a boolean-like value; output is enlarged or original-size image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_13\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nenlarge:%enlarge\nel:%enlarge\n```\n\n----------------------------------------\n\nTITLE: Setting Image Compression Parameters for imgproxy - plaintext\nDESCRIPTION: Presents the core environment variables to manage overall and per-format image compression in imgproxy. IMGPROXY_QUALITY sets the global quality (default is 80%), while IMGPROXY_FORMAT_QUALITY allows specifying different compression qualities for each supported image format. No external dependencies are needed. Parameters expect either an integer for IMGPROXY_QUALITY or a comma-separated key-value list for IMGPROXY_FORMAT_QUALITY, with format names and their specific quality values. When a format's value is not provided, the default quality is used.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_QUALITY=80\nIMGPROXY_FORMAT_QUALITY=jpeg=70,avif=40,webp=60\n```\n\n----------------------------------------\n\nTITLE: Defining imgproxy Processing Presets\nDESCRIPTION: Example of preset definitions file content showing how to define default, sharp, and blurry image processing presets. Each preset is defined on a new line with optional comments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_25\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ndefault=resizing_type:fill/enlarge:1\n\n# Sharpen the image to make it look better\nsharp=sharpen:0.7\n\n# Blur the image to hide details\nblurry=blur:2\n```\n\n----------------------------------------\n\nTITLE: Defining imgproxy Presets in a Configuration File\nDESCRIPTION: Example of an imgproxy presets configuration file that defines multiple presets including default resizing behavior, image sharpening, and blurring effects. Lines starting with # are treated as comments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndefault=resizing_type:fill/enlarge:1\n\n# Sharpen the image to make it look better\nsharp=sharpen:0.7\n\n# Blur the image to hide details\nblurry=blur:2\n```\n\n----------------------------------------\n\nTITLE: Loading AWS Credentials via Environment Variables\nDESCRIPTION: Commands to run imgproxy with AWS credentials specified as environment variables, showing both direct and Docker execution methods.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Docker\nDESCRIPTION: Commands to pull and run the official imgproxy Docker image from GitHub Container Registry, as well as instructions for building a custom Docker image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Building Custom Docker Image for imgproxy\nDESCRIPTION: Commands to build and run a custom Docker image for imgproxy\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy with Helm\nDESCRIPTION: Commands to deploy imgproxy to Kubernetes using Helm chart\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Constructing an imgproxy URL for Resizing a Local Image\nDESCRIPTION: This is an example of a complete imgproxy URL used to process a local image. It specifies resizing (`rs:fit:300:200:no:0`), indicates the source URL is plain text (`/plain/`), and provides the local file path (`local:///logos/imgproxy.png`). The `@jpg` suffix requests the output format to be JPEG. This URL structure depends on the `IMGPROXY_LOCAL_FILESYSTEM_ROOT` being set correctly to resolve the `local:///` path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/local_files.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Setting Local Filesystem Root in imgproxy\nDESCRIPTION: Command to start imgproxy with local filesystem access by setting the IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable to the images directory path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Extracting and Installing imgproxy from TAR Package using Bash\nDESCRIPTION: Extracts the contents of an imgproxy TAR archive (`.tar.gz`) into a specified directory (`/opt` in this example) using the `tar` command. The actual imgproxy binary will be located within the extracted structure (e.g., `/opt/imgproxy/bin/imgproxy`). Requires the `.tar.gz` package file.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzf imgproxy-3.25.0.arm64.tar.gz -C /opt\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy with Local Filesystem Access\nDESCRIPTION: Sets the environment variable IMGPROXY_LOCAL_FILESYSTEM_ROOT to specify the root directory for local images that imgproxy can access.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy with Helm\nDESCRIPTION: Commands to deploy imgproxy to a Kubernetes cluster using the official Helm chart, supporting both Helm 2 and 3.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Kubernetes using Helm\nDESCRIPTION: Add the imgproxy Helm repository and install the chart using Helm 3 or Helm 2. This snippet demonstrates how to deploy imgproxy to a Kubernetes cluster.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Complete imgproxy URL for Image Resizing\nDESCRIPTION: Full imgproxy URL example demonstrating how to resize a local image to fit 300x200 dimensions, including the processing parameters and source path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/local_files.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Using AES-CBC Encrypted Source URL in imgproxy Pro\nDESCRIPTION: Encrypts the source URL with AES-CBC algorithm, prepended by the '/enc/' segment. The encrypted URL can be split with '/' and the extension can be specified after '.'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_80\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog.png\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Kubernetes with Helm\nDESCRIPTION: Add the imgproxy Helm repository and deploy imgproxy to a Kubernetes cluster using either Helm 3 or Helm 2 commands.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Key/Salt Pair in Bash\nDESCRIPTION: This command starts imgproxy with the specified hex-encoded key and salt environment variables. It demonstrates how to configure imgproxy to use the signature verification feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials Using Environment Variables for imgproxy\nDESCRIPTION: This snippet demonstrates how to set AWS Access Key ID and Secret Access Key using environment variables when running imgproxy standalone or with Docker. These credentials are needed for accessing AWS Secrets Manager or Parameter Store.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Size Option in imgproxy\nDESCRIPTION: The size meta-option sets width, height, enlarge, and extend parameters for image resizing. All arguments are optional.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsize:%width:%height:%enlarge:%extend\ns:%width:%height:%enlarge:%extend\n```\n\n----------------------------------------\n\nTITLE: Applying Sharpen Filter in imgproxy URL\nDESCRIPTION: Applies a sharpen filter to the resulting image. The sigma value defines the size of the sharpen mask.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_31\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsharpen:%sigma\nsh:%sigma\n```\n\n----------------------------------------\n\nTITLE: Generating Random Encryption Key for imgproxy (Bash)\nDESCRIPTION: This snippet generates a random 32-byte hex-encoded key for use with AES-256-CBC encryption in imgproxy. It uses /dev/random for secure randomness and formats the output as a continuous hex string.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair for imgproxy URL Signing\nDESCRIPTION: This bash command generates a random 64-byte hex-encoded string that can be used as a key or salt for imgproxy URL signing. It uses /dev/random for secure randomness and formats the output as a continuous hex string.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Setting Output Format in imgproxy\nDESCRIPTION: Specifies the output image format. Acts as an alias for the extension part of the URL with jpg as default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_57\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nformat:%extension\nf:%extension\next:%extension\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on Ubuntu\nDESCRIPTION: Command for building imgproxy from source code on Ubuntu after installing dependencies.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining Crop Area in imgproxy URL\nDESCRIPTION: Specifies an area of the image to be processed before resizing. Allows setting width, height, and gravity for the crop operation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_17\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncrop:%width:%height:%gravity\nc:%width:%height:%gravity\n```\n\n----------------------------------------\n\nTITLE: Generating a Random AES Encryption Key with Bash\nDESCRIPTION: This Bash snippet generates a random 32-byte hex-encoded key suitable for AES-256-CBC encryption using a combination of xxd, tr, and /dev/random. No external dependencies beyond standard Unix utilities (xxd, tr) are needed. The produced key serves as the required IMGPROXY_SOURCE_URL_ENCRYPTION_KEY environment variable in imgproxy for source URL encryption. Output is a single continuous hexadecimal string without newlines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Enabling Progressive JPEG Compression\nDESCRIPTION: When set to 'true', enables progressive JPEG encoding, which can improve perceived loading speed on the web. The default value is 'false'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_25\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_JPEG_PROGRESSIVE\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Kubernetes using Helm\nDESCRIPTION: Add the imgproxy Helm repository and install the chart using Helm 3 or Helm 2. This deploys imgproxy to a Kubernetes cluster.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Kubernetes using Helm\nDESCRIPTION: Add the imgproxy Helm repository and install the chart using Helm 3 or Helm 2. This allows for easy deployment of imgproxy to a Kubernetes cluster.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Basic Pipeline Chaining Syntax in imgproxy\nDESCRIPTION: Demonstrates the basic syntax for chaining pipelines using a minus sign (-) in the URL path to separate different processing stages.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Specifying Pipeline Split in Imgproxy URL - imgproxy_url\nDESCRIPTION: Demonstrates the URL path syntax for initiating a new pipeline in imgproxy Pro. The minus sign ('-') is used in the URL path to split operations into separate pipelines. Useful for chaining operations that should be executed in distinct processing steps. No additional software dependencies besides imgproxy Pro configuration are required.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n                        ^ the new pipeline starts here\n```\n\n----------------------------------------\n\nTITLE: Creating a New Pipeline in imgproxy URL\nDESCRIPTION: Demonstrates the syntax for starting a new processing pipeline in imgproxy by inserting a section with a minus sign (-) to the URL path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n                        ^ the new pipeline starts here\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Key or Salt Using Bash\nDESCRIPTION: This Bash snippet quickly generates a random, hex-encoded string suitable for use as an imgproxy key or salt. It utilizes \\\"xxd\\\" to produce 64 random bytes from /dev/random, then removes newlines using \\\"tr\\\". No special input is required, and the output is a single hex string; it requires the xxd and tr commands as dependencies and must be run in a Unix-like shell.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon S3 Integration for imgproxy\nDESCRIPTION: Environment variables to enable and configure Amazon S3 integration in imgproxy. Includes settings for region, endpoint, path style, multi-region support, decryption, and role assumption.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_USE_S3`]: when `true`, enables image fetching from Amazon S3 buckets. Default: `false`\n* [`IMGPROXY_S3_REGION`]: an S3 buckets region\n* [`IMGPROXY_S3_ENDPOINT`]: a custom S3 endpoint to being used by imgproxy\n* [`IMGPROXY_S3_ENDPOINT_USE_PATH_STYLE`]: controls how the S3 bucket endpoint is constructed. When `true`, the endpoint will be constructed using the path style (`https://your-endpoint.com/%bucket`). When `false`, the endpoint will be constructed using the virtual host style (`https://%bucket.your-endpoint.com`). Default: `true`\n* [`IMGPROXY_S3_MULTI_REGION`]: when `true`, allows using S3 buckets from different regions. Default: `false`\n* [`IMGPROXY_S3_USE_DECRYPTION_CLIENT`]: when `true`, enables client-side decryption. Default: `false`\n* [`IMGPROXY_S3_ASSUME_ROLE_ARN`]: a custom role to assume\n* [`IMGPROXY_S3_ASSUME_ROLE_EXTERNAL_ID`]: the external ID required to assume a custom role\n```\n\n----------------------------------------\n\nTITLE: Specifying S3 Object Version in Source URL\nDESCRIPTION: Demonstrates how to include the version ID of an S3 object in the source URL for imgproxy. This is useful when working with versioned S3 buckets.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Specifying Base64 Encoded Source URL in imgproxy\nDESCRIPTION: Shows how to provide a source image URL encoded using URL-safe Base64. The Base64 encoded string follows the processing options in the URL path. The encoded string can optionally be split into multiple segments using `/` for readability or to avoid URL length limitations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n```imgproxy_url\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n```\n\n----------------------------------------\n\nTITLE: Converting Image to Base64 Watermark Data in Bash\nDESCRIPTION: Command to convert a watermark image file to Base64 encoded string, removing newlines for environment variable usage.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with jemalloc via LD_PRELOAD in Bash\nDESCRIPTION: Demonstrates how to install the jemalloc library (using Debian's apt-get as an example) and then run imgproxy using jemalloc as the memory allocator. This is achieved by setting the LD_PRELOAD environment variable to the path of the jemalloc shared library. Using jemalloc can improve performance and reduce memory fragmentation. The specific library path may vary depending on the Linux distribution and installation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining imgproxy Presets in Configuration File\nDESCRIPTION: Example of an imgproxy presets configuration file. The file defines three presets: a default preset for basic resizing, a sharp preset for enhanced clarity, and a blurry preset for intentionally blurring images.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_71\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ndefault=resizing_type:fill/enlarge:1\n\n# Sharpen the image to make it look better\nsharp=sharpen:0.7\n\n# Blur the image to hide details\nblurry=blur:2\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables\nDESCRIPTION: Shows how to set AWS access key ID and secret access key using environment variables for both direct execution and Docker containers. This method allows imgproxy to authenticate with AWS S3.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Setting Background Color in imgproxy URL\nDESCRIPTION: Fills the resulting image background with a specified color. Accepts RGB values or hex color code.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbackground:%R:%G:%B\nbg:%R:%G:%B\n\nbackground:%hex_color\nbg:%hex_color\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Encryption Key with Bash\nDESCRIPTION: A bash snippet to generate a random 32-byte hex-encoded key suitable for AES-256-CBC encryption in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoquality by File Size (Bash)\nDESCRIPTION: Configures imgproxy globally to use the `size` method for autoquality via environment variables. `IMGPROXY_AUTOQUALITY_METHOD=\"size\"` enables the method. `IMGPROXY_AUTOQUALITY_TARGET` sets the desired file size in bytes. `IMGPROXY_AUTOQUALITY_MIN` and `IMGPROXY_AUTOQUALITY_MAX` define the acceptable quality range (1-100). `IMGPROXY_AUTOQUALITY_FORMAT_MAX` allows setting a different maximum quality specifically for certain formats like AVIF.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Optimizing Trim Operation with Chained Pipelines (imgproxy URL)\nDESCRIPTION: This snippet illustrates how to optimize the performance of the `trim` operation. The image is first resized (`rs:fit:500:500`) in the initial pipeline. The `trim:10` operation is then performed in a second, separate pipeline on the smaller, already resized image, which is significantly faster than trimming the original image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from source on Ubuntu\nDESCRIPTION: Command for building imgproxy from source code on Ubuntu after installing dependencies.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Image Quality in imgproxy\nDESCRIPTION: Sets the default quality for resulting images and allows specifying quality per format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_QUALITY`]: the default quality of the resultant image, percentage. Default: `80`\n* [`IMGPROXY_FORMAT_QUALITY`]: default quality of the resulting image per format, separated by commas. Example: `jpeg=70,avif=40,webp=60`. When a value for the resulting format is not set, the `IMGPROXY_QUALITY` value is used. Default: `avif=65`\n```\n\n----------------------------------------\n\nTITLE: Downloading a specific version of imgproxy source code\nDESCRIPTION: Commands for downloading a specific version of imgproxy source code as a tarball and extracting it to a directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Defining Pixelate Filter Option for imgproxy URLs\nDESCRIPTION: Specifies the `pixelate` option to apply a pixelation filter. The `size` value defines the size of the individual pixels in the effect. Default is disabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_30\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npixelate:%size\npix:%size\n```\n\n----------------------------------------\n\nTITLE: Comma-Separated Option Syntax with Custom Argument Separator - imgproxy_url_option - Markdown\nDESCRIPTION: Illustrates how to reformat processing options when the argument separator is set to a comma via configuration. Demonstrates adaptability of the URL structure to match IMGPROXY_ARGUMENTS_SEPARATOR settings. There are no extra dependencies, but this applies only when the argument separator environment variable is set appropriately.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name,%argument1,%argument2,...,%argumentN\n```\n\n----------------------------------------\n\nTITLE: Creating an 'awesome' Preset in imgproxy\nDESCRIPTION: Shows how to create a preset named 'awesome' that sets the resizing type to 'fill' and the resulting format to 'jpg'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pairs using Bash\nDESCRIPTION: This Bash command generates a secure, random 64-byte hex-encoded string using `/dev/random`, `xxd`, and `tr`. It's useful for quickly creating the `IMGPROXY_KEY` and `IMGPROXY_SALT` values required for enabling imgproxy URL signing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Heroku via Heroku Container Registry - bash\nDESCRIPTION: This set of bash commands demonstrates how to deploy a specific imgproxy version to Heroku using Heroku Container Registry. Dependencies: Docker and Heroku CLI. The snippet includes authentication to Heroku registry, pulling and tagging the desired Docker image version (parameter 'v3'), pushing to the Heroku registry, and releasing it. Outputs a running imgproxy app with the specified version in Heroku. Ensure correct architecture tags are used as per notes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\\nheroku stack:set container -a your-application\\nheroku container:login\\n# Replace \\\"v3\\\" with the imgproxy version you want to deploy\\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\\ndocker push registry.heroku.com/your-application/web\\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Cropping with imgproxy\nDESCRIPTION: Demonstrates how to crop images while keeping detected faces in frame using a 256x256 dimension.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/g:obj:face/...\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy on macOS with Homebrew\nDESCRIPTION: Command to install imgproxy on macOS using the Homebrew package manager. Homebrew handles the installation of all dependencies automatically.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing libvips on Ubuntu for imgproxy\nDESCRIPTION: Add a PPA repository to install a more recent version of libvips on Ubuntu, which is a dependency for imgproxy. This step is necessary for building imgproxy from source on Ubuntu.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:dhor/myway\nsudo apt-get update\nsudo apt-get install libvips-dev\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy on macOS using Homebrew\nDESCRIPTION: Install imgproxy on macOS using the Homebrew package manager.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv7 Model to ONNX (FP32) using Bash\nDESCRIPTION: Bash command using the YOLOv7 `export.py` script to convert a YOLOv7 model (`.pt`) to ONNX format with FP32 precision. Specifies weights, enables grid output, simplification, image size, and maximum width/height.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP32 precision\npython export.py \\\n  --weights yolov7-tiny.pt \\\n  --grid \\\n  --simplify \\\n  --img-size 640 640 \\\n  --max-wh 640\n```\n```\n\n----------------------------------------\n\nTITLE: Limiting GLib Malloc Arenas in Bash\nDESCRIPTION: Sets the MALLOC_ARENA_MAX environment variable to 2 before running imgproxy. This limits the number of memory allocation arenas GLib (used by libvips) can create, which can help reduce memory fragmentation in heavily multi-threaded applications like imgproxy. This is suggested as a first step if experiencing constantly growing RSS memory usage not attributable to Go's memory growth.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing and configuring jemalloc for imgproxy\nDESCRIPTION: Commands to install jemalloc and configure it using LD_PRELOAD for better memory management in imgproxy on Debian-based systems.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on Ubuntu\nDESCRIPTION: Command to build imgproxy from source code on Ubuntu and install it to the system path. Uses Go build with specific compiler flags for optimal performance.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Trimming Image Background in imgproxy URL\nDESCRIPTION: Removes surrounding background from the image. Allows specifying threshold, color, and equal trimming options for horizontal and vertical sides.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ntrim:%threshold:%color:%equal_hor:%equal_ver\nt:%threshold:%color:%equal_hor:%equal_ver\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Secret in imgproxy\nDESCRIPTION: Configures a secret token for authorization. When set, requests must include an Authorization header with this token.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SECRET=\"your_secret_token\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Output Height in imgproxy URLs - imgproxy_url_option - Markdown\nDESCRIPTION: Provides the method for configuring output image height using 'height' or abbreviated 'h' option. A zero value triggers automatic calculation from width and aspect ratio. Argument is optional and acts as an integer pixel dimension.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nheight:%height\\nh:%height\n```\n\n----------------------------------------\n\nTITLE: OpenStack Swift Storage Configuration Variables\nDESCRIPTION: Environment variables for configuring OpenStack Swift Object Storage integration in imgproxy\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_72\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_USE_SWIFT=true\nIMGPROXY_SWIFT_USERNAME=\nIMGPROXY_SWIFT_API_KEY=\nIMGPROXY_SWIFT_AUTH_URL=\nIMGPROXY_SWIFT_AUTH_VERSION=0\nIMGPROXY_SWIFT_TENANT=\nIMGPROXY_SWIFT_DOMAIN=\nIMGRPOXY_SWIFT_TIMEOUT_SECONDS=60\nIMGRPOXY_SWIFT_CONNECT_TIMEOUT_SECONDS=10\n```\n\n----------------------------------------\n\nTITLE: Creating Video Thumbnail Tiles in imgproxy\nDESCRIPTION: Generates a tiled sprite using source video frames with configurable layout and appearance parameters. This option is available in the Pro version only.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_61\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_tile:%step:%columns:%rows:%tile_width:%tile_height:%extend_tile:%trim:%fill:%focus_x:%focus_y\nvtt:%step:%columns:%rows:%tile_width:%tile_height:%extend_tile:%trim:%fill:%focus_x:%focus_y\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Redirects Limit\nDESCRIPTION: Limits the maximum number of redirects imgproxy will follow when requesting a source image, preventing potential infinite loops or excessive redirection. Setting this to 0 disallows any redirects. The default value is 10.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_7\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_MAX_REDIRECTS\n```\n\n----------------------------------------\n\nTITLE: Applying a Text Watermark (Pro Feature)\nDESCRIPTION: Illustrates the syntax for the `watermark_text` (and its alias `wmt`) imgproxy URL processing option, available in imgproxy Pro. This allows rendering text directly onto the image as a watermark. The text content must be URL-safe Base64 encoded and can optionally use Pango markup for styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Getting imgproxy Source Code\nDESCRIPTION: Commands to obtain imgproxy source code either by cloning the Git repository or downloading source tarball.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Generating Text Watermark\nDESCRIPTION: Creates a watermark from provided text with optional Pango markup styling support.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_38\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Local Filesystem Access in Bash\nDESCRIPTION: This command runs imgproxy with the IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable set to the local images directory path. This allows imgproxy to access and process local files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Setting WebP Compression Method in imgproxy\nDESCRIPTION: Configures the compression method for WebP images. Supported values are lossy, near_lossless, and lossless.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_WEBP_COMPRESSION=\"lossy\"\n```\n\n----------------------------------------\n\nTITLE: Applying Presets in imgproxy URL\nDESCRIPTION: Shows how to apply one or more presets in the imgproxy URL. This allows for quick application of predefined processing settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_72\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npreset:%preset_name1:%preset_name2:...:%preset_nameN\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n\n----------------------------------------\n\nTITLE: Installing and Enabling jemalloc for imgproxy\nDESCRIPTION: Commands to install jemalloc memory allocator and enable it using LD_PRELOAD for better memory fragmentation management in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining Output Width in imgproxy URLs - imgproxy_url_option - Markdown\nDESCRIPTION: Shows the syntax for setting the output width with the 'width' or 'w' options. Setting the value to zero enables automatic calculation based on height and aspect ratio. Argument is optional; width is interpreted as an integer pixel value.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwidth:%width\\nw:%width\n```\n\n----------------------------------------\n\nTITLE: Building a custom Docker image for imgproxy\nDESCRIPTION: Commands to build a custom Docker image from the imgproxy source code and run it on port 8080.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Faces with imgproxy\nDESCRIPTION: This example shows how to blur detected faces in an image using imgproxy. The 'blur_detections:7:face' parameter applies a blur with strength 7 to all detected faces, making it useful for anonymization.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific imgproxy Version to Heroku with Container Registry\nDESCRIPTION: Commands to deploy a specific version of imgproxy to Heroku using Heroku Container Registry. This approach allows specifying the exact imgproxy version and architecture to deploy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Setting Size-Based Autoquality in imgproxy Using Bash\nDESCRIPTION: Provides a bash configuration example for enabling autoquality based on file size with imgproxy. Key variables include IMGPROXY_AUTOQUALITY_METHOD (set to 'size'), the target file size in bytes, minimum and maximum quality constraints, and format-specific quality maxima. Requires an environment supporting bash and imgproxy. Parameters must be set according to image format and desired file size outcome.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Specific imgproxy Version Tarball using Bash\nDESCRIPTION: Creates a directory named `imgproxy`, navigates into it, downloads the source code tarball for a specific version (e.g., `v3.20.0.tar.gz`) from the GitHub repository using `curl`, and extracts its contents into the current directory using `tar`, removing the top-level directory from the archive. Requires `curl` and `tar` utilities.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: S3 URL Format with Version ID\nDESCRIPTION: Demonstrates the URL format for accessing versioned S3 objects in imgproxy\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Azure Auth via Storage Account Key\nDESCRIPTION: Sets the environment variable `IMGPROXY_ABS_KEY` to authenticate imgproxy with Azure Blob Storage using a direct Storage Account Key. This is an alternative authentication method to Managed Identity or Service Principal.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_ABS_KEY=<your_account_key>\n```\n\n----------------------------------------\n\nTITLE: Extend Aspect Ratio Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet details specifying aspect-ratio-based extension, using several alternative keywords for compatibility. When activated, imgproxy extends the image to match the target aspect ratio using gravity settings for placement. Input is a boolean and optional gravity type; output is a canvas-extended image. Requires imgproxy to interpret style-specific keywords.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_15\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nextend_aspect_ratio:%extend:%gravity\nextend_ar:%extend:%gravity\nexar:%extend:%gravity\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy using Docker\nDESCRIPTION: Pull and run the official imgproxy Docker image from GitHub Container Registry. Alternatively, build a custom Docker image using the provided Dockerfile.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with AWS Credentials\nDESCRIPTION: Examples of running imgproxy with AWS credentials using environment variables, both directly and with Docker.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing and Using jemalloc with imgproxy in Bash\nDESCRIPTION: These commands install libjemalloc2 and run imgproxy using jemalloc as the memory allocator. This is done by preloading the jemalloc library using the LD_PRELOAD environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy with Local Filesystem Root in Bash\nDESCRIPTION: This snippet shows how to run imgproxy with the IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable set to the local images directory path. This configuration allows imgproxy to access and process local files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy dependencies on Ubuntu\nDESCRIPTION: Install libvips and Go on Ubuntu, which are required for building imgproxy from source. This snippet includes commands to add a PPA for a more recent version of libvips.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:dhor/myway\nsudo apt-get update\nsudo apt-get install libvips-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Security Environment Variables - plaintext\nDESCRIPTION: Lists and explains imgproxy environment variables relevant to security configuration, such as limiting image resolution, file size, animation processing, allowed sources, CORS, and network address range permissions. No explicit dependencies are required other than using the standard method for setting environment variables appropriate to your OS or deployment tool. Each parameter includes its purpose, default value, expected inputs, and any notable caveats (such as potential denial-of-service if misconfigured). Applies to running imgproxy binary as a service.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_MAX_SRC_RESOLUTION=50\nIMGPROXY_MAX_SRC_FILE_SIZE=0\nIMGPROXY_MAX_ANIMATION_FRAMES=1\nIMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION=0\nIMGPROXY_MAX_SVG_CHECK_BYTES=32768\nIMGPROXY_MAX_REDIRECTS=10\nIMGPROXY_SECRET=your_secret_token\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\nIMGPROXY_ALLOW_ORIGIN=https://your-origin.com\nIMGPROXY_ALLOWED_SOURCES=s3://,https://*.example.com/,local://\nIMGPROXY_ALLOW_LOOPBACK_SOURCE_ADDRESSES=false\nIMGPROXY_ALLOW_LINK_LOCAL_SOURCE_ADDRESSES=false\nIMGPROXY_ALLOW_PRIVATE_SOURCE_ADDRESSES=true\nIMGPROXY_PNG_UNLIMITED=false\nIMGPROXY_SVG_UNLIMITED=false\nIMGPROXY_SANITIZE_SVG=true\nIMGPROXY_IGNORE_SSL_VERIFICATION=false\nIMGPROXY_DEVELOPMENT_ERRORS_MODE=false\nIMGPROXY_ALLOW_SECURITY_OPTIONS=false\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Watermark URL in imgproxy (Pro)\nDESCRIPTION: Specifies a custom image URL to be used as a watermark. The URL should be URL-safe Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_39\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Specifying Local Image Path for imgproxy\nDESCRIPTION: This shows the format for specifying a local image file as the source URL for imgproxy. The `local:///` prefix indicates a local file, and the subsequent path (`logos/imgproxy.png`) is relative to the directory defined by the `IMGPROXY_LOCAL_FILESYSTEM_ROOT` environment variable. This specific path refers to an image located at `/path/to/project/images/logos/imgproxy.png` based on the example configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nlocal:///logos/imgproxy.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Source URL Encryption in imgproxy\nDESCRIPTION: Sets the hex-encoded key used for source URL encryption using the AES-CBC algorithm.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_SOURCE_URL_ENCRYPTION_KEY`]: hex-encoded key used for source URL encryption. Default: blank\n```\n\n----------------------------------------\n\nTITLE: Setting Watermark Data in imgproxy\nDESCRIPTION: Specifies the Base64-encoded image data for the watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_64\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_WATERMARK_DATA=\"base64_encoded_data\"\n```\n\n----------------------------------------\n\nTITLE: Generating Random Encryption Key for imgproxy (Bash)\nDESCRIPTION: This snippet generates a random 32-byte encryption key for use with imgproxy's source URL encryption feature. The key is hex-encoded and suitable for AES-256-CBC encryption.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Watermark URL\nDESCRIPTION: Specifies a custom image URL to be used as watermark. URL must be Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_37\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Pulling and Running imgproxy Docker Container using Bash\nDESCRIPTION: Downloads the latest official imgproxy image from GitHub Container Registry (ghcr.io) and starts a container named 'imgproxy', mapping the host's port 8080 to the container's port 8080 for accessibility. This is the highly recommended method for running imgproxy. Requires Docker to be installed and running.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy on macOS via Homebrew using Bash\nDESCRIPTION: Installs imgproxy on macOS using the Homebrew package manager. This command fetches and installs the `imgproxy` formula from the default Homebrew taps. Requires Homebrew to be installed on the system.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced PNG Compression in imgproxy\nDESCRIPTION: Sets options for PNG compression, including interlacing and quantization settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_PNG_INTERLACED=false\nIMGPROXY_PNG_QUANTIZE=false\nIMGPROXY_PNG_QUANTIZATION_COLORS=256\n```\n\n----------------------------------------\n\nTITLE: Using Presets in Only-Presets Mode\nDESCRIPTION: Example URL showing how to use multiple presets (thumbnail, blurry, watermarked) in presets-only mode where regular processing options are disabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Defining Rotate Option for imgproxy URLs\nDESCRIPTION: Specifies the `rotate` option to rotate the image by a specified angle. Only 90-degree increments (0, 90, 180, 270) are supported. EXIF orientation is applied before this rotation unless autorotation is disabled. Default angle is 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nrotate:%angle\nrot:%angle\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Source Image Resolution in imgproxy\nDESCRIPTION: Sets the maximum allowed resolution for source images in megapixels. Images exceeding this limit will be rejected.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_MAX_SRC_RESOLUTION`]: the maximum resolution of the source image, in megapixels. Images with larger actual size will be rejected. Default: `50`\n```\n\n----------------------------------------\n\nTITLE: Formatting imgproxy Processing Options\nDESCRIPTION: The standard format for specifying processing options in imgproxy URLs, showing how option names and arguments are separated.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Setting Device Pixel Ratio Schema - imgproxy_url_option - Markdown\nDESCRIPTION: Defines the 'dpr' processing option for adjusting dimensions according to device pixel ratios (HiDPI support). Accepts a single numeric scaling factor; influences not only output dimensions but also gravity, watermark, and padding offsets. Must be positive; optional argument.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_12\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndpr:%dpr\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Local Filesystem Access\nDESCRIPTION: Command to start imgproxy with local filesystem access by setting the IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable to point to the images directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Resizing Type Option in imgproxy\nDESCRIPTION: Defines how imgproxy will resize the source image, with options like fit, fill, force, and auto to handle aspect ratio.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresizing_type:%resizing_type\nrt:%resizing_type\n```\n\n----------------------------------------\n\nTITLE: Example Imgproxy URL with Encrypted Source\nDESCRIPTION: Complete Imgproxy URL using the encrypted source URL with resize parameters\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/encrypting_source_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/rs:fit:300:300/enc/p5VjorNdhs7mRRw8gA9TWoRlGci3l1kuzqN43UQlRaRIQ0qtBKW3qFABIsx-ZRz_cVc8iVTYbhsNsxNBL1BHaQ\n```\n\n----------------------------------------\n\nTITLE: Drawing Bounding Boxes for Detected Objects in imgproxy URL\nDESCRIPTION: Shows how to use the `draw_detections` parameter in an imgproxy URL to draw bounding boxes around detected objects. In this case, it targets faces (`:1:face`), which is useful for visualizing object detection results or debugging models.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_24\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Fine-Tuning JPEG Compression with imgproxy - plaintext\nDESCRIPTION: Configures advanced JPEG compression features in imgproxy using additional environment variables. Progressive, chroma subsampling, trellis quantization, deringing, scan optimization, and quantization tables can be precisely controlled, with most options being toggled booleans. Some options are marked as pro (commercial version only). All parameters expect 'true' or 'false', except IMGPROXY_JPEG_QUANT_TABLE, which expects an integer value (details provided in documentation). Requires the imgproxy commercial build for options with ((pro)).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_JPEG_PROGRESSIVE=false\nIMGPROXY_JPEG_NO_SUBSAMPLE=false\nIMGPROXY_JPEG_TRELLIS_QUANT=false\nIMGPROXY_JPEG_OVERSHOOT_DERINGING=false\nIMGPROXY_JPEG_OPTIMIZE_SCANS=false\nIMGPROXY_JPEG_QUANT_TABLE=0\n```\n\n----------------------------------------\n\nTITLE: Drawing Bounding Boxes for Detected Objects with imgproxy\nDESCRIPTION: This snippet illustrates how to make imgproxy draw bounding boxes around detected objects of specified classes (faces in this example). This is useful for testing object detection models.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on Ubuntu using Go\nDESCRIPTION: Compiles the imgproxy source code located in the current directory using the Go compiler (`go build`). It sets the `CGO_LDFLAGS_ALLOW` environment variable to permit specific linker flags (`-s` to strip symbols, `-w` to omit DWARF debug info) and outputs the resulting executable binary to `/usr/local/bin/imgproxy`. Requires Go, libvips-dev (installed previously), and the imgproxy source code.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Formatting Google Cloud Storage URL with Generation Parameter\nDESCRIPTION: Demonstrates the URL format for accessing files in Google Cloud Storage buckets with an optional generation parameter. The URL follows the pattern gs://<bucket_name>/<file_key> with an optional query string for the generation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy Docker Image\nDESCRIPTION: Commands to pull and run the latest imgproxy Docker image. The container exposes port 8080 for HTTP requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Health Check for imgproxy\nDESCRIPTION: YAML configuration snippet for setting up health checks in Docker Compose. Defines the health check command, timeout, interval, and retry settings for monitoring imgproxy's health status.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-Based Autoquality in imgproxy Using Bash\nDESCRIPTION: Shows how to enable machine learning-based autoquality via bash environment vars for imgproxy. It specifies the method (ml), DSSIM target, allowed error, quality limits, format-specific minima and maxima, and the required neural network files for JPEG, WebP, and AVIF in Tensorflow frozen graph format. Requires properly trained neural networks placed at the given paths. Ensures initial quality is predicted using deep learning; falls back to DSSIM if models are missing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/autoquality.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, and AVIF\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\n```\n\n----------------------------------------\n\nTITLE: Installing libvips Development Package on Ubuntu using Bash\nDESCRIPTION: Updates the apt package list and installs the `libvips-dev` package using the apt package manager on Ubuntu. This package provides the necessary headers and libraries for compiling software that depends on libvips, like imgproxy. Requires superuser privileges (`sudo`). Note that the repository version might be outdated.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install libvips-dev\n```\n\n----------------------------------------\n\nTITLE: Setting Local Filesystem Root for imgproxy (Bash)\nDESCRIPTION: This command demonstrates how to start the imgproxy service while configuring it to access local files. The `IMGPROXY_LOCAL_FILESYSTEM_ROOT` environment variable is set to the root directory (`/path/to/project/images`) from which local files will be served before launching the `imgproxy` process. This allows imgproxy to resolve `local:///` URLs relative to this specified path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Storage Integration for imgproxy\nDESCRIPTION: Environment variables to enable and configure Google Cloud Storage integration in imgproxy. Includes settings for enabling the feature, specifying the JSON key, and custom endpoint.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_USE_GCS`]: when `true`, enables image fetching from Google Cloud Storage buckets. Default: `false`\n* [`IMGPROXY_GCS_KEY`]: the Google Cloud JSON key. When set, enables image fetching from Google Cloud Storage buckets. Default: blank\n* [`IMGPROXY_GCS_ENDPOINT`]: a custom Google Cloud Storage endpoint to being used by imgproxy\n```\n\n----------------------------------------\n\nTITLE: Generating Text Watermark in imgproxy (Pro)\nDESCRIPTION: Creates a watermark from provided text. Supports Pango markup for styling. Text should be URL-safe Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_40\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Defining Basic imgproxy Preset Syntax\nDESCRIPTION: Shows the basic syntax for defining a preset in imgproxy configuration. The format uses a preset name followed by processing options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowance of Private Source Addresses\nDESCRIPTION: When set to 'true', allows imgproxy to request source images from private IP addresses (10.0.0.0-10.255.255.255, 172.16.0.0-172.31.255.255, 192.168.0.0-192.168.255.255, and IPv6 equivalents). The default value is 'true'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_14\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_ALLOW_PRIVATE_SOURCE_ADDRESSES\n```\n\n----------------------------------------\n\nTITLE: Setting Watermark Opacity in imgproxy\nDESCRIPTION: Specifies the base opacity for the watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_68\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_WATERMARK_OPACITY=0.5\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via Environment Variables in Bash\nDESCRIPTION: Example of setting AWS access credentials as environment variables when running imgproxy. This method allows temporary credential configuration without modifying configuration files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Drawing Object Detections in Imgproxy\nDESCRIPTION: Detects objects of specified classes and draws their bounding boxes, classes, and confidences on the processed image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_35\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndraw_detections:%draw:%class_name1:%class_name2:...:%class_nameN\ndd:%draw:%class_name1:%class_name2:...:%class_nameN\n```\n\n----------------------------------------\n\nTITLE: Defining Auto Rotate Option for imgproxy URLs\nDESCRIPTION: Specifies the `auto_rotate` option. When set to `1`, `t`, or `true`, imgproxy automatically rotates images based on EXIF Orientation data, if available. This overrides the global `IMGPROXY_AUTO_ROTATE` configuration for the request. The orientation tag is always removed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nauto_rotate:%auto_rotate\nar:%auto_rotate\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Key/Salt Configuration in Bash\nDESCRIPTION: A command that starts imgproxy with the specified key and salt environment variables for URL signing. This example uses 'secret' (736563726574 in hex) as the key and 'hello' (68656C6C6F in hex) as the salt.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: imgproxy URL for Local Image Resizing\nDESCRIPTION: Complete imgproxy URL example showing how to resize a local image to fit 300x200 dimensions with specific processing parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_sources/local_files.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv4 Model to ONNX Format\nDESCRIPTION: Commands to install dependencies and export YOLOv4 model to ONNX format with specified parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install onnxruntime\n\npython demo_pytorch2onnx.py <weight_file> <image_path> <batch_size> <n_classes> <input_width> <input_height>\n\n# Example\npython demo_pytorch2onnx.py yolov4.pth dog.jpg 1 80 416 416\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Allowed Origin\nDESCRIPTION: Specifies the origin value for the 'Access-Control-Allow-Origin' CORS header. If set, imgproxy will include CORS headers in its responses, allowing requests from the specified origin. CORS headers are disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_10\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_ALLOW_ORIGIN\n```\n\n----------------------------------------\n\nTITLE: Adjusting Image Properties in imgproxy URL\nDESCRIPTION: Meta-option for adjusting brightness, contrast, and saturation of the resulting image. All parameters are optional.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_24\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nadjust:%brightness:%contrast:%saturation\na:%brightness:%contrast:%saturation\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables\nDESCRIPTION: Shows how to configure AWS credentials using environment variables, both for direct execution and Docker deployment\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Source URL Encryption Key (Bash)\nDESCRIPTION: This command demonstrates how to start imgproxy with a configured source URL encryption key. The key is set using the IMGPROXY_SOURCE_URL_ENCRYPTION_KEY environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Launching imgproxy with Specific Key and Salt in Bash\nDESCRIPTION: This command starts the imgproxy server with explicit key and salt values set through IMGPROXY_KEY and IMGPROXY_SALT environment variables. Both variables must contain hex-encoded strings, typically generated as in the previous Bash example. Intended for local or development environments, this setup activates signature checking and renders unsigned URLs invalid.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing and Enabling jemalloc for imgproxy\nDESCRIPTION: Commands to install jemalloc memory allocator and enable it using LD_PRELOAD for better memory fragmentation handling in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing and Using TCMalloc with imgproxy in Debian-based Systems\nDESCRIPTION: This snippet demonstrates how to install TCMalloc on a Debian-based system and run imgproxy with TCMalloc preloaded. TCMalloc is Google's customized implementation of malloc() and operator new, designed for fast, multi-threaded memory allocation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Credentials File in INI Format\nDESCRIPTION: Example of an AWS credentials file that can be placed in the .aws/credentials path in your home directory. This file contains your AWS access key ID and secret access key.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Objects in imgproxy\nDESCRIPTION: Shows how to blur detected faces with a blur intensity of 7, useful for anonymization purposes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Principal Authentication\nDESCRIPTION: Environment variables required for authenticating with Azure Blob Storage using a Service Principal with secret authentication method.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_CLIENT_ID=your_client_id\nAZURE_TENANT_ID=your_tenant_id\nAZURE_CLIENT_SECRET=your_client_secret\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOX Model to ONNX Format\nDESCRIPTION: Command to export a YOLOX model to ONNX format with inference decoding enabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython tools/export_onnx.py \\\n  -f /path/to/experiment.py \\\n  -c /path/to/checkpoint.pth \\\n  --output-name /path/to/output.onnx \\\n  --decode_in_inference\n```\n\n----------------------------------------\n\nTITLE: Swift URL Format for imgproxy Source Images\nDESCRIPTION: The URL format convention for referring to images stored in Swift when using imgproxy. This shows how to convert a standard Swift object URL to the format imgproxy expects.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nswift://%{container}/%{object_path}\n```\n\n----------------------------------------\n\nTITLE: Setting Autoquality with Machine Learning via URL (imgproxy_url)\nDESCRIPTION: Shows how to invoke the ML-based autoquality method for a specific request using URL parameters. The format is `autoquality:method:target:min_quality:max_quality:allowed_error`. This example uses the `ml` method, targets a DSSIM of 0.02, allows quality between 70 and 80, and accepts a DSSIM error up to 0.001. The imgproxy server must be configured with the necessary neural network models for this to work.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/autoquality.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair in Bash\nDESCRIPTION: Bash command to generate a random 64-byte hex-encoded string that can be used as a key or salt for imgproxy URL signing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Environment Variables\nDESCRIPTION: List of environment variables used to configure the Datadog tracer integration with imgproxy. These variables control connection settings, application identification, trace behavior, and debugging options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/monitoring/datadog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nDD_AGENT_HOST=localhost\nDD_TRACE_AGENT_PORT=8126\nDD_DOGSTATSD_PORT=8125\nDD_SERVICE=imgproxy\nDD_ENV=\nDD_TRACE_SOURCE_HOSTNAME=\nDD_TRACE_REPORT_HOSTNAME=false\nDD_TAGS=datacenter:njc,key2:value2\nDD_TRACE_ANALYTICS_ENABLED=false\nDD_RUNTIME_METRICS_ENABLED=false\nDD_TRACE_STARTUP_LOGS=true\nDD_TRACE_DEBUG=false\nIMGPROXY_DATADOG_ENABLE=true\nIMGPROXY_DATADOG_ENABLE_ADDITIONAL_METRICS=true\n```\n\n----------------------------------------\n\nTITLE: Specifying Azure Blob Storage Source Image URL Format for imgproxy\nDESCRIPTION: Shows the required URL format for referencing images stored in Azure Blob Storage when requesting them through imgproxy. The format uses the `abs://` scheme followed by the bucket name and the file key (object path within the bucket).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nabs://%bucket_name/%file_key\n```\n\n----------------------------------------\n\nTITLE: Applying a Configured Watermark with imgproxy URL Options\nDESCRIPTION: Demonstrates the syntax for the `watermark` (and its alias `wm`) imgproxy URL processing option. This option applies the globally configured watermark (set via environment variables) to the processed image. It allows specifying opacity modifier, position, x/y offsets, and scale relative to the image size.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Security Environment Variables Configuration\nDESCRIPTION: Configuration variables for controlling image processing security features including maximum resolution, file size limits, animation frame limits, and URL restrictions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: properties\nCODE:\n```\nIMGPROXY_MAX_SRC_RESOLUTION=16.8\nIMGPROXY_MAX_SRC_FILE_SIZE=0\nIMGPROXY_MAX_ANIMATION_FRAMES=1\nIMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION=0\nIMGPROXY_MAX_SVG_CHECK_BYTES=32768\nIMGPROXY_MAX_REDIRECTS=10\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-Based imgproxy Autoquality via Bash\nDESCRIPTION: Sets environment variables to enable size-based autoquality (`IMGPROXY_AUTOQUALITY_METHOD=\"size\"`), define the target file size in bytes (`IMGPROXY_AUTOQUALITY_TARGET`), set minimum/maximum quality levels (`IMGPROXY_AUTOQUALITY_MIN`, `IMGPROXY_AUTOQUALITY_MAX`), and specify format-specific maximum quality (`IMGPROXY_AUTOQUALITY_FORMAT_MAX`). This globally configures imgproxy to adjust quality to meet a target file size.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Watermark via URL (Pro Feature)\nDESCRIPTION: Shows the syntax for the `watermark_url` (and its alias `wmu`) imgproxy URL processing option, available in imgproxy Pro. This option allows specifying a custom watermark image dynamically per request by providing its Base64-encoded URL. This overrides any globally configured watermark for the request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Using Base64 Encoded Source URL in imgproxy\nDESCRIPTION: Illustrates how to use a Base64 encoded source URL in an imgproxy request. This format allows for longer URLs and includes an optional file extension.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_79\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Selecting WebP Compression Method (Pro)\nDESCRIPTION: ((pro)) Specifies the compression method for WebP output. Supported values are 'lossy' (default), 'near_lossless', and 'lossless'. Requires imgproxy Pro.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_34\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_WEBP_COMPRESSION\n```\n\n----------------------------------------\n\nTITLE: Installing and Enabling TCMalloc for imgproxy\nDESCRIPTION: Commands to install Google's TCMalloc and enable it using LD_PRELOAD for improved memory allocation performance in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Image URL in ImgProxy URLs\nDESCRIPTION: Specifies a custom fallback image URL that imgproxy will use if the primary image cannot be processed, with the URL being Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_65\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nfallback_image_url:%url\nfiu:%url\n```\n\n----------------------------------------\n\nTITLE: Extend Aspect Ratio Option in imgproxy\nDESCRIPTION: Extends the image to match the requested aspect ratio, with optional gravity parameter for positioning.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_14\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nextend_aspect_ratio:%extend:%gravity\nextend_ar:%extend:%gravity\nexar:%extend:%gravity\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Detection in imgproxy\nDESCRIPTION: Set up the necessary configuration variables for enabling object detection in imgproxy. This includes paths to the neural network config, weights, classes file, and the input size.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OBJECT_DETECTION_CONFIG=<path_to_config>\nIMGPROXY_OBJECT_DETECTION_WEIGHTS=<path_to_weights>\nIMGPROXY_OBJECT_DETECTION_CLASSES=<path_to_classes>\nIMGPROXY_OBJECT_DETECTION_NET_SIZE=416\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables\nDESCRIPTION: Example showing how to set AWS credentials using environment variables for both direct execution and Docker container\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Basic Watermark Processing Option in imgproxy\nDESCRIPTION: URL processing option syntax for adding watermarks to images with configurable opacity, position, offset and scale parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLO-NAS Model to ONNX Format\nDESCRIPTION: Python script to export YOLO-NAS model to ONNX format with customizable parameters and quantization.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom super_gradients.training import models\nfrom super_gradients.common.object_names import Models\nfrom super_gradients.conversion import DetectionOutputFormatMode\nfrom super_gradients.conversion.conversion_enums import ExportQuantizationMode\n\n# Load the model from the SuperGradients model zoo\nmodel = models.get(\n  Models.YOLO_NAS_S,\n  pretrained_weights=\"coco\"\n)\n# Or load the model from a checkpoint\nmodel = models.get(\n  Models.YOLO_NAS_S,\n  num_classes=80,\n  checkpoint_path=f\"neural-yolo_nas_s.pth\"\n)\n\nmodel.eval()\nmodel.prep_model_for_conversion(input_size=[1, 3, 640, 640])\n\n# Disable preprocessing and postprocessing since imgproxy will handle it\nmodel.export(\n  \"/content/yolo_nas_s.onnx\",\n  preprocessing=False,\n  postprocessing=False,\n  output_predictions_format=DetectionOutputFormatMode.FLAT_FORMAT,\n  input_image_shape=[640, 640],\n  quantization_mode=ExportQuantizationMode.FP16,\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Rotation Based on EXIF in imgproxy (Environment Variable)\nDESCRIPTION: If set to `true`, imgproxy automatically rotates images according to their EXIF Orientation tag, if present. The orientation tag is always removed from the image afterward. Default is `true`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_AUTO_ROTATE`\n```\n\n----------------------------------------\n\nTITLE: Defining Brightness Adjustment Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `brightness` option (Pro feature) to adjust the image brightness. The `brightness` value is an integer ranging from -255 to 255. Default is 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_25\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbrightness:%brightness\nbr:%brightness\n```\n\n----------------------------------------\n\nTITLE: Defining Padding Option for imgproxy URLs\nDESCRIPTION: Specifies the `padding` option using CSS-style syntax (`top`, `right`, `bottom`, `left`). All arguments are optional, but at least one must be set. Padding is applied after transformations (except watermarking), enlarges the image, is filled based on the `background` option, and respects the `dpr` setting.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_19\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npadding:%top:%right:%bottom:%left\npd:%top:%right:%bottom:%left\n```\n\n----------------------------------------\n\nTITLE: Defining Background Color Option for imgproxy URLs\nDESCRIPTION: Specifies the `background` color option. It fills the resulting image background with the specified color, either using RGB values (0-255) or a hex code. This is useful when converting images with alpha channels to formats like JPEG. Providing no arguments disables background manipulation. Default is disabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbackground:%R:%G:%B\nbg:%R:%G:%B\n\nbackground:%hex_color\nbg:%hex_color\n```\n\n----------------------------------------\n\nTITLE: Selecting Page in Multi-page Documents in ImgProxy URLs\nDESCRIPTION: When a source image supports pagination (PDF, TIFF) or animation (GIF, WebP), this option specifies which page to use. Page numeration starts from zero with a default of 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_58\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npage:%page\npg:%page\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Azure Auth via Service Principal Certificate\nDESCRIPTION: Defines the environment variables needed for authenticating imgproxy with Azure Blob Storage using a Service Principal and a certificate. Requires `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, `AZURE_CLIENT_CERTIFICATE_PATH`, and optionally `AZURE_CLIENT_CERTIFICATE_PASSWORD` (for PFX) and `AZURE_CLIENT_CERTIFICATE_CHAIN`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_CLIENT_ID: the client ID for your application registration\nAZURE_TENANT_ID: the tenant ID for your application registration\nAZURE_CLIENT_CERTIFICATE_PATH: the path to a PFX or PEM-encoded certificate including private key\nAZURE_CLIENT_CERTIFICATE_PASSWORD: (optional) the password protecting the certificate file (PFX (PKCS12))\nAZURE_CLIENT_CERTIFICATE_CHAIN: (optional) send certificate chain in x5c header to support subject name / issuer-based authentication\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Healthcheck for imgproxy\nDESCRIPTION: Example Docker Compose configuration that uses the imgproxy health command to perform health checks. The configuration includes timeout, interval, and retry settings for monitoring the health of an imgproxy container.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check for imgproxy in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to set up a health check for imgproxy in a Docker Compose configuration. It uses the 'imgproxy health' command to test the service's health, with specified timeout, interval, and retry settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials and Running imgproxy - Bash\nDESCRIPTION: Demonstrates two methods for providing AWS credentials to imgproxy in Bash: directly passing them as environment variables in a shell session when executing imgproxy, and injecting them into a Docker container running imgproxy using Docker's `-e` option for environment variables. Dependencies: imgproxy executable or corresponding Docker image, valid AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values. Inputs are the environment variables. The output is the invocation of imgproxy with required AWS credentials available in its environment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File (INI)\nDESCRIPTION: Illustrates the structure and content of the AWS shared credentials file located at `~/.aws/credentials`. This file uses INI format to store access keys under profiles (e.g., `[default]`), providing an alternative method for imgproxy to obtain AWS credentials if environment variables are not set.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n\n```\n\n----------------------------------------\n\nTITLE: Rotating Images by Specific Angle with imgproxy URL Option\nDESCRIPTION: Rotates the image by the specified `angle`. EXIF orientation is applied before this rotation unless auto-rotation is disabled. Only 0, 90, 180, 270 degree angles are supported. The default rotation angle is 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nrotate:%angle\nrot:%angle\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair in Bash\nDESCRIPTION: Command to generate a random 64-byte hex-encoded string that can be used as a key or salt for imgproxy URL signing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy RPM Package on Fedora/CentOS/RHEL using Bash\nDESCRIPTION: Installs a downloaded imgproxy RPM package on a Fedora, CentOS, or RHEL system using the `rpm` command with superuser privileges. The filename `imgproxy-3.25.0.arm64.rpm` is an example and should be replaced with the actual package name. Requires root access and the `.rpm` file. Missing dependencies must be installed manually.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm -i imgproxy-3.25.0.arm64.rpm\n```\n\n----------------------------------------\n\nTITLE: Configuring WebP Options in imgproxy\nDESCRIPTION: Sets WebP compression and smart subsample options for image processing. All arguments are optional and match Advanced WebP compression configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_56\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwebp_options:%compression:%smart_subsample\nwebpo:%compression:%smart_subsample\n```\n\n----------------------------------------\n\nTITLE: Configuring Amazon CloudWatch Metrics for imgproxy\nDESCRIPTION: Environment variables to enable and configure Amazon CloudWatch metrics integration in imgproxy. Includes settings for service name, namespace, and region.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_CLOUD_WATCH_SERVICE_NAME`]: the value of the `ServiceName` dimension which will be used in the metrics. Default: blank\n* [`IMGPROXY_CLOUD_WATCH_NAMESPACE`]: the CloudWatch namespace for the metrics\n* [`IMGPROXY_CLOUD_WATCH_REGION`]: the code of the AWS region to which the metrics should be sent\n```\n\n----------------------------------------\n\nTITLE: Patching and Exporting YOLOv10 to ONNX Format Using Shell (bash)\nDESCRIPTION: This example displays patching YOLOv10's official code via curl and git apply to disable unwanted postprocessing before exporting the model to ONNX using export_opencv.py in both FP32 and FP16. Requirements: Python, git, curl, patched YOLOv10 code, model weights, CUDA GPU for FP16. Exports ONNX models suitable for imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -Ls https://gist.githubusercontent.com/DarthSim/216551dfd58e5628290e90c1d358704b/raw/27a828a48c84f93e0e70b14923bf697541ebe5a1/yolov10.patch | git apply\n```\n\nLANGUAGE: bash\nCODE:\n```\n# Export with FP32 precision\npython export_opencv.py \\\n  --weights yolov10s.pt \\\n  --imgsz 640 640\n\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export_opencv.py \\\n  --weights yolov10s.pt \\\n  --imgsz 640 640 \\\n  --half\n```\n\n----------------------------------------\n\nTITLE: Text Watermark Option in imgproxy\nDESCRIPTION: URL option format for applying text watermarks using URL-safe Base64-encoded text with optional Pango markup styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy OpenTelemetry Integration\nDESCRIPTION: Environment variables to configure sending request traces and metrics from imgproxy to an OpenTelemetry collector. Allows specifying the endpoint, protocol, service name, enabling metrics, TLS settings, propagators, trace ID generator, and connection timeout.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_ENDPOINT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_PROTOCOL\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_SERVICE_NAME\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_SERVER_CERT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_CLIENT_CERT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_CLIENT_KEY\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_GRPC_INSECURE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_PROPAGATORS\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_TRACE_ID_GENERATOR\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_CONNECTION_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Defining Presets in imgproxy\nDESCRIPTION: Demonstrates the syntax for defining a preset in imgproxy. Presets are named sets of processing or info options that can be used to shorten URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Example Imgproxy URL in Presets-Only Mode (URL)\nDESCRIPTION: This snippet illustrates an example imgproxy URL when the `IMGPROXY_ONLY_PRESETS` configuration is enabled. In this mode, the processing options section of the URL directly lists the names of the presets to apply (e.g., 'thumbnail', 'blurry', 'watermarked') instead of individual processing options. Requires `IMGPROXY_ONLY_PRESETS` set to true.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy on Ubuntu\nDESCRIPTION: Command to build imgproxy from source on Ubuntu after installing dependencies.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Sizing Image Options in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet details how to define image size in the imgproxy processing options, using the 'size' or 's' parameters. Arguments include width, height, enlargement, and extension settings. All arguments can be omitted for default values. This option is a simplification compared to 'resize' and directly defines the output image's size, which imgproxy applies before processing further options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsize:%width:%height:%enlarge:%extend\ns:%width:%height:%enlarge:%extend\n```\n\n----------------------------------------\n\nTITLE: Configuring JPEG Options in imgproxy (Pro)\nDESCRIPTION: Allows fine-tuning of JPEG saving options, including progressive encoding, subsampling, and various optimization techniques.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_54\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\njpeg_options:%progressive:%no_subsample:%trellis_quant:%overshoot_deringing:%optimize_scans:%quant_table\njpgo:%progressive:%no_subsample:%trellis_quant:%overshoot_deringing:%optimize_scans:%quant_table\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv4 Model to ONNX using Bash\nDESCRIPTION: Bash command executing a Python script (`demo_pytorch2onnx.py`) to convert a YOLOv4 PyTorch model (`.pth`) to ONNX format. It requires the weight file path, an example image path, batch size, number of classes, and input dimensions (width, height). An example command is provided.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npython demo_pytorch2onnx.py <weight_file> <image_path> <batch_size> <n_classes> <input_width> <input_height>\n\n# Example\npython demo_pytorch2onnx.py yolov4.pth dog.jpg 1 80 416 416\n```\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Styles to SVG in imgproxy (Pro)\nDESCRIPTION: Prepends a <style> node with provided CSS content to the <svg> node of a source SVG image. Style should be URL-safe Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_44\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstyle:%style\nst:%style\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy Docker Container\nDESCRIPTION: Commands to pull the latest imgproxy Docker image from GitHub Container Registry and run it locally on port 8080\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/getting_started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/imgproxy/imgproxy:latest\ndocker run -p 8080:8080 -it ghcr.io/imgproxy/imgproxy:latest\n```\n\n----------------------------------------\n\nTITLE: DPR Option in imgproxy\nDESCRIPTION: Multiplies image dimensions for HiDPI (Retina) displays. Also affects gravities, watermark offsets, and paddings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_11\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndpr:%dpr\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-based Autoquality in imgproxy\nDESCRIPTION: Configuration for the 'ml' method which uses neural networks to predict optimal quality. Includes paths to neural network models for different formats, target DSSIM values, and quality ranges.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/autoquality.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, AVIF, and JPEG XL\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\nIMGPROXY_AUTOQUALITY_JXL_NET=\"/networks/autoquality-jxl.pb\"\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Credentials via Environment Variables for imgproxy\nDESCRIPTION: This snippet demonstrates how to set AWS access key and secret key environment variables for imgproxy, both directly and using Docker.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv7 to ONNX Format Using export.py (bash)\nDESCRIPTION: This shell code exports YOLOv7 models to ONNX format at FP32 and FP16 precision using the official export.py script. Requirements: Python, YOLOv7 codebase, weights, and CUDA GPU for FP16. Main flags: --weights (input model), --grid, --simplify, --img-size, --max-wh, and --fp16. Produces ONNX file compatible with imgproxy object detection.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Export with FP32 precision\npython export.py \\\n  --weights yolov7-tiny.pt \\\n  --grid \\\n  --simplify \\\n  --img-size 640 640 \\\n  --max-wh 640\n\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export.py \\\n  --weights yolov7-tiny.pt \\\n  --grid \\\n  --simplify \\\n  --img-size 640 640 \\\n  --max-wh 640 \\\n  --fp16\n```\n\n----------------------------------------\n\nTITLE: Fetching Detected Objects Information with imgproxy\nDESCRIPTION: This example demonstrates how to use imgproxy's '/info' endpoint to retrieve information about detected objects in an image. It uses the 'detect_objects' processing option.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: Applying Sharpen Filter with imgproxy URL Option\nDESCRIPTION: Applies a sharpen filter to the resulting image. The `sigma` parameter defines the size of the mask used for sharpening. Guidelines suggest sigma values like 0.5 for display resolution (4px/mm), 1.0 for 12px/mm, and 1.5 for 300 dpi (approx 12px/mm). This option is disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_31\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsharpen:%sigma\nsh:%sigma\n```\n\n----------------------------------------\n\nTITLE: Combining Chained Pipelines and Presets in URLs - imgproxy_url\nDESCRIPTION: Demonstrates how to use presets and chaining together in the imgproxy Pro URL path, showing how multiple pipelines and preset calls are merged. The input URL includes direct width operations, preset references, and explicit pipeline splits. The expected result is an ordered application of all specified pipeline steps.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Homebrew (macOS) - bash\nDESCRIPTION: This simple Homebrew command installs the latest imgproxy formula on macOS. Homebrew must be installed as a prerequisite. There are no parameters. The output is an installed imgproxy binary available in the system PATH on macOS.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Custom imgproxy Docker Image\nDESCRIPTION: Build a custom Docker image for imgproxy using the provided Dockerfile and run it exposing port 8080.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Example imgproxy URL with Encrypted Source\nDESCRIPTION: Demonstrates the final structure of an imgproxy URL requesting processing for an encrypted source URL. The URL includes processing options (`rs:fit:300:300`), the encryption marker (`/enc/`), and the URL-safe Base64 encoded representation of the IV and encrypted source URL. Note the warning about signing this URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_9\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/rs:fit:300:300/enc/p5VjorNdhs7mRRw8gA9TWoRlGci3l1kuzqN43UQlRaRIQ0qtBKW3qFABIsx-ZRz_cVc8iVTYbhsNsxNBL1BHaQ\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Bytes for SVG Detection in imgproxy\nDESCRIPTION: Configures the maximum number of bytes imgproxy will read to recognize SVG files. Increase this value if SVG recognition fails.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_SVG_CHECK_BYTES=32768\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Compression for imgproxy - plaintext\nDESCRIPTION: Specifies advanced environment variables for PNG (Portable Network Graphics) compression in imgproxy. Enables toggling of PNG interlacing and quantization, as well as control over quantization palette size. The quantization feature requires that libvips is built with Quantizr or libimagequant. Quantization color count must be between 2 and 256. All variables are boolean except for color count, which expects an integer.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_PNG_INTERLACED=false\nIMGPROXY_PNG_QUANTIZE=false\nIMGPROXY_PNG_QUANTIZATION_COLORS=256\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Key/Salt Configuration\nDESCRIPTION: Bash command showing how to start imgproxy with a configured key/salt pair for URL signing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/signing_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining a Chained Pipeline in an imgproxy URL\nDESCRIPTION: This snippet shows the basic syntax for creating a chained pipeline within an imgproxy URL. The hyphen `-` acts as a separator, initiating a new pipeline that processes the output of the previous one. In this example, the first pipeline applies width and crop operations, and the second pipeline applies a trim operation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n                        ^ the new pipeline starts here\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via Environment Variables for imgproxy\nDESCRIPTION: Example of how to set AWS access credentials using environment variables when running imgproxy directly or with Docker. These credentials allow imgproxy to send metrics to CloudWatch.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Preset Definition for Chained Pipelines\nDESCRIPTION: Example of defining a preset that includes multiple chained pipelines with various width and height adjustments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Deploying specific imgproxy version to Heroku using Container Registry\nDESCRIPTION: Create a Heroku application, set the stack to container, pull a specific imgproxy Docker image, tag it for Heroku, and deploy it. This method allows for deploying a specific version of imgproxy to Heroku.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Deploying specific imgproxy version to Heroku using Container Registry\nDESCRIPTION: Create a Heroku application, set the stack to container, pull a specific imgproxy version, tag and push it to Heroku Container Registry, and release the application.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Basic Watermark Processing Option in imgproxy\nDESCRIPTION: URL option format for applying watermarks with customizable opacity, position, offset, and scale parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry TLS Configuration Variables\nDESCRIPTION: Environment variables for configuring TLS security settings when connecting to an OpenTelemetry collector. Includes settings for both server and client certificates.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_SERVER_CERT=<pem-encoded-cert>\nIMGPROXY_OPEN_TELEMETRY_CLIENT_CERT=<pem-encoded-cert>\nIMGPROXY_OPEN_TELEMETRY_CLIENT_KEY=<pem-encoded-key>\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with MALLOC_ARENA_MAX in Bash\nDESCRIPTION: This snippet demonstrates how to run imgproxy with the MALLOC_ARENA_MAX environment variable set to 2. This reduces GLib memory appetites by limiting the number of malloc arenas it can create, potentially reducing memory fragmentation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Example of AWS credentials file configuration for shared access setup in the user's home directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Environment Variables for imgproxy Integration\nDESCRIPTION: This snippet lists the environment variables used to configure the Datadog tracer for imgproxy. It includes variables for setting the agent host, ports, service name, environment, hostname, tags, and various tracing options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/monitoring/datadog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDD_AGENT_HOST=localhost\nDD_TRACE_AGENT_PORT=8126\nDD_DOGSTATSD_PORT=8125\nDD_SERVICE=imgproxy\nDD_ENV=\nDD_TRACE_SOURCE_HOSTNAME=\nDD_TRACE_REPORT_HOSTNAME=false\nDD_TAGS=datacenter:njc,key2:value2\nDD_TRACE_ANALYTICS_ENABLED=false\nDD_RUNTIME_METRICS_ENABLED=false\nDD_TRACE_STARTUP_LOGS=true\nDD_TRACE_DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific imgproxy Version to Heroku Container Registry using Bash\nDESCRIPTION: Deploys a specific version of imgproxy (or imgproxy Pro) to Heroku using its Container Registry. Steps include creating the app, setting the stack, logging into the registry, pulling the desired imgproxy Docker image version (specifying `-amd64` architecture for Heroku compatibility), tagging the image for Heroku, pushing it, and releasing the container. Requires Docker and Heroku CLI.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Defining Imgproxy Preset Format (Configuration)\nDESCRIPTION: This snippet shows the generic format for defining an imgproxy preset. A preset consists of a name (`%preset_name`) followed by an equals sign and the desired processing or info options (`%options`), formatted similarly to how they appear in standard imgproxy URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Heroku Container Registry Deployment\nDESCRIPTION: Commands for deploying a specific version of imgproxy to Heroku using Container Registry.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Using Presets in Presets-Only Mode - imgproxy_url_only_presets\nDESCRIPTION: This snippet demonstrates how to construct an imgproxy URL in presets-only mode. Multiple presets (e.g., 'thumbnail', 'blurry', 'watermarked') are listed to apply their combined effects to the image retrieval or transformation. The image source is appended after '/plain/' and an optional format is specified with '@png'. Dependencies include an imgproxy instance running in presets-only mode. Inputs are the preset names and source URL; output is the transformed image URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-based Autoquality\nDESCRIPTION: Configuration for DSSIM-based autoquality including target DSSIM value, error tolerance, and quality ranges for different formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv6 to ONNX Format Using deploy/ONNX/export_onnx.py (bash)\nDESCRIPTION: This sequence shows how to export YOLOv6 models to ONNX format in both FP32 and FP16 precisions using the export_onnx.py script. Dependencies: Python 3, YOLOv6 repo, proper weight files, and optionally a CUDA-capable GPU for FP16. Parameters specify weights, image shape, batch size, simplification, and quantization. Produces ONNX files for model inference within imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Export with FP32 precision\npython deploy/ONNX/export_onnx.py \\\n  --weights yolov6s.pt \\\n  --img 640 \\\n  --batch 1 \\\n  --simplify\n\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython deploy/ONNX/export_onnx.py \\\n  --weights yolov6s.pt \\\n  --img 640 \\\n  --batch 1 \\\n  --simplify \\\n  --half\n```\n\n----------------------------------------\n\nTITLE: Formatting URL Processing Options - imgproxy_url_option - Markdown\nDESCRIPTION: Specifies the canonical way to represent a processing option in an imgproxy URL. Uses the format %option_name:%argument1:%argument2:...:%argumentN, with flexibility for varying argument counts. The argument separator is customizable via configuration. No dependencies besides consistent option naming within URLs; option names and argument values are passed as URL path segments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Adjusting Background Alpha in imgproxy URL\nDESCRIPTION: Adds an alpha channel to the background color. Accepts a floating-point number between 0 and 1 to set transparency.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbackground_alpha:%alpha\nbga:%alpha\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-based Autoquality in Bash\nDESCRIPTION: Configuration example for machine learning based autoquality with neural network paths.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/autoquality.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, and AVIF\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Cropping with Class Specification in imgproxy\nDESCRIPTION: Demonstrates how to crop images while keeping objects of specified classes (face, cat, dog) in frame using imgproxy URL parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_10\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:obj:face:cat:dog/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Detection in imgproxy Pro\nDESCRIPTION: Environment variables for configuring object detection features in imgproxy Pro. Includes options for setting neural network config, weights, model type, confidence threshold, and behavior when no objects are detected.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_OBJECT_DETECTION_CONFIG`]: ((pro)) the path to the neural network config in DarkNet format. Default: blank\n* [`IMGPROXY_OBJECT_DETECTION_WEIGHTS`]: ((pro)) the path to the neural network weights in DarkNet format. Default: blank\n* [`IMGPROXY_OBJECT_DETECTION_NET`]: ((pro)) a path to the neural network model in ONNX format. Default: blank\n* [`IMGPROXY_OBJECT_DETECTION_NET_TYPE`]: ((pro)) the type of the neural network model. Default: `yolox`\n* [`IMGPROXY_OBJECT_DETECTION_CLASSES`]: ((pro)) the path to the text file with the classes names, one per line. Default: blank\n* [`IMGPROXY_OBJECT_DETECTION_NET_SIZE`]: ((pro)) the size of the neural network input. The width and the heights of the inputs should be the same, so this config value should be a single number. Default: 416\n* [`IMGPROXY_OBJECT_DETECTION_CONFIDENCE_THRESHOLD`]: ((pro)) detections with confidences below this value will be discarded. Default: 0.2\n* [`IMGPROXY_OBJECT_DETECTION_NMS_THRESHOLD`]: ((pro)) non-max supression threshold. Don't change this if you don't know what you're doing. Default: 0.4\n* [`IMGPROXY_OBJECT_DETECTION_SWAP_RB`]: ((pro)) when set to `true`, imgproxy will swap the R and B channels in the input image. Some models are trained on BGR images and perform incorrectly with RGB inputs. This option allows you to fix this issue. Default: `false`\n* [`IMGPROXY_OBJECT_DETECTION_FALLBACK_TO_SMART_CROP`]: ((pro)) defines imgproxy's behavior when object-oriented crop gravity is used but no objects are detected. When set to `true`, imgproxy will fallback to smart crop. When set to `false`, imgproxy will fallback to the center gravity. Default: `true`\n* [`IMGPROXY_OBJECT_DETECTION_GRAVITY_MODE`]: ((pro)) defines how imgproxy should use object-oriented crop gravity. Supported values are:\n  * `max_score_area`: _(default)_ in this mode, imgproxy will select the area that covers the most detected objects, respecting their weights.\n  * `one_best`: in this mode, imgproxy will focus on the object with the highest score based on its area, confidence, and class weight.\n  * `one_best_centermost`: the same as `one_best,` but imgproxy will add the object's proximity to the image center to its score.\n```\n\n----------------------------------------\n\nTITLE: Setting Up imgproxy Presets Using Command Line Argument\nDESCRIPTION: Command for providing preset definitions via a file path. This allows defining complex image processing presets in a separate configuration file that imgproxy will load at startup.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -presets /path/to/file/with/presets -info-presets /path/to/file/with/info-presets\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Blob Storage and Setting Account/Endpoint in imgproxy\nDESCRIPTION: These environment variables enable Azure Blob Storage integration (`IMGPROXY_USE_ABS`), specify the Azure account name (`IMGPROXY_ABS_NAME`), and optionally set a custom Azure Blob Storage endpoint (`IMGPROXY_ABS_ENDPOINT`). Enabling ABS is the first step to allow imgproxy to access images from Azure.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_USE_ABS=true\nIMGPROXY_ABS_NAME=<your_account_name>\nIMGPROXY_ABS_ENDPOINT=<your_endpoint_url> (optional)\n```\n\n----------------------------------------\n\nTITLE: Applying Watermark in imgproxy URL\nDESCRIPTION: This code snippet shows the URL option format for applying a watermark to a processed image in imgproxy. It includes parameters for opacity, position, offset, and scale.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Encoded Watermark Data in Bash\nDESCRIPTION: Provides a Bash command to Base64 encode an image file (e.g., `tmp/watermark.webp`) and remove newline characters. This output is suitable for use with the `IMGPROXY_WATERMARK_DATA` environment variable to specify a default watermark directly as encoded data.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'`.\n```\n\n----------------------------------------\n\nTITLE: Specifying imgproxy Key/Salt Files via Command Line Arguments\nDESCRIPTION: Command line example showing how to specify separate files containing hex-coded keys and salts for imgproxy's URL signature verification. This approach allows storing sensitive signature data in external files rather than environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -keypath /path/to/file/with/key -saltpath /path/to/file/with/salt\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics Export - imgproxy - Markdown\nDESCRIPTION: This documentation provides step-by-step instructions for enabling Prometheus metrics collection in the imgproxy server by configuring environment variables such as IMGPROXY_PROMETHEUS_BIND (to specify listen address), and optionally IMGPROXY_PROMETHEUS_NAMESPACE (to prefix metric names). The snippet explains each variable's purpose, discusses which HTTP endpoints will expose metrics, and lists detailed descriptions for every counter and histogram metric generated by imgproxy for consumption by Prometheus. It also warns about deprecated metric names and outlines key functional usage patterns.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/monitoring/prometheus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n---\\ndescription: Learn about how to collect imgproxy metrics for Prometheus\\n---\\n\\n# Prometheus\\n\\nimgproxy can collect metrics for Prometheus. To use this feature, do the following:\\n\\n1. Set the `IMGPROXY_PROMETHEUS_BIND` environment variable to the address and port that will be listened to by the Prometheus server. Note that you can't bind the main server and Prometheus to the same port.\\n2. _(optional)_ Set the `IMGPROXY_PROMETHEUS_NAMESPACE` to prepend prefix to the names of metrics, i.e. with `IMGPROXY_PROMETHEUS_NAMESPACE=imgproxy` names will appear like `imgproxy_requests_total`.\\n3. Collect the metrics from any path on the specified binding.\\n\\nimgproxy will collect the following metrics:\\n\\n* `requests_total`: a counter with the total number of HTTP requests imgproxy has processed\\n* `status_codes_total`: a counter of the response status codes separated by status\\n* `errors_total`: a counter of the occurred errors separated by type (timeout, downloading, processing)\\n* `request_duration_seconds`: a histogram of the request latency (in seconds)\\n* `request_span_duration_seconds`: a histogram of the request latency (in seconds) separated by span (queue, downloading, processing)\\n* `requests_in_progress`: the number of requests currently in progress\\n* `images_in_progress`: the number of images currently in progress\\n* `buffer_size_bytes`: a histogram of the download buffers sizes (in bytes)\\n* `buffer_default_size_bytes`: calibrated default buffer size (in bytes)\\n* `buffer_max_size_bytes`: calibrated maximum buffer size (in bytes)\\n* `vips_memory_bytes`: libvips memory usage\\n* `vips_max_memory_bytes`: libvips maximum memory usage\\n* `vips_allocs`: the number of active vips allocations\\n* Some useful Go metrics like memstats and goroutines count\\n\\n### Deprecated metrics\\n\\nThe following metrics are deprecated and can be removed in future versions. Use `request_span_duration_seconds` instead.\\n\\n* `download_duration_seconds`: a histogram of the source image downloading latency (in seconds)\\n* `processing_duration_seconds`: a histogram of the image processing latency (in seconds)\\n\n```\n\n----------------------------------------\n\nTITLE: Resizing Algorithm Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet provides URL option syntax for selecting the interpolation algorithm used during resizing, available only in imgproxy pro. Both the full ('resizing_algorithm') and short ('ra') forms are given. Supported algorithms are listed in the documentation, and the default is 'lanczos3'. Input is the algorithm name; output is a resized image with the specified algorithm applied. Dependencies include using imgproxy pro where algorithm choice is available.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresizing_algorithm:%algorithm\nra:%algorithm\n```\n\n----------------------------------------\n\nTITLE: Specifying Plain Source URL in Proxy Request - imgproxy_url - imgproxy_url\nDESCRIPTION: Demonstrates providing the image source URL in plain, readable form following the '/plain/' path prefix. Parameter: source image URL. Required escaping for special characters (query string, '@'). Inputs: HTTP/HTTPS URL. Output: direct fetching by imgproxy. Typically used for integration simplicity.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Creating Video Thumbnail Animations in ImgProxy URLs\nDESCRIPTION: Generates animated images from video frames with control over timing, number of frames, dimensions, and various formatting options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_64\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_animation:%step:%delay:%frames:%frame_width:%frame_height:%extend_frame:%trim:%fill:%focus_x:%focus_y\nvta:%step:%delay:%frames:%frame_width:%frame_height:%extend_frame:%trim:%fill:%focus_x:%focus_y\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File (INI) for SSM Access\nDESCRIPTION: Illustrates the INI format for the `~/.aws/credentials` file. This method provides AWS credentials (`aws_access_key_id`, `aws_secret_access_key`) under a profile (e.g., `[default]`) for applications like imgproxy to authenticate with AWS services, such as Systems Manager Parameter Store.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Preset Definition for Chained Pipelines\nDESCRIPTION: Example of defining a preset that includes multiple chained pipelines with various width and height parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Extending Images to Meet Target Size - imgproxy_url_option - Markdown\nDESCRIPTION: Shows how to use 'extend' and 'ex' options for enlarging output canvas when input image is smaller. The first argument enables extension, and an optional second argument selects gravity. Accepts true/false or 1/t/true values. No dependencies beyond standard option parsing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_14\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nextend:%extend:%gravity\\nex:%extend:%gravity\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair for imgproxy URL Signatures (Bash)\nDESCRIPTION: This snippet demonstrates how to quickly generate a random 64-byte hex-encoded key or salt for use with imgproxy's URL signature feature. It uses /dev/random as the source of randomness.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Resizing Algorithm Option in imgproxy Pro\nDESCRIPTION: Defines the algorithm imgproxy will use for resizing images, with supported options including nearest, linear, cubic, lanczos2, and lanczos3.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresizing_algorithm:%algorithm\nra:%algorithm\n```\n\n----------------------------------------\n\nTITLE: Quality Control\nDESCRIPTION: Sets the quality percentage for the output image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_48\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nquality:%quality\nq:%quality\n```\n\n----------------------------------------\n\nTITLE: Installing and Using TCMalloc with imgproxy in Bash\nDESCRIPTION: This snippet demonstrates how to install TCMalloc on a Debian-based system and run imgproxy with TCMalloc preloaded. TCMalloc is Google's fast, multi-threaded malloc implementation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Prometheus in imgproxy\nDESCRIPTION: Configuration settings needed to enable Prometheus metrics collection in imgproxy. Requires setting IMGPROXY_PROMETHEUS_BIND for the listening address/port and optionally IMGPROXY_PROMETHEUS_NAMESPACE for metric name prefixing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/monitoring/prometheus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_PROMETHEUS_BIND=<address:port>\nIMGPROXY_PROMETHEUS_NAMESPACE=imgproxy\n```\n\n----------------------------------------\n\nTITLE: Accessing Files from Amazon S3 with Version IDs\nDESCRIPTION: Code example showing the URL format for accessing S3 files with specific version IDs. This format allows you to request a particular version of an object stored in S3.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Preset Definition with Chained Pipelines\nDESCRIPTION: Example of defining an imgproxy preset that includes multiple chained pipelines for sequential image processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from source on macOS using Homebrew\nDESCRIPTION: Install dependencies and build imgproxy from source on macOS using Homebrew. This method allows for a custom installation of imgproxy on macOS systems.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Example Unsigned imgproxy URL\nDESCRIPTION: Sample imgproxy URL before signing, showing the format of processing options and encoded image URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Forcing Use of Embedded Thumbnails in imgproxy (Environment Variable)\nDESCRIPTION: When `true`, imgproxy prioritizes using an embedded thumbnail (if available in `heic` or `avif` source images) over the main image for processing. Default is `false`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_ENFORCE_THUMBNAIL`\n```\n\n----------------------------------------\n\nTITLE: Signed imgproxy URL Example\nDESCRIPTION: Final signed imgproxy URL with the calculated signature prepended to the path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/signing_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/oKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Setting Autoquality Target in imgproxy\nDESCRIPTION: Specifies the desired value of the autoquality method metric. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy with Presets via Command Line\nDESCRIPTION: Command line syntax for configuring imgproxy to use presets from external files. This allows defining preset configurations in separate files rather than environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -presets /path/to/file/with/presets -info-presets /path/to/file/with/info-presets\n```\n\n----------------------------------------\n\nTITLE: Dimensions option response example\nDESCRIPTION: Sample JSON response showing the width and height of an image in pixels.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"width\": 7360,\n  \"height\": 4912\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Style to SVG in Imgproxy\nDESCRIPTION: Prepends a <style> node with provided CSS content to the <svg> node of a source SVG image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_44\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstyle:%style\nst:%style\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment of imgproxy to Heroku\nDESCRIPTION: Step-by-step commands to manually deploy imgproxy to Heroku. This involves cloning the repository, creating a Heroku application, setting the container stack, and deploying the application.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Optimized Image Trimming with Chained Pipelines\nDESCRIPTION: Demonstrates how to optimize image trimming by first resizing the image in one pipeline and then performing the trim operation in a second pipeline.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Output Format Selection\nDESCRIPTION: Specifies the desired output image format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_55\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nformat:%extension\nf:%extension\next:%extension\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-based Autoquality\nDESCRIPTION: Configuration for machine learning based autoquality with neural network paths and quality settings for different image formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, and AVIF\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Objects in imgproxy URL\nDESCRIPTION: Detects and blurs objects of specified classes in the image. Allows setting blur sigma and list of class names to blur.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_34\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblur_detections:%sigma:%class_name1:%class_name2:...:%class_nameN\nbd:%sigma:%class_name1:%class_name2:...:%class_nameN\n```\n\n----------------------------------------\n\nTITLE: Defining Unsharp Masking Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `unsharp_masking` option (Pro feature) to configure unsharp masking. Parameters `mode`, `weight`, and `divider` correspond to the global configuration options and are all optional.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_31\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nunsharp_masking:%mode:%weight:%divider\nush:%mode:%weight:%divider\n```\n\n----------------------------------------\n\nTITLE: Configuring Watermarks in imgproxy\nDESCRIPTION: Environment variables for setting up watermarks in imgproxy. Includes options for specifying watermark data, path, URL, opacity, and cache size.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_WATERMARK_DATA`]: Base64-encoded image data. You can easily calculate it with `base64 tmp/watermark.png | tr -d '\\n'`.\n* [`IMGPROXY_WATERMARK_PATH`]: the path to the locally stored image\n* [`IMGPROXY_WATERMARK_URL`]: the watermark image URL\n* [`IMGPROXY_WATERMARK_PREPROCESS_URL`]: ((pro)) when `true`, imgproxy will apply `IMGPROXY_URL_REPLACEMENTS` and `IMGPROXY_BASE_URL` to values of the `watermark_url` processing option.\n* [`IMGPROXY_WATERMARK_OPACITY`]: the watermark's base opacity\n* [`IMGPROXY_WATERMARKS_CACHE_SIZE`]: ((pro)) custom watermarks cache size. When set to `0`, the watermark cache is disabled. 256 watermarks are cached by default.\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsharp Masking in imgproxy Pro\nDESCRIPTION: Environment variables for configuring unsharp masking in imgproxy Pro. Includes options for setting the mode, weight, and divider for unsharp masking.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_UNSHARP_MASKING_MODE`]: ((pro)) controls when unsharp masking should be applied. The following modes are supported:\n  * `auto`: _(default)_ apply unsharp masking only when an image is downscaled and the `sharpen` option has not been set.\n  * `none`: unsharp masking is not applied.\n  * `always`: always applies unsharp masking.\n* [`IMGPROXY_UNSHARP_MASKING_WEIGHT`]: ((pro)) a floating-point number that defines how neighboring pixels will affect the current pixel. The greater the value, the sharper the image. This value should be greater than zero. Default: `1`\n* [`IMGPROXY_UNSHARP_MASKING_DIVIDER`]: ((pro)) a floating-point number that defines unsharp masking strength. The lesser the value, the sharper the image. This value be greater than zero. Default: `24`\n```\n\n----------------------------------------\n\nTITLE: Allowing Security Options Override via URL\nDESCRIPTION: When set to 'true', allows security-related processing options (like `max_src_resolution`, `max_src_file_size`, `max_animation_frames`, `max_animation_frame_resolution`) to be specified and potentially overridden in the imgproxy processing URL. The default is 'false'. Warning: Enabling this allows bypassing configured security limits if an attacker can modify imgproxy URLs; use with extreme caution.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_20\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_ALLOW_SECURITY_OPTIONS\n```\n\n----------------------------------------\n\nTITLE: Multiple Watermarks with Chained Pipelines in imgproxy\nDESCRIPTION: Shows how to use chained pipelines to place multiple watermarks on the same image. The first pipeline resizes and places the first watermark, while the second pipeline adds the second watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Source Image File Size Limit\nDESCRIPTION: Specifies the maximum size of the source image in bytes. Images exceeding this file size will be rejected. Setting this to 0 disables the file size check. The default value is 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_MAX_SRC_FILE_SIZE\n```\n\n----------------------------------------\n\nTITLE: Limiting Max Animation Frame Resolution in imgproxy URL\nDESCRIPTION: Demonstrates how to set a maximum resolution for animation frames in the imgproxy URL. This option allows overriding the IMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_77\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_animation_frame_resolution:%size\nmafr:%size\n```\n\n----------------------------------------\n\nTITLE: Verifying Image Hashsum in imgproxy Pro\nDESCRIPTION: Validates the source image by comparing its calculated hashsum with the provided value. Supports MD5, SHA1, SHA256, and SHA512 hashsum types. If hashsums don't match, imgproxy responds with a 422 error.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_73\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nhashsum:%hashsum_type:%hashsum\nhs:%hashsum_type:%hashsum\n```\n\n----------------------------------------\n\nTITLE: Disabling Autoquality via Configuration (Bash)\nDESCRIPTION: Sets the `IMGPROXY_AUTOQUALITY_METHOD` environment variable to `none`. This configuration disables the autoquality feature globally for the imgproxy instance, meaning no automatic quality adjustments will be performed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Format-Specific Quality in imgproxy\nDESCRIPTION: Adds or redefines quality settings for specific image formats, overriding the IMGPROXY_FORMAT_QUALITY configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_51\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nformat_quality:%format1:%quality1:%format2:%quality2:...:%formatN:%qualityN\nfq:%format1:%quality1:%format2:%quality2:...:%formatN:%qualityN\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv5 Model to ONNX Format\nDESCRIPTION: Commands to export YOLOv5 model to ONNX format with both FP32 and FP16 precision options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Export with FP32 precision\npython export.py \\\n  --weights yolov5s.pt \\\n  --include onnx \\\n  --simplify\n\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export.py \\\n  --weights yolov5s.pt \\\n  --include onnx \\\n  --simplify \\\n  --half\n```\n\n----------------------------------------\n\nTITLE: Setting Watermark Size in Imgproxy\nDESCRIPTION: Defines the desired width and height of the watermark, with automatic calculation of missing dimension based on aspect ratio.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_41\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_size:%width:%height\nwms:%width:%height\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Cropping with imgproxy\nDESCRIPTION: This code demonstrates how to crop an image to 256x256 while ensuring faces remain in frame using imgproxy's object detection feature. The 'g:obj:face' parameter specifies that the gravity should be centered on detected faces.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/g:obj:face/...\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Options in imgproxy (Pro)\nDESCRIPTION: Allows customization of PNG saving options, including interlacing, quantization, and color palette size for optimized PNG output.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_55\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npng_options:%interlaced:%quantize:%quantization_colors\npngo:%interlaced:%quantize:%quantization_colors\n```\n\n----------------------------------------\n\nTITLE: Configuring Watermark in imgproxy\nDESCRIPTION: Places a watermark on the processed image with configurable opacity, position, offset and scale settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_36\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Installing and Using jemalloc with imgproxy in Debian-based Systems\nDESCRIPTION: This snippet shows how to install jemalloc on a Debian-based system and run imgproxy with jemalloc preloaded. jemalloc is a general-purpose malloc implementation that emphasizes fragmentation avoidance and scalable concurrency support.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Credentials via Shared Credentials File - INI\nDESCRIPTION: This snippet shows how to specify AWS credentials for imgproxy using the standard ~/.aws/credentials file in INI format. The [default] profile contains aws_access_key_id and aws_secret_access_key values, which will be read by AWS SDKs and CLI tools during authentication. Dependencies include that the user's environment, or container, must have access to this file at the expected location. The file's permissions should restrict access to authorized users only. Inputs are the credential values; output is imgproxy's ability to authenticate with AWS APIs automatically. Make sure the credentials are valid and have CloudWatch permissions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File in INI Format\nDESCRIPTION: Illustrates the structure of the `~/.aws/credentials` file using INI format. This file stores AWS access keys (`aws_access_key_id`, `aws_secret_access_key`) under profiles (e.g., `[default]`), allowing applications like imgproxy to automatically use these credentials when accessing AWS services like Secrets Manager or Systems Manager Parameter Store.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Setting Max Source Resolution in imgproxy URL\nDESCRIPTION: Demonstrates how to set a maximum source resolution in the imgproxy URL. This option allows overriding the IMGPROXY_MAX_SRC_RESOLUTION configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_74\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_resolution:%resolution\nmsr:%resolution\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Healthcheck for imgproxy\nDESCRIPTION: YAML configuration for setting up a healthcheck in Docker Compose that uses the imgproxy health command to verify the application's health status. It defines timeout, interval, and retry parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Using Base64 encoded source URL with imgproxy info endpoint\nDESCRIPTION: Example of providing a Base64 encoded source URL in the imgproxy info endpoint, which can be split with '/' characters as needed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/getting_info.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\n----------------------------------------\n\nTITLE: Setting Format-Specific Minimum Quality in imgproxy Autoquality\nDESCRIPTION: Specifies the minimal quality imgproxy can use per format. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=40\"\n```\n\n----------------------------------------\n\nTITLE: Skipping Processing for Specific Formats in ImgProxy URLs\nDESCRIPTION: When set, imgproxy will skip the processing of the listed formats. Processing can only be skipped when the requested format matches the source format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_66\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nskip_processing:%extension1:%extension2:...:%extensionN\nskp:%extension1:%extension2:...:%extensionN\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Error in imgproxy Autoquality\nDESCRIPTION: Sets the allowed error for the autoquality target. Only applicable to 'dssim' and 'ml' methods. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\n```\n\n----------------------------------------\n\nTITLE: Defining Preset Configurations in a Presets File\nDESCRIPTION: Example of a presets configuration file containing multiple preset definitions. Each line defines a named preset with specific processing options. Lines starting with # are treated as comments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\ndefault=resizing_type:fill/enlarge:1\n\n# Sharpen the image to make it look better\nsharp=sharpen:0.7\n\n# Blur the image to hide details\nblurry=blur:2\n```\n\n----------------------------------------\n\nTITLE: Colorspace option for image info retrieval\nDESCRIPTION: URL option to request the colorspace of an image (e.g., srgb, cmyk), which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_19\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncolorspace:%colorspace\ncs:%colorspace\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy on macOS using Homebrew\nDESCRIPTION: Command for installing imgproxy on macOS using the Homebrew package manager.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Options in ImgProxy URLs\nDESCRIPTION: Allows redefining PNG saving options. All arguments have the same meaning as the Advanced PNG compression configs and are optional.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_55\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npng_options:%interlaced:%quantize:%quantization_colors\npngo:%interlaced:%quantize:%quantization_colors\n```\n\n----------------------------------------\n\nTITLE: Cropping Images Using Object Detection Gravity in imgproxy URL\nDESCRIPTION: Demonstrates how to use the `crop` and `gravity:obj` parameters in an imgproxy URL to crop an image to a specific size (256x256) while ensuring that detected objects like faces, cats, or dogs remain within the cropped area. This leverages imgproxy's object detection capabilities for intelligent cropping.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:obj:face:cat:dog/...\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy URL for Local File Processing\nDESCRIPTION: This URL demonstrates how to construct a request to imgproxy for resizing a local image. It includes parameters for resizing the image to fit 300x200 pixels and specifies the local file path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Adding Gradient Overlay in Imgproxy\nDESCRIPTION: Places a gradient on the processed image, transitioning from transparency to a specified color. Supports various directions and custom start/stop positions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_37\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ngradient:%opacity:%color:%direction:%start:%stop\ngr:%opacity:%color:%direction:%start:%stop\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenStack Swift Integration for imgproxy\nDESCRIPTION: Environment variables to enable and configure OpenStack Swift Object Storage integration in imgproxy. Includes settings for enabling the feature, authentication, and timeouts.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_USE_SWIFT`]: when `true`, enables image fetching from OpenStack Swift Object Storage. Default: `false`\n* [`IMGPROXY_SWIFT_USERNAME`]: the username for Swift API access. Default: blank\n* [`IMGPROXY_SWIFT_API_KEY`]: the API key for Swift API access. Default: blank\n* [`IMGPROXY_SWIFT_AUTH_URL`]: the Swift Auth URL. Default: blank\n* [`IMGPROXY_SWIFT_AUTH_VERSION`]: the Swift auth version, set to 1, 2 or 3 or leave at 0 for autodetect.\n* [`IMGPROXY_SWIFT_TENANT`]: the tenant name (optional, v2 auth only). Default: blank\n* [`IMGPROXY_SWIFT_DOMAIN`]: the Swift domain name (optional, v3 auth only): Default: blank\n* [`IMGRPOXY_SWIFT_TIMEOUT_SECONDS`]: the data channel timeout in seconds. Default: 60\n* [`IMGRPOXY_SWIFT_CONNECT_TIMEOUT_SECONDS`]: the connect channel timeout in seconds. Default: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Authentication for imgproxy\nDESCRIPTION: Set these environment variables to configure Swift authentication for imgproxy. This includes the username, API key, auth URL, auth version, tenant name, and domain name.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_USE_SWIFT=true\nIMGPROXY_SWIFT_USERNAME=\nIMGPROXY_SWIFT_API_KEY=\nIMGPROXY_SWIFT_AUTH_URL=\nIMGPROXY_SWIFT_AUTH_VERSION=0\nIMGPROXY_SWIFT_TENANT=\nIMGPROXY_SWIFT_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Building Linux Packages (DEB/RPM/TAR) from imgproxy Docker Image using Bash\nDESCRIPTION: Uses the `imgproxy-build-package` script within an imgproxy Docker container to generate a Linux package (DEB, RPM, or TAR). It mounts the current host directory (`$(pwd)`) to `/dist` inside the container to store the output package. The command specifies the source Docker image (e.g., `latest-amd64` for AMD64 architecture) and the desired package format (`deb`). Requires Docker.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -u0 --rm -it -v $(pwd):/dist ghcr.io/imgproxy/imgproxy:latest-amd64 imgproxy-build-package deb /dist\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from source on Ubuntu\nDESCRIPTION: Build imgproxy from source on Ubuntu after installing the necessary dependencies. This allows for a custom installation of imgproxy with specific build flags.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: OpenStack Swift URL Format Example\nDESCRIPTION: Demonstrates the conversion of a standard OpenStack Swift URL to the imgproxy-compatible format. Shows both the original Swift URL format and the corresponding imgproxy URL format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOriginal: http://127.0.0.1:8080/v1/AUTH_test/images/flowers/rose.jpg\nConverted: swift://images/flowers/rose.jpg\n```\n\n----------------------------------------\n\nTITLE: Implementing jemalloc in imgproxy on Debian\nDESCRIPTION: Installs and enables the jemalloc memory allocator for imgproxy on Debian-based systems. This implementation uses LD_PRELOAD to override the default memory allocator, which can significantly reduce memory fragmentation in heavily multi-threaded applications.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Source URL Encryption Key (Bash)\nDESCRIPTION: This command starts imgproxy with a configured source URL encryption key. The key is a 32-byte hex-encoded string used for AES-256-CBC encryption of source URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining Filename for Content-Disposition in imgproxy\nDESCRIPTION: Sets a filename for the Content-Disposition header. When not specified, imgproxy extracts the filename from the source URL. The filename can be URL-safe Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_70\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nfilename:%filename:%encoded\nfn:%filename:%encoded\n```\n\n----------------------------------------\n\nTITLE: Plain Source URL Format in imgproxy\nDESCRIPTION: Example of using a plain source URL format with imgproxy, including optional extension specification.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_75\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-based Autoquality in Bash\nDESCRIPTION: Configuration example for DSSIM-based autoquality with target value and error margins.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Palette Extraction - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Defines URL options to extract an RGBA palette with a maximum number of colors from an image using imgproxy. Requires the image to be fully downloaded and processed. The `%colors` parameter sets the maximum colors (2-256, default 0). Output is a JSON-encoded palette. No external dependencies required besides imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_32\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npalette:%colors\\np:%colors\n```\n\n----------------------------------------\n\nTITLE: Object Detection Info URL in imgproxy\nDESCRIPTION: URL pattern for retrieving information about detected objects using the info endpoint.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_11\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: Disabling Autoquality via URL Option (imgproxy_url)\nDESCRIPTION: Demonstrates how to disable autoquality for a specific image request using the `autoquality:none` processing option within the imgproxy URL structure. This overrides any global autoquality configuration for this particular request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on macOS with Homebrew\nDESCRIPTION: Commands to install dependencies and build imgproxy from source on macOS using Homebrew. Includes necessary environment variables and compiler flags for macOS compatibility.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Setting Default Image Quality in imgproxy\nDESCRIPTION: Configures the default quality percentage for resulting images and format-specific quality settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_QUALITY=80\nIMGPROXY_FORMAT_QUALITY=\"jpeg=70,avif=40,webp=60\"\n```\n\n----------------------------------------\n\nTITLE: Extend Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet provides the URL form for extending images that are smaller than the requested dimensions, using optional gravity. Both the long ('extend') and short ('ex') forms are shown. Extend and gravity arguments control completion of missing content and its alignment in the output image. Input is a boolean and optional gravity; output is a background-extended image. This is useful for preventing unwanted cropping or scaling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_14\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nextend:%extend:%gravity\nex:%extend:%gravity\n```\n\n----------------------------------------\n\nTITLE: Using MALLOC_ARENA_MAX Environment Variable with imgproxy\nDESCRIPTION: Sets MALLOC_ARENA_MAX to 2 when running imgproxy to reduce GLib memory fragmentation. This limits the number of malloc arenas that GLib can create, helping to minimize memory fragmentation in multi-threaded scenarios.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with MALLOC_ARENA_MAX in Bash\nDESCRIPTION: This snippet demonstrates how to run imgproxy with the MALLOC_ARENA_MAX environment variable set to 2. This reduces GLib memory fragmentation by limiting the number of malloc arenas it can create.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Getting imgproxy Source Code from GitHub\nDESCRIPTION: Commands to clone the imgproxy repository from GitHub and navigate to the project directory. This is the first step when building imgproxy from source.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\n----------------------------------------\n\nTITLE: Multiple Watermarks Using Chained Pipelines\nDESCRIPTION: Shows how to apply multiple watermarks to an image by using chained pipelines. First pipeline resizes and applies first watermark, second pipeline applies second watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Using Cache Buster in imgproxy URLs\nDESCRIPTION: Allows bypassing CDN, proxy server and browser cache without affecting image processing. Useful when making changes not reflected in the URL such as quality settings, presets, or watermarks.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncachebuster:%string\ncb:%string\n```\n\n----------------------------------------\n\nTITLE: Fetching Detected Object Information via imgproxy /info Endpoint\nDESCRIPTION: Explains how to use the `/info` endpoint combined with the `detect_objects:1` parameter in an imgproxy URL. This request retrieves structured information (like coordinates and class) about objects detected in the source image, rather than processing the image itself.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_25\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Image Quality in imgproxy\nDESCRIPTION: Sets the default quality percentage for resultant images. This can be overridden by format-specific settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_QUALITY=80\n```\n\n----------------------------------------\n\nTITLE: Setting Format-Specific Maximum Quality in imgproxy Autoquality\nDESCRIPTION: Specifies the maximum quality imgproxy can use per format. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=50\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Best Format Options in YAML\nDESCRIPTION: This YAML configuration snippet shows the available options for customizing the 'best' format feature in imgproxy. It includes settings for complexity threshold, maximum resolution, default behavior, and processing skip allowance.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/best_format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD: 5.5\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION: 0\nIMGPROXY_BEST_FORMAT_BY_DEFAULT: false\nIMGPROXY_BEST_FORMAT_ALLOW_SKIPS: false\n```\n\n----------------------------------------\n\nTITLE: Sample format option response example\nDESCRIPTION: Sample JSON response showing the sample format of an image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sample_format\": \"uchar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy RPM package on Fedora/CentOS/RHEL\nDESCRIPTION: Command for installing an RPM package on RHEL/Fedora/CentOS systems.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo rpm -i imgproxy-3.25.0.arm64.rpm\n```\n\n----------------------------------------\n\nTITLE: Configuring WebP Options in ImgProxy URLs\nDESCRIPTION: Allows redefining WebP saving options. All arguments have the same meaning as the Advanced WebP compression configs and are optional.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_56\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwebp_options:%compression:%smart_subsample\nwebpo:%compression:%smart_subsample\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in imgproxy\nDESCRIPTION: Configures CORS (Cross-Origin Resource Sharing) headers with the specified origin. CORS is disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ALLOW_ORIGIN=\"https://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Example Unsigned imgproxy URL\nDESCRIPTION: Sample imgproxy URL before signing, showing the format with processing options and encoded image URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Applying Gaussian Blur in imgproxy URL\nDESCRIPTION: Applies a gaussian blur filter to the resulting image. The sigma value defines the size of the blur mask.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_30\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblur:%sigma\nbl:%sigma\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnail Generation in imgproxy\nDESCRIPTION: Environment variables to enable video thumbnail generation and specify the timestamp for frame selection. These settings control video processing behavior.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_formats_support.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENABLE_VIDEO_THUMBNAILS=false\nIMGPROXY_VIDEO_THUMBNAIL_SECOND=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Authentication Environment Variables for imgproxy\nDESCRIPTION: Set these environment variables to configure Swift authentication for imgproxy. They include username, API key, auth URL, auth version, tenant name, and domain name.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/openstack_swift.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_USE_SWIFT=true\nIMGPROXY_SWIFT_USERNAME=\nIMGPROXY_SWIFT_API_KEY=\nIMGPROXY_SWIFT_AUTH_URL=\nIMGPROXY_SWIFT_AUTH_VERSION=0\nIMGPROXY_SWIFT_TENANT=\nIMGPROXY_SWIFT_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Defining Blur Detections Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `blur_detections` option (Pro feature). imgproxy detects objects of specified `class_name`(s) and applies a blur with the given `sigma`. If no class names are provided, all detected objects are blurred. Requires object detection feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_32\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblur_detections:%sigma:%class_name1:%class_name2:...:%class_nameN\nbd:%sigma:%class_name1:%class_name2:...:%class_nameN\n```\n\n----------------------------------------\n\nTITLE: Fixing Missing Dependencies for DEB Package Installation using Bash\nDESCRIPTION: If the `dpkg -i` command fails due to missing dependencies, this command attempts to fix the issue by automatically downloading and installing the required dependencies using `apt-get`. Requires superuser privileges and `apt-get` package manager.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install -f\n```\n\n----------------------------------------\n\nTITLE: imgproxy URL Examples for Object Detection\nDESCRIPTION: Example URLs demonstrating various object detection features in imgproxy including cropping, blurring, drawing detection boxes, and fetching object information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/object_detection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n.../crop:256:256/g:obj:face/...\n.../blur_detections:7:face/...\n.../draw_detections:1:face/...\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables in Docker for imgproxy\nDESCRIPTION: Shows how to pass AWS access keys (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`) as environment variables to an imgproxy container using the `docker run -e` flag. This setup is required for containers needing to fetch secrets from AWS Secrets Manager or AWS Systems Manager Parameter Store.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Implementing TCMalloc with imgproxy on Debian\nDESCRIPTION: Shows how to install and use Google's TCMalloc as an alternative memory allocator with imgproxy on Debian systems. This implementation uses LD_PRELOAD to preload the TCMalloc library before running imgproxy to improve memory allocation performance.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining imgproxy Presets via Preset File - imgproxy_presets\nDESCRIPTION: This example shows how to define processing presets for imgproxy within a preset file. Each line is a preset definition in the format NAME=SETTING:VALUE or a comment (lines starting with '#'). The 'default' preset sets resizing type and enlarges the image, 'sharp' sharpens the image, and 'blurry' applies a blur. This format is used when specifying preset file paths with the '-presets' or '-info-presets' command line arguments. Blank lines and comments are allowed for clarity. These presets can later be referenced via URL or options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ndefault=resizing_type:fill/enlarge:1\n\n# Sharpen the image to make it look better\nsharp=sharpen:0.7\n\n# Blur the image to hide details\nblurry=blur:2\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoquality with Machine Learning (Bash)\nDESCRIPTION: Sets up imgproxy globally to use the `ml` autoquality method, which predicts quality based on DSSIM using neural networks. Configuration involves setting `IMGPROXY_AUTOQUALITY_METHOD=\"ml\"`, target DSSIM (`IMGPROXY_AUTOQUALITY_TARGET`), allowed error (`IMGPROXY_AUTOQUALITY_ALLOWED_ERROR`), quality bounds (`IMGPROXY_AUTOQUALITY_MIN`, `IMGPROXY_AUTOQUALITY_MAX`, `IMGPROXY_AUTOQUALITY_FORMAT_MIN`, `IMGPROXY_AUTOQUALITY_FORMAT_MAX`), and providing paths to Tensorflow frozen graph model files (`.pb`) for JPEG, WebP, AVIF, and JXL formats using respective `IMGPROXY_AUTOQUALITY_*_NET` variables. Requires correctly configured neural network files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/autoquality.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, AVIF, and JPEG XL\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\nIMGPROXY_AUTOQUALITY_JXL_NET=\"/networks/autoquality-jxl.pb\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Preset with Processing Options\nDESCRIPTION: Demonstrates defining an 'awesome' preset that sets specific resizing type and output format options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Setting None Autoquality in URL\nDESCRIPTION: URL processing option example for disabling autoquality.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Animation Frames in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_ANIMATION_FRAMES configuration for a specific request. Requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be enabled as it affects security restrictions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_73\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_animation_frames:%size\nmaf:%size\n```\n\n----------------------------------------\n\nTITLE: Using None Autoquality Method in imgproxy URL\nDESCRIPTION: Processing option to disable autoquality for a specific image by setting the method to 'none' in the URL path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: Defining an imgproxy Preset\nDESCRIPTION: Shows the basic syntax for defining a preset in imgproxy, where preset_name is the name of the preset and options are the processing parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Adding Shadow to Watermark in imgproxy (Pro)\nDESCRIPTION: Adds a shadow effect to the watermark. The 'sigma' value determines the size of the blur mask for the shadow.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_43\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_shadow:%sigma\nwmsh:%sigma\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Watermarks using Chained Pipelines (imgproxy URL)\nDESCRIPTION: This example demonstrates using chained pipelines to apply multiple watermarks to an image. The first pipeline resizes the image (`rs:fit:500:500`) and applies the first watermark (`wm:0.5:nowe/wmu:aW1hZ2UxCg`). The second pipeline, initiated by `-`, applies a second watermark (`wm:0.7:soea/wmu:aW1hZ2UyCg`) to the already watermarked image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Profile Stripping in imgproxy (Environment Variable)\nDESCRIPTION: When set to `true`, imgproxy converts the image's embedded color profile (ICC) to sRGB and removes the profile. If `false`, it attempts to preserve the original profile. Default is `true`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_STRIP_COLOR_PROFILE`\n```\n\n----------------------------------------\n\nTITLE: Crop Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet shows the URL syntax for cropping an image before resizing or processing, using either 'crop' or 'c' in the path. It allows specifying area size (width, height) as absolute or relative values, and incorporates gravity for area placement. Inputs are width, height, and optional gravity; output is the cropped image portion used in further processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_17\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncrop:%width:%height:%gravity\nc:%width:%height:%gravity\n```\n\n----------------------------------------\n\nTITLE: Applying Gradient Effect in imgproxy\nDESCRIPTION: Adds a gradient effect to the processed image, transitioning from transparency to a specified color. Parameters include opacity, color, direction, and start/stop positions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_37\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ngradient:%opacity:%color:%direction:%start:%stop\ngr:%opacity:%color:%direction:%start:%stop\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via Environment Variables with imgproxy - Bash\nDESCRIPTION: This snippet demonstrates setting AWS credentials using environment variables before running imgproxy either directly or via Docker. It requires values for AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY, which must be set according to your AWS IAM configuration. The first command runs imgproxy locally, while the second uses Docker, both enabling imgproxy to authenticate with CloudWatch for metric submission. Ensure that these credentials have permissions to write to CloudWatch and be careful not to expose them in insecure environments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Specifying S3 Object Version in Source URL\nDESCRIPTION: Demonstrates how to include the version ID of an S3 object in the source URL for imgproxy. This allows processing specific versions of S3 objects.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Using Presets-Only Mode URL Format\nDESCRIPTION: Illustrates the URL structure when using imgproxy in presets-only mode, showing how to chain multiple presets in a single URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Size Info\nDESCRIPTION: Example JSON response when requesting image file size information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"size\": 123456\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Integration for imgproxy\nDESCRIPTION: Environment variables to enable and configure OpenTelemetry integration in imgproxy. Includes settings for enabling traces and metrics, TLS certificates, and trace ID generator.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_OPEN_TELEMETRY_ENABLE`]: when `true`, enables sending request traces to OpenTelemetry collector. Default: false\n* [`IMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS`]: when `true`, imgproxy will send metrics over OpenTelemetry Metrics API. Default: `false`\n* [`IMGPROXY_OPEN_TELEMETRY_SERVER_CERT`]: OpenTelemetry collector TLS certificate, PEM-encoded (you can replace line breaks with `\\n`). Default: blank\n* [`IMGPROXY_OPEN_TELEMETRY_CLIENT_CERT`]: OpenTelemetry client TLS certificate, PEM-encoded (you can replace line breaks with `\\n`). Default: blank\n* [`IMGPROXY_OPEN_TELEMETRY_CLIENT_KEY`]: OpenTelemetry client TLS key, PEM-encoded (you can replace line breaks with `\\n`). Default: blank\n* [`IMGPROXY_OPEN_TELEMETRY_TRACE_ID_GENERATOR`]: OpenTelemetry trace ID generator. Supported generators are `xray` and `random`. Default: `xray`\n```\n\n----------------------------------------\n\nTITLE: Using ML-based Autoquality in imgproxy URL\nDESCRIPTION: Processing option to set ML-based autoquality for a specific image, targeting DSSIM of 0.02 with quality range from 70 to 80 and error tolerance of 0.001.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/autoquality.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Defining an imgproxy Preset with Chained Pipelines\nDESCRIPTION: This snippet shows how to define an imgproxy preset named `test` that incorporates chained pipelines. The preset itself contains multiple processing stages separated by `-`, first resizing to 300x300, then to 200x200, and finally to 100x200.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Configuring Average Color Calculation - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Specifies URL parameters for imgproxy to calculate and return the average color of an image. The `average` flag (1, t, or true) enables the option, while `ignore_transparent` is optional and skips fully transparent pixels (default true). Used to retrieve the image's mean color as a JSON object in RGBA. Requires full image processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_34\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\naverage:%average:%ignore_transparent\\navg:%average:%ignore_transparent\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Time for imgproxy URLs\nDESCRIPTION: Sets a Unix timestamp after which imgproxy will return a 404 error. This can be used to create URLs that automatically expire after a certain time.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_66\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexpires:%timestamp\nexp:%timestamp\n```\n\n----------------------------------------\n\nTITLE: Specifying the Resizing Algorithm - imgproxy_url_option - Markdown\nDESCRIPTION: Defines how to select the resizing algorithm in the imgproxy URL through 'resizing_algorithm' or its abbreviation ('ra'). Supported values include 'nearest', 'linear', 'cubic', 'lanczos2', and 'lanczos3'. Argument is optional and defaults to 'lanczos3' if omitted.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresizing_algorithm:%algorithm\\nra:%algorithm\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair in Bash\nDESCRIPTION: Command to generate a random hex-encoded key/salt pair using xxd utility.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Complex URL with Preset and Chained Pipelines\nDESCRIPTION: Example of combining preset usage with additional pipeline chains in the URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Frame Processing in imgproxy\nDESCRIPTION: Environment variable to specify the maximum number of animated image frames that imgproxy will process. Default is set to 1 frame to optimize performance.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_formats_support.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nIMGPROXY_MAX_ANIMATION_FRAMES=1\n```\n\n----------------------------------------\n\nTITLE: Aspect Ratio Extension Option - imgproxy_url_option - Markdown\nDESCRIPTION: Defines the usage of 'extend_aspect_ratio', 'extend_ar', and 'exar' for modifying the canvas to match specific aspect ratios. Extension and gravity values determine effect and positioning. Can be applied independently of other options; inputs required are extension flag and optional gravity.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_15\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nextend_aspect_ratio:%extend:%gravity\\nextend_ar:%extend:%gravity\\nexar:%extend:%gravity\n```\n\n----------------------------------------\n\nTITLE: Weighted Object Detection Gravity for Cropping in imgproxy URL\nDESCRIPTION: Shows how to use the `gravity:objw` parameter in an imgproxy URL, combined with `crop`, to define specific weights for different detected object classes (face: 2, cat: 3, dog: 4). Higher weights influence the cropping algorithm to prioritize keeping those objects more centrally within the 256x256 frame.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:objw:face:2:cat:3:dog:4/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Format-Specific Default Quality\nDESCRIPTION: Sets default quality percentages for specific output formats using a comma-separated list (e.g., 'jpeg=70,avif=40,webp=60'). If a quality value for the target format isn't specified here, the global IMGPROXY_QUALITY value is used. The default setting is 'avif=65'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_24\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_FORMAT_QUALITY\n```\n\n----------------------------------------\n\nTITLE: Specifying Google Cloud Storage Source URL in imgproxy\nDESCRIPTION: Demonstrates how to format the source image URL for Google Cloud Storage buckets in imgproxy. It includes an optional query string for specifying the generation of the source object.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Using Plain Source URL in imgproxy\nDESCRIPTION: Shows how to use a plain source URL in an imgproxy request. This format allows specifying the source image URL directly, with an optional file extension.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_78\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Formatting Swift URLs for imgproxy Source Images\nDESCRIPTION: Convert OpenStack Object Storage URLs to the format required by imgproxy. This example shows how to transform a standard Swift URL to the imgproxy-compatible format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/openstack_swift.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOriginal URL: http://127.0.0.1:8080/v1/AUTH_test/images/flowers/rose.jpg\nConverted URL: swift://images/flowers/rose.jpg\n```\n\n----------------------------------------\n\nTITLE: Defining Specific Imgproxy Preset (Configuration)\nDESCRIPTION: This example demonstrates defining an imgproxy preset named 'awesome'. This preset applies two processing options: setting the resizing type to 'fill' and the output format to 'jpg'. This simplifies URLs by allowing `preset:awesome` instead of the full option string.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Configuring None Autoquality Method in imgproxy\nDESCRIPTION: Configuration for disabling autoquality feature in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Key and Salt File Paths\nDESCRIPTION: Command line configuration for specifying file paths containing hex-coded keys and salts for imgproxy URL signatures.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -keypath /path/to/file/with/key -saltpath /path/to/file/with/salt\n```\n\n----------------------------------------\n\nTITLE: Defining a Named Preset with Resizing and Format Options - imgproxy_presets\nDESCRIPTION: This snippet shows how to declare a preset named 'awesome' that sets the resizing type to 'fill' and output format to 'jpg'. Users must ensure they use valid option names and values per imgproxy's processing documentation. This preset can be referenced elsewhere in imgproxy URLs for consistent options application.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Standard Watermark URL Option in imgproxy\nDESCRIPTION: URL option format for applying standard watermarks with configurable opacity, position, offset, and scale parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Awesome Preset\nDESCRIPTION: Example of defining a preset named 'awesome' that configures the resizing type to 'fill' and sets the output format to 'jpg'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Copyright Info Preservation\nDESCRIPTION: Controls preservation of copyright information during metadata stripping.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_44\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nkeep_copyright:%keep_copyright\nkcr:%keep_copyright\n```\n\n----------------------------------------\n\nTITLE: Defining Draw Detections Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `draw_detections` option (Pro feature). When `draw` is true (`1`, `t`, `true`), imgproxy detects objects of specified `class_name`(s) and draws their bounding boxes, classes, and confidences. If no class names are provided, bounding boxes for all detected objects are drawn. Requires object detection feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_33\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndraw_detections:%draw:%class_name1:%class_name2:...:%class_nameN\ndd:%draw:%class_name1:%class_name2:...:%class_nameN\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Position in imgproxy URL\nDESCRIPTION: Sets the position of detected objects in the resulting image when using obj/objw gravity. Allows adjusting object placement with various position types and offsets.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_16\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nobjects_position:%type:%x_offset:%y_offset\nobj_pos:%type:%x_offset:%y_offset\nop:%type:%x_offset:%y_offset\n```\n\n----------------------------------------\n\nTITLE: Defining Chained Pipeline Preset in imgproxy\nDESCRIPTION: Shows how to define a preset that includes chained pipelines. This preset applies multiple resize operations in sequence.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum File Size in Imgproxy\nDESCRIPTION: Automatically degrades image quality to keep the file size under a specified byte limit for supported formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_53\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_bytes:%bytes\nmb:%bytes\n```\n\n----------------------------------------\n\nTITLE: Service Principal Authentication Environment Variables\nDESCRIPTION: Environment variables required for authenticating with Azure using a Service Principal with either secret or certificate-based authentication.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# Secret Authentication\nAZURE_CLIENT_ID=your_client_id\nAZURE_TENANT_ID=your_tenant_id\nAZURE_CLIENT_SECRET=your_client_secret\n\n# Certificate Authentication\nAZURE_CLIENT_ID=your_client_id\nAZURE_TENANT_ID=your_tenant_id\nAZURE_CLIENT_CERTIFICATE_PATH=path_to_certificate\nAZURE_CLIENT_CERTIFICATE_PASSWORD=(optional)certificate_password\nAZURE_CLIENT_CERTIFICATE_CHAIN=(optional)certificate_chain\n```\n\n----------------------------------------\n\nTITLE: Complete imgproxy URL for Image Resizing\nDESCRIPTION: Full imgproxy URL example demonstrating how to resize a local image to fit 300x200 dimensions with specific processing parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/local_files.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Defining Preset Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to apply one or more predefined sets of processing options (presets). Multiple preset names can be listed, separated by colons (`:`). Presets allow grouping common configurations. Default is empty.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_25\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npreset:%preset_name1:%preset_name2:...:%preset_nameN\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Healthcheck for imgproxy using YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a health check for an imgproxy service within Docker Compose. It utilizes the `imgproxy health` command, which internally sends a request to the `/health` endpoint. The `test` parameter specifies the command to run, while `timeout`, `interval`, and `retries` control the checking frequency, timeout duration, and number of attempts before marking the container as unhealthy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Objects in Images with imgproxy\nDESCRIPTION: This example shows how to use imgproxy to blur objects of specific classes (faces in this case) in an image. This can be used for anonymization or hiding sensitive content.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Disabling Autoquality in imgproxy Using Bash\nDESCRIPTION: Shows how to disable autoquality in imgproxy by setting the IMGPROXY_AUTOQUALITY_METHOD environment variable to \"none\" in a bash environment. No additional dependencies are required other than a bash-compatible shell and imgproxy. This disables any automatic adjustment of image quality; the system will use standard quality settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Format Response Example\nDESCRIPTION: Example JSON response showing image format information\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Presets in imgproxy\nDESCRIPTION: Defines a list of preset configurations to be applied to the image processing request. Multiple presets can be used in a single URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_69\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npreset:%preset_name1:%preset_name2:...:%preset_nameN\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n\n----------------------------------------\n\nTITLE: Starting imgproxy with Preset Configuration File - Bash\nDESCRIPTION: This Bash command demonstrates launching the imgproxy process with explicit presets and info-presets configuration files using command line arguments. The -presets argument specifies a file containing processing preset definitions, and -info-presets does similarly for info presets. Both files should list preset definitions one per line and may include comments starting with '#'. This method allows dynamic customization of imgproxy processing and info retrieval behavior based on preset files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -presets /path/to/file/with/presets -info-presets /path/to/file/with/info-presets\n```\n\n----------------------------------------\n\nTITLE: Signed imgproxy URL Example\nDESCRIPTION: Final example of a fully signed imgproxy URL with the calculated signature prepended to the path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/signing_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/oKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Combining URL Chains with Preset Chains\nDESCRIPTION: Demonstrates how to use presets with chained pipelines in a URL. The preset is applied to the pipeline where it was used, and chained pipelines from both the preset and URL are merged.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Watermark Image in Bash\nDESCRIPTION: Command to base64 encode a watermark image file and remove newlines for use with IMGPROXY_WATERMARK_DATA environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Adding Padding to Image in imgproxy URL\nDESCRIPTION: Defines padding size using CSS-style syntax. Allows setting padding for top, right, bottom, and left sides of the image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_19\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npadding:%top:%right:%bottom:%left\npd:%top:%right:%bottom:%left\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific imgproxy Version to Heroku with Container Registry\nDESCRIPTION: Deploy a specific version of imgproxy to Heroku using Heroku Container Registry. This example uses version 3 for AMD64 architecture which is compatible with Heroku.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables\nDESCRIPTION: Demonstrates how to set AWS credentials using environment variables for both direct execution and Docker deployment of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File in INI Format\nDESCRIPTION: Shows the INI file format for the AWS shared credentials file, typically located at `~/.aws/credentials`. This method allows storing AWS access keys under a specific profile (e.g., `[default]`) which imgproxy can use for S3 authentication.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Specifying Google Cloud Storage Objects as Source URLs in imgproxy\nDESCRIPTION: This snippet demonstrates the URL format for accessing files from Google Cloud Storage buckets in imgproxy, including how to specify the object generation using a query parameter.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Multiple Watermarks Using Chained Pipelines\nDESCRIPTION: Example showing how to place multiple watermarks on the same image using chained pipelines. The first pipeline resizes the image and places the first watermark, while the second pipeline adds another watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Generating BlurHash with imgproxy URL Option\nDESCRIPTION: Specifies the imgproxy URL option to calculate and return the image's BlurHash. Requires `x_components` and `y_components` (number of horizontal and vertical components) to be greater than zero. Larger numbers result in a more detailed BlurHash. The maximum value for components is 9. This is a slow operation requiring the image to be fully downloaded and processed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_9\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\nblurhash:%x_components:%y_components\nbh:%x_components:%y_components\n```\n```\n\n----------------------------------------\n\nTITLE: Performing Object-Oriented Crop with imgproxy\nDESCRIPTION: Example of using the crop operation with object detection to keep faces in frame. The parameters specify a 256x256 crop with object gravity focused on face detections.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/g:obj:face/...\n```\n\n----------------------------------------\n\nTITLE: Defining Presets Syntax in imgproxy - imgproxy_presets\nDESCRIPTION: This snippet illustrates the generic syntax for defining an imgproxy preset. Each preset consists of a name and a set of options, separated by an equals sign. Options should follow the same format as those in processing or info URLs. No external dependencies are required for formatting presets, but correct option syntax is mandatory. Inputs are preset names and option pairs; output is the corresponding definition line.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Image URL\nDESCRIPTION: Specifies a custom fallback image URL using Base64 encoding.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_65\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nfallback_image_url:%url\nfiu:%url\n```\n\n----------------------------------------\n\nTITLE: Basic Chained Pipeline Syntax in imgproxy\nDESCRIPTION: Demonstrates the basic syntax for creating a chained pipeline in imgproxy using a minus sign (-) in the URL path to denote where a new pipeline begins.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n                        ^ the new pipeline starts here\n```\n\n----------------------------------------\n\nTITLE: Preset Definition for Chained Pipelines\nDESCRIPTION: Shows how to define a preset that includes multiple chained pipelines with various width and height transformations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Crop in imgproxy URL\nDESCRIPTION: Use the 'crop' and 'g:obj' parameters in the imgproxy URL to perform object-oriented cropping. This example crops the image to 256x256 pixels while keeping faces in frame.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/g:obj:face/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Best Format Options in imgproxy\nDESCRIPTION: These environment variables control the behavior of the 'best' format feature in imgproxy. They determine complexity thresholds, resolution limits, default behavior, and processing rules.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/best_format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD : 5.5\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION: 0\nIMGPROXY_BEST_FORMAT_BY_DEFAULT: false\nIMGPROXY_BEST_FORMAT_ALLOW_SKIPS: false\n```\n\n----------------------------------------\n\nTITLE: Zoom Options for Scaling Output Images - imgproxy_url_option - Markdown\nDESCRIPTION: Shows the syntax for specifying zoom functions on output images using 'zoom' or 'z' in both single and dual argument forms. Each argument represents scale factors along the X and Y axes. Factors must be greater than zero, and zoom can be used independently or combined with width and height parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_11\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nzoom:%zoom_x_y\\nz:%zoom_x_y\\n\\nzoom:%zoom_x:%zoom_y\\nz:%zoom_x:%zoom_y\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Health Check for imgproxy\nDESCRIPTION: YAML configuration block for setting up a Docker Compose healthcheck that uses the imgproxy health command. Defines timeout, interval, and retry settings for the health check.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Applying Pixelate Filter with imgproxy URL Option\nDESCRIPTION: Applies a pixelation filter to the resulting image. The `size` parameter determines the size of the individual squares (pixels) in the pixelated output. This option is disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_32\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npixelate:%size\npix:%size\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Key/Salt Configuration\nDESCRIPTION: Command to start imgproxy with specified key and salt environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/signing_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Complex URL with Preset and Chained Pipelines\nDESCRIPTION: Demonstrates how to combine presets with additional pipeline chains in the URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Specifying AES-CBC Encrypted Source URL (imgproxy URL)\nDESCRIPTION: Illustrates providing the source image URL encrypted using the AES-CBC algorithm. The encrypted string is prefixed with '/enc/' and, like Base64, can be split using '/' characters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark URL Processing Option Syntax in imgproxy\nDESCRIPTION: URL option format for applying a custom watermark from an external URL. The URL must be Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Objects in imgproxy\nDESCRIPTION: Demonstrates how to blur detected objects of a specific class (face) for anonymization or hiding NSFW content in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_13\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics Namespace for imgproxy\nDESCRIPTION: Set an optional namespace prefix for imgproxy metrics in Prometheus. This helps in organizing and identifying metrics specific to imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/monitoring/prometheus.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_PROMETHEUS_NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for IPTC and Photoshop Metadata\nDESCRIPTION: Illustrates the JSON structure for IPTC and Photoshop metadata returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iptc\": {\n    \"Name\": \"Spider-Man\",\n    \"Caption\": \"Spider-Man swings on the web\",\n    \"Copyright Notice\": \"Daily Bugle\",\n    \"Keywords\": [\"spider-man\", \"menance\", \"offender\"]\n  },\n  \"photoshop\": {\n    \"resolution\": {\n      \"XResolution\": 240,\n      \"XResolutionUnit\": \"inches\",\n      \"WidthUnit\": \"inches\",\n      \"YResolution\": 240,\n      \"YResolutionUnit\": \"inches\",\n      \"HeightUnit\": \"inches\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting imgproxy with Source URL Encryption\nDESCRIPTION: This command launches imgproxy with a configured source URL encryption key. The environment variable sets the hex-encoded key used for encrypting source URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Source URL Encryption\nDESCRIPTION: Command to start imgproxy with a configured encryption key for source URL encryption.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Specifying Expiration Timestamp - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Sets a UNIX timestamp after which the image request will be considered invalid, causing imgproxy to return a 404. Both 'expires' and the short alias 'exp' are supported. Parameter: timestamp (integer). Used for time-limited access to proxied images. No content dependency, but relies on server clock accuracy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_17\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexpires:%timestamp\nexp:%timestamp\n```\n\n----------------------------------------\n\nTITLE: Drawing Bounding Boxes for Detected Objects in imgproxy\nDESCRIPTION: Shows how to make imgproxy draw bounding boxes around detected objects of a specified class (face), useful for testing object detection models.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_14\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Using MALLOC_ARENA_MAX to Reduce Memory Fragmentation in imgproxy\nDESCRIPTION: Sets the MALLOC_ARENA_MAX environment variable to 2 to reduce GLib memory fragmentation in imgproxy. This limits the number of malloc arenas that GLib can create, which helps mitigate memory fragmentation issues in multi-threaded applications.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Multiple Watermarks Using Chained Pipelines\nDESCRIPTION: Shows how to apply multiple watermarks to an image by using chained pipelines, where each pipeline handles a different watermark application.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Local Filesystem Access\nDESCRIPTION: Example of running imgproxy with local filesystem access configured by setting IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable to the images directory path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Setting Autoquality by DSSIM via URL (imgproxy_url)\nDESCRIPTION: Demonstrates applying DSSIM-based autoquality for a specific request using URL parameters. The format is `autoquality:method:target:min_quality:max_quality:allowed_error`. This example uses the `dssim` method, targets a DSSIM of 0.02, allows quality between 70 and 80, and accepts a DSSIM error up to 0.001.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/autoquality.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via Environment Variables in Bash\nDESCRIPTION: Shows how to set AWS credentials using environment variables when running imgproxy directly or through Docker. This method requires setting AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from source on macOS with Homebrew\nDESCRIPTION: Commands for installing dependencies and building imgproxy from source on macOS using Homebrew.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoquality by DSSIM (Bash)\nDESCRIPTION: Configures imgproxy globally to use the `dssim` method for autoquality via environment variables. `IMGPROXY_AUTOQUALITY_METHOD=\"dssim\"` enables the method. `IMGPROXY_AUTOQUALITY_TARGET` sets the desired DSSIM value. `IMGPROXY_AUTOQUALITY_ALLOWED_ERROR` specifies the acceptable deviation from the target DSSIM. `IMGPROXY_AUTOQUALITY_MIN` and `IMGPROXY_AUTOQUALITY_MAX` define the quality range. `IMGPROXY_AUTOQUALITY_FORMAT_MIN` and `IMGPROXY_AUTOQUALITY_FORMAT_MAX` allow format-specific quality bounds.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Configuring JPEG Options in ImgProxy URLs\nDESCRIPTION: Allows redefining JPEG saving options. All arguments have the same meaning as the Advanced JPEG compression configs and are optional.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_54\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\njpeg_options:%progressive:%no_subsample:%trellis_quant:%overshoot_deringing:%optimize_scans:%quant_table\njpgo:%progressive:%no_subsample:%trellis_quant:%overshoot_deringing:%optimize_scans:%quant_table\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Dominant Colors\nDESCRIPTION: Illustrates the JSON structure returned by imgproxy when the `dominant_colors` option is enabled. It includes a `dominant_colors` object containing keys for different color types (e.g., `dark_muted`, `vibrant`) and their corresponding RGB values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dominant_colors\": {\n    \"dark_muted\": { \"R\": 75, \"G\": 70, \"B\": 57 },\n    \"dark_vibrant\": { \"R\": 90, \"G\": 78, \"B\": 43 },\n    \"light_muted\": { \"R\": 167, \"G\": 156, \"B\": 130 },\n    \"light_vibrant\": { \"R\": 212, \"G\": 198, \"B\": 165 },\n    \"muted\": { \"R\": 155, \"G\": 146, \"B\": 120 },\n    \"vibrant\": { \"R\": 172, \"G\": 146, \"B\": 83 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Dominant Colors\nDESCRIPTION: Provides an example JSON response structure when the `dominant_colors` option is enabled in imgproxy. The response includes a `dominant_colors` object containing various color types (like vibrant, muted, dark/light variants) mapped to their respective RGB values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"dominant_colors\": {\n    \"dark_muted\": { \"R\": 75, \"G\": 70, \"B\": 57 },\n    \"dark_vibrant\": { \"R\": 90, \"G\": 78, \"B\": 43 },\n    \"light_muted\": { \"R\": 167, \"G\": 156, \"B\": 130 },\n    \"light_vibrant\": { \"R\": 212, \"G\": 198, \"B\": 165 },\n    \"muted\": { \"R\": 155, \"G\": 146, \"B\": 120 },\n    \"vibrant\": { \"R\": 172, \"G\": 146, \"B\": 83 }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Cropping Images with Object-Oriented Focus in imgproxy\nDESCRIPTION: This snippet demonstrates how to use imgproxy to crop an image while keeping objects of desired classes (in this case, faces) in frame. It uses the 'crop' and 'g:obj' processing options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/g:obj:face/...\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark URL Options in imgproxy\nDESCRIPTION: URL processing options for applying custom watermarks using Base64-encoded URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Using custom watermark URL with imgproxy\nDESCRIPTION: This snippet demonstrates the URL option format for using a custom watermark URL with imgproxy. The URL should be Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Adding Padding to Images with imgproxy URL Option\nDESCRIPTION: Adds padding around the image using CSS-style syntax (`top`, `right`, `bottom`, `left`). Missing values inherit (e.g., `top` sets all, `right` sets left). At least one dimension must be set. The padded area is filled based on the [background] option. Padding is applied after transformations (except watermarking), increasing final image dimensions, and scales according to the [dpr] option.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_19\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npadding:%top:%right:%bottom:%left\npd:%top:%right:%bottom:%left\n```\n\n----------------------------------------\n\nTITLE: Fast Trim Implementation with Chained Pipelines\nDESCRIPTION: Example showing how to improve performance by moving heavy trimming operations to a separate pipeline after resizing. This approach is more efficient when working with images that need to be both resized and trimmed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Defining Video Thumbnail Keyframes Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to control whether keyframes should be used for video thumbnail extraction. This setting overrides the global `IMGPROXY_VIDEO_THUMBNAIL_KEYFRAMES` configuration. The `%keyframes` parameter typically acts as a boolean flag.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_keyframes:%keyframes\nvtk:%keyframes\n```\n\n----------------------------------------\n\nTITLE: Applying watermark to image using imgproxy URL option\nDESCRIPTION: This snippet shows the URL option format for applying a watermark to an image using imgproxy. It includes parameters for opacity, position, offset, and scale.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark URL Option in imgproxy\nDESCRIPTION: URL processing option for specifying a custom watermark using a Base64-encoded URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Using Presets in imgproxy URL (Presets-Only Mode)\nDESCRIPTION: Illustrates how to use presets in an imgproxy URL when in presets-only mode. This mode is enabled by setting IMGPROXY_ONLY_PRESETS to true.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Applying Color Overlay with imgproxy URL Option (Pro)\nDESCRIPTION: Places a color overlay on the processed image. `opacity` specifies the overlay's transparency (0 means no overlay). `color` (optional) is the hex code for the overlay color (default is `000` black). `keep_alpha` (optional boolean `1`, `t`, `true`) preserves the original image's alpha channel. Default is `false`. This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_36\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncolorize:%opacity:%color:%keep_alpha\ncol:%opacity:%color:%keep_alpha\n```\n\n----------------------------------------\n\nTITLE: Enabling Client Hints Support in imgproxy\nDESCRIPTION: Enables Client Hints support to determine default width and DPR options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_57\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENABLE_CLIENT_HINTS=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Best Format by Default (imgproxy Configuration)\nDESCRIPTION: When this configuration variable is set to 'true', imgproxy will automatically use the 'best' format selection logic if the resulting image format is not explicitly specified in the request, instead of defaulting to the source image format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/best_format.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_BEST_FORMAT_BY_DEFAULT\n```\n\n----------------------------------------\n\nTITLE: Generating File Paths for Key and Salt in imgproxy (Bash)\nDESCRIPTION: This snippet demonstrates how to specify file paths for key and salt using the command line in imgproxy. It references separate files containing hex-coded keys and salts.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -keypath /path/to/file/with/key -saltpath /path/to/file/with/salt\n```\n\n----------------------------------------\n\nTITLE: Manually deploying imgproxy to Heroku\nDESCRIPTION: Step-by-step instructions for manually deploying imgproxy to Heroku by cloning the repository, creating a Heroku app, and pushing the code.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for BlurHash\nDESCRIPTION: Shows an example JSON response structure containing the calculated BlurHash string when the `blurhash` option is used in imgproxy. The BlurHash is provided under the `blurhash` key.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"blurhash\": \"LLH-}fox0fRQ%Do}9as9_3%2M{S2\"\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Crop Area with imgproxy URL Option\nDESCRIPTION: Specifies an area of the image to be cropped before any resizing occurs. `width` and `height` define the crop dimensions (absolute if >= 1, relative if < 1, full size if 0). `gravity` (optional) determines the anchor point for the crop, defaulting to the main [gravity] option if unspecified. Both long (`crop`) and short (`c`) forms are available.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_17\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncrop:%width:%height:%gravity\nc:%width:%height:%gravity\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Crop URL in imgproxy\nDESCRIPTION: URL pattern for cropping images while keeping specified object classes (face, cat, dog) in frame.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_6\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:obj:face:cat:dog/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect Limit in imgproxy\nDESCRIPTION: Sets the maximum number of redirects imgproxy can follow while requesting the source image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_MAX_REDIRECTS`]: the max number of redirects imgproxy can follow while requesting the source image. When set to `0`, no redirects are allowed. Default: `10`\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Objects in imgproxy\nDESCRIPTION: Shows how to blur detected objects of specific classes for anonymization or content hiding purposes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Generating Random Encryption Key in Bash\nDESCRIPTION: Command to generate a random hex-encoded key suitable for AES encryption using /dev/random\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Configuring Unlimited SVG Size\nDESCRIPTION: When set to 'true', disables the internal 10MB limit on the size of SVG files processed by imgproxy. The default is 'false'. Warning: Enabling this can lead to memory exhaustion and Denial-of-Service (DoS) attacks via large SVG files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_16\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_SVG_UNLIMITED\n```\n\n----------------------------------------\n\nTITLE: Minimum Height Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet describes how to define minimum output height for an image via 'min-height' or its alias 'mh' in the URL. It enforces that the resulting image will not be shorter than the specified height, subject to interaction with the 'height' parameter which may trigger cropping. Input is an integer; output is an image with a minimum enforced height.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_10\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmin-height:%height\nmh:%height\n```\n\n----------------------------------------\n\nTITLE: Setting AWS credentials via environment variables for imgproxy\nDESCRIPTION: Shows how to set AWS Access Key ID and Secret Access Key using environment variables when running imgproxy. This method works for both direct execution and Docker containers.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Extend Option in imgproxy\nDESCRIPTION: Extends images smaller than the given size, with optional gravity parameter to control positioning.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_13\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nextend:%extend:%gravity\nex:%extend:%gravity\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Encryption Key (Bash)\nDESCRIPTION: This command demonstrates how to start imgproxy with a configured source URL encryption key. The key is passed as an environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowance of Loopback Source Addresses\nDESCRIPTION: When set to 'true', allows imgproxy to request source images from loopback IP addresses (127.0.0.1-127.255.255.255 and IPv6 equivalents). The default value is 'false'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_12\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_ALLOW_LOOPBACK_SOURCE_ADDRESSES\n```\n\n----------------------------------------\n\nTITLE: Applying DSSIM-Based imgproxy Autoquality via URL Option\nDESCRIPTION: Illustrates using the `autoquality` processing option in an imgproxy URL to apply DSSIM-based quality adjustment (`dssim`). It specifies the target DSSIM (0.02), minimum quality (70), maximum quality (80), and allowed error (0.001) for a specific image request. This overrides global settings for the request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/autoquality.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Format Min/Max Quality Settings\nDESCRIPTION: Example of format-specific quality settings for different image formats using environment variables\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_22\n\nLANGUAGE: properties\nCODE:\n```\njpeg=70,avif=40,webp=60\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-based Autoquality in imgproxy\nDESCRIPTION: Configuration for DSSIM-based autoquality which adjusts quality to achieve target structural dissimilarity value. Includes error tolerance and format-specific quality ranges.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Generating Video Thumbnail Tiles in ImgProxy URLs\nDESCRIPTION: Creates a tiled sprite from video frames with control over step between frames, tile layout, dimensions, and various formatting options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_63\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_tile:%step:%columns:%rows:%tile_width:%tile_height:%extend_tile:%trim:%fill:%focus_x:%focus_y\nvtt:%step:%columns:%rows:%tile_width:%tile_height:%extend_tile:%trim:%fill:%focus_x:%focus_y\n```\n\n----------------------------------------\n\nTITLE: EXIF Response Example\nDESCRIPTION: Example JSON response showing EXIF metadata\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exif\": {\n    \"Aperture\": \"8.00 EV (f/16.0)\",\n    \"Contrast\": \"Normal\",\n    \"Date and Time\": \"2016:09:11 22:15:03\",\n    \"Model\": \"NIKON D810\",\n    \"Software\": \"Adobe Photoshop Lightroom 6.1 (Windows)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Average Color Response Example - JSON\nDESCRIPTION: Presents the JSON structure returned when requesting average color analysis via imgproxy. The response includes the average RGBA value. No dependencies besides imgproxy and a valid image. Input parameters are set via the URL options. Typical output is a single color object.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"average\\\": { \\\"R\\\": 139, \\\"G\\\": 132, \\\"B\\\": 121, \\\"A\\\": 255 }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'all' Pseudo-Class with Weighted Object Gravity in imgproxy URL\nDESCRIPTION: Illustrates the use of the `all` pseudo-class within the `gravity:objw` parameter in an imgproxy URL. This sets a default weight (2) for all detected objects during a 256x256 crop, while specifically assigning a higher weight (10) to faces, making them the primary focus.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:objw:all:2:face:10/...\n```\n\n----------------------------------------\n\nTITLE: Encoding Watermark Image Data in Bash\nDESCRIPTION: Command to generate Base64-encoded image data for the IMGPROXY_WATERMARK_DATA environment variable. It converts a watermark file to Base64 and removes newlines for proper formatting.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Processing URL for ML-based Autoquality\nDESCRIPTION: URL processing option example for ML-based autoquality with specific parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/autoquality.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy URL template for image info retrieval\nDESCRIPTION: Basic URL structure for accessing the /info endpoint with signature, info options, and source URL in different encoding formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/info/%signature/%info_options/plain/%source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/%encoded_source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/enc/%encrypted_source_url\n```\n\n----------------------------------------\n\nTITLE: Min Width Option in imgproxy\nDESCRIPTION: Defines the minimum width of the resulting image. Caution is advised when using with the width option.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmin-width:%width\nmw:%width\n```\n\n----------------------------------------\n\nTITLE: IPTC and Photoshop Metadata Info Response\nDESCRIPTION: Example JSON response when requesting IPTC and Photoshop metadata from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iptc\": {\n    \"Name\": \"Spider-Man\",\n    \"Caption\": \"Spider-Man swings on the web\",\n    \"Copyright Notice\": \"Daily Bugle\",\n    \"Keywords\": [\"spider-man\", \"menance\", \"offender\"]\n  },\n  \"photoshop\": {\n    \"resolution\": {\n      \"XResolution\": 240,\n      \"XResolutionUnit\": \"inches\",\n      \"WidthUnit\": \"inches\",\n      \"YResolution\": 240,\n      \"YResolutionUnit\": \"inches\",\n      \"HeightUnit\": \"inches\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Watermark URL Options in imgproxy\nDESCRIPTION: URL processing options for applying watermarks to images with customizable opacity, position, offset, and scale parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Enforcing AVIF Usage in imgproxy\nDESCRIPTION: Enables AVIF support detection and enforces AVIF usage when supported by the browser.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENFORCE_AVIF=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnail Tile Generation\nDESCRIPTION: Generates tiled sprite from video frames with customizable layout and sizing options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_63\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_tile:%step:%columns:%rows:%tile_width:%tile_height:%extend_tile:%trim:%fill:%focus_x:%focus_y\nvtt:%step:%columns:%rows:%tile_width:%tile_height:%extend_tile:%trim:%fill:%focus_x:%focus_y\n```\n\n----------------------------------------\n\nTITLE: Optimizing Image Trimming with Chained Pipelines in imgproxy\nDESCRIPTION: Demonstrates a more efficient way to trim images by first resizing and then trimming in separate pipelines. This approach is faster when scaling down images and when trim accuracy is not critical.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Basic Settings\nDESCRIPTION: Essential environment variables required to enable and configure Azure Blob Storage integration with imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_USE_ABS=true\nIMGPROXY_ABS_NAME=your_azure_account_name\nIMGPROXY_ABS_ENDPOINT=your_endpoint_url\n```\n\n----------------------------------------\n\nTITLE: Installing and Using TCMalloc with imgproxy in Bash\nDESCRIPTION: These commands install libtcmalloc-minimal4 and run imgproxy using TCMalloc as the memory allocator. This is achieved by preloading the TCMalloc library using the LD_PRELOAD environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Building and Running Custom imgproxy Docker Image\nDESCRIPTION: Commands to build a custom imgproxy Docker image from the source code and run it locally. This approach is useful when you need to customize the imgproxy installation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy with Helm\nDESCRIPTION: Commands for deploying imgproxy to a Kubernetes cluster using the official Helm chart, supporting both Helm 2 and 3.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring malloc arena max in imgproxy\nDESCRIPTION: Example of setting MALLOC_ARENA_MAX environment variable to reduce GLib memory usage and fragmentation by limiting malloc arenas.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv5 Model to ONNX Format\nDESCRIPTION: Commands for exporting YOLOv5 model to ONNX format with FP32 and FP16 precision options\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Export with FP32 precision\npython export.py \\\n  --weights yolov5s.pt \\\n  --include onnx \\\n  --simplify\n\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export.py \\\n  --weights yolov5s.pt \\\n  --include onnx \\\n  --simplify \\\n  --half\n```\n\n----------------------------------------\n\nTITLE: Setting SVG Recognition Limit in imgproxy\nDESCRIPTION: Configures the maximum number of bytes imgproxy will read to recognize SVG files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_MAX_SVG_CHECK_BYTES`]: the maximum number of bytes imgproxy will read to recognize SVG files. If imgproxy is unable to recognize your SVG, try increasing this number. Default: `32768` (32KB)\n```\n\n----------------------------------------\n\nTITLE: Preset Definition for Chained Pipelines\nDESCRIPTION: Example of defining a preset that includes multiple chained pipelines with different width and height settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Integration for imgproxy\nDESCRIPTION: Environment variables to enable and configure Azure Blob Storage integration in imgproxy. Includes settings for enabling the feature, account name, account key, and custom endpoint.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_USE_ABS`]: when `true`, enables image fetching from Azure Blob Storage containers. Default: `false`\n* [`IMGPROXY_ABS_NAME`]: the Azure account name. Default: blank\n* [`IMGPROXY_ABS_KEY`]: the Azure account key. Default: blank\n* [`IMGPROXY_ABS_ENDPOINT`]: the custom Azure Blob Storage endpoint to be used by imgproxy. Default: blank\n```\n\n----------------------------------------\n\nTITLE: Selecting JPEG Quantization Table (Pro)\nDESCRIPTION: ((pro)) Specifies the quantization table to use for JPEG compression. Supported values range from 0 to 8, each corresponding to a different standard or tuned table (e.g., Annex K, Flat, MSSIM-tuned, ImageMagick, PSNR-HVS-M-tuned, etc.). The default is 0 (JPEG Annex K). Requires imgproxy Pro.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_30\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_JPEG_QUANT_TABLE\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy source code\nDESCRIPTION: Clone the imgproxy GitHub repository or download a specific version of the source code. This allows for manual installation or customization of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific Version to Heroku Container Registry\nDESCRIPTION: Commands to deploy a specific version of imgproxy to Heroku using Container Registry\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Preserving Copyright Info in Imgproxy\nDESCRIPTION: Retains copyright information while stripping other metadata when enabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_46\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nkeep_copyright:%keep_copyright\nkcr:%keep_copyright\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Configuration format for AWS credentials file located in .aws/credentials\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Basic Pipeline Chaining Syntax in imgproxy\nDESCRIPTION: Demonstrates the basic syntax for chaining pipelines using a minus sign (-) in the URL path. Shows how to separate width and crop operations into different pipelines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt for imgproxy in Bash\nDESCRIPTION: Uses common UNIX command-line tools to generate a random 64-byte hex-encoded string suitable for use as the IMGPROXY_KEY or IMGPROXY_SALT. Requires xxd, tr, and access to /dev/random. This script is run in a Bash shell, outputs one line of hex with no newline, and is useful for quickly generating cryptographically secure credentials. Input: none. Output: random hex string (suitable for environment variable use).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Configuring Local File Serving in imgproxy\nDESCRIPTION: Environment variable for enabling and configuring local file serving in imgproxy. Specifies the root of the local filesystem.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_LOCAL_FILESYSTEM_ROOT`]: the root of the local filesystem. Keep this empty to disable local file serving.\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for OpenTelemetry in imgproxy\nDESCRIPTION: Set up TLS certificates for secure communication between imgproxy and the OpenTelemetry collector. This includes specifying server and client certificates for mTLS.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_SERVER_CERT=\"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\nIMGPROXY_OPEN_TELEMETRY_CLIENT_CERT=\"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\nIMGPROXY_OPEN_TELEMETRY_CLIENT_KEY=\"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Integration for Imgproxy\nDESCRIPTION: Environment variables for configuring Datadog metrics integration in imgproxy. Includes basic and additional metrics enabling options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_7\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_DATADOG_ENABLE=false\nIMGPROXY_DATADOG_ENABLE_ADDITIONAL_METRICS=false\n```\n\n----------------------------------------\n\nTITLE: Adding Shadow to Watermark in Imgproxy\nDESCRIPTION: Adds a shadow to the watermark with a specified blur sigma value for the shadow mask.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_43\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_shadow:%sigma\nwmsh:%sigma\n```\n\n----------------------------------------\n\nTITLE: Setting DPI in Imgproxy\nDESCRIPTION: Replaces the image's DPI metadata with a specified value or resets it to default when set to 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_47\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndpi:%dpi\n```\n\n----------------------------------------\n\nTITLE: All Objects Weighted Crop URL in imgproxy\nDESCRIPTION: URL pattern showing how to set weights for all detected objects using the 'all' pseudo-class.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_8\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:objw:all:2:face:10/...\n```\n\n----------------------------------------\n\nTITLE: Dimensions option for image info retrieval\nDESCRIPTION: URL option to request the width and height of an image, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndimensions:%dimensions\nd:%dimensions\n```\n\n----------------------------------------\n\nTITLE: Adjusting Brightness, Contrast, and Saturation with imgproxy URL Option (Pro)\nDESCRIPTION: A meta-option to simultaneously adjust the image's brightness, contrast, and saturation. All arguments (`brightness`, `contrast`, `saturation`) are optional; omitting an argument uses its default value (0 for brightness, 1 for contrast and saturation). This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_24\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nadjust:%brightness:%contrast:%saturation\na:%brightness:%contrast:%saturation\n```\n\n----------------------------------------\n\nTITLE: Zoom Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet covers how to set zoom factors for resizing images, affecting scale on X and Y axes. Options use both single and dual-argument forms for proportional or independent X/Y scaling. Both 'zoom' and shortcut 'z' are supported. Zoom values must be >0. Used in conjunction with or independently from dimension options to achieve scaled results. Input is a float or two floats; output is a zoomed image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_11\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nzoom:%zoom_x_y\nz:%zoom_x_y\n\nzoom:%zoom_x:%zoom_y\nz:%zoom_x:%zoom_y\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Video Metadata\nDESCRIPTION: Demonstrates the JSON structure for video metadata and stream information returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"video_meta\": {\n    \"com.android.version\": \"9\",\n    \"compatible_brands\": \"isommp42\",\n    \"creation_time\": \"2022-01-12T15:04:10.000000Z\",\n    \"location\": \"+46.4845+030.6848/\",\n    \"location-eng\": \"+46.4845+030.6848/\",\n    \"major_brand\": \"mp42\",\n    \"minor_version\": \"0\"\n  },\n  \"video_streams\": [\n    {\n      \"type\": \"video\",\n      \"codec\": \"h264\",\n      \"duration\": 12.345,\n      \"bps\": 16910024,\n      \"fps\": 24,\n      \"language\": \"eng\"\n    },\n    {\n      \"type\": \"audio\",\n      \"codec\": \"eac3\",\n      \"duration\": 12.345,\n      \"bps\": 768000,\n      \"frequency\": 48000,\n      \"layout\": \"5.1(side)\",\n      \"language\": \"eng\"\n    },\n    {\n      \"type\": \"subtitle\",\n      \"codec\": \"subrip\",\n      \"language\": \"eng\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete imgproxy URL Examples\nDESCRIPTION: Shows complete examples of signed imgproxy URLs using various parameters including preset, resize, gravity, and format conversion. Demonstrates different ways to provide the source URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_81\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/preset:sharp/resize:fill:300:400:0/gravity:sm/plain/http://example.com/images/curiosity.jpg@png\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/pr:sharp/rs:fill:300:400:0/g:sm/plain/http://example.com/images/curiosity.jpg@png\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/AfrOrF3gWeDA6VOlDG4TzxMv39O7MXnF4CXpKUwGqRM/pr:sharp/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto Rotation via EXIF with imgproxy URL Option\nDESCRIPTION: Automatically rotates the image based on its EXIF Orientation tag when `auto_rotate` is set to `1`, `t`, or `true`. This option overrides the global `IMGPROXY_AUTO_ROTATE` configuration for the specific request. The orientation tag is always removed from the processed image metadata.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nauto_rotate:%auto_rotate\nar:%auto_rotate\n```\n\n----------------------------------------\n\nTITLE: Using Presets in imgproxy URLs\nDESCRIPTION: Defines a list of presets to be applied to the image processing. Multiple presets can be used in a single URL to combine different processing configurations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_72\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npreset:%preset_name1:%preset_name2:...:%preset_nameN\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Presets via Command Line\nDESCRIPTION: Example of using command line argument to specify presets file path for imgproxy configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -presets /path/to/file/with/presets\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage URL Format for imgproxy\nDESCRIPTION: Demonstrates the URL format for accessing files in Google Cloud Storage buckets with an optional generation parameter. The format uses gs:// protocol followed by bucket name and file key.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Setting up imgproxy with local filesystem access\nDESCRIPTION: Run imgproxy with the IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable set to your images directory to enable local file processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from source on macOS with Homebrew\nDESCRIPTION: Install dependencies and build imgproxy from source on macOS using Homebrew. This command includes necessary environment variables for successful compilation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu\nDESCRIPTION: Commands to install libvips dependency on Ubuntu using PPA repository.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:dhor/myway\nsudo apt-get update\nsudo apt-get install libvips-dev\n```\n\n----------------------------------------\n\nTITLE: Maximum File Size Control\nDESCRIPTION: Automatically adjusts quality to keep file size under specified limit.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_51\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_bytes:%bytes\nmb:%bytes\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOX Model to ONNX Format\nDESCRIPTION: Command to export a YOLOX model to ONNX format with decode_in_inference option enabled\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython tools/export_onnx.py \\\n  -f /path/to/experiment.py \\\n  -c /path/to/checkpoint.pth \\\n  --output-name /path/to/output.onnx \\\n  --decode_in_inference\n```\n\n----------------------------------------\n\nTITLE: Setting Best Format Complexity Threshold in imgproxy\nDESCRIPTION: Specifies the image complexity threshold for using lossless or near-lossless encoding. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_53\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD=5.5\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLO-NAS S to ONNX Format Using SuperGradients (python)\nDESCRIPTION: This Python script shows how to load a YOLO-NAS S model (either pretrained or from checkpoint) from the SuperGradients model zoo, prepare it for ONNX export, and then export it with preprocessing and postprocessing disabled so imgproxy can handle those. Parameters include the onnx output file path, quantization mode (FP16), detection output format, and input shape. Python dependencies: super_gradients, proper weights. The result is a streamlined ONNX model ready for imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom super_gradients.training import models\nfrom super_gradients.common.object_names import Models\nfrom super_gradients.conversion import DetectionOutputFormatMode\nfrom super_gradients.conversion.conversion_enums import ExportQuantizationMode\n\n# Load the model from the SuperGradients model zoo\nmodel = models.get(\n  Models.YOLO_NAS_S,\n  pretrained_weights=\"coco\"\n)\n# Or load the model from a checkpoint\nmodel = models.get(\n  Models.YOLO_NAS_S,\n  num_classes=80,\n  checkpoint_path=f\"neural-yolo_nas_s.pth\"\n)\n\nmodel.eval()\nmodel.prep_model_for_conversion(input_size=[1, 3, 640, 640])\n\n# Disable preprocessing and postprocessing since imgproxy will handle it\nmodel.export(\n  \"/content/yolo_nas_s.onnx\",\n  preprocessing=False,\n  postprocessing=False,\n  output_predictions_format=DetectionOutputFormatMode.FLAT_FORMAT,\n  input_image_shape=[640, 640],\n  quantization_mode=ExportQuantizationMode.FP16,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Presets in imgproxy\nDESCRIPTION: Environment variables and command-line arguments for defining processing and info presets in imgproxy. Includes options for setting presets using environment variables or a file, and enabling presets-only mode.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_PRESETS`]: a set of processing preset definitions, comma divided. Example: `default=resizing_type:fill/enlarge:1,sharp=sharpen:0.7,blurry=blur:2`. Default: blank\n* [`IMGPROXY_INFO_PRESETS`]: ((pro)) a set of info preset definitions, comma divided. Example: `default=xmp:0/blurhash:4:3`. Default: blank\n* [`IMGPROXY_PRESETS_SEPARATOR`]: a string that will be used as a presets' separator. Default: `,`\n\n```bash\nimgproxy -presets /path/to/file/with/presets -info-presets /path/to/file/with/info-presets\n```\n\n```imgproxy_presets\ndefault=resizing_type:fill/enlarge:1\n\n# Sharpen the image to make it look better\nsharp=sharpen:0.7\n\n# Blur the image to hide details\nblurry=blur:2\n```\n\n* [`IMGPROXY_ONLY_PRESETS`]: when `true`, enables presets-only mode. Default: `false`\n* [`IMGPROXY_INFO_ONLY_PRESETS`]: when `true`, enables presets-only mode for the [info](../usage/getting_info.mdx) endpoint. Default: `IMGPROXY_ONLY_PRESETS` value\n```\n\n----------------------------------------\n\nTITLE: Enabling WebP Detection in imgproxy\nDESCRIPTION: Enables WebP support detection based on the Accept HTTP header.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENABLE_WEBP_DETECTION=true\n```\n\n----------------------------------------\n\nTITLE: Disabling imgproxy Autoquality via URL Processing Option\nDESCRIPTION: Demonstrates how to disable autoquality for a single image request by adding `autoquality:none` to the processing options part of the imgproxy URL. This overrides any global autoquality configuration for this specific request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: Building a Linux package for imgproxy from Docker image\nDESCRIPTION: Command to export a DEB, RPM, or TAR package from a Docker image using the imgproxy-build-package script.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -u0 --rm -it -v $(pwd):/dist ghcr.io/imgproxy/imgproxy:latest-amd64 imgproxy-build-package deb /dist\n```\n\n----------------------------------------\n\nTITLE: Calculating Dominant Colors with imgproxy URL Option\nDESCRIPTION: Specifies the imgproxy URL option to calculate and return the dominant colors of an image. Setting `dominant_colors` to `1`, `t`, or `true` enables the calculation. The optional `build_missed` parameter (defaulting to `false`) allows imgproxy to infer missing color types based on found ones. This is a slow operation requiring the image to be fully downloaded and processed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\ndominant_colors:%dominant_colors:%build_missed\ndc:%dominant_colors:%build_missed\n```\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File for Systems Manager\nDESCRIPTION: Configuration template for AWS credentials file used with Systems Manager access.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Watermark URL in Imgproxy\nDESCRIPTION: Specifies a custom image URL to be used as a watermark. The URL should be URL-safe Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_39\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Basic imgproxy Info URL Templates\nDESCRIPTION: Base URL patterns for accessing the /info endpoint with different source URL encoding methods\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/info/%signature/%info_options/plain/%source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/%encoded_source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/enc/%encrypted_source_url\n```\n\n----------------------------------------\n\nTITLE: Starting imgproxy with Local Filesystem Access\nDESCRIPTION: Command to start imgproxy with local filesystem access by setting the IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable to the images directory path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment of imgproxy to Heroku\nDESCRIPTION: Clone the imgproxy repository, create a Heroku application with container stack, and deploy imgproxy manually to Heroku.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Defining Imgproxy Preset Configurations\nDESCRIPTION: Example preset configuration file showing how to define different image processing presets including default settings, sharpening, and blurring effects.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ndefault=resizing_type:fill/enlarge:1\n\n# Sharpen the image to make it look better\nsharp=sharpen:0.7\n\n# Blur the image to hide details\nblurry=blur:2\n```\n\n----------------------------------------\n\nTITLE: Format-Specific Quality Settings\nDESCRIPTION: Defines quality settings for specific image formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_49\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nformat_quality:%format1:%quality1:%format2:%quality2:...:%formatN:%qualityN\nfq:%format1:%quality1:%format2:%quality2:...:%formatN:%qualityN\n```\n\n----------------------------------------\n\nTITLE: Height Option in imgproxy\nDESCRIPTION: Sets the height of the resulting image, with special handling when set to 0 based on resizing type.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nheight:%height\nh:%height\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Output Height - imgproxy_url_option - Markdown\nDESCRIPTION: Demonstrates using 'min-height' and abbreviated 'mh' for constraining the minimum output height. Warns that specifying both height and min-height may result in cropping. Argument is optional; integer value required.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_10\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmin-height:%height\\nmh:%height\n```\n\n----------------------------------------\n\nTITLE: Controlling Enlargement Behavior - imgproxy_url_option - Markdown\nDESCRIPTION: Describes the 'enlarge' option and its short alias 'el' for enforcing enlargement of images when original input is smaller than target size. A value of '1', 't', or 'true' activates enlargement; 'false' is the default. Argument is optional.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_13\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nenlarge:%enlarge\\nel:%enlarge\n```\n\n----------------------------------------\n\nTITLE: Fast Trim Optimization with Chained Pipelines\nDESCRIPTION: Demonstrates how to optimize image processing by moving the resource-intensive trim operation to a separate pipeline. Resizing is performed first, making the subsequent trim operation much faster.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Buster - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Specifies a `cachebuster` string in the URL to force cache invalidation of CDN/proxy/browser caches without affecting image processing. Recommended for reflecting changes not encoded in the main URL (such as presets or quality). Supports digital signing and should be used instead of URL queries.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_45\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncachebuster:%string\\ncb:%string\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Average Color\nDESCRIPTION: Example JSON response when requesting the average color of an image from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"average\": { \"R\": 139, \"G\": 132, \"B\": 121, \"A\": 255 }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expiry Time - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Sets an expiration time via a UNIX timestamp in the URL. Once expired, imgproxy returns HTTP 404 for the request. Designed for time-sensitive image delivery scenarios. The `%timestamp` parameter is checked against the current server time. No default; leaving empty disables expiration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_46\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexpires:%timestamp\\nexp:%timestamp\n```\n\n----------------------------------------\n\nTITLE: Configuring Return Attachment in imgproxy URL\nDESCRIPTION: Demonstrates how to set the return attachment option in the imgproxy URL. When enabled, it forces the browser to open a 'Save as' dialog.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_71\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nreturn_attachment:%return_attachment\natt:%return_attachment\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Bands Info\nDESCRIPTION: Example JSON response when requesting the number of bands in an image from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bands\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Base64-encoded Watermark Data in Bash\nDESCRIPTION: This command reads a watermark image file, encodes it to Base64, and removes newlines to prepare it for the IMGPROXY_WATERMARK_DATA environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv8 Model to ONNX (FP16 CUDA) using Bash\nDESCRIPTION: Bash command using the `yolo` CLI tool to export a YOLOv8 model (`.pt`) to ONNX format with FP16 precision, targeting a CUDA-compatible GPU. Uses the `--half` flag and specifies the CUDA device (e.g., `device=0`).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP16 precision using CUDA-compatible GPU\nyolo export \\\n  model=yolov8n.pt \\\n  format=onnx \\\n  simplify=True \\\n  half=True \\\n  device=0\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Animation Frames in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_ANIMATION_FRAMES configuration on a per-request basis. Requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be set to true as it modifies a security restriction.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_76\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_animation_frames:%size\nmaf:%size\n```\n\n----------------------------------------\n\nTITLE: Fetching Detected Objects Information in imgproxy\nDESCRIPTION: Illustrates how to use the '/info' endpoint to retrieve information about detected objects in an image using imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_15\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Environment Variables\nDESCRIPTION: Environment variables required for configuring OpenTelemetry integration in imgproxy, including protocol selection and endpoint configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/monitoring/open_telemetry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_ENABLE=true\nIMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS=true\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc\nOTEL_EXPORTER_OTLP_ENDPOINT=https://localhost:4317\nOTEL_SERVICE_NAME=imgproxy\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Hex Key (Bash)\nDESCRIPTION: This Bash command generates a 32-byte random key, hex-encodes it, and removes newline characters. This key can be used for AES-256-CBC encryption as the `IMGPROXY_SOURCE_URL_ENCRYPTION_KEY`. Requires `xxd` and `tr` command-line utilities.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Getting imgproxy source code by cloning the GitHub repository\nDESCRIPTION: Commands for obtaining the imgproxy source code by cloning the GitHub repository.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics for imgproxy\nDESCRIPTION: Environment variables to enable and configure Prometheus metrics collection in imgproxy. Includes settings for binding and namespace.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_PROMETHEUS_BIND`]: Prometheus metrics server binding. Can't be the same as `IMGPROXY_BIND`. Default: blank\n* [`IMGPROXY_PROMETHEUS_NAMESPACE`]: Namespace (prefix) for imgproxy metrics. Default: blank\n```\n\n----------------------------------------\n\nTITLE: Stripping Metadata in Imgproxy\nDESCRIPTION: Removes metadata (EXIF, IPTC, etc.) from the output image when enabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_45\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstrip_metadata:%strip_metadata\nsm:%strip_metadata\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv9 Model to ONNX (FP32) using Bash\nDESCRIPTION: Bash command using the YOLOv9 `export.py` script to convert a YOLOv9 model (`.pt`) to ONNX format with FP32 precision. Specifies weights, includes the ONNX format, and enables simplification.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP32 precision\npython export.py \\\n  --weights yolov9-s.pt \\\n  --include onnx \\\n  --simplify\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Formats to Skip Processing in imgproxy\nDESCRIPTION: Specifies a list of formats that imgproxy shouldn't process.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_52\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SKIP_PROCESSING_FORMATS=\"format1,format2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Autoquality\nDESCRIPTION: Configuration for size-based autoquality with target file size, minimum and maximum quality settings, and format-specific maximums.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Deploying a specific imgproxy version to Heroku using Container Registry\nDESCRIPTION: Instructions for deploying a specific version of imgproxy to Heroku using Heroku Container Registry by pulling and pushing a Docker image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Enabling AVIF Detection in imgproxy\nDESCRIPTION: Enables AVIF support detection based on the Accept HTTP header.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENABLE_AVIF_DETECTION=true\n```\n\n----------------------------------------\n\nTITLE: Encoding Watermark Image Data in Bash\nDESCRIPTION: This snippet demonstrates how to encode a watermark image file to Base64 format for use with the IMGPROXY_WATERMARK_DATA environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair in Bash\nDESCRIPTION: Command to generate a random hex-encoded key/salt pair using xxd utility.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Overriding Max Source Resolution with imgproxy URL Option\nDESCRIPTION: Defines the imgproxy URL option `max_src_resolution` (or `msr`) which allows overriding the global `IMGPROXY_MAX_SRC_RESOLUTION` configuration setting for a specific request. This parameter sets the maximum allowed resolution (in megapixels) for the source image. Using this option requires `IMGPROXY_ALLOW_SECURITY_OPTIONS` to be enabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\nmax_src_resolution:%resolution\nmsr:%resolution\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Raw Mode in imgproxy\nDESCRIPTION: When enabled, imgproxy will respond with a raw, unprocessed, and unchecked source image by streaming it directly to the response, reducing memory usage and bypassing various limitations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_64\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nraw:%raw\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File for imgproxy\nDESCRIPTION: This snippet shows the content of the .aws/credentials file used to store AWS access key and secret key for imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Basic Chained Pipeline Syntax in imgproxy\nDESCRIPTION: Demonstrates the basic syntax for creating a chained pipeline using a minus sign (-) as a separator between processing steps.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Optimized Image Trimming with Chained Pipeline\nDESCRIPTION: Demonstrates how to optimize trim operation performance by first scaling down the image in one pipeline, then performing the trim operation in a second pipeline.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy for Local Filesystem Access in Bash\nDESCRIPTION: This snippet shows how to run imgproxy with the IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable set to allow access to local images. It sets the root directory for local file access to '/path/to/project/images'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining URL Processing Option Syntax with Configurable Separator in imgproxy (imgproxy_url_option)\nDESCRIPTION: This snippet demonstrates the effect of changing the argument separator for processing options in imgproxy URLs. By setting the IMGPROXY_ARGUMENTS_SEPARATOR environment variable, the format changes from colons to commas. This provides additional flexibility in how processing options are expressed. Prerequisite: the IMGPROXY_ARGUMENTS_SEPARATOR environment variable must be set. Input structure adheres to the chosen separator; output is correct interpretation of URL parts by imgproxy based on the configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name,%argument1,%argument2,...,%argumentN\n```\n\n----------------------------------------\n\nTITLE: Multiple Watermarks Using Chained Pipelines\nDESCRIPTION: Example showing how to apply multiple watermarks to an image using chained pipelines. The first pipeline resizes and applies the first watermark, while the second pipeline applies another watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Color Palette Info Response\nDESCRIPTION: Example JSON response when requesting color palette information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"palette\": [\n    { \"R\": 189, \"G\": 178, \"B\": 169, \"A\": 255 },\n    { \"R\": 83, \"G\": 79, \"B\": 67, \"A\": 255 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Path String for HMAC Calculation\nDESCRIPTION: This snippet demonstrates the string constructed by prepending the salt (`hello`) to the path part of the imgproxy URL (e.g., `/rs:fill:300:400:0/.../image.png`). This combined string serves as the input for the HMAC-SHA256 calculation step during the signature generation process.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/signing_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhello/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Best Format Environment Variables in imgproxy\nDESCRIPTION: Environment variables for configuring imgproxy's best format selection behavior, including complexity threshold, resolution limits, default behavior, and skip settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/best_format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD=5.5\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION=0\nIMGPROXY_BEST_FORMAT_BY_DEFAULT=true\nIMGPROXY_BEST_FORMAT_ALLOW_SKIPS=true\n```\n\n----------------------------------------\n\nTITLE: Formatting imgproxy info options\nDESCRIPTION: Standard syntax for specifying info options in the URL with multiple arguments separated by colons.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Info Option URL Format\nDESCRIPTION: Template showing how to format individual info options in the URL\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Dominant Colors Extraction - JSON - json\nDESCRIPTION: This snippet provides an example of imgproxy's JSON response when dominant color extraction is requested via the corresponding URL option. The response lists six color categories, each with RGB values. Outputs: dominant_colors object in JSON; Inputs: dominant color calculation requested. No external dependencies. Limitations: example values, actual output varies depending on image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dominant_colors\": {\n    \"dark_muted\": { \"R\": 75, \"G\": 70, \"B\": 57 },\n    \"dark_vibrant\": { \"R\": 90, \"G\": 78, \"B\": 43 },\n    \"light_muted\": { \"R\": 167, \"G\": 156, \"B\": 130 },\n    \"light_vibrant\": { \"R\": 212, \"G\": 198, \"B\": 165 },\n    \"muted\": { \"R\": 155, \"G\": 146, \"B\": 120 },\n    \"vibrant\": { \"R\": 172, \"G\": 146, \"B\": 83 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Image Contrast in imgproxy URL\nDESCRIPTION: Adjusts the contrast of the resulting image. Accepts a positive floating-point number, where 1 leaves the contrast unchanged.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_26\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncontrast:%contrast\nco:%contrast\n```\n\n----------------------------------------\n\nTITLE: Listing Metrics Exported to OpenTelemetry - Markdown\nDESCRIPTION: This snippet enumerates the metrics that imgproxy sends to the OpenTelemetry collector when metrics export is enabled. It includes internal metrics related to request processing, buffer sizes, memory allocation, and Go runtime statistics. This information is useful for observability engineers seeking to understand or monitor imgproxy's performance exposure via OpenTelemetry.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `requests_in_progress`: the number of requests currently in progress\\n* `images_in_progress`: the number of images currently in progress\\n* `buffer_size_bytes`: a histogram of buffer sizes (in bytes)\\n* `buffer_default_size_bytes`: calibrated default buffer size (in bytes)\\n* `buffer_max_size_bytes`: calibrated maximum buffer size (in bytes)\\n* `vips_memory_bytes`: libvips memory usage\\n* `vips_max_memory_bytes`: libvips maximum memory usage\\n* `vips_allocs`: the number of active vips allocations\\n* Some useful Go metrics like memstats and goroutines count\n```\n\n----------------------------------------\n\nTITLE: Disabling Animation in ImgProxy URLs\nDESCRIPTION: When set to '1', 't' or 'true', imgproxy treats all images as not animated. Use with page and pages options to control which frames to use.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_60\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndisable_animation:%disable\nda:%disable\n```\n\n----------------------------------------\n\nTITLE: Configuring Watermark Size\nDESCRIPTION: Defines custom width and height for watermark with aspect ratio preservation options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_39\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_size:%width:%height\nwms:%width:%height\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source File Size in imgproxy\nDESCRIPTION: Configures the maximum allowed file size for source images in bytes. Images exceeding this limit will be rejected. A value of 0 disables the check.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_MAX_SRC_FILE_SIZE`]: the maximum size of the source image, in bytes. Images with larger file size will be rejected. When set to `0`, file size check is disabled. Default: `0`\n```\n\n----------------------------------------\n\nTITLE: Applying Text Watermark in imgproxy\nDESCRIPTION: This code shows how to apply a text watermark to an image using imgproxy. The text should be URL-safe Base64-encoded and can include Pango markup for styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy source code as a tarball\nDESCRIPTION: Commands for downloading the latest imgproxy source code as a tarball and extracting it to a directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Listing Default Collector Endpoints by Protocol - Markdown\nDESCRIPTION: This snippet provides the default endpoints for connecting to the OpenTelemetry collector depending on the selected protocol. It helps users know which endpoints will be used if they do not override the defaults. The endpoints are protocol-specific and are provided for reference in Markdown format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* For the `grpc` protocol: `https://localhost:4317`\\n* For the `http/protobuf` protocol: `https://localhost:4318`\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-based Autoquality in imgproxy\nDESCRIPTION: Configuration for the 'dssim' method which selects quality based on a target DSSIM value. Includes error tolerance and quality ranges with format-specific adjustments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Adjusting Image Contrast with imgproxy URL Option (Pro)\nDESCRIPTION: Adjusts the contrast of the resulting image. The `contrast` parameter is a positive floating-point number. A value of 1 leaves the contrast unchanged. The default value is 1. This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_26\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncontrast:%contrast\nco:%contrast\n```\n\n----------------------------------------\n\nTITLE: Setting Watermark URL in imgproxy\nDESCRIPTION: Specifies the URL of the watermark image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_66\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_WATERMARK_URL=\"https://example.com/watermark.png\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Autoquality in Bash\nDESCRIPTION: Configuration example for size-based autoquality with target file size and quality limits.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in Shared Credentials File\nDESCRIPTION: Demonstrates how to set up AWS credentials using a shared credentials file. This method allows storing AWS access key ID and secret access key in a configuration file for imgproxy to use.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnail Max Analyze Duration in imgproxy Pro\nDESCRIPTION: Sets the maximum number of milliseconds used to get the stream info. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_63\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_VIDEO_THUMBNAIL_MAX_ANALYZE_DURATION=0\n```\n\n----------------------------------------\n\nTITLE: Implementing TCMalloc in imgproxy on Debian\nDESCRIPTION: Installs and enables Google's TCMalloc memory allocator for imgproxy on Debian-based systems. TCMalloc is a fast, multi-threaded malloc implementation that can be enabled via LD_PRELOAD to replace the default memory allocator.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Implementing jemalloc with imgproxy on Debian\nDESCRIPTION: Shows how to install and use jemalloc as an alternative memory allocator with imgproxy on Debian systems. This implementation uses LD_PRELOAD to preload the jemalloc library before running imgproxy to reduce memory fragmentation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Validating Image Hashsum with imgproxy URL Option\nDESCRIPTION: Specifies the imgproxy URL option `hashsum` (or `hs`) to validate the source image against a provided hashsum. If `hashsum_type` (md5, sha1, sha256, sha512) is set, imgproxy calculates the hashsum of the downloaded source image and compares it to the provided `hashsum`. A mismatch results in a 422 Unprocessable Entity response. This is a slow operation requiring full image download and is not supported for video files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_19\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\nhashsum:%hashsum_type:%hashsum\nhs:%hashsum_type:%hashsum\n```\n```\n\n----------------------------------------\n\nTITLE: Setting New Relic Labels Environment Variable Format\nDESCRIPTION: Example format for setting New Relic labels using environment variables. Labels are specified as key-value pairs separated by semicolons.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/monitoring/new_relic.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlabel1=value1;label2=value2\n```\n\n----------------------------------------\n\nTITLE: Setting Number of Pages to Process\nDESCRIPTION: Specifies how many pages to process from multi-page or animated images. Pages are stacked vertically and left-aligned.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_59\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npages:%pages\npgs:%pages\n```\n\n----------------------------------------\n\nTITLE: Setting Return Attachment Option in imgproxy\nDESCRIPTION: When enabled, imgproxy will return 'attachment' in the Content-Disposition header, triggering a 'Save as' dialog in browsers. This overrides the global IMGPROXY_RETURN_ATTACHMENT configuration for individual requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_71\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nreturn_attachment:%return_attachment\natt:%return_attachment\n```\n\n----------------------------------------\n\nTITLE: Starting imgproxy with Key/Salt Configuration\nDESCRIPTION: Command to start imgproxy with specified hex-encoded key and salt values for URL signing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/signing_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring MALLOC_ARENA_MAX in imgproxy\nDESCRIPTION: Sets the MALLOC_ARENA_MAX environment variable to 2 to reduce GLib memory fragmentation by limiting malloc arenas in multi-threaded operations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Calculating Base64-encoded Watermark Data in Bash\nDESCRIPTION: A bash command to convert a watermark image file to Base64 format and remove newlines, suitable for use with the IMGPROXY_WATERMARK_DATA environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Keyframes Count - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Controls how many keyframes are considered when extracting a thumbnail from a video source. Both 'video_thumbnail_keyframes' and its shorthand 'vtk' are provided. Parameter: keyframes (integer). Dependency: relevant server configuration option for keyframes. Used to improve seeking accuracy and thumbnail quality.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_15\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_keyframes:%keyframes\nvtk:%keyframes\n```\n\n----------------------------------------\n\nTITLE: Using Presets in Presets-Only Mode URL\nDESCRIPTION: Example of how to structure a URL when using imgproxy in presets-only mode, showing the usage of multiple presets (thumbnail, blurry, watermarked) in a single request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Defining Chained Pipelines in Presets\nDESCRIPTION: Example of creating a preset that includes multiple chained pipelines. The preset defines three connected pipelines with different width and height settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Using Encrypted Source URLs with imgproxy (imgproxy_url)\nDESCRIPTION: This example illustrates the final step of the source URL encryption process: constructing an imgproxy URL with an encrypted source URL payload. The encrypted URL value is inserted after the /enc/ segment in the route, with no signature applied in this example. The imgproxy server must have encrypted source URL support enabled and the key configured. This construction is required for secure linking to protected images; the output is a complete URL for client requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/rs:fit:300:300/enc/p5VjorNdhs7mRRw8gA9TWoRlGci3l1kuzqN43UQlRaRIQ0qtBKW3qFABIsx-ZRz_cVc8iVTYbhsNsxNBL1BHaQ\n```\n\n----------------------------------------\n\nTITLE: Response Structure for BlurHash Calculation - JSON - json\nDESCRIPTION: Shows a sample JSON response containing an image BlurHash string as delivered by imgproxy when configured via the relevant URL option. Outputs: blurhash (string) in JSON. Inputs: BlurHash configuration in URL. No further dependencies. Actual string will vary by image content and x/y component parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blurhash\": \"LLH-}fox0fRQ%Do}9as9_3%2M{S2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Health Check for imgproxy\nDESCRIPTION: YAML configuration for implementing health checks in Docker Compose. The configuration sets up periodic health checks using the imgproxy health command with specific timeout, interval, and retry parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Alternative imgproxy arguments separator format\nDESCRIPTION: Example of how options appear when using a custom arguments separator (comma) as configured by IMGPROXY_ARGUMENTS_SEPARATOR.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name,%argument1,%argument2,...,%argumentN\n```\n\n----------------------------------------\n\nTITLE: Dimensions Response Example\nDESCRIPTION: Example JSON response showing image dimensions\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"width\": 7360,\n  \"height\": 4912\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Example Preset with Fill and JPG Format\nDESCRIPTION: Demonstrates creating a preset named 'awesome' that sets the resizing type to 'fill' and the output format to 'jpg'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Resizing Type Specification in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: These snippets indicate how to set the resizing strategy via the URL—using either 'resizing_type' or its abbreviation 'rt'. This controls how the source image is rescaled (such as 'fit', 'fill', 'force', etc.), with the type passed as an argument. This affects final output dimensions and aspect ratio handling. Input is the desired resizing type as a string argument; if omitted, the default is 'fit'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nresizing_type:%resizing_type\nrt:%resizing_type\n```\n\n----------------------------------------\n\nTITLE: Verifying Source Image Hashsum in imgproxy\nDESCRIPTION: Allows verifying the integrity of source images by comparing calculated hashsums. Supports MD5, SHA1, SHA256, and SHA512 hash algorithms. This option is available in the Pro version only.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_70\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nhashsum:%hashsum_type:%hashsum\nhs:%hashsum_type:%hashsum\n```\n\n----------------------------------------\n\nTITLE: Drawing Detection Bounding Boxes with imgproxy\nDESCRIPTION: This example demonstrates how to make imgproxy draw bounding boxes around detected faces in an image. The 'draw_detections:1:face' parameter enables the visualization of face detection, which is helpful for testing detection models.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Drawing Detection Boxes in imgproxy\nDESCRIPTION: Illustrates how to draw bounding boxes around detected faces, helpful for testing object detection models.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Blurring Detections in imgproxy URL\nDESCRIPTION: Apply the 'blur_detections' parameter in the imgproxy URL to blur specific objects. This example blurs detected faces with a blur strength of 7.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Autoquality in imgproxy\nDESCRIPTION: Configuration for size-based autoquality which adjusts image quality to meet target file size. Includes settings for minimum and maximum quality levels and format-specific maximums.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Setting Image Background Color with imgproxy URL Option\nDESCRIPTION: Fills the resulting image's background with a specified color, defined either by RGB channel values (`R`, `G`, `B` from 0-255) or a hex color code (`hex_color`). This is particularly useful when converting images with transparency (alpha-channel) to formats like JPEG. Providing the option without arguments disables background manipulation. Disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbackground:%R:%G:%B\nbg:%R:%G:%B\n\nbackground:%hex_color\nbg:%hex_color\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOX to ONNX Format Using Python (bash)\nDESCRIPTION: This shell snippet demonstrates the usage of the YOLOX toolkit's Python script to export a YOLOX model checkpoint to ONNX format with inference decoding enabled. Dependencies include Python, a compatible YOLOX repository (with export_onnx.py), and checkpoint files. Parameters: \\'-f\\' for experiment config, \\'-c\\' for model checkpoint, \\'--output-name\\' for output file, and \\'--decode_in_inference\\' to prepare the ONNX for inference. Outputs an ONNX file suitable for use in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython tools/export_onnx.py \\\n  -f /path/to/experiment.py \\\n  -c /path/to/checkpoint.pth \\\n  --output-name /path/to/output.onnx \\\n  --decode_in_inference\n```\n\n----------------------------------------\n\nTITLE: S3 URL Format for Version-Specific Objects\nDESCRIPTION: Demonstrates the URL format for accessing specific versions of S3 objects in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Installing and Using jemalloc with imgproxy in Bash\nDESCRIPTION: This snippet shows how to install jemalloc on a Debian-based system and run imgproxy with jemalloc preloaded. jemalloc is a memory allocator that emphasizes fragmentation avoidance and scalable concurrency support.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Applying Duotone Effect with imgproxy URL Option (Pro)\nDESCRIPTION: Converts the resulting image to duotone if `intensity` is greater than zero. `intensity` is a float between 0 and 1 controlling the effect strength. `color1` (dark areas) and `color2` (light areas) are optional hex values for the duotone palette. Default settings are `0:000000:ffffff` (disabled, black/white). This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_29\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nduotone:%intensity:%color1:%color2\ndt:%intensity:%color1:%color2\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced PNG Compression in imgproxy\nDESCRIPTION: Sets options for advanced PNG compression, including interlacing and quantization.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_19\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_PNG_INTERLACED`]: when `true`, enables interlaced PNG compression. Default: `false`\n* [`IMGPROXY_PNG_QUANTIZE`]: when `true`, enables PNG quantization. libvips should be built with [Quantizr](https://github.com/DarthSim/quantizr) or libimagequant support. Default: `false`\n* [`IMGPROXY_PNG_QUANTIZATION_COLORS`]: maximum number of quantization palette entries. Should be between 2 and 256. Default: 256\n```\n\n----------------------------------------\n\nTITLE: Setting ML-based Autoquality in URL\nDESCRIPTION: URL processing option example for machine learning based autoquality with parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/autoquality.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: AWS Shared Credentials File Configuration for imgproxy\nDESCRIPTION: Example configuration for the AWS shared credentials file located at ~/.aws/credentials. This file provides AWS credentials to imgproxy for CloudWatch access.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Animation Processing in imgproxy\nDESCRIPTION: Sets the maximum number of animation frames that can be processed and the maximum resolution for animated image frames.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_MAX_ANIMATION_FRAMES`]: the maximum number of animated image frames that may be processed. Default: `1`\n* [`IMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION`]: the maximum resolution of the animated source image frame, in megapixels. Images with larger actual frame size will be rejected. When set to `0`, imgproxy will test the whole animated image resolution against `IMGPROXY_MAX_SRC_RESOLUTION` summarising all the frames' resolutions. Default: `0`\n```\n\n----------------------------------------\n\nTITLE: Info Option Format Template\nDESCRIPTION: Shows the basic format for specifying info options in the URL with optional arguments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials as Environment Variables for imgproxy\nDESCRIPTION: Shows how to set AWS Access Key ID and Secret Access Key as environment variables when running imgproxy. This method can be used for both direct execution and Docker container deployment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Hashsum Check - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Sets up imgproxy to validate the source image against a provided hashsum. The parameters are `hashsum_type` (specifies the algorithm: none, md5, sha1, sha256, sha512) and `hashsum` (the expected hex value). If mismatched, imgproxy returns 422; for non-supported file types (e.g., video), checks are skipped.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_48\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nhashsum:%hashsum_type:%hashsum\\nhs:%hashsum_type:%hashsum\n```\n\n----------------------------------------\n\nTITLE: Initializing Chained Pipeline in imgproxy URL\nDESCRIPTION: Demonstrates how to start a new pipeline in an imgproxy URL by inserting a section with a minus sign. This allows for applying different processing options in sequence.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Selecting Multiple Pages in ImgProxy URLs\nDESCRIPTION: When a source image supports pagination or animation, this option specifies how many pages to use. The pages will be stacked vertically and left-aligned with a default of 1.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_59\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npages:%pages\npgs:%pages\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Variables\nDESCRIPTION: Environment variables for configuring logging format, level, and syslog integration\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_76\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOG_FORMAT=pretty\nIMGPROXY_LOG_LEVEL=info\nIMGPROXY_SYSLOG_ENABLE=false\nIMGPROXY_SYSLOG_LEVEL=info\nIMGPROXY_SYSLOG_TAG=imgproxy\n```\n\n----------------------------------------\n\nTITLE: Enabling Interlaced PNG Compression\nDESCRIPTION: When set to 'true', enables interlaced PNG encoding (Adam7 interlacing), which allows the image to render progressively as it loads. The default value is 'false'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_31\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_PNG_INTERLACED\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Objects with imgproxy URL Option (Pro)\nDESCRIPTION: Detects objects belonging to the specified `class_name`(s) and applies a blur effect to them. If no class names are provided, all detected objects are blurred. The `sigma` parameter defines the size of the blur mask. Requires the object detection feature to be configured and enabled. This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_34\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblur_detections:%sigma:%class_name1:%class_name2:...:%class_nameN\nbd:%sigma:%class_name1:%class_name2:...:%class_nameN\n```\n\n----------------------------------------\n\nTITLE: Standard Watermark Processing Option Syntax in imgproxy\nDESCRIPTION: Syntax for the watermark processing option in imgproxy URLs. It defines parameters for opacity, position, offsets, and scale to control how the watermark appears on processed images.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Drawing Detection Boxes in imgproxy\nDESCRIPTION: Illustrates how to draw bounding boxes around detected objects, useful for testing and visualization of detection models.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Defining Presets with Chained Pipelines - imgproxy_presets\nDESCRIPTION: Defines an imgproxy preset containing multiple chained pipelines, each with its own width and height settings. Presets can modularize common processing paths and support chaining within their declarations. Used as dependencies in URLs to simplify complex pipeline sequences.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables\nDESCRIPTION: Shows how to configure AWS credentials using environment variables, both for direct execution and Docker containers.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy URL for Local File Processing\nDESCRIPTION: This example demonstrates how to construct an imgproxy URL to resize a local image to fit 300x200 dimensions. It uses the 'local://' protocol to specify a local file path relative to the configured filesystem root.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Configuring Hashsum Calculation - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Configures a URL option instructing imgproxy to compute cryptographic hash digests (md5, sha1, sha256, sha512) for the source image. Supports one or more hashsum types as arguments. Outputs a JSON object mapping hash type names to their hex values. Video files are ignored for hashsum calculation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_40\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncalc_hashsums:%hashsum_type1:%hashsum_type2:...:%hashsum_typeN\\nchs:%hashsum_type1:%hashsum_type2:...:%hashsum_typeN\n```\n\n----------------------------------------\n\nTITLE: EXIF option response example\nDESCRIPTION: Sample JSON response showing various EXIF metadata fields from an image, including camera model, aperture, and software used.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exif\": {\n    \"Aperture\": \"8.00 EV (f/16.0)\",\n    \"Contrast\": \"Normal\",\n    \"Date and Time\": \"2016:09:11 22:15:03\",\n    \"Model\": \"NIKON D810\",\n    \"Software\": \"Adobe Photoshop Lightroom 6.1 (Windows)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Adjust Meta-Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `adjust` meta-option (Pro feature) which sets brightness, contrast, and saturation simultaneously. All arguments (`brightness`, `contrast`, `saturation`) are optional and default to their respective individual option defaults if omitted.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_24\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nadjust:%brightness:%contrast:%saturation\na:%brightness:%contrast:%saturation\n```\n\n----------------------------------------\n\nTITLE: Final Signed imgproxy URL Including the Calculated Signature\nDESCRIPTION: This snippet displays the completed imgproxy URL, now including the calculated signature as part of the path. The inserted signature component ensures requests are authorized. It exemplifies how signature integration allows imgproxy to validate that image transformation requests weren't tampered with.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/signing_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/oKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Enabling JPEG Overshoot Deringing (Pro)\nDESCRIPTION: ((pro)) When set to 'true', enables overshooting of samples with extreme values during JPEG compression. This may reduce ringing artifacts, particularly noticeable in areas like black text on a white background. The default value is 'false'. Requires imgproxy Pro.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_28\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_JPEG_OVERSHOOT_DERINGING\n```\n\n----------------------------------------\n\nTITLE: Weighted Object-Oriented Crop URL in imgproxy\nDESCRIPTION: URL pattern demonstrating object-oriented cropping with custom weights for different object classes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:objw:face:2:cat:3:dog:4/...\n```\n\n----------------------------------------\n\nTITLE: Setting Format Preferences and Processing Options\nDESCRIPTION: Configuration variables for preferred image formats, format processing rules, and format skipping options in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_PREFERRED_FORMATS=jpeg,png,gif\nIMGPROXY_SKIP_PROCESSING_FORMATS=format1,format2\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD=5.5\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION=0\n```\n\n----------------------------------------\n\nTITLE: Adjusting Image Brightness in imgproxy URL\nDESCRIPTION: Adjusts the brightness of the resulting image. Accepts an integer value between -255 and 255.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_25\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbrightness:%brightness\nbr:%brightness\n```\n\n----------------------------------------\n\nTITLE: YOLO-NAS Model Export Configuration\nDESCRIPTION: Python script to configure and export YOLO-NAS model to ONNX format with custom settings\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom super_gradients.training import models\nfrom super_gradients.common.object_names import Models\nfrom super_gradients.conversion import DetectionOutputFormatMode\nfrom super_gradients.conversion.conversion_enums import ExportQuantizationMode\n\n# Load the model from the SuperGradients model zoo\nmodel = models.get(\n  Models.YOLO_NAS_S,\n  pretrained_weights=\"coco\"\n)\n# Or load the model from a checkpoint\nmodel = models.get(\n  Models.YOLO_NAS_S,\n  num_classes=80,\n  checkpoint_path=f\"neural-yolo_nas_s.pth\"\n)\n\nmodel.eval()\nmodel.prep_model_for_conversion(input_size=[1, 3, 640, 640])\n\n# Disable preprocessing and postprocessing since imgproxy will handle it\nmodel.export(\n  \"/content/yolo_nas_s.onnx\",\n  preprocessing=False,\n  postprocessing=False,\n  output_predictions_format=DetectionOutputFormatMode.FLAT_FORMAT,\n  input_image_shape=[640, 640],\n  quantization_mode=ExportQuantizationMode.FP16,\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Security Options Usage in imgproxy\nDESCRIPTION: Allows usage of security-related processing options, with a warning about potential security implications.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_ALLOW_SECURITY_OPTIONS`]: when `true`, allows usage of security-related processing options such as `max_src_resolution`, `max_src_file_size`, `max_animation_frames`, and `max_animation_frame_resolution`. Default: `false`.\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Watermarks using Chained Pipelines in imgproxy\nDESCRIPTION: Shows how to use chained pipelines to apply multiple watermarks to the same image. The first pipeline resizes the image and applies the first watermark, while the second pipeline applies the second watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Buster in imgproxy URL\nDESCRIPTION: Demonstrates how to add a cache buster to an imgproxy URL. This option allows bypassing CDN, proxy server, and browser cache without affecting image processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_68\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncachebuster:%string\ncb:%string\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced AVIF Compression in imgproxy\nDESCRIPTION: Sets the compression speed for AVIF images, controlling the CPU effort spent on improving compression.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_AVIF_SPEED`]: controls the CPU effort spent improving compression. The lowest speed is at 0 and the fastest is at 9. Default: `9`\n```\n\n----------------------------------------\n\nTITLE: Configuring None Autoquality Method in imgproxy\nDESCRIPTION: Configuration example for disabling autoquality in imgproxy using environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Manual Deployment of imgproxy to Heroku - bash\nDESCRIPTION: This sequence outlines manually deploying imgproxy to Heroku using git and Docker. Prerequisites: git, Heroku CLI, and Docker (for later steps). Parameters include application name and image versions. The initial steps clone the repo, create a Heroku app, set the stack to container, and push the source as the master branch, resulting in a deployed imgproxy app on Heroku.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\\nheroku create your-application\\nheroku stack:set container\\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Configuring Source URL Encryption Key in imgproxy\nDESCRIPTION: Sets a hex-encoded key for encrypting source URLs using AES-CBC algorithm. This helps conceal actual source URLs in requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"hex_encoded_key\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Security Options Override in imgproxy\nDESCRIPTION: When set to true, allows usage of security-related processing options that can bypass security restrictions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ALLOW_SECURITY_OPTIONS=false\n```\n\n----------------------------------------\n\nTITLE: Formatting Google Cloud Storage URLs in imgproxy\nDESCRIPTION: Demonstrates the URL format for accessing files in Google Cloud Storage buckets with optional generation specification via query string.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Configuring BlurHash Calculation - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Sets URL schema for BlurHash computation within imgproxy. Parameters `x_components` and `y_components` specify the number of horizontal and vertical BlurHash components (maximum 9 each, default 0). Used to generate a compact representation of the image suitable for placeholders. Requires complete image processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_38\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblurhash:%x_components:%y_components\\nbh:%x_components:%y_components\n```\n\n----------------------------------------\n\nTITLE: Optimized Image Trimming with Chained Pipelines\nDESCRIPTION: Shows how to optimize trim operations by first scaling down the image in one pipeline, then performing the trim operation in a second pipeline.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Source URLs in imgproxy\nDESCRIPTION: Specifies a whitelist of allowed source image URL prefixes. Wildcards can be used with *. Leave blank to allow all sources.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ALLOWED_SOURCES=\"s3://,https://*.example.com/,local://\"\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair\nDESCRIPTION: Bash command to quickly generate a random 64-byte hex-encoded key/salt pair using /dev/random\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Setting Image Quality in imgproxy\nDESCRIPTION: Defines the quality of the resulting image as a percentage. A value of 0 uses the default quality settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_50\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nquality:%quality\nq:%quality\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy TAR Package\nDESCRIPTION: Command to extract a TAR package to a specified directory. This method can be used on any Linux distribution where you want to install imgproxy without a package manager.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzf imgproxy-3.25.0.arm64.tar.gz -C /opt\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Processing in imgproxy\nDESCRIPTION: Enables fixing of unsupported SVG features during SVG rasterization.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SVG_FIX_UNSUPPORTED=false\n```\n\n----------------------------------------\n\nTITLE: Installing Ultralytics for YOLOv8 Export using Bash\nDESCRIPTION: Bash command to install the `ultralytics` Python package using pip, which is needed to use the `yolo` command-line tool for exporting YOLOv8 models.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install ultralytics\n```\n```\n\n----------------------------------------\n\nTITLE: Installing ONNX Runtime for YOLOv4 Export using Bash\nDESCRIPTION: Bash command to install the `onnxruntime` Python package using pip, which is a prerequisite for exporting YOLOv4 models to ONNX format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npip install onnxruntime\n```\n```\n\n----------------------------------------\n\nTITLE: Watermark Processing Option Syntax for imgproxy\nDESCRIPTION: The URL option syntax for adding a watermark to an image in imgproxy, showing the full and shortened formats with parameters for opacity, position, offsets, and scale.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables for imgproxy Docker Container (Bash)\nDESCRIPTION: Shows how to pass AWS credentials (Access Key ID and Secret Access Key) as environment variables to an imgproxy Docker container using the `-e` flag with the `docker run` command. This allows the containerized imgproxy instance to authenticate with AWS services like CloudWatch.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy Source Tarball\nDESCRIPTION: Commands to download and extract imgproxy source code\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables for imgproxy (Bash)\nDESCRIPTION: Demonstrates how to provide AWS credentials (Access Key ID and Secret Access Key) to the imgproxy process directly using environment variables on the command line. This method requires setting `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` before executing the `imgproxy` command.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n```\n\n----------------------------------------\n\nTITLE: Objects position option for image info retrieval\nDESCRIPTION: URL option to adjust the position of detected objects on the crop area when using obj/objw gravity type.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_31\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nobjects_position:%type:%x_offset:%y_offset\nobj_pos:%type:%x_offset:%y_offset\nop:%type:%x_offset:%y_offset\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-Based imgproxy Autoquality via Bash\nDESCRIPTION: Sets environment variables to configure ML-based autoquality globally (`IMGPROXY_AUTOQUALITY_METHOD=\"ml\"`). It defines the target DSSIM, allowed error, quality ranges (including format-specific ones), and specifies the paths to the required TensorFlow neural network models for different image formats (`IMGPROXY_AUTOQUALITY_JPEG_NET`, `IMGPROXY_AUTOQUALITY_WEBP_NET`, etc.). If a network for a format isn't provided, it falls back to the DSSIM method.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/autoquality.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, AVIF, and JPEG XL\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\nIMGPROXY_AUTOQUALITY_JXL_NET=\"/networks/autoquality-jxl.pb\"\n```\n\n----------------------------------------\n\nTITLE: Optimized Image Trimming with Chained Pipelines\nDESCRIPTION: Demonstrates how to optimize performance when combining resize and trim operations by using separate pipelines, where resizing occurs before trimming to reduce memory usage.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Example Calculated imgproxy URL Signature\nDESCRIPTION: This snippet displays the resulting URL-safe Base64 encoded HMAC-SHA256 signature. It is calculated using the configured key (`secret`), the prepended salt (`hello`), and the specific URL path from the example. This signature is used to secure the imgproxy URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/signing_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\noKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8\n```\n\n----------------------------------------\n\nTITLE: Setting AVIF Compression Speed in imgproxy\nDESCRIPTION: Controls the CPU effort spent improving AVIF compression. The value ranges from 0 (lowest speed) to 9 (fastest speed).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AVIF_SPEED=9\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Selection - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Enables selection of a specific page or frame from multi-page/animated sources via URL parameters. The `%page` argument indexes the desired page starting at zero. Useful for PDFs, TIFFs, and animated GIF/WebP images. No dependencies besides imgproxy; default is page 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_42\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npage:%page\\npg:%page\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in Shared Credentials File\nDESCRIPTION: This snippet shows the content of the .aws/credentials file used for storing AWS access key ID and secret access key. This file should be placed in the user's home directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-Based Autoquality via imgproxy URL Option\nDESCRIPTION: Applies DSSIM-based autoquality selection to an individual image with a processing option in the imgproxy URL. The parameter sequence specifies method (dssim), target DSSIM value, min/max qualities, and allowed error. This prompts imgproxy to adjust quality iteratively to maintain perceptual difference within the error margin.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/autoquality.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv8 to ONNX Format with ultralytics CLI (bash)\nDESCRIPTION: This series of shell commands uses the ultralytics CLI yolo export command to convert YOLOv8 models to ONNX in FP32 and FP16 modes. Prerequisite: Python, \\'ultralytics\\' installed via pip, GPU (CUDA or MPS) required for some FP16 exports. Parameters: model, format, simplify, half, device. Output is an optimized ONNX model ready for use with imgproxy object detection.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install ultralytics\n\n# Export with FP32 precision\nyolo export \\\n  model=yolov8n.pt \\\n  format=onnx \\\n  simplify=True\n\n# Export with FP16 precision using CUDA-compatible GPU\nyolo export \\\n  model=yolov8n.pt \\\n  format=onnx \\\n  simplify=True \\\n  half=True \\\n  device=0\n\n# Export with FP16 precision using Apple Silicon GPU\nyolo export \\\n  model=yolov8n.pt \\\n  format=onnx \\\n  simplify=True \\\n  half=True \\\n  device=mps\n```\n\n----------------------------------------\n\nTITLE: Example Source URL Padded with PKCS#7\nDESCRIPTION: Illustrates the source URL after applying PKCS#7 padding. Since the original URL is 39 bytes long, 9 bytes with the value `0x09` are appended to make the total length 48 bytes, which is a multiple of the 16-byte block size required for AES.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/images/curiosity.jpg\\09\\09\\09\\09\\09\\09\\09\\09\\09\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source Resolution in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_SRC_RESOLUTION configuration. Usage requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be set to true as it modifies security restrictions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_26\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_resolution:%resolution\nmsr:%resolution\n```\n\n----------------------------------------\n\nTITLE: Configuring Filename in imgproxy Response Headers\nDESCRIPTION: Defines a filename for the Content-Disposition header. The filename can be provided in escaped form or encoded with URL-safe Base64.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_67\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nfilename:%filename:%encoded\nfn:%filename:%encoded\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Time for imgproxy URLs\nDESCRIPTION: Sets an expiration timestamp for the URL. When the current time exceeds this timestamp, imgproxy will return a 404 error.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexpires:%timestamp\nexp:%timestamp\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Watermark Image in Bash\nDESCRIPTION: Command to convert a watermark image file to Base64 format and remove newlines for use with IMGPROXY_WATERMARK_DATA environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Manual Heroku Deployment\nDESCRIPTION: Steps to manually deploy imgproxy to Heroku using Git and container deployment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Manual Heroku Deployment\nDESCRIPTION: Steps to manually deploy imgproxy to Heroku using Git and container deployment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Disabling imgproxy Autoquality via Bash Configuration\nDESCRIPTION: Sets the `IMGPROXY_AUTOQUALITY_METHOD` environment variable to `none` to disable the autoquality feature globally for the imgproxy instance. This ensures imgproxy does not attempt to automatically adjust image quality based on any metric.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Storage Account Key Authentication\nDESCRIPTION: Environment variable for authenticating with Azure Blob Storage using a Storage Account Key.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ABS_KEY=your_storage_account_key\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Watermark Data in Bash\nDESCRIPTION: Command to convert a watermark image file to Base64 format, removing newlines for environment variable usage.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Generating BlurHash with imgproxy\nDESCRIPTION: Calculates and returns the image's BlurHash using specified horizontal and vertical component counts. Higher component counts produce more detailed hashes, with a maximum value of 9 for each component.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_17\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblurhash:%x_components:%y_components\nbh:%x_components:%y_components\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blurhash\": \"LLH-}fox0fRQ%Do}9as9_3%2M{S2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Preset Structure in imgproxy\nDESCRIPTION: Shows the basic format for defining a preset in imgproxy, where preset_name is the identifier and options are the processing parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Blurring Detected Objects (Faces) in imgproxy URL\nDESCRIPTION: Demonstrates the `blur_detections` parameter in an imgproxy URL. This example applies a blur effect (sigma 7) specifically to detected faces, useful for anonymization or censoring content.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Setting AWS SSM Credentials via Environment Variables in Docker for imgproxy\nDESCRIPTION: Shows how to pass AWS access keys (`AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`) as environment variables to an imgproxy container using `docker run -e`, specifically for enabling access to AWS Systems Manager Parameter Store.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Limiting Image File Size in imgproxy\nDESCRIPTION: Automatically degrades image quality to keep the file size under the specified byte limit. Applicable to JPG, WebP, HEIC, and TIFF formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_53\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_bytes:%bytes\nmb:%bytes\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization Secret in imgproxy\nDESCRIPTION: Sets a secret token for authorization. When specified, requests must include an Authorization header with this token.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SECRET=\"your_secret_token\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowance of Link-Local Source Addresses\nDESCRIPTION: When set to 'true', allows imgproxy to request source images from link-local multicast and unicast IP addresses (224.0.0.1-224.0.0.255, 169.254.0.1-169.254.255.255, and IPv6 equivalents). The default value is 'false'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_13\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_ALLOW_LINK_LOCAL_SOURCE_ADDRESSES\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark URL Option Syntax for imgproxy Pro\nDESCRIPTION: The URL option syntax for adding a custom watermark via URL in imgproxy Pro, showing both full and shortened formats that use a Base64-encoded URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Text Watermark Option Syntax for imgproxy Pro\nDESCRIPTION: The URL option syntax for adding a text watermark in imgproxy Pro, showing both full and shortened formats that use URL-safe Base64-encoded text.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Text Watermark URL Options in imgproxy\nDESCRIPTION: URL processing options for applying text-based watermarks using URL-safe Base64-encoded text with optional Pango markup styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Adding text watermark with imgproxy\nDESCRIPTION: This snippet shows the URL option format for adding a text watermark to an image using imgproxy. The text should be URL-safe Base64-encoded and can include Pango markup for styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Swift Environment Variables Configuration\nDESCRIPTION: Essential environment variables required to configure Swift authentication with imgproxy, including username, API key, auth URL, version, tenant, and domain settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_USE_SWIFT=true\nIMGPROXY_SWIFT_USERNAME=\nIMGPROXY_SWIFT_API_KEY=\nIMGPROXY_SWIFT_AUTH_URL=\nIMGPROXY_SWIFT_AUTH_VERSION=\nIMGPROXY_SWIFT_TENANT=\nIMGPROXY_SWIFT_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Defining BlurHash Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to calculate and return the image's BlurHash string. `x_components` and `y_components` define the horizontal and vertical detail level (max 9 each). Larger values result in a more detailed hash. This is a potentially slow operation requiring full image download and processing. Default is `0:0` (disabled).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblurhash:%x_components:%y_components\nbh:%x_components:%y_components\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Buster Option (imgproxy URL)\nDESCRIPTION: Provides a cache buster string ('%string') which doesn't affect image processing but helps bypass CDN, proxy, and browser caches when changed. Useful when underlying settings (quality, presets, watermark) change without altering the URL structure. Recommended over query strings for signability. Default is empty.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_16\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncachebuster:%string\ncb:%string\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-based Autoquality in imgproxy\nDESCRIPTION: Configuration for ML-based autoquality including neural network paths and quality parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/autoquality.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, and AVIF\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\n```\n\n----------------------------------------\n\nTITLE: Using Raw Mode in ImgProxy URLs\nDESCRIPTION: When set to '1', 't', or 'true', imgproxy streams the raw, unprocessed source image without any type, resolution, or file size checks, bypassing normal processing constraints.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_67\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nraw:%raw\n```\n\n----------------------------------------\n\nTITLE: Using Base64 Encoded Source URL in imgproxy\nDESCRIPTION: Encodes the source URL with URL-safe Base64 to handle complex URLs. The encoded URL can be split with '/' characters. The extension can be specified after '.'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_79\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Setting Always Rasterize SVG in imgproxy\nDESCRIPTION: Forces imgproxy to always rasterize SVG images unless SVG processing is skipped.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ALWAYS_RASTERIZE_SVG=false\n```\n\n----------------------------------------\n\nTITLE: WebP Compression Options\nDESCRIPTION: Configures WebP-specific compression settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_54\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwebp_options:%compression:%smart_subsample\nwebpo:%compression:%smart_subsample\n```\n\n----------------------------------------\n\nTITLE: Specifying Key/Salt File Paths for imgproxy URL Signatures (Bash)\nDESCRIPTION: This command shows how to start imgproxy with key and salt values stored in separate files. It uses command-line arguments to specify the file paths containing hex-coded keys and salts.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -keypath /path/to/file/with/key -saltpath /path/to/file/with/salt\n```\n\n----------------------------------------\n\nTITLE: Local File Path Format for imgproxy\nDESCRIPTION: Example of the local file path format used to reference images in the configured local filesystem root directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocal:///logos/imgproxy.png\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Environment Variables for imgproxy\nDESCRIPTION: Essential environment variables needed to configure imgproxy to send request traces and metrics to an OpenTelemetry collector. These variables control enabling the feature, protocol selection, endpoint configuration, and service naming.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_ENABLE=true\nIMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS=true\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc\nOTEL_EXPORTER_OTLP_ENDPOINT=https://localhost:4317\nOTEL_SERVICE_NAME=imgproxy\nIMGPROXY_OPEN_TELEMETRY_TRACE_ID_GENERATOR=xray\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced JPEG Compression in imgproxy\nDESCRIPTION: Sets various options for JPEG compression, including progressive compression, chroma subsampling, and quantization methods.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_JPEG_PROGRESSIVE=false\nIMGPROXY_JPEG_NO_SUBSAMPLE=false\nIMGPROXY_JPEG_TRELLIS_QUANT=false\nIMGPROXY_JPEG_OVERSHOOT_DERINGING=false\nIMGPROXY_JPEG_OPTIMIZE_SCANS=false\nIMGPROXY_JPEG_QUANT_TABLE=0\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Image Formats\nDESCRIPTION: Default configuration for preferred image formats in comma-separated format\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_23\n\nLANGUAGE: properties\nCODE:\n```\njpeg,png,gif\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS Headers in imgproxy\nDESCRIPTION: Configures CORS headers with the provided origin. CORS headers are disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_ALLOW_ORIGIN`]: when specified, enables CORS headers with the provided origin. CORS headers are disabled by default.\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Keyframes in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_VIDEO_THUMBNAIL_KEYFRAMES configuration to control keyframe extraction for video thumbnails.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_keyframes:%keyframes\nvtk:%keyframes\n```\n\n----------------------------------------\n\nTITLE: Displaying Unsigned imgproxy URL Example - Markdown\nDESCRIPTION: Illustrates the format of an imgproxy URL before it is signed. This snippet is used for documentation purposes to clarify the typical URL structure that users should prepare before signing. No inputs or outputs—static example.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/signing_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Source URLs in imgproxy\nDESCRIPTION: Configures a whitelist of allowed source image URL prefixes. Wildcards can be used. When blank, all source URLs are allowed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ALLOWED_SOURCES=\"s3://,https://*.example.com/,local://\"\n```\n\n----------------------------------------\n\nTITLE: Configuring None Autoquality Method in imgproxy\nDESCRIPTION: Basic configuration to disable autoquality feature in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration (Systems Manager)\nDESCRIPTION: Example of AWS credentials file content for Systems Manager access using shared credentials.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Standard Watermark Processing Option Syntax in imgproxy\nDESCRIPTION: URL option format for applying a watermark to an image in imgproxy, including parameters for opacity, position, offsets, and scale.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Specifying Plain Source URL (imgproxy URL)\nDESCRIPTION: Demonstrates how to provide the source image URL directly within the imgproxy path, prefixed with '/plain/'. Note that if the source URL contains special characters like '?' or '@', they need to be properly URL-escaped.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Creating an 'awesome' Preset with Fill Resizing and JPG Format\nDESCRIPTION: Creates a preset named 'awesome' that sets the resizing type to 'fill' and converts the image format to 'jpg'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Heroku via Git using Bash\nDESCRIPTION: Provides manual steps to deploy imgproxy to Heroku. It involves cloning the repository, creating a Heroku application, setting the application stack to use containers, and pushing the master branch to Heroku to trigger deployment. Requires Git and the Heroku CLI installed and authenticated.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Setting Imgproxy Presets via Command Line\nDESCRIPTION: Command line example showing how to specify paths to preset configuration files for both processing and info presets.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -presets /path/to/file/with/presets -info-presets /path/to/file/with/info-presets\n```\n\n----------------------------------------\n\nTITLE: Stripping Metadata from Images in imgproxy\nDESCRIPTION: Removes metadata (EXIF, IPTC, etc.) from output images when enabled. Overrides the IMGPROXY_STRIP_METADATA configuration for individual requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_45\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstrip_metadata:%strip_metadata\nsm:%strip_metadata\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudWatch Integration for Imgproxy\nDESCRIPTION: Environment variables for setting up Amazon CloudWatch metrics integration with service name, namespace and region configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_9\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_CLOUD_WATCH_SERVICE_NAME=\nIMGPROXY_CLOUD_WATCH_NAMESPACE=\nIMGPROXY_CLOUD_WATCH_REGION=\n```\n\n----------------------------------------\n\nTITLE: Rotating Watermark\nDESCRIPTION: Rotates the watermark clockwise by specified angle.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_40\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_rotate:%angle\nwm_rot:%angle\nwmr:%angle\n```\n\n----------------------------------------\n\nTITLE: Defining Preset Option (imgproxy URL)\nDESCRIPTION: Specifies a list of one or more predefined preset names ('%preset_name1', '%preset_name2', etc.) to apply processing options. Multiple presets can be chained using colons. Refer to the Presets guide for more details. Default is empty.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npreset:%preset_name1:%preset_name2:...:%preset_nameN\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n\n----------------------------------------\n\nTITLE: Defining Max Source Resolution Option (imgproxy URL)\nDESCRIPTION: Overrides the 'IMGPROXY_MAX_SRC_RESOLUTION' configuration setting, specifying the maximum source image resolution ('%resolution') allowed for processing. Requires 'IMGPROXY_ALLOW_SECURITY_OPTIONS' to be enabled due to its nature as a security restriction override.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_19\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_resolution:%resolution\nmsr:%resolution\n```\n\n----------------------------------------\n\nTITLE: Removing Surrounding Background with imgproxy Trim Option\nDESCRIPTION: Removes surrounding background based on color similarity. `threshold` sets the tolerance. `color` (optional hex value) specifies the target background color, improving efficiency if known. `equal_hor` and `equal_ver` (optional booleans) enforce symmetrical trimming horizontally or vertically. Warning: This disables scale-on-load, increasing memory usage and processing time, especially for large images. Not supported for animated images. Use `FF00FF` for transparent backgrounds.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ntrim:%threshold:%color:%equal_hor:%equal_ver\nt:%threshold:%color:%equal_hor:%equal_ver\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Images in imgproxy\nDESCRIPTION: Environment variables for setting up fallback images in imgproxy. Includes options for specifying fallback image data, path, URL, HTTP code, TTL, and cache size.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_FALLBACK_IMAGE_DATA`]: Base64-encoded image data. You can easily calculate it with `base64 tmp/fallback.png | tr -d '\\n'`.\n* [`IMGPROXY_FALLBACK_IMAGE_PATH`]: the path to the locally stored image\n* [`IMGPROXY_FALLBACK_IMAGE_URL`]: the fallback image URL\n* [`IMGPROXY_FALLBACK_IMAGE_PREPROCESS_URL`]: ((pro)) when `true`, imgproxy will apply `IMGPROXY_URL_REPLACEMENTS` and `IMGPROXY_BASE_URL` to values of the `fallback_image_url` processing option.\n* [`IMGPROXY_FALLBACK_IMAGE_HTTP_CODE`]: the HTTP code for the fallback image response. When set to zero, imgproxy will respond with the usual HTTP code. Default: `200`\n* [`IMGPROXY_FALLBACK_IMAGE_TTL`]: a duration (in seconds) sent via the `Cache-Control: max-age` HTTP header when a fallback image was used. When blank or `0`, the value from `IMGPROXY_TTL` is used.\n* [`IMGPROXY_FALLBACK_IMAGES_CACHE_SIZE`]: ((pro)) the size of custom fallback images cache. When set to `0`, the fallback image cache is disabled. 256 fallback images are cached by default.\n```\n\n----------------------------------------\n\nTITLE: Text Watermark Processing Option Syntax in imgproxy\nDESCRIPTION: Syntax for the text watermark processing option in imgproxy Pro. This allows adding text as a watermark by providing a URL-safe Base64-encoded string with optional Pango markup styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnail Tile Auto Keyframes in imgproxy Pro\nDESCRIPTION: Enables automatic keyframe selection for video thumbnail tiles. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_61\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_VIDEO_THUMBNAIL_TILE_AUTO_KEYFRAMES=false\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Sanitization in imgproxy\nDESCRIPTION: Enables or disables the removal of scripts from SVG images to prevent XSS attacks.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_SANITIZE_SVG`]: when `true`, imgproxy will remove scripts from SVG images to prevent XSS attacks. Defaut: `true`\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Output Width - imgproxy_url_option - Markdown\nDESCRIPTION: Displays how to set the minimum allowed output width using 'min-width' and its abbreviation ('mw'). When both width and min-width are specified, cropping may occur. Argument is optional and should be an integer.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmin-width:%width\\nmw:%width\n```\n\n----------------------------------------\n\nTITLE: Specifying imgproxy Key/Salt via File Paths (Bash)\nDESCRIPTION: Demonstrates how to start the imgproxy server using command-line arguments to specify paths to files containing hex-encoded keys and salts. This is an alternative to setting the `IMGPROXY_KEY` and `IMGPROXY_SALT` environment variables. The `-keypath` argument points to the file containing the key(s), and `-saltpath` points to the file containing the salt(s).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -keypath /path/to/file/with/key -saltpath /path/to/file/with/salt\n```\n\n----------------------------------------\n\nTITLE: Adjusting Background Alpha Channel with imgproxy URL Option (Pro)\nDESCRIPTION: Adds an alpha (transparency) channel to the background color set by the [background] option. The `alpha` value must be a positive floating-point number between 0 (fully transparent) and 1 (fully opaque). The default value is 1. This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbackground_alpha:%alpha\nbga:%alpha\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Format Info\nDESCRIPTION: Example JSON response when requesting image format information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DSSIM-based Autoquality in URL\nDESCRIPTION: URL processing option example for DSSIM-based autoquality with parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/autoquality.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials for imgproxy via Shell Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates setting AWS credentials for imgproxy by supplying the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables directly before running the imgproxy service. The same pattern is used for starting the imgproxy Docker container, using Docker's -e flag to set each variable in the runtime environment. Dependencies include Docker for the container command. Required parameters: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY, which must be set to valid IAM credentials with CloudWatch write access. Inputs are the environment variables, output is the imgproxy process running with access to AWS APIs. Ensure proper IAM permissions before use.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Verification in imgproxy\nDESCRIPTION: Allows disabling SSL verification for development environments with self-signed SSL certificates.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_IGNORE_SSL_VERIFICATION`]: when `true`, disables SSL verification, so imgproxy can be used in a development environment with self-signed SSL certificates.\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced WebP Compression in imgproxy\nDESCRIPTION: Sets options for advanced WebP compression, including compression method and smart subsampling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_WEBP_COMPRESSION`]: ((pro)) the compression method to use. Supported values are `lossy`, `near_lossless`, and `lossless`. Default: `lossy`\n* [`IMGPROXY_WEBP_SMART_SUBSAMPLE`]: ((pro)) when `true`, enables smart subsampling. Smart subsampling increases the resulting file size and compression time but improves quality. Default: `false`\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source Image Resolution in imgproxy\nDESCRIPTION: Configures the maximum allowed resolution for source images in megapixels. Images exceeding this limit will be rejected. This setting helps prevent processing of excessively large images.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_SRC_RESOLUTION=16.8\n```\n\n----------------------------------------\n\nTITLE: Stripping Color Profile in Imgproxy\nDESCRIPTION: Transforms the embedded color profile to sRGB and removes it from the image when enabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_48\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstrip_color_profile:%strip_color_profile\nscp:%strip_color_profile\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Custom Key/Salt Environment Variables in Bash\nDESCRIPTION: Demonstrates how to launch imgproxy with specific key and salt values by setting the IMGPROXY_KEY and IMGPROXY_SALT environment variables. Intended for demonstration or quick setup; in production use, stronger keys should be generated. Expects imgproxy binary in the PATH. Input: none (env variables assigned inline). Output: starts the imgproxy server.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Example imgproxy URL with Encrypted Source\nDESCRIPTION: A complete example of an imgproxy URL that requests an image using an encrypted source URL. The URL includes processing options (`rs:fit:300:300`), the `/enc/` segment indicating an encrypted source, and the URL-safe Base64 encoded payload (IV + ciphertext). Note the warning about signing such URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_9\n\nLANGUAGE: url\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/rs:fit:300:300/enc/p5VjorNdhs7mRRw8gA9TWoRlGci3l1kuzqN43UQlRaRIQ0qtBKW3qFABIsx-ZRz_cVc8iVTYbhsNsxNBL1BHaQ\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-based Autoquality in imgproxy\nDESCRIPTION: Configuration for machine learning based quality adjustment with neural network paths and quality parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, and AVIF\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-based Autoquality in imgproxy\nDESCRIPTION: Configuration example for machine learning based autoquality with neural network paths and quality parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/autoquality.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, and AVIF\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\n```\n\n----------------------------------------\n\nTITLE: Building and Running Custom imgproxy Docker Container using Bash\nDESCRIPTION: Builds a custom Docker image named 'imgproxy' using the Dockerfile located in the 'docker/' subdirectory of the current project context and then runs a container from this newly built image. It maps the host's port 8080 to the container's port 8080. Requires Docker and the imgproxy source code checked out.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -f docker/Dockerfile -t imgproxy .\ndocker run -p 8080:8080 -it imgproxy\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Crop Coordinates\nDESCRIPTION: Shows the JSON structure for image crop coordinates returned by imgproxy based on specified crop parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crop\": {\n    \"left\": 0.383203125,\n    \"top\": 0.2603861907548274,\n    \"width\": 0.1953125,\n    \"height\": 0.3510825043885313\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring None Autoquality Method in imgproxy\nDESCRIPTION: Sets the autoquality method to 'none', which disables the autoquality feature. This is used when you want to bypass automatic quality calculations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Generating Random Encryption Key for imgproxy (Bash)\nDESCRIPTION: This snippet generates a random 32-byte encryption key for use with imgproxy's source URL encryption feature. The key is hex-encoded and suitable for AES-256-CBC encryption.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Configuring Hashsum Calculation - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: These option snippets instruct imgproxy to calculate and return one or more cryptographic hashsums for a source image. Both the long form (calc_hashsums) and short alias (chs) are shown. Supported hashsum types: md5, sha1, sha256, sha512. Dependencies: full source image download, hashing algorithms. Inputs: one or more hashsum type keywords.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_11\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncalc_hashsums:%hashsum_type1:%hashsum_type2:...:%hashsum_typeN\nchs:%hashsum_type1:%hashsum_type2:...:%hashsum_typeN\n```\n\n----------------------------------------\n\nTITLE: Creating Text Watermark in Imgproxy\nDESCRIPTION: Generates an image from provided text to use as a watermark. Supports Pango markup for styling and custom fonts.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_40\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Usage Settings for Imgproxy\nDESCRIPTION: Environment variables for fine-tuning memory usage including buffer sizes, memory release intervals, and malloc implementation selection.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_12\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_DOWNLOAD_BUFFER_SIZE=0\nIMGPROXY_FREE_MEMORY_INTERVAL=10\nIMGPROXY_BUFFER_POOL_CALIBRATION_THRESHOLD=1024\nIMGPROXY_MALLOC=malloc\n```\n\n----------------------------------------\n\nTITLE: Defining Contrast Adjustment Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `contrast` option (Pro feature) to adjust the image contrast. The `contrast` value is a positive float, where 1 leaves contrast unchanged. Default is 1.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_26\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncontrast:%contrast\nco:%contrast\n```\n\n----------------------------------------\n\nTITLE: Rotating Image in imgproxy URL\nDESCRIPTION: Rotates the image by a specified angle. Supports 90-degree increments (0, 90, 180, 270, etc.).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nrotate:%angle\nrot:%angle\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Metrics for imgproxy\nDESCRIPTION: Environment variables to enable and configure New Relic metrics integration in imgproxy. Includes settings for license key, application name, and labels.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_NEW_RELIC_KEY`]: the New Relic license key\n* [`IMGPROXY_NEW_RELIC_APP_NAME`]: a New Relic application name. Default: `imgproxy`\n* [`IMGPROXY_NEW_RELIC_LABELS`]: the list of New Relic labels, semicolon divided. Example: `label1=value1;label2=value2`. Default: blank\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Watermark Operations - imgproxy_url\nDESCRIPTION: Shows how to apply more than one watermark to a single image by chaining two processing pipelines in the imgproxy URL. The first pipeline resizes and places the first watermark, and the second pipeline adds another watermark. Requires an imgproxy Pro instance; input parameters include various options for resizing and watermarking. Output is an image with both watermarks applied in sequence.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Automatic Quality Optimization\nDESCRIPTION: Configures automatic quality adjustment with specified parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_50\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nautoquality:%method:%target:%min_quality:%max_quality:%allowed_error\naq:%method:%target:%min_quality:%max_quality:%allowed_error\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Quality in imgproxy Autoquality\nDESCRIPTION: Sets the minimal quality imgproxy can use for autoquality. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_MIN=70\n```\n\n----------------------------------------\n\nTITLE: Building Linux Package for imgproxy from Docker Image\nDESCRIPTION: Command to export a DEB, RPM, or TAR package from an imgproxy Docker image. This example shows how to create a DEB package that can be installed on Debian or Ubuntu systems.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -u0 --rm -it -v $(pwd):/dist ghcr.io/imgproxy/imgproxy:latest-amd64 imgproxy-build-package deb /dist\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsharp Masking in imgproxy URL\nDESCRIPTION: Redefines unsharp masking options for the image processing. Allows setting mode, weight, and divider parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_33\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nunsharp_masking:%mode:%weight:%divider\nush:%mode:%weight:%divider\n```\n\n----------------------------------------\n\nTITLE: Configuring Presets with Command Line Arguments in imgproxy\nDESCRIPTION: Command line syntax for defining presets in imgproxy using a path to a file containing preset definitions. This allows defining processing presets outside of environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -presets /path/to/file/with/presets -info-presets /path/to/file/with/info-presets\n```\n\n----------------------------------------\n\nTITLE: Configuring PNG Quantization Colors\nDESCRIPTION: Sets the maximum number of entries (colors) in the quantization palette when IMGPROXY_PNG_QUANTIZE is enabled. Must be between 2 and 256. The default value is 256.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_33\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_PNG_QUANTIZATION_COLORS\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables in Bash\nDESCRIPTION: Demonstrates how to configure AWS credentials for imgproxy by setting the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environment variables. Examples are provided for running imgproxy directly on the command line and within a Docker container using the `-e` flag.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Drawing Detection Boxes in imgproxy URL\nDESCRIPTION: Use the 'draw_detections' parameter in the imgproxy URL to draw bounding boxes around detected objects. This example draws boxes around detected faces.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with AWS Credentials via Environment Variables\nDESCRIPTION: This snippet demonstrates how to run imgproxy with AWS credentials set as environment variables, both directly and using Docker.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with AWS Credentials\nDESCRIPTION: Example of running imgproxy with AWS credentials using environment variables in both direct command line and Docker contexts.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy on macOS\nDESCRIPTION: Commands to install dependencies and build imgproxy from source on macOS using Homebrew.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Detailed Error Messages in imgproxy\nDESCRIPTION: Enables detailed error messages in responses, not recommended for production due to potential stack trace exposure.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_DEVELOPMENT_ERRORS_MODE`]: when `true`, imgproxy will respond with detailed error messages. Not recommended for production because some errors may contain stack traces.\n```\n\n----------------------------------------\n\nTITLE: Stripping Color Profile from Images in imgproxy\nDESCRIPTION: Transforms the embedded color profile to sRGB and removes it when enabled. Overrides the IMGPROXY_STRIP_COLOR_PROFILE configuration for individual requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_48\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstrip_color_profile:%strip_color_profile\nscp:%strip_color_profile\n```\n\n----------------------------------------\n\nTITLE: Displaying Signed imgproxy URL Example - Markdown\nDESCRIPTION: Shows a complete, valid imgproxy URL containing the calculated HMAC signature as a path segment. Used to demonstrate the correct URL format for secure image processing requests. No inputs or outputs; static example.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/signing_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/oKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Complete imgproxy URL Example\nDESCRIPTION: Full imgproxy URL example showing how to resize a local image to fit 300x200 dimensions, including all necessary URL components and parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/local_files.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Processing URL for ML-based Autoquality\nDESCRIPTION: URL format for applying machine learning based autoquality with specific parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/autoquality.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy on macOS with Homebrew\nDESCRIPTION: Install imgproxy on macOS using the Homebrew package manager. This is a simple way to get imgproxy running on a local macOS system.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Image URLs for imgproxy\nDESCRIPTION: Environment variables to configure base URL and URL replacements for source images in imgproxy. Includes settings for adding a base URL prefix and defining URL replacement patterns.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_BASE_URL`]: a base URL prefix that will be added to each source image URL. For example, if the base URL is `http://example.com/images` and `/path/to/image.png` is requested, imgproxy will download the source image from `http://example.com/images/path/to/image.png`. If the image URL already contains the prefix, it won't be added. Default: blank\n\n* [`IMGPROXY_URL_REPLACEMENTS`]: a list of `pattern=replacement` pairs, semicolon (`;`) divided. imgproxy will replace source URL prefixes matching the pattern with the corresponding replacement. Wildcards can be included in patterns with `*` to match all characters except `/`. `${N}` in replacement strings will be replaced with wildcard values, where `N` is the number of the wildcard. Examples:\n  * `mys3://=s3://my_bucket/images/` will replace `mys3://image01.jpg` with `s3://my_bucket/images/image01.jpg`\n  * `mys3://*/=s3://my_bucket/${1}/images` will replace `mys3://items/image01.jpg` with `s3://my_bucket/items/images/image01.jpg`\n```\n\n----------------------------------------\n\nTITLE: Image Size Info Response\nDESCRIPTION: Example JSON response when requesting image file size information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"size\": 123456\n}\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Homebrew\nDESCRIPTION: Command to install imgproxy using Homebrew package manager on macOS\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Generating Random Encryption Key for imgproxy (Bash)\nDESCRIPTION: This snippet generates a random 32-byte hex-encoded key for use with imgproxy's source URL encryption feature. It uses /dev/random for secure random number generation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Configuring Miscellaneous imgproxy Settings\nDESCRIPTION: Environment variables for various imgproxy behaviors, including processing images in linear colorspace, disabling shrink-on-load optimization, stripping metadata (with options to keep copyright and set DPI), handling color profiles, auto-rotating images based on EXIF data, enforcing thumbnail usage, adding `Content-Disposition: attachment` header, attempting SVG compatibility fixes, customizing the health check response message (Pro), and defining an additional health check path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_36\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_USE_LINEAR_COLORSPACE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_DISABLE_SHRINK_ON_LOAD\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_STRIP_METADATA\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_KEEP_COPYRIGHT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_STRIP_METADATA_DPI\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_STRIP_COLOR_PROFILE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_AUTO_ROTATE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_ENFORCE_THUMBNAIL\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_RETURN_ATTACHMENT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SVG_FIX_UNSUPPORTED\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_HEALTH_CHECK_MESSAGE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_HEALTH_CHECK_PATH\n```\n\n----------------------------------------\n\nTITLE: Adjusting Image Saturation in imgproxy URL\nDESCRIPTION: Adjusts the saturation of the resulting image. Accepts a positive floating-point number, where 1 leaves the saturation unchanged.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_27\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsaturation:%saturation\nsa:%saturation\n```\n\n----------------------------------------\n\nTITLE: Object Blurring URL in imgproxy\nDESCRIPTION: URL pattern for blurring detected objects of specific classes, useful for anonymization.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_9\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../blur_detections:7:face/...\n```\n\n----------------------------------------\n\nTITLE: Formatting Google Cloud Storage URL for imgproxy\nDESCRIPTION: Demonstrates how to structure the source image URL for imgproxy to access files in Google Cloud Storage buckets. It includes an optional query string for specifying the generation of the source object.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Adjusting Image Saturation with imgproxy URL Option (Pro)\nDESCRIPTION: Adjusts the saturation of the resulting image. The `saturation` parameter is a positive floating-point number. A value of 1 leaves the saturation unchanged. The default value is 1. This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_27\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsaturation:%saturation\nsa:%saturation\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Animation Frame Resolution Limit\nDESCRIPTION: Sets the maximum resolution of a single frame in an animated source image, in megapixels. Animated images with any frame exceeding this resolution will be rejected. If set to 0, imgproxy checks the total resolution of all frames summed together against IMGPROXY_MAX_SRC_RESOLUTION instead. The default value is 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION\n```\n\n----------------------------------------\n\nTITLE: Disabling Shrink-on-Load Optimization in imgproxy (Environment Variable)\nDESCRIPTION: Setting this to `true` disables the shrink-on-load optimization for JPEG and WebP files. This enables full linear colorspace processing but drastically increases processing time and memory usage for large images. Default is `false`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_DISABLE_SHRINK_ON_LOAD`\n```\n\n----------------------------------------\n\nTITLE: Applying ML-Based imgproxy Autoquality via URL Option\nDESCRIPTION: Demonstrates applying ML-based autoquality (`ml`) for a single image request using the `autoquality` processing option in the imgproxy URL. It includes the target DSSIM (0.02), minimum quality (70), maximum quality (80), and allowed error (0.001). Requires ML models to be configured globally via environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/autoquality.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Setting Preferred Formats in imgproxy\nDESCRIPTION: Specifies a list of preferred formats for the resulting image when not explicitly specified.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_51\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_PREFERRED_FORMATS=\"jpeg,png,gif\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TCMalloc in imgproxy on Debian Systems\nDESCRIPTION: Shows how to install and use Google's TCMalloc as an alternative memory allocator for imgproxy on Debian-based systems. TCMalloc is a fast, multi-threaded malloc implementation that can help reduce memory fragmentation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Rotating Watermark in Imgproxy\nDESCRIPTION: Rotates the watermark by a specified angle clockwise. Orientation from image metadata is applied before rotation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_42\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_rotate:%angle\nwm_rot:%angle\nwmr:%angle\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Settings for Imgproxy\nDESCRIPTION: Environment variables for configuring logging format, level, and syslog integration options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_11\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_LOG_FORMAT=pretty\nIMGPROXY_LOG_LEVEL=info\nIMGPROXY_SYSLOG_ENABLE=false\nIMGPROXY_SYSLOG_LEVEL=info\nIMGPROXY_SYSLOG_NETWORK=\nIMGPROXY_SYSLOG_ADDRESS=\nIMGPROXY_SYSLOG_TAG=imgproxy\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Disposition as Attachment in imgproxy\nDESCRIPTION: When enabled, imgproxy will set the Content-Disposition header to 'attachment', causing browsers to open a 'Save as' dialog instead of displaying the image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_68\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nreturn_attachment:%return_attachment\natt:%return_attachment\n```\n\n----------------------------------------\n\nTITLE: Using AES-CBC Encrypted Source URLs in imgproxy\nDESCRIPTION: Encrypts the source URL with the AES-CBC algorithm, prepended with /enc/. The encrypted URL can be split with / characters as needed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_30\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in Shared Credentials File\nDESCRIPTION: This snippet shows the content of the .aws/credentials file for configuring AWS credentials. The file should be placed in the user's home directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables in Bash for imgproxy\nDESCRIPTION: Demonstrates launching imgproxy from the command line while providing AWS access keys using the standard `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environment variables. This method is applicable when configuring imgproxy to load secrets from AWS Secrets Manager or AWS Systems Manager Parameter Store.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n```\n\n----------------------------------------\n\nTITLE: Basic Pipeline Chaining Syntax in imgproxy\nDESCRIPTION: Demonstrates the basic syntax for chaining pipelines in imgproxy using a minus sign (-) to separate different processing stages.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Animation Frames Configuration Environment Variable\nDESCRIPTION: Environment variable to set the maximum number of animated image frames to be processed. Default value is 1 frame.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_formats_support.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_ANIMATION_FRAMES=1\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Handling in imgproxy\nDESCRIPTION: Sets options for passing cookies in image requests and defining their scope.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_COOKIE_PASSTHROUGH=false\nIMGPROXY_COOKIE_BASE_URL=\"https://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing Thumbnail Use in imgproxy\nDESCRIPTION: Forces the use of embedded thumbnails (for HEIC and AVIF) instead of the main image when enabled. Overrides the IMGPROXY_ENFORCE_THUMBNAIL configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_49\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nenforce_thumbnail:%enforce_thumbnail\neth:%enforce_thumbnail\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Source URL Encryption Key (Bash)\nDESCRIPTION: Demonstrates how to start the imgproxy server with source URL encryption enabled by setting the `IMGPROXY_SOURCE_URL_ENCRYPTION_KEY` environment variable to the hex-encoded key.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Path for HMAC Calculation Including Salt (imgproxy URL Fragment)\nDESCRIPTION: This snippet shows the concatenation of the salt and the path (excluding signature) that must be signed using HMAC-SHA256. It is a critical input to the HMAC step of the imgproxy signature algorithm. The value may vary depending on the image URL and processing options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/signing_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhello/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Salt-Prefixed imgproxy URL Path\nDESCRIPTION: Example of URL path with salt prefix before HMAC calculation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/signing_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhello/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv6 Model to ONNX (FP32) using Bash\nDESCRIPTION: Bash command using the YOLOv6 `export_onnx.py` script to convert a YOLOv6 model (`.pt`) to ONNX format with FP32 precision. Specifies weights file, image size, batch size, and enables simplification.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP32 precision\npython deploy/ONNX/export_onnx.py \\\n  --weights yolov6s.pt \\\n  --img 640 \\\n  --batch 1 \\\n  --simplify\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Credentials in a Shared Credentials File for imgproxy (ini)\nDESCRIPTION: This snippet shows the recommended structure of an AWS shared credentials file, which imgproxy will reference when accessing protected AWS resources. The file should reside at ~/.aws/credentials, and must include keys aws_access_key_id and aws_secret_access_key under a profile (e.g. [default]). Required prerequisites are a configured AWS account and correct path/permissions for the credentials file. Inputs are your aws_access_key_id and aws_secret_access_key; the output is successful AWS authentication for operations such as reading secrets or parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Using DSSIM-based Autoquality in imgproxy URL\nDESCRIPTION: Processing option to set DSSIM-based autoquality for a specific image, targeting DSSIM of 0.02 with quality range from 70 to 80 and error tolerance of 0.001.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/autoquality.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source File Size in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_SRC_FILE_SIZE configuration for a specific request. Requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be enabled as it affects security restrictions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_72\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_file_size:%size\nmsfs:%size\n```\n\n----------------------------------------\n\nTITLE: Text Watermark Option in imgproxy\nDESCRIPTION: URL processing option for adding text watermarks with support for Pango markup styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Exporting Patched YOLOv10 Model to ONNX (FP16) using Bash\nDESCRIPTION: Bash command using the patched YOLOv10 `export_opencv.py` script to convert a YOLOv10 model (`.pt`) to ONNX format with FP16 precision. Requires a CUDA-compatible GPU and uses the `--half` flag.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export_opencv.py \\\n  --weights yolov10s.pt \\\n  --imgsz 640 640 \\\n  --half\n```\n```\n\n----------------------------------------\n\nTITLE: Using jemalloc with imgproxy via LD_PRELOAD in Bash (Debian)\nDESCRIPTION: This snippet demonstrates how to install the jemalloc library on a Debian-based system using apt-get and then run imgproxy while preloading the jemalloc library using the `LD_PRELOAD` environment variable. This forces imgproxy (and its dependencies like libvips) to use jemalloc for memory allocation, which can improve performance and reduce fragmentation. The specific library path may vary.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring BlurHash Calculation - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: These options configure imgproxy to calculate and return the BlurHash representation of an image. Both the verbose (blurhash) and short alias (bh) forms specify the number of components in X and Y directions, affecting the hash's fidelity. Key parameters: x_components, y_components; Inputs: integers (0-9). Depends on: full image retrieval and processing. Outputs appear in the blurhash field of result JSON.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_9\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblurhash:%x_components:%y_components\nbh:%x_components:%y_components\n```\n\n----------------------------------------\n\nTITLE: Defining Basic imgproxy Preset\nDESCRIPTION: Shows the basic syntax for defining a preset in imgproxy. A preset consists of a name followed by an equals sign and the desired options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Second\nDESCRIPTION: Overrides the IMGPROXY_VIDEO_THUMBNAIL_SECOND configuration for video thumbnail generation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_61\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_second:%second\nvts:%second\n```\n\n----------------------------------------\n\nTITLE: Applying Monochrome Effect with imgproxy URL Option (Pro)\nDESCRIPTION: Converts the resulting image to monochrome if `intensity` is greater than zero. `intensity` is a float between 0 and 1 defining the effect strength. `color` (optional hex value) sets the base color for the monochrome palette. Default settings are `0:b3b3b3` (disabled, gray base). This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_28\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmonochrome:%intensity:%color\nmc:%intensity:%color\n```\n\n----------------------------------------\n\nTITLE: Configuring Best Format Options in Imgproxy\nDESCRIPTION: Environment variables for configuring imgproxy's best format selection behavior, including complexity threshold, resolution limits, default behavior, and processing rules.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/best_format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD=5.5\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION=0\nIMGPROXY_BEST_FORMAT_BY_DEFAULT=true\nIMGPROXY_BEST_FORMAT_ALLOW_SKIPS=true\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark URL Option in imgproxy\nDESCRIPTION: URL option format for applying custom watermarks using an external watermark image URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-Based imgproxy Autoquality via Bash\nDESCRIPTION: Configures imgproxy globally using environment variables to use DSSIM-based autoquality (`IMGPROXY_AUTOQUALITY_METHOD=\"dssim\"`). It sets the target DSSIM value (`IMGPROXY_AUTOQUALITY_TARGET`), allowed error margin (`IMGPROXY_AUTOQUALITY_ALLOWED_ERROR`), minimum/maximum quality levels (`IMGPROXY_AUTOQUALITY_MIN`, `IMGPROXY_AUTOQUALITY_MAX`), and format-specific quality ranges (`IMGPROXY_AUTOQUALITY_FORMAT_MIN`, `IMGPROXY_AUTOQUALITY_FORMAT_MAX`).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Stripping in imgproxy (Environment Variable)\nDESCRIPTION: If set to `true`, imgproxy removes metadata (like EXIF, IPTC) from the output image. This is the default behavior (`true`). Set to `false` to preserve metadata.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_STRIP_METADATA`\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with TCMalloc via LD_PRELOAD in Bash\nDESCRIPTION: Shows how to install the TCMalloc library (using Debian's apt-get as an example) and execute imgproxy while forcing it to use TCMalloc for memory allocation via the LD_PRELOAD environment variable. TCMalloc is Google's memory allocator implementation, known for being fast and efficient in multi-threaded scenarios. This can be an alternative to the default allocator or jemalloc for optimizing memory usage. The library path might differ based on the system.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoquality in Imgproxy\nDESCRIPTION: Redefines autoquality settings for automatic quality adjustment based on specified parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_52\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nautoquality:%method:%target:%min_quality:%max_quality:%allowed_error\naq:%method:%target:%min_quality:%max_quality:%allowed_error\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Animation Frames in imgproxy\nDESCRIPTION: Specifies the maximum number of frames that can be processed for animated images. Default is 1 to limit memory usage.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_ANIMATION_FRAMES=1\n```\n\n----------------------------------------\n\nTITLE: Enabling Raw Image Handling\nDESCRIPTION: Controls whether imgproxy should return raw, unprocessed source images without type checking or size limitations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_67\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nraw:%raw\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Example of AWS credentials configuration in the shared credentials file format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Protocols for OpenTelemetry Collector - Markdown\nDESCRIPTION: This snippet lists the protocols supported by imgproxy for sending telemetry data to an OpenTelemetry collector. The list is intended for user guidance and is not executable code. It helps clarify which protocols users can specify via environment variables, and indicates the default behavior.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `grpc` _(default)_\\n* `http/protobuf` (aliases: `http`, `https`)\n```\n\n----------------------------------------\n\nTITLE: Specifying AWS Credentials via Environment Variables for imgproxy (Repeated)\nDESCRIPTION: This snippet demonstrates again how to set AWS access key and secret key environment variables for imgproxy, both directly and using Docker.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv6 Model to ONNX (FP16) using Bash\nDESCRIPTION: Bash command using the YOLOv6 `export_onnx.py` script to convert a YOLOv6 model (`.pt`) to ONNX format with FP16 precision. Requires a CUDA-compatible GPU and includes the `--half` flag.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython deploy/ONNX/export_onnx.py \\\n  --weights yolov6s.pt \\\n  --img 640 \\\n  --batch 1 \\\n  --simplify \\\n  --half\n```\n```\n\n----------------------------------------\n\nTITLE: Building Linux Package for imgproxy\nDESCRIPTION: Command to build a DEB, RPM, or TAR package from Docker image\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -u0 --rm -it -v $(pwd):/dist ghcr.io/imgproxy/imgproxy:latest-amd64 imgproxy-build-package deb /dist\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Autoquality in imgproxy\nDESCRIPTION: Environment variables for configuring imgproxy's autoquality feature, including quality calculation method, target metrics, and quality limits for different formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=none\nIMGPROXY_AUTOQUALITY_TARGET=0.02\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=avif=40\nIMGPROXY_AUTOQUALITY_MAX=80\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=avif=50\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MAX_RESOLUTION=0\n```\n\n----------------------------------------\n\nTITLE: Disabling Animation Processing\nDESCRIPTION: Controls whether images should be treated as non-animated. Allows specific frame selection using page and pages options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_60\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndisable_animation:%disable\nda:%disable\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Encryption Key in Bash\nDESCRIPTION: This command starts imgproxy with a specified source URL encryption key.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Health Check for imgproxy\nDESCRIPTION: YAML configuration for setting up a Docker Compose healthcheck that uses the imgproxy health command. Defines timeout, interval, and retry parameters for container health monitoring.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Health Check for imgproxy using YAML\nDESCRIPTION: This YAML snippet configures a health check for an imgproxy service within a Docker Compose file. It utilizes the `imgproxy health` command, executed via `CMD`, to periodically test the service's health endpoint, which relies on `IMGPROXY_BIND` and `IMGPROXY_NETWORK` configurations. The command exits with 0 on success and 1 on failure. The `timeout`, `interval`, and `retries` parameters control the timing and retry logic of the health check.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Weighted Class Names in imgproxy\nDESCRIPTION: Example of class names file with custom weights assigned to specific object classes using the =%weight suffix.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nperson=2\ndog\ncat=3\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Dimensions Info\nDESCRIPTION: Example JSON response when requesting image dimensions information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"width\": 7360,\n  \"height\": 4912\n}\n```\n\n----------------------------------------\n\nTITLE: Format option response example\nDESCRIPTION: Sample JSON response showing the image format and MIME type.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"jpeg\",\n  \"mime_type\": \"image/jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM Based Autoquality in imgproxy\nDESCRIPTION: Configuration for DSSIM-based quality selection including target value, error tolerance, and quality ranges.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: URL with Salt Example\nDESCRIPTION: Example showing the URL path with salt prepended, used in signature calculation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/signing_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhello/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv4 Model to ONNX Format\nDESCRIPTION: Commands to install dependencies and export YOLOv4 model to ONNX format with example usage\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install onnxruntime\n\npython demo_pytorch2onnx.py <weight_file> <image_path> <batch_size> <n_classes> <input_width> <input_height>\n\n# Example\npython demo_pytorch2onnx.py yolov4.pth dog.jpg 1 80 416 416\n```\n\n----------------------------------------\n\nTITLE: Example Source URL with PKCS#7 Padding\nDESCRIPTION: Shows the example source URL after being padded to a 16-byte alignment using the PKCS#7 method. The `\\09` represents the padding byte value (9 bytes of padding needed for the 39-byte URL to reach 48 bytes). This padded URL is the input for the AES encryption.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/images/curiosity.jpg\\09\\09\\09\\09\\09\\09\\09\\09\\09\n```\n\n----------------------------------------\n\nTITLE: Applying Presets to an Image - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Allows selecting one or multiple image processing presets via the URL. Both 'preset' and its short alias 'pr' are shown. Parameters: list of preset names separated by colons. Presets must be defined server-side. Inputs: preset name(s). Used for consistent, reusable transformations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npreset:%preset_name1:%preset_name2:...:%preset_nameN\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n\n----------------------------------------\n\nTITLE: Defining Class Names and Weights for Object Detection (text)\nDESCRIPTION: These text examples represent valid contents for the class names file required by imgproxy\\'s object detection configuration. Each line names a detectable class (such as \\'person\\', \\'dog\\', \\'cat\\'), and optionally a weight can be assigned to influence cropping via \\'=N\\' syntax. No dependencies are needed apart from referencing the file via IMGPROXY_OBJECT_DETECTION_CLASSES. Lines must match the order of network output classes. The output is a text file read by imgproxy for class mappings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nperson\ndog\ncat\n```\n\nLANGUAGE: text\nCODE:\n```\nperson=2\ndog\ncat=3\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Enforcement\nDESCRIPTION: Forces use of embedded thumbnails for supported formats (HEIC, AVIF).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_47\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nenforce_thumbnail:%enforce_thumbnail\neth:%enforce_thumbnail\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Time in imgproxy URL\nDESCRIPTION: Shows how to set an expiration timestamp in the imgproxy URL. When set, imgproxy will check the provided unix timestamp and return 404 if expired.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_69\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexpires:%timestamp\nexp:%timestamp\n```\n\n----------------------------------------\n\nTITLE: Setting imgproxy Key/Salt File Paths\nDESCRIPTION: Command line example showing how to specify file paths for hex-coded keys and salts for URL signing\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -keypath /path/to/file/with/key -saltpath /path/to/file/with/salt\n```\n\n----------------------------------------\n\nTITLE: Watermark and Image Enhancement Settings\nDESCRIPTION: Configuration options for watermarking and image enhancement features including unsharp masking and smart crop settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_WATERMARK_OPACITY=1.0\nIMGPROXY_WATERMARKS_CACHE_SIZE=256\nIMGPROXY_UNSHARP_MASKING_MODE=auto\nIMGPROXY_UNSHARP_MASKING_WEIGHT=1\nIMGPROXY_UNSHARP_MASKING_DIVIDER=24\nIMGPROXY_SMART_CROP_ADVANCED=false\nIMGPROXY_SMART_CROP_FACE_DETECTION=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Autoquality in imgproxy\nDESCRIPTION: Configuration for the 'size' method which degrades quality to fit a desired file size. It includes target size in bytes and quality range limits, with format-specific adjustments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Verification Ignore\nDESCRIPTION: When set to 'true', disables SSL certificate verification when fetching source images. This is useful in development environments with self-signed certificates but should not be used in production. The default value is 'false'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_18\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_IGNORE_SSL_VERIFICATION\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Cropping with Custom Weights in imgproxy\nDESCRIPTION: Shows how to use the 'objw' gravity type to redefine weights of detected objects (face, cat, dog) for cropping in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_11\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:objw:face:2:cat:3:dog:4/...\n```\n\n----------------------------------------\n\nTITLE: Restricting Max Animation Frames in imgproxy URL\nDESCRIPTION: Illustrates how to set a maximum number of animation frames in the imgproxy URL. This option allows overriding the IMGPROXY_MAX_ANIMATION_FRAMES configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_76\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_animation_frames:%size\nmaf:%size\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Autoquality in imgproxy\nDESCRIPTION: Configuration example for size-based autoquality with target file size and quality bounds.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Timestamp\nDESCRIPTION: Sets expiration time for processed images using unix timestamp.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_69\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexpires:%timestamp\nexp:%timestamp\n```\n\n----------------------------------------\n\nTITLE: Sample Unsigned imgproxy URL\nDESCRIPTION: This example demonstrates the structure of an unsigned imgproxy URL before adding a signature. The URL includes image processing parameters and a target image encoded in Base64. It serves as the starting point for constructing a signed imgproxy request and is suitable for demonstration and testing purposes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/signing_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Deprecated OpenTelemetry Configuration\nDESCRIPTION: Legacy environment variables that are scheduled for removal. Shows the mapping between old variables and their modern replacements.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_ENDPOINT=localhost:4317\nIMGPROXY_OPEN_TELEMETRY_PROTOCOL=grpc\nIMGPROXY_OPEN_TELEMETRY_GRPC_INSECURE=true\nIMGPROXY_OPEN_TELEMETRY_SERVICE_NAME=imgproxy\nIMGPROXY_OPEN_TELEMETRY_PROPAGATORS=b3\nIMGPROXY_OPEN_TELEMETRY_CONNECTION_TIMEOUT=5\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File for imgproxy (Repeated)\nDESCRIPTION: This snippet shows again the content of the .aws/credentials file used to store AWS access key and secret key for imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Generating Base64 Watermark Data in Bash\nDESCRIPTION: Command to convert a watermark image file to Base64 format and remove newlines for IMGPROXY_WATERMARK_DATA environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Basic Watermark Configuration in imgproxy\nDESCRIPTION: URL option format for adding a watermark to an image with controls for opacity, position, offset, and scale.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/watermark.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Environment Variables for imgproxy\nDESCRIPTION: Configure imgproxy to send traces and metrics to an OpenTelemetry collector by setting these environment variables. This includes enabling the feature, specifying protocols, endpoints, and service names.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_ENABLE=true\nIMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS=true\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc\nOTEL_EXPORTER_OTLP_ENDPOINT=https://localhost:4317\nOTEL_SERVICE_NAME=imgproxy\nIMGPROXY_OPEN_TELEMETRY_TRACE_ID_GENERATOR=xray\n```\n\n----------------------------------------\n\nTITLE: Setting Output Format in ImgProxy URLs\nDESCRIPTION: Specifies the resulting image format. Acts as an alias for the extension part of the URL with a default value of 'jpg'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_57\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nformat:%extension\nf:%extension\next:%extension\n```\n\n----------------------------------------\n\nTITLE: Specifying S3 Object URL with Version ID in Plain Text\nDESCRIPTION: Illustrates the URL format required by imgproxy to reference an Amazon S3 object. It uses the `s3://` scheme followed by the bucket name and file key. An optional version ID can be appended as a query parameter to target a specific version of the object.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Calculating Base64-encoded Image Data for Watermark\nDESCRIPTION: Command to calculate Base64-encoded image data for the IMGPROXY_WATERMARK_DATA environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.png | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Using Presets with Chained Pipelines\nDESCRIPTION: Shows how to combine presets with additional processing steps in a URL using chained pipelines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Unsigned imgproxy URL Example\nDESCRIPTION: Example of an unsigned imgproxy URL showing the standard format with processing options and encoded image URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Deprecated Prometheus Metrics in imgproxy\nDESCRIPTION: List of deprecated metrics that may be removed in future versions, with recommended alternatives.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/monitoring/prometheus.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndownload_duration_seconds\nprocessing_duration_seconds\n```\n\n----------------------------------------\n\nTITLE: Processing URL for None Autoquality Method\nDESCRIPTION: URL processing option example for disabling autoquality for specific images.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: Specifying Info Option Format in imgproxy URL\nDESCRIPTION: Demonstrates the format for specifying info options in the imgproxy URL. Options are divided by slashes and can include multiple arguments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Example AES-256-CBC Encrypted Data (Bytes)\nDESCRIPTION: The result of encrypting the PKCS#7 padded source URL using the AES-256-CBC algorithm with the example key and IV. The output is shown as a sequence of hex-escaped bytes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\\84\\65\\19\\C8\\B7\\97\\59\\2E\\CE\\A3\\78\\DD\\44\\25\\45\\A4\\48\\43\\4A\\AD\\04\\A5\\B7\\A8\\50\\01\\22\\CC\\7E\\65\\1C\\FF\\71\\57\\3C\\89\\54\\D8\\6E\\1B\\0D\\B3\\13\\41\\2F\\50\\47\\69\n```\n\n----------------------------------------\n\nTITLE: Applying Cache Buster with imgproxy URL Option\nDESCRIPTION: Defines the imgproxy URL option `cachebuster` (or `cb`) used to bypass CDN, proxy, and browser caches by changing its string value. This option does not affect image processing itself but helps ensure updates are fetched when underlying settings (like quality or presets) change without altering the main URL structure. It's recommended over query strings for signability.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_16\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\ncachebuster:%string\ncb:%string\n```\n```\n\n----------------------------------------\n\nTITLE: Setting AWS SSM Credentials via Environment Variables in Bash for imgproxy\nDESCRIPTION: Demonstrates launching imgproxy from the command line while providing AWS access keys using the standard `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` environment variables, specifically in the context of configuring access to AWS Systems Manager Parameter Store.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Cropping with All-Object Weighting in imgproxy\nDESCRIPTION: Illustrates the use of 'all' pseudo-class to set weights for all detected objects, with an exception for 'face' objects in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_12\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/gravity:objw:all:2:face:10/...\n```\n\n----------------------------------------\n\nTITLE: Applying CSS Styles to SVG\nDESCRIPTION: Prepends CSS styles to SVG images with Base64-encoded style content.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_42\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstyle:%style\nst:%style\n```\n\n----------------------------------------\n\nTITLE: Video Thumbnail Configuration\nDESCRIPTION: Environment variables for configuring video thumbnail generation in imgproxy Pro, including timing and analysis parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENABLE_VIDEO_THUMBNAILS=false\nIMGPROXY_VIDEO_THUMBNAIL_SECOND=1\nIMGPROXY_VIDEO_THUMBNAIL_PROBE_SIZE=5000000\nIMGPROXY_VIDEO_THUMBNAIL_MAX_ANALYZE_DURATION=0\n```\n\n----------------------------------------\n\nTITLE: Text Watermark URL Option in imgproxy\nDESCRIPTION: URL option format for applying text-based watermarks with support for Pango markup styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Setting File Size Based Autoquality in imgproxy\nDESCRIPTION: Configuration for size-based autoquality including target size, quality ranges, and format-specific settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Defining Class Names File for imgproxy Object Detection\nDESCRIPTION: Illustrates the format for the class names file used by imgproxy, specified via `IMGPROXY_OBJECT_DETECTION_CLASSES`. It should contain one class name per line, corresponding to the order of classes in the model's output. Optionally, weights can be assigned using the `=%weight` suffix for influencing object-oriented cropping.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n```text\nperson\ndog\ncat\n```\n```\n\nLANGUAGE: text\nCODE:\n```\n```text\nperson=2\ndog\ncat=3\n```\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Custom Key/Salt Pair\nDESCRIPTION: This bash command demonstrates how to start imgproxy with a custom key and salt for URL signing. It sets the IMGPROXY_KEY and IMGPROXY_SALT environment variables before running the imgproxy command.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Combining Preset and URL Chained Pipelines in imgproxy\nDESCRIPTION: Demonstrates how a URL with chained pipelines combines with a preset that also contains chained pipelines. Shows the resulting URL after preset application.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Processing URL for Size-based Autoquality\nDESCRIPTION: URL format for applying size-based autoquality with specific parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Defining Filename in imgproxy URL\nDESCRIPTION: Illustrates how to specify a filename for the Content-Disposition header in the imgproxy URL. This option allows setting a custom filename or using a Base64-encoded filename.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_70\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nfilename:%filename:%encoded\nfn:%filename:%encoded\n```\n\n----------------------------------------\n\nTITLE: Defining Max Source File Size Option (imgproxy URL)\nDESCRIPTION: Overrides the 'IMGPROXY_MAX_SRC_FILE_SIZE' configuration setting, specifying the maximum source image file size ('%size') allowed in bytes. Requires 'IMGPROXY_ALLOW_SECURITY_OPTIONS' to be enabled as it modifies a security setting.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_file_size:%size\nmsfs:%size\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Calculated Hashsums\nDESCRIPTION: Displays an example JSON response containing calculated hashsums requested via the `calc_hashsums` option in imgproxy. The response includes a `hashsums` object with keys representing the hashsum types (e.g., `md5`, `sha256`) and their corresponding calculated hash values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n```json\n{\n  \"hashsums\": {\n    \"md5\": \"cc507f81206a4c7d0a995a07c3d9f43a\",\n    \"sha256\": \"621f6c6d68de754c6cdf3d286b7837634ce9f273f30f377b3e0df0568a23cee0\"\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Source URL Encryption Key (Bash)\nDESCRIPTION: This command starts imgproxy with a specified source URL encryption key. The key is set as an environment variable and should be a 32-byte hex-encoded string for AES-256-CBC encryption.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials for Systems Manager\nDESCRIPTION: Examples of setting AWS credentials for Systems Manager using environment variables with both direct and Docker execution.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Creating Awesome Preset in imgproxy\nDESCRIPTION: Demonstrates creating a preset named 'awesome' that configures fill resizing and JPG output format. This preset can be referenced in URLs to apply these settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated OpenTelemetry Environment Variables - Markdown\nDESCRIPTION: This snippet enumerates deprecated environment variables relevant to OpenTelemetry integration in imgproxy, linked with their replacements. It additionally provides warnings and important migration notes, like changes in URL scheme requirements and units for timeouts. This is an essential reference for legacy upgrades and future-proofing deployments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* `IMGPROXY_OPEN_TELEMETRY_ENDPOINT`: use `OTEL_EXPORTER_OTLP_ENDPOINT` instead and explicitly enable OpenTelemetry support with `IMGPROXY_OPEN_TELEMETRY_ENABLE` environment variable.\\n    :::warning\\n    Unlike `IMGPROXY_OPEN_TELEMETRY_ENDPOINT`, `OTEL_EXPORTER_OTLP_ENDPOINT` should contain a URL scheme (`http://` or `https://`).\\n    :::\\n* `IMGPROXY_OPEN_TELEMETRY_PROTOCOL`: use `OTEL_EXPORTER_OTLP_PROTOCOL` instead.\\n* `IMGPROXY_OPEN_TELEMETRY_GRPC_INSECURE`: use `OTEL_EXPORTER_OTLP_ENDPOINT` with `http://` scheme instead.\\n* `IMGPROXY_OPEN_TELEMETRY_SERVICE_NAME`: use `OTEL_SERVICE_NAME` instead.\\n* `IMGPROXY_OPEN_TELEMETRY_PROPAGATORS`: use `OTEL_PROPAGATORS` instead.\\n* `IMGPROXY_OPEN_TELEMETRY_CONNECTION_TIMEOUT`: use `OTEL_EXPORTER_OTLP_TIMEOUT` instead.\\n    :::warning\\n    Unlike `IMGPROXY_OPEN_TELEMETRY_CONNECTION_TIMEOUT`, `OTEL_EXPORTER_OTLP_TIMEOUT` should be specified in milliseconds instead of seconds.\\n    :::\n```\n\n----------------------------------------\n\nTITLE: Skipping Processing for Specific Formats in imgproxy\nDESCRIPTION: Instructs imgproxy to skip processing for specified file formats. Processing can only be skipped when the requested format matches the source format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_63\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nskip_processing:%extension1:%extension2:...:%extensionN\nskp:%extension1:%extension2:...:%extensionN\n```\n\n----------------------------------------\n\nTITLE: Specifying S3 source URL with version ID in imgproxy\nDESCRIPTION: Demonstrates how to include a version ID when specifying an S3 source URL for imgproxy. This allows accessing specific versions of S3 objects.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Setting Authorization Secret in imgproxy\nDESCRIPTION: Configures a secret key for authorization with the HTTP Authorization header in production environments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_SECRET`]: the authorization token. If specified, the HTTP request should contain the `Authorization: Bearer %secret%` header.\n```\n\n----------------------------------------\n\nTITLE: Using Presets with Chained Pipelines\nDESCRIPTION: Shows how to combine presets with additional chained pipeline operations in a URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Final Signed imgproxy URL\nDESCRIPTION: Complete signed imgproxy URL with the calculated signature prepended to the path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/signing_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/oKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Defining Video Thumbnail Second Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to define the specific second from which to extract a video thumbnail. This option overrides the global `IMGPROXY_VIDEO_THUMBNAIL_SECOND` configuration setting. The `%second` parameter indicates the time offset.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_second:%second\nvts:%second\n```\n\n----------------------------------------\n\nTITLE: Processing URL for None Autoquality Method\nDESCRIPTION: URL format for disabling autoquality on a per-request basis.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: Specifying Plain Source URL in imgproxy\nDESCRIPTION: Illustrates how to provide a plain, unencoded source image URL to imgproxy. The URL is prepended with the `/plain/` path segment. If the source URL contains special characters like a query string (`?`) or the `@` symbol, they need to be properly URL-escaped.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n```imgproxy_url\n/plain/http://example.com/images/curiosity.jpg\n```\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy URL for Image Info\nDESCRIPTION: Shows the URL structure for requesting image info from imgproxy. The URL includes a signature, info options, and the source URL in plain, encoded, or encrypted format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/info/%signature/%info_options/plain/%source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/%encoded_source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/enc/%encrypted_source_url\n```\n\n----------------------------------------\n\nTITLE: Resolved Chained Pipeline with Presets\nDESCRIPTION: Shows the final resolved URL after combining chained pipelines from both a preset and a URL. This represents how imgproxy processes the combination of preset and URL-defined chained pipelines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Resulting Combined Pipeline Chain\nDESCRIPTION: The final processed URL structure after combining the preset with chained pipelines and the URL with its own chained pipelines. Shows how the preset's pipelines are integrated into the URL's pipeline chain.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Second with imgproxy URL Option\nDESCRIPTION: Specifies the imgproxy URL option `video_thumbnail_second` (or `vts`) which allows overriding the `IMGPROXY_VIDEO_THUMBNAIL_SECOND` configuration setting. This parameter determines the specific second in the video from which to extract the thumbnail.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_14\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\nvideo_thumbnail_second:%second\nvts:%second\n```\n```\n\n----------------------------------------\n\nTITLE: Customizing Health Check Response Message in imgproxy (Pro Feature, Environment Variable)\nDESCRIPTION: (Pro Feature) Defines the content returned by the imgproxy health check endpoint. The default message is `imgproxy is running`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_HEALTH_CHECK_MESSAGE`\n```\n\n----------------------------------------\n\nTITLE: Enabling JPEG Trellis Quantization (Pro)\nDESCRIPTION: ((pro)) When set to 'true', enables trellis quantization for each 8x8 block during JPEG compression. This can reduce file size but increases compression time. The default value is 'false'. Requires imgproxy Pro.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_27\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_JPEG_TRELLIS_QUANT\n```\n\n----------------------------------------\n\nTITLE: Metadata Stripping Control\nDESCRIPTION: Controls removal of image metadata (EXIF, IPTC) per request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_43\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstrip_metadata:%strip_metadata\nsm:%strip_metadata\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Sentry Integration\nDESCRIPTION: Environment variables to enable and configure error reporting to Sentry. Providing a DSN enables the integration. The reporting environment and release can also be specified.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_31\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SENTRY_DSN\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SENTRY_ENVIRONMENT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SENTRY_RELEASE\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Bugsnag Integration\nDESCRIPTION: Environment variables to enable and configure error reporting to Bugsnag. Providing an API key enables the integration. The reporting stage can also be specified.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_BUGSNAG_KEY\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_BUGSNAG_STAGE\n```\n\n----------------------------------------\n\nTITLE: Setting Swift Configuration Environment Variables for imgproxy\nDESCRIPTION: Defines the environment variables required to configure imgproxy for OpenStack Swift authentication and connection. This includes enabling Swift support (`IMGPROXY_USE_SWIFT`), specifying username (`IMGPROXY_SWIFT_USERNAME`), API key (`IMGPROXY_SWIFT_API_KEY`), authentication URL (`IMGPROXY_SWIFT_AUTH_URL`), authentication version (`IMGPROXY_SWIFT_AUTH_VERSION`), and optional tenant/domain names (`IMGPROXY_SWIFT_TENANT`, `IMGPROXY_SWIFT_DOMAIN`). Setting `IMGPROXY_USE_SWIFT` to `true` is mandatory to enable the feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_USE_SWIFT=true\nIMGPROXY_SWIFT_USERNAME= # Default: blank\nIMGPROXY_SWIFT_API_KEY= # Default: blank\nIMGPROXY_SWIFT_AUTH_URL= # Default: blank\nIMGPROXY_SWIFT_AUTH_VERSION= # Default: 0 (autodetect)\nIMGPROXY_SWIFT_TENANT= # Default: blank (optional, v2 auth only)\nIMGPROXY_SWIFT_DOMAIN= # Default: blank (optional, v3 auth only)\n```\n\n----------------------------------------\n\nTITLE: Exporting Patched YOLOv10 Model to ONNX (FP32) using Bash\nDESCRIPTION: Bash command using the patched YOLOv10 `export_opencv.py` script to convert a YOLOv10 model (`.pt`) to ONNX format with FP32 precision. Requires specifying the weights file and image size.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP32 precision\npython export_opencv.py \\\n  --weights yolov10s.pt \\\n  --imgsz 640 640\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Thumbnails in imgproxy Pro\nDESCRIPTION: Enables video thumbnail generation. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_58\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENABLE_VIDEO_THUMBNAILS=false\n```\n\n----------------------------------------\n\nTITLE: Setting DSSIM-Based Autoquality in imgproxy Using Bash\nDESCRIPTION: Configures imgproxy to optimize output quality targeting a specific DSSIM value via environment variables. The example sets method (dssim), DSSIM target, allowed error margin, minimum and maximum quality, and AVIF format-related quality bounds. Requires bash and imgproxy with DSSIM support. Parameters control quality to ensure output images meet perceptual similarity constraints without exceeding specified bounds.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source Resolution in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_SRC_RESOLUTION configuration for a specific request. Requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be enabled as it affects security restrictions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_71\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_resolution:%resolution\nmsr:%resolution\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Detected Objects in Image\nDESCRIPTION: Example JSON response when requesting information about detected objects in an image from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"objects\": [\n    {\n      \"class_id\": 0,\n      \"class_name\": \"face\",\n      \"confidence\": 0.985792,\n      \"left\": 0.6602726057171822,\n      \"top\": 0.23434072732925415,\n      \"width\": 0.11385439336299896,\n      \"height\": 0.18671900033950806\n    },\n    {\n      \"class_id\": 0,\n      \"class_name\": \"face\",\n      \"confidence\": 0.9810329,\n      \"left\": 0.4354642778635025,\n      \"top\": 0.3503067269921303,\n      \"width\": 0.10691609978675842,\n      \"height\": 0.18357203900814056\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: EXIF Metadata Response Example\nDESCRIPTION: Example JSON response showing EXIF metadata information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exif\": {\n    \"Aperture\": \"8.00 EV (f/16.0)\",\n    \"Contrast\": \"Normal\",\n    \"Date and Time\": \"2016:09:11 22:15:03\",\n    \"Model\": \"NIKON D810\",\n    \"Software\": \"Adobe Photoshop Lightroom 6.1 (Windows)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MALLOC_ARENA_MAX for imgproxy in Bash\nDESCRIPTION: This command launches the imgproxy application with the `MALLOC_ARENA_MAX` environment variable set to 2. This limits the number of memory allocation arenas GLib (used by libvips) can create, potentially reducing memory fragmentation in heavily multi-threaded scenarios.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining Presets in imgproxy\nDESCRIPTION: Demonstrates the syntax for defining a preset in imgproxy. Presets are named sets of processing or info options used to shorten URLs and make them more readable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Creating imgproxy Preset with Chained Pipelines\nDESCRIPTION: Shows how to define a preset that includes chained pipelines, which can be referenced in URLs. This preset defines a series of resizing operations across multiple pipelines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Enabling jemalloc in imgproxy on Debian Systems\nDESCRIPTION: Demonstrates how to install and use jemalloc as an alternative memory allocator for imgproxy on Debian-based systems. This implementation emphasizes fragmentation avoidance and concurrency support, which can improve memory usage patterns.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/memory_usage_tweaks.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libjemalloc2\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libjemalloc.so.2' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Adding Cache Buster Parameter to imgproxy URLs\nDESCRIPTION: Allows bypassing CDN, proxy server, and browser cache without affecting image processing. Useful when changes are made that aren't reflected in the URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_65\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncachebuster:%string\ncb:%string\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS credentials file for imgproxy\nDESCRIPTION: Illustrates the structure of the .aws/credentials file used to store AWS credentials. This method allows imgproxy to access S3 buckets without environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Using a Preset within a Chained Pipeline URL (imgproxy URL)\nDESCRIPTION: This example demonstrates how to use a preset (like the `test` preset defined previously) within a URL that also uses chained pipelines. The URL applies an initial width adjustment, then incorporates the `test` preset, adds another width adjustment within the same pipeline segment, starts a new pipeline segment with `-`, and applies a final width adjustment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Resulting Combined Pipeline\nDESCRIPTION: Shows the final expanded form of the URL after combining preset chains with URL chains.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Multiple Watermarks Using Chained Pipelines\nDESCRIPTION: Shows how to apply multiple watermarks to an image by using chained pipelines, where the first pipeline resizes and applies the first watermark, and the second pipeline applies another watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Buster\nDESCRIPTION: Provides cache control mechanism for bypassing CDN, proxy server and browser caches.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_68\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncachebuster:%string\ncb:%string\n```\n\n----------------------------------------\n\nTITLE: Enabling SVG Sanitization in imgproxy\nDESCRIPTION: When set to true, imgproxy removes scripts from SVG images to prevent XSS attacks.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SANITIZE_SVG=true\n```\n\n----------------------------------------\n\nTITLE: Specifying Base64-Encoded Source URL in Proxy Request - imgproxy_url - imgproxy_url\nDESCRIPTION: Specifies the imgproxy source image URL in a URL-safe Base64-encoded fashion for improved safety and compatibility, allowing arbitrary splitting with '/'. Parameters: base64-encoded data blocks. Inputs: URL-safe base64 encoding of the real URL. Used to safely transport URLs with reserved or control characters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\n----------------------------------------\n\nTITLE: Setting Complexity Threshold for Best Format Selection (imgproxy Configuration)\nDESCRIPTION: This configuration variable defines the image complexity threshold. imgproxy uses this value to decide whether to use a lossless or near-lossless encoding for images with complexity below this threshold when the 'best' format option is active. The default value is 5.5.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/best_format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD\n```\n\n----------------------------------------\n\nTITLE: MP4 video info response format from imgproxy\nDESCRIPTION: Example JSON response from imgproxy's info endpoint for an MP4 video, showing format, dimensions, size, and video metadata.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/getting_info.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"mov,mp4,m4a,3gp,3g2,mj2\",\n  \"width\": 1178,\n  \"height\": 730,\n  \"size\": 984963,\n  \"exif\": {},\n  \"video_meta\": {\n    \"com.android.version\": \"9\",\n    \"compatible_brands\": \"isommp42\",\n    \"creation_time\": \"2022-01-12T15:04:10.000000Z\",\n    \"location\": \"+46.4845+030.6848/\",\n    \"location-eng\": \"+46.4845+030.6848/\",\n    \"major_brand\": \"mp42\",\n    \"minor_version\": \"0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Video Metadata Info Response\nDESCRIPTION: Example JSON response when requesting video metadata and stream information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"video_meta\": {\n    \"com.android.version\": \"9\",\n    \"compatible_brands\": \"isommp42\",\n    \"creation_time\": \"2022-01-12T15:04:10.000000Z\",\n    \"location\": \"+46.4845+030.6848/\",\n    \"location-eng\": \"+46.4845+030.6848/\",\n    \"major_brand\": \"mp42\",\n    \"minor_version\": \"0\"\n  },\n  \"video_streams\": [\n    {\n      \"type\": \"video\",\n      \"codec\": \"h264\",\n      \"bps\": 16910024,\n      \"fps\": 24,\n      \"language\": \"eng\"\n    },\n    {\n      \"type\": \"audio\",\n      \"codec\": \"eac3\",\n      \"bps\": 768000,\n      \"frequency\": 48000,\n      \"layout\": \"5.1(side)\",\n      \"language\": \"eng\"\n    },\n    {\n      \"type\": \"subtitle\",\n      \"codec\": \"subrip\",\n      \"language\": \"eng\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Max Source Resolution Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to override the maximum allowed source image resolution limit (`IMGPROXY_MAX_SRC_RESOLUTION`). The `%resolution` parameter sets the new limit for this request. Usage requires the server configuration `IMGPROXY_ALLOW_SECURITY_OPTIONS` to be set to `true`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_26\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_resolution:%resolution\nmsr:%resolution\n```\n\n----------------------------------------\n\nTITLE: Defining Presets with Chained Pipelines\nDESCRIPTION: Shows how to define a preset that includes chained pipelines. This preset combines multiple image sizing operations across three sequential pipelines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/chained_pipelines.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\ntest=width:300/height:300/-/width:200/height:200/-/width:100/height:200\n```\n\n----------------------------------------\n\nTITLE: Enabling JPEG Scan Optimization (Pro)\nDESCRIPTION: ((pro)) When set to 'true', splits the spectrum of DCT coefficients into separate scans during progressive JPEG encoding. This can reduce file size but increases compression time. Requires IMGPROXY_JPEG_PROGRESSIVE to be 'true'. The default value is 'false'. Requires imgproxy Pro.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_29\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_JPEG_OPTIMIZE_SCANS\n```\n\n----------------------------------------\n\nTITLE: JPEG Compression Options\nDESCRIPTION: Configures advanced JPEG compression parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_52\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\njpeg_options:%progressive:%no_subsample:%trellis_quant:%overshoot_deringing:%optimize_scans:%quant_table\njpgo:%progressive:%no_subsample:%trellis_quant:%overshoot_deringing:%optimize_scans:%quant_table\n```\n\n----------------------------------------\n\nTITLE: Limiting Max Source File Size in imgproxy URL\nDESCRIPTION: Shows how to set a maximum source file size in the imgproxy URL. This option allows overriding the IMGPROXY_MAX_SRC_FILE_SIZE configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_75\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_file_size:%size\nmsfs:%size\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Image Quality\nDESCRIPTION: Sets the default quality percentage for the resulting image when no format-specific quality is defined or applicable. The default value is 80.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_23\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_QUALITY\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate-based Authentication\nDESCRIPTION: Environment variables needed for certificate-based authentication with Azure Blob Storage, including optional certificate chain and password configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_CLIENT_ID=your_client_id\nAZURE_TENANT_ID=your_tenant_id\nAZURE_CLIENT_CERTIFICATE_PATH=path_to_certificate\nAZURE_CLIENT_CERTIFICATE_PASSWORD=certificate_password\nAZURE_CLIENT_CERTIFICATE_CHAIN=certificate_chain\n```\n\n----------------------------------------\n\nTITLE: Enforcing WebP Usage in imgproxy\nDESCRIPTION: Enables WebP support detection and enforces WebP usage when supported by the browser.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENFORCE_WEBP=true\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Probe Size in imgproxy Pro\nDESCRIPTION: Specifies the maximum amount of bytes used to determine the video format. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_62\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_VIDEO_THUMBNAIL_PROBE_SIZE=5000000\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variables for configuring imgproxy's best format selection behavior, including complexity threshold, resolution limits, and default settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/best_format.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION\nIMGPROXY_BEST_FORMAT_BY_DEFAULT\nIMGPROXY_BEST_FORMAT_ALLOW_SKIPS\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Second in ImgProxy URLs\nDESCRIPTION: Allows redefining the IMGPROXY_VIDEO_THUMBNAIL_SECOND configuration to specify which second of video to use for thumbnails.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_61\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_second:%second\nvts:%second\n```\n\n----------------------------------------\n\nTITLE: Object-Oriented Cropping in imgproxy\nDESCRIPTION: Demonstrates how to crop images while keeping specific object classes (like faces) in frame using imgproxy's object detection feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../crop:256:256/g:obj:face/...\n```\n\n----------------------------------------\n\nTITLE: Calculating Image Hashsums with imgproxy\nDESCRIPTION: Calculates and returns hashsums of the source image. Supports multiple hashsum types (md5, sha1, sha256, sha512) that can be specified in a list. Video file hashsums are not supported.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncalc_hashsums:%hashsum_type1:%hashsum_type2:...:%hashsum_typeN\nchs:%hashsum_type1:%hashsum_type2:...:%hashsum_typeN\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hashsums\": {\n    \"md5\": \"cc507f81206a4c7d0a995a07c3d9f43a\",\n    \"sha256\": \"621f6c6d68de754c6cdf3d286b7837634ce9f273f30f377b3e0df0568a23cee0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TCMalloc with imgproxy via LD_PRELOAD in Bash (Debian)\nDESCRIPTION: This snippet shows how to install the TCMalloc library (minimal version) on a Debian-based system using apt-get and then execute imgproxy with TCMalloc preloaded via the `LD_PRELOAD` environment variable. This directs imgproxy to use Google's TCMalloc for memory management, potentially offering speed benefits in multi-threaded contexts. The library path might differ on other systems.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Redirects in imgproxy\nDESCRIPTION: Sets the maximum number of redirects imgproxy will follow when requesting source images. Set to 0 to disallow redirects entirely.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_REDIRECTS=10\n```\n\n----------------------------------------\n\nTITLE: Available Prometheus Metrics in imgproxy\nDESCRIPTION: List of metrics that imgproxy collects and exposes to Prometheus, including request counters, latency histograms, and resource usage statistics.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/monitoring/prometheus.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrequests_total\nstatus_codes_total\nerrors_total\nrequest_duration_seconds\nrequest_span_duration_seconds\nrequests_in_progress\nimages_in_progress\nbuffer_size_bytes\nbuffer_default_size_bytes\nbuffer_max_size_bytes\nvips_memory_bytes\nvips_max_memory_bytes\nvips_allocs\n```\n\n----------------------------------------\n\nTITLE: Applying Multiple Watermarks with Chained Pipelines\nDESCRIPTION: Shows how to use chained pipelines to apply multiple watermarks to the same image. The first pipeline resizes and applies the first watermark, while the second pipeline applies a second watermark.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Disabling Autoquality via imgproxy URL Option\nDESCRIPTION: Demonstrates disabling autoquality for a single image by specifying the autoquality:none processing parameter directly in the imgproxy URL. No dependencies are required except imgproxy and a correctly constructed URL. This instructs imgproxy to bypass autoquality logic for the targeted request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Azure Blob Storage Connection\nDESCRIPTION: Required environment variables for configuring imgproxy with Azure Blob Storage. Includes basic connection settings and URL format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_USE_ABS=true\nIMGPROXY_ABS_NAME=your_azure_account_name\nIMGPROXY_ABS_ENDPOINT=(optional)azure_endpoint\nSource URL format: abs://%bucket_name/%file_key\n```\n\n----------------------------------------\n\nTITLE: Fast Trim Implementation Using Chained Pipelines\nDESCRIPTION: Demonstrates a performance optimization technique for the trim operation by using chained pipelines. The first pipeline resizes the image, and the second pipeline performs the trim operation on the already-loaded, smaller image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Deprecated OpenTelemetry Environment Variables in imgproxy\nDESCRIPTION: List of deprecated environment variables for OpenTelemetry configuration in imgproxy with their recommended replacements. These variables will be removed in future versions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Deprecated variables - do not use\nIMGPROXY_OPEN_TELEMETRY_ENDPOINT=localhost:4317\nIMGPROXY_OPEN_TELEMETRY_PROTOCOL=grpc\nIMGPROXY_OPEN_TELEMETRY_GRPC_INSECURE=true\nIMGPROXY_OPEN_TELEMETRY_SERVICE_NAME=imgproxy\nIMGPROXY_OPEN_TELEMETRY_PROPAGATORS=tracecontext,baggage\nIMGPROXY_OPEN_TELEMETRY_CONNECTION_TIMEOUT=5\n```\n\n----------------------------------------\n\nTITLE: Verifying Image Hashsum in imgproxy URL\nDESCRIPTION: Illustrates how to include a hashsum check in the imgproxy URL. This option allows verifying the integrity of the source image before processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_73\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nhashsum:%hashsum_type:%hashsum\nhs:%hashsum_type:%hashsum\n```\n\n----------------------------------------\n\nTITLE: Configuring None Autoquality Method in imgproxy\nDESCRIPTION: Configuration example for disabling autoquality functionality in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Watermark Path in imgproxy\nDESCRIPTION: Specifies the path to the locally stored watermark image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_65\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_WATERMARK_PATH=\"/path/to/watermark.png\"\n```\n\n----------------------------------------\n\nTITLE: IPTC option for image info retrieval\nDESCRIPTION: URL option to request the IPTC metadata and Photoshop resolution data of an image, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_11\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\niptc:%iptc\n```\n\n----------------------------------------\n\nTITLE: Allowing Processing Skips for Best Format (imgproxy Configuration)\nDESCRIPTION: If this configuration variable is set to 'true' and the 'best' format is requested, imgproxy will skip processing for SVG images and any formats specified in the 'IMGPROXY_SKIP_PROCESSING_FORMATS' list, delivering the original image data instead.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/best_format.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_BEST_FORMAT_ALLOW_SKIPS\n```\n\n----------------------------------------\n\nTITLE: IPTC option response example\nDESCRIPTION: Sample JSON response showing IPTC metadata and Photoshop resolution data from an image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iptc\": {\n    \"Name\": \"Spider-Man\",\n    \"Caption\": \"Spider-Man swings on the web\",\n    \"Copyright Notice\": \"Daily Bugle\",\n    \"Keywords\": [\"spider-man\", \"menance\", \"offender\"]\n  },\n  \"photoshop\": {\n    \"resolution\": {\n      \"XResolution\": 240,\n      \"XResolutionUnit\": \"inches\",\n      \"WidthUnit\": \"inches\",\n      \"YResolution\": 240,\n      \"YResolutionUnit\": \"inches\",\n      \"HeightUnit\": \"inches\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Encrypted Source URL in imgproxy\nDESCRIPTION: Illustrates providing a source image URL encrypted using the AES-CBC algorithm, prefixed by `/enc/`. The encrypted string follows processing options. Like Base64, it can be split using slashes (`/`) if necessary. Requires proper key/IV setup on the server.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_30\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\n----------------------------------------\n\nTITLE: Width Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet illustrates how to define the target width for the output image in imgproxy, using either 'width' or its abbreviation 'w'. Setting the value to 0 allows imgproxy to compute width based on height and aspect ratio, with specific behavior when used with certain resizing types (e.g., 'force'). This controls one dimension of resizing during image processing. Input is an integer width value.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwidth:%width\nw:%width\n```\n\n----------------------------------------\n\nTITLE: Configuring Dominant Colors Extraction - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: These code snippets define URL options for instructing imgproxy to calculate and return an image's dominant color palette. The configuration accepts either the long form (dominant_colors) or short alias (dc) and can optionally direct imgproxy to synthesize missing colors. Dependencies: imgproxy server, full image download. Key parameters include the flag for dominant_colors and build_missed setting. Inputs: URL path segments; Outputs: dominant_colors result in the response JSON.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndominant_colors:%dominant_colors:%build_missed\ndc:%dominant_colors:%build_missed\n```\n\n----------------------------------------\n\nTITLE: Configuring Dominant Colors Extraction - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Declares URL parameters to instruct imgproxy to extract dominant color values from an image, including support for building colors not found in the source. The parameters are: `dominant_colors` (enable detection), `build_missed` (optionally interpolate missing types). Used for advanced color analysis. Output is a JSON object of named color types.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_36\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndominant_colors:%dominant_colors:%build_missed\\ndc:%dominant_colors:%build_missed\n```\n\n----------------------------------------\n\nTITLE: Configuring Source URL Encryption Key\nDESCRIPTION: Defines a hex-encoded AES-CBC key used to encrypt source URLs, preventing them from being exposed directly in imgproxy URLs. If left blank (default), source URL encryption is disabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_9\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables for imgproxy\nDESCRIPTION: Demonstrates how to configure AWS credentials using environment variables for both direct imgproxy execution and Docker container deployment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Heroku manually\nDESCRIPTION: Clone the imgproxy repository, create a Heroku application, set the stack to container, and deploy the application. This method allows for manual deployment to Heroku.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Enabling Watermark URL Preprocessing in imgproxy Pro\nDESCRIPTION: Enables preprocessing of watermark URLs. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_67\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_WATERMARK_PREPROCESS_URL=true\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOX Model to ONNX using Bash\nDESCRIPTION: Provides a bash command using a Python script (`tools/export_onnx.py`) to convert a YOLOX model checkpoint (`.pth`) into the ONNX format (`.onnx`). Requires specifying the experiment file, checkpoint path, output name, and enabling decoding during inference.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npython tools/export_onnx.py \\\n  -f /path/to/experiment.py \\\n  -c /path/to/checkpoint.pth \\\n  --output-name /path/to/output.onnx \\\n  --decode_in_inference\n```\n```\n\n----------------------------------------\n\nTITLE: Enforcing Thumbnail Usage in Imgproxy\nDESCRIPTION: Forces the use of embedded thumbnails (for HEIC and AVIF) instead of the main image when enabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_49\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nenforce_thumbnail:%enforce_thumbnail\neth:%enforce_thumbnail\n```\n\n----------------------------------------\n\nTITLE: URL Format for Local Image Processing with imgproxy\nDESCRIPTION: Example of a complete imgproxy URL that resizes a local image to fit within 300x200 dimensions, with no enlargement, and converts it to JPG format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Defining Dominant Colors Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to calculate and return the dominant colors (vibrant, muted, etc.) of the source image. Setting `dominant_colors` to `1`, `t`, or `true` enables calculation. The optional `build_missed` flag (if `1`, `t`, or `true`) instructs imgproxy to derive missing color types from found ones. This is a potentially slow operation requiring full image download and processing. Default is `false:false`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_16\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndominant_colors:%dominant_colors:%build_missed\ndc:%dominant_colors:%build_missed\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Reporting for imgproxy\nDESCRIPTION: Environment variables to configure error reporting in imgproxy. Includes settings for Bugsnag, Honeybadger, Sentry, and Airbrake integrations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_REPORT_DOWNLOADING_ERRORS`]: when `true`, imgproxy will report downloading errors. Default: `true`\n\n### Bugsnag\n\n* [`IMGPROXY_BUGSNAG_KEY`]: Bugsnag API key. When provided, enables error reporting to Bugsnag.\n* [`IMGPROXY_BUGSNAG_STAGE`]: the Bugsnag stage to report to. Default: `production`\n\n### Honeybadger\n\n* [`IMGPROXY_HONEYBADGER_KEY`]: the Honeybadger API key. When provided, enables error reporting to Honeybadger.\n* [`IMGPROXY_HONEYBADGER_ENV`]: the Honeybadger env to report to. Default: `production`\n\n### Sentry\n\n* [`IMGPROXY_SENTRY_DSN`]: Sentry project DSN. When provided, enables error reporting to Sentry.\n* [`IMGPROXY_SENTRY_ENVIRONMENT`]: the Sentry environment to report to. Default: `production`\n* [`IMGPROXY_SENTRY_RELEASE`]: the Sentry release to report to. Default: `imgproxy@{imgproxy version}`\n\n### Airbrake\n\n* [`IMGPROXY_AIRBRAKE_PROJECT_ID`]: an Airbrake project id\n* [`IMGPROXY_AIRBRAKE_PROJECT_KEY`]: an Airbrake project key\n* [`IMGPROXY_AIRBRAKE_ENVIRONMENT`]: the Airbrake environment to report to. Default: `production`\n```\n\n----------------------------------------\n\nTITLE: Selecting Page/Frame with imgproxy URL Option\nDESCRIPTION: Defines the imgproxy URL option `page` (or `pg`) to specify which page or frame to use from a source image that supports pagination (like PDF, TIFF) or animation (like GIF, WebP). Page numeration starts from zero. The default value is 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_13\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\npage:%page\npg:%page\n```\n```\n\n----------------------------------------\n\nTITLE: Complete imgproxy URL for Resizing a Local Image\nDESCRIPTION: Demonstrates a full imgproxy URL that resizes a local image to fit within 300x200 dimensions without padding and converts it to JPG format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/image_sources/local_files.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Basic Preset Definition in imgproxy\nDESCRIPTION: Shows the basic syntax for defining a preset in imgproxy. A preset consists of a name followed by processing options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-Based Autoquality via imgproxy URL Option\nDESCRIPTION: Illustrates how to apply size-based autoquality to an individual image using imgproxy's URL processing options. The autoquality:size:10240:10:80 parameter specifies the method (size), target size in bytes, minimum quality, and maximum quality. imgproxy will adjust the output image's quality to fit within the desired file size under these constraints.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Azure Auth via Service Principal Secret\nDESCRIPTION: Specifies the environment variables required for authenticating imgproxy with Azure Blob Storage using a Service Principal and a client secret. Requires `AZURE_CLIENT_ID`, `AZURE_TENANT_ID`, and `AZURE_CLIENT_SECRET` to be set with appropriate values from the application registration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nAZURE_CLIENT_ID: the client ID for your application registration\nAZURE_TENANT_ID: the tenant ID for your application registration\nAZURE_CLIENT_SECRET: the client secret for your application registration\n```\n\n----------------------------------------\n\nTITLE: Setting Prometheus Binding Environment Variable for imgproxy\nDESCRIPTION: Configure the address and port for the Prometheus server to listen on. This setting is crucial for enabling metrics collection in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/monitoring/prometheus.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_PROMETHEUS_BIND\n```\n\n----------------------------------------\n\nTITLE: Configuring MALLOC_ARENA_MAX in imgproxy\nDESCRIPTION: Sets the MALLOC_ARENA_MAX environment variable to 2 to reduce GLib memory fragmentation by limiting malloc arenas in multi-threaded operations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Rotating Watermark in imgproxy (Pro)\nDESCRIPTION: Rotates the watermark by a specified angle clockwise. Applied after orientation from image metadata.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_42\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_rotate:%angle\nwm_rot:%angle\nwmr:%angle\n```\n\n----------------------------------------\n\nTITLE: Video meta option response example\nDESCRIPTION: Sample JSON response showing video metadata and stream information including video, audio and subtitle tracks with their respective properties.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"video_meta\": {\n    \"com.android.version\": \"9\",\n    \"compatible_brands\": \"isommp42\",\n    \"creation_time\": \"2022-01-12T15:04:10.000000Z\",\n    \"location\": \"+46.4845+030.6848/\",\n    \"location-eng\": \"+46.4845+030.6848/\",\n    \"major_brand\": \"mp42\",\n    \"minor_version\": \"0\"\n  },\n  \"video_streams\": [\n    {\n      \"type\": \"video\",\n      \"codec\": \"h264\",\n      \"duration\": 12.345,\n      \"bps\": 16910024,\n      \"fps\": 24,\n      \"language\": \"eng\"\n    },\n    {\n      \"type\": \"audio\",\n      \"codec\": \"eac3\",\n      \"duration\": 12.345,\n      \"bps\": 768000,\n      \"frequency\": 48000,\n      \"layout\": \"5.1(side)\",\n      \"language\": \"eng\"\n    },\n    {\n      \"type\": \"subtitle\",\n      \"codec\": \"subrip\",\n      \"language\": \"eng\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Amazon CloudWatch Metrics\nDESCRIPTION: Environment variables to enable sending imgproxy metrics to Amazon CloudWatch. Requires specifying a service name dimension value, and optionally the CloudWatch namespace and AWS region.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_27\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_CLOUD_WATCH_SERVICE_NAME\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_CLOUD_WATCH_NAMESPACE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_CLOUD_WATCH_REGION\n```\n\n----------------------------------------\n\nTITLE: Defining Max Source File Size Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to override the maximum allowed source image file size limit (`IMGPROXY_MAX_SRC_FILE_SIZE`). The `%size` parameter sets the new limit for this request. Usage requires the server configuration `IMGPROXY_ALLOW_SECURITY_OPTIONS` to be set to `true`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_27\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_file_size:%size\nmsfs:%size\n```\n\n----------------------------------------\n\nTITLE: Installing libvips Dependencies on Ubuntu\nDESCRIPTION: Commands to install the libvips development package on Ubuntu using apt. libvips is a core dependency for imgproxy for image processing operations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install libvips-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Class Names in imgproxy\nDESCRIPTION: Basic example of class names file configuration showing one class name per line for object detection.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nperson\ndog\ncat\n```\n\n----------------------------------------\n\nTITLE: Minimum Width Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This snippet demonstrates how to specify a minimum width for the resulting image via 'min-width' or 'mw' in the URL path. Used to enforce constraints on minimum sizing, which may interact with the 'width' option. Users should note recommended caution if used in conjunction, as cropping may result. Input is minimum width as an integer; output enforces min width constraint.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmin-width:%width\nmw:%width\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source Image Resolution - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Overrides the server's maximum allowed source image resolution. Both 'max_src_resolution' and 'msr' aliases are valid. Parameter: resolution (WxH). Requires [IMGPROXY_ALLOW_SECURITY_OPTIONS] set to true for usage, as this option may weaken security restrictions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_resolution:%resolution\nmsr:%resolution\n```\n\n----------------------------------------\n\nTITLE: Pages number option for image info retrieval\nDESCRIPTION: URL option to request the number of pages or animation frames in an image, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_25\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npages_number:%pages_number\npn:%pages_number\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source Resolution in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_SRC_RESOLUTION configuration on a per-request basis. Requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be set to true as it modifies a security restriction.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_74\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_resolution:%resolution\nmsr:%resolution\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Options in imgproxy\nDESCRIPTION: Sets options useful for development environments, such as ignoring SSL verification and enabling detailed error messages.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_IGNORE_SSL_VERIFICATION=false\nIMGPROXY_DEVELOPMENT_ERRORS_MODE=false\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with AWS credentials via Environment Variables\nDESCRIPTION: Examples of running imgproxy with AWS credentials using environment variables, both directly and with Docker.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Source URL Allow List Example\nDESCRIPTION: Example of configuring multiple allowed source URL prefixes with wildcards.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://,https://*.example.com/,local://\n```\n\n----------------------------------------\n\nTITLE: Example AES-256-CBC Encryption Key (Hex)\nDESCRIPTION: An example 32-byte hex-encoded key generated randomly. This specific key is used throughout the encryption example to configure imgproxy for AES-256-CBC source URL encryption.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\n```\n\n----------------------------------------\n\nTITLE: Combining Chained Pipelines and Presets in imgproxy URL\nDESCRIPTION: Demonstrates how to use both chained pipelines and presets in a single imgproxy URL. This example shows how pipeline chains from the preset and the URL are merged.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Size Response Format\nDESCRIPTION: Example JSON response showing file size information\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"size\": 123456\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying S3 Object Version in URL\nDESCRIPTION: Shows how to include a version ID when referencing S3 objects in imgproxy. The example demonstrates the basic syntax for including version information in the source URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Applying Presets - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Lists one or more preset names via URL to apply predefined image processing configurations. Supports multiple presets, each referenced by their name. Presets are managed within imgproxy and documented elsewhere. No dependencies beyond defining presets, no output other than processing effect.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_47\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npreset:%preset_name1:%preset_name2:...:%preset_nameN\\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Check Byte Limit\nDESCRIPTION: Determines the maximum number of bytes imgproxy reads from the beginning of a file to determine if it's an SVG image. If imgproxy fails to recognize a valid SVG, increasing this value might help. The default value is 32768 (32KB).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_MAX_SVG_CHECK_BYTES\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy info endpoint URL templates\nDESCRIPTION: URL templates for accessing the /info endpoint with different source URL encoding methods including plain, base64 encoded, and AES-CBC encrypted URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/getting_info.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/info/%signature/plain/%source_url\nhttp://imgproxy.example.com/info/%signature/%encoded_source_url\nhttp://imgproxy.example.com/info/%signature/enc/%encrypted_source_url\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy with Presets Using Command Line\nDESCRIPTION: Command line argument to specify preset definitions file paths for imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -presets /path/to/file/with/presets -info-presets /path/to/file/with/info-presets\n```\n\n----------------------------------------\n\nTITLE: Defining Basic imgproxy Preset\nDESCRIPTION: Demonstrates the basic syntax for defining a preset in imgproxy. Shows how to name a preset and associate it with processing options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-Based Autoquality via imgproxy URL Option\nDESCRIPTION: Demonstrates setting up ML-driven autoquality for a specific image via imgproxy URL options. The parameters direct imgproxy to use the ML method with a DSSIM target, quality bounds, and allowed error. Relies on pre-configured neural networks; if absent, the system defaults to DSSIM-based methods.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/autoquality.mdx#2025-04-23_snippet_7\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Kubernetes using Helm\nDESCRIPTION: Instructions for adding the imgproxy Helm repository and deploying imgproxy to a Kubernetes cluster using either Helm 2 or Helm 3.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm repo add imgproxy https://helm.imgproxy.net/\n\n# With Helm 3\nhelm upgrade -i imgproxy imgproxy/imgproxy\n\n# With Helm 2\nhelm upgrade -i --name imgproxy imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Example of AWS credentials file content for shared credentials setup in the .aws/credentials file.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Example configuration for AWS credentials file stored in .aws/credentials in the home directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Using Plain Source URLs in imgproxy\nDESCRIPTION: Provides the source URL directly in the imgproxy URL, prepended with /plain/. URLs containing query strings or @ symbols need to be escaped.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_28\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Size option for image info retrieval\nDESCRIPTION: URL option to request the size of the image file, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsize:%size\ns:%size\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Syslog Integration\nDESCRIPTION: Environment variables to enable and configure sending imgproxy logs to a syslog server. Allows enabling the feature, setting the maximum log level, specifying network connection details (protocol, address), and setting a syslog tag. Logs sent to syslog always use the `structured` format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_34\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SYSLOG_ENABLE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SYSLOG_LEVEL\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SYSLOG_NETWORK\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SYSLOG_ADDRESS\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_SYSLOG_TAG\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for OpenTelemetry in imgproxy\nDESCRIPTION: Environment variables for configuring TLS certificates when connecting to a secured OpenTelemetry collector. Includes settings for server certificates and client-side certificates for mTLS authentication.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_SERVER_CERT=\"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\nIMGPROXY_OPEN_TELEMETRY_CLIENT_CERT=\"-----BEGIN CERTIFICATE-----\\n...\\n-----END CERTIFICATE-----\"\nIMGPROXY_OPEN_TELEMETRY_CLIENT_KEY=\"-----BEGIN PRIVATE KEY-----\\n...\\n-----END PRIVATE KEY-----\"\n```\n\n----------------------------------------\n\nTITLE: Example URL-Safe Base64 Encoded Encrypted URL\nDESCRIPTION: The final URL-safe Base64 encoded string generated from the combined IV and encrypted data bytes. This string is used as the path component for the encrypted source URL in imgproxy requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\np5VjorNdhs7mRRw8gA9TWoRlGci3l1kuzqN43UQlRaRIQ0qtBKW3qFABIsx-ZRz_cVc8iVTYbhsNsxNBL1BHaQ\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Ubuntu\nDESCRIPTION: Commands for installing libvips dependency on Ubuntu using PPA.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:dhor/myway\nsudo apt-get update\nsudo apt-get install libvips-dev\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Object Detection\nDESCRIPTION: Illustrates the JSON structure for object detection results returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"objects\": [\n    {\n      \"class_id\": 0,\n      \"class_name\": \"face\",\n      \"confidence\": 0.985792,\n      \"left\": 0.6602726057171822,\n      \"top\": 0.23434072732925415,\n      \"width\": 0.11385439336299896,\n      \"height\": 0.18671900033950806\n    },\n    {\n      \"class_id\": 0,\n      \"class_name\": \"face\",\n      \"confidence\": 0.9810329,\n      \"left\": 0.4354642778635025,\n      \"top\": 0.3503067269921303,\n      \"width\": 0.10691609978675842,\n      \"height\": 0.18357203900814056\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enlarge Option in imgproxy\nDESCRIPTION: When enabled, allows imgproxy to enlarge images smaller than the requested dimensions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_12\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nenlarge:%enlarge\nel:%enlarge\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Hashsum Calculation - JSON - json\nDESCRIPTION: Provides a sample JSON response from imgproxy listing computed hashsums for the requested types. Outputs: hashsums object mapping the requested algorithms to hash strings. Inputs: one or more hashsum type requests. Supports md5, sha256, etc. Actual hash values depend on image content.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hashsums\": {\n    \"md5\": \"cc507f81206a4c7d0a995a07c3d9f43a\",\n    \"sha256\": \"621f6c6d68de754c6cdf3d286b7837634ce9f273f30f377b3e0df0568a23cee0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Source Resolution - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Allows per-request override of the IMGPROXY_MAX_SRC_RESOLUTION limit through the `%resolution` parameter. Used for cases where a higher or lower security threshold is needed. Not permitted unless security settings allow such overrides. Input is the resolution value; output is adjustment of source image acceptance.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_49\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_resolution:%resolution\\nmsr:%resolution\n```\n\n----------------------------------------\n\nTITLE: Preserving Copyright Info During Metadata Stripping in imgproxy (Environment Variable)\nDESCRIPTION: When `IMGPROXY_STRIP_METADATA` is `true`, setting `IMGPROXY_KEEP_COPYRIGHT` to `true` prevents the removal of copyright information from the metadata. Default is `true`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_KEEP_COPYRIGHT`\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Datadog Integration\nDESCRIPTION: List of environment variables used to configure the Datadog tracer integration with imgproxy. These variables control connection settings, trace behavior, metrics collection, and logging options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/monitoring/datadog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\nDD_AGENT_HOST=localhost\nDD_TRACE_AGENT_PORT=8126\nDD_DOGSTATSD_PORT=8125\nDD_SERVICE=imgproxy\nDD_ENV=\nDD_TRACE_SOURCE_HOSTNAME=\nDD_TRACE_REPORT_HOSTNAME=false\nDD_TAGS=datacenter:njc,key2:value2\nDD_TRACE_ANALYTICS_ENABLED=false\nDD_RUNTIME_METRICS_ENABLED=false\nDD_TRACE_STARTUP_LOGS=true\nDD_TRACE_DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Compression Quality Settings\nDESCRIPTION: Configuration variables for controlling image compression quality and format-specific compression settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\nIMGPROXY_QUALITY=80\nIMGPROXY_FORMAT_QUALITY=\"avif=65\"\nIMGPROXY_JPEG_PROGRESSIVE=false\nIMGPROXY_PNG_INTERLACED=false\nIMGPROXY_PNG_QUANTIZE=false\nIMGPROXY_PNG_QUANTIZATION_COLORS=256\nIMGPROXY_AVIF_SPEED=9\n```\n\n----------------------------------------\n\nTITLE: Setting Additional Health Check Path in imgproxy (Environment Variable)\nDESCRIPTION: Specifies an additional URL path for the health check endpoint, supplementing the default endpoint. Default is blank (no additional path configured).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_HEALTH_CHECK_PATH`\n```\n\n----------------------------------------\n\nTITLE: Defining Basic imgproxy Preset\nDESCRIPTION: Shows the basic syntax for defining a named preset in imgproxy configuration. The format follows %preset_name=%options pattern.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/presets.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\n%preset_name=%options\n```\n\n----------------------------------------\n\nTITLE: IPTC Response Example\nDESCRIPTION: Example JSON response showing IPTC and Photoshop metadata\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iptc\": {\n    \"Name\": \"Spider-Man\",\n    \"Caption\": \"Spider-Man swings on the web\",\n    \"Copyright Notice\": \"Daily Bugle\",\n    \"Keywords\": [\"spider-man\", \"menance\", \"offender\"]\n  },\n  \"photoshop\": {\n    \"resolution\": {\n      \"XResolution\": 240,\n      \"XResolutionUnit\": \"inches\",\n      \"WidthUnit\": \"inches\",\n      \"YResolution\": 240,\n      \"YResolutionUnit\": \"inches\",\n      \"HeightUnit\": \"inches\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Watermarks Cache Size in imgproxy Pro\nDESCRIPTION: Sets the custom watermarks cache size. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_69\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_WATERMARKS_CACHE_SIZE=256\n```\n\n----------------------------------------\n\nTITLE: Crop coordinates option for image info retrieval\nDESCRIPTION: URL option to request the relative crop coordinates based on specified width, height, and gravity parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_29\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncrop:%width:%height:%gravity\nc:%width:%height:%gravity\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Source File Size in imgproxy\nDESCRIPTION: Sets the maximum allowed file size for source images in bytes. Images larger than this will be rejected. A value of 0 disables the check.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_SRC_FILE_SIZE=0\n```\n\n----------------------------------------\n\nTITLE: Gravity Option in imgproxy\nDESCRIPTION: Controls how imgproxy positions images when cropping is needed, with various positioning options and support for offsets.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_15\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ngravity:%type:%x_offset:%y_offset\ng:%type:%x_offset:%y_offset\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLO-NAS Model to ONNX using Python\nDESCRIPTION: Python script demonstrating how to export a YOLO-NAS model from the SuperGradients library to ONNX format. It loads a pretrained model (or from a checkpoint), prepares it for conversion, and exports it without preprocessing or postprocessing steps, using FP16 quantization.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom super_gradients.training import models\nfrom super_gradients.common.object_names import Models\nfrom super_gradients.conversion import DetectionOutputFormatMode\nfrom super_gradients.conversion.conversion_enums import ExportQuantizationMode\n\n# Load the model from the SuperGradients model zoo\nmodel = models.get(\n  Models.YOLO_NAS_S,\n  pretrained_weights=\"coco\"\n)\n# Or load the model from a checkpoint\nmodel = models.get(\n  Models.YOLO_NAS_S,\n  num_classes=80,\n  checkpoint_path=f\"neural-yolo_nas_s.pth\"\n)\n\nmodel.eval()\nmodel.prep_model_for_conversion(input_size=[1, 3, 640, 640])\n\n# Disable preprocessing and postprocessing since imgproxy will handle it\nmodel.export(\n  \"/content/yolo_nas_s.onnx\",\n  preprocessing=False,\n  postprocessing=False,\n  output_predictions_format=DetectionOutputFormatMode.FLAT_FORMAT,\n  input_image_shape=[640, 640],\n  quantization_mode=ExportQuantizationMode.FP16,\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Example URL-Safe Base64 Encoded Result\nDESCRIPTION: The final URL-safe Base64 encoded string representing the combined IV and encrypted source URL. This string is used in the imgproxy URL path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\np5VjorNdhs7mRRw8gA9TWoRlGci3l1kuzqN43UQlRaRIQ0qtBKW3qFABIsx-ZRz_cVc8iVTYbhsNsxNBL1BHaQ\n```\n\n----------------------------------------\n\nTITLE: Fetching Object Detection Info in imgproxy\nDESCRIPTION: Demonstrates how to retrieve information about detected objects using the /info endpoint.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy DEB Package on Debian/Ubuntu\nDESCRIPTION: Command to install an exported DEB package on a Debian or Ubuntu system. Also includes a command to fix dependency issues by installing missing dependencies automatically.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg -i imgproxy-3.25.0.arm64.deb\n```\n\n----------------------------------------\n\nTITLE: Setting Argument Separator in imgproxy (Environment Variable)\nDESCRIPTION: Defines the string used as a separator for processing or info options arguments in imgproxy. The default value is ':'. This variable allows customization of how multiple arguments are delimited.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_ARGUMENTS_SEPARATOR`\n```\n\n----------------------------------------\n\nTITLE: Image Format Info Response\nDESCRIPTION: Example JSON response when requesting image format information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: DPI Configuration\nDESCRIPTION: Sets or resets image DPI metadata value.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_45\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndpi:%dpi\n```\n\n----------------------------------------\n\nTITLE: Setting DPI Value After Metadata Stripping in imgproxy (Pro Feature, Environment Variable)\nDESCRIPTION: (Pro Feature) Specifies the DPI value (as a float) to be set for the image when its metadata is stripped via `IMGPROXY_STRIP_METADATA`. The default value is `72.0`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_STRIP_METADATA_DPI`\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Labels Environment Variable\nDESCRIPTION: Example showing the format for setting New Relic labels through the IMGPROXY_NEW_RELIC_LABELS environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/monitoring/new_relic.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlabel1=value1;label2=value2\n```\n\n----------------------------------------\n\nTITLE: Example imgproxy URL for local image resizing\nDESCRIPTION: A URL example showing how to resize a local image to fit 300x200 dimensions using imgproxy's URL structure.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: PNG Compression Options\nDESCRIPTION: Sets advanced PNG compression and optimization parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_53\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npng_options:%interlaced:%quantize:%quantization_colors\npngo:%interlaced:%quantize:%quantization_colors\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server\nDESCRIPTION: Command to start a local development server that provides live reload functionality for development purposes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm run start\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with MALLOC_ARENA_MAX in Bash\nDESCRIPTION: This command sets the MALLOC_ARENA_MAX environment variable to 2 before running imgproxy. This reduces GLib memory fragmentation by limiting the number of malloc arenas it can create.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Formatting Swift Object URLs for imgproxy\nDESCRIPTION: Convert OpenStack Object Storage URLs to the format required by imgproxy. This example shows how to transform a standard Swift URL to the imgproxy-compatible format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Original Swift URL\nhttp://127.0.0.1:8080/v1/AUTH_test/images/flowers/rose.jpg\n\n# Converted URL for imgproxy\nswift://images/flowers/rose.jpg\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Average Color\nDESCRIPTION: Shows the JSON structure for image average color information returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"average\": { \"R\": 139, \"G\": 132, \"B\": 121, \"A\": 255 }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source Image Resolution in imgproxy\nDESCRIPTION: Configures the maximum allowed resolution for source images in megapixels. Images exceeding this limit will be rejected.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_SRC_RESOLUTION=16.8\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Animation Frame Resolution in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION configuration on a per-request basis. Requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be set to true as it modifies a security restriction.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_77\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_animation_frame_resolution:%size\nmafr:%size\n```\n\n----------------------------------------\n\nTITLE: Advanced WebP Compression Settings in imgproxy - plaintext\nDESCRIPTION: Covers environment variables for fine-tuning WebP compression in imgproxy, including selecting compression type (lossy, near_lossless, or lossless) and enabling smart subsampling for higher quality at the expense of size. These features are available in the commercial (pro) version. Only supported values are recognized for IMGPROXY_WEBP_COMPRESSION, and smart subsampling is a boolean flag. No additional dependencies required beyond the pro binary of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_WEBP_COMPRESSION=lossy\nIMGPROXY_WEBP_SMART_SUBSAMPLE=false\n```\n\n----------------------------------------\n\nTITLE: Generating Base64-encoded watermark data in Bash\nDESCRIPTION: This snippet demonstrates how to generate Base64-encoded image data for use with the IMGPROXY_WATERMARK_DATA environment variable. It reads a WebP file and removes newlines from the output.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/watermark.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/watermark.webp | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Presets-Only Mode URL Format\nDESCRIPTION: Example of URL structure when imgproxy is in presets-only mode, showing how to chain multiple presets.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Example IV + Encrypted Data - Hex Byte Representation\nDESCRIPTION: The result of prepending the 16-byte IV to the encrypted data (ciphertext). This combined byte sequence is then encoded using URL-safe Base64. Shown as a sequence of hex byte values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\\A7\\95\\63\\A2\\B3\\5D\\86\\CE\\E6\\45\\1C\\3C\\80\\0F\\53\\5A\\84\\65\\19\\C8\\B7\\97\\59\\2E\\CE\\A3\\78\\DD\\44\\25\\45\\A4\\48\\43\\4A\\AD\\04\\A5\\B7\\A8\\50\\01\\22\\CC\\7E\\65\\1C\\FF\\71\\57\\3C\\89\\54\\D8\\6E\\1B\\0D\\B3\\13\\41\\2F\\50\\47\\69\n```\n\n----------------------------------------\n\nTITLE: Formatting Google Cloud Storage URLs with Generation Parameter in imgproxy\nDESCRIPTION: This snippet demonstrates how to format a Google Cloud Storage URL with a generation parameter when using it as a source image in imgproxy. The generation parameter can be specified in the query string of the source URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Colorspace\nDESCRIPTION: Shows the JSON structure for image colorspace information returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colorspace\": \"srgb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Processing in imgproxy\nDESCRIPTION: Environment variable to configure the maximum number of bytes imgproxy will read to recognize SVG files. Useful when dealing with larger SVG files that aren't being recognized properly.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_formats_support.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nIMGPROXY_MAX_SVG_CHECK_BYTES=32768\n```\n\n----------------------------------------\n\nTITLE: Bands option for image info retrieval\nDESCRIPTION: URL option to request the number of bands in an image, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbands:%bands\nb:%bands\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Quality in imgproxy Autoquality\nDESCRIPTION: Sets the maximum quality imgproxy can use for autoquality. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_MAX=80\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Security Options in imgproxy\nDESCRIPTION: Sets options for allowing connections to various types of IP addresses when requesting source images.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ALLOW_LOOPBACK_SOURCE_ADDRESSES=false\nIMGPROXY_ALLOW_LINK_LOCAL_SOURCE_ADDRESSES=false\nIMGPROXY_ALLOW_PRIVATE_SOURCE_ADDRESSES=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Animation Frame Resolution in imgproxy\nDESCRIPTION: Sets the maximum resolution for individual frames of animated images in megapixels. When set to 0, the entire animated image is checked against IMGPROXY_MAX_SRC_RESOLUTION.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_ANIMATION_FRAME_RESOLUTION=0\n```\n\n----------------------------------------\n\nTITLE: Example Encryption Key for imgproxy\nDESCRIPTION: This is an example of a 32-byte hex-encoded key used for AES-256-CBC encryption in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\n```\n\n----------------------------------------\n\nTITLE: Improving Trim Performance via Pipeline Chaining - imgproxy_url\nDESCRIPTION: Illustrates how to improve performance of the 'trim' operation by deferring it to a separated pipeline after resizing. This arrangement reduces memory usage and speeds up trimming, at the cost of accuracy. Relies on imgproxy Pro and expects resize and trim options in the path. Input is a path specifying the sequence of operations; output is the processed image with faster trimming.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy TAR package\nDESCRIPTION: Command for extracting a TAR package to a specified directory on the system.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntar -xzf imgproxy-3.25.0.arm64.tar.gz -C /opt\n```\n\n----------------------------------------\n\nTITLE: Enabling Linear Colorspace Processing in imgproxy (Environment Variable)\nDESCRIPTION: When set to `true`, forces imgproxy to process images in a linear colorspace, which can improve color accuracy but significantly slows down processing. Full linear processing is incompatible with shrink-on-load optimization. Default is `false`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_USE_LINEAR_COLORSPACE`\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for EXIF Metadata\nDESCRIPTION: Shows the JSON structure for EXIF metadata information returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exif\": {\n    \"Aperture\": \"8.00 EV (f/16.0)\",\n    \"Contrast\": \"Normal\",\n    \"Date and Time\": \"2016:09:11 22:15:03\",\n    \"Model\": \"NIKON D810\",\n    \"Software\": \"Adobe Photoshop Lightroom 6.1 (Windows)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Shared Credentials File for imgproxy\nDESCRIPTION: Shows the format for the .aws/credentials file that can be used to provide AWS credentials to imgproxy. This file-based approach is an alternative to using environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: JPEG image info response format from imgproxy\nDESCRIPTION: Example JSON response from imgproxy's info endpoint for a JPEG image, showing format, dimensions, size, and metadata including EXIF, IPTC, XMP, and Photoshop data.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/getting_info.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"jpeg\",\n  \"width\": 7360,\n  \"height\": 4912,\n  \"size\": 28993664,\n  \"exif\": {\n    \"Aperture\": \"8.00 EV (f/16.0)\",\n    \"Contrast\": \"Normal\",\n    \"Date and Time\": \"2016:09:11 22:15:03\",\n    \"Model\": \"NIKON D810\",\n    \"Software\": \"Adobe Photoshop Lightroom 6.1 (Windows)\"\n  },\n  \"iptc\": {\n    \"Name\": \"Spider-Man\",\n    \"Caption\": \"Spider-Man swings on the web\",\n    \"Copyright Notice\": \"Daily Bugle\",\n    \"Keywords\": [\"spider-man\", \"menance\", \"offender\"]\n  },\n  \"xmp\": {\n    \"aux\": {\n      \"ApproximateFocusDistance\": \"4294967295/1\",\n      \"ImageNumber\": \"16604\",\n      \"Lens\": \"16.0-35.0 mm f/4.0\",\n      \"LensID\": \"163\",\n      \"LensInfo\": \"160/10 350/10 40/10 40/10\",\n      \"SerialNumber\": \"12345678\"\n    },\n    \"dc\": {\n      \"creator\": [\"Peter B. Parker\"],\n      \"publisher\": [\"Daily Bugle\"],\n      \"subject\": [\"spider-man\", \"menance\", \"offender\"],\n      \"format\": \"image/jpeg\"\n    },\n    \"photoshop\": {\n      \"DateCreated\": \"2016-09-11T18:44:50.003\"\n    }\n  },\n  \"photoshop\": {\n    \"resolution\": {\n      \"XResolution\": 240,\n      \"XResolutionUnit\": \"inches\",\n      \"WidthUnit\": \"inches\",\n      \"YResolution\": 240,\n      \"YResolutionUnit\": \"inches\",\n      \"HeightUnit\": \"inches\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Additional Metrics Sent to New Relic Metrics API\nDESCRIPTION: This snippet details additional metrics that imgproxy sends to New Relic using the Metrics API. These metrics provide more detailed information about imgproxy's internal state and performance.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/monitoring/new_relic.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* `imgproxy.requests_in_progress`: the number of requests currently in progress\n* `imgproxy.images_in_progress`: the number of images currently in progress\n* `imgproxy.buffer.size`: a summary of the download buffers sizes (in bytes)\n* `imgproxy.buffer.default_size`: calibrated default buffer size (in bytes)\n* `imgproxy.buffer.max_size`: calibrated maximum buffer size (in bytes)\n* `imgproxy.vips.memory`: libvips memory usage (in bytes)\n* `imgproxy.vips.max_memory`: libvips maximum memory usage (in bytes)\n* `imgproxy.vips.allocs`: the number of active vips allocations\n```\n\n----------------------------------------\n\nTITLE: Width Option in imgproxy\nDESCRIPTION: Sets the width of the resulting image, with special handling when set to 0 based on resizing type.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_6\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwidth:%width\nw:%width\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoquality Method in imgproxy\nDESCRIPTION: Sets the method for calculating image quality. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=none\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy via Homebrew\nDESCRIPTION: Command to install imgproxy using Homebrew package manager on macOS.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Thumbnail Keyframes in imgproxy Pro\nDESCRIPTION: Uses the latest keyframe before the specified second for video thumbnail generation. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_VIDEO_THUMBNAIL_KEYFRAMES=false\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Size\nDESCRIPTION: Shows the JSON structure returned when requesting image file size information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"size\": 123456\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Max Processable Animation Frames\nDESCRIPTION: Defines the maximum number of frames in an animated image (like GIF or WebP) that imgproxy will process. Processing animations is memory-intensive. The default value is 1.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_MAX_ANIMATION_FRAMES\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Metrics for imgproxy\nDESCRIPTION: Environment variables to enable and configure Datadog metrics integration in imgproxy. Includes settings for enabling the feature and additional metrics.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_17\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_DATADOG_ENABLE`]: when `true`, enables sending metrics to Datadog. Default: false\n* [`IMGPROXY_DATADOG_ENABLE_ADDITIONAL_METRICS`]: when `true`, enables sending the additional metrics to Datadog. Default: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Health Check for imgproxy\nDESCRIPTION: Docker Compose configuration that defines a health check using the imgproxy health command. The check runs every 10 seconds with a 10-second timeout and allows 3 retries before marking the service as unhealthy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Fetching Detected Objects Info in imgproxy URL\nDESCRIPTION: Utilize the '/info' endpoint with the 'detect_objects' parameter to retrieve information about detected objects in the image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/object_detection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: Configuring None Autoquality Method in Bash\nDESCRIPTION: Configuration example for disabling autoquality in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query Separator with Google Cloud Storage URLs in imgproxy\nDESCRIPTION: This snippet shows how to format Google Cloud Storage URLs when a custom query separator is configured in imgproxy to handle filenames containing question marks.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngs://%bucket_name/%file_key?generation=%generation\n```\n\n----------------------------------------\n\nTITLE: Salt-Prefixed imgproxy URL Path\nDESCRIPTION: URL path with salt prefix used in signature calculation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/signing_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhello/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Fetching Object Detection Information in imgproxy\nDESCRIPTION: Shows how to retrieve information about detected objects using the /info endpoint.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source File Size - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Overrides the maximum allowed source file size via URL configuration. Both 'max_src_file_size' and short form 'msfs' are included. Parameter: size (bytes). Permission to use this option requires [IMGPROXY_ALLOW_SECURITY_OPTIONS] to be enabled, due to possible security implications.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_file_size:%size\nmsfs:%size\n```\n\n----------------------------------------\n\nTITLE: Configuring Best Format Maximum Resolution in imgproxy\nDESCRIPTION: Sets the maximum resolution for trying all applicable formats in best format selection. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_54\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION=0\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy Source Code\nDESCRIPTION: Commands for obtaining imgproxy source code either by cloning the Git repository or downloading specific versions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: DPR (Device Pixel Ratio) Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This code snippet details the syntax for requesting HiDPI (Retina) output by multiplying output dimensions by a scale factor. The 'dpr' option is specified in the URL and affects all scaling, position, and padding calculations to ensure visual parity across device pixel densities. The dpr value must be greater than 0. Input is a positive float; output is a device-optimized processed image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_12\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndpr:%dpr\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Source URL Encryption Key (Bash)\nDESCRIPTION: This Bash command shows how to start the imgproxy server, setting the `IMGPROXY_SOURCE_URL_ENCRYPTION_KEY` environment variable to the previously defined 32-byte hex-encoded key. This enables source URL encryption.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Resulting Merged Pipeline from URL and Preset (imgproxy URL)\nDESCRIPTION: This snippet illustrates the final, effective pipeline structure after imgproxy merges the operations from the URL and the embedded preset (`test`) shown in the previous examples. It demonstrates how preset pipelines are inserted and merged with the surrounding URL pipeline segments according to specific rules.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy on macOS using Homebrew\nDESCRIPTION: Install imgproxy on macOS using the Homebrew package manager. This is a simple one-line command to install the latest version of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Applying Monochrome Effect in imgproxy URL\nDESCRIPTION: Converts the resulting image to monochrome. Allows setting intensity and base color for the monochrome palette.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_28\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmonochrome:%intensity:%color\nmc:%intensity:%color\n```\n\n----------------------------------------\n\nTITLE: Crop Coordinates Info Response\nDESCRIPTION: Example JSON response when requesting crop coordinates information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crop\": {\n    \"left\": 0.383203125,\n    \"top\": 0.2603861907548274,\n    \"width\": 0.1953125,\n    \"height\": 0.3510825043885313\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting DPI for Images in imgproxy (Pro)\nDESCRIPTION: Replaces the image's DPI metadata with the provided value. Set to 0 to reset to default or not change the DPI.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_47\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndpi:%dpi\n```\n\n----------------------------------------\n\nTITLE: Processing URL for Size-based Autoquality\nDESCRIPTION: URL processing option example for size-based autoquality with specific parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via Environment Variables for imgproxy\nDESCRIPTION: Demonstrates setting AWS access credentials using environment variables for both direct command line execution and Docker containers. This allows imgproxy to access S3 buckets using the specified credentials.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Applying Duotone Effect in imgproxy URL\nDESCRIPTION: Converts the resulting image to duotone. Allows setting intensity and two base colors for the duotone palette.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_29\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nduotone:%intensity:%color1:%color2\ndt:%intensity:%color1:%color2\n```\n\n----------------------------------------\n\nTITLE: Cloning imgproxy Source Code from GitHub\nDESCRIPTION: Clone the imgproxy GitHub repository to get the latest source code for building or development purposes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\n----------------------------------------\n\nTITLE: Local File URL Path Format\nDESCRIPTION: Example of the URL path format for accessing a local file through imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlocal:///logos/imgproxy.png\n```\n\n----------------------------------------\n\nTITLE: Setting Image Quality in Imgproxy\nDESCRIPTION: Defines the quality of the resulting image as a percentage. Uses default quality when set to 0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_50\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nquality:%quality\nq:%quality\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Key/Salt Configuration\nDESCRIPTION: Command to start imgproxy with configured hex-encoded key and salt values for URL signing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/signing_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Enabling WebP Smart Subsampling (Pro)\nDESCRIPTION: ((pro)) When set to 'true', enables smart chroma subsampling for WebP compression. This typically improves quality compared to standard subsampling but increases file size and compression time. The default value is 'false'. Requires imgproxy Pro.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_35\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_WEBP_SMART_SUBSAMPLE\n```\n\n----------------------------------------\n\nTITLE: Using AES-CBC Encrypted Source URL in imgproxy\nDESCRIPTION: Demonstrates how to use an AES-CBC encrypted source URL in an imgproxy request. This format provides additional security for the source URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_80\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog.png\n```\n\n----------------------------------------\n\nTITLE: Setting MALLOC_ARENA_MAX for GLib Memory Management in imgproxy\nDESCRIPTION: Sets the MALLOC_ARENA_MAX environment variable to 2 when running imgproxy. This reduces GLib memory fragmentation by limiting the number of malloc arenas that can be created, preventing the default behavior of creating one arena per thread.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/memory_usage_tweaks.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nMALLOC_ARENA_MAX=2 imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Healthcheck for imgproxy\nDESCRIPTION: This YAML snippet demonstrates how to set up a health check in a Docker Compose configuration for imgproxy. It uses the 'imgproxy health' command to check the application's health status, with specified timeout, interval, and retry settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/healthcheck.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhealthcheck:\n  test: [ \"CMD\", \"imgproxy\", \"health\" ]\n  timeout: \"10s\"\n  interval: \"10s\"\n  retries: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Source Address Restrictions in imgproxy\nDESCRIPTION: Sets restrictions for connecting to various types of IP addresses when requesting source images.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_ALLOW_LOOPBACK_SOURCE_ADDRESSES`]: when `true`, allows connecting to loopback IP addresses (`127.0.0.1`-`127.255.255.255` and IPv6 analogues) when requesting source images. Default: `false`\n* [`IMGPROXY_ALLOW_LINK_LOCAL_SOURCE_ADDRESSES`]:  when `true`, allows connecting to link-local multicast and unicast IP addresses (`224.0.0.1`-`224.0.0.255`, `169.254.0.1`-`169.254.255.255`, and IPv6 analogues) when requesting source images. Default: `false`\n* [`IMGPROXY_ALLOW_PRIVATE_SOURCE_ADDRESSES`]: when `true`, allows connecting to private IP addresses (`10.0.0.0 - 10.255.255.255`, `172.16.0.0 - 172.31.255.255`, `192.168.0.0 - 192.168.255.255`, and IPv6 analogues) when requesting source images. Default: `true`\n```\n\n----------------------------------------\n\nTITLE: Specifying Info Options in imgproxy URL\nDESCRIPTION: Demonstrates the format for specifying info options in the imgproxy URL, including option name and arguments.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy for Local Filesystem Access\nDESCRIPTION: Sets the IMGPROXY_LOCAL_FILESYSTEM_ROOT environment variable to specify the root directory containing images that imgproxy can access and process.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/local_files.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_LOCAL_FILESYSTEM_ROOT=/path/to/project/images imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in Shared Credentials File\nDESCRIPTION: This snippet shows the content of the .aws/credentials file used for storing AWS credentials. It specifies the access key ID and secret access key for the default profile.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Example configuration for the AWS credentials file located at ~/.aws/credentials, showing the format for storing AWS access credentials.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via Environment Variables for imgproxy (bash)\nDESCRIPTION: This snippet demonstrates how to launch imgproxy by specifying AWS credentials (Access Key ID and Secret Access Key) using environment variables, either directly when invoking the binary or via Docker. Dependencies are an existing imgproxy installation and valid AWS credentials. The environment variables AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY are required; expected input is the secret keys, with the output being imgproxy running with access to AWS APIs. All commands must be executed in a shell or Docker environment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Constructing Local File URL Path for imgproxy\nDESCRIPTION: Shows the format for referencing a local file in imgproxy using the local:// protocol prefix followed by the path relative to the configured root directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plain\nCODE:\n```\nlocal:///logos/imgproxy.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Handling in imgproxy\nDESCRIPTION: Sets options for passing cookies in image requests and defining their scope.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_COOKIE_PASSTHROUGH`]: when `true`, incoming cookies will be passed through the image request if they are applicable for the image URL. Default: `false`\n\n* [`IMGPROXY_COOKIE_BASE_URL`]: when set, assume that cookies have the scope of this URL for an incoming request (instead of using request headers). If the cookies are applicable to the image URL too, they will be passed along in the image request.\n```\n\n----------------------------------------\n\nTITLE: Configuring AVIF/WebP Support Detection\nDESCRIPTION: Environment variables for enabling and configuring browser format support detection for AVIF and WebP formats in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENABLE_WEBP_DETECTION=true\nIMGPROXY_ENFORCE_WEBP=true\nIMGPROXY_ENABLE_AVIF_DETECTION=true\nIMGPROXY_ENFORCE_AVIF=true\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv7 Model to ONNX (FP16) using Bash\nDESCRIPTION: Bash command using the YOLOv7 `export.py` script to convert a YOLOv7 model (`.pt`) to ONNX format with FP16 precision. Requires a CUDA-compatible GPU and includes the `--fp16` flag.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export.py \\\n  --weights yolov7-tiny.pt \\\n  --grid \\\n  --simplify \\\n  --img-size 640 640 \\\n  --max-wh 640 \\\n  --fp16\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying AES-CBC Encrypted Source URL in Proxy Request - imgproxy_url - imgproxy_url\nDESCRIPTION: Illustrates using an AES-CBC encrypted image URL for added security in imgproxy requests, with the '/enc/' prefix and split segments. Parameter: encrypted blocks of Base64 data. Inputs: AES-CBC encrypted, URL-safe base64 chunks. Used to protect sensitive URLs and reduce URL analysis risk.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_24\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\n----------------------------------------\n\nTITLE: Using Presets in imgproxy URL (Presets-Only Mode)\nDESCRIPTION: Example of how to use multiple presets in a URL when imgproxy is in presets-only mode. Shows the syntax for applying thumbnail, blurry, and watermarked presets to an image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Generating Random Hex-Encoded Key/Salt Pair (Bash)\nDESCRIPTION: Provides a Bash command example to quickly generate a random 64-byte hex-encoded string suitable for use as an imgproxy key or salt. It reads 64 random bytes from `/dev/random`, converts them to a hex string using `xxd` (-p for plain hex dump, -l for length, -g 2 for grouping by 2 bytes which doesn't affect -p output), and removes newline characters using `tr`. This is useful for creating secure keys and salts for the `IMGPROXY_KEY` and `IMGPROXY_SALT` variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Defining Trim Option for imgproxy URLs\nDESCRIPTION: Specifies the `trim` option for removing surrounding background from an image. Parameters include `threshold` for color similarity tolerance, optional hex `color` to cut off, optional `equal_hor` to trim equally from left/right, and optional `equal_ver` to trim equally from top/bottom. Trimming requires loading the image fully into memory, increasing usage and time, and doesn't support animated images. Explicitly setting `color` can save resources. Use `FF00FF` for trimming transparency.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ntrim:%threshold:%color:%equal_hor:%equal_ver\nt:%threshold:%color:%equal_hor:%equal_ver\n```\n\n----------------------------------------\n\nTITLE: Generating Random Encryption Key in Bash\nDESCRIPTION: This snippet generates a random 32-byte hex-encoded key for AES-256-CBC encryption using /dev/random.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Second in imgproxy Pro\nDESCRIPTION: Specifies the timestamp of the frame (in seconds) to be used for a thumbnail. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_59\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_VIDEO_THUMBNAIL_SECOND=1\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Sample Format\nDESCRIPTION: Example JSON response when requesting the sample format of an image from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sample_format\": \"uchar\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Configuration format for the .aws/credentials file used to store AWS access credentials.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Applying Watermark in Imgproxy\nDESCRIPTION: Places a watermark on the processed image with customizable opacity, position, offset, and scale.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_38\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Enabling Best Format by Default in imgproxy\nDESCRIPTION: Uses the 'best' format when the resulting image format is not specified. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BEST_FORMAT_BY_DEFAULT=true\n```\n\n----------------------------------------\n\nTITLE: Specifying S3 Object Version in Source URL\nDESCRIPTION: Demonstrates how to include the version ID of an S3 object in the source URL for imgproxy. This allows for retrieving specific versions of objects from S3 buckets.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?%version_id\n```\n\n----------------------------------------\n\nTITLE: Setting Max Animation Frame Resolution in imgproxy\nDESCRIPTION: Configuration option to redefine the maximum animation frame resolution. Requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be set to true for usage.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_74\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_animation_frame_resolution:%size\nmafr:%size\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Colorspace Info\nDESCRIPTION: Example JSON response when requesting colorspace information for an image from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colorspace\": \"srgb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Max Resolution for Best Format Optimization (imgproxy Configuration)\nDESCRIPTION: This configuration variable sets a maximum resolution (in megapixels). If an image's resolution exceeds this value (and the value is greater than 0), imgproxy will optimize the 'best' format selection process by not trying all applicable formats, instead picking one that seems most suitable based on initial assessment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/best_format.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION\n```\n\n----------------------------------------\n\nTITLE: Sample Encryption Key for AES-256-CBC in imgproxy\nDESCRIPTION: A 32-byte hex-encoded key example used for AES-256-CBC encryption in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with Key/Salt File Paths (Bash)\nDESCRIPTION: This command demonstrates starting the imgproxy server while specifying the key and salt for URL signing using file paths via the `-keypath` and `-saltpath` command-line arguments. This is an alternative to using the `IMGPROXY_KEY` and `IMGPROXY_SALT` environment variables. The specified files should contain the hex-encoded keys and salts, typically one per line.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -keypath /path/to/file/with/key -saltpath /path/to/file/with/salt\n```\n\n----------------------------------------\n\nTITLE: Enabling Cookie Passthrough\nDESCRIPTION: When set to 'true', imgproxy forwards incoming 'Cookie' headers to the source image request if the cookies are applicable to the source URL's domain and path, based on IMGPROXY_COOKIE_BASE_URL or request headers. The default is 'false'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_21\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_COOKIE_PASSTHROUGH\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Second in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_VIDEO_THUMBNAIL_SECOND configuration to specify which second of a video to use for thumbnail extraction.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_second:%second\nvts:%second\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific imgproxy Version Source Code\nDESCRIPTION: Commands to download a specific version of imgproxy source code from GitHub. This allows installing an exact version rather than the latest development code.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Deprecated OpenTelemetry Configuration\nDESCRIPTION: List of deprecated environment variables and their modern replacements for OpenTelemetry configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/monitoring/open_telemetry.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Deprecated:\nIMGPROXY_OPEN_TELEMETRY_ENDPOINT\nIMGPROXY_OPEN_TELEMETRY_PROTOCOL\nIMGPROXY_OPEN_TELEMETRY_GRPC_INSECURE\nIMGPROXY_OPEN_TELEMETRY_SERVICE_NAME\nIMGPROXY_OPEN_TELEMETRY_PROPAGATORS\nIMGPROXY_OPEN_TELEMETRY_CONNECTION_TIMEOUT\n\n# Use instead:\nOTEL_EXPORTER_OTLP_ENDPOINT\nOTEL_EXPORTER_OTLP_PROTOCOL\nOTEL_SERVICE_NAME\nOTEL_PROPAGATORS\nOTEL_EXPORTER_OTLP_TIMEOUT\n```\n\n----------------------------------------\n\nTITLE: Using Custom Watermark URL in imgproxy\nDESCRIPTION: This snippet demonstrates how to use a custom watermark by specifying its URL in the imgproxy processing options. The URL should be Base64-encoded.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Cloning imgproxy Source Code Repository using Bash\nDESCRIPTION: Clones the official imgproxy source code repository from GitHub into a local directory named `imgproxy` using Git, and then changes the current working directory to the newly created `imgproxy` directory. Requires Git to be installed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\n----------------------------------------\n\nTITLE: Good Source URL Configuration Example\nDESCRIPTION: Shows correct way of configuring allowed source URLs with trailing slash to prevent security issues.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.com/\n```\n\n----------------------------------------\n\nTITLE: Specifying Cache Buster - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Allows explicit cache invalidation by appending a unique string to the imgproxy URL, bypassing intermediary caches (CDN, proxy, browser). Both long and short forms (cachebuster, cb) are given. Parameter: string. No effect on image content, but crucial for reflecting changes not present in the image URL. Prefer this over URL query strings for security and signing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_16\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncachebuster:%string\ncb:%string\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced imgproxy Preset\nDESCRIPTION: Demonstrates creating a preset named 'awesome' that configures fill resizing and JPG output format. Shows how to combine multiple processing options in a single preset.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Accessing Base64 Encoded Source URL - imgproxy URL - imgproxy_url\nDESCRIPTION: Shows how to provide a source URL via URL-safe Base64 encoding for imgproxy ingestion, which may be split across slashes for readability. Used when the original URL contains sensitive or special characters. Input is a Base64-encoded URL; imgproxy decodes for processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_52\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\n----------------------------------------\n\nTITLE: Final Signed imgproxy URL\nDESCRIPTION: Complete imgproxy URL with calculated signature prepended.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/signing_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/oKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnails in imgproxy\nDESCRIPTION: Environment variables for enabling and configuring video thumbnail generation in imgproxy Pro. Includes options for enabling the feature, setting timestamp, using keyframes, and adjusting probe size and analyze duration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_ENABLE_VIDEO_THUMBNAILS`]: ((pro)) when `true`, enables video thumbnail generation. Default: `false`\n* [`IMGPROXY_VIDEO_THUMBNAIL_SECOND`]: ((pro)) the timestamp of the frame (in seconds) that will be used for a thumbnail. Default: `1`\n* [`IMGPROXY_VIDEO_THUMBNAIL_KEYFRAMES`]: ((pro)) when `true`, imgproxy will use the latest keyframe before `IMGPROXY_VIDEO_THUMBNAIL_SECOND` for video thumbnail generation. This makes video thumbnail generation faster yet the used frame timestamp will not be exactly equal to the requested one. Default: `false`\n* [`IMGPROXY_VIDEO_THUMBNAIL_TILE_AUTO_KEYFRAMES`]: ((pro)) when `true` and the `step` argument value of the `video_thumbnail_tile` processing option is greater than the interval between keyframes, imgproxy will use only keyframes. This allows to speed up `video_thumbnail_tile` for long steps between tiles yet keep it precise for short ones. Default: `false`\n* [`IMGPROXY_VIDEO_THUMBNAIL_PROBE_SIZE`]: ((pro)) the maximum amount of bytes used to determine the format. Lower values can decrease memory usage but can produce inaccurate data, or even lead to errors. Default: 5000000\n* [`IMGPROXY_VIDEO_THUMBNAIL_MAX_ANALYZE_DURATION`]: ((pro)) the maximum number of milliseconds used to get the stream info. Lower values can decrease memory usage but can produce inaccurate data, or even lead to errors. When set to `0`, the heuristic is used. Default: `0`\n```\n\n----------------------------------------\n\nTITLE: Configuring Processing Skip Rules\nDESCRIPTION: Defines which formats should skip processing when source and target formats match.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_66\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nskip_processing:%extension1:%extension2:...:%extensionN\nskp:%extension1:%extension2:...:%extensionN\n```\n\n----------------------------------------\n\nTITLE: Sample AES-256-CBC Encryption Key\nDESCRIPTION: Example of a 32-byte hex-encoded encryption key for AES-256-CBC algorithm\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-line Values in imgproxy Environment Files\nDESCRIPTION: Demonstrates the syntax within an imgproxy environment file for assigning a multi-line string to a variable (`VAR`). Using the `\\n` escape sequence within a double-quoted value inserts a newline character, resulting in the variable holding a value that spans multiple lines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nVAR=\"some\\nvalue\"\n```\n\n----------------------------------------\n\nTITLE: IPTC and Photoshop Metadata Response Example\nDESCRIPTION: Example JSON response showing IPTC metadata and Photoshop resolution information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iptc\": {\n    \"Name\": \"Spider-Man\",\n    \"Caption\": \"Spider-Man swings on the web\",\n    \"Copyright Notice\": \"Daily Bugle\",\n    \"Keywords\": [\"spider-man\", \"menance\", \"offender\"]\n  },\n  \"photoshop\": {\n    \"resolution\": {\n      \"XResolution\": 240,\n      \"XResolutionUnit\": \"inches\",\n      \"WidthUnit\": \"inches\",\n      \"YResolution\": 240,\n      \"YResolutionUnit\": \"inches\",\n      \"HeightUnit\": \"inches\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying GCS Source URL with Optional Generation in imgproxy\nDESCRIPTION: Illustrates the URL format used to reference images stored in Google Cloud Storage as source images for imgproxy. The format uses the 'gs://' scheme, followed by the bucket name and file key. An optional generation number can be appended as a query parameter to specify a particular version of the object.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Setting Format-Specific Quality in Imgproxy\nDESCRIPTION: Adds or redefines quality values for specific image formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_51\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nformat_quality:%format1:%quality1:%format2:%quality2:...:%formatN:%qualityN\nfq:%format1:%quality1:%format2:%quality2:...:%formatN:%qualityN\n```\n\n----------------------------------------\n\nTITLE: Image Dimensions Info Response\nDESCRIPTION: Example JSON response when requesting image dimensions from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"width\": 7360,\n  \"height\": 4912\n}\n```\n\n----------------------------------------\n\nTITLE: Format Quality Configuration Example\nDESCRIPTION: Example of setting quality values for different image formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\njpeg=70,avif=40,webp=60\n```\n\n----------------------------------------\n\nTITLE: URL with Salt Prefix\nDESCRIPTION: Example showing the URL path with the salt prefix before signature calculation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/signing_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhello/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-based Autoquality in imgproxy\nDESCRIPTION: Configuration for DSSIM-based autoquality with target value, error tolerance, and quality limits.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv5 Model to ONNX (FP16) using Bash\nDESCRIPTION: Bash command using the YOLOv5 `export.py` script to convert a YOLOv5 model (`.pt`) to ONNX format with FP16 precision. Requires a CUDA-compatible GPU and uses the `--half` flag.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export.py \\\n  --weights yolov5s.pt \\\n  --include onnx \\\n  --simplify \\\n  --half\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source File Size in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_SRC_FILE_SIZE configuration. Usage requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be set to true as it modifies security restrictions.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_27\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_file_size:%size\nmsfs:%size\n```\n\n----------------------------------------\n\nTITLE: Example Source URL for Encryption\nDESCRIPTION: A sample HTTP URL representing the source image that needs to be encrypted before being included in an imgproxy request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Fetching Object Detection Information from imgproxy\nDESCRIPTION: This code shows how to retrieve object detection information using imgproxy's '/info' endpoint. The 'detect_objects:1' parameter enables object detection with level 1 confidence, returning data about detected objects without modifying the image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../info/detect_objects:1/...\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with AWS Credentials via Environment Variables\nDESCRIPTION: This snippet demonstrates how to run imgproxy with AWS credentials specified as environment variables, both directly and using Docker.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Heroku manually\nDESCRIPTION: Clone the imgproxy repository, create a Heroku application, set the stack to container, and deploy the application to Heroku.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Verifying Image Hashsum in imgproxy\nDESCRIPTION: Calculates the hashsum of the source image and compares it to the provided value. If they don't match, imgproxy responds with a 422 error. Supports multiple hashsum types but doesn't work with video files.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_25\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nhashsum:%hashsum_type:%hashsum\nhs:%hashsum_type:%hashsum\n```\n\n----------------------------------------\n\nTITLE: Installing libvips on Ubuntu Using PPA - bash\nDESCRIPTION: This set of commands adds the 'dhor/myway' PPA for Ubuntu, updates apt sources, and installs the libvips-dev library needed by imgproxy. Dependencies: Ubuntu, sudo privileges, and add-apt-repository utility. No special parameters. The output is an updated system with libvips-dev (recent version) ready for compiling imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:dhor/myway\\nsudo apt-get update\\nsudo apt-get install libvips-dev\n```\n\n----------------------------------------\n\nTITLE: Example Preset Definitions File\nDESCRIPTION: Sample content of a preset definitions file for imgproxy, including default, sharp, and blurry presets.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndefault=resizing_type:fill/enlarge:1\n\n# Sharpen the image to make it look better\nsharp=sharpen:0.7\n\n# Blur the image to hide details\nblurry=blur:2\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Disposition to Attachment in imgproxy (Environment Variable)\nDESCRIPTION: If set to `true`, imgproxy adds `attachment` to the `Content-Disposition` response header, typically prompting browsers to download the image instead of displaying it inline. Default is `false`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/options.mdx#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n`IMGPROXY_RETURN_ATTACHMENT`\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Environment Variables\nDESCRIPTION: Core environment variables required to enable and configure OpenTelemetry integration with imgproxy. These settings control basic functionality including enabling traces and metrics collection.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_ENABLE=true\nIMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS=true\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc\nOTEL_EXPORTER_OTLP_ENDPOINT=https://localhost:4317\nOTEL_SERVICE_NAME=imgproxy\n```\n\n----------------------------------------\n\nTITLE: Using plain source URL with imgproxy info endpoint\nDESCRIPTION: Example of providing a plain source URL in the imgproxy info endpoint, which requires prepending with '/plain/' in the URL path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/getting_info.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Prepending Salt to imgproxy Path Segment - Markdown\nDESCRIPTION: Shows the expected path after prepending the salt value for HMAC calculation in imgproxy. This string is fed into the signature generation algorithm as per documentation instructions. No dependencies; static example.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/signing_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhello/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Smart Crop in imgproxy Pro\nDESCRIPTION: Environment variables for configuring smart crop features in imgproxy Pro. Includes options for enabling advanced smart crop, setting the mode, and enabling face detection.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/configuration/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_SMART_CROP_ADVANCED`]: ((pro)) when `true`, enables usage of the advanced smart crop method. Advanced smart crop may take more time than regular one, yet it produces better results.\n* [`IMGPROXY_SMART_CROP_ADVANCED_MODE`]: ((pro)) the mode of the advanced smart crop method. Supported values are:\n  * `max_score_area`: _(default)_ in this mode, imgproxy builds a featres map and selects the area with the highest sum of feature scores.\n  * `center_of_mass`: in this mode, imgproxy calculates the center of mass of the features map and selects the area around it.\n* [`IMGPROXY_SMART_CROP_FACE_DETECTION`]: ((pro)) when `true`, adds an additional fast face detection step to smart crop.\n```\n\n----------------------------------------\n\nTITLE: Text Watermark Processing Option Syntax in imgproxy\nDESCRIPTION: URL option format for applying a text watermark to an image. The text must be URL-safe Base64-encoded and can include Pango markup for styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nwatermark_text:%text\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Example Initialization Vector (IV) - Hex Byte Representation\nDESCRIPTION: An example 16-byte initialization vector (IV) required for AES-CBC encryption, shown as a sequence of hex byte values. A unique IV should ideally be used for each message, though strategies exist for deterministic generation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\\A7\\95\\63\\A2\\B3\\5D\\86\\CE\\E6\\45\\1C\\3C\\80\\0F\\53\\5A\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoquality in imgproxy (Pro)\nDESCRIPTION: Redefines autoquality settings for individual requests. Includes method, target, min/max quality, and allowed error. May impact processing speed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_52\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nautoquality:%method:%target:%min_quality:%max_quality:%allowed_error\naq:%method:%target:%min_quality:%max_quality:%allowed_error\n```\n\n----------------------------------------\n\nTITLE: Alpha option response example\nDESCRIPTION: Sample JSON response showing the sample format of an image (note: this example appears to be incorrect in the original documentation as it shows sample_format instead of alpha information).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sample_format\": \"uchar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables for imgproxy\nDESCRIPTION: This snippet demonstrates how to set AWS access key and secret key as environment variables when running imgproxy, both directly and using Docker.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Adjusting Image Brightness with imgproxy URL Option (Pro)\nDESCRIPTION: Adjusts the brightness of the resulting image. The `brightness` parameter takes an integer value ranging from -255 to 255. The default value is 0 (no change). This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_25\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbrightness:%brightness\nbr:%brightness\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Credentials in Shared Credentials File - INI\nDESCRIPTION: This snippet provides a template for setting AWS credentials in a .aws/credentials file using the INI file format. Place this file in your home directory (~/.aws/credentials) with the appropriate access key and secret access key values. This method is compatible with standard AWS credential lookups and enables imgproxy processes to obtain authentication details for CloudWatch integration. Ensure file permissions protect the credentials from unauthorized access.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File for imgproxy\nDESCRIPTION: This snippet shows the content of an AWS shared credentials file (.aws/credentials) used to store AWS access key and secret key for imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Using Presets-Only Mode in imgproxy URLs\nDESCRIPTION: Illustrates how to format a URL when imgproxy is in presets-only mode, where processing options are specified as a list of preset names.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Example Unsigned imgproxy URL\nDESCRIPTION: Sample imgproxy URL before signing, showing the format of a typical image processing request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Processing URL for DSSIM-based Autoquality\nDESCRIPTION: URL format for applying DSSIM-based autoquality with specific parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/autoquality.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Combining URL and Preset Chained Pipelines\nDESCRIPTION: Example showing how a URL with chained pipelines interacts with a preset that also contains chained pipelines. This demonstrates the merging behavior of preset and URL pipeline chains.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials Using Environment Variables for AWS Systems Manager\nDESCRIPTION: This snippet demonstrates how to set AWS Access Key ID and Secret Access Key using environment variables for imgproxy to access AWS Systems Manager Parameter Store parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Log Format and Level\nDESCRIPTION: Environment variables to control the format and verbosity of imgproxy's logs. Supported formats include `pretty`, `structured`, `json`, and `gcp`. Supported levels are `error`, `warn`, `info`, and `debug`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_33\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_LOG_FORMAT\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_LOG_LEVEL\n```\n\n----------------------------------------\n\nTITLE: SVG Check Configuration Environment Variable\nDESCRIPTION: Environment variable to configure the maximum number of bytes imgproxy will read to recognize SVG files. Default value is 32KB.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_formats_support.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_SVG_CHECK_BYTES=32768\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy with Homebrew\nDESCRIPTION: Command to install imgproxy using Homebrew package manager on macOS.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/installation.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbrew install imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Pages Option in imgproxy\nDESCRIPTION: Specifies the number of pages to use when a source image supports pagination or animation. Pages will be stacked vertically and left-aligned. This option is available in the Pro version only.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_57\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npages:%pages\npgs:%pages\n```\n\n----------------------------------------\n\nTITLE: Salt-Prefixed imgproxy URL Path\nDESCRIPTION: Example showing the URL path with the salt prefix, used in the signature calculation process.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/signing_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhello/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Calculating Base64-encoded Image Data for Fallback Image\nDESCRIPTION: Command to calculate Base64-encoded image data for the IMGPROXY_FALLBACK_IMAGE_DATA environment variable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbase64 tmp/fallback.png | tr -d '\\n'\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Second in imgproxy\nDESCRIPTION: Allows redefining the IMGPROXY_VIDEO_THUMBNAIL_SECOND configuration for a specific request. This option is available in the Pro version only.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_59\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_second:%second\nvts:%second\n```\n\n----------------------------------------\n\nTITLE: Example Encrypted Data (AES-256-CBC) - Hex Byte Representation\nDESCRIPTION: The result of encrypting the PKCS#7 padded source URL using AES-256-CBC with the example key and IV. The output is shown as a sequence of hex byte values representing the ciphertext.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n\\84\\65\\19\\C8\\B7\\97\\59\\2E\\CE\\A3\\78\\DD\\44\\25\\45\\A4\\48\\43\\4A\\AD\\04\\A5\\B7\\A8\\50\\01\\22\\CC\\7E\\65\\1C\\FF\\71\\57\\3C\\89\\54\\D8\\6E\\1B\\0D\\B3\\13\\41\\2F\\50\\47\\69\n```\n\n----------------------------------------\n\nTITLE: Video meta option for image info retrieval\nDESCRIPTION: URL option to request video metadata and streams information, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_15\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_meta:%video_meta\nvm:%video_meta\n```\n\n----------------------------------------\n\nTITLE: Specifying Plain Source URL in imgproxy\nDESCRIPTION: Demonstrates how to provide a source image URL directly within the imgproxy path, prefixed by `/plain/`. Special characters like query strings (`?`) or `@` within the source URL need to be properly escaped.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_28\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Enabling Development Error Mode\nDESCRIPTION: When set to 'true', imgproxy includes detailed error messages, potentially including stack traces, in its HTTP responses. This is helpful for debugging but not recommended for production environments due to potential information disclosure. The default value is 'false'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_19\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_DEVELOPMENT_ERRORS_MODE\n```\n\n----------------------------------------\n\nTITLE: Setting Animation Frame Processing in imgproxy\nDESCRIPTION: Environment variable to specify the maximum number of animated image frames that imgproxy will process. Default is set to 1 frame to optimize performance.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_formats_support.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_ANIMATION_FRAMES=1\n```\n\n----------------------------------------\n\nTITLE: Using Custom Query Separator for Google Cloud Storage URLs in imgproxy\nDESCRIPTION: Shows how to use a custom query separator when filenames in Google Cloud Storage contain '?'. This example uses 'generation=' as the separator for specifying the object generation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?generation=%generation\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Keyframes in ImgProxy URLs\nDESCRIPTION: Allows redefining the IMGPROXY_VIDEO_THUMBNAIL_KEYFRAMES configuration to control keyframe usage in video thumbnails.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_62\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_keyframes:%keyframes\nvtk:%keyframes\n```\n\n----------------------------------------\n\nTITLE: Enabling PNG Quantization\nDESCRIPTION: When set to 'true', enables color quantization for PNG images, reducing the number of colors to decrease file size, potentially at the cost of some color fidelity. Requires libvips built with Quantizr or libimagequant support. The default value is 'false'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_32\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_PNG_QUANTIZE\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Configuration format for AWS credentials file stored in .aws/credentials in the home directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Adding Watermark to Images in imgproxy\nDESCRIPTION: Places a watermark on the processed image. Options include opacity, position, offset, and scale. Supports various positioning options and tiling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_38\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark:%opacity:%position:%x_offset:%y_offset:%scale\nwm:%opacity:%position:%x_offset:%y_offset:%scale\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark URL Configuration in imgproxy\nDESCRIPTION: URL option format for specifying a custom watermark using a Base64-encoded URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Example Source URL for Encryption\nDESCRIPTION: This is an example source URL that will be encrypted using the AES-CBC algorithm.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Resulting Chained Pipeline in imgproxy after Preset Expansion\nDESCRIPTION: Shows the final result of combining chained pipelines and presets. This is the expanded version of the previous example, illustrating how preset chains are merged into the URL chain.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Recognition in imgproxy\nDESCRIPTION: Sets the maximum number of bytes imgproxy will read to recognize SVG files. Increase this value if SVG recognition fails.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_SVG_CHECK_BYTES=32768\n```\n\n----------------------------------------\n\nTITLE: Swift URL Format Example\nDESCRIPTION: Example of URL format conversion from standard Swift object storage URL to imgproxy-compatible Swift URL format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOriginal: http://127.0.0.1:8080/v1/AUTH_test/images/flowers/rose.jpg\nConverted: swift://images/flowers/rose.jpg\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv4 to ONNX Format Using Python and onnxruntime (bash)\nDESCRIPTION: This shell and Python snippet sequence installs the onnxruntime package and then uses the \\'demo_pytorch2onnx.py\\' script from a YOLOv4 repository to export a PyTorch checkpoint to ONNX format. Required dependencies include Python, pip, onnxruntime, and the specified YOLOv4 conversion script. Usage parameters: weight_file, image_path, batch_size, number of classes, input image dimensions. Results in an ONNX model for object detection in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install onnxruntime\n\npython demo_pytorch2onnx.py <weight_file> <image_path> <batch_size> <n_classes> <input_width> <input_height>\n\n# Example\npython demo_pytorch2onnx.py yolov4.pth dog.jpg 1 80 416 416\n```\n\n----------------------------------------\n\nTITLE: Resolved Pipeline Chain Result\nDESCRIPTION: Shows the final resolved URL after combining preset chains with URL chains.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Configuring SVG Processing in imgproxy\nDESCRIPTION: Environment variable to control the maximum number of bytes imgproxy reads to recognize SVG files. Useful when dealing with larger SVG files that aren't recognized by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_formats_support.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_SVG_CHECK_BYTES=32768\n```\n\n----------------------------------------\n\nTITLE: Defining Page Selection Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to select a specific page or frame from a multi-page (PDF, TIFF) or animated (GIF, WebP) source image. The `%page` parameter is a zero-based index. Default is `0`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_20\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npage:%page\npg:%page\n```\n\n----------------------------------------\n\nTITLE: Configuring Miscellaneous Settings for Imgproxy\nDESCRIPTION: Environment variables for various imgproxy features including colorspace processing, metadata handling, and health check configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_13\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_USE_LINEAR_COLORSPACE=false\nIMGPROXY_DISABLE_SHRINK_ON_LOAD=false\nIMGPROXY_STRIP_METADATA=true\nIMGPROXY_KEEP_COPYRIGHT=true\nIMGPROXY_STRIP_METADATA_DPI=72.0\nIMGPROXY_STRIP_COLOR_PROFILE=true\nIMGPROXY_AUTO_ROTATE=true\nIMGPROXY_ENFORCE_THUMBNAIL=false\nIMGPROXY_RETURN_ATTACHMENT=false\nIMGPROXY_SVG_FIX_UNSUPPORTED=false\nIMGPROXY_HEALTH_CHECK_MESSAGE=imgproxy is running\nIMGPROXY_HEALTH_CHECK_PATH=\n```\n\n----------------------------------------\n\nTITLE: Deploying imgproxy to Heroku manually\nDESCRIPTION: Clone the imgproxy repository, create a Heroku application, set the stack to container, and deploy the application. This method allows for manual deployment to Heroku.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via Shared File - INI\nDESCRIPTION: Shows the structure of an AWS shared credentials ('~/.aws/credentials') file in INI format, used by imgproxy and other AWS clients to authenticate API calls. The file consists of a [default] profile section containing the required keys aws_access_key_id and aws_secret_access_key. No external dependencies beyond AWS SDK or compatible libraries being available in the execution environment. Inputs: access key and secret key; outputs: credential file used by AWS SDK to authenticate operations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Resulting Combined Pipeline\nDESCRIPTION: Demonstrates the final result of combining preset operations with additional chained pipeline operations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: SEO-Friendly Base64 URL Example\nDESCRIPTION: Example of an imgproxy URL structure when IMGPROXY_BASE64_URL_INCLUDES_FILENAME is enabled, showing how SEO-friendly filenames are handled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://my-imgproxy.dev/.../aHR0cDovL2V4YW1wbGUuY29tL3B1cHB5LmpwZw/puppy.jpg\n```\n\n----------------------------------------\n\nTITLE: Specifying AES-CBC Encrypted Source URL in imgproxy\nDESCRIPTION: Demonstrates how to provide a source image URL encrypted using the AES-CBC algorithm. The encrypted data is prepended with the `/enc/` path segment. Similar to Base64 encoding, the encrypted string can be split into multiple segments using `/`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_24\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n```imgproxy_url\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n```\n\n----------------------------------------\n\nTITLE: Applying Size-Based imgproxy Autoquality via URL Option\nDESCRIPTION: Shows how to use the `autoquality` processing option in an imgproxy URL to enable size-based quality adjustment (`size`), specify the target size (10240 bytes), minimum quality (10), and maximum quality (80) for a single image request. This overrides global settings for this specific request.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnail Second - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Overrides the video thumbnail extraction time via the `%second` parameter. Sets a different second offset for thumbnail capture, changing the default extraction point. Used for customizing which frame is shown in imgproxy static previews. Linked to IMGPROXY_VIDEO_THUMBNAIL_SECOND config.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_43\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_second:%second\\nvts:%second\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for XMP Metadata\nDESCRIPTION: Shows the JSON structure for XMP metadata information returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"xmp\": {\n    \"aux\": {\n      \"ApproximateFocusDistance\": \"4294967295/1\",\n      \"ImageNumber\": \"16604\",\n      \"Lens\": \"16.0-35.0 mm f/4.0\",\n      \"LensID\": \"163\",\n      \"LensInfo\": \"160/10 350/10 40/10 40/10\",\n      \"SerialNumber\": \"12345678\"\n    },\n    \"dc\": {\n      \"creator\": [\"Peter B. Parker\"],\n      \"publisher\": [\"Daily Bugle\"],\n      \"subject\": [\"spider-man\", \"menance\", \"offender\"],\n      \"format\": \"image/jpeg\"\n    },\n    \"photoshop\": {\n      \"DateCreated\": \"2016-09-11T18:44:50.003\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Base URL for Scope\nDESCRIPTION: Specifies a base URL used to determine the scope (domain, path) of incoming cookies when IMGPROXY_COOKIE_PASSTHROUGH is enabled. If not set, imgproxy uses headers like X-Forwarded-Host/Port/Scheme or Host to infer the scope. Cookies are forwarded only if their scope matches both this base URL and the target image URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_22\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_COOKIE_BASE_URL\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-based Autoquality in imgproxy\nDESCRIPTION: Configuration for DSSIM-based quality adjustment with target DSSIM value, error tolerance, and quality bounds.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy Source Code Tarball\nDESCRIPTION: Commands to create a directory for imgproxy, download the source code tarball from GitHub, and extract it. This is an alternative to cloning the repository.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/installation.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Buster Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to include a cache-busting string. Changing the `%string` value helps bypass CDN, proxy, and browser caches without affecting the image processing itself. This is recommended over query strings for signed URLs. Default is empty.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncachebuster:%string\ncb:%string\n```\n\n----------------------------------------\n\nTITLE: Height Option in imgproxy URL Syntax (imgproxy_url_option)\nDESCRIPTION: This option details URL path usage for specifying resulting image height. When set to 0, height is auto-calculated based on width and aspect ratio. Supported by both 'height' and its alias 'h' arguments in the URL. This is critical for controlling processed image output dimensions. Input is an integer height value.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_8\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nheight:%height\nh:%height\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration File\nDESCRIPTION: Example of AWS credentials configuration in .aws/credentials file format with access key and secret key parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Defining Sharpen Filter Option for imgproxy URLs\nDESCRIPTION: Specifies the `sharpen` option to apply a sharpen filter. The `sigma` value defines the size of the sharpen mask. Guidelines are provided for sigma values based on image resolution (e.g., 1.0 for 12 pixels/mm). Default is disabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_29\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsharpen:%sigma\nsh:%sigma\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark URL Processing Option Syntax in imgproxy\nDESCRIPTION: Syntax for the custom watermark URL processing option in imgproxy Pro. This allows specifying a Base64-encoded URL for a custom watermark image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nwatermark_url:%url\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnail Keyframes in imgproxy\nDESCRIPTION: Allows redefining the IMGPROXY_VIDEO_THUMBNAIL_KEYFRAMES configuration for a specific request. This option is available in the Pro version only.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_60\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_keyframes:%keyframes\nvtk:%keyframes\n```\n\n----------------------------------------\n\nTITLE: Dominant Colors Response Example - JSON\nDESCRIPTION: Displays the JSON response schema when extracting dominant colors via imgproxy. The object contains keys such as dark_muted and light_vibrant mapped to RGB values. Inputs are the corresponding URL options and an analyzable image. No external dependencies; result includes up to six named dominant color objects.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"dominant_colors\\\": {\\n    \\\"dark_muted\\\": { \\\"R\\\": 75, \\\"G\\\": 70, \\\"B\\\": 57 },\\n    \\\"dark_vibrant\\\": { \\\"R\\\": 90, \\\"G\\\": 78, \\\"B\\\": 43 },\\n    \\\"light_muted\\\": { \\\"R\\\": 167, \\\"G\\\": 156, \\\"B\\\": 130 },\\n    \\\"light_vibrant\\\": { \\\"R\\\": 212, \\\"G\\\": 198, \\\"B\\\": 165 },\\n    \\\"muted\\\": { \\\"R\\\": 155, \\\"G\\\": 146, \\\"B\\\": 120 },\\n    \\\"vibrant\\\": { \\\"R\\\": 172, \\\"G\\\": 146, \\\"B\\\": 83 }\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DSSIM-based Autoquality in imgproxy\nDESCRIPTION: Configuration example for DSSIM-based autoquality with target dissimilarity value and quality bounds.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"dssim\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: Sample Source URL\nDESCRIPTION: Example source URL to be encrypted\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/encrypting_source_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv5 Model to ONNX (FP32) using Bash\nDESCRIPTION: Bash command using the YOLOv5 `export.py` script to convert a YOLOv5 model (`.pt`) to ONNX format with FP32 precision. The `--simplify` flag optimizes the ONNX graph.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP32 precision\npython export.py \\\n  --weights yolov5s.pt \\\n  --include onnx \\\n  --simplify\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Memory Usage Tweaks\nDESCRIPTION: Environment variables for advanced tuning of imgproxy's memory usage. Options include setting initial download buffer size, configuring the interval for returning unused memory to the OS, adjusting buffer pool calibration, and selecting the malloc implementation (Docker only). Caution is advised when modifying these settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_35\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_DOWNLOAD_BUFFER_SIZE\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_FREE_MEMORY_INTERVAL\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_BUFFER_POOL_CALIBRATION_THRESHOLD\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_MALLOC\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables\nDESCRIPTION: Example of setting AWS credentials using environment variables for both direct execution and Docker container.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Defining Video Thumbnail Second Option (imgproxy URL)\nDESCRIPTION: Specifies the second of the video to use for generating the thumbnail. This URL option overrides the 'IMGPROXY_VIDEO_THUMBNAIL_SECOND' configuration setting. Both 'video_thumbnail_second' and its alias 'vts' accept a second value.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_15\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_second:%second\nvts:%second\n```\n\n----------------------------------------\n\nTITLE: Deploying specific imgproxy version to Heroku using Container Registry\nDESCRIPTION: Create a Heroku application, set the stack to container, pull a specific imgproxy Docker image, tag it for Heroku, and deploy it using Heroku Container Registry.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Example Unsigned imgproxy URL\nDESCRIPTION: This snippet shows an example of an insecure imgproxy URL before signing. It specifies resizing options (`rs:fill:300:400:0`), gravity (`g:sm`), and the Base64-encoded source image URL, but lacks a security signature, making it vulnerable if signature checking is not enforced.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Using Presets with Additional Pipeline Chaining\nDESCRIPTION: Shows how to combine a preset with additional pipeline chains in the URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/chained_pipelines.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/preset:test/width:500/-/width:600/...\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Sentry Configuration\nDESCRIPTION: Configuration variables for setting up Sentry error reporting in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_11\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_SENTRY_DSN=your-sentry-dsn\nIMGPROXY_SENTRY_ENVIRONMENT=production\nIMGPROXY_SENTRY_RELEASE=imgproxy@{version}\n```\n\n----------------------------------------\n\nTITLE: Installing imgproxy DEB package on Debian/Ubuntu\nDESCRIPTION: Commands for installing a DEB package on Debian/Ubuntu systems and handling dependency issues with apt-get.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo dpkg -i imgproxy-3.25.0.arm64.deb\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Autoquality in imgproxy\nDESCRIPTION: Configuration for size-based autoquality with target file size, minimum and maximum quality settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/autoquality.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Crop Coordinates\nDESCRIPTION: Example JSON response when requesting crop coordinates for an image from imgproxy based on specified crop parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crop\": {\n    \"left\": 0.383203125,\n    \"top\": 0.2603861907548274,\n    \"width\": 0.1953125,\n    \"height\": 0.3510825043885313\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Sample Format\nDESCRIPTION: Illustrates the JSON structure for image sample format information returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sample_format\": \"uchar\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling JPEG Chroma Subsampling (Pro)\nDESCRIPTION: ((pro)) When set to 'true', disables chrominance subsampling during JPEG compression. This improves color quality, especially around sharp edges, but increases the resulting file size. The default value is 'false'. Requires imgproxy Pro.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_26\n\nLANGUAGE: Configuration Variable\nCODE:\n```\nIMGPROXY_JPEG_NO_SUBSAMPLE\n```\n\n----------------------------------------\n\nTITLE: Configuring None Autoquality Method in imgproxy\nDESCRIPTION: Configuration example for disabling autoquality in imgproxy using environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy Source Code as Tarball\nDESCRIPTION: Download the imgproxy source code as a tarball and extract it. This is an alternative to cloning the repository.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy Info URL\nDESCRIPTION: Shows the URL structure for making requests to imgproxy's /info endpoint, including signature, options, and source URL encoding.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url_template\nCODE:\n```\nhttp://imgproxy.example.com/info/%signature/%info_options/plain/%source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/%encoded_source_url\nhttp://imgproxy.example.com/info/%signature/%info_options/enc/%encrypted_source_url\n```\n\n----------------------------------------\n\nTITLE: Setting Size-based Autoquality in URL\nDESCRIPTION: URL processing option example for size-based autoquality with parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Example IV Prepended to Encrypted Data (Bytes)\nDESCRIPTION: Shows the concatenation of the 16-byte Initialization Vector (IV) and the resulting encrypted data bytes. This combined byte sequence is then encoded using URL-safe Base64.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n\\A7\\95\\63\\A2\\B3\\5D\\86\\CE\\E6\\45\\1C\\3C\\80\\0F\\53\\5A\\84\\65\\19\\C8\\B7\\97\\59\\2E\\CE\\A3\\78\\DD\\44\\25\\45\\A4\\48\\43\\4A\\AD\\04\\A5\\B7\\A8\\50\\01\\22\\CC\\7E\\65\\1C\\FF\\71\\57\\3C\\89\\54\\D8\\6E\\1B\\0D\\B3\\13\\41\\2F\\50\\47\\69\n```\n\n----------------------------------------\n\nTITLE: Defining Gradient Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `gradient` option (Pro feature) to place a gradient overlay transitioning from transparent to a specified color. Parameters include `opacity` (0 to disable), optional hex `color` (default black '000'), optional `direction` (angle in degrees or string: 'down', 'up', 'right', 'left'), and optional `start`/`stop` positions (floats 0.0-1.0, default 0.0 and 1.0).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_35\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ngradient:%opacity:%color:%direction:%start:%stop\ngr:%opacity:%color:%direction:%start:%stop\n```\n\n----------------------------------------\n\nTITLE: Selecting Page in Multi-Page Documents with imgproxy\nDESCRIPTION: Specifies which page to use in paginated (PDF, TIFF) or animated (GIF, WebP) source images. Page numeration starts from zero.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_19\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npage:%page\npg:%page\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Keyframes\nDESCRIPTION: Overrides the IMGPROXY_VIDEO_THUMBNAIL_KEYFRAMES configuration for video processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_62\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_keyframes:%keyframes\nvtk:%keyframes\n```\n\n----------------------------------------\n\nTITLE: Alpha channel option for image info retrieval\nDESCRIPTION: URL option to check if an image has an alpha channel and optionally check for actual transparency with non-max alpha values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_27\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nalpha:%alpha:%check_transparency\na:%alpha:%check_transparency\n```\n\n----------------------------------------\n\nTITLE: Example Initialization Vector (IV) for AES-CBC (Bytes)\nDESCRIPTION: An example 16-byte Initialization Vector (IV) shown as hex-escaped byte representation. A unique IV is required for each AES-CBC encryption operation with the same key, although strategies for deterministic generation exist for caching purposes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n\\A7\\95\\63\\A2\\B3\\5D\\86\\CE\\E6\\45\\1C\\3C\\80\\0F\\53\\5A\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv9 to ONNX Format Using export.py (bash)\nDESCRIPTION: This block demonstrates how to export YOLOv9 models to ONNX via the official export.py script, supporting both FP32 and FP16 (GPU required for latter). Dependencies: YOLOv9 Python toolkit, model weights. Includes flags for weights, ONNX inclusion, simplification, and half-precision export. Output is a simplified ONNX file compatible with imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Export with FP32 precision\npython export.py \\\n  --weights yolov9-s.pt \\\n  --include onnx \\\n  --simplify\n\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export.py \\\n  --weights yolov9-s.pt \\\n  --include onnx \\\n  --simplify \\\n  --half\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv8 Model to ONNX (FP32) using Bash\nDESCRIPTION: Bash command using the `yolo` CLI tool from Ultralytics to export a YOLOv8 model (`.pt`) to ONNX format with FP32 precision. Specifies the model, target format (`onnx`), and enables simplification.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP32 precision\nyolo export \\\n  model=yolov8n.pt \\\n  format=onnx \\\n  simplify=True\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Honeybadger Integration\nDESCRIPTION: Environment variables to enable and configure error reporting to Honeybadger. Providing an API key enables the integration. The reporting environment can also be specified.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_HONEYBADGER_KEY\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_HONEYBADGER_ENV\n```\n\n----------------------------------------\n\nTITLE: Video Thumbnail Configuration Environment Variables\nDESCRIPTION: Environment variables to enable video thumbnail generation and set the timestamp for frame selection. Video thumbnailing is disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_formats_support.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ENABLE_VIDEO_THUMBNAILS=false\nIMGPROXY_VIDEO_THUMBNAIL_SECOND=1\n```\n\n----------------------------------------\n\nTITLE: Specifying Base64 Encoded Source URL (imgproxy URL)\nDESCRIPTION: Shows how to provide the source image URL encoded using URL-safe Base64. The encoded string follows the processing options path and can be optionally split using '/' characters for readability or to avoid URL length limitations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_22\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from Source on Ubuntu\nDESCRIPTION: Build imgproxy from source on Ubuntu after installing the required dependencies including libvips and Go.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Integration for Imgproxy\nDESCRIPTION: Environment variables for setting up OpenTelemetry monitoring with configurable endpoints, protocols, certificates, and trace settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_8\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_ENDPOINT=\nIMGPROXY_OPEN_TELEMETRY_PROTOCOL=grpc\nIMGPROXY_OPEN_TELEMETRY_SERVICE_NAME=imgproxy\nIMGPROXY_OPEN_TELEMETRY_ENABLE_METRICS=false\nIMGPROXY_OPEN_TELEMETRY_SERVER_CERT=\nIMGPROXY_OPEN_TELEMETRY_CLIENT_CERT=\nIMGPROXY_OPEN_TELEMETRY_CLIENT_KEY=\nIMGPROXY_OPEN_TELEMETRY_GRPC_INSECURE=true\nIMGPROXY_OPEN_TELEMETRY_PROPAGATORS=\nIMGPROXY_OPEN_TELEMETRY_TRACE_ID_GENERATOR=xray\nIMGPROXY_OPEN_TELEMETRY_CONNECTION_TIMEOUT=5\n```\n\n----------------------------------------\n\nTITLE: Merged Pipeline Path after Preset Expansion - imgproxy_url\nDESCRIPTION: Shows the resulting imgproxy Pro URL after merging chained pipeline sections from both a preset and the original URL. Useful for understanding how imgproxy combines chains when presets are involved. Output illustrates the expanded, linear sequence of all applied transformations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Format\nDESCRIPTION: Illustrates the JSON response when requesting image format information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Size-based Autoquality in imgproxy\nDESCRIPTION: Configuration for size-based quality adjustment with specified target size, minimum and maximum quality values, and format-specific settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/autoquality.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"size\"\n# Change value to the desired size in bytes\nIMGPROXY_AUTOQUALITY_TARGET=10240\nIMGPROXY_AUTOQUALITY_MIN=10\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Palette\nDESCRIPTION: Demonstrates the JSON structure for image palette information returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"palette\": [\n    { \"R\": 189, \"G\": 178, \"B\": 169, \"A\": 255 },\n    { \"R\": 83, \"G\": 79, \"B\": 67, \"A\": 255 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for BlurHash\nDESCRIPTION: Shows the JSON structure returned by imgproxy when the `blurhash` option is enabled. It includes a `blurhash` key with the calculated BlurHash string as its value.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blurhash\": \"LLH-}fox0fRQ%Do}9as9_3%2M{S2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CORS in imgproxy\nDESCRIPTION: Configures CORS headers with the specified origin. CORS is disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_ALLOW_ORIGIN=\"https://example.com\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Plain Source URL - imgproxy URL - imgproxy_url\nDESCRIPTION: Demonstrates specifying the image source as a direct URL in imgproxy, prepended with '/plain/'. Special characters like query strings or '@' require escaping. Uses HTTP or HTTPS source; output is determined by subsequent processing chain.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_51\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/plain/http://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: Manual Heroku Deployment of imgproxy\nDESCRIPTION: Steps to manually deploy imgproxy to Heroku using Git\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git && cd imgproxy\nheroku create your-application\nheroku stack:set container\ngit push heroku master\n```\n\n----------------------------------------\n\nTITLE: Configuring Unsharp Masking with imgproxy URL Option (Pro)\nDESCRIPTION: Allows redefining the unsharp masking parameters (`mode`, `weight`, `divider`) for a specific request, overriding the global configuration settings. All arguments are optional and retain their meaning from the main configuration. This is an imgproxy Pro feature.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_33\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nunsharp_masking:%mode:%weight:%divider\nush:%mode:%weight:%divider\n```\n\n----------------------------------------\n\nTITLE: Defining Blur Filter Option for imgproxy URLs\nDESCRIPTION: Specifies the `blur` option to apply a gaussian blur filter. The `sigma` value defines the size of the blur mask. Default is disabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_28\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblur:%sigma\nbl:%sigma\n```\n\n----------------------------------------\n\nTITLE: Signed imgproxy URL\nDESCRIPTION: Final signed imgproxy URL with the calculated HMAC signature prefix.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/signing_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/oKfUtW34Dvo2BGQehJFR4Nr0_rIjOtdtzJ3QFsUcXH8/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Disabling Animation in imgproxy\nDESCRIPTION: Controls whether imgproxy treats all images as non-animated. When enabled, use the page and pages options to specify which frames to use. This option is available in the Pro version only.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_58\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndisable_animation:%disable\nda:%disable\n```\n\n----------------------------------------\n\nTITLE: Detection Visualization URL in imgproxy\nDESCRIPTION: URL pattern for drawing bounding boxes around detected objects for testing purposes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/object_detection.mdx#2025-04-23_snippet_10\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../draw_detections:1:face/...\n```\n\n----------------------------------------\n\nTITLE: Downloading Specific Version of imgproxy Source as Tarball - bash\nDESCRIPTION: Like the previous snippet, this example fetches a specific imgproxy version (v3.20.0) tarball using curl and extracts it. Dependencies: curl, tar. The version string can be changed as needed. Produces a source directory ready for building that matches the required version.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\\ncd imgproxy\\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration (Second Instance)\nDESCRIPTION: Another instance of AWS credentials file configuration showing the same format.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: URL Processing Options for Autoquality\nDESCRIPTION: Examples of URL-based processing options for different autoquality methods in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv5 to ONNX Format Using export.py (bash)\nDESCRIPTION: This set of shell commands demonstrates exporting a YOLOv5 PyTorch model to ONNX format using the YOLOv5 repository's export.py script, supporting both FP32 and FP16 precisions. Required: Python, YOLOv5 codebase, existing .pt weights, and (for FP16) a CUDA-capable GPU. Parameters include --weights for the input file, --include to select ONNX, --simplify to optimize the output, and --half for FP16. Outputs an ONNX file usable by imgproxy for detection tasks.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/features/object_detection.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Export with FP32 precision\npython export.py \\\n  --weights yolov5s.pt \\\n  --include onnx \\\n  --simplify\n\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export.py \\\n  --weights yolov5s.pt \\\n  --include onnx \\\n  --simplify \\\n  --half\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Reporting Services for Imgproxy\nDESCRIPTION: Environment variables for configuring various error reporting services including Bugsnag, Honeybadger, Sentry, and Airbrake.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_10\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_REPORT_DOWNLOADING_ERRORS=true\nIMGPROXY_BUGSNAG_KEY=\nIMGPROXY_BUGSNAG_STAGE=production\nIMGPROXY_HONEYBADGER_KEY=\nIMGPROXY_HONEYBADGER_ENV=production\nIMGPROXY_SENTRY_DSN=\nIMGPROXY_SENTRY_ENVIRONMENT=production\nIMGPROXY_SENTRY_RELEASE=imgproxy@{version}\nIMGPROXY_AIRBRAKE_PROJECT_ID=\nIMGPROXY_AIRBRAKE_PROJECT_KEY=\nIMGPROXY_AIRBRAKE_ENVIRONMENT=production\n```\n\n----------------------------------------\n\nTITLE: Generating a Random Encryption Key for imgproxy\nDESCRIPTION: This command generates a random 32-byte hex-encoded key suitable for AES-256-CBC encryption in imgproxy. It uses /dev/random as entropy source and formats the output as a continuous hex string.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 32 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Text Watermark Configuration in imgproxy\nDESCRIPTION: URL option format for adding text watermarks with support for URL-safe Base64-encoded text and Pango markup styling.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/watermark.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_text:%text\\nwmt:%text\n```\n\n----------------------------------------\n\nTITLE: Info Option Format in imgproxy URL\nDESCRIPTION: Demonstrates the format for specifying info options in the imgproxy URL, with option name and arguments separated by colons.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n%option_name:%argument1:%argument2:...:%argumentN\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Redirects for Source Images in imgproxy\nDESCRIPTION: Limits the number of redirects imgproxy will follow when requesting source images. Set to 0 to disallow redirects.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_REDIRECTS=10\n```\n\n----------------------------------------\n\nTITLE: Setting Autoquality by File Size via URL (imgproxy_url)\nDESCRIPTION: Shows how to apply autoquality based on file size for a specific image request using URL parameters. The format is `autoquality:method:target:min_quality:max_quality`. In this example, it uses the `size` method, targets a file size of 10240 bytes, allows quality between 10 and 80.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Dimensions\nDESCRIPTION: Demonstrates the JSON structure for image dimension information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"width\": 7360,\n  \"height\": 4912\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Google Cloud Storage URL with Generation Parameter\nDESCRIPTION: Demonstrates the URL format for accessing files in Google Cloud Storage buckets with an optional generation parameter. The URL follows the format gs://{bucket_name}/{file_key} with an optional query string for specifying object generation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: BlurHash Response Example - JSON\nDESCRIPTION: Provides a sample JSON response from imgproxy for a BlurHash calculation request. The output is a string representing the BlurHash, usable for fast, low-res previews. Input parameters are set in the URL; output is a single hash string. Intended for placeholder rendering scenarios.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"blurhash\\\": \\\"LLH-}fox0fRQ%Do}9as9_3%2M{S2\\\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Shared Credentials File for imgproxy\nDESCRIPTION: This snippet shows how to create an AWS credentials file in the home directory to provide authentication for imgproxy when accessing AWS services. This is an alternative to using environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Format option for image info retrieval\nDESCRIPTION: URL option to request the format and MIME type of an image, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nformat:%format\nf:%format\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with pnpm\nDESCRIPTION: Command to install project dependencies using pnpm package manager.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm i\n```\n\n----------------------------------------\n\nTITLE: Optimized Image Trimming with Chained Pipelines\nDESCRIPTION: Demonstrates how to optimize image trimming operations by first resizing the image in one pipeline and then performing the trim operation in a second pipeline.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/chained_pipelines.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/-/trim:10/...\n```\n\n----------------------------------------\n\nTITLE: Using Base64 Encoded Source URLs in imgproxy\nDESCRIPTION: Encodes the source URL with URL-safe Base64 encoding. The encoded URL can be split with / characters as needed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_29\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy source code\nDESCRIPTION: Clone the imgproxy GitHub repository or download a specific version of the source code using curl and tar.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Timestamp - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: These options (video_thumbnail_second and vts) configure the time (in seconds) at which a thumbnail is extracted from a video file. Intended to override the default video thumbnail extraction second from server configuration. Parameter: second (float/integer). Requires video file source support.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_14\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_second:%second\nvts:%second\n```\n\n----------------------------------------\n\nTITLE: Constructing imgproxy URL for Local Image Processing\nDESCRIPTION: This example demonstrates how to construct an imgproxy URL to resize a local image to fit 300x200 dimensions. It uses the 'local://' protocol to reference a file in the configured local filesystem root.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fit:300:200:no:0/plain/local:///logos/imgproxy.png@jpg\n```\n\n----------------------------------------\n\nTITLE: Pages number option response example\nDESCRIPTION: Sample JSON response showing the number of pages in an image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pages_number\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Enabling TCMalloc for imgproxy\nDESCRIPTION: Commands to install Google's TCMalloc and enable it using LD_PRELOAD for improved memory allocation performance in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/memory_usage_tweaks.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install libtcmalloc-minimal4\nLD_PRELOAD='/usr/lib/x86_64-linux-gnu/libtcmalloc_minimal.so.4' imgproxy\n```\n\n----------------------------------------\n\nTITLE: Listing imgproxy-Specific OpenTelemetry Environment Variables - Markdown\nDESCRIPTION: This snippet enumerates the imgproxy-specific environment variables used for OpenTelemetry configuration, especially for customizing trace ID generation and TLS certificate setup. It provides allowable values for some variables and brief descriptions for each. This aids in reference and correct configuration during deployment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* `IMGPROXY_OPEN_TELEMETRY_TRACE_ID_GENERATOR`: the desired trace ID generator. Supported values are:\\n    * `xray`: _(default)_ Amazon X-Ray compatible trace ID generator\\n    * `random`: random trace ID generator\\n* [TLS configuration](#tls-configuration) environment variables.\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv9 Model to ONNX (FP16) using Bash\nDESCRIPTION: Bash command using the YOLOv9 `export.py` script to convert a YOLOv9 model (`.pt`) to ONNX format with FP16 precision. Requires a CUDA-compatible GPU and uses the `--half` flag.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP16 precision (CUDA-compatible GPU is required)\npython export.py \\\n  --weights yolov9-s.pt \\\n  --include onnx \\\n  --simplify \\\n  --half\n```\n```\n\n----------------------------------------\n\nTITLE: Final Encrypted URL for imgproxy\nDESCRIPTION: This is an example of how to use the encrypted URL in an imgproxy request. The encrypted URL is prepended with the '/enc/' segment in the URL path.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.28.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/rs:fit:300:300/enc/p5VjorNdhs7mRRw8gA9TWoRlGci3l1kuzqN43UQlRaRIQ0qtBKW3qFABIsx-ZRz_cVc8iVTYbhsNsxNBL1BHaQ\n```\n\n----------------------------------------\n\nTITLE: Downloading a Specific imgproxy Version as Tarball\nDESCRIPTION: Download a specific version of imgproxy source code as a tarball. This example downloads version 3.20.0.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/installation.mdx#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image IPTC and Photoshop Metadata\nDESCRIPTION: Example JSON response when requesting IPTC and Photoshop metadata information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iptc\": {\n    \"Name\": \"Spider-Man\",\n    \"Caption\": \"Spider-Man swings on the web\",\n    \"Copyright Notice\": \"Daily Bugle\",\n    \"Keywords\": [\"spider-man\", \"menance\", \"offender\"]\n  },\n  \"photoshop\": {\n    \"resolution\": {\n      \"XResolution\": 240,\n      \"XResolutionUnit\": \"inches\",\n      \"WidthUnit\": \"inches\",\n      \"YResolution\": 240,\n      \"YResolutionUnit\": \"inches\",\n      \"HeightUnit\": \"inches\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring New Relic Environment Variables for imgproxy\nDESCRIPTION: This snippet shows the environment variables that need to be set to enable and configure New Relic integration with imgproxy. It includes the required license key and optional application name and labels.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/monitoring/new_relic.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Register at New Relic and get a license key.\n2. Set the `IMGPROXY_NEW_RELIC_KEY` environment variable to the license key.\n3. _(optional)_ Set the `IMGPROXY_NEW_RELIC_APP_NAME` environment variable to be the desired application name.\n4. _(optional)_ Set the `IMGPROXY_NEW_RELIC_LABELS` environment variable to be the desired list of labels. Example: `label1=value1;label2=value2`.\n```\n\n----------------------------------------\n\nTITLE: Selecting Page Number for Multi-page Images\nDESCRIPTION: Specifies which page to use in paginated images (PDF, TIFF) or animated images (GIF, WebP). Page numbering starts at zero.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_58\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npage:%page\npg:%page\n```\n\n----------------------------------------\n\nTITLE: Local File Source URL Format\nDESCRIPTION: Example of the URL format used to reference a local file in imgproxy using the local:/// protocol prefix.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocal:///logos/imgproxy.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Principal Authentication\nDESCRIPTION: Environment variables required for authenticating with Azure Blob Storage using a Service Principal with secret authentication.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_CLIENT_ID=your_client_id\nAZURE_TENANT_ID=your_tenant_id\nAZURE_CLIENT_SECRET=your_client_secret\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Shared Credentials File for AWS Systems Manager\nDESCRIPTION: This snippet shows how to create an AWS credentials file in the home directory for imgproxy to authenticate with AWS Systems Manager Parameter Store. This method is an alternative to using environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Defining Expires Option in imgproxy URL\nDESCRIPTION: Specifies the imgproxy URL option to set an expiration time for the processed image URL. Imgproxy will return a 404 Not Found error if the current time is past the provided Unix `%timestamp`. Default is empty (no expiration).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_24\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexpires:%timestamp\nexp:%timestamp\n```\n\n----------------------------------------\n\nTITLE: Creating Video Thumbnail Animations\nDESCRIPTION: Generates animated images from video frames with customizable timing and frame parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_64\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_animation:%step:%delay:%frames:%frame_width:%frame_height:%extend_frame:%trim:%fill:%focus_x:%focus_y\nvta:%step:%delay:%frames:%frame_width:%frame_height:%extend_frame:%trim:%fill:%focus_x:%focus_y\n```\n\n----------------------------------------\n\nTITLE: Applying Color Overlay in Imgproxy\nDESCRIPTION: Places a color overlay on the processed image with specified opacity and color. Optionally keeps the alpha channel of the original image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_36\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncolorize:%opacity:%color:%keep_alpha\ncol:%opacity:%color:%keep_alpha\n```\n\n----------------------------------------\n\nTITLE: Applying Patch for YOLOv10 ONNX Export using Bash\nDESCRIPTION: Bash command using `curl` and `git apply` to download and apply a patch to the local YOLOv10 repository code. This patch modifies the export script to remove NMS and postprocessing steps, making it suitable for imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n```bash\ncurl -Ls https://gist.githubusercontent.com/DarthSim/216551dfd58e5628290e90c1d358704b/raw/27a828a48c84f93e0e70b14923bf697541ebe5a1/yolov10.patch | git apply\n```\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image Color Palette\nDESCRIPTION: Example JSON response when requesting a color palette for an image from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"palette\": [\n    { \"R\": 189, \"G\": 178, \"B\": 169, \"A\": 255 },\n    { \"R\": 83, \"G\": 79, \"B\": 67, \"A\": 255 }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Pipeline After Preset Resolution\nDESCRIPTION: Demonstrates the final processing pipeline after resolving preset and URL parameters in a chained configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: Size option response example\nDESCRIPTION: Sample JSON response showing the size of an image file in bytes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"size\": 123456\n}\n```\n\n----------------------------------------\n\nTITLE: Example Unsigned imgproxy URL\nDESCRIPTION: Sample imgproxy URL before applying signature for image processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/signing_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\nhttp://imgproxy.example.com/insecure/rs:fill:300:400:0/g:sm/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced JPEG Compression in imgproxy\nDESCRIPTION: Sets various options for advanced JPEG compression, including progressive compression, chrominance subsampling, and quantization tables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_18\n\nLANGUAGE: markdown\nCODE:\n```\n* [`IMGPROXY_JPEG_PROGRESSIVE`]: when `true`, enables progressive JPEG compression. Default: `false`\n* [`IMGPROXY_JPEG_NO_SUBSAMPLE`]: ((pro)) when `true`, chrominance subsampling is disabled. This will improve quality at the cost of larger file size. Default: `false`\n* [`IMGPROXY_JPEG_TRELLIS_QUANT`]: ((pro)) when `true`, enables trellis quantisation for each 8x8 block. Reduces file size but increases compression time. Default: `false`\n* [`IMGPROXY_JPEG_OVERSHOOT_DERINGING`]: ((pro)) when `true`, enables overshooting of samples with extreme values. Overshooting may reduce ringing artifacts from compression, in particular in areas where black text appears on a white background. Default: `false`\n* [`IMGPROXY_JPEG_OPTIMIZE_SCANS`]: ((pro)) when `true`, splits the spectrum of DCT coefficients into separate scans. Reduces file size but increases compression time. Requires `IMGPROXY_JPEG_PROGRESSIVE` to be true. Default: `false`\n* [`IMGPROXY_JPEG_QUANT_TABLE`]: ((pro)) quantization table to use. Supported values are:\n  * `0`: Table from JPEG Annex K (default)\n  * `1`: Flat table\n  * `2`: Table tuned for MSSIM on Kodak image set\n  * `3`: Table from ImageMagick by N. Robidoux\n  * `4`: Table tuned for PSNR-HVS-M on Kodak image set\n  * `5`: Table from Relevance of Human Vision to JPEG-DCT Compression (1992)\n  * `6`: Table from DCTune Perceptual Optimization of Compressed Dental X-Rays (1997)\n  * `7`: Table from A Visual Detection Model for DCT Coefficient Quantization (1993)\n  * `8`: Table from An Improved Detection Model for DCT Coefficient Quantization (1993)\n```\n\n----------------------------------------\n\nTITLE: TLS Environment Variable Configuration - Markdown\nDESCRIPTION: This Markdown snippet outlines the environment variables needed to set up TLS/mTLS authentication when connecting imgproxy to a secured OpenTelemetry collector. It details the necessity of client and server certificates, their encoding, and the default state of each variable, supporting users implementing secure telemetry pipelines.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/monitoring/open_telemetry.mdx#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* `IMGPROXY_OPEN_TELEMETRY_SERVER_CERT`: OpenTelemetry collector TLS certificate, PEM-encoded (you can replace line breaks with `\\n`). Default: blank\\n\\nIf your collector uses mTLS for mutual authentication, you'll also need to specify the client's certificate/key pair:\\n\\n* `IMGPROXY_OPEN_TELEMETRY_CLIENT_CERT`: OpenTelemetry client TLS certificate, PEM-encoded (you can replace line breaks with `\\n`). Default: blank\\n* `IMGPROXY_OPEN_TELEMETRY_CLIENT_KEY`: OpenTelemetry client TLS key, PEM-encoded (you can replace line breaks with `\\n`). Default: blank\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv8 Model to ONNX (FP16 Apple Silicon) using Bash\nDESCRIPTION: Bash command using the `yolo` CLI tool to export a YOLOv8 model (`.pt`) to ONNX format with FP16 precision, targeting an Apple Silicon GPU (Metal Performance Shaders). Uses the `--half` flag and specifies the device as `mps`.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/features/object_detection.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n```bash\n# Export with FP16 precision using Apple Silicon GPU\nyolo export \\\n  model=yolov8n.pt \\\n  format=onnx \\\n  simplify=True \\\n  half=True \\\n  device=mps\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Saturation Adjustment Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `saturation` option (Pro feature) to adjust the image saturation. The `saturation` value is a positive float, where 1 leaves saturation unchanged. Default is 1.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_27\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsaturation:%saturation\nsa:%saturation\n```\n\n----------------------------------------\n\nTITLE: XMP option response example\nDESCRIPTION: Sample JSON response showing XMP metadata from an image, including auxiliary data, Dublin Core elements, and Photoshop-specific metadata.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"xmp\": {\n    \"aux\": {\n      \"ApproximateFocusDistance\": \"4294967295/1\",\n      \"ImageNumber\": \"16604\",\n      \"Lens\": \"16.0-35.0 mm f/4.0\",\n      \"LensID\": \"163\",\n      \"LensInfo\": \"160/10 350/10 40/10 40/10\",\n      \"SerialNumber\": \"12345678\"\n    },\n    \"dc\": {\n      \"creator\": [\"Peter B. Parker\"],\n      \"publisher\": [\"Daily Bugle\"],\n      \"subject\": [\"spider-man\", \"menance\", \"offender\"],\n      \"format\": \"image/jpeg\"\n    },\n    \"photoshop\": {\n      \"DateCreated\": \"2016-09-11T18:44:50.003\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Image Dimensions Response Example\nDESCRIPTION: Example JSON response containing image width and height information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"width\": 7360,\n  \"height\": 4912\n}\n```\n\n----------------------------------------\n\nTITLE: Hashsum Calculation Response Example - JSON\nDESCRIPTION: Sample JSON output for hashsum calculation via imgproxy. Results are keyed by algorithm (md5, sha256, etc.) with their respective hex digest values. Inputs are specified hash types and a processable image. No hashsum is returned for video files due to download limitations.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"hashsums\\\": {\\n    \\\"md5\\\": \\\"cc507f81206a4c7d0a995a07c3d9f43a\\\",\\n    \\\"sha256\\\": \\\"621f6c6d68de754c6cdf3d286b7837634ce9f273f30f377b3e0df0568a23cee0\\\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: AES-CBC Encrypted Source URL in imgproxy\nDESCRIPTION: Example of using AES-CBC encrypted source URLs in imgproxy, showing both basic and extension-specified formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_77\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog.png\n```\n\n----------------------------------------\n\nTITLE: Object Detection Info Response\nDESCRIPTION: Example JSON response when requesting object detection information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"objects\": [\n    {\n      \"class_id\": 0,\n      \"class_name\": \"face\",\n      \"confidence\": 0.985792,\n      \"left\": 0.6602726057171822,\n      \"top\": 0.23434072732925415,\n      \"width\": 0.11385439336299896,\n      \"height\": 0.18671900033950806\n    },\n    {\n      \"class_id\": 0,\n      \"class_name\": \"face\",\n      \"confidence\": 0.9810329,\n      \"left\": 0.4354642778635025,\n      \"top\": 0.3503067269921303,\n      \"width\": 0.10691609978675842,\n      \"height\": 0.18357203900814056\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy Source as Tarball - bash\nDESCRIPTION: These commands download the latest source tarball for imgproxy using curl and extract it to a directory. Requirements: curl and tar. Optional parameter: the version/branch of imgproxy. Output is a project directory with the source prepared for building or installation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\\ncd imgproxy\\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with AWS Credentials via Environment Variables\nDESCRIPTION: This snippet demonstrates how to run imgproxy with AWS credentials specified as environment variables. It shows both a direct command and a Docker run command.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Applying Presets with imgproxy URL Option\nDESCRIPTION: Defines the imgproxy URL option `preset` (or `pr`) which allows applying one or more predefined processing presets to the image request. Multiple preset names can be specified, separated by colons.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_18\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\npreset:%preset_name1:%preset_name2:...:%preset_nameN\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n```\n\n----------------------------------------\n\nTITLE: Page Selection for Multi-page Images\nDESCRIPTION: Selects specific page from multi-page or animated image formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_56\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npage:%page\npg:%page\n```\n\n----------------------------------------\n\nTITLE: Setting Crawler Access Rules in robots.txt\nDESCRIPTION: Defines default crawler behavior by allowing all user agents (*) access and specifies the XML sitemap location at docs.imgproxy.net/sitemap.xml\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nSitemap: https://docs.imgproxy.net/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Azure Blob Storage URL Format\nDESCRIPTION: Example format for accessing files in Azure Blob Storage containers through imgproxy\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nabs://%bucket_name/%file_key\n```\n\n----------------------------------------\n\nTITLE: Using Size-based Autoquality in imgproxy URL\nDESCRIPTION: Processing option to set size-based autoquality for a specific image, targeting 10240 bytes with quality range from 10 to 80.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\n----------------------------------------\n\nTITLE: Applying Presets in imgproxy\nDESCRIPTION: Defines a list of preset names to be applied to the image processing. Multiple presets can be used in a single URL.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_24\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npreset:%preset_name1:%preset_name2:...:%preset_nameN\npr:%preset_name1:%preset_name2:...:%preset_nameN\n```\n\n----------------------------------------\n\nTITLE: Palette Response Example - JSON\nDESCRIPTION: Shows the JSON structure returned by imgproxy when palette extraction is requested. The output contains an array of RGBA objects corresponding to detected palette entries. Inputs are the palette request URL option and an eligible image. Outputs are RGBA values. No language restrictions. Intended for illustrative purposes.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \\\"palette\\\": [\\n    { \\\"R\\\": 189, \\\"G\\\": 178, \\\"B\\\": 169, \\\"A\\\": 255 },\\n    { \\\"R\\\": 83, \\\"G\\\": 79, \\\"B\\\": 67, \\\"A\\\": 255 }\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Video Metadata and Streams Info\nDESCRIPTION: Example JSON response when requesting video metadata and streams information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"video_meta\": {\n    \"com.android.version\": \"9\",\n    \"compatible_brands\": \"isommp42\",\n    \"creation_time\": \"2022-01-12T15:04:10.000000Z\",\n    \"location\": \"+46.4845+030.6848/\",\n    \"location-eng\": \"+46.4845+030.6848/\",\n    \"major_brand\": \"mp42\",\n    \"minor_version\": \"0\"\n  },\n  \"video_streams\": [\n    {\n      \"type\": \"video\",\n      \"codec\": \"h264\",\n      \"duration\": 12.345,\n      \"bps\": 16910024,\n      \"fps\": 24,\n      \"language\": \"eng\"\n    },\n    {\n      \"type\": \"audio\",\n      \"codec\": \"eac3\",\n      \"duration\": 12.345,\n      \"bps\": 768000,\n      \"frequency\": 48000,\n      \"layout\": \"5.1(side)\",\n      \"language\": \"eng\"\n    },\n    {\n      \"type\": \"subtitle\",\n      \"codec\": \"subrip\",\n      \"language\": \"eng\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Heroku Container Registry Deployment\nDESCRIPTION: Commands to deploy a specific version of imgproxy to Heroku using Container Registry.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/installation.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nheroku create your-application\nheroku stack:set container -a your-application\nheroku container:login\n# Replace \"v3\" with the imgproxy version you want to deploy\ndocker pull ghcr.io/imgproxy/imgproxy:v3-amd64\ndocker tag ghcr.io/imgproxy/imgproxy:v3-amd64 registry.heroku.com/your-application/web\ndocker push registry.heroku.com/your-application/web\nheroku container:release web -a your-application\n```\n\n----------------------------------------\n\nTITLE: Detect objects option for image info retrieval\nDESCRIPTION: URL option to request object detection data from an image, which can be enabled using 1, t, or true values. Returns relative coordinates of found objects.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_17\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ndetect_objects:%detect_objects\ndo:%detect_objects\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML front matter block defining the page description for documentation\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ndescription: Learn about how to connect your Azure Blob Storage containers to imgproxy\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnail Keyframes - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Allows specification of the number of keyframes for video thumbnail selection using the `%keyframes` URL parameter. Changes the source for static thumbnail extraction, overriding the configuration default. Useful for precise thumbnail customization for videos in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_44\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nvideo_thumbnail_keyframes:%keyframes\\nvtk:%keyframes\n```\n\n----------------------------------------\n\nTITLE: Using Presets in Only-Presets Mode\nDESCRIPTION: Example URL structure when imgproxy is in presets-only mode, showing how to chain multiple presets (thumbnail, blurry, watermarked) for image processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Using Chained Pipelines in imgproxy URL Structure\nDESCRIPTION: Demonstrates the basic syntax for starting a new processing pipeline in imgproxy by using a minus sign (-) in the URL path. This allows applying different processing operations sequentially.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/features/chained_pipelines.mdx#2025-04-23_snippet_0\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:500/crop:1000/-/trim:10/...\n                        ^ the new pipeline starts here\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair in Bash\nDESCRIPTION: Command to generate a random hex-encoded key/salt pair using xxd utility.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/signing_url.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Calculating Image Hashsums with imgproxy URL Option\nDESCRIPTION: Specifies the imgproxy URL option to calculate and return specified hashsums of the source image. A list of hashsum types (`md5`, `sha1`, `sha256`, `sha512`) must be provided. This operation requires the image to be fully downloaded and is not supported for video files (the `hashsums` field will be skipped).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_11\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\ncalc_hashsums:%hashsum_type1:%hashsum_type2:...:%hashsum_typeN\nchs:%hashsum_type1:%hashsum_type2:...:%hashsum_typeN\n```\n```\n\n----------------------------------------\n\nTITLE: Cookie Configuration Settings\nDESCRIPTION: Environment variables for controlling cookie handling and passthrough behavior in image requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/configuration/options.mdx#2025-04-23_snippet_3\n\nLANGUAGE: properties\nCODE:\n```\nIMGPROXY_COOKIE_PASSTHROUGH=false\nIMGPROXY_COOKIE_BASE_URL=\"\"\n```\n\n----------------------------------------\n\nTITLE: Error Reporting Configuration\nDESCRIPTION: Environment variables for configuring error reporting to various services like Bugsnag, Honeybadger, Sentry, and Airbrake\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_REPORT_DOWNLOADING_ERRORS=true\nIMGPROXY_BUGSNAG_KEY=\nIMGPROXY_HONEYBADGER_KEY=\nIMGPROXY_SENTRY_DSN=\nIMGPROXY_AIRBRAKE_PROJECT_ID=\n```\n\n----------------------------------------\n\nTITLE: Image Size Response Example\nDESCRIPTION: Example JSON response when requesting image file size information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"size\": 123456\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File\nDESCRIPTION: Shows the structure of the .aws/credentials file used for storing AWS access keys. This method can be used as an alternative to environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/amazon_s3.mdx#2025-04-23_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Downloading imgproxy source code\nDESCRIPTION: Clone the imgproxy GitHub repository or download a specific version of the source code as a tarball. This is useful for building imgproxy from source or contributing to the project.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/installation.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/imgproxy/imgproxy.git\ncd imgproxy\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/master.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir imgproxy\ncd imgproxy\ncurl -Ls https://github.com/imgproxy/imgproxy/archive/v3.20.0.tar.gz \\\n  | tar -xz --strip-components 1 -C .\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Timestamp with imgproxy URL Option\nDESCRIPTION: Specifies the imgproxy URL option `expires` (or `exp`) to set an expiration time for the processed image URL. imgproxy checks the provided Unix timestamp and returns a 404 Not Found error if the current time is past the specified timestamp.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_17\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\nexpires:%timestamp\nexp:%timestamp\n```\n```\n\n----------------------------------------\n\nTITLE: Multiple Watermarks Using Chained Pipelines\nDESCRIPTION: Shows how to apply multiple watermarks to an image by using chained pipelines, where each pipeline handles a different watermark operation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/features/chained_pipelines.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../rs:fit:500:500/wm:0.5:nowe/wmu:aW1hZ2UxCg/-/wm:0.7:soea/wmu:aW1hZ2UyCg/...\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Environment Variables for imgproxy\nDESCRIPTION: List of environment variables required to configure Datadog integration with imgproxy, including agent connection settings, tracing options, and runtime metrics configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/monitoring/datadog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDD_AGENT_HOST=localhost\nDD_TRACE_AGENT_PORT=8126\nDD_DOGSTATSD_PORT=8125\nDD_SERVICE=imgproxy\nDD_ENV=\nDD_TRACE_SOURCE_HOSTNAME=\nDD_TRACE_REPORT_HOSTNAME=false\nDD_TAGS=datacenter:njc,key2:value2\nDD_TRACE_ANALYTICS_ENABLED=false\nDD_RUNTIME_METRICS_ENABLED=false\nDD_TRACE_STARTUP_LOGS=true\nDD_TRACE_DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Setting Video Thumbnail Keyframes with imgproxy URL Option\nDESCRIPTION: Specifies the imgproxy URL option `video_thumbnail_keyframes` (or `vtk`) which allows overriding the `IMGPROXY_VIDEO_THUMBNAIL_KEYFRAMES` configuration setting. This parameter controls whether to use keyframes when generating the video thumbnail.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_15\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\nvideo_thumbnail_keyframes:%keyframes\nvtk:%keyframes\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Error Reporting Behavior\nDESCRIPTION: Controls whether imgproxy reports errors encountered during image downloading to the configured error reporting service. Set to `true` to enable reporting, `false` to disable.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_REPORT_DOWNLOADING_ERRORS\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration for imgproxy\nDESCRIPTION: Shows the structure of the AWS credentials file that should be placed in the .aws/credentials path in the home directory for authentication.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Image Bands\nDESCRIPTION: Demonstrates the JSON structure for image bands information returned by imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/getting_info.mdx#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bands\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image XMP Metadata\nDESCRIPTION: Example JSON response when requesting XMP metadata information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"xmp\": {\n    \"aux\": {\n      \"ApproximateFocusDistance\": \"4294967295/1\",\n      \"ImageNumber\": \"16604\",\n      \"Lens\": \"16.0-35.0 mm f/4.0\",\n      \"LensID\": \"163\",\n      \"LensInfo\": \"160/10 350/10 40/10 40/10\",\n      \"SerialNumber\": \"12345678\"\n    },\n    \"dc\": {\n      \"creator\": [\"Peter B. Parker\"],\n      \"publisher\": [\"Daily Bugle\"],\n      \"subject\": [\"spider-man\", \"menance\", \"offender\"],\n      \"format\": \"image/jpeg\"\n    },\n    \"photoshop\": {\n      \"DateCreated\": \"2016-09-11T18:44:50.003\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry TLS Configuration Variables\nDESCRIPTION: Environment variables for configuring TLS certificates and keys for secure communication with OpenTelemetry collector.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/monitoring/open_telemetry.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_OPEN_TELEMETRY_SERVER_CERT=<PEM-encoded-cert>\nIMGPROXY_OPEN_TELEMETRY_CLIENT_CERT=<PEM-encoded-cert>\nIMGPROXY_OPEN_TELEMETRY_CLIENT_KEY=<PEM-encoded-key>\n```\n\n----------------------------------------\n\nTITLE: Detect objects option response example\nDESCRIPTION: Sample JSON response showing objects detected in an image with their class identification, confidence level, and relative coordinates.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"objects\": [\n    {\n      \"class_id\": 0,\n      \"class_name\": \"face\",\n      \"confidence\": 0.985792,\n      \"left\": 0.6602726057171822,\n      \"top\": 0.23434072732925415,\n      \"width\": 0.11385439336299896,\n      \"height\": 0.18671900033950806\n    },\n    {\n      \"class_id\": 0,\n      \"class_name\": \"face\",\n      \"confidence\": 0.9810329,\n      \"left\": 0.4354642778635025,\n      \"top\": 0.3503067269921303,\n      \"width\": 0.10691609978675842,\n      \"height\": 0.18357203900814056\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Combined Pipeline Chain\nDESCRIPTION: Demonstrates the final result of combining preset chains with URL chains.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/chained_pipelines.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../width:400/-/width:500/height:300/-/width:600/height:200/-/width:100/height:200/...\n```\n\n----------------------------------------\n\nTITLE: XMP option for image info retrieval\nDESCRIPTION: URL option to request the XMP metadata of an image, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_13\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nxmp:%xmp\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Logging Configuration\nDESCRIPTION: Configuration variables for setting up logging formats and levels in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_13\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_LOG_FORMAT=pretty\nIMGPROXY_LOG_LEVEL=info\nIMGPROXY_SYSLOG_ENABLE=true\nIMGPROXY_SYSLOG_LEVEL=info\nIMGPROXY_SYSLOG_NETWORK=tcp\nIMGPROXY_SYSLOG_ADDRESS=your-address\nIMGPROXY_SYSLOG_TAG=imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Datadog Environment Variables for imgproxy\nDESCRIPTION: This snippet shows the various environment variables used to configure the Datadog tracer for imgproxy. It includes settings for agent connection, service name, environment, hostname, tags, and debug options.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/monitoring/datadog.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nDD_AGENT_HOST=localhost\nDD_TRACE_AGENT_PORT=8126\nDD_DOGSTATSD_PORT=8125\nDD_SERVICE=imgproxy\nDD_ENV=\nDD_TRACE_SOURCE_HOSTNAME=\nDD_TRACE_REPORT_HOSTNAME=false\nDD_TAGS=datacenter:njc,key2:value2\nDD_TRACE_ANALYTICS_ENABLED=false\nDD_RUNTIME_METRICS_ENABLED=false\nDD_TRACE_STARTUP_LOGS=true\nDD_TRACE_DEBUG=false\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Source File Size in imgproxy\nDESCRIPTION: Redefines the IMGPROXY_MAX_SRC_FILE_SIZE configuration on a per-request basis. Requires IMGPROXY_ALLOW_SECURITY_OPTIONS to be set to true as it modifies a security restriction.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_75\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_file_size:%size\nmsfs:%size\n```\n\n----------------------------------------\n\nTITLE: Starting Imgproxy with Encryption Key\nDESCRIPTION: Command to start Imgproxy with a configured source URL encryption key\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/encrypting_source_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_SOURCE_URL_ENCRYPTION_KEY=\"1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\" imgproxy\n```\n\n----------------------------------------\n\nTITLE: Crop coordinates option response example\nDESCRIPTION: Sample JSON response showing the relative crop coordinates (left, top, width, height) for defined crop parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crop\": {\n    \"left\": 0.383203125,\n    \"top\": 0.2603861907548274,\n    \"width\": 0.1953125,\n    \"height\": 0.3510825043885313\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Page or Animation Frame - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: This configuration snippet allows specifying a page index (for paginated formats like PDF or TIFF) or animation frame (for GIF, WebP). Both verbose and abbreviated forms are included. Parameter: page (starts from zero). Used when the image source supports pagination/animation. Outputs the selected page/frame for processing or serving.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_13\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\npage:%page\npg:%page\n```\n\n----------------------------------------\n\nTITLE: URL Processing Options for Different Autoquality Methods\nDESCRIPTION: Examples of how to specify autoquality settings in imgproxy URLs for various methods.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/autoquality.mdx#2025-04-23_snippet_4\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:none/...\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:size:10240:10:80/...\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Memory Usage Configuration\nDESCRIPTION: Configuration variables for optimizing memory usage in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_15\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_DOWNLOAD_BUFFER_SIZE=0\nIMGPROXY_FREE_MEMORY_INTERVAL=10\nIMGPROXY_BUFFER_POOL_CALIBRATION_THRESHOLD=1024\nIMGPROXY_MALLOC=jemalloc\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Azure Blob Storage Connection\nDESCRIPTION: Essential environment variables needed to enable and configure Azure Blob Storage integration with imgproxy. This includes the basic connection settings and storage account name.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_USE_ABS=true\nIMGPROXY_ABS_NAME=your_azure_account_name\nIMGPROXY_ABS_ENDPOINT=your_endpoint_url\n```\n\n----------------------------------------\n\nTITLE: Using AES-CBC encrypted source URL with imgproxy info endpoint\nDESCRIPTION: Example of providing an AES-CBC encrypted source URL in the imgproxy info endpoint, which requires prepending with '/enc/' and can be split with '/' characters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/getting_info.mdx#2025-04-23_snippet_3\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Licensing Configuration\nDESCRIPTION: Configuration variables for setting up imgproxy Pro licensing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_14\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_LICENSE_KEY=your-license-key\nIMGPROXY_LICENSE_DEVELOPMENT_MODE=false\n```\n\n----------------------------------------\n\nTITLE: Verifying Source Image Hashsum - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Allows checking a source image's hash against an expected value. Supported algorithms: md5, sha1, sha256, sha512. Accepted forms: 'hashsum' and short alias 'hs'. Parameters: hashsum_type, hashsum. On mismatch, imgproxy responds with 422 status. Inputs: hashsum_type, hashsum. Feature is opt-out by setting type to 'none'. Video files are not supported for check.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_19\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nhashsum:%hashsum_type:%hashsum\nhs:%hashsum_type:%hashsum\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Airbrake Configuration\nDESCRIPTION: Configuration variables for setting up Airbrake error reporting in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_12\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_AIRBRAKE_PROJECT_ID=your-project-id\nIMGPROXY_AIRBRAKE_PROJECT_KEY=your-project-key\nIMGPROXY_AIRBRAKE_ENVIRONMENT=production\n```\n\n----------------------------------------\n\nTITLE: Color Profile Management\nDESCRIPTION: Controls stripping of ICC color profile and conversion to sRGB.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_46\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nstrip_color_profile:%strip_color_profile\nscp:%strip_color_profile\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Image EXIF Metadata\nDESCRIPTION: Example JSON response when requesting EXIF metadata information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exif\": {\n    \"Aperture\": \"8.00 EV (f/16.0)\",\n    \"Contrast\": \"Normal\",\n    \"Date and Time\": \"2016:09:11 22:15:03\",\n    \"Model\": \"NIKON D810\",\n    \"Software\": \"Adobe Photoshop Lightroom 6.1 (Windows)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Base64 Encoded Source URL in imgproxy\nDESCRIPTION: Shows how to provide a source image URL encoded using URL-safe Base64. The encoded string follows the processing options in the URL path. Slashes (`/`) can be used within the Base64 string to split it if needed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/usage/getting_info.mdx#2025-04-23_snippet_29\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration for SSM\nDESCRIPTION: Configuration format for AWS credentials file used with Systems Manager Parameter Store.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/loading_environment_variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Bad Source URL Configuration Example\nDESCRIPTION: Demonstrates incorrect way of configuring allowed source URLs without trailing slash, which could lead to security vulnerabilities.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://example.com\n```\n\n----------------------------------------\n\nTITLE: Processing URL for DSSIM-based Autoquality\nDESCRIPTION: URL processing option example for DSSIM-based autoquality with specific parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/features/autoquality.mdx#2025-04-23_snippet_5\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:dssim:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: Image Format Response Example\nDESCRIPTION: Example JSON response when requesting image format information.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/usage/getting_info.mdx#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"jpeg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Local File Path Format for imgproxy\nDESCRIPTION: Example of the local file path format used as the source URL for accessing images in the configured directory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/image_sources/local_files.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlocal:///logos/imgproxy.png\n```\n\n----------------------------------------\n\nTITLE: Specifying S3 Object Version with Custom Query Separator\nDESCRIPTION: Shows how to specify the S3 object version using a custom query separator. This is useful when filenames in S3 may contain question marks.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/image_sources/amazon_s3.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ns3://%bucket_name/%file_key?version=%version_id\n```\n\n----------------------------------------\n\nTITLE: Dominant Colors Info Response\nDESCRIPTION: Example JSON response when requesting dominant colors information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dominant_colors\": {\n    \"dark_muted\": { \"R\": 75, \"G\": 70, \"B\": 57 },\n    \"dark_vibrant\": { \"R\": 90, \"G\": 78, \"B\": 43 },\n    \"light_muted\": { \"R\": 167, \"G\": 156, \"B\": 130 },\n    \"light_vibrant\": { \"R\": 212, \"G\": 198, \"B\": 165 },\n    \"muted\": { \"R\": 155, \"G\": 146, \"B\": 120 },\n    \"vibrant\": { \"R\": 172, \"G\": 146, \"B\": 83 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Gaussian Blur with imgproxy URL Option\nDESCRIPTION: Applies a gaussian blur filter to the resulting image. The `sigma` parameter specifies the size of the gaussian mask used for the blur effect. This option is disabled by default.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_30\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nblur:%sigma\nbl:%sigma\n```\n\n----------------------------------------\n\nTITLE: XMP Metadata Info Response\nDESCRIPTION: Example JSON response when requesting XMP metadata from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"xmp\": {\n    \"aux\": {\n      \"ApproximateFocusDistance\": \"4294967295/1\",\n      \"ImageNumber\": \"16604\",\n      \"Lens\": \"16.0-35.0 mm f/4.0\",\n      \"LensID\": \"163\",\n      \"LensInfo\": \"160/10 350/10 40/10 40/10\",\n      \"SerialNumber\": \"12345678\"\n    },\n    \"dc\": {\n      \"creator\": [\"Peter B. Parker\"],\n      \"publisher\": [\"Daily Bugle\"],\n      \"subject\": [\"spider-man\", \"menance\", \"offender\"],\n      \"format\": \"image/jpeg\"\n    },\n    \"photoshop\": {\n      \"DateCreated\": \"2016-09-11T18:44:50.003\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ML-based Autoquality in imgproxy\nDESCRIPTION: Complete configuration for ML-based quality selection including neural network paths and DSSIM parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, and AVIF\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\n```\n\n----------------------------------------\n\nTITLE: Average Color Info Response\nDESCRIPTION: Example JSON response when requesting average color information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"average\": { \"R\": 139, \"G\": 132, \"B\": 121, \"A\": 255 }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting imgproxy with Key/Salt Configuration\nDESCRIPTION: Command to start imgproxy with specified hex-encoded key and salt values for URL signing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/signing_url.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_KEY=736563726574 IMGPROXY_SALT=68656C6C6F imgproxy\n```\n\n----------------------------------------\n\nTITLE: Colorspace option response example\nDESCRIPTION: Sample JSON response showing the colorspace of an image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"colorspace\": \"srgb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bands option response example\nDESCRIPTION: Sample JSON response showing the number of bands in an image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bands\": 3\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Source File Size - imgproxy URL Option - imgproxy_url_option\nDESCRIPTION: Allows override of IMGPROXY_MAX_SRC_FILE_SIZE via a `%size` URL parameter, adjusting security restrictions on input images. Must be enabled by global security config. Input is expected as a size value (bytes). No effect unless security options are allowed.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_50\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmax_src_file_size:%size\\nmsfs:%size\n```\n\n----------------------------------------\n\nTITLE: Custom Watermark URL Option in imgproxy\nDESCRIPTION: URL option format for applying custom watermarks using Base64-encoded URLs.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/features/watermark.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_url:%url\\nwmu:%url\n```\n\n----------------------------------------\n\nTITLE: EXIF Metadata Info Response\nDESCRIPTION: Example JSON response when requesting EXIF metadata from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exif\": {\n    \"Aperture\": \"8.00 EV (f/16.0)\",\n    \"Contrast\": \"Normal\",\n    \"Date and Time\": \"2016:09:11 22:15:03\",\n    \"Model\": \"NIKON D810\",\n    \"Software\": \"Adobe Photoshop Lightroom 6.1 (Windows)\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair (Bash)\nDESCRIPTION: This Bash command provides a quick example of how to generate a random 64-byte hex-encoded string suitable for use as an `IMGPROXY_KEY` or `IMGPROXY_SALT`. It uses the `xxd` utility to read 64 random bytes from `/dev/random`, format them as a continuous hex string (`-p -g 2 -l 64`), and `tr` to remove any potential newline characters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: BlurHash Info Response\nDESCRIPTION: Example JSON response when requesting BlurHash information from imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"blurhash\": \"LLH-}fox0fRQ%Do}9as9_3%2M{S2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Colorize Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `colorize` option (Pro feature) to place a color overlay on the image. Parameters include `opacity` (0 to disable), optional hex `color` (default black '000'), and optional `keep_alpha` (boolean `1`, `t`, `true`) to preserve the original image's alpha channel (default false).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_34\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\ncolorize:%opacity:%color:%keep_alpha\ncol:%opacity:%color:%keep_alpha\n```\n\n----------------------------------------\n\nTITLE: Adding Watermark Shadow\nDESCRIPTION: Adds a shadow effect to the watermark with configurable blur sigma.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_41\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_shadow:%sigma\nwmsh:%sigma\n```\n\n----------------------------------------\n\nTITLE: Accessing AES-CBC Encrypted Source URL - imgproxy URL - imgproxy_url\nDESCRIPTION: Illustrates providing a source URL encrypted with AES-CBC in imgproxy, using the '/enc/' prefix. Intended for advanced scenarios requiring URL protection. Input format is the base64-encoded ciphertext, possibly split across slashes. imgproxy is responsible for decryption given key configuration.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_53\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/enc/jwV3wUD9r4VBIzgv/ang3Hbh0vPpcm5cc/VO5rHxzonpvZjppG/2VhDnX2aariBYegH/jlhw_-dqjXDMm4af/ZDU6y5sBog\n```\n\n----------------------------------------\n\nTITLE: Sample format option for image info retrieval\nDESCRIPTION: URL option to request the sample format of an image (e.g., uchar, ushort, float), which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nsample_format:%sample_format\nsf:%sample_format\n```\n\n----------------------------------------\n\nTITLE: Configuring ML-based Autoquality in imgproxy\nDESCRIPTION: Configuration for machine learning based autoquality using neural networks. Includes paths to format-specific neural network models and quality parameters.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/features/autoquality.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"ml\"\n# Change value to the desired DSSIM\nIMGPROXY_AUTOQUALITY_TARGET=0.02\n# We're happy enough if the resulting DSSIM will differ from the desired by 0.001\nIMGPROXY_AUTOQUALITY_ALLOWED_ERROR=0.001\nIMGPROXY_AUTOQUALITY_MIN=70\nIMGPROXY_AUTOQUALITY_MAX=80\n# Quality 63 for AVIF is pretty the same as 80 for JPEG\nIMGPROXY_AUTOQUALITY_FORMAT_MIN=\"avif=60\"\nIMGPROXY_AUTOQUALITY_FORMAT_MAX=\"avif=65\"\n# Neural networks paths for JPEG, WebP, and AVIF\nIMGPROXY_AUTOQUALITY_JPEG_NET=\"/networks/autoquality-jpeg.pb\"\nIMGPROXY_AUTOQUALITY_WEBP_NET=\"/networks/autoquality-webp.pb\"\nIMGPROXY_AUTOQUALITY_AVIF_NET=\"/networks/autoquality-avif.pb\"\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n.../autoquality:ml:0.02:70:80:0.001/...\n```\n\n----------------------------------------\n\nTITLE: EXIF option for image info retrieval\nDESCRIPTION: URL option to request the EXIF metadata of an image, which can be enabled using 1, t, or true values.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/usage/getting_info.mdx#2025-04-23_snippet_9\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexif:%exif\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Key/Salt File Paths\nDESCRIPTION: Command line configuration for specifying file paths containing hex-coded keys and salts for imgproxy URL signatures.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/configuration/options.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nimgproxy -keypath /path/to/file/with/key -saltpath /path/to/file/with/salt\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Authentication Environment Variables for imgproxy\nDESCRIPTION: The environment variables needed to configure imgproxy's connection to OpenStack Swift Object Storage. These variables include authentication credentials, API key, auth URL, version, tenant, and domain settings.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_USE_SWIFT=true\nIMGPROXY_SWIFT_USERNAME=\nIMGPROXY_SWIFT_API_KEY=\nIMGPROXY_SWIFT_AUTH_URL=\nIMGPROXY_SWIFT_AUTH_VERSION=\nIMGPROXY_SWIFT_TENANT=\nIMGPROXY_SWIFT_DOMAIN=\n```\n\n----------------------------------------\n\nTITLE: Defining Expires Option (imgproxy URL)\nDESCRIPTION: Sets an expiration time for the generated URL using a Unix timestamp ('%timestamp'). If the current time is past the provided timestamp, imgproxy will return a 404 Not Found error. Default is empty (no expiration check).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/usage/getting_info.mdx#2025-04-23_snippet_17\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nexpires:%timestamp\nexp:%timestamp\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables\nDESCRIPTION: Examples of setting AWS credentials using environment variables for both direct execution and Docker container.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/loading_environment_variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Generating Random Key/Salt Pair for imgproxy (Bash)\nDESCRIPTION: This bash command generates a random 64-byte hex-encoded string that can be used as a key or salt for imgproxy's URL signature feature. It uses /dev/random for entropy and formats the output.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho $(xxd -g 2 -l 64 -p /dev/random | tr -d '\\n')\n```\n\n----------------------------------------\n\nTITLE: Defining Background Alpha Option for imgproxy URLs (Pro)\nDESCRIPTION: Specifies the `background_alpha` option (Pro feature) to add an alpha channel to the background color. The `alpha` value is a float between 0 and 1. Default is 1 (fully opaque).\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_23\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nbackground_alpha:%alpha\nbga:%alpha\n```\n\n----------------------------------------\n\nTITLE: New Relic Metrics Sent by imgproxy\nDESCRIPTION: This snippet lists the metrics that imgproxy sends to New Relic, including system resource usage, response times, and image processing information. It provides insights into imgproxy's performance and operation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/monitoring/new_relic.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n* CPU and memory usage\n* Response time\n* Queue time\n* Image downloading time\n* Image processing time\n* Errors that occurred while downloading and processing an image\n```\n\n----------------------------------------\n\nTITLE: Setting Watermark Size in imgproxy (Pro)\nDESCRIPTION: Defines the desired width and height of the watermark. Uses 'fit' resizing type and can calculate dimensions to maintain aspect ratio.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_41\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nwatermark_size:%width:%height\nwms:%width:%height\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials Configuration for Parameter Store\nDESCRIPTION: Example of AWS credentials configuration file for Parameter Store access\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Setting up AWS Credentials via Shared Credentials File\nDESCRIPTION: Demonstrates how to configure AWS credentials using a shared credentials file in the user's home directory. This approach stores AWS access key ID and secret access key in a configuration file.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Preserving Copyright Info in imgproxy\nDESCRIPTION: Retains copyright information while stripping other metadata when enabled. Overrides the IMGPROXY_KEEP_COPYRIGHT configuration for individual requests.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/usage/processing.mdx#2025-04-23_snippet_46\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nkeep_copyright:%keep_copyright\nkcr:%keep_copyright\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials in Shared Credentials File\nDESCRIPTION: This snippet shows the content of the .aws/credentials file used for storing AWS access credentials. It specifies the format for setting the access key ID and secret access key.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Setting Fallback Image URL in imgproxy\nDESCRIPTION: Specifies a custom fallback image to use when the source image cannot be processed. The URL must be URL-safe Base64-encoded. This option is available in the Pro version only.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_62\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nfallback_image_url:%url\nfiu:%url\n```\n\n----------------------------------------\n\nTITLE: Overriding Max Source File Size with imgproxy URL Option\nDESCRIPTION: Defines the imgproxy URL option `max_src_file_size` (or `msfs`) which allows overriding the global `IMGPROXY_MAX_SRC_FILE_SIZE` configuration setting for a specific request. This parameter sets the maximum allowed file size (in bytes) for the source image. Using this option requires `IMGPROXY_ALLOW_SECURITY_OPTIONS` to be enabled.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/getting_info.mdx#2025-04-23_snippet_21\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\n```imgproxy_url_option\nmax_src_file_size:%size\nmsfs:%size\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Shared Credentials File for imgproxy\nDESCRIPTION: Illustrates the structure of the .aws/credentials file used to store AWS access credentials. This method allows for credential management without environment variables.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for Miscellaneous Configuration\nDESCRIPTION: Various other configuration options for imgproxy including color space, metadata handling, and health checks.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/docs/configuration/options.mdx#2025-04-23_snippet_16\n\nLANGUAGE: env\nCODE:\n```\nIMGPROXY_ARGUMENTS_SEPARATOR=:\nIMGPROXY_USE_LINEAR_COLORSPACE=false\nIMGPROXY_DISABLE_SHRINK_ON_LOAD=false\nIMGPROXY_STRIP_METADATA=true\nIMGPROXY_KEEP_COPYRIGHT=true\nIMGPROXY_STRIP_METADATA_DPI=72.0\nIMGPROXY_STRIP_COLOR_PROFILE=true\nIMGPROXY_AUTO_ROTATE=true\nIMGPROXY_ENFORCE_THUMBNAIL=false\nIMGPROXY_RETURN_ATTACHMENT=false\nIMGPROXY_HEALTH_CHECK_MESSAGE=imgproxy is running\nIMGPROXY_HEALTH_CHECK_PATH=\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from source on Ubuntu\nDESCRIPTION: Install libvips, Go, and build imgproxy from source on Ubuntu. This method allows using all features of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/installation.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo add-apt-repository ppa:dhor/myway\nsudo apt-get update\nsudo apt-get install libvips-dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nCGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Allowing Skips in Best Format Selection for imgproxy\nDESCRIPTION: Enables skipping processing of SVG and formats listed to skip processing when using 'best' format. This is a pro feature of imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.26.x/configuration/options.mdx#2025-04-23_snippet_56\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BEST_FORMAT_ALLOW_SKIPS=true\n```\n\n----------------------------------------\n\nTITLE: Accessing GCS Objects with Generation Parameter in imgproxy\nDESCRIPTION: Demonstrates the URL format for specifying a Google Cloud Storage object with an optional generation parameter. This allows accessing specific versions of objects stored in GCS buckets.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Example AES-256-CBC Encryption Key (Hex)\nDESCRIPTION: An example of a 32-byte hex-encoded encryption key suitable for AES-256-CBC. This specific key is used throughout the step-by-step encryption example in the documentation.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1eb5b0e971ad7f45324c1bb15c947cb207c43152fa5c6c7f35c4f36e0c18e0f1\n```\n\n----------------------------------------\n\nTITLE: Configuring Video Thumbnail Generation in imgproxy\nDESCRIPTION: Environment variables to enable video thumbnail generation and specify the timestamp of the frame to be used for thumbnails. These settings control video processing behavior.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_formats_support.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nIMGPROXY_ENABLE_VIDEO_THUMBNAILS=false\nIMGPROXY_VIDEO_THUMBNAIL_SECOND=1\n```\n\n----------------------------------------\n\nTITLE: Building imgproxy from source on macOS using Homebrew\nDESCRIPTION: Install required dependencies using Homebrew and build imgproxy from source on macOS.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/installation.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbrew install vips go\nPKG_CONFIG_PATH=\"$(brew --prefix libffi)/lib/pkgconfig\" \\\n  CGO_LDFLAGS_ALLOW=\"-s|-w\" \\\n  CGO_CFLAGS_ALLOW=\"-Xpreprocessor\" \\\n  go build -o /usr/local/bin/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoded Source URL in imgproxy\nDESCRIPTION: Demonstration of using Base64 encoded source URLs in imgproxy, showing both basic and extension-specified formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/usage/processing.mdx#2025-04-23_snippet_76\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn\n```\n\nLANGUAGE: imgproxy_url\nCODE:\n```\n/aHR0cDovL2V4YW1w/bGUuY29tL2ltYWdl/cy9jdXJpb3NpdHku/anBn.png\n```\n\n----------------------------------------\n\nTITLE: Setting Format-Specific Image Quality in imgproxy\nDESCRIPTION: Configures default quality for specific image formats. Uses IMGPROXY_QUALITY as fallback for unspecified formats.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/configuration/options.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_FORMAT_QUALITY=\"jpeg=70,avif=40,webp=60\"\n```\n\n----------------------------------------\n\nTITLE: Creating Custom imgproxy Preset Example\nDESCRIPTION: Demonstrates creating a preset named 'awesome' that configures fill resizing and JPG output format. Shows practical implementation of preset definition.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Animation Frames in imgproxy\nDESCRIPTION: Defines the maximum number of frames that can be processed for animated images. By default, only one frame is processed to conserve memory.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_MAX_ANIMATION_FRAMES=1\n```\n\n----------------------------------------\n\nTITLE: Example Preset Definition in imgproxy\nDESCRIPTION: Shows an example of defining a preset named 'awesome' that sets the resizing type to 'fill' and the resulting format to 'jpg'.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/usage/presets.mdx#2025-04-23_snippet_1\n\nLANGUAGE: imgproxy_presets\nCODE:\n```\nawesome=resizing_type:fill/format:jpg\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Presets in Presets-Only Mode URL\nDESCRIPTION: Demonstrates the URL format when imgproxy is in presets-only mode, applying multiple presets (thumbnail, blurry, watermarked) to an image.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/presets.mdx#2025-04-23_snippet_2\n\nLANGUAGE: imgproxy_url_only_presets\nCODE:\n```\nhttp://imgproxy.example.com/unsafe/thumbnail:blurry:watermarked/plain/http://example.com/images/curiosity.jpg@png\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate-based Authentication\nDESCRIPTION: Environment variables required for certificate-based authentication with Azure Blob Storage using a Service Principal.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.20.x/image_sources/azure_blob_storage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAZURE_CLIENT_ID=your_client_id\nAZURE_TENANT_ID=your_tenant_id\nAZURE_CLIENT_CERTIFICATE_PATH=path_to_certificate\nAZURE_CLIENT_CERTIFICATE_PASSWORD=certificate_password\nAZURE_CLIENT_CERTIFICATE_CHAIN=certificate_chain\n```\n\n----------------------------------------\n\nTITLE: Configuring imgproxy Airbrake Integration\nDESCRIPTION: Environment variables to configure error reporting to Airbrake. Requires setting the Airbrake project ID and project key. The reporting environment can also be specified.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_32\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_AIRBRAKE_PROJECT_ID\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_AIRBRAKE_PROJECT_KEY\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nIMGPROXY_AIRBRAKE_ENVIRONMENT\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables (Systems Manager)\nDESCRIPTION: Example of setting AWS credentials using environment variables for Systems Manager access.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.22.x/configuration/loading_environment_variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring AVIF Compression Speed in imgproxy\nDESCRIPTION: Sets the CPU effort spent on AVIF compression. Lower values result in better compression but slower processing.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.19.x/configuration/options.mdx#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AVIF_SPEED=9\n```\n\n----------------------------------------\n\nTITLE: Swift URL Format Example\nDESCRIPTION: Example showing the conversion from a standard OpenStack Swift URL to imgproxy's Swift URL format. Demonstrates how to properly structure the source image URL for imgproxy to access Swift storage.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_sources/openstack_swift.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://127.0.0.1:8080/v1/AUTH_test/images/flowers/rose.jpg -> swift://images/flowers/rose.jpg\n```\n\n----------------------------------------\n\nTITLE: Min Height Option in imgproxy\nDESCRIPTION: Defines the minimum height of the resulting image. Caution is advised when using with the height option.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.27.x/usage/processing.mdx#2025-04-23_snippet_9\n\nLANGUAGE: imgproxy_url_option\nCODE:\n```\nmin-height:%height\nmh:%height\n```\n\n----------------------------------------\n\nTITLE: Example Plain Source URL\nDESCRIPTION: A sample source image URL used as the input for the encryption example.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.24.x/usage/encrypting_source_url.mdx#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nhttp://example.com/images/curiosity.jpg\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining the title and description of the documentation page.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/best_format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Best format\ndescription: Learn about how to automatically pick the best format for your resultant images with imgproxy\n---\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Configuration\nDESCRIPTION: Example configuration for the AWS credentials file located in .aws/credentials\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/image_sources/amazon_s3.mdx#2025-04-23_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[default]\naws_access_key_id = %access_key_id\naws_secret_access_key = %secret_access_key\n```\n\n----------------------------------------\n\nTITLE: Running imgproxy with AWS Credentials in Bash\nDESCRIPTION: This snippet demonstrates how to run imgproxy with AWS credentials set as environment variables. It shows both the command-line approach and the Docker run command.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.23.x/monitoring/cloud_watch.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID=my_access_key AWS_SECRET_ACCESS_KEY=my_secret_key imgproxy\n\n# same for Docker\ndocker run -e AWS_ACCESS_KEY_ID=my_access_key -e AWS_SECRET_ACCESS_KEY=my_secret_key -it ghcr.io/imgproxy/imgproxy\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Autoquality in imgproxy\nDESCRIPTION: Basic configuration to disable autoquality feature in imgproxy.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/features/autoquality.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_AUTOQUALITY_METHOD=\"none\"\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Storage URL Format\nDESCRIPTION: Demonstrates the URL format for accessing files in Google Cloud Storage buckets, including optional generation specification\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.25.x/image_sources/google_cloud_storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ngs://%bucket_name/%file_key?%generation\n```\n\n----------------------------------------\n\nTITLE: Configuring Best Format Options in imgproxy\nDESCRIPTION: Environment variables for configuring imgproxy's best format selection behavior. Includes settings for complexity threshold, resolution limits, default behavior, and processing rules.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/versioned_docs/version-3.21.x/features/best_format.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nIMGPROXY_BEST_FORMAT_COMPLEXITY_THRESHOLD=\"5.5\"\nIMGPROXY_BEST_FORMAT_MAX_RESOLUTION=\"0\"\nIMGPROXY_BEST_FORMAT_BY_DEFAULT=\"true\"\nIMGPROXY_BEST_FORMAT_ALLOW_SKIPS=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Building Production Website\nDESCRIPTION: Command to generate static website content in the build directory for production deployment.\nSOURCE: https://github.com/imgproxy/imgproxy-docs/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ pnpm run build\n```"
  }
]