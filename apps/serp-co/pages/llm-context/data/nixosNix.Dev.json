[
  {
    "owner": "nixos",
    "repo": "nix.dev",
    "content": "TITLE: Nix Data Types Example\nDESCRIPTION: Comprehensive example showing all primitive data types, lists and attribute sets in Nix.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  string = \"hello\";\n  integer = 1;\n  float = 3.141;\n  bool = true;\n  null = null;\n  list = [ 1 \"two\" false ];\n  attribute-set = {\n    a = \"hello\";\n    b = 2;\n    c = 2.718;\n    d = false;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Optimizing Remote Builder Configuration in NixOS\nDESCRIPTION: Enhanced NixOS configuration for remote builders that sets up memory limits, garbage collection parameters, and resource allocation for optimal performance. This improves build parallelism and system stability.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n {\n   users.users.remotebuild = {\n     isNormalUser = true;\n     createHome = false;\n     group = \"remotebuild\";\n\n     openssh.authorizedKeys.keyFiles = [ ./remotebuild.pub ];\n   };\n\n   users.groups.remotebuild = {};\n\n-  nix.settings.trusted-users = [ \"remotebuild\" ];\n+  nix = {\n+    nrBuildUsers = 64;\n+    settings = {\n+      trusted-users = [ \"remotebuild\" ];\n+\n+      min-free = 10 * 1024 * 1024;\n+      max-free = 200 * 1024 * 1024;\n\n+      max-jobs = \"auto\";\n+      cores = 0;\n+    };\n+  };\n\n+  systemd.services.nix-daemon.serviceConfig = {\n+    MemoryAccounting = true;\n+    MemoryMax = \"90%\";\n+    OOMScoreAdjust = 500;\n+  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on Linux (Multi-user)\nDESCRIPTION: Downloads and installs Nix package manager in multi-user mode on Linux systems. Requires xz-utils to be pre-installed for handling the binary tarball.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/install-nix.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://nixos.org/nix/install | sh -s -- --daemon\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Nix Package Declaration\nDESCRIPTION: A simplified Nixpkgs package declaration that shows how to create a derivation for the GNU Hello program. The code demonstrates function arguments, attribute sets, string interpolation, and the use of fetchurl to download the source code.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_38\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, stdenv, fetchurl }:\n\nstdenv.mkDerivation rec {\n\n  pname = \"hello\";\n\n  version = \"2.12\";\n\n  src = fetchurl {\n    url = \"mirror://gnu/${pname}/${pname}-${version}.tar.gz\";\n    sha256 = \"1ayhp9v4m4rdhjmnl2bq3cibrbqqkgjbl3s7yk2nhlh8vj3ay16g\";\n  };\n\n  meta = with lib; {\n    license = licenses.gpl3Plus;\n  };\n\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Alternative to Recursive Attribute Sets Using let-in\nDESCRIPTION: Demonstrates a preferred approach using let-in expressions instead of rec to avoid potential infinite recursion issues while achieving the same functionality.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  a = 1;\nin {\n  a = a;\n  b = a + 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Nix Projects with Cachix\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow that runs on pull requests and pushes. It installs Nix, configures Cachix for binary caching, and runs basic Nix build commands. The workflow uses secrets for Cachix authentication to push and pull binary artifacts.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/continuous-integration-github-actions.md#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"Test\"\non:\n  pull_request:\n  push:\njobs:\n  tests:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v4\n    - uses: cachix/install-nix-action@v25\n      with:\n        nix_path: nixpkgs=channel:nixos-unstable\n    - uses: cachix/cachix-action@v14\n      with:\n        name: mycache\n        # If you chose signing key for write access\n        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'\n        # If you chose API tokens for write access OR if you have a private cache\n        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'\n    - run: nix-build\n    - run: nix-shell --run \"echo OK\"\n```\n\n----------------------------------------\n\nTITLE: Reproducible Nix Shell Script for Fetching and Formatting GitHub Releases\nDESCRIPTION: A reproducible script using nix-shell as interpreter with explicitly declared dependencies. It fetches Nixpkgs releases as XML, converts to JSON, and formats the output with jq. The script pins the exact version of Nixpkgs to ensure consistent behavior across systems.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/reproducible-scripts.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env nix-shell\n#! nix-shell -i bash --pure\n#! nix-shell -p bash cacert curl jq python3Packages.xmljson\n#! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/2a601aafdc5605a5133a2ca506a34a3a73377247.tar.gz\n\ncurl https://github.com/NixOS/nixpkgs/releases.atom | xml2json | jq .\n```\n\n----------------------------------------\n\nTITLE: Configuring NixOS services for binary cache (Nix)\nDESCRIPTION: This Nix configuration sets up the nix-serve and nginx services to create a binary cache server. It enables nix-serve, configures nginx as a reverse proxy, and opens the necessary firewall ports.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ config, ... }:\n\n{\n  services.nix-serve = {\n    enable = true;\n    secretKeyFile = \"/var/secrets/cache-private-key.pem\";\n  };\n\n  services.nginx = {\n    enable = true;\n    recommendedProxySettings = true;\n    virtualHosts.cache = {\n      locations.\"/\".proxyPass = \"http://${config.services.nix-serve.bindAddress}:${toString config.services.nix-serve.port}\";\n    };\n  };\n\n  networking.firewall.allowedTCPPorts = [\n    config.services.nginx.defaultHTTPListenPort\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Nixpkgs Library Functions\nDESCRIPTION: Demonstrates how to access and use the functions provided by the Nixpkgs library (pkgs.lib), which contains a wide range of utility functions implemented in the Nix language.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_31\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> {};\nin\npkgs.lib.strings.toUpper \"lookup paths considered harmful\"\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/archive/06278c77b5d162e62df170fec307e83f1812d94b.tar.gz\";\n  pkgs = import nixpkgs {};\nin\npkgs.lib.strings.toUpper \"always pin your sources\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\npkgs.lib.strings.removePrefix \"no \" \"no true scotsman\"\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-instantiate --eval file.nix --arg pkgs 'import <nixpkgs> {}'\n\"true scotsman\"\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, ... }:\nlet\n  to-be = true;\nin\nlib.trivial.or to-be (! to-be)\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-instantiate --eval file.nix --arg lib '(import <nixpkgs> {}).lib'\ntrue\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, ... }:\n# ... multiple uses of `pkgs`\n# ... multiple uses of `lib`\n```\n\n----------------------------------------\n\nTITLE: Complete Minimal NixOS Test Example\nDESCRIPTION: A complete minimal example of a NixOS test that checks if user 'alice' can run Firefox while 'root' cannot, demonstrating the basic structure of a test file.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n\npkgs.testers.runNixOSTest {\n  name = \"minimal-test\";\n\n  nodes.machine = { config, pkgs, ... }: {\n\n    users.users.alice = {\n      isNormalUser = true;\n      extraGroups = [ \"wheel\" ];\n      packages = with pkgs; [\n        firefox\n        tree\n      ];\n    };\n\n    system.stateVersion = \"23.11\";\n  };\n\n  testScript = ''\n    machine.wait_for_unit(\"default.target\")\n    machine.succeed(\"su -- alice -c 'which firefox'\")\n    machine.fail(\"su -- root -c 'which firefox'\")\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Using the override Function for Post-Creation Customization\nDESCRIPTION: Demonstrates how to use the override function to modify package parameters after the initial derivation has been created. This allows for creating variations of packages without duplicate code.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\nin\nrec {\n  hello = pkgs.callPackage ./hello.nix { audience = \"people\"; };\n  hello-folks = hello.override { audience = \"folks\"; };\n}\n```\n\n----------------------------------------\n\nTITLE: Cross Compiling Hello World Example with Nix\nDESCRIPTION: This snippet demonstrates a real-world example of cross-compiling a Hello World program to multiple platforms using Nix. It includes creating a C program, defining a cross-compilation function, and building for Raspberry Pi and Windows targets.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/release-23.11\";\n  pkgs = import nixpkgs {};\n\n  # Create a C program that prints Hello World\n  helloWorld = pkgs.writeText \"hello.c\" ''\n    #include <stdio.h>\n\n    int main (void)\n    {\n      printf (\"Hello, world!\\n\");\n      return 0;\n    }\n  '';\n\n  # A function that takes host platform packages\n  crossCompileFor = hostPkgs:\n    # Run a simple command with the compiler available\n    hostPkgs.runCommandCC \"hello-world-cross-test\" {} ''\n      # Wine requires home directory\n      HOME=$PWD\n\n      # Compile our example using the compiler specific to our host platform\n      $CC ${helloWorld} -o hello\n\n      # Run the compiled program using user mode emulation (Qemu/Wine)\n      # buildPackages is passed so that emulation is built for the build platform\n      ${hostPkgs.stdenv.hostPlatform.emulator hostPkgs.buildPackages} hello > $out\n\n      # print to stdout\n      cat $out\n    '';\nin {\n  # Statically compile our example using the two platform hosts\n  rpi = crossCompileFor pkgs.pkgsCross.raspberryPi;\n  windows = crossCompileFor pkgs.pkgsCross.mingwW64;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Builds on NixOS Systems\nDESCRIPTION: NixOS module for setting up distributed builds on the local machine. This configuration enables distributing builds to remote machines with specific system features support.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, ... }:\n{\n  nix.distributedBuilds = true;\n  nix.settings.builders-use-substitutes = true;\n\n  nix.buildMachines = [\n    {\n      hostName = \"remotebuilder\";\n      sshUser = \"remotebuild\";\n      sshKey = \"/root/.ssh/remotebuild\";\n      system = pkgs.stdenv.hostPlatform.system;\n      supportedFeatures = [ \"nixos-test\" \"big-parallel\" \"kvm\" ];\n    }\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic shell.nix File in Nix\nDESCRIPTION: This snippet demonstrates how to create a basic shell.nix file that defines a shell environment with cowsay and lolcat packages. It uses a pinned version of Nixpkgs and the mkShellNoCC function to create the environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/declarative-shell.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-24.05\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n\npkgs.mkShellNoCC {\n  packages = with pkgs; [\n    cowsay\n    lolcat\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Reproducible Source Path with builtins.path\nDESCRIPTION: Demonstrates the recommended approach for defining source paths using builtins.path with a fixed name attribute, ensuring reproducible store paths regardless of parent directory names.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_13\n\nLANGUAGE: nix\nCODE:\n```\nlet pkgs = import <nixpkgs> {}; in\n\npkgs.stdenv.mkDerivation {\n  name = \"foo\";\n  src = builtins.path { path = ./.; name = \"myproject\"; };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in shell.nix\nDESCRIPTION: This snippet shows how to set environment variables in a shell.nix file. It adds a GREETING variable to the previous example, which will be available in the shell environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/declarative-shell.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-24.05\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n\npkgs.mkShellNoCC {\n  packages = with pkgs; [\n    cowsay\n    lolcat\n  ];\n\n  GREETING = \"Hello, Nix!\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'inherit' Shorthand in Nix\nDESCRIPTION: This example demonstrates the 'inherit' shorthand which simplifies assigning values from an existing scope to the same names in a nested scope, avoiding repetition of identifiers.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_15\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  x = 1;\n  y = 2;\nin\n{\n  inherit x y;\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Nixpkgs with fetchTarball (reproducible method)\nDESCRIPTION: This snippet shows how to pin a specific version of Nixpkgs by fetching a tarball from a specific Git commit. This approach ensures full reproducibility by always using the exact same version of Nixpkgs.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/towards-reproducibility-pinning-nixpkgs.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/06278c77b5d162e62df170fec307e83f1812d94b.tar.gz\") {}\n}:\n\n...\n```\n\n----------------------------------------\n\nTITLE: Generating a NixOS ISO from Custom Configuration\nDESCRIPTION: This shell command uses nixos-generators to build an ISO image from a custom NixOS configuration file. It specifies the Nixpkgs source using a pinned commit hash and outputs the result to a directory.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/building-bootable-iso-image.md#2025-04-16_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ NIX_PATH=nixpkgs=https://github.com/NixOS/nixpkgs/archive/74e2faf5965a12e8fa5cff799b1b19c6cd26b0e3.tar.gz nix-shell -p nixos-generators --run \"nixos-generate --format iso --configuration ./myimage.nix -o result\"\n```\n\n----------------------------------------\n\nTITLE: Complete Sample NixOS Configuration\nDESCRIPTION: A complete NixOS configuration for a virtual machine with a user, system packages, and boot settings. This can be used as a starting point for testing NixOS in a VM.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, ... }:\n{\n  boot.loader.systemd-boot.enable = true;\n  boot.loader.efi.canTouchEfiVariables = true;\n\n  users.users.alice = {\n    isNormalUser = true;\n    extraGroups = [ \"wheel\" ]; # Enable 'sudo' for the user.\n    initialPassword = \"test\";\n  };\n\n  environment.systemPackages = with pkgs; [\n    cowsay\n    lolcat\n  ];\n\n  system.stateVersion = \"24.05\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Provider and NixOS Image in Terraform\nDESCRIPTION: Sets up the Terraform configuration for AWS provider, NixOS image, security group, and EC2 instance.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/deploying-nixos-using-terraform.md#2025-04-16_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n    backend \"remote\" {\n        organization = \"myorganization\"\n\n        workspaces {\n            name = \"myapp\"\n        }\n    }\n}\n\nprovider \"aws\" {\n    region = \"eu-central-1\"\n}\n\nmodule \"nixos_image\" {\n    source  = \"git::https://github.com/tweag/terraform-nixos.git//aws_image_nixos?ref=5f5a0408b299874d6a29d1271e9bffeee4c9ca71\"\n    release = \"20.09\"\n}\n\nresource \"aws_security_group\" \"ssh_and_egress\" {\n    ingress {\n        from_port   = 22\n        to_port     = 22\n        protocol    = \"tcp\"\n        cidr_blocks = [ \"0.0.0.0/0\" ]\n    }\n\n    egress {\n        from_port       = 0\n        to_port         = 0\n        protocol        = \"-1\"\n        cidr_blocks     = [\"0.0.0.0/0\"]\n    }\n}\n\nresource \"tls_private_key\" \"state_ssh_key\" {\n    algorithm = \"RSA\"\n}\n\nresource \"local_file\" \"machine_ssh_key\" {\n    sensitive_content = tls_private_key.state_ssh_key.private_key_pem\n    filename          = \"${path.module}/id_rsa.pem\"\n    file_permission   = \"0600\"\n}\n\nresource \"aws_key_pair\" \"generated_key\" {\n    key_name   = \"generated-key-${sha256(tls_private_key.state_ssh_key.public_key_openssh)}\"\n    public_key = tls_private_key.state_ssh_key.public_key_openssh\n}\n\nresource \"aws_instance\" \"machine\" {\n    ami             = module.nixos_image.ami\n    instance_type   = \"t3.micro\"\n    security_groups = [ aws_security_group.ssh_and_egress.name ]\n    key_name        = aws_key_pair.generated_key.key_name\n\n    root_block_device {\n        volume_size = 50 # GiB\n    }\n}\n\noutput \"public_dns\" {\n    value = aws_instance.machine.public_dns\n}\n```\n\n----------------------------------------\n\nTITLE: Complete NixOS Configuration with GNOME\nDESCRIPTION: A complete NixOS configuration for a virtual machine with GNOME desktop environment, including user settings and boot configuration. This creates a graphical VM suitable for desktop testing.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_17\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, ... }:\n{\n  boot.loader.systemd-boot.enable = true;\n  boot.loader.efi.canTouchEfiVariables = true;\n\n  services.xserver.enable = true;\n\n  services.xserver.displayManager.gdm.enable = true;\n  services.xserver.desktopManager.gnome.enable = true;\n\n  users.users.alice = {\n    isNormalUser = true;\n    extraGroups = [ \"wheel\" ];\n    initialPassword = \"test\";\n  };\n\n  system.stateVersion = \"24.05\";\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning Nixpkgs in Nix Language Using fetchTarball\nDESCRIPTION: Example of pinning Nixpkgs to a specific version in a Nix expression using the fetchTarball function. This approach embeds the version information directly in the Nix code for better reproducibility.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/nixos-22.11.tar.gz\") {};\nin pkgs.stdenv.mkDerivation { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Server Test Configuration in NixOS\nDESCRIPTION: A NixOS test configuration that sets up two virtual machines - a server running nginx and a client with curl installed. The test script verifies the server's response using curl from the client machine.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n\npkgs.testers.runNixOSTest {\n  name = \"client-server-test\";\n\n  nodes.server = { pkgs, ... }: {\n    networking = {\n      firewall = {\n        allowedTCPPorts = [ 80 ];\n      };\n    };\n    services.nginx = {\n      enable = true;\n      virtualHosts.\"server\" = {};\n    };\n  };\n\n  nodes.client = { pkgs, ... }: {\n    environment.systemPackages = with pkgs; [\n      curl\n    ];\n  };\n\n  testScript = ''\n    server.wait_for_unit(\"default.target\")\n    client.wait_for_unit(\"default.target\")\n    client.succeed(\"curl http://server/ | grep -o \\\"Welcome to nginx!\\\"\")\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Nixpkgs with Explicit Config and Overlays\nDESCRIPTION: Demonstrates how to make Nixpkgs imports more reproducible by explicitly setting config and overlays parameters, preventing impure system configuration from affecting the build.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\nimport <nixpkgs> { config = {}; overlays = []; }\n```\n\n----------------------------------------\n\nTITLE: Using the Import Function in Nix\nDESCRIPTION: Demonstrates how to use the import function to read and evaluate Nix expressions from external files. Import can also directly apply the imported function to arguments.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_30\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo 1 + 2 > file.nix\n```\n\nLANGUAGE: nix\nCODE:\n```\nimport ./file.nix\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"x: x + 1\" > file.nix\n```\n\nLANGUAGE: nix\nCODE:\n```\nimport ./file.nix 1\n```\n\n----------------------------------------\n\nTITLE: Sharing Dependencies between default.nix and shell.nix in Nix\nDESCRIPTION: This snippet shows how to use the inputsFrom attribute in default.nix to share package dependencies with shell.nix. It defines a build attribute and a shell attribute that inherits the build's dependencies.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/sharing-dependencies.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n# default.nix\nlet\n  pkgs = import <nixpkgs> {};\n  build = pkgs.callPackage ./build.nix {};\nin\n{\n  inherit build;\n  shell = pkgs.mkShellNoCC {\n    inputsFrom = [ build ];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Sharing Build Dependencies with Shell Environment in Nix\nDESCRIPTION: This snippet demonstrates how to share build dependencies with the shell environment in default.nix. It moves the build attribute into a let binding and uses inputsFrom to include its dependencies in the shell.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/sharing-dependencies.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\n  build = pkgs.callPackage ./build.nix {};\nin\n{\n  inherit build;\n  shell = pkgs.mkShellNoCC {\n    inputsFrom = [ build ];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reproducible Shell Application with Dependencies\nDESCRIPTION: This Nix configuration creates a reproducible shell application using pkgs.writeShellApplication. It packages the map.sh script with necessary dependencies (curl and feh) into the Nix store.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, lib, ... }: {\n\n  options = {\n    scripts.output = lib.mkOption {\n      type = lib.types.package;\n    };\n  };\n\n  config = {\n    scripts.output = pkgs.writeShellApplication {\n      name = \"map\";\n      runtimeInputs = with pkgs; [ curl feh ];\n      text = ''\n        ${./map.sh} size=640x640 scale=2 | feh -\n      '';\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Building Hello World Docker Image with Nix\nDESCRIPTION: A Nix expression that builds a minimal Docker image containing the GNU hello program. Uses dockerTools.buildImage to create a container that runs the hello command when started.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/building-and-running-docker-images.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> { }\n, pkgsLinux ? import <nixpkgs> { system = \"x86_64-linux\"; }\n}:\n\npkgs.dockerTools.buildImage {\n  name = \"hello-docker\";\n  config = {\n    Cmd = [ \"${pkgsLinux.hello}/bin/hello\" ];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Nix Development Environment\nDESCRIPTION: This Nix expression creates a shell environment with Python 3, Flask, curl, and jq. It uses python3.withPackages to include the Flask package and adds curl and jq as standalone tools.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/python-environment.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import (fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\") {} }:\n\npkgs.mkShellNoCC {\n  packages = with pkgs; [\n    (python3.withPackages (ps: [ ps.flask ]))\n    curl\n    jq\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling Functions in Nix\nDESCRIPTION: Shows various ways to define functions in Nix, including single argument, multiple arguments via nesting, attribute set arguments, and named attribute set arguments. Also demonstrates how to call these functions.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_25\n\nLANGUAGE: nix\nCODE:\n```\nx: x + 1\n```\n\nLANGUAGE: nix\nCODE:\n```\nx: y: x + y\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ a, b }: a + b\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ a, b ? 0 }: a + b\n```\n\nLANGUAGE: nix\nCODE:\n```\n{ a, b, ...}: a + b\n```\n\nLANGUAGE: nix\nCODE:\n```\nargs@{ a, b, ... }: a + b + args.c\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = x: x + 1;\nin f\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = x: x + 1;\nin f 1\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = x: x.a;\nin\nf { a = 1; }\n```\n\nLANGUAGE: nix\nCODE:\n```\n(x: x + 1) 1\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n f = x: x + 1;\n a = 1;\nin [ (f a) ]\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n f = x: x + 1;\n a = 1;\nin [ f a ]\n```\n\nLANGUAGE: nix\nCODE:\n```\nx: y: x + y\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = x: y: x + y;\nin\nf 1\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = x: y: x + y;\nin\nf 1 2\n```\n\nLANGUAGE: nix\nCODE:\n```\n{a, b}: a + b\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = {a, b}: a + b;\nin\nf { a = 1; b = 2; }\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = {a, b}: a + b;\nin\nf { a = 1; b = 2; c = 3; }\n```\n\n----------------------------------------\n\nTITLE: Nix Expression for Importing and Building Hello Package\nDESCRIPTION: A Nix expression that imports nixpkgs, defines a package set, and creates a derivation for the hello package using callPackage.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n# default.nix\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-24.05\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n{\n  hello = pkgs.callPackage ./hello.nix { };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Named Attribute Set Arguments in Nix Functions\nDESCRIPTION: Demonstrates the @ pattern syntax that allows giving a name to the entire attribute set argument, making it accessible as a whole while still destructuring its contents.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_28\n\nLANGUAGE: nix\nCODE:\n```\n{a, b, ...}@args: a + b + args.c\n```\n\nLANGUAGE: nix\nCODE:\n```\nargs@{a, b, ...}: a + b + args.c\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = {a, b, ...}@args: a + b + args.c;\nin\nf { a = 1; b = 2; c = 3; }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Recursive Attribute Sets in Nix\nDESCRIPTION: This example shows how to use the `rec` keyword to create a recursive attribute set where attributes can reference other attributes within the same set. This enables dependencies between attributes regardless of declaration order.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nrec {\n  one = 1;\n  two = one + 1;\n  three = two + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic String Interpolation in Nix\nDESCRIPTION: This example demonstrates string interpolation in Nix using the ${} syntax. It allows embedding the value of a Nix expression inside a string literal.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_18\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  name = \"Nix\";\nin\n\"hello ${name}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a reproducible Nix environment\nDESCRIPTION: This snippet demonstrates how to create a fully reproducible Nix environment by specifying a specific version of nixpkgs and using the --pure flag.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/ad-hoc-shell-environments.md#2025-04-16_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-shell -p git --run \"git --version\" --pure -I nixpkgs=https://github.com/NixOS/nixpkgs/tarball/2a601aafdc5605a5133a2ca506a34a3a73377247\n...\ngit version 2.33.1\n```\n\n----------------------------------------\n\nTITLE: Basic Nix Derivation Skeleton\nDESCRIPTION: A minimal Nix derivation function that takes stdenv as an argument and produces an empty derivation.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ stdenv }:\n\nstdenv.mkDerivation {  }\n```\n\n----------------------------------------\n\nTITLE: Basic Bash Script with External Dependencies\nDESCRIPTION: A simple bash script that fetches GitHub releases as XML, converts it to JSON, and formats it. This script depends on curl, xml2json, and jq being available in the system.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/reproducible-scripts.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#! /bin/bash\n\ncurl https://github.com/NixOS/nixpkgs/releases.atom | xml2json | jq .\n```\n\n----------------------------------------\n\nTITLE: Interactive Testing with NixOS Test Driver\nDESCRIPTION: Command to launch an interactive Python shell for NixOS tests, which allows executing test commands one by one and interacting with virtual machines.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ $(nix-build -A driverInteractive minimal-test.nix)/bin/nixos-test-driver\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Binary Cache in NixOS Configuration\nDESCRIPTION: This Nix code snippet shows how to configure a custom binary cache in NixOS through the nix.settings option in the system configuration. It sets both the substituters and trusted-public-keys options for the system.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/add-binary-cache.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ ... }: {\n  nix.settings = {\n    substituters = [ \"https://example.org\" ];\n    trusted-public-keys = [ \"example.org:My56...Q==%\" ];\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Repairing Nix SQLite Database\nDESCRIPTION: This sequence of commands repairs a corrupted Nix SQLite database by creating a backup, dumping its contents, and reimporting them into a new database file.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/troubleshooting.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mv /nix/var/nix/db/db.sqlite /nix/var/nix/db/db.sqlite-bkp\n$ sqlite3 /nix/var/nix/db/db.sqlite-bkp \".dump\" | sqlite3 /nix/var/nix/db/db.sqlite\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Package Function in Nix\nDESCRIPTION: Defines a Nix function that takes writeShellScriptBin as an argument and creates a simple 'hello world' script. This demonstrates the standard package recipe pattern used in Nixpkgs.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ writeShellScriptBin }:\nwriteShellScriptBin \"hello\" ''\n  echo \"Hello, world!\"\n''\n```\n\n----------------------------------------\n\nTITLE: Aggregating User Markers into Map Configuration\nDESCRIPTION: Collects departure markers from all users and filters out any with null locations. Uses lib.concatMap to flatten the collection of markers from all users defined in the configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_27\n\nLANGUAGE: nix\nCODE:\n```\n    map.markers = lib.filter\n      (marker: marker.location != null)\n      (lib.concatMap (user: [\n        user.departure\n      ]) (lib.attrValues config.users));\n\n     map.center = lib.mkIf\n       (lib.length config.map.markers >= 1)\n```\n\n----------------------------------------\n\nTITLE: Checking SQLite Database Integrity in Nix\nDESCRIPTION: This command checks the integrity of the Nix SQLite database. It's used to diagnose and identify errors in the database structure.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/troubleshooting.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sqlite3 /nix/var/nix/db/db.sqlite \"pragma integrity_check\"\n```\n\n----------------------------------------\n\nTITLE: Entering a Nix Shell Environment\nDESCRIPTION: This bash command demonstrates how to enter a Nix shell environment defined by a shell.nix file in the current directory.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/declarative-shell.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnix-shell\n```\n\n----------------------------------------\n\nTITLE: Using Nixpkgs with search path (non-reproducible method)\nDESCRIPTION: This snippet demonstrates the common but non-reproducible pattern of importing Nixpkgs using angle brackets. While convenient for quick demonstrations, this approach does not guarantee reproducibility.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/towards-reproducibility-pinning-nixpkgs.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> {} }:\n\n...\n```\n\n----------------------------------------\n\nTITLE: Alternative to with for Package Imports Using inherit and attrValues\nDESCRIPTION: Demonstrates a recommended alternative to using with for package imports by combining inherit with builtins.attrValues, providing better clarity and avoiding scoping issues.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nbuildInputs = builtins.attrValues {\n  inherit (pkgs) curl jq;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Nix shell with multiple packages\nDESCRIPTION: This snippet shows how to create a Nix shell environment with multiple packages (git, neovim, and nodejs) installed and available for use.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/ad-hoc-shell-environments.md#2025-04-16_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-shell -p git neovim nodejs\nthese 9 derivations will be built:\n  /nix/store/7gz8jyn99kw4k74bgm4qp6z487l5ap06-packdir-start.drv\n  /nix/store/d6fkgxc3b04m85wrhg6j0l5y0ray82l7-packdir-opt.drv\n  /nix/store/da6njv7r0zzc2n54n2j54g2a5sbi4a5i-manifest.vim.drv\n  /nix/store/zs4jb2ybr4rcyzwq0dagg9rlhlc368h6-builder.pl.drv\n  /nix/store/g8sl2xnsshfrz9f39ki94k8p15vp3xd7-vim-pack-dir.drv\n  /nix/store/jmxkg8b1psk52awsvfziy9nq6dwmxmjp-luajit-2.1.0-2022-10-04-env.drv\n  /nix/store/kn83q8yk6ds74zgyklrjhvv5wkv5wmch-python3-3.10.9-env.drv\n  /nix/store/m445wn3vizcgg7syna2cdkkws3kk1gq8-neovim-ruby-env.drv\n  /nix/store/r2wa882mw99c311a4my7hcis9lq3kp3v-neovim-0.8.1.drv\nthese 151 paths will be fetched (186.43 MiB download, 1018.20 MiB unpacked):\n  /nix/store/046zxlxhq4srm3ggafkymx794bn1jksc-bzip2-1.0.8\n  /nix/store/0p1jxcb7b4p8jhhlf8qnjc4cqwy89460-unibilium-2.1.1\n  /nix/store/0q4fpnqmg8liqraj7zidylcyd062f6z0-perl5.36.0-URI-5.05\n  ...\n\n[nix-shell:~]$\n```\n\n----------------------------------------\n\nTITLE: String Interpolation with Derivations in Nix\nDESCRIPTION: Shows how a derivation can be used in string interpolation to obtain the path to its build result. This example imports nixpkgs and references the nix package's build path.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_35\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> {};\nin \"${pkgs.nix}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Shell for Remote Deployment Tools with Nix\nDESCRIPTION: This code defines a Nix shell environment that provides all the necessary tools for remote NixOS deployments. It uses pinned dependencies from npins and sets up the NIX_PATH environment variable to use the right Nixpkgs version and configuration file.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/provisioning-remote-machines.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  sources = import ./npins;\n  pkgs = import sources.nixpkgs {};\nin\n\npkgs.mkShell {\n  nativeBuildInputs = with pkgs; [\n    npins\n    nixos-anywhere\n    nixos-rebuild\n  ];\n  shellHook = ''\n    export NIX_PATH=\"nixpkgs=${sources.nixpkgs}:nixos-config=$PWD/configuration.nix\"\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Nix Packages\nDESCRIPTION: Shows shell commands for building and executing the hello package. The commands demonstrate how to build a specific attribute from a Nix expression and run the resulting executable.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build\n$ ./result/bin/hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom callPackage for Automatic Dependency Resolution in Nix\nDESCRIPTION: This snippet shows how to create a custom callPackage using lib.callPackageWith. It demonstrates automatic dependency resolution for an interdependent package set.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\n  callPackage = pkgs.lib.callPackageWith (pkgs // packages);\n  packages = {\n    a = callPackage ./a.nix { };\n    b = callPackage ./b.nix { };\n    c = callPackage ./c.nix { };\n    d = callPackage ./d.nix { };\n    e = callPackage ./e.nix { };\n  };\nin\npackages\n```\n\n----------------------------------------\n\nTITLE: Defining a conditional option with nullOr type\nDESCRIPTION: Adding a map.zoom option with the nullOr type to make the zoom level optional, allowing the API to use default behavior when not specified.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n     requestParams = lib.mkOption {\n       type = lib.types.listOf lib.types.str;\n     };\n+\n+    map = {\n+      zoom = lib.mkOption {\n+        type = lib.types.nullOr lib.types.int;\n+        default = null;\n+      };\n+    };\n   };\n```\n\n----------------------------------------\n\nTITLE: Enhanced Nix Derivation with Install Hooks\nDESCRIPTION: Improved version of the icat derivation that includes pre and post install hooks for better maintainability and override support\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_15\n\nLANGUAGE: nix\nCODE:\n```\n  installPhase = ''\n    runHook preInstall\n    mkdir -p $out/bin\n    cp icat $out/bin\n    runHook postInstall\n  '';\n```\n\n----------------------------------------\n\nTITLE: Declaring NixOS Module Options\nDESCRIPTION: Demonstrates how to declare options in a NixOS module using lib.mkOption, specifically setting up a string type option named 'name'.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/a-basic-module/index.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, ... }:\n{\n  options = {\n    name = lib.mkOption {\n      type = lib.types.str;\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Building a Specific Package Attribute\nDESCRIPTION: Demonstrates how to build a specific attribute from a Nix expression using the -A option. This is a common pattern when working with attribute sets of packages.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build -A hello\n$ ./result/bin/hello\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Pinning Nixpkgs to a Specific Commit\nDESCRIPTION: URL format for pinning Nixpkgs to a specific commit hash by fetching the tarball from GitHub. This provides exact reproducibility by using a precise version of Nixpkgs.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/NixOS/nixpkgs/archive/eabc38219184cc3e04a974fe31857d8e0eac098d.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Creating a Flask Web Application in Python\nDESCRIPTION: This code snippet defines a simple Flask web application that serves a JSON response with the message 'Hello, Nix!' when accessed at the root URL.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/python-environment.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return {\n        \"message\": \"Hello, Nix!\"\n    }\n\ndef run():\n    app.run(host=\"0.0.0.0\", port=5000)\n\nif __name__ == \"__main__\":\n    run()\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on Windows WSL2 (Single-user)\nDESCRIPTION: Installs Nix in single-user mode for Windows Subsystem for Linux 2 environments without systemd support.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/install-nix.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://nixos.org/nix/install | sh -s -- --no-daemon\n```\n\n----------------------------------------\n\nTITLE: Unpacking Archives with builtins.fetchTarball in Nix\nDESCRIPTION: Demonstrates using the fetchTarball function to automatically download and unpack a tarball archive. This function handles both fetching and extraction in one operation.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_34\n\nLANGUAGE: nix\nCODE:\n```\nbuiltins.fetchTarball \"https://github.com/NixOS/nix/archive/7c3ab5751568a0bc63430b33a5169c5e4784a0ff.tar.gz\"\n```\n\n----------------------------------------\n\nTITLE: NixOS System Configuration - Nix\nDESCRIPTION: Complete NixOS configuration file defining system settings, network configuration, user accounts, and hardware settings for Raspberry Pi 4.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/installing-nixos-on-a-raspberry-pi.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, lib, ... }:\n\nlet\n  user = \"guest\";\n  password = \"guest\";\n  SSID = \"mywifi\";\n  SSIDpassword = \"mypassword\";\n  interface = \"wlan0\";\n  hostname = \"myhostname\";\nin {\n\n  boot = {\n    kernelPackages = pkgs.linuxKernel.packages.linux_rpi4;\n    initrd.availableKernelModules = [ \"xhci_pci\" \"usbhid\" \"usb_storage\" ];\n    loader = {\n      grub.enable = false;\n      generic-extlinux-compatible.enable = true;\n    };\n  };\n\n  fileSystems = {\n    \"/\" = {\n      device = \"/dev/disk/by-label/NIXOS_SD\";\n      fsType = \"ext4\";\n      options = [ \"noatime\" ];\n    };\n  };\n\n  networking = {\n    hostName = hostname;\n    wireless = {\n      enable = true;\n      networks.\"${SSID}\".psk = SSIDpassword;\n      interfaces = [ interface ];\n    };\n  };\n\n  environment.systemPackages = with pkgs; [ vim ];\n\n  services.openssh.enable = true;\n\n  users = {\n    mutableUsers = false;\n    users.\"${user}\" = {\n      isNormalUser = true;\n      password = password;\n      extraGroups = [ \"wheel\" ];\n    };\n  };\n\n  hardware.enableRedistributableFirmware = true;\n  system.stateVersion = \"23.11\";\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a GPT Disk Layout for NixOS with Disko\nDESCRIPTION: This Nix module defines a disk layout using disko. It creates a GPT partition table with an MBR partition for BIOS compatibility, an EFI System Partition (ESP) mounted at /boot, and a root partition using ext4 that fills the remaining disk space.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/provisioning-remote-machines.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ ... }:\n\n{\n  disko.devices.disk.main = {\n    type = \"disk\";\n    content = {\n      type = \"gpt\";\n      partitions = {\n        MBR = {\n          priority = 0;\n          size = \"1M\";\n          type = \"EF02\";\n        };\n        ESP = {\n          priority = 1;\n          size = \"500M\";\n          type = \"EF00\";\n          content = {\n            type = \"filesystem\";\n            format = \"vfat\";\n            mountpoint = \"/boot\";\n          };\n        };\n        root = {\n          priority = 2;\n          size = \"100%\";\n          content = {\n            type = \"filesystem\";\n            format = \"ext4\";\n            mountpoint = \"/\";\n          };\n        };\n      };\n    };\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Shell Environment to default.nix in Nix\nDESCRIPTION: This snippet shows how to add a shell environment to an existing default.nix file. It introduces the shell attribute using pkgs.mkShellNoCC.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/sharing-dependencies.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n{\n  build = pkgs.callPackage ./build.nix {};\n  shell = pkgs.mkShellNoCC {\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Host Platform for Cross Compilation in Nix\nDESCRIPTION: These snippets show different ways to specify the host platform for cross compilation in Nix. It includes examples of explicitly picking a host platform package and configuring nixpkgs with a crossSystem.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/release-23.11\";\n  pkgs = import nixpkgs {};\nin\npkgs.pkgsCross.aarch64-multiplatform.hello\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/release-23.11\";\n  pkgs = import nixpkgs { crossSystem = { config = \"aarch64-unknown-linux-gnu\"; }; };\nin\npkgs.hello\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build '<nixpkgs>' -I nixpkgs=channel:nixos-23.11 \\\n  --arg crossSystem '{ config = \"aarch64-unknown-linux-gnu\"; }' \\\n  -A hello\n```\n\n----------------------------------------\n\nTITLE: Adding Startup Commands with shellHook in shell.nix\nDESCRIPTION: This snippet demonstrates how to use the shellHook attribute in shell.nix to run commands when entering the shell environment. It adds a colorful greeting using cowsay and lolcat.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/declarative-shell.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-24.05\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n\npkgs.mkShellNoCC {\n  packages = with pkgs; [\n    cowsay\n    lolcat\n  ];\n\n  GREETING = \"Hello, Nix!\";\n\n  shellHook = ''\n    echo $GREETING | cowsay | lolcat\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Using Recursive Attribute Sets in Nix\nDESCRIPTION: Demonstrates how to use recursive attribute sets (rec) to reference variables within the same attribute set. This allows values to reference other values defined in the same scope.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nrec {\n  a = 1;\n  b = a + 2;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial icat Package Definition\nDESCRIPTION: Basic Nix package definition using fetchFromGitHub\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\n# icat.nix\n{\n  stdenv,\n  fetchFromGitHub,\n}:\n\nstdenv.mkDerivation {\n  pname = \"icat\";\n  version = \"v0.5\";\n\n  src = fetchFromGitHub {\n    owner = \"atextor\";\n    repo = \"icat\";\n    rev = \"v0.5\";\n    sha256 = \"0wyy2ksxp95vnh71ybj1bbmqd5ggp13x3mk37pzr99ljs9awy8ka\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Using Default Values in Nix Function Arguments\nDESCRIPTION: Demonstrates how to specify default values for attributes in a function's destructured argument set. Attributes with default values are not required when calling the function.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_26\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = {a, b ? 0}: a + b;\nin\nf { a = 1; }\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = {a ? 0, b ? 0}: a + b;\nin\nf { } # empty attribute set\n```\n\n----------------------------------------\n\nTITLE: Adding Library Functions to Module Parameters\nDESCRIPTION: This diff shows how to add the Nixpkgs library as a parameter to the module, which provides helper functions for option creation and type definitions.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n- { ... }:\n+ { lib, ... }:\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing an S3 binary cache upload script\nDESCRIPTION: A shell script that serves as a post-build hook to automatically upload built Nix store paths to an S3-compatible binary cache.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nset -eu\nset -f # disable globbing\nexport IFS=' '\necho \"Uploading paths\" $OUT_PATHS\nexec nix copy --to \"s3://example-nix-cache\" $OUT_PATHS\n```\n\n----------------------------------------\n\nTITLE: Running and Testing the Flask Application using Shell Commands\nDESCRIPTION: These shell commands demonstrate how to start the Flask application and test it using curl and jq within the Nix shell environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/python-environment.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell\n\n[nix-shell:~]$ python ./myapp.py\n * Serving Flask app 'myapp'\n * Debug mode: off\nWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.\n * Running on all addresses (0.0.0.0)\n * Running on http://127.0.0.1:5000\n * Running on http://192.168.1.100:5000\nPress CTRL+C to quit\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell\n\n[nix-shell:~]$ curl 127.0.0.1:5000\n{\"message\":\"Hello, Nix!\"}\n\n[nix-shell:~]$ curl 127.0.0.1:5000 | jq '.message'\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100    26  100    26    0     0  13785      0 --:--:-- --:--:-- --:--:-- 26000\n\"Hello, Nix!\"\n```\n\n----------------------------------------\n\nTITLE: Allowing Additional Attributes in Nix Function Arguments\nDESCRIPTION: Shows how to use the ellipsis (...) syntax to allow passing additional attributes beyond those explicitly requested by a function without causing an error.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_27\n\nLANGUAGE: nix\nCODE:\n```\n{a, b, ...}: a + b\n```\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  f = {a, b, ...}: a + b;\nin\nf { a = 1; b = 2; c = 3; }\n```\n\n----------------------------------------\n\nTITLE: Evaluating NixOS Modules\nDESCRIPTION: Demonstrates how to evaluate multiple modules using lib.evalModules and extract the final configuration values.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/a-basic-module/index.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> {};\n  lib = pkgs.lib;\n  eval = lib.evalModules {\n    modules = [\n      ./options.nix\n      ./config.nix\n    ];\n  };\nin\n  eval.config\n```\n\n----------------------------------------\n\nTITLE: Initial GNU Hello Package Function\nDESCRIPTION: A Nix function to package GNU Hello, including package name, version, and source fetching using fetchzip. The hash is initially set to an empty string.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n# hello.nix\n{\n  stdenv,\n  fetchzip,\n}:\n\nstdenv.mkDerivation {\n  pname = \"hello\";\n  version = \"2.12.1\";\n\n  src = fetchzip {\n    url = \"https://ftp.gnu.org/gnu/hello/hello-2.12.1.tar.gz\";\n    sha256 = \"\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Host Platform Config with Nix\nDESCRIPTION: This snippet shows how to use Nix to determine the host platform configuration. It uses the gnu-config package to run the config.guess script, which outputs the platform configuration string.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$(nix-build '<nixpkgs>' -I nixpkgs=channel:nixos-23.11 -A gnu-config)/config.guess\n```\n\n----------------------------------------\n\nTITLE: Creating a Nix shell environment with cowsay and lolcat\nDESCRIPTION: This snippet demonstrates how to create a Nix shell environment with the cowsay and lolcat packages, making these programs available for use within the shell.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/ad-hoc-shell-environments.md#2025-04-16_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-shell -p cowsay lolcat\nthese 3 derivations will be built:\n  /nix/store/zx1j8gchgwzfjn7sr4r8yxb7a0afkjdg-builder.pl.drv\n  /nix/store/h9sbaa2k8ivnihw2czhl5b58k0f7fsfh-lolcat-100.0.1.drv\n  ...\n\n[nix-shell:~]$\n```\n\n----------------------------------------\n\nTITLE: Creating a Shell Environment with mkShellNoCC in Nix\nDESCRIPTION: Demonstrates creating a development shell environment with the cowsay package and a custom welcome message. This example shows function argument patterns with defaults and attribute set construction.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_36\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs ? import <nixpkgs> {} }:\nlet\n  message = \"hello world\";\nin\npkgs.mkShellNoCC {\n  packages = with pkgs; [ cowsay ];\n  shellHook = ''\n    cowsay ${message}\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Let Expression and Recursive Attribute Set in Nix\nDESCRIPTION: This example demonstrates the similarity between let expressions and recursive attribute sets. Both allow references to other defined values and their declarations can be in any order.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  b = a + 1;\n  c = a + b;\n  a = 1;\nin {  c = c; a = a; b = b; }\n```\n\nLANGUAGE: nix\nCODE:\n```\nrec {\n  b = a + 1;\n  c = a + b;\n  a = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Alternative Source Configuration\nDESCRIPTION: Nix configuration to import the original build file with overridden sources.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nimport ../default.nix { sources = import ./npins; }\n```\n\n----------------------------------------\n\nTITLE: Creating Basic NixOS Configuration\nDESCRIPTION: Defines a basic NixOS configuration file that imports Amazon EC2 specific modules.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/deploying-nixos-using-terraform.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n{ config, lib, pkgs, ... }: {\n  imports = [ <nixpkgs/nixos/modules/virtualisation/amazon-image.nix> ];\n\n  # Open https://search.nixos.org/options for all options\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping a shell script as a reproducible package\nDESCRIPTION: Implementing the geocoding package by wrapping a shell script with pkgs.writeShellApplication to make it reproducible and available as a package.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n   config = {\n+    scripts.geocode = pkgs.writeShellApplication {\n+      name = \"geocode\";\n+      runtimeInputs = with pkgs; [ curl jq ];\n+      text = ''exec ${./geocode.sh} \"$@\"'';\n+    };\n+\n     scripts.output = pkgs.writeShellApplication {\n       name = \"map\";\n       runtimeInputs = with pkgs; [ curl feh ];\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Parameters with callPackage\nDESCRIPTION: Shows how to customize a package by passing specific parameters to callPackage. The example overrides the default 'audience' parameter with a custom value.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\nin\n{\n  hello = pkgs.callPackage ./hello.nix { audience = \"people\"; };\n}\n```\n\n----------------------------------------\n\nTITLE: NixOS Configuration with QEMU Options for Sway\nDESCRIPTION: This Nix configuration file sets up a NixOS system with Sway enabled and includes QEMU virtualization options, specifically adding the virtio-vga device for compatibility.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_21\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, ... }:\n{\n  boot.loader.systemd-boot.enable = true;\n  boot.loader.efi.canTouchEfiVariables = true;\n\n  services.xserver.enable = true;\n\n  services.xserver.displayManager.gdm.enable = true;\n  programs.sway.enable = true;\n\n  imports = [ <nixpkgs/nixos/modules/virtualisation/qemu-vm.nix> ];\n  virtualisation.qemu.options = [\n    \"-device virtio-vga\"\n  ];\n\n  users.users.alice = {\n    isNormalUser = true;\n    extraGroups = [ \"wheel\" ];\n    initialPassword = \"test\";\n  };\n\n  system.stateVersion = \"24.05\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Binary Cache Once with Command Line Flags in Nix\nDESCRIPTION: This command demonstrates how to make Nix exclusively use a custom binary cache at example.org for a single build operation using command line flags. It specifies both the substituter URL and the trusted public key required for verification.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/add-binary-cache.md#2025-04-16_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build --substituters https://example.org --trusted-public-keys example.org:My56...Q==%\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Nix\nDESCRIPTION: Shell session showing the process of building the Docker image using nix-build command.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/building-and-running-docker-images.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build hello-docker.nix\nthese derivations will be built:\n  /nix/store/qpgdp0qpd8ddi1ld72w02zkmm7n87b92-docker-layer-hello-docker.drv\n  /nix/store/m4xyfyviwbi38sfplq3xx54j6k7mccfb-runtime-deps.drv\n  /nix/store/v0bvy9qxa79izc7s03fhpq5nqs2h4sr5-docker-image-hello-docker.tar.gz.drv\nwarning: unknown setting 'experimental-features'\nbuilding '/nix/store/qpgdp0qpd8ddi1ld72w02zkmm7n87b92-docker-layer-hello-docker.drv'...\nNo contents to add to layer.\nPacking layer...\nComputing layer checksum...\nFinished building layer 'hello-docker'\nbuilding '/nix/store/m4xyfyviwbi38sfplq3xx54j6k7mccfb-runtime-deps.drv'...\nbuilding '/nix/store/v0bvy9qxa79izc7s03fhpq5nqs2h4sr5-docker-image-hello-docker.tar.gz.drv'...\nAdding layer...\ntar: Removing leading `/' from member names\nAdding meta...\nCooking the image...\nFinished.\n/nix/store/y74sb4nrhxr975xs7h83izgm8z75x5fc-docker-image-hello-docker.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Initial icat Package Function\nDESCRIPTION: A Nix function to package icat, including package name and version. The source fetching is not yet implemented.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n# icat.nix\n{\n  stdenv,\n  fetchFromGitHub,\n}:\n\nstdenv.mkDerivation {\n  pname = \"icat\";\n  version = \"v0.5\";\n\n  src = fetchFromGitHub {\n    # ...\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users Option for Marker Configuration\nDESCRIPTION: Adds a users option that accepts an attribute set of userType objects. This allows defining multiple named users, each with their own markers and configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_26\n\nLANGUAGE: nix\nCODE:\n```\n    users = lib.mkOption {\n      type = lib.types.attrsOf userType;\n    };\n```\n\n----------------------------------------\n\nTITLE: Final icat Package with X11 Dependencies\nDESCRIPTION: Complete package definition with all required dependencies including X11\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\n# icat.nix\n{\n  stdenv,\n  fetchFromGitHub,\n  imlib2,\n  xorg,\n}:\n\nstdenv.mkDerivation {\n  pname = \"icat\";\n  version = \"v0.5\";\n\n  src = fetchFromGitHub {\n    owner = \"atextor\";\n    repo = \"icat\";\n    rev = \"v0.5\";\n    sha256 = \"0wyy2ksxp95vnh71ybj1bbmqd5ggp13x3mk37pzr99ljs9awy8ka\";\n  };\n\n  buildInputs = [ imlib2 xorg.libX11 ];\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix to Exclusively Use a Custom Binary Cache\nDESCRIPTION: These commands configure Nix to exclusively use a custom binary cache, replacing the default cache entirely. The substituters and trusted-public-keys settings are written to the nix.conf file.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/add-binary-cache.md#2025-04-16_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"substituters = https://example.org\" >> /etc/nix/nix.conf\n$ echo \"trusted-public-keys = example.org:My56...Q==%\" >> /etc/nix/nix.conf\n```\n\n----------------------------------------\n\nTITLE: Let Expression with Out-of-Order Declarations in Nix\nDESCRIPTION: This example shows how let expressions in Nix allow name declarations in any order. The value 'b' references 'a' even though 'a' is declared after 'b', showing the non-sequential nature of let bindings.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  b = a + 1;\n  a = 1;\nin\na + b\n```\n\n----------------------------------------\n\nTITLE: Self-Referencing Attribute Set Through Explicit Naming\nDESCRIPTION: Shows how to create self-referencing attribute sets by explicitly naming the set rather than using rec, which provides better control and avoids recursion issues.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  argset = {\n    a = 1;\n    b = argset.a + 2;\n  };\nin\n  argset\n```\n\n----------------------------------------\n\nTITLE: Defining a Build with Dependencies in Nix\nDESCRIPTION: This snippet shows a build.nix file that defines a build with cowsay as a dependency. It uses runCommand to create an output using the cowsay command.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/sharing-dependencies.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n# build.nix\n{ cowsay, runCommand }:\nrunCommand \"cowsay-output\" { buildInputs = [ cowsay ]; } ''\n  cowsay Hello, Nix! > $out\n''\n```\n\n----------------------------------------\n\nTITLE: Using callPackage to Invoke a Package Recipe\nDESCRIPTION: Shows how to use callPackage to automatically provide dependencies to a package function. The function imports Nixpkgs and calls the hello.nix function with automatic argument resolution.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\nin\npkgs.callPackage ./hello.nix { }\n```\n\n----------------------------------------\n\nTITLE: Testing Distributed Builds with Nix\nDESCRIPTION: Command to test the distributed build setup by forcing a build to run on the remote machine. The test creates a simple derivation that will always be rebuilt due to its dependency on the current date.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build --max-jobs 0 -E << EOF\n(import <nixpkgs> {}).writeText \"test\" \"$(date)\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Implementing User-Specific Path Styles in Nix\nDESCRIPTION: This snippet adds a new option for user-specific path styles and updates the path configuration to use these styles.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_36\n\nLANGUAGE: nix\nCODE:\n```\nusers = lib.mkOption {\n  type = lib.types.attrsOf (lib.types.submodule {\n    options.pathStyle = lib.mkOption {\n      type = pathStyleType;\n      default = {};\n    };\n  });\n};\n\nmap.paths = builtins.map (user: {\n  locations = [\n    user.departure.location\n    user.arrival.location\n  ];\n  style = user.pathStyle;\n}) (lib.filter (user:\n  user.departure.location != null\n  && user.arrival.location != null\n) (lib.attrValues config.users));\n```\n\n----------------------------------------\n\nTITLE: Adding pkgs Module Argument for Dependency Management\nDESCRIPTION: This diff shows how to make the 'pkgs' argument available to the module by adding a module that sets '_module.args', enabling access to dependencies like curl and feh.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n pkgs.lib.evalModules {\n   modules = [\n+    ({ config, ... }: { config._module.args = { inherit pkgs; }; })\n     ./default.nix\n   ];\n }\n```\n\n----------------------------------------\n\nTITLE: Defining User Submodule Type\nDESCRIPTION: Creates a userType submodule with a departure option of type markerType. This establishes a nested submodule structure for handling user-specific marker configurations.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_25\n\nLANGUAGE: nix\nCODE:\n```\n  userType = lib.types.submodule {\n    options = {\n      departure = lib.mkOption {\n        type = markerType;\n        default = {};\n      };\n    };\n  };\n\nin {\n```\n\n----------------------------------------\n\nTITLE: Cross Compiling with Nix Shell\nDESCRIPTION: Shell command to compile the C program using the cross-compiler defined in shell.nix. The $CC environment variable is automatically set to the appropriate cross compiler.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell --run '$CC hello.c -o hello' shell.nix\n```\n\n----------------------------------------\n\nTITLE: Configuring nix-ld for Running Unpackaged Programs in NixOS\nDESCRIPTION: This Nix configuration enables nix-ld and specifies libraries to be included in the dynamic linker path. It allows running unpackaged programs that expect a standard Linux environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nprograms.nix-ld.enable = true;\nprograms.nix-ld.libraries = with pkgs; [\n  # Add any missing dynamic libraries for unpackaged programs\n  # here, NOT in environment.systemPackages\n];\n```\n\n----------------------------------------\n\nTITLE: Merging Attribute Sets with Update Operator\nDESCRIPTION: Shows how the attribute set update operator // works for shallow merging of two attribute sets, with the right-hand side taking precedence for duplicate keys.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\n{ a = 1; b = 2; } // { b = 3; c = 4; }\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Nix Shell Environment Configuration\nDESCRIPTION: Basic shell.nix configuration that creates a development environment with the 'hello' package using nixpkgs from nixos-23.11 release.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/direnv.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n\npkgs.mkShellNoCC {\n  packages = with pkgs; [\n    hello\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Generating binary cache key pair (Shell)\nDESCRIPTION: This shell command generates a private and public key pair for signing the binary cache. It uses nix-store to create the keys.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnix-store --generate-binary-cache-key cache.example.com cache-private-key.pem cache-public-key.pem\n```\n\n----------------------------------------\n\nTITLE: Implementing Path Configuration in Nix\nDESCRIPTION: This snippet defines a new module for configuring paths on a map. It includes options for specifying locations and adds them to the map configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_34\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, config, ... }:\nlet\n  pathType = lib.types.submodule {\n    options = {\n      locations = lib.mkOption {\n        type = lib.types.listOf lib.types.str;\n      };\n    };\n  };\nin\n{\n  options = {\n    map.paths = lib.mkOption {\n      type = lib.types.listOf pathType;\n    };\n  };\n  config = {\n    requestParams =\n      let\n        attrForLocation = loc:\n          \"$(${config.scripts.geocode}/bin/geocode ${lib.escapeShellArg loc})\";\n        paramForPath = path:\n          let\n            attributes =\n              builtins.map attrForLocation path.locations;\n          in\n          ''path=\"${lib.concatStringsSep \"|\" attributes}\"'';\n      in\n      builtins.map paramForPath config.map.paths;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Git-tracked and Build-relevant Files with Intersection\nDESCRIPTION: Using lib.fileset.intersection to create a file set containing only files that are both tracked by Git and explicitly included in the build.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\n:caption: build.nix\n  sourceFiles =\n    fs.intersection\n      (fs.gitTracked ./.)\n      (fs.unions [\n        ./hello.txt\n        ./world.txt\n        ./build.sh\n        ./src\n      ]);\n```\n\n----------------------------------------\n\nTITLE: Defining Color and Size Options for Map Markers in Nix\nDESCRIPTION: This snippet adds color and size options to the marker configuration. It uses the `either` and `enum` types to define allowed values for colors and sizes.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_33\n\nLANGUAGE: nix\nCODE:\n```\ncolorType = lib.types.either\n  (lib.types.strMatching \"0x[0-9A-F]{6}\")\n  (lib.types.enum [\n    \"black\" \"brown\" \"green\" \"purple\" \"yellow\"\n    \"blue\" \"gray\" \"orange\" \"red\" \"white\" ]);\n\nmarkerType = lib.types.submodule {\n  options = {\n    location = lib.mkOption {\n      ...\n    };\n\n    style.color = lib.mkOption {\n      type = colorType;\n      default = \"red\";\n    };\n\n    style.size = lib.mkOption {\n      type = lib.types.enum\n        [ \"tiny\" \"small\" \"medium\" \"large\" ];\n      default = \"medium\";\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Installed Programs in VM\nDESCRIPTION: Demonstrates testing installed programs in the running virtual machine, showing that the programs specified in the configuration are available.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cowsay hello | lolcat\n```\n\n----------------------------------------\n\nTITLE: Checking package versions in a Nix shell\nDESCRIPTION: This snippet demonstrates how to check the versions of packages (git, nvim, and npm) installed in a Nix shell environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/ad-hoc-shell-environments.md#2025-04-16_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n[nix-shell:~]$ which git\n/nix/store/3cdi52xh6lk3h1fb51jkxs3p561p37wg-git-2.38.3/bin/git\n\n[nix-shell:~]$ git --version\ngit version 2.38.3\n\n[nix-shell:~]$ which nvim\n/nix/store/ynskzgkf07lmrrs3cl2kzr9ah487lwab-neovim-0.8.1/bin/nvim\n\n[nix-shell:~]$ nvim --version | head -1\nNVIM v0.8.1\n\n[nix-shell:~]$ which npm\n/nix/store/q12w83z0i5pi1y0m6am7qmw1r73228sh-nodejs-18.12.1/bin/npm\n\n[nix-shell:~]$ npm --version\n8.19.2\n```\n\n----------------------------------------\n\nTITLE: Creating an Interdependent Package Set with Manual Dependencies in Nix\nDESCRIPTION: This snippet demonstrates how to create a recursive attribute set of derivations using pkgs.callPackage. It shows manual specification of dependencies between packages.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\nin\nrec {\n  a = pkgs.callPackage ./a.nix { };\n  b = pkgs.callPackage ./b.nix { inherit a; };\n  c = pkgs.callPackage ./c.nix { inherit b; };\n  d = pkgs.callPackage ./d.nix { };\n  e = pkgs.callPackage ./e.nix { inherit c d; };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Center and Zoom for Multiple Markers\nDESCRIPTION: Configures the map center and zoom level based on the number of markers. Uses lib.mkIf to conditionally set these values to null, allowing the Google Maps API to automatically determine appropriate values.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_24\n\nLANGUAGE: nix\nCODE:\n```\n    map.center = lib.mkIf\n      (lib.length config.map.markers >= 1)\n      null;\n\n    map.zoom = lib.mkIf\n      (lib.length config.map.markers >= 2)\n      null;\n\n     requestParams = let\n       paramForMarker = marker:\n         let\n```\n\n----------------------------------------\n\nTITLE: Basic NixOS Configuration Structure\nDESCRIPTION: Shows the basic structure of a NixOS configuration file. This example includes hardware configuration imports and system package specifications using the with expression for scope control.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_37\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, ... }: {\n\n  imports = [ ./hardware-configuration.nix ];\n\n  environment.systemPackages = with pkgs; [ git ];\n\n  # ...\n\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Nix Files with fileFilter Function\nDESCRIPTION: Using lib.fileset.fileFilter to select only files with a specific extension (.nix) from a directory, replacing explicit file listings.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n:caption: build.nix\n   sourceFiles =\n     fs.difference\n       ./.\n       (fs.unions [\n         (fs.maybeMissing ./result)\n-        ./default.nix\n-        ./build.nix\n+        (fs.fileFilter (file: file.hasExt \"nix\") ./.)\n         ./npins\n       ]);\n```\n\n----------------------------------------\n\nTITLE: Defining a Nix Project with Pinned Nixpkgs\nDESCRIPTION: This snippet demonstrates how to define a Nix project in default.nix using a pinned version of nixpkgs. It fetches a specific version of nixpkgs and defines a build attribute.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/sharing-dependencies.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n# default.nix\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n{\n  build = pkgs.callPackage ./build.nix {};\n}\n```\n\n----------------------------------------\n\nTITLE: Updated build.nix to include multiple files\nDESCRIPTION: Modifies build.nix to include all files in the project directory and copy multiple files to the output.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n{ stdenv, lib }:\nlet\n  fs = lib.fileset;\n-  sourceFiles = ./hello.txt;\n+  sourceFiles = ./.;\nin\n\nfs.trace sourceFiles\n\nstdenv.mkDerivation {\n  name = \"fileset\";\n  src = fs.toSource {\n    root = ./.;\n    fileset = sourceFiles;\n  };\n  postInstall = ''\n    mkdir $out\n-    cp -v hello.txt $out\n+    cp -v {hello,world}.txt $out\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Shell Entry Point\nDESCRIPTION: Shell.nix configuration to provide convenient access to the development environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n(import ./. {}).shell\n```\n\n----------------------------------------\n\nTITLE: Using cowsay and lolcat in a Nix shell\nDESCRIPTION: This snippet shows how to use the cowsay and lolcat programs within a Nix shell environment after they have been made available.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/ad-hoc-shell-environments.md#2025-04-16_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n[nix-shell:~]$ cowsay Hello, Nix! | lolcat\n```\n\n----------------------------------------\n\nTITLE: Implementing a submodule type for complex options\nDESCRIPTION: Creating a submodule type for map markers with nested options, allowing for structured data with type checking in the configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n:caption: marker.nix\n-{ pkgs, lib, config, ... }: {\n+{ pkgs, lib, config, ... }:\n+let\n+  markerType = lib.types.submodule {\n+    options = {\n+      location = lib.mkOption {\n+        type = lib.types.nullOr lib.types.str;\n+        default = null;\n+      };\n+    };\n+  };\n+in {\n+\n+  options = {\n+    map.markers = lib.mkOption {\n+      type = lib.types.listOf markerType;\n+    };\n+  };\n```\n\n----------------------------------------\n\nTITLE: Problematic with Expression for Importing Nixpkgs\nDESCRIPTION: Demonstrates an anti-pattern using the with expression to bring all attributes of nixpkgs into scope, which makes static analysis difficult and creates unclear name origins.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\nwith (import <nixpkgs> {});\n\n# ... lots of code\n```\n\n----------------------------------------\n\nTITLE: Initializing npins with Nixpkgs\nDESCRIPTION: Command to initialize npins and add the Nixpkgs 23.11 release branch as a dependency.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-shell -p npins --run \"npins init --bare; npins add github nixos nixpkgs --branch nixos-23.11\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Remote Files with builtins.fetchurl in Nix\nDESCRIPTION: Shows how to use the built-in fetchurl function to download a file from a URL during evaluation. The function returns the path to the downloaded file in the Nix store.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_33\n\nLANGUAGE: nix\nCODE:\n```\nbuiltins.fetchurl \"https://github.com/NixOS/nix/archive/7c3ab5751568a0bc63430b33a5169c5e4784a0ff.tar.gz\"\n```\n\n----------------------------------------\n\nTITLE: Deploying NixOS Configuration Changes\nDESCRIPTION: Commands to initialize Terraform and apply the updated configuration with NixOS deployment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/deploying-nixos-using-terraform.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform init\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Accessing configuration values in command execution\nDESCRIPTION: Using the config attribute to access option values and concatenate them into command line arguments using lib.concatStringsSep.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n   config = {\n     scripts.output = pkgs.writeShellApplication {\n       name = \"map\";\n       runtimeInputs = with pkgs; [ curl feh ];\n       text = ''\n-        ${./map} size=640x640 scale=2 | feh -\n+        ${./map} ${lib.concatStringsSep \" \"\n+          config.requestParams} | feh -\n       '';\n\n```\n\n----------------------------------------\n\nTITLE: Adding Style Labels with String Validation\nDESCRIPTION: Implements style customization for markers using strMatching type to validate that labels conform to API requirements (uppercase letter or number). Adds a style.label option to the markerType submodule.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_28\n\nLANGUAGE: nix\nCODE:\n```\n         type = lib.types.nullOr lib.types.str;\n         default = null;\n       };\n\n      style.label = lib.mkOption {\n        type = lib.types.nullOr\n          (lib.types.strMatching \"[A-Z0-9]\");\n        default = null;\n      };\n     };\n   };\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Binary Cache Permanently in Nix Configuration\nDESCRIPTION: These commands show how to configure Nix to permanently use a custom binary cache in addition to the default cache. The settings are added to the nix.conf file with the extra-substituters and extra-trusted-public-keys options.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/add-binary-cache.md#2025-04-16_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"extra-substituters = https://example.org\" >> /etc/nix/nix.conf\n$ echo \"extra-trusted-public-keys = example.org:My56...Q==%\" >> /etc/nix/nix.conf\n```\n\n----------------------------------------\n\nTITLE: Declaring a Module Option with Type\nDESCRIPTION: This diff shows how to declare a 'scripts.output' option with the 'lines' type using lib.mkOption. The 'lines' type ensures values are strings that can be concatenated with newlines.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n { lib, ... }: {\n\n+ options = {\n+   scripts.output = lib.mkOption {\n+     type = lib.types.lines;\n+   };\n+ };\n\n }\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on macOS\nDESCRIPTION: Downloads and installs Nix package manager on macOS systems using the recommended multi-user installation method.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/install-nix.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://nixos.org/nix/install | sh\n```\n\n----------------------------------------\n\nTITLE: Updating Raspberry Pi Firmware - Shell Commands\nDESCRIPTION: Commands to update the Raspberry Pi firmware using the raspberrypi-eeprom package.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/installing-nixos-on-a-raspberry-pi.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# nix-shell -p raspberrypi-eeprom\n# mount /dev/disk/by-label/FIRMWARE /mnt\n# BOOTFS=/mnt FIRMWARE_RELEASE_STATUS=stable rpi-eeprom-update -d -a\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix Default Build File\nDESCRIPTION: Basic default.nix configuration that imports npins sources and sets up package building with nixpkgs.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  sources ? import ./npins,\n  system ? builtins.currentSystem,\n  pkgs ? import sources.nixpkgs { inherit system; config = {}; overlays = []; },\n}:\n{\n  package = pkgs.hello;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Marker Parameters with Style Labels\nDESCRIPTION: Updates the paramForMarker function to include style labels in the request parameters when available. Creates marker attributes by conditionally adding labels and combining them with geocoded locations.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_29\n\nLANGUAGE: nix\nCODE:\n```\n     requestParams = let\n      paramForMarker = marker:\n        let\n          attributes =\n            lib.optional (marker.style.label != null)\n            \"label:${marker.style.label}\"\n            ++ [\n              \"$(${config.scripts.geocode}/bin/geocode ${\n                lib.escapeShellArg marker.location\n              })\"\n            ];\n        in \"markers=\\\"${lib.concatStringsSep \"|\" attributes}\\\"\";\n      in\n        builtins.map paramForMarker config.map.markers;\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Key Pair for Remote Build Authentication\nDESCRIPTION: Command to generate an SSH key pair as root user on the local machine. This key will be used by the Nix daemon to authenticate with remote build machines.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# ssh-keygen -f /root/.ssh/remotebuild\n```\n\n----------------------------------------\n\nTITLE: Loading and Running Docker Image\nDESCRIPTION: Shell commands demonstrating how to load the built image into Docker and run it using various methods.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/building-and-running-docker-images.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker load < result\nLoaded image: hello-docker:y74sb4nrhxr975xs7h83izgm8z75x5fc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker load < /nix/store/y74sb4nrhxr975xs7h83izgm8z75x5fc-docker-image-hello-docker.tar.gz\nLoaded image: hello-docker:y74sb4nrhxr975xs7h83izgm8z75x5fc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker load < $(nix-build hello-docker.nix)\nLoaded image: hello-docker:y74sb4nrhxr975xs7h83izgm8z75x5fc\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -t hello-docker:y74sb4nrhxr975xs7h83izgm8z75x5fc\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Implementing conditional configuration with mkIf\nDESCRIPTION: Using lib.mkIf to conditionally add a parameter to the request only when a specific condition is met, in this case when zoom is not null.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n     requestParams = [\n       \"size=640x640\"\n       \"scale=2\"\n+      (lib.mkIf (config.map.zoom != null)\n+        \"zoom=${toString config.map.zoom}\")\n     ];\n   };\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix for Distributed Builds on Non-NixOS Systems\nDESCRIPTION: Configuration snippet for non-NixOS systems to set up distributed builds. This adds the remote builder to the Nix configuration file and enables substitutes for remote builders.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# cat << EOF >> /etc/nix/nix.conf\nbuilders = ssh-ng://remotebuild@remotebuilder $(nix-instantiate --eval -E builtins.currentSystem) /root/.ssh/remotemachine - - nixos-test,big-parallel,kvm\nbuilders-use-substitutes = true\n```\n\n----------------------------------------\n\nTITLE: Adding Shell Hook to Nix Configuration\nDESCRIPTION: Diff showing how to add a shellHook to the Nix configuration that runs the hello command when entering the environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/direnv.md#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n let\n   nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n   pkgs = import nixpkgs { config = {}; overlays = []; };\n in\n\n pkgs.mkShellNoCC {\n   packages = with pkgs; [\n     hello\n   ];\n+\n+  shellHook = ''\n+    hello\n+  '';\n }\n```\n\n----------------------------------------\n\nTITLE: Building a NixOS Virtual Machine\nDESCRIPTION: Uses nix-build to create a QEMU-based virtual machine from a NixOS configuration. This builds the VM attribute using the specified NixOS configuration file.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build '<nixpkgs/nixos>' -A vm -I nixpkgs=channel:nixos-24.05 -I nixos-config=./configuration.nix\n```\n\n----------------------------------------\n\nTITLE: Adding Color Type and Option in Nix Module\nDESCRIPTION: This snippet defines a new colorType for path styling and adds a color option to the pathStyleType submodule. It allows specifying colors by name or hexadecimal values.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_37\n\nLANGUAGE: nix\nCODE:\n```\n# Either a color name, `0xRRGGBB` or `0xRRGGBBAA`\ncolorType = lib.types.either\n  (lib.types.strMatching \"0x[0-9A-F]{6}([0-9A-F]{2})?\")\n  (lib.types.enum [\n    \"black\" \"brown\" \"green\" \"purple\" \"yellow\"\n    \"blue\" \"gray\" \"orange\" \"red\" \"white\"\n  ]);\n\npathStyleType = lib.types.submodule {\n  # ... existing code ...\n  color = lib.mkOption {\n    type = colorType;\n    default = \"blue\";\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Using cowsay and lolcat in Nix Shell\nDESCRIPTION: This bash command shows how to use the cowsay and lolcat packages within a Nix shell environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/declarative-shell.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncowsay hello | lolcat\n```\n\n----------------------------------------\n\nTITLE: Generating binary cache keys with nix-store\nDESCRIPTION: Commands to generate cryptographic keys for signing Nix paths and displaying the public key for distribution.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ nix-store --generate-binary-cache-key example-nix-cache-1 /etc/nix/key.private /etc/nix/key.public\n$ cat /etc/nix/key.public\nexample-nix-cache-1:1/cKDz3QCCOmwcztD2eV6Coggp6rqc9DGjWv7C0G+rM=\n```\n\n----------------------------------------\n\nTITLE: Using Dot Notation for Attribute Assignment in Nix\nDESCRIPTION: This example demonstrates using dot notation to assign deeply nested attributes in a single statement. This creates a nested structure of attribute sets.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\n{ a.b.c = 1; }\n```\n\n----------------------------------------\n\nTITLE: Verifying Binary Architecture with file Command\nDESCRIPTION: Shell command to verify the architecture of the compiled binary. It confirms that the output is indeed an ARM aarch64 executable that's statically linked.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell --run 'file hello' shell.nix\nhello: ELF 64-bit LSB executable, ARM aarch64, version 1 (SYSV), statically linked, with debug_info, not stripped\n```\n\n----------------------------------------\n\nTITLE: Building and Running Cross-Compiled Hello World\nDESCRIPTION: This shell command builds the cross-compiled Hello World example and prints the output for both Raspberry Pi and Windows targets.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cat $(nix-build cross-compile.nix)\n```\n\n----------------------------------------\n\nTITLE: Creating a nested Nix shell with Python\nDESCRIPTION: This snippet shows how to create a nested Nix shell environment by adding Python to an existing shell session.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/ad-hoc-shell-environments.md#2025-04-16_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n[nix-shell:~]$ nix-shell -p python3\nthis path will be fetched (11.42 MiB download, 62.64 MiB unpacked):\n  /nix/store/pwy30a7siqrkki9r7xd1lksyv9fg4l1r-python3-3.10.11\ncopying path '/nix/store/pwy30a7siqrkki9r7xd1lksyv9fg4l1r-python3-3.10.11' from 'https://cache.nixos.org'...\n\n[nix-shell:~]$ python --version\nPython 3.10.11\n```\n\n----------------------------------------\n\nTITLE: Correcting Type Error with a Valid String Value\nDESCRIPTION: This diff shows the correction of the type error by assigning a valid string value to the 'scripts.output' option, which runs the map.sh script with specific parameters.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n   config = {\n-    scripts.output = 42;\n+    scripts.output = ''\n+      ./map.sh size=640x640 scale=2 | feh -\n+    '';\n   };\n```\n\n----------------------------------------\n\nTITLE: Using Git-tracked Files in Nix Builds\nDESCRIPTION: Creating a file set that includes only files tracked by Git using lib.fileset.gitTracked, useful for ensuring only committed files are part of the build.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n:caption: build.nix\n  sourceFiles = fs.gitTracked ./.;\n```\n\n----------------------------------------\n\nTITLE: Configuring NixOS Deployment Module in Terraform\nDESCRIPTION: Sets up the deploy_nixos module to manage NixOS configuration on the AWS instance.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/deploying-nixos-using-terraform.md#2025-04-16_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"deploy_nixos\" {\n    source = \"git::https://github.com/tweag/terraform-nixos.git//deploy_nixos?ref=5f5a0408b299874d6a29d1271e9bffeee4c9ca71\"\n    nixos_config = \"${path.module}/configuration.nix\"\n    target_host = aws_instance.machine.public_ip\n    ssh_private_key_file = local_file.machine_ssh_key.filename\n    ssh_agent = false\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'inherit' with Attribute Set in Nix\nDESCRIPTION: This example demonstrates inheriting attributes from a specific attribute set using parentheses. This allows pulling multiple values from an attribute set concisely.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_16\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  a = { x = 1; y = 2; };\nin\n{\n  inherit (a) x y;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a map center location option\nDESCRIPTION: Creating a new option for specifying the map center location with a default value set to \"switzerland\".\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n         type = lib.types.nullOr lib.types.int;\n         default = 10;\n       };\n+\n+      center = lib.mkOption {\n+        type = lib.types.nullOr lib.types.str;\n+        default = \"switzerland\";\n+      };\n     };\n   };\n```\n\n----------------------------------------\n\nTITLE: Configuring private signing key in nix.conf\nDESCRIPTION: Configuration setting for nix.conf to specify the location of the private key file used for signing derivations.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nsecret-key-files = /etc/nix/key.private\n```\n\n----------------------------------------\n\nTITLE: Accessing Nix Built-in Functions\nDESCRIPTION: Shows how to access built-in functions (primops) that are part of the Nix language interpreter through the builtins namespace.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_29\n\nLANGUAGE: nix\nCODE:\n```\nbuiltins.toString\n```\n\n----------------------------------------\n\nTITLE: Overriding Sources via Command Line\nDESCRIPTION: Command to override sources when building using command line arguments.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\nnix-build .. -A build --arg sources 'import ./npins'\n```\n\n----------------------------------------\n\nTITLE: Explicitly Including Files with Unions in Nix\nDESCRIPTION: Using lib.fileset.unions to explicitly include only the files needed for a build, which means new files added to the directory are ignored by default.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\n:caption: build.nix\n{ stdenv, lib }:\nlet\n  fs = lib.fileset;\n  sourceFiles = fs.unions [\n    ./hello.txt\n    ./world.txt\n    ./build.sh\n    (fs.fileFilter\n      (file: file.hasExt \"c\" || file.hasExt \"h\")\n      ./src\n    )\n  ];\nin\n\nfs.trace sourceFiles\n\nstdenv.mkDerivation {\n  name = \"fileset\";\n  src = fs.toSource {\n    root = ./.;\n    fileset = sourceFiles;\n  };\n  postInstall = ''\n    cp -vr . $out\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Initial build.nix using lib.fileset.toSource\nDESCRIPTION: Defines a build.nix file that uses lib.fileset.toSource to add a single file to the Nix store.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{ stdenv, lib }:\nlet\n  fs = lib.fileset;\n  sourceFiles = ./hello.txt;\nin\n\nfs.trace sourceFiles\n\nstdenv.mkDerivation {\n  name = \"fileset\";\n  src = fs.toSource {\n    root = ./.;\n    fileset = sourceFiles;\n  };\n  postInstall = ''\n    mkdir $out\n    cp -v hello.txt $out\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Label from Username\nDESCRIPTION: Adds a config section to the userType submodule that sets a default label for departure markers based on the username. Uses mkDefault to ensure explicitly set values take precedence over the automatically generated label.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_32\n\nLANGUAGE: nix\nCODE:\n```\n    config = {\n      departure.style.label = lib.mkDefault\n        (firstUpperAlnum name);\n    };\n  });\n\nin {\n```\n\n----------------------------------------\n\nTITLE: Building Nixpkgs in Docker\nDESCRIPTION: Demonstrates how to clone and build Nixpkgs packages within a Docker container with volume mounting.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/install-nix.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:NixOS/nixpkgs\ndocker run -it -v $(pwd)/nixpkgs:/nixpkgs nixos/nix\nbash-5.1# nix-build -I nixpkgs=/nixpkgs -A hello\nbash-5.1# find ./result\n```\n\n----------------------------------------\n\nTITLE: Using 'with' Expression to Access Attributes in Nix\nDESCRIPTION: This example demonstrates the 'with' expression which brings attributes from an attribute set into scope, allowing them to be accessed without repeatedly referencing the set itself.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_13\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  a = {\n    x = 1;\n    y = 2;\n    z = 3;\n  };\nin\nwith a; [ x y z ]\n```\n\n----------------------------------------\n\nTITLE: Importing Shell Configuration in shell.nix\nDESCRIPTION: This snippet demonstrates how to import the shell configuration from default.nix into shell.nix. It allows the development environment to inherit the package dependencies.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/sharing-dependencies.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n# shell.nix\n(import ./.).shell\n```\n\n----------------------------------------\n\nTITLE: Using lib.fileset.difference to filter out result symlink\nDESCRIPTION: Updates build.nix to use the difference function to exclude the result symlink from the source files.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n{ stdenv, lib }:\nlet\n  fs = lib.fileset;\n-  sourceFiles = ./.;\n+  sourceFiles = fs.difference ./. ./result;\nin\n```\n\n----------------------------------------\n\nTITLE: Adding Customizable Parameters to a Package\nDESCRIPTION: Enhances the hello.nix function to accept an additional 'audience' parameter with a default value. This shows how package recipes can be parameterized for customization.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{\n  writeShellScriptBin,\n  audience ? \"world\",\n}:\nwriteShellScriptBin \"hello\" ''\n  echo \"Hello, ${audience}!\"\n''\n```\n\n----------------------------------------\n\nTITLE: Simple Nix Expression Example\nDESCRIPTION: A basic Nix expression showing addition of two numbers and its evaluation result.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n1 + 2\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cross-Compilation Environment in Nix\nDESCRIPTION: A shell.nix configuration that sets up an environment for cross-compiling to aarch64 architecture with static binaries using musl. It configures the necessary build tools and libraries for the target platform.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/release-23.11\";\n  pkgs = (import nixpkgs {}).pkgsCross.aarch64-multiplatform;\nin\n\n# callPackage is needed due to https://github.com/NixOS/nixpkgs/pull/126844\npkgs.pkgsStatic.callPackage ({ mkShell, zlib, pkg-config, file }: mkShell {\n  # these tools run on the build platform, but are configured to target the host platform\n  nativeBuildInputs = [ pkg-config file ];\n  # libraries needed for the host platform\n  buildInputs = [ zlib ];\n}) {}\n```\n\n----------------------------------------\n\nTITLE: Adding System Packages to NixOS Configuration\nDESCRIPTION: Adds lightweight example programs (cowsay and lolcat) to the NixOS system. These will be available to all users on the system.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\n  environment.systemPackages = with pkgs; [\n    cowsay\n    lolcat\n  ];\n```\n\n----------------------------------------\n\nTITLE: Minimal NixOS Configuration with Defaults\nDESCRIPTION: A basic NixOS configuration without comments, showing the default boot loader settings and state version. This is the starting point for a custom configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ config, pkgs, ... }:\n{\n  imports =  [ ./hardware-configuration.nix ];\n\n  boot.loader.systemd-boot.enable = true;\n  boot.loader.efi.canTouchEfiVariables = true;\n\n  system.stateVersion = \"24.05\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using with for Package Imports in buildInputs\nDESCRIPTION: Shows a common pattern that uses with to simplify package imports in buildInputs, though this approach is not recommended due to scoping issues.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nbuildInputs = with pkgs; [ curl jq ];\n```\n\n----------------------------------------\n\nTITLE: Making the Script Executable and Running It\nDESCRIPTION: Command-line instructions for making the Nix shell script executable and then running it. These commands set the executable permission on the script file and execute it.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/reproducible-scripts.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nchmod +x nixpkgs-releases.sh\n```\n\nLANGUAGE: console\nCODE:\n```\n./nixpkgs-releases.sh\n```\n\n----------------------------------------\n\nTITLE: Initial Nix Derivation with Custom installPhase\nDESCRIPTION: Nix derivation for icat package with a custom installPhase to handle missing Makefile install target\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_14\n\nLANGUAGE: nix\nCODE:\n```\n{\n  stdenv,\n  fetchFromGitHub,\n  imlib2,\n  xorg,\n}:\n\nstdenv.mkDerivation {\n  pname = \"icat\";\n  version = \"v0.5\";\n\n  src = fetchFromGitHub {\n    owner = \"atextor\";\n    repo = \"icat\";\n    rev = \"v0.5\";\n    sha256 = \"0wyy2ksxp95vnh71ybj1bbmqd5ggp13x3mk37pzr99ljs9awy8ka\";\n  };\n\n  buildInputs = [ imlib2 xorg.libX11 ];\n\n  installPhase = ''\n    mkdir -p $out/bin\n    cp icat $out/bin\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Nested Attribute Access in Nix\nDESCRIPTION: This example shows how to access deeply nested attributes in a Nix attribute set using chained dot notation. Multiple levels of nesting can be traversed to access the inner value.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  attrset = { a = { b = { c = 1; }; }; };\nin\nattrset.a.b.c\n```\n\n----------------------------------------\n\nTITLE: Using Channel Shorthand Syntax\nDESCRIPTION: Shorthand syntax for referencing a Nixpkgs channel. This compact format is a convenience feature that translates to the full channel URL.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nchannel:nixos-22.11\n```\n\n----------------------------------------\n\nTITLE: Running a NixOS Virtual Machine with GUI\nDESCRIPTION: Builds and runs a NixOS virtual machine with graphical capabilities. This allows testing desktop environments and GUI applications in the virtual machine.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build '<nixpkgs/nixos>' -A vm -I nixpkgs=channel:nixos-24.05 -I nixos-config=./configuration.nix\n$ ./result/bin/run-nixos-vm\n```\n\n----------------------------------------\n\nTITLE: Using Lookup Paths (Angle Bracket Syntax) in Nix\nDESCRIPTION: Demonstrates the use of lookup paths in Nix, which are denoted by angle brackets. These paths depend on the value of builtins.nixPath.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_24\n\nLANGUAGE: nix\nCODE:\n```\n<nixpkgs>\n```\n\nLANGUAGE: nix\nCODE:\n```\n<nixpkgs/lib>\n```\n\n----------------------------------------\n\nTITLE: Referencing Local Nix Expression Path\nDESCRIPTION: Example of how to reference a local Nix expression file path. Using './' points to a specific file while './.' refers to default.nix in the current directory.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n./path/to/expression.nix\n```\n\n----------------------------------------\n\nTITLE: Generating NixOS Configuration\nDESCRIPTION: Runs the nixos-generate-config command to create a configuration file in the current directory, which will contain default settings for a NixOS system.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n[nix-shell:~]$ nixos-generate-config --dir ./\n\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Files in Nix Build with maybeMissing\nDESCRIPTION: Fixing an error when a file doesn't exist by using lib.fileset.maybeMissing to create a file set from a path that may not exist.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n:caption: build.nix\n { stdenv, lib }:\n let\n   fs = lib.fileset;\n-  sourceFiles = fs.difference ./. ./result;\n+  sourceFiles = fs.difference ./. (fs.maybeMissing ./result);\n in\n```\n\n----------------------------------------\n\nTITLE: WiFi Configuration - Shell Command\nDESCRIPTION: Command to configure wireless network connection using wpa_supplicant.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/installing-nixos-on-a-raspberry-pi.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# wpa_supplicant -B -i wlan0 -c <(wpa_passphrase 'SSID' 'passphrase') &\n```\n\n----------------------------------------\n\nTITLE: Adding Request Parameters as a Module Option\nDESCRIPTION: This diff adds a new module option 'requestParams' of type 'listOf str' to manage the parameters for the Google Maps API request. It separates the configuration concerns and demonstrates option dependencies.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n     scripts.output = lib.mkOption {\n       type = lib.types.package;\n     };\n+\n+    requestParams = lib.mkOption {\n+      type = lib.types.listOf lib.types.str;\n+    };\n   };\n\n  config = {\n    scripts.output = pkgs.writeShellApplication {\n      name = \"map\";\n      runtimeInputs = with pkgs; [ curl feh ];\n      text = ''\n        ${./map.sh} size=640x640 scale=2 | feh -\n      '';\n    };\n+\n+    requestParams = [\n+      \"size=640x640\"\n+      \"scale=2\"\n+    ];\n   };\n }\n```\n\n----------------------------------------\n\nTITLE: Adding GNOME Desktop to NixOS Configuration\nDESCRIPTION: Extends a NixOS configuration with settings to enable X11, GDM display manager, and the GNOME desktop environment for a graphical user interface.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_15\n\nLANGUAGE: nix\nCODE:\n```\n  # Enable the X11 windowing system.\n  services.xserver.enable = true;\n\n  # Enable the GNOME Desktop Environment.\n  services.xserver.displayManager.gdm.enable = true;\n  services.xserver.desktopManager.gnome.enable = true;\n```\n\n----------------------------------------\n\nTITLE: Successful Build Verification\nDESCRIPTION: Console output showing successful build completion with result symlink\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ ls\ndefault.nix hello.nix icat.nix result\n```\n\n----------------------------------------\n\nTITLE: Using recursiveUpdate for Deep Merging of Attribute Sets\nDESCRIPTION: Shows how to use pkgs.lib.recursiveUpdate to properly merge nested attribute sets, preserving all keys at all levels rather than replacing entire nested structures.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_11\n\nLANGUAGE: nix\nCODE:\n```\nlet pkgs = import <nixpkgs> {}; in\npkgs.lib.recursiveUpdate { a = { b = 1; }; } { a = { c = 3;}; }\n```\n\n----------------------------------------\n\nTITLE: icat Package with imlib2 Dependency\nDESCRIPTION: Updated package definition adding imlib2 as a build dependency\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n# icat.nix\n{\n  stdenv,\n  fetchFromGitHub,\n  imlib2,\n}:\n\nstdenv.mkDerivation {\n  pname = \"icat\";\n  version = \"v0.5\";\n\n  src = fetchFromGitHub {\n    owner = \"atextor\";\n    repo = \"icat\";\n    rev = \"v0.5\";\n    sha256 = \"0wyy2ksxp95vnh71ybj1bbmqd5ggp13x3mk37pzr99ljs9awy8ka\";\n  };\n\n  buildInputs = [ imlib2 ];\n}\n```\n\n----------------------------------------\n\nTITLE: Using Latest Channel Version with Tests Passed\nDESCRIPTION: URL format for using the latest tested version of a Nixpkgs channel. This points to a version where all tests have passed, providing a balance of stability and recency.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://nixos.org/channels/nixos-22.11/nixexprs.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Nix Module\nDESCRIPTION: This snippet shows the initial structure of an empty Nix module file. It's the starting point for the Google Maps API integration module.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ ... }:\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Package Version\nDESCRIPTION: Shell commands to build and verify the package version using the alternative configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build -A build\n$ ./result/bin/hello --version | head -1\nhello (GNU Hello) 2.10\n```\n\n----------------------------------------\n\nTITLE: Accessing option values with config attribute\nDESCRIPTION: Adding the config attribute to the module function parameters to access option values throughout the module.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n-{ pkgs, lib, ... }: {\n+{ pkgs, lib, config, ... }: {\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Customized Package\nDESCRIPTION: Shows how to build and run a package with customized parameters. The command builds the 'hello' attribute with the audience parameter set to 'people'.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build -A hello\n$ ./result/bin/hello\nHello, people!\n```\n\n----------------------------------------\n\nTITLE: Running Nix in Docker with Workdir\nDESCRIPTION: Starts a Docker container with Nix and mounts a local workdir directory for persistence.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/install-nix.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nmkdir workdir\ndocker run -it -v $(pwd)/workdir:/workdir nixos/nix\n```\n\n----------------------------------------\n\nTITLE: Importing binary cache configuration (Nix)\nDESCRIPTION: This Nix configuration imports the previously defined binary-cache.nix module into the main NixOS configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{ config, ... }:\n\n{\n  imports = [\n    ./binary-cache.nix\n  ];\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Attributes List with Color Option in Nix\nDESCRIPTION: This snippet shows how to include the new color option in the attributes list of the path module. It ensures that the color value is passed to the external API call.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_38\n\nLANGUAGE: nix\nCODE:\n```\nattributes =\n  [\n    \"weight:${toString path.style.weight}\"\n    \"color:${path.style.color}\"\n  ]\n  ++ map attrForLocation path.locations;\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration\nDESCRIPTION: Commands to initialize Terraform and apply the configuration to create the AWS resources.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/deploying-nixos-using-terraform.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform init\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Using Latest Channel Version from GitHub\nDESCRIPTION: URL format for fetching the latest version of a Nixpkgs channel directly from GitHub. This gives you the latest tagged version of a specific release channel.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/NixOS/nixpkgs/archive/nixos-22.11.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Patching NixOS Test Driver for Network Access\nDESCRIPTION: This diff patch modifies the NixOS test driver to create a tap interface, allowing local access to the vde_switch network used in NixOS tests.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/faq.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/nixos/lib/test-driver/test-driver.pl b/nixos/lib/test-driver/test-driver.pl\nindex 8ad0d67..838fbdd 100644\n--- a/nixos/lib/test-driver/test-driver.pl\n+++ b/nixos/lib/test-driver/test-driver.pl\n@@ -34,7 +34,7 @@ foreach my $vlan (split / /, $ENV{VLANS} || \"\") {\n     if ($pid == 0) {\n         dup2(fileno($pty->slave), 0);\n         dup2(fileno($stdoutW), 1);\n-        exec \"vde_switch -s $socket\" or _exit(1);\n+        exec \"vde_switch -tap tap0 -s $socket\" or _exit(1);\n     }\n     close $stdoutW;\n     print $pty \"version\\n\";\n```\n\n----------------------------------------\n\nTITLE: Re-running NixOS Tests by Clearing Cached Results\nDESCRIPTION: Shell commands to remove the cached test results from the Nix store, allowing the test to be run again even when the test configuration hasn't changed.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\nrm ./result\nnix-store --delete /nix/store/4klj06bsilkqkn6h2sia8dcsi72wbcfl-vm-test-run-unnamed\n```\n\n----------------------------------------\n\nTITLE: Adding User Configuration to NixOS\nDESCRIPTION: Nix expression that defines a normal user named 'alice' with sudo privileges via the wheel group. This is necessary for logging into the virtual machine.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n  users.users.alice = {\n    isNormalUser = true;\n    extraGroups = [ \"wheel\" ];\n  };\n```\n\n----------------------------------------\n\nTITLE: Reading File Contents in Nix with String Interpolation\nDESCRIPTION: Demonstrates how file paths can be used in string interpolation to copy the contents to the Nix store and return the store path. This example shows creating a file and then referencing it in a Nix expression.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_32\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo 123 > data\n```\n\nLANGUAGE: nix\nCODE:\n```\n\"${./data}\"\n```\n\n----------------------------------------\n\nTITLE: Removing Hardware Configuration Import\nDESCRIPTION: Shows how to remove the hardware-configuration.nix import from a NixOS configuration, which is appropriate when creating a virtual machine that doesn't need specific hardware settings.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\n-  imports =  [ ./hardware-configuration.nix ];\n```\n\n----------------------------------------\n\nTITLE: Configuring binary cache access in nix.conf\nDESCRIPTION: Configuration settings for nix.conf to add custom binary cache URLs and trusted public keys for verification.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsubstituters = https://cache.nixos.org/ s3://example-nix-cache\ntrusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= example-nix-cache-1:1/cKDz3QCCOmwcztD2eV6Coggp6rqc9DGjWv7C0G+rM=\n```\n\n----------------------------------------\n\nTITLE: Adding Geodesic Path Option in Nix Module\nDESCRIPTION: This snippet demonstrates how to add a boolean option for geodesic path rendering to the pathStyleType submodule. It allows paths to be drawn as the shortest distance between two points on Earth.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_39\n\nLANGUAGE: nix\nCODE:\n```\ngeodesic = lib.mkOption {\n  type = lib.types.bool;\n  default = false;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring post-build-hook in nix.conf\nDESCRIPTION: Configuration setting for nix.conf to specify the path to the script that should run after each build.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_5\n\nLANGUAGE: text\nCODE:\n```\npost-build-hook = /etc/nix/upload-to-cache.sh\n```\n\n----------------------------------------\n\nTITLE: Creating Helper Function for Username-Based Labels\nDESCRIPTION: Defines a firstUpperAlnum function that extracts the first uppercase letter or number from a string. This will be used to automatically generate marker labels based on usernames.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_30\n\nLANGUAGE: nix\nCODE:\n```\n{ lib, config, ... }:\n let\n  # Returns the uppercased first letter\n  # or number of a string\n  firstUpperAlnum = str:\n    lib.mapNullable lib.head\n    (builtins.match \"[^A-Z0-9]*([A-Z0-9]).*\"\n    (lib.toUpper str));\n\n   markerType = lib.types.submodule {\n     options = {\n```\n\n----------------------------------------\n\nTITLE: Validating NixOS Disk Layout with Installation Test\nDESCRIPTION: This command builds and tests the NixOS configuration and disk layout in a virtual machine to ensure it's valid before deploying to a real system.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/provisioning-remote-machines.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnix-build -E \"((import <nixpkgs> {}).nixos [ ./configuration.nix ]).installTest\"\n```\n\n----------------------------------------\n\nTITLE: Updating a Deployed NixOS System\nDESCRIPTION: This shell command updates the pinned nixpkgs dependency and deploys the updated configuration to the remote system, without repartitioning the disk since the system is already running NixOS.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/provisioning-remote-machines.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpins update nixpkgs\nnixos-rebuild switch --no-flake --target-host root@target-host\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal NixOS Configuration with SSH Access\nDESCRIPTION: This NixOS configuration imports the disk layout module, specifies the target disk device, sets up GRUB for both BIOS and UEFI systems, enables OpenSSH, and configures SSH key access for the root user. It's designed for deployment to a remote machine.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/provisioning-remote-machines.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ modulesPath, ... }:\n\nlet\n  diskDevice = \"/dev/sda\";\n  sources = import ./npins;\nin\n{\n  imports = [\n    (modulesPath + \"/profiles/qemu-guest.nix\")\n    (sources.disko + \"/module.nix\")\n    ./single-disk-layout.nix\n  ];\n\n  disko.devices.disk.main.device = diskDevice;\n\n  boot.loader.grub = {\n    devices = [ diskDevice ];\n    efiSupport = true;\n    efiInstallAsRemovable = true;\n  };\n\n  services.openssh.enable = true;\n\n  users.users.root.openssh.authorizedKeys.keys = [\n    \"<your SSH key here>\"\n  ];\n\n  system.stateVersion = \"24.11\";\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Attributes List with Geodesic Option in Nix\nDESCRIPTION: This snippet shows how to include the new geodesic option in the attributes list of the path module. It ensures that the geodesic value is passed to the external API call, converting the boolean to a string.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_40\n\nLANGUAGE: nix\nCODE:\n```\nattributes =\n  [\n    \"weight:${toString path.style.weight}\"\n    \"color:${path.style.color}\"\n    \"geodesic:${lib.boolToString path.style.geodesic}\"\n  ]\n  ++ map attrForLocation path.locations;\n```\n\n----------------------------------------\n\nTITLE: Fixing Nix Installation on macOS After System Update\nDESCRIPTION: This bash script snippet ensures that the Nix environment is properly loaded in zsh on macOS. It should be added to the end of /etc/zshrc to fix Nix installation issues after a macOS update.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/troubleshooting.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nif [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then\n  . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'\nfi\n```\n\n----------------------------------------\n\nTITLE: Setting default values for options\nDESCRIPTION: Setting a default value for the zoom option to change the default behavior from automatic zooming to a fixed zoom level of 10.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n     map = {\n       zoom = lib.mkOption {\n         type = lib.types.nullOr lib.types.int;\n+        default = 10;\n       };\n     };\n   };\n```\n\n----------------------------------------\n\nTITLE: Copying private key to cache server (Shell)\nDESCRIPTION: This shell command copies the generated private key to the specified location on the cache server using scp.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nscp cache-private-key.pem root@cache:/var/secrets/cache-private-key.pem\n```\n\n----------------------------------------\n\nTITLE: Exploring Cross Compilation Platforms in Nix REPL\nDESCRIPTION: This snippet demonstrates how to use the Nix REPL to explore predefined host platforms for cross compilation available in pkgsCross. It shows how to access the platform configuration string for a specific cross-compilation target.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ nix repl '<nixpkgs>' -I nixpkgs=channel:nixos-23.11\nnix-repl> pkgsCross.<TAB>\nnix-repl> pkgsCross.aarch64-multiplatform.stdenv.hostPlatform.config\n```\n\n----------------------------------------\n\nTITLE: Using Absolute and Relative File System Paths in Nix\nDESCRIPTION: Shows how to specify absolute and relative file system paths in Nix. Absolute paths start with a slash, while relative paths contain at least one slash but don't start with one.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_23\n\nLANGUAGE: nix\nCODE:\n```\n/absolute/path\n```\n\nLANGUAGE: nix\nCODE:\n```\n./relative\n```\n\nLANGUAGE: nix\nCODE:\n```\nrelative/path\n```\n\nLANGUAGE: nix\nCODE:\n```\n./.\n```\n\nLANGUAGE: nix\nCODE:\n```\n../.\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Nix Concepts in Markdown\nDESCRIPTION: This code snippet uses a toctree directive to generate a table of contents for the Nix concepts section, including pages on flakes and FAQs. It sets the maximum depth to 2 and uses a glob pattern to include relevant files.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/concepts/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:glob:\n:maxdepth: 2\n\nflakes.md\nfaq.md\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Let Expression Usage in Nix\nDESCRIPTION: This example demonstrates a simple let expression that binds a name to a value and uses it in a subsequent expression. The let expression allows for reuse of values within a specified scope.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  a = 1;\nin\na + a\n```\n\n----------------------------------------\n\nTITLE: Testing binary cache availability (Shell)\nDESCRIPTION: This shell command tests the availability of the binary cache by querying the cache-info using curl.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://cache/nix-cache-info\nStoreDir: /nix/store\nWantMassQuery: 1\nPriority: 30\n```\n\n----------------------------------------\n\nTITLE: Adding a package option for geocoding\nDESCRIPTION: Creating an option to store a package for geocoding functionality that can be referenced elsewhere in the configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n   options = {\n     scripts.output = lib.mkOption {\n       type = lib.types.package;\n     };\n+\n+    scripts.geocode = lib.mkOption {\n+      type = lib.types.package;\n+    };\n```\n\n----------------------------------------\n\nTITLE: Checking store object signing (Shell)\nDESCRIPTION: These shell commands build the 'hello' package, extract its hash, and check the signature of its .narinfo file from the cache.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ hash=$(nix-build '<nixpkgs>' -A pkgs.hello | awk -F '/' '{print $4}' | awk -F '-' '{print $1}')\n$ curl \"http://cache/$hash.narinfo\" | grep \"Sig: \"\n...\nSig: cache.example.org:GyBFzocLAeLEFd0hr2noK84VzPUw0ArCNYEnrm1YXakdsC5FkO2Bkj2JH8Xjou+wxeXMjFKa0YP2AML7nBWsAg==\n```\n\n----------------------------------------\n\nTITLE: Running NixOS VM Tests with nix-build\nDESCRIPTION: Shell command to build and run NixOS VM tests via nix-build, which will execute the test script and return the path to the test result.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build minimal-test.nix\n```\n\n----------------------------------------\n\nTITLE: Creating an Attribute Set of Derivations\nDESCRIPTION: Demonstrates how to organize packages in an attribute set, which is the standard structure in Nixpkgs. Each attribute represents a package that can be built separately.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> { };\nin\n{\n  hello = pkgs.callPackage ./hello.nix { };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Core Nix Terms in Sphinx Glossary Format\nDESCRIPTION: A structured glossary using Sphinx documentation format that defines key Nix ecosystem terms including package manager, language, expressions, files, packages, and the NixOS distribution. Each entry includes pronunciation guides and links to further documentation.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/glossary.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{glossary}\nNix\n    Build system and package manager.\n\n    Read /nɪks/ (\"Niks\").\n\n    :::{seealso}\n    - [Nix reference manual](./nix-manual.md)\n    - [Nix source code](https://github.com/NixOS/nix)\n    :::\n\nNix language\n    Programming language to declare packages and configurations for {term}`Nix`.\n\n    :::{seealso}\n    - [](reading-nix-language)\n    - [Nix language reference](https://nix.dev/manual/nix/stable/language)\n    :::\n\nNix expression\n    Expression written in the {term}`Nix language`.\n\nNix file\n    File (.nix) containing a {term}`Nix expression`.\n\nNixpkgs\n    Software distribution built with {term}`Nix`.\n\n    Read /nɪks ˈpækɪʤɪz/ (\"Nix packages\").\n\n    :::{seealso}\n    - [Nixpkgs reference manual](https://nixos.org/manual/nixpkgs)\n    - [Nixpkgs source code](https://github.com/NixOS/nixpkgs)\n    :::\n\nNixOS\n    Linux distribution based on {term}`Nix` and {term}`Nixpkgs`.\n\n    Read /nɪks oʊ ɛs/ (\"Niks Oh Es\").\n\n    :::{seealso}\n    - [NixOS reference manual](https://nixos.org/manual/nixos)\n    - [NixOS source code](https://github.com/NixOS/nixpkgs/tree/master/nixos)\n    :::\n```\n\n----------------------------------------\n\nTITLE: Using nix-collect-garbage to Clean Nix Store\nDESCRIPTION: Command to remove unused build results from the Nix store, helpful for managing disk space after experimenting with Nix.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_39\n\nLANGUAGE: console\nCODE:\n```\n$ nix-collect-garbage\n```\n\n----------------------------------------\n\nTITLE: Testing SSH Authentication to Remote Builder\nDESCRIPTION: Command to test SSH connectivity and authentication from the local machine to the remote builder. This verifies that the setup is working correctly before configuring distributed builds.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# ssh remotebuild@remotemachine -i /root/.ssh/remotebuild \"echo hello\"\n```\n\n----------------------------------------\n\nTITLE: Nix Let Expression Example\nDESCRIPTION: Example showing variable assignment and addition using let expressions in Nix.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlet\n x = 1;\n y = 2;\nin x + y\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Map Script\nDESCRIPTION: This console command builds the module configuration and runs the resulting map script. It uses nix-build to evaluate the configuration and then executes the generated executable.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_8\n\nLANGUAGE: console\nCODE:\n```\nnix-build eval.nix -A config.scripts.output\n./result/bin/map\n```\n\n----------------------------------------\n\nTITLE: Checking nix-serve service status (Shell)\nDESCRIPTION: This shell command checks the status of the nix-serve service on the cache server using systemctl.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nssh root@cache systemctl status nix-serve.service\n```\n\n----------------------------------------\n\nTITLE: Updated default.nix with icat Package\nDESCRIPTION: An updated default.nix file that includes both the hello and icat packages, using callPackage for each.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n# default.nix\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-24.05\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n{\n  hello = pkgs.callPackage ./hello.nix { };\n  icat = pkgs.callPackage ./icat.nix { };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing direnv Configuration\nDESCRIPTION: Shell command to create and authorize a direnv configuration file that enables Nix shell integration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/direnv.md#2025-04-16_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"use nix\" > .envrc && direnv allow\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying NixOS with nixos-anywhere\nDESCRIPTION: This shell command sequence builds the NixOS system configuration and disk formatting script, then uses nixos-anywhere to deploy the system to a remote target machine, formatting the disk and installing NixOS.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/provisioning-remote-machines.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ntoplevel=$(nixos-rebuild build --no-flake)\ndiskoScript=$(nix-build -E \"((import <nixpkgs> {}).nixos [ ./configuration.nix ]).diskoScript\")\nnixos-anywhere --store-paths \"$diskoScript\" \"$toplevel\" root@target-host\n```\n\n----------------------------------------\n\nTITLE: Building and Running an Overridden Package\nDESCRIPTION: Demonstrates building and running a package that was created using the override function. The example builds the 'hello-folks' attribute which overrides the audience parameter.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/callpackage.md#2025-04-16_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build -A hello-folks\n$ ./result/bin/hello\nHello, folks!\n```\n\n----------------------------------------\n\nTITLE: Restarting Nix Daemon on Linux with systemd\nDESCRIPTION: Command to restart the Nix daemon on Linux systems with systemd after updating the configuration, which activates the distributed build setup.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# systemctl restart nix-daemon.service\n```\n\n----------------------------------------\n\nTITLE: Setting NIX_PATH Environment Variable with Channel Shorthand\nDESCRIPTION: Example of setting the NIX_PATH environment variable using the channel shorthand syntax. This provides a more concise way to specify the Nixpkgs source for a command.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ NIX_PATH=nixpkgs=channel:nixos-22.11 nix-build\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Nix Shell\nDESCRIPTION: This bash command demonstrates how to access an environment variable (GREETING) set in the shell.nix file within the Nix shell environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/declarative-shell.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\necho $GREETING\n```\n\n----------------------------------------\n\nTITLE: Running a program once with Nix shell\nDESCRIPTION: These snippets demonstrate how to run a program once using Nix shell without entering an interactive shell environment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/ad-hoc-shell-environments.md#2025-04-16_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell -p cowsay --run \"cowsay Nix\"\n```\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell -p hello --run hello\n```\n\n----------------------------------------\n\nTITLE: Adding Remote Builder Module to NixOS Configuration\nDESCRIPTION: NixOS configuration snippet that imports the remote builder module into the system configuration. This enables the remote build functionality on the remote machine.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  imports = [\n    ./remote-builder.nix\n  ];\n\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Unions to Explicitly Exclude Files in Nix Builds\nDESCRIPTION: Creating a file set that excludes specific files by using lib.fileset.unions to combine multiple files into a set, then subtracting it from the current directory.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\n:caption: build.nix\n  sourceFiles =\n    fs.difference\n      ./.\n      (fs.unions [\n        (fs.maybeMissing ./result)\n        ./default.nix\n        ./build.nix\n        ./npins\n      ]);\n```\n\n----------------------------------------\n\nTITLE: Creating NixOS Configuration Generator for GNOME\nDESCRIPTION: Sets up a nix-shell environment with the nixos-generate-config tool based on the graphical GNOME ISO configuration, allowing you to generate a NixOS configuration with GNOME pre-configured.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\nnix-shell -I nixpkgs=channel:nixos-24.05 -p \"$(cat <<EOF\n  let\n    pkgs = import <nixpkgs> { config = {}; overlays = []; };\n    iso-config = pkgs.path + /nixos/modules/installer/cd-dvd/installation-cd-graphical-gnome.nix;\n    nixos = pkgs.nixos iso-config;\n  in nixos.config.system.build.nixos-generate-config\nEOF\n)\"\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on Windows WSL2 (Multi-user)\nDESCRIPTION: Installs Nix in multi-user mode for Windows Subsystem for Linux 2 environments with systemd support enabled.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/install-nix.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -L https://nixos.org/nix/install | sh -s -- --daemon\n```\n\n----------------------------------------\n\nTITLE: Problematic Recursive Attribute Set Causing Infinite Recursion\nDESCRIPTION: Example showing how recursive attribute sets can lead to infinite recursion errors when shadowing variable names from an outer scope.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\nlet a = 1; in rec { a = a; }\n```\n\n----------------------------------------\n\nTITLE: Implementing Marker Configuration in NixOS Module\nDESCRIPTION: Adds configuration to marker.nix that defines map markers and generates request parameters with geocoded locations. The configuration uses the map.markers option to produce elements for the requestParams list.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_23\n\nLANGUAGE: nix\nCODE:\n```\n  config = {\n\n    map.markers = [\n      { location = \"new york\"; }\n    ];\n\n    requestParams = let\n      paramForMarker =\n        builtins.map (marker: \"$(${config.scripts.geocode}/bin/geocode ${\n          lib.escapeShellArg marker.location})\") config.map.markers;\n    in [ \"markers=\\\"${lib.concatStringsSep \"|\" paramForMarker}\\\"\" ];\n  };\n```\n\n----------------------------------------\n\nTITLE: Using shell command output in configuration\nDESCRIPTION: Conditionally executing the geocode script and using its output as a parameter value with proper shell argument escaping.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n       \"scale=2\"\n       (lib.mkIf (config.map.zoom != null)\n         \"zoom=${toString config.map.zoom}\")\n+      (lib.mkIf (config.map.center != null)\n+        \"center=\\\"$(${config.scripts.geocode}/bin/geocode ${\n+          lib.escapeShellArg config.map.center\n+        })\\\"\")\n     ];\n   };\n```\n\n----------------------------------------\n\nTITLE: Nix Ecosystem Complete Information Flow\nDESCRIPTION: Comprehensive flowchart showing the information flow between different components of the Nix ecosystem, including streams (Matrix, events, external sources, Discourse, RFCs) and artifacts (code, manuals, docs)\nSOURCE: https://github.com/nixos/nix.dev/blob/master/maintainers/information-flow.md#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart\n  Matrix --> |summary| Discourse\n  events[meetings and events] --> |meeting notes, report| Discourse\n  external[external sources] --> |link| Discourse\n  Discourse --> |draft| RFCs --> |implementation| code\n  RFCs --> |explanation| docs\n  code --> |reference| manuals --> |guide| docs[nix.dev]\n  Discourse --> |tutorial| docs\n  subgraph stream\n    Matrix\n    events\n    external\n    Discourse\n    RFCs\n  end\n  subgraph artifact\n    code\n    manuals\n    docs\n  end\n```\n\n----------------------------------------\n\nTITLE: Verifying binary cache substitution\nDESCRIPTION: Commands to test that the built path was successfully uploaded to the binary cache by deleting it locally and then retrieving it from the cache.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ rm ./result\n$ nix-store --delete /nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\n$ nix-store --realise /nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\ncopying path '/nix/store/m8bmqwrch6l3h8s0k3d673xpmipcdpsa-example from 's3://example-nix-cache'...\nwarning: you did not specify '--add-root'; the result might be removed by the garbage collector\n/nix/store/m8bmqwrch6l3h8s0k3d673xpmipcdpsa-example\n```\n\n----------------------------------------\n\nTITLE: Updated GNU Hello Package Function with Correct Hash\nDESCRIPTION: The Nix function for packaging GNU Hello, updated with the correct SHA256 hash for the source archive.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n# hello.nix\n{\n  stdenv,\n  fetchzip,\n}:\n\nstdenv.mkDerivation {\n  pname = \"hello\";\n  version = \"2.12.1\";\n\n  src = fetchzip {\n    url = \"https://ftp.gnu.org/gnu/hello/hello-2.12.1.tar.gz\";\n    sha256 = \"0xw6cr5jgi1ir13q6apvrivwmmpr5j8vbymp0x6ll0kcv6366hnn\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Let Expression Creating a List in Nix\nDESCRIPTION: This example demonstrates using let expressions to define values that are then used to construct a list. Unlike recursive attribute sets which evaluate to attribute sets, let expressions can produce any type of value.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_8\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  b = a + 1;\n  c = a + b;\n  a = 1;\nin [ a b c ]\n```\n\n----------------------------------------\n\nTITLE: Defining Indented Multi-line Strings in Nix\nDESCRIPTION: Demonstrates how to create multi-line strings in Nix using double single quotes. Indentation is preserved and common leading whitespace is trimmed.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_22\n\nLANGUAGE: nix\nCODE:\n```\n''\nmulti\nline\nstring\n''\n```\n\n----------------------------------------\n\nTITLE: Importing additional modules\nDESCRIPTION: Using the imports attribute to include additional module files into the main configuration, allowing for modular organization.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n:caption: default.nix\n { pkgs, lib, config, ... }: {\n\n+  imports = [\n+    ./marker.nix\n+  ];\n+\n```\n\n----------------------------------------\n\nTITLE: Auto-rebuilding with entr for Rapid Development\nDESCRIPTION: This console command sets up a development environment using entr to automatically rebuild and run the map script whenever any Nix file in the current directory changes, enabling rapid iteration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nnix-shell -p entr findutils bash --run \\\n  \"ls *.nix | \\\n   entr -rs ' \\\n     nix-build eval.nix -A config.scripts.output --no-out-link \\\n     | xargs printf -- \\\"%s/bin/map\\\" \\\n     | xargs bash \\\n   ' \\\n  \"\n```\n\n----------------------------------------\n\nTITLE: Example of Fork Bomb Command in Bash\nDESCRIPTION: A Bash command example that defines and executes a recursive function, used to illustrate proper code documentation with necessary explanations and warnings.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/contributing/documentation/style-guide.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n:(){ :|:& };:\n```\n\n----------------------------------------\n\nTITLE: Defining default.nix for the sample project\nDESCRIPTION: Creates a default.nix file that imports Nixpkgs and calls the build.nix file.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{\n  system ? builtins.currentSystem,\n  sources ? import ./npins,\n}:\nlet\n  pkgs = import sources.nixpkgs {\n    config = { };\n    overlays = [ ];\n    inherit system;\n  };\nin\npkgs.callPackage ./build.nix { }\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom NixOS ISO Image with Latest Kernel in Nix\nDESCRIPTION: This Nix configuration creates a custom minimal NixOS installation ISO with the latest Linux kernel. It imports the minimal installation CD configuration and explicitly sets supported filesystems to address known issues.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/building-bootable-iso-image.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ pkgs, modulesPath, lib, ... }: {\n  imports = [\n    \"${modulesPath}/installer/cd-dvd/installation-cd-minimal.nix\"\n  ];\n\n  # use the latest Linux kernel\n  boot.kernelPackages = pkgs.linuxPackages_latest;\n\n  # Needed for https://github.com/NixOS/nixpkgs/issues/58959\n  boot.supportedFilesystems = lib.mkForce [ \"btrfs\" \"reiserfs\" \"vfat\" \"f2fs\" \"xfs\" \"ntfs\" \"cifs\" ];\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Code Sample with Language Identifier in Markdown\nDESCRIPTION: Example showing how to properly format a code block in Markdown with a language identifier for syntax highlighting. The example uses Python to print a 'Hello, World!' message.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/contributing/documentation/style-guide.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```python\nprint(\"Hello, World!\")\n```\n```\n\n----------------------------------------\n\nTITLE: Running a NixOS Virtual Machine in Text Mode\nDESCRIPTION: Executes the virtual machine in text mode, redirecting console output to the current terminal. This allows testing a NixOS configuration without a graphical interface.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ QEMU_KERNEL_PARAMS=console=ttyS0 ./result/bin/run-nixos-vm -nographic; reset\n```\n\n----------------------------------------\n\nTITLE: Channel Branch Variables Example\nDESCRIPTION: Example showing the relationship between different Nix channel branches for version 23.05\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/concepts/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nnixos-23.05 and nixpkgs-23.05-darwin are both based on release-23.05\n```\n\n----------------------------------------\n\nTITLE: Creating a Module Evaluation Script\nDESCRIPTION: This script evaluates the module using lib.evalModules from Nixpkgs. It fetches a specific version of Nixpkgs and imports the module from default.nix.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\npkgs.lib.evalModules {\n  modules = [\n    ./default.nix\n  ];\n}\n```\n\n----------------------------------------\n\nTITLE: Exploring lib.fileset with nix repl\nDESCRIPTION: Shows how to use nix repl to explore the lib.fileset library and trace file sets.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix repl -f channel:nixos-23.11\n...\nnix-repl> fs = lib.fileset\n\nnix-repl> fs.trace ./. null\ntrace: /home/user (all files in directory)\nnull\n\nnix-repl> fs.trace ./.\ntrace: /home/user (all files in directory)\n«lambda @ /nix/store/1czr278x24s3bl6qdnifpvm5z03wfi2p-nixpkgs-src/lib/fileset/default.nix:555:8»\n\n$ touch some-file\n\nnix-repl> fs.trace ./some-file\ntrace: /home/user\ntrace: - some-file (regular)\n```\n\n----------------------------------------\n\nTITLE: Sphinx Table of Contents Tree Configuration in Markdown\nDESCRIPTION: Sphinx toctree directive configuration that defines hidden documentation structure links to various guide pages including resources, diataxis, style-guide, and tutorial writing documentation.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/contributing/documentation/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:hidden:\n\nresources.md\ndiataxis.md\nstyle-guide.md\nwriting-a-tutorial.md\n```\n\n----------------------------------------\n\nTITLE: Differentiating String Interpolation from Shell Variables in Nix\nDESCRIPTION: This example demonstrates the difference between Nix string interpolation (using ${}) and shell script variables (using $). The first uses the Nix variable, while the latter is preserved as a literal dollar sign and variable name.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_21\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  out = \"Nix\";\nin\n\"echo ${out} > $out\"\n```\n\n----------------------------------------\n\nTITLE: Starting Virtual Machines in Interactive Test Mode\nDESCRIPTION: Python commands used in the interactive test driver to start virtual machines, either individually or all at once.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n>>> machine.start()\n```\n\n----------------------------------------\n\nTITLE: Non-Reproducible Source Path Definition\nDESCRIPTION: Shows a problematic pattern where a derivation's source path depends on the parent directory name, making builds non-reproducible across different environments or directory structures.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_12\n\nLANGUAGE: nix\nCODE:\n```\nlet pkgs = import <nixpkgs> {}; in\n\npkgs.stdenv.mkDerivation {\n  name = \"foo\";\n  src = ./.;\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Build Failure Console Output\nDESCRIPTION: Console output showing a build failure due to missing install target in the Makefile\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build -A icat\nthis derivation will be built:\n  /nix/store/x1d79ld8jxqdla5zw2b47d2sl87mf56k-icat.drv\n...\nerror: builder for '/nix/store/x1d79ld8jxqdla5zw2b47d2sl87mf56k-icat.drv' failed with exit code 2;\n       last 10 log lines:\n       >   195 | # warning \"_BSD_SOURCE and _SVID_SOURCE are deprecated, use _DEFAULT_SOURCE\"\n       >       |   ^~~~~~~\n       > icat.c: In function 'main':\n       > icat.c:319:33: warning: ignoring return value of 'write' declared with attribute 'warn_unused_result' [8;;https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wunused-result-Wunused-result8;;]\n       >   319 |                                 write(tempfile, &buf, 1);\n       >       |                                 ^~~~~~~~~~~~~~~~~~~~~~~~\n       > gcc -o icat icat.o -lImlib2\n       > installing\n       > install flags: SHELL=/nix/store/8fv91097mbh5049i9rglc73dx6kjg3qk-bash-5.2-p15/bin/bash install\n       > make: *** No rule to make target 'install'.  Stop.\n       For full logs, run 'nix log /nix/store/x1d79ld8jxqdla5zw2b47d2sl87mf56k-icat.drv'.\n```\n\n----------------------------------------\n\nTITLE: Starting All Virtual Machines in Interactive Test Mode\nDESCRIPTION: Python command to start all virtual machines defined in a NixOS test when using the interactive test driver.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n>>> start_all()\n```\n\n----------------------------------------\n\nTITLE: Defining NixOS Module Values\nDESCRIPTION: Shows how to define values for previously declared options in a NixOS module using the config attribute.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/a-basic-module/index.md#2025-04-16_snippet_2\n\nLANGUAGE: nix\nCODE:\n```\n{ ... }:\n{\n  config = {\n    name = \"Boaty McBoatface\";\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a new module file\nDESCRIPTION: Creating an empty marker.nix module file with basic module function structure to hold marker-related options.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n:caption: marker.nix\n{ lib, config, ... }: {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying direnv Environment Activation\nDESCRIPTION: Shell commands demonstrating successful activation of the Nix environment through direnv by checking the location of the hello binary.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/direnv.md#2025-04-16_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cd myproject\n$ which hello\n/nix/store/1gxz5nfzfnhyxjdyzi04r86sh61y4i00-hello-2.12.1/bin/hello\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Password for User\nDESCRIPTION: Adds a plain text initial password to a user configuration. This is only meant for demonstration purposes in virtual machines, not for production systems.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n   initialPassword = \"test\";\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents in Markdown\nDESCRIPTION: This code snippet defines a table of contents using Markdown syntax. It specifies a maxdepth of 1 and lists four tutorial pages to be included in the table of contents.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/first-steps/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\nad-hoc-shell-environments.md\nreproducible-scripts.md\nDeclarative shell environments <declarative-shell.md>\ntowards-reproducibility-pinning-nixpkgs.md\n```\n```\n\n----------------------------------------\n\nTITLE: Illustrating Shallow Update Issue with Nested Sets\nDESCRIPTION: Demonstrates the limitation of the update operator with nested attribute sets, where the entire nested set is replaced rather than merged, potentially leading to data loss.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\n{ a = { b = 1; }; } // { a = { c = 3; }; }\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS for binary cache (Nix)\nDESCRIPTION: This Nix configuration diff shows the changes needed to enable HTTPS with Let's Encrypt for the binary cache. It configures nginx and ACME for SSL certificates.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n   services.nginx = {\n     enable = true;\n     recommendedProxySettings = true;\n-    virtualHosts.cache = {\n+    virtualHosts.\"cache.example.com\" = {\n+      enableACME = true;\n+      forceSSL = true;\n       locations.\"/\".proxyPass = \"http://${config.services.nix-serve.bindAddress}:${toString config.services.nix-serve.port}\";\n     };\n   };\n\n+   security.acme = {\n+     acceptTerms = true;\n+     certs = {\n+       \"cache.example.com\".email = \"you@example.com\";\n+     };\n+   };\n\n   networking.firewall.allowedTCPPorts = [\n     config.services.nginx.defaultHTTPListenPort\n+    config.services.nginx.defaultSSLListenPort\n   ];\n```\n\n----------------------------------------\n\nTITLE: Basic Attribute Access in Nix\nDESCRIPTION: This example demonstrates how to access attributes in a Nix attribute set using dot notation. The attribute 'x' is accessed from the attribute set 'attrset'.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_10\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  attrset = { x = 1; };\nin\nattrset.x\n```\n\n----------------------------------------\n\nTITLE: Running Nix in Docker\nDESCRIPTION: Starts a Docker container with Nix installed.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/install-nix.md#2025-04-16_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it nixos/nix\n```\n\n----------------------------------------\n\nTITLE: Shutting Down a NixOS Virtual Machine\nDESCRIPTION: Shows how to properly shut down a running NixOS virtual machine using the poweroff command, which requires sudo privileges.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo poweroff\n```\n\n----------------------------------------\n\nTITLE: Counter-example of Non-Recursive Attribute Sets in Nix\nDESCRIPTION: This example demonstrates what happens when trying to reference attributes within a regular (non-recursive) attribute set. Without the `rec` keyword, attributes cannot access other attributes in the same set.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_4\n\nLANGUAGE: nix\nCODE:\n```\n{\n  one = 1;\n  two = one + 1;\n  three = two + 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Latest Commit on Release Branch\nDESCRIPTION: URL format for using the latest commit on a release branch, which may not have been fully tested yet. This provides the most recent changes but with potentially less stability.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/NixOS/nixpkgs/archive/release-21.11.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Nested String Interpolation in Nix\nDESCRIPTION: This example demonstrates that string interpolation can be nested to arbitrary levels in Nix. While possible, deeply nested interpolations can become difficult to read and should generally be avoided.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_20\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  a = \"no\";\nin\n\"${a + \" ${a + \" ${a}\"}\"}\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Sway and Disabling GNOME in NixOS Configuration\nDESCRIPTION: This code snippet shows the necessary changes in configuration.nix to disable GNOME and enable Sway as the Wayland compositor.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n-  services.xserver.desktopManager.gnome.enable = true;\n+  programs.sway.enable = true;\n```\n\n----------------------------------------\n\nTITLE: Removing VM Disk Image\nDESCRIPTION: Deletes the QCOW2 disk image file created by the virtual machine, which is necessary when you want to start with a clean state after changing the configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ rm nixos.qcow2\n```\n\n----------------------------------------\n\nTITLE: Fetching SHA256 Hash Using nix-prefetch-url\nDESCRIPTION: Command to fetch the SHA256 hash of an unpacked GitHub archive\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ nix-prefetch-url --unpack https://github.com/atextor/icat/archive/refs/tags/v0.5.tar.gz --type sha256\npath is '/nix/store/p8jl1jlqxcsc7ryiazbpm7c1mqb6848b-v0.5.tar.gz'\n0wyy2ksxp95vnh71ybj1bbmqd5ggp13x3mk37pzr99ljs9awy8ka\n```\n\n----------------------------------------\n\nTITLE: Adding npins to Development Environment\nDESCRIPTION: Diff showing how to add npins to the development shell environment configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n {\n   sources ? import ./npins,\n   system ? builtins.currentSystem,\n   pkgs ? import sources.nixpkgs { inherit system; config = {}; overlays = []; },\n }\n-{\n+rec {\n   package = pkgs.hello;\n+  shell = pkgs.mkShellNoCC {\n+    inputsFrom = [ package ];\n+    packages = with pkgs; [\n+      npins\n+    ];\n+  };\n }\n```\n\n----------------------------------------\n\nTITLE: Creating NixOS Configuration Generator Shell Environment\nDESCRIPTION: Sets up a nix-shell environment with the nixos-generate-config tool from the minimal ISO configuration, allowing you to generate a default NixOS configuration without installing NixOS.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\nnix-shell -I nixpkgs=channel:nixos-24.05 -p \"$(cat <<EOF\n  let\n    pkgs = import <nixpkgs> { config = {}; overlays = []; };\n    iso-config = pkgs.path + /nixos/modules/installer/cd-dvd/installation-cd-minimal.nix;\n    nixos = pkgs.nixos iso-config;\n  in nixos.config.system.build.nixos-generate-config\nEOF\n)\"\n```\n\n----------------------------------------\n\nTITLE: Running NixOS VM with QEMU virtio-vga Driver\nDESCRIPTION: This shell command demonstrates how to run a NixOS virtual machine using QEMU with the virtio-vga display driver, which is compatible with Sway.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ ./result/bin/run-nixos-vm -device virtio-vga\n```\n\n----------------------------------------\n\nTITLE: Shell Hook Execution Output\nDESCRIPTION: Output showing the result of the shell hook execution when the environment is activated.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/direnv.md#2025-04-16_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\nHello, world!\n```\n\n----------------------------------------\n\nTITLE: Setting Local Directory in Nix Path with nix-build\nDESCRIPTION: Example of using the -I option with nix-build to include a local development directory in the Nix search path. This allows referencing Nix expressions from a custom location.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build -I ~/dev\n```\n\n----------------------------------------\n\nTITLE: Restarting Nix Daemon on macOS\nDESCRIPTION: Commands to restart the Nix daemon on macOS systems after updating the configuration, which activates the distributed build setup.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# sudo launchctl stop org.nixos.nix-daemon\n# sudo launchctl start org.nixos.nix-daemon\n```\n\n----------------------------------------\n\nTITLE: Setting NIX_PATH Environment Variable with URL\nDESCRIPTION: Example of setting the NIX_PATH environment variable to specify a Nixpkgs channel URL for a single command. This approach affects only the current command execution.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ NIX_PATH=nixpkgs=http://nixos.org/channels/nixos-22.11/nixexprs.tar.xz nix-build\n```\n\n----------------------------------------\n\nTITLE: Restarting the Nix daemon\nDESCRIPTION: Command to restart the Nix daemon to apply configuration changes.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_6\n\nLANGUAGE: console\nCODE:\n```\npkill nix-daemon\n```\n\n----------------------------------------\n\nTITLE: Defining NixOS VM Tests with testers.runNixOSTest\nDESCRIPTION: Template for defining NixOS VM tests using the testers.runNixOSTest function, showing how to set up multiple machine nodes and define a test script.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  nixpkgs = fetchTarball \"https://github.com/NixOS/nixpkgs/tarball/nixos-23.11\";\n  pkgs = import nixpkgs { config = {}; overlays = []; };\nin\n\npkgs.testers.runNixOSTest {\n  name = \"test-name\";\n  nodes = {\n    machine1 = { config, pkgs, ... }: {\n      # ...\n    };\n    machine2 = { config, pkgs, ... }: {\n      # ...\n    };\n  };\n  testScript = { nodes, ... }: ''\n    # ...\n  '';\n}\n```\n\n----------------------------------------\n\nTITLE: Module Evaluation Script\nDESCRIPTION: A bash script that evaluates the NixOS module configuration and outputs the results in JSON format.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/a-basic-module/index.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nnix-instantiate --eval --json default.nix\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Nix Tutorials in Markdown\nDESCRIPTION: This code snippet uses a toctree directive to generate a table of contents for Nix tutorials. It includes various markdown files covering different aspects of Nix, from basic concepts to advanced topics.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:glob:\n:maxdepth: 2\n\nfirst-steps/index.md\nnix-language.md\nPackaging existing software <packaging-existing-software.md>\nPackage parameters and overrides <callpackage.md>\nworking-with-local-files.md\ncross-compilation.md\nmodule-system/index.md\nnixos/index.md\n```\n```\n\n----------------------------------------\n\nTITLE: Using Channel Shorthand with nix-build Command\nDESCRIPTION: Example of using the -I option with nix-build along with the channel shorthand syntax. This is a more concise way to specify a particular Nixpkgs channel version.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build -I nixpkgs=channel:nixos-22.11\n```\n\n----------------------------------------\n\nTITLE: Listing VM Build Result Contents\nDESCRIPTION: Shows the directory structure created after building a NixOS VM, which includes the virtual machine runner script and system configuration.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ ls -R ./result\nresult:\nbin  system\n\nresult/bin:\nrun-nixos-vm\n```\n\n----------------------------------------\n\nTITLE: Simple C Program for Cross-Compilation Demo\nDESCRIPTION: A basic 'Hello, world!' C program used to demonstrate cross-compilation. This serves as the source code that will be compiled for the aarch64 architecture.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/cross-compilation.md#2025-04-16_snippet_6\n\nLANGUAGE: c\nCODE:\n```\n#include <stdio.h>\n\nint main (void)\n{\n  printf (\"Hello, world!\\n\");\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying NixOS configuration (Shell)\nDESCRIPTION: This shell command deploys the new NixOS configuration to the target machine using nixos-rebuild.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnixos-rebuild switch --no-flake --target-host root@cache\n```\n\n----------------------------------------\n\nTITLE: Toctree Structure in Sphinx Documentation\nDESCRIPTION: A Sphinx documentation toctree directive that defines the structure and navigation for the module system tutorial, including basic module and deep dive sections.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/index.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n:maxdepth: 1\n:caption: Lessons\n:numbered:\na-basic-module/index.md\ndeep-dive.md\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Empty NixOS Module\nDESCRIPTION: The simplest possible NixOS module implementation that takes arbitrary attributes and returns an empty attribute set.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/a-basic-module/index.md#2025-04-16_snippet_0\n\nLANGUAGE: nix\nCODE:\n```\n{ ... }:\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Alternative Nixpkgs Version\nDESCRIPTION: Shell commands to create and initialize a new npins configuration with an older Nixpkgs version.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-shell\n[nix-shell]$ mkdir old\n[nix-shell]$ cd old\n[nix-shell]$ npins init --bare\n[nix-shell]$ npins add github nixos nixpkgs --branch nixos-21.11\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nix Function Syntax and Type Ambiguity\nDESCRIPTION: A simple Nix expression that illustrates how the Nix language doesn't explicitly communicate data types, requiring contextual knowledge to understand function arguments and return values.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_40\n\nLANGUAGE: nix\nCODE:\n```\n{ x, y, z }: (x y) z.a\n```\n\n----------------------------------------\n\nTITLE: Testing the post-build hook with nix-build\nDESCRIPTION: Example build command that triggers the post-build hook to verify the upload functionality.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ nix-build -E '(import <nixpkgs> {}).writeText \"example\" (builtins.toString builtins.currentTime)'\nthis derivation will be built:\n  /nix/store/s4pnfbkalzy5qz57qs6yybna8wylkig6-example.drv\nbuilding '/nix/store/s4pnfbkalzy5qz57qs6yybna8wylkig6-example.drv'...\nrunning post-build-hook '/home/grahamc/projects/github.com/NixOS/nix/post-hook.sh'...\npost-build-hook: Signing paths /nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\npost-build-hook: Uploading paths /nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\n/nix/store/ibcyipq5gf91838ldx40mjsp0b8w9n18-example\n```\n\n----------------------------------------\n\nTITLE: Accessing Shell in Virtual Machine\nDESCRIPTION: Python command to access an interactive shell within a virtual machine when using the NixOS test driver, allowing direct command execution.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n>>> machine.shell_interact()\n```\n\n----------------------------------------\n\nTITLE: Setting Nixpkgs Channel with nix-build Command\nDESCRIPTION: Example of using the -I option with nix-build to specify a particular Nixpkgs channel URL. This approach sets the Nixpkgs source for a single command invocation.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/pinning-nixpkgs.md#2025-04-16_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nix-build -I nixpkgs=http://nixos.org/channels/nixos-22.11/nixexprs.tar.xz\n```\n\n----------------------------------------\n\nTITLE: Accessing npins Help\nDESCRIPTION: Command to view npins built-in help information.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\nnpins --help\n```\n\n----------------------------------------\n\nTITLE: Setting up a sample project for file set experimentation\nDESCRIPTION: Commands to create a new directory, set up npins for Nixpkgs dependency, and create sample files.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/working-with-local-files.md#2025-04-16_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ mkdir fileset\n$ cd fileset\n$ nix-shell -p npins --run \"npins init --bare; npins add github nixos nixpkgs --branch nixos-23.11\"\n$ echo hello > hello.txt\n$ echo world > world.txt\n```\n\n----------------------------------------\n\nTITLE: Importing from niv\nDESCRIPTION: Command to import existing niv source definitions into npins.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/dependency-management.md#2025-04-16_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\nnpins import-niv\n```\n\n----------------------------------------\n\nTITLE: Initializing Terraform Environment with Nix Shell\nDESCRIPTION: Sets up a Nix shell with Terraform installed for deployment.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/deploying-nixos-using-terraform.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell -p terraform\n```\n\n----------------------------------------\n\nTITLE: Forcibly Terminating a Virtual Machine\nDESCRIPTION: Shows how to forcibly terminate a running QEMU virtual machine process from another terminal when normal shutdown isn't possible.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/nixos-configuration-on-vm.md#2025-04-16_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sudo pkill qemu\n```\n\n----------------------------------------\n\nTITLE: Writing NixOS Image to SD Card - Shell Command\nDESCRIPTION: Command to write the NixOS image to an SD card using dd with progress monitoring.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/installing-nixos-on-a-raspberry-pi.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell:~]$ sudo dd if=nixos-sd-image-23.11pre500597.0fbe93c5a7c-aarch64-linux.img of=/dev/sdX bs=4096 conv=fsync status=progress\n```\n\n----------------------------------------\n\nTITLE: Deploying HTTPS configuration (Shell)\nDESCRIPTION: This shell command deploys the updated NixOS configuration with HTTPS support to the target machine.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/binary-cache-setup.md#2025-04-16_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnixos-rebuild switch --no-flake --target-host root@cache.example.com\n```\n\n----------------------------------------\n\nTITLE: Using 'inherit' within Let Expressions in Nix\nDESCRIPTION: This example shows how 'inherit' can be used inside let expressions to import values from an attribute set. It demonstrates a more concise way to access and assign multiple values from an attribute set.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_17\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  inherit ({ x = 1; y = 2; }) x y;\nin [ x y ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Table of Contents for Nix.dev Guides in Markdown\nDESCRIPTION: A toctree directive that organizes the documentation structure for guides. It configures navigation to recipes, best practices, troubleshooting, and FAQ pages with a maxdepth of 2 levels and glob pattern matching.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:glob:\n:maxdepth: 2\n\n./recipes/index.md\n./best-practices.md\n./troubleshooting.md\n./faq.md\n```\n```\n\n----------------------------------------\n\nTITLE: Setting an Invalid Value for Type Checking Example\nDESCRIPTION: This diff demonstrates an intentional type error by assigning an integer value to an option that expects a string, useful for demonstrating the type checking capabilities of the module system.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n { lib, ... }: {\n\n  options = {\n    scripts.output = lib.mkOption {\n      type = lib.types.lines;\n    };\n  };\n\n+ config = {\n+   scripts.output = 42;\n+ };\n }\n```\n\n----------------------------------------\n\nTITLE: Downgrading Nix Database Schema\nDESCRIPTION: This series of commands downgrades the Nix database schema by dumping the current database, moving the old one, creating a new directory, and importing the dumped data using an older version of Nix.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/troubleshooting.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ /path/to/nix/unstable/bin/nix-store --dump-db > /tmp/db.dump\n$ mv /nix/var/nix/db /nix/var/nix/db.toonew\n$ mkdir /nix/var/nix/db\n$ nix-store --load-db < /tmp/db.dump\n```\n\n----------------------------------------\n\nTITLE: Hidden TOC Structure in Markdown\nDESCRIPTION: Markdown configuration block that defines the hidden table of contents structure for the documentation site, listing the main documentation sections.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{toctree}\n:hidden:\n\ninstall-nix.md\ntutorials/index.md\nguides/index.md\nreference/index.md\nconcepts/index.md\ncontributing/index.md\nacknowledgements/index.md\n```\n\n----------------------------------------\n\nTITLE: Generating Table of Contents for Contributing Documentation in Markdown\nDESCRIPTION: This code snippet generates a table of contents for the contributing documentation using a toctree directive. It includes links to how to contribute, how to get help, and the documentation index.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/contributing/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:glob:\n:maxdepth: 2\n\nhow-to-contribute.md\nhow-to-get-help.md\ndocumentation/index.md\n```\n```\n\n----------------------------------------\n\nTITLE: Running NixOS Client-Server Test\nDESCRIPTION: Shell command to build and execute the client-server test configuration using nix-build.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-build client-server-test.nix\n```\n\n----------------------------------------\n\nTITLE: Writing NixOS ISO to USB Drive\nDESCRIPTION: These shell commands write the generated NixOS ISO image to a USB drive. The dd command copies the ISO file to the specified device, and sync ensures all data is properly written before removal.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/building-bootable-iso-image.md#2025-04-16_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ dd if=result/iso/*.iso of=/dev/sdX status=progress\n$ sync\n```\n\n----------------------------------------\n\nTITLE: Building Reverse Dependencies in Nix\nDESCRIPTION: This command uses nixpkgs-review to build and test reverse dependencies of a package. It's useful for checking the impact of package changes on dependent packages.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/faq.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell -p nixpkgs-review --run \"nixpkgs-review wip\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Toctree for NixOS Documentation\nDESCRIPTION: A Sphinx toctree directive that defines the hidden navigation structure for NixOS documentation pages. It organizes documentation files with maxdepth set to 1, keeping the structure flat while ensuring all pages are properly linked in the documentation system.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n:hidden: true\nnixos-configuration-on-vm.md\nbuilding-bootable-iso-image.md\nbuilding-and-running-docker-images.md\nintegration-testing-using-virtual-machines.md\nprovisioning-remote-machines.md\ninstalling-nixos-on-a-raspberry-pi.md\ndeploying-nixos-using-terraform.md\nbinary-cache-setup.md\ndistributed-builds-setup.md\n```\n```\n\n----------------------------------------\n\nTITLE: Local Nixpkgs Repository Setup\nDESCRIPTION: Commands to set up a local copy of Nixpkgs for searching\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ nix-shell -p git ripgrep\n[nix-shell:~]$ git clone https://github.com/NixOS/nixpkgs --depth 1\n...\n[nix-shell:~]$ cd nixpkgs/\n```\n\n----------------------------------------\n\nTITLE: Configuring NixOS Image Module in Terraform\nDESCRIPTION: Specifies the NixOS image to be used for the AWS instance, referencing a specific version from a Git repository.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/deploying-nixos-using-terraform.md#2025-04-16_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nmodule \"nixos_image\" {\n  source = \"git::https://github.com/tweag/terraform-nixos.git/aws_image_nixos?ref=5f5a0408b299874d6a29d1271e9bffeee4c9ca71\"\n  release = \"20.09\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Reference Links in Markdown\nDESCRIPTION: Example demonstrating how to use reference links in Markdown to maintain source readability while providing useful hyperlinks. The example references the Diátaxis documentation framework.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/contributing/documentation/style-guide.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nWe follow the [Diátaxis](https://diataxis.fr/) approach to structure documentation.\nThis framework distinguishes between [tutorials], [guides], [reference], and [explanation].\n\n[tutorials]: https://diataxis.fr/tutorials/\n[guides]: https://diataxis.fr/how-to-guides/\n[reference]: https://diataxis.fr/reference/\n[explanation]: https://diataxis.fr/explanation/\n```\n\n----------------------------------------\n\nTITLE: Defining Hidden Table of Contents in Markdown\nDESCRIPTION: This code snippet defines a hidden table of contents using the toctree directive in Markdown. It includes links to various versions of the Nix reference manual.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/nix-manual.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden:\n\nNix pre-release (development) <https://nix.dev/manual/nix/development/>\nNix @nix-latest@ (latest) <https://nix.dev/manual/nix/latest/>\nNix @nix-rolling@ (in Nixpkgs rolling) <https://nix.dev/manual/nix/rolling/>\nNix @nix-stable@ (in Nixpkgs @nixpkgs-stable@) <https://nix.dev/manual/nix/stable/>\nNix @nix-prev-stable@ (in Nixpkgs @nixpkgs-prev-stable@) <https://nix.dev/manual/nix/prev-stable/>\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Nix Installation\nDESCRIPTION: Checks the installed version of Nix to verify successful installation.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/install-nix.md#2025-04-16_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnix --version\nnix (Nix) 2.11.0\n```\n\n----------------------------------------\n\nTITLE: Logging into Terraform Cloud\nDESCRIPTION: Authenticates with Terraform Cloud for state management and locking.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/deploying-nixos-using-terraform.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform login\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Limited Scope of 'with' Expression in Nix\nDESCRIPTION: This counter-example shows that attributes made available through a 'with' expression are only in scope for the expression immediately following the semicolon. Attempting to use them outside this scope results in an error.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_14\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  a = {\n    x = 1;\n    y = 2;\n    z = 3;\n  };\nin\n{\n  b = with a; [ x y z ];\n  c = x;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Documentation Structure with Sphinx Toctree\nDESCRIPTION: Sphinx toctree directive configuration that organizes documentation sections with glob pattern matching and maximum depth of 2 levels. Includes links to various Nix manuals, community projects, and support tools.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/reference/index.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n```{toctree}\n:glob:\n:maxdepth: 2\n\nglossary.md\n./nix-manual.md\nNixpkgs manual <https://nixos.org/manual/nixpkgs/stable/>\nNixOS manual <https://nixos.org/manual/nixos/stable/>\nCommunity projects <https://github.com/nix-community/>\nSupport tools <https://github.com/nix-community/awesome-nix>\n../recommended-reading.md\npinning-nixpkgs.md\n```\n```\n\n----------------------------------------\n\nTITLE: Making the hook script executable\nDESCRIPTION: Command to set the executable permission on the upload script so it can be executed by the root user.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/post-build-hook.md#2025-04-16_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# chmod +x /etc/nix/upload-to-cache.sh\n```\n\n----------------------------------------\n\nTITLE: One-Line Command to Remove Test Result and Cache\nDESCRIPTION: A single shell command that reads the result path, removes the symlink, and deletes the result from the Nix store to allow re-running the test.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/integration-testing-using-virtual-machines.md#2025-04-16_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\nresult=$(readlink -f ./result) rm ./result && nix-store --delete $result\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access Rules for nix.dev\nDESCRIPTION: This robots.txt file configures web crawler behavior for the nix.dev website. It prevents crawlers from accessing static assets and source files while directing them to the sitemap for proper indexing.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow: /_static/\nDisallow: /_sources/\nSitemap: https://nix.dev/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Reference Manuals\nDESCRIPTION: Commands to build the documentation including the Nix reference manuals, which are disabled by default due to build time.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell:nix.dev]$ nix-build -A build --arg withManuals true\n[nix-shell:nix.dev]$ devmode --arg withManuals true\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Repo Definition\nDESCRIPTION: Defines the repository name attribute for fetchFromGitHub\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_7\n\nLANGUAGE: nix\nCODE:\n```\nrepo = \"icat\";\n```\n\n----------------------------------------\n\nTITLE: Converting Submodule to Function for Name Access\nDESCRIPTION: Transforms the userType submodule into a function that can access the 'name' parameter, which contains the attribute name when used with attrsOf. This allows accessing the username within the submodule.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_31\n\nLANGUAGE: nix\nCODE:\n```\n  userType = lib.types.submodule ({ name, ... }: {\n     options = {\n       departure = lib.mkOption {\n         type = markerType;\n         default = {};\n       };\n     };\n```\n\n----------------------------------------\n\nTITLE: Updating Nix Reference Manuals\nDESCRIPTION: Commands to manually update the Nix reference manuals with new releases, as this process is not automated.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnix-shell --run update-nixpkgs-releases\nnix-shell --run update-nix-releases\n```\n\n----------------------------------------\n\nTITLE: Project Budget Table in Markdown\nDESCRIPTION: A markdown table detailing the project budget breakdown including technical writer costs and volunteer stipends.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/maintainers/google-season-of-docs-2024.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Budget item | Amount [USD] | Running Total [USD] | Notes/justifications |\n| ------------------ | ------ | ------------- | --------------------------------------------------------------------------------------------------- |\n| Technical Writer | 10000.00 | 10000.00 | 2 People x 5000 each, one person for the docker task, and one person for the cross compilation task |\n| Volunteer stipends | 500.00 | 10500.00 | organisation, evaluation, hiring technical writers, reporting |\n| Total | | 10500.00 | |\n```\n\n----------------------------------------\n\nTITLE: Basic GitHub Owner Definition\nDESCRIPTION: Defines the owner attribute for fetchFromGitHub\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/packaging-existing-software.md#2025-04-16_snippet_6\n\nLANGUAGE: nix\nCODE:\n```\nowner = \"atextor\";\n```\n\n----------------------------------------\n\nTITLE: Adding Path Weight Option in Nix Configuration\nDESCRIPTION: This snippet introduces a new submodule for path styles, including a weight option constrained to integers between 1 and 20.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/module-system/deep-dive.md#2025-04-16_snippet_35\n\nLANGUAGE: nix\nCODE:\n```\npathStyleType = lib.types.submodule {\n  options = {\n    weight = lib.mkOption {\n      type = lib.types.ints.between 1 20;\n      default = 5;\n    };\n  };\n};\n\npathType = lib.types.submodule {\n  options = {\n    locations = lib.mkOption {\n      type = lib.types.listOf lib.types.str;\n    };\n\n    style = lib.mkOption {\n      type = pathStyleType;\n      default = {};\n    };\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Downloading and Preparing NixOS Image - Shell Commands\nDESCRIPTION: Commands to download and extract the NixOS ARM image using nix-shell with wget and zstd tools.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/installing-nixos-on-a-raspberry-pi.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ nix-shell -p wget zstd\n\n[nix-shell:~]$ wget https://hydra.nixos.org/build/226381178/download/1/nixos-sd-image-23.11pre500597.0fbe93c5a7c-aarch64-linux.img.zst\n[nix-shell:~]$ unzstd -d nixos-sd-image-23.11pre500597.0fbe93c5a7c-aarch64-linux.img.zst\n[nix-shell:~]$ dmesg --follow\n```\n\n----------------------------------------\n\nTITLE: Build System Impurities List\nDESCRIPTION: Markdown list detailing the various impurities that exist in Nix's sandboxed build system, including system-level and environmental factors that can affect build reproducibility\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/concepts/faq.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- CPU architecture—great effort being made to avoid compilation of native instructions in favour of hardcoded supported ones.\n- System's current time/date.\n- The filesystem used for building (see also `TMPDIR`).\n- Linux kernel parameters, such as:\n  - IPv6 capabilities.\n  - binfmt interpreters, e.g., those configured with `boot.binfmt.emulatedSystems`.\n- Timing behaviour of the build system—parallel Make build does not get the correct inputs in some cases.\n- Insertion of random values, e.g., from /dev/random or /dev/urandom.\n- Differences between Nix versions.\n```\n\n----------------------------------------\n\nTITLE: Basic Mermaid Flow Example\nDESCRIPTION: Simple flowchart demonstrating the basic 'informed by' relationship pattern used throughout the documentation\nSOURCE: https://github.com/nixos/nix.dev/blob/master/maintainers/information-flow.md#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  X --> |A| Y\n```\n\n----------------------------------------\n\nTITLE: String Interpolation Limitations in Nix\nDESCRIPTION: This counter-example demonstrates that only values that can be represented as strings can be used in string interpolation. Attempting to interpolate other types like integers directly results in an error.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_19\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  x = 1;\nin\n\"${x} + ${x} = ${x + x}\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Local Scope in Let Expressions in Nix\nDESCRIPTION: This counter-example shows that names defined in a let expression are only accessible within the expression that follows 'in'. Attempting to access them outside that scope results in an error.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nix-language.md#2025-04-16_snippet_9\n\nLANGUAGE: nix\nCODE:\n```\n{\n  a = let x = 1; in x;\n  b = x;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Redirects with Netlify Dev\nDESCRIPTION: Commands to build the project and test redirects using Netlify dev server.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell:nix.dev]$ nix-build -A build\n[nix-shell:nix.dev]$ netlify dev -d result\n```\n\n----------------------------------------\n\nTITLE: Generating a Monthly Nix Documentation Report with Bash\nDESCRIPTION: This command executes the make-post.sh script to generate a report of documentation changes between two dates. The script takes two date parameters in YYYY-MM-DD format and outputs a markdown report that requires further manual processing.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/maintainers/this-month-in-nix-docs/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./make-post.sh <from YYYY-MM-DD> <to YYYY-MM-DD> > report.md\n```\n\n----------------------------------------\n\nTITLE: Project Timeline Table in Markdown\nDESCRIPTION: A markdown table showing the project timeline from May to November with corresponding action items.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/maintainers/google-season-of-docs-2024.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Dates | Action Items |\n| ---------------- | -------------------------------------------------- |\n| May | Orientation / Review existing documentation pieces |\n| June - September | Write guides and update reference documentation |\n| October | Incorporate feedback and run evaluation |\n| November | Write and publish project report |\n```\n\n----------------------------------------\n\nTITLE: Creating a Table of Contents in Markdown for Nix/NixOS Recipes\nDESCRIPTION: This code creates a table of contents for Nix/NixOS recipes using the toctree directive with a maxdepth of 1. It includes links to various guides including binary cache setup, environments with direnv, dependency management, Python environment setup, post-build hooks, and GitHub Actions CI.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/recipes/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nadd-binary-cache.md\nAutomatic environments <direnv>\nsharing-dependencies.md\nManaging remote sources <./dependency-management.md>\nPython development environment <./python-environment.md>\npost-build-hook.md\ncontinuous-integration-github-actions.md\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Remote Builder User in NixOS\nDESCRIPTION: NixOS configuration that creates a dedicated user for remote builds with proper SSH key authentication and trusted user status. This module sets up the security context for remote build operations.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/tutorials/nixos/distributed-builds-setup.md#2025-04-16_snippet_1\n\nLANGUAGE: nix\nCODE:\n```\n{\n  users.users.remotebuild = {\n    isNormalUser = true;\n    createHome = false;\n    group = \"remotebuild\";\n\n    openssh.authorizedKeys.keyFiles = [ ./remotebuild.pub ];\n  };\n\n  users.groups.remotebuild = {};\n\n  nix.settings.trusted-users = [ \"remotebuild\" ];\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended Approach for Importing Nixpkgs\nDESCRIPTION: Shows the preferred way to import packages from nixpkgs by explicitly assigning names in a let expression, which improves code clarity and analyzability.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/source/guides/best-practices.md#2025-04-16_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nlet\n  pkgs = import <nixpkgs> {};\n  inherit (pkgs) curl jq;\nin\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for nix.dev\nDESCRIPTION: Command to start the local development server after entering the nix-shell environment. This enables live preview of documentation changes.\nSOURCE: https://github.com/nixos/nix.dev/blob/master/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n[nix-shell:nix.dev]$ devmode\n```"
  }
]