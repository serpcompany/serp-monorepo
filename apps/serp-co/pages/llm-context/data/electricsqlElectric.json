[
  {
    "owner": "electric-sql",
    "repo": "electric",
    "content": "TITLE: Using React Hook for ElectricSQL Integration\nDESCRIPTION: React component example that uses the useShape hook from @electric-sql/react to sync and display data from a Postgres table. The hook fetches data based on specified parameters including table name and WHERE clause.\nSOURCE: https://github.com/electric-sql/electric/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useShape } from \"@electric-sql/react\"\n\nfunction Component() {\n  const { data } = useShape({\n    url: `http://localhost:3000/v1/shape`,\n    params: {\n      table: `foo`,\n      where: `title LIKE 'foo%'`,\n    },\n  })\n\n  return JSON.stringify(data)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo MVC Application with Electric SQL in React\nDESCRIPTION: This code implements a complete Todo MVC application using Electric SQL for data synchronization. It includes database setup, schema migration, and a React component with functionality for adding, toggling, and removing todo items. The component uses Electric's hooks for real-time data access and manipulation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/todo-app.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLiveQuery } from 'electric-sql/react'\nimport { ElectricDatabase, electrify } from 'electric-sql/wa-sqlite'\nimport { useEffect, useRef, useState } from 'react'\nimport { Electric, schema } from '../generated/client'\nimport styles from './index.module.css'\n\nconst DEBUG = false\n\n// Our todo item shape\ntype Todo = {\n  id: string\n  text: string\n  completed: number\n}\n\nexport default function Index () {\n  // Track when we've connected to electric\n  const [electric, setElectric] = useState<Electric | null>(null)\n\n  // When we've connected, save a reference to Electric\n  useEffect(() => {\n    let isMounted = true\n\n    const init = async () => {\n      // Connect to Electric and setup our database\n      const config = {\n        debug: DEBUG,\n        url: import.meta.env.VITE_ELECTRIC_URL\n      }\n      const { tablesConfig } = schema\n      const conn = await ElectricDatabase.init('todo.db')\n      const db = await electrify(conn, schema)\n      await db.todos.sync()\n\n      // Create the table if it doesn't exist already\n      await conn.execute(`\n        CREATE TABLE IF NOT EXISTS todos (\n          id TEXT PRIMARY KEY,\n          text TEXT NOT NULL,\n          completed INTEGER NOT NULL DEFAULT 0\n        )\n      `)\n\n      if (!isMounted) return\n\n      setElectric(db)\n    }\n\n    init()\n\n    return () => {\n      isMounted = false\n    }\n  }, [])\n\n  if (electric === null) {\n    return <div>Connecting to Electric...</div>\n  }\n\n  return <Todos db={electric} />\n}\n\nfunction Todos({ db }: { db: Electric }) {\n  const $input = useRef<HTMLInputElement>(null)\n  const [filter, setFilter] = useState<'all' | 'active' | 'completed'>('all')\n\n  // Get all todos\n  const { results: todos } = useLiveQuery(\n    db.todos.liveMany({\n      orderBy: {\n        rowid: 'asc',\n      },\n    }),\n  )\n\n  const activeCount = todos?.filter((t) => !t.completed).length ?? 0\n  const completedCount = (todos?.length ?? 0) - activeCount\n\n  // Filter the todos based on the current filter\n  const filteredTodos = todos?.filter((todo) => {\n    if (filter === 'active') return !todo.completed\n    if (filter === 'completed') return todo.completed\n    return true\n  })\n\n  return (\n    <div className={styles.app}>\n      <header className={styles.header}>\n        <h1>todos</h1>\n\n        <form\n          onSubmit={(e) => {\n            e.preventDefault()\n            const text = $input.current?.value.trim()\n            if (!text) return\n\n            // Add a new todo\n            db.todos.create({\n              data: {\n                id: Date.now().toString(),\n                text,\n                completed: 0,\n              },\n            })\n\n            // Clear the input\n            if ($input.current) $input.current.value = ''\n          }}\n          className={styles.newTodo}\n        >\n          <input\n            ref={$input}\n            autoFocus\n            className={styles.newTodoInput}\n            placeholder=\"What needs to be done?\"\n          />\n          <button type=\"submit\" className={styles.submitButton}>\n            Add\n          </button>\n        </form>\n      </header>\n\n      <section className={styles.main}>\n        <ul className={styles.todoList}>\n          {filteredTodos?.map((todo) => (\n            <li key={todo.id} className={styles.todo}>\n              <input\n                type=\"checkbox\"\n                className={styles.toggle}\n                checked={Boolean(todo.completed)}\n                onChange={async () => {\n                  // Toggle the todo's completed status\n                  await db.todos.update({\n                    where: {\n                      id: todo.id,\n                    },\n                    data: {\n                      completed: todo.completed ? 0 : 1,\n                    },\n                  })\n                }}\n              />\n              <label className={styles.todoLabel}>{todo.text}</label>\n              <button\n                className={styles.destroy}\n                onClick={async () => {\n                  // Delete the todo\n                  await db.todos.delete({\n                    where: {\n                      id: todo.id,\n                    },\n                  })\n                }}\n              />\n            </li>\n          ))}\n        </ul>\n      </section>\n\n      {todos?.length ? (\n        <footer className={styles.footer}>\n          <span className={styles.todoCount}>\n            {activeCount} {activeCount === 1 ? 'item' : 'items'} left\n          </span>\n\n          <ul className={styles.filters}>\n            <li>\n              <a\n                className={filter === 'all' ? styles.selected : ''}\n                onClick={() => setFilter('all')}\n              >\n                All\n              </a>\n            </li>\n            <li>\n              <a\n                className={filter === 'active' ? styles.selected : ''}\n                onClick={() => setFilter('active')}\n              >\n                Active\n              </a>\n            </li>\n            <li>\n              <a\n                className={filter === 'completed' ? styles.selected : ''}\n                onClick={() => setFilter('completed')}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          {completedCount > 0 && (\n            <button\n              className={styles.clearCompleted}\n              onClick={async () => {\n                // Delete all completed todos\n                for (const todo of todos?.filter((t) => t.completed) ?? []) {\n                  await db.todos.delete({\n                    where: {\n                      id: todo.id,\n                    },\n                  })\n                }\n              }}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      ) : null}\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo App with Electric and TanStack Query in TypeScript\nDESCRIPTION: Example implementation of a todo application that uses Electric for data synchronization and TanStack Query for optimistic updates. The code demonstrates how to sync data shapes with Electric while using TanStack for local mutations and optimistic state management.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/tanstack.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function Example() {\n  const { db } = useElectric()!\n  const { useLiveQuery } = db\n\n  // Subscribe to the shape\n  const shape = useLiveQuery(\n    db.todos.liveMany({\n      where: { is_completed: false },\n      orderBy: { created_at: 'desc' }\n    })\n  )\n\n  // Setup the mutation\n  const mutation = useMutation({\n    mutationFn: async (variables: { text: string }) => {\n      const todo = await db.todos.create({\n        data: {\n          text: variables.text,\n          is_completed: false\n        }\n      })\n      return todo\n    }\n  })\n\n  // Merge the optimistic state into the shape data\n  const todos = shape ?? []\n  const optimisticTodos = mutation.isPending\n    ? [\n        {\n          id: 'optimistic',\n          text: mutation.variables?.text ?? '',\n          is_completed: false,\n          created_at: new Date()\n        },\n        ...todos\n      ]\n    : todos\n\n  // Define the submit handler\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    const form = event.target as HTMLFormElement\n    const data = new FormData(form)\n    const text = data.get('text')?.toString() ?? ''\n    mutation.mutate({ text })\n    form.reset()\n  }\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input name=\"text\" />\n        <button>Add</button>\n      </form>\n      <ul>\n        {optimisticTodos.map((todo) => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Shape and ShapeStream\nDESCRIPTION: Demonstrates how to create a ShapeStream for consuming a Shape Log and transform it into a Shape object. The example shows how to subscribe to data changes from a specific table.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShapeStream, Shape } from '@electric-sql/client'\n\nconst stream = new ShapeStream({\n  url: `http://localhost:3000/v1/shape`,\n  params: {\n    table: 'items'\n  }\n})\nconst shape = new Shape(stream)\n\n// The callback runs every time the Shape data changes.\nshape.subscribe(data => console.log(data))\n```\n\n----------------------------------------\n\nTITLE: Initializing Electric in React Application\nDESCRIPTION: TypeScript implementation for initializing Electric SQL client and creating React context for database access.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { makeElectricContext } from 'electric-sql/react'\nimport { electrify, ElectricDatabase } from 'electric-sql/wa-sqlite'\n\n// The generated electric client:\nimport { Electric, schema } from './generated/client'\nexport type { Issue } from './generated/client'\n\nexport const { ElectricProvider, useElectric } = makeElectricContext<Electric>()\n\nexport const initElectric = async () => {\n const electricUrl = import.meta.env.ELECTRIC_URL ?? 'ws://localhost:5133'\n const config = {\n  auth: {\n   token: insecureAuthToken({ user_id: uuid() }),\n  },\n  url: electricUrl,\n }\n const conn = await ElectricDatabase.init(dbName, '/')\n return await electrify(conn, schema, config)\n}\n```\n\n----------------------------------------\n\nTITLE: React Component Using ElectricSQL's useShape Hook\nDESCRIPTION: React component that uses the useShape hook from @electric-sql/react to fetch and display data from the scores table. This creates a real-time connection that will update when the data changes in Postgres.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShape } from '@electric-sql/react'\n\nfunction Component() {\n  const { data } = useShape({\n    url: `http://localhost:3000/v1/shape`,\n    params: {\n      table: `scores`\n    }\n  })\n\n  return (\n    <pre>{ JSON.stringify(data, null, 2) }</pre>\n  )\n}\n\nexport default Component\n```\n\n----------------------------------------\n\nTITLE: Preloading Filtered Shape Data\nDESCRIPTION: Example of preloading filtered data using the preloadShape function with where clause and specific columns.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const filteredLoader = async () => {\n  return await preloadShape({{\n    url: `http://localhost:3000/v1/shape`,\n    params: {\n      table: 'items',\n      where: 'category = \\'electronics\\'',\n      columns: ['id', 'name', 'price']\n    }\n  }})\n}\n```\n\n----------------------------------------\n\nTITLE: Optimistic Write Pattern Implementation\nDESCRIPTION: React/TypeScript implementation of optimistic writes pattern with ElectricSQL.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@../../examples/write-patterns/patterns/2-optimistic-state/index.tsx\n```\n\n----------------------------------------\n\nTITLE: Preloading Shape Data in React Route Loaders\nDESCRIPTION: Using preloadShape function to ensure Shape data is loaded before rendering a route or component, useful for route loading functions.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport const clientLoader = async () => {\n  return await preloadShape({{\n    url: `http://localhost:3000/v1/shape`,\n    params: {\n      table: 'items'\n    }\n  }})\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-side Encryption in React with Electric SQL\nDESCRIPTION: Demonstrates a React component that implements client-side encryption for data synchronization using Electric SQL. The code shows how to encrypt data before sending it to the server and decrypt it when receiving from Electric sync.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/encryption.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { useElectric, useLiveQuery } from 'electric-sql/react'\nimport { genUUID } from 'electric-sql/util'\nimport { encrypt, decrypt } from './crypto'\n\nexport function Example() {\n  const { db } = useElectric()!\n  const [input, setInput] = useState('')\n\n  // Ensure the table exists in the local database\n  useEffect(() => {\n    void db.exec(\n      'CREATE TABLE IF NOT EXISTS items (id TEXT PRIMARY KEY, value TEXT);'\n    )\n  }, [])\n\n  // Subscribe to the items table\n  const { results: items } = useLiveQuery(\n    db.items.liveMany()\n  )\n\n  // Insert an item with an encrypted value\n  const insert = async () => {\n    const id = genUUID()\n    const value = input\n\n    const encrypted = await encrypt(value)\n    await db.items.create({\n      data: { id, value: encrypted }\n    })\n\n    setInput('')\n  }\n\n  return (\n    <div>\n      <form onSubmit={(e) => { e.preventDefault(); void insert() }}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Enter a value...\"\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n\n      <h3>Items:</h3>\n      <ul>\n        {items?.map(async (item) => {\n          const decrypted = await decrypt(item.value)\n          return (\n            <li key={item.id}>{decrypted}</li>\n          )\n        })}\n      </ul>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Live Queries with ElectricSQL in React Component\nDESCRIPTION: This snippet shows how to use ElectricSQL's live queries in a React component. It demonstrates binding a live query to retrieve active projects and automatically update the component when data changes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-09-20-introducing-electricsql-v0.6.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n  const { results } = useLiveQuery(\n    db.projects.liveMany({\n      where: {\n        status: 'active'\n      }\n    }\n  )\n\n  return (\n    <List items={results} >\n  )\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema with Electric SQL Tables\nDESCRIPTION: SQL migration script that creates issue and comment tables with UUID primary keys and enables Electric synchronization for offline capability.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE IF NOT EXISTS \"issue\" (\n  \"id\" TEXT NOT NULL,\n  \"title\" TEXT NOT NULL,   \n  \"description\" TEXT NOT NULL,\n  \"priority\" TEXT NOT NULL,\n  \"status\" TEXT NOT NULL,\n  \"modified\" TEXT NOT NULL,\n  \"created\" TEXT NOT NULL,\n  \"kanbanorder\" TEXT NOT NULL,\n  \"username\" TEXT NOT NULL,\n  CONSTRAINT \"issue_pkey\" PRIMARY KEY (\"id\")\n);\n\nCREATE TABLE IF NOT EXISTS \"comment\" (\n  \"id\" TEXT NOT NULL,\n  \"body\" TEXT NOT NULL,\n  \"username\" TEXT NOT NULL,\n  \"issue_id\" TEXT NOT NULL,\n  \"created_at\" TEXT NOT NULL,\n  CONSTRAINT \"comment_pkey\" PRIMARY KEY (\"id\"),\n  FOREIGN KEY (issue_id) REFERENCES issue(id)\n);\n\n-- ⚡\n-- Electrify the tables\nCALL electric.electrify('issue');\nCALL electric.electrify('comment');\n```\n\n----------------------------------------\n\nTITLE: Configuring ElectricSQL in Remix Route Component\nDESCRIPTION: Main route component implementation showing ElectricSQL integration with Remix. Demonstrates the setup of Electric client, syncing mechanisms, and data management using a Todo list example.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/remix.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n@../../examples/remix/app/routes/_index.tsx{tsx}\n```\n\n----------------------------------------\n\nTITLE: Implementing Proxy Authentication for Electric SQL in Next.js\nDESCRIPTION: This TypeScript code defines a Next.js route handler that acts as a proxy for authenticating requests to the Electric SQL HTTP API. It verifies the user's session, generates a JWT token, and forwards the authenticated request to the Electric API.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/proxy-auth.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NextResponse } from 'next/server'\nimport { headers } from 'next/headers'\nimport { getIronSession } from 'iron-session/edge'\nimport { sessionOptions } from '@/lib/session'\nimport { generateJWT } from '@/lib/auth'\n\nconst ELECTRIC_URL = process.env.ELECTRIC_URL\n\nexport const POST = async (req: Request) => {\n  const session = await getIronSession(headers(), sessionOptions)\n\n  if (!session.user) {\n    return new Response('Unauthorized', { status: 401 })\n  }\n\n  const token = await generateJWT(session.user)\n\n  const electric = new URL(ELECTRIC_URL)\n\n  const proxyReq = new Request(electric, {\n    method: req.method,\n    headers: {\n      ...req.headers,\n      host: electric.host,\n      authorization: `Bearer ${token}`\n    },\n    body: req.body,\n    redirect: 'manual'\n  })\n\n  const res = await fetch(proxyReq)\n\n  return new NextResponse(res.body, {\n    status: res.status,\n    statusText: res.statusText,\n    headers: res.headers\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Shape Proxy Route Implementation\nDESCRIPTION: Implementation of a shape-proxy endpoint in Next.js for handling Electric sync service access, including authentication and routing capabilities\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/next.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@../../examples/nextjs/app/shape-proxy/route.ts\n```\n\n----------------------------------------\n\nTITLE: Using sync() API with Where Clause and Include Tree in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the sync() API to selectively replicate data by filtering a specific project by ID and including its related issues. The synced data is awaited to ensure synchronization is complete.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-04-10-electricsql-v0.10-released.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst shape = await db.projects.sync({\n  where: {\n    id: \"abcd\",\n  },\n  include: {\n    issues: true\n  }\n})\n\nawait shape.synced\n```\n\n----------------------------------------\n\nTITLE: Implementing Electric with Tanstack Query in React\nDESCRIPTION: This code snippet demonstrates how to set up and use Electric with Tanstack Query in a React component. It includes functionality for fetching items, adding new items, and updating existing items with optimistic updates.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/tanstack.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\nimport { ElectricDatabase, electrify } from 'electric-sql/react'\nimport { authToken, schema } from './generated/client'\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\n\nexport function Example() {\n  const [db, setDb] = useState<ElectricDatabase>()\n\n  useEffect(() => {\n    const init = async () => {\n      const config = await authToken()\n      const { makeElectricContext, db } = await electrify(config)\n      setDb(db)\n    }\n\n    init()\n  }, [])\n\n  if (db === undefined) {\n    return <div>Loading...</div>\n  }\n\n  return <ExampleComponent db={db} />\n}\n\nfunction ExampleComponent({ db }: { db: ElectricDatabase }) {\n  const { items } = db\n\n  const queryClient = useQueryClient()\n\n  const { data } = useQuery({\n    queryKey: ['items'],\n    queryFn: async () => {\n      const results = await items.sync().then(() => items.findMany())\n      return results\n    },\n  })\n\n  const addMutation = useMutation({\n    mutationFn: async (value: string) => {\n      const item = await items.create({\n        data: { value },\n      })\n      return item\n    },\n    onMutate: async (newValue) => {\n      await queryClient.cancelQueries({ queryKey: ['items'] })\n      const previousItems = queryClient.getQueryData(['items'])\n      queryClient.setQueryData(['items'], (old: any) => [\n        ...(old ?? []),\n        { id: 'temp-id', value: newValue },\n      ])\n      return { previousItems }\n    },\n    onError: (err, newValue, context: any) => {\n      queryClient.setQueryData(['items'], context.previousItems)\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: ['items'] })\n    },\n  })\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, value }: { id: string; value: string }) => {\n      const item = await items.update({\n        where: { id },\n        data: { value },\n      })\n      return item\n    },\n    onMutate: async (newItem) => {\n      await queryClient.cancelQueries({ queryKey: ['items'] })\n      const previousItems = queryClient.getQueryData(['items'])\n      queryClient.setQueryData(['items'], (old: any) =>\n        old.map((item: any) =>\n          item.id === newItem.id ? { ...item, ...newItem } : item\n        )\n      )\n      return { previousItems }\n    },\n    onError: (err, newItem, context: any) => {\n      queryClient.setQueryData(['items'], context.previousItems)\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: ['items'] })\n    },\n  })\n\n  const [newValue, setNewValue] = useState('')\n\n  return (\n    <div>\n      <h1>Items</h1>\n      <ul>\n        {data?.map((item) => (\n          <li key={item.id}>\n            <input\n              value={item.value}\n              onChange={(e) =>\n                updateMutation.mutate({ id: item.id, value: e.target.value })\n              }\n            />\n          </li>\n        ))}\n      </ul>\n      <input\n        value={newValue}\n        onChange={(e) => setNewValue(e.target.value)}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') {\n            addMutation.mutate(newValue)\n            setNewValue('')\n          }\n        }}\n      />\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Token Authentication in ShapeStream\nDESCRIPTION: Implementation of authentication with dynamic token refresh using function-based headers and error handling for 401 responses.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'items'\n  },\n  headers: {\n    'Authorization': async () => `Bearer ${await getToken()}`\n  },\n  onError: async (error) => {\n    if (error instanceof FetchError && error.status === 401) {\n      // Force token refresh\n      await refreshToken()\n      // Return empty object to trigger a retry with the new token\n      // that will be fetched by our function-based header\n      return {}\n    }\n    // Rethrow errors we can't handle\n    throw error\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Encryption in ElectricSQL with React and TypeScript\nDESCRIPTION: This example shows how to implement encryption in an ElectricSQL application using React and TypeScript. It demonstrates encrypting data before sending it to the server and decrypting it when received.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<<< @../../examples/encryption/src/Example.tsx{tsx}\n```\n\n----------------------------------------\n\nTITLE: Using useShape Hook in React Component with ElectricSQL\nDESCRIPTION: This snippet demonstrates how to use the `useShape` hook from @electric-sql/react to fetch and display data in a React component. It shows handling of loading state and rendering of fetched data.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/react-hooks/README.md#2025-04-14_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { useShape } from \"@electric-sql/react\"\n\nexport default function MyComponent () {\n  const { isLoading, data } = useShape({\n    url: \"http://my-api.com/shape\",\n    params: {\n      table: `foo`\n    }\n  })\n\n  if (isLoading) {\n    return <div>loading</div>\n  }\n\n  return (\n    <div>\n      {data.map(foo => <div>{foo.title}</div>)}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using useShape Hook with React Components\nDESCRIPTION: Example of how to use the useShape hook to bind a materialized Shape to a state variable in a React component, displaying data in a list.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShape } from '@electric-sql/react'\n\nconst MyComponent = () => {\n  const { isLoading, data } = useShape<{title: string}>({{\n    url: `http://localhost:3000/v1/shape`,\n    params: {\n      table: 'items'\n    }\n  }})\n\n  if (isLoading) {\n    return <div>Loading ...</div>\n  }\n\n  return (\n    <div>\n      {data.map(item => <div>{item.title}</div>)}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Auth Headers in ShapeStream\nDESCRIPTION: Example showing how to implement dynamic authorization headers using async functions to refresh access tokens automatically in ShapeStream configuration. This pattern enables automatic token refresh, session-based authentication, and secure token storage.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/auth.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  headers: {\n    // Token will be refreshed on each request\n    'Authorization': async () => `Bearer ${await getAccessToken()}`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using SQL String in Where Clause with JavaScript Sync API\nDESCRIPTION: This example shows how to use a raw SQL string in the where clause of a shape definition to filter issues by project_id. It uses array syntax to match multiple project IDs.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-04-10-electricsql-v0.10-released.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { synced } = await electric.db.issues.sync({\n  where: \"this.project_id in [7, 42]\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ElectricSQL Tables and Permissions in Postgres\nDESCRIPTION: SQL commands demonstrating how to set up tables with Electric replication, including DDL schema definition, enabling Electric replication, and configuring access permissions using DDLX rules.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-09-20-introducing-electricsql-v0.6.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Define and evolve your DDL schema as normal.\nCREATE TABLE projects (\n  id UUID PRIMARY KEY\n  owner_id UUID REFERENCES(users.id)\n);\n\n-- Explicitly opt tables in to the Electric replication machinery.\nALTER TABLE projects\n  ENABLE ELECTRIC;\n\n-- Annotate your model with Electric-scoped DDLX rules.\nELECTRIC ASSIGN 'projects:owner'\n  TO projects.owner_id;\n\nELECTRIC GRANT ALL ON projects\n  TO 'projects:owner';\n```\n\n----------------------------------------\n\nTITLE: Shape Client Class Implementation\nDESCRIPTION: Main Shape client class that handles syncing with Electric SQL server, managing state, and materializing data. Implements request handling, message processing, and subscriber notifications.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom urllib.parse import urlencode\n\nclass Shape(object):\n    \"\"\"Syncs a shape log and materialises it into a `data` dict.\"\"\"\n\n    def __init__(self, base_url='http://localhost:3000', offset=-1, handle=None, table=None, where=None):\n        if table is None:\n            raise \"Must provide a table\"\n\n        # Request state used to build the URL.\n        self.base_url = base_url\n        self.cursor = None\n        self.handle = handle\n        self.live = False\n        self.offset = offset\n        self.table = table\n        self.where = where\n\n        # Materialiased data.\n        self.data = {}\n\n        # Accumulated messages (waiting for an `up-to-date` to apply).\n        self.messages = []\n\n        # Registered callbacks to notify when the data changes.\n        self.subscribers = []\n\n    def subscribe(self, callback):\n        \"\"\"Register a function that's called whenever the data changes.\"\"\"\n\n        self.subscribers.append(callback)\n\n    def sync(self):\n        \"\"\"Start syncing. Note that this blocks the current thread.\"\"\"\n\n        while True:\n            self.request()\n\n    def request(self):\n        \"\"\"Make a request to `GET /v1/shape` and process the response.\"\"\"\n\n        # Build the URL based on the current parameters.\n        url = self.build_url()\n\n        # Fetch the response.\n        response = requests.get(url)\n\n        # This is a happy path example, so we just log error codes.\n        # A real client should handle errors, backoff, reconnect, etc.\n        if response.status_code > 204:\n            raise Exception(\"Error: {}\".format(response.status_code))\n\n        # If the response is 200 then we may have new data to process.\n        if response.status_code == 200:\n            self.messages.append(response.json())\n\n            # If we're up-to-date, switch into live mode and process\n            # the accumulated messages.\n            if 'electric-up-to-date' in response.headers:\n                self.live = True\n                self.process_messages()\n\n        # Set the shape handle, offset and optionally cursor for\n        # the next request from the response headers.\n        self.handle = response.headers['electric-handle']\n        self.offset = response.headers['electric-offset']\n\n        if 'electric-cursor' in response.headers:\n            self.cursor = r.headers['electric-cursor']\n\n    def process_messages(self):\n        \"\"\"Process any batched up messages. If the data has changed,\n          notify the subscribers.\n        \"\"\"\n\n        has_changed = False\n\n        # Process the accumulated messages.\n        for batch in self.messages:\n            for message in batch:\n                if 'operation' in message.get('headers', {}):\n                    op_changed = self.apply_operation(message)\n                    if op_changed:\n                        has_changed = True\n\n        # Clear the queue.\n        self.messages = []\n\n        # If the data has changed, notify the subscribers.\n        if has_changed:\n            self.notify_subscribers()\n\n    def apply_operation(self, message):\n        \"\"\"Apply a logical operation message to the data dict.\n          Return whether the data has changed.\n        \"\"\"\n\n        key = message['key'].replace('\"', '').split(\"/\")[-1]\n        value = message.get('value')\n        operation = message['headers']['operation']\n\n        if operation == 'insert':\n            self.data[key] = value\n\n            return True\n\n        if operation == 'update':\n            has_changed = False\n            current_value = self.data[key]\n\n            for k, v in value:\n                if current_value.get(k) != v:\n                    has_changed = True\n\n            current_value.update(new_value)\n\n            return has_changed\n\n        if operation == 'delete':\n            if key in self.data:\n                del self.data[key]\n\n                return True\n\n        return False\n\n    def notify_subscribers(self):\n        for callback in self.subscribers:\n            callback(self.data)\n\n    def build_url(self):\n        params = {\n            'offset': self.offset,\n            'table': self.table\n        }\n\n        if self.cursor is not None:\n            params['cursor'] = self.cursor\n\n        if self.handle is not None:\n            params['handle'] = self.handle\n\n        if self.live:\n            params['live'] = True\n\n        if self.where is not None:\n            params['where'] = self.where\n\n        return \"{}/v1/shape?{}\".format(self.base_url, urlencode(params))\n```\n\n----------------------------------------\n\nTITLE: Implementing ElectricSQL in a React Component\nDESCRIPTION: A complete React component that demonstrates how to initialize ElectricSQL, connect to a database, and perform CRUD operations. It includes state management for items, form handling for adding new items, and real-time data updates.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/react.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useLiveQuery } from 'electric-sql/react'\nimport { useEffect, useState } from 'react'\nimport { ElectricDatabase, Item, electrify } from './generated/client'\n\nexport function Example() {\n  // State for the electric client\n  const [electric, setElectric] = useState<ElectricDatabase>()\n\n  // State for the form input\n  const [value, setValue] = useState('')\n\n  // Initialise the electric client\n  useEffect(() => {\n    const init = async () => {\n      const config = {\n        debug: true,\n        url: import.meta.env.VITE_ELECTRIC_URL\n      }\n\n      const { db } = await electrify(config)\n      setElectric(db)\n    }\n\n    init()\n  }, [])\n\n  // Use live query to reactively render items in the UI\n  const { results } = useLiveQuery(\n    electric?.db.item.liveMany({\n      orderBy: { id: 'asc' }\n    })\n  )\n\n  const items = results ?? []\n\n  // Submit handler to insert a new item\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n\n    if (!electric || value === '') {\n      return\n    }\n\n    await electric.db.item.create({\n      data: {\n        value,\n        created_at: new Date().toISOString()\n      }\n    })\n\n    setValue('')\n  }\n\n  // Toggle handler to update the is_complete field\n  const toggle = async (item: Item) => {\n    if (!electric) {\n      return\n    }\n\n    await electric.db.item.update({\n      where: { id: item.id },\n      data: { is_complete: !item.is_complete }\n    })\n  }\n\n  // Delete handler to delete an item\n  const doDelete = async (item: Item) => {\n    if (!electric) {\n      return\n    }\n\n    await electric.db.item.delete({\n      where: { id: item.id }\n    })\n  }\n\n  return (\n    <div>\n      <h3>Items</h3>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"add\"\n          value={value}\n          onChange={(e) => setValue(e.target.value)}\n          required\n        />\n        <button type=\"submit\">Add</button>\n      </form>\n      <ul>\n        {items.map((item) => (\n          <li\n            key={item.id}\n            className={item.is_complete ? 'complete' : undefined}\n          >\n            <span onClick={() => toggle(item)}>{item.value}</span>\n            <button onClick={() => doDelete(item)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Shared Persistent Optimistic State in React\nDESCRIPTION: This code snippet demonstrates the third pattern - shared persistent optimistic state. It uses Valtio with localStorage to create a shared, persistent reactive store that maintains optimistic state across components and browser sessions, making offline writes more resilient.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/writes.md#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<<< @../../examples/write-patterns/patterns/3-shared-persistent/index.tsx{tsx}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Queries\nDESCRIPTION: Implementation of reactive queries using Electric's live query system for real-time data updates.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst { results } = useLiveQuery(\n db.issue.liveMany({\n  orderBy: {\n   kanbanorder: 'asc',\n  },\n  where: filterStateToWhere(filterState),\n  // `filterStateToWhere` is a helper function that converts the filter \n  // state (tied to url parameters) to a where caluse for the query.\n }))\n```\n\n----------------------------------------\n\nTITLE: ShapeStream Subscription Management\nDESCRIPTION: Example showing how to subscribe to ShapeStream updates and handle both messages and errors, including subscription cleanup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'issues'\n  }\n})\n\n// Subscribe to both message and error handlers\nstream.subscribe(\n  (messages) => {\n    // Process messages\n    console.log('Received messages:', messages)\n  },\n  (error) => {\n    // Get notified about errors\n    console.error('Error in subscription:', error)\n  }\n)\n\n// Store the unsubscribe function\nconst unsubscribe = stream.subscribe(messages => {\n  console.log('Received messages:', messages)\n})\n\n// Later, unsubscribe this specific subscription\nunsubscribe()\n\n// Or unsubscribe all subscriptions\nstream.unsubscribeAll()\n```\n\n----------------------------------------\n\nTITLE: Syncing Electric Shape Data to Redis Hash in TypeScript\nDESCRIPTION: This code snippet demonstrates how to apply Electric's shape stream log messages (inserts, updates, and deletes) to a Redis hash, keeping the cache automatically up-to-date. It uses the 'redis' package to interact with Redis and processes Electric's shape log entries.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/redis.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createClient } from 'redis';\nimport { ShapeDefinition, ShapeLog } from '@electric-sql/electric-sql';\n\nconst client = createClient();\nawait client.connect();\n\nconst shape: ShapeDefinition = {\n  // ...\n};\n\nconst log: ShapeLog = {\n  // ...\n};\n\nfor (const entry of log.entries) {\n  switch (entry.type) {\n    case 'INSERT':\n    case 'UPDATE':\n      await client.hSet(shape.tablename, entry.opId, JSON.stringify(entry.new));\n      break;\n    case 'DELETE':\n      await client.hDel(shape.tablename, entry.opId);\n      break;\n  }\n}\n\nconst data = await client.hGetAll(shape.tablename);\nconsole.log(data);\n\nawait client.disconnect();\n```\n\n----------------------------------------\n\nTITLE: Using ShapeStream for Direct Log Consumption\nDESCRIPTION: Shows how to use the ShapeStream primitive directly to consume a Shape Log. The example demonstrates subscribing to row changes for a specific table.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShapeStream } from '@electric-sql/client'\n\n// Passes subscribers rows as they're inserted, updated, or deleted\nconst stream = new ShapeStream({\n  url: `http://localhost:3000/v1/shape`,\n  params: {\n    table: `foo`\n  }\n})\n\nstream.subscribe(messages => {\n  // messages is an array with one or more row updates\n  // and the stream will wait for all subscribers to process them\n  // before proceeding\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Optimistic State for Offline Writes in React\nDESCRIPTION: This code snippet shows the second pattern - implementing optimistic state for offline writes. It uses React's useOptimistic hook to immediately display local changes while asynchronously sending data to the server, allowing the app to work offline for both reads and writes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/writes.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<< @../../examples/write-patterns/patterns/2-optimistic-state/index.tsx{tsx}\n```\n\n----------------------------------------\n\nTITLE: React Component Implementation with Local Database\nDESCRIPTION: React component code showing usage of local database for managing todos, demonstrating the integration with PGlite and Electric SQL.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/writes.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTodos } from './store'\n\nexport function Component() {\n  const todos = useTodos()\n\n  return (\n    <div>\n      {todos.map(todo => (\n        <div key={todo.id}>\n          {todo.content}\n        </div>\n      ))}\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Online Writes with Electric SQL in React\nDESCRIPTION: This code snippet demonstrates the first pattern for handling writes - using online writes with a REST API. It shows a React component that fetches todos using Electric for read-path sync and makes API calls to create new todos, requiring an online connection for writes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/writes.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<<< @../../examples/write-patterns/patterns/1-online-writes/index.tsx{tsx}\n```\n\n----------------------------------------\n\nTITLE: Defining a ShapeStream for Key Management in TypeScript\nDESCRIPTION: This code snippet illustrates how to define a ShapeStream for managing encryption keys in ElectricSQL. It sets up a stream to fetch tenant keys based on user permissions.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: `${ELECTRIC_URL}/v1/shape`,\n  params: {\n    table: 'tenants',\n    columns: [\n      'keys'\n    ],\n    where: `id in ('${user.tenant_ids.join(`', '`)}')`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Write-Path Sync with ElectricSQL in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement write-path synchronization using ElectricSQL. It defines a sync function that processes local changes and sends them to a server endpoint.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<<< @../../examples/write-patterns/patterns/4-through-the-db/sync.ts{ts}\n```\n\n----------------------------------------\n\nTITLE: Optimizing WHERE Clause with Equality Check in SQL\nDESCRIPTION: Demonstrates optimization of a simple equality check in a WHERE clause. Electric SQL indexes shapes by constant values for efficient lookup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/shapes.md#2025-04-14_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nfield = constant\n```\n\n----------------------------------------\n\nTITLE: Initializing PGlite Database Query\nDESCRIPTION: Demonstrates how to create a new PGlite database instance and execute a basic SQL query. Shows the minimal setup required to get started with PGlite in a JavaScript/TypeScript environment.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/product/pglite.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PGlite } from '@electric-sql/pglite'\n\nconst db = new PGlite()\nawait db.query(\"select 'Hello world' as message;\")\n// -> { rows: [ { message: \"Hello world\" } ] }\n```\n\n----------------------------------------\n\nTITLE: Data Syncing with Electric in React\nDESCRIPTION: Implementation of data syncing using Electric's useShape hook to maintain real-time data synchronization with the backend.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useShape } from '@electric-sql/react'\n\nconst MyComponent = () => {\n  const { data } = useShape({\n    url: `https://electric.example.com/v1/shape`,\n    params: {\n      table: 'items'\n    }\n  })\n\n  return (\n    <List items=\"data\" />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Local Database Schema Definition\nDESCRIPTION: SQL schema defining the local database structure including synced and local tables, views, and triggers for managing optimistic state.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/writes.md#2025-04-14_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE todos_synced (\n  id uuid PRIMARY KEY,\n  content text NOT NULL,\n  is_completed boolean NOT NULL DEFAULT false\n);\n\nCREATE TABLE todos_local (\n  id uuid PRIMARY KEY,\n  content text NOT NULL,\n  is_completed boolean NOT NULL DEFAULT false\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Permissions with ElectricSQL DDLX Rules\nDESCRIPTION: SQL commands using ElectricSQL's DDLX syntax to assign ownership permissions for projects. This demonstrates how to bootstrap new permission scopes in a local-first application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nELECTRIC GRANT ALL\n  ON projects\n  TO 'projects:owner';\n\nELECTRIC ASSIGN 'projects:owner'\n  TO projects.owner_id;\n```\n\n----------------------------------------\n\nTITLE: Using useShape Hook with Electric SQL in React\nDESCRIPTION: This snippet shows how to fetch data using the useShape hook from Electric SQL's React library. It demonstrates fetching data from a specific table and rendering it in a component.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/src/partials/home-cta.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShape } from '@electric-sql/react'\n\nconst Component = () => {\n  const { data } = useShape({\n    url: `${BASE_URL}/v1/shape`,\n    params: {\n      table: `items`\n    }\n  })\n\n  return (\n    <pre>{ JSON.stringify(data) }<pre>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Data with Electric Elixir Client\nDESCRIPTION: Demonstrates how to initialize the Electric client and create a stream for a table with filtering conditions. The example shows setting up the client, creating a filtered stream, and processing stream data using Stream.each.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/elixir.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nMix.install([:electric_client])\n\n{:ok, client} = Electric.Client.new(base_url: \"http://localhost:3000\")\n\nstream = Electric.Client.stream(client, \"my_table\", where: \"something = true\")\n\nstream\n|> Stream.each(&IO.inspect/1)\n|> Stream.run()\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with Electric SQL Data Fetching in TypeScript\nDESCRIPTION: This TypeScript React component uses the 'useShape' hook to fetch issues data for a specific project. It demonstrates how to integrate Electric SQL data querying in a React component.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/index.md#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Component({ project }) {\n  const { data } = useShape({\n    params: {\n      table: 'issues',\n      where: `project_id = ${project.id}`\n    }\n  })\n\n  return <List issues=\"data\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Synchronization\nDESCRIPTION: Code showing how to implement bidirectional sync between local and server databases for issues and comments.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { synced } = await client.db.issue.sync({\n include: {\n  comment: true,\n },\n})\nawait synced\n```\n\n----------------------------------------\n\nTITLE: Querying Local Database with ElectricSQL in React\nDESCRIPTION: This code snippet demonstrates how to use the useElectricQuery hook from ElectricSQL to query a local database in a React component. The query selects values from the 'items' table and renders them in a list, with the results automatically kept in sync across all users.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2022-12-16-evolution-state-transfer.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst ExampleComponent = () => {\n  const { results } = useElectricQuery('SELECT value FROM items', [])\n\n  return (\n    <View>\n      {results.map((item, index) => (\n        <Text key={ index } style={styles.item}>\n          Item: { item.value }\n        </Text>\n      ))}\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Data with useShape in React\nDESCRIPTION: Example showing how to include additional PostgreSQL-specific parameters to filter data with the useShape hook.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyFilteredComponent = () => {\n  const { isLoading, data } = useShape<{id: number, title: string}>({{\n    url: `http://localhost:3000/v1/shape`,\n    params: {\n      table: 'items',\n      where: 'status = \\'active\\'',\n      columns: ['id', 'title']\n    }\n  }})\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Data Using ElectricSQL's Shape-based System\nDESCRIPTION: Example of ElectricSQL's Shape-based approach to dynamic partial replication. The code demonstrates how to selectively sync projects owned by a specific user along with related issues, comments, and authors.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst shape = await db.projects.sync({\n  where: {\n    owner_id: user_id\n  },\n  include: {\n    issues: {\n      include: {\n        comments: {\n          include: {\n            author: true\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Proxy Authentication Route Handler\nDESCRIPTION: Server-side implementation of a proxy authentication route handler that validates user credentials and forwards authorized requests to Electric. Includes logic for handling authentication, authorization, and request forwarding.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/auth.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function GET(\n  request: Request,\n) {\n  const url = new URL(request.url)\n\n  // Construct the upstream URL\n  const originUrl = new URL(`http://localhost:3000/v1/shape`)\n\n  // Copy over the relevant query params that the Electric client adds\n  // so that we return the right part of the Shape log.\n  url.searchParams.forEach((value, key) => {\n    if ([`live`, `table`, `handle`, `offset`, `cursor`].includes(key)) {\n      originUrl.searchParams.set(key, value)\n    }\n  })\n\n  //\n  // Authentication and authorization\n  //\n\n  const user = await loadUser(request.headers.get(`authorization`))\n\n  // If the user isn't set, return 401\n  if (!user) {\n    return new Response(`user not found`, { status: 401 })\n  }\n\n  // Only query data the user has access to unless they're an admin.\n  if (!user.roles.includes(`admin`)) {\n    originUrl.searchParams.set(`where`, `\\\"org_id\\\" = ${user.org_id}`)\n  }\n\n  // When proxying long-polling requests, content-encoding &\n  // content-length are added erroneously (saying the body is\n  // gzipped when it's not) so we'll just remove them to avoid\n  // content decoding errors in the browser.\n  //\n  // Similar-ish problem to https://github.com/wintercg/fetch/issues/23\n  let resp = await fetch(originUrl.toString())\n  if (resp.headers.get(`content-encoding`)) {\n    const headers = new Headers(resp.headers)\n    headers.delete(`content-encoding`)\n    headers.delete(`content-length`)\n    resp = new Response(resp.body, {\n      status: resp.status,\n      statusText: resp.statusText,\n      headers,\n    })\n  }\n  return resp\n}\n```\n\n----------------------------------------\n\nTITLE: Database Sync Implementation\nDESCRIPTION: TypeScript code implementing the synchronization logic between local and remote databases, including change tracking and rollback handling.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/writes.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class ChangeLogSynchronizer {\n  private db: Database\n  private api: Api\n\n  constructor(db: Database, api: Api) {\n    this.db = db\n    this.api = api\n  }\n\n  async sync() {\n    // Sync implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveView Sync Streams for Real-time Updates\nDESCRIPTION: Shows how to use Phoenix.Sync.LiveView.sync_stream/4 to keep a LiveView automatically updated with database state. Includes the mount function and event handler for sync updates.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyWeb.MyLive do\n  use Phoenix.LiveView\n  import Phoenix.Sync.LiveView\n\n  def mount(_params, _session, socket) do\n    {:ok, sync_stream(socket, :todos, Todos.Todo)}\n  end\n\n  def handle_info({:sync, event}, socket) do\n    {:noreply, sync_stream_update(socket, event)}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Error Handling in ShapeStream\nDESCRIPTION: Demonstrates comprehensive error handling approaches in ShapeStream using both the onError handler and subscription-specific error handling.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'issues'\n  },\n  onError: (error) => {\n    // Handle all stream errors here\n    if (error instanceof FetchError) {\n      console.error('HTTP error:', error.status, error.message)\n    } else {\n      console.error('Stream error:', error)\n    }\n  }\n})\n\nstream.subscribe(\n  (messages) => {\n    // Process messages\n  },\n  (error) => {\n    // Handle errors for this specific subscription\n    console.error('Subscription error:', error)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Integrating PGlite with ElectricSQL in Client Application\nDESCRIPTION: Code snippet showing how to import PGlite, create a database connection, and electrify it with ElectricSQL. This enables a Postgres database to run directly in the client with sync capabilities.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-05-14-electricsql-postgres-client-support.md#2025-04-14_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// Import the PGlite database client.\nimport { PGlite } from '@electric-sql/pglite'\n\n// Import the adapter to electrify PGlite from the ElectricSQL library.\nimport { electrify } from 'electric-sql/pglite'\n\n// Import your generated database schema.\nimport { schema } from './generated/client'\n\n// Create the PGlite database connection.\n// In the browser use a `idb://` prefixed path to store your \n// database in IndexedDB.\n// In Node use a path to a directory on the file system where \n// you would like the pgdata directory.\nconst conn = new PGlite('idb://electric.db', {\n  // You can optionally use the relaxed durability mode to \n  // improve responsiveness.\n  // This schedules a flush to indexedDB for after a query has\n  // returned.\n  relaxedDurability: true,\n})\n\n// Instantiate your Electric client.\nconst electric = await electrify(conn, schema, {\n  url: 'https://example.com:5133'\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Token Streams with Where Clauses in TypeScript\nDESCRIPTION: This code shows how to create a filtered token stream using the ShapeStream class with a where clause that limits the data to a specific session. This enables partial replication for multi-user collaboration on AI sessions.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2025-04-09-building-ai-apps-on-sync.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst tokenStream = new ShapeStream({\n  params: {\n    table: \"tokens\",\n    // Just sync the tokens for a given session.\n    where: \"session_id = 1234\",\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Yjs Provider with Electric SQL in TypeScript\nDESCRIPTION: This code implements a Yjs Provider that syncs Yjs operations with Electric SQL. It establishes a bidirectional connection between Yjs documents and the Electric SQL backend, handling document updates, awareness states, and synchronization between clients.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/yjs.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as Y from \"yjs\"\nimport { DocProviderConfig, ElectricClient } from \"electric-sql/client\"\nimport { GenericEventCallback } from \"electric-sql/util\"\nimport { LiveSelect } from \"electric-sql/client/model\"\nimport { DatabaseAdapter } from \"electric-sql/drivers/websql/adapters\"\nimport { Subscription } from \"electric-sql/rx\"\n\n// An Electric provider for Yjs\n//\n// This is an example implementation of a Yjs Provider using Electric as the\n// backend. It's not currently fully feature complete but demonstrates the basic\n// principles.\nexport class ElectricProvider {\n  private name: string\n  private doc: Y.Doc\n  private db: any\n  private dbAdapter: DatabaseAdapter\n  private client: ElectricClient\n  private docProviderConfig: DocProviderConfig | undefined\n  private _synced: boolean\n  private _liveSelect: LiveSelect | undefined\n  private _subscription: Subscription | undefined\n  private _resyncRequired: boolean // indicates that a full doc update is required on next sync\n  private _destroyed: boolean\n  private _fetchingUpdates: boolean\n  private _insertingUpdates: boolean\n  private _observers: Map<string, GenericEventCallback<any>>\n\n  /**\n   * @param {string} name - A globally unique name for the document\n   * @param {Y.Doc} doc - The Yjs document\n   * @param {ElectricClient} client - An Electric client instance\n   * @param {object} [opts] - Configuration options for the provider\n   * @param {DocProviderConfig} [opts.docProviderConfig] - Configuration for the DocProvider\n   */\n  constructor(\n    name: string,\n    doc: Y.Doc,\n    client: ElectricClient,\n    opts: { docProviderConfig?: DocProviderConfig } = {}\n  ) {\n    this.name = name\n    this.doc = doc\n    this.client = client\n    this.db = client.db\n    this.dbAdapter = client.adapter\n    this.docProviderConfig = opts.docProviderConfig\n\n    this._synced = false\n    this._resyncRequired = true\n    this._destroyed = false\n    this._fetchingUpdates = false\n    this._insertingUpdates = false\n    this._observers = new Map()\n  }\n\n  /**\n   * A promise that resolves once the provider is synced.\n   *\n   * @return {Promise<any>}\n   */\n  get synced() {\n    if (this._synced) {\n      return Promise.resolve()\n    }\n\n    return new Promise<void>((resolve) => {\n      this._observers.set(\"synced\", () => {\n        this._observers.delete(\"synced\")\n        resolve()\n      })\n    })\n  }\n\n  /**\n   * Connect to the Electric backend and sync with the document.\n   */\n  connect() {\n    this.setupDbHooks()\n    this.fetchUpdates().then(() => this.setupDocHooks())\n  }\n\n  /**\n   * Disconnect from the Electric backend.\n   */\n  disconnect() {\n    this._subscription?.unsubscribe()\n    this._observers.clear()\n    this._destroyed = true\n  }\n\n  /**\n   * Destroy the provider and clean up resources.\n   */\n  destroy() {\n    this.disconnect()\n  }\n\n  /**\n   * Emit an event.\n   *\n   * @param {string} name - The name of the event\n   * @param {any} args - Arguments to pass to the event handlers\n   * @private\n   */\n  emit(name: string, args: any) {\n    const callback = this._observers.get(name)\n    if (callback) callback(args)\n  }\n\n  /**\n   * Set up the hooks to listen for changes in the database.\n   * @private\n   */\n  setupDbHooks() {\n    // Set up a live select query for the document\n    this._liveSelect = this.client.liveSelect(\"updates\")\n      .where(\"docName\", \"=\", this.name)\n      .orderBy(\"timestamp\", \"asc\")\n\n    // Subscribe to changes in the updates table\n    this._subscription = this._liveSelect.subscribe((updates) => {\n      // Skip if we're already fetching or destroyed\n      if (this._fetchingUpdates || this._destroyed) return\n\n      this.fetchUpdates()\n    })\n  }\n\n  /**\n   * Set up hooks to listen for changes in the Yjs document.\n   * @private\n   */\n  setupDocHooks() {\n    // Listen for changes to the document\n    this.doc.on(\"update\", (update: Uint8Array, origin: any) => {\n      // Skip if the update came from us\n      if (origin === this) return\n\n      // Apply the update to the database\n      this.insertUpdate(update)\n    })\n  }\n\n  /**\n   * Fetch updates from the database and apply them to the document.\n   * @private\n   */\n  async fetchUpdates() {\n    // Skip if we're already fetching or destroyed\n    if (this._fetchingUpdates || this._destroyed) return\n\n    try {\n      this._fetchingUpdates = true\n\n      // If resyncing is required, we apply the document as a whole\n      if (this._resyncRequired) {\n        // Get the document state if it exists\n        const docRow = await this.dbAdapter.query({\n          sql: \"SELECT * FROM documents WHERE name = ?\",\n          args: [this.name]\n        })\n\n        // If we have a document state, apply it to the doc\n        if (docRow.rows.length > 0) {\n          const docData = docRow.rows.item(0)\n          const docContent = new Uint8Array(JSON.parse(docData.content))\n          Y.applyUpdate(this.doc, docContent, this)\n        }\n\n        this._resyncRequired = false\n      }\n\n      // Fetch updates from the database\n      const updatesResult = await this.dbAdapter.query({\n        sql: \"SELECT * FROM updates WHERE docName = ? ORDER BY timestamp ASC\",\n        args: [this.name]\n      })\n\n      // Apply each update to the document\n      for (let i = 0; i < updatesResult.rows.length; i++) {\n        const update = updatesResult.rows.item(i)\n        const updateContent = new Uint8Array(JSON.parse(update.content))\n\n        Y.applyUpdate(this.doc, updateContent, this)\n      }\n\n      // Set synced state and emit event\n      const wasSynced = this._synced\n      this._synced = true\n\n      if (!wasSynced) {\n        this.emit(\"synced\", null)\n      }\n    } catch (e) {\n      console.error(\"Error fetching updates:\", e)\n    } finally {\n      this._fetchingUpdates = false\n    }\n  }\n\n  /**\n   * Insert an update into the database.\n   *\n   * @param {Uint8Array} update - The update to insert\n   * @private\n   */\n  async insertUpdate(update: Uint8Array) {\n    // Skip if we're already inserting or destroyed\n    if (this._insertingUpdates || this._destroyed) return\n\n    try {\n      this._insertingUpdates = true\n\n      // Store the current document state\n      const docContent = Y.encodeStateAsUpdate(this.doc)\n      await this.dbAdapter.run({\n        sql: `INSERT INTO documents (name, content) \n              VALUES (?, ?) \n              ON CONFLICT(name) DO UPDATE SET content = excluded.content`,\n        args: [this.name, JSON.stringify(Array.from(docContent))]\n      })\n\n      // Add the update to the updates table\n      await this.dbAdapter.run({\n        sql: \"INSERT INTO updates (docName, content, timestamp) VALUES (?, ?, ?)\",\n        args: [\n          this.name,\n          JSON.stringify(Array.from(update)),\n          new Date().getTime()\n        ]\n      })\n    } catch (e) {\n      console.error(\"Error inserting update:\", e)\n    } finally {\n      this._insertingUpdates = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Router for Sync Shapes in Phoenix\nDESCRIPTION: Demonstrates using Phoenix.Sync.Router.sync/2 macro to expose statically defined shapes in the Phoenix Router. This approach allows integrating with existing Plug middleware and authentication logic.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule MyWeb.Router do\n  use Phoenix.Router\n  import Phoenix.Sync.Router\n\n  pipeline :sync do\n    plug :my_auth\n  end\n\n  scope \"/shapes\" do\n    pipe_through :sync\n\n    sync \"/todos\", Todos.Todo\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ShapeStream Options Interface Definition\nDESCRIPTION: Comprehensive interface definition for ShapeStream construction options, including URL configuration, PostgreSQL parameters, authentication, error handling, and more.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Options for constructing a ShapeStream.\n */\nexport interface ShapeStreamOptions<T = never> {\n  /**\n   * The full URL to where the Shape is hosted. This can either be the Electric\n   * server directly or a proxy. E.g. for a local Electric instance, you might\n   * set `http://localhost:3000/v1/shape`\n   */\n  url: string\n\n  /**\n   * PostgreSQL-specific parameters for the shape.\n   * This includes table, where clause, columns, and replica settings.\n   */\n  params: {\n    /**\n     * The root table for the shape.\n     */\n    table: string\n\n    /**\n     * The where clauses for the shape.\n     */\n    where?: string\n\n    /**\n     * Positional where clause paramater values. These will be passed to the server\n     * and will substitute `$i` parameters in the where clause. \n     * \n     * It can be an array (note that positional arguments start at 1, the array will be mapped\n     * accordingly), or an object with keys matching the used positional parameters in the where clause.\n     * \n     * If where clause is `id = $1 or id = $2`, params must have keys `\"1\"` and `\"2\"`, or be an array with length 2.\n     */\n    params?: Record<`${number}`, string> | string[]\n\n    /**\n     * The columns to include in the shape.\n     * Must include primary keys, and can only include valid columns.\n     */\n    columns?: string[]\n\n    /**\n     * If `replica` is `default` (the default) then Electric will only send the\n     * changed columns in an update.\n     *\n     * If it's `full` Electric will send the entire row with both changed and\n     * unchanged values. `old_value` will also be present on update messages,\n     * containing the previous value for changed columns.\n     *\n     * Setting `replica` to `full` will obviously result in higher bandwidth\n     * usage and so is not recommended.\n     */\n    replica?: Replica\n\n    /**\n     * Additional request parameters to attach to the URL.\n     * These will be merged with Electric's standard parameters.\n     */\n    [key: string]: string | string[] | undefined\n  }\n\n  /**\n   * The \"offset\" on the shape log. This is typically not set as the ShapeStream\n   * will handle this automatically. A common scenario where you might pass an offset\n   * is if you're maintaining a local cache of the log. If you've gone offline\n   * and are re-starting a ShapeStream to catch-up to the latest state of the Shape,\n   * you'd pass in the last offset and shapeHandle you'd seen from the Electric server\n   * so it knows at what point in the shape to catch you up from.\n   */\n  offset?: Offset\n\n  /**\n   * Similar to `offset`, this isn't typically used unless you're maintaining\n   * a cache of the shape log.\n   */\n  shapeHandle?: string\n\n  /**\n   * HTTP headers to attach to requests made by the client.\n   * Can be used for adding authentication headers.\n   */\n  headers?: Record<string, string>\n\n  /**\n   * Automatically fetch updates to the Shape. If you just want to sync the current\n   * shape and stop, pass false.\n   */\n  subscribe?: boolean\n\n  /**\n   * Signal to abort the stream.\n   */\n  signal?: AbortSignal\n\n  /**\n   * Custom fetch client implementation.\n   */\n  fetchClient?: typeof fetch\n\n  /**\n   * Custom parser for handling specific Postgres data types.\n   */\n  parser?: Parser<T>\n\n  /**\n   * A function for handling errors.\n   * This is optional, when it is not provided any shapestream errors will be thrown.\n   * If the function returns an object containing parameters and/or headers\n   * the shapestream will apply those changes and try syncing again.\n   * If the function returns void the shapestream is stopped.\n   */\n  onError?: ShapeStreamErrorHandler\n\n  backoffOptions?: BackoffOptions\n}\n\ntype RetryOpts = {\n  params?: ParamsRecord\n  headers?: Record<string, string>\n}\n\ntype ShapeStreamErrorHandler = (\n  error: Error\n) => void | RetryOpts | Promise<void | RetryOpts>\n```\n\n----------------------------------------\n\nTITLE: UseShapeResult Interface Definition\nDESCRIPTION: TypeScript interface that defines the return value structure of the useShape hook, including data, shape instance, loading state, and error information.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface UseShapeResult<T extends Row<unknown> = Row> {\n  /**\n   * The array of rows that make up the materialised Shape.\n   * @type {T[]}\n   */\n  data: T[]\n\n  /**\n   * The Shape instance used by this useShape\n   * @type {Shape<T>}\n   */\n  shape: Shape<T>\n\n  /** True during initial fetch. False afterwise. */\n  isLoading: boolean\n\n  /** Unix time at which we last synced. Undefined when `isLoading` is true. */\n  lastSyncedAt?: number\n\n  /** Unix time at which we last synced. Undefined when `isLoading` is true. */\n  isError: boolean\n  error: Shape<T>[`error`]\n\n}\n```\n\n----------------------------------------\n\nTITLE: Syncing Electric SQL Data into Redis Cache\nDESCRIPTION: Demonstrates how to set up data synchronization from Electric SQL into Redis. The code establishes a Redis client, subscribes to Electric changes using DAL (Data Access Layer), and updates Redis hash structures when data changes occur. It handles both inserts/updates and deletes automatically.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/redis.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RedisClientType, createClient } from 'redis';\nimport { makeElectricClient } from 'electric-sql/node';\nimport { genUUID } from 'electric-sql/util';\nimport { config } from 'dotenv';\nimport { isNotNull } from 'electric-sql/util';\nimport type { Database } from './generated/client';\n\nconfig();\n\nconst migrationsTableName = '_migrations';\nconst updatedAtFieldName = 'updated_at';\nconst hashKeyPrefix = 'item';\n\nconst redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';\n\nconst main = async (): Promise<void> => {\n  // Setup Redis\n  const redisClient: RedisClientType = createClient({\n    url: redisUrl,\n  });\n  await redisClient.connect();\n\n  // Setup Electric\n  const conn = process.env.DATABASE_URL || 'postgresql://postgres:password@localhost:5432/electric';\n\n  const client = await makeElectricClient({\n    config: {\n      app: genUUID(),\n      migrations: {\n        migrationsTable: migrationsTableName,\n        migrationsDirs: [\n          { path: './migrations', namespace: 'default' },\n        ],\n      },\n      connection: {\n        type: 'postgresql',\n        host: conn.split('://')?.[1]?.split(':')?.[1]?.split('@')?.[1] || 'localhost',\n        port: parseInt(conn.split('://')?.[1]?.split(':')?.[2]?.split('/')?.[0] || '5432'),\n        database: conn.split('/')?.[3] || 'electric',\n        user: conn.split('://')?.[1]?.split(':')?.[1]?.split('@')?.[0] || 'postgres',\n        password: conn.split('://')?.[1]?.split(':')?.[2]?.split('@')?.[0] || 'password',\n      },\n      debug: true,\n    },\n  }) as Promise<Database>;\n\n  // Subscribe to changes\n  const notifier = client.notifier;\n  notifier.subscribeToShapes({\n    items: {\n      select: {\n        id: true,\n        title: true,\n        description: true,\n        created_at: true,\n        updated_at: true,\n      },\n    },\n  });\n\n  const dal = client._electric!;\n  dal.satellite.notifier.potentiallyChanged$.subscribe((shapes) => {\n    console.log('Shapes changed', shapes);\n\n    if (shapes.includes('items')) {\n      client.items.sync\n        .findMany({\n          where: {\n            // Only sync items that have been updated after the last sync\n            // Use updatedAtFieldName as we're polling for changes\n            [updatedAtFieldName]: { gte: new Date(Date.now() - 30 * 1000) },\n          },\n        })\n        .then(async (items) => {\n          console.log('Syncing items', items);\n\n          // Get the current keys in Redis that match our prefix\n          try {\n            const keys = await redisClient.keys(`${hashKeyPrefix}:*`);\n\n            // Process each key and get the ID (suffix)\n            const suffixes = new Set(\n              keys.map((key) => key.split(':')[1]).filter(isNotNull)\n            );\n\n            // Add or update items in Redis\n            for (const item of items) {\n              if (!item?.[updatedAtFieldName]) {\n                console.log(`Item ${item.id} has no ${updatedAtFieldName}`);\n                continue;\n              }\n\n              await redisClient.hSet(\n                `${hashKeyPrefix}:${item.id}`,\n                'id',\n                item.id,\n                'title',\n                item.title,\n                'description',\n                item.description ? item.description : '',\n                'created_at',\n                item.created_at ? item.created_at.toISOString() : '',\n                'updated_at',\n                item?.[updatedAtFieldName].toISOString()\n              );\n\n              // Remove from the set of suffixes because it exists\n              suffixes.delete(item.id);\n            }\n\n            // Remove any items in Redis that no longer exist (weren't returned in our query)\n            for (const suffix of suffixes) {\n              await redisClient.del(`${hashKeyPrefix}:${suffix}`);\n            }\n\n            console.log(`Synced ${items.length} items`);\n          } catch (e) {\n            console.error('Error syncing items', e);\n          }\n        });\n    }\n  });\n\n  // Keep the process running\n  process.stdin.resume();\n};\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Shape Data Structure Updates in TypeScript\nDESCRIPTION: Example showing how to apply shape log operations (insert, update, delete) to a Map data structure\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nswitch (message.headers.operation) {\n  case `insert`:\n    data.set(message.key, message.value)\n\n    break\n  case `update`:\n    data.set(message.key, {\n      ...data.get(message.key)!,\n      ...message.value,\n    })\n\n    break\n  case `delete`:\n    data.delete(message.key)\n\n    break\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Table Security with PostgreSQL Row-Level Security\nDESCRIPTION: SQL commands to create a table with row-level security (RLS) enabled and grant access to admin users. This demonstrates how to implement access control at the database level for local-first applications.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE items (\n  value text PRIMARY KEY NOT NULL\n);\nALTER TABLE items\n  ENABLE ROW LEVEL SECURITY;\n\nCREATE ROLE admin;\nGRANT ALL ON items TO admin;\n```\n\n----------------------------------------\n\nTITLE: Syncing Data from Electric into Cloudflare Workers for Dynamic Redirects\nDESCRIPTION: This code demonstrates how to use Electric to sync data into a Cloudflare Worker to handle dynamic redirects. It fetches routes data from Electric using ShapeStream, then uses that data to match the request path and redirect accordingly.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/cloudflare.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShapeStream, Shape } from '@electric-sql/client'\n\nexport default {\n  async fetch(request): Promise<Response> {\n    const ELECTRIC_URL = 'https://my-electric.example.com'\n\n    const stream = new ShapeStream({\n      url: `${ELECTRIC_URL}/v1/shape`,\n      params: {\n        table: 'routes'\n      }\n    })\n    const shape = new Shape(stream)\n    const routes = await shape.value\n\n    const url = new URL(request.url)\n    const match = routes.find(x => x.path == url.pathname)\n\n    if (!match) {\n      return new Response('Not Found', {status: 404})\n    }\n\n    return Response.redirect(match.redirect, 301)\n  },\n} satisfies ExportedHandler;\n```\n\n----------------------------------------\n\nTITLE: Electric Data Sync Implementation in React\nDESCRIPTION: Example showing how to implement Electric's data sync functionality using the useShape hook, replacing traditional fetch-based data fetching\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-12-10-electric-beta-release.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShape } from '@electric-sql/react'\n\nconst MyComponent = () => {\n  const { data: items } = useShape({\n    url: 'https://electric.example.com/v1/shapes',\n    params: {\n      table: 'items'\n    }\n  })\n\n  return (\n    <List items={ items } />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Ecto Queries with Phoenix.Sync Client in Elixir\nDESCRIPTION: Demonstrates using Phoenix.Sync.Client.stream/2 to convert Ecto.Query objects into Elixir Streams. This enables low-level usage of the sync functionality directly in Elixir code.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\nstream = Phoenix.Sync.Client.stream(Todos.Todo)\n\nstream =\n  Ecto.Query.from(t in Todos.Todo, where: t.completed == false)\n  |> Phoenix.Sync.Client.stream()\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Streaming with OpenAI and Postgres\nDESCRIPTION: Code showing how to stream tokens from OpenAI API into Postgres with interrupt functionality. Demonstrates basic token streaming and abort control flow.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2025-04-09-building-ai-apps-on-sync.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Stream tokens from the OpenAI API.\nconst stream = await openai.chat.completions.create({\n  model,\n  messages,\n  stream: true,\n})\n\n// Into Postgres\nfor await (const event of stream) {\n  pg.insert(\"INSERT INTO tokens value ($1)\", [event.message])\n}\n\n// Until interrupted\nfunction interrupt() {\n  stream.controller.abort()\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming with Ecto Queries in Electric\nDESCRIPTION: Shows how to use Ecto queries with Electric's stream function. The example demonstrates creating an Ecto query with a where clause and using it with Electric.Client.stream.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/elixir.md#2025-04-14_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\nimport Ecto.Query, only: [from: 2]\n\nquery = from(t in MyTable, where: t.something == true)\n\nstream = Electric.Client.stream(client, query)\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Handling\nDESCRIPTION: Examples of different approaches to handle errors in ShapeStream, including global error handling and subscription-specific error handling\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/typescript-client/README.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: `${BASE_URL}/v1/shape`,\n  params: {\n    table: `foo`\n  },\n  onError: (error) => {\n    // Handle all stream errors here\n    console.error('Stream error:', error)\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstream.subscribe(\n  (messages) => {\n    // Handle messages\n  },\n  (error) => {\n    // Handle errors for this specific subscription\n    console.error('Subscription error:', error)\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Sync with ElectricSQL React Component\nDESCRIPTION: Example showing how to use ElectricSQL's useShape hook to implement data synchronization in a React component. The code demonstrates the simplified approach of declaring data requirements versus traditional fetching.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/use-cases/data-sync.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShape } from '@electric-sql/react'\n\nconst Component = () => {\n  const { data } = useShape({\n    url: `${BASE_URL}/v1/shape`,\n    params: {\n      table: `items`\n    }\n  })\n\n  return (\n    <pre>{ JSON.stringify(data) }<pre>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating Node-postgres with ElectricSQL in Server Application\nDESCRIPTION: Code snippet demonstrating how to use the node-postgres client with ElectricSQL. This enables connecting to a Postgres database server and electrifying it for data synchronization.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-05-14-electricsql-postgres-client-support.md#2025-04-14_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n// Import the node-postgres database client.\nimport pg from 'pg'\n\n// Import the adapter to electrify node-postgres from the ElectricSQL library.\nimport { electrify } from 'electric-sql/node-postgres'\n\n// Import your generated database schema.\nimport { schema } from './generated/client'\n\n// Create the node-postgres database connection.\nconst conn = new pg.Client({\n  // Connection configuration, see:\n  // https://node-postgres.com/apis/client\n})\nawait conn.connect()\n\n// Instantiate your electric client.\nconst electric = await electrify(conn, schema, , {\n  url: 'https://example.com:5133'\n})\n```\n\n----------------------------------------\n\nTITLE: React Component with Shape Subscription\nDESCRIPTION: Example React component implementing shape subscription and data updates using useEffect hook\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react'\n\nconst MyComponent = ({ shapeDefinition }) => {\n  const [ data, setData ] = useState([])\n\n  useEffect(() => {\n    const stream = new ShapeStream(shapeDefinition)\n    const shape = new Shape(stream)\n\n    shape.subscribe(setData)\n\n    return () => {\n      shape.unsubscribe()\n    }\n  }, [shapeDefinition])\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Todo List Monitoring with Electric\nDESCRIPTION: Example showing how to monitor and react to todo list changes using Electric's ShapeStream and Shape APIs. Includes subscription and processing logic for todo items.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2025-04-09-building-ai-apps-on-sync.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst listItemsStream = new ShapeStream({\n  url: `${ELECTRIC_API_URL}/v1/shape`,\n  params: {\n    table: \"todo_items\",\n    where: `list_id = '${listId}'`,\n  },\n})\nconst listItemsShape = new Shape(listItemsStream)\n\nasync function processNextItem() {\n  const item = listItemsShape.currentRows.find((item) => !item.done)\n  if (item) {\n    // Perform the task using the agent\n  }\n}\n\nlet processing = false\nasync function processItems() {\n  if (processing) return\n  processing = true\n  while (listItemsShape.currentRows.some((item) => !item.done)) {\n    await processNextItem()\n  }\n  processing = false\n}\n\nlistItemsShape.subscribe(async () => {\n  await processItems()\n})\n```\n\n----------------------------------------\n\nTITLE: ElectricSQL's Live Query Implementation in React\nDESCRIPTION: Example of ElectricSQL's approach to live queries using the useLiveQuery hook. This keeps React components in sync with the database state, automatically updating when data changes occur.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst ExampleComponent = () => {\n  const { db } = useElectric()!\n  \n  const { results } = useLiveQuery(\n    db.projects.liveMany({\n      where: {\n        // ...\n      }\n    })\n  )\n\n  return (\n    /* render rows */\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Gatekeeper Authentication Client Implementation\nDESCRIPTION: Client-side implementation showing how to interact with a gatekeeper authentication system, including making authenticated shape requests and handling token generation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/auth.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Client } from 'electric-sql/client'\nimport { genUUID, initElectricClient } from './electric'\n\nconst getAuthToken = async (table: string, opts: Record<string, any>) => {\n  const resp = await fetch(`/gatekeeper/${table}`, {\n    method: 'POST',\n    headers: { 'content-type': 'application/json' },\n    body: JSON.stringify(opts)\n  })\n\n  if (!resp.ok) {\n    throw new Error(`Failed to get auth token: ${resp.status} ${resp.statusText}`)\n  }\n\n  const { token } = await resp.json()\n  return token\n}\n\nconst client = await Client.deployedInstance({\n  url: 'postgresql://postgres:proxy@localhost:65432/electric',\n})\n\nconst token = await getAuthToken('items', {\n  userId: genUUID(),\n  userRole: 'user',\n  where: \"active = true AND org_id = 'abc123'\"\n})\n\nconst electric = await initElectricClient(token)\n\nconst { results: items } = await electric.db.items\n  .sync({ include: { active: true, org_id: 'abc123' } })\n  .then(r => r.items.findMany())\n\nconsole.log('Items:', items)\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema for Projects and Issues in SQL\nDESCRIPTION: This SQL snippet defines the schema for two tables: 'projects' and 'issues'. It creates a primary key for each table and establishes a foreign key relationship between them.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/index.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE projects (\n  id SERIAL PRIMARY KEY,\n  title TEXT UNIQUE\n);\n\nCREATE TABLE issues (\n  id SERIAL PRIMARY KEY,\n  project_id INTEGER\n    REFERENCES projects(id)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Electric SQL in Phoenix LiveView for Todo List Sync\nDESCRIPTION: This code demonstrates a Phoenix LiveView module that uses Electric.Phoenix for automatic Postgres data synchronization. It implements a todo list with the ability to stream data changes from Postgres directly into the LiveView, handling mounting, rendering, and database operations for todos.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/phoenix-liveview.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule ElectricPhoenixExampleWeb.TodoLive.Index do\n  use ElectricPhoenixExampleWeb, :live_view\n\n  import Electric.Phoenix.LiveView\n\n  alias ElectricPhoenixExample.Todo\n  alias ElectricPhoenixExample.Repo\n\n  @impl true\n  def mount(_params, _session, socket) do\n    todos_stream =\n      electric_stream(socket, \"todos_stream\", Todo, fn query ->\n        from(t in query, order_by: [desc: :updated_at], select: t)\n      end)\n\n    {:ok, todos_stream}\n  end\n\n  @impl true\n  def handle_params(params, _url, socket) do\n    {:noreply, apply_action(socket, socket.assigns.live_action, params)}\n  end\n\n  defp apply_action(socket, :edit, %{\"id\" => id}) do\n    socket\n    |> assign(:page_title, \"Edit Todo\")\n    |> assign(:todo, Repo.get!(Todo, id))\n  end\n\n  defp apply_action(socket, :new, _params) do\n    socket\n    |> assign(:page_title, \"New Todo\")\n    |> assign(:todo, %Todo{})\n  end\n\n  defp apply_action(socket, :index, _params) do\n    socket\n    |> assign(:page_title, \"Todos\")\n    |> assign(:todo, nil)\n  end\n\n  @impl true\n  def handle_event(\"delete\", %{\"id\" => id}, socket) do\n    todo = Repo.get!(Todo, id)\n    {:ok, _} = Repo.delete(todo)\n\n    {:noreply, socket}\n  end\n\n  @impl true\n  def handle_event(\"toggle\", %{\"id\" => id}, socket) do\n    todo = Repo.get!(Todo, id)\n    {:ok, _} = Repo.update(Todo.changeset(todo, %{completed: !todo.completed}))\n\n    {:noreply, socket}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up Electric Provider in React App\nDESCRIPTION: React component implementation showing how to initialize Electric and provide database context to the application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ElectricProvider, initElectric } from './electric'\n\nconst App = () => {\n const [electric, setElectric] = useState<Electric>()\n\n useEffect(() => {\n  const init = async () => {\n   const client = await initElectric()\n   setElectric(client)\n   // ... snip ...\n  }\n  init()\n }, [])\n\n // ...\n\n return (\n  <ElectricProvider db={electric}>\n\t// ...\n  </ElectricProvider>\n )\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Sync Shapes in TypeScript Frontend\nDESCRIPTION: Demonstrates using the ElectricSQL TypeScript client to consume shapes exposed by the Phoenix backend. This example shows how to create a ShapeStream and subscribe to data changes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Shape, ShapeStream } from \"@electric-sql/client\";\n\nconst stream = new ShapeStream({\n  url: `/shapes/todos`,\n});\nconst shape = new Shape(stream);\n\n// The callback runs every time the data changes.\nshape.subscribe((data) => console.log(data));\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Streaming with ShapeStream in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the ShapeStream class from the Electric SQL client to create a token stream that can be subscribed to. This approach provides automatic resumability in case of connection drops or page refreshes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2025-04-09-building-ai-apps-on-sync.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShapeStream } from \"@electric-sql/client\"\n\nconst tokenStream = new ShapeStream({\n  params: {\n    table: \"tokens\",\n  },\n})\n\n// tokenStream.subscribe(tokens => ...)\n```\n\n----------------------------------------\n\nTITLE: Running Electric Docker Container with Environment Variables\nDESCRIPTION: Example showing how to run the Electric sync service Docker container with configuration options passed as environment variables, specifically setting the database URL and connection pool size.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/config.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n    -e \"DATABASE_URL=postgresql://...\" \\\n    -e \"ELECTRIC_DB_POOL_SIZE=10\" \\\n    -p 3000:3000 \\\n    electricsql/electric\n```\n\n----------------------------------------\n\nTITLE: Updating Issue Records\nDESCRIPTION: Example of updating existing issues in the database using Electric's update method.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait db.issue.update({\n data: {\n  title: title,\n  modified: new Date().toISOString(),\n },\n where: {\n  id: issue.id,\n },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Electric User with Replication Privileges\nDESCRIPTION: SQL commands to create a dedicated Electric user with replication privileges and database access permissions. Creates a new role with login capability and grants necessary database privileges.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/crunchy.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE electric WITH REPLICATION LOGIN PASSWORD '...';\nGRANT ALL PRIVILEGES ON DATABASE \"postgres\" to electric;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Compound WHERE Clause in SQL\nDESCRIPTION: Shows optimization of a compound WHERE clause with an equality check and another condition. The equality part is optimized first for filtering.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/shapes.md#2025-04-14_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nfield = constant AND another_condition\n```\n\n----------------------------------------\n\nTITLE: Next.js Page Component Implementation\nDESCRIPTION: Example of a Next.js page component demonstrating Electric integration for read-path synchronization\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/next.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n@../../examples/nextjs/app/page.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring Phoenix.Sync in HTTP Mode\nDESCRIPTION: Configuration example for using Phoenix.Sync in HTTP mode, where Electric runs as an external service. Shows how to set up dependencies, configuration with credentials, and application setup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\n# mix.exs\ndefp deps do\n  [\n    {:phoenix_sync, \"~> 0.3\"}\n  ]\nend\n\n# config/config.exs\nconfig :phoenix_sync,\n  env: config_env(),\n  mode: :http,\n  url: \"https://api.electric-sql.cloud\",\n  credentials: [\n    secret: \"...\",    # required\n    source_id: \"...\"  # optional, required for Electric Cloud\n  ]\n\n# application.ex\nchildren = [\n  MyApp.Repo,\n  # ...\n  {MyApp.Endpoint, phoenix_sync: Phoenix.Sync.plug_opts()}\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Render Blueprint for Electric Deployment\nDESCRIPTION: A Render Blueprint YAML configuration that defines infrastructure as code to deploy an Electric sync service and a web application. The blueprint creates two web services - one for the Electric sync service with persistent storage, and another for a static site application that connects to it.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/render.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - type: web\n    runtime: image\n    name: electric\n    image:\n      url: electricsql/electric:latest\n    disk:\n      name: storage\n      mountPath: /var/electric\n      sizeGB: 20\n    envVars:\n      - key: DATABASE_URL\n        sync: false\n      - key: ELECTRIC_STORAGE_DIR\n        value: \"/var/electric\"\n  - type: web\n    runtime: static\n    name: app\n    buildCommand: VITE_ELECTRIC_URL=\"https://${ELECTRIC_HOST}.onrender.com\" npm run build\n    staticPublishPath: ./dist\n    envVars:\n      - key: ELECTRIC_HOST\n        fromService:\n          name: electric\n          type: web\n          property: host\n```\n\n----------------------------------------\n\nTITLE: Custom Type Parsing in ShapeStream\nDESCRIPTION: Example showing how to implement custom parsing for PostgreSQL data types into JavaScript objects, specifically converting timestamp columns to Date objects.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Define row type\ntype CustomRow = {\n  id: number\n  title: string\n  created_at: Date  // We want this to be a Date object\n}\n\nconst stream = new ShapeStream<CustomRow>({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'posts'\n  },\n  parser: {\n    // Parse timestamp columns into JavaScript Date objects\n    timestamptz: (date: string) => new Date(date)\n  }\n})\n\nconst shape = new Shape(stream)\nshape.subscribe(data => {\n  console.log(data.created_at instanceof Date) // true\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Shape Stream Implementation\nDESCRIPTION: Example of using TypeScript client to create and subscribe to a shape stream with materialization.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/shapes.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShapeStream, Shape } from '@electric-sql/client'\n\nconst stream = new ShapeStream({\n  url: `http://localhost:3000/v1/shape`,\n  params: {\n    table: `foo`\n  }\n})\nconst shape = new Shape(stream)\n\n// Returns promise that resolves with the latest shape data once it's fully loaded\nawait shape.rows\n```\n\n----------------------------------------\n\nTITLE: Updating Data in Postgres for Real-time Sync\nDESCRIPTION: SQL command to update a row in the scores table, which will be automatically synced to the React application to demonstrate real-time capabilities.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE scores SET name = 'James' WHERE id = 2;\n```\n\n----------------------------------------\n\nTITLE: Initializing ElectricSQL with Conditional SQLite Driver for Ionic and Capacitor\nDESCRIPTION: This code demonstrates how to conditionally initialize either a wa-sqlite or Capacitor SQLite driver based on the runtime environment. It creates the ElectricSQL context for React, exports hooks, and defines the initialization function that checks if the app is running in a native platform using Capacitor.isNativePlatform().\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-11-02-using-electricsql-with-the-ionic-framework-and-capacitor.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/electric.ts\nimport { makeElectricContext } from 'electric-sql/react'\nimport { Capacitor } from '@capacitor/core'\n\n// The generated electric client:\nimport { Electric, schema } from './generated/client'\nexport type { Issue } from './generated/client'\n\nexport const { ElectricProvider, useElectric } = makeElectricContext<Electric>()\n\nexport const initElectric = async () => {\n  const electricUrl = import.meta.env.ELECTRIC_URL ?? 'ws://localhost:5133'\n  const config = {\n    auth: {\n      token: insecureAuthToken({ user_id: genUUID() }),\n    },\n    url: electricUrl,\n  }\n\n  // Conditionally initiate either the wa-sqlite, or capacitor electric\n  // depending on if we are in a native app or not.\n  return Capacitor.isNativePlatform()\n    ? await initCapacitorSQLite(dbName, config)\n    : await initWaSQLite(dbName, config)\n}\n\nasync function initWaSQLite(dbName: string, config: ElectricConfig) {\n  // Import and initiate an electrified wa-sqlite\n  const { ElectricDatabase, electrify } = await import('electric-sql/wa-sqlite')\n  const conn = await ElectricDatabase.init(dbName, distPath)\n  return await electrify(conn, schema, config)\n}\n\nasync function initCapacitorSQLite(dbName: string, config: ElectricConfig) {\n  // Import and initiate an electrified Capacitor SQLite\n  const { electrify } = await import('electric-sql/capacitor')\n  const { CapacitorSQLite, SQLiteConnection } = await import(\n    '@capacitor-community/sqlite'\n  )\n  const sqliteConnection = new SQLiteConnection(CapacitorSQLite)\n  const conn = await sqliteConnection.createConnection(dbName, false, '', 1, false,)\n  await conn.open()\n  return await electrify(conn, schema, config)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Issues\nDESCRIPTION: Example of creating new issues in the database using Electric's type-safe data access layer.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst date = new Date().toISOString()\ndb.issue.create({\n data: {\n  id: uuidv4(),\n  title: title,\n  username: 'testuser',\n  priority: priority,\n  status: status,\n  description: description,\n  modified: date,\n  created: date,\n  kanbanorder: kanbanorder,\n },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Shape Request with Authentication Headers in TypeScript\nDESCRIPTION: Example of setting up a shape request with authentication headers using the Electric TypeScript client. Shows how to add an Authorization bearer token to shape requests.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/auth.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst usersShape = (): ShapeStreamOptions => {\n  const user = loadCurrentUser()\n\n  return {\n    url: new URL(`/api/shapes/users`, window.location.origin).href,\n    headers: {\n      authorization: `Bearer ${user.token}`\n    }\n  }\n}\n\nexport default function ExampleComponent () {\n  const { data: users } = useShape(usersShape())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Phoenix.Sync in Embedded Mode\nDESCRIPTION: Configuration example for using Phoenix.Sync in embedded mode, where Electric is included as an application dependency. Configuration includes mix.exs dependencies, config file settings, and application startup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\n# mix.exs\ndefp deps do\n  [\n    {:electric, \">= 1.0.0-beta.20\"},\n    {:phoenix_sync, \"~> 0.3\"}\n  ]\nend\n\n# config/config.exs\nconfig :phoenix_sync,\n  env: config_env(),\n  mode: :embedded,\n  repo: MyApp.Repo\n\n# application.ex\nchildren = [\n  MyApp.Repo,\n  # ...\n  {MyApp.Endpoint, phoenix_sync: Phoenix.Sync.plug_opts()}\n]\n```\n\n----------------------------------------\n\nTITLE: Running Electric Docker Container with Custom PostgreSQL Connection\nDESCRIPTION: This Docker command runs the Electric sync service container, connecting it to an existing PostgreSQL database using the specified DATABASE_URL environment variable.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/installation.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n    -e \"DATABASE_URL=postgresql://...\" \\\n    -p 3000:3000 \\\n    -t \\\n    electricsql/electric:latest\n```\n\n----------------------------------------\n\nTITLE: Updating Data with ElectricSQL in TypeScript\nDESCRIPTION: This code snippet demonstrates how to perform a write operation using ElectricSQL. It updates a project's status to 'completed', showcasing automatic reactivity and replication.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-09-20-introducing-electricsql-v0.6.md#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nawait db.projects.update({\n  data: {\n    status: 'completed'\n  },\n  where: {\n    id: project.id\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up ElectricSQL with Docker Compose\nDESCRIPTION: Commands to download the docker-compose.yaml file and start Postgres and ElectricSQL services using Docker Compose.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O https://electric-sql.com/docker-compose.yaml\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication with Cloudflare Workers for Electric\nDESCRIPTION: This snippet demonstrates how to set up an authorization layer using Cloudflare Workers in front of Electric. It validates an auth token before proxying requests to Electric, returning a 403 Forbidden response for invalid tokens and a 405 Method Not Allowed for non-GET requests.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/cloudflare.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async fetch(request): Promise<Response> {\n    const ELECTRIC_URL = 'https://my-electric.example.com'\n\n    const headers = request.headers\n    const authHeader = request.headers.get('Authorization')\n    const isValid = (header) => { /* ... e.g.: verify JWT ... */ }\n    if (!isValid(authHeader)) {\n      return new Response('Forbidden', {status: 403})\n    }\n\n    if (request.method != `GET`) {\n      return new Response('Method Not Allowed', {status: 405})\n    }\n\n    const url = new URL(request.url)\n    const shapeUrl = `${ELECTRIC_URL}${url.pathname}${url.search}`\n    const clonedHeaders = new Headers(new Request(request).headers)\n\n    return await fetch(\n      shapeUrl, {\n        headers: clonedHeaders,\n        cf: { cacheEverything: true }\n      }\n    )\n  },\n} satisfies ExportedHandler;\n```\n\n----------------------------------------\n\nTITLE: Implementing Write Path Triggers in PGlite\nDESCRIPTION: SQL triggers used in the local PGlite database to maintain state for the write path and resolve conflicts during syncing and local write operations.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n-- Triggers are defined in db/migrations-client/01-create_tables.sql\n-- Example trigger logic (not actual code):\nCREATE TRIGGER example_trigger\nBEFORE INSERT OR UPDATE ON example_table\nFOR EACH ROW EXECUTE FUNCTION\nCASE\n  WHEN current_setting('electric.syncing') = 'true' THEN\n    -- Sync logic\n  ELSE\n    -- Local write logic\nEND;\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Configuration for Electric and PostgreSQL\nDESCRIPTION: This YAML configuration sets up Electric and PostgreSQL services using Docker Compose. It defines the necessary environment variables, ports, and volume mappings for both services.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/installation.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  postgres:\n    image: postgres:14\n    environment:\n      - POSTGRES_DB=electric\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - ./pgdata:/var/lib/postgresql/data\n    ports:\n      - 5432:5432\n\n  electric:\n    image: electricsql/electric\n    environment:\n      - DATABASE_URL=postgresql://postgres:password@postgres:5432/electric\n      - DATABASE_REQUIRE_SSL=false\n      - LOGICAL_PUBLISHER_HOST=electric\n      - PG_PROXY_PASSWORD=proxy_password\n      - AUTH_MODE=insecure\n    ports:\n      - 5133:5133\n      - 65432:65432\n```\n\n----------------------------------------\n\nTITLE: ChangeMessage Type Definition\nDESCRIPTION: Type definition for the ChangeMessage object emitted by ShapeStream, representing changes to the shape data including insert, update, and delete operations.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport type ChangeMessage<T extends Row<unknown> = Row> = {\n  key: string\n  value: T\n  old_value?: Partial<T> // Only provided for updates if `replica` is `full`\n  headers: Header & { operation: `insert` | `update` | `delete` }\n  offset: Offset\n}\n```\n\n----------------------------------------\n\nTITLE: Resource Attributes Configuration in Elixir for OpenTelemetry\nDESCRIPTION: Shows the structure of resource attributes that Electric adds to telemetry events, including service name, version, and instance ID. These attributes can be customized with environment variables.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/reference/telemetry.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n%{service: %{name: service_name, version: version}, instance: %{id: instance_id}}\n```\n\n----------------------------------------\n\nTITLE: Implementing ShapeStream for Real-time Updates\nDESCRIPTION: Example showing how to use ShapeStream class to receive row-by-row updates from the database. Includes basic setup and configuration with custom headers and parameters.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/typescript-client/README.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShapeStream } from '@electric-sql/client'\n\n// Passes subscribers rows as they're inserted, updated, or deleted\nconst stream = new ShapeStream({\n  url: `${BASE_URL}/v1/shape`,\n  params: {\n    table: `foo`\n  }\n})\n\n// You can also add custom headers and URL parameters\nconst streamWithParams = new ShapeStream({\n  url: `${BASE_URL}/v1/shape`,\n  headers: {\n    'Authorization': 'Bearer token'\n  },\n  params: {\n    table: `foo`,\n    'custom-param': 'value'\n  }\n})\n\nstream.subscribe(messages => {\n  // messages is an array with one or more row updates\n  // and the stream will wait for all subscribers to process them\n  // before proceeding\n})\n```\n\n----------------------------------------\n\nTITLE: Aborting Shape Subscriptions with AbortController\nDESCRIPTION: Example showing how to use AbortController to abort a shape's subscription to live updates when a component is unmounted.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nfunction MyComponent() {\n  const [controller, _] = useState(new AbortController())\n  \n  const { data } = useShape({{\n    ...\n    signal: controller.signal\n  }})\n\n  useEffect(() => {\n    return () {\n      // Live updates are now disabled.\n      controller.abort()\n    }\n  }, [])\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Traditional Data Fetching with React and REST API\nDESCRIPTION: Example showing conventional data fetching approach using React hooks and fetch API to retrieve data from a REST endpoint.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react'\n\nconst MyComponent = () => {\n  const [items, setItems] = useState([])\n\n  useEffect(() => {\n    const fetchItems = async () => {\n      const response = await fetch('https://example.com/v1/api/items')\n      const data = await response.json()\n\n      setItems(data)\n    }\n\n    fetchItems()\n  }, [])\n\n  return (\n    <List items=\"items\" />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Electric Data Sync in Expo React Native Component\nDESCRIPTION: Example React Native component using Electric's useShape hook to sync and display data from a remote Electric service. This component fetches data from an 'items' table and displays it as JSON text.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/expo.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text } from 'react-native'\nimport { useShape } from '@electric-sql/react'\n\n// Edit to match your setup.\nconst ELECTRIC_URL = 'https://my-electric-sync-service.example.com'\n\nexport default function HomeScreen() {\n  const { isLoading, data } = useShape({\n    url: `${ELECTRIC_URL}/v1/shape`,\n    params: {\n      table: 'items'\n    }\n  })\n\n  if (isLoading) {\n    return null\n  }\n\n  return (\n    <Text>{ JSON.stringify(data, null, 4) }</Text>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Electric to Supabase Postgres using Docker\nDESCRIPTION: This snippet demonstrates how to run Electric in a Docker container, connecting it to a Supabase Postgres database. It includes setting the database URL and enabling IPv6 support.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/supabase.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it \\\n    -e \"DATABASE_URL=postgresql://postgres:[YOUR_PASSWORD]@db.[YOUR_PROJECT_ID].supabase.co:5432/postgres\" \\\n    -e \"ELECTRIC_DATABASE_USE_IPV6=true\" \\\n    -p 3000:3000 \\\n    electricsql/electric:latest\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL-Specific Parameters Example\nDESCRIPTION: Example showing how to configure PostgreSQL-specific parameters within the ShapeStream options, including table, where clause, columns, and replica settings.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'users',\n    where: 'age > $1',\n    columns: ['id', 'name', 'email'],\n    params: [\"18\"],\n    replica: 'full'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Shape Usage with ShapeStream\nDESCRIPTION: Basic example of creating and using a Shape object with ShapeStream for data synchronization.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShapeStream, Shape } from '@electric-sql/client'\n\nconst stream = new ShapeStream({\n  url: `http://localhost:3000/v1/shape`,\n  params: {\n    table: `foo`\n  }\n})\nconst shape = new Shape(stream)\n\n// Returns promise that resolves with the latest shape data once it's fully loaded\nawait shape.rows\n\n// passes subscribers shape data when the shape updates\nshape.subscribe(({ rows }) => {\n  // rows is an array of the latest value of each row in a shape.\n})\n```\n\n----------------------------------------\n\nTITLE: Using getShape for Global Shape Instances\nDESCRIPTION: Example of using getShape to get or create a Shape from the global cache to avoid materializing multiple shapes for the same stream.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst itemsShape = getShape<Item>({{\n  url: `http://localhost:3000/v1/shape`,\n  params: {\n    table: 'items'\n  }\n}})\n```\n\n----------------------------------------\n\nTITLE: Implementing Owner-Based Access Control with Supabase RLS\nDESCRIPTION: SQL implementation of row-level security using Supabase's auth context, allowing only item owners to update their items. This pattern connects security rules to end-users rather than database connections.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE items (\n  value text PRIMARY KEY NOT NULL,\n  owner_id uuid references auth.users\n);\nALTER TABLE items\n  ENABLE ROW LEVEL SECURITY;\n\nCREATE POLICY \"Owners can update items\"\n  ON items FOR UPDATE USING (\n    auth.uid() = owner_id\n  );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Event Sourcing with PostgreSQL and Kafka\nDESCRIPTION: SQL commands to create a data pipeline that consumes PostgreSQL logical replication events, transforms them, and sends them to a Kafka topic. This demonstrates event sourcing patterns for local-first applications.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n-- Consume PG logical replication.\nCREATE SOURCE pg_items\n  FROM POSTGRES CONNECTION pg_connection (\n    PUBLICATION 'pub'\n  )\n  FOR TABLES ('items');\n\n-- Optionally aggregrate, subset or transform.\nCREATE MATERIALIZED VIEW items AS\n  SELECT owner_id, value\n  FROM pg_items;\n\n-- Put onto the Kafka topic.\nCREATE SINK avro_sink\n  FROM items\n  INTO KAFKA CONNECTION kafka_connection (\n    TOPIC 'topic'\n  )\n  FORMAT AVRO USING CONFLUENT SCHEMA\n  REGISTRY CONNECTION conn\n  ENVELOPE UPSERT;\n```\n\n----------------------------------------\n\nTITLE: Docker Command for Electric Service Connection Test\nDESCRIPTION: Shell command to test Electric's connection to PostgreSQL using Docker. The command runs the Electric container with database connection parameters specified through environment variables.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/gcp.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it -e DATABASE_URL=postgresql://electric:YOUR_PASSWORD@YOUR_OUTGOING_IP/postgres electricsql/electric:latest\n```\n\n----------------------------------------\n\nTITLE: Custom Parameters with ShapeStream\nDESCRIPTION: Example showing how to include custom parameters alongside PostgreSQL-specific ones when creating a ShapeStream.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'users',\n    customParam: 'value'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring IP Restriction with Caddy Server\nDESCRIPTION: Example of using Caddy's remote-ip matcher to restrict access to specific IP addresses in a reverse proxy setup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/security.md#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n@denied not remote_ip 100.200.30.40 100.200.30.41\nabort @denied\n```\n\n----------------------------------------\n\nTITLE: Key Syncing with ShapeStream\nDESCRIPTION: Example of using ShapeStream to sync encryption keys based on tenant IDs, demonstrating key management implementation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/security.md#2025-04-14_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { ShapeStream } from '@electric-sql/client'\n\nconst stream = new ShapeStream({\n  url: `${ELECTRIC_URL}/v1/shape`,\n  params: {\n    table: 'tenants',\n    columns: [\n      'keys'\n    ],\n    where: `id in ('${user.tenant_ids.join(`', '`)}')`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using getShapeStream for Global Shape Streams\nDESCRIPTION: Example of using getShapeStream to get or create a ShapeStream from the global cache to avoid consuming multiple streams for the same shape log.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst itemsStream = getShapeStream<Item>({{\n  url: `http://localhost:3000/v1/shape`,\n  params: {\n    table: 'items'\n  }\n}})\n```\n\n----------------------------------------\n\nTITLE: Initializing ShapeStream in TypeScript Client\nDESCRIPTION: This snippet shows how to initialize a ShapeStream object using the TypeScript client for Electric Cloud. It demonstrates how to set up the stream without including sensitive source credentials, which should be added by a proxy.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/product/cloud.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ShapeStream } from '@electric-sql/client'\n\nconst stream = new ShapeStream({\n  url: `https://your-api-or-proxy.example.com/v1/shape`,\n  params: {\n    table: `items`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Shape Client Unit Tests\nDESCRIPTION: Unit test implementation for the Shape client using Python's unittest framework. Tests the basic sync functionality using multiprocessing.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport multiprocessing\nimport unittest\n\nfrom client import Shape\n\nclass TestClient(unittest.TestCase):\n    def test_shape_sync(self):\n        parent_conn, child_conn = multiprocessing.Pipe()\n\n        shape = Shape(table='items')\n        shape.subscribe(child_conn.send)\n\n        p = multiprocessing.Process(target=shape.sync)\n        p.start()\n\n        data = parent_conn.recv()\n        self.assertEqual(type(data), dict)\n\n        p.kill()\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n----------------------------------------\n\nTITLE: Syncing Nested Data Shapes with ElectricSQL in TypeScript\nDESCRIPTION: This code demonstrates how to sync a complex, nested data shape including a project, its issues, comments, and comment authors. It showcases the power of ElectricSQL's shape-based sync.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-09-20-introducing-electricsql-v0.6.md#2025-04-14_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nawait db.projects.sync({\n  where: {\n    id: 'abcd'\n  },\n  include: {\n    issues: {\n      include: {\n        comments: {\n          include: {\n            author: true\n          }\n        }\n      }\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Shape Subscription via HTTP Curl Commands\nDESCRIPTION: Examples of using curl commands to subscribe to shapes on both the root table and specific partition.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/shapes.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i 'http://localhost:3000/v1/shape?table=measurement&offset=-1'\ncurl -i 'http://localhost:3000/v1/shape?table=measurement_y2025m03&offset=-1'\n```\n\n----------------------------------------\n\nTITLE: Starting Phoenix Server with Electric Sync\nDESCRIPTION: Commands to set up and run the Phoenix server with Electric synchronization. This includes starting an Electric instance, setting up dependencies, and launching the Phoenix server.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/phoenix-liveview/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Run `mix electric.start` to start an Electric instance and associated Postgres DB.\n- Run `mix setup` to install and setup dependencies\n- Start Phoenix endpoint with `mix phx.server` or inside IEx with `iex -S mix phx.server`\n```\n\n----------------------------------------\n\nTITLE: Configuring ShapeStream with Function-based Parameters in TypeScript\nDESCRIPTION: Demonstrates how to create a ShapeStream with dynamic function-based options for parameters and headers. Functions can be synchronous or asynchronous and are resolved in parallel when needed. This is useful for authentication tokens, user-specific parameters, and multi-tenant applications.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/typescript-client/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'items',\n    userId: () => getCurrentUserId(),\n    filter: async () => await getUserPreferences(),\n  },\n  headers: {\n    Authorization: async () => `Bearer ${await getAccessToken()}`,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Syncing Data into Supabase Edge Function using TypeScript\nDESCRIPTION: This TypeScript code creates a Deno server that fetches data from an Electric service and returns it as a JSON response. It demonstrates how to use Electric to sync data into a Supabase Edge Function.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/supabase.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Shape, ShapeStream } from 'npm:@electric-sql/client'\n\nDeno.serve(async (req) => {\n  const stream = new ShapeStream({\n    url: '[YOUR_ELECTRIC_URL]/v1/shape',\n    params: {\n      table: 'items'\n    }\n  })\n  const shape = new Shape(stream)\n  const items = [...await shape.value]\n\n  return new Response(\n    JSON.stringify(items),\n    { headers: { \"Content-Type\": \"application/json\" } },\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: HTTP Success Response with Synced Data\nDESCRIPTION: The HTTP response showing a 200 OK status and the data from the scores table as shape log entries. Each entry includes the key, value, and operation metadata.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\ntransfer-encoding: chunked\ndate: Wed, 09 Apr 2025 20:07:01 GMT\ncache-control: public, max-age=604800, s-maxage=3600, stale-while-revalidate=2629746\nx-request-id: GDS_PHZhjLuApVQAAAEB\nelectric-server: ElectricSQL/1.0.4\naccess-control-allow-origin: *\naccess-control-expose-headers: *\naccess-control-allow-methods: GET, HEAD, DELETE, OPTIONS\ncontent-type: application/json; charset=utf-8\netag: \"64351139-1744229222132:-1:0_0\"\nelectric-handle: 64351139-1744229222132\nelectric-schema: {\"id\":{\"type\":\"int4\",\"not_null\":true,\"pk_index\":0},\"name\":{\"type\":\"varchar\",\"max_length\":255},\"value\":{\"type\":\"float8\"}}\nelectric-offset: 0_0\n\n[{\"key\":\"\\\"public\\\".\\\"scores\\\"/\\\"1\\\"\",\"value\":{\"id\":\"1\",\"name\":\"Alice\",\"value\":\"3.14\"},\"headers\":{\"operation\":\"insert\",\"relation\":[\"public\",\"scores\"]}}\n,{\"key\":\"\\\"public\\\".\\\"scores\\\"/\\\"2\\\"\",\"value\":{\"id\":\"2\",\"name\":\"Bob\",\"value\":\"2.71\"},\"headers\":{\"operation\":\"insert\",\"relation\":[\"public\",\"scores\"]}}\n,{\"key\":\"\\\"public\\\".\\\"scores\\\"/\\\"3\\\"\",\"value\":{\"id\":\"3\",\"name\":\"Charlie\",\"value\":\"-1.618\"},\"headers\":{\"operation\":\"insert\",\"relation\":[\"public\",\"scores\"]}}\n,{\"key\":\"\\\"public\\\".\\\"scores\\\"/\\\"4\\\"\",\"value\":{\"id\":\"4\",\"name\":\"David\",\"value\":\"1.414\"},\"headers\":{\"operation\":\"insert\",\"relation\":[\"public\",\"scores\"]}}\n,{\"key\":\"\\\"public\\\".\\\"scores\\\"/\\\"5\\\"\",\"value\":{\"id\":\"5\",\"name\":\"Eve\",\"value\":\"0\"},\"headers\":{\"operation\":\"insert\",\"relation\":[\"public\",\"scores\"]}}\n]\n```\n\n----------------------------------------\n\nTITLE: Interacting with Electric HTTP API using curl in Bash\nDESCRIPTION: This bash script demonstrates how to use curl to connect to Electric's HTTP API, subscribe to changes, and perform queries. It includes functions for connection, subscription, and data retrieval.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/bash.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\n# Electric HTTP API endpoint\nELECTRIC_URL=\"http://localhost:5133\"\n\n# Function to connect to Electric\nconnect() {\n    curl -X POST \"$ELECTRIC_URL/connect\" \\\n         -H \"Content-Type: application/json\" \\\n         -d '{\"client_id\": \"bash-example\"}'\n}\n\n# Function to subscribe to changes\nsubscribe() {\n    curl -X POST \"$ELECTRIC_URL/subscribe\" \\\n         -H \"Content-Type: application/json\" \\\n         -d '{\"subscription_id\": \"sub1\", \"shapes\": [{\"tablename\": \"items\"}]}'\n}\n\n# Function to get data\nget_data() {\n    curl -X POST \"$ELECTRIC_URL/data\" \\\n         -H \"Content-Type: application/json\" \\\n         -d '{\"statements\": [{\"sql\": \"SELECT * FROM items\"}]}'\n}\n\n# Main script\necho \"Connecting to Electric...\"\nconnect\n\necho \"\\nSubscribing to changes...\"\nsubscribe\n\necho \"\\nGetting data...\"\nget_data\n\necho \"\\nDone!\"\n```\n\n----------------------------------------\n\nTITLE: Postgres Row Level Security Policy Example\nDESCRIPTION: Example of creating a Row Level Security policy in PostgreSQL for controlling access to todos table.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate policy \"Individuals can view their own todos.\"\non todos for select\nusing ( (select auth.uid()) = user_id );\n```\n\n----------------------------------------\n\nTITLE: Creating Enum Type and Electrified Table in SQL\nDESCRIPTION: SQL commands demonstrating the experimental enum type support in ElectricSQL, creating a colour enum and a paints table.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-01-24-electricsql-v0.9-released.md#2025-04-14_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TYPE colour AS ENUM (\n  'red', 'yellow', 'purple', 'cyan', 'green'\n);\n\nCREATE TABLE paints (\n  id uuid PRIMARY KEY,\n  colour colour NOT NULL\n);\n\nALTER TABLE paints ENABLE ELECTRIC;\n```\n\n----------------------------------------\n\nTITLE: Initializing ShapeStream and Shape with Electric URL in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a ShapeStream instance and a Shape object, connecting to an Electric service via HTTP. It specifies the URL for the Electric service and includes parameters for the table being queried.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/deployment.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: `https://your-electric-service.example.com/v1/shape`,\n  params: {\n    table: `foo`\n  }\n})\nconst shape = new Shape(stream)\n```\n\n----------------------------------------\n\nTITLE: SQL Optimized Where Clause Example\nDESCRIPTION: Example of an optimized where clause pattern that Electric can efficiently process. This pattern allows Electric to evaluate millions of where clauses simultaneously using internal indexing.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/reference/benchmarks.md#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nfield = constant\n```\n\n----------------------------------------\n\nTITLE: Configuring Phoenix.Sync with Local HTTP Services\nDESCRIPTION: Shows how to include Electric as an application dependency while configuring it to expose a local HTTP API consumed by Phoenix.Sync in HTTP mode. Useful for testing or development scenarios.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\n# mix.exs\ndefp deps do\n  [\n    {:electric, \">= 1.0.0-beta.20\"},\n    {:phoenix_sync, \"~> 0.3\"}\n  ]\nend\n\n# config/config.exs\nconfig :phoenix_sync,\n  env: config_env(),\n  mode: :http,\n  http: [\n    port: 3000,\n  ],\n  repo: MyApp.Repo,\n  url: \"http://localhost:3000\"\n\n# application.ex\nchildren = [\n  MyApp.Repo,\n  # ...\n  {MyApp.Endpoint, phoenix_sync: Phoenix.Sync.plug_opts()}\n]\n```\n\n----------------------------------------\n\nTITLE: Creating and Enabling Electric on a BLOB Storage Table in SQL\nDESCRIPTION: SQL definition for creating a table with BLOB columns and enabling it for Electric synchronization. This example shows how to use Electric with CozoDB that stores data in SQLite blobs.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-04-10-electricsql-v0.10-released.md#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE cozo (\n  k BLOB primary key,\n  v BLOB\n);\n\nALTER TABLE cozo\n  ENABLE ELECTRIC;\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Type-safe Client in TypeScript React\nDESCRIPTION: This snippet demonstrates how to import and use the auto-generated type-safe client in a TypeScript React application. It shows querying for projects based on owner_id.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-09-20-introducing-electricsql-v0.6.md#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { schema, Project } from './generated/client'\n\nconst { db } = await electrify(conn, schema, config)\nconst projects: Project[] = db.projects.findMany({\n  where: {\n    owner_id: auth.user_id\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Shape Class for Bulk Updates\nDESCRIPTION: Example demonstrating how to use the Shape class to handle full shape updates and access the latest data\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/typescript-client/README.md#2025-04-14_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShapeStream, Shape } from '@electric-sql/client'\n\nconst stream = new ShapeStream({\n  url: `${BASE_URL}/v1/shape`,\n  params: {\n    table: `foo`\n  }\n})\nconst shape = new Shape(stream)\n\n// Returns promise that resolves with the latest shape data once it's fully loaded\nawait shape.rows\n\n// passes subscribers shape data when the shape updates\nshape.subscribe(({ rows }) => {\n  // rows is an array of the latest value of each row in a shape.\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Supabase Function\nDESCRIPTION: These commands log in to Supabase, link a project, and deploy the function. The --no-verify-jwt flag is used to disable Supabase's built-in JWT validation, as the function implements its own validation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/edge/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsupabase login\nsupabase link --project-ref $YOUR_PROJECT_ID\nsupabase functions deploy --no-verify-jwt\n```\n\n----------------------------------------\n\nTITLE: Running Electric with OpenTelemetry Collector using Docker Compose\nDESCRIPTION: Shell command to run Electric with an OpenTelemetry Collector agent that forwards telemetry data to Honeycomb. Requires setting ELECTRIC_HNY_DATASET and ELECTRIC_HNY_API_KEY environment variables first.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/reference/telemetry.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker-compose-otel.yml up\n```\n\n----------------------------------------\n\nTITLE: Optimizing Compound WHERE Clause with Different Order in SQL\nDESCRIPTION: Illustrates that the order of clauses in a compound WHERE statement doesn't affect optimization. Electric SQL prioritizes optimized clauses.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/shapes.md#2025-04-14_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\na_non_optimized_condition AND field = constant\n```\n\n----------------------------------------\n\nTITLE: Migrating ShapeStream Configuration in TypeScript\nDESCRIPTION: Shows the migration pattern from the old ShapeStream configuration to the new one where PostgreSQL-specific options are moved to a params sub-key. This change was made to decouple protocol-level options from source-specific options for future multi-database support.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/typescript-client/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Before:\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  table: 'users',\n  where: 'id > 100',\n  columns: ['id', 'name'],\n  replica: 'full',\n})\n\n// After:\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'users',\n    where: 'id > 100',\n    columns: ['id', 'name'],\n    replica: 'full',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Caddy server as HTTP/2 proxy for ElectricSQL\nDESCRIPTION: This command starts a Caddy server on port 3001 that proxies requests to ElectricSQL on port 3000. It enables HTTP/2 with automatic compression to overcome browser HTTP/1.1 connection limitations during local development when working with multiple shapes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/troubleshooting.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncaddy run \\\n    --config - \\\n    --adapter caddyfile \\\n    <<EOF\nlocalhost:3001 {\n  reverse_proxy localhost:3000\n  encode {\n    gzip\n  }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining GraphQL Fragments for Component Data Requirements\nDESCRIPTION: This snippet demonstrates how GraphQL allows components to declare their exact data requirements using fragments. The example shows a query for a book page with a nested author component, illustrating GraphQL's declarative approach to data fetching.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2022-12-16-evolution-state-transfer.md#2025-04-14_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\nquery BookQuery($bookID: ID!) {\n  book(id: $bookID) {\n    title\n    author {\n      ...AuthorDetails_author\n    }\n  }\n}\n\nfragment AuthorDetails_author on Author {\n  name\n  photo {\n    url\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example End-to-End Encryption Implementation\nDESCRIPTION: Reference to an encryption example implementation in the demos section.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/security.md#2025-04-14_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<<< @../../examples/encryption/src/Example.tsx{tsx}\n```\n\n----------------------------------------\n\nTITLE: Evolu's React Hook for Live Queries\nDESCRIPTION: Example of using Evolu's useQuery React hook to implement a live query. This keeps the component's state automatically synchronized with any changes made to the underlying database.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nconst ExampleComponent = () => {\n  const { rows } = useQuery((db) => db.selectFrom(\"items\")\n\n  return (\n    /* render rows */\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Projects by ID or Search Term in SQL\nDESCRIPTION: Examples of SQL queries to retrieve project data either by a specific ID or by searching for project names that match a pattern. These queries represent typical cloud-first system approaches where the full dataset is available on the server.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- Query by id.\nSELECT * FROM projects\n  WHERE id = $1\n\n-- Query by search term.\nSELECT * FROM projects\n  WHERE name LIKE $1\n```\n\n----------------------------------------\n\nTITLE: Fetching Data with ElectricSQL HTTP API\nDESCRIPTION: Using curl to request all rows from the scores table through Electric's HTTP API. The offset=-1 parameter indicates we want the entire shape as we don't have any cached data.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i 'http://localhost:3000/v1/shape?table=scores&offset=-1'\n```\n\n----------------------------------------\n\nTITLE: Shape HTTP Synchronization Requests\nDESCRIPTION: Examples of HTTP requests for initial sync and live updates using curl.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/shapes.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i 'http://localhost:3000/v1/shape?table=foo&offset=-1'\ncurl -i 'http://localhost:3000/v1/shape?table=foo&live=true&offset=...&handle=...'\n```\n\n----------------------------------------\n\nTITLE: Running Supabase Functions Locally\nDESCRIPTION: These commands start the Supabase local environment and run the functions server. This allows testing the edge function locally before deployment.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/edge/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsupabase start\nsupabase functions server\n```\n\n----------------------------------------\n\nTITLE: Implementing Proxy Auth in Next.js Route Handler\nDESCRIPTION: This snippet demonstrates how to implement a proxy authentication mechanism using a Next.js Route Handler. It shows how to add source ID and secret to the origin request securely, preventing exposure of sensitive credentials to the client.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/product/cloud.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport async function GET(req: Request) {\n  const proxyUrl = new URL(req.url)\n\n  // ... validate and authorize the request ...\n\n  // Construct the origin URL.\n  const originUrl = new URL(`/v1/shape`, `https://api.electric-sql.cloud`)\n  proxyUrl.searchParams.forEach((value, key) => {\n    originUrl.searchParams.set(key, value)\n  })\n\n  // Add the source params.\n  originUrl.searchParams.set(`source_id`, process.env.SOURCE_ID)\n  originUrl.searchParams.set(`source_secret`, process.env.SOURCE_SECRET)\n\n  // Proxy the authorised request on to the Electric Cloud.\n  return fetch(originUrl, {headers: req.headers})\n}\n```\n\n----------------------------------------\n\nTITLE: GraphQL Data Shape After Fragment Aggregation\nDESCRIPTION: This snippet shows the resulting GraphQL query after Relay has aggregated and populated the fragments. It demonstrates how GraphQL optimizes data transfer by fetching only the specific fields needed by the components.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2022-12-16-evolution-state-transfer.md#2025-04-14_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\n{\n  book {\n    title\n    author {\n      name\n      photo {\n        url\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node-postgres Package for Server Integration\nDESCRIPTION: Command to install the node-postgres dependency for using ElectricSQL with Postgres in a Node environment. This enables connecting to Postgres databases on the server side.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-05-14-electricsql-postgres-client-support.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install pg\n```\n\n----------------------------------------\n\nTITLE: Altering Postgres Publication for Logical Replication\nDESCRIPTION: SQL command to modify a Postgres publication by adding a new table to be included in logical replication. This demonstrates how some systems require explicit rule changes to update what gets synced to client devices.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nALTER PUBLICATION example\n  ADD TABLE users;\n```\n\n----------------------------------------\n\nTITLE: Querying the Encrypted Data in PostgreSQL\nDESCRIPTION: Example of connecting to the PostgreSQL database and querying the encrypted items table to view the ciphertext data.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/encryption/README.md#2025-04-14_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ psql \"postgresql://postgres:password@localhost:54321/electric\"\npsql (16.4)\nType \"help\" for help.\n\nelectric=# select * from items;\n                  id                  |          ciphertext          |        iv\n--------------------------------------+------------------------------+------------------\n 491b2654-5714-48bb-a206-59f87a2dc33c | vDwv3IX5AGXJVi2jNJJDPE25MwiS | 0gwdqHvqiJ8lJqaS\n(1 row)\n```\n\n----------------------------------------\n\nTITLE: Live Mode Sync Request using cURL\nDESCRIPTION: Example of making a live mode request to receive real-time updates using long-polling.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/http.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i 'http://localhost:3000/v1/shape?table=foo&live=true&handle=3833821-1721812114261&offset=0_0'\n```\n\n----------------------------------------\n\nTITLE: Launching Electric Service on Fly.io\nDESCRIPTION: Shell commands for deploying the Electric service using flyctl CLI tool and verifying the deployment through a health check endpoint.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/fly.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nflyctl launch --copy-config --ha=false\n```\n\nLANGUAGE: console\nCODE:\n```\n$ curl https://YOUR_UNIQUE_APP_NAME.fly.dev/v1/health\n{\"status\":\"active\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Partitioned Tables in PostgreSQL\nDESCRIPTION: Example of creating a partitioned table 'measurement' with two partitions based on date ranges using declarative partitioning.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/shapes.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE measurement (\n    city_id         int not null,\n    logdate         date not null,\n    peaktemp        int,\n    unitsales       int\n) PARTITION BY RANGE (logdate);\n\nCREATE TABLE measurement_y2025m02 PARTITION OF measurement\n    FOR VALUES FROM ('2025-02-01') TO ('2025-03-01');\n\nCREATE TABLE measurement_y2025m03 PARTITION OF measurement\n    FOR VALUES FROM ('2025-03-01') TO ('2025-04-01');\n```\n\n----------------------------------------\n\nTITLE: Installing Electric SQL TypeScript Client\nDESCRIPTION: Command to install the Electric SQL TypeScript client library from NPM.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @electric-sql/client\n```\n\n----------------------------------------\n\nTITLE: Implementing Electric SQL in Next.js Page Component\nDESCRIPTION: Main page component implementation showing Electric SQL integration with Next.js. Demonstrates client-side data synchronization setup and basic UI rendering with TypeScript and React.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/nextjs.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useEffect, useState } from 'react';\nimport { ElectricDatabase, electrify } from 'electric-sql/wa-sqlite';\nimport { genUUID } from 'electric-sql/util';\nimport { Electric, Items, schema } from './.electric/client';\nimport { ItemShape } from './shapes';\n\nexport default function Home() {\n  const [electric, setElectric] = useState<Electric>();\n  const [items, setItems] = useState<Items[]>([]);\n  const [input, setInput] = useState<string>('');\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const init = async () => {\n      const config = {\n        app: 'my-app',\n        env: 'local',\n        token: process.env.NEXT_PUBLIC_ELECTRIC_TOKEN,\n      };\n      const conn = await electrify(config);\n      const electric = await conn.db(schema);\n\n      if (!isMounted) {\n        return;\n      }\n\n      setElectric(electric);\n\n      const { results } = await electric.db.raw({\n        sql: `SELECT name FROM items ORDER BY position ASC`,\n      });\n\n      setItems(results);\n\n      const subscription = await electric.items.sync();\n\n      const { results: liveResults } = await electric.db.raw({\n        sql: `SELECT name FROM items ORDER BY position ASC`,\n      });\n\n      subscription.on('update', ({ results: updatedResults }) => {\n        setItems(updatedResults);\n      });\n\n      setItems(liveResults);\n    };\n\n    init();\n\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  const addItem = async () => {\n    if (!electric || !input) return;\n\n    const item: ItemShape = {\n      id: genUUID(),\n      name: input,\n      position: items.length,\n    };\n\n    await electric.items.create(item);\n\n    setInput('');\n  };\n\n  return (\n    <main className=\"flex min-h-screen flex-col items-center justify-between p-24\">\n      <div className=\"z-10 w-full max-w-5xl items-center justify-between font-mono text-sm\">\n        <h1 className=\"text-4xl font-bold mb-8\">Items</h1>\n\n        <div className=\"mb-8 flex gap-4\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyUp={(e) => e.key === 'Enter' && addItem()}\n            className=\"flex-1 rounded border p-2 text-gray-900\"\n            placeholder=\"Add an item\"\n          />\n\n          <button\n            onClick={addItem}\n            className=\"rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700\"\n          >\n            Add\n          </button>\n        </div>\n\n        <ul className=\"space-y-4\">\n          {items.map((item: Items, index: number) => (\n            <li key={index} className=\"rounded bg-gray-800 p-4\">\n              {item.name}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </main>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Admin Authorization in Elixir with Plug\nDESCRIPTION: An Elixir Plug middleware component that enforces admin-only access by checking user permissions before allowing request processing to continue. This represents a traditional cloud-first authorization approach where validation happens on the server.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RequireAdminPlug do\n  import Plug.Conn\n\n  def init(opts), do: opts\n\n  def call(conn, _opts) do\n    user = conn.assigns.current_user\n\n    case Accounts.is_admin?(user) do\n      true ->\n        conn\n\n      false ->\n        conn\n        |> Conn.put_status(403)\n        |> Conn.halt()\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Must-refetch Control Message Format\nDESCRIPTION: JSON structure showing the control message format when client must resync from scratch.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/http.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"headers\": {\"control\": \"must-refetch\"}}\n```\n\n----------------------------------------\n\nTITLE: Initial Shape Sync Request using cURL\nDESCRIPTION: Example of making an initial sync request to fetch data for a shape using the HTTP API endpoint.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/http.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i 'http://localhost:3000/v1/shape?table=foo&offset=-1'\n```\n\n----------------------------------------\n\nTITLE: Launching Docker Compose for Electric SQL on Digital Ocean\nDESCRIPTION: Command to launch the Electric SQL service using Docker Compose on a remote Digital Ocean Droplet, showing the expected output including image pulling and container startup logs.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/digital-ocean.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker compose up\n[+] Running 8/8\n ✔ electric 7 layers [⣿⣿⣿⣿⣿⣿⣿]      0B/0B      Pulled      8.2s\n   ✔ efc2b5ad9eec Pull complete                             3.4s\n   ✔ 2cb0d575dcef Pull complete                             4.5s\n   ✔ c1b251d76665 Pull complete                             4.6s\n   ✔ c82981779fd9 Pull complete                             4.7s\n   ✔ 65b429e477c5 Pull complete                             4.8s\n   ✔ 1fd7ee9efb04 Pull complete                             6.0s\n   ✔ 87053f06541e Pull complete                             6.1s\n[+] Running 2/2\n ✔ Network electric-sync-droplet_default       Created      0.2s\n ✔ Container electric-sync-droplet-electric-1  Created      0.2s\nAttaching to electric-sync-droplet-electric-1\nelectric-sync-droplet-electric-1  | =INFO REPORT==== 23-Oct-2024::13:16:01.777082 ===\nelectric-sync-droplet-electric-1  | Loading 140 CA(s) from otp store\nelectric-sync-droplet-electric-1  | 13:16:01.832 [info] Running Electric.Plug.Router with Bandit 1.5.5 at 0.0.0.0:3000 (http)\nelectric-sync-droplet-electric-1  | 13:16:01.935 [info] Acquiring lock from postgres with name electric_slot_default\nelectric-sync-droplet-electric-1  | 13:16:01.937 [info] Lock acquired from postgres with name electric_slot_default\nelectric-sync-droplet-electric-1  | 13:16:02.006 [info] Postgres server version = 160004, system identifier = 7428958789530034185, timeline_id = 1\nelectric-sync-droplet-electric-1  | 13:16:02.145 [info] No previous timeline detected.\nelectric-sync-droplet-electric-1  | 13:16:02.146 [info] Connected to Postgres  and timeline\nelectric-sync-droplet-electric-1  | 13:16:02.147 [info] Starting shape replication pipeline\nelectric-sync-droplet-electric-1  | 13:16:02.150 [info] Starting replication from postgres\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Electric SQL Deployment\nDESCRIPTION: Docker Compose YAML configuration for deploying the Electric SQL sync service on a Digital Ocean Droplet. This configuration specifies the Docker image, database connection, port mapping, and restart policy.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/digital-ocean.md#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  electric:\n    image: electricsql/electric:latest\n    environment:\n      DATABASE_URL: \"postgresql://...\"\n    ports:\n      - 80:3000\n    restart: always\n```\n\n----------------------------------------\n\nTITLE: Initializing ShapeStream with Dynamic Parameters in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a ShapeStream instance with dynamic, function-based options for params and headers. It supports both synchronous and asynchronous functions, which are resolved in parallel when needed.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: \"http://localhost:3000/v1/shape\",\n  params: {\n    table: \"items\",\n    userId: () => getCurrentUserId(),\n    filter: async () => await getUserPreferences(),\n  },\n  headers: {\n    Authorization: async () => `Bearer ${await getAccessToken()}`,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Database\nDESCRIPTION: Command to connect to the Postgres database using the psql client with connection details for the Electric setup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npsql \"postgresql://postgres:password@localhost:54321/electric\"\n```\n\n----------------------------------------\n\nTITLE: Redis Commands for Data Inspection\nDESCRIPTION: Various Redis commands to view keys and monitor updates in real-time.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nredis> HKEYS items\n\nredis> KGETALL items\n\nMONITOR\n```\n\n----------------------------------------\n\nTITLE: Express API Server Implementation\nDESCRIPTION: Implementation of a REST API server using Express.js for handling todo operations.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n@../../examples/write-patterns/shared/backend/api.js\n```\n\n----------------------------------------\n\nTITLE: Setting Up Linearlite Project in ElectricSQL Monorepo\nDESCRIPTION: Instructions for installing dependencies, building workspace packages, and starting the backend services for the Linearlite example project within the ElectricSQL monorepo.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\npnpm install\npnpm run -r build\ncd examples/linearlite\npnpm backend:up\npnpm run write-server\npnpm dev\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript Migration for ShapeStream API Changes\nDESCRIPTION: Shows before and after code examples for migrating ShapeStream API usage after moving non-protocol options to params sub-key. This change was introduced in version 0.6.0.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/react-hooks/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  table: 'users',\n  where: 'id > 100',\n  columns: ['id', 'name'],\n  replica: 'full',\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'users',\n    where: 'id > 100',\n    columns: ['id', 'name'],\n    replica: 'full',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a React App with Vite\nDESCRIPTION: Command to create a new React application with TypeScript template using Vite.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm create --yes vite@latest react-app -- --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data in PostgreSQL\nDESCRIPTION: SQL command to insert test data into the items table.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\ninsert into items (id, title) values (gen_random_uuid(), 'foo');\n```\n\n----------------------------------------\n\nTITLE: Implementing Firebase Security Rules for Conditional Access\nDESCRIPTION: Firebase security rules example that allows read and write access to items if the user is signed in or the item is marked as public. Shows how to create custom rule functions and access request context.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    function signedInOrPublic() {\n      return request.auth.uid != null || resource.data.visibility == 'public';\n    }\n\n    match /items/{item} {\n      allow read, write: if signedInOrPublic();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Test Data with SQL\nDESCRIPTION: SQL command to insert a new item with a randomly generated UUID into the items table, which will synchronize in real-time to the React application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/README.md#2025-04-14_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ninsert into items (id) values (gen_random_uuid());\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services with Docker Compose\nDESCRIPTION: Command to start the example backend services using Docker Compose, which will stop and remove any existing containers to ensure a clean database start.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Environment-specific Configuration for Phoenix.Sync\nDESCRIPTION: Demonstrates configuring Phoenix.Sync differently across development, test, and production environments. Shows how to use embedded mode in dev, local HTTP in test, and external HTTP in production.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_9\n\nLANGUAGE: elixir\nCODE:\n```\n# mix.exs\ndefp deps do\n  [\n    {:electric, \"~> 1.0.0-beta.20\", only: [:dev, :test]},\n    {:phoenix_sync, \"~> 0.3\"}\n  ]\nend\n\n# config/dev.exs\nconfig :phoenix_sync,\n  env: config_env(),\n  mode: :embedded,\n  repo: MyApp.Repo\n\n# config/test.esx\nconfig :phoenix_sync,\n  env: config_env(),\n  mode: :http,\n  http: [\n    port: 3000,\n  ],\n  repo: MyApp.Repo,\n  url: \"http://localhost:3000\"\n\n# config/prod.exs\nconfig :phoenix_sync,\n  mode: :http,\n  url: \"https://api.electric-sql.cloud\",\n  credentials: [\n    secret: \"...\",    # required\n    source_id: \"...\"  # optional, required for Electric Cloud\n  ]\n\n# application.ex\nchildren = [\n  MyApp.Repo,\n  # ...\n  {MyApp.Endpoint, phoenix_sync: Phoenix.Sync.plug_opts()}\n]\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Live Mode Request\nDESCRIPTION: Example of HTTP request for live mode with handle, offset, cursor and live parameters\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/shape?table=items&handle=38083685-1729874417404&offset=27344208_0&cursor=1674440&live=true\n```\n\n----------------------------------------\n\nTITLE: Installing ElectricSQL via npm\nDESCRIPTION: Command to install ElectricSQL in a project using npm. This replaces the previous starter scripts.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-01-24-electricsql-v0.9-released.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install electric-sql\n```\n\n----------------------------------------\n\nTITLE: Example Shape Client Usage with localhost\nDESCRIPTION: Example showing how to connect the client to a local Electric shape endpoint for the 'notes' table.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/bash/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./client.bash 'http://localhost:3000/v1/shape?table=notes'\n```\n\n----------------------------------------\n\nTITLE: Installing ElectricSQL React Integration\nDESCRIPTION: Commands to navigate to the React app directory and install the ElectricSQL React package for integrating with the HTTP API.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd react-app\nnpm install @electric-sql/react\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with Static Config\nDESCRIPTION: Example of configuring database connection settings for both Ecto and Electric using static configuration.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/sync-service/README.md#2025-04-14_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\ndatabase_config = [\n  database: \"ecto_simple\",\n  username: \"postgres\",\n  password: \"postgres\",\n  hostname: \"localhost\"\n]\n\nconfig :my_app, Repo, database_config\n\nconfig :electric, replication_connection_opts: database_config\n```\n\n----------------------------------------\n\nTITLE: Cloning Electric Repository and Installing Dependencies\nDESCRIPTION: These shell commands clone the Electric repository, install system dependencies using asdf, and set up the development environment for building Electric from source.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/installation.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/electric-sql/electric.git\ncd electric\n\nasdf plugin-add elixir\nasdf plugin-add erlang\nasdf plugin-add nodejs\nasdf plugin-add pnpm\nasdf install\n\ncd packages/sync-service\nmix deps.get\n```\n\n----------------------------------------\n\nTITLE: Initializing Supabase Project and Creating Function\nDESCRIPTION: These commands initialize a Supabase project and create a new function. They are part of the setup process for deploying the edge function to Supabase.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/edge/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsupabase init\nsupabase functions new $YOUR_FUNCTION_NAME\n```\n\n----------------------------------------\n\nTITLE: Minimal .env Configuration for ElectricSQL\nDESCRIPTION: Example of a minimal .env file configuration for ElectricSQL, specifying the service URL and proxy port.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-01-24-electricsql-v0.9-released.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nELECTRIC_SERVICE=http://localhost:5133\nELECTRIC_PG_PROXY_PORT=65432\n```\n\n----------------------------------------\n\nTITLE: Connecting to Postgres Database\nDESCRIPTION: Establishes connection to the Postgres database using psql command line tool.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npsql \"postgresql://postgres:password@localhost:54321/electric\"\n```\n\n----------------------------------------\n\nTITLE: Relay's commitMutation API Signature in TypeScript\nDESCRIPTION: This code shows the TypeScript signature of Relay's commitMutation API, highlighting how GraphQL handles data mutations. It demonstrates that despite GraphQL's advances, concerns about state transfer still leak into application code through error handlers and mutation configurations.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2022-12-16-evolution-state-transfer.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncommitMutation(\n  environment: Environment,\n  config: {\n    mutation: GraphQLTaggedNode,\n    variables: {[name: string]: mixed},\n    onCompleted?: ?(response: ?Object, errors: ?Array<PayloadError>) => void,\n    onError?: ?(error: Error) => void,\n    optimisticResponse?: Object,\n    optimisticUpdater?: ?(store: RecordSourceSelectorProxy) => void,\n    updater?: ?(store: RecordSourceSelectorProxy, data: SelectorData) => void,\n    configs?: Array<DeclarativeMutationConfig>,\n    cacheConfig?: CacheConfig,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Electric SQL React Package\nDESCRIPTION: Installs the Electric SQL React client library in the project.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd react-app\nnpm install @electric-sql/react\n```\n\n----------------------------------------\n\nTITLE: Granting replication role in AWS RDS Postgres\nDESCRIPTION: This SQL command grants the rds_replication role to a specified user in AWS RDS Postgres. This is necessary to enable logical replication for Electric.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/aws.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGRANT rds_replication TO someuser;\n```\n\n----------------------------------------\n\nTITLE: Running Electric Development Server from Source\nDESCRIPTION: This shell command starts the Electric development server using Mix, the build tool for Elixir projects.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/installation.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmix run --no-halt\n```\n\n----------------------------------------\n\nTITLE: Running Electric with Neon Connection String in Docker\nDESCRIPTION: This command demonstrates how to run Electric in a Docker container, using the Neon database connection string as the DATABASE_URL environment variable.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/neon.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it \\\n    -e \"DATABASE_URL=YOUR_NEON_CONNECTION_STRING\" \\\n    electricsql/electric:latest\n```\n\n----------------------------------------\n\nTITLE: Binding Shapes to React Components with ElectricSQL\nDESCRIPTION: Shows how to use the ElectricSQL React bindings to connect a React component to a shape. The useShape hook handles data fetching and updates automatically.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShape } from \"@electric-sql/react\";\n\nconst MyComponent = () => {\n  const { data } = useShape({\n    url: `shapes/todos`,\n  });\n\n  return <List todos={data} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Electric Shape Client in Bash\nDESCRIPTION: Command to execute the Bash client with a shape URL parameter to begin streaming updates.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/bash/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./client.bash 'YOUR_SHAPE_URL'\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data\nDESCRIPTION: Inserts sample data into the foo table with name and value pairs.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO foo (name, value) VALUES\n  ('Alice', 3.14),\n  ('Bob', 2.71);\n```\n\n----------------------------------------\n\nTITLE: Starting the ElectricSQL Backend Service for Testing\nDESCRIPTION: Commands to navigate to the sync-service directory, get dependencies, compile the backend service, and start it for testing purposes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/experimental/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ../sync-service\nmix deps.get\nmix stop_dev && mix compile && mix start_dev && ies -S mix\n```\n\n----------------------------------------\n\nTITLE: Clearing Docker volumes for ElectricSQL\nDESCRIPTION: Command to bring down Docker Compose services and remove volumes, which clears all shape logs. This is useful during development when you need to remove the server state and ensure that shape requests will be re-synced from scratch.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/troubleshooting.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose down --volumes\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Linearlite Project with Git and Bash\nDESCRIPTION: Commands to clone the Electric repository and navigate to the Linearlite example project directory. This sets up the local environment for running and exploring the Linearlite application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/electric-sql/electric.git electric-linearlite\ncd electric-linearlite/example/linearlite\n```\n\n----------------------------------------\n\nTITLE: Visualizing Rich-CRDT Decision Flow\nDESCRIPTION: A text-based flowchart showing the decision process for selecting the appropriate Rich-CRDT technique. It illustrates the recommended order of considering basic CRDTs, composition, compensations, escrow reservations, and finally lock-based reservations.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2022-05-03-introducing-rich-crdts.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n┌────────────────────────┐\n│                        │\n│ Can I use basic CRDTs? ├──► Done\n│                        │\n└──┬─────────────────────┘\n   │\n   ▼\n┌────────────────────────┐\n│                        │\n│ Can I use composition? ├──► Done\n│                        │\n└──┬─────────────────────┘\n   │\n   ▼\n┌──────────────────────────┐\n│                          │\n│ Can I use compensations? ├──► Done\n│                          │\n└──┬───────────────────────┘\n   │\n   ▼\n┌────────────────────────────────┐\n│                                │\n│ Can I use escrow reservations? ├──► Done\n│                                │\n└──┬─────────────────────────────┘\n   │\n   ▼\n Use lock based reservations\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Server with Configuration File\nDESCRIPTION: Command to start the Caddy server locally using a custom configuration file (Caddyfile) after downloading the pre-built binary with caddy-jwt module.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/caddy/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncaddy run --config ./Caddyfile\n```\n\n----------------------------------------\n\nTITLE: Database Migration Commands\nDESCRIPTION: NPM commands to start Postgres container with sync service and run database migrations.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run backend:start\nnpm run db:migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection with Environment Variable\nDESCRIPTION: Example of configuring database connection using DATABASE_URL environment variable with Electric's URI parser.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/sync-service/README.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n{:ok, database_config} =\n  System.fetch_env!(\"DATABASE_URL\")\n  |> Electric.Config.parse_postgresql_uri()\n\nconfig :electric, replication_connection_opts: database_config\n```\n\n----------------------------------------\n\nTITLE: Running Tests for the TypeScript Client\nDESCRIPTION: Command to run the test suite for the TypeScript client after the backend service has been started.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/experimental/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Restarting Docker services for ElectricSQL\nDESCRIPTION: Command to bring up Docker Compose services after clearing volumes. This creates a fresh backend environment for ElectricSQL development.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/troubleshooting.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages\nDESCRIPTION: Commands to install dependencies and build all workspace packages and examples within the ElectricSQL monorepo using pnpm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Connecting to Electric instance using environment variables in TypeScript\nDESCRIPTION: This code demonstrates how to connect to an Electric instance by using an environment variable set in Netlify to configure a ShapeStream. It shows the pattern for syncing data from an Electric backend into a web application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/netlify.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst ELECTRIC_URL = process.env.ELECTRIC_URL\n\nconst stream = new ShapeStream({\n  url: `${ELECTRIC_URL}/v1/shape`,\n  params: {\n    table: 'items'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Example JSON CRDT Structure\nDESCRIPTION: An example JSON object showing how different fields within a JSON CRDT might use different underlying CRDT types with different conflict resolution strategies. It demonstrates a composition of CRDTs for different data types.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2022-05-03-introducing-rich-crdts.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Valter\",\n  \"score\": 234,\n  \"attributes\": {\n    \"location\": \"Lisbon\"\n  },\n  \"history\": [\n    \"bought-fish\",\n    \"grilled-fish\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Deno Server Locally for Electric Proxy\nDESCRIPTION: This command runs the Deno server locally, allowing network and environment variable access. It executes the index.ts file which contains the edge function implementation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/edge/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndeno run --allow-env --allow-net index.ts\n```\n\n----------------------------------------\n\nTITLE: Generating Electric Client\nDESCRIPTION: Command to generate type-safe Electric client for database access.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-10-12-linerlite-local-first-with-react.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run client:generate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Packages\nDESCRIPTION: Commands to install monorepo dependencies and build required packages from the root directory.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/write-patterns/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Electric Shape API Endpoint\nDESCRIPTION: HTTP endpoint specification for accessing Electric's Shape API.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/shape\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages\nDESCRIPTION: Commands to install dependencies and build all workspace packages and examples using pnpm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/remix/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Verifying Electric SQL Health Check on Digital Ocean\nDESCRIPTION: Command to verify that the Electric SQL service is running correctly on Digital Ocean by querying the health check endpoint and displaying the expected response.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/digital-ocean.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://YOUR_IP_ADDRESS/v1/health\n{\"status\":\"active\"}\n```\n\n----------------------------------------\n\nTITLE: Testing Local Supabase Function with cURL\nDESCRIPTION: This shell script sets up environment variables and uses cURL to test the locally running Supabase function. It demonstrates how to send an authenticated request to the function.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/edge/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport FUNCTION_URL=\"http://localhost:54321/functions/v1/${YOUR_FUNCTION_NAME}\"\n\ncurl -sv --header \"Authorization: Bearer ${AUTH_TOKEN}\" \\\n    \"${FUNCTION_URL}/v1/shape?table=items&offset=-1\"\n...\n```\n\n----------------------------------------\n\nTITLE: Running Electric Docker Container with Crunchy Bridge Connection\nDESCRIPTION: Command to run Electric Docker container using a Crunchy Bridge Postgres connection string. The DATABASE_URL environment variable specifies the connection details including host, port, and credentials.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/crunchy.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it \\\n    -e \"DATABASE_URL=postgres://postgres:****@p.YOUR_CLUSTER_ID.db.postgresbridge.com:5432/postgres\" \\\n    electricsql/electric:latest\n```\n\n----------------------------------------\n\nTITLE: Setting DOCKER_HOST Environment Variable for Remote Docker Connection\nDESCRIPTION: Command to set the DOCKER_HOST environment variable to enable local Docker CLI to communicate with a remote Docker daemon on a Digital Ocean Droplet via SSH.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/digital-ocean.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport DOCKER_HOST=ssh://root@YOUR_IP_ADDRESS\n```\n\n----------------------------------------\n\nTITLE: Running Electric Test Suite\nDESCRIPTION: This shell command runs the Electric test suite using Mix, assuming the correct PostgreSQL configuration is in place.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/installation.md#2025-04-14_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmix test\n```\n\n----------------------------------------\n\nTITLE: Fetching Data from Created Table with HTTP API\nDESCRIPTION: Using curl to repeat the request for all rows from the scores table, which should now succeed since the table has been created.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i 'http://localhost:3000/v1/shape?table=scores&offset=-1'\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Replica Mode in ShapeStream\nDESCRIPTION: Demonstrates how to configure ShapeStream to receive full row data for updates and deletes using the replica option set to 'full'.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShapeStream } from \"@electric-sql/client\"\n\nconst stream = new ShapeStream({\n  url: `http://localhost:3000/v1/shape`,\n  params: {\n    table: `foo`,\n    replica: `full`\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services\nDESCRIPTION: Command to start the example backend services using Docker Compose.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/nextjs/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Generating Type-safe Database Client with ElectricSQL CLI\nDESCRIPTION: This command runs the ElectricSQL generator script to create a type-safe database client from the Postgres schema. The --watch flag can be added for continuous generation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-09-20-introducing-electricsql-v0.6.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpx electric-sql generate [--watch]\n```\n\n----------------------------------------\n\nTITLE: Configuring Usage Reporting with EnvVarConfig in JSX\nDESCRIPTION: This code snippet demonstrates how to use the EnvVarConfig component to configure the ELECTRIC_USAGE_REPORTING environment variable. It sets the default value to 'true' and provides an example usage.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/config.md#2025-04-14_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EnvVarConfig\n    name=\"ELECTRIC_USAGE_REPORTING\"\n    defaultValue=\"true\"\n    example=\"true\">\n\nConfigure anonymous usage data about the instance being sent to a central checkpoint service. Collected information is anonymised and doesn't contain any information from the replicated data. You can read more about it in our [telemetry docs](../reference/telemetry.md#anonymous-usage-data).\n\n</EnvVarConfig>\n```\n\n----------------------------------------\n\nTITLE: Using SSH to Connect to Digital Ocean Droplet\nDESCRIPTION: Command to establish an SSH connection to a newly created Digital Ocean Droplet to verify host authenticity and add its public key to the local known_hosts file.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/digital-ocean.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh root@YOUR_IP_ADDRESS\n...\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added 'YOUR_IP_ADDRESS' (ED25519) to the list of known hosts.\n```\n\n----------------------------------------\n\nTITLE: Installing PGlite Package for ElectricSQL\nDESCRIPTION: Command to install the PGlite dependency for use with ElectricSQL. PGlite is a lightweight WASM build of Postgres that enables running Postgres in client environments.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-05-14-electricsql-postgres-client-support.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @electric-sql/pglite\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services with Docker Compose\nDESCRIPTION: Command to start the required backend services for the encryption example using Docker Compose.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/encryption/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services with Docker Compose\nDESCRIPTION: Command to start the example backend services using Docker Compose through a pnpm script. This stops and removes volumes from other examples to ensure a clean environment.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/proxy-auth/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Tweet Component Configuration\nDESCRIPTION: Vue script setup block that configures a masonry tweet display component with specific tweet parameters including visibility settings for different screen sizes\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/use-cases/local-ai.md#2025-04-14_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport MasonryTweets from '../src/components/MasonryTweets.vue'\n\nconst tweets = [\n  {name: 'thor', id: '1824023614225854726', hideMedium: true},\n  {name: 'postgres.new', id: '1822992862436381032', hideSmall: true},\n]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Running Electric and PostgreSQL with Docker Compose\nDESCRIPTION: This shell command downloads the Docker Compose configuration file and starts the Electric and PostgreSQL services using Docker Compose.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/installation.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O https://electric-sql.com/docker-compose.yaml\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Supabase Function\nDESCRIPTION: This command sets an environment variable for the deployed Supabase function. It demonstrates how to set the ELECTRIC_URL secret, which is used in the edge function.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/edge/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsupabase secrets set ELECTRIC_URL=https://example.ngrok.app\n```\n\n----------------------------------------\n\nTITLE: Installing Electric SQL React Package\nDESCRIPTION: Command to install the @electric-sql/react package from NPM using npm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/react.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @electric-sql/react\n```\n\n----------------------------------------\n\nTITLE: Making API Requests to Electric Cloud Using Shell\nDESCRIPTION: This snippet demonstrates how to make an API request to Electric Cloud using curl. It sets environment variables for the source ID, secret, and shape definition, then constructs a curl command to request a shape from the API.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/product/cloud.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport SOURCE_ID=\"8ea4e5fb-9217-4ca6-80b7-0a97581c4c10\"\nexport SECRET=\"<long secret value>\"\n\nexport SHAPE_DEFINITION=\"table=items&offset=-1\"\n\ncurl -i \"https://api.electric-sql.cloud/v1/shape?$SHAPE_DEFINITION\\\n    &source_id=$SOURCE_ID\\\n    &source_secret=$SECRET\"\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres Container with Docker Compose\nDESCRIPTION: Commands to create and start a Postgres database using Docker Compose for development purposes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/sync-service/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f dev/docker-compose.yml create\ndocker compose -f dev/docker-compose.yml start\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages\nDESCRIPTION: Commands to install dependencies and build all workspace packages and examples using pnpm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/todo-app/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for ElectricSQL Blog Page\nDESCRIPTION: HTML markup defining the structure of the blog page with header, call-to-action buttons for community links, and a grid container for blog post listings rendered via Vue components.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog.md#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"vp-doc\">\n  <div class=\"container\">\n    <main>\n      <div class=\"header\">\n        <img src=\"/img/blog/electric-elephant.jpg\" />\n        <h1>\n          ElectricSQL Blog\n        </h1>\n        <p>\n          The latest news and updates from the ElectricSQL&nbsp;project.\n        </p>\n        <div class=\"actions cta-actions\">\n          <div class=\"action hidden-sm\">\n            <VPButton\n                href=\"https://discord.electric-sql.com\"\n                text=\"Join the Community\"\n                theme=\"brand\"\n            />\n          </div>\n          <div class=\"action inline-sm\">\n            <VPButton\n                href=\"https://discord.electric-sql.com\"\n                text=\"Community\"\n                theme=\"brand\"\n            />\n          </div>\n          <div class=\"action hidden-sm\">\n            <VPButton href=\"https://github.com/electric-sql/electric\"\n                target=\"_blank\"\n                text=\"Star on GitHub\"\n                theme=\"alt\"\n            />\n          </div>\n          <div class=\"action inline-sm\">\n            <VPButton href=\"https://github.com/electric-sql/electric\"\n                target=\"_blank\"\n                text=\"GitHub\"\n                theme=\"alt\"\n            />\n          </div>\n        </div>\n        <hr />\n      </div>\n      <div class=\"listing\">\n        <BlogPostListing v-for=\"post in posts\"\n            :key=\"post.slug\"\n            :post=\"post\"\n        />\n      </div>\n    </main>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Setting up Electric SQL with Docker Compose\nDESCRIPTION: Downloads and runs the Electric SQL Docker Compose configuration file to set up Postgres and Electric services.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -O https://electric-sql.com/docker-compose.yaml\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database\nDESCRIPTION: Command to connect to the PostgreSQL database running in Docker using the psql client with connection credentials.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npsql \"postgresql://postgres:password@localhost:54321/electric\"\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for YJS Electric Provider Example\nDESCRIPTION: Command to start the development server for the YJS Electric Provider example.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/yjs/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Backend Containers\nDESCRIPTION: Command to start the required backend Docker containers for the application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/write-patterns/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Responsive Styling for ElectricSQL Blog Page\nDESCRIPTION: CSS styles with media queries for responsive layout of the blog page, including header, image sizing, grid layout for blog posts, and spacing adjustments for different screen sizes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog.md#2025-04-14_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<style scoped>\n  .header {\n    text-align: center;\n    padding: 0 12px;\n  }\n  .header img {\n    width: 65%;\n    max-width: 360px;\n    margin: 60px auto 32px;\n  }\n  @media (max-width: 749px) {\n    .header img {\n      margin: 54px auto 32px;\n    }\n  }\n  @media (max-width: 549px) {\n    .header img {\n      margin: 42px auto 24px;\n    }\n  }\n  .header hr {\n    margin: 48px 24px 32px;\n  }\n  p {\n    font-size: 18px;\n  }\n  .listing {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 32px;\n    margin: 24px 48px;\n    overflow: hidden;\n  }\n  @media (max-width: 1049px) {\n    .listing {\n      grid-template-columns: 1fr 1fr;\n    }\n  }\n  @media (max-width: 949px) {\n    .listing {\n      gap: 32px;\n      margin: 24px 40px;\n    }\n  }\n  @media (max-width: 749px) {\n    .listing {\n      grid-template-columns: 1fr;\n      gap: 32px;\n      margin: 20px 32px;\n    }\n  }\n  @media (max-width: 549px) {\n    .listing {\n      margin: 20px 24px;\n    }\n  }\n  .actions {\n    margin-top: 24px;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Running ElectricSQL with Docker Compose\nDESCRIPTION: Command to start ElectricSQL and Postgres using Docker Compose from the repository root. This sets up the necessary infrastructure for syncing data from Postgres.\nSOURCE: https://github.com/electric-sql/electric/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose -f .support/docker-compose.yml up\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages\nDESCRIPTION: Commands to install dependencies and build all workspace packages using pnpm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the Next.js development server.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/nextjs/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Traditional React Data Fetching Example\nDESCRIPTION: Example showing traditional data fetching approach using React useState and useEffect hooks to fetch data from an API endpoint\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-12-10-electric-beta-release.md#2025-04-14_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState, useEffect } from 'react'\n\nconst MyComponent = () => {\n  const [items, setItems] = useState([])\n\n  useEffect(() => {\n    const fetchItems = async () => {\n      const response = await fetch('https://api.example.com/v1/items')\n      const data = await response.json()\n\n      setItems(data)\n    }\n\n    fetchItems()\n  }, [])\n\n  return (\n    <List items={ items } />\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the React development server for the ElectricSQL example application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services with Docker Compose\nDESCRIPTION: Command to start the example backend services using Docker Compose.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/remix/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Building Packages for YJS Electric Provider\nDESCRIPTION: Commands to install dependencies and build packages for the monorepo from the root directory. This is a prerequisite step before running the example.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/yjs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory\nDESCRIPTION: Command to navigate to the Redis example directory.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/redis\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services\nDESCRIPTION: Command to start the example backend services using Docker Compose.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/todo-app/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server for the todo application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/todo-app/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Encryption Example Directory\nDESCRIPTION: Command to navigate to the encryption example directory to continue with the setup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/encryption/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/encryption\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Initializing Team and Literature Data in Vue.js Setup\nDESCRIPTION: Script that initializes team member data and research paper information. It creates a mapping of team member names to their URL slugs for generating profile links when displaying paper authors.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/reference/literature.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { data as team } from '../../data/team.data.ts'\nimport { data as papers } from '../../data/literature.data.ts'\n\nconst teamMembers = {}\nObject.entries(team).forEach(([_key, members]) => members.forEach(member => {\n  teamMembers[member.name] = member.slug\n}))\n</script>\n```\n\n----------------------------------------\n\nTITLE: Connecting Redis Client\nDESCRIPTION: Command to connect to Redis using redis-cli.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nredis-cli -h 127.0.0.1 -p 6379\n```\n\n----------------------------------------\n\nTITLE: Starting ElectricSQL with Postgres\nDESCRIPTION: CLI command to start ElectricSQL with a Postgres database using the new start command.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-01-24-electricsql-v0.9-released.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx electric-sql start --with-postgres\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Sync Shapes in Phoenix Controllers\nDESCRIPTION: Shows how to use Phoenix.Sync.Controller.sync_render/3 to create dynamic shapes in a Controller. This enables runtime personalization of sync shapes based on session and request parameters.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/phoenix.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule Phoenix.Sync.LiveViewTest.TodoController do\n  use Phoenix.Controller\n  import Phoenix.Sync.Controller\n  import Ecto.Query, only: [from: 2]\n\n  def show(conn, %{\"done\" => done} = params) do\n    sync_render(conn, params, from(t in Todos.Todo, where: t.done == ^done))\n  end\n\n  def show_mine(%{assigns: %{current_user: user_id}} = conn, params) do\n    sync_render(conn, params, from(t in Todos.Todo, where: t.owner_id == ^user_id))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Navigating to the ElectricSQL Monorepo Root\nDESCRIPTION: Command to change directory to the root of the ElectricSQL monorepo, which is necessary for workspace package installation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the development server for the encryption example application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/encryption/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server for the example application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/tanstack/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server for the proxy-auth example using pnpm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/proxy-auth/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Default Electric Development Environment Configuration\nDESCRIPTION: This environment configuration file sets the default DATABASE_URL for the Electric development server when running from source.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/installation.md#2025-04-14_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nDATABASE_URL=\"postgresql://postgres:password@localhost:5432/electric_dev\"\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup for Demo Data\nDESCRIPTION: Vue script setup block that imports demo data and finds specific demo entries for AI Chat and Linearlite applications.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/intro.md#2025-04-14_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data as demosData } from '../data/demos.data.ts'\nconst { demos } = demosData\n\nconst aiChat = demos.find(x => x.link === '/demos/ai-chat')\nconst linearlite = demos.find(x => x.link === '/demos/linearlite')\n</script>\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server for the application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/write-patterns/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Setup Instructions for Electric AI Chat Demo\nDESCRIPTION: Shell commands for setting up and running the Electric AI Chat demo application locally.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2025-04-09-building-ai-apps-on-sync.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/electric-sql/electric-ai-chat.git\ncd electric-ai-chat\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENAI_API_KEY=<your-openai-api-key>\npnpm dev:api\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev:app\n```\n\n----------------------------------------\n\nTITLE: Installing ElectricSQL TypeScript Client\nDESCRIPTION: Command to install the ElectricSQL client package from NPM\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/typescript-client/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @electric-sql/client\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory\nDESCRIPTION: Command to navigate to the linearlite-read-only example directory\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite-read-only/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/linearlite-read-only\n```\n\n----------------------------------------\n\nTITLE: Importing Demo Data with Vue.js\nDESCRIPTION: Sets up the Vue.js script section to import demo data from a TypeScript file and destructure it into demos and examples variables for use in the template.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos.md#2025-04-14_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { data } from './data/demos.data.ts'\n\nconst { demos, examples } = data\n</script>\n```\n\n----------------------------------------\n\nTITLE: Python Environment Setup Commands\nDESCRIPTION: Shell commands for setting up a Python package and installing dependencies\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmkdir example-client\ncd example-client\ntouch __init__.py\n```\n\n----------------------------------------\n\nTITLE: Importing Active Jobs Data with Vue.js\nDESCRIPTION: Imports job listing data from an external file and sets up a reactive variable to check if there are any active job openings.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/about/jobs/index.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { data as activeJobs } from '../../data/activeJobs.data.ts'\n\nconst currentlyHiring = activeJobs.length > 0\n```\n\n----------------------------------------\n\nTITLE: Rendering Twitter Testimonials with MasonryTweets Component\nDESCRIPTION: Implements a masonry-style grid of Twitter testimonials using the MasonryTweets component and passing the tweets data array as a prop.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/old-index.md#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<MasonryTweets :tweets=\"tweets\" />\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server - Phoenix\nDESCRIPTION: Command to start the Phoenix development server locally using Mix.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/api/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmix phx.server\n```\n\n----------------------------------------\n\nTITLE: Running All Integration Tests in Electric SQL\nDESCRIPTION: Command to execute all integration tests using the run script. This should be run after the development environment has been prepared.\nSOURCE: https://github.com/electric-sql/electric/blob/main/integration-tests/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./run.sh\n```\n\n----------------------------------------\n\nTITLE: Stopping Docker Backend Containers\nDESCRIPTION: Command to tear down and stop the backend Docker containers when finished.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/write-patterns/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Setting up Vue Components and Lifecycle Hook for ElectricSQL Blog\nDESCRIPTION: Vue script setup that imports necessary components and implements the onMounted lifecycle hook to dynamically add social media icons to GitHub and Discord links in the document.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { onMounted } from 'vue'\n\nimport { data as posts } from './data/posts.data.ts'\n\nimport BlogPostListing from './src/components/BlogPostListing.vue'\n\nonMounted(async () => {\n  if (typeof window !== 'undefined' && document.querySelector) {\n    const githubLinks = document.querySelectorAll(\n      '.actions a[href=\"https://github.com/electric-sql/electric\"]'\n    )\n\n    let icon = document.querySelector('.actions .vpi-social-github')\n    if (!icon) {\n      githubLinks.forEach((link) => {\n        const icon = document.createElement('span')\n        icon.classList.add('vpi-social-github')\n\n        link.prepend(icon)\n      })\n    }\n\n    const discordLinks = document.querySelectorAll(\n      '.actions a[href=\"https://discord.electric-sql.com\"]'\n    )\n\n    icon = document.querySelector('.actions .vpi-social-discord')\n    if (!icon) {\n      discordLinks.forEach((link) => {\n        const icon = document.createElement('span')\n        icon.classList.add('vpi-social-discord')\n\n        link.prepend(icon)\n      })\n    }\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Rendering Team Members Component in Vue.js for ElectricSQL\nDESCRIPTION: This template snippet demonstrates how the TeamMembers component is used to display different groups of people associated with ElectricSQL, including the core team, advisors, and investors.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/about/team.md#2025-04-14_snippet_2\n\nLANGUAGE: Vue.js\nCODE:\n```\n<TeamMembers :items=\"team\" />\n\n<TeamMembers :items=\"advisors\" />\n\n<TeamMembers :items=\"angels\" />\n\n<TeamMembers :items=\"vcs\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Demo Apps Section with Vue Components\nDESCRIPTION: HTML markup that creates the demo applications section of the homepage, using Vue components to display a grid of demo applications from the imported demo data.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/old-index.md#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"features-content\">\n\n## Demo apps\n\nSee the kind of applications you can build with Electric\n<span class=\"no-wrap-sm\">\n  and what they\n  <span class=\"no-wrap\">\n    feel like to use</span></span>.\n\n</div>\n<div class=\"demos-grid homepage\">\n  <DemoListing v-for=\"(demo, index) in homepage_demos\"\n      :demo=\"demo\"\n      :key=\"index\"\n  />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop and clean up backend services.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Installing ElectricSQL Elixir Client\nDESCRIPTION: Mix dependency configuration for adding the ElectricSQL Elixir client to a project. Specifies the package name and version constraint.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/elixir-client/README.md#2025-04-14_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:electric_client, \"~> 0.1.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Response for Missing Table\nDESCRIPTION: The HTTP response showing a 400 Bad Request error when trying to access a table that doesn't exist in the database yet.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 400 Bad Request\ndate: Wed, 09 Apr 2025 20:03:40 GMT\ncontent-length: 170\nvary: accept-encoding\ncache-control: no-cache\nx-request-id: GDS_DYUuk2dR6FEAAAAh\nelectric-server: ElectricSQL/1.0.4\naccess-control-allow-origin: *\naccess-control-expose-headers: *\naccess-control-allow-methods: GET, HEAD, DELETE, OPTIONS\ncontent-type: application/json; charset=utf-8\nelectric-schema: null\n\n{\"message\":\"Invalid request\",\"errors\":{\"table\":[\"Table \\\"public\\\".\\\"scores\\\" does not exist. If the table name contains capitals or special characters you must quote it.\"]}}\n```\n\n----------------------------------------\n\nTITLE: Vue Script Setup for Electric 1.0 Blog Post\nDESCRIPTION: Vue script setup block importing SVG logos, a screenshot, and a custom ScalabilityChart component for use in the Electric 1.0 release blog post.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2025-03-17-electricsql-1.0-released.md#2025-04-14_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import LogoStrip from '/static/img/blog/electric-beta-release/logo-strip.svg'\n  import LogoStripSm from '/static/img/blog/electric-beta-release/logo-strip.sm.svg'\n  import LogoStripXs from '/static/img/blog/electric-beta-release/logo-strip.xs.svg'\n  import LogoStripXxs from '/static/img/blog/electric-beta-release/logo-strip.xxs.svg'\n  import LinearLiteScreenshot from '/static/img/blog/electric-beta-release/linearlite-screenshot.png'\n  import ScalabilityChart from '../../src/components/ScalabilityChart.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Shape Subscription Example\nDESCRIPTION: Example of subscribing to shape changes using TypeScript callback.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/shapes.md#2025-04-14_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nshape.subscribe(({ rows }) => {\n  // rows is an array of the latest value of each row in a shape.\n})\n```\n\n----------------------------------------\n\nTITLE: Rendering Use Cases with UseCases Component\nDESCRIPTION: Integrates the UseCases component to display various use cases for ElectricSQL, passing the use cases data as a prop to the component.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/old-index.md#2025-04-14_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<UseCases :cases=\"useCases\" />\n```\n\n----------------------------------------\n\nTITLE: HTML5 Video Implementation\nDESCRIPTION: Video component implementation showing the AI chat demo with poster image and source URL configuration\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/ai-chat.md#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<HTML5Video class=\"wide\"\n    poster=\"/img/blog/building-ai-apps-on-sync/video-4-multi-user.jpg\"\n    src=\"https://electric-sql-blog-assets.s3.us-east-1.amazonaws.com/building-collaborative-ai-apps-on-sync/video-4-multi-user.mp4\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory in Shell\nDESCRIPTION: Command to navigate back to the proxy-auth example directory after building the monorepo packages.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/proxy-auth/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/proxy-auth\n```\n\n----------------------------------------\n\nTITLE: Star Count Display Script\nDESCRIPTION: Vue.js script that manages GitHub star count display functionality. It fetches and formats repository star counts, updating them in the UI with real-time data.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/product/pglite.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst formatStarCount = (count) => (\n  `<span class=\"muted\">(</span><span> ☆ </span><span>${Math.round(count / 100) / 10}k</span><span> </span><span class=\"muted\">)</span>`\n)\n\nconst renderStarCount = async (repoName, initialStarCount) => {\n  const links = document.querySelectorAll(\n    `.actions a[href=\"https://github.com/electric-sql/${repoName}\"]`\n  )\n  links.forEach(async (link) => {\n    link.innerHTML = '<span class=\"vpi-social-github\"></span> GitHub&nbsp;'\n\n    const countEl = document.createElement('span')\n    countEl.classList.add('count')\n    countEl.innerHTML = formatStarCount(initialStarCount)\n\n    link.append(countEl)\n\n    const count = await getStarCount(repoName, initialStarCount)\n    countEl.innerHTML = formatStarCount(count)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Elixir Application\nDESCRIPTION: Commands to fetch dependencies and start the Elixir application in interactive mode.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/sync-service/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmix deps.get\niex -S mix\n```\n\n----------------------------------------\n\nTITLE: Demo Grid Component HTML\nDESCRIPTION: HTML markup for displaying demo listings using Vue components with passed demo props.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/intro.md#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"demos-grid\">\n  <DemoListing :demo=\"aiChat\"/>\n  <DemoListing :demo=\"linearlite\"/>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Call to Action Section\nDESCRIPTION: Displays the call-to-action section at the bottom of the homepage by including a markdown component that contains the CTA content.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/old-index.md#2025-04-14_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"features-content\">\n  <div class=\"home-cta\">\n    <HomeCTA />\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Styling Wide Video Container\nDESCRIPTION: CSS styling for responsive video container that maintains 16:9 aspect ratio across different screen sizes\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos/ai-chat.md#2025-04-14_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.wide {\n    width: 100%;\n    aspect-ratio: 16/9;\n}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Root Directory\nDESCRIPTION: Command to navigate to the monorepo root directory for setup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/nextjs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Implementing User Sign-up in Elixir for Cloud-First Apps\nDESCRIPTION: An Elixir function that handles user sign-up by inserting a user record and sending a verification email. This demonstrates traditional backend business logic in a cloud-first architecture.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndef sign_up(user) do\n  user\n  |> Repo.insert!()\n  |> Mailer.send_verification_email()\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Research Papers by Year with Vue.js\nDESCRIPTION: Vue template that renders research papers organized by year. For each paper, it displays the title with a link to the paper, followed by a list of authors with special formatting and links to team member profiles when applicable.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/reference/literature.md#2025-04-14_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div v-for=\"section in papers\">\n  <h3 :id=\"section.year\">\n    {{ section.year }}\n    <a class=\"header-anchor\" :href=\"`#${ section.year }`\">\n      &ZeroWidthSpace;</a></h3>\n  <ul style=\"padding: 0; list-style: none\">\n    <li v-for=\"paper in section.papers\">\n      <a :href=\"paper.url\" target=\"_blank\">\n        {{ paper.title }}</a>\n      by\n      <span v-for=\"(author, index) in paper.authors\"><span v-if=\"index > 0 && index < paper.authors.length - 1\">, </span><span v-if=\"index > 0 && index == paper.authors.length - 1\"> and </span><span v-if=\"author in teamMembers\"><a :href=\"`/about/team#${teamMembers[author]}`\">{{ author }}</a></span><span v-else>{{ author }}</span></span>\n    </li>\n  </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Documentation Page Header HTML\nDESCRIPTION: HTML markup for the documentation page header including an SVG image and main title.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/intro.md#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"intro-zap-container\">\n  <img src=\"/img/home/zap-with-halo.svg\"\n      alt=\"Electric zap with halo\"\n      class=\"intro-zap\"\n  />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample Data into Scores Table\nDESCRIPTION: SQL command to insert sample rows with names and values into the scores table.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO scores (name, value) VALUES\n  ('Alice', 3.14),\n  ('Bob', 2.71),\n  ('Charlie', -1.618),\n  ('David', 1.414),\n  ('Eve', 0);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Root Directory\nDESCRIPTION: Command to navigate to the monorepo root directory for setup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop the backend services when finished with the example.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/remix/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers (User-agent: *) complete access to the website by including no disallow directives.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/proxy-auth/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Hiring Notice in Vue.js for ElectricSQL\nDESCRIPTION: This template snippet shows a conditional rendering of a hiring notice, which is displayed only when there are active job listings available.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/about/team.md#2025-04-14_snippet_3\n\nLANGUAGE: Vue.js\nCODE:\n```\n<div v-if=\"currentlyHiring\">\n\n> [!TIP] We're hiring!\n> See the [jobs page](/about/jobs/) for active roles.\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for ElectricSQL Setup\nDESCRIPTION: Commands to create a new directory for your ElectricSQL project and navigate into it.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir my-first-electric\ncd my-first-electric\n```\n\n----------------------------------------\n\nTITLE: Navigating to Root Directory\nDESCRIPTION: Command to navigate to the monorepo root directory for setup.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/tanstack/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Navigating to Root Directory\nDESCRIPTION: Command to navigate to the monorepo root directory from the example folder\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite-read-only/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop and clean up the backend services.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/todo-app/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Handling Database Events in Elixir for Local-First Apps\nDESCRIPTION: An Elixir event handler function that sends verification emails in response to user insertion events. This approach moves business logic to database event handlers for local-first applications.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndef handle_event(%Insert{row: inserted_user}) do\n  inserted_user\n  |> Mailer.send_verification_email()\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Active Job Listings\nDESCRIPTION: Vue template that conditionally renders the active job listings section if there are current openings available.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/about/jobs/index.md#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div v-if=\"currentlyHiring\">\n\n## Active roles\n\n> [!Tip] We're hiring!\n> <ul><li v-for=\"job in activeJobs\"><a :href=\"job.link\">{{ job.title }}</a></li></ul>\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Root Directory\nDESCRIPTION: Command to navigate to the monorepo root directory from the example folder.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/todo-app/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Creating Scores Table in Postgres\nDESCRIPTION: SQL command to create a scores table with id, name, and value columns in the Postgres database.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE scores (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255),\n  value FLOAT\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Access with robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers (user-agents) to access all website content by not specifying any disallowed paths. The file references the official robots.txt protocol documentation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/remix/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Generating Example Links List with Vue.js\nDESCRIPTION: Creates an unordered list of technical examples using Vue.js v-for directive. Each example displays a title with a link to the example and a description paragraph.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos.md#2025-04-14_snippet_2\n\nLANGUAGE: vue\nCODE:\n```\n<ul v-for=\"(example, index) in examples\" :key=\"index\">\n  <li>\n    <h4>\n      <a :href=\"example.link\">\n        {{ example.title }}</a>\n    </h4>\n    <p style=\"margin: 5px 0\">\n      {{ example.description }}\n    </p>\n  </li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages\nDESCRIPTION: Commands to install dependencies and build all workspace packages using pnpm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/tanstack/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop and clean up the backend services.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/tanstack/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Web Crawler Access\nDESCRIPTION: This snippet configures the robot.txt file to allow all user agents unrestricted access to the entire website. It specifies no disallowed paths, effectively permitting crawlers to index all content.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/tanstack/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Installing ElectricSQL Experimental Package via NPM\nDESCRIPTION: Command to install the experimental TypeScript features for ElectricSQL from NPM. The package is published as @electric-sql/experimental.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/experimental/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @electric-sql/experimental\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access the entire site. It includes a reference to the robots.txt specification website and sets no crawling restrictions.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite-read-only/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server for the application\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite-read-only/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: A basic robots.txt configuration that allows all web crawlers (User-agent: *) to access all parts of the website by not specifying any disallowed paths (Disallow: is empty).\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Creating Database Table Schema\nDESCRIPTION: Creates a table named 'foo' with id, name, and value columns using SQL.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE foo (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255),\n  value FLOAT\n);\n```\n\n----------------------------------------\n\nTITLE: Brainfuck Example Code\nDESCRIPTION: Example code snippet in Brainfuck language\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n++++++++[>++++++++++>++++++++++++++>+++++++++++++++>++++>+++++++>+++++<<<<<<-]>-.>--.--.>+.>.<<--.+++++.----.--.+++++.-------.>>.>+++.>+.\n```\n\n----------------------------------------\n\nTITLE: Navigating to ElectricSQL Monorepo Root Directory\nDESCRIPTION: Command to change directory to the root of the ElectricSQL monorepo.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/remix/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Web Crawler Access in robots.txt\nDESCRIPTION: This snippet defines the robots.txt rules for the Electric SQL project. It allows all user agents (*) to access all areas of the site, effectively giving full permission to web crawlers.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the development server for the Remix app.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/remix/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests - Phoenix/Elixir Application\nDESCRIPTION: Command to execute the test suite using Mix test runner.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/api/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmix test\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Root Directory for Setup\nDESCRIPTION: Command to navigate to the root directory of the ElectricSQL monorepo to begin the setup process.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/encryption/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Initial Shape Data JSON Output\nDESCRIPTION: Example of the initial JSON data structure returned when first connecting to the shape endpoint, showing record details including key, value, headers, and offset.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/bash/README.md#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": \"\\\"public\\\".\\\"notes\\\"/\\\"1\\\"\",\n    \"value\": {\n      \"id\": \"1\",\n      \"title\": \"Example Note\",\n      \"created_at\": \"2024-12-05 01:43:05.219957+00\"\n    },\n    \"headers\": {\n      \"operation\": \"insert\",\n      \"relation\": [\n        \"public\",\n        \"notes\"\n      ]\n    },\n    \"offset\": \"0_0\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers to access the entire site without restrictions. Uses the wildcard user-agent (*) with no disallow rules.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/nextjs/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Creating Electric User with Replication Privileges in PostgreSQL\nDESCRIPTION: SQL commands to create a new user role with replication privileges for Electric and grant necessary database access permissions. The user is created with login capabilities and a password.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/gcp.md#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ROLE electric WITH REPLICATION LOGIN PASSWORD '...';\nGRANT ALL PRIVILEGES ON DATABASE \"postgres\" to electric;\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robots.txt Permissions for Web Crawlers\nDESCRIPTION: This robots.txt configuration allows all web crawlers (User-agent: *) full access to the website by not specifying any disallowed paths (Disallow: is empty). It references the official robots.txt standard documentation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Running Gatekeeper Client Locally using TypeScript\nDESCRIPTION: This command executes the TypeScript file 'index.ts' using the 'tsx' runtime, allowing the gatekeeper client to run locally for development or testing purposes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/client/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx tsx index.ts\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Supabase Function with cURL\nDESCRIPTION: This shell script sets up the function URL for the deployed Supabase function and uses cURL to test it. It shows how to send an authenticated request to the deployed function.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/edge/README.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport FUNCTION_URL=\"https://${YOUR_PROJECT_ID}.supabase.co/functions/v1/${YOUR_FUNCTION_NAME}\"\n\ncurl -sv --header \"Authorization: Bearer ${AUTH_TOKEN}\" \\\n    \"${FUNCTION_URL}/v1/shape?table=items&offset=-1\"\n...\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop and clean up the backend services\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite-read-only/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Authzed Authorization Implementation\nDESCRIPTION: Implementation of authorization using Authzed service in a Deno edge function, including JWT verification and permission checking.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport jwt from 'jsonwebtoken'\nimport { v1 } from '@authzed/authzed-node'\n\nconst AUTH_SECRET = Deno.env.get(\"AUTH_SECRET\") || \"NFL5*0Bc#9U6E@tnmC&E7SUN6GwHfLmY\"\nconst ELECTRIC_URL = Deno.env.get(\"ELECTRIC_URL\") || \"http://localhost:3000\"\n\nconst HAS_PERMISSION = v1.CheckPermissionResponse_Permissionship.HAS_PERMISSION\n\nfunction verifyAuthHeader(headers: Headers) {\n  const auth_header = headers.get(\"Authorization\")\n\n  if (auth_header === null) {\n    return [false, null]\n  }\n\n  const token = auth_header.split(\"Bearer \")[1]\n\n  try {\n    const claims = jwt.verify(token, AUTH_SECRET, {algorithms: [\"HS256\"]})\n\n    return [true, claims]\n  }\n  catch (err) {\n    console.warn(err)\n\n    return [false, null]\n  }\n}\n\nDeno.serve(async (req) => {\n  const url = new URL(req.url)\n\n  const [isValidJWT, claims] = verifyAuthHeader(req.headers)\n  if (!isValidJWT) {\n    return new Response(\"Unauthorized\", {status: 401})\n  }\n\n  // See https://github.com/authzed/authzed-node and\n  // https://authzed.com/docs/spicedb/getting-started/discovering-spicedb\n\n  const client = v1.NewClient(claims.token)\n\n  const resource = v1.ObjectReference.create({\n    objectType: `example/table`,\n    objectId: claims.table\n  })\n\n  const user = v1.ObjectReference.create({\n    objectType: \"example/user\",\n    objectId: claims.user_id\n  })\n\n  const subject = v1.SubjectReference.create({\n    object: user\n  })\n\n  const permissionRequest = v1.CheckPermissionRequest.create({\n    permission: 'read',\n    resource,\n    subject\n  })\n\n  const checkResult = await new Promise(\n    (resolve, reject) => {\n      client.checkPermission(\n        permissionRequest,\n        (err, response) => err ? reject(err) : resolve(response)\n      )\n    }\n  )\n\n  if (checkResult.permissionship !== HAS_PERMISSION) {\n    return new Response(\"Forbidden\", {status: 403})\n  }\n\n  return fetch(`${ELECTRIC_URL}/v1/shape${url.search}`, {headers: req.headers})\n})\n```\n\n----------------------------------------\n\nTITLE: Creating React Project\nDESCRIPTION: Initializes a new React TypeScript project using Vite.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm create --yes vite@latest react-app -- --template react-ts\n```\n\n----------------------------------------\n\nTITLE: Adding Electric Dependency in Mix.exs\nDESCRIPTION: Configuration to include Electric as a dependency in an Elixir application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/sync-service/README.md#2025-04-14_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndefp deps do\n  [\n  {:electric, \">= 1.0.0-beta.18\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies - Phoenix/Elixir Setup\nDESCRIPTION: Command to install and setup project dependencies using Mix, the Elixir build tool.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/gatekeeper-auth/api/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmix setup\n```\n\n----------------------------------------\n\nTITLE: Caddy Reverse Proxy Configuration\nDESCRIPTION: Caddy server configuration for implementing a reverse proxy with authentication validation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n{{\n    order forward_proxy last\n}}\n\nproxy.localhost {\n    reverse_proxy /v1/shape* localhost:5133 {\n        header_up +Authorization \"Bearer {http.auth.user}\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables\nDESCRIPTION: Shell command to source environment variables from .env.dev file.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/sync-service/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nset -a; source .env.dev; set +a\n```\n\n----------------------------------------\n\nTITLE: Basic Component with Static Database Query\nDESCRIPTION: A simple React component example that demonstrates a static database query. This approach doesn't account for live changes that might occur in a local-first architecture, as it doesn't update when the underlying data changes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2023-02-09-developing-local-first-software.md#2025-04-14_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst ExampleComponent = () => {\n  const results = db.items.findMany()\n\n  return (\n    /* render results */\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL\nDESCRIPTION: Command to connect to PostgreSQL using psql.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npsql \"postgresql://postgres:password@localhost:54321/electric\"\n```\n\n----------------------------------------\n\nTITLE: Building the TypeScript Client Package\nDESCRIPTION: Commands to navigate to the typescript-client directory and build the package for development purposes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/experimental/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd packages/typescript-client\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Querying Shape API via HTTP\nDESCRIPTION: Makes an HTTP request to the Electric SQL Shape API to retrieve data from the foo table.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i 'http://localhost:3000/v1/shape?table=foo&offset=-1'\n```\n\n----------------------------------------\n\nTITLE: Navigating to Monorepo Root Directory in Shell\nDESCRIPTION: Command to navigate to the root directory of the ElectricSQL monorepo, which is a prerequisite for setting up the example.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/proxy-auth/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ../../\n```\n\n----------------------------------------\n\nTITLE: Installing pnpm Workspace Dependencies for Development\nDESCRIPTION: Command to install the pnpm workspace dependencies at the repository root. This is required for development work on the package.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/experimental/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory\nDESCRIPTION: Command to navigate back to the todo-app example directory.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/todo-app/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/todo-app\n```\n\n----------------------------------------\n\nTITLE: Control Message Format for Up-to-date Status\nDESCRIPTION: JSON structure showing the control message format when client is up-to-date with server data.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/http.md#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"headers\": {\"control\": \"up-to-date\"}}\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory\nDESCRIPTION: Command to navigate to the Tanstack example directory.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/tanstack/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/tanstack\n```\n\n----------------------------------------\n\nTITLE: Testing Setup Commands\nDESCRIPTION: Shell commands for starting the backend and running tests\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/typescript-client/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd ../sync-service\nmix deps.get\nmix stop_dev && mix compile && mix start_dev && ies -S mix\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm test\n```\n\n----------------------------------------\n\nTITLE: Navigating to React Example Directory\nDESCRIPTION: Command to navigate back to the React example directory after installing and building packages.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/react\n```\n\n----------------------------------------\n\nTITLE: Development Setup Commands\nDESCRIPTION: Shell commands for setting up the development environment and building the package\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/typescript-client/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\ncd packages/typescript-client\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages\nDESCRIPTION: Commands to install dependencies and build all workspace packages using pnpm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/nextjs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Running Tests for ElectricSQL Elixir Client\nDESCRIPTION: Shell command to execute the test suite for the ElectricSQL Elixir client. Requires Electric and Postgres to be running, with appropriate environment variables configured.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/elixir-client/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmix test\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages\nDESCRIPTION: Commands to install dependencies and build all workspace packages and examples in the ElectricSQL monorepo.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/encryption/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Rendering GitHub Star Count in Vue Components\nDESCRIPTION: A Vue.js script that fetches and displays GitHub star counts for Electric repositories. It initializes with stored counts and then asynchronously updates them with live data once the component is mounted.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/product/electric.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onMounted } from 'vue'\n\nimport { data as initialStarCounts } from '../data/count.data.ts'\nimport { getStarCount } from '../src/lib/star-count.ts'\n\nconst formatStarCount = (count) => (\n  `<span class=\"muted\">(</span><span> ☆ </span><span>${Math.round(count / 100) / 10}k</span><span> </span><span class=\"muted\">)</span>`\n)\n\nconst renderStarCount = async (repoName, initialStarCount) => {\n  const links = document.querySelectorAll(\n    `.actions a[href=\"https://github.com/electric-sql/${repoName}\"]`\n  )\n  links.forEach(async (link) => {\n    link.innerHTML = '<span class=\"vpi-social-github\"></span> GitHub&nbsp;'\n\n    const countEl = document.createElement('span')\n    countEl.classList.add('count')\n    countEl.innerHTML = formatStarCount(initialStarCount)\n\n    link.append(countEl)\n\n    const count = await getStarCount(repoName, initialStarCount)\n    countEl.innerHTML = formatStarCount(count)\n  })\n}\n\nonMounted(async () => {\n  if (typeof window !== 'undefined' && document.querySelector) {\n    renderStarCount('electric', initialStarCounts.electric)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages\nDESCRIPTION: Commands to install dependencies and build all workspace packages using pnpm\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite-read-only/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies on Mac\nDESCRIPTION: Shell commands for setting up a development environment for ElectricSQL on macOS. The commands install asdf version manager and the required plugins for Node.js, Elixir, and Erlang.\nSOURCE: https://github.com/electric-sql/electric/blob/main/README.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nbrew install asdf\nasdf plugin-add nodejs elixir erlang\nasdf install\n```\n\n----------------------------------------\n\nTITLE: Dynamic Options with ShapeStream\nDESCRIPTION: Demonstrates how to use dynamic function-based options for params and headers in ShapeStream. These functions can be synchronous or asynchronous, making it useful for fetching authentication tokens and user context.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/clients/typescript.md#2025-04-14_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new ShapeStream({\n  url: 'http://localhost:3000/v1/shape',\n  params: {\n    table: 'items',\n    userId: () => getCurrentUserId(),\n    filter: async () => await getUserPreferences()\n  },\n  headers: {\n    'Authorization': async () => `Bearer ${await getAccessToken()}`,\n    'X-Tenant-Id': () => getCurrentTenant()\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Vue Component Imports for Electric SQL Home Page\nDESCRIPTION: This snippet imports various Vue components used in the Electric SQL home page. It also includes an onMounted hook to add GitHub icons to specific links.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/index.md#2025-04-14_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { onMounted } from 'vue'\n\nimport {\n  BackedBySection,\n  GetStartedStrap,\n  LatestNewsSection,\n  NoSilosStrap,\n  OpenSourceSection,\n  PGliteStrap,\n  ScalesToSection,\n  SolvesSyncSection,\n  SyncAwesomeSection,\n  UsedBySection,\n  WorksWithSection\n} from './src/components/home'\n\nonMounted(() => {\n  if (typeof window !== 'undefined' && document.querySelector) {\n    document.querySelectorAll('.actions a[href^=\"https://github.com\"]').forEach((link) => {\n      if (!link.querySelector('.vpi-social-github')) {\n        const icon = document.createElement('span')\n        icon.classList.add('vpi-social-github')\n\n        link.prepend(icon)\n      }\n    })\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Workspace Packages in Shell\nDESCRIPTION: Commands to install dependencies and build all workspace packages and examples in the ElectricSQL monorepo using pnpm.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/proxy-auth/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\npnpm run -r build\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Containers for YJS Electric Provider Backend\nDESCRIPTION: Command to start the necessary Docker containers for the backend. This should be run in the project directory.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/yjs/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Configuring Electric Service on Fly.io\nDESCRIPTION: TOML configuration file (fly.toml) for deploying Electric sync service on Fly.io. Includes necessary environment variables, HTTP service configuration, and health check settings.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/fly.md#2025-04-14_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\napp = \"YOUR_UNIQUE_APP_NAME\"\n\n[build]\n  image = \"electricsql/electric:latest\"\n\n[env]\n  DATABASE_URL = \"postgresql://...\"\n  ELECTRIC_DATABASE_USE_IPV6 = true\n\n[http_service]\n  internal_port = 3000\n  force_https = true\n\n  [[http_service.checks]]\n    interval = \"10s\"\n    timeout = \"2s\"\n    grace_period = \"20s\"\n    method = \"GET\"\n    path = \"/v1/health\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Homepage Components with Vue Setup\nDESCRIPTION: Sets up Vue components and imports necessary data and utilities for the ElectricSQL homepage, including star count functionality, demo data, and UI components.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/old-index.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport { onMounted } from 'vue'\n\nimport VPFeatures from 'vitepress/dist/client/theme-default/components/VPFeatures.vue'\n\nimport { data as initialStarCounts } from './data/count.data.ts'\nimport { data as useCases } from './data/use-cases.data.ts'\n\nimport { data as demosData } from './data/demos.data.ts'\nconst { homepage_demos } = demosData\n\nimport MasonryTweets from './src/components/MasonryTweets.vue'\nimport UseCases from './src/components/UseCases.vue'\n\nimport { getStarCount } from './src/lib/star-count.ts'\n\nimport HomeYourStackSimplified from './src/partials/home-your-stack-simplified.md'\nimport HomeCTA from './src/partials/home-cta.md'\n\nconst tweets = [\n  {name: 'kyle', id: '1825531359949173019'},\n  {name: 'fabio', id: '1823267981188542525'},\n  {name: 'next', id: '1823015591579472318', hideMedium: true},\n  {name: 'johannes', id: '1826338840153571362'},\n  {name: 'nikita', id: '1760801296188313783', hideSmall: true},\n  {name: 'thor', id: '1824023614225854726', hideMedium: true},\n  {name: 'copple', id: '1782681344340091115'},\n  {name: 'postgres.new', id: '1822992862436381032', hideSmall: true},\n  {name: 'prisma', id: '1816050679561039976', hideMedium: true},\n  {name: 'materialisedview', id: '1769744384025829468', hideSmall: true},\n  {name: 'devtools.fm', id: '1810328072236802198', hideMedium: true},\n  {name: 'local-first conf', id: '1808473434575229096', hideMedium: true},\n]\n\nconst formatStarCount = (count) => (\n  `<span class=\"muted\">(</span><span> ☆ </span><span>${Math.round(count / 100) / 10}k</span><span> </span><span class=\"muted\">)</span>`\n)\n\nconst renderStarCount = async (repoName, initialStarCount) => {\n  let container = document.querySelector(`span.feature-cta.${repoName}-star-count`)\n\n  if (!container) {\n    return\n  }\n\n  let linkEl = container.querySelector('a')\n  if (linkEl) {\n    return\n  }\n\n  linkEl = document.createElement('a')\n  linkEl.setAttribute('href', `https://github.com/electric-sql/${repoName}`)\n  linkEl.setAttribute('_target', `_blank`)\n  linkEl.classList.add('VPButton', 'medium', 'alt')\n  linkEl.innerHTML = '<span class=\"vpi-social-github\"></span> GitHub'\n\n  const countEl = document.createElement('span')\n  countEl.classList.add('count')\n  countEl.innerHTML = formatStarCount(initialStarCount)\n\n  linkEl.append(countEl)\n  container.append(linkEl)\n\n  const count = await getStarCount(repoName, initialStarCount)\n  countEl.innerHTML = formatStarCount(count)\n}\n\nonMounted(async () => {\n  if (typeof window !== 'undefined' && document.querySelector) {\n    const githubLinks = document.querySelectorAll(\n      '.actions a[href^=\"https://github.com\"]'\n    )\n\n    let icon = document.querySelector('.actions .vpi-social-github')\n    if (!icon) {\n      githubLinks.forEach((link) => {\n        const icon = document.createElement('span')\n        icon.classList.add('vpi-social-github')\n\n        link.prepend(icon)\n      })\n    }\n\n    let signUp = document.querySelector(`span.feature-cta.sign-up-link`)\n    if (!signUp) {\n      return\n    }\n    let linkEl = signUp.querySelector('a')\n    if (linkEl) {\n      return\n    }\n    linkEl = document.createElement('a')\n    linkEl.setAttribute('href', '/product/cloud/sign-up')\n    linkEl.classList.add('VPButton', 'medium', 'alt')\n    linkEl.innerHTML = '<span class=\"vpi-electric-icon\"></span> Sign up'\n    signUp.append(linkEl)\n\n\n    renderStarCount('electric', initialStarCounts.electric)\n    renderStarCount('pglite', initialStarCounts.pglite)\n  }\n})\n</script>\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services\nDESCRIPTION: Command to start the backend services using Docker Compose.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/redis/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Python Requests Installation\nDESCRIPTION: Shell command to install the Python Requests HTTP client library\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n# Optionally in a virtualenv:\n# virtualenv .venv\n```\n\n----------------------------------------\n\nTITLE: Rendering Your Stack Simplified Section\nDESCRIPTION: Displays the 'Your Stack Simplified' section of the homepage by including a markdown component that contains the content for this section.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/old-index.md#2025-04-14_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"features-content your-stack-simplified\">\n  <HomeYourStackSimplified />\n</div>\n```\n\n----------------------------------------\n\nTITLE: React Component for Todo List Display\nDESCRIPTION: React component that displays todo list items using Electric's useShape hook for real-time updates.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2025-04-09-building-ai-apps-on-sync.md#2025-04-14_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nfunction TodoListItems() {\n  const { data: todoListItems } = useShape({\n    url: `${ELECTRIC_API_URL}/v1/shape`,\n    params: {\n      table: \"todo_lists_items\",\n    },\n  })\n\n  return (\n    <ul>\n      {todoListItems.map((todoListItem) => (\n        <li key={todoListItem.id}>\n          {todoListItem.task}\n          {todoListItem.done && <span> Done</span>}\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop the backend services when done using the encryption example.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/encryption/README.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Importing Benchmark Images in Vue.js\nDESCRIPTION: This snippet imports various benchmark images as URLs for use in a Vue.js component. It demonstrates how to import static images for displaying performance charts and graphs in the documentation.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/reference/benchmarks.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<script setup>\nimport ConcurrentShapeCreation from '/static/img/benchmarks/concurrent-shape-creation.png?url'\nimport DiverseShapeFanout from '/static/img/benchmarks/diverse-shape-fanout.png?url'\nimport ManyShapesOneClient from '/static/img/benchmarks/many-shapes-one-client.png?url'\nimport SingleShapeSingleClient from '/static/img/benchmarks/single-shape-single-client.png?url'\nimport WriteFanout from '/static/img/benchmarks/write-fanout.png?url'\nimport WriteFanoutMemory from '/static/img/benchmarks/write-fanout-memory.png?url'\nimport UnrelatedShapesOneClientLatency from '/static/img/benchmarks/unrelated-shapes-one-client-latency.png?url'\nimport ReplicationThroughputOptimised from '/static/img/benchmarks/replication-throughput-optimised.png?url'\nimport ReplicationThroughputNonOptimised from '/static/img/benchmarks/replication-throughput-non-optimised.png?url'\nimport ScalabilityChart from '../../src/components/ScalabilityChart.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Syncing a Table Using the HTTP API\nDESCRIPTION: cURL command that demonstrates how to sync an entire table named 'foo' using ElectricSQL's HTTP API. The request initiates syncing from the beginning of the table's data.\nSOURCE: https://github.com/electric-sql/electric/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i 'http://localhost:3000/v1/shape?table=foo&offset=-1'\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop the Docker Compose backend services when finished with the example.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/react/README.md#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Displaying Use Cases Diagram with Responsive Images in HTML\nDESCRIPTION: HTML code that embeds responsive images showing ElectricSQL use cases. The code implements different image sources for different screen sizes using CSS classes 'hidden-md', 'block-md', and 'sm-diagramme'.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/src/partials/home-features-after.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"home-use-cases-diagramme\">\n  <img class=\"hidden-md\" src=\"/img/about/use-cases.png\"\n      alt=\"Use cases diagramme\" />\n  <img class=\"block-md sm-diagramme\" src=\"/img/about/use-cases.sm.png\"\n      alt=\"Use cases diagramme\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Implementing React Component with Electric SQL\nDESCRIPTION: Creates a React component that uses the Electric SQL Shape API to fetch and display data.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useShape } from '@electric-sql/react'\n\nfunction Component() {\n  const { data } = useShape({\n    url: `http://localhost:3000/v1/shape`,\n    params: {\n      table: `foo`\n    }\n  })\n\n  return (\n    <pre>{ JSON.stringify(data, null, 2) }</pre>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Data and Components in Vue.js for ElectricSQL Team Page\nDESCRIPTION: This snippet sets up the necessary imports for the ElectricSQL team page, including the TeamMembers component and data for team members, advisors, and investors. It also checks if there are currently active job listings.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/about/team.md#2025-04-14_snippet_0\n\nLANGUAGE: Vue.js\nCODE:\n```\n<script setup>\nimport TeamMembers from '../src/components/TeamMembers.vue'\nimport { data } from '../data/team.data.ts'\nimport { data as activeJobs } from '../data/activeJobs.data.ts'\n\nconst { advisors, angels, team, vcs } = data\n\nconst currentlyHiring = activeJobs.length > 0\n</script>\n```\n\n----------------------------------------\n\nTITLE: Navigating to Example Directory\nDESCRIPTION: Command to navigate to the Next.js example directory.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/nextjs/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/nextjs\n```\n\n----------------------------------------\n\nTITLE: Navigating to Remix Example Directory\nDESCRIPTION: Command to change directory to the Remix example folder.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/remix/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/remix\n```\n\n----------------------------------------\n\nTITLE: SQL Non-Optimized Where Clause Example\nDESCRIPTION: Example of a non-optimized where clause pattern that requires individual evaluation for each shape, resulting in linear scaling with the number of shapes.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/reference/benchmarks.md#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nfield ILIKE constant\n```\n\n----------------------------------------\n\nTITLE: Preparing Development Environment for Integration Tests in Electric SQL\nDESCRIPTION: Command to prepare the development environment for running integration tests. This needs to be run once before executing tests.\nSOURCE: https://github.com/electric-sql/electric/blob/main/integration-tests/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\n----------------------------------------\n\nTITLE: Starting the React Development Server\nDESCRIPTION: Command to start the Vite development server for the React application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/quickstart.md#2025-04-14_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Shape Request with Offset\nDESCRIPTION: Example of HTTP request with shape handle and offset parameters for data accumulation\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/shape?table=items&handle=38083685-1729874417404&offset=0_0\n```\n\n----------------------------------------\n\nTITLE: Vue Component Script Setup\nDESCRIPTION: Vue component setup script that imports the Tweet component for use in the blog post.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-07-17-electric-next.md#2025-04-14_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Tweet from 'vue-tweet'\n</script>\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop the backend services when you're finished with the example.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/proxy-auth/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Vue Component Import Setup Script\nDESCRIPTION: Script setup block importing the ScalabilityChart component for displaying performance metrics visualization.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2025-04-07-electric-cloud-public-beta-release.md#2025-04-14_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  import ScalabilityChart from '../../src/components/ScalabilityChart.vue'\n</script>\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Shape Request - Initial Sync\nDESCRIPTION: Example of initial HTTP request to fetch shape data with offset -1\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /v1/shape?table=items\n```\n\n----------------------------------------\n\nTITLE: Running Expo Application in Browser\nDESCRIPTION: Command to start the Expo application in web browser mode for testing and development.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/expo.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run web\n```\n\n----------------------------------------\n\nTITLE: Rendering Demo Listings with Vue.js Component\nDESCRIPTION: Creates a grid layout to display multiple demo applications using a DemoListing component. Each demo is passed as a prop to the component with a unique key based on its index.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/demos.md#2025-04-14_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<div class=\"demos-grid\">\n  <DemoListing v-for=\"(demo, index) in demos\" :demo=\"demo\" :key=\"index\" />\n</div>\n```\n\n----------------------------------------\n\nTITLE: Running Shape Client Tests\nDESCRIPTION: Shell command to run the Shape client unit tests\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ python client.test.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.087s\n\nOK\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services\nDESCRIPTION: Command to start the example backend services using Docker Compose\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/linearlite-read-only/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies\nDESCRIPTION: Installing the required requests library using pip\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/guides/client-development.md#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npython -m pip install requests\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Electric\nDESCRIPTION: Sample Nginx configuration file showing caching setup for the Electric HTTP API.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/api/http.md#2025-04-14_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\npackages/sync-service/dev/nginx.conf\n```\n\n----------------------------------------\n\nTITLE: Embedding Discord Widget in HTML\nDESCRIPTION: HTML iframe code for embedding the ElectricSQL community Discord widget on a webpage. The iframe includes configuration for dimensions, theme, and appropriate sandbox permissions for security.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/about/community.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://discord.com/widget?id=933657521581858818&theme=dark\"\n    width=\"350\"\n    height=\"500\"\n    sandbox=\"allow-popups allow-same-origin allow-popups-to-escape-sandbox allow-scripts\"\n    style=\"width: 100%; max-width: 550px; margin: 48px 0\">\n</iframe>\n```\n\n----------------------------------------\n\nTITLE: Styling Cache Invalidation Diagrams with CSS\nDESCRIPTION: CSS styles for responsive diagram display including width constraints and mobile-specific adjustments for cache invalidation diagrams.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/use-cases/cache-invalidation.md#2025-04-14_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.cache-invalidation-diagramme {\n  width: 100%;\n}\n.cache-invalidation-diagramme img {\n  width: 100%;\n  max-width: 420px;\n}\n@media (max-width: 767px) {\n  .cache-invalidation-diagramme {\n    padding: 0 10px;\n  }\n  .cache-invalidation-diagramme img {\n    margin: 0 auto;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Launches the React development server to run the application.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/llms/_quickstart_redux.md#2025-04-14_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of No Active Jobs Message\nDESCRIPTION: Vue template that renders a message when there are no active job listings, directing visitors to Discord for future announcements.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/about/jobs/index.md#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div v-if=\"!currentlyHiring\">\n\n## Active roles\n\n> [!Warning] No active roles\n> Sorry, we don't have any roles open at the moment. If you're interested in joining the team, you can keep an eye out for [hiring announcements on Discord](https://discord.electric-sql.com).\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Starting Backend Services\nDESCRIPTION: Command to start the example backend services using Docker Compose.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/tanstack/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:up\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog for @electric-sql/experimental Package in Markdown\nDESCRIPTION: This code snippet shows the changelog for the @electric-sql/experimental package, including version numbers, changes, and dependency updates. It uses Markdown formatting to structure the information.\nSOURCE: https://github.com/electric-sql/electric/blob/main/packages/experimental/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# @electric-sql/experimental\n\n## 1.0.3\n\n### Patch Changes\n\n- Updated dependencies [22cde89]\n  - @electric-sql/client@1.0.3\n\n## 1.0.2\n\n### Patch Changes\n\n- Updated dependencies [d278b9f]\n  - @electric-sql/client@1.0.2\n\n## 1.0.1\n\n### Patch Changes\n\n- 96b502e: Fix stack limit issue when using functions with array arg destructuring.\n- Updated dependencies [56c338a]\n  - @electric-sql/client@1.0.1\n\n## 1.0.0\n\n### Patch Changes\n\n- 6616b81: New experimental MultiShapeStream and TransactionalMultiShapeStream APIs that combine multiple shapes streams into a single stream. Note: these two APIs are experimental and are likely to change in a future version of the package.\n- c2b01c1: Encode LSN as string in JSON responses for correct handling of large values (>53 bits) in Javascript.\n- Updated dependencies [1255205]\n- Updated dependencies [ade15b9]\n- Updated dependencies [91774d3]\n- Updated dependencies [0dd1f0c]\n- Updated dependencies [1c28aee]\n- Updated dependencies [ade15b9]\n- Updated dependencies [19a7ab3]\n- Updated dependencies [6616b81]\n- Updated dependencies [f1a9247]\n- Updated dependencies [dcd8a9f]\n- Updated dependencies [dd5aeab]\n  - @electric-sql/client@1.0.0\n\n## 0.1.2-beta.4\n\n### Patch Changes\n\n- Updated dependencies [91774d3]\n- Updated dependencies [19a7ab3]\n  - @electric-sql/client@1.0.0-beta.5\n\n## 0.1.2-beta.3\n\n### Patch Changes\n\n- 6616b81: New experimental MultiShapeStream and TransactionalMultiShapeStream APIs that combine multiple shapes streams into a single stream. Note: these two APIs are experimental and are likely to change in a future version of the package.\n- Updated dependencies [6616b81]\n- Updated dependencies [dcd8a9f]\n  - @electric-sql/client@1.0.0-beta.4\n\n## 0.1.2-beta.2\n\n### Patch Changes\n\n- Updated dependencies [f1a9247]\n  - @electric-sql/client@1.0.0-beta.3\n\n## 0.1.2-beta.1\n\n### Patch Changes\n\n- Updated dependencies [ade15b9]\n- Updated dependencies [1c28aee]\n- Updated dependencies [ade15b9]\n- Updated dependencies [dd5aeab]\n  - @electric-sql/client@1.0.0-beta.2\n\n## 0.1.2-beta.0\n\n### Patch Changes\n\n- Updated dependencies [1255205]\n  - @electric-sql/client@1.0.0-beta.1\n\n## 0.1.1\n\n### Patch Changes\n\n- Updated dependencies [9886b08]\n- Updated dependencies [dae3b0d]\n- Updated dependencies [fbb66e9]\n  - @electric-sql/client@0.9.1\n```\n\n----------------------------------------\n\nTITLE: Stopping Backend Services\nDESCRIPTION: Command to stop and clean up the backend services.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/nextjs/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\npnpm backend:down\n```\n\n----------------------------------------\n\nTITLE: Styling H3 Elements in Vue.js for ElectricSQL Team Page\nDESCRIPTION: This CSS snippet adjusts the bottom margin of h3 elements within the component to create consistent spacing in the team page layout.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/about/team.md#2025-04-14_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n<style scoped>\n  .vp-doc h3 {\n    margin-bottom: 1rem;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Electric React Dependencies\nDESCRIPTION: Command to install the Electric React package with a force flag to handle potential React dependency version mismatches.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/docs/integrations/expo.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install '@electric-sql/react' --force\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Unrestricted Crawler Access\nDESCRIPTION: This configuration sets rules for web crawlers. It uses the wildcard User-agent (*) to address all crawlers and permits them to access all website content with the Allow directive.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/write-patterns/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nAllow: /\n```\n\n----------------------------------------\n\nTITLE: Firebase Security Rules Structure Example\nDESCRIPTION: Example of Firebase security rules structure showing the basic pattern for resource access control.\nSOURCE: https://github.com/electric-sql/electric/blob/main/website/blog/posts/2024-11-21-local-first-with-your-existing-api.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nservice <<name>> {\n  // Match the resource path.\n  match <<path>> {\n    // Allow the request if the following conditions are true.\n    allow <<methods>> : if <<condition>>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot.txt for Unrestricted Access\nDESCRIPTION: This snippet defines the robot.txt configuration to allow all web crawlers unrestricted access to the website. It specifies no disallowed paths, effectively permitting indexing of all content.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/yjs/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Robot Access Rules\nDESCRIPTION: Standard robots.txt configuration that specifies access rules for web crawlers. The configuration allows unrestricted access to all user-agents by using a wildcard (*) and leaving the Disallow directive empty.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/todo-app/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Configuring Robot Access Rules in robots.txt\nDESCRIPTION: Example configuration showing how to ban all web crawler access to the entire site. The commented code demonstrates the standard format for blocking all user agents from accessing any path.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/phoenix-liveview/priv/static/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file\n#\n# To ban all spiders from the entire site uncomment the next two lines:\n# User-agent: *\n# Disallow: /\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Web Crawler Access in robots.txt\nDESCRIPTION: This robots.txt configuration allows all web crawlers to access the entire website without restrictions. It includes a reference to the official robots.txt specification.\nSOURCE: https://github.com/electric-sql/electric/blob/main/examples/encryption/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# https://www.robotstxt.org/robotstxt.html\nUser-agent: *\nDisallow:\n```"
  }
]