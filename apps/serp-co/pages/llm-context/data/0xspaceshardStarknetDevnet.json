[
  {
    "owner": "0xspaceshard",
    "repo": "starknet-devnet",
    "content": "TITLE: Starting Starknet Devnet with Forking (Bash)\nDESCRIPTION: This snippet demonstrates how to start a Starknet Devnet instance configured to fork from an existing network.  It takes the URL of a Starknet JSON-RPC API provider using the `--fork-network` argument. The optional `--fork-block` argument can be used to specify a specific block number; if omitted, it defaults to the 'latest' block when the Devnet starts. All calls will try the Devnet's state first, and fallback to the forking block if the state is not found.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/forking.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens Using Starknet Devnet POST Request and JSON-RPC\nDESCRIPTION: This snippet demonstrates how to mint tokens by initiating a transaction on a token's ERC20 contract deployed in Starknet Devnet. It shows how to use a POST HTTP request to the /mint endpoint and a JSON-RPC request with method devnet_mint. Mandatory parameters include the recipient's address and the amount to mint, with an optional unit parameter defaulting to WEI. The amount must be an integer or a float that truncates to integer. The response contains the new balance, unit, and transaction hash.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/balance.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /mint\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via Starknet Devnet Local Faucet HTTP POST\nDESCRIPTION: This snippet shows how to send a POST request to the /mint endpoint to mint tokens to a specified account by interacting with the token's ERC20 contract on Starknet Devnet. The request body requires the recipient's address, the amount to mint (in WEI units or FRI), and an optional unit parameter that defaults to WEI. The amount must be an integer or a float without fractional parts. The response returns the new balance of the account, the token unit, and the transaction hash of the minting operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/balance.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /mint\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Block on Demand with StarkNet Devnet HTTP API - HTTP\nDESCRIPTION: Sends a POST request to the /create_block endpoint to convert the current pending block (containing transactions) into an accepted block. This action finalizes the pending block, generates a block hash and number, and creates a new empty pending block for subsequent transactions. No request body is required. This operation can be repeated as transactions accumulate in the pending block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/blocks.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /create_block\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet with Forking\nDESCRIPTION: This command starts Starknet Devnet with forking enabled, connecting to a specified Starknet JSON-RPC API provider. The `--fork-network` option specifies the URL of the provider, and the optional `--fork-block` option specifies the block number to fork from. If `--fork-block` is not provided, it defaults to the latest block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/forking.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via HTTP POST Request - Starknet Devnet - JSON\nDESCRIPTION: This snippet demonstrates sending a HTTP POST request to the /mint endpoint to mint test tokens (e.g., ETH or STRK) to a specified address in the Starknet Devnet environment. Requires the address of the recipient account, the amount to mint (as an integer or a float with no fractional part, in WEI or FRI units), and optionally the unit. The token type depends on the ERC20 contract corresponding to the specified unit. Validates that amount conforms to integer semantics and address is in 0x-prefixed hexadecimal format. Returns a response with a transaction hash and the new balance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/balance.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for StarkNet Devnet CLI (Bash)\nDESCRIPTION: Displays the available command-line options and their descriptions for the `starknet-devnet` executable. This is the standard way to see all configuration parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --help\n```\n\n----------------------------------------\n\nTITLE: Requesting New Block Creation Using JSON-RPC\nDESCRIPTION: This JSON-RPC snippet shows how to request the creation of a new block in Starknet Devnet by sending a 'devnet_createBlock' method call. The request requires no parameters or body and returns a JSON response containing the newly created block's hash. This method collects all pending transactions into the newly created block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/blocks.md#_snippet_1\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_createBlock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Balance via HTTP GET Request - Starknet Devnet - JSON (URL format)\nDESCRIPTION: This snippet illustrates the format for querying an account balance via an HTTP GET request to the /account_balance endpoint. The address parameter specifies the target account (0x-prefixed hex string), with optional query parameters for unit (FRI or WEI) and block_tag (latest or pending). The units and block tag parameters default to WEI and latest respectively if omitted. The response is a JSON object detailing the queried account's balance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/balance.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Restarting Devnet\nDESCRIPTION: This command triggers a Devnet restart via POST request or JSON-RPC, reverting the environment to its initial state without previous transactions or WebSocket subscriptions. Useful for resetting the environment during development.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nPOST /restart\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance via REST API in Starknet Devnet\nDESCRIPTION: GET request to check the balance of an address, with optional parameters for unit (defaults to WEI) and block tag (defaults to latest).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/balance.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: Impersonating Specific Account via JSON-RPC (Starknet Devnet)\nDESCRIPTION: This JSON-RPC request demonstrates how to use the `devnet_impersonateAccount` method to mark a specific account address for impersonation. The account must exist on the network being forked and should not exist in the local Devnet state. This allows transactions from this address to bypass local signature validation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/account-impersonation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet with Periodic Block Generation Using Bash\nDESCRIPTION: This snippet demonstrates how to start the Starknet Devnet with the CLI option to generate blocks automatically at a fixed time interval. The example starts Devnet to create new blocks every 10 seconds, showing user transaction submission and automatic block creation behavior. This requires the 'starknet-devnet' CLI installed and executed in a shell.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/blocks.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# t\n$ starknet-devnet --block-generation-on 10\n\n# t + 1s\n# user: send tx1\n\n# t + 4s\n# user: send tx2\n\n# t + 10s\n# Devnet: block automatically generated, contains tx1 and tx2\n\n# t + 12s\n# user: send tx3\n\n# t + 14s\n# user: invoke empty block creation\n# Devnet: generated block contains tx3\n\n# t + 20s\n# Devnet: block automatically generated, contains no txs (manual creation did not restart the counter)\n```\n\n----------------------------------------\n\nTITLE: Pulling the latest Starknet Devnet Docker image\nDESCRIPTION: This command pulls the latest Starknet Devnet Docker image from Docker Hub. It downloads the image tagged as `latest` which corresponds to the last published version on crates.io.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/docker.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Mint Token Request - Starknet Devnet\nDESCRIPTION: This code snippet shows a `POST` request to the `/mint` endpoint, used for minting tokens in the Starknet Devnet. It targets a specified address and specifies the amount and unit of the token to be minted. The `amount` parameter expects an integer value, and the `unit` can be `WEI` or `FRI`. The response includes the new balance and the transaction hash. Requires an account address (0x-prefixed hex string).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/balance.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks via JSON-RPC\nDESCRIPTION: Shows the JSON-RPC payload for the `devnet_abortBlocks` method. This method simulates block abortion by reverting Devnet's state to the block preceding the `starting_block_id`. The `params` object must contain the `starting_block_id` (block hash or number).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/blocks.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_abortBlocks\",\n    \"params\": {\n        \"starting_block_id\": BLOCK_ID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Time - POST Request - Starknet Devnet\nDESCRIPTION: Sets the exact time for the next block and generates a new block immediately.  The time is provided in Unix time seconds. The `time` parameter is required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/starknet-time.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet with Forking\nDESCRIPTION: This command starts a Starknet Devnet instance in forking mode, allowing it to interact with contracts deployed on other networks.  It requires the URL of a Starknet JSON-RPC API provider. An optional block number can also be specified, defaulting to the latest block.  All calls will first attempt to use the Devnet's local state, and then fall back to the forked block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/forking.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Running a Starknet Devnet Docker Container\nDESCRIPTION: Command to run a Starknet Devnet container with port publishing to make the service accessible from the host machine. The default internal port is 5050.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/docker.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Account Details Using HTTP GET Request\nDESCRIPTION: This snippet defines an HTTP GET request endpoint `/predeployed_accounts` to fetch JSON-formatted details of predeployed accounts within the Devnet. Passing the optional query parameter `with_balance=true` includes current ETH and STRK balances in Wei and FRI units respectively. This enables clients to obtain comprehensive, up-to-date account information programmatically.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/predeployed.md#_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /predeployed_accounts?[with_balance=true]\n```\n\n----------------------------------------\n\nTITLE: Configuring State Archive Capacity in Starknet-Devnet\nDESCRIPTION: Command to start Starknet-Devnet with a specific state archive capacity. Setting capacity to 'full' enables querying historic states by block hash or number, while the default 'none' only maintains the latest state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/historic-state.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Configuration via API (JSON)\nDESCRIPTION: Example JSON response obtained by sending a GET request to `/config` or a JSON-RPC request with the method `devnet_getConfig`. This response details the active configuration of the Starknet Devnet instance, reflecting both default settings and any parameters specified via CLI or subsequent API calls. Key fields include seed, account details, initial balance, chain ID, fork configuration, server settings, and relevant contract class hashes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_fri\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_fri\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000,\n    \"restricted_methods\": null\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false,\n  \"eth_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\",\n  \"strk_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State to a Custom Path via HTTP POST - Starknet Devnet - Bash\nDESCRIPTION: This shows how to request a Starknet Devnet dump to a specific file path by sending a POST request to /dump with an optional path provided in the JSON body. If no path is given, the CLI-defined --dump-path is used if available. Input: POST /dump with a JSON body specifying 'path'. Dependencies: Running Devnet with HTTP server. Output: Dump file at specified path.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nPOST /dump\n{\n  // optional; defaults to the path specified via CLI if defined\n  \"path\": <PATH>\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet on localhost\nDESCRIPTION: This command runs Starknet Devnet and makes it accessible on `127.0.0.1:5050` on the host machine.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/docker.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Block Time (with Block Generation) via HTTP/JSON-RPC\nDESCRIPTION: Sets the Starknet Devnet block timestamp to the specified `TIME_IN_SECONDS` (Unix time) and immediately generates a new block. This is achieved using either an HTTP POST request to `/set_time` or the `devnet_setTime` JSON-RPC method. Both methods require the `time` parameter.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/starknet-time.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mint token via HTTP POST request in StarkNet devnet\nDESCRIPTION: This code snippet illustrates how to send a POST request to the `/mint` endpoint to mint a specified amount of tokens to an account address. The parameters include the recipient address, amount (in WEI or FRI), and optional unit parameter to specify token denomination. The response returns the transaction hash and the new balance, facilitating token management in local testing environments.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/balance.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Starknet Devnet via CLI - Shell\nDESCRIPTION: Demonstrates how to set multiple environment variables inline while executing the Starknet Devnet binary. Environment variables are specified in the key-value format before the command. Replace <VAR1> and <VAR2> with actual variable names and values. The command will use these environment variables for configuration, which can override default settings or those supplied via CLI.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet State on Startup (Shell)\nDESCRIPTION: Starts StarkNet Devnet and loads its initial state from the specified dump file path using the `--dump-path` argument. This replaces the default initial state. Note this argument was previously named `--load-path` in Devnet-py. Loading is not guaranteed across different Devnet versions and certain startup flags (like `--account-class` or `--block-generation-on demand`) should match the ones used when the dump was created. Requires the `starknet-devnet` executable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet State On-Demand via API (HTTP/JSON-RPC)\nDESCRIPTION: Loads a Devnet state from the specified dump file path via an HTTP POST request to `/load` or a JSON-RPC call to `devnet_load`. This action replaces the *current* state of the running Devnet instance. The `path` parameter specifying the dump file is mandatory. Loading is implemented as re-execution of dumped transactions, meaning block timestamps may differ. Loading is not guaranteed across different Devnet versions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_5\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /load\n{ \"path\": <PATH> }\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_load\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Time in Starknet Devnet without block generation (POST)\nDESCRIPTION: This POST request sets the exact time for the next generated block but does not immediately generate a new block. It also uses the `/set_time` endpoint, but the body includes `generate_block` set to `false`. The `time` parameter sets the desired time in Unix time seconds.  Input: `time` (in seconds) and `generate_block`: false.  Output: Sets the timestamp for the next generated block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/starknet-time.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Dockerized Devnet CLI Options using --help\nDESCRIPTION: This command shows how to obtain help information when running Starknet Devnet inside a Docker container. The `--help` flag is passed to the `starknet-devnet-rs` executable within the Docker image.  The `--rm` flag is used to automatically remove the container after it exits, preventing clutter. The output will list all command line options for the Dockerized Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/cli.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Account Impersonation via Starknet Devnet JSON-RPC (JavaScript)\nDESCRIPTION: Uses the devnet_stopAutoImpersonate JSON-RPC method to disable the feature that automatically impersonates non-local accounts, restoring normal account validation behavior for unknown accounts. The method requires no parameters and returns an empty response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/account-impersonation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from crates.io using Cargo\nDESCRIPTION: Command to install Starknet Devnet as an executable binary via Cargo package manager from crates.io. This downloads the crate, builds it in release mode, and copies it to ~/.cargo/bin/.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Restarting Devnet via HTTP POST Request - Starknet Devnet - Bash\nDESCRIPTION: This command issues a POST request to the /restart endpoint of a running Starknet Devnet. No parameters are required. When received, Devnet resets to its original state, wiping deployments, blocks, and state changes made after initialization or loading from dump. Dependencies: Devnet instance with HTTP server running. Input: POST /restart. Output: Clean Devnet environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nPOST /restart\n```\n\n----------------------------------------\n\nTITLE: Getting predeployed accounts via HTTP GET in Starknet Devnet\nDESCRIPTION: HTTP GET request to retrieve information about predeployed accounts in Starknet Devnet with an optional parameter to include balance information.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/predeployed.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGET /predeployed_accounts?[with_balance=true]\n```\n\n----------------------------------------\n\nTITLE: Downloading and running pre-compiled Starknet Devnet binary\nDESCRIPTION: Commands to download a pre-compiled binary of Starknet Devnet from GitHub releases, extract it, and run it. This avoids local compilation to save time.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvz -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Impersonation - JSON-RPC\nDESCRIPTION: This JavaScript code snippet presents the JSON-RPC request for enabling automatic account impersonation. When enabled, any account not existing in the local Devnet state is automatically impersonated. This simplifies testing with various accounts. No parameters are required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/account-impersonation.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from GitHub using Cargo\nDESCRIPTION: Command to install Starknet Devnet directly from GitHub repository using Cargo with the --locked flag to ensure using dependencies from Cargo.lock.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Mint token via JSON-RPC in StarkNet devnet\nDESCRIPTION: This code snippet demonstrates how to format a JSON-RPC request to invoke the `devnet_mint` method for token minting. Essential parameters include the recipient address, amount, and unit. The response provides the transaction hash, updated balance, and token denomination, enabling programmatic token minting during testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/balance.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queue via Starknet Devnet Postman (REST, JSON-RPC, JavaScript)\nDESCRIPTION: These requests flush the L1-L2 message queue, dispatching all enqueued messages in both directions. The REST endpoint /postman/flush expects no body unless a dry_run boolean is provided to simulate the flush without executing. The JSON-RPC method devnet_postmanFlush supports an optional dry_run parameter. Requires a running L1 node when dry_run is false. Inputs: optional dry_run (true/false). Outputs are status/results of the flush operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/postman.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/flush\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\"\n}\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/flush\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"dry_run\": true }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\",\n    \"params\": {\n      \"dry_run\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from crates.io\nDESCRIPTION: Uses the `cargo install` command to download, compile, and install the `starknet-devnet` executable from the crates.io registry. Requires Rust and Cargo to be installed. The binary is typically placed in `~/.cargo/bin/`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Forking Starknet Devnet with Command Line\nDESCRIPTION: This command starts a Starknet Devnet instance in forking mode, allowing it to interact with a specified network. The `--fork-network` parameter requires the URL of a Starknet JSON-RPC API provider, such as a mainnet or testnet node. The `--fork-block` parameter is optional and specifies the block number to fork from; it defaults to the latest block.  All API calls will first check Devnet's local state and then fall back to the forking block if not found locally.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/forking.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance via StarkNet Devnet API (GET /account_balance)\nDESCRIPTION: Sends a GET request to the `/account_balance` endpoint to query the balance of a StarkNet account. Requires the 'address' (0x-prefixed hex) as a query parameter. Optional parameters include 'unit' ('WEI' or 'FRI', default 'WEI') and 'block_tag' ('latest' or 'pending', default 'latest') to specify the token and block context for the balance check.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/balance.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Dump with Optional Path\nDESCRIPTION: This JSON-RPC call requests a Devnet dump and optionally specifies a dump path via parameters. If 'path' is provided, it overrides CLI configured dump location.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"devnet_dump\",\n  \"params\": {\n    \"path\": <PATH>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Docker Mapping to Specific Host Address and Port (Bash)\nDESCRIPTION: Provides a concrete example of mapping the container's port 5050 to a specific interface (localhost, `127.0.0.1`) and port (5050) on the host machine. This restricts access to only the local machine, enhancing security.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/docker.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Launching StarkNet Devnet with Default Restrictive Mode (Shell)\nDESCRIPTION: Starts StarkNet Devnet with the restrictive mode enabled, using the default set of forbidden methods (e.g., devnet_mint, devnet_load, devnet_restart). This command restricts access to potentially sensitive or state-altering Devnet-specific functions without needing to specify them individually.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/restrictive.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --restrictive-mode\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Docker Container with Port Mapping (Bash)\nDESCRIPTION: Runs the Starknet Devnet container and maps the internal port 5050 to a specified port on the host machine. The `-p` flag is essential for making the Devnet API accessible from your host system when host networking is not used or desired.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/docker.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Restarting State via HTTP/JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: This JSON-RPC snippet invokes the 'devnet_restart' method to revert Starknet Devnet to its original state, optionally controlling L1->L2 messaging queue reset via the 'restart_l1_to_l2_messaging' flag. No body is required for HTTP POST /restart, but JSON-RPC allows specifying the parameter. Dependencies: an active Devnet process. Expected input is the optional boolean; output is a reset blockchain emulator state with effects explained in the documentation, including websocket subscription loss.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/dump-load-restart.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\",\n    \"params\": {\n        \"restart_l1_to_l2_messaging\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via REST API in Starknet Devnet\nDESCRIPTION: POST request to mint tokens (ETH or STRK) to a specified address. The amount parameter is in WEI or FRI units, with values truncated to integers for non-zero fractional parts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/balance.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST /mint\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State on Exit via CLI - Starknet Devnet - Bash\nDESCRIPTION: This command-line snippet demonstrates how to persist the entire state of a Starknet Devnet instance upon application exit (SIGINT/Ctrl+C signal). It uses the '--dump-on exit' and '--dump-path <PATH>' arguments to automatically save the current state to a specified file path. Dependencies: starknet-devnet binary must be installed and accessible on the system path. Required parameters: --dump-on exit (to enable dumping on exit) and --dump-path (to provide the output file location). Input: none, Output: dump file at provided path. Limitations: Does not handle SIGKILL or abrupt terminations.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via JSON-RPC\nDESCRIPTION: This JSON-RPC request retrieves details of the predeployed accounts in Devnet. The first example is a simple request returning default information. The second example shows how to request balance data using the \"with_balance\" parameter in the params object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/predeployed.md#_snippet_1\n\nLANGUAGE: JSON-RPC\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\"\n}\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\",\n    \"params\": {\n        // optional; defaults to false\n        \"with_balance\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Predeployed Account Info (API) - HTTP\nDESCRIPTION: Send an HTTP GET request to the Devnet's /predeployed_accounts endpoint to retrieve a JSON list of predeployed accounts. Including the with_balance=true query string provides current WEI and FRI balances at the pending state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/predeployed.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /predeployed_accounts?with_balance=true\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in Lite Mode\nDESCRIPTION: This command runs the Starknet Devnet in lite mode. In lite mode, the devnet skips calculating block hashes, which can improve performance for use cases that don't require this functionality. The `--lite-mode` flag is used to enable lite mode.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/lite.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Restarting Devnet via JSON-RPC Request - Starknet Devnet - JSON\nDESCRIPTION: This JSON-RPC request instructs the Devnet to fully restart its environment, using the 'devnet_restart' method. No parameters are needed. Upon processing, Devnet clears all loaded state and reverts to the default configuration. Dependencies: JSON-RPC enabled Devnet. Input: JSON-RPC call, Output: Reset Devnet process.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\"\n}\n```\n\n----------------------------------------\n\nTITLE: Impersonating a Specific Account via JSON-RPC (JavaScript/JSON)\nDESCRIPTION: Sends a JSON-RPC request to the StarkNet Devnet to start impersonating a specific account address. This allows transactions sent from this address (which might not exist locally) to bypass signature validation. The `account_address` parameter specifies the target account.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/account-impersonation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time with Block Generation in Starknet Devnet\nDESCRIPTION: Examples of setting an exact timestamp in Starknet Devnet using either HTTP POST or JSON-RPC method. This generates a new block with the specified timestamp. Time is specified in Unix seconds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/starknet-time.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via HTTP GET\nDESCRIPTION: This snippet demonstrates a HTTP GET request to retrieve information about predeployed accounts, optionally including their balances. The `with_balance` parameter controls whether balances are included in the response, displaying ETH and STRK balances.  The request is sent to the `/predeployed_accounts` endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/predeployed.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /predeployed_accounts?[with_balance=true]\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Dumping Starknet-Devnet State (No Parameters)\nDESCRIPTION: Simple HTTP POST request to trigger a Starknet-Devnet state dump without specifying a path. If no dump path was provided at startup, the dump will be included in the response body.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST /dump\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks with JSON POST Request\nDESCRIPTION: Illustrates how to abort blocks from a given starting block identifier by sending a POST request containing the `starting_block_id` to the `/abort_blocks` endpoint. The response returns a list of block hashes that were aborted. This functionality simulates block abortions and triggers state rollback in Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/blocks.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nPOST /abort_blocks\n{\n    \"starting_block_id\": BLOCK_ID\n}\n\nResponse:\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping StarkNet Devnet State on Exit (Shell)\nDESCRIPTION: Starts the StarkNet Devnet and configures it to automatically save its current state (transactions, contracts, storage) to the specified file path when the process receives a SIGINT signal (e.g., Ctrl+C). Requires the `starknet-devnet` executable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/dump-load-restart.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Displaying StarkNet Devnet CLI Help\nDESCRIPTION: Shows how to display the list of available command-line options for the `starknet-devnet` tool using the `--help` flag, both for direct execution and within a Docker container. This command provides details on all configurable parameters and their usage.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/cli.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nstarknet-devnet --help\n```\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet executable\nDESCRIPTION: This command executes the Starknet Devnet executable, assuming `cargo install` has completed successfully and the executable is in the system's PATH. It is a simple command to run the devnet after installation. Requires the executable to be in a location discoverable by the shell.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/install.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running starknet-devnet Executable - Shell\nDESCRIPTION: This snippet provides the basic command to execute the installed starknet-devnet executable after installation, assuming the binary is correctly installed and accessible via the system PATH.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/install.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Docker Image - Shell\nDESCRIPTION: This snippet demonstrates how to pull the latest Starknet Devnet Docker image from Docker Hub using the docker pull command. No additional dependencies are required other than Docker being installed. The image retrieved will be tagged 'latest', corresponding to the latest crates.io release. It requires internet connectivity, and outputs the image to the local Docker library.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/docker.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Publishing container port on Mac and Windows\nDESCRIPTION: Uses -p flag to map container port 5050 to a specified host port and address, ensuring the Devnet is accessible from the host machine. Requires Docker on Mac/Windows.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/docker.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Stopping Account Impersonation via devnet_stopImpersonateAccount JSON-RPC (JSON)\nDESCRIPTION: Constructs a JSON-RPC request calling the 'devnet_stopImpersonateAccount' method to cease impersonation for a specified account address. Prerequisite: The specified account must have been previously impersonated via Devnet. The 'account_address' parameter is required and must match a currently impersonated account. When successful, the API returns an empty response; the account is no longer impersonated for future transactions. Only affects behavior in the current Devnet session.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/account-impersonation.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping StarkNet Devnet State on Exit (Bash)\nDESCRIPTION: Starts StarkNet Devnet using the `starknet-devnet` command. This configuration automatically saves the Devnet's state to the specified `<PATH>` when the process receives a SIGINT signal (e.g., Ctrl+C). Note that this method does not handle SIGKILL.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Loading Messaging Contract via REST API (JSON) - Starknet Devnet - JSON\nDESCRIPTION: Sends a HTTP POST request to the /postman/load_l1_messaging_contract endpoint to load a MockStarknetMessaging contract into the Devnet system. The request requires the JSON object to contain `network_url` (an L1 node's JSON-RPC endpoint) and can optionally take an `address` parameter for an existing messaging contract. If address is omitted, a new contract is deployed. Inputs: network_url (string), address (optional string). No output specified here, but successful execution prepares messaging for L1-L2 testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network_url\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\" // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling the Latest StarkNet Devnet Docker Image\nDESCRIPTION: Downloads the latest official StarkNet Devnet Docker image from Docker Hub using the 'latest' tag. This tag corresponds to the most recently published version on crates.io.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/docker.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Running Devnet with periodic block generation\nDESCRIPTION: Command showing how to start Starknet Devnet with automatic block generation every 10 seconds, demonstrated with a timeline of events showing how transactions are processed and blocks are created.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/blocks.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# t\n$ starknet-devnet --block-generation-on 10\n\n# t + 1s\n# user: send tx1\n\n# t + 4s\n# user: send tx2\n\n# t + 10s\n# Devnet: block automatically generated, contains tx1 and tx2\n\n# t + 12s\n# user: send tx3\n\n# t + 14s\n# user: invoke empty block creation\n# Devnet: generated block contains tx3\n\n# t + 20s\n# Devnet: block automatically generated, contains no txs (manual creation did not restart the counter)\n```\n\n----------------------------------------\n\nTITLE: Dumping StarkNet Devnet State on Exit via Docker (Shell/Docker)\nDESCRIPTION: Runs the `shardlabs/starknet-devnet-rs` Docker image configured to dump its state on exit. It maps port 5050 and uses a bind mount to make the host directory `/path/to/dumpdir` available inside the container, ensuring the dump file `mydump` is saved to the host machine upon container shutdown (via SIGINT).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/dump-load-restart.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Gas Price Modification Response Format in JSON\nDESCRIPTION: This JSON response format is returned after a successful gas price modification request. It mirrors the request parameters, confirming the new gas price values that have been set on the Devnet instance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/gas.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"gas_price_wei\": 1000000,\n  \"data_gas_price_wei\": 10000,\n  \"gas_price_fri\": 10000,\n  \"data_gas_price_fri\": 10000,\n  \"l2_gas_price_wei\": 10000,\n  \"l2_gas_price_fri\": 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a mock message from L2 to L1 via POST /postman/consume_message_from_l2\nDESCRIPTION: This API simulates an L2-to-L1 message by specifying sender and receiver addresses and payload. It is used for testing messaging in dev environments where L2 contracts trigger messages to L1. The operation requires a running L1 node and the JSON-RPC method 'devnet_postmanConsumeMessageFromL2'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L2→L1 Message via Starknet Devnet Postman API - JavaScript\nDESCRIPTION: This JSON request body is posted to /postman/consume_message_from_l2 to simulate consuming a message sent from L2 to L1. Both l2_contract_address and l1_contract_address must reference valid deployed contracts, and payload is an array of hex values representing message data. This operation requires a running L1 node. Input parameters must be formatted as strings or arrays of hex strings. Output is a JSON object with message_hash.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/postman.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Auto-Impersonation via JSON-RPC (JavaScript)\nDESCRIPTION: This JSON-RPC request enables automatic account impersonation in Starknet Devnet.  Any account not in the local state will be impersonated.  It doesn't require any parameters. Requires Devnet to be running.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/account-impersonation.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request to Set Gas Price\nDESCRIPTION: This snippet shows the structure for a JSON-RPC request using the `setGasPrice` method to modify gas prices on Starknet Devnet. The `params` object contains optional fields for setting gas prices in Wei and FRI, and a boolean `generate_block` to control immediate block generation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/gas.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"setGasPrice\",\n    \"params\": {\n        \"gas_price_wei\": 1000000,\n        \"data_gas_price_wei\": 10000,\n        \"gas_price_fri\": 10000,\n        \"data_gas_price_fri\": 10000,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks in Starknet Devnet Using JSON-RPC\nDESCRIPTION: This JSON-RPC example demonstrates the request format to abort blocks from a given block ID. The method 'devnet_abortBlocks' is called with a 'starting_block_id' parameter. The request triggers the rollback and abortion of blocks from the specified block onwards.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/blocks.md#_snippet_4\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_abortBlocks\",\n    \"params\": {\n        \"starting_block_id\": BLOCK_ID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Devnet in Docker with State Dumping on Exit - Starknet Devnet - Bash\nDESCRIPTION: This Docker command starts a Starknet Devnet container and configures it to save its state to a host directory upon exit via '--dump-on exit' and '--dump-path'. It uses a bind mount to map a host directory for persistence. Dependencies: Docker, starknet-devnet image, accessible output directory. Parameters: --dump-on exit, --dump-path, Docker bind mount. Input: none; Output: dump file upon container stop.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Creating a New Block via HTTP POST in StarkNet Devnet\nDESCRIPTION: Sends an empty POST request to the `/create_block` endpoint to manually trigger the creation of a new block in StarkNet Devnet, typically used in 'on demand' mode. This block will contain all pending transactions accumulated since the last block. The response includes the hash of the newly created block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/blocks.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /create_block\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with State Archive Capacity (Bash)\nDESCRIPTION: Command to launch the Starknet Devnet instance with a specified state archive capacity. The `<CAPACITY>` parameter determines how much historical state is stored, allowing or disallowing queries against older blocks. Setting it to `full` enables historic state querying, while `none` (default) only keeps the latest state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/historic-state.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Configuring State Archive Capacity in Starknet Devnet\nDESCRIPTION: Command to launch Starknet Devnet with a specified state archive capacity. Setting the capacity to 'full' enables querying historical states, while 'none' (the default) only preserves the latest state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/historic-state.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Account Impersonation via devnet_autoImpersonate JSON-RPC (JSON)\nDESCRIPTION: Submits a JSON-RPC request with the method 'devnet_autoImpersonate' to activate automatic impersonation for all accounts not found in local Devnet state. No parameters are needed for this request. After enabling, any transaction from a new, unfound account triggers Devnet to impersonate it automatically, bypassing signature validation and some balance checks. An empty JSON object is returned on success, and the feature remains active until explicitly disabled.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/account-impersonation.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Block Time (Deferred Block Generation) via HTTP/JSON-RPC\nDESCRIPTION: Sets the Starknet Devnet block timestamp to the specified `TIME_IN_SECONDS` (Unix time) for the *next* block to be generated, without immediately creating one. This uses the optional `generate_block: false` parameter with either the `/set_time` HTTP POST endpoint or the `devnet_setTime` JSON-RPC method. Setting time in the past may cause issues.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/starknet-time.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Request/Response Logging in Starknet Devnet (Implicit INFO)\nDESCRIPTION: Sets the RUST_LOG environment variable to enable logging of HTTP request and response bodies for the Starknet Devnet binary. This implicitly uses the INFO logging level.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/server-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Loading StarkNet Devnet State via Docker (Shell/Docker)\nDESCRIPTION: Runs the `shardlabs/starknet-devnet-rs` Docker image, loading a state dump on startup. It maps the host port 5050 to the container port 5050 and uses a bind mount to make the host directory `/path/to/dumpdir` available inside the container at the same path, allowing Devnet to access the `mydump` file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/dump-load-restart.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Sending L2 to L1 Mock Messages via Starknet Devnet Postman (REST, JSON-RPC, JavaScript)\nDESCRIPTION: These examples show how to simulate L2-to-L1 message passing. The REST endpoint /postman/consume_message_from_l2 and JSON-RPC method devnet_postmanConsumeMessageFromL2 require contract addresses and a payload. Requires an active L1 node. On success, returns a message_hash. Inputs: l2_contract_address, l1_contract_address, payload (array). Outputs: message hash. Invalid addresses or missing L1 node will cause the operation to fail.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/postman.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/consume_message_from_l2\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"message_hash\": \"0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d\"}\n```\n\n----------------------------------------\n\nTITLE: Impersonating an Account with devnet_impersonateAccount in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the JSON-RPC method devnet_impersonateAccount to impersonate a specific account address that doesn't exist in the local state. The method requires the account_address parameter and returns an empty response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/account-impersonation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request Body to Mint Token - HTTP/JSON\nDESCRIPTION: This JSON object represents the request body for an HTTP POST request to the `/mint` endpoint. It is used to add funds to a specified account address. The `amount` is the value to mint, and `unit` specifies the token type (WEI for ETH, FRI for STRK). Precision rules for the `amount` are described in the documentation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/balance.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Account Impersonation with devnet_stopImpersonateAccount in JavaScript\nDESCRIPTION: This snippet shows how to use the JSON-RPC method devnet_stopImpersonateAccount to stop impersonating an account that was previously marked for impersonation. The method requires the account_address parameter and returns an empty response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/account-impersonation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image\nDESCRIPTION: This command is used to download the latest Starknet Devnet Docker image from Docker Hub. It's a prerequisite for running Starknet Devnet in a containerized environment. No specific dependencies are required besides Docker being installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/docker.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Running Starknet-devnet in Lite Mode (Shell)\nDESCRIPTION: This command demonstrates how to start the Starknet-devnet application with the \"--lite-mode\" flag enabled. This flag activates a minimal operational mode, skipping certain resource-intensive tasks like calculating block hashes. It is intended for development scenarios where these skipped features are not required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/lite.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nstarknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Abort Blocks Request\nDESCRIPTION: Aborts blocks starting from the specified block hash to the latest block. The state of Devnet will be reverted to the state of the last accepted block before the aborted blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/blocks.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /abort_blocks\n{\n    \"starting_block_hash\": BLOCK_HASH\n}\n```\n\n----------------------------------------\n\nTITLE: Loading a MockStarknetMessaging Contract via POST /postman/load_l1_messaging_contract\nDESCRIPTION: This snippet describes how to load or deploy a MockStarknetMessaging contract using POST requests. It facilitates setting up messaging contracts for L1-L2 communication testing. The request can include an optional contract address to fetch an existing contract or deploy a new one. The RPC method 'devnet_postmanLoad' accepts network URL and optional address parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"network_url\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\" // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Starknet Devnet\nDESCRIPTION: This snippet shows how to set environment variables to configure Starknet Devnet. Environment variables override default values. It takes the form `<VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet`.  The exact names can be viewed using the --help flag.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/cli.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Stopping Impersonation of a Specific Account via JSON-RPC\nDESCRIPTION: Shows the JSON-RPC request to stop impersonating a specific account address that was previously marked for impersonation. Requires the `account_address` parameter matching the account whose impersonation should cease. The method returns an empty response upon success.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/account-impersonation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Devnet with Custom Restricted Methods (Bash)\nDESCRIPTION: This command starts StarkNet Devnet with restrictive mode enabled, specifically forbidding the custom list of methods provided (`devnet_dump` and `devnet_config` in this example). The default restricted methods are overridden by this custom list. Devnet will fail to start if any specified method name is misspelled.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/restrictive.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --restrictive-mode devnet_dump devnet_config\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Time for Starknet Devnet\nDESCRIPTION: Command to set the initial timestamp for Starknet Devnet at startup. This value is used for mining the genesis block. If not specified, the current Unix time is used as the default.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/starknet-time.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --start-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Exporting Environment Variables in a Configuration File - Bash\nDESCRIPTION: Defines how to list environment variable settings in a shell script file using export statements for later sourcing. Each variable is exported for the current shell session. Prepare this file with desired configuration parameters (e.g., SEED, ACCOUNTS). Required for bulk configuration via shell sourcing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Dumping Devnet State on Exit\nDESCRIPTION: This CLI command configures Devnet to automatically dump its state when shutting down via exit, saving the data to the specified path. It is useful for preserving the current Devnet state for future loading or analysis.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Account Impersonation via JSON-RPC\nDESCRIPTION: Provides the JSON-RPC request to enable automatic impersonation in Devnet. When enabled, any account not existing in the local state will be automatically impersonated for transactions. The `params` field should be an empty object `{}`. The method returns an empty response upon success.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/account-impersonation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling the latest StarkNet Devnet Docker image\nDESCRIPTION: Provides the command to download the latest Docker image of StarkNet Devnet from Docker Hub. No dependencies other than Docker are required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/docker.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time via HTTP POST (Generates Block)\nDESCRIPTION: Sends an HTTP POST request to the `/set_time` endpoint to set the exact block timestamp. Requires a JSON body with the `time` property specified in Unix seconds. This operation generates a new block with the specified timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/starknet-time.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Check account balance via HTTP GET in StarkNet devnet\nDESCRIPTION: This snippet shows how to perform a GET request to retrieve an account's balance, specifying the address, optional unit, and block tag parameters. The default unit is FRI, and default block tag is latest. The response contains the current balance and related information.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/balance.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time via HTTP POST (JSON)\nDESCRIPTION: Sets the Starknet block and state timestamp to an exact Unix time in seconds using an HTTP POST request to the `/set_time` endpoint. By default, calling this endpoint generates a new block immediately. The required parameter is `time`, which should be the desired timestamp in Unix time seconds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/starknet-time.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Time Offset via HTTP in Starknet Devnet\nDESCRIPTION: Increases the current block timestamp by the specified amount using an HTTP POST request to the `/increase_time` endpoint. This operation triggers the immediate generation of a new block incorporating the time increment, which affects subsequent blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/starknet-time.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Starknet Devnet Time via JSON-RPC\nDESCRIPTION: This snippet shows how to set the exact time in Starknet devnet using the `devnet_setTime` JSON-RPC method. The `params` object should include the `time` parameter, representing the desired Unix timestamp in seconds. This will generate a new block with the specified timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/starknet-time.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Dumping Devnet State After Each Block\nDESCRIPTION: This CLI command sets Devnet to dump its current state after every processed block to a specified path, facilitating incremental state snapshots during development or testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet-Devnet with Forking Using Shell\nDESCRIPTION: This shell command starts a local Starknet-Devnet instance that forks from a specified Starknet JSON-RPC API URL, allowing local simulation of the origin network's blockchain state. The '--fork-network' parameter is required and takes the URL of the Starknet provider for forking. The optional '--fork-block' parameter specifies the block number to fork from; if omitted, the latest block is used by default. The Devnet instance continuously queries its local state first, falling back to the fork origin state when needed, enabling experimentation without modifying the original chain.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/forking.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Posting Messaging Contract Load Request via Starknet Devnet Postman API - JavaScript\nDESCRIPTION: This JSON request body is sent to the /postman/load_l1_messaging_contract endpoint to either deploy a new MockStarknetMessaging contract or use one at a specified address. The networkUrl field specifies the URL of an accessible L1 node via JSON-RPC, and the optional address field enables using an already deployed contract. The endpoint expects this data as the HTTP request body. Required dependencies: a running L1 node (Anvil, Ganache, Geth, Hardhat, or Sepolia). Both fields must be valid URLs or hex addresses; address is optional.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/postman.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"networkUrl\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading StarkNet Devnet State on Startup (Shell)\nDESCRIPTION: Starts the StarkNet Devnet instance, initializing its state by re-executing the transactions recorded in the specified dump file. Note the argument is `--dump-path`, not `--load-path`. Requires the `starknet-devnet` executable and a valid dump file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/dump-load-restart.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Price via JSON-RPC in Starknet\nDESCRIPTION: This JSON-RPC request sets gas prices in the Starknet Devnet. It takes several optional parameters: `gas_price_wei`, `data_gas_price_wei`, `gas_price_fri`, and `data_gas_price_fri` to set the gas prices. The `generate_block` boolean parameter determines if a new block should be generated immediately after setting the gas prices. The output is the set parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/gas.md#_snippet_0\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"setGasPrice\",\n    \"params\": {\n        \"gas_price_wei\": 1000000,\n        \"data_gas_price_wei\": 10000,\n        \"gas_price_fri\": 10000,\n        \"data_gas_price_fri\": 10000,\n        \"generate_block\": false,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Predeployed Account Class (Cairo 0/1) in StarkNet Devnet (Shell)\nDESCRIPTION: Command-line option to select either Cairo 0 (OpenZeppelin 0.5.1) or the default Cairo 1 (OpenZeppelin 1.0.0) account class for predeployed accounts when starting StarkNet Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/predeployed.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Version of Starknet Devnet Docker Image (Bash)\nDESCRIPTION: Allows downloading a Docker image corresponding to a specific release version of Starknet Devnet published on crates.io. Replace `<CRATES_IO_VERSION>` with the desired version number.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/docker.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Running StarkNet Devnet with Specific State Archive Capacity (Shell)\nDESCRIPTION: This shell command launches the StarkNet Devnet with a specified setting for its state archive capacity. Replace `<CAPACITY>` with either `full` to store all historical states (enabling querying by block hash/number) or `none` (default) to only store the latest state. Running RPC endpoints that query non-latest blocks requires setting the capacity to `full`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/historic-state.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Block Time via POST API (Generates Block)\nDESCRIPTION: Sends a POST request to the `/set_time` endpoint to set the exact block timestamp. Requires a JSON body with the 'time' parameter specifying the desired timestamp in Unix seconds. This operation generates a new block immediately by default.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/starknet-time.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /set_time\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dumping on Exit for StarkNet Devnet\nDESCRIPTION: This snippet demonstrates how to invoke StarkNet Devnet with the '--dump-on exit' flag to automatically generate a dump of the current state upon shutting down, storing it at a specified path. It requires the '--dump-path' parameter for the dump destination.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queues (Dry Run) via JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: Performs a dry run flush using the JSON-RPC API, sending `dry_run: true` in the params. This allows inspecting which messages would be processed without affecting blockchain or Devnet messaging state. Useful for test validations.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\",\n    \"params\": {\n      \"dry_run\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Block Timestamp via Starknet Devnet POST /increase_time (HTTP/JSON)\nDESCRIPTION: Increases the current block timestamp by a specified amount of seconds and generates a new block immediately. The endpoint accepts a JSON payload containing a single required 'time' parameter representing the number of seconds to add to the current timestamp. All subsequent blocks will maintain this increased timestamp offset until further changes are made.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/starknet-time.md#_snippet_1\n\nLANGUAGE: HTTP/JSON\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Messaging Contract via JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: Makes a JSON-RPC request using the `devnet_postmanLoad` method to register a MockStarknetMessaging contract for L1-L2 messaging. The `params` object mirrors REST: `network_url` is required, `address` is optional. Requires JSON-RPC infrastructure and should be sent to the Devnet RPC endpoint. Depends on a running Devnet instance. Produces side effects needed for message relay testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanLoad\",\n    \"params\": {\n      \"network_url\": \"http://localhost:8545\",\n      \"address\": \"0x123...def\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Container with Port Publishing\nDESCRIPTION: Command to start a Docker container for Starknet Devnet with port mapping. Users can specify the host port and container options to expose the service outside the container environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/docker.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State After Each Block (Shell)\nDESCRIPTION: Starts StarkNet Devnet and configures it to dump its state to the specified file path after each block is produced. Requires the `starknet-devnet` executable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Enabling restrictive mode with defaults - Shell\nDESCRIPTION: This command starts Starknet Devnet with the --restrictive-mode flag enabled without specifying any methods. This applies the default set of restricted methods as listed in the documentation. This is the simplest way to use the restrictive mode with standard restrictions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/restrictive.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nstarknet-devnet --restrictive-mode\n```\n\n----------------------------------------\n\nTITLE: Requesting New Block Creation Using JSON-RPC in JSON\nDESCRIPTION: Provides a JSON-RPC request example invoking the `devnet_createBlock` method to create a new block with the pending transactions. The request follows the JSON-RPC 2.0 specification. The response returns the block hash of the newly created block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/blocks.md#_snippet_2\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_createBlock\"\n}\n\nResponse:\n{\"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"}\n```\n\n----------------------------------------\n\nTITLE: Running Devnet in Docker with State Loading - Starknet Devnet - Bash\nDESCRIPTION: This shell command runs Starknet Devnet inside a Docker container, with a bind mount to share a filesystem directory between the host and the container for loading a state dump. It uses the '--dump-path' parameter to specify the file to be loaded. Dependencies: Docker, dockerized starknet-devnet image, and accessible state dump file. Parameters: --mount for bind, --dump-path for file. Input: none; Devnet loads from dump on startup.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Configuring Dumping After Each Block for StarkNet Devnet\nDESCRIPTION: This snippet shows how to start StarkNet Devnet with the '--dump-on block' option to create a dump after each block is processed, saving state to a specified file path. It facilitates continuous state preservation during development.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Response for Creating an Empty Block - JSON\nDESCRIPTION: The response to an empty block creation POST request contains a JSON object with the hash of the new, empty block. No transactions are included, but the block is part of the canonical chain and can be referenced via the block_hash.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/blocks.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"}\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Account Impersonation via JSON-RPC (JavaScript/JSON)\nDESCRIPTION: Sends a JSON-RPC request to the StarkNet Devnet to disable the automatic account impersonation feature previously enabled by `devnet_autoImpersonate`. This method takes no parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/account-impersonation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting State Archive Capacity in Starknet Devnet (Shell)\nDESCRIPTION: This command launches Starknet Devnet with a specified state archive capacity. Replace `<CAPACITY>` with either `full` to store all historic states or `none` (default) to only store the latest state. Setting capacity to `full` is required for querying non-latest blocks via RPC endpoints.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/historic-state.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1 to L2 Message with REST API in JSON\nDESCRIPTION: Example request for mocking an L1 to L2 message without requiring a running L1 node. The target L2 contract must have an l1_handler entrypoint that can receive the message. Various parameters like contract addresses and payload are required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [ \"0x1\", \"0x2\" ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\",\n    \"nonce\": \"0x0\",\n    \"l1_transaction_hash\": \"0x000abc123\", // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Docker Image with Predeployed Accounts - Docker - Shell\nDESCRIPTION: This code demonstrates fetching a Docker image of Starknet Devnet that is preconfigured to always predeploy the same set of funded accounts, using the -seed0 suffix in the tag. Docker must be present on your system. The <VERSION> can be any available release; the images with -seed0 are useful for consistent testing scenarios.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/docker.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Example of Automatic Periodic Block Creation Using CLI Invocation (Bash)\nDESCRIPTION: Illustrates the execution of the Starknet Devnet with the `--block-generation-on` CLI option set to an interval (e.g., 10 seconds). It showcases the timeline of transactions sent by the user and the automatic generation of blocks by Devnet containing the pending transactions at each interval. This snippet assumes a Unix shell environment for command execution and demonstrates how to start the Devnet to enable regular block mining.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/blocks.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# t\n$ starknet-devnet --block-generation-on 10\n\n# t + 1s\n# user: send tx1\n\n# t + 4s\n# user: send tx2\n\n# t + 10s\n# Devnet: block automatically generated, contains tx1 and tx2\n\n# t + 12s\n# user: send tx3\n\n# t + 14s\n# user: invoke empty block creation\n# Devnet: generated block contains tx3\n\n# t + 20s\n# Devnet: block automatically generated, contains no txs (manual creation did not restart the counter)\n```\n\n----------------------------------------\n\nTITLE: Response for Block Creation Request (JSON)\nDESCRIPTION: Represents the successful JSON-RPC response received after calling the `devnet_createBlock` method. It provides the hash of the block that was just created.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/blocks.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"}\n```\n\n----------------------------------------\n\nTITLE: Impersonating an Account with devnet_impersonateAccount JSON-RPC Method\nDESCRIPTION: JSON-RPC request to impersonate a specific account address that doesn't exist in the local state. This allows transactions to be sent from this account without signature validation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/account-impersonation.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check account balance via JSON-RPC in StarkNet devnet\nDESCRIPTION: This snippet details how to format a JSON-RPC request calling `devnet_getAccountBalance` to retrieve the balance of an account. Parameters include address, unit, and block_tag, with the default being FRI and latest. The response provides balance and token unit information.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/balance.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Devnet to Localhost on Mac/Windows - Shell\nDESCRIPTION: This snippet specifically forwards the container's port 5050 to 127.0.0.1:5050 on the host, making Devnet accessible only via localhost. This is useful to restrict outside network access for better security during local testing. Docker must be available, and the server will listen on the specified address.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/docker.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Installing StarkNet Devnet from crates.io using Cargo\nDESCRIPTION: Uses the `cargo install` command to download, compile, and install the `starknet-devnet` executable from the official Rust package registry, crates.io. Requires Rust and Cargo to be installed. The executable is typically placed in `~/.cargo/bin/`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Adding Starknet Devnet plugin for asdf version manager\nDESCRIPTION: Command to add the Starknet Devnet plugin to the asdf version manager, enabling version management of the Devnet installation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf plugin add starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Example: Running Devnet Container Mapped to Localhost Port 5050\nDESCRIPTION: An example command illustrating how to run the StarkNet Devnet container and map its internal port 5050 specifically to the host machine's loopback address (127.0.0.1) on port 5050. Access to the Devnet instance will be restricted to the local machine.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/docker.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Sending L1 to L2 Mock Messages via Starknet Devnet Postman (REST, JSON-RPC, JavaScript)\nDESCRIPTION: These requests simulate sending mock transactions from L1 to L2 with specified contract addresses, selectors, payload, and manual nonce. The REST endpoint /postman/send_message_to_l2 expects a JSON body, while the equivalent JSON-RPC call uses devnet_postmanSendMessageToL2. Output includes a transaction_hash on success. No L1 node is required for this simulation. Inputs: l2_contract_address, entry_point_selector, l1_contract_address, payload (array), paid_fee_on_l1, nonce. Outputs: transaction hash string.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/postman.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/send_message_to_l2\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\n      \"0x1\",\n      \"0x2\"\n    ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\"\n    \"nonce\":\"0x0\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\n        \"0x1\",\n        \"0x2\"\n      ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\"\n      \"nonce\":\"0x0\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Set Gas Price Request\nDESCRIPTION: This JSON snippet represents a request to the `setGasPrice` JSON-RPC method. It sets various gas prices, including `gas_price_wei`, `data_gas_price_wei`, `gas_price_fri`, `data_gas_price_fri`, `l2_gas_price_wei`, and `l2_gas_price_fri`.  The `generate_block` parameter is also included, which when set to true, generates a new block immediately after the gas prices are set. This request targets a Starknet Devnet instance. \nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/gas.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"setGasPrice\",\n    \"params\": {\n        \"gas_price_wei\": 1000000,\n        \"data_gas_price_wei\": 10000,\n        \"gas_price_fri\": 10000,\n        \"data_gas_price_fri\": 10000,\n        \"l2_gas_price_wei\": 1000000,\n        \"l2_gas_price_fri\": 10000,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking JSON-RPC Method to Mint Token - JSON-RPC\nDESCRIPTION: This JSON-RPC request structure invokes the `devnet_mint` method to mint tokens for a specific address. The parameters include the target `address`, the `amount` to mint, and the `unit` of the token (WEI or FRI). This provides an alternative interface to the HTTP `/mint` endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/balance.md#_snippet_1\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Prices via JSON-RPC in Starknet Devnet\nDESCRIPTION: This JSON-RPC request demonstrates how to set different gas prices (L1 gas, L1 data gas, L2 gas) on a running Starknet Devnet instance. All parameters are optional, and the generate_block flag determines whether changes take effect immediately.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/gas.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"setGasPrice\",\n    \"params\": {\n        \"gas_price_wei\": 1000000,\n        \"data_gas_price_wei\": 10000,\n        \"gas_price_fri\": 10000,\n        \"data_gas_price_fri\": 10000,\n        \"l2_gas_price_wei\": 1000000,\n        \"l2_gas_price_fri\": 10000,\n        \"generate_block\": false,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Block Creation Response Object in Starknet Devnet (JSON)\nDESCRIPTION: This snippet indicates the format of the response from the block creation endpoint in Starknet Devnet. The output object provides the hash of the newly created block. It serves as confirmation of block generation and is used for any further block identification or queries.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/blocks.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{'block_hash': '0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67'}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Time via JSON-RPC without Immediate Block in Starknet Devnet\nDESCRIPTION: Sets the exact block and state timestamp using the `devnet_setTime` JSON-RPC method with the `generate_block: false` parameter. This defers the timestamp change to the next block generation instead of creating a new block immediately.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/starknet-time.md#_snippet_3\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a mock message from L1 to L2 via POST /postman/send_message_to_l2\nDESCRIPTION: This API allows simulating an L1-to-L2 message by specifying the destination contract, entry point, sender, and payload. It is used for testing communication without a live L1 node. The request requires the target contract address, method selector, sender address, payload array, fee, nonce, and optional transaction hash. The JSON-RPC method used is 'devnet_postmanSendMessageToL2'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [ \"0x1\", \"0x2\" ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\",\n      \"nonce\": \"0x0\",\n      \"l1_transaction_hash\": \"0x000abc123\" // optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Version of Starknet Devnet Docker Image\nDESCRIPTION: Command to pull a specific version of Starknet Devnet Docker image from Docker Hub using the version tag from crates.io, enabling precise environment control.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/docker.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Installing latest Starknet Devnet version with asdf\nDESCRIPTION: Command to install the latest version of Starknet Devnet using the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf install starknet-devnet latest\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker images by commit hash\nDESCRIPTION: Allows fetching images built from specific commits identified by their SHA1 hash, useful for reproducibility and testing. Requires Docker and network access.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/docker.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Environment Variables for Devnet - Shell\nDESCRIPTION: This command shows how to launch Starknet Devnet in Docker while passing configuration variables with -e flags. Each variable is set for the container environment. Suitable for Docker-based workflows, this method allows flexible parameterization of Devnet without modifying the container image.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Mock L1-to-L2 Message Sending via JSON-RPC and HTTP POST\nDESCRIPTION: Sends a mock message from Layer 1 to Layer 2, simulating cross-layer contract interaction without requiring a running L1 node. The caller must provide a valid L2 contract address, an entry point selector, the L1 contract address, and message payload along with manual nonce and paid fee information. This enables testing of the L2 side handling of messages that would normally originate from L1 contracts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/postman.md#_snippet_2\n\nLANGUAGE: HTTP POST\nCODE:\n```\nPOST /postman/send_message_to_l2\n\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\n      \"0x1\",\n      \"0x2\"\n    ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\",\n    \"nonce\":\"0x0\"\n}\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\n        \"0x1\",\n        \"0x2\"\n      ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\",\n      \"nonce\":\"0x0\"\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: Running the installed StarkNet Devnet executable\nDESCRIPTION: Executes the `starknet-devnet` binary to start the local development network. Assumes the binary is accessible via the system's PATH environment variable after installation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet-Devnet from crates.io using cargo\nDESCRIPTION: This snippet demonstrates the installation of Starknet-Devnet from crates.io using the `cargo install` command. It downloads, builds the crate in release mode, and copies it to the user's `~/.cargo/bin/` directory. The command installs the latest version of the package available on crates.io. The user needs to have Rust and Cargo installed to use this command.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Requesting Block Creation via REST Endpoint in Starknet Devnet (JSON)\nDESCRIPTION: This snippet shows a REST API call to the /create_block endpoint to trigger immediate block creation in Starknet Devnet. No request body is required for this operation. A successful response will contain the hash of the created block. This endpoint is available in all block generation modes. The main output is the newly created block's hash string in hex format.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/blocks.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST /create_block\n```\n\n----------------------------------------\n\nTITLE: Mock L1-L2 Constructor Replacement with MockStarknetMessaging (Solidity)\nDESCRIPTION: Shows the difference in initializing the Starknet messaging contract for Devnet testing versus mainnet usage. Instead of using the IStarknetCore interface, Devnet tests require using the MockStarknetMessaging contract as the constructor parameter, ensuring compatibility with their testing message-passing logic. This change is necessary because the Devnet uses a mock contract for L1-L2 messaging rather than the production Starknet core.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/postman.md#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(IStarknetCore starknetCore_) public {\n    starknetCore = starknetCore_;\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing specific Starknet Devnet version with asdf\nDESCRIPTION: Command to install a specific version (0.2.0) of Starknet Devnet using the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf install starknet-devnet 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from GitHub using Cargo\nDESCRIPTION: Command to install Starknet Devnet directly from GitHub repository with the --locked flag to ensure using the dependencies listed in Cargo.lock file for consistent builds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Installing from GitHub (cargo)\nDESCRIPTION: This snippet explains how to install the starknet-devnet from GitHub using cargo install with the --git and --locked flags. The --locked flag ensures the dependencies are taken from the Cargo.lock file. Rust and cargo are required before running this command.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from File and Running StarkNet Devnet (Bash)\nDESCRIPTION: Uses the `source` command to execute a file (e.g., `.my-env-file`) in the current shell, setting the environment variables defined within it. It then runs `starknet-devnet` in the same shell, which will pick up these variables. The `&&` ensures Devnet only runs if sourcing succeeds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Predeployed Account Class in StarkNet Devnet (Shell)\nDESCRIPTION: Command-line option to specify a custom account contract class using the path to its compiled Sierra artifact file for predeployed accounts in StarkNet Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/predeployed.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet in Lite Mode (Shell)\nDESCRIPTION: This command initiates the Starknet Devnet instance with the `--lite-mode` flag enabled. This mode skips specific computations, such as block hash calculation, which can improve performance for use cases that do not rely on these particular features. Successful execution requires the `starknet-devnet` executable to be installed and accessible within the system's PATH.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/lite.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1->L2 Message with POST\nDESCRIPTION: This snippet illustrates sending a mock L1 to L2 message using a POST request. It requires specifying the `l2_contract_address`, `entry_point_selector` (must be an `l1_handler`), `l1_contract_address`, `payload`, `paid_fee_on_l1`, and `nonce`. A running L1 node is not required for this operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/postman.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [ \"0x1\", \"0x2\" ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\",\n    \"nonce\": \"0x0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1 to L2 Message with JSON-RPC in JSON\nDESCRIPTION: Example of sending a mock L1 to L2 message using the JSON-RPC interface. This performs the same function as the REST endpoint but follows JSON-RPC protocol standards.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [ \"0x1\", \"0x2\" ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\",\n      \"nonce\": \"0x0\",\n      \"l1_transaction_hash\": \"0x000abc123\", // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L2 to L1 Message with REST API in JSON\nDESCRIPTION: Example request for mocking an L2 to L1 message. This requires specifying the source L2 contract address, destination L1 contract address, and payload. A running L1 node is required for this operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Timeout via CLI\nDESCRIPTION: This command starts `starknet-devnet` and sets the maximum allowed time for an HTTP request using the `--timeout` flag. This is useful for managing large contracts that may take longer to process. Replace `<SECONDS>` with the desired timeout duration in seconds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/server-config.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Example Configuration File using Exported Environment Variables (Bash)\nDESCRIPTION: Provides an example of how environment variables can be defined in a Bash script or file using the `export` keyword. This format is suitable for sourcing the file directly in a Bash shell to set variables in the current environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Mock L2->L1 Message Request (REST API) - Starknet Devnet - JavaScript\nDESCRIPTION: Forms a request body for POST /postman/consume_message_from_l2 to simulate transmitting a message from an L2 contract to an L1 address. Requires a valid 'from_address' (L2 contract), 'to_address' (L1 contract), and 'payload' (array of message data). Depends on having a running L1 node for actual message consumption via Devnet bridge logic.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Mock L1->L2 Message Request (JSON-RPC) - Starknet Devnet - JSON\nDESCRIPTION: Initiates a mock L1->L2 transfer via JSON-RPC with method devnet_postmanSendMessageToL2. Accepts the Devnet L2 contract's address, entry point selector, origin L1 contract address, payload, fee, nonce, and an optional transaction hash. Used to test messaging logic and responses in Starknet Devnet setups without a real L1 chain.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [ \"0x1\", \"0x2\" ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\",\n      \"nonce\": \"0x0\",\n      \"l1_transaction_hash\": \"0x000abc123\", // optional\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Request/Response Logging - Starknet Devnet - Shell\nDESCRIPTION: Shows how to configure the `RUST_LOG` environment variable to include `REQUEST` and `RESPONSE` levels. This enables logging of incoming HTTP request bodies and outgoing HTTP response bodies for debugging purposes. Requires the base logging level to be at least `INFO`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/server-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Dumping on exit - Starknet Devnet (Bash)\nDESCRIPTION: This snippet demonstrates how to dump the Devnet state on exit. It preserves the current state of the Devnet instance when it is terminated, allowing for later resumption. The `--dump-path` parameter specifies the location where the dump file will be stored.  This operation handles SIGINT (Ctrl+C) but does not handle SIGKILL.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with arguments\nDESCRIPTION: Command to run Starknet Devnet from source with additional command-line arguments, using the -- separator to pass arguments to the program.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet with Custom Start Time (Shell CLI)\nDESCRIPTION: Launches the Starknet Devnet with a specified start time provided as a Unix timestamp in seconds. The '--start-time' argument must be greater than zero to initialize the Devnet's blockchain time accordingly. This option is used at Devnet startup to control the initial timestamp state of the development blockchain instance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/starknet-time.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --start-time <START_TIME_IN_SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via JSON-RPC in StarkNet Devnet\nDESCRIPTION: Illustrates the JSON-RPC request structure for the `devnet_getPredeployedAccounts` method. This allows fetching details of predeployed accounts, with an optional `with_balance` parameter (defaulting to false) to include account balances.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/predeployed.md#_snippet_3\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\",\n    \"params\": {\n        // optional; defaults to false\n        \"with_balance\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping StarkNet Devnet State After Each Block (Bash)\nDESCRIPTION: Runs StarkNet Devnet using the `starknet-devnet` command. This setup automatically persists the Devnet's state to the specified `<PATH>` after each new block is created.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Starknet-Devnet for On-Request Dumping\nDESCRIPTION: Command for configuring Starknet-Devnet to support dumping on request, optionally with a predefined dump path. This can be combined with other dumping modes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on <MODE> [--dump-path <FILE>]\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level for Dockerized Starknet Devnet - Bash\nDESCRIPTION: Runs the Dockerized version of Starknet Devnet, passing RUST_LOG as an environment variable to configure logging. Depends on Docker and the shardlabs/starknet-devnet-rs image. Replace <LEVEL> with desired logging (e.g., DEBUG, INFO). Logs are output to Docker's stdout. The container is started and logs reflect the chosen verbosity.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/server-config.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Starknet Devnet in Docker\nDESCRIPTION: Example of passing environment variables to a Docker container running Starknet Devnet using the -e flag for each variable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet Server With Timeout Using CLI Argument in Shell\nDESCRIPTION: Command to start the Starknet Devnet server with a specified maximum HTTP request timeout period, enabling support for deploying and managing long-running contract executions. The timeout value is provided in seconds as a CLI argument. Requires installed Starknet Devnet executable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/server-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Response Payload for New Block Creation Using JSON\nDESCRIPTION: This JSON snippet represents the typical response from the Starknet Devnet after requesting a new block creation. It returns the 'block_hash' as a hexadecimal string identifying the newly mined block. This can be used to verify block mining success and to query block details subsequently.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/blocks.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet with Network Forking (Shell)\nDESCRIPTION: This command starts the Starknet Devnet environment configured to fork an existing Starknet network (mainnet or testnet). The `--fork-network` argument requires the URL of a Starknet JSON-RPC API provider. The optional `--fork-block` argument specifies the block number to fork from; it defaults to the latest block if omitted. Calls will first check Devnet's state before falling back to the forked network's state at the specified block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/forking.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Triggering StarkNet Devnet State Load via JSON-RPC\nDESCRIPTION: Illustrates the JSON-RPC request payload for loading a Devnet state dump. The `devnet_load` method is invoked with a `params` object containing the source dump `path`. This request should be sent to the Devnet's JSON-RPC endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_load\",\n    \"params\": {\n        \"path\": PATH\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from source\nDESCRIPTION: Command to run Starknet Devnet directly from source code after cloning the repository. This builds and starts the Devnet in debug mode.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Running Starknet-Devnet from source with CLI params using cargo\nDESCRIPTION: This demonstrates how to pass command-line arguments (CLI params) to Starknet-Devnet when running it from source using `cargo run`.  The `[ARGS]` placeholder represents the command-line arguments to be passed to the Devnet executable.  Requires a local git clone of the Devnet repository. Useful for configuring network settings.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Increase Time - POST Request - Starknet Devnet\nDESCRIPTION: Increases the block timestamp by the provided amount in seconds and immediately generates a new block. All subsequent blocks will inherit this increment. Requires the `time` parameter.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/starknet-time.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Loading Devnet State from a Dump\nDESCRIPTION: This command loads a previously dumped Devnet state from a specified path during startup. Unlike earlier versions, it uses '--dump-path' to specify the load file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Triggering StarkNet Devnet State Dump via JSON-RPC\nDESCRIPTION: Shows the JSON-RPC request payload structure for triggering a Devnet state dump. The `devnet_dump` method is called with a `params` object containing the target dump `path`. This request should be sent to the Devnet's JSON-RPC endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\",\n    \"params\": {\n        \"path\": PATH\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Starknet Devnet Server Configuration via Curl and JSON-RPC\nDESCRIPTION: Examples demonstrating how to retrieve the current server configuration for the Starknet Devnet instance using an HTTP GET request to \"/config\" with curl and parsing with jq, and alternatively using a JSON-RPC request with method `devnet_getConfig`. The JSON-RPC response includes a `server_config` object describing the server settings. Requires curl installed or a JSON-RPC client.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/server-config.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Loading Starknet-Devnet State on Startup\nDESCRIPTION: Command for loading a preserved Starknet-Devnet state at startup. Uses the --dump-path parameter instead of --load-path as was used in Devnet-py.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Dumping Devnet State on Exit with Volume Bind\nDESCRIPTION: This Docker command runs the Devnet container, setting up a bind mount to persist dump files from the container to the host machine. It specifies the dump path inside the container for dumping on exit.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Starknet Devnet\nDESCRIPTION: This snippet shows how to set environment variables to configure Starknet Devnet. It illustrates the syntax for assigning values to variables before running the `starknet-devnet` command. The example demonstrates setting `VAR1` and `VAR2` to respective values.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Prices Using JSON-RPC in Starknet Devnet (JSON)\nDESCRIPTION: This JSON-RPC request demonstrates how to set various gas price fields (gas_price_wei, data_gas_price_wei, gas_price_fri, data_gas_price_fri) on a running Starknet Devnet instance. All parameters are optional and can be set selectively. The boolean generate_block parameter controls whether a new block is mined immediately, forcing the new gas prices to take effect right away. Input values should be unsigned integers representing price amounts, and the method expects a valid JSON-RPC structure including required fields such as jsonrpc version, id, and method.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/gas.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"setGasPrice\",\n    \"params\": {\n        \"gas_price_wei\": 1000000,\n        \"data_gas_price_wei\": 10000,\n        \"gas_price_fri\": 10000,\n        \"data_gas_price_fri\": 10000,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Account Class Selection in CLI\nDESCRIPTION: This snippet demonstrates how to select between Cairo 0 and Cairo 1 account classes when starting the Devnet using the command-line interface. The `--account-class` option allows users to choose between \"cairo0\" and \"cairo1\" implementations. This affects the type of account contract that will be deployed.  No dependencies are explicitly listed here, as it is simply an argument passed to the CLI.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/predeployed.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via JSON-RPC in Starknet Devnet - JSON\nDESCRIPTION: This snippet shows how to mint tokens using the devnet_mint JSON-RPC method. It requires a Starknet Devnet node supporting the devnet_mint API. Key parameters include address, amount, and unit (as above); the request follows standard JSON-RPC structure. Output includes the new balance, unit, and a transaction hash.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/balance.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet from dump - Starknet Devnet (Bash)\nDESCRIPTION: This snippet demonstrates how to load a preserved Devnet instance from a file specified using the `--dump-path` argument. It allows resuming the state of a previous Devnet session. The argument name for the path is not the same as in Devnet-py, where the argument was `--load-path`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Subscribing to New Heads via WebSocket using wscat\nDESCRIPTION: Demonstrates how to establish a WebSocket connection to the Devnet and subscribe to new block headers using the `starknet_subscribeNewHeads` JSON-RPC method. This requires the `wscat` tool (installable via npm) and a running Devnet instance at the default host and port. The command connects, sends a JSON-RPC request payload, and receives a confirmation response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/api.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ wscat -c ws://127.0.0.1:5050/ws\n```\n\nLANGUAGE: JSON\nCODE:\n```\n> { \"jsonrpc\": \"2.0\", \"id\": 0, \"method\": \"starknet_subscribeNewHeads\" }\n```\n\nLANGUAGE: JSON\nCODE:\n```\n< {\"id\":0,\"result\":2935616350010920547,\"jsonrpc\":\"2.0\"}\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Help in Starknet Devnet via CLI - Shell\nDESCRIPTION: Runs the Starknet Devnet binary using the --help flag to display all available command line options. Requires the starknet-devnet binary to be installed and available in the system PATH. No input parameters are required other than the --help flag, and the output is a usage statement listing all CLI switches and descriptions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Message for Starknet Devnet\nDESCRIPTION: This snippet demonstrates how to display the available CLI options and usage information for the Starknet Devnet. The command `starknet-devnet --help` is executed in the terminal to print the help message which aids the user in understanding the available configuration options and their usage.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/cli.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --help\n```\n\n----------------------------------------\n\nTITLE: Setting Next Block Time via JSON-RPC (No Immediate Block)\nDESCRIPTION: Uses the `devnet_setTime` JSON-RPC method to set the timestamp for the *next* block, without immediate generation. Requires `time` (Unix seconds) and `generate_block: false` within the `params` object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/starknet-time.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Docusaurus Website (Shell)\nDESCRIPTION: Starts a local development server for the Docusaurus website, serving content with live reload capabilities. This command opens a browser window automatically and reflects most changes without needing to restart the server manually.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm run start\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Docker Image with Seed 0 Predeployed Accounts (Bash)\nDESCRIPTION: Downloads a Docker image configured to always predeploy the same set of funded accounts by using the `--seed 0` option internally. This ensures deterministic account addresses across different Devnet runs. Append `-seed0` to the desired version tag or `latest`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/docker.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Flushing L1-L2 Message Queues using JSON-RPC and HTTP POST\nDESCRIPTION: Processes and consumes all queued messages between L1 and L2 since the last flush, effectively simulating message transmission and block creation. The 'dry_run' flag can be set to true to simulate the flush without executing message consumption. Requires a running L1 node unless 'dry_run' is used. Accessible via a POST request with an optional body or JSON-RPC method 'devnet_postmanFlush' with optional parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/postman.md#_snippet_1\n\nLANGUAGE: HTTP POST\nCODE:\n```\nPOST /postman/flush\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\"\n}\n```\n\nLANGUAGE: HTTP POST\nCODE:\n```\nPOST /postman/flush\n\n{ \"dry_run\": true }\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\",\n    \"params\": {\n      \"dry_run\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks in Starknet Devnet Using JSON-RPC\nDESCRIPTION: Provides the JSON-RPC request format to abort blocks starting from a specified block ID in Starknet Devnet. This operation reverts the state to the last accepted block prior to the starting block. The request requires the \"devnet_abortBlocks\" method and a parameter indicating the starting block ID to abort from. The response contains an array of hashes representing the aborted blocks in order. This feature is only supported when Devnet is run with a full state archive capacity and does not support aborting forked origin blocks, already aborted blocks, or the genesis block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/blocks.md#_snippet_3\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_abortBlocks\",\n    \"params\": {\n        \"starting_block_id\": BLOCK_ID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Argument Precedence\nDESCRIPTION: This example illustrates precedence of CLI arguments. If both a CLI argument and an environment variable are set for a parameter, the CLI argument takes precedence. In the shown example, even though the SEED environment variable is set to 10, the `--seed 42` argument on the CLI overrides this, causing Devnet to initialize with seed value 42.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/cli.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Loading State at Startup with Starknet Devnet (Bash)\nDESCRIPTION: This command initializes Starknet Devnet with a stored dump provided via '--dump-path' at startup. It replays the transaction history from the dump file to restore contract states, but timestamps such as those in 'StarknetBlock' may differ. The dump file should be created by a compatible version of Devnet, and any custom class options used during dumping should be replicated during loading.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/dump-load-restart.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Installing latest version of Starknet-Devnet using asdf\nDESCRIPTION: This command installs the latest available version of Starknet-Devnet using `asdf`. The `latest` argument tells `asdf` to fetch and install the newest version. Requires the asdf plugin for starknet-devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ asdf install starknet-devnet latest\n```\n\n----------------------------------------\n\nTITLE: Building and Running StarkNet Devnet from Source (Optimized)\nDESCRIPTION: Compiles the StarkNet Devnet project with release optimizations (`--release` flag) and then runs it. This results in a longer build time but improved runtime performance compared to a debug build. Requires Rust, Cargo, and the cloned project repository.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from GitHub\nDESCRIPTION: Installs Starknet Devnet directly from the GitHub repository using Cargo. The --locked flag ensures using the dependencies listed in Cargo.lock in the project root.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Loading a Devnet State on Request via API\nDESCRIPTION: This snippet shows how to replace the current Devnet state by sending a POST request to '/load' with the path to a dump file, or using JSON-RPC with method 'devnet_load' and 'path' parameter. Enables dynamic state restoration during runtime.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /load\n{\n  \"path\": <PATH>\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_load\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet via cargo\nDESCRIPTION: This snippet demonstrates installing Starknet Devnet from crates.io using `cargo install`. It downloads, builds, and installs the crate in release mode. The executable is then available in `~/.cargo/bin/`. Requires Rust and `cargo` to be installed and configured.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/install.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with Port Publishing on Mac/Windows - Shell\nDESCRIPTION: This command runs Starknet Devnet on Mac or Windows, forwarding the container's internal 5050 port to a chosen host address and port combination. You may optionally provide the HOST to restrict access, or omit it for exposure to all network interfaces. Docker installation is a prerequisite. The configuration affects security by controlling container accessibility.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/docker.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Config via HTTP API with curl and jq\nDESCRIPTION: This command sends a GET request to the Devnet server's `/config` endpoint using `curl`, pipes the JSON output to `jq`, and extracts the nested `server_config` property. This provides a quick way to check the current server configuration via the HTTP API.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/server-config.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Loading L1 Messaging Contract with JSON-RPC\nDESCRIPTION: This snippet demonstrates how to load a `MockStarknetMessaging` contract using a JSON-RPC request. The `network_url` specifies the L1 node's JSON-RPC API endpoint, and `address` is the optional address of the deployed contract. If no address is provided, Devnet deploys a new contract. Requires a running L1 node accessible at the specified URL.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/postman.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanLoad\",\n    \"params\": {\n      \"network_url\": \"http://localhost:8545\",\n      \"address\": \"0x123...def\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming Mock L2-to-L1 Message via POST Endpoint using HTTP\nDESCRIPTION: This POST endpoint '/postman/consume_message_from_l2' is used to send mock L2-to-L1 transactions. The request requires valid deployed L2 and L1 contract addresses along with a payload array of data representing the message parameters. Unlike the mock L1-to-L2 messages, a running L1 node is required to process this request. The endpoint returns a message hash confirming the message consumption from L2 to L1.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/postman.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /postman/consume_message_from_l2\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"message_hash\": \"0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d\"}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from source\nDESCRIPTION: Builds and runs Starknet Devnet from source code after cloning the repository. This is useful for development or when working with the latest features.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Restarting Starknet-Devnet with L1-L2 Messaging Control\nDESCRIPTION: JSON-RPC request to restart Starknet-Devnet with an optional parameter to control L1-L2 message handling. Setting 'restart_l1_to_l2_messaging' to true allows re-processing already-seen L1->L2 messages.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\",\n    \"params\": {\n        // optional parameter, defaults to false\n        \"restart_l1_to_l2_messaging\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mint Token Response Example - Starknet Devnet - JSON\nDESCRIPTION: This snippet provides an example JSON response returned after a successful mint operation via either the HTTP or JSON-RPC endpoints. The response includes the new balance of the destination account, the unit in which the balance is denominated (WEI or FRI), and the transaction hash associated with the mint operation. The structure is consistent between API access methods.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/balance.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Next Block Time via HTTP POST (No Immediate Block)\nDESCRIPTION: Sends an HTTP POST request to `/set_time` to set the timestamp for the *next* block to be generated, without immediately creating one. Requires `time` (Unix seconds) and `generate_block: false` in the JSON body.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/starknet-time.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling seed0 tagged images for predeployed accounts\nDESCRIPTION: Fetches images with the '-seed0' suffix which include predeployed funded accounts. Replace `<VERSION>` with the desired version or use 'latest'. Requires Docker.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/docker.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container\nDESCRIPTION: This command runs the Starknet Devnet Docker container, publishing the container's port 5050 to a specified host port. The `HOST` and `PORT` values need to be adjusted according to the desired configuration. The `--port` option within the container allows overriding the internal port.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/docker.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring StarkNet Devnet's State Archive Capacity\nDESCRIPTION: This CLI command sets the capacity of the full state archive in StarkNet Devnet, enabling or disabling historical state storage. Setting the capacity to a specific value allows queries against old block states by hash or number, provided the capacity is 'full'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/historic-state.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Fetch and run pre-compiled Starknet Devnet binary\nDESCRIPTION: This command fetches a pre-compiled binary executable of Starknet Devnet from a GitHub release, extracts it, and runs it.  It utilizes `curl` to download the compressed archive, `tar` to extract it to a target directory, and then executes the extracted binary.  Variables `<VERSION>`, `<COMPRESSED_ARCHIVE>`, and `<TARGET_DIR>` must be replaced with appropriate values.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvz -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Check Balance via JSON-RPC Request - Starknet Devnet\nDESCRIPTION: This is a JSON-RPC request using the method `devnet_getAccountBalance`, equivalent to the `/account_balance` GET request.  It specifies the same parameters: the address, unit, and block tag. This allows retrieving the account balance using a JSON-RPC client. The required parameters are the address, unit and block_tag.  Requires a Starknet Devnet instance and a JSON-RPC client.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/balance.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Docker Image by Version - Docker - Shell\nDESCRIPTION: This snippet shows how to pull a specific version of the Starknet Devnet image from Docker Hub, using a version tag that matches a published version on crates.io. The required dependency is Docker. The <CRATES_IO_VERSION> parameter should be replaced by the desired release tag; the result is an exact version of Starknet Devnet for consistent development environments.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/docker.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Publishing Starknet Devnet to Localhost\nDESCRIPTION: Example command showing how to run Starknet Devnet and make it accessible only on localhost at port 5050. This is a common configuration for local development.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/docker.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging Level with RUST_LOG Environment Variable\nDESCRIPTION: Sets the logging verbosity for the Devnet server by specifying the RUST_LOG environment variable. Supports levels like TRACE, DEBUG, INFO, WARN, and ERROR, and can include request and response body logging by combining levels.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/server-config.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Increasing Time Offset via HTTP POST (JSON)\nDESCRIPTION: Increases the current block timestamp by a specified duration (offset) in Unix time seconds using an HTTP POST request to the `/increase_time` endpoint. This action immediately generates a new block at the increased time. All subsequent blocks will inherit this time increment. The required parameter is `time`, representing the duration to add.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/starknet-time.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet on Linux with Host Networking\nDESCRIPTION: Command for running Starknet Devnet on Linux using host networking, which makes the container's port directly accessible on the host machine. This enables specifying a custom port.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/docker.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Docker with Host Network on Linux (Bash)\nDESCRIPTION: Runs the Devnet container using the host's network stack, making the internal port directly available on the host machine. This method is typically only supported on Linux hosts and simplifies accessing the Devnet API.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/docker.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Image with Seed Option - Shell\nDESCRIPTION: These commands demonstrate retrieving Devnet Docker images with '-seed0' suffix, which initialize the network with the same predeployed funded accounts. Adjust <VERSION> as needed, or use 'latest'. Requires Docker to be installed. Using these images guarantees deterministic account predeployment between runs.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/docker.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Response for Mock L1→L2 Message - JavaScript\nDESCRIPTION: This JSON object is the response from the /postman/send_message_to_l2 endpoint, returning the hash of the simulated transaction. The transaction_hash is a hex string uniquely identifying the mock bridge operation, which can be used for further tracking or assertions in test suites.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/postman.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: Enabling Restrictive Mode with Custom Methods in Starknet-Devnet\nDESCRIPTION: Demonstrates how to start Starknet-Devnet with restrictive mode enabled for specific custom methods. This example restricts only the devnet_dump and devnet_config methods, while allowing other methods to be used.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/restrictive.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --restrictive-mode devnet_dump devnet_config\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Account Impersonation with devnet_autoImpersonate in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the JSON-RPC method devnet_autoImpersonate to enable automatic impersonation of all accounts that don't exist in the local state. The method requires an empty params object and returns an empty response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/account-impersonation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Predeployed Accounts - JSON-RPC (With Balance)\nDESCRIPTION: This JSON-RPC request retrieves information about the predeployed contracts and accounts in the Starknet Devnet, including their balances. It uses the `devnet_getPredeployedAccounts` method with the `with_balance` parameter set to true or false.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/predeployed.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\",\n    \"params\": {\n        // optional; defaults to false\n        \"with_balance\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image by Commit Hash\nDESCRIPTION: This command pulls a Docker image tagged with the commit hash from the `main` branch, allowing usage of the latest code.  Docker is a prerequisite.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/docker.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level in Starknet Devnet - Shell\nDESCRIPTION: This snippet demonstrates how to set the logging level for a Starknet Devnet instance using the `RUST_LOG` environment variable.  It allows setting logging levels like `TRACE`, `DEBUG`, `INFO`, `WARN`, and `ERROR`.  The command sets the logging level and runs the devnet instance.  Requires `starknet-devnet` to be installed or a running docker instance of the devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/server-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Logging Requests and Responses in Starknet Devnet - Bash\nDESCRIPTION: Configures Starknet Devnet to log HTTP request and response bodies using special RUST_LOG values. Requires at least INFO logging level for body details to appear. Useful for debugging or monitoring API interactions; expected output includes both standard log entries and request/response content.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/server-config.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from a File\nDESCRIPTION: This Bash snippet shows how to load environment variables from a file to configure Starknet Devnet. It first exports variables to a file, then sources the file, and then runs starknet-devnet. Uses `source .my-env-file && starknet-devnet`. The parenthetical syntax is used to run in a subshell.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/cli.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Timeout with CLI Argument\nDESCRIPTION: Specifies the maximum duration (in seconds) an HTTP request is allowed to take, facilitating the deployment of large or long-running contracts. Uses CLI argument `--timeout`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/server-config.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Dumping Devnet State on Exit to Specific File\nDESCRIPTION: This command launches a Docker container with Devnet configured to dump its state to a specific file when exiting, using bind mounts for persistent storage.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_11\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet in Fork Mode\nDESCRIPTION: Command to start a Starknet Devnet instance in fork mode, connecting to a specified network URL with an optional block number. This allows local interaction with contracts deployed on mainnet or testnet without affecting the original network.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/forking.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstarknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via StarkNet Devnet API (POST /mint)\nDESCRIPTION: Sends a POST request to the `/mint` endpoint to add funds (mint tokens) to a specified StarkNet account address. The request body requires the 'address', the 'amount' in WEI (integer or float with zero fractional part), and optionally the 'unit' ('WEI' for ETH or 'FRI' for STRK, defaulting to 'WEI'). This initiates an ERC20 mint transaction on the respective token contract.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/balance.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /mint\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Payload for Aborting Blocks Using JSON\nDESCRIPTION: This JSON snippet shows the typical response after successfully aborting blocks in Starknet Devnet. It returns an 'aborted' array containing the hashes of all blocks that were aborted as a result of the request. This confirms which blocks have been reverted.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/blocks.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MockStarknetMessaging Contract via Devnet Postman Endpoint (bash/JSON)\nDESCRIPTION: Sends a cURL HTTP POST request to Devnet's Postman endpoint to load the mock Starknet messaging contract. The request expects the local Ethereum node at a specified RPC URL. On success, returns a JSON object with the deployed contract address. Prerequisite: Devnet and Anvil must be running.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' \\\n     -d '{\"network_url\": \"http://127.0.0.1:8545\"}' \\\n     http://127.0.0.1:5050/postman/load_l1_messaging_contract\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messaging_contract_address\":\"0x5fbdb2315678afecb367f032d93f642f64180aa3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State on Exit (Shell)\nDESCRIPTION: Starts StarkNet Devnet and configures it to automatically dump its state to the specified file path when it exits (e.g., upon receiving a SIGINT/Ctrl+C signal, but not SIGKILL). Requires the `starknet-devnet` executable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Setting Start Time via CLI\nDESCRIPTION: Demonstrates how to specify the initial timestamp for the Starknet Devnet genesis block using the `--start-time` command-line argument when launching the devnet. The value should be provided in Unix time seconds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/starknet-time.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --start-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Increasing Time Offset via JSON-RPC (JSON)\nDESCRIPTION: Increases the current block timestamp by a specified duration (offset) in Unix time seconds using the JSON-RPC method `devnet_increaseTime`. This method immediately generates a new block at the increased time. All subsequent blocks will inherit this time increment. The required parameter `time`, representing the duration to add, is provided within the `params` object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/starknet-time.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1->L2 Message with JSON-RPC\nDESCRIPTION: This snippet illustrates sending a mock L1 to L2 message using a JSON-RPC request. It requires specifying the `l2_contract_address`, `entry_point_selector` (must be an `l1_handler`), `l1_contract_address`, `payload`, `paid_fee_on_l1`, and `nonce`. A running L1 node is not required for this operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/postman.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [ \"0x1\", \"0x2\" ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\",\n      \"nonce\": \"0x0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Request and Response Logging in Devnet\nDESCRIPTION: Shows how to enable logging for request and response bodies in Starknet Devnet. This requires at least INFO level logging and uses the REQUEST and RESPONSE special log levels.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/server-config.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Preparing an Environment Variable File for Devnet - Bash\nDESCRIPTION: This snippet demonstrates how to author a shell script or .env file that exports multiple environment variables for Devnet configuration. Each line is an export statement assigning a value such as SEED or ACCOUNTS. Intended for shell-based workflows; this file can later be sourced to batch-configure Devnet. Requires no external dependencies.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Container - Shell\nDESCRIPTION: This snippet shows how to start a Starknet Devnet container with optional host and port mapping using the docker run command. Specify [HOST:], <PORT>, and optional [OPTIONS] to control the container's behavior. Docker must be installed and configured on the system. The internal port 5050 is exposed by default, but can be mapped to any desired port on the host as per the argument structure.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/docker.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Installing from crates.io (cargo)\nDESCRIPTION: This snippet shows how to install the starknet-devnet using the cargo install command.  This command downloads and builds the crate in release mode and copies the executable to the cargo bin directory. Before using this, the user must have Rust installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Illustrating CLI Argument Precedence\nDESCRIPTION: This snippet illustrates the precedence of CLI arguments over environment variables. Specifically, setting the SEED environment variable to 10 and then using the CLI argument `--seed 42` results in the seed value 42 being used.  This is because CLI arguments have higher precedence.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/cli.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request to Restart Devnet\nDESCRIPTION: This JSON-RPC call restarts the Devnet and can include an optional parameter to re-enable L1-L2 messaging after restart. The default behavior resets the network's contracts and blocks without the transactions loaded from dump.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"devnet_restart\",\n  \"params\": {\n    \"restart_l1_to_l2_messaging\": true | false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queues in Starknet Devnet Postman API (JSON, JSON-RPC)\nDESCRIPTION: Processes all enqueued messages since the last flush, transmitting them from L1 to L2 and vice versa for end-to-end integration testing. The flush can be executed with or without effect via the optional 'dry_run' boolean flag. Without 'dry_run', an active L1 node is required to complete the transmission. Flushing events are not dumpable and thus do not replay automatically during dump-load cycles.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/postman.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/flush\n```\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"dry_run\": true }\n```\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\",\n    \"params\": {\n      \"dry_run\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Impersonating Account - JSON-RPC\nDESCRIPTION: This JavaScript code snippet demonstrates the JSON-RPC request to impersonate a specific account in Starknet Devnet. It's used to enable the Devnet to treat transactions originating from a specified account as valid, even if the account doesn't exist locally. The `account_address` parameter specifies the address to be impersonated.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/account-impersonation.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Dump example - Starknet Devnet (Bash)\nDESCRIPTION: This command demonstrates how to run a Devnet instance within a Docker container and configure it to dump its state on exit. It utilizes bind mounts to link the host directory to a container directory allowing the dump file to be written to the host machine. It requires the path to the dump file. It's using shardlabs/starknet-devnet-rs image, listening on port 5050.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Dumping Devnet State After Each Block\nDESCRIPTION: This command sets the Devnet to automatically dump its state after processing each block, storing the data at a specified path. It uses the '--dump-on block' flag combined with '--dump-path'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Setting Host and Port Using CLI Arguments\nDESCRIPTION: Configures the server's network interface and port via CLI arguments. Ensures the server binds to the specified address and port, with guidance for Docker users on port publishing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/server-config.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --host <ADDRESS> --port <NUMBER>\n```\n\n----------------------------------------\n\nTITLE: Response for Block Abortion Request\nDESCRIPTION: Illustrates the JSON response format after a successful block abortion request via either the REST API or JSON-RPC. The response contains an array named `aborted`, which lists the block hashes of all the blocks that were aborted.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/blocks.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level in Docker using RUST_LOG Environment Variable\nDESCRIPTION: This command runs the `shardlabs/starknet-devnet-rs` Docker image and sets the `RUST_LOG` environment variable within the container. Replace `<LEVEL>` with the desired logging level from `TRACE`, `DEBUG`, `INFO`, `WARN`, `ERROR`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/server-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Account Impersonation via JSON-RPC (JavaScript/JSON)\nDESCRIPTION: Sends a JSON-RPC request to the StarkNet Devnet to enable automatic impersonation for all accounts that do not exist in the local Devnet state. This method takes no parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/account-impersonation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StarkNet Devnet with Environment Variables\nDESCRIPTION: Demonstrates setting StarkNet Devnet configuration parameters using environment variables instead of CLI arguments. Replace `<VAR1>`, `<VALUE>`, etc., with actual parameter names (found via `--help`) and their desired values. The second example shows that CLI arguments take precedence over environment variables if both are set for the same parameter (`--seed 42` overrides `SEED=10`).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/cli.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n<VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\nLANGUAGE: Bash\nCODE:\n```\nSEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Starknet Devnet Start Time via CLI\nDESCRIPTION: Starts the Starknet Devnet process with a specific initial block timestamp using the `--start-time` command-line argument. The provided `START_TIME_IN_SECONDS` value must be a Unix timestamp in seconds and greater than 0.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/starknet-time.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --start-time <START_TIME_IN_SECONDS>\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Dump with Custom Path\nDESCRIPTION: This request initiates a dump with a specified file path, either via JSON payload or JSON-RPC parameters, overriding default settings if provided. It facilitates targeted state snapshots.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\n{\n  // optional; defaults to CLI path\n  \"path\": <PATH>\n}\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Dry Run Mode for Flushing Messages in JSON\nDESCRIPTION: Example of how to perform a dry run of message flushing operation. The dry_run flag allows previewing the results of flushing without actually executing the operation on the L1 network.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"dry_run\": true }\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level When Starting Devnet\nDESCRIPTION: Shows how to specify the logging level as an environment variable when starting Starknet Devnet via command line. The logging level can be set to TRACE, DEBUG, INFO, WARN, or ERROR.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/server-config.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Loading State on Demand using HTTP POST (Bash/JSON)\nDESCRIPTION: This snippet uses a cURL POST request to load previously dumped state into a running Devnet instance via the '/load' endpoint. The call supplies a JSON body specifying the path to the dump, and includes the necessary content type header. The dump must be compatible with the running Devnet version and configuration. On success, the state will be reconstructed by replaying the recorded transactions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/dump-load-restart.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://<HOST>:<PORT>/load -d '{ \"path\": <PATH> }' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Requesting New Block Creation via HTTP POST Request\nDESCRIPTION: Shows how to request block creation using a simple HTTP POST request to the `/create_block` endpoint with no request body. The server responds with a JSON object containing the new block's hash. This RESTful approach allows triggering new block generation on demand when Devnet is started with appropriate block generation modes such as \"demand\" or intervals.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/blocks.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /create_block\n```\n\n----------------------------------------\n\nTITLE: Fetching and Extracting Pre-compiled starknet-devnet Binary - Shell\nDESCRIPTION: This snippet shows how to quickly download a platform-specific pre-compiled binary of starknet-devnet from GitHub releases, extract it to a target directory, and run the executable. It bypasses the need for local compilation, useful for fast setup or limited environments.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/install.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvz -C <TARGET_DIR>\\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Starting Devnet with Interval-based Block Generation using CLI (Bash)\nDESCRIPTION: This bash command starts Starknet Devnet with automatic block generation at a specified interval using the --block-generation-on CLI option. The numeric value specifies the interval in seconds; in this example, blocks are mined every 10 seconds. Requires the starknet-devnet CLI installed and accessible in the shell.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/blocks.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --block-generation-on 10\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in a Docker container\nDESCRIPTION: This command runs Starknet Devnet inside a Docker container, mapping the container's port 5050 to a specified host port. The HOST parameter can be optionally specified.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/docker.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Stop Impersonating Account - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `devnet_stopImpersonateAccount` JSON-RPC method.  The function stops the impersonation of an account that was previously impersonated using `devnet_impersonateAccount`. The only parameter is the account address to stop impersonating. The call has no returned data.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/account-impersonation.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Impersonate Account - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `devnet_impersonateAccount` JSON-RPC method to impersonate a specific account address. This allows transactions from the specified address to be executed without signature validation.  The expected input is a JSON object including the account address. It does not return any response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/account-impersonation.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Devnet\nDESCRIPTION: This Bash command illustrates how to set environment variables to configure the Starknet Devnet. The example shows how to define environment variables (VAR1, VAR2) and their respective values (VALUE). The `starknet-devnet` command then reads these environment variables during execution.  These variables override default values if applicable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/cli.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Getting Devnet CLI Help (Bash)\nDESCRIPTION: Shows how to display the command-line options and usage information for the standalone Starknet Devnet instance using the '--help' flag. This command is useful for discovering all available configuration parameters, their descriptions, and their corresponding environment variable names. Requires the 'starknet-devnet' executable to be in the system's PATH.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --help\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Config via JSON-RPC - JSON-RPC\nDESCRIPTION: This snippet provides a sample JSON-RPC request to retrieve the server configuration using the `devnet_getConfig` method. The response includes the `server_config` property. This is a JSON request body, not a shell command. Requires a JSON-RPC client.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/server-config.md#_snippet_7\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks via JSON-RPC in StarkNet Devnet\nDESCRIPTION: Sends a JSON-RPC request using the `devnet_abortBlocks` method, providing the `starting_block_hash` as a parameter within the `params` object. This action reverts the Devnet state by aborting blocks from the specified hash onwards, simulating mainnet block reorganizations. Requires Devnet to be run with `--state-archive-capacity full`. The response contains an array of the aborted block hashes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/blocks.md#_snippet_4\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_abortBlocks\",\n    \"params\": {\n        \"starting_block_hash\": BLOCK_HASH\n    }\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level in Dockerized Starknet Devnet - Shell\nDESCRIPTION: This snippet illustrates setting the logging level for a Dockerized Starknet Devnet instance using the `RUST_LOG` environment variable.  It enables the configuration of logging levels for the Devnet server running inside a Docker container.  The command runs a docker container and sets the logging level through the `-e` option.  Requires Docker and the `shardlabs/starknet-devnet-rs` image.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/server-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet with pre-funded accounts\nDESCRIPTION: These commands pull Starknet Devnet Docker images with pre-funded accounts, using `--seed 0`. This ensures the same set of accounts is always predeployed. The first command uses a specific version and the second uses the latest version.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/docker.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queues via JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: Makes a JSON-RPC request using the `devnet_postmanFlush` method to flush queued L1/L2 messages. If run with the optional `dry_run` parameter set to true, evaluates what would be transmitted but does not actually forward messages. Used to verify behavior before applying state changes. Output depends on Devnet implementation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\"\n}\n```\n\n----------------------------------------\n\nTITLE: Block Aborting - Request Example\nDESCRIPTION: This snippet shows an example of how to send a POST request to the /abort_blocks endpoint to request block abortion, specifying the starting block ID. Dependencies: Starknet Devnet instance with the appropriate configuration. Input: A POST request with the specified structure and a starting_block_id. Output: The Devnet will revert to the state of the last accepted block before the specified block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/blocks.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"starting_block_id\": BLOCK_ID\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Dumping Devnet State on Request\nDESCRIPTION: This command configures Devnet to dump its state upon receiving a request via HTTP POST or JSON-RPC, with an optional custom dump path that overrides CLI settings. It allows on-demand state snapshots during runtime.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --dump-on <MODE> [--dump-path <FILE>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Configuration via JSON-RPC\nDESCRIPTION: Shows the JSON-RPC request format to retrieve the server configuration using the devnet_getConfig method.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/server-config.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration File for Starknet Devnet\nDESCRIPTION: This shows loading configurations from a file. It first sources a file containing exported environment variables and then runs Starknet Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Body Size Limit in Devnet\nDESCRIPTION: Shows how to configure the maximum size of an incoming HTTP request body, which is useful for deploying and managing large contracts that require more space.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/server-config.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Enabling Starknet Devnet Restrictive Mode with Default Methods (Shell)\nDESCRIPTION: This snippet demonstrates enabling restrictive mode in Starknet Devnet without specifying any methods.  This will restrict the default set of methods described in the documentation. The command `starknet-devnet --restrictive-mode` starts Devnet in restrictive mode, and by default, it will restrict methods like `devnet_mint`, `devnet_load`, etc. This restricts the methods specified in the documentation to return either a JSON-RPC error or HTTP status 403 when called.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/restrictive.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --restrictive-mode\n```\n\n----------------------------------------\n\nTITLE: Adding the Starknet-Devnet plugin to asdf (Bash)\nDESCRIPTION: This command is used to add the starknet-devnet plugin to asdf. asdf-vm is a version manager for multiple languages and runtimes. It requires asdf to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ asdf plugin add starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: This snippet shows how to use a JSON-RPC request for minting tokens to a specified account using the devnet_mint method. Requires the jsonrpc version, a unique id, the method name 'devnet_mint', and a params object containing address, amount (in WEI or FRI), and optional unit. Address must be 0x-prefixed hex, and amount must be a whole number. The call results in minting the specified token and returns a standard JSON-RPC response with transaction details.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/balance.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response: Confirmation of Gas Price Modification\nDESCRIPTION: This JSON snippet represents the expected response from the Starknet Devnet server after successfully modifying the gas prices via the `setGasPrice` JSON-RPC method.  The response mirrors the request's gas parameter values, confirming the gas price changes. The format is a simple JSON object that reflects the applied gas price configuration.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/gas.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"gas_price_wei\": 1000000,\n  \"data_gas_price_wei\": 10000,\n  \"gas_price_fri\": 10000,\n  \"data_gas_price_fri\": 10000,\n  \"l2_gas_price_wei\": 10000,\n  \"l2_gas_price_fri\": 10000\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Dumping Starknet-Devnet State with Custom Path\nDESCRIPTION: HTTP POST request to trigger a Starknet-Devnet state dump with a custom file path. The path parameter is optional and defaults to the path specified via CLI if defined.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\nPOST /dump\n{\n  // optional; defaults to the path specified via CLI if defined\n  \"path\": <PATH>\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Block Creation - JSON-RPC\nDESCRIPTION: This JSON-RPC code snippet illustrates how to request the creation of a new block in the Devnet. It involves sending a POST request with the `devnet_createBlock` method. Dependencies: Starknet Devnet instance. Input: A JSON-RPC request with the method `devnet_createBlock`. Output: A JSON response containing the newly created block hash.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/blocks.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_createBlock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Request and Response Logging\nDESCRIPTION: Enables logging of request and response bodies by setting the `RUST_LOG` environment variable to include `REQUEST` and `RESPONSE`. This requires a minimum logging level of `INFO`. This snippet demonstrates enabling the logging of request and response data while specifying the INFO logging level.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/server-config.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Installing StarkNet Devnet from GitHub using Cargo (Shell)\nDESCRIPTION: This shell command installs StarkNet Devnet directly from the GitHub repository using Cargo. The '--locked' flag ensures dependency versions as specified in Cargo.lock are used, avoiding possible inconsistencies. It assumes Rust and Cargo are already installed. The resulting binary is installed in the user's Cargo bin directory. No input parameters are required for basic installation; advanced users can supply further cargo arguments if needed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/install.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Host Network (Linux)\nDESCRIPTION: This command runs the Starknet Devnet Docker container using the host network on Linux systems. This makes the Devnet accessible directly on the host's network interface. Requires Docker to be installed on a Linux host.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/docker.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State in Docker on Exit (Shell)\nDESCRIPTION: Runs StarkNet Devnet within a Docker container, configured to dump its state to a file (`mydump`) in a host directory (`/path/to/dumpdir`) upon exit (`--dump-on exit`). Uses Docker bind mount (`--mount type=bind`) to make the host directory accessible inside the container for writing the dump file. Assumes the host path `/path/to/dumpdir` exists and is correctly specified (absolute paths recommended). Requires Docker.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Starting Devnet with a specific time (CLI)\nDESCRIPTION: Starts the Starknet Devnet with a specified start time using the `--start-time` argument. The `START_TIME_IN_SECONDS` should be greater than 0.  This sets the initial timestamp for the first block. Input: START_TIME_IN_SECONDS (seconds). Output: Devnet instance starts with a defined timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/starknet-time.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --start-time <START_TIME_IN_SECONDS>\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Dumping Starknet-Devnet State (No Parameters)\nDESCRIPTION: JSON-RPC request to trigger a Starknet-Devnet state dump without specifying a path. Uses the method 'devnet_dump' to initiate the dumping process.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CLI Help for Starknet Devnet - Shell\nDESCRIPTION: This snippet demonstrates how to display all available command-line options for Starknet Devnet by invoking the --help flag. No dependencies except that the Starknet Devnet binary must be installed and available in the path. The command outputs usage instructions and available parameters to the terminal. No input parameters other than the help flag; output is text to stdout.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --help\n```\n\n----------------------------------------\n\nTITLE: Authoring Docker-Compatible Environment Files for Devnet - Shell\nDESCRIPTION: This snippet shows how to structure a file containing environment variable assignments for use as a Docker --env-file. Each line uses the KEY=VALUE format without export statements. The resulting file is suitable for use with Docker's --env-file flag to bulk set variables in the container environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance via HTTP GET in Starknet Devnet - HTTP\nDESCRIPTION: This example demonstrates retrieving the balance of a specified account using a GET request to the /account_balance endpoint. Required parameter is address (0x-prefixed hex string); optional parameters include unit (WEI or FRI, default WEI) and block_tag (latest or pending, default latest). The endpoint responds with the current balance details for the provided address.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/balance.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: API Request to Trigger Dump via POST /dump\nDESCRIPTION: This POST request to '/dump' initiates a dump of the Devnet state based on the configured dump mode. An optional 'path' parameter can specify the dump location; if omitted, the dump is included in the response body.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"devnet_dump\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": <PATH>\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via JSON-RPC in StarkNet Devnet (Basic)\nDESCRIPTION: Make a JSON-RPC request using the `devnet_getPredeployedAccounts` method to fetch details (like address, keys, class hash) of the predeployed accounts on the StarkNet Devnet instance. This basic request retrieves account details without balances.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/predeployed.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Docker Environment File Content for Devnet (--env-file)\nDESCRIPTION: Provides an example of the content for a simple key-value environment file specifically formatted for use with Docker's '--env-file' option. Unlike the standard Bash 'export' method, this file lists variables without 'export'. Each line is a simple 'VAR=VALUE' pair, directly parsed by Docker to set container environment variables.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Increasing Time in Starknet Devnet\nDESCRIPTION: Examples of increasing the block timestamp by a specified amount. This generates a new block and maintains the increment for subsequent blocks. Time increment is specified in Unix seconds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/starknet-time.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running StarkNet Devnet from Source Using Cargo (Shell)\nDESCRIPTION: This command builds and runs StarkNet Devnet directly from a locally cloned source repository using Cargo. Dependencies: Rust, Cargo, and a previously cloned repository. This runs the default Devnet configuration; for passing custom CLI arguments, use the extended form shown below. Output is an operational Devnet node built from the latest local source.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/install.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run\n\n```\n\n----------------------------------------\n\nTITLE: Installing a specific StarkNet Devnet version with asdf\nDESCRIPTION: Installs a specific version (e.g., `0.2.0`) of `starknet-devnet` using the `asdf` version manager. Requires the `starknet-devnet` asdf plugin.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ asdf install starknet-devnet 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts with Balances via JSON-RPC in StarkNet Devnet\nDESCRIPTION: Use the `devnet_getPredeployedAccounts` JSON-RPC method with the optional `with_balance` parameter set to `true` in the `params` object to retrieve predeployed account details along with their ETH (WEI) and STRK (FRI) balances at the pending state. Defaults to `false` if omitted.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/predeployed.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\",\n    \"params\": {\n        // optional; defaults to false\n        \"with_balance\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Container with Port Publishing - Shell\nDESCRIPTION: This snippet demonstrates starting a Starknet Devnet Docker container with custom port publishing by specifying the '-p' argument. Docker is required, and the host and container ports can be configured. The '[HOST:]<PORT>:5050' syntax binds a host's port to the container's internal port 5050. Additional '[OPTIONS]' can be appended for further configuration. Used to make Devnet accessible on a specific host port.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/docker.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time without Block Generation in Starknet Devnet\nDESCRIPTION: Examples of setting an exact timestamp without generating a new block. The timestamp will be used for the next block that is generated. Useful for preparing future block timestamps.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/starknet-time.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Loading Starknet-Devnet State\nDESCRIPTION: JSON-RPC request to load a Starknet-Devnet state from a specified file path. Uses the method 'devnet_load' to initiate the loading process.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_load\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables to Dockerized StarkNet Devnet\nDESCRIPTION: Illustrates how to pass environment variables to a Docker container running StarkNet Devnet using the `-e` flag for each variable. This allows configuration of the Devnet instance within the containerized environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/cli.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Using Docker to Persist StarkNet Devnet State\nDESCRIPTION: This snippet provides examples of running StarkNet Devnet via Docker with bind mounts to synchronize dump files between host and container. It specifies volume mounting and the correct command-line flags for dump handling.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Setting Time via HTTP without Immediate Block in Starknet Devnet\nDESCRIPTION: Sets the exact block and state timestamp using an HTTP POST request to `/set_time`, but prevents immediate block generation by setting `generate_block` to `false`. The timestamp will be applied when the next block is mined.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/starknet-time.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet-Devnet from source using cargo\nDESCRIPTION: This command runs Starknet-Devnet from the source code using `cargo run`.  It compiles the project and then executes the resulting binary. This command requires a local git clone of the Devnet repository. The user should be in the root directory of the cloned repository.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Deploying Solidity Contract L1L2 and Checking User Balance (bash)\nDESCRIPTION: Deploys the L1L2.sol contract for Ethereum-side message handling, using Forge's scripting utilities and broadcasts to the local Anvil node. Then checks the balance of user 0x1 by calling the contract method. Requires deployed MockStarknetMessaging, valid ETH_RPC_URL, and Forge installed. Prints transaction details and balance output.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npushd ./solidity\nforge script ./script/L1L2.s.sol:Deploy --broadcast --rpc-url $ETH_RPC_URL\npopd\n\ncast call 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 \"get_balance(uint256)(uint256)\" 0x1\n```\n\n----------------------------------------\n\nTITLE: Running installed Devnet (Bash)\nDESCRIPTION: This command executes the starknet-devnet executable after it has been installed via cargo.  The user must have cargo properly configured. This will run the executable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Adding Starknet-Devnet plugin to asdf\nDESCRIPTION: This command adds the Starknet-Devnet plugin to the `asdf` version manager.  The user needs to have `asdf` installed on their system. After running this command, `asdf` can be used to list and install different versions of the `starknet-devnet` package.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ asdf plugin add starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Confirming Gas Price Modification Response in Starknet Devnet JSON-RPC\nDESCRIPTION: This response snippet shows the JSON object returned by the Starknet Devnet server after processing a 'setGasPrice' JSON-RPC call. It echoes back the updated gas price fields ('gas_price_wei', 'data_gas_price_wei', 'gas_price_fri', 'data_gas_price_fri') to confirm the applied modifications. This response confirms that the parameters have been successfully set and will be applied starting with the next block unless 'generate_block' was true, triggering immediate block generation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/gas.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"gas_price_wei\": 1000000,\n    \"data_gas_price_wei\": 10000,\n    \"gas_price_fri\": 10000,\n    \"data_gas_price_fri\": 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from GitHub\nDESCRIPTION: Uses `cargo install` with the `--git` flag to clone and build Starknet Devnet directly from its GitHub repository. The `--locked` flag ensures dependency versions specified in `Cargo.lock` are used, promoting reproducible builds. Requires Rust, Cargo, and potentially `git`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/install.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Image by Commit Hash - Shell\nDESCRIPTION: This snippet retrieves a Starknet Devnet Docker image built from a specific commit by using the full 40-character SHA1 as the tag. Replace <COMMIT_HASH> with the actual commit hash. Docker must be installed. On completion, the image corresponding to that commit will be available for use.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/docker.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L2->L1 Transaction with REST API - JavaScript\nDESCRIPTION: Shows a POST request to /postman/consume_message_from_l2 for mock L2->L1 communication. Required fields are 'from_address', 'to_address', and 'payload'. An L1 node must be running. Incomplete parameters or invalid addresses prevent correct processing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Mint Token via POST Request - Starknet Devnet\nDESCRIPTION: This snippet demonstrates how to mint tokens by sending a POST request to the `/mint` endpoint. It specifies the address receiving the tokens, the amount to mint, and the unit (WEI or FRI). The response includes the new balance and transaction hash. This requires a running Starknet Devnet instance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/balance.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Devnet Dump with Custom Path via JSON-RPC\nDESCRIPTION: This snippet exemplifies issuing a JSON-RPC request with 'devnet_dump' method and optional 'path' parameter to trigger a dump in a specified location, either via CLI or HTTP request. Useful for automated dump processes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via HTTP GET in Starknet Devnet\nDESCRIPTION: HTTP GET request to fetch predeployed accounts with an optional parameter to include balance information in the response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/predeployed.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nGET /predeployed_accounts?[with_balance=true]\n```\n\n----------------------------------------\n\nTITLE: Running StarkNet Devnet from Source with Custom Arguments (Shell)\nDESCRIPTION: This command builds and runs StarkNet Devnet from source, allowing the user to provide custom command-line arguments to configure the instance. Dependencies: Rust, Cargo, and a cloned repository. Replace [ARGS] with desired options as per Devnet documentation. This enables granular control over execution parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/install.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run -- [ARGS]\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Request/Response Logging (Shell)\nDESCRIPTION: This command sets the RUST_LOG environment variable to include \"REQUEST\" and \"RESPONSE\" before starting starknet-devnet. This enables logging of the full request and response bodies, in addition to standard logs. Requires a base logging level of INFO or higher.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/server-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Setting Time via HTTP with Block Generation in Starknet Devnet\nDESCRIPTION: Sets the exact block and state timestamp for Starknet Devnet using an HTTP POST request to the `/set_time` endpoint. This method immediately generates a new block with the specified timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/starknet-time.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Loading StarkNet Devnet State in Docker (Docker CLI)\nDESCRIPTION: Runs the `shardlabs/starknet-devnet-rs` Docker image, mapping host port 5050 to the container's port and using a bind mount for `/path/to/dumpdir`. It loads the Devnet state from `/path/to/dumpdir/mydump` on startup via the `--dump-path` argument. Requires Docker, the existence of the host directory `/path/to/dumpdir`, and the dump file `mydump` within it.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_7\n\nLANGUAGE: Docker\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Running installed Starknet-Devnet executable\nDESCRIPTION: This command executes the installed Starknet-Devnet binary. It assumes that `cargo install` or `asdf install` have successfully installed the executable, and that the user's shell is configured to find the executable in the system's PATH. This command will start the Devnet server.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Add Starknet Devnet plugin (asdf)\nDESCRIPTION: This command adds the `starknet-devnet` plugin to the asdf version manager, enabling the installation and management of Starknet Devnet versions using asdf.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ asdf plugin add starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet State on Startup via CLI - Starknet Devnet - Bash\nDESCRIPTION: This command instructs Starknet Devnet to load its state from a previously created dump file at startup, using the '--dump-path <PATH>' parameter. The loaded state replaces the default initial state. Dependencies: starknet-devnet executable, existing state dump file. Required parameter: --dump-path pointing to the dump file. Input: none at runtime. Output: Restored Devnet environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance via Starknet Devnet GET Request and JSON-RPC\nDESCRIPTION: This snippet explains how to retrieve the token balance of a given account address on Starknet Devnet using either a GET HTTP request or a JSON-RPC call. The GET request queries the /account_balance endpoint with required address and optional parameters unit (defaults to WEI) and block_tag (defaults to latest). The JSON-RPC call uses method devnet_getAccountBalance with equivalent parameters. Expected input includes a 0x-prefixed hex string address, and the output returns the token balance accordingly.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/balance.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response after Setting Gas Price\nDESCRIPTION: This snippet represents the expected successful response from the Starknet Devnet server after calling the `setGasPrice` method. The response mirrors the gas price parameters provided in the request, confirming that the values have been accepted.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/gas.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"gas_price_wei\": 1000000,\n    \"data_gas_price_wei\": 10000,\n    \"gas_price_fri\": 10000,\n    \"data_gas_price_fri\": 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Timeout - Starknet Devnet - Shell\nDESCRIPTION: Configures the maximum duration an HTTP request can take to be processed by the Devnet server. The `--timeout` flag followed by the desired number of `<SECONDS>` specifies this limit. Useful for operations like deploying large contracts that may exceed the default timeout.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/server-config.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Running optimized Starknet Devnet from source in release mode\nDESCRIPTION: Command to build and run Starknet Devnet from source code in release mode, providing better performance at the cost of longer compilation time.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from crates.io using Cargo\nDESCRIPTION: Command to install Starknet Devnet from crates.io using Cargo package manager. This downloads the crate, builds it in release mode, and copies the executable to ~/.cargo/bin/.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State to a Custom Path via JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: This JSON-RPC request triggers a Starknet Devnet dump and specifies the output path for the dump file in the params object. The path defaults to the CLI-provided argument if omitted. Dependencies: JSON-RPC enabled Devnet instance. Input: JSON-RPC request with 'path' param. Output: dump file at specified path or data in response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\",\n    \"params\": {\n        // optional; defaults to the path specified via CLI if defined\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Timeout for Starknet Devnet - Bash\nDESCRIPTION: Sets a maximum processing duration for each HTTP request handled by Starknet Devnet using the --timeout argument. Requires starknet-devnet to be installed. Replace <SECONDS> with the desired timeout value; applicable when deploying or interacting with large contracts that may take longer to execute. The server enforces timeouts per request.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/server-config.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Prices with the devnet_setGasPrice JSON-RPC Method\nDESCRIPTION: A JSON-RPC request to modify gas prices on a Starknet Devnet. All parameters (gas_price_wei, data_gas_price_wei, gas_price_fri, data_gas_price_fri) are optional. The generate_block flag determines whether a new block is generated immediately after setting gas prices.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/gas.md#_snippet_0\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"setGasPrice\",\n    \"params\": {\n        \"gas_price_wei\": 1000000,\n        \"data_gas_price_wei\": 10000,\n        \"gas_price_fri\": 10000,\n        \"data_gas_price_fri\": 10000,\n        \"generate_block\": false,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CLI Help for Dockerized Starknet Devnet - Shell\nDESCRIPTION: This snippet shows how to run the --help command for Starknet Devnet in a Docker container. The docker run command executes the shardlabs/starknet-devnet-rs image, printing help text to the console. Requires Docker to be installed and the container image to be available. Outputs CLI usage instructions for Devnet running in Docker.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Launching Dockerized Devnet with an Environment File - Shell\nDESCRIPTION: This snippet demonstrates running Starknet Devnet in a Docker container while loading environment variables from a file through Docker's --env-file option. Requires that the configuration file exists and Docker is installed. The container will be started with all listed variables set appropriately.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Selecting Account Contract Class with CLI Flags in Bash\nDESCRIPTION: This snippet demonstrates how users can select the account contract class used for predeployment in Devnet. The `--account-class` option accepts values `cairo0` or `cairo1` to predeploy OpenZeppelin Cairo 0 (v0.5.1) or Cairo 1 (v0.8.1) accounts respectively. Alternatively, a custom Sierra artifact path can be provided via `--account-class-custom` to deploy a user-defined account contract.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/predeployed.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Loading Starknet-Devnet State\nDESCRIPTION: HTTP POST request to load a Starknet-Devnet state from a specified file path. This replaces the current state with the one in the provided file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\nPOST /load\n{ \"path\": <PATH> }\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level When Starting Dockerized Devnet\nDESCRIPTION: Shows how to specify the logging level when using the Docker image of Starknet Devnet. The environment variable is passed to the container using the -e flag.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/server-config.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Setting Request Body Size Limit - Starknet Devnet - Shell\nDESCRIPTION: Sets the maximum allowed size for incoming HTTP request bodies sent to the Devnet server. The `--request-body-size-limit` flag followed by the size in `<BYTES>` enforces this restriction. This is useful for handling large contract deployment payloads that might otherwise be rejected.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/server-config.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Stopping Account Impersonation - JSON-RPC\nDESCRIPTION: This JavaScript code snippet illustrates the JSON-RPC request to stop impersonating a previously specified account. This action disables the impersonation, meaning transactions from the account will no longer be treated as valid. The `account_address` parameter is required to identify the account to be stopped.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/account-impersonation.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping via POST Request - Starknet Devnet (JSON)\nDESCRIPTION: This snippet shows how to send a POST request to the `/dump` endpoint using JSON-RPC to trigger a dump in the Devnet instance. It sends a request with method `devnet_dump` and id '1'. The optional path parameter lets you specify the dump location.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Precedence over Environment Variables - Shell\nDESCRIPTION: This snippet exemplifies how a CLI argument (e.g., --seed 42) will override the corresponding environment variable (SEED=10) when both are supplied. Used to highlight prioritization rules for Devnet configuration. Requires no dependencies other than the presence of starknet-devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Disable Auto Impersonate - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `devnet_stopAutoImpersonate` JSON-RPC method.  It disables automatic account impersonation, which means that any accounts which don't exist locally will no longer be impersonated. The method takes no parameters and does not return data.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/account-impersonation.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via JSON-RPC in Starknet Devnet\nDESCRIPTION: JSON-RPC request to mint tokens using the devnet_mint method. Allows specifying an address, amount, and unit (WEI or FRI) for token minting.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/balance.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Body Size Limit (Shell)\nDESCRIPTION: This command starts starknet-devnet and sets the maximum allowed size for incoming HTTP request bodies using the --request-body-size-limit argument. This is necessary when dealing with large contracts or data that would exceed the default limit. Replace <BYTES> with the maximum size in bytes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/server-config.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Increasing Block Time via JSON-RPC (Generates Block)\nDESCRIPTION: Sends a JSON-RPC request using the `devnet_increaseTime` method to increase the block timestamp by a specified duration. The 'params' object must contain the 'time' key with the increment in seconds. This generates a new block, and the increment persists.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/starknet-time.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from a File and Starting Devnet - Shell\nDESCRIPTION: This snippet demonstrates how to source a previously-created environment variable file (such as .my-env-file) and then start the Starknet Devnet process in the same shell session. This approach loads all variables and runs Devnet with the corresponding environment configuration. It is suitable for batch and reproducible setups, and requires only standard shell support.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Requesting Block Abortion via REST Endpoint in Starknet Devnet (JSON)\nDESCRIPTION: This snippet demonstrates sending a POST request to the /abort_blocks endpoint to abort blocks from a specified block hash in Starknet Devnet. The request body must include the 'starting_block_hash' field, which determines where block reversion begins. The response will return an array of all aborted block hashes. This feature requires running Devnet with the --state-archive-capacity full flag and is subject to abortion limitations described in the documentation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/blocks.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /abort_blocks\n{\n    \"starting_block_hash\": BLOCK_HASH\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring StarkNet Devnet using Environment Variables (Bash)\nDESCRIPTION: Sets environment variables directly in the command line execution context before launching `starknet-devnet`. This allows passing configuration parameters using variable names instead of CLI arguments.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Account Impersonation via devnet_stopAutoImpersonate JSON-RPC (JSON)\nDESCRIPTION: Issues a JSON-RPC request with the 'devnet_stopAutoImpersonate' method to turn off automatic impersonation mode in Starknet Devnet. This endpoint requires no parameters and is used to restore default impersonation behavior, disabling automatic handling for accounts not present in the local state. The call returns an empty object upon success, after which transactions from unknown accounts will revert to standard validation and error rules.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/account-impersonation.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Run Starknet Devnet from source (Cargo, Release mode)\nDESCRIPTION: This command runs the Starknet Devnet from source using Cargo in release mode. Release mode enables compiler optimizations, resulting in improved performance at the cost of increased compilation time.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Create Block Response\nDESCRIPTION: Response received after creating a new block. The response includes the block hash of the newly created block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/blocks.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{'block_hash': '0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67'}\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet with State Archive Capacity Configuration - Bash\nDESCRIPTION: This snippet shows how to launch the Starknet Devnet specifying the state archive capacity using the --state-archive-capacity CLI flag. The <CAPACITY> parameter determines how much of the historic state to store: set to 'full' to enable full historic state support, or 'none' (the default) to only keep the latest state. Requires the 'starknet-devnet' tool installed and available in the system PATH. Input is provided via the command line, with no output unless an error occurs.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/historic-state.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via HTTP GET in StarkNet Devnet\nDESCRIPTION: Demonstrates how to make an HTTP GET request to the `/predeployed_accounts` endpoint to retrieve a JSON list of predeployed accounts. An optional query parameter `with_balance=true` can be added to include WEI and FRI balances.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/predeployed.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /predeployed_accounts?[with_balance=true]\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Body Size Limit via CLI\nDESCRIPTION: This command starts `starknet-devnet` and sets the maximum allowed size for an incoming HTTP request body using the `--request-body-size-limit` flag. This accommodates deploying or interacting with large contracts that require larger request payloads. Replace `<BYTES>` with the maximum size in bytes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/server-config.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Listing available StarkNet Devnet versions with asdf\nDESCRIPTION: Lists all the versions of `starknet-devnet` that are available for installation through the `asdf` version manager. Requires the `starknet-devnet` asdf plugin to be added.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ asdf list-all starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Increasing Time Offset via JSON-RPC in Starknet Devnet\nDESCRIPTION: Increases the current block timestamp by the specified amount using the `devnet_increaseTime` JSON-RPC method. Calling this method generates a new block with the increased timestamp and applies the offset to future blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/starknet-time.md#_snippet_5\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment File with Docker for Starknet Devnet\nDESCRIPTION: Command for running Starknet Devnet in Docker with configuration loaded from an environment file using the --env-file flag.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/cli.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level using RUST_LOG in Shell\nDESCRIPTION: This command sets the `RUST_LOG` environment variable to control the logging verbosity of the `starknet-devnet` process. Replace `<LEVEL>` with a desired level like `INFO`, `DEBUG`, `WARN`, or `ERROR`. This is for running Devnet directly.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/server-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Enabling Restrictive Mode with Default Methods in Starknet-Devnet\nDESCRIPTION: Shows how to start Starknet-Devnet with the restrictive mode enabled, using the default list of restricted methods. This will prevent access to all default devnet methods such as devnet_mint, devnet_load, etc.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/restrictive.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --restrictive-mode\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Dockerized StarkNet Devnet CLI (Bash)\nDESCRIPTION: Executes the `starknet-devnet-rs` command within a Docker container to display its command-line options and help text. The `--rm` flag ensures the container is removed after execution.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Timeout in Devnet\nDESCRIPTION: Shows how to specify the maximum amount of time an HTTP request can be served, which is useful for deploying and managing large contracts that take longer to execute.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/server-config.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Run Starknet Devnet from source with arguments (Cargo)\nDESCRIPTION: This command demonstrates how to pass command-line arguments to the Starknet Devnet when running it from source using Cargo. The `--` separator is necessary to distinguish arguments intended for Cargo from those intended for the Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Loading a Saved Devnet State at Startup\nDESCRIPTION: This snippet demonstrates how to initialize StarkNet Devnet with a pre-existing dump by providing the '--dump-path' parameter, which loads the state upon startup. It facilitates restarting from a saved session.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerized StarkNet Devnet using Environment Variables (Bash)\nDESCRIPTION: Uses the `docker run -e` option to pass environment variables directly to the container before starting the `starknet-devnet-rs` process inside it. This is the standard Docker way to set environment variables for a container.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Requesting Block Abortion (JSON)\nDESCRIPTION: Sends an HTTP POST request to the `/abort_blocks` endpoint of the Devnet node to abort blocks. The request body specifies the `starting_block_id`, which can be a block number or hash. Requires Devnet started with `--state-archive-capacity full`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/blocks.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"starting_block_id\": BLOCK_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from a File with Docker\nDESCRIPTION: This Docker command shows how to load environment variables from a file when running the Starknet Devnet within a Docker container. The environment file (`.my-env-file`) contains key-value pairs without the `export` prefix. The `--env-file` option specifies the path to this file, enabling the Docker container to access and apply the defined variables when the Devnet starts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/cli.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Setting CLI Parameters with Environment Variables - Shell\nDESCRIPTION: This snippet illustrates how to set Starknet Devnet configuration using inline environment variables before the process invocation. Variables like VAR1 and VAR2 represent parameter names and values to configure the Devnet instance. The CLI argument can override the environment variable if both are present. Useful for non-Docker usage and requires only the standard shell.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Configuring State Archive Capacity in Starknet Devnet CLI - Bash\nDESCRIPTION: This CLI snippet shows how to start Starknet Devnet with a custom value for the state archive capacity, using the --state-archive-capacity flag. It requires the starknet-devnet executable to be installed and accessible via the command line. The value provided for <CAPACITY> determines whether full state history is stored ('full') or only the most recent state ('none'), directly impacting the ability to query RPC endpoints for historical state data. The main parameter, <CAPACITY>, expects either 'full', 'none', or a numeric value, influencing data retention and query support.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/historic-state.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time Without Block Generation via HTTP POST (JSON)\nDESCRIPTION: Sets the desired Unix time for the *next* block to be generated using an HTTP POST request to `/set_time`, without immediately mining a new block. This is achieved by setting the optional `generate_block` parameter to `false`. The required `time` parameter specifies the target timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/starknet-time.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Running StarkNet Devnet container with port mapping\nDESCRIPTION: Shows how to start a Docker container with port forwarding, allowing access to StarkNet Devnet. Replace [HOST:]<PORT> with your desired host IP and port. This command depends on Docker runtime and network setup.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/docker.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Configuring Devnet Logging Level in Docker (Shell)\nDESCRIPTION: This command shows how to pass the RUST_LOG environment variable with a specific logging level to a dockerized instance of starknet-devnet-rs. The -e flag is used to set environment variables within the Docker container.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/server-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Configuring State Archive Capacity in starknet-devnet (Shell)\nDESCRIPTION: This command launches the starknet-devnet instance with a specified state archive capacity, enabling storage of the full state history if set to 'full'. Requires starknet-devnet to be installed and in the user's PATH. Replace <CAPACITY> with either 'full' for historic state access, or another value as desired. The input is the command itself, and there is no output unless the process fails; only works for RPC endpoints supporting historical state queries.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/historic-state.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1->L2 Message via Starknet Devnet Postman API (JSON, JSON-RPC)\nDESCRIPTION: Sends a mock transaction from L1 to L2 without needing a running L1 node. The request requires the L2 contract address, entry point selector, L1 contract address, message payload, paid fee on L1, and the nonce (which must be provided manually). A valid deployed L2 contract address and entry point selector are mandatory for block creation. The response returns a transaction hash confirming the message creation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/postman.md#_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/send_message_to_l2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\n      \"0x1\",\n      \"0x2\"\n    ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\",\n    \"nonce\":\"0x0\"\n}\n```\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\n        \"0x1\",\n        \"0x2\"\n      ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\",\n      \"nonce\":\"0x0\"\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Time in Starknet Devnet (POST)\nDESCRIPTION: Sets the exact time for the next block generation. This involves sending a POST request to the `/set_time` endpoint. The request body contains a `time` parameter, which specifies the desired time in Unix time seconds.  By default, this method generates a new block. It can be modified to skip block generation by setting `generate_block` to `false`. Input: `time` (in seconds). Output: Generates a new block or sets the time for the next block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/starknet-time.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Post request to /postman/flush to process message queue\nDESCRIPTION: Triggers the message queue flushing process, sending all queued messages from L1 to L2 and vice versa. Can perform a dry run by setting `dry_run` to true to preview actions without executing. Uses JSON-RPC and requires no body for actual flush, but accepts a parameter for dry run.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/postman.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"devnet_postmanFlush\",\n  \"params\": {\n    \"dry_run\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Predeployed Account Class (CLI) - Bash\nDESCRIPTION: Use this command-line option when starting Starknet Devnet to specify the type of account class to predeploy. You can choose between Cairo 0 (OpenZeppelin 0.5.1) or Cairo 1 (OpenZeppelin 0.8.1) accounts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/predeployed.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Account Info via StarkNet Devnet JSON-RPC (Basic)\nDESCRIPTION: Basic JSON-RPC request structure using the `devnet_getPredeployedAccounts` method to fetch information about the accounts predeployed on the StarkNet Devnet instance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/predeployed.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\"\n}\n```\n\n----------------------------------------\n\nTITLE: StarknetCore Contract Constructor - Solidity\nDESCRIPTION: This Solidity constructor initializes a contract by assigning an existing IStarknetCore contract to the starknetCore variable. It is an example from Starknet documentation, intended for L1-L2 communication where the L1 contract must interact with a StarknetCore implementation. Prerequisite: the argument starknetCore_ must be an address implementing IStarknetCore. Input: IStarknetCore contract instance. Output: sets contract-level variable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/postman.md#_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nconstructor(IStarknetCore starknetCore_) public {\n    starknetCore = starknetCore_;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from a File (Docker)\nDESCRIPTION: This snippet shows how to load environment variables from a file named `.my-env-file` when using the Dockerized Starknet Devnet.  The file should not contain the `export` keyword. The `--env-file` flag is used with the `docker run` command to specify the configuration file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/cli.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Selecting Predeployed Account Class via CLI in StarkNet Devnet\nDESCRIPTION: Use the `--account-class` command-line option when starting StarkNet Devnet to specify whether to predeploy accounts based on Cairo 0 (OpenZeppelin 0.5.1) or Cairo 1 (OpenZeppelin 0.8.1, default).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/predeployed.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\n----------------------------------------\n\nTITLE: Pulling a Zero-Seeded Accounts Image\nDESCRIPTION: Commands to pull Starknet Devnet images with predefined seed 0, which always predeployes the same set of funded accounts. Available for both specific versions and latest release.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/docker.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Persisting Devnet State Using Docker Run Command - Starknet Devnet - Bash\nDESCRIPTION: These Docker command snippets demonstrate how to enable persistent storage for Starknet Devnet dumps and loads by mounting a host directory into the container's file system. Required dependencies include Docker, an existing dump directory, and a compatible version of the 'shardlabs/starknet-devnet-rs' image. Key parameters: -p for port mapping, --mount for directory binding, and --dump-path or --dump-on/exit for specifying behavior. Input: docker run command; output: stateful Devnet instance with files shared with host system.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/dump-load-restart.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Retrieve Predeployed Accounts - JSON-RPC (Without Balance)\nDESCRIPTION: This JSON-RPC request retrieves information about the predeployed contracts and accounts in the Starknet Devnet.  It uses the `devnet_getPredeployedAccounts` method.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/predeployed.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in Lite Mode Shell Command\nDESCRIPTION: This shell command runs the Starknet Devnet with the --lite-mode flag, enabling a minimal configuration that skips calculating block hashes. No external dependencies are needed aside from having Starknet Devnet installed. The command accepts additional flags for further customization, but --lite-mode specifically reduces computational overhead and may forego certain blockchain features, making it ideal for development or testing scenarios that do not require all functionalities.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/lite.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request for Dumping Starknet-Devnet State with Custom Path\nDESCRIPTION: JSON-RPC request to trigger a Starknet-Devnet state dump with a custom file path. The path parameter is optional and defaults to the path specified via CLI if defined.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\",\n    \"params\": {\n        // optional; defaults to the path specified via CLI if defined\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks in Starknet Devnet Using HTTP POST\nDESCRIPTION: Shows the HTTP POST request to the `/abort_blocks` endpoint with a JSON body specifying the `starting_block_id` parameter. This request aborts all blocks from the given block ID up to the current latest block, reverting transactions and network state accordingly. The response is a JSON object listing the aborted block hashes. This is the RESTful equivalent to the JSON-RPC abort method and requires the full state archive capacity mode in Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/blocks.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /abort_blocks\n{\n    \"starting_block_id\": BLOCK_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from Source using Cargo in Bash\nDESCRIPTION: Builds and runs the Starknet Devnet project directly from source after cloning the GitHub repository. The default command triggers a debug build and runs the binary. Optional CLI arguments can be passed after --. Using --release builds an optimized release version with longer compile time. Requires Rust toolchain and dependencies installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/install.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -- [ARGS]\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release\n```\n\n----------------------------------------\n\nTITLE: Running from source in release mode (cargo)\nDESCRIPTION: This command builds and runs the starknet-devnet project from source with optimizations enabled by the --release flag. This generally results in faster performance, though it may take more time to compile. Requires the user to have cloned the Devnet repository, and that Rust and Cargo are installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Using Docker on Linux with Host Networking\nDESCRIPTION: Command to run Starknet Devnet container in host network mode on Linux for seamless port accessibility, bypassing port translation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/docker.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Displaying Help Message for Dockerized Starknet Devnet\nDESCRIPTION: This snippet shows how to get the help message when using a dockerized version of Starknet Devnet.  The command `docker run --rm shardlabs/starknet-devnet-rs --help` retrieves and displays help information using the docker image.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/cli.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Launching StarkNet Devnet with Custom Restricted Methods (Shell)\nDESCRIPTION: Starts StarkNet Devnet with restrictive mode enabled, specifically forbidding the 'devnet_dump' and 'devnet_config' methods provided as arguments. This allows fine-grained control over which Devnet operations are permitted, overriding the default set. It's crucial that method names are spelled correctly, otherwise Devnet will fail to start.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/restrictive.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --restrictive-mode devnet_dump devnet_config\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty Block with StarkNet Devnet HTTP API - HTTP\nDESCRIPTION: Sends a POST request to the /create_block endpoint with no pending transactions to create an empty block. The resulting block contains no transactions and is identified by a unique block hash in the response. This is used for advancing the chain without adding transactions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/blocks.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /create_block\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time with Block Generation via HTTP POST\nDESCRIPTION: Sets the exact timestamp in Unix time seconds and generates a new block. This HTTP endpoint allows developers to jump to a specific point in time in the Starknet Devnet environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/starknet-time.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Configuration (JSON)\nDESCRIPTION: This snippet shows an example response from the Config API, which can be accessed via a GET request to `/config` or a JSON-RPC request to `devnet_getConfig`. The response is a JSON object containing various configuration parameters, which corresponds to CLI input parameters (specified and default ones).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_fri\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_fri\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000,\n    \"restricted_methods\": null\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false,\n  \"eth_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\",\n  \"strk_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timeout in Starknet Devnet - Shell\nDESCRIPTION: This command sets the timeout for HTTP requests served by the Starknet Devnet server, allowing for managing larger contracts that might take longer to execute.  It uses the `--timeout` CLI argument followed by the number of seconds.  Requires the `starknet-devnet` binary.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/server-config.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via JSON-RPC in Starknet Devnet (With Balance)\nDESCRIPTION: JSON-RPC request to retrieve information about predeployed accounts in Starknet Devnet with an optional parameter to include balance details.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/predeployed.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\",\n    \"params\": {\n        // optional; defaults to false\n        \"with_balance\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mock L2->L1 API Response Example - Starknet Devnet - JavaScript\nDESCRIPTION: Specifies a sample successful API response for L2->L1 message consumption, returning a message_hash string as the identifier for the processed message. Used for validating test results when working with Devnet's L2-L1 messaging interface.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\"message_hash\": \"0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Start Time via CLI in Starknet Devnet\nDESCRIPTION: Configures the timestamp used for mining the genesis block of Starknet Devnet by providing the `--start-time` command-line option. The value should be a positive Unix time in seconds, overriding the default behavior of using the current time.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/starknet-time.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --start-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Adding Starknet Devnet plugin with asdf version manager\nDESCRIPTION: Command to add the Starknet Devnet plugin to asdf version manager, enabling easy installation and version management of Starknet Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf plugin add starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Response Format for Gas Price Modification in Starknet-Devnet\nDESCRIPTION: The response from the server after a gas price modification request. It mirrors the requested gas parameters, confirming the successful modification of gas prices.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/gas.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"gas_price_wei\": 1000000,\n    \"data_gas_price_wei\": 10000,\n    \"gas_price_fri\": 10000,\n    \"data_gas_price_fri\": 10000,\n}\n```\n\n----------------------------------------\n\nTITLE: Running from source with CLI params (cargo)\nDESCRIPTION: This command runs the starknet-devnet project from its source code using cargo run, allowing for the specification of command line interface (CLI) parameters. The parameters are appended after the '--' separator. This requires that the user has cloned the Devnet repository, and that Rust and Cargo are installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Stopping Automatic Account Impersonation via JSON-RPC (Starknet Devnet)\nDESCRIPTION: This JSON-RPC request demonstrates how to use the `devnet_stopAutoImpersonate` method to disable the automatic account impersonation behavior previously enabled by `devnet_autoImpersonate`. After this call, only accounts manually marked for impersonation or locally deployed accounts will bypass or pass signature validation, respectively.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/account-impersonation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling a Specific Version of StarkNet Devnet Docker Image\nDESCRIPTION: Downloads a specific version of the StarkNet Devnet Docker image from Docker Hub. Replace `<CRATES_IO_VERSION>` with the desired version number that has been published on crates.io.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/docker.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Pulling the latest Starknet Devnet Docker image\nDESCRIPTION: This command pulls the latest Starknet Devnet Docker image from Docker Hub. This image corresponds to the most recently published version on crates.io.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/docker.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Fetching Predeployed Accounts via JSON-RPC in JSON\nDESCRIPTION: These snippets depict how to request predeployed account information using JSON-RPC calls. The method `devnet_getPredeployedAccounts` retrieves the accounts, optionally including their balances by specifying `\"with_balance\": true` in the parameters. The response provides account keys and funding details at the pending state, facilitating integration with JSON-RPC-compatible clients.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/predeployed.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\",\n    \"params\": {\n        // optional; defaults to false\n        \"with_balance\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Configuration - JSON\nDESCRIPTION: This JSON snippet represents a sample response from the `/config` endpoint or the `devnet_getConfig` JSON-RPC method.  It displays the current configuration of the Devnet instance, mirroring CLI input parameters and their values.  The provided configuration includes settings such as seed, total_accounts, and chain_id. There are some parameters that may be omitted. The structure provides key-value pairs representing various configuration settings.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/api.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_fri\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_fri\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000,\n    \"restricted_methods\": null\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false,\n  \"eth_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\",\n  \"strk_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with Environment Variables\nDESCRIPTION: This command shows how to set environment variables directly when executing the Starknet Devnet.  VAR1 and VAR2 represent environment variables.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Container Binding to Localhost on Mac/Windows - Bash\nDESCRIPTION: Shows how to run the container with port binding explicitly limited to the localhost interface (127.0.0.1) on Mac or Windows platforms. This ensures the Devnet instance is only accessible locally and reduces risk from network exposure. The default internal port 5050 is mapped to the host's 5050 port on localhost.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1-to-L2 Transaction via POST Endpoint using HTTP\nDESCRIPTION: This POST endpoint '/postman/send_message_to_l2' allows sending mock messages from L1 to L2 without requiring a running L1 node. The request body must include the deployed L2 contract address, entry point selector, L1 contract address, the payload array of data, the paid fee on L1, and a manually specified nonce (required because nonce is typically calculated by Starknet on L1). A valid L2 contract and entry point selector are necessary to create a new block. The response returns the transaction hash confirming the mock transaction submission.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/postman.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /postman/send_message_to_l2\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\n      \"0x1\",\n      \"0x2\"\n    ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\",\n    \"nonce\":\"0x0\"\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: Loading L1 Messaging Contract with REST API in JSON\nDESCRIPTION: Example of how to load a MockStarknetMessaging contract on L1 using the REST API. The network_url parameter specifies the L1 node, and the optional address parameter can be used to fetch an existing contract instead of deploying a new one.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network_url\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\" // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Request Body Size Limit - Shell\nDESCRIPTION: This snippet demonstrates how to set the maximum size of an incoming HTTP request body. This command is used to manage large contracts by limiting the space the request occupies. The `--request-body-size-limit` CLI argument is used, followed by the size in bytes.  Requires the `starknet-devnet` binary.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/server-config.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in Lite Mode - Shell Example\nDESCRIPTION: This shell command starts the Starknet Devnet in lite mode by adding the --lite-mode flag. No extra dependencies besides starknet-devnet itself are required. The command disables select features, currently skipping block hash calculation to improve speed. Input is the shell command and output is the launch of a minimized devnet; no additional flags or configuration is necessary.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/lite.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Pulling the Latest Starknet Devnet Docker Image\nDESCRIPTION: Command to download the latest version of the Starknet Devnet Docker image from Docker Hub, suitable for linux/amd64 and linux/arm64 platforms.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/docker.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from File for Starknet Devnet\nDESCRIPTION: Commands for loading environment variables from a file when running Starknet Devnet. The first command loads and keeps variables in the current shell, while the second uses a subshell to prevent environment pollution.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Docker with Explicit Port Publishing (Bash)\nDESCRIPTION: Demonstrates the necessary command to map the container's internal port 5050 to a specified port on the host machine, particularly relevant for Mac and Windows users where host networking is unavailable. This makes the Devnet API accessible from the host.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/docker.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Docker Image by Commit Hash - Shell\nDESCRIPTION: This snippet shows how to download a Docker image for Starknet Devnet that corresponds to a specific commit on the main branch, identified by its full SHA1 hash. Requires Docker and the commit hash. This enables advanced users to test with development images matching particular source code states.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/docker.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Dockerized Starknet Devnet\nDESCRIPTION: This snippet demonstrates setting environment variables when using Docker to run Starknet Devnet. It uses the `docker run -e` flag to pass environment variables to the container.  Each `-e` flag sets one variable. It uses a shardlabs/starknet-devnet-rs docker image.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/cli.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration File for Dockerized Starknet Devnet\nDESCRIPTION: This shows loading environment variables from a file into a Docker container.  It removes the `export` commands from the environment file before running the docker container. The `--env-file` option passes the configuration file to Docker.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/cli.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Running installed Starknet Devnet executable\nDESCRIPTION: Command to run the Starknet Devnet executable after installation. This starts the local Starknet development network.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Account Info with Balances via JSON-RPC (Params)\nDESCRIPTION: JSON-RPC request demonstrating the use of the `params` object with the `devnet_getPredeployedAccounts` method. Setting the optional `with_balance` parameter to `true` includes the ETH and STRK balances in the response. It defaults to `false` if omitted.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/predeployed.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\",\n    \"params\": {\n        // optional; defaults to false\n        \"with_balance\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Configuration - JSON Response\nDESCRIPTION: This snippet shows an example JSON response received when querying the Devnet configuration using a `GET /config` or the JSON-RPC method `devnet_getConfig` request. It contains various configuration parameters like seed, account details, chain ID, and server settings.  Understanding the parameters requires understanding the CLI parameters used to start devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_fri\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_fri\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000,\n    \"restricted_methods\": null\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false,\n  \"eth_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\",\n  \"strk_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet with Forking - Shell\nDESCRIPTION: This shell command launches a Starknet Devnet instance with forking enabled by specifying the origin network's JSON-RPC API endpoint via the --fork-network option. The optional --fork-block parameter allows you to set a specific block number to fork from; if omitted, it defaults to the latest block at startup. No state is modified on the original network, and Devnet's state is prioritized when handling requests.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/forking.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request to Retrieve Starknet Devnet Server Configuration\nDESCRIPTION: JSON request body for querying the Starknet Devnet server configuration using the JSON-RPC protocol. The `devnet_getConfig` method returns server configuration details in the response under the `server_config` field. Intended to be sent to the Devnet JSON-RPC endpoint for configuration introspection.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/server-config.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling a specific version of Starknet Devnet Docker image\nDESCRIPTION: This command pulls a specific version of the Starknet Devnet Docker image, identified by its corresponding Crates.io version tag.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/docker.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance Using GET Request in Starknet Devnet\nDESCRIPTION: Sends a GET request to the /account_balance endpoint to check an account's balance. Requires address parameter, with optional unit (defaults to WEI) and block_tag (defaults to latest) parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/balance.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: Installing a specific version of Starknet-Devnet using asdf\nDESCRIPTION: This command installs a specific version of Starknet-Devnet, in this example, version 0.2.0, using `asdf`. This command gives more control over which specific version is installed. The user needs to replace `0.2.0` with the desired version. Requires the asdf plugin for starknet-devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ asdf install starknet-devnet 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in release mode\nDESCRIPTION: Builds and runs Starknet Devnet from source in release mode for optimized performance. This approach requires longer compilation time but provides better runtime performance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Downloading and running pre-compiled Starknet Devnet binary\nDESCRIPTION: Command to download a platform-specific pre-compiled binary of Starknet Devnet from GitHub releases, extract it, and run it. This avoids compilation time during installation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvz -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Loading StarkNet Devnet State on Startup (Bash)\nDESCRIPTION: Starts StarkNet Devnet using the `starknet-devnet` command, initializing its state from a previously saved dump file. The path to the dump file is specified using the `--dump-path <PATH>` argument. Note this argument name differs from Devnet-py (`--load-path`).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance via JSON-RPC in Starknet Devnet\nDESCRIPTION: JSON-RPC request to check account balance using the devnet_getAccountBalance method, with parameters for address, unit, and block tag.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/balance.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Install latest Starknet Devnet version (asdf)\nDESCRIPTION: This command installs the latest version of Starknet Devnet using the asdf version manager. It uses the `latest` keyword to specify that the most recent version should be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ asdf install starknet-devnet latest\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from File with Docker\nDESCRIPTION: This command loads environment variables from a file (e.g., `.my-env-file`) and passes them to the Docker container. The `--env-file` flag is used to specify the file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/cli.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance via JSON-RPC in Starknet Devnet - JSON\nDESCRIPTION: This snippet shows how to check an account's balance using the devnet_getAccountBalance JSON-RPC method. The request includes the address, unit (WEI or FRI), and block_tag (latest or pending), formatted as JSON-RPC. The response provides the current balance for the specified parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/balance.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatic Block Creation Using CLI Options in Bash\nDESCRIPTION: Demonstrates how to start the Starknet Devnet with automatic periodic block generation using the CLI option `--block-generation-on <INTERVAL>`. Shows timing examples of transactions and resulting block generation at specified intervals. This snippet provides context on the operational flow of Devnet when configured for timed block creation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/blocks.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# t\n$ starknet-devnet --block-generation-on 10\n\n# t + 1s\n# user: send tx1\n\n# t + 4s\n# user: send tx2\n\n# t + 10s\n# Devnet: block automatically generated, contains tx1 and tx2\n\n# t + 12s\n# user: send tx3\n\n# t + 14s\n# user: invoke empty block creation\n# Devnet: generated block contains tx3\n\n# t + 20s\n# Devnet: block automatically generated, contains no txs (manual creation did not restart the counter)\n```\n\n----------------------------------------\n\nTITLE: Building Projects with Forge (Shell)\nDESCRIPTION: Compiles the smart contracts in the current project directory using the Forge build command. This checks for compilation errors and generates artifacts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/solidity/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ forge build\n```\n\n----------------------------------------\n\nTITLE: Getting Dockerized Devnet CLI Help (Bash)\nDESCRIPTION: Demonstrates how to view the command-line options and usage information for the Dockerized Starknet Devnet image. It uses 'docker run' to execute the container temporarily ('--rm') and passes the '--help' flag to the Devnet process inside. This allows inspection of the configuration parameters supported by the Devnet version within the specified Docker image.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from source with arguments\nDESCRIPTION: Command to run Starknet Devnet from source code with additional command-line arguments, allowing for customized configuration.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Dockerized Starknet Devnet\nDESCRIPTION: This command shows how to set environment variables when running Starknet Devnet within a Docker container. The `-e` flag is used to pass each variable to the container.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Running Devnet Container with Port Publishing (Mac/Windows)\nDESCRIPTION: Runs a StarkNet Devnet container on Mac or Windows, specifically publishing the container's internal port 5050 to a chosen `[HOST:]<PORT>` on the host machine using the `-p` flag. This method is required as `--network host` is generally not supported on these platforms.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/docker.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from File in Dockerized Starknet Devnet - Shell\nDESCRIPTION: Runs a Docker container for the Starknet Devnet and loads environment variables from a specified file using the --env-file flag. The environment file (.my-env-file) must be properly formatted (KEY=VALUE, no export). This approach streamlines container configuration and supports multiple variables.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Mint Token via JSON-RPC Request - Starknet Devnet\nDESCRIPTION: This JSON-RPC request, using method name `devnet_mint`, functions identically to the `/mint` POST request.  It specifies the same parameters: address, amount, and unit.  It initiates a transaction to mint tokens on the specified token contract. Requires a Starknet Devnet instance and a JSON-RPC client.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/balance.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Time in Starknet Devnet (JSON-RPC)\nDESCRIPTION: Sets the exact time using JSON-RPC `devnet_setTime` method. The method takes a `time` parameter, representing the desired time in Unix time seconds.  This method also generates a new block by default, but can be configured not to by setting `generate_block` to `false` in the params.  Input: `time` (in seconds). Output: Generates a new block or sets the time for the next block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/starknet-time.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging and Handling Exceeded Bytecode Size in Class Declaration\nDESCRIPTION: This snippet logs a warning when a class declaration exceeds the bytecode size limit but remains within the serialized class size limit. It relates to managing class size constraints in the StarkNet development process, alerting developers to potential deployment issues.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/test_artifacts/cairo1/too_big/compilation_info.txt#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nIntercepted declaration, logged; this exceeds bytecode size, but not the serialized class size\n```\n\n----------------------------------------\n\nTITLE: Listing installable versions via asdf (Bash)\nDESCRIPTION: This command is used to show all installable versions of starknet-devnet using asdf.  It requires asdf and the starknet-devnet plugin to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ asdf list-all starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Full E2E Script for Node and Test Orchestration (bash)\nDESCRIPTION: Executes the 'run_e2e.sh' bash script to automate all setup and messaging tests between Starknet Devnet and Ethereum Anvil as described in this guide. This script assumes correct environment and directory structure. Ensures reproducibility and saves time compared to manual step execution.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nbash run_e2e.sh\n```\n\n----------------------------------------\n\nTITLE: Block Aborting - JSON-RPC\nDESCRIPTION: This JSON-RPC code snippet demonstrates how to abort blocks using the `devnet_abortBlocks` method. It involves sending a POST request with the `devnet_abortBlocks` method and a parameter specifying the starting block ID for abortion. Dependencies: Starknet Devnet in `--state-archive-capacity full` mode. Input: A JSON-RPC request with method `devnet_abortBlocks` and `starting_block_id`. Output: A JSON response containing the aborted block hashes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/blocks.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_abortBlocks\",\n    \"params\": {\n        \"starting_block_id\": BLOCK_ID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devnet for On-Demand Dumping (Shell)\nDESCRIPTION: Starts StarkNet Devnet configured to allow dumping on request via API calls using `--dump-on request`. Optionally specifies a default dump path (`--dump-path <FILE>`). Note that on-demand dumping is also possible if started with `--dump-on exit` or `--dump-on block`. Requires the `starknet-devnet` executable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --dump-on <MODE> [--dump-path <FILE>]\n```\n\n----------------------------------------\n\nTITLE: Pulling Pre-Seeded StarkNet Devnet Docker Images\nDESCRIPTION: Downloads StarkNet Devnet Docker images that are pre-configured with a fixed set of funded accounts (equivalent to running with `--seed 0`). Use a specific version tag appended with `-seed0` or `latest-seed0` for the latest pre-seeded version.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/docker.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Version of Starknet Devnet Docker Image - Shell\nDESCRIPTION: This snippet illustrates how to pull a specific version of the Starknet Devnet Docker image that matches a release on crates.io. Replace '<CRATES_IO_VERSION>' with the desired version tag. Docker is required, and the correct tag allows for reproducible environment setups using particular versions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/docker.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in release mode\nDESCRIPTION: Command to build and run Starknet Devnet in release mode for optimized performance, though with longer compilation time.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from File and Running StarkNet Devnet in Subshell (Bash)\nDESCRIPTION: Similar to the previous snippet, but wraps the commands in parentheses `()`. This executes the `source` command and `starknet-devnet` within a subshell, preventing the environment variables set by `source` from persisting in the parent shell after the subshell exits.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Consuming Mock L2->L1 Message with POST\nDESCRIPTION: This snippet demonstrates how to consume a mock L2 to L1 message using a POST request. It requires specifying the `from_address` (L2 contract address), `to_address` (L1 contract address), and `payload`. A running L1 node is required for this operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/postman.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration with CLI Arguments\nDESCRIPTION: This snippet demonstrates the precedence of CLI arguments over environment variables. In the example, the `SEED` environment variable is set to `10`, but the `--seed` CLI argument is used to override it with the value `42` when running Starknet Devnet. Therefore Devnet will use a seed value of 42.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/cli.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Loading Dockerized Devnet Config from File (--env-file) (Bash)\nDESCRIPTION: Demonstrates how to use Docker's '--env-file' option to load multiple environment variables for a container from a specified file. The file should contain 'VAR=VALUE' pairs (see example). This simplifies passing numerous configuration parameters to the Dockerized Devnet instance without listing them all with individual '-e' flags, promoting cleaner command lines.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Account Balance Check via REST API\nDESCRIPTION: This snippet shows how to check an account's balance by sending a GET request to /account_balance with specified address, unit, and block tag parameters. Default unit is FRI and default block tag is latest. The response includes the balance, unit, and potentially other metadata. It requires an active Devnet environment with account balance endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/balance.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: Pulling a Starknet Devnet Docker image by commit hash\nDESCRIPTION: This command pulls a Starknet Devnet Docker image tagged with the commit hash of the main branch, ensuring you get a specific build.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/docker.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Displaying Starknet Devnet Help with CLI\nDESCRIPTION: This snippet demonstrates how to use the `--help` flag with the Starknet Devnet command to display all available CLI options. It provides instructions for both standalone and Dockerized Devnet setups.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/cli.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --help\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via Starknet Devnet JSON-RPC Method\nDESCRIPTION: This snippet demonstrates the JSON-RPC request format for minting tokens using the devnet_mint method. Parameters include the recipient address, the amount to mint (in WEI or FRI), and the token unit. The response is a JSON object containing the updated balance, the unit used, and the transaction hash, allowing for programmatic token minting interactions with the Devnet's ERC20 token contracts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/balance.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing specific version via asdf (Bash)\nDESCRIPTION: This command installs a specific version (0.2.0 in this case) of starknet-devnet using asdf. It requires asdf and the starknet-devnet plugin to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ asdf install starknet-devnet 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Starknet Devnet Docker Help\nDESCRIPTION: This command displays the available command-line options for configuring the Starknet Devnet instance when using the Docker image. It shows all configurable parameters and their default values within the Docker context.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Running starknet-devnet with forking configuration in Bash\nDESCRIPTION: This command starts starknet-devnet in forking mode by specifying a JSON-RPC API provider URL and optionally a specific block number to fork from. When running in this mode, all calls will first check Devnet's state before falling back to the forking block state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/forking.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Impersonating an Account via Starknet Devnet JSON-RPC (JavaScript)\nDESCRIPTION: Uses the devnet_impersonateAccount JSON-RPC method to mark a specific account address as impersonated in the local Devnet state, allowing transactions from this account to bypass signature validation errors. Requires running Devnet in forking mode. The request takes a single parameter, account_address, which is the hexadecimal string of the Starknet account to impersonate. Returns an empty response upon success.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/account-impersonation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Starknet Devnet Time via JSON-RPC\nDESCRIPTION: This snippet demonstrates how to increase the block timestamp in Starknet devnet using the `devnet_increaseTime` JSON-RPC method. The `params` object should include the `time` parameter, representing the increment in seconds. This generates a new block and affect all subsequent blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/starknet-time.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Restarting Devnet\nDESCRIPTION: This command restarts the Devnet, resetting contracts, blocks, and storage to their initial state. It does not affect transactions loaded from a dump. The restart is facilitated via an HTTP POST or JSON-RPC call with method 'devnet_restart'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST http://localhost:PORT/restart\n```\n\n----------------------------------------\n\nTITLE: Dumping State After Each Block with Starknet Devnet (Bash)\nDESCRIPTION: This command runs Starknet Devnet, configured to save its state to a specified path after every block is processed. This provides more granular persistence, useful for minimizing data loss on crashes. Requires the same dependencies as the exit mode, with '--dump-on block' to trigger dumps on each block addition. The storage path must be accessible and writable by the process.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/dump-load-restart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Configuration (GET)\nDESCRIPTION: This snippet shows the expected JSON response from a GET request to the `/config` endpoint.  It demonstrates how to retrieve the current configuration of the Devnet instance. The output is a JSON representation of the command-line input parameters and defaults, with some parameters omitted.  It is meant to be interpreted as a JSON mapping of CLI input parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_strk\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_strk\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000\n  },\n  \"blocks_on_demand\": false,\n  \"lite_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Mock L2-to-L1 Message Consumption via JSON-RPC and HTTP POST\nDESCRIPTION: Simulates a message from L2 being consumed on L1 by providing 'from_address' (L2 contract), 'to_address' (L1 contract), and the message payload. Requires a running L1 node to process the message properly. This method mocks the L2 contract action that triggers message consumption and enables testing the L1 side of the communication flow.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/postman.md#_snippet_3\n\nLANGUAGE: HTTP POST\nCODE:\n```\nPOST /postman/consume_message_from_l2\n\n{\n    \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n}\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n  }\n}\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"message_hash\": \"0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time with Block Generation via JSON-RPC\nDESCRIPTION: The JSON-RPC equivalent of the /set_time endpoint. Sets the exact timestamp in Unix time seconds and generates a new block using the devnet_setTime method.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/starknet-time.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Solidity Constructor: Replacing IStarknetCore with MockStarknetMessaging for Devnet\nDESCRIPTION: This Solidity snippet shows a modification to the constructor of an L1 contract used in Starknet Devnet testing. Instead of accepting an IStarknetCore interface contract as on mainnet, the constructor accepts a MockStarknetMessaging contract instance for simulating L1-L2 messaging interactions in the development environment. This substitution enables local testing of message passing without mainnet dependencies.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/postman.md#_snippet_2\n\nLANGUAGE: Solidity\nCODE:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration File Format for Starknet Devnet\nDESCRIPTION: Example of an environment variable configuration file for Starknet Devnet. Each line defines a variable with export keyword for direct use with source command.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with host networking on Linux\nDESCRIPTION: This command runs Starknet Devnet with host networking enabled.  This makes the container's internal port directly accessible on the host machine. The `--port` option is used to specify the port.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/docker.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Consume message from L2 to L1 via POST /postman/consume_message_from_l2\nDESCRIPTION: Mocks the process of sending a message from L2 back to L1. Requires valid deployed contracts on both layers and a payload array. Sends a JSON-RPC request to simulate the cross-layer message, useful for testing L2-to-L1 communication.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/postman.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"devnet_postmanConsumeMessageFromL2\",\n  \"params\": {\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Block Time via JSON-RPC (Generates Block)\nDESCRIPTION: Sends a JSON-RPC request using the `devnet_setTime` method to set the exact block timestamp. The 'params' object must contain the 'time' key with the desired timestamp in Unix seconds. This operation generates a new block immediately.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/starknet-time.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Block Abortion (JSON-RPC)\nDESCRIPTION: Sends a JSON-RPC request to the Devnet node's endpoint to abort blocks. The request includes the `starting_block_id` within the `params` object, specifying the first block to be aborted. Requires Devnet started with `--state-archive-capacity full`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/blocks.md#_snippet_4\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_abortBlocks\",\n    \"params\": {\n        \"starting_block_id\": BLOCK_ID\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Time (No Block Generation) - POST - Starknet Devnet\nDESCRIPTION: Sets the exact time for the *next* block that will be generated, but skips immediate new block generation.  `time` (Unix time seconds) and `generate_block` (set to `false`) parameters are required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/starknet-time.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping after each block - Starknet Devnet (Bash)\nDESCRIPTION: This command configures Devnet to dump the state after each block is created. This can be useful for continuous state backup and allows for incremental recovery. The dump will be written to the path specified by the `--dump-path` parameter.  The `<PATH>` argument indicates where the dump file is stored.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Pulling a Pre-Release Commit Version\nDESCRIPTION: Command to pull a Starknet Devnet Docker image built from a specific commit in the main branch. This provides access to fixes before they are included in an official release.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/docker.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Configuring Devnet Start Time via CLI\nDESCRIPTION: Sets the starting timestamp for Starknet Devnet using a command-line parameter. This Unix timestamp will be used for the genesis block. If not specified, the current Unix time is used by default.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/starknet-time.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --start-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance via Starknet Devnet JSON-RPC Method\nDESCRIPTION: This snippet provides the JSON-RPC format to query the account balance using the devnet_getAccountBalance method. Parameters include the account's address in hex string, the unit of token measurement (WEI or FRI), and the block_tag to specify the target blockchain state (latest or pending). The method returns the token balance at the specified state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/balance.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Deploying Cairo L1L2 Contract on Starknet (bash)\nDESCRIPTION: Declares the Cairo contract on Devnet using 'starkli declare', stores resulting class hash, and deploys the contract with a specific salt using 'starkli deploy'. Then increases user balance and checks it by invoking and calling respective contract functions. Prerequisites: Devnet running, Cairo contract compiled, and 'starkli' utility available.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Declare.\nstarkli declare ./cairo/target/dev/cairo_l1_l2.contract_class.json\nCLASS_HASH= # displayed after previous command\n\n# Deploy (adjust the class hash if needed).\nstarkli deploy \"$CLASS_HASH\" --salt 123\nCONTRACT_L2= # displayed after previous command\n\n# Add some balance (255) to the user 1 on L2 and check it.\nstarkli invoke \"$CONTRACT_L2\" increase_balance 0x1 0xff\nstarkli call \"$CONTRACT_L2\" get_balance 0x1\n\n# Issue a withdraw to send message to L1 with amount 1 for user 1.\nstarkli invoke \"$CONTRACT_L2\" withdraw 0x1 0x1 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\n```\n\n----------------------------------------\n\nTITLE: L2 to L1 Message Response Format in JSON\nDESCRIPTION: Example response format after sending a mock L2 to L1 message. Returns a message hash that can be used to track the message on the L1 network.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\"message_hash\": \"0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d\"}\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L2->L1 Transaction with JSON-RPC - JSON\nDESCRIPTION: Examples for sending mock L2->L1 message using JSON-RPC method 'devnet_postmanConsumeMessageFromL2'. All required parameters must be present and valid. Successful responses return a message hash indicating message acceptance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\"message_hash\": \"0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d\"}\n```\n\n----------------------------------------\n\nTITLE: Setting Starknet Devnet Time without Block Generation via JSON-RPC\nDESCRIPTION: This snippet shows how to set the exact time in Starknet devnet for the next block generation, without immediately generating a new block, using the `devnet_setTime` JSON-RPC method. The `params` object includes both `time` and `generate_block` set to `false`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/starknet-time.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from File into Dockerized StarkNet Devnet (Bash)\nDESCRIPTION: Uses the `docker run --env-file` option to read environment variables from a specified file (e.g., `.my-env-file`) and pass them to the Docker container before running `starknet-devnet-rs`. This simplifies passing many variables to a container.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Load MockStarknetMessaging Contract via POST /postman/load_l1_messaging_contract\nDESCRIPTION: Sends a request to load or fetch a MockStarknetMessaging contract at a specified address or deploy a new one if no address is provided. Uses JSON-RPC format to communicate with the Devnet API, requiring network URL and optionally an address. This setup is fundamental for L1-L2 message testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/postman.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"networkUrl\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request: Setting Gas Prices\nDESCRIPTION: This JSON snippet represents a JSON-RPC request to modify the gas prices on a running Starknet Devnet. The `setGasPrice` method is called, and parameters such as `gas_price_wei`, `data_gas_price_wei`, `gas_price_fri`, `data_gas_price_fri`, `l2_gas_price_wei`, and `l2_gas_price_fri` are used to specify the desired gas prices. The optional boolean flag `generate_block` indicates whether to generate a new block immediately after setting the gas prices.  The request is sent to the Devnet JSON-RPC endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/gas.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"setGasPrice\",\n    \"params\": {\n        \"gas_price_wei\": 1000000,\n        \"data_gas_price_wei\": 10000,\n        \"gas_price_fri\": 10000,\n        \"data_gas_price_fri\": 10000,\n        \"l2_gas_price_wei\": 1000000,\n        \"l2_gas_price_fri\": 10000,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Block Abortion via JSON-RPC in Starknet Devnet (JSON)\nDESCRIPTION: This snippet shows the JSON-RPC 2.0 format for aborting a range of blocks from a given block hash via the 'devnet_abortBlocks' method in Starknet Devnet. The 'params' object includes 'starting_block_hash', which identifies the block from which abortion starts. The server responds with the hashes of all aborted blocks. This operation requires state archival and is subject to block abortion constraints.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/blocks.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_abortBlocks\",\n    \"params\": {\n        \"starting_block_hash\": BLOCK_HASH\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch and Run Pre-compiled Devnet Binary\nDESCRIPTION: This demonstrates downloading and executing a pre-compiled binary executable from a GitHub release, saving time and skipping project compilation. Requires `curl` and `tar`. The `<VERSION>`, `<COMPRESSED_ARCHIVE>`, and `<TARGET_DIR>` placeholders must be replaced with the appropriate values.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/install.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvzf -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Argument Precedence over Environment Variables (Bash)\nDESCRIPTION: Shows that when both an environment variable (`SEED=10`) and a corresponding CLI argument (`--seed 42`) are provided, the CLI argument (`--seed 42`) takes precedence, resulting in the value 42 being used.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet Config from File and Running (Current Shell) (Bash)\nDESCRIPTION: Demonstrates how to execute a file containing environment variables ('source .my-env-file') in the current shell before starting Starknet Devnet ('starknet-devnet'). The '&&' ensures Devnet only runs if sourcing is successful. This method loads variables into the current shell's environment, which persist after Devnet exits.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Manual Consumption of L2-to-L1 Message Without Flush (bash/JSON)\nDESCRIPTION: After a message is emitted by a Cairo contract's withdrawal, this snippet consumes the message directly from Devnet via '/postman/consume_message_from_l2' endpoint, passing the L2 contract, L1 contract, and payload. Returns a JSON message hash. Demonstrates message handling and error if message is already consumed. Ends by checking updated L2 balance.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Withdraw to have the Cairo contract creating the message.\nstarkli invoke \"$CONTRACT_L2\" withdraw 0x1 0x2 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' \\\n    -d '{\"from_address\": \"0x34ba56f92265f0868c57d3fe72ecab144fc96f97954bbbc4252cef8e8a979ba\", \"to_address\": \"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\", \"payload\": [\"0x0\",\"0x1\",\"0x2\"]}' \\\n    http://127.0.0.1:5050/postman/consume_message_from_l2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message_hash\": \"0x987b98434563ce4683f38c443d0c060492592960b525200ff7345d39c2f94fa2\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nstarkli call \"$CONTRACT_L2\" get_balance 0x1\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"0x00000000000000000000000000000000000000000000000000000000000000ff\"\n]\n```\n\n----------------------------------------\n\nTITLE: Starting Devnet with Automatic Periodic Block Creation (Bash)\nDESCRIPTION: Starts the Starknet Devnet node with block generation configured to occur automatically every 10 seconds. This mode behaves similarly to the `demand` mode but automates the block creation process at a fixed interval.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/blocks.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --block-generation-on 10\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance via Starknet Devnet HTTP GET\nDESCRIPTION: This snippet illustrates how to retrieve the token balance of a specified account with a GET request to the /account_balance endpoint. Required query parameters include the 0x-prefixed address. Optional parameters include the token unit (WEI or FRI) defaulting to WEI, and the block_tag which can be latest or pending to specify the blockchain state at which the balance is queried.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/balance.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for Mock Messaging in Solidity\nDESCRIPTION: Example of how to modify a contract constructor to work with Devnet's L1-L2 testing environment. For Devnet testing, the MockStarknetMessaging contract is used instead of the regular IStarknetCore interface.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Predeployed Accounts via CLI Options in Bash\nDESCRIPTION: This snippet illustrates command-line interface (CLI) options to control the number of predeployed accounts, their initial balances, and the deterministic seed for account generation. The options `--accounts` specify the number of accounts, `--initial-balance` sets the starting Wei balance for each account, and `--seed` establishes a fixed seed value to reproduce the same set of predeployed accounts between Devnet restarts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/predeployed.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--accounts <NUMBER_OF> --initial-balance <WEI> --seed <VALUE>\n```\n\n----------------------------------------\n\nTITLE: Response Payload for Minting Request in Starknet Devnet - JSON\nDESCRIPTION: This snippet outlines the structure of the response returned after a successful token minting operation, either via HTTP POST or JSON-RPC. The response includes the new_balance, the unit used, and the transaction hash. All values are returned as standard JSON fields.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/balance.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks Using JSON-RPC Method in JSON\nDESCRIPTION: Shows the JSON-RPC 2.0 request format for aborting blocks starting from a specified block ID by calling the `devnet_abortBlocks` method. Parameters are passed as a dictionary containing the starting block ID, and the response provides the hashes of blocks that were aborted. This allows programmatic control of block abortion in Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/blocks.md#_snippet_4\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_abortBlocks\",\n    \"params\": {\n        \"starting_block_id\": BLOCK_ID\n    }\n}\n\nResponse:\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Abort Blocks Response\nDESCRIPTION: Response received after aborting blocks. The response includes a list of block hashes that were aborted.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/blocks.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Devnet Configuration Example (JSON)\nDESCRIPTION: This JSON snippet represents a sample configuration of the Starknet Devnet. It includes parameters such as seed, total accounts, account contract class hash, initial balance, gas prices, chain ID, dump settings, fork configuration, server configuration, block generation settings, lite mode, and ERC20 class hashes.  It is retrieved by sending a GET request to `/config` or `JSON-RPC` request with method name `devnet_getConfig`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/api.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_fri\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_fri\": 100000000000,\n  \"l2_gas_price_wei\": 100000000000,\n  \"l2_gas_price_fri\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000,\n    \"restricted_methods\": null\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false,\n  \"eth_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\",\n  \"strk_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Account Balance Check via JSON-RPC\nDESCRIPTION: This snippet details how to invoke a JSON-RPC call to retrieve an account's balance, specifying address, unit, and block tag within params. The server responds with the balance data in the specified unit at the requested block tag. It presumes the JSON-RPC server supports the 'devnet_getAccountBalance' method.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/balance.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet State via JSON-RPC Request - Starknet Devnet - JSON\nDESCRIPTION: This JSON snippet is a JSON-RPC request to load Devnet state from a file, using the 'devnet_load' method with 'path' specified in the params object. The response will depend on implementation and may signal success or errors. Dependencies: JSON-RPC enabled Devnet, available state dump file. Input: JSON-RPC with 'path'. Output: Devnet process state reset from dump.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_load\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time without Block Generation via HTTP POST\nDESCRIPTION: Sets the exact timestamp without generating a new block immediately. The specified time will be used when the next block is generated. This provides more control over block creation timing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/starknet-time.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with Dump Loading via Docker (Shell)\nDESCRIPTION: This multi-line shell command starts a Docker container running Starknet Devnet and mounts a host directory to the container for persistent storage. It loads a dump file on startup via '--dump-path', mirroring the local path to the container and exposing port 5050. The host directory must pre-exist and contain the required dump file. This setup ensures data persists across container restarts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/dump-load-restart.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet on Linux with host networking\nDESCRIPTION: This command runs Starknet Devnet on a Linux host machine using `--network host`. This makes the container's internal port directly accessible on the host machine. The `--port` option allows overriding the default port.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/docker.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Restrictive Mode with Specific Methods in Devnet\nDESCRIPTION: This command configures restrictive mode in Starknet Devnet and specifies a custom list of methods to restrict (devnet_dump, devnet_config). It requires the --restrictive-mode argument followed by the method names. The input is the command and the method names, and the output is a Devnet instance that restricts the specified methods and returns errors if they are called.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/restrictive.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --restrictive-mode devnet_dump devnet_config\n```\n\n----------------------------------------\n\nTITLE: Example of Specific Host and Container Port Mapping\nDESCRIPTION: Sample command to map container port 5050 to host's localhost address, providing controlled access to the Starknet Devnet service.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/docker.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Mock L1->L2 API Response Example - Starknet Devnet - JavaScript\nDESCRIPTION: Provides an example output for a successful POST /postman/send_message_to_l2 or JSON-RPC send operation to L2. It returns a transaction_hash string representing the new mock message transaction. Helps users validate the expected output schema for integration tests.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: Deploying Contracts with Forge Script (Shell)\nDESCRIPTION: Executes a deployment script (e.g., `script/Counter.s.sol:CounterScript`) using Forge script to deploy smart contracts. Requires specifying a target blockchain network via an RPC URL (`--rpc-url`) and an account's private key (`--private-key`) for signing the deployment transaction.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/solidity/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ forge script script/Counter.s.sol:CounterScript --rpc-url <your_rpc_url> --private-key <your_private_key>\n```\n\n----------------------------------------\n\nTITLE: Setting Starknet Devnet Time via API (Generates Block)\nDESCRIPTION: Sends a POST request to the `/set_time` endpoint with a JSON payload containing the desired Unix timestamp in seconds. This sets the exact block time and immediately generates a new block with that timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/starknet-time.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /set_time\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running Pre-Compiled StarkNet Devnet Binary (Shell)\nDESCRIPTION: This command downloads a versioned, compressed, pre-compiled binary for StarkNet Devnet from GitHub releases using curl and extracts it to a specified target directory using tar. The second command executes the binary directly. These commands require curl and tar to be installed on the system. The version and archive placeholders must be replaced appropriately; output is a running Devnet instance without requiring compilation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/install.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvzf -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n\n```\n\n----------------------------------------\n\nTITLE: Running StarkNet Devnet from Source with Arguments using Cargo\nDESCRIPTION: Compiles and runs the StarkNet Devnet project from source, passing specified command-line arguments (`[ARGS]`) to the application via `--`. Requires Rust, Cargo, and the cloned project repository.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Installing StarkNet Devnet from GitHub using Cargo\nDESCRIPTION: Installs StarkNet Devnet directly from its GitHub repository using `cargo install` with the `--git` flag. The `--locked` flag ensures that the exact dependency versions specified in the project's `Cargo.lock` file are used. Requires Rust and Cargo.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Using Docker on Mac/Windows with Port Mapping\nDESCRIPTION: Command to run Starknet Devnet container on non-Linux systems by publishing the container port to the host's port, allowing access to the service externally.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/docker.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Response for Creating a Block on Demand - JSON\nDESCRIPTION: The response from the /create_block endpoint returns a JSON object with the newly created block's hash. This identifier allows further queries or management actions on the specific block. No other parameters are returned.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/blocks.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Starknet Devnet Server Config via JSON-RPC - JSON\nDESCRIPTION: Structures a JSON-RPC request to obtain the server configuration from the devnet_getConfig method. To use, send this JSON payload as the body of an HTTP POST request to the JSON-RPC endpoint (typically http://localhost:5050). Requires Starknet Devnet server to be running with JSON-RPC enabled. The id, method, and params fields follow standard JSON-RPC 2.0 specification; response includes a server_config object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/server-config.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling a Specific Starknet Devnet Version\nDESCRIPTION: Command to pull a specific version of the Starknet Devnet Docker image matching a version published on crates.io. This allows for version pinning in development environments.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/docker.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet State in Docker on Startup (Shell)\nDESCRIPTION: Runs StarkNet Devnet within a Docker container, loading its initial state from a dump file (`mydump`) located in a host directory (`/path/to/dumpdir`). Uses Docker bind mount (`--mount type=bind`) to make the host directory accessible inside the container at the same path. Assumes the dump file exists and the host path `/path/to/dumpdir` exists and is correctly specified (absolute paths recommended). Requires Docker.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Set Gas Price Response\nDESCRIPTION: This JSON snippet represents the expected response from a successful `setGasPrice` JSON-RPC request.  It mirrors the gas price parameters set in the request, confirming the changes made. The response includes gas prices in both wei and FRI units for L1 and L2 gas, which will be used by the Starknet Devnet instance. \nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/gas.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"gas_price_wei\": 1000000,\n  \"data_gas_price_wei\": 10000,\n  \"gas_price_fri\": 10000,\n  \"data_gas_price_fri\": 10000,\n  \"l2_gas_price_wei\": 10000,\n  \"l2_gas_price_fri\": 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Foundry Tools (Shell)\nDESCRIPTION: Displays help information, usage instructions, and available options for the Forge, Anvil, and Cast command-line tools using the `--help` flag.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/solidity/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ forge --help\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ anvil --help\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ cast --help\n```\n\n----------------------------------------\n\nTITLE: Block Abortion Response Object in Starknet Devnet (JSON)\nDESCRIPTION: This snippet shows the response format after aborting blocks in Starknet Devnet. The 'aborted' array contains all block hashes that were reverted. No additional information is provided. Use these hashes to confirm the completed abortion or for further queries by block hash only.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/blocks.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: MockStarknetMessaging Contract Constructor for Devnet - Solidity\nDESCRIPTION: This Solidity constructor is adapted for Devnet testing, initializing starknetCore with a MockStarknetMessaging contract instead of a standard IStarknetCore. This allows for the simulation of L1-L2 messaging in a development environment without real network dependencies. Input: a MockStarknetMessaging contract reference. Output: sets the starknetCore variable to the mocked contract for test purposes. Dependency: MockStarknetMessaging contract must be available.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/postman.md#_snippet_3\n\nLANGUAGE: Solidity\nCODE:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling restrictive mode with custom methods - Shell\nDESCRIPTION: This command starts Starknet Devnet with the --restrictive-mode flag followed by a space-separated list of method names. Only the specified methods will be restricted, overriding the default list. It is crucial to spell the method names correctly, as Devnet will fail to start if any are misspelled.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/restrictive.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nstarknet-devnet --restrictive-mode devnet_dump devnet_config\n```\n\n----------------------------------------\n\nTITLE: Running a StarkNet Devnet Docker Container\nDESCRIPTION: Executes a StarkNet Devnet container, mapping a specified host port to the container's default internal port 5050 using the `-p` flag. Replace `[HOST:]<PORT>` with the desired host IP (optional) and port. Additional Devnet command-line arguments can be appended as `[OPTIONS]`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/docker.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queue with REST API (Dry Run) - JavaScript\nDESCRIPTION: Shows how to request a dry run flush via POST /postman/flush with a JSON body specifying { \"dry_run\": true }. No blocks or messages are committed; only the results are returned. Useful for testing potential outcomes before actual execution. Requires Devnet and running L1 node if dry_run is not set.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"dry_run\": true }\n```\n\n----------------------------------------\n\nTITLE: Enable Auto Impersonation - JSON-RPC Request (JavaScript)\nDESCRIPTION: This JSON-RPC request enables automatic account impersonation. It uses the `devnet_autoImpersonate` method.  When enabled, any account that does not exist in the local state will be automatically impersonated.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/account-impersonation.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping State with CLI - Starknet Devnet - Bash\nDESCRIPTION: These bash command-line examples demonstrate how to persist the current blockchain state of a Starknet Devnet instance using dump-on-exit, dump-on-block, or dump-on-request modes. Required: the starknet-devnet binary must be installed and accessible. Key parameters include --dump-on (specifying trigger mode: exit, block, request) and --dump-path (output file path). Input is the CLI invocation; output is either a persisted file or, for request mode, a dump returned over STDOUT. The commands do not handle SIGKILL and require that the target directory exists.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/dump-load-restart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on <MODE> [--dump-path <FILE>]\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Ethereum Node with Anvil (Shell)\nDESCRIPTION: Launches a local Ethereum development node using the Anvil command. This node simulates the Ethereum network and is useful for local development and testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/solidity/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ anvil\n```\n\n----------------------------------------\n\nTITLE: Set Time (No Block Generation) - JSON-RPC - Starknet Devnet\nDESCRIPTION: Sets the time for the next block using JSON-RPC, without immediately generating a block. Requires `time` (Unix time seconds) and `generate_block` (set to false) parameters within the `params` object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/starknet-time.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Blocks - Periodic Generation\nDESCRIPTION: This bash code snippet demonstrates the periodic block generation feature in Starknet Devnet. The Devnet is started with a specific interval, and blocks are automatically generated every interval seconds. Transactions sent during this period are included in generated blocks.  Dependencies: Starknet-devnet CLI.  Inputs: `--block-generation-on <INTERVAL>` CLI option.  Output: Blocks containing transactions at given intervals.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/blocks.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# t\n$ starknet-devnet --block-generation-on 10\n\n# t + 1s\n# user: send tx1\n\n# t + 4s\n# user: send tx2\n\n# t + 10s\n# Devnet: block automatically generated, contains tx1 and tx2\n\n# t + 12s\n# user: send tx3\n\n# t + 14s\n# user: invoke empty block creation\n# Devnet: generated block contains tx3\n\n# t + 20s\n# Devnet: block automatically generated, contains no txs (manual creation did not restart the counter)\n```\n\n----------------------------------------\n\nTITLE: Running starknet-devnet from Source with Cargo - Shell\nDESCRIPTION: This snippet explains how to build and run the starknet-devnet project directly from source code using cargo after cloning the repository. It shows running normally, passing optional CLI arguments, and running in release mode for optimized performance. It requires Rust and dependencies to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/install.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time for Next Block via POST API (No Immediate Block)\nDESCRIPTION: Sends a POST request to the `/set_time` endpoint to set the exact timestamp for the next block to be generated, without generating one immediately. Requires a JSON body with the 'time' parameter (Unix seconds) and 'generate_block' set to false.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/starknet-time.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /set_time\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Loading L1 Messaging Contract with JSON-RPC in JSON\nDESCRIPTION: Example of how to load a MockStarknetMessaging contract on L1 using the JSON-RPC API. This performs the same function as the REST endpoint but follows JSON-RPC protocol standards.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanLoad\",\n    \"params\": {\n      \"network_url\": \"http://localhost:8545\",\n      \"address\": \"0x123...def\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dry Run and Message Flushing via Postman Endpoint (bash/JSON)\nDESCRIPTION: Uses the Devnet Postman dry-run endpoint to preview L2-to-L1 messages without actually sending them, by sending a POST request with '{\"dry_run\": true}'. Then, flushes (broadcasts) the messages using a POST to the flush endpoint. Both responses provide message metadata for validation. Dependencies: Devnet running, contracts deployed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' -d '{\"dry_run\": true}' http://127.0.0.1:5050/postman/flush\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messages_to_l1\": [\n        {\n            \"l2_contract_address\":\"0x34ba56f92265f0868c57d3fe72ecab144fc96f97954bbbc4252cef8e8a979ba\",\n            \"l1_contract_address\":\"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n            \"payload\":[\"0x0\",\"0x1\",\"0x1\"]\n        }\n    ],\n    \"messages_to_l2\":[],\n    \"generated_l2_transactions\": [],\n    \"l1_provider\":\"dry run\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' -X POST http://127.0.0.1:5050/postman/flush\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messagesToL1\": [\n        {\n            \"l2_contract_address\":\"0x34ba56f92265f0868c57d3fe72ecab144fc96f97954bbbc4252cef8e8a979ba\",\n            \"l1_contract_address\":\"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n            \"payload\":[\"0x0\",\"0x1\",\"0x1\"]\n        }\n    ],\n    \"messages_to_l2\":[],\n    \"generated_l2_transactions\": [],\n    \"l1_provider\":\"http://127.0.0.1:8545/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Usage examples using starknet-devnet-js JavaScript library\nDESCRIPTION: This section points to external resources demonstrating how to leverage the starknet-devnet-js library for testing and interacting with the starknet-devnet. The tests showcase various functionalities such as deployment, transaction simulation, and network interactions within the devnet environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/examples.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nhttps://github.com/0xSpaceShard/starknet-devnet-js/tree/master/test\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Account Impersonation via JSON-RPC (Starknet Devnet)\nDESCRIPTION: This JSON-RPC request demonstrates how to use the `devnet_autoImpersonate` method to enable automatic impersonation. Once enabled, any account address used in a transaction that does not exist in the local Devnet state will be automatically impersonated, bypassing signature validation without needing to manually add each address.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/account-impersonation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and running pre-compiled binary (Bash)\nDESCRIPTION: This set of commands fetches a pre-compiled binary executable from a GitHub release, extracts it, and executes it.  The user needs `curl`, `tar`, and the target directory to exist.  `<VERSION>` and `<COMPRESSED_ARCHIVE>` are placeholders and must be replaced with the correct values for the GitHub release. `<TARGET_DIR>` must also be replaced.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvz -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Using Custom Account Class in Starknet Devnet\nDESCRIPTION: Command line option for providing a custom account implementation by specifying the path to a Sierra artifact file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/predeployed.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Dumping Devnet State on Exit\nDESCRIPTION: This command configures the StarkNet Devnet to dump its current state when it exits, saving to a specified path. It requires the '--dump-on exit' flag and can optionally specify a dump directory with '--dump-path'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queues via REST API - Starknet Devnet - none\nDESCRIPTION: Sends a POST request to /postman/flush to process all pending L1-L2 and L2-L1 messages. No body is needed by default. The operation consumes the existing message queue and routes messages to their target. A running L1 node is generally required unless message flow is only inside Devnet. Intended for end-to-end testing validation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nPOST /postman/flush\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from GitHub Repository using Cargo in Bash\nDESCRIPTION: Installs the starknet-devnet binary by directly fetching the source code from the GitHub repository using cargo with the --git and --locked flags. The --locked flag ensures cargo uses the dependencies as locked in Cargo.lock for consistency. Requires Rust and cargo setup, along with dependencies like pkg-config and make if needed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/install.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Loading StarkNet Devnet Configuration from a File (Standard)\nDESCRIPTION: Shows how to load Devnet configuration from a file by sourcing it before running `starknet-devnet`. The file (`.my-env-file` in the example) should contain `export VAR=VALUE` lines. Running within parentheses `()` prevents polluting the current shell environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/cli.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n```\n\nLANGUAGE: Bash\nCODE:\n```\nsource .my-env-file && starknet-devnet\n```\n\nLANGUAGE: Bash\nCODE:\n```\n( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet on Mac and Windows with port publishing\nDESCRIPTION: This command runs Starknet Devnet on Mac or Windows, publishing the container's internal port 5050 to a specified port on the host machine. Replace `<PORT>` with the desired host port.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/docker.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State After Each Block via CLI - Starknet Devnet - Bash\nDESCRIPTION: This shell command configures Starknet Devnet to automatically dump its state after every block is processed. By specifying '--dump-on block' and providing an output path with '--dump-path <PATH>', Devnet ensures up-to-date snapshots for each block. Dependencies: starknet-devnet must be installed. Required parameters: --dump-on block, --dump-path. Input: none, Output: dump file updated after each block. Not suitable for large block volumes unless persistent state is needed at every block interval.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Example Usage of starknet-devnet-js Library\nDESCRIPTION: This snippet demonstrates how to use the starknet-devnet-js library to interact with the StarkNet development network. It provides practical examples for testing and development purposes by importing the library and utilizing its functions. The code relies on the 'starknet-devnet-js' npm package and is meant for JavaScript environments.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/examples.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n# Examples\n\nUsage examples relying on the [`starknet-devnet-js`](https://github.com/0xspaceShard/starknet-devnet-js) library can be found [here](https://github.com/0xSpaceShard/starknet-devnet-js/tree/master/test).\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Account Impersonation with devnet_autoImpersonate\nDESCRIPTION: JSON-RPC request to enable automatic impersonation of all accounts that don't exist in the local state. This eliminates the need to manually impersonate each account.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/account-impersonation.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from Source (Optimized)\nDESCRIPTION: Compiles and runs Starknet Devnet from source using `cargo run --release`. This builds the project with optimizations enabled (release mode), resulting in better runtime performance but a longer initial compilation time compared to a debug build. Requires Rust, Cargo, and the project source code.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/install.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Initiating a Dump\nDESCRIPTION: This HTTP request triggers Devnet to dump its current state. When no body is provided, the dump either outputs to STDOUT or the default dump path. It allows remote triggering of state saves.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /dump\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Request to Load Devnet State via POST /load\nDESCRIPTION: This POST request loads a Devnet state from a given file path, replacing the current state. It allows state restoration based on a previous dump.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{ \"path\": <PATH> }\n```\n\n----------------------------------------\n\nTITLE: Mock L2->L1 Message Request (JSON-RPC) - Starknet Devnet - JSON\nDESCRIPTION: Simulates consuming a message sent from L2 to L1 by calling the devnet_postmanConsumeMessageFromL2 JSON-RPC method. The parameters are: from_address (L2 contract), to_address (L1 address), and payload. A running L1 node is mandatory to process the handoff. Used for controlled integration or unit testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time Without Block Generation via JSON-RPC (JSON)\nDESCRIPTION: Sets the desired Unix time for the *next* block to be generated using the JSON-RPC method `devnet_setTime`, without immediately mining a new block. This behavior is enabled by setting the optional `generate_block` parameter to `false` within the `params` object. The `time` parameter specifies the target timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/starknet-time.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Configuration via REST API\nDESCRIPTION: Fetches the current server configuration by sending a GET request to `/config` endpoint, which returns JSON data containing server settings. Use `jq` to extract the `server_config` property.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/server-config.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Consuming Mock L2->L1 Message with JSON-RPC\nDESCRIPTION: This snippet demonstrates how to consume a mock L2 to L1 message using a JSON-RPC request. It requires specifying the `from_address` (L2 contract address), `to_address` (L1 contract address), and `payload`. A running L1 node is required for this operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/postman.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable and Contract Compilation for Both Chains (bash)\nDESCRIPTION: Loads environment variables for both chains from the .env file, then builds Cairo contracts with Scarb and Solidity contracts with Forge. Requires 'scarb' and 'forge' to be installed. Ensures up-to-date contract binaries for both Starknet and Ethereum.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# This .env file combines variables for both chains.\nsource ./.env\n\n# Compile cairo contracts.\nscarb --manifest-path ./cairo/Scarb.toml build\n\n# Compile solidity contracts.\nforge install --root ./solidity\nforge build --root ./solidity\n```\n\n----------------------------------------\n\nTITLE: Docker Command for Loading Starknet-Devnet State\nDESCRIPTION: Docker command to run Starknet-Devnet and load state from a file on the host machine. Uses a bind mount to make the dump file accessible inside the container.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from Source with CLI Params\nDESCRIPTION: This snippet shows how to pass command-line arguments to Devnet when running it from source. It uses the `--` separator to pass parameters to the executable. Requires the source code and Rust/Cargo.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/install.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: CLI Command for Loading Devnet State\nDESCRIPTION: This command restores a previous Devnet state from a dump file at startup, enabling state persistence across sessions. The path specifies the dump file location.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Loading State via CLI and HTTP/JSON-RPC - Starknet Devnet - Bash and JSON\nDESCRIPTION: These bash and JSON snippets illustrate how to restore a Starknet Devnet instance from a previously dumped file, either on startup or via API calls. The CLI command uses --dump-path to specify the file on startup. The POST /load HTTP endpoint and the JSON-RPC method 'devnet_load' accept a 'path' to the dump file and replace the current state with the saved one. Prerequisites: a valid dump file generated by the same Devnet version and similar account/block configuration. Inputs are file paths; outputs are in-memory blockchain state updates.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/dump-load-restart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-path <PATH>\n```\n\nLANGUAGE: http\nCODE:\n```\nPOST /load\n{ \"path\": <PATH> }\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_load\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Account Class via StarkNet Devnet CLI\nDESCRIPTION: Shows the command-line option to provide a path to a custom Sierra artifact for an account contract class, allowing Devnet to predeploy instances of this custom class.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/predeployed.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State on Request via CLI - Starknet Devnet - Bash\nDESCRIPTION: This snippet shows how to enable manual, user-triggered dumps in Starknet Devnet by using '--dump-on <MODE>' (such as 'request') and optionally configuring the output file with '--dump-path <FILE>'. The dump request must be subsequently triggered via HTTP or JSON-RPC. Dependencies: starknet-devnet. Parameters: --dump-on, [--dump-path]. Input: none at startup but expects a request later to initiate the dump. Output: dump file or response body.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on <MODE> [--dump-path <FILE>]\n```\n\n----------------------------------------\n\nTITLE: Disable Auto-Impersonation via JSON-RPC (JavaScript)\nDESCRIPTION: This JSON-RPC request disables the automatic account impersonation feature in Starknet Devnet. It stops the effects of `devnet_autoImpersonate`. The request has no parameters and doesn't return any value.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/account-impersonation.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Mint Token Response - Starknet Devnet\nDESCRIPTION: This JSON response is returned after a successful token minting operation. It contains the new balance, the unit of the token (WEI or FRI), and the transaction hash. This response is provided by the Starknet Devnet after processing a mint request.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/balance.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering StarkNet Devnet State Dump via HTTP Request (Bash)\nDESCRIPTION: Demonstrates dumping Devnet state on demand via an HTTP POST request. First, start Devnet with `--dump-on exit` (or other modes) and `--dump-path`. Then, use `curl` to send a POST request to the `/dump` endpoint, specifying the target dump path in the JSON body. Requires replacing `<HOST>`, `<PORT>`, and `<PATH>` placeholders.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl -X POST http://<HOST>:<PORT>/dump -d '{ \"path\": <PATH> }' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Example Bash Environment File Content for Devnet (export)\nDESCRIPTION: Provides an example of the content typically found in a Bash script or environment file used to configure Starknet Devnet. Each line uses the 'export' command to make the variable available to child processes, including the Devnet command. This format is suitable for sourcing directly in a Bash shell.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Flushing L1->L2 Messages and Checking L2 User Balance (bash/JSON)\nDESCRIPTION: Flushes pending messages from L1 to L2 using a cURL POST to Devnet's postman/flush endpoint, triggering processing of cross-chain messages. Then checks the balance for a given user on L2 by calling the relevant contract using 'starkli call'. Outputs are used to confirm that L2 state changes as expected.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' -X POST http://127.0.0.1:5050/postman/flush\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"messagesToL1\": [],\n    \"messagesToL2\": [\n        {\n            \"l2_contract_address\":\"...\",\n            \"entry_point_selector\":\"0xc73f681176fc7b3f9693986fd7b14581e8d540519e27400e88b8713932be01\",\n            \"l1_contract_address\":\"0xe7f1725e7734ce288f8367e1bb143e90bb3f0512\",\n            \"payload\":[\"0x1\",\"0x1\"],\n            \"paid_fee_on_l1\":\"0x3b9aca00\",\n            \"nonce\":\"0x1\"\n        }\n    ],\n    \"generated_l2_transactions\": [\"0x75337b9eb7f731226ba4ddea7a9c5b2f984ee9546c0cbb5d1c04e69f5d62aac\"],\n    \"l1_provider\":\"http://127.0.0.1:8545/\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nstarkli call \"$CONTRACT_L2\" get_balance 0x1\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"0x00000000000000000000000000000000000000000000000000000000000000ff\"\n]\n```\n\n----------------------------------------\n\nTITLE: Dumping StarkNet Devnet State on Request (Shell/cURL)\nDESCRIPTION: Demonstrates starting StarkNet Devnet with a dump mode enabled (e.g., `exit`) and then triggering a state dump manually by sending a POST request to the `/dump` endpoint with the target path in the JSON body. Replace `<HOST>`, `<PORT>`, and `<PATH>` with appropriate values.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/dump-load-restart.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n$ curl -X POST http://<HOST>:<PORT>/dump -d '{ \"path\": <PATH> }' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L2->L1 Message via Starknet Devnet Postman API (JSON, JSON-RPC)\nDESCRIPTION: Sends a mock transaction from L2 to L1, simulating an L2 contract invocation. Requires a running L1 node for operation. The request needs the valid deployed L2 contract address (from_address), L1 target contract address (to_address), and the payload as message parameters. The response returns a message hash confirming the consumption of the message.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/postman.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/consume_message_from_l2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n}\n```\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"message_hash\": \"0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d\"}\n```\n\n----------------------------------------\n\nTITLE: Token Minting via REST API in Devnet\nDESCRIPTION: This snippet demonstrates how to mint tokens by sending a POST request to the /mint endpoint with relevant parameters such as address, amount, and unit. It facilitates token issuance on the local ERC20 contract, returning transaction hash and new balance. Dependencies include the Devnet environment supporting the /mint endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/balance.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /mint\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Time via HTTP POST\nDESCRIPTION: Sends an HTTP POST request to the `/increase_time` endpoint to advance the block timestamp by a specified duration. Requires a JSON body with the `time` property indicating the number of seconds to add. Generates a new block with the increased timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/starknet-time.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Create Block Request\nDESCRIPTION: Creates a new block in Starknet Devnet. If Devnet is started with the `--blocks-on-demand` option, this converts the pending block to the latest block. If there are no pending transactions, an empty block is generated.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/blocks.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /create_block\n```\n\n----------------------------------------\n\nTITLE: Impersonating a Specific Account via JSON-RPC\nDESCRIPTION: Demonstrates the JSON-RPC request to initiate impersonation for a single, specified account address within Starknet Devnet. Requires the `account_address` parameter specifying the address to impersonate. The method returns an empty response upon success.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/account-impersonation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing specific Starknet Devnet version with asdf\nDESCRIPTION: Command to install a specific version (0.2.0) of Starknet Devnet using the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf install starknet-devnet 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Running optimized Starknet-Devnet from source using cargo\nDESCRIPTION: This command builds and runs Starknet-Devnet from source in release mode using `cargo run --release`.  This enables compiler optimizations, resulting in better performance but potentially longer compilation times. It requires a local git clone of the Devnet repository.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_10\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Set HTTP request body size limit\nDESCRIPTION: Sets the maximum size of an incoming HTTP request body for the Starknet Devnet server using the `--request-body-size-limit` CLI argument.  This prevents excessively large requests from overwhelming the server. This allows for deployment/management of large contracts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/server-config.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Mocking L1-to-L2 Message Without L1 Node (bash/JSON)\nDESCRIPTION: Simulates a message being sent from L1 to L2 via Devnet's '/postman/send_message_to_l2' endpoint, crafting a JSON payload representing the message. Receives a transaction hash on success. Used to test L2 contract state transitions without operating an Ethereum node. Requires correct contract addresses and entry point selector.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Content-Type: application/json' \\\n    -d '{\"paid_fee_on_l1\": \"0x123\", \"l2_contract_address\": '\"$CONTRACT_L2\"', \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\", \"entry_point_selector\": \"0x00c73f681176fc7b3f9693986fd7b14581e8d540519e27400e88b8713932be01\", \"payload\": [\"0x1\", \"0x2\"], \"nonce\": \"0x1\"}' \\\n    http://127.0.0.1:5050/postman/send_message_to_l2\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"transaction_hash\": \"0x7f5c523f47bc88fa21f86ec4aaac8bbad69dafb43ae7072319dcec4d5d40af9\"\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nstarkli call \"$CONTRACT_L2\" get_balance 0x1\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"0x0000000000000000000000000000000000000000000000000000000000000101\"\n]\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queue with JSON-RPC\nDESCRIPTION: This snippet demonstrates how to flush the message queue using a JSON-RPC request. Flushing consumes and sends messages between L1 and L2. It's used for end-to-end testing and requires no parameters by default. The `dry_run` parameter can be optionally set to simulate the flush without actually executing it. A running L1 node is required if `dry_run` is not set.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/postman.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\",\n    \"params\": {\n      \"dry_run\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queue with POST\nDESCRIPTION: This snippet shows how to flush the message queue using a POST request. Flushing consumes and sends messages between L1 and L2. It's used for end-to-end testing and requires no request body by default. The `dry_run` parameter can be optionally set to simulate the flush without actually executing it. A running L1 node is required if `dry_run` is not set.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/postman.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"dry_run\": true }\n```\n\n----------------------------------------\n\nTITLE: Creating a New Block via JSON-RPC in StarkNet Devnet\nDESCRIPTION: Sends a JSON-RPC request using the `devnet_createBlock` method to manually trigger the creation of a new block in StarkNet Devnet, typically used in 'on demand' mode. This method takes no parameters and returns the hash of the newly created block, which includes any pending transactions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/blocks.md#_snippet_1\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_createBlock\"\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level for Starknet Devnet (Shell)\nDESCRIPTION: Sets the logging level for Starknet Devnet using the RUST_LOG environment variable when running the binary directly. Replace <LEVEL> with a valid level like TRACE, DEBUG, INFO, WARN, or ERROR.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/server-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Installing latest Starknet Devnet version with asdf\nDESCRIPTION: Command to install the latest version of Starknet Devnet using the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf install starknet-devnet latest\n```\n\n----------------------------------------\n\nTITLE: Running from source (cargo)\nDESCRIPTION: This command runs the starknet-devnet project from its source code using cargo run. This requires that the user has cloned the Devnet repository, and that Rust and Cargo are installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from File in Subshell\nDESCRIPTION: This command loads environment variables from a file within a subshell, preventing environment pollution. The variables are unset after Devnet exits.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/cli.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via HTTP GET in StarkNet Devnet\nDESCRIPTION: Send an HTTP GET request to the `/predeployed_accounts` endpoint to retrieve details of the predeployed accounts. Optionally include the `with_balance=true` query parameter to fetch ETH (WEI) and STRK (FRI) balances at the pending state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/predeployed.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /predeployed_accounts?[with_balance=true]\n```\n\n----------------------------------------\n\nTITLE: Using Docker for Dumping Devnet on Exit\nDESCRIPTION: This snippet demonstrates setting up Docker to run StarkNet Devnet with dump-on-exit behavior by specifying the dump path inside a bind mount, ensuring the dump is saved to a specified directory on host shutdown.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Stopping Automatic Account Impersonation via JSON-RPC\nDESCRIPTION: Illustrates the JSON-RPC request to disable automatic account impersonation in Devnet. This reverses the effect of the `devnet_autoImpersonate` method. The `params` field should be an empty object `{}`. The method returns an empty response upon success.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/account-impersonation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time for Next Block via JSON-RPC (No Immediate Block)\nDESCRIPTION: Sends a JSON-RPC request using the `devnet_setTime` method to set the exact timestamp for the next block, without immediate generation. The 'params' object must contain 'time' (Unix seconds) and 'generate_block' set to false.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/starknet-time.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Forking Starknet Devnet\nDESCRIPTION: Starts Starknet Devnet in forking mode, connecting to a specified Starknet JSON-RPC API provider. The `--fork-network` argument defines the URL of the network to fork. Optionally, `--fork-block` specifies the block number to fork from; it defaults to the latest block if not provided. This setup allows simulating interactions with contracts on the forked network locally.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/forking.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Mock L1->L2 Message Request (REST API) - Starknet Devnet - JavaScript\nDESCRIPTION: Represents the body for a POST /postman/send_message_to_l2 call, which simulates sending a message from an L1 contract to an L2 contract using Devnet. Required fields include target L2 contract address, entry point selector, originating L1 contract address, payload array, fee info, nonce and an optional transaction hash. The target L2 function must expose an l1_handler entrypoint. Used for integration tests or development without an active L1 chain.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [ \"0x1\", \"0x2\" ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\",\n    \"nonce\": \"0x0\",\n    \"l1_transaction_hash\": \"0x000abc123\", // optional\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Command for Dumping Starknet-Devnet State on Exit\nDESCRIPTION: Docker command to run Starknet-Devnet and dump state to a file on the host machine when exiting. Uses a bind mount to make the dump file accessible from the host.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet executable\nDESCRIPTION: Executes the installed Starknet Devnet binary. This command works if the installation was successful and the path is properly configured.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Body Size Limit via CLI\nDESCRIPTION: Defines the maximum size (in bytes) for incoming HTTP request bodies, supporting larger contract deployments. Provided through the `--request-body-size-limit` CLI option.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/server-config.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Enabling Request/Response Body Logging in Devnet (Shell)\nDESCRIPTION: These commands demonstrate how to enable logging of incoming request and outgoing response bodies in starknet-devnet by specifying 'REQUEST' and 'RESPONSE' in the RUST_LOG environment variable. Request and response logging requires at least the INFO logging level.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/server-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with Dump On Shutdown via Docker (Shell)\nDESCRIPTION: This shell command launches a Dockerized Starknet Devnet that saves its state to a mounted host directory when the container stops. The '--dump-on exit' and '--dump-path' options ensure the state is written on normal shutdown. The command requires Docker, a pre-existing host directory, and proper mounting for data persistence.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/dump-load-restart.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Stop Auto Impersonation - JSON-RPC Request (JavaScript)\nDESCRIPTION: This JSON-RPC request stops automatic account impersonation. It uses the `devnet_stopAutoImpersonate` method. It disables the automatic impersonation feature.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/account-impersonation.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation in StarkNet Core Contract in Solidity\nDESCRIPTION: Example of a constructor from an L1 contract that interacts with Starknet's core contract on mainnet or testnets. This shows how the IStarknetCore interface is typically used in production environments.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_4\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(IStarknetCore starknetCore_) public {\n    starknetCore = starknetCore_;\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting New Block Creation via HTTP POST\nDESCRIPTION: Shows the minimal usage of an HTTP POST request to the `/create_block` endpoint to request a new block to be created containing all pending transactions. No body is required in this request. The response includes the hash of the newly created block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/blocks.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nPOST /create_block\n\nResponse:\n{\"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"}\n```\n\n----------------------------------------\n\nTITLE: Restarting Devnet via API (JSON-RPC)\nDESCRIPTION: Restarts the StarkNet Devnet instance to its original state via a JSON-RPC call to `devnet_restart` (or `POST /restart` with no body). This clears deployed contracts, blocks, storage, and pending transactions, reverting to the state before any transactions or loaded dumps. An optional boolean parameter `restart_l1_to_l2_messaging` (defaults to `false`) controls whether processed L1->L2 messages become accessible again via `flush` after the restart; setting it to true requires reloading the L1 messaging contract. Websocket subscriptions are forgotten.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\",\n    \"params\": {\n        // optional parameter, defaults to false\n        \"restart_l1_to_l2_messaging\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Specific Host Port\nDESCRIPTION: This command runs the Starknet Devnet Docker container, publishing the container's port 5050 to the host machine's port 5050 on localhost (127.0.0.1). Docker needs to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/docker.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Explicitly Setting Request, Response, and Info Logging in Shell\nDESCRIPTION: This command sets the `RUST_LOG` environment variable to explicitly enable logging for request bodies, response bodies, and the standard `INFO` level output. This is another way to ensure both detailed request/response logging and general information logs.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/server-config.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Dumping Starknet-Devnet State on Exit\nDESCRIPTION: Command for dumping Starknet-Devnet state when exiting the application. This handles Ctrl+C (SIGINT) interruptions but not SIGKILL signals.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Send mock L1->L2 message via POST /postman/send_message_to_l2\nDESCRIPTION: Simulates sending a transaction from L1 to L2 without requiring a live L1 node. Requires valid contract addresses and payload data, along with optional fee and nonce. Implements the JSON-RPC request to enqueue messages for cross-layer communication testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/postman.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"devnet_postmanSendMessageToL2\",\n  \"params\": {\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\n      \"0x1\",\n      \"0x2\"\n    ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\",\n    \"nonce\": \"0x0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens Using POST Request in Starknet Devnet\nDESCRIPTION: Sends a POST request to the /mint endpoint to add funds to an account. The request requires an address (0x-prefixed hex string), amount (in WEI or FRI), and unit specification. Fractional amounts are truncated to integers.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/balance.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST /mint\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Impersonating an Account via devnet_impersonateAccount JSON-RPC (JSON)\nDESCRIPTION: Sends a JSON-RPC request to the Starknet Devnet API using the 'devnet_impersonateAccount' method to impersonate a specific account address that is not present in the local state. Required dependency: A running Starknet Devnet instance in forking mode that supports JSON-RPC. The 'account_address' parameter must be a valid Starknet account address. The expected result is an empty response, indicating the account is now impersonated. Only INVOKE and DECLARE transactions can be performed from the impersonated account as validation is bypassed; DEPLOY_ACCOUNT is not supported.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/account-impersonation.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Set logging level for Starknet Devnet (CLI)\nDESCRIPTION: Sets the logging level for the Starknet Devnet server using the `RUST_LOG` environment variable. This allows for different levels of verbosity in the server's output, such as TRACE, DEBUG, INFO, WARN, or ERROR. The provided snippet shows how to specify the logging level when starting the server.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/server-config.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: WebSocket Interaction with Devnet using wscat\nDESCRIPTION: This snippet demonstrates how to interact with the Starknet Devnet's WebSocket endpoint using the `wscat` command-line tool. It connects to the WebSocket server running at `ws://127.0.0.1:5050/ws` and sends a JSON-RPC request to subscribe to new head updates. The server then responds with a result that includes an ID and the JSON-RPC version.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/api.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ wscat -c ws://127.0.0.1:5050/ws\nConnected (press CTRL+C to quit)\n> { \"jsonrpc\": \"2.0\", \"id\": 0, \"method\": \"starknet_subscribeNewHeads\" }\n< {\"id\":0,\"result\":2935616350010920547,\"jsonrpc\":\"2.0\"}\n```\n\n----------------------------------------\n\nTITLE: Response for Block Abortion Request (JSON)\nDESCRIPTION: Represents the successful JSON response received after requesting block abortion. It provides an array containing the hashes of all blocks that were successfully aborted.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/blocks.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Account Class using CLI Option\nDESCRIPTION: This command-line option allows users to specify the type of account class to predeploy during Devnet startup. It supports selecting between the default Cairo 1 (OpenZeppelin 0.8.1) or an older Cairo 0 (OpenZeppelin 0.5.1) account class.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/predeployed.md#_snippet_0\n\nLANGUAGE: Command Line\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level for Starknet Devnet using Shell\nDESCRIPTION: Commands to run the Starknet Devnet server with different logging levels using the RUST_LOG environment variable. Includes instructions for running natively or inside a Docker container. The logging level controls verbosity from TRACE to ERROR, and specialized levels REQUEST and RESPONSE enable logging of HTTP request and response bodies. Requires a shell environment and Starknet Devnet installed or dockerized.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/server-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Help in Dockerized Starknet Devnet - Shell\nDESCRIPTION: Executes the Starknet Devnet help command within a Docker container using the shardlabs/starknet-devnet-rs image. Docker must be installed and the referenced image should be available locally or via DockerHub. Passes the --rm flag to remove the container after execution and --help to show command options.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Token Minting via JSON-RPC in Devnet\nDESCRIPTION: This snippet outlines how to perform token minting using a JSON-RPC request with method 'devnet_mint'. The request includes address, amount, and unit parameters, and receives a response with transaction hash, new balance, and token unit. It requires a compatible JSON-RPC server supporting this method.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/balance.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request to Get Devnet Server Config\nDESCRIPTION: This is the JSON-RPC request body used to call the `devnet_getConfig` method on the Devnet server. Sending this request to the JSON-RPC endpoint (typically `localhost:5050/rpc`) will return the server's configuration details within the result.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/server-config.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet on Linux with Host Network - Shell\nDESCRIPTION: This snippet details running the Starknet Devnet container on a Linux host using Docker's '--network host' mode, which exposes the container's ports directly on the host. The '[--port <PORT>]' option can override the default internal port. This pattern simplifies networking setup but is only available on Linux.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/docker.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with Port Publishing (Mac/Windows) - Docker - Shell\nDESCRIPTION: For non-Linux environments, this snippet shows how to bind the container's internal port 5050 to a host port using Docker's -p flag. The <PORT> must be the desired port on your host; Docker is required. If the HOST part is omitted, the server becomes accessible from multiple host addresses, which may have security implications.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/docker.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Checking Account Balance Using JSON-RPC in Starknet Devnet\nDESCRIPTION: Sends a JSON-RPC request with method devnet_getAccountBalance to check an account's balance. Parameters include address, unit (WEI or FRI), and block_tag (latest or pending).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/balance.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Loading Devnet State\nDESCRIPTION: This request loads a Devnet state from a specified dump file, replacing the current state. It is used for restoring environment snapshots during runtime.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_6\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /load\n{ \"path\": <PATH> }\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_load\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MockStarknetMessaging Contract via JSON-RPC and HTTP POST\nDESCRIPTION: Loads a MockStarknetMessaging contract onto the local Devnet environment to enable L1-L2 message passing. The optional 'address' parameter can specify an existing deployed contract; if omitted, the contract will be deployed anew. This requires access to a running L1 JSON-RPC node via 'network_url'. The endpoint is accessed via POST with the given JSON payload or JSON-RPC method 'devnet_postmanLoad'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/postman.md#_snippet_0\n\nLANGUAGE: HTTP POST\nCODE:\n```\nPOST /postman/load_l1_messaging_contract\n\n{\n  \"network_url\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\"\n}\n```\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanLoad\",\n    \"params\": {\n      \"network_url\": \"http://localhost:8545\",\n      \"address\": \"0x123...def\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling a specific version of Starknet Devnet\nDESCRIPTION: This command pulls a specific version of the Starknet Devnet Docker image using a crates.io version tag. Replace `<CRATES_IO_VERSION>` with the desired version number.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/docker.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Account Info via StarkNet Devnet API (HTTP)\nDESCRIPTION: HTTP GET request example to query the `/predeployed_accounts` endpoint of the StarkNet Devnet API. It retrieves details of predeployed accounts and optionally includes their ETH (WEI) and STRK (FRI) balances if the `with_balance` query parameter is set to `true`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/predeployed.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /predeployed_accounts?[with_balance=true]\n```\n\n----------------------------------------\n\nTITLE: Pulling Seeding Accounts Docker Image with Predeployed Funds\nDESCRIPTION: Commands to pull Docker images that include a fixed set of funded accounts for testing, using the '-seed0' suffix to ensure consistent account deployment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/docker.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Calling devnet_autoImpersonate JSON-RPC\nDESCRIPTION: This JSON-RPC request enables automatic account impersonation in Starknet Devnet. When active, any account address specified in a transaction that does not exist in the local Devnet state will be automatically impersonated. This feature requires Devnet to be in forking mode. The method takes no parameters and returns an empty JSON object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/account-impersonation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level - Dockerized Starknet Devnet - Shell\nDESCRIPTION: Demonstrates how to set the `RUST_LOG` environment variable when running the Docker image of Starknet Devnet. The `-e RUST_LOG=<LEVEL>` flag passes the desired logging level into the container. This allows controlling the Dockerized Devnet's logging output.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/server-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Flushing message queues via POST /postman/flush\nDESCRIPTION: This snippet explains how to trigger the flushing of message queues to simulate message transfer between L1 and L2. The request does not require a body unless a dry run is desired, in which case a 'dry_run' flag can be included. The JSON-RPC method 'devnet_postmanFlush' processes pending messages. Flushing is essential for testing end-to-end message delivery.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Gas Prices via JSON-RPC in Starknet Devnet\nDESCRIPTION: This JSON-RPC request snippet demonstrates how to set multiple gas price parameters ('gas_price_wei', 'data_gas_price_wei', 'gas_price_fri', 'data_gas_price_fri') for a Starknet Devnet instance. The optional 'generate_block' boolean controls whether a new block is generated immediately after the gas prices are set to enforce immediate effect. Dependencies include running a Starknet Devnet with JSON-RPC enabled. The request inputs include gas prices in wei and fri units and the generate_block flag. The response returns the same set of gas price parameters, confirming the operation. All parameters are optional, enabling partial updates of gas prices. Changes take effect starting from the next block generation, with immediate block creation controlled by 'generate_block'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/gas.md#_snippet_0\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"setGasPrice\",\n    \"params\": {\n        \"gas_price_wei\": 1000000,\n        \"data_gas_price_wei\": 10000,\n        \"gas_price_fri\": 10000,\n        \"data_gas_price_fri\": 10000,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Account Class using CLI Option\nDESCRIPTION: Use this command-line option to deploy instances of a custom account contract class. It requires providing the file path to the Sierra artifact of your custom account contract, allowing flexibility beyond the default predeployed types.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/predeployed.md#_snippet_1\n\nLANGUAGE: Command Line\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: Running the Installed StarkNet Devnet Executable (Shell)\nDESCRIPTION: After successful installation via Cargo, this command runs the StarkNet Devnet executable. It assumes the installation path (~/.cargo/bin/) is in the user's PATH environment variable. No additional parameters are necessary for default usage; for custom configuration, CLI parameters can be provided (see further examples). Output is the Devnet application running on the local machine.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/install.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet\n\n```\n\n----------------------------------------\n\nTITLE: Generating Gas Snapshots with Forge (Shell)\nDESCRIPTION: Creates or updates gas usage snapshots for the project's tests using the Forge snapshot command. This is useful for tracking gas costs of contract functions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/solidity/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ forge snapshot\n```\n\n----------------------------------------\n\nTITLE: Set logging level for Dockerized Starknet Devnet\nDESCRIPTION: Sets the logging level for the Dockerized Starknet Devnet server using the `-e` flag with `RUST_LOG`. It facilitates the specification of different logging levels (TRACE, DEBUG, INFO, WARN, ERROR) directly within the Docker command, influencing the verbosity of server output.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/server-config.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Devnet Configuration Response Example\nDESCRIPTION: Example JSON response from the /config endpoint or devnet_getConfig method, showing the current configuration of the Devnet instance including seed, accounts, gas prices, and network settings.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/api.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_fri\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_fri\": 100000000000,\n  \"l2_gas_price_wei\": 100000000000,\n  \"l2_gas_price_fri\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"restricted_methods\": null\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false,\n  \"eth_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\",\n  \"strk_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Token Mint Response Format in Starknet Devnet\nDESCRIPTION: Response format after minting tokens, showing the new balance, unit used, and transaction hash of the minting operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/balance.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Notes on Dumping and Loading Limitations\nDESCRIPTION: This section explains that Devnet dumping captures a list of actions, whereas loading re-executes transactions, leading to non-identical timestamps and possible version incompatibilities. It emphasizes using the same options during dump and load for consistency.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_7\n\n\n\n----------------------------------------\n\nTITLE: Getting predeployed accounts via JSON-RPC in Starknet Devnet\nDESCRIPTION: JSON-RPC requests to retrieve information about predeployed accounts in Starknet Devnet, with optional parameters to include balance information.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/predeployed.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\",\n    \"params\": {\n        // optional; defaults to false\n        \"with_balance\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Auto Impersonate - JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `devnet_autoImpersonate` JSON-RPC method. This method enables automatic account impersonation, so any account that does not exist in local state will be impersonated. The call has no parameters and returns no data.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/account-impersonation.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking L1 to L2 message sending via JSON-RPC devnet_postmanSendMessageToL2\nDESCRIPTION: This request simulates sending a message from L1 to L2 by specifying target contract, method, sender, payload, fee, nonce, and transaction hash. It emulates L1->L2 flow without a live L1 node, primarily used for testing messaging contracts in dev environments. The RPC method used is 'devnet_postmanSendMessageToL2'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [ \"0x1\", \"0x2\" ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\",\n      \"nonce\": \"0x0\",\n      \"l1_transaction_hash\": \"0x000abc123\" // optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Website Source Code Using npm Script (Shell)\nDESCRIPTION: Runs the formatting script defined in the npm project to ensure consistent code style across the website's source files. This command formats all relevant source files according to the project's predefined formatting rules.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm run format\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract Constructor for Mock Messaging with Devnet - Solidity\nDESCRIPTION: Provides a constructor for use with Devnet-based L1-L2 simulations. Accepts a MockStarknetMessaging instance (deviating from normal Starknet contract). Replaces standard contract injection to permit Devnet's mock messaging behavior. Required when simulating L1-L2 in a test/devnet environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_7\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Docker Container with Custom Port - Docker - Shell\nDESCRIPTION: This snippet illustrates how to start a Starknet Devnet Docker container while specifying the port mapping using the docker run -p command. The [HOST:]<PORT>:5050 syntax allows binding the container's internal 5050 port to a host port of your choice. Optional [OPTIONS] may be included for further settings. Docker is the only prerequisite, and users must specify the desired host and port values.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/docker.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State via HTTP POST Request - Starknet Devnet - Bash\nDESCRIPTION: This example shows how to trigger a state dump in Starknet Devnet by sending a POST request to the /dump endpoint. No body parameters are required for this basic operation. If a dump path was specified at startup, it will be used; otherwise, the dump will be returned in the response body, allowing redirection to a custom destination. Dependencies: Running Starknet Devnet with HTTP server enabled. Input: POST to /dump with no payload. Output: dump file or dump data in the response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nPOST /dump\n```\n\n----------------------------------------\n\nTITLE: Dumping Devnet State via JSON-RPC Request - Starknet Devnet - JSON\nDESCRIPTION: This JSON snippet is a JSON-RPC request for the 'devnet_dump' method, used to instruct a running Starknet Devnet instance to perform a state dump and either store it or return it. No parameters are required. Dependencies: A running instance of Starknet Devnet supporting JSON-RPC requests. Input: JSON-RPC compliant request. Output: dump file or response with dumped data.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing StarkNet Devnet from crates.io using Cargo (Shell)\nDESCRIPTION: This shell command installs StarkNet Devnet from crates.io using the Rust package manager, Cargo. It requires Rust and Cargo to be installed on your system as prerequisites. On execution, Cargo downloads and builds the Devnet crate in release mode and places the resulting binary in the user's Cargo bin directory (~/.cargo/bin/). No additional arguments are necessary for basic installation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo install starknet-devnet\n\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Request Body Size Limit for Starknet Devnet CLI in Shell\nDESCRIPTION: Command line snippet to set the maximum allowed size of incoming HTTP request payloads, facilitating the deployment and management of large contracts with bigger request bodies. The size limit is specified in bytes as a CLI argument. Requires Starknet Devnet server installation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/server-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Mint Response Format in Starknet Devnet\nDESCRIPTION: Response from the mint request showing the new balance after minting, the unit used (WEI or FRI), and the transaction hash of the minting operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/balance.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Account Class via CLI in StarkNet Devnet\nDESCRIPTION: Specify a custom account contract implementation by providing the path to its compiled Sierra artifact using the `--account-class-custom` command-line option when launching StarkNet Devnet. Requires a valid path to a Sierra JSON file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/predeployed.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: Requesting Devnet State Dump via CLI\nDESCRIPTION: This snippet illustrates how to manually request a dump through CLI by sending a POST request to '/dump' endpoint without a body or specifying the 'devnet_dump' method via JSON-RPC. The optional 'path' parameter allows specifying dump destination, overriding startup settings.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOST /dump\n{\n  // optional; defaults to the path specified via CLI if defined\n  \"path\": <PATH>\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring State Archive Capacity with Starknet Devnet - Shell\nDESCRIPTION: This shell command starts the Starknet Devnet with a specified state archive capacity using the --state-archive-capacity flag. Setting the capacity to 'full' enables storing the complete state history, allowing queries on previous states by block hash or number. Requires Starknet Devnet to be installed and available on the system path. The <CAPACITY> parameter should be replaced with the desired archive mode (e.g., 'full' or 'none'). The command configures the node prior to startup, and historical state queries are only possible if archive capacity is set to 'full'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/historic-state.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Set Time - JSON-RPC - Starknet Devnet\nDESCRIPTION: Sets the exact time for the next block and generates a new block immediately using a JSON-RPC request. The `time` parameter (in Unix time seconds) must be included within the `params` object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/starknet-time.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Environment File Format for Starknet Devnet\nDESCRIPTION: Example of environment variable configuration file format for Docker. Unlike the direct execution format, Docker environment files should not include the export keyword.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/cli.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Solidity Contract Constructor for L1-L2 Messaging Example - Solidity\nDESCRIPTION: Defines a contract constructor in Solidity that initializes with a reference to an IStarknetCore contract. This establishes the L1-L2 bridge mechanism for message passing on standard Starknet deployments. Input: starknetCore_ (IStarknetCore contract). Sets internal storage for future messaging.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_6\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(IStarknetCore starknetCore_) public {\n    starknetCore = starknetCore_;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Account Class in Starknet Devnet using CLI\nDESCRIPTION: Command line options for selecting between Cairo 0 or Cairo 1 account implementations when starting Starknet Devnet. The default is Cairo 1 (OpenZeppelin 0.8.1).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/predeployed.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Account Class Sierra Artifact Path in CLI\nDESCRIPTION: This snippet demonstrates using the `--account-class-custom` option to provide a path to the Sierra artifact of a custom account. This allows users to deploy a custom account contract, instead of relying on the default predeployed ones.  The input is the path to the compiled Sierra artifact. No direct dependencies are apparent from the command itself, but it requires having a Sierra artifact from a compiled Cairo contract.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/predeployed.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: Running Dockerized Starknet Devnet with Environment Variables\nDESCRIPTION: This command demonstrates how to pass environment variables to a Docker container running Starknet Devnet. The `-e` flag is used to specify each environment variable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Requesting a Dump via HTTP/JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: These JSON and HTTP snippets show how to trigger a state dump of Starknet Devnet either via a POST HTTP request or using a JSON-RPC call. The basic POST /dump endpoint requires no body to dump to a path configured at startup, while passing a 'path' parameter in the body allows specifying a custom output file. For JSON-RPC, the method is 'devnet_dump' with an optional 'path' parameter. Input includes the endpoint and optionally the file path; output is either a file or the raw dump in the response. Dependencies: a running Devnet instance with proper dump-on mode enabled.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/dump-load-restart.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /dump\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": <PATH>\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Configuration via JSON-RPC\nDESCRIPTION: Requests server configuration details using JSON-RPC by sending a request with method `devnet_getConfig`. The response includes the `server_config` property, which contains the configuration data.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/server-config.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping Starknet-Devnet State After Each Block\nDESCRIPTION: Command for automatically dumping Starknet-Devnet state after each block is created, ensuring continuous preservation of the blockchain state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/dump-load-restart.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in Lite Mode\nDESCRIPTION: This command demonstrates how to launch the Starknet Devnet with the `--lite-mode` flag enabled.  Enabling lite mode skips block hash calculation, offering a faster startup and execution for use-cases where these features are not required. This reduces computational overhead.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/lite.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerized Devnet with Individual Environment Variables (-e) (Bash)\nDESCRIPTION: Shows how to pass individual environment variables to a Docker container using the '-e' flag during 'docker run'. Each variable is specified with '-e VAR=VALUE'. This is the standard Docker way to inject environment variables for configuring the application running inside the container and is suitable for passing a few specific settings.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Check Balance via GET Request - Starknet Devnet\nDESCRIPTION: This snippet shows how to check an account balance by sending a GET request to `/account_balance`. It includes the address parameter and optional parameters for the unit (WEI or FRI) and the block tag (latest or pending). It retrieves the account balance from the Starknet Devnet. Requires an HTTP client.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/balance.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1->L2 Transaction with JSON-RPC - JSON\nDESCRIPTION: Uses JSON-RPC method 'devnet_postmanSendMessageToL2' to simulate an L1->L2 message. Parameters mirror the REST example and include all fields for contract and entry point addresses, payload, paid fee, and nonce. Returns transaction result with hash string.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanSendMessageToL2\",\n    \"params\": {\n      \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n      \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\n        \"0x1\",\n        \"0x2\"\n      ],\n      \"paid_fee_on_l1\": \"0x123456abcdef\",\n      \"nonce\":\"0x0\"\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: Setting Starknet Devnet Time via POST Request\nDESCRIPTION: This snippet demonstrates how to set the exact time in Starknet devnet using a POST request to the `/set_time` endpoint. The request body should include the `time` parameter, representing the desired Unix timestamp in seconds. This will generate a new block with the specified timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/starknet-time.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Running Pre-Compiled Starknet Devnet Binary in Bash\nDESCRIPTION: Downloads a compressed platform-specific pre-compiled binary release of starknet-devnet from the GitHub releases page using curl, then extracts it to a target directory, and finally runs the executable from that directory. This skips compilation to save installation time. Requires curl, tar, and correct URL/version/filename substitutions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/install.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvzf - -C <TARGET_DIR>\n```\n\nLANGUAGE: bash\nCODE:\n```\n<TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running the Installed Starknet Devnet Executable\nDESCRIPTION: Executes the `starknet-devnet` binary after it has been installed, typically via `cargo install`. Assumes the installation directory (e.g., `~/.cargo/bin`) is included in the system's PATH environment variable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/install.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Calling devnet_impersonateAccount JSON-RPC\nDESCRIPTION: This JSON-RPC request instructs Starknet Devnet to impersonate a specific account address that does not exist in the local state. This allows transactions from this account to be processed without signature validation, provided Devnet is running in forking mode. The required parameter is the `account_address` to be impersonated. The method returns an empty JSON object upon success.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/account-impersonation.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking L2 to L1 message sending via JSON-RPC devnet_postmanConsumeMessageFromL2\nDESCRIPTION: This request enables simulation of an L2 contract-initiated message to L1 by providing sender, recipient, and payload. It requires a running L1 node and is used for testing messaging in dev environments, producing a message hash for tracking. The RPC method is 'devnet_postmanConsumeMessageFromL2'.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Configuration via REST API\nDESCRIPTION: Shows how to retrieve the current server configuration using a GET request to the /config endpoint and filtering the result to show only the server_config property.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/server-config.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Example Devnet Configuration JSON Response\nDESCRIPTION: Shows a sample JSON structure returned by the `/config` endpoint, detailing the current settings of the Devnet instance. It includes parameters like seed, number of accounts, account class hash, initial balance, gas prices, chain ID, dump settings, state archive mode, fork configuration, server settings, and feature flags. This response helps users understand the operational parameters of their Devnet setup.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_strk\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_strk\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000\n  },\n  \"blocks_on_demand\": false,\n  \"lite_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example Docker Environment File (Plain Text)\nDESCRIPTION: Provides an example of an environment file where variables are defined as `KEY=VALUE` without the `export` keyword. This format is specifically required for use with Docker's `docker run --env-file` option.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/cli.md#_snippet_8\n\nLANGUAGE: Plain Text\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Fetching and running pre-compiled Starknet Devnet binary\nDESCRIPTION: Downloads a platform-specific pre-compiled binary from GitHub releases, extracts it, and runs it. This avoids compilation time during installation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvz -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queues (Dry Run) via REST API - Starknet Devnet - JavaScript\nDESCRIPTION: Posts to /postman/flush with a JSON body containing `dry_run: true` to simulate a flush operation, revealing the effect of the message flush without forwarding messages. Input: dry_run (boolean). Output varies according to backend logic, but no state is changed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/postman.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"dry_run\": true }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Starknet Devnet Server Config via HTTP - Bash\nDESCRIPTION: Fetches the current server configuration from a running Starknet Devnet instance using curl. Requires curl and jq to be installed. The command retrieves a JSON response from the /config endpoint and filters to the server_config field. Useful for programmatically inspecting current server settings; output is JSON.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/server-config.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Stopping Account Impersonation with devnet_stopImpersonateAccount\nDESCRIPTION: JSON-RPC request to stop impersonating a previously impersonated account. Once stopped, transactions from this account will require proper signature validation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/account-impersonation.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Environment Variables\nDESCRIPTION: This Docker command demonstrates how to pass environment variables to a Starknet Devnet instance running within a Docker container. The `-e` flag is used multiple times to specify environment variables and their values. This allows configuration of the Devnet instance, such as setting the seed or account count. The `shardlabs/starknet-devnet-rs` image is then run with those specified environment variables.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/cli.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Config via HTTP GET - Starknet Devnet - Shell\nDESCRIPTION: Demonstrates fetching the Devnet server configuration using `curl` via a `GET` request to the `/config` endpoint. The output is then piped to `jq` to extract only the `server_config` property. This provides a quick way to inspect the active server settings from the command line.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/server-config.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Pulling specific image version from crates.io\nDESCRIPTION: Enables pulling a Docker image tagged with a specific version from crates.io by replacing <CRATES_IO_VERSION>. It requires Docker and network access to Docker Hub.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/docker.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Adding Starknet Devnet plugin with asdf\nDESCRIPTION: Adds the Starknet Devnet plugin to asdf version manager, allowing for easy installation and version management.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf plugin add starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens Using JSON-RPC in Starknet Devnet\nDESCRIPTION: Sends a JSON-RPC request with method devnet_mint to add funds to an account. Parameters include address, amount, and unit (WEI or FRI). Used as an alternative to the REST API endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/balance.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_mint\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"amount\": 500000,\n        \"unit\": \"WEI\" | \"FRI\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Devnet with Docker and Logging Configuration\nDESCRIPTION: Runs the Devnet server inside a Docker container with the desired logging level set via environment variables. Demonstrates the use of docker run with environment variable setting for RUST_LOG.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/server-config.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Stop Impersonating Account - JSON-RPC Request (JavaScript)\nDESCRIPTION: This JSON-RPC request stops the impersonation of a previously impersonated account. It uses the `devnet_stopImpersonateAccount` method. The `account_address` parameter specifies the account to stop impersonating.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/account-impersonation.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Time - CLI - Starknet Devnet\nDESCRIPTION: Defines the starting timestamp for the devnet via the command line interface. This timestamp is used for mining the genesis block.  If not provided, the current Unix time is used.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/starknet-time.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --start-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Timeout for Starknet Devnet (Shell)\nDESCRIPTION: Uses the --timeout command-line argument to set the maximum duration (in seconds) an HTTP request can be served by Starknet Devnet. Replace <SECONDS> with the desired timeout value.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/server-config.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet Config from File and Running (Subshell) (Bash)\nDESCRIPTION: Shows how to source an environment file and run Starknet Devnet within a subshell created using parentheses '()'. This technique ensures that the variables sourced from the file are only set within the subshell's environment and are automatically unset when the subshell exits, preventing pollution of the parent shell's environment. Useful for isolated configurations.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Run the installed Starknet Devnet executable\nDESCRIPTION: This command executes the Starknet Devnet. It assumes that the executable is in a directory included in the system's PATH environment variable, usually after a successful `cargo install`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with specific host and port mapping\nDESCRIPTION: This command runs Starknet Devnet and maps the container's internal port 5050 to a specific IP address and port on the host machine (in this case 127.0.0.1:5050). This makes the Devnet instance accessible on the specified host and port.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/docker.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Requesting Block Creation (JSON-RPC)\nDESCRIPTION: Sends a JSON-RPC request to the Devnet node to trigger the creation of a new block. This block will include all pending transactions received since the last block was mined.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/blocks.md#_snippet_1\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_createBlock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image with Seed Account\nDESCRIPTION: This command pulls a Docker image with pre-funded accounts using a specific seed (seed 0). This can be useful to have consistent, predictable accounts. Docker needs to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/docker.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Starting Devnet with Periodic Block Generation (Bash)\nDESCRIPTION: Starts StarkNet Devnet using the `starknet-devnet` command with the `--block-generation-on <INTERVAL>` option. This enables automatic block creation every `<INTERVAL>` seconds, combining features of 'demand' mode with periodic mining. The example demonstrates how transactions sent between intervals are bundled into the next automatically generated block, and how manual block creation interacts with the timer.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/blocks.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n# t\n$ starknet-devnet --block-generation-on 10\n\n# t + 1s\n# user: send tx1\n\n# t + 4s\n# user: send tx2\n\n# t + 10s\n# Devnet: block automatically generated, contains tx1 and tx2\n\n# t + 12s\n# user: send tx3\n\n# t + 14s\n# user: invoke empty block creation\n# Devnet: generated block contains tx3\n\n# t + 20s\n# Devnet: block automatically generated, contains no txs (manual creation did not restart the counter)\n```\n\n----------------------------------------\n\nTITLE: Stopping Impersonation of a Specific Account via JSON-RPC (JavaScript/JSON)\nDESCRIPTION: Sends a JSON-RPC request to the StarkNet Devnet to stop impersonating a previously specified account address. Transactions from this address will subsequently require standard validation. The `account_address` parameter identifies the account to stop impersonating.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/account-impersonation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from crates.io\nDESCRIPTION: Installs Starknet Devnet using Cargo package manager from crates.io. This downloads the crate, builds it in release mode, and copies it to the Cargo bin directory.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens via HTTP POST in Starknet Devnet - JSON\nDESCRIPTION: This snippet demonstrates minting tokens to a deployed account by sending a POST request with a JSON body to the /mint endpoint. Dependencies include a running Starknet Devnet instance with predeployed ERC20 contracts. Input parameters are address (as a 0x-prefixed string), amount (integer or float, representing WEI or FRI), and the unit (\"WEI\" or \"FRI\"). Outputs are a transaction hash and the new token balance. Fractional amounts are truncated to the nearest integer.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/balance.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"address\": \"0x6e3205f...\",\n    \"amount\": 500000,\n    \"unit\": \"WEI\" | \"FRI\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Config via REST API (Shell)\nDESCRIPTION: Fetches the Starknet Devnet server configuration using a curl command targeting the /config endpoint and pipes the output to jq to extract the server_config JSON property. Assumes Devnet runs on localhost:5050.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/server-config.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with port mapping on Mac and Windows\nDESCRIPTION: This command runs Starknet Devnet and maps the container's internal port 5050 to a specified port on the host machine. This allows access to the Devnet instance from the host machine on the configured port.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/docker.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1->L2 Transaction with REST API - JavaScript\nDESCRIPTION: Demonstrates sending a mock L1->L2 message by POSTing to /postman/send_message_to_l2. All fields—'l2_contract_address', 'entry_point_selector', 'l1_contract_address', 'payload', 'paid_fee_on_l1', and 'nonce'—must be correctly populated. No L1 node is needed. Returns the transaction hash. Invalid addresses prevent block generation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\n      \"0x1\",\n      \"0x2\"\n    ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\",\n    \"nonce\":\"0x0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Time via HTTP POST\nDESCRIPTION: Increases the block timestamp by a specified number of seconds and generates a new block. All subsequent blocks will maintain this time increment. Useful for testing time-dependent contract logic.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/starknet-time.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level for Starknet Devnet - Bash\nDESCRIPTION: Sets the logging level for Starknet Devnet using the RUST_LOG environment variable in a bash shell. Requires that starknet-devnet is installed and available on the PATH. The <LEVEL> parameter controls the verbosity (e.g., DEBUG, INFO, ERROR). This command launches the Devnet server with the specified log detail; output is displayed in the shell.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/server-config.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Port Publishing (Mac/Windows)\nDESCRIPTION: This command runs the Starknet Devnet Docker container on non-Linux systems (Mac and Windows) by publishing the container's port 5050 to a specified host port.  `<PORT>` refers to the host machine's port, the internal port 5050 can also be remapped via the `--port` Devnet option. Requires Docker to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/docker.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Install Starknet Devnet from crates.io (Cargo)\nDESCRIPTION: This command installs the Starknet Devnet executable using Cargo from crates.io. It downloads the crate, builds it in release mode, and copies the executable to the Cargo bin directory, typically `~/.cargo/bin/`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Configuration via REST or JSON-RPC - JSON\nDESCRIPTION: This snippet shows an example response when sending a GET request to the /config endpoint or a JSON-RPC request with method devnet_getConfig on Devnet. It returns various operational and CLI configuration parameters, including network settings, account info, gas price settings, fork and server details, and more. Use the starknet-devnet --help command for clarifications on specific fields; returned fields and their names may differ from CLI inputs. No input parameters required; returns a JSON object representing the current Devnet configuration.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_strk\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_strk\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Block Creation via JSON-RPC in Starknet Devnet (JSON)\nDESCRIPTION: This snippet demonstrates a JSON-RPC formatted request to trigger block creation with the \"devnet_createBlock\" method in Starknet Devnet. The payload uses the JSON-RPC 2.0 specification with \"id\" and \"method\" fields and does not require additional parameters. The typical server response includes the new block's hash. Requires JSON-RPC capable HTTP client.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/blocks.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_createBlock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Messaging Contract via Starknet Devnet Postman (REST, JSON-RPC, JSON)\nDESCRIPTION: These requests load a MockStarknetMessaging contract for testing L1-L2 message passing. The REST endpoint expects a POST request to /postman/load_l1_messaging_contract with JSON specifying networkUrl (L1 node's RPC URL) and an optional address of an existing messaging contract. The JSON-RPC alternative calls devnet_postmanLoad with similar parameters. Dependencies include a running Devnet and an L1 node. Inputs: networkUrl (required), address (optional). Outputs signal successful contract loading. Valid L1 node RPC endpoints are required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/postman.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/load_l1_messaging_contract\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"networkUrl\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanLoad\",\n    \"params\": {\n      \"networkUrl\": \"http://localhost:8545\",\n      \"address\": \"0x123...def\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading L1 Messaging Contract with JSON-RPC - JSON\nDESCRIPTION: Invokes the 'devnet_postmanLoad' JSON-RPC method to load the messaging contract. Includes required 'network_url' and an optional 'address' in the 'params' field. Returns standard JSON-RPC responses on success or error. Prerequisites are a running Devnet instance and access to a valid L1 node endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanLoad\",\n    \"params\": {\n      \"network_url\": \"http://localhost:8545\",\n      \"address\": \"0x123...def\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing Time in Starknet Devnet (JSON-RPC)\nDESCRIPTION: Increases the block timestamp via the JSON-RPC `devnet_increaseTime` method. The method uses a `time` parameter to determine how many seconds to increment the time by, generating a new block. Subsequent blocks will inherit the increment. Input: `time` (in seconds). Output: Generates a new block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/starknet-time.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Starknet Devnet Restrictive Mode with Method List (Shell)\nDESCRIPTION: This snippet shows how to enable restrictive mode with a specified list of methods.  The command `starknet-devnet --restrictive-mode devnet_dump devnet_config` restricts the specified methods `devnet_dump` and `devnet_config`.  If the specified method or route is misspelled, then Devnet will fail to start. This command allows for finer control over what methods are restricted during Devnet operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/restrictive.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --restrictive-mode devnet_dump devnet_config\n```\n\n----------------------------------------\n\nTITLE: Downloading and Running a Pre-compiled StarkNet Devnet Binary\nDESCRIPTION: Downloads a specific version's pre-compiled, compressed archive from GitHub releases using `curl`, extracts it to a target directory (`<TARGET_DIR>`) using `tar`, and then executes the binary. Replace `<VERSION>`, `<COMPRESSED_ARCHIVE>`, and `<TARGET_DIR>` with appropriate values.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvz -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Binding Starknet Devnet to localhost Port 5050 - Shell\nDESCRIPTION: This example shows how to run the container so that Devnet is available on the local machine at 127.0.0.1:5050. It is suitable for local-only development and testing, limiting access to just the localhost interface. Docker must be running and 5050 must be available on the host.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/docker.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Loading MockStarknetMessaging Contract via Starknet Devnet Postman API (JSON, JSON-RPC)\nDESCRIPTION: Loads a MockStarknetMessaging contract onto the Devnet environment by either deploying a new contract or fetching an existing one at a specified address. Requires the URL of the JSON-RPC API for an L1 node, such as Anvil or Ganache, to interact with. The 'address' parameter is optional and determines whether to deploy or fetch the contract. This operation supports dumping, meaning it can be recorded and replayed during Devnet dump/load sequences.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/postman.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /postman/load_l1_messaging_contract\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network_url\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\"\n}\n```\n\nLANGUAGE: json-rpc\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanLoad\",\n    \"params\": {\n      \"network_url\": \"http://localhost:8545\",\n      \"address\": \"0x123...def\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and running pre-compiled Starknet-Devnet binary\nDESCRIPTION: This snippet shows how to download, extract and run a pre-compiled Starknet-Devnet binary.  It uses `curl` to download a compressed archive from a GitHub release, pipes it to `tar` to extract it, and then executes the `starknet-devnet` binary from the target directory.  The user needs to replace `<VERSION>` and `<COMPRESSED_ARCHIVE>` with the specific release version and archive file name and `<TARGET_DIR>` with desired directory. The user needs `curl` and `tar` installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ curl -sSfL https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvz -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Requesting New Block Creation Using JSON-RPC\nDESCRIPTION: This snippet demonstrates how to request a new block creation in Starknet Devnet by sending a JSON-RPC POST request with the method \"devnet_createBlock\" and no parameters. The server responds with the hash of the newly created block. This method requires the Devnet to be running, optionally with block generation modes enabled. The input is a JSON-RPC 2.0 formatted request, and the output is the block hash as a hexadecimal string. This snippet is used to convert the pending block to the latest block and finalize its transactions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/blocks.md#_snippet_0\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_createBlock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devnet Logging Level via Environment Variable (Shell)\nDESCRIPTION: This command sets the RUST_LOG environment variable to control the logging level for the starknet-devnet process before starting it. Different levels (TRACE, DEBUG, INFO, WARN, ERROR) can be specified to control the verbosity of the output.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/server-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in Lite Mode with CLI Flag\nDESCRIPTION: Command to start Starknet Devnet in lite mode using the --lite-mode flag. This mode skips calculating block hashes and is useful for use cases that don't require this functionality.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/lite.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Setting Starknet Devnet Time without Block Generation via POST\nDESCRIPTION: This snippet demonstrates how to set the exact time in Starknet devnet for the next block generation, without immediately generating a new block. It uses a POST request to the `/set_time` endpoint with `generate_block` set to `false`.  The next block will then use specified timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/starknet-time.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Running Devnet Container with Host Network (Linux)\nDESCRIPTION: Runs a StarkNet Devnet container on a Linux host, directly using the host's network stack via `--network host`. This exposes the container's internal port (default 5050, configurable with `--port <PORT>`) directly on the host machine's interfaces.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/docker.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Docker Load example - Starknet Devnet (Bash)\nDESCRIPTION: This docker run command demonstrates loading a previously dumped Devnet state from a specified path.  It utilizes bind mounts to map a host directory to a container directory, enabling the Devnet to access the dump file. It requires the path to the dump file and is using shardlabs/starknet-devnet-rs docker image. This is a practical example showing how to load the dump in Docker. It listens to the port 5050 on the host machine.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_9\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Pulling a Commit-Specific StarkNet Devnet Docker Image\nDESCRIPTION: Downloads a StarkNet Devnet Docker image built from a specific commit on the main branch of the repository. Replace `<COMMIT_HASH>` with the full 40-character lowercase hexadecimal SHA1 commit hash.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/docker.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Loading L1 Messaging Contract with POST\nDESCRIPTION: This snippet demonstrates how to load a `MockStarknetMessaging` contract using a POST request. The `network_url` specifies the L1 node's JSON-RPC API endpoint, and `address` is the optional address of the deployed contract. If no address is provided, Devnet deploys a new contract. Requires a running L1 node accessible at the specified URL.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/postman.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"network_url\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Balance via JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: This code snippet demonstrates using the devnet_getAccountBalance method in a JSON-RPC request to retrieve the balance of a specified account. Parameters must include the address (0x-prefixed hex), and can include unit (WEI or FRI) and block_tag (latest or pending). The jsonrpc version, method name, and request id are mandatory fields. This call returns the account balance in the requested unit and block state context.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/balance.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading StarkNet Devnet State on Request (cURL)\nDESCRIPTION: Triggers the loading of a Devnet state dump while the Devnet is running by sending a POST request to the `/load` endpoint. The request body must be JSON containing the path to the dump file. Replace `<HOST>`, `<PORT>`, and `<PATH>`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/dump-load-restart.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://<HOST>:<PORT>/load -d '{ \"path\": <PATH> }' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Illustrating Periodic Block Generation in StarkNet Devnet (Bash)\nDESCRIPTION: Demonstrates the behavior of StarkNet Devnet when started with periodic block generation (`--block-generation-on <INTERVAL>`). Shows how transactions sent by users are batched and included in blocks automatically at the specified interval (10 seconds in this example). It also illustrates how manual block creation (invoked at t+14s) interacts with the automatic timer, which still triggers at the next scheduled interval (t+20s).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/blocks.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n# t\n$ starknet-devnet --block-generation-on 10\n\n# t + 1s\n# user: send tx1\n\n# t + 4s\n# user: send tx2\n\n# t + 10s\n# Devnet: block automatically generated, contains tx1 and tx2\n\n# t + 12s\n# user: send tx3\n\n# t + 14s\n# user: invoke empty block creation\n# Devnet: generated block contains tx3\n\n# t + 20s\n# Devnet: block automatically generated, contains no txs (manual creation did not restart the counter)\n```\n\n----------------------------------------\n\nTITLE: Dumping State On Demand using HTTP POST (Bash/JSON)\nDESCRIPTION: This snippet demonstrates dumping the Devnet state on demand by first starting Devnet with the appropriate dump mode and then making an HTTP POST request to the '/dump' endpoint. The API call uses JSON to specify the target path, and must include a 'Content-Type: application/json' header. The flags '--dump-on exit' and '--dump-path' must be provided on startup. Replace '<HOST>', '<PORT>', and '<PATH>' for your environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/dump-load-restart.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -X POST http://<HOST>:<PORT>/dump -d '{ \"path\": <PATH> }' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Isolating Shell Environment When Sourcing Configuration File - Shell\nDESCRIPTION: Runs the starknet-devnet CLI in a subshell where environment variables are set only for the process scope, avoiding pollution of the parent shell environment. The variables are loaded from a configuration file using source in a subshell context. This is important when temporary configuration is required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queue with JSON-RPC - JSON\nDESCRIPTION: Invokes the 'devnet_postmanFlush' method via JSON-RPC to flush messages. May include the optional 'dry_run' boolean flag in 'params' to simulate the flush without committing changes, allowing observation of potential results without side effects.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\",\n    \"params\": {\n      \"dry_run\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Configuration via API (Shell)\nDESCRIPTION: This command uses curl to send a GET request to the /config endpoint of the Devnet server running on localhost:5050. The output is then piped to jq to extract the server_config property from the JSON response. This provides a programmatic way to inspect the Devnet's current server configuration. Requires curl and jq to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/server-config.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Listing available Starknet Devnet versions in asdf\nDESCRIPTION: Command to list all installable versions of Starknet Devnet available through the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf list-all starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Demonstrating CLI Argument Precedence over Environment Variables (Bash)\nDESCRIPTION: Provides a specific example illustrating that a command-line argument ('--seed 42') takes precedence over an environment variable ('SEED=10') set simultaneously in the command line. When this command is executed, Starknet Devnet will use the seed value '42'. This highlights the order of configuration source priority.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables to Dockerized Starknet Devnet - Shell\nDESCRIPTION: Shows how to use the -e flag with docker run to inject environment variables into the container running the Starknet Devnet. Replace <VAR1> and <VAR2> with actual configuration keys and values. Each variable is supplied as a separate -e argument. Used for customizing the Devnet instance inside a Docker container.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Restarting Devnet - Starknet Devnet (JSON)\nDESCRIPTION: This code snippet demonstrates how to restart a Devnet instance using a JSON-RPC request. The `devnet_restart` method is called to reset the state of the deployed contracts, blocks and storage updates to the original state. The optional `restart_l1_to_l2_messaging` parameter (defaults to false) allows for re-processing L1->L2 messages.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_8\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\",\n    \"params\": {\n        \"restart_l1_to_l2_messaging\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering On-Demand Devnet Dump via API (HTTP/JSON-RPC)\nDESCRIPTION: Triggers a state dump of a running StarkNet Devnet instance via an HTTP POST request to `/dump` or a JSON-RPC call to `devnet_dump`. An optional `path` parameter can specify the dump file location, overriding any path set via CLI. If no path is provided (neither in the request nor via CLI), the dump content is returned in the response body.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/dump-load-restart.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /dump\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\"\n}\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /dump\n{\n  // optional; defaults to the path specified via CLI if defined\n  \"path\": <PATH>\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\",\n    \"params\": {\n        // optional; defaults to the path specified via CLI if defined\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Block Time via Starknet Devnet POST /set_time (HTTP/JSON)\nDESCRIPTION: Sets the blockchain time to a specified Unix timestamp and optionally generates a new block immediately. This endpoint accepts a JSON payload with a required 'time' parameter (Unix time in seconds) and an optional 'generate_block' boolean parameter that defaults to true. If 'generate_block' is false, no block is generated immediately, but the timestamp will be applied to the next block. Users must be cautious as setting a block time in the past can cause unexpected behavior.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/starknet-time.md#_snippet_0\n\nLANGUAGE: HTTP/JSON\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\nLANGUAGE: HTTP/JSON\nCODE:\n```\nPOST /set_time\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Loading MockStarknetMessaging Contract via POST Endpoint using HTTP\nDESCRIPTION: This HTTP POST endpoint '/postman/load_l1_messaging_contract' loads a MockStarknetMessaging contract for L1-L2 interaction testing. It accepts an optional \"address\" of an existing deployed contract; if omitted, a new contract instance will be deployed. The \"networkUrl\" parameter specifies the JSON-RPC API URL of the local or remote L1 node (e.g., Anvil, Ganache, Hardhat). This contract simulates the L1 messaging environment necessary for Devnet testing workflows.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/postman.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /postman/load_l1_messaging_contract\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"networkUrl\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with Host Networking on Linux - Shell\nDESCRIPTION: Runs the Starknet Devnet container using Docker's host networking mode, mapping the internal ports directly to the host for optimal performance on Linux platforms. Optionally, the --port flag lets you change the default port (5050). This requires Docker and a Linux environment with support for the host network driver.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/docker.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Stopping Account Impersonation via Starknet Devnet JSON-RPC (JavaScript)\nDESCRIPTION: Uses the devnet_stopImpersonateAccount JSON-RPC method to remove the impersonation status previously set on a specific account address, reverting the account to normal state validation. Requires specifying the same account_address parameter as used in impersonation. Returns an empty response if the operation is successful.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/account-impersonation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Restarting Devnet with L1-L2 Messaging Support\nDESCRIPTION: This snippet shows how to restart Devnet while optionally preserving L1-L2 message queue state by setting 'restart_l1_to_l2_messaging' parameter via JSON-RPC. Adjusts message queue behavior post-restart.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\",\n    \"params\": {\n        \"restart_l1_to_l2_messaging\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping StarkNet Devnet State on Exit in Docker (Docker CLI)\nDESCRIPTION: Runs the `shardlabs/starknet-devnet-rs` Docker image, configuring it to dump its state on exit (SIGINT). It maps host port 5050 and uses a bind mount for `/path/to/dumpdir`. The state will be saved to `/path/to/dumpdir/mydump` within the container (mapped from the host). Requires Docker and the existence of the host directory `/path/to/dumpdir`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_8\n\nLANGUAGE: Docker\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Call for Restarting Devnet with L1-L2 Messaging Option\nDESCRIPTION: This request restarts Devnet and includes an optional parameter to re-enable access to L1-to-L2 messaging, affecting message queues and contract state for messaging environments.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_9\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\",\n    \"params\": {\n        \"restart_l1_to_l2_messaging\": true | false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting RUST_LOG Environment Variable (Shell)\nDESCRIPTION: This command sets the RUST_LOG environment variable to a specified level before starting the starknet-devnet server. It controls the verbosity of the Devnet's logs. The <LEVEL> placeholder should be replaced with one of the valid logging levels (TRACE, DEBUG, INFO, WARN, ERROR).\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/server-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from GitHub\nDESCRIPTION: This code snippet illustrates installing Starknet Devnet from its GitHub repository using `cargo install`. The `--locked` flag ensures that the dependencies listed in `Cargo.lock` in the project root are used. Requires Rust and `cargo` to be installed, along with git configured.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/install.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Dumping StarkNet Devnet State After Each Block (Shell)\nDESCRIPTION: Starts the StarkNet Devnet and configures it to save its state to the specified file path after each new block is created. This ensures more frequent backups but may impact performance. Requires the `starknet-devnet` executable.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/dump-load-restart.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --dump-on block --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Loading a messaging contract using JSON-RPC method devnet_postmanLoad\nDESCRIPTION: This JSON-RPC request loads a messaging contract into the devnet environment. The method accepts the network URL and optional address. If no address is provided, a new contract deployment occurs, and its address is returned. It supports various L1 network options such as Anvil, Sepolia, Ganache, Geth, and Hardhat.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanLoad\",\n    \"params\": {\n      \"network_url\": \"http://localhost:8545\",\n      \"address\": \"0x123...def\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Running a Pre-compiled Starknet Devnet Binary\nDESCRIPTION: Downloads a specific version's compressed archive of the pre-compiled Starknet Devnet binary from GitHub releases using `curl`, extracts it using `tar` into a specified target directory, and then executes the binary. Replace `<VERSION>`, `<COMPRESSED_ARCHIVE>`, and `<TARGET_DIR>` with the actual release version, archive filename (platform-specific), and desired extraction path. Requires `curl` and `tar`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/install.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl https://github.com/0xSpaceShard/starknet-devnet/releases/download/<VERSION>/<COMPRESSED_ARCHIVE> | tar -xvzf -C <TARGET_DIR>\n$ <TARGET_DIR>/starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Custom Account Class - CLI Option\nDESCRIPTION: This command-line option allows users to provide a custom Sierra artifact path for their account when deploying a Starknet Devnet. This enables the use of custom account implementations.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/predeployed.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: Installing starknet-devnet via Cargo (Rust) - Shell\nDESCRIPTION: This snippet demonstrates how to install the starknet-devnet executable by compiling from source using Rust's package manager cargo. It includes installing from crates.io and directly from the GitHub repository with dependency locking via the --locked flag. It assumes Rust is installed and compatible with the version specified in rust-toolchain.toml. The commands produce a release-mode binary copied to ~/.cargo/bin/ ready for execution.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/install.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo install starknet-devnet\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Starting Devnet with Default Restrictive Mode (Bash)\nDESCRIPTION: This command starts the StarkNet Devnet process with the restrictive mode enabled using its default settings. When run, several built-in methods like `devnet_mint`, `devnet_load`, `devnet_restart`, `devnet_createBlock`, `devnet_abortBlocks`, `devnet_impersonateAccount`, `devnet_autoImpersonate`, and `devnet_getPredeployedAccounts` will be forbidden. Attempts to call these methods will result in specific errors.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/restrictive.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --restrictive-mode\n```\n\n----------------------------------------\n\nTITLE: Stopping Automatic Account Impersonation with devnet_stopAutoImpersonate\nDESCRIPTION: JSON-RPC request to disable automatic account impersonation. After this call, accounts will need to be impersonated individually to bypass signature validation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/account-impersonation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Stop Impersonation via JSON-RPC (JavaScript)\nDESCRIPTION: This snippet shows a JSON-RPC request to stop impersonating a previously impersonated account in Starknet Devnet. The `account_address` parameter identifies the account whose impersonation should be stopped.  The request doesn't return a value.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/account-impersonation.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Config via JSON-RPC - Starknet Devnet - JSON\nDESCRIPTION: Shows the structure of a standard JSON-RPC request object used to retrieve the server configuration from Devnet. It specifies `jsonrpc` version \"2.0\", an `id` for the request, and the method name \"devnet_getConfig\". This request should be sent to the Devnet JSON-RPC endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/server-config.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks in Starknet Devnet Using HTTP POST\nDESCRIPTION: This snippet illustrates how to request abortion of blocks starting at a specific block ID by sending an HTTP POST with a JSON body to the '/abort_blocks' endpoint. The 'starting_block_id' parameter specifies where to begin aborting blocks. Aborting reverts the state and transactions of the specified block and all subsequent blocks, effectively rolling back the blockchain state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/blocks.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"starting_block_id\": BLOCK_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Request Timeout (Shell)\nDESCRIPTION: This command starts starknet-devnet and specifies the maximum time an HTTP request can take using the --timeout argument. This is useful for handling long-running operations like deploying large contracts. Replace <SECONDS> with the desired timeout duration in seconds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/server-config.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks via HTTP POST in StarkNet Devnet\nDESCRIPTION: Sends a POST request to the `/abort_blocks` endpoint with a JSON body specifying the `starting_block_hash`. This reverts the Devnet state to the block preceding the specified one, effectively aborting all blocks from the `starting_block_hash` onwards. This functionality requires Devnet to be run with `--state-archive-capacity full`. The response lists the hashes of the successfully aborted blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/blocks.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /abort_blocks\n{\n    \"starting_block_hash\": BLOCK_HASH\n}\n```\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Image with Predeployed Accounts - Shell\nDESCRIPTION: This snippet demonstrates how to pull Docker images that come preloaded with funded test accounts, by appending the '-seed0' suffix. It supports both version-tagged and latest images. Docker must be installed. When used, running containers from these images provides deterministic predeployed accounts for development and testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/docker.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Running a Starknet Devnet Docker container\nDESCRIPTION: This command runs a Starknet Devnet Docker container, publishing the container's port 5050 to a specified port on the host machine. The `[HOST:]<PORT>` part needs to be replaced with the desired host address and port.  `[OPTIONS]` represents the command line options available for Starknet Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/docker.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L2 to L1 Message with JSON-RPC in JSON\nDESCRIPTION: Example of sending a mock L2 to L1 message using the JSON-RPC interface. This performs the same function as the REST endpoint but follows JSON-RPC protocol standards.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanConsumeMessageFromL2\",\n    \"params\": {\n      \"from_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n      \"to_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n      \"payload\": [\"0x0\", \"0x1\", \"0x3e8\"],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time without Block Generation via JSON-RPC\nDESCRIPTION: The JSON-RPC equivalent for setting exact time without immediate block generation. Uses the devnet_setTime method with generate_block parameter set to false.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/starknet-time.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Example for MockStarknetMessaging in Solidity\nDESCRIPTION: Demonstrates how to replace the standard StarknetCore contract with a MockStarknetMessaging contract in a Solidity constructor, enabling local Devnet L1-L2 interaction testing. This modification is required because Devnet uses a mock contract to simulate messaging instead of the production IStarknetCore interface.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/postman.md#_snippet_4\n\nLANGUAGE: Solidity\nCODE:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Time via JSON-RPC with Block Generation in Starknet Devnet\nDESCRIPTION: Sets the exact block and state timestamp using the `devnet_setTime` JSON-RPC method. This call includes the desired time parameter and triggers immediate generation of a new block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/starknet-time.md#_snippet_1\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Configuration via GET or JSON-RPC\nDESCRIPTION: Example response from the Devnet configuration API, showing the full configuration state including seed, account settings, gas prices, chain ID, and other parameters. This can be obtained via a GET request to /config or a JSON-RPC request with method name devnet_getConfig.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/api.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_strk\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_strk\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"request_body_size_limit\": 2000000\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping State on Exit with Starknet Devnet (Bash)\nDESCRIPTION: This Bash command runs Starknet Devnet and configures it to save its internal state to a specified path when the process exits (e.g., via Ctrl+C/SIGINT). It requires the 'starknet-devnet' binary and a writable disk location for dump data. The '--dump-on exit' flag ensures the dump occurs on normal shutdown, but does not handle forced termination (SIGKILL). The key parameter '--dump-path' specifies the disk path where the dump will be stored.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/dump-load-restart.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n----------------------------------------\n\nTITLE: Calling devnet_stopImpersonateAccount JSON-RPC\nDESCRIPTION: This JSON-RPC request commands Starknet Devnet to cease impersonating a specific account that was previously marked for impersonation using `devnet_impersonateAccount`. It requires the `account_address` parameter specifying which account to stop impersonating. The method returns an empty JSON object indicating the operation's success.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/account-impersonation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Invoking JSON-RPC Method to Check Account Balance - JSON-RPC\nDESCRIPTION: This JSON-RPC request structure invokes the `devnet_getAccountBalance` method to retrieve the balance of a specific account. The `params` object requires the `address` and optionally accepts `unit` (defaulting to WEI) and `block_tag` (defaulting to latest) to filter the balance query by token type and block state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/balance.md#_snippet_4\n\nLANGUAGE: JSON-RPC\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getAccountBalance\",\n    \"params\": {\n        \"address\": \"0x6e3205f...\",\n        \"unit\": \"WEI\" | \"FRI\",\n        \"block_tag\": \"latest\" | \"pending\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Devnet via Inline Environment Variables (Bash)\nDESCRIPTION: Shows the general syntax for setting environment variables directly before executing the 'starknet-devnet' command in a Bash or similar shell. This method allows specifying configuration parameters using their corresponding environment variable names and values for the duration of this specific command execution. It's useful for quick one-off configurations.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/cli.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Pulling Specific Starknet Devnet Docker Image Tags - Bash\nDESCRIPTION: Illustrates how to pull specific versions of the Starknet Devnet Docker images corresponding to crates.io published versions or commit hashes. Users can append version suffixes or a '-seed0' suffix to access images with predefined funded accounts, to facilitate deterministic deployments and testing. This requires knowledge of valid version strings or commit hashes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Flushing message queues with dry run option\nDESCRIPTION: This request allows simulating the flush operation without actual message delivery by setting 'dry_run' to true. Useful for testing the effect of flushing without changing state. It relies on the JSON-RPC method 'devnet_postmanFlush' with an optional parameter.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\",\n    \"params\": {\n      \"dry_run\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check Balance Request - Starknet Devnet\nDESCRIPTION: This snippet demonstrates a `GET` request to `/account_balance` to retrieve the token balance of a given address on Starknet Devnet. The request includes the `address`, and optionally, `unit` and `block_tag` parameters. The address should be a 0x-prefixed hex string, `unit` defaults to `WEI`, and `block_tag` to `latest`. The API retrieves account balance for provided token.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/balance.md#_snippet_2\n\nLANGUAGE: API\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: Increasing Block Time (with Block Generation) via HTTP/JSON-RPC\nDESCRIPTION: Increases the Starknet Devnet block timestamp by the specified `TIME_IN_SECONDS` (relative amount) and immediately generates a new block. This increment is applied relative to the natural progression of time since the last block plus the provided offset. Use either the `/increase_time` HTTP POST endpoint or the `devnet_increaseTime` JSON-RPC method.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/starknet-time.md#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Devnet State via HTTP POST Request - Starknet Devnet - Bash\nDESCRIPTION: This example demonstrates sending a POST request to the /load endpoint with a JSON body specifying 'path' to a dump file. If successful, it replaces the current Devnet state with the one loaded from the file. Dependencies: Running Devnet HTTP server with dump file available. Input: POST /load with JSON. Output: Updated in-memory Devnet with restored state.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/dump-load-restart.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nPOST /load\n{ \"path\": <PATH> }\n```\n\n----------------------------------------\n\nTITLE: Response Structure for Minting Operation - JSON\nDESCRIPTION: This JSON object shows the expected response structure after successfully minting tokens via either the HTTP `/mint` endpoint or the `devnet_mint` JSON-RPC method. It includes the account's `new_balance` after the minting, the `unit` of the token minted, and the `tx_hash` of the transaction that performed the minting.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/balance.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running starknet-devnet in Lite Mode via Command Line\nDESCRIPTION: This snippet demonstrates how to start the starknet-devnet in Lite Mode by using the command-line flag '--lite-mode'. It notes that enabling Lite Mode skips certain operations such as calculating block hashes, which may be suitable for scenarios not requiring full functionality.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/lite.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Docker Image by Git Commit Hash (Bash)\nDESCRIPTION: Downloads a Docker image built directly from a specific commit on the `main` branch of the Devnet repository. This is useful for accessing recent bug fixes or features before an official release. Replace `<COMMIT_HASH>` with the full SHA1 digest of the desired commit.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/docker.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Retrieve Predeployed Accounts - HTTP GET\nDESCRIPTION: This HTTP GET request retrieves information about the predeployed contracts and accounts in the Starknet Devnet. The optional `with_balance` parameter specifies whether to include WEI and FRI balances in the response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/predeployed.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nGET /predeployed_accounts?[with_balance=true]\n```\n\n----------------------------------------\n\nTITLE: Setting Time in Starknet Devnet without block generation (JSON-RPC)\nDESCRIPTION: Sets the exact time using JSON-RPC `devnet_setTime` and does not immediately generate a block, using the  `generate_block`: false parameter. The `time` parameter sets the time in Unix time seconds. Input:  `time` (in seconds) and `generate_block`: false. Output: Sets the timestamp for the next generated block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/starknet-time.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS,\n        \"generate_block\": false\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing StarknetCore in Solidity (Solidity Constructor Example)\nDESCRIPTION: These Solidity contract constructors illustrate how to wire up a Starknet L1 contract for messaging with L2. The first constructor accepts an interface to StarknetCore, as per standard setup. For Devnet-specific tests, the constructor is updated to accept MockStarknetMessaging. Requires deploying the appropriate contract to L1. Inputs: contract reference as immutable or persistent variable. Outputs: initialized contract state. For Devnet, MockStarknetMessaging must replace standard StarknetCore logic.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/postman.md#_snippet_2\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(IStarknetCore starknetCore_) public {\n    starknetCore = starknetCore_;\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping with Custom Path - Starknet Devnet (JSON)\nDESCRIPTION: This JSON-RPC request demonstrates dumping to a custom path. It sends a POST request to the `/dump` endpoint. The `path` parameter specifies the location where the dump file should be saved. This path will override the one specified via CLI if specified.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_dump\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Restrictive Mode in Devnet (Default)\nDESCRIPTION: This command enables restrictive mode in Starknet Devnet, utilizing the default set of restricted methods. It restricts methods like devnet_mint, devnet_load, etc. No specific method names are provided, so the default restrictions apply. The input is the command line argument, and the expected output is the Devnet instance running with the default restrictions enforced.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/restrictive.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --restrictive-mode\n```\n\n----------------------------------------\n\nTITLE: Response Format for StarkNet Devnet Minting API (/mint)\nDESCRIPTION: Describes the JSON response structure returned by the `POST /mint` endpoint upon successful minting. It includes the 'new_balance' of the account for the specified token unit, the 'unit' itself ('WEI' or 'FRI'), and the blockchain transaction hash 'tx_hash' for the mint operation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/balance.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dumping on request - Starknet Devnet (Bash)\nDESCRIPTION: This is a generic command that illustrates the usage of `--dump-on` parameter with `<MODE>` to determine how to dump the Devnet state. The optional `--dump-path` parameter allows specifying the path of the dump file. This also includes the dump on request which can be called via POST or JSON-RPC requests.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-on <MODE> [--dump-path <FILE>]\n```\n\n----------------------------------------\n\nTITLE: Adding and Installing starknet-devnet Versions with asdf Version Manager - Shell\nDESCRIPTION: This snippet illustrates how to manage the installation of starknet-devnet versions through the asdf version manager. It shows adding the starknet-devnet plugin, listing all available versions, and installing either the latest or a specific version. This method facilitates easy switching between multiple versions without manual builds.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/install.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ asdf plugin add starknet-devnet\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ asdf list-all starknet-devnet\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ asdf install starknet-devnet latest\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ asdf install starknet-devnet 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Devnet Start Time via CLI (Shell)\nDESCRIPTION: Configures the timestamp for the genesis block of Starknet Devnet when launching it from the command line using the `--start-time` argument. The `<SECONDS>` argument should be a positive value representing Unix time seconds. If omitted, the current system time is used as the default.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/starknet-time.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --start-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with State Archive Capacity (Shell)\nDESCRIPTION: Starts the Starknet Devnet instance with a specified state archive capacity. The `<CAPACITY>` placeholder should be replaced with either `full` to store all state history or `none` (the default) to only keep the latest state. Setting to `full` is required for querying past blocks via RPC endpoints.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/historic-state.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time via JSON-RPC (Generates Block)\nDESCRIPTION: Uses the `devnet_setTime` JSON-RPC method to set the exact block timestamp. Requires a JSON payload with the `time` parameter (in Unix seconds) within the `params` object. This operation generates a new block with the specified timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/starknet-time.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Request/Response Data - Shell\nDESCRIPTION: This snippet provides an example of how to log request and response data by specifying the `REQUEST` and `RESPONSE` levels within the `RUST_LOG` environment variable, along with the `INFO` level.  It is used in the shell to specify logging options for the starknet-devnet instance.  Requires the `starknet-devnet` binary and the `jq` utility.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/server-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to Check Account Balance - HTTP\nDESCRIPTION: This is the structure for an HTTP GET request to the `/account_balance` endpoint. The `address` query parameter is mandatory and specifies the account whose balance is to be checked. Optional parameters include `unit` (defaulting to WEI) and `block_tag` (defaulting to latest) to specify the token type and block state respectively.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/balance.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /account_balance?address=<ADDRESS>[&unit=<FRI|WEI>][&block_tag=<latest|pending>]\n```\n\n----------------------------------------\n\nTITLE: Configuring account class in Starknet Devnet CLI\nDESCRIPTION: Commands for selecting between Cairo 0 and Cairo 1 account classes or specifying a custom account class for predeployment in Starknet Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/predeployed.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\nLANGUAGE: bash\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: Pulling the Latest Starknet Devnet Docker Image - Shell\nDESCRIPTION: This snippet shows how to download the latest version of the Starknet Devnet Docker image from Docker Hub using the 'docker pull' command. Requires Docker installed and internet access. The pulled image can then be used to run Starknet Devnet containers. No special parameters are required for the basic latest version.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/docker.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Loading via POST request - Starknet Devnet (JSON)\nDESCRIPTION: This snippet shows how to load a Devnet instance via JSON-RPC POST request to `/load` endpoint. It specifies the path of the dump file using the `path` parameter. Loading replaces the current state with the one in the file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_7\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_load\",\n    \"params\": {\n        \"path\": <PATH>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Starknet Devnet Time via API (No Block Generation)\nDESCRIPTION: Sends a POST request to the `/set_time` endpoint with a JSON payload specifying the Unix timestamp and `generate_block: false`. This sets the time for the *next* block to be generated, without immediately creating one. The specified timestamp will be used when the next block generation occurs.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/starknet-time.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /set_time\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": TIME_IN_SECONDS,\n    \"generate_block\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Dumping Devnet State on Exit\nDESCRIPTION: This Docker command runs Devnet with bind mounts to a host directory, enabling dumping of state when stopping the container. It configures the container to save its state to a specified path on shutdown.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/dump-load-restart.md#_snippet_10\n\nLANGUAGE: Shell\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Compiling and Launching Starknet Devnet with Known Seed (bash)\nDESCRIPTION: Compiles Cairo contract artifacts and launches Devnet with a pre-defined random seed for deterministic behavior. Assumes presence of 'contracts' directory and 'generate_artifacts.sh' script. The seed value is set for reproducibility of contract addresses and accounts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# First, ensure you have compiled the artifacts required for abigen:\ncd contracts && bash generate_artifacts.sh\n\n# Then run Devnet with known seed.\ncargo run -- --seed 42\n```\n\n----------------------------------------\n\nTITLE: Response for Mock L2→L1 Message - JavaScript\nDESCRIPTION: This JSON response from /postman/consume_message_from_l2 returns a message_hash after successfully simulating the L2 to L1 message. The hash is a unique identifier for the mock message consumed, useful for test verification and onchain simulation purposes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/postman.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\"message_hash\": \"0xae14f241131b524ac8d043d9cb4934253ac5c5589afef19f0d761816a9c7e26d\"}\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet in Lite Mode - Shell\nDESCRIPTION: Execute this command in your terminal to launch the Starknet Devnet instance with the --lite-mode flag enabled. This configuration skips computationally intensive steps, like calculating block hashes, which is useful for specific development or testing scenarios where these features are not required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/lite.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Restarting Devnet via API Request\nDESCRIPTION: This snippet details how to trigger a Devnet restart by sending a POST request to '/restart' or a JSON-RPC call with method 'devnet_restart'. All current contracts and blocks are reset to the initial state, excluding loaded transactions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/dump-load-restart.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\nPOST /restart\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_restart\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running StarkNet Devnet from Source in Release Mode (Shell)\nDESCRIPTION: This command compiles and runs StarkNet Devnet using Cargo's release profile, resulting in optimized performance at the cost of longer compilation time. Dependencies are the same as for other Cargo run commands. This is ideal for production-like environments or benchmarking the application.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/install.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run --release\n\n```\n\n----------------------------------------\n\nTITLE: Increasing Starknet Devnet Time via POST\nDESCRIPTION: This snippet demonstrates how to increase the block timestamp in Starknet devnet using a POST request to the `/increase_time` endpoint. The request body should include the `time` parameter, representing the increment in seconds. This will generate a new block with the increased timestamp and affect all subsequent blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/starknet-time.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet on Mac or Windows with Port Publishing\nDESCRIPTION: Command for running Starknet Devnet on non-Linux systems by publishing the container's internal port to a host port. The internal default port is 5050.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/docker.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Account Class (CLI) - Bash\nDESCRIPTION: Use this command-line option to provide the file path to the Sierra artifact of a custom account contract class that Devnet should predeploy instead of the default ones.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/predeployed.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n--account-class-custom <SIERRA_PATH>\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Dumping Devnet State to File\nDESCRIPTION: This Docker command runs the Devnet container with a bind mount, configured to dump the Devnet state upon shutdown into a file within the host directory specified.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:5050:5050 \\\n  --mount type=bind,source=/path/to/dumpdir,target=/path/to/dumpdir \\\n  shardlabs/starknet-devnet-rs \\\n  --dump-on exit --dump-path /path/to/dumpdir/mydump\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration File with Dockerized StarkNet Devnet\nDESCRIPTION: Explains how to load environment variables from a file when using Dockerized Devnet. The file (`.my-env-file`) should contain `VAR=VALUE` pairs (without `export`). The `docker run` command uses the `--env-file` option to specify the configuration file.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/cli.md#_snippet_4\n\nLANGUAGE: dotenv\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Posting Flush Request to Starknet Devnet Postman API - JavaScript\nDESCRIPTION: This JSON body is used with the /postman/flush endpoint to trigger the flush of messages between L1 and L2, optionally in dry-run mode. When dry_run is set to true, the endpoint simulates flushing without actually forwarding messages, allowing developers to preview the effects. No body is required for actual flushing, but including the dry_run attribute can help with debugging. Prerequisites: an L1 node must be running unless dry_run is enabled.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/postman.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ \"dry_run\": true }\n```\n\n----------------------------------------\n\nTITLE: Impersonate Account via JSON-RPC (JavaScript)\nDESCRIPTION: This snippet demonstrates a JSON-RPC request to impersonate a specified account address in Starknet Devnet. It allows sending transactions as an account that doesn't exist locally. Requires Devnet running in forking mode. The `account_address` parameter specifies the account to impersonate.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/account-impersonation.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Server Configuration via API (Shell)\nDESCRIPTION: This command uses curl to make a GET request to the /config endpoint of the running starknet-devnet server and pipes the JSON response to jq to extract and display only the server_config property.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/server-config.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Checking Devnet CLI Options using --help\nDESCRIPTION: This snippet demonstrates how to display all available command-line options for the Starknet Devnet. It uses the `--help` flag to output a list of all configurable parameters and their descriptions. This is useful for understanding the available options and their usage. The output will vary depending on the Devnet version.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/cli.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --help\n```\n\n----------------------------------------\n\nTITLE: Compilation Environment Setup for StarkNet Devnet\nDESCRIPTION: This snippet details the dependencies used for compiling the StarkNet Devnet, specifying versions of the Rust ‘scarb’ tool, Cairo compiler, and Sierra language. It helps ensure compatibility and reproducibility of the build environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/test_artifacts/cairo1/too_big/compilation_info.txt#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nscarb 2.9.2 (5070ff374 2024-12-11)\\ncairo: 2.9.2 (https://crates.io/crates/cairo-lang-compiler/2.9.2)\\nsierra: 1.6.0\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from a File in Docker\nDESCRIPTION: This snippet shows how to load environment variables from a file, such as .my-env-file, when running Starknet Devnet within a Docker container. It uses the `--env-file` flag to provide the file to Docker. It removes the `export` statements from the file when used with docker.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/cli.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker run --env-file .my-env-file shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Flushing Message Queue with REST API - No Parameters\nDESCRIPTION: Performs a flush of the L1-L2 message queue by sending a POST request to /postman/flush. No body or parameters are needed unless 'dry_run' is specified. Flushing triggers message processing between layers, for end-to-end test scenarios.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from Source with Arguments\nDESCRIPTION: Compiles and runs Starknet Devnet from its source code directory, passing optional command-line arguments (`[ARGS]`) to the `starknet-devnet` executable. The `--` separator distinguishes arguments for `cargo run` from arguments intended for the application. Requires Rust, Cargo, and the project source code.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/install.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Increase Time - JSON-RPC - Starknet Devnet\nDESCRIPTION: Increases the block timestamp by the provided amount (in seconds) using JSON-RPC. This increment will be applied to all subsequent blocks. Requires `time` parameter within the `params` object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/starknet-time.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Docker Image - Bash\nDESCRIPTION: Demonstrates the command to pull the latest Starknet Devnet Docker image from Docker Hub. This is the minimal prerequisite step to obtain the image before running a container. It assumes Docker is installed and configured on the host machine. No additional parameters are required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Starknet Devnet Docker Image - Docker - Shell\nDESCRIPTION: This snippet demonstrates how to download the latest version of the Starknet Devnet Docker image from Docker Hub using the docker pull command. No additional dependencies are required beyond Docker itself. The output will be the latest devnet image stored locally for container-based development or testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/docker.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Comparing Transaction Status Semantics in Markdown\nDESCRIPTION: A markdown table comparing the difference in transaction status semantics between official Starknet testnet and Devnet. It shows how REJECTED and REVERTED statuses have different meanings in each environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/intro.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tx status  | Official testnet                                            | Devnet                                                     |\n| ---------- | ----------------------------------------------------------- | ---------------------------------------------------------- |\n| `REJECTED` | validation failed; not included in a block                  | not used                                                   |\n| `REVERTED` | validation passed but execution failed; included in a block | validation or execution failed; not included in a block`*` |\n\n`*`: dummy zeroes (0) in tx info for block number and tx index\n```\n\n----------------------------------------\n\nTITLE: Increasing Time via JSON-RPC\nDESCRIPTION: Uses the `devnet_increaseTime` JSON-RPC method to advance the block timestamp. Requires a JSON payload with the `time` parameter (seconds to add) within the `params` object. Generates a new block with the increased timestamp.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/starknet-time.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Starknet Devnet Start Time via CLI\nDESCRIPTION: This snippet shows how to define the starting timestamp for Starknet devnet via the command-line interface. The `--start-time` flag is used to specify the desired Unix timestamp in seconds for the genesis block. If not specified, the default value is the current Unix time.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/starknet-time.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --start-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Stopping Auto-Impersonation - JSON-RPC\nDESCRIPTION: This JavaScript code snippet demonstrates the JSON-RPC request to stop the automatic impersonation feature, which was previously enabled. It disables the automatic impersonation behavior, causing accounts not found locally to not be impersonated. No parameters are required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/account-impersonation.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Config via HTTP - Shell\nDESCRIPTION: This command retrieves the server configuration by sending a `GET` request to the `/config` endpoint. It uses the `curl` command to send the HTTP request and `jq` to parse the JSON response, specifically extracting the `server_config` property.  Requires `curl` and `jq` utilities.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/server-config.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Flushing Messages with JSON-RPC in Dry Run Mode\nDESCRIPTION: Example of how to perform a dry run of message flushing using the JSON-RPC interface. This performs the same function as the REST dry run but follows JSON-RPC protocol standards.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_postmanFlush\",\n    \"params\": {\n      \"dry_run\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with Contracts using Cast (Shell)\nDESCRIPTION: Uses the Cast command-line tool to interact with EVM smart contracts, send transactions, or query chain data. Requires specifying a specific subcommand (e.g., `send`, `call`, `block`) in place of `<subcommand>`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/solidity/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cast <subcommand>\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Docusaurus Website (Shell)\nDESCRIPTION: Generates static HTML and assets for deployment from the Docusaurus site source files. The output will be placed into the `build` directory, which can then be hosted on any static content serving platform or service.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/README.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm run build\n```\n\n----------------------------------------\n\nTITLE: Requesting New Block Creation (JSON-RPC)\nDESCRIPTION: Provides the JSON-RPC payload for the `devnet_createBlock` method. Sending this request triggers the creation of a new block in StarkNet Devnet, which will include all currently pending transactions. This method requires no parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/blocks.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_createBlock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Devnet with Automatic Block Generation\nDESCRIPTION: Example of running Starknet Devnet with automatic block generation every 10 seconds, showing the timeline of transaction submissions and block creation events.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/blocks.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# t\n$ starknet-devnet --block-generation-on 10\n\n# t + 1s\n# user: send tx1\n\n# t + 4s\n# user: send tx2\n\n# t + 10s\n# Devnet: block automatically generated, contains tx1 and tx2\n\n# t + 12s\n# user: send tx3\n\n# t + 14s\n# user: invoke empty block creation\n# Devnet: generated block contains tx3\n\n# t + 20s\n# Devnet: block automatically generated, contains no txs (manual creation did not restart the counter)\n```\n\n----------------------------------------\n\nTITLE: Smart Contract Constructor Assignment in Solidity\nDESCRIPTION: Presents a Solidity contract constructor for production ('IStarknetCore') and Devnet testing ('MockStarknetMessaging') environments. In production, 'starknetCore' is initialized from an IStarknetCore reference, while in Devnet, it is initialized using a MockStarknetMessaging instance. This allows the same contract logic to be reusable in test and mainnet contexts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_5\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(IStarknetCore starknetCore_) public {\n    starknetCore = starknetCore_;\n}\n```\n\nLANGUAGE: solidity\nCODE:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Environment File Syntax Example for Starknet Devnet - Shell\nDESCRIPTION: Provides the syntax for a Docker-compatible environment file, where each configuration variable is specified as KEY=VALUE without the export statement. This file can be passed to docker run via the --env-file flag. Required for Docker-based bulk environment configuration; all comments and unsupported syntax should be removed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nSEED=42\nACCOUNTS=3\n...\n```\n\n----------------------------------------\n\nTITLE: Pulling the Starknet Devnet Docker Image\nDESCRIPTION: Command to pull the latest Starknet Devnet Docker image from Docker Hub. This downloads the most recent officially released version.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/running/docker.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Install Starknet Devnet from GitHub (Cargo)\nDESCRIPTION: This command installs the Starknet Devnet executable directly from the GitHub repository. The `--locked` flag ensures that the dependencies listed in `Cargo.lock` are used, providing a consistent build environment. Familiarizing yourself with `cargo install` is recommended.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Increasing Time in Starknet Devnet (POST)\nDESCRIPTION: Increases the block timestamp by a specified amount of seconds, generating a new block. The POST request is sent to the `/increase_time` endpoint. The request body contains a `time` parameter that specifies the increment in Unix time seconds. All subsequent blocks will keep this increment. Input: `time` (in seconds). Output: Generates a new block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/starknet-time.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\nPOST /increase_time\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Devnet Request Body Size Limit (Shell)\nDESCRIPTION: This command starts the starknet-devnet server and specifies the maximum allowed size for an incoming HTTP request body using the --request-body-size-limit CLI argument. This is necessary for handling large contract deployments or transactions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/server-config.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --request-body-size-limit <BYTES>\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using GitHub Username Authentication (Shell)\nDESCRIPTION: Deploys the website to the `gh-pages` branch on GitHub using the GitHub username as an environment variable `GIT_USER`. Suitable for use cases where SSH is not used or configured, requiring the user's GitHub username to authenticate deployment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ GIT_USER=<Your GitHub username> npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Accessing Pre-release Devnet Fixes via Commit SHA\nDESCRIPTION: Command to retrieve Docker images built from specific commits in the main branch using full SHA hashes, allowing access to recent fixes before official releases.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/docker.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Initializing Starknet Devnet in Fork Mode\nDESCRIPTION: Command to start Starknet Devnet in fork mode, connecting to a specified network. The --fork-network parameter accepts a URL to a Starknet JSON-RPC API provider, while the optional --fork-block parameter allows specifying a particular block to fork from.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/forking.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Load Request for Devnet State\nDESCRIPTION: This JSON-RPC call instructs the Devnet to load its state from a specified file, reinitializing the network to the dumped state by re-executing transactions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/dump-load-restart.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": \"1\",\n  \"method\": \"devnet_load\",\n  \"params\": {\n    \"path\": <PATH>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Request and Response Logging in Shell\nDESCRIPTION: This command configures the `RUST_LOG` environment variable to include `REQUEST` and `RESPONSE` levels, enabling the logging of HTTP request and response bodies. This requires at least `INFO` level logging and is shown running Devnet directly.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/server-config.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Deploying Docusaurus Website Using SSH Authentication (Shell)\nDESCRIPTION: Deploys the built Docusaurus website to the `gh-pages` branch on GitHub using SSH for authentication. Requires that SSH keys are properly configured for GitHub access and the environment variable `USE_SSH` is set to true.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/README.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ USE_SSH=true npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Loading L1 Messaging Contract with REST API - JSON\nDESCRIPTION: Sends a POST request to /postman/load_l1_messaging_contract to load a MockStarknetMessaging contract into Devnet. The request body should include the L1 node's JSON-RPC URL as 'network_url', with an optional 'address' for a pre-deployed contract. If no address is provided, a new contract will be deployed. The network URL can refer to local or testnet Ethereum nodes. Expects a JSON object as the request body.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/postman.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"network_url\": \"http://localhost:8545\",\n  \"address\": \"0x123...def\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing latest Starknet Devnet with asdf\nDESCRIPTION: Installs the latest version of Starknet Devnet using the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf install starknet-devnet latest\n```\n\n----------------------------------------\n\nTITLE: Pulling a Starknet Devnet Docker image with prefunded accounts\nDESCRIPTION: This command pulls a Starknet Devnet Docker image that has been preconfigured with funded accounts, using seed 0 for consistent deployment. This provides a deterministic set of pre-funded accounts for development.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/docker.md#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<VERSION>-seed0\n```\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:latest-seed0\n```\n\n----------------------------------------\n\nTITLE: Explicitly Enabling Request/Response and INFO Logging (Shell)\nDESCRIPTION: Similar to the previous snippet, this command sets RUST_LOG to include \"REQUEST\", \"RESPONSE\", and explicitly \"INFO\". This ensures that standard INFO level logs are shown along with request and response bodies. It serves as an alternative way to enable request/response logging while guaranteeing the INFO level is active.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/server-config.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Listing installable versions of Starknet-Devnet using asdf\nDESCRIPTION: This command lists all available versions of the Starknet-Devnet package that can be installed using `asdf`.  It queries the plugin to retrieve a list of all available versions.  Requires the `asdf` plugin for `starknet-devnet` to be added.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ asdf list-all starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Increasing Block Time via POST API (Generates Block)\nDESCRIPTION: Sends a POST request to the `/increase_time` endpoint to increase the block timestamp by a specified duration. Requires a JSON body with the 'time' parameter specifying the increment in seconds. This operation generates a new block, and the increment persists for subsequent blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/starknet-time.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /increase_time\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Server Configuration via curl\nDESCRIPTION: Retrieves the server configuration by sending a `GET` request to the `/config` endpoint and parsing the `server_config` property using `jq`.  Requires `curl` and `jq` to be installed. The server needs to be running at localhost:5050.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/server-config.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:5050/config | jq .server_config\n```\n\n----------------------------------------\n\nTITLE: Selecting Account Class via StarkNet Devnet CLI\nDESCRIPTION: Specifies the command-line option to choose between predeploying standard Cairo 0 (OpenZeppelin 0.5.1) or Cairo 1 (OpenZeppelin 0.8.1) account contract classes when starting StarkNet Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/predeployed.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Precedence Example with Starknet Devnet\nDESCRIPTION: Demonstrates that CLI arguments take precedence over environment variables when both are specified. In this example, seed value 42 will be used despite the environment variable setting it to 10.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Stopping Automatic Account Impersonation with devnet_stopAutoImpersonate in JavaScript\nDESCRIPTION: This snippet shows how to use the JSON-RPC method devnet_stopAutoImpersonate to disable the automatic impersonation of accounts. The method requires an empty params object and returns an empty response.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/account-impersonation.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Run Starknet Devnet from source (Cargo)\nDESCRIPTION: This command runs the Starknet Devnet directly from the source code using Cargo. It compiles and executes the project.  Additional command-line arguments can be passed to the Devnet by appending them after `--`.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Increasing Time via JSON-RPC\nDESCRIPTION: The JSON-RPC equivalent for increasing block timestamp. Uses the devnet_increaseTime method to add the specified seconds to the current timestamp and generates a new block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/starknet-time.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_increaseTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Request/Response Logging with Explicit INFO Level (Shell)\nDESCRIPTION: Explicitly sets the RUST_LOG environment variable to enable logging of HTTP request and response bodies along with the INFO level for the Starknet Devnet binary.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/server-config.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image by Version\nDESCRIPTION: This command is used to download a specific version of the Starknet Devnet Docker image from Docker Hub, corresponding to a crates.io version. Replace `<CRATES_IO_VERSION>` with the desired version tag.  Docker needs to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/docker.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Setting Initial Start Time via CLI Argument (Shell)\nDESCRIPTION: Starts Starknet Devnet with a specific initial timestamp using the `--start-time` command-line argument. The provided `<START_TIME_IN_SECONDS>` must be a Unix timestamp greater than 0.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/starknet-time.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --start-time <START_TIME_IN_SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Initializing Starknet Devnet in Fork Mode\nDESCRIPTION: Command to start Starknet Devnet in fork mode, allowing interaction with contracts from mainnet or testnet. The command requires a JSON-RPC API provider URL and optionally a specific block number to fork from.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/forking.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --fork-network <URL> [--fork-block <BLOCK_NUMBER>]\n```\n\n----------------------------------------\n\nTITLE: Sourcing a Configuration File and Running Starknet Devnet - Shell\nDESCRIPTION: Runs the starknet-devnet command after sourcing a configuration file to set environment variables in the current shell session. The source command loads variables from the file (.my-env-file) before starting the instance. This approach reduces command-line length when using many options; the file must use shell-compatible syntax.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Binding Starknet Devnet to Localhost - Docker - Shell\nDESCRIPTION: This command allows users to specifically bind the Starknet Devnet container to localhost (127.0.0.1) on port 5050 using Docker. The only prerequisite is Docker, and this setup restricts access to the service so that only the local machine can connect. It is useful for local-only development or testing.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/docker.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -p 127.0.0.1:5050:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Response for Aborting Blocks - JSON\nDESCRIPTION: The response from abort_blocks is a JSON object listing all aborted block hashes in order. This confirms the rollback, and the state reverts to the last accepted block prior to the specified starting_block_hash. The blocks are now only referencable by hash; further aborts or abortions of forked/origin blocks are unsupported.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/blocks.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"aborted\": [BLOCK_HASH_0, BLOCK_HASH_1, ...]\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from a File\nDESCRIPTION: This Bash script demonstrates how to load environment variables from a file and use them to configure Starknet Devnet. The `export` keyword sets environment variables inside the file. The `source` command then executes the file in the current shell, making the environment variables available to the `starknet-devnet` command. Using parentheses around the command will prevent environment pollution.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/cli.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\nLANGUAGE: Bash\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Pulling a Starknet Devnet image by commit hash\nDESCRIPTION: This command pulls a Starknet Devnet Docker image tagged with a specific commit hash from the `main` branch. Replace `<COMMIT_HASH>` with the full 40-character SHA1 digest of the commit.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/docker.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration File for Starknet Devnet in Subshell\nDESCRIPTION: Loads configurations from a file in a subshell to prevent environment pollution. This command ensures the environment variables set in the file are unset after Devnet exits.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/cli.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Server Config via JSON-RPC\nDESCRIPTION: Example JSON-RPC request payload to retrieve the Starknet Devnet configuration. Send this payload to the Devnet's JSON-RPC endpoint using the 'devnet_getConfig' method.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/server-config.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Starknet Devnet Docker Image (Bash)\nDESCRIPTION: Downloads the latest stable version of the Starknet Devnet Docker image from Docker Hub. This is the standard command to get the most recently released build of the Devnet.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/docker.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Forge (Shell)\nDESCRIPTION: Executes the test suite defined for the project using the Forge test command. This command runs all functions marked as tests within the test contracts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/solidity/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ forge test\n```\n\n----------------------------------------\n\nTITLE: Displaying Starknet Devnet Help\nDESCRIPTION: This command displays all available command-line options for the Starknet Devnet. It provides a list of configurable parameters and their descriptions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --help\n```\n\n----------------------------------------\n\nTITLE: Displaying Starknet Devnet Help\nDESCRIPTION: This command displays the available command-line options for configuring the Starknet Devnet instance. It provides information on all configurable parameters and their default values.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --help\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Image by Version - Shell\nDESCRIPTION: This command fetches a specific version of the Starknet Devnet Docker image using a crates.io version string. Replace <CRATES_IO_VERSION> with the appropriate version tag (e.g., 0.4.0). Docker must be installed. On successful execution, the locally available image will be tagged with the requested version.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/docker.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull shardlabs/starknet-devnet-rs:<CRATES_IO_VERSION>\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Container with Port Mapping - Bash\nDESCRIPTION: Shows how to run a Starknet Devnet container with explicit port publishing from the container's internal port 5050 to a specified host port. This is necessary on non-Linux platforms like macOS and Windows to enable access to the Devnet server outside of the container. The user can customize the HOST and PORT parameters to restrict network accessibility.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: Explicitly Setting Logging Level with Request/Response Logging\nDESCRIPTION: Shows how to explicitly set the logging level to INFO along with request and response logging. This ensures all three types of logs are captured.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/server-config.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Response for New Block Creation Request\nDESCRIPTION: Shows the JSON response received after successfully requesting new block creation via the `/create_block` REST endpoint or the `devnet_createBlock` JSON-RPC method. The response contains the hash of the newly created block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/blocks.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\"block_hash\": \"0x115e1b390cafa7942b6ab141ab85040defe7dee9bef3bc31d8b5b3d01cc9c67\"}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Devnet Configuration via API\nDESCRIPTION: Provides an example of the JSON response received when requesting the Devnet's configuration via the `/config` HTTP GET endpoint or the `devnet_getConfig` JSON-RPC method. The response maps various Devnet parameters, both specified via CLI and default ones, to their current operational values. Note that this is an example, and exact values or included parameters may vary.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/api.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"seed\": 4063802897,\n  \"total_accounts\": 10,\n  \"account_contract_class_hash\": \"0x61dac032f228abef9c6626f995015233097ae253a7f72d68552db02f2971b8f\",\n  \"predeployed_accounts_initial_balance\": \"1000000000000000000000\",\n  \"start_time\": null,\n  \"gas_price_wei\": 100000000000,\n  \"gas_price_fri\": 100000000000,\n  \"data_gas_price_wei\": 100000000000,\n  \"data_gas_price_fri\": 100000000000,\n  \"l2_gas_price_wei\": 100000000000,\n  \"l2_gas_price_fri\": 100000000000,\n  \"chain_id\": \"SN_SEPOLIA\",\n  \"dump_on\": \"exit\",\n  \"dump_path\": \"dump_path.json\",\n  \"state_archive\": \"none\",\n  \"fork_config\": {\n    \"url\": \"http://rpc.pathfinder.equilibrium.co/integration-sepolia/rpc/v0_7\",\n    \"block_number\": 26429\n  },\n  \"server_config\": {\n    \"host\": \"127.0.0.1\",\n    \"port\": 5050,\n    \"timeout\": 120,\n    \"restricted_methods\": null\n  },\n  \"block_generation\": null,\n  \"lite_mode\": false,\n  \"eth_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\",\n  \"strk_erc20_class_hash\": \"0x046ded64ae2dead6448e247234bab192a9c483644395b66f2155f2614e5804b0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Account Impersonation via Starknet Devnet JSON-RPC (JavaScript)\nDESCRIPTION: Invokes the devnet_autoImpersonate JSON-RPC method to enable automatic impersonation of all accounts that do not exist in the local Devnet state, simplifying testing with unknown accounts. This method does not require any parameters and returns an empty response. Requires Devnet to be run in forking mode.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/account-impersonation.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_autoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Server Configuration via JSON-RPC\nDESCRIPTION: Demonstrates a JSON-RPC request to retrieve the server configuration.  The method name used is `devnet_getConfig`.  The JSON should be sent as a POST request to the server's JSON-RPC endpoint.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/server-config.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getConfig\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using CLI argument to override environment variable\nDESCRIPTION: This command demonstrates that the seed value is set to 42 due to the CLI argument overriding the environment variable SEED=10.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Transaction Status Comparison Table in Markdown\nDESCRIPTION: A markdown table comparing transaction status semantics between official Starknet testnet and Devnet, focusing on the REJECTED and REVERTED statuses.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/intro.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Tx status  | Official testnet                                            | Devnet                                                     |\n| ---------- | ----------------------------------------------------------- | ---------------------------------------------------------- |\n| `REJECTED` | validation failed; not included in a block                  | not used                                                   |\n| `REVERTED` | validation passed but execution failed; included in a block | validation or execution failed; not included in a block`*` |\n```\n\n----------------------------------------\n\nTITLE: Server Response to Gas Price Modification Request (JSON)\nDESCRIPTION: This example contains the typical JSON response from the server after a successful setGasPrice RPC call. It confirms new gas price values that have been set, echoing back the supplied parameters. The response does not include error or status fields, and simply returns the updated gas price fields as unsigned integers. No other keys are present.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/gas.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"gas_price_wei\": 1000000,\n    \"data_gas_price_wei\": 10000,\n    \"gas_price_fri\": 10000,\n    \"data_gas_price_fri\": 10000\n}\n```\n\n----------------------------------------\n\nTITLE: Using --network host on Linux to run StarkNet Devnet\nDESCRIPTION: Runs the container with network mode 'host' on Linux, exposing internal ports directly on the host network. Requires Docker and Linux OS. No port forwarding needed, but risks security exposure.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/docker.md#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with arguments\nDESCRIPTION: Runs Starknet Devnet from source code with additional command-line arguments passed after the double dash.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run -- [ARGS]\n```\n\n----------------------------------------\n\nTITLE: Installing latest version via asdf (Bash)\nDESCRIPTION: This command installs the latest available version of starknet-devnet using asdf. It requires asdf and the starknet-devnet plugin to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ asdf install starknet-devnet latest\n```\n\n----------------------------------------\n\nTITLE: Install specific Starknet Devnet version (asdf)\nDESCRIPTION: This command installs a specific version of Starknet Devnet using the asdf version manager.  The version number (e.g., `0.2.0`) is explicitly provided to ensure a particular version is installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ asdf install starknet-devnet 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Container with Manual Port Binding - Shell\nDESCRIPTION: This snippet is for Mac and Windows users who must explicitly publish the container's internal port (default 5050) to a host port using the '-p' Docker argument. Essential for making Devnet accessible on the host. No '[HOST]' part binds to all interfaces, which can create security concerns.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/docker.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run -p [HOST:]<PORT>:5050 shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Impersonate Account - JSON-RPC Request (JavaScript)\nDESCRIPTION: This JSON-RPC request impersonates a specific account address that does not exist in the local Devnet state. It uses the `devnet_impersonateAccount` method. The `account_address` parameter specifies the account to impersonate.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/account-impersonation.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_impersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Starknet Devnet Configuration via Environment Variables\nDESCRIPTION: Example of setting Starknet Devnet configuration parameters using environment variables. Variables must be specified before the command.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks via REST API (HTTP POST)\nDESCRIPTION: Demonstrates how to initiate block abortion using an HTTP POST request to the `/abort_blocks` endpoint. The request body must be a JSON object containing the `starting_block_id` (block hash or number) from which to start aborting blocks up to the latest.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/blocks.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /abort_blocks\n{\n    \"starting_block_id\": BLOCK_ID\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Starknet Devnet CLI Help\nDESCRIPTION: Commands for displaying all available CLI options for Starknet Devnet. Shows both direct execution and Docker container usage.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/cli.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --help\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Running installed Starknet Devnet executable\nDESCRIPTION: Command to run the Starknet Devnet executable after installation, assuming the installation directory is in your PATH.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/running/install.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Listing available Starknet Devnet versions in asdf\nDESCRIPTION: Command to display all installable versions of Starknet Devnet available through the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf list-all starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Starting Starknet Devnet with State Archive Capacity\nDESCRIPTION: This command starts the Starknet Devnet with a specified state archive capacity.  The `<CAPACITY>` placeholder should be replaced with either `full` to store all states or `none` (default) to store only the latest state. Setting the capacity to `full` enables querying the state at historical blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/historic-state.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ starknet-devnet --state-archive-capacity <CAPACITY>\n```\n\n----------------------------------------\n\nTITLE: Installing specific Starknet Devnet version with asdf\nDESCRIPTION: Installs a specific version (0.2.0) of Starknet Devnet using the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf install starknet-devnet 0.2.0\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with CLI Argument & Seed\nDESCRIPTION: This command demonstrates the precedence of CLI arguments over environment variables. Despite SEED being set to 10 in the environment, the CLI argument --seed 42 will take effect, and Devnet will use seed value 42.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/cli.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Displaying Starknet Devnet Docker Help\nDESCRIPTION: This command displays all available command-line options for the Starknet Devnet when using the Docker image. It lists the configurable parameters specific to the Dockerized environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/cli.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --rm shardlabs/starknet-devnet-rs --help\n```\n\n----------------------------------------\n\nTITLE: Starting Anvil Node - Ethereum (bash)\nDESCRIPTION: Starts a local Ethereum node using Anvil. Anvil must be installed beforehand. No arguments are strictly required, but additional options can be provided. This is the initial step in the test environment setup and opens the default RPC endpoint on localhost.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nanvil\n```\n\n----------------------------------------\n\nTITLE: Setting Exact Time via JSON-RPC (JSON)\nDESCRIPTION: Sets the Starknet block and state timestamp to an exact Unix time in seconds using the JSON-RPC method `devnet_setTime`. By default, this method also generates a new block immediately. The required parameter `time` is provided within the `params` object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/starknet-time.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\nJSON-RPC\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_setTime\",\n    \"params\": {\n        \"time\": TIME_IN_SECONDS\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from source code\nDESCRIPTION: Command to build and run Starknet Devnet directly from source code after cloning the repository. This is useful for development or customization purposes.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/install.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Precedence Example of CLI vs Environment Variables - Shell\nDESCRIPTION: Illustrates the effect of providing both an environment variable (SEED=10) and a CLI argument (--seed 42) for the same configuration parameter. The CLI argument takes precedence, so the seed used is 42. Requires the starknet-devnet binary and applicable configuration options.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/running/cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ SEED=10 starknet-devnet --seed 42\n```\n\n----------------------------------------\n\nTITLE: Consuming L2 Message on Ethereum and Sending Response to L2 - Withdrawal/Deposit (bash)\nDESCRIPTION: Consumes an L2-to-L1 message by invoking the 'withdraw' method via Forge's cast tool, providing contract and message content, gas, and private key. Then checks updated balance. Next, sends a deposit back to L2 by calling the 'deposit' method, again passing contract addresses, tokens, and requisite parameters. Each cast call and send assumes live contracts, funded accounts, and accessible endpoints.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncast send 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 \"withdraw(uint256, uint256, uint256)\" \\\n     0x34ba56f92265f0868c57d3fe72ecab144fc96f97954bbbc4252cef8e8a979ba 0x1 0x1 \\\n     --rpc-url $ETH_RPC_URL --private-key $ACCOUNT_PRIVATE_KEY \\\n     --gas-limit 999999\n\ngit\ncast call 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 \"get_balance(uint256)(uint256)\" 0x1\n\ncast send 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 \"deposit(uint256, uint256, uint256)\" \\\n     \"$CONTRACT_L2\" 0x1 0x1 \\\n     --rpc-url $ETH_RPC_URL --private-key $ACCOUNT_PRIVATE_KEY \\\n     --gas-limit 999999 --value 1gwei\n\ncast call 0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512 \"get_balance(uint256)(uint256)\" 0x1\n```\n\n----------------------------------------\n\nTITLE: Building and Running StarkNet Devnet from Source using Cargo\nDESCRIPTION: Compiles and runs the StarkNet Devnet project directly from its source code located in the current directory using `cargo run`. Requires Rust, Cargo, and the cloned project repository.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Connecting to Devnet WebSocket using wscat\nDESCRIPTION: Example of how to connect to Devnet's WebSocket endpoint and subscribe to new block headers using the wscat tool.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/api.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wscat -c ws://127.0.0.1:5050/ws\nConnected (press CTRL+C to quit)\n> { \"jsonrpc\": \"2.0\", \"id\": 0, \"method\": \"starknet_subscribeNewHeads\" }\n< {\"id\":0,\"result\":2935616350010920547,\"jsonrpc\":\"2.0\"}\n```\n\n----------------------------------------\n\nTITLE: Dumping via POST Request - Starknet Devnet (Bash)\nDESCRIPTION: This snippet provides a cURL command that sends a POST request to the `/dump` endpoint of a running Devnet instance to trigger a dump. This method requires the `--dump-on request` flag during startup. It dumps the current state. The dump path can be specified via command line or request body parameters.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/dump-load-restart.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ starknet-devnet --dump-on <MODE> [--dump-path <FILE>]\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from File with Source\nDESCRIPTION: This command loads environment variables from a file (e.g., `.my-env-file`) and then runs Starknet Devnet.  The `source` command makes the variables available in the current shell.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/cli.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Setting Devnet Start Time via CLI (Shell)\nDESCRIPTION: Configures the timestamp for the genesis block when starting Starknet Devnet from the command line. The `--start-time` flag requires a positive integer value representing the desired Unix time in seconds. If not specified, Devnet uses the current Unix time for the genesis block.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/starknet-time.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --start-time <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Logging Request/Response Data with INFO level - Shell\nDESCRIPTION: This snippet shows how to configure `RUST_LOG` to log request and response data while also including the `INFO` level. The environment variable is used to specify the logging levels for the Starknet Devnet instance. Requires the starknet-devnet instance to be running in shell and the `jq` utility.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/server-config.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=\"REQUEST,RESPONSE,INFO\" starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Docker\nDESCRIPTION: This snippet shows how to set environment variables when using the Dockerized Starknet Devnet. The `-e` flag is used to pass environment variables to the Docker container. The example demonstrates the syntax to set `VAR1` and `VAR2` with the `docker run` command.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/cli.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run \\\n    -e <VAR1>=<VALUE> \\\n    -e <VAR2>=<VALUE> \\\n    ... \\\n    shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Loading Configuration from a File (Bash)\nDESCRIPTION: This snippet shows how to load configuration parameters from a file using the `source` command. It assumes the configuration file is named `.my-env-file` and contains `export` statements for each variable. It demonstrates running Devnet in a subshell to prevent polluting the environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/cli.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport SEED=42\nexport ACCOUNTS=3\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ source .my-env-file && starknet-devnet\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Predeployed Accounts via JSON-RPC in Starknet Devnet (Basic)\nDESCRIPTION: JSON-RPC request to retrieve information about predeployed accounts in Starknet Devnet without balance details.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/predeployed.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_getPredeployedAccounts\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling response from L1 to L2 message API\nDESCRIPTION: The response provides a transaction hash representing the mock message sent from L1 to L2. It allows tracking and verification of the message in the testing environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/postman.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: Set HTTP request timeout\nDESCRIPTION: Sets the maximum time allowed for an HTTP request to be served by the Starknet Devnet server using the `--timeout` CLI argument. This prevents requests from taking too long and potentially causing issues. This allows for deployment/management of large contracts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/server-config.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Listing available Starknet Devnet versions with asdf\nDESCRIPTION: Shows all installable versions of Starknet Devnet available through the asdf version manager.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/install.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ asdf list-all starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Starknet Devnet\nDESCRIPTION: This command demonstrates how to set environment variables to configure Starknet Devnet. Each variable is defined before running the `starknet-devnet` command.  CLI arguments take precedence over environment variables.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.2/running/cli.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ <VAR1>=<VALUE> <VAR2>=<VALUE> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: L1 to L2 Message Response Format in JSON\nDESCRIPTION: Example response format after sending a mock L1 to L2 message. Returns a transaction hash that identifies the message transaction on the L2 network.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/postman.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{ \"transaction_hash\": \"0x0548c761a9fd5512782998b2da6f44c42bf78fb88c3794eea330a91c9abb10bb\" }\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Executable after Installation in Bash\nDESCRIPTION: Runs the installed starknet-devnet executable from the command line after installation via cargo or pre-compiled binary setup. Assumes the executable is in the user's PATH or invoked by relative path. The command launches the Starknet Devnet environment.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/install.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstarknet-devnet\n```\n\n----------------------------------------\n\nTITLE: List all installable Starknet Devnet versions (asdf)\nDESCRIPTION: This command lists all available versions of Starknet Devnet that can be installed using the asdf version manager. It queries the plugin repository to retrieve the list of versions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/install.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ asdf list-all starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level for Dockerized Starknet Devnet (Shell)\nDESCRIPTION: Configures the logging level for a Docker container running Starknet Devnet using the -e flag to pass the RUST_LOG environment variable. Replace <LEVEL> with a valid level.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/docs/server-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet Devnet from crates.io using Cargo in Bash\nDESCRIPTION: Installs the starknet-devnet binary using Rust's cargo package manager from crates.io. Requires Rust and cargo installed, possibly alongside pkg-config and make. Downloads, builds in release mode, and installs the executable to ~/.cargo/bin/. No additional parameters needed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/running/install.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from Source\nDESCRIPTION: This command builds and starts Starknet Devnet directly from the source code using `cargo run`.  This assumes the repository has been cloned. It uses `cargo` and Rust for compilation and execution.  Optional CLI parameters can be passed via the `--` argument.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/install.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Installing Starknet-Devnet from GitHub using cargo\nDESCRIPTION: This snippet shows how to install Starknet-Devnet directly from the GitHub repository using `cargo install`. The `--git` flag specifies the repository URL, and the `--locked` flag ensures that the dependencies listed in `Cargo.lock` are used to maintain dependency consistency. The command fetches, builds, and installs the latest version from the specified git repository. Rust and Cargo are required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.3/running/install.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo install --git https://github.com/0xSpaceShard/starknet-devnet.git --locked\n```\n\n----------------------------------------\n\nTITLE: Removing Pythonic Devnet (Bash)\nDESCRIPTION: This command is used to remove any previous installations of Pythonic Devnet to avoid conflicts. It uses the `which` command to find the executable and then removes it using `rm`. This command will prevent name collisions between older and new executables.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/running/install.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nrm $(which starknet-devnet)\n```\n\n----------------------------------------\n\nTITLE: Stopping Specific Account Impersonation via JSON-RPC (Starknet Devnet)\nDESCRIPTION: This JSON-RPC request demonstrates how to use the `devnet_stopImpersonateAccount` method to cease impersonating a specific account address that was previously enabled for impersonation using `devnet_impersonateAccount`. After this call, transactions from this address will require normal signature validation or fail if the account is not locally deployed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.3.0/account-impersonation.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopImpersonateAccount\",\n    \"params\": {\n        \"account_address\": \"0x49D36570D4E46F48E99674BD3FCC84644DDD6B96F7C741B1562B82F9E004DC7\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Blocks with StarkNet Devnet HTTP API - HTTP\nDESCRIPTION: Sends a POST request to the /abort_blocks endpoint with a JSON payload specifying the starting_block_hash. This operation aborts all blocks from the given hash up to the most recent, reverting their associated transactions. This is useful for simulating mainnet block reorganization or rollback scenarios. Only non-forked, non-already-aborted blocks can be aborted; otherwise, an error occurs.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/blocks.md#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nPOST /abort_blocks\n{\n    \"starting_block_hash\": BLOCK_HASH\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Project Dependencies (requirements.txt)\nDESCRIPTION: This snippet lists the Python package dependencies required for the project, adhering to the standard `requirements.txt` format (`package==version`). Using exact versions helps maintain reproducibility across different environments by preventing unexpected behavior changes from newer package versions.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/scripts/requirements.txt#_snippet_0\n\nLANGUAGE: requirements.txt\nCODE:\n```\ncertifi==2024.8.30\ncharset-normalizer==3.3.2\nidna==3.7\nnumpy==1.26.4\npsutil==5.9.8\nrequests==2.32.0\nscipy==1.13.0\nurllib3==2.2.2\n```\n\n----------------------------------------\n\nTITLE: Setting Devnet HTTP Request Timeout (Shell)\nDESCRIPTION: This command starts the starknet-devnet server and sets the maximum allowed time for an HTTP request to be served using the --timeout CLI argument. This is useful for handling potentially long-running operations like deploying large contracts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/server-config.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --timeout <SECONDS>\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from Source (Optimized)\nDESCRIPTION: This command runs Devnet from source in release mode which provides optimized performance but takes longer to compile. Requires the source code and Rust/Cargo.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/running/install.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ cargo run --release\n```\n\n----------------------------------------\n\nTITLE: Versioning Documentation using Docusaurus\nDESCRIPTION: This command utilizes npm with the Docusaurus plugin to create a new version of the documentation. It requires Docusaurus to be configured within the `website` directory. The `<VERSION>` placeholder should be replaced with the desired version number for the documentation.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/RELEASE.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm --prefix website run docusaurus docs:version <VERSION>\n```\n\n----------------------------------------\n\nTITLE: Triggering StarkNet Devnet State Load via HTTP Request (Bash)\nDESCRIPTION: Uses `curl` to send an HTTP POST request to the `/load` endpoint of a running Devnet instance. This triggers the loading of a state dump from the file specified by `<PATH>` in the JSON request body. Requires replacing `<HOST>`, `<PORT>`, and `<PATH>` placeholders.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.1.1/dump-load-restart.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST http://<HOST>:<PORT>/load -d '{ \"path\": <PATH> }' -H \"Content-Type: application/json\"\n```\n\n----------------------------------------\n\nTITLE: Account Class Selection - CLI Option\nDESCRIPTION: This command-line option allows users to choose between Cairo 0 (OpenZeppelin 0.5.1) or Cairo 1 (OpenZeppelin 0.8.1) accounts when deploying a Starknet Devnet. It specifies the account class to use for predeployed accounts.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/predeployed.md#_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n--account-class [cairo0 | cairo1]\n```\n\n----------------------------------------\n\nTITLE: Flushing L1-L2 Message Queue via POST Endpoint using HTTP\nDESCRIPTION: This POST endpoint '/postman/flush' processes and sends pending messages queued between L1 and L2 layers. Calling it triggers the transfer of enqueued messages in both directions. It requires no request body except for an optional \"dry_run\" boolean parameter. When \"dry_run\" is true, the flush operation simulates the message transfer without actually executing it, useful for inspection. A running L1 node is required unless \"dry_run\" is specified.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/postman.md#_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /postman/flush\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ \"dry_run\": true }\n```\n\n----------------------------------------\n\nTITLE: Isolating Environment Variables Using a Subshell for Devnet - Shell\nDESCRIPTION: This snippet illustrates how to run Starknet Devnet after sourcing environment variables in a subshell to prevent these variables from polluting the parent shell environment. Recommended when temporary or sensitive settings are used. Requires only basic shell support.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.4.0/running/cli.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ ( source .my-env-file && starknet-devnet )\n```\n\n----------------------------------------\n\nTITLE: Adding the StarkNet Devnet plugin for asdf\nDESCRIPTION: Adds the `starknet-devnet` plugin to the `asdf` version manager, enabling `asdf` to manage different versions of StarkNet Devnet. Requires `asdf` to be installed.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ asdf plugin add starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet with Host Networking (Linux) - Docker - Shell\nDESCRIPTION: This command runs a Starknet Devnet Docker container on Linux using the --network host option, making the container's port accessible on the host. Optionally, the --port <PORT> argument can specify which internal port the devnet listens to. Requires Docker on a Linux system. This approach bypasses explicit port publishing and may expose the service to the local host network.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/docker.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Installing npm Dependencies for Docusaurus Website (Shell)\nDESCRIPTION: Installs all necessary dependencies for the Docusaurus website using npm. This command must be executed before running, developing, or building the website to ensure all packages are available for the project.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Installing the latest StarkNet Devnet version with asdf\nDESCRIPTION: Uses the `asdf` version manager to install the most recent available version of `starknet-devnet`. Requires the `starknet-devnet` asdf plugin.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.1/running/install.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ asdf install starknet-devnet latest\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Forge (Shell)\nDESCRIPTION: Formats the Solidity source code files in the project according to predefined style guides using Forge fmt. This helps maintain consistent code style.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/contracts/l1-l2-messaging/solidity/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ forge fmt\n```\n\n----------------------------------------\n\nTITLE: Pulling Starknet Devnet Docker Image by Commit Hash - Docker - Shell\nDESCRIPTION: This snippet allows downloading a Docker image version associated with a specific commit for Starknet Devnet, using its full SHA1 git hash as the image tag. Docker must be installed beforehand. The <COMMIT_HASH> parameter must be the exact 40-character lowercase SHA1 hash of the target commit, providing precise image reproducibility.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.4/running/docker.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ docker pull shardlabs/starknet-devnet-rs:<COMMIT_HASH>\n```\n\n----------------------------------------\n\nTITLE: Launching Starknet Devnet with Lite Mode (Shell)\nDESCRIPTION: Initiates the Starknet Devnet instance using the `--lite-mode` flag. This mode reduces resource usage by skipping the calculation of the block hash, suitable for testing scenarios that do not require this specific functionality. Requires the `starknet-devnet` executable to be installed and available in the system's PATH.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/lite.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Setting Logging Level - Starknet Devnet - Shell\nDESCRIPTION: Explains how to set the Rust logging level (`RUST_LOG`) via an environment variable before running `starknet-devnet` to control log verbosity. The `<LEVEL>` placeholder should be replaced with a valid level like `INFO`, `DEBUG`, etc. This affects the detail and type of messages printed by the Devnet server.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.2/server-config.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ RUST_LOG=<LEVEL> starknet-devnet\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet Container using Host Network on Linux - Bash\nDESCRIPTION: Provides a Linux-specific command example to run the Starknet Devnet container attached directly to the host network using Docker's `--network host` mode. This method exposes the container's internal ports directly on the host, avoiding the need for explicit port mapping. The port can be customized with additional CLI options. This approach is Linux-specific and should not be used on Mac or Windows.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --network host shardlabs/starknet-devnet-rs [--port <PORT>]\n```\n\n----------------------------------------\n\nTITLE: Setting RUST_LOG for Dockerized Devnet (Shell)\nDESCRIPTION: This Docker command runs the shardlabs/starknet-devnet-rs image and sets the RUST_LOG environment variable within the container. This controls the logging level of the Dockerized Devnet instance. Replace <LEVEL> with the desired logging level.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/server-config.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ docker run -e RUST_LOG=<LEVEL> shardlabs/starknet-devnet-rs\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet from Source (Default)\nDESCRIPTION: Compiles and runs the Starknet Devnet project directly from its source code directory using `cargo run`. This command builds the project in debug mode and executes it. Requires Rust, Cargo, and the project source code cloned locally.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.7/running/install.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ cargo run\n```\n\n----------------------------------------\n\nTITLE: Running Starknet Devnet in Lite Mode\nDESCRIPTION: Command to start Starknet Devnet in lite mode, which skips calculating block hash for improved performance. This is useful for development scenarios where full blockchain functionality is not required.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/lite.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ starknet-devnet --lite-mode\n```\n\n----------------------------------------\n\nTITLE: Increasing Starknet Devnet Time via API\nDESCRIPTION: Sends a POST request to the `/increase_time` endpoint with a JSON payload containing the time increment in seconds. This increases the current block timestamp by the specified amount, generates a new block, and maintains this time difference for all subsequent blocks.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/starknet-time.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /increase_time\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": TIME_IN_SECONDS\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mock L1→L2 Message via Starknet Devnet Postman API - JavaScript\nDESCRIPTION: This JSON request is posted to /postman/send_message_to_l2 to simulate sending a message from L1 to L2 without a running L1 node. Fields include l2_contract_address and entry_point_selector (both required and must reference valid deployed contracts/selectors), l1_contract_address, a payload array, paid_fee_on_l1 for fee simulation, and nonce, which must be provided explicitly. Inputs must be valid hex strings or arrays of hex strings. Output is a JSON object containing the transaction_hash.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/postman.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n    \"l2_contract_address\": \"0x00285ddb7e5c777b310d806b9b2a0f7c7ba0a41f12b420219209d97a3b7f25b2\",\n    \"entry_point_selector\": \"0xC73F681176FC7B3F9693986FD7B14581E8D540519E27400E88B8713932BE01\",\n    \"l1_contract_address\": \"0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512\",\n    \"payload\": [\n      \"0x1\",\n      \"0x2\"\n    ],\n    \"paid_fee_on_l1\": \"0x123456abcdef\"\n    \"nonce\":\"0x0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling devnet_stopAutoImpersonate JSON-RPC\nDESCRIPTION: This JSON-RPC request disables the automatic account impersonation feature previously enabled by `devnet_autoImpersonate`. Once stopped, only accounts explicitly impersonated via `devnet_impersonateAccount` or existing locally will be recognized without signature errors. The method requires no parameters and returns an empty JSON object.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.2.0/account-impersonation.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"jsonrpc\": \"2.0\",\n    \"id\": \"1\",\n    \"method\": \"devnet_stopAutoImpersonate\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Mint Token Response - Starknet Devnet\nDESCRIPTION: This code snippet showcases the response received after a successful minting request to the `/mint` endpoint in Starknet Devnet. The response is in JSON format and provides the `new_balance`, the `unit`, and the transaction hash (`tx_hash`).  The `new_balance` reflects the updated token balance after the minting operation. The `tx_hash` provides the transaction identifier.\nSOURCE: https://github.com/0xspaceshard/starknet-devnet/blob/main/website/versioned_docs/version-0.0.6/balance.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"new_balance\": 500000,\n    \"unit\": \"WEI\" | \"FRI\",\n    \"tx_hash\": \"0xa24f23...\"\n}\n```"
  }
]