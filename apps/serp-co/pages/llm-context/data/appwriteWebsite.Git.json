[
  {
    "owner": "appwrite",
    "repo": "website.git",
    "content": "TITLE: Deploying Functions with Appwrite CLI\nDESCRIPTION: Pushes the function code to Appwrite after adding any required dependencies. This command deploys the function to your Appwrite instance.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/cli-function.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nappwrite push functions\n```\n\n----------------------------------------\n\nTITLE: Initializing Functions with Appwrite CLI\nDESCRIPTION: Creates a starter function template using the Appwrite CLI init command. This generates the necessary files and folder structure for a new function.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/cli-function.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nappwrite init functions\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes with Appwrite CLI\nDESCRIPTION: Command to push local changes to Appwrite using the CLI. Must be executed in the directory containing the appwrite.json configuration file.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/cli-push-command.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npush\n```\n\n----------------------------------------\n\nTITLE: Automating Appwrite Version Update Script in Shell\nDESCRIPTION: Bash script that automates the process of updating Appwrite version references across website documentation. The script updates Docker image references, generates new installation files, and creates a PR with the changes. It requires a version number as input and handles git operations, file modifications, and Docker commands.\nSOURCE: https://github.com/appwrite/website.git/blob/main/RELEASE.md#2025-04-11_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\n\n# exit on error\nset -e\n\nif [ -z \"$1\" ]\n  then\n    echo \"Usage: $0 <version>\"\n    exit 1\nfi\n\nVERSION=$1\n\ngit stash\ngit checkout main\ngit pull\ngit checkout -b feat-$VERSION-release\n\n# Replace all references of appwrite/appwrite:x.y.z with appwrite/appwrite:$VERSION\nPATHS=(\n  'src/routes/docs/advanced/self-hosting'\n  'src/routes/blog/post'\n)\nfor p in \"${PATHS[@]}\"; do\n  grep -rl \"appwrite/appwrite:[0-9]*\\.[0-9]*\\.[0-9]*\" \"$p\" | xargs sed -i.bak \"s#appwrite/appwrite:.*#appwrite/appwrite:$VERSION#g\"\n  git add \"$p/**/*.markdoc\"\n  git add \"$p/*.markdoc\"\ndone\n\n# Update manual installation files\ncd static/install\ndocker run -it --rm \\\n    --volume /var/run/docker.sock:/var/run/docker.sock \\\n    --volume \"$(pwd)\"/appwrite:/usr/src/code/appwrite:rw \\\n    --entrypoint=\"install\" \\\n    appwrite/appwrite:$VERSION --http-port=80 --https-port=443 --interactive=N --no-start=true\ncp appwrite/docker-compose.yml compose\ncp appwrite/.env env\nsed -i.bak \"s#_APP_OPENSSL_KEY_V1=.*#_APP_OPENSSL_KEY_V1=your-secret-key#g\" env\nsed -i.bak \"s#_APP_DB_PASS=.*#_APP_DB_PASS=password#g\" env\nsed -i.bak \"s#_APP_DB_ROOT_PASS=.*#_APP_DB_ROOT_PASS=rootsecretpassword#g\" env\ngit add compose env\nrm -rf appwrite\ncd -\n\n# Bump appwrite repo so latest main commit is used\npnpm update @appwrite.io/repo\ngit add pnpm-lock.yaml\n\ngit commit -m \"Bump Appwrite version to $VERSION\"\n\nread -p \"Ready to push? (y/n) \" -n 1 -r\nif [[ $REPLY =~ ^[Yy]$ ]]; then\n  git push -u origin HEAD\nfi\necho PR Link:\necho \"https://github.com/appwrite/website/compare/main...feat-$VERSION-release?expand=1&title=Bump%20Appwrite%20version%20to%20$VERSION&body=%23%23%20What%20does%20this%20PR%20do%3F%0A%0AUpdate%20installation%20and%20upgrade%20instructions%20to%20use%20the%20latest%20Appwrite%20version%0A%0A%23%23%20Test%20Plan%0A%0AManual%0A%0A%23%23%20Related%20PRs%20and%20Issues%0A%0ANone%0A%0A%23%23%23%20Have%20you%20read%20the%20%5BContributing%20Guidelines%20on%20issues%5D%28https%3A%2F%2Fgithub.com%2Fappwrite%2Fappwrite%2Fblob%2Fmaster%2FCONTRIBUTING.md%29%3F%0A%0AYes\"\n```\n\n----------------------------------------\n\nTITLE: User Events Documentation in Markdown\nDESCRIPTION: List of user-related events including user creation, deletion, updates, sessions, recovery, and verification events. Each event returns either a User Object, Token Object, or Session Object.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/auth-events.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nusers.*\\nusers.*.create\\nusers.*.delete\\nusers.*.update\\nusers.*.update.email\\nusers.*.update.name\\nusers.*.update.password\\nusers.*.update.prefs\\nusers.*.update.status\\nusers.*.recovery.*\\nusers.*.recovery.*.create\\nusers.*.recovery.*.update\\nusers.*.sessions.*\\nusers.*.sessions.*.create\\nusers.*.sessions.*.delete\\nusers.*.verification.*\\nusers.*.verification.*.create\\nusers.*.verification.*.update\n```\n\n----------------------------------------\n\nTITLE: Team Events Documentation in Markdown\nDESCRIPTION: List of team-related events including team creation, deletion, updates, and membership management. Each event returns either a Team Object or Membership Object.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/auth-events.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nteams.*\\nteams.*.create\\nteams.*.delete\\nteams.*.update\\nteams.*.update.prefs\\nteams.*.memberships.*\\nteams.*.memberships.*.create\\nteams.*.memberships.*.delete\\nteams.*.memberships.*.update\\nteams.*.memberships.*.update.status\n```\n\n----------------------------------------\n\nTITLE: Info Block for Appwrite CLI Prerequisites\nDESCRIPTION: A markdown info block containing links to installation, login and initialization documentation for Appwrite CLI.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/cli-disclaimer.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% info title=\"Before proceeding\" %}\nEnsure you [**install**](/docs/tooling/command-line/installation#getting-started) the CLI, [**log in**](/docs/tooling/command-line/installation#login) to your Appwrite account, and [**initialize**](/docs/tooling/command-line/installation#initialization) your Appwrite project.\n{% /info %}\n```\n\n----------------------------------------\n\nTITLE: Storage Events Table\nDESCRIPTION: Table listing all available storage events in Appwrite, including bucket and file operations. Each event returns either a Bucket Object or File Object depending on the operation type.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/storage-events.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n\n- Name\n- Description\n\n---\n\n- `buckets.*`\n- This event triggers on any buckets event.\n  Returns [Bucket Object](/docs/references/cloud/models/bucket)\n\n---\n\n- `buckets.*.create`\n- This event triggers when a bucket is created.\n  Returns [Bucket Object](/docs/references/cloud/models/bucket)\n\n---\n\n- `buckets.*.delete`\n- This event triggers when a bucket is deleted.\n  Returns [Bucket Object](/docs/references/cloud/models/bucket)\n\n---\n\n- `buckets.*.files.*`\n- This event triggers on any files event.\n  Returns [File Object](/docs/references/cloud/models/file)\n\n---\n\n- `buckets.*.files.*.create`\n- Since the Appwrite SDK chunks files in 5MB increments, this event will trigger for each 5MB chunk. A file is fully uploaded when `chunksTotal` equals `chunksUploaded`.\n  Returns [File Object](/docs/references/cloud/models/file)\n\n---\n\n- `buckets.*.files.*.delete`\n- This event triggers when a file is deleted.\n  Returns [File Object](/docs/references/cloud/models/file)\n\n---\n\n- `buckets.*.files.*.update`\n- This event triggers when a file is updated.\n  Returns [File Object](/docs/references/cloud/models/file)\n\n---\n\n- `buckets.*.update`\n- This event triggers when a bucket is updated.\n  Returns [Bucket Object](/docs/references/cloud/models/bucket)\n\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Function Event Types Table\nDESCRIPTION: Structured table showing all function-related events, their triggers, and return types. Includes events for function lifecycle, deployments, and executions.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/functions-events.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n\n- Name\n- Description\n\n---\n\n- `functions.*`\n- This event triggers on any functions event.\n  Returns [Function Object](/docs/references/cloud/models/function)\n\n---\n\n- `functions.*.create`\n- This event triggers when a function is created.\n  Returns [Function Object](/docs/references/cloud/models/function)\n\n---\n\n- `functions.*.delete`\n- This event triggers when a function is deleted.\n  Returns [Function Object](/docs/references/cloud/models/function)\n\n---\n\n- `functions.*.deployments.*`\n- This event triggers on any deployments event.\n  Returns [Deployment Object](/docs/references/cloud/models/deployment)\n\n---\n\n- `functions.*.deployments.*.create`\n- This event triggers when a deployment is created.\n  Returns [Deployment Object](/docs/references/cloud/models/deployment)\n\n---\n\n- `functions.*.deployments.*.delete`\n- This event triggers when a deployment is deleted.\n  Returns [Deployment Object](/docs/references/cloud/models/deployment)\n\n---\n\n- `functions.*.deployments.*.update`\n- This event triggers when a deployment is updated.\n  Returns [Deployment Object](/docs/references/cloud/models/deployment)\n\n---\n\n- `functions.*.executions.*`\n- This event triggers on any executions event.\n  Returns [Execution Object](/docs/references/cloud/models/execution)\n\n---\n\n- `functions.*.executions.*.create`\n- This event triggers when an execution is created.\n  Returns [Execution Object](/docs/references/cloud/models/execution)\n\n---\n\n- `functions.*.executions.*.delete`\n- This event triggers when an execution is deleted.\n  Returns [Execution Object](/docs/references/cloud/models/execution)\n\n---\n\n- `functions.*.executions.*.update`\n- This event triggers when an execution is updated.\n  Returns [Execution Object](/docs/references/cloud/models/execution)\n\n---\n\n- `functions.*.update`\n- This event triggers when a function is updated.\n  Returns [Function Object](/docs/references/cloud/models/function)\n\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Running Appwrite Website Development Server\nDESCRIPTION: Command to start the local development server for the Appwrite website after installing dependencies with pnpm install.\nSOURCE: https://github.com/appwrite/website.git/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Recreating Appwrite Stack with Docker Compose\nDESCRIPTION: Command to recreate the Appwrite stack after making changes to docker-compose.yml or .env files. The -d flag runs containers in detached mode.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/update-variables.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Verifying Appwrite Configuration Changes\nDESCRIPTION: Command to verify if configuration changes have been successfully applied by checking environment variables in the Appwrite container.\nSOURCE: https://github.com/appwrite/website.git/blob/main/src/partials/update-variables.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose exec appwrite vars\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Appwrite Version Update Script\nDESCRIPTION: Example command showing how to execute the version update script with a specific version number.\nSOURCE: https://github.com/appwrite/website.git/blob/main/RELEASE.md#2025-04-11_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n./prep_release.sh 1.5.7\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Appwrite Website Development\nDESCRIPTION: This command installs the project dependencies using PNPM package manager. It should be run after cloning the repository and before starting development.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTRIBUTING.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Appwrite Website\nDESCRIPTION: This command starts a development server for the Appwrite website. It should be run after installing dependencies and setting up the environment variables.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTRIBUTING.md#2025-04-11_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Building Appwrite Website for Production\nDESCRIPTION: This command builds the Appwrite website for production. It should be run before committing code changes to ensure the website builds successfully.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTRIBUTING.md#2025-04-11_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm run build\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Upstream in Git\nDESCRIPTION: This Git command pulls the latest changes from the upstream repository to ensure the local default branch is up to date before creating a new branch for development.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTRIBUTING.md#2025-04-11_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch for Appwrite Website Development\nDESCRIPTION: This Git command creates a new branch for development. The branch name should follow the convention TYPE-ISSUE_ID-DESCRIPTION, for example 'doc-548-submit-a-pull-request-section-to-contribution-guide'.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTRIBUTING.md#2025-04-11_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b [name_of_your_new_branch]\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub for Appwrite Website\nDESCRIPTION: This Git command pushes the local changes to the remote repository on GitHub. It should be run after making and committing changes to the new branch.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTRIBUTING.md#2025-04-11_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit push origin [name_of_your_new_branch]\n```\n\n----------------------------------------\n\nTITLE: Creating Image Component in Markdoc\nDESCRIPTION: Example showing how to properly format and include dark/light mode images in Appwrite documentation using Markdoc syntax\nSOURCE: https://github.com/appwrite/website.git/blob/main/STYLE.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% only_dark %}\n![Project settings screen](/images/docs/platform/dark/create-api-key.png)\n{% /only_dark %}\n{% only_light %}\n![Project settings screen](/images/docs/platform/create-api-key.png)\n{% /only_light %}\n```\n\n----------------------------------------\n\nTITLE: Documentation Content Outline Structure\nDESCRIPTION: Example showing the recommended outline structure for new documentation content with page and heading hierarchy\nSOURCE: https://github.com/appwrite/website.git/blob/main/STYLE.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# page 1\n\n    ## heading a\n    ## heading b\n    ...\n\n# page 2\n\n    ## heading a\n    ## heading b\n    ...\n\n# page 3\n\n    ## heading a\n    ## heading b\n    ...\n\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Component Implementation\nDESCRIPTION: Examples of custom components including tabs, multicodes, sections, info boxes, and cards for enhanced documentation.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTENT.md#2025-04-11_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n{% tabs %}\n{% tabsitem #js title=\"Javascript\" %}\nLorem ipsum dolor sit amet consectetur.\n{% /tabsitem %}\n\n{% tabsitem #flutter title=\"Flutter\" %}\nLorem ipsum dolor sit amet consectetur.\n{% /tabsitem %}\n{% /tabs %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% section #featured-products-1 step=1 title=\"Title\" %}\nLorem ipsum dolor sit amet consectetur.\n{% /section %}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% cards %}\n\n{% cards_item href=\"/docs/quick-starts/react\" title=\"React\" %}\nGet started with Appwrite and React\n{% /cards_item %}\n\n{% /cards %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Image Implementation\nDESCRIPTION: Demonstrates basic image embedding and theme-specific image display using custom tags.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTENT.md#2025-04-11_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![Logo](https://example.com/logo.png)\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% only_dark %}\n![Project settings screen](/images/docs/platform/dark/create-api-key.png)\n{% /only_dark %}\n{% only_light %}\n![Project settings screen](/images/docs/platform/create-api-key.png)\n{% /only_light %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Formatting\nDESCRIPTION: Shows two methods for creating tables in Markdown: traditional pipe syntax and custom markdoc tables.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTENT.md#2025-04-11_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| Header 1     | Header 2     | Header 3     |\n| ------------ | ------------ | ------------ |\n| Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 |\n| Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{% table %}\n\n- Heading 1\n- Heading 2\n\n---\n\n- Row 1 Cell 1\n- Row 1 Cell 2\n\n---\n\n- Row 2 Cell 1\n- Row 2 cell 2\n\n{% /table %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Headers Implementation\nDESCRIPTION: Shows header syntax in Markdown using hashtags for different levels and adding custom IDs.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTENT.md#2025-04-11_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Header 1\n\n## Header 2\n\n### Header 3\n```\n\nLANGUAGE: markdown\nCODE:\n```\n# Header with ID {% #header-with-id %}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Syntax\nDESCRIPTION: Shows how to create hyperlinks and section references in Markdown.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTENT.md#2025-04-11_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[Google](https://www.google.com)\n[Link to Section](#section-name)\n```\n\n----------------------------------------\n\nTITLE: Markdown List Formatting\nDESCRIPTION: Examples of ordered and unordered list syntax in Markdown.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTENT.md#2025-04-11_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. First item\n2. Second item\n3. Third item\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- Apple\n- Banana\n- Cherry\n```\n\n----------------------------------------\n\nTITLE: Basic Markdown Paragraphs Example\nDESCRIPTION: Demonstrates how to create paragraphs in Markdown using blank lines for separation.\nSOURCE: https://github.com/appwrite/website.git/blob/main/CONTENT.md#2025-04-11_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThis is the first paragraph.\n\nThis is the second paragraph.\n```"
  }
]