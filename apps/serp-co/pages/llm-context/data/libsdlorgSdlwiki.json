[
  {
    "owner": "libsdl-org",
    "repo": "sdlwiki",
    "content": "TITLE: Polling for Events with SDL_PollEvent in C\nDESCRIPTION: Demonstrates how to use SDL_PollEvent to process the event queue within a game loop. It polls for events until the queue is empty, then updates the game state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PollEvent.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nwhile (game_is_still_running) {\n    SDL_Event event;\n    while (SDL_PollEvent(&event)) {  // poll until all events are handled!\n        // decide what to do with this event.\n    }\n\n    // update game state, draw the current frame\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateWindow Syntax\nDESCRIPTION: Shows the function signature of SDL_CreateWindow, which creates a window with the specified title, width, height, and flags. It returns a pointer to the created window or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_CreateWindow(const char *title, int w, int h, SDL_WindowFlags flags);\n```\n\n----------------------------------------\n\nTITLE: SDL_TimerCallback Definition in C\nDESCRIPTION: Defines the function prototype for a timer callback in SDL. The callback receives the current timer interval and a user-provided parameter. It returns the next timer interval, or 0 to cancel the timer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TimerCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 (SDLCALL * SDL_TimerCallback) (Uint32 interval, void *param);\n```\n\n----------------------------------------\n\nTITLE: Gamepad Button Mapping Initialization and Handling\nDESCRIPTION: This code snippet demonstrates how to handle the new positional gamepad face buttons (North/South/East/West) and allows users to swap between South/East as their accept/cancel buttons.  It includes functions for initialization, button mapping, and event handling. This helps accommodate regional differences in button conventions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\n#define CONFIRM_BUTTON SDL_GAMEPAD_BUTTON_SOUTH\n#define CANCEL_BUTTON SDL_GAMEPAD_BUTTON_EAST\n\nbool flipped_buttons;\n\nvoid InitMappedButtons(SDL_Gamepad *gamepad)\n{\n    if (!GetFlippedButtonSetting(&flipped_buttons)) {\n        if (SDL_GetGamepadButtonLabel(gamepad, SDL_GAMEPAD_BUTTON_SOUTH) == SDL_GAMEPAD_BUTTON_LABEL_B) {\n            flipped_buttons = true;\n        } else {\n            flipped_buttons = false;\n        }\n    }\n}\n\nSDL_GamepadButton GetMappedButton(SDL_GamepadButton button)\n{\n    if (flipped_buttons) {\n        switch (button) {\n        case SDL_GAMEPAD_BUTTON_SOUTH:\n            return SDL_GAMEPAD_BUTTON_EAST;\n        case SDL_GAMEPAD_BUTTON_EAST:\n            return SDL_GAMEPAD_BUTTON_SOUTH;\n        case SDL_GAMEPAD_BUTTON_WEST:\n            return SDL_GAMEPAD_BUTTON_NORTH;\n        case SDL_GAMEPAD_BUTTON_NORTH:\n            return SDL_GAMEPAD_BUTTON_WEST;\n        default:\n            break;\n        }\n    }\n    return button;\n}\n\nSDL_GamepadButtonLabel GetConfirmActionLabel(SDL_Gamepad *gamepad)\n{\n    return SDL_GetGamepadButtonLabel(gamepad, GetMappedButton(CONFIRM_BUTTON));\n}\n\nSDL_GamepadButtonLabel GetCancelActionLabel(SDL_Gamepad *gamepad)\n{\n    return SDL_GetGamepadButtonLabel(gamepad, GetMappedButton(CANCEL_BUTTON));\n}\n\nvoid HandleGamepadEvent(SDL_Event *event)\n{\n    if (event->type == SDL_EVENT_GAMEPAD_BUTTON_DOWN) {\n        switch (GetMappedButton(event->gbutton.button)) {\n        case CONFIRM_BUTTON:\n            /* Handle confirm action */\n            break;\n        case CANCEL_BUTTON:\n            /* Handle cancel action */\n            break;\n        default:\n            /* ... */\n            break;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SDL Initialization Flags Definition in C\nDESCRIPTION: Defines the `SDL_InitFlags` type as a `Uint32` and provides definitions for various initialization flags. These flags are used to specify which SDL subsystems should be initialized for use in an application. Some flags imply the initialization of other subsystems, such as `SDL_INIT_VIDEO` implying `SDL_INIT_EVENTS`. Note thread constraints for some initialization flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InitFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_InitFlags;\n\n#define SDL_INIT_AUDIO      0x00000010u /**< `SDL_INIT_AUDIO` implies `SDL_INIT_EVENTS` */\n#define SDL_INIT_VIDEO      0x00000020u /**< `SDL_INIT_VIDEO` implies `SDL_INIT_EVENTS`, should be initialized on the main thread */\n#define SDL_INIT_JOYSTICK   0x00000200u /**< `SDL_INIT_JOYSTICK` implies `SDL_INIT_EVENTS`, should be initialized on the same thread as SDL_INIT_VIDEO on Windows if you don't set SDL_HINT_JOYSTICK_THREAD */\n#define SDL_INIT_HAPTIC     0x00001000u\n#define SDL_INIT_GAMEPAD    0x00002000u /**< `SDL_INIT_GAMEPAD` implies `SDL_INIT_JOYSTICK` */\n#define SDL_INIT_EVENTS     0x00004000u\n#define SDL_INIT_SENSOR     0x00008000u /**< `SDL_INIT_SENSOR` implies `SDL_INIT_EVENTS` */\n#define SDL_INIT_CAMERA     0x00010000u /**< `SDL_INIT_CAMERA` implies `SDL_INIT_EVENTS` */\n```\n\n----------------------------------------\n\nTITLE: Getting Fullscreen Display Modes in C\nDESCRIPTION: This code demonstrates how to retrieve and iterate over available fullscreen display modes for a primary display using the new `SDL_GetFullscreenDisplayModes` function.  It obtains the primary display ID using `SDL_GetPrimaryDisplay`, retrieves a list of `SDL_DisplayMode` pointers, and logs the width, height, pixel density, and refresh rate of each mode. The allocated memory for the modes is then freed using `SDL_free`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_51\n\nLANGUAGE: c\nCODE:\n```\n{\n    SDL_DisplayID display = SDL_GetPrimaryDisplay();\n    int num_modes = 0;\n    SDL_DisplayMode **modes = SDL_GetFullscreenDisplayModes(display, &num_modes);\n    if (modes) {\n        for (i = 0; i < num_modes; ++i) {\n            SDL_DisplayMode *mode = modes[i];\n            SDL_Log(\"Display %\" SDL_PRIu32 \" mode %d: %dx%d@%gx %gHz\",\n                    display, i, mode->w, mode->h, mode->pixel_density, mode->refresh_rate);\n        }\n        SDL_free(modes);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL with flags (C)\nDESCRIPTION: Initializes the SDL library with the specified flags. These flags determine which subsystems (audio, video, joystick, etc.) are initialized. Returns true on success, false on failure. Requires SDL3/SDL_init.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_Init(SDL_InitFlags flags);\n```\n\n----------------------------------------\n\nTITLE: Updated Key Event Code in SDL\nDESCRIPTION: This code snippet shows the updated way to access key event data after the keysym field was removed and 'sym' was renamed to 'key'. This snippet depends on the SDL2 library. The example shows the correct access to the keycode and modifier information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n    SDL_Event event;\n    SDL_Keycode key = event.key.key;\n    SDL_Keymod mod = event.key.mod;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Rect Structure in C\nDESCRIPTION: This code snippet defines the SDL_Rect structure in C, which represents a rectangle. It contains integer members x and y for the top-left corner coordinates, and w and h for the width and height of the rectangle, respectively. This structure is fundamental for representing rectangular regions in SDL applications.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Rect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Rect\n{\n    int x, y;\n    int w, h;\n} SDL_Rect;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Application Control Keycodes in C\nDESCRIPTION: This code defines application control keycodes using preprocessor macros in SDL. Each macro associates a specific application control action (e.g., new, open, close) with a keycode derived from its corresponding scancode. These allow applications to react to these specific key presses, providing shortcuts for common actions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keycode.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n#define SDLK_AC_NEW                 0x40000111u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_NEW) */\n#define SDLK_AC_OPEN                0x40000112u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_OPEN) */\n#define SDLK_AC_CLOSE               0x40000113u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_CLOSE) */\n#define SDLK_AC_EXIT                0x40000114u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_EXIT) */\n#define SDLK_AC_SAVE                0x40000115u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SAVE) */\n#define SDLK_AC_PRINT               0x40000116u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_PRINT) */\n#define SDLK_AC_PROPERTIES          0x40000117u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_PROPERTIES) */\n#define SDLK_AC_SEARCH              0x40000118u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH) */\n#define SDLK_AC_HOME                0x40000119u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME) */\n#define SDLK_AC_BACK                0x4000011au /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK) */\n#define SDLK_AC_FORWARD             0x4000011bu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD) */\n#define SDLK_AC_STOP                0x4000011cu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP) */\n#define SDLK_AC_REFRESH             0x4000011du /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH) */\n#define SDLK_AC_BOOKMARKS           0x4000011eu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS) */\n```\n\n----------------------------------------\n\nTITLE: SDL_PushEvent Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_PushEvent function in C. It adds an SDL_Event to the event queue. Returns true on success, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PushEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PushEvent(SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRenderer Example (C)\nDESCRIPTION: This code demonstrates how to use SDL_CreateRenderer to create a rendering context for a window.  It initializes SDL, creates a window, creates a renderer, loads a bitmap, creates a texture, renders the texture, and then destroys all resources before quitting. Includes basic event handling to close the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateRenderer.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char *argv[])\n{\n    SDL_Window *win = NULL;\n    SDL_Renderer *renderer = NULL;\n    SDL_Texture *bitmapTex = NULL;\n    SDL_Surface *bitmapSurface = NULL;\n    int width = 320, height = 240;\n    bool loopShouldStop = false;\n\n    SDL_Init(SDL_INIT_VIDEO);\n\n    win = SDL_CreateWindow(\"Hello World\", width, height, 0);\n\n    renderer = SDL_CreateRenderer(win, NULL);\n\n    bitmapSurface = SDL_LoadBMP(\"img/hello.bmp\");\n    bitmapTex = SDL_CreateTextureFromSurface(renderer, bitmapSurface);\n    SDL_DestroySurface(bitmapSurface);\n\n    while (!loopShouldStop)\n    {\n        SDL_Event event;\n        while (SDL_PollEvent(&event))\n        {\n            switch (event.type)\n            {\n                case SDL_EVENT_QUIT:\n                    loopShouldStop = true;\n                    break;\n            }\n        }\n\n        SDL_RenderClear(renderer);\n        SDL_RenderTexture(renderer, bitmapTex, NULL, NULL);\n        SDL_RenderPresent(renderer);\n    }\n\n    SDL_DestroyTexture(bitmapTex);\n    SDL_DestroyRenderer(renderer);\n    SDL_DestroyWindow(win);\n\n    SDL_Quit();\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL with flags in C\nDESCRIPTION: The SDL_Init function initializes the SDL library. The `flags` parameter specifies which subsystems to initialize. It returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_Init(Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Subsystem and Enumerating Displays in C\nDESCRIPTION: This code snippet demonstrates how to initialize the SDL video subsystem, enumerate connected displays, and log their names and instance IDs. It uses the new `SDL_GetDisplays` function to obtain a list of `SDL_DisplayID` values, replacing the older indexed approach. The code also handles errors during initialization and ensures proper cleanup by calling `SDL_QuitSubSystem`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_49\n\nLANGUAGE: c\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_VIDEO)) {\n        int i, num_displays = 0;\n        SDL_DisplayID *displays = SDL_GetDisplays(&num_displays);\n        if (displays) {\n            for (i = 0; i < num_displays; ++i) {\n                SDL_DisplayID instance_id = displays[i];\n                const char *name = SDL_GetDisplayName(instance_id);\n\n                SDL_Log(\"Display %\" SDL_PRIu32 \": %s\", instance_id, name ? name : \"Unknown\");\n            }\n            SDL_free(displays);\n        }\n        SDL_QuitSubSystem(SDL_INIT_VIDEO);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing RGBA values from a pixel in SDL2 vs SDL3 (C)\nDESCRIPTION: This example shows how to access the RGBA values from a pixel using `SDL_GetRGBA` in SDL2 and the equivalent code in SDL3. The SDL3 version requires the `SDL_GetPixelFormatDetails` and `SDL_GetSurfacePalette` functions to be called to pass as a parameter for indexed color lookups.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nSDL_GetRGBA(pixel, surface->format, &r, &g, &b, &a);\n```\n\nLANGUAGE: C\nCODE:\n```\nSDL_GetRGBA(pixel, SDL_GetPixelFormatDetails(surface->format), SDL_GetSurfacePalette(surface), &r, &g, &b, &a);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Audio Conversion Example\nDESCRIPTION: This example demonstrates the recommended way to perform audio conversion in SDL3, replacing the deprecated SDL_AudioCVT approach. It uses the SDL_ConvertAudioSamples function to convert audio data from one format to another. The resulting converted data must be freed after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nUint8 *dst_data = NULL;\n    int dst_len = 0;\n    const SDL_AudioSpec src_spec = { src_format, src_channels, src_rate };\n    const SDL_AudioSpec dst_spec = { dst_format, dst_channels, dst_rate };\n    if (!SDL_ConvertAudioSamples(&src_spec, src_data, src_len, &dst_spec, &dst_data, &dst_len)) {\n        /* error */\n    }\n    do_something(dst_data, dst_len);\n    SDL_free(dst_data);\n```\n\n----------------------------------------\n\nTITLE: Implementing SDL2's SDL_CreateRGBSurfaceWithFormat in SDL3\nDESCRIPTION: This code snippet reimplements the SDL2 `SDL_CreateRGBSurfaceWithFormat` function using SDL3's `SDL_CreateSurface`.  This allows users to maintain compatibility while leveraging the new SDL3 API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_39\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *SDL_CreateRGBSurfaceWithFormat(Uint32 flags, int width, int height, int depth, Uint32 format)\n{\n    return SDL_CreateSurface(width, height, format);\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_RWFromFile Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RWFromFile function. It takes a filename (UTF-8 encoded) and a mode string (ASCII) as input and returns a pointer to an SDL_RWops structure. The mode string determines how the file is opened (read, write, append, etc.). A NULL return indicates failure, with more information available via SDL_GetError().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWFromFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_RWops* SDL_RWFromFile(const char *file,\n                          const char *mode);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadFile Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_LoadFile function in C. It takes a file path as input and a pointer to a size_t variable to store the number of bytes read. The function returns a pointer to the loaded data, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_LoadFile(const char *file, size_t *datasize);\n```\n\n----------------------------------------\n\nTITLE: Set Render Target in SDL2 (C)\nDESCRIPTION: Sets a specified texture as the current rendering target for the given SDL_Renderer. The texture must be created with the SDL_TEXTUREACCESS_TARGET flag. Setting the texture to NULL will reset the rendering target to the window. This function returns 0 on success or a negative error code on failure. Call SDL_GetError() for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetRenderTarget.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetRenderTarget(SDL_Renderer *renderer,\n                        SDL_Texture *texture);\n```\n\n----------------------------------------\n\nTITLE: Set Window Fullscreen Mode in SDL3 (C)\nDESCRIPTION: Sets the display mode for a given SDL window when it is in fullscreen mode. The mode parameter specifies the desired display mode, or NULL for borderless fullscreen. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowFullscreenMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowFullscreenMode(SDL_Window *window, const SDL_DisplayMode *mode);\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyMutex Syntax (C)\nDESCRIPTION: Destroys a mutex created with SDL_CreateMutex. It takes a pointer to an SDL_Mutex structure as input. It is crucial to destroy mutexes when they are no longer needed to prevent memory leaks. Avoid destroying a locked mutex.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyMutex(SDL_Mutex *mutex);\n```\n\n----------------------------------------\n\nTITLE: Render Blended Wrapped Text C\nDESCRIPTION: This function renders word-wrapped UTF-8 text at high quality to a new ARGB surface. It requires a TTF_Font, the text, its length, the foreground color, and the wrap width. It returns a pointer to an SDL_Surface or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_64\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Blended_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Audio Stream Callback Example\nDESCRIPTION: This code snippet shows how to implement an audio callback using SDL_AudioStream in SDL3. It details the callback function, audio specification setup, opening an audio device stream, pausing/unpausing the stream, and destroying the stream when done. It depends on SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nstatic void SDLCALL my_audio_callback(void *userdata, SDL_AudioStream *stream, int additional_amount, int total_amount)\n{\n    /* fill `stream` with `additional_amount` bytes of data */\n    /* any amount of audio can be added, but we need `additional_amount` right now! This number can vary between calls! */\n    SDL_PutAudioStreamData(stream, my_audio_data, additional_amount);\n}\n\n/* somewhere near startup... */\n\nSDL_AudioSpec spec;\nspec.freq = 22050;\nspec.format = SDL_AUDIO_S16SYS;\nspec.channels = 2;\nSDL_AudioStream *stream = SDL_OpenAudioDeviceStream(SDL_AUDIO_DEVICE_DEFAULT_OUTPUT, &spec, my_audio_callback, whatever);\nif (!stream) {\n    /* oh no, we failed, report an error and quit. */\n}\nSDL_UnpauseAudioDeviceStream(stream);\n\n/* at the end of the program ... */\nSDL_DestroyAudioStream(stream);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Draw Color in C\nDESCRIPTION: Retrieves the current color used for drawing operations on the specified renderer. It fills the provided pointers with the red, green, blue, and alpha components of the drawing color. The function returns a boolean indicating success or failure. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderDrawColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderDrawColor(SDL_Renderer *renderer, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);\n```\n\n----------------------------------------\n\nTITLE: SDL Window and Renderer Creation Example (C)\nDESCRIPTION: Demonstrates how to initialize SDL, create a window and renderer using SDL_CreateWindowAndRenderer, load a BMP image, create a texture from it, render the texture to the window, and handle events.  The example shows basic SDL setup, rendering loop and resource cleanup.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateWindowAndRenderer.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char *argv[])\n{\n    SDL_Window *window;\n    SDL_Renderer *renderer;\n    SDL_Surface *surface;\n    SDL_Texture *texture;\n    SDL_Event event;\n\n    if (!SDL_Init(SDL_INIT_VIDEO)) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't initialize SDL: %s\", SDL_GetError());\n        return 3;\n    }\n\n    if (!SDL_CreateWindowAndRenderer(\"Hello SDL\", 320, 240, SDL_WINDOW_RESIZABLE, &window, &renderer)) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't create window and renderer: %s\", SDL_GetError());\n        return 3;\n    }\n\n    surface = SDL_LoadBMP(\"sample.bmp\");\n    if (!surface) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't create surface from image: %s\", SDL_GetError());\n        return 3;\n    }\n    texture = SDL_CreateTextureFromSurface(renderer, surface);\n    if (!texture) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't create texture from surface: %s\", SDL_GetError());\n        return 3;\n    }\n    SDL_DestroySurface(surface);\n\n    while (1) {\n        SDL_PollEvent(&event);\n        if (event.type == SDL_EVENT_QUIT) {\n            break;\n        }\n        SDL_SetRenderDrawColor(renderer, 0x00, 0x00, 0x00, 0x00);\n        SDL_RenderClear(renderer);\n        SDL_RenderTexture(renderer, texture, NULL, NULL);\n        SDL_RenderPresent(renderer);\n    }\n\n    SDL_DestroyTexture(texture);\n    SDL_DestroyRenderer(renderer);\n    SDL_DestroyWindow(window);\n\n    SDL_Quit();\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using SDL_InitState in C\nDESCRIPTION: This code demonstrates how to use `SDL_InitState` with `SDL_ShouldInit`, `SDL_SetInitialized` for initializing, using, and quitting a subsystem. It shows how to perform initialization tasks, check initialization status, and perform cleanup tasks in a thread-safe manner. It initializes a system and performs cleanup by checking the initialization state using `SDL_ShouldInit` and setting the initialization state using `SDL_SetInitialized`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InitState.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n   static SDL_InitState init;\n\n   bool InitSystem(void)\n   {\n       if (!SDL_ShouldInit(&init)) {\n           // The system is initialized\n           return true;\n       }\n\n       // At this point, you should not leave this function without calling SDL_SetInitialized()\n\n       bool initialized = DoInitTasks();\n       SDL_SetInitialized(&init, initialized);\n       return initialized;\n   }\n\n   bool UseSubsystem(void)\n   {\n       if (SDL_ShouldInit(&init)) {\n           // Error, the subsystem isn't initialized\n           SDL_SetInitialized(&init, false);\n           return false;\n       }\n\n       // Do work using the initialized subsystem\n\n       return true;\n   }\n\n   void QuitSystem(void)\n   {\n       if (!SDL_ShouldQuit(&init)) {\n           // The system is not initialized\n           return;\n       }\n\n       // At this point, you should not leave this function without calling SDL_SetInitialized()\n\n       DoQuitTasks();\n       SDL_SetInitialized(&init, false);\n   }\n```\n\n----------------------------------------\n\nTITLE: Setting X11 Event Hook with SDL_SetX11EventHook in C\nDESCRIPTION: This code snippet demonstrates how to set an X11 event hook using the SDL_SetX11EventHook function in SDL3. It takes an SDL_X11EventHook callback function and a userdata pointer as input. The callback will be invoked for every X11 event.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetX11EventHook.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetX11EventHook(SDL_X11EventHook callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Create Texture from Surface in SDL2 (C)\nDESCRIPTION: Creates an SDL_Texture from an existing SDL_Surface. Requires an SDL_Renderer and an SDL_Surface as input. Returns a pointer to the newly created SDL_Texture, or NULL on failure. The caller is responsible for destroying the texture with SDL_DestroyTexture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateTextureFromSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer * renderer, SDL_Surface * surface);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Audio Callback Example\nDESCRIPTION: This code snippet demonstrates the audio callback approach in SDL3, using SDL_AudioStream. It sets up the audio specification, opens an audio device stream, and resumes audio playback.  It utilizes SDL_OpenAudioDeviceStream and SDL_ResumeAudioDevice functions. It also shows how to adapt the old callback to the new `SDL_AudioStream` API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nvoid SDLCALL MyNewAudioCallback(void *userdata, SDL_AudioStream *stream, int additional_amount, int total_amount)\n    {\n        /* Calculate a little more audio here, maybe using `userdata`, write it to `stream`\n         *\n         * If you want to use the original callback, you could do something like this:\n         */\n        if (additional_amount > 0) {\n            Uint8 *data = SDL_stack_alloc(Uint8, additional_amount);\n            if (data) {\n                MyAudioCallback(userdata, data, additional_amount);\n                SDL_PutAudioStreamData(stream, data, additional_amount);\n                SDL_stack_free(data);\n            }\n        }\n    }\n\n    /* ...somewhere near startup... */\n    const SDL_AudioSpec spec = { SDL_AUDIO_S16, 2, 44100 };\n    SDL_AudioStream *stream = SDL_OpenAudioDeviceStream(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &spec, MyNewAudioCallback, &my_audio_callback_user_data);\n    SDL_ResumeAudioDevice(SDL_GetAudioStreamDevice(stream));\n```\n\n----------------------------------------\n\nTITLE: Semaphore Usage Example (C)\nDESCRIPTION: Illustrates typical semaphore usage with SDL3. This example demonstrates how semaphores can be used to synchronize threads accessing a shared queue, including creating the semaphore, signaling it when data is added, waiting for it when data is needed, and destroying it when finished.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateSemaphore.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid add_data_to_queue(void);\nvoid get_data_from_queue(void);\nint data_available(void);\nvoid wait_for_threads(void);\n\nSDL_AtomicInt done;\nSDL_Semaphore *sem;\n\nSDL_SetAtomicInt(&done, 0);\nsem = SDL_CreateSemaphore(0);\n\n\nThread_A:\n    while (!SDL_GetAtomicInt(&done)) {\n        add_data_to_queue();\n        SDL_SignalSemaphore(sem);\n    }\n\nThread_B:\n    while (!SDL_GetAtomicInt(&done)) {\n        SDL_WaitSemaphore(sem);\n        if (data_available()) {\n            get_data_from_queue();\n        }\n    }\n\n\nSDL_SetAtomicInt(&done, 1);\nSDL_SignalSemaphore(sem);\nwait_for_threads();\nSDL_DestroySemaphore(sem);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateThread Example in C\nDESCRIPTION: Illustrates how to create and use a thread using SDL_CreateThread. Includes a thread function that counts from 0 to 9 with a delay and demonstrates waiting for the thread to complete and retrieving its return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateThread.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\n/* Very simple thread - counts 0 to 9 delaying 50ms between increments */\nstatic int TestThread(void *ptr)\n{\n    int cnt;\n\n    for (cnt = 0; cnt < 10; ++cnt) {\n        SDL_Log(\"Thread counter: %d\", cnt);\n        SDL_Delay(50);\n    }\n\n    return cnt;\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_Thread *thread;\n    int         threadReturnValue;\n\n    SDL_Log(\"Simple SDL_CreateThread test:\");\n\n    /* Simply create a thread */\n    thread = SDL_CreateThread(TestThread, \"TestThread\", (void *)NULL);\n\n    if (NULL == thread) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"SDL_CreateThread failed: %s\", SDL_GetError());\n    } else {\n        SDL_WaitThread(thread, &threadReturnValue);\n        SDL_Log(\"Thread returned value: %d\", threadReturnValue);\n    }\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Create Texture from Surface in SDL3\nDESCRIPTION: Creates an SDL_Texture from an existing SDL_Surface using SDL_CreateTextureFromSurface. The code checks for errors during surface and texture creation and destroys the surface after the texture is created. Requires an initialized SDL_Renderer and SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateTextureFromSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer *renderer;\n\nSDL_Surface *surface = SDL_CreateSurface(640, 480, SDL_PIXELFORMAT_RGBA8888);\n\nif (surface == NULL) {\n    fprintf(stderr, \"CreateRGBSurface failed: %s\\n\", SDL_GetError());\n    exit(1);\n}\n\nSDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, surface);\n\nif (texture == NULL) {\n    fprintf(stderr, \"CreateTextureFromSurface failed: %s\\n\", SDL_GetError());\n    exit(1);\n}\n\nSDL_DestroySurface(surface);\nsurface = NULL;\n```\n\n----------------------------------------\n\nTITLE: Detecting Specific Key Presses with SDL_Keycode in SDL3 (C)\nDESCRIPTION: This snippet shows how to detect specific key presses using SDL_Keycode, focusing on the symbol printed on the key, like the Escape key. It continuously polls for keydown events and checks if the pressed key matches SDLK_ESCAPE. Dependencies include SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/BestKeyboardPractices.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n/* sit in a loop forever until the user presses Escape. */\nbool quit_the_app = false;\nwhile (!quit_the_app) {\n    SDL_Event e;\n    while (SDL_PollEvent(&e)) {\n        /* user has pressed a key? */\n        if (e.type == SDL_EVENT_KEY_DOWN) {\n            /* the pressed key was Escape? */\n            if (e.key.key == SDLK_ESCAPE) {\n                quit_the_app = true;\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateThreadWithProperties Syntax in C\nDESCRIPTION: This code snippet shows the function signature for SDL_CreateThreadWithProperties in C. It defines the function's return type (SDL_Thread *) and the parameter it accepts (SDL_PropertiesID props). The function creates a new thread with the specified properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateThreadWithProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Thread * SDL_CreateThreadWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateSurfaceFrom Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_CreateSurfaceFrom function in C. It takes the width, height, pixel format, pixel data pointer, and pitch as input and returns a pointer to the newly created SDL_Surface, or NULL on failure. No dependencies are explicitly shown but it requires SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateSurfaceFrom.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, void *pixels, int pitch);\n```\n\n----------------------------------------\n\nTITLE: Building SDL2 via Command Line with CMake (macOS)\nDESCRIPTION: This snippet shows how to build SDL2 on macOS using CMake. It creates a build directory, configures the build with a specific macOS deployment target, builds the project, and installs it to the system.  Prerequisites include CMake and a suitable development environment (Xcode with command-line tools).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/macos.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake .. -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13\ncmake --build .\nsudo cmake --install .\n```\n\n----------------------------------------\n\nTITLE: Polling Events Example in C\nDESCRIPTION: Example code demonstrating how to use SDL_PollEvent within a game loop to process events.  The loop continues as long as the game is running, and processes all events in the queue each frame. Dependencies include SDL2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PollEvent.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nwhile (game_is_still_running) {\n    SDL_Event event;\n    while (SDL_PollEvent(&event)) {  // poll until all events are handled!\n        // decide what to do with this event.\n    }\n\n    // update game state, draw the current frame\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a GPU Device Context in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the usage of `SDL_CreateGPUDevice` function to create a GPU context. The function takes shader format flags, a debug mode flag, and an optional GPU driver name as input. It returns a pointer to an `SDL_GPUDevice` struct, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUDevice * SDL_CreateGPUDevice(\n    SDL_GPUShaderFormat format_flags,\n    bool debug_mode,\n    const char *name);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateWindow Syntax (C)\nDESCRIPTION: Defines the syntax for creating an SDL window using SDL_CreateWindow in C. It specifies the function's parameters including window title, position, dimensions, and flags, and its return type (SDL_Window*).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_CreateWindow(const char *title,\n                              int x, int y, int w,\n                              int h, Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: IMG_Load Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_Load function, which takes a file path as input (const char *file) and returns a pointer to an SDL_Surface (SDL_Surface *) or NULL on error.  The function loads an image from the specified file path into a software surface (SDL_Surface) accessible by the CPU. The returned surface format may vary and SDL_ConvertSurface might be needed to migrate to a desired format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_Load.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_Load(const char *file);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_Event in C\nDESCRIPTION: This code snippet shows how to declare an SDL_Event structure. This structure is then used to store information about events retrieved from the event queue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Event.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Event test_event;\n```\n\n----------------------------------------\n\nTITLE: SDL_RunApp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RunApp function in C. This function initializes and runs an SDL application using a provided main function. It takes argc, argv, the main function, and a reserved void pointer as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RunApp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RunApp(int argc, char *argv[], SDL_main_func mainFunction, void *reserved);\n```\n\n----------------------------------------\n\nTITLE: Destroying an SDL Window in C\nDESCRIPTION: This code snippet demonstrates how to destroy an SDL window using the SDL_DestroyWindow function. It takes a pointer to the SDL_Window structure as input and recursively destroys any child windows associated with it. The function should be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Get Connected Cameras with SDL_GetCameras in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetCameras to retrieve a list of connected camera devices. It takes an integer pointer as input, which is filled with the number of cameras returned. The function returns a pointer to an array of SDL_CameraID which must be freed using SDL_free.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameras.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_CameraID * SDL_GetCameras(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_Quit Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_Quit function in C. The function takes no arguments and returns void. It's used to clean up all initialized SDL subsystems.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: Deinitialize SDL_net in C\nDESCRIPTION: This function deinitializes the SDL_net library. It should be called after all uses of the library are complete to free allocated resources. It is safe to call even if the library is not initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: Creating an SDL_Surface in SDL2 (C)\nDESCRIPTION: This code shows how to create an SDL_Surface with a specified pixel format. This is a replacement for SDL_SetVideoMode() in SDL 1.2. The color masks define the layout of the red, green, blue, and alpha channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\n// if all this hex scares you, check out SDL_PixelFormatEnumToMasks()!\nSDL_Surface *screen = SDL_CreateRGBSurface(0, 640, 480, 32,\n                                        0x00FF0000,\n                                        0x0000FF00,\n                                        0x000000FF,\n                                        0xFF000000);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateThread Equivalent Call in C\nDESCRIPTION: Shows the equivalent function call using SDL_CreateThreadWithStackSize. Demonstrates that SDL_CreateThread is a wrapper around SDL_CreateThreadWithStackSize with a stack size of 0 (default). Requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateThread.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_CreateThreadWithStackSize(fn, name, 0, data);\n```\n\n----------------------------------------\n\nTITLE: Creating an SDL_AudioStream for Audio Conversion\nDESCRIPTION: This code snippet demonstrates how to create an SDL_AudioStream to convert audio from a source format (Sint16/mono/22050Hz) to a destination format (Float32/stereo/48000Hz). It initializes SDL_AudioSpec structures for both source and destination formats and then creates the stream using SDL_CreateAudioStream. Error handling is included to check if the stream creation was successful.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/AudioStream.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// You put data at Sint16/mono/22050Hz, you get back data at Float32/stereo/48000Hz.\nconst SDL_AudioSpec srcspec = { SDL_AUDIO_S16, 1, 22050 };\nconst SDL_AudioSpec dstspec = { SDL_AUDIO_F32, 2, 48000 };\nSDL_AudioStream *stream = SDL_CreateAudioStream(&srcspec, &dstspec);\nif (stream == NULL) {\n    printf(\"Uhoh, stream failed to create: %s\\n\", SDL_GetError());\n} else {\n    // We are ready to use the stream!\n}\n```\n\n----------------------------------------\n\nTITLE: Set OpenGL context with SDL_GL_MakeCurrent in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GL_MakeCurrent function, which sets up an OpenGL context for rendering into an OpenGL window. It takes an SDL_Window pointer and an SDL_GLContext as input, and returns an integer indicating success or failure. The context must have been created with a compatible window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_MakeCurrent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GL_MakeCurrent(SDL_Window * window,\n                       SDL_GLContext context);\n```\n\n----------------------------------------\n\nTITLE: Iterating and Logging Haptic Devices in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to initialize the haptic subsystem, iterate through available haptic devices using instance IDs, and log their names. It utilizes SDL_GetHaptics() to retrieve an array of haptic device IDs and SDL_GetHapticNameForID() to obtain the name associated with each ID. The code also includes proper initialization and shutdown of the haptic subsystem. This example replaces the old device index iteration with instance ID based retrieval.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_HAPTIC)) {\n        int i, num_haptics;\n        SDL_HapticID *haptics = SDL_GetHaptics(&num_haptics);\n        if (haptics) {\n            for (i = 0; i < num_haptics; ++i) {\n                SDL_HapticID instance_id = haptics[i];\n                SDL_Log(\"Haptic %\" SDL_PRIu32 \": %s\", instance_id, SDL_GetHapticNameForID(instance_id));\n            }\n            SDL_free(haptics);\n        }\n        SDL_QuitSubSystem(SDL_INIT_HAPTIC);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerOpen Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_GameControllerOpen function in C. It takes an integer joystick_index as input and returns a pointer to an SDL_GameController object. The joystick_index corresponds to the device index of a joystick, up to SDL_NumJoysticks().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerOpen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GameController* SDL_GameControllerOpen(int joystick_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateTexture Syntax in C\nDESCRIPTION: Creates a texture for a rendering context. Takes a renderer, pixel format, access type, width, and height as input. Returns a pointer to the created texture or NULL on failure. Requires SDL2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * SDL_CreateTexture(SDL_Renderer * renderer,\n                                Uint32 format,\n                                int access, int w,\n                                int h);\n```\n\n----------------------------------------\n\nTITLE: Including SDL3 in Makefile Project\nDESCRIPTION: This snippet demonstrates how to integrate SDL3 into a Makefile project. It uses `pkg-config` to retrieve the necessary compiler and linker flags for SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_6\n\nLANGUAGE: Makefile\nCODE:\n```\nCFLAGS += $(shell pkg-config sdl3 --cflags)\nLDFLAGS += $(shell pkg-config sdl3 --libs)\n```\n\n----------------------------------------\n\nTITLE: SDL_CopyGPUBufferToBuffer Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_CopyGPUBufferToBuffer function. It requires SDL3/SDL_gpu.h. The function copies data from a source buffer to a destination buffer on the GPU. The copy_pass parameter is a handle for the copy pass, source and destination specify the buffer locations, size is the amount of data to copy, and cycle determines if the destination buffer should cycle if already bound.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CopyGPUBufferToBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CopyGPUBufferToBuffer(\n    SDL_GPUCopyPass *copy_pass,\n    const SDL_GPUBufferLocation *source,\n    const SDL_GPUBufferLocation *destination,\n    Uint32 size,\n    bool cycle);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetEventFilter Example in C\nDESCRIPTION: Demonstrates how to set up an event filter using `SDL_SetEventFilter` in C. The example creates a window, sets an event filter to toggle a color value on space bar press, and updates the window color based on the filter's modification of user data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetEventFilter.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\n// Just a quick warning: this is a silly way to do things, but it\n//  illustrates how event filters work. In real life, you'd just\n//  handle the event when you get it from SDL_PollEvent in the main\n//  loop. Generally if you find yourself using an event filter, you\n//  should stop and think carefully about whether you have a good\n//  reason to be doing so in the first place.\n\n\n// This is the function we'll pass to SDL_SetEventFilter. If it sees\n// that the user has pressed the keyboard's space bar, it toggles\n// the value pointed to by `userdata`, to represent the color blue,\n// between 255 and 0. The main program uses this value to clear the\n// window to a specific color as the space bar is pressed.\nstatic bool SDLCALL my_event_filter(void *userdata, SDL_Event * event)\n{\n    if ((event->type == SDL_EVENT_KEY_DOWN) && (event->key.key == SDLK_SPACE)) {\n        Uint8 *blue = (Uint8 *) userdata;\n        if (*blue == 0) {\n            *blue = 255;\n        } else {\n            *blue = 0;\n        }\n    }\n    return true;  // let all events be added to the queue since we always return 1.\n}\n\nint main(int argc, char **argv)\n{\n    Uint8 blue = 0;\n    int quit = 0;\n\n    // Just get a window on the screen and clear it to black.\n    // In real life, you should check these for errors!\n    SDL_Init(SDL_INIT_VIDEO);\n    SDL_Window *window = SDL_CreateWindow(\"Hello SDL\", 640, 480, 0);\n    SDL_Renderer *renderer = SDL_CreateRenderer(window, NULL);\n    SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);\n    SDL_RenderClear(renderer);\n    SDL_RenderPresent(renderer);\n\n    // Set up an event filter...\n    SDL_SetEventFilter(my_event_filter, &blue);\n\n    // Now run the event loop mostly forever. Each event goes through the\n    //  my_event_filter function before it lands here. Each frame, we fill\n    //  in the window with whatever color `blue` is set to, which might be\n    //  changed by the filter function, as its address is our userdata.\n    while (!quit) {\n        SDL_Event e;\n        while (SDL_PollEvent(&e)) {\n            if (e.type == SDL_EVENT_QUIT) {\n                quit = 1;\n            }\n        }\n\n        SDL_SetRenderDrawColor(renderer, 0, 0, blue, 255);\n        SDL_RenderClear(renderer);\n        SDL_RenderPresent(renderer);\n    }\n\n    SDL_Quit();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_aligned_alloc Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_aligned_alloc function in C. It takes the alignment and size as input parameters and returns a void pointer to the allocated memory, or NULL if allocation failed. The allocated memory needs to be freed with SDL_aligned_free.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_aligned_alloc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_aligned_alloc(size_t alignment, size_t size);\n```\n\n----------------------------------------\n\nTITLE: Querying Texture Attributes using SDL_QueryTexture in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_QueryTexture to retrieve texture attributes like format, access, width, and height. The function requires a valid SDL_Texture pointer and can optionally take NULL pointers if certain attributes are not needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_QueryTexture.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_QueryTexture(SDL_Texture * texture,\n                     Uint32 * format, int *access,\n                     int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTextureColorMod Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetTextureColorMod function. This function sets an additional color value (RGB) that is multiplied into render copy operations when the specified texture is rendered. The function takes a SDL_Texture pointer and three Uint8 values for red, green, and blue components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTextureColorMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetTextureColorMod(SDL_Texture *texture, Uint8 r, Uint8 g, Uint8 b);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_DropEvent struct in C\nDESCRIPTION: Defines the SDL_DropEvent structure, which is used to represent events related to dropping text or files into an SDL window. It includes fields for event type, timestamp, window ID, coordinates, source application, and the dropped data. This structure is available since SDL 3.2.0 and is located in SDL3/SDL_events.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DropEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DropEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_DROP_BEGIN or SDL_EVENT_DROP_FILE or SDL_EVENT_DROP_TEXT or SDL_EVENT_DROP_COMPLETE or SDL_EVENT_DROP_POSITION */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID;    /**< The window that was dropped on, if any */\n    float x;            /**< X coordinate, relative to window (not on begin) */\n    float y;            /**< Y coordinate, relative to window (not on begin) */\n    const char *source; /**< The source app that sent this drop event, or NULL if that isn't available */\n    const char *data;   /**< The text for SDL_EVENT_DROP_TEXT and the file name for SDL_EVENT_DROP_FILE, NULL for other events */\n} SDL_DropEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateSoftwareRenderer Example C\nDESCRIPTION: Illustrates how to use SDL_CreateSoftwareRenderer to create a software renderer and draw a chessboard. The example initializes SDL, creates a window, gets the window surface, creates a software renderer for that surface, draws a chessboard pattern, and updates the window surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateSoftwareRenderer.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nSDL_Window *window;\nSDL_Renderer *renderer;\nint done;\n\nvoid DrawChessBoard(SDL_Renderer *renderer)\n{\n    int row = 0, column = 0, x = 0;\n    SDL_FRect rect;\n    SDL_Rect darea;\n\n    /* Get the Size of drawing surface */\n    SDL_GetRenderViewport(renderer, &darea);\n\n    SDL_SetRenderDrawColor(renderer, 0xFF, 0xFF, 0xFF, 0xFF);\n    SDL_RenderClear(renderer);\n\n    for (; row < 8; row++) {\n        column = row % 2;\n        x = column;\n        for (; column < 4 + (row % 2); column++) {\n            SDL_SetRenderDrawColor(renderer, 0, 0, 0, 0xFF);\n\n            rect.w = (float)darea.w / 8;\n            rect.h = (float)darea.h / 8;\n            rect.x = x * rect.w;\n            rect.y = row * rect.h;\n            x = x + 2;\n            SDL_RenderFillRect(renderer, &rect);\n        }\n    }\n    SDL_RenderPresent(renderer);\n}\n\nvoid loop()\n{\n    SDL_Event e;\n    while (SDL_PollEvent(&e)) {\n        if (e.type == SDL_EVENT_QUIT) {\n            done = 1;\n            return;\n        }\n\n        if ((e.type == SDL_EVENT_KEY_DOWN) && (e.key.key == SDLK_ESCAPE)) {\n            done = 1;\n            return;\n        }\n    }\n\n    DrawChessBoard(renderer);\n\n    /* Got everything on rendering surface,\n       now Update the drawing image on window screen */\n    SDL_UpdateWindowSurface(window);\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_Surface *surface;\n\n    /* Initialize SDL */\n    if (!SDL_Init(SDL_INIT_VIDEO)) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"SDL_Init fail : %s\\n\", SDL_GetError());\n        return 1;\n    }\n\n    /* Create window and renderer for given surface */\n    window = SDL_CreateWindow(\"Chess Board\", 640, 480, 0);\n    if (!window) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Window creation fail : %s\\n\", SDL_GetError());\n        return 1;\n    }\n    surface = SDL_GetWindowSurface(window);\n    renderer = SDL_CreateSoftwareRenderer(surface);\n    if (!renderer) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Render creation for surface fail : %s\\n\", SDL_GetError());\n        return 1;\n    }\n\n    /* Draw the Image on rendering surface */\n    done = 0;\n\n    while (!done) {\n        loop();\n    }\n\n    SDL_Quit();\n    return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating an SDL Texture from scratch in C\nDESCRIPTION: This snippet demonstrates how to create an SDL texture with a specified pixel format, access type, width, and height using SDL_CreateTexture. The texture is created with SDL_TEXTUREACCESS_STATIC, indicating that the pixels will be uploaded once and not updated frequently.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nsdlTexture = SDL_CreateTexture(sdlRenderer,\n                               SDL_PIXELFORMAT_ARGB8888,\n                               SDL_TEXTUREACCESS_STATIC,\n                               myWidth, myHeight);\n```\n\n----------------------------------------\n\nTITLE: Polling SDL Events in C\nDESCRIPTION: Illustrates how to use SDL_PollEvent in a while loop to process events from the SDL event queue.  The code shows how to retrieve events and access event-specific data using a switch statement based on the event type. Specifically, handles SDL_EVENT_MOUSE_MOTION event.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Event.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nwhile (SDL_PollEvent(&test_event)) {\n  switch (test_event.type) {\n    case SDL_EVENT_MOUSE_MOTION:\n      SDL_Log(\"We got a motion event.\");\n      SDL_Log(\"Current mouse position is: (%f, %f)\", test_event.motion.x, test_event.motion.y);\n      break;\n    default:\n      SDL_Log(\"Unhandled Event!\");\n      break;\n  }\n}\nSDL_Log(\"Event queue empty.\");\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowMessageBox Syntax in C\nDESCRIPTION: This is the syntax for the SDL_ShowMessageBox function. It takes a pointer to an SDL_MessageBoxData structure and a pointer to an integer as input. It returns a boolean value indicating success or failure. The SDL_MessageBoxData structure contains information about the message box, such as the title and message. The integer pointer will be populated with the ID of the button the user pressed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowMessageBox.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);\n```\n\n----------------------------------------\n\nTITLE: Creating a System Tray Icon with SDL\nDESCRIPTION: This code demonstrates how to create a system tray icon with a quit button in the context menu using SDL3. It initializes SDL, creates a tray, adds a menu with a quit button, sets a callback for the button, and runs the main loop until a quit event is received. Finally, it destroys the tray and quits SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateTray.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nvoid callback_quit(void *userdata, SDL_TrayEntry *invoker)\n{\n    SDL_Event e;\n    e.type = SDL_EVENT_QUIT;\n    SDL_PushEvent(&e);\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_Tray *tray;\n    SDL_TrayMenu *menu;\n    SDL_TrayEntry *entry;\n    SDL_Event e;\n\n    SDL_Init(SDL_INIT_VIDEO);\n\n    // Create the entry in the system tray. A regular app will want to provide\n    // an SDL_Surface instead of NULL.\n    tray = SDL_CreateTray(NULL, \"My tray\");\n\n    // Create a context menu for the tray.\n    menu = SDL_CreateTrayMenu(tray);\n\n    // Create a button in the comtext menu.\n    entry = SDL_InsertTrayEntryAt(menu, -1, \"Quit\", SDL_TRAYENTRY_BUTTON);\n\n    // Set the callback for the button\n    SDL_SetTrayEntryCallback(entry, callback_quit, NULL);\n\n    // Run the main loop...\n    while (SDL_WaitEvent(&e)) {\n        if (e.type == SDL_EVENT_QUIT) {\n            break;\n        }\n    }\n\n    // No need to destroy anything other than the tray itself - the rest is\n    // destroyed automatically.\n    SDL_DestroyTray(tray);\n\n    SDL_Quit();\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SDL_RWFromFP Replacement in SDL3\nDESCRIPTION: Provides a complete implementation of a replacement for the removed SDL_RWFromFP function in SDL3. It demonstrates how to create a custom SDL_IOStream that wraps a stdio FILE pointer, including seek, read, write, and close operations. It includes necessary data structures and function definitions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_34\n\nLANGUAGE: C\nCODE:\n```\n#include <stdio.h>\n\ntypedef struct IOStreamStdioFPData\n{\n    FILE *fp;\n    bool autoclose;\n} IOStreamStdioFPData;\n\nstatic Sint64 SDLCALL stdio_seek(void *userdata, Sint64 offset, int whence)\n{\n    FILE *fp = ((IOStreamStdioFPData *) userdata)->fp;\n    int stdiowhence;\n\n    switch (whence) {\n    case SDL_IO_SEEK_SET:\n        stdiowhence = SEEK_SET;\n        break;\n    case SDL_IO_SEEK_CUR:\n        stdiowhence = SEEK_CUR;\n        break;\n    case SDL_IO_SEEK_END:\n        stdiowhence = SEEK_END;\n        break;\n    default:\n        SDL_SetError(\"Unknown value for 'whence'\");\n        return -1;\n    }\n\n    if (fseek(fp, (fseek_off_t)offset, stdiowhence) == 0) {\n        const Sint64 pos = ftell(fp);\n        if (pos < 0) {\n            SDL_SetError(\"Couldn't get stream offset\");\n            return -1;\n        }\n        return pos;\n    }\n    SDL_SetError(\"Couldn't seek in stream\");\n    return -1;\n}\n\nstatic size_t SDLCALL stdio_read(void *userdata, void *ptr, size_t size, SDL_IOStatus *status)\n{\n    FILE *fp = ((IOStreamStdioFPData *) userdata)->fp;\n    const size_t bytes = fread(ptr, 1, size, fp);\n    if (bytes == 0 && ferror(fp)) {\n        SDL_SetError(\"Couldn't read stream\");\n    }\n    return bytes;\n}\n\nstatic size_t SDLCALL stdio_write(void *userdata, const void *ptr, size_t size, SDL_IOStatus *status)\n{\n    FILE *fp = ((IOStreamStdioFPData *) userdata)->fp;\n    const size_t bytes = fwrite(ptr, 1, size, fp);\n    if (bytes == 0 && ferror(fp)) {\n        SDL_SetError(\"Couldn't write stream\");\n    }\n    return bytes;\n}\n\nstatic bool SDLCALL stdio_close(void *userdata)\n{\n    IOStreamStdioData *rwopsdata = (IOStreamStdioData *) userdata;\n    bool status = true;\n    if (rwopsdata->autoclose) {\n        if (fclose(rwopsdata->fp) != 0) {\n            SDL_SetError(\"Couldn't close stream\");\n            status = false;\n        }\n    }\n    return status;\n}\n\nSDL_IOStream *SDL_RWFromFP(FILE *fp, bool autoclose)\n{\n    SDL_IOStreamInterface iface;\n    IOStreamStdioFPData *rwopsdata;\n    SDL_IOStream *rwops;\n\n    rwopsdata = (IOStreamStdioFPData *) SDL_malloc(sizeof (*rwopsdata));\n    if (!rwopsdata) {\n        return NULL;\n    }\n\n    SDL_INIT_INTERFACE(&iface);\n    /* There's no stdio_size because SDL_GetIOSize emulates it the same way we'd do it for stdio anyhow. */\n    iface.seek = stdio_seek;\n    iface.read = stdio_read;\n    iface.write = stdio_write;\n    iface.close = stdio_close;\n\n    rwopsdata->fp = fp;\n    rwopsdata->autoclose = autoclose;\n\n    rwops = SDL_OpenIO(&iface, rwopsdata);\n    if (!rwops) {\n        iface.close(rwopsdata);\n    }\n    return rwops;\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping RGBA values to a pixel in SDL2 vs SDL3 (C)\nDESCRIPTION: This example shows how to map RGBA color values to a pixel using `SDL_MapRGBA` in SDL2 and the equivalent code using `SDL_MapSurfaceRGBA` in SDL3. In SDL3, `SDL_MapSurfaceRGBA` replaces the previous function to provide the same functionality.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\npixel = SDL_MapRGBA(surface->format, r, g, b, a);\n```\n\nLANGUAGE: C\nCODE:\n```\npixel = SDL_MapSurfaceRGBA(surface, r, g, b, a);\n```\n\n----------------------------------------\n\nTITLE: SDL_FreeSurface Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_FreeSurface function. It takes a pointer to an SDL_Surface as input and frees the memory associated with it. It is safe to pass NULL to this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FreeSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FreeSurface(SDL_Surface * surface);\n```\n\n----------------------------------------\n\nTITLE: Get OpenGL Function Pointer using SDL_GL_GetProcAddress (C)\nDESCRIPTION: This code snippet demonstrates how to use SDL_GL_GetProcAddress to obtain a function pointer to an OpenGL extension function (glActiveTextureARB). It includes the necessary type definition and the actual function pointer retrieval and usage. Ensure the function is valid for the current OpenGL context before calling it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_GetProcAddress.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (APIENTRY * GL_ActiveTextureARB_Func)(unsigned int);\nGL_ActiveTextureARB_Func glActiveTextureARB_ptr = 0;\n\n/* Get function pointer */\nglActiveTextureARB_ptr=(GL_ActiveTextureARB_Func) SDL_GL_GetProcAddress(\"glActiveTextureARB\");\n\n/* It was your responsibility to make sure this was a valid function to call! */\nglActiveTextureARB_ptr(GL_TEXTURE0_ARB);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTexture Syntax in C\nDESCRIPTION: The IMG_LoadTexture function loads an image from a filesystem path into a GPU texture. It takes an SDL_Renderer and a file path as input and returns an SDL_Texture pointer. The texture represents the image in GPU memory, optimizing rendering. The function is part of SDL_image library since version 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * IMG_LoadTexture(SDL_Renderer *renderer, const char *file);\n```\n\n----------------------------------------\n\nTITLE: Call Java Method from C++ using SDL_GetAndroidActivity\nDESCRIPTION: Example C++ code demonstrating how to use SDL_GetAndroidActivity to retrieve the Android activity instance and then call a Java method on that instance using JNI. This requires including SDL.h and jni.h, retrieving the JNI environment, finding the Java class and method ID, calling the method, and cleaning up local references.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidActivity.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <jni.h>\n\n// This example requires C++ and a custom Java method named \"void showHome()\"\n\n// Calls the void showHome() method of the Java instance of the activity.\nvoid showHome(void)\n{\n    // retrieve the JNI environment.\n    JNIEnv* env = (JNIEnv*)SDL_GetAndroidJNIEnv();\n\n    // retrieve the Java instance of the SDLActivity\n    jobject activity = (jobject)SDL_GetAndroidActivity();\n\n    // find the Java class of the activity. It should be SDLActivity or a subclass of it.\n    jclass clazz(env->GetObjectClass(activity));\n\n    // find the identifier of the method to call\n    jmethodID method_id = env->GetMethodID(clazz, \"showHome\", \"()V\");\n\n    // effectively call the Java method\n    env->CallVoidMethod(activity, method_id);\n\n    // clean up the local references.\n    env->DeleteLocalRef(activity);\n    env->DeleteLocalRef(clazz);\n\n    // Warning (and discussion of implementation details of SDL for Android):\n    // Local references are automatically deleted if a native function called\n    // from Java side returns. For SDL this native function is main() itself.\n    // Therefore references need to be manually deleted because otherwise the\n    // references will first be cleaned if main() returns (application exit).\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_EventType Enumeration in C\nDESCRIPTION: This C code defines the SDL_EventType enumeration, which lists all possible event types that SDL can generate. It includes events related to application state, displays, windows, keyboard, mouse, joysticks/gamepads, touch, clipboard, and drag-and-drop.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EventType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_EventType\n{\n    SDL_EVENT_FIRST     = 0,     /**< Unused (do not remove) */\n\n    /* Application events */\n    SDL_EVENT_QUIT           = 0x100, /**< User-requested quit */\n\n    /* These application events have special meaning on iOS and Android, see README-ios.md and README-android.md for details */\n    SDL_EVENT_TERMINATING,      /**< The application is being terminated by the OS. This event must be handled in a callback set with SDL_AddEventWatch().\n                                     Called on iOS in applicationWillTerminate()\n                                     Called on Android in onDestroy()\n                                */\n    SDL_EVENT_LOW_MEMORY,       /**< The application is low on memory, free memory if possible. This event must be handled in a callback set with SDL_AddEventWatch().\n                                     Called on iOS in applicationDidReceiveMemoryWarning()\n                                     Called on Android in onTrimMemory()\n                                */\n    SDL_EVENT_WILL_ENTER_BACKGROUND, /**< The application is about to enter the background. This event must be handled in a callback set with SDL_AddEventWatch().\n                                     Called on iOS in applicationWillResignActive()\n                                     Called on Android in onPause()\n                                */\n    SDL_EVENT_DID_ENTER_BACKGROUND, /**< The application did enter the background and may not get CPU for some time. This event must be handled in a callback set with SDL_AddEventWatch().\n                                     Called on iOS in applicationDidEnterBackground()\n                                     Called on Android in onPause()\n                                */\n    SDL_EVENT_WILL_ENTER_FOREGROUND, /**< The application is about to enter the foreground. This event must be handled in a callback set with SDL_AddEventWatch().\n                                     Called on iOS in applicationWillEnterForeground()\n                                     Called on Android in onResume()\n                                */\n    SDL_EVENT_DID_ENTER_FOREGROUND, /**< The application is now interactive. This event must be handled in a callback set with SDL_AddEventWatch().\n                                     Called on iOS in applicationDidBecomeActive()\n                                     Called on Android in onResume()\n                                */\n\n    SDL_EVENT_LOCALE_CHANGED,  /**< The user's locale preferences have changed. */\n\n    SDL_EVENT_SYSTEM_THEME_CHANGED, /**< The system theme changed */\n\n    /* Display events */\n    /* 0x150 was SDL_DISPLAYEVENT, reserve the number for sdl2-compat */\n    SDL_EVENT_DISPLAY_ORIENTATION = 0x151,   /**< Display orientation has changed to data1 */\n    SDL_EVENT_DISPLAY_ADDED,                 /**< Display has been added to the system */\n    SDL_EVENT_DISPLAY_REMOVED,               /**< Display has been removed from the system */\n    SDL_EVENT_DISPLAY_MOVED,                 /**< Display has changed position */\n    SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED,  /**< Display has changed desktop mode */\n    SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED,  /**< Display has changed current mode */\n    SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED, /**< Display has changed content scale */\n    SDL_EVENT_DISPLAY_FIRST = SDL_EVENT_DISPLAY_ORIENTATION,\n    SDL_EVENT_DISPLAY_LAST = SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED,\n\n    /* Window events */\n    /* 0x200 was SDL_WINDOWEVENT, reserve the number for sdl2-compat */\n    /* 0x201 was SDL_SYSWMEVENT, reserve the number for sdl2-compat */\n    SDL_EVENT_WINDOW_SHOWN = 0x202,     /**< Window has been shown */\n    SDL_EVENT_WINDOW_HIDDEN,            /**< Window has been hidden */\n    SDL_EVENT_WINDOW_EXPOSED,           /**< Window has been exposed and should be redrawn, and can be redrawn directly from event watchers for this event */\n    SDL_EVENT_WINDOW_MOVED,             /**< Window has been moved to data1, data2 */\n    SDL_EVENT_WINDOW_RESIZED,           /**< Window has been resized to data1xdata2 */\n    SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED,/**< The pixel size of the window has changed to data1xdata2 */\n    SDL_EVENT_WINDOW_METAL_VIEW_RESIZED,/**< The pixel size of a Metal view associated with the window has changed */\n    SDL_EVENT_WINDOW_MINIMIZED,         /**< Window has been minimized */\n    SDL_EVENT_WINDOW_MAXIMIZED,         /**< Window has been maximized */\n    SDL_EVENT_WINDOW_RESTORED,          /**< Window has been restored to normal size and position */\n    SDL_EVENT_WINDOW_MOUSE_ENTER,       /**< Window has gained mouse focus */\n    SDL_EVENT_WINDOW_MOUSE_LEAVE,       /**< Window has lost mouse focus */\n    SDL_EVENT_WINDOW_FOCUS_GAINED,      /**< Window has gained keyboard focus */\n    SDL_EVENT_WINDOW_FOCUS_LOST,        /**< Window has lost keyboard focus */\n    SDL_EVENT_WINDOW_CLOSE_REQUESTED,   /**< The window manager requests that the window be closed */\n    SDL_EVENT_WINDOW_HIT_TEST,          /**< Window had a hit test that wasn't SDL_HITTEST_NORMAL */\n    SDL_EVENT_WINDOW_ICCPROF_CHANGED,   /**< The ICC profile of the window's display has changed */\n    SDL_EVENT_WINDOW_DISPLAY_CHANGED,   /**< Window has been moved to display data1 */\n    SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED, /**< Window display scale has been changed */\n    SDL_EVENT_WINDOW_SAFE_AREA_CHANGED, /**< The window safe area has been changed */\n    SDL_EVENT_WINDOW_OCCLUDED,          /**< The window has been occluded */\n    SDL_EVENT_WINDOW_ENTER_FULLSCREEN,  /**< The window has entered fullscreen mode */\n    SDL_EVENT_WINDOW_LEAVE_FULLSCREEN,  /**< The window has left fullscreen mode */\n    SDL_EVENT_WINDOW_DESTROYED,         /**< The window with the associated ID is being or has been destroyed. If this message is being handled\n                                             in an event watcher, the window handle is still valid and can still be used to retrieve any properties\n                                             associated with the window. Otherwise, the handle has already been destroyed and all resources\n                                             associated with it are invalid */\n    SDL_EVENT_WINDOW_HDR_STATE_CHANGED, /**< Window HDR properties have changed */\n    SDL_EVENT_WINDOW_FIRST = SDL_EVENT_WINDOW_SHOWN,\n    SDL_EVENT_WINDOW_LAST = SDL_EVENT_WINDOW_HDR_STATE_CHANGED,\n\n    /* Keyboard events */\n    SDL_EVENT_KEY_DOWN        = 0x300, /**< Key pressed */\n    SDL_EVENT_KEY_UP,                  /**< Key released */\n    SDL_EVENT_TEXT_EDITING,            /**< Keyboard text editing (composition) */\n    SDL_EVENT_TEXT_INPUT,              /**< Keyboard text input */\n    SDL_EVENT_KEYMAP_CHANGED,          /**< Keymap changed due to a system event such as an\n                                            input language or keyboard layout change. */\n    SDL_EVENT_KEYBOARD_ADDED,          /**< A new keyboard has been inserted into the system */\n    SDL_EVENT_KEYBOARD_REMOVED,        /**< A keyboard has been removed */\n    SDL_EVENT_TEXT_EDITING_CANDIDATES, /**< Keyboard text editing candidates */\n\n    /* Mouse events */\n    SDL_EVENT_MOUSE_MOTION    = 0x400, /**< Mouse moved */\n    SDL_EVENT_MOUSE_BUTTON_DOWN,       /**< Mouse button pressed */\n    SDL_EVENT_MOUSE_BUTTON_UP,         /**< Mouse button released */\n    SDL_EVENT_MOUSE_WHEEL,             /**< Mouse wheel motion */\n    SDL_EVENT_MOUSE_ADDED,             /**< A new mouse has been inserted into the system */\n    SDL_EVENT_MOUSE_REMOVED,           /**< A mouse has been removed */\n\n    /* Joystick events */\n    SDL_EVENT_JOYSTICK_AXIS_MOTION  = 0x600, /**< Joystick axis motion */\n    SDL_EVENT_JOYSTICK_BALL_MOTION,          /**< Joystick trackball motion */\n    SDL_EVENT_JOYSTICK_HAT_MOTION,           /**< Joystick hat position change */\n    SDL_EVENT_JOYSTICK_BUTTON_DOWN,          /**< Joystick button pressed */\n    SDL_EVENT_JOYSTICK_BUTTON_UP,            /**< Joystick button released */\n    SDL_EVENT_JOYSTICK_ADDED,                /**< A new joystick has been inserted into the system */\n    SDL_EVENT_JOYSTICK_REMOVED,              /**< An opened joystick has been removed */\n    SDL_EVENT_JOYSTICK_BATTERY_UPDATED,      /**< Joystick battery level change */\n    SDL_EVENT_JOYSTICK_UPDATE_COMPLETE,      /**< Joystick update is complete */\n\n    /* Gamepad events */\n    SDL_EVENT_GAMEPAD_AXIS_MOTION  = 0x650, /**< Gamepad axis motion */\n    SDL_EVENT_GAMEPAD_BUTTON_DOWN,          /**< Gamepad button pressed */\n    SDL_EVENT_GAMEPAD_BUTTON_UP,            /**< Gamepad button released */\n    SDL_EVENT_GAMEPAD_ADDED,                /**< A new gamepad has been inserted into the system */\n    SDL_EVENT_GAMEPAD_REMOVED,              /**< A gamepad has been removed */\n    SDL_EVENT_GAMEPAD_REMAPPED,             /**< The gamepad mapping was updated */\n    SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN,        /**< Gamepad touchpad was touched */\n    SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION,      /**< Gamepad touchpad finger was moved */\n    SDL_EVENT_GAMEPAD_TOUCHPAD_UP,          /**< Gamepad touchpad finger was lifted */\n    SDL_EVENT_GAMEPAD_SENSOR_UPDATE,        /**< Gamepad sensor was updated */\n    SDL_EVENT_GAMEPAD_UPDATE_COMPLETE,      /**< Gamepad update is complete */\n    SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED,  /**< Gamepad Steam handle has changed */\n\n    /* Touch events */\n    SDL_EVENT_FINGER_DOWN      = 0x700,\n    SDL_EVENT_FINGER_UP,\n    SDL_EVENT_FINGER_MOTION,\n    SDL_EVENT_FINGER_CANCELED,\n\n    /* 0x800, 0x801, and 0x802 were the Gesture events from SDL2. Do not reuse these values! sdl2-compat needs them! */\n\n    /* Clipboard events */\n    SDL_EVENT_CLIPBOARD_UPDATE = 0x900, /**< The clipboard or primary selection changed */\n\n    /* Drag and drop events */\n    SDL_EVENT_DROP_FILE        = 0x1000, /**< The system requests a file open */\n    SDL_EVENT_DROP_TEXT                  /**< text/plain drag-and-drop event */\n} SDL_EventType;\n```\n\n----------------------------------------\n\nTITLE: Example SDL_GameControllerAddMapping String\nDESCRIPTION: This is an example of a mapping string that can be passed to SDL_GameControllerAddMapping to configure the Afterglow PS3 Controller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerAddMapping.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n\"341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_UIKitRunApp and SDL_GDKRunApp macros in C\nDESCRIPTION: These macros provide backwards compatibility for SDL_UIKitRunApp and SDL_GDKRunApp by mapping them to SDL_RunApp with appropriate parameters. This is needed because the original functions were removed in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_UIKitRunApp(ARGC, ARGV, MAIN_FUNC)  SDL_RunApp(ARGC, ARGV, MAIN_FUNC, NULL)\n#define SDL_GDKRunApp(MAIN_FUNC, RESERVED)  SDL_RunApp(0, NULL, MAIN_FUNC, RESERVED)\n```\n\n----------------------------------------\n\nTITLE: SDL3 Set Logical Presentation\nDESCRIPTION: This code snippet sets the logical presentation mode for the renderer, allowing the game to render at a specific resolution and have SDL scale it to the actual display size. This provides flexibility in handling different screen resolutions and aspect ratios. `SDL_LOGICAL_PRESENTATION_LETTERBOX` will letterbox the content to maintain aspect ratio.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetRenderLogicalPresentation(sdlRenderer, 640, 480, SDL_LOGICAL_PRESENTATION_LETTERBOX, SDL_SCALEMODE_LINEAR);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateWindowAndRenderer Syntax (C)\nDESCRIPTION: Defines the syntax for SDL_CreateWindowAndRenderer, a function that creates both a window and a default renderer in SDL3. The function takes window title, dimensions, flags, and pointers to store the created window and renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateWindowAndRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CreateWindowAndRenderer(const char *title, int width, int height, SDL_WindowFlags window_flags, SDL_Window **window, SDL_Renderer **renderer);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Audio Queue Example\nDESCRIPTION: This code snippet shows how to queue audio data using SDL_AudioStream in SDL3, which replaces the SDL2 SDL_QueueAudio function.  It opens an audio device stream and resumes audio playback, then uses SDL_PutAudioStreamData to add audio data to the stream. This code assumes that `buf` and `buflen` are already defined and contain the audio data to be queued.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\n/* ...somewhere near startup... */\n    const SDL_AudioSpec spec = { SDL_AUDIO_S16, 2, 44100 };\n    SDL_AudioStream *stream = SDL_OpenAudioDeviceStream(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &spec, NULL, NULL);\n    SDL_ResumeAudioDevice(SDL_GetAudioStreamDevice(stream));\n\n    /* ...in your main loop... */\n    /* calculate a little more audio into `buf`, add it to `stream` */\n    SDL_PutAudioStreamData(stream, buf, buflen);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Pixel Formats Enum in C\nDESCRIPTION: This code snippet defines the SDL_PixelFormat enumeration in C. It contains a comprehensive list of supported pixel formats, including various RGB, BGR, YUV, and other formats with different bit depths and layouts.  Each member of the enum defines a particular format and provides its corresponding hexadecimal value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PixelFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PixelFormat\n{\n    SDL_PIXELFORMAT_UNKNOWN = 0,\n    SDL_PIXELFORMAT_INDEX1LSB = 0x11100100u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0, 1, 0), */\n    SDL_PIXELFORMAT_INDEX1MSB = 0x11200100u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0, 1, 0), */\n    SDL_PIXELFORMAT_INDEX2LSB = 0x1c100200u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_4321, 0, 2, 0), */\n    SDL_PIXELFORMAT_INDEX2MSB = 0x1c200200u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX2, SDL_BITMAPORDER_1234, 0, 2, 0), */\n    SDL_PIXELFORMAT_INDEX4LSB = 0x12100400u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0, 4, 0), */\n    SDL_PIXELFORMAT_INDEX4MSB = 0x12200400u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0, 4, 0), */\n    SDL_PIXELFORMAT_INDEX8 = 0x13000801u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1), */\n    SDL_PIXELFORMAT_RGB332 = 0x14110801u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_332, 8, 1), */\n    SDL_PIXELFORMAT_XRGB4444 = 0x15120c02u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_4444, 12, 2), */\n    SDL_PIXELFORMAT_XBGR4444 = 0x15520c02u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_4444, 12, 2), */\n    SDL_PIXELFORMAT_XRGB1555 = 0x15130f02u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_1555, 15, 2), */\n    SDL_PIXELFORMAT_XBGR1555 = 0x15530f02u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_1555, 15, 2), */\n    SDL_PIXELFORMAT_ARGB4444 = 0x15321002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_4444, 16, 2), */\n    SDL_PIXELFORMAT_RGBA4444 = 0x15421002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_4444, 16, 2), */\n    SDL_PIXELFORMAT_ABGR4444 = 0x15721002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_4444, 16, 2), */\n    SDL_PIXELFORMAT_BGRA4444 = 0x15821002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_4444, 16, 2), */\n    SDL_PIXELFORMAT_ARGB1555 = 0x15331002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_1555, 16, 2), */\n    SDL_PIXELFORMAT_RGBA5551 = 0x15441002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_5551, 16, 2), */\n    SDL_PIXELFORMAT_ABGR1555 = 0x15731002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_1555, 16, 2), */\n    SDL_PIXELFORMAT_BGRA5551 = 0x15841002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_5551, 16, 2), */\n    SDL_PIXELFORMAT_RGB565 = 0x15151002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_565, 16, 2), */\n    SDL_PIXELFORMAT_BGR565 = 0x15551002u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_565, 16, 2), */\n    SDL_PIXELFORMAT_RGB24 = 0x17101803u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0, 24, 3), */\n    SDL_PIXELFORMAT_BGR24 = 0x17401803u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0, 24, 3), */\n    SDL_PIXELFORMAT_XRGB8888 = 0x16161804u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_8888, 24, 4), */\n    SDL_PIXELFORMAT_RGBX8888 = 0x16261804u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX, SDL_PACKEDLAYOUT_8888, 24, 4), */\n    SDL_PIXELFORMAT_XBGR8888 = 0x16561804u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_8888, 24, 4), */\n    SDL_PIXELFORMAT_BGRX8888 = 0x16661804u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX, SDL_PACKEDLAYOUT_8888, 24, 4), */\n    SDL_PIXELFORMAT_ARGB8888 = 0x16362004u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_8888, 32, 4), */\n    SDL_PIXELFORMAT_RGBA8888 = 0x16462004u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4), */\n    SDL_PIXELFORMAT_ABGR8888 = 0x16762004u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_8888, 32, 4), */\n    SDL_PIXELFORMAT_BGRA8888 = 0x16862004u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA, SDL_PACKEDLAYOUT_8888, 32, 4), */\n    SDL_PIXELFORMAT_XRGB2101010 = 0x16172004u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB, SDL_PACKEDLAYOUT_2101010, 32, 4), */\n    SDL_PIXELFORMAT_XBGR2101010 = 0x16572004u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR, SDL_PACKEDLAYOUT_2101010, 32, 4), */\n    SDL_PIXELFORMAT_ARGB2101010 = 0x16372004u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB, SDL_PACKEDLAYOUT_2101010, 32, 4), */\n    SDL_PIXELFORMAT_ABGR2101010 = 0x16772004u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR, SDL_PACKEDLAYOUT_2101010, 32, 4), */\n    SDL_PIXELFORMAT_RGB48 = 0x18103006u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGB, 0, 48, 6), */\n    SDL_PIXELFORMAT_BGR48 = 0x18403006u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGR, 0, 48, 6), */\n    SDL_PIXELFORMAT_RGBA64 = 0x18204008u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_RGBA, 0, 64, 8), */\n    SDL_PIXELFORMAT_ARGB64 = 0x18304008u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ARGB, 0, 64, 8), */\n    SDL_PIXELFORMAT_BGRA64 = 0x18504008u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_BGRA, 0, 64, 8), */\n    SDL_PIXELFORMAT_ABGR64 = 0x18604008u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU16, SDL_ARRAYORDER_ABGR, 0, 64, 8), */\n    SDL_PIXELFORMAT_RGB48_FLOAT = 0x1a103006u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGB, 0, 48, 6), */\n    SDL_PIXELFORMAT_BGR48_FLOAT = 0x1a403006u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGR, 0, 48, 6), */\n    SDL_PIXELFORMAT_RGBA64_FLOAT = 0x1a204008u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_RGBA, 0, 64, 8), */\n    SDL_PIXELFORMAT_ARGB64_FLOAT = 0x1a304008u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ARGB, 0, 64, 8), */\n    SDL_PIXELFORMAT_BGRA64_FLOAT = 0x1a504008u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_BGRA, 0, 64, 8), */\n    SDL_PIXELFORMAT_ABGR64_FLOAT = 0x1a604008u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF16, SDL_ARRAYORDER_ABGR, 0, 64, 8), */\n    SDL_PIXELFORMAT_RGB96_FLOAT = 0x1b10600cu,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGB, 0, 96, 12), */\n    SDL_PIXELFORMAT_BGR96_FLOAT = 0x1b40600cu,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGR, 0, 96, 12), */\n    SDL_PIXELFORMAT_RGBA128_FLOAT = 0x1b208010u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_RGBA, 0, 128, 16), */\n    SDL_PIXELFORMAT_ARGB128_FLOAT = 0x1b308010u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ARGB, 0, 128, 16), */\n    SDL_PIXELFORMAT_BGRA128_FLOAT = 0x1b508010u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_BGRA, 0, 128, 16), */\n    SDL_PIXELFORMAT_ABGR128_FLOAT = 0x1b608010u,\n        /* SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYF32, SDL_ARRAYORDER_ABGR, 0, 128, 16), */\n\n    SDL_PIXELFORMAT_YV12 = 0x32315659u,      /**< Planar mode: Y + V + U  (3 planes) */\n        /* SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2'), */\n    SDL_PIXELFORMAT_IYUV = 0x56555949u,      /**< Planar mode: Y + U + V  (3 planes) */\n        /* SDL_DEFINE_PIXELFOURCC('I', 'Y', 'U', 'V'), */\n    SDL_PIXELFORMAT_YUY2 = 0x32595559u,      /**< Packed mode: Y0+U0+Y1+V0 (1 plane) */\n        /* SDL_DEFINE_PIXELFOURCC('Y', 'U', 'Y', '2'), */\n    SDL_PIXELFORMAT_UYVY = 0x59565955u,      /**< Packed mode: U0+Y0+V0+Y1 (1 plane) */\n        /* SDL_DEFINE_PIXELFOURCC('U', 'Y', 'V', 'Y'), */\n    SDL_PIXELFORMAT_YVYU = 0x55595659u,      /**< Packed mode: Y0+V0+Y1+U0 (1 plane) */\n        /* SDL_DEFINE_PIXELFOURCC('Y', 'V', 'Y', 'U'), */\n    SDL_PIXELFORMAT_NV12 = 0x3231564eu,      /**< Planar mode: Y + U/V interleaved  (2 planes) */\n        /* SDL_DEFINE_PIXELFOURCC('N', 'V', '1', '2'), */\n    SDL_PIXELFORMAT_NV21 = 0x3132564eu,      /**< Planar mode: Y + V/U interleaved  (2 planes) */\n        /* SDL_DEFINE_PIXELFOURCC('N', 'V', '2', '1'), */\n    SDL_PIXELFORMAT_P010 = 0x30313050u,      /**< Planar mode: Y + U/V interleaved  (2 planes) */\n        /* SDL_DEFINE_PIXELFOURCC('P', '0', '1', '0'), */\n    SDL_PIXELFORMAT_EXTERNAL_OES = 0x2053454fu,     /**< Android video texture format */\n        /* SDL_DEFINE_PIXELFOURCC('O', 'E', 'S', ' ') */\n\n    SDL_PIXELFORMAT_MJPG = 0x47504a4du,     /**< Motion JPEG */\n        /* SDL_DEFINE_PIXELFOURCC('M', 'J', 'P', 'G') */\n\n    /* Aliases for RGBA byte arrays of color data, for the current platform */\n    #if SDL_BYTEORDER == SDL_BIG_ENDIAN\n    SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_RGBA8888,\n    SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_ARGB8888,\n    SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_BGRA8888,\n    SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_ABGR8888,\n    SDL_PIXELFORMAT_RGBX32 = SDL_PIXELFORMAT_RGBX8888,\n    SDL_PIXELFORMAT_XRGB32 = SDL_PIXELFORMAT_XRGB8888,\n```\n\n----------------------------------------\n\nTITLE: Get User Preference Path in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetPrefPath function, which is used to retrieve the user-and-app-specific path where files can be written. The function takes the organization and application name as input and returns a UTF-8 string of the user directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPrefPath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetPrefPath(const char *org, const char *app);\n```\n\n----------------------------------------\n\nTITLE: Creating SDL Window with Properties in C\nDESCRIPTION: This snippet shows how to create an SDL window with specific properties using `SDL_CreateWindowWithProperties`. It utilizes `SDL_CreateProperties`, `SDL_SetStringProperty`, and `SDL_SetNumberProperty` to define window attributes like title, position (x, y), width, height, and flags. The `SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER` property is used for easier migration from SDL2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_50\n\nLANGUAGE: c\nCODE:\n```\nSDL_PropertiesID props = SDL_CreateProperties();\n    SDL_SetStringProperty(props, SDL_PROP_WINDOW_CREATE_TITLE_STRING, title);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_X_NUMBER, x);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_Y_NUMBER, y);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER, width);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER, height);\n    // For window flags you should use separate window creation properties,\n    // but for easier migration from SDL2 you can use the following:\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_FLAGS_NUMBER, flags);\n    pWindow = SDL_CreateWindowWithProperties(props);\n    SDL_DestroyProperties(props);\n    if (window) {\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: SDL Text Input Example in C\nDESCRIPTION: This code demonstrates how to initialize SDL, start and stop text input, and handle text input and editing events. It uses SDL_StartTextInput to enable text input and handles SDL_EVENT_TEXT_INPUT and SDL_EVENT_TEXT_EDITING events to process the input. strcat requires that `text` be properly allocated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/TextInput.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nextern SDL_Window *InitVideo();\nextern void Redraw(SDL_Window *window);\n\nextern char *text;\nextern const char *composition;\nextern Sint32 cursor;\nextern Sint32 selection_len;\n\nint main(int argc, char *argv[])\n{\n    bool done = false;\n\n    SDL_Window *window = InitVideo();\n    /* ... */\n\n    SDL_StartTextInput(window);\n    while (!done) {\n        SDL_Event event;\n        if (SDL_PollEvent(&event)) {\n            switch (event.type) {\n                case SDL_EVENT_QUIT:\n                    /* Quit */\n                    done = true;\n                    break;\n                case SDL_EVENT_TEXT_INPUT:\n                    /* Add new text onto the end of our text */\n                    strcat(text, event.text.text);\n                    break;\n                case SDL_EVENT_TEXT_EDITING:\n                    /*\n                    Update the composition text.\n                    Update the cursor position.\n                    Update the selection length (if any).\n                    */\n                    composition = event.edit.text;\n                    cursor = event.edit.start;\n                    selection_len = event.edit.length;\n                    break;\n            }\n        }\n        Redraw(window);\n    }\n\n    SDL_Quit();\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioStreamCallback Definition in C\nDESCRIPTION: Defines the signature of the SDL_AudioStreamCallback function, which is used to process audio stream data. This callback is triggered when data is added or requested from an SDL_AudioStream. The callback receives the stream, amount of additional data needed, total amount requested, and a user-defined pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioStreamCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_AudioStreamCallback)(void *userdata, SDL_AudioStream *stream, int additional_amount, int total_amount);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateWindow Example\nDESCRIPTION: Demonstrates how to use SDL3 to create an application window with specified dimensions and OpenGL flags. The example initializes SDL, creates a window, handles events, and cleans up before exiting.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateWindow.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Example program:\n// Using SDL3 to create an application window\n\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char* argv[]) {\n\n    SDL_Window *window;                    // Declare a pointer\n    bool done = false;\n\n    SDL_Init(SDL_INIT_VIDEO);              // Initialize SDL3\n\n    // Create an application window with the following settings:\n    window = SDL_CreateWindow(\n        \"An SDL3 window\",                  // window title\n        640,                               // width, in pixels\n        480,                               // height, in pixels\n        SDL_WINDOW_OPENGL                  // flags - see below\n    );\n\n    // Check that the window was successfully created\n    if (window == NULL) {\n        // In the case that the window could not be made...\n        SDL_LogError(SDL_LOG_CATEGORY_ERROR, \"Could not create window: %s\\n\", SDL_GetError());\n        return 1;\n    }\n\n    while (!done) {\n        SDL_Event event;\n\n        while (SDL_PollEvent(&event)) {\n            if (event.type == SDL_EVENT_QUIT) {\n                done = true;\n            }\n        }\n\n        // Do game logic, present a frame, etc.\n    }\n\n    // Close and destroy the window\n    SDL_DestroyWindow(window);\n\n    // Clean up\n    SDL_Quit();\n    return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: SDL_main Function Definition in C\nDESCRIPTION: Defines the signature of the SDL_main function, which serves as the application entry point when using SDL. It accepts argc and argv as parameters, similar to a standard C main function, and returns an integer representing the program's exit code. This function is automatically called by SDL after initializing the library, allowing developers to define their application logic within it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_main.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_main(int argc, char *argv[]);\n```\n\n----------------------------------------\n\nTITLE: SDL_Renderer Structure Definition in C\nDESCRIPTION: Defines the SDL_Renderer structure. This structure is an opaque pointer representing the rendering state in SDL2. No dependencies are required beyond the SDL2 library itself. It is a core component for rendering graphics.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Renderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct SDL_Renderer;\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenURL Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_OpenURL function in C. It takes a const char * representing the URL to open as input and returns a boolean indicating success or failure.  Remember to check SDL_GetError for details if the function fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenURL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_OpenURL(const char *url);\n```\n\n----------------------------------------\n\nTITLE: Add Hint Callback in SDL3 (C)\nDESCRIPTION: Registers a callback function to monitor changes to a specified SDL hint. The callback is invoked with the initial value and whenever the hint's value is updated. The function returns true on success, false on failure. Check SDL_GetError for more information. It's thread-safe. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddHintCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_AddHintCallback(const char *name, SDL_HintCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Button State in C\nDESCRIPTION: Retrieves the current state (pressed or not pressed) of a specified button on a given joystick. The function requires a valid SDL_Joystick pointer and the index of the button to check (starting from 0). It returns 1 if the button is pressed, 0 otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint8 SDL_JoystickGetButton(SDL_Joystick *joystick,\n                            int button);\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Stream with SDL_CreateAudioStream in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_CreateAudioStream to create a new audio stream in SDL3. It requires two SDL_AudioSpec pointers, src_spec and dst_spec, which define the input and output audio formats, respectively. The function returns a pointer to the newly created SDL_AudioStream, or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioStream * SDL_CreateAudioStream(const SDL_AudioSpec *src_spec, const SDL_AudioSpec *dst_spec);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateTextureWithProperties Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_CreateTextureWithProperties function in C, including parameters for the renderer and properties, and the return value, which is a pointer to the created texture or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateTextureWithProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * SDL_CreateTextureWithProperties(SDL_Renderer *renderer, SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetMouseState Syntax in C\nDESCRIPTION: Retrieves the mouse button state and cursor position from SDL's cache. The function takes pointers to floats for storing the x and y coordinates of the cursor, relative to the top-left corner of the focused window. These pointers can be NULL if the coordinates are not needed. It returns a bitmask representing the state of the mouse buttons.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetMouseState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_MouseButtonFlags SDL_GetMouseState(float *x, float *y);\n```\n\n----------------------------------------\n\nTITLE: Begin GPU Render Pass in C\nDESCRIPTION: This C code snippet shows the syntax for the `SDL_BeginGPURenderPass` function. It takes a command buffer, an array of color target information, the number of color targets, and depth/stencil target information as input and returns a render pass handle. All graphics pipeline operations must occur within a render pass.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BeginGPURenderPass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPURenderPass * SDL_BeginGPURenderPass(\n    SDL_GPUCommandBuffer *command_buffer,\n    const SDL_GPUColorTargetInfo *color_target_infos,\n    Uint32 num_color_targets,\n    const SDL_GPUDepthStencilTargetInfo *depth_stencil_target_info);\n```\n\n----------------------------------------\n\nTITLE: Set Clipboard Text in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetClipboardText function, which is used to put UTF-8 text into the system clipboard. The function takes a const char * as input, representing the text to store in the clipboard, and returns a boolean value indicating success or failure. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetClipboardText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetClipboardText(const char *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRWLock Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the `SDL_CreateRWLock` function in C. The function takes no arguments and returns a pointer to an `SDL_RWLock` structure, which represents the created read/write lock. The function may return NULL if the lock creation fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateRWLock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_RWLock * SDL_CreateRWLock(void);\n```\n\n----------------------------------------\n\nTITLE: Initialize SDL Subsystem in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_InitSubSystem function in C. It takes a Uint32 flag representing the subsystems to initialize and returns 0 on success or a negative error code on failure. Use SDL_GetError() to get more information about the error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_InitSubSystem.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_InitSubSystem(Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: Locking a Texture for Write-Only Access with SDL_LockTexture in C\nDESCRIPTION: This C code snippet demonstrates how to use SDL_LockTexture to lock a portion of a texture for write-only pixel access.  It takes an SDL_Texture pointer, an SDL_Rect defining the area to lock (or NULL for the entire texture), and pointers to store the pixel data and pitch. The texture must have been created with SDL_TEXTUREACCESS_STREAMING. Remember to call SDL_UnlockTexture afterwards.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockTexture.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_LockTexture(SDL_Texture * texture,\n                    const SDL_Rect * rect,\n                    void **pixels, int *pitch);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_IOStreamInterface in C\nDESCRIPTION: This C code defines the `SDL_IOStreamInterface` structure, which contains function pointers for implementing custom I/O streams in SDL. These function pointers provide the core operations needed to interact with a data stream, such as reading, writing, seeking, and closing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOStreamInterface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_IOStreamInterface\n{\n    /* The version of this interface */\n    Uint32 version;\n\n    /**\n     *  Return the number of bytes in this SDL_IOStream\n     *\n     *  \\return the total size of the data stream, or -1 on error.\n     */\n    Sint64 (SDLCALL *size)(void *userdata);\n\n    /**\n     *  Seek to `offset` relative to `whence`, one of stdio's whence values:\n     *  SDL_IO_SEEK_SET, SDL_IO_SEEK_CUR, SDL_IO_SEEK_END\n     *\n     *  \\return the final offset in the data stream, or -1 on error.\n     */\n    Sint64 (SDLCALL *seek)(void *userdata, Sint64 offset, SDL_IOWhence whence);\n\n    /**\n     *  Read up to `size` bytes from the data stream to the area pointed\n     *  at by `ptr`.\n     *\n     *  On an incomplete read, you should set `*status` to a value from the\n     *  SDL_IOStatus enum. You do not have to explicitly set this on\n     *  a complete, successful read.\n     *\n     *  \\return the number of bytes read\n     */\n    size_t (SDLCALL *read)(void *userdata, void *ptr, size_t size, SDL_IOStatus *status);\n\n    /**\n     *  Write exactly `size` bytes from the area pointed at by `ptr`\n     *  to data stream.\n     *\n     *  On an incomplete write, you should set `*status` to a value from the\n     *  SDL_IOStatus enum. You do not have to explicitly set this on\n     *  a complete, successful write.\n     *\n     *  \\return the number of bytes written\n     */\n    size_t (SDLCALL *write)(void *userdata, const void *ptr, size_t size, SDL_IOStatus *status);\n\n    /**\n     *  If the stream is buffering, make sure the data is written out.\n     *\n     *  On failure, you should set `*status` to a value from the\n     *  SDL_IOStatus enum. You do not have to explicitly set this on\n     *  a successful flush.\n     *\n     *  \\return true if successful or false on write error when flushing data.\n     */\n    bool (SDLCALL *flush)(void *userdata, SDL_IOStatus *status);\n\n    /**\n     *  Close and free any allocated resources.\n     *\n     *  This does not guarantee file writes will sync to physical media; they\n     *  can be in the system's file cache, waiting to go to disk.\n     *\n     *  The SDL_IOStream is still destroyed even if this fails, so clean up anything\n     *  even if flushing buffers, etc, returns an error.\n     *\n     *  \\return true if successful or false on write error when flushing data.\n     */\n    bool (SDLCALL *close)(void *userdata);\n\n} SDL_IOStreamInterface;\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTexture_RW Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadTexture_RW function in C.  It shows the required parameters: an SDL_Renderer pointer to specify the renderer, an SDL_RWops pointer for the data source, and an integer to indicate whether to free the data source.  The function returns a pointer to an SDL_Texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadTexture_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * IMG_LoadTexture_RW(SDL_Renderer *renderer, SDL_RWops *src, int freesrc);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Axis State in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetGamepadAxis to get the current state of a specified axis on a gamepad. The function takes a pointer to an SDL_Gamepad and an SDL_GamepadAxis enum value as input. It returns a Sint16 representing the axis state, ranging from -32768 to 32767 for thumbsticks and 0 to 32767 for triggers. Requires SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint16 SDL_GetGamepadAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);\n```\n\n----------------------------------------\n\nTITLE: SDL_RequestAndroidPermission Syntax\nDESCRIPTION: Shows the syntax of the SDL_RequestAndroidPermission function in C. This function requests Android permissions at runtime asynchronously and requires a permission string, a callback function, and user data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RequestAndroidPermission.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RequestAndroidPermission(const char *permission, SDL_RequestAndroidPermissionCallback cb, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadFunction Example\nDESCRIPTION: Demonstrates how to use SDL_LoadFunction to load a function named 'myFancyFunction' from a shared object file named 'mylib.so'. It includes error handling for cases where the function is not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n/* Variable declaration */\nSDL_SharedObject* myHandle = NULL;\nconst char* myFunctionName = \"myFancyFunction\";\nvoid (*myFancyFunction)(int anInt);\n\n/* Dynamically load mylib.so */\nmyHandle = SDL_LoadObject(\"mylib.so\");\n\n/* Load the exported function from mylib.so\n * The exported function has the following prototype\n * void myFancyFunction(int anInt);\n */\nmyFancyFunction = (void (*)(int))SDL_LoadFunction(myHandle, myFunctionName);\n\n/* Call myFancyFunction with a random integer */\nif (myFancyFunction != NULL) {\n    myFancyFunction(15);\n} else {\n    /* Error handling here */\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_TICKS_PASSED Macro Replacement (New Method) in C\nDESCRIPTION: This code shows the updated way to check for elapsed time using SDL_GetTicks(). Since SDL_GetTicks() now returns a 64-bit value (Uint64), the comparison directly checks if the current ticks are greater than or equal to the deadline, simplifying time management and eliminating the need for the SDL_TICKS_PASSED macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_46\n\nLANGUAGE: c\nCODE:\n```\nUint64 deadline = SDL_GetTicks() + 1000\n...\nif (SDL_GetTicks() >= deadline) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Get Window Surface in SDL3 (C)\nDESCRIPTION: This function retrieves the SDL surface associated with the specified window. A new surface is created if necessary, using the optimal format for the window. The returned surface is invalidated when the window is resized, and this function must be called again. The surface is managed by SDL and should not be freed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_GetWindowSurface(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_bsearch_r Example Usage in C\nDESCRIPTION: This example demonstrates how to use SDL_bsearch_r to search a sorted array of structs using a custom comparison function. The comparison function takes a userdata pointer that specifies the sorting method (increasing or decreasing). The key to search for is also a struct.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_bsearch_r.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum {\n    sort_increasing,\n    sort_decreasing,\n} sort_method;\n\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *userdata, const void *a, const void *b)\n{\n    sort_method method = (sort_method)(uintptr_t)userdata;\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->key < B->key) {\n        return (method == sort_increasing) ? -1 : 1;\n    } else if (B->key < A->key) {\n        return (method == sort_increasing) ? 1 : -1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }\n};\ndata key = { 2, NULL };\n\ndata *result = SDL_bsearch_r(&key, values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetVersion Usage Example\nDESCRIPTION: Illustrates how to use SDL_GetVersion to determine the linked SDL library version and compare it to the compiled-against version. The example uses SDL_Log to print the version information to the console.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetVersion.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst int compiled = SDL_VERSION;  /* hardcoded number from SDL headers */\nconst int linked = SDL_GetVersion();  /* reported by linked SDL library */\n\nSDL_Log(\"We compiled against SDL version %d.%d.%d ...\\n\",\n        SDL_VERSIONNUM_MAJOR(compiled),\n        SDL_VERSIONNUM_MINOR(compiled),\n        SDL_VERSIONNUM_MICRO(compiled));\n\nSDL_Log(\"But we are linking against SDL version %d.%d.%d.\\n\",\n        SDL_VERSIONNUM_MAJOR(linked),\n        SDL_VERSIONNUM_MINOR(linked),\n        SDL_VERSIONNUM_MICRO(linked));\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_mixer with flags in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_Init function in SDL_mixer. It takes a MIX_InitFlags value as input, which specifies the desired codecs to initialize (e.g., MP3, OGG). The function returns a MIX_InitFlags value indicating which codecs were successfully initialized. The return value should be checked to ensure that the required codecs were initialized successfully.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMIX_InitFlags Mix_Init(MIX_InitFlags flags);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDisplayUsableBounds Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetDisplayUsableBounds function in C. It takes a display ID and a pointer to an SDL_Rect as input, and returns a boolean indicating success or failure. The SDL_Rect will be populated with the usable bounds of the display.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplayUsableBounds.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetDisplayUsableBounds(SDL_DisplayID displayID, SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowMessageBox Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ShowMessageBox function. This function creates a modal message box and blocks execution until the user interacts with it.\nIt takes a pointer to an SDL_MessageBoxData structure and a pointer to an integer to store the ID of the clicked button.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ShowMessageBox.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioSpec Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_AudioSpec` which is used to specify audio data format, number of channels, and sample rate. This structure is used in SDL3 audio functions for configuring audio devices and handling audio data streams. The struct members are `format` (SDL_AudioFormat), `channels` (int), and `freq` (int).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioSpec.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AudioSpec\n{\n    SDL_AudioFormat format;     /**< Audio data format */\n    int channels;               /**< Number of channels: 1 mono, 2 stereo, etc */\n    int freq;                   /**< sample rate: sample frames per second */\n} SDL_AudioSpec;\n```\n\n----------------------------------------\n\nTITLE: Displaying Key Names with SDL_GetKeyName in SDL3 (C)\nDESCRIPTION: This snippet demonstrates how to display the name of a key pressed by the user using SDL_GetKeyName. It polls for keydown events and logs the name of the pressed key using SDL_Log. The key name is always returned in uppercase. Dependencies include SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/BestKeyboardPractices.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nbool quit_the_app = false;\nwhile (!quit_the_app) {\n    SDL_Event e;\n    while (SDL_PollEvent(&e)) {\n        /* user has pressed a key? */\n        if (e.type == SDL_EVENT_KEY_DOWN) {\n            SDL_Log(\"Wow, you just pressed the %s key!\", SDL_GetKeyName(e.key.key));\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Async I/O Queue with SDL_CreateAsyncIOQueue in C\nDESCRIPTION: This code snippet shows how to create an asynchronous I/O queue using the SDL_CreateAsyncIOQueue function in C. It returns a pointer to the new queue or NULL on error. The queue is used for tracking multiple asynchronous I/O operations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateAsyncIOQueue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AsyncIOQueue * SDL_CreateAsyncIOQueue(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_QuitEvent Structure Definition in C\nDESCRIPTION: Defines the SDL_QuitEvent structure, containing the event type (SDL_QUIT) and the timestamp (in milliseconds).  This structure is used when a quit event is triggered, signaling that the application should terminate. It relies on SDL_events.h and SDL_GetTicks().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_QuitEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_QuitEvent\n{\n    Uint32 type;        /**< SDL_QUIT */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n} SDL_QuitEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateTexture Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_UpdateTexture function in C. It takes a texture pointer, a rectangle representing the update area (or NULL for the entire texture), a pointer to the pixel data, and the pitch (bytes per row) as parameters. It returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UpdateTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UpdateTexture(SDL_Texture * texture,\n                      const SDL_Rect * rect,\n                      const void *pixels, int pitch);\n```\n\n----------------------------------------\n\nTITLE: Get Connected Mice IDs in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetMice function. It retrieves a list of currently connected mouse instance IDs and returns the number of mice found through the 'count' parameter. The returned array must be freed using SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetMice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_MouseID * SDL_GetMice(int *count);\n```\n\n----------------------------------------\n\nTITLE: Rendering a Texture to the Screen in SDL2 (C)\nDESCRIPTION: This code demonstrates the standard rendering pipeline in SDL2: clearing the renderer, copying the texture to the renderer's target, and presenting the rendered result to the screen. It relies on an SDL_Renderer object and an SDL_Texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nSDL_RenderClear(sdlRenderer);\nSDL_RenderCopy(sdlRenderer, sdlTexture, NULL, NULL);\nSDL_RenderPresent(sdlRenderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetGlobalMouseState Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetGlobalMouseState function in C. This function retrieves the asynchronous mouse button state and desktop-relative cursor position. It takes pointers to floats to store the x and y coordinates and returns an SDL_MouseButtonFlags bitmask representing the current button state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGlobalMouseState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_MouseButtonFlags SDL_GetGlobalMouseState(float *x, float *y);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurface Example Usage\nDESCRIPTION: Illustrates a basic example of using the SDL_BlitSurface function to copy a portion of one surface to another. This snippet assumes that the surfaces (`surface` and `temp_surface`) and the source rectangle (`source_rect`) are already initialized. The destination rectangle is set to NULL, indicating that the blit should occur at the top-left corner of the destination surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitSurface.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *surface;\nSDL_Rect source_rect;\nSDL_Surface *temp_surface;\n\nSDL_BlitSurface(surface, &source_rect, temp_surface, NULL);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Render Texture to Screen\nDESCRIPTION: This code snippet clears the renderer, copies the texture contents to the video framebuffer, and presents the result to the screen. It uses SDL_RenderTexture to draw the texture onto the renderer and SDL_RenderPresent to display the rendered frame. This is used in conjunction with software rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nSDL_RenderClear(sdlRenderer);\nSDL_RenderTexture(sdlRenderer, sdlTexture, NULL, NULL);\nSDL_RenderPresent(sdlRenderer);\n```\n\n----------------------------------------\n\nTITLE: Set Window Title with SDL_SetWindowTitle in C\nDESCRIPTION: Sets the title of a specified SDL window. The function requires a pointer to an SDL_Window object and a constant character pointer representing the new title in UTF-8 format. It returns 'true' on success and 'false' on failure. This function is thread-safe only when called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowTitle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowTitle(SDL_Window *window, const char *title);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Fullscreen State in SDL2 (C)\nDESCRIPTION: Sets the fullscreen state of an SDL window. The `window` parameter specifies the SDL_Window to modify. The `flags` parameter accepts SDL_WINDOW_FULLSCREEN for exclusive fullscreen, SDL_WINDOW_FULLSCREEN_DESKTOP for borderless fullscreen, or 0 for windowed mode. Returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowFullscreen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowFullscreen(SDL_Window * window,\n                            Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: Getting the current system time using SDL_GetCurrentTime in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GetCurrentTime function to get the current system realtime clock in nanoseconds since Jan 1, 1970 UTC. It requires the SDL3 library and the SDL_time.h header file. The function takes a pointer to an SDL_Time struct where the current time will be stored. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetCurrentTime(SDL_Time *ticks);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetHint Usage Example in C\nDESCRIPTION: This code demonstrates how to use SDL_SetHint to set the application name hint before initializing SDL. It includes necessary header files and illustrates the proper initialization and termination of SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetHint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char* argv[])\n{\n    // Each hint describes when it should be set, this one should be set before SDL is initialized.\n    SDL_SetHint(SDL_HINT_APP_NAME, \"My Game 2: The Revenge\");\n\n    SDL_Init(SDL_INIT_VIDEO);\n\n    // ...\n\n    SDL_Quit();\n    return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Secure File Access with SDL_Storage in C\nDESCRIPTION: This code demonstrates the use of the SDL_Storage API to access game data and user saves in a platform-independent manner.  It addresses the pitfalls of the previous example by explicitly specifying storage types (title or user), using appropriate read/write functions, and managing storage device access.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/CategoryStorage.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid ReadGameData(void)\n{\n    extern char** fileNames;\n    extern size_t numFiles;\n\n    SDL_Storage *title = SDL_OpenTitleStorage(NULL, 0);\n    if (title == NULL) {\n        // Something bad happened!\n    }\n    while (!SDL_StorageReady(title)) {\n        SDL_Delay(1);\n    }\n\n    for (size_t i = 0; i < numFiles; i += 1) {\n        void* dst;\n        Uint64 dstLen = 0;\n\n        if (SDL_GetStorageFileSize(title, fileNames[i], &dstLen) && dstLen > 0) {\n            dst = SDL_malloc(dstLen);\n            if (SDL_ReadStorageFile(title, fileNames[i], dst, dstLen)) {\n                // A bunch of stuff happens here\n            } else {\n                // Something bad happened!\n            }\n            SDL_free(dst);\n        } else {\n            // Something bad happened!\n        }\n    }\n\n    SDL_CloseStorage(title);\n}\n\nvoid ReadSave(void)\n{\n    SDL_Storage *user = SDL_OpenUserStorage(\"libsdl\", \"Storage Example\", 0);\n    if (user == NULL) {\n        // Something bad happened!\n    }\n    while (!SDL_StorageReady(user)) {\n        SDL_Delay(1);\n    }\n\n    Uint64 saveLen = 0;\n    if (SDL_GetStorageFileSize(user, \"save0.sav\", &saveLen) && saveLen > 0) {\n        void* dst = SDL_malloc(saveLen);\n        if (SDL_ReadStorageFile(user, \"save0.sav\", dst, saveLen)) {\n            // A bunch of stuff happens here\n        } else {\n            // Something bad happened!\n        }\n        SDL_free(dst);\n    } else {\n        // Something bad happened!\n    }\n\n    SDL_CloseStorage(user);\n}\n\nvoid WriteSave(void)\n{\n    SDL_Storage *user = SDL_OpenUserStorage(\"libsdl\", \"Storage Example\", 0);\n    if (user == NULL) {\n        // Something bad happened!\n    }\n    while (!SDL_StorageReady(user)) {\n        SDL_Delay(1);\n    }\n\n    extern void *saveData; // A bunch of stuff happened here...\n    extern Uint64 saveLen;\n    if (!SDL_WriteStorageFile(user, \"save0.sav\", saveData, saveLen)) {\n        // Something bad happened!\n    }\n\n    SDL_CloseStorage(user);\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyTexture Syntax in C\nDESCRIPTION: Destroys an SDL_Texture, freeing its associated memory. The function takes a pointer to the texture to destroy. Passing a NULL or invalid texture will result in an error. This function must be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyTexture(SDL_Texture *texture);\n```\n\n----------------------------------------\n\nTITLE: Opening a Font File with SDL_ttf in C\nDESCRIPTION: This code snippet demonstrates how to open a font file using the TTF_OpenFont function from the SDL_ttf library. The function takes the file path and point size as input and returns a TTF_Font pointer. The pointer is then used for rendering text. It's important to check for NULL return values and free the font resource using TTF_CloseFont when it is no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_OpenFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFont(const char *file, float ptsize);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetKeyName Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetKeyName function in C. This function takes an SDL_Keycode as input and returns a const char* representing the name of the key. The returned string is UTF-8 encoded.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetKeyName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetKeyName(SDL_Keycode key);\n```\n\n----------------------------------------\n\nTITLE: Opening Haptic Device from Joystick in SDL2 (C)\nDESCRIPTION: Opens a haptic device for use from a given joystick device.  The `joystick` parameter is a pointer to the SDL_Joystick from which the haptic device will be created.  The function returns a pointer to the SDL_Haptic device, or NULL on failure.  The haptic device must be closed separately from the joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticOpenFromJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Haptic* SDL_HapticOpenFromJoystick(SDL_Joystick *\n                                       joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_JOYSTICK_HIDAPI Macro Definition in C\nDESCRIPTION: This snippet defines the SDL_HINT_JOYSTICK_HIDAPI macro, which is a string literal used as a key for setting the hint that controls the use of HIDAPI joystick drivers.  The macro is defined in SDL3/SDL_hints.h and used with SDL_SetHint to configure joystick behavior. It should be set before initializing joysticks and gamepads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI \"SDL_JOYSTICK_HIDAPI\"\n```\n\n----------------------------------------\n\nTITLE: Opening Font from SDL_RWops using TTF_OpenFontRW in C\nDESCRIPTION: Opens a font from an SDL_RWops data stream. The function takes an SDL_RWops pointer `src`, an integer `freesrc` indicating whether to free the RWops after closing the font, and an integer `ptsize` specifying the point size of the font. It returns a pointer to a TTF_Font structure, or NULL on error. After the font is no longer needed, it should be closed using TTF_CloseFont.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_OpenFontRW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_Font * TTF_OpenFontRW(SDL_RWops *src, int freesrc, int ptsize);\n```\n\n----------------------------------------\n\nTITLE: Creating OpenGL Context in C with SDL\nDESCRIPTION: This code demonstrates how to create an OpenGL context using SDL_GL_CreateContext. It first creates an SDL window with the SDL_WINDOW_OPENGL flag. Then, it creates an OpenGL context associated with that window. Finally, it shows basic OpenGL calls and destroys the context when done.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_CreateContext.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Window mode MUST include SDL_WINDOW_OPENGL for use with OpenGL.\nSDL_Window *window = SDL_CreateWindow(\n    \"SDL3/OpenGL Demo\", 640, 480, \n    SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);\n  \n// Create an OpenGL context associated with the window.\nSDL_GLContext glcontext = SDL_GL_CreateContext(window);\n\n// now you can make GL calls.\nglClearColor(0,0,0,1);\nglClear(GL_COLOR_BUFFER_BIT);\nSDL_GL_SwapWindow(window);\n\n// Once finished with OpenGL functions, the SDL_GLContext can be destroyed.\nSDL_GL_DestroyContext(glcontext);  \n```\n\n----------------------------------------\n\nTITLE: Destroy Surface Text Engine (C)\nDESCRIPTION: Destroys a TTF_TextEngine object that was previously created using TTF_CreateSurfaceTextEngine.  It requires the engine to be destroyed to be passed as a parameter and any text created by the engine should be destroyed before calling this function. The function should be called on the same thread that created the engine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_DestroySurfaceTextEngine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroySurfaceTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Relative Mouse Mode in SDL3 (C)\nDESCRIPTION: Enables or disables relative mouse mode for a specified SDL window. When enabled, the cursor is hidden, mouse position is constrained, and SDL reports continuous relative motion. This function requires an SDL_Window pointer and a boolean value indicating whether to enable or disable the mode. Returns true on success, false on failure. Call SDL_GetError() for more details on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowRelativeMouseMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowRelativeMouseMode(SDL_Window *window, bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Get Base Path in SDL\nDESCRIPTION: This C code snippet shows the syntax for the SDL_GetBasePath function, which returns the absolute path to the application's data directory. The function takes no arguments and returns a const char* representing the path in UTF-8 encoding, or NULL on error. The returned path is guaranteed to end with a path separator.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetBasePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetBasePath(void);\n```\n\n----------------------------------------\n\nTITLE: Wait for an SDL Event in C\nDESCRIPTION: Waits indefinitely for the next available event and stores it in the provided SDL_Event structure. The function returns true on success or false if there was an error while waiting. This function should only be called on the main thread and may implicitly call SDL_PumpEvents().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitEvent(SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Mapping for GUID in SDL3 (C)\nDESCRIPTION: Retrieves the gamepad mapping string associated with a given SDL_GUID. The function returns a dynamically allocated string that must be freed using SDL_free() to prevent memory leaks. The function is part of the SDL3 gamepad API and requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadMappingForGUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetGamepadMappingForGUID(SDL_GUID guid);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadPNG_RW Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadPNG_RW function in C. This function loads a PNG image directly from an SDL_RWops stream and returns an SDL_Surface pointer, or NULL on failure. It skips SDL_image's file format detection routines, so it should only be used when you are certain that the input is a PNG image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadPNG_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadPNG_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_RemovePath Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RemovePath function in C. It takes a constant character pointer to a path as input and returns a boolean indicating success or failure. SDL_GetError() can be called for more detailed error information if the function fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RemovePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RemovePath(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Copy File Syntax - SDL_CopyFile - C\nDESCRIPTION: Defines the syntax for the SDL_CopyFile function, which is used to copy a file from an old path to a new path. It takes two const char* parameters, oldpath and newpath, representing the source and destination file paths respectively. The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CopyFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CopyFile(const char *oldpath, const char *newpath);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowFromID Syntax (C)\nDESCRIPTION: This C code snippet shows the syntax for the SDL_GetWindowFromID function, which retrieves a window by its ID. It takes an SDL_WindowID as input and returns a pointer to an SDL_Window. If no window is found with the given ID, it returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowFromID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetWindowFromID(SDL_WindowID id);\n```\n\n----------------------------------------\n\nTITLE: Get Render Target SDL_Renderer in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetRenderTarget function, which retrieves the current render target (SDL_Texture) of the specified SDL_Renderer. It returns NULL if the default render target (the window) is being used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderTarget.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * SDL_GetRenderTarget(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_InvalidParamError Macro Definition in C\nDESCRIPTION: Defines the SDL_InvalidParamError macro, which calls SDL_SetError with a standard error message indicating that a parameter is invalid. The macro takes the name of the invalid parameter as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InvalidParamError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_InvalidParamError(param)    SDL_SetError(\"Parameter '%s' is invalid\", (param))\n```\n\n----------------------------------------\n\nTITLE: SDL_GetGamepadPowerInfo Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetGamepadPowerInfo function in C.  It takes an SDL_Gamepad pointer and an integer pointer as input. It returns an SDL_PowerState enum, representing the current battery state of the gamepad. The percent parameter is optional; if provided, it will be filled with the battery percentage (0-100) or -1 if the battery level cannot be determined.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadPowerInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PowerState SDL_GetGamepadPowerInfo(SDL_Gamepad *gamepad, int *percent);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRenderer Function Signature in C\nDESCRIPTION: Defines the signature of the SDL_CreateRenderer function, which creates a 2D rendering context for a window. It takes a window pointer, a driver index, and flags as input. It returns a pointer to the created renderer or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_CreateRenderer(SDL_Window * window,\n                       int index, Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertSurface Syntax\nDESCRIPTION: The SDL_ConvertSurface function converts an existing SDL_Surface structure to a new surface with the specified pixel format.  It takes the source surface and the desired pixel format as input and returns a pointer to the new surface, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ConvertSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_ConvertSurface(SDL_Surface *surface, SDL_PixelFormat format);\n```\n\n----------------------------------------\n\nTITLE: Get Keyboard State in SDL3 (C)\nDESCRIPTION: Retrieves a snapshot of the current keyboard state. The function returns a pointer to an internal SDL array of boolean values, where true indicates that a key is pressed and false indicates that it is not. The size of the array can be obtained by providing a pointer to an integer, which will be populated with the number of keys. This array is updated by SDL_PumpEvents and should not be freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetKeyboardState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst bool * SDL_GetKeyboardState(int *numkeys);\n```\n\n----------------------------------------\n\nTITLE: Loading Music with Specified Type in SDL_mixer (C)\nDESCRIPTION: This function loads music data of a specific type from an SDL_RWops stream. The `src` parameter specifies the SDL_RWops to read from, `type` defines the audio format, and `freesrc` determines whether to close the SDL_RWops after loading. The function returns a pointer to the newly created `Mix_Music` object or NULL if an error occurs. SDL_mixer reads all data from the RWops during the call regardless of the value of freesrc.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_LoadMUSType_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Music * Mix_LoadMUSType_RW(SDL_RWops *src, Mix_MusicType type, int freesrc);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetThreadID Example in C\nDESCRIPTION: This code demonstrates how to create a thread using SDL_CreateThread, retrieve its ID using SDL_GetThreadID, wait for the thread to finish using SDL_WaitThread, and retrieve its return value. It includes necessary SDL headers and initializes a simple thread function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetThreadID.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\n// Very simple thread - counts 0 to 9 delaying 50ms between increments\nint TestThread(void *ptr)\n{\n    int cnt;\n\n    for (cnt = 0; cnt < 10; ++cnt) {\n        SDL_Log(\"Thread counter: %d\", cnt);\n        SDL_Delay(50);\n    }\n\n    return cnt;\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_Thread   *thread;\n    SDL_ThreadID threadID;\n    int          threadReturnValue;\n\n    SDL_Log(\"Simple SDL_CreateThread test:\");\n\n    /* Simply create a thread */\n    thread = SDL_CreateThread(TestThread, \"TestThread\", (void *)NULL);\n\n    if (!thread) {\n        SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"SDL_CreateThread failed: %s\\n\", SDL_GetError());\n        return -1;\n    }\n\n    /* Retrieve the ID for the newly launched thread */\n    threadID = SDL_GetThreadID(thread);\n\n    /* Wait for the thread to complete and get the return code */\n    SDL_WaitThread(thread, &threadReturnValue);\n    SDL_Log(\"Thread returned value: %d\", threadReturnValue);\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_MapRGB Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_MapRGB function in C. It takes a pixel format and RGB color components as input and returns a pixel value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MapRGB.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_MapRGB(const SDL_PixelFormat * format,\n                  Uint8 r, Uint8 g, Uint8 b);\n```\n\n----------------------------------------\n\nTITLE: Get Relative Mouse State in SDL2\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetRelativeMouseState function in SDL2. It takes pointers to integers as arguments to store the x and y coordinates of the mouse delta, and returns a Uint32 representing the mouse button state. This function requires including SDL_mouse.h and is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRelativeMouseState.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint32 SDL_GetRelativeMouseState(int *x, int *y);\n```\n\n----------------------------------------\n\nTITLE: Creating a condition variable in SDL3 (C)\nDESCRIPTION: This code snippet shows the typical usage of SDL condition variables for thread synchronization. It involves creating a mutex and a condition variable, locking the mutex, waiting on a condition in Thread_A, and signaling the condition in Thread_B. Finally, the mutex and condition variable are destroyed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateCondition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// BEWARE: This code example was migrated from the SDL2 Wiki, by only updating the names.\n\nbool condition = false;\nSDL_Mutex *lock;\nSDL_Condition *cond;\nlock = SDL_CreateMutex();\ncond = SDL_CreateCondition();\n\n\nThread_A:\n    SDL_LockMutex(lock);\n    while (!condition) {\n        SDL_WaitCondition(cond, lock);\n    }\n    SDL_UnlockMutex(lock);\nThread_B:\n    SDL_LockMutex(lock);\n    /* ... */\n    condition = true;\n    /* ... */\n    SDL_SignalCondition(cond);\n    SDL_UnlockMutex(lock);\n\nSDL_DestroyCondition(cond);\nSDL_DestroyMutex(lock);\n```\n\n----------------------------------------\n\nTITLE: SDL_RunOnMainThread Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RunOnMainThread function in C, which allows executing a callback on the main thread during event processing. It takes a callback function, user data, and a boolean indicating whether to wait for completion as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RunOnMainThread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RunOnMainThread(SDL_MainThreadCallback callback, void *userdata, bool wait_complete);\n```\n\n----------------------------------------\n\nTITLE: Setting the Active Cursor in SDL2\nDESCRIPTION: Sets the currently active cursor to the provided SDL_Cursor.  Takes an SDL_Cursor pointer as input.  Passing NULL can force a cursor redraw.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetCursor(SDL_Cursor * cursor);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_DRIVER Macro in C\nDESCRIPTION: This code defines the `SDL_HINT_AUDIO_DRIVER` macro, which is a string constant used to set the audio driver hint in SDL. This hint is used to specify a preferred audio backend. It should be set before initializing SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DRIVER \"SDL_AUDIO_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Get Current Render Output Size in C\nDESCRIPTION: Retrieves the current output size in pixels of a specified rendering context. The function takes an SDL_Renderer pointer and two integer pointers to store the width and height.  It returns true on success and false on failure. This function is thread-safe and has been available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentRenderOutputSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetCurrentRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Setting a Window Hit-Test Callback SDL3 C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_SetWindowHitTest function to set a callback function that determines if a window region has special properties. It takes the SDL_Window, SDL_HitTest callback, and a void pointer as arguments. The callback allows applications to customize how the OS handles mouse input in certain regions of the window, like making any part of a borderless window draggable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowHitTest.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowHitTest(SDL_Window *window, SDL_HitTest callback, void *callback_data);\n```\n\n----------------------------------------\n\nTITLE: Queue Audio Data with SDL_QueueAudio in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_QueueAudio function, which is used to queue audio data to a specified audio device. It takes the device ID, a pointer to the audio data, and the length of the data in bytes as input. The function returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_QueueAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_QueueAudio(SDL_AudioDeviceID dev, const void *data, Uint32 len);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Mapping for ID in SDL\nDESCRIPTION: This C code snippet shows the syntax for SDL_GetGamepadMappingForID, a function in SDL3 used to retrieve the mapping string for a gamepad based on its instance ID.  The returned string must be freed with SDL_free when no longer needed. It takes an SDL_JoystickID as input, which represents the instance ID of the joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadMappingForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetGamepadMappingForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Current Display Mode in C\nDESCRIPTION: Retrieves information about the current display mode for a given display ID using SDL_GetCurrentDisplayMode. The function returns a pointer to an SDL_DisplayMode struct representing the current display settings, or NULL on failure. The displayID parameter specifies the instance ID of the display to query.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentDisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_DisplayMode * SDL_GetCurrentDisplayMode(SDL_DisplayID displayID);\n```\n\n----------------------------------------\n\nTITLE: Gamepad Mapping Example (C)\nDESCRIPTION: Provides an example of a valid gamepad mapping string for use with SDL_AddGamepadMapping. This string maps buttons, hats, and axes to joystick inputs, including standard gamepad controls and triggers. The GUID, name, and mappings are comma separated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddGamepadMapping.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n\"341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7\"\n```\n\n----------------------------------------\n\nTITLE: SDL_SCANCODE_TO_KEYCODE Macro\nDESCRIPTION: Defines a macro `SDL_SCANCODE_TO_KEYCODE` that converts a scancode to a keycode by applying the `SDLK_SCANCODE_MASK`. This macro is essential for translating low-level scancodes into usable keycode values that can be interpreted by the application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Keycode.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SCANCODE_TO_KEYCODE(X)  (X | SDLK_SCANCODE_MASK)\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitEvent Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_WaitEvent function. It takes a pointer to an SDL_Event structure as a parameter, which will be filled with the next event from the queue. The function returns 1 on success and 0 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WaitEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_WaitEvent(SDL_Event * event);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowResizable Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetWindowResizable function in C. This function sets the user-resizable state of a specified SDL_Window. The first parameter is a pointer to the SDL_Window to modify, and the second is a boolean indicating whether to allow resizing (true) or disallow it (false).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowResizable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowResizable(SDL_Window *window, bool resizable);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Clear Screen and Present\nDESCRIPTION: This code snippet shows how to clear the screen to a specific color and present the rendered frame to the display. It sets the render draw color, clears the renderer, and then presents the result to the screen.  This replaces SDL_UpdateRect() or SDL_Flip() in SDL 1.2\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetRenderDrawColor(sdlRenderer, 0, 0, 0, 255);\nSDL_RenderClear(sdlRenderer);\nSDL_RenderPresent(sdlRenderer);\n```\n\n----------------------------------------\n\nTITLE: Adding User to Input Group\nDESCRIPTION: Adds the current user to the 'input' group, granting access to input devices like mouse and keyboard. This is required for SDL2 to receive input events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -aG input `whoami`\n```\n\n----------------------------------------\n\nTITLE: Create OpenGL context using SDL_GL_CreateContext in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GL_CreateContext function. It takes an SDL_Window pointer as input, representing the window to associate with the OpenGL context. The function returns an SDL_GLContext, which is a void* alias representing the created OpenGL context, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_CreateContext.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_GLContext SDL_GL_CreateContext(SDL_Window *\n                                   window);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Video Driver Name in C\nDESCRIPTION: This snippet shows the syntax of the SDL_GetCurrentVideoDriver function, which retrieves the name of the currently initialized video driver. It requires the SDL3/SDL_video.h header file. The function takes no arguments and returns a const char* representing the name of the driver or NULL if no driver is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentVideoDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetCurrentVideoDriver(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTextureColorMod Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetTextureColorMod function. This function sets the color modulation for a specified texture, influencing how it's rendered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetTextureColorMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetTextureColorMod(SDL_Texture * texture,\n                           Uint8 r, Uint8 g, Uint8 b);\n```\n\n----------------------------------------\n\nTITLE: Set Clipboard Text in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetClipboardText function. It takes a const char pointer as input, representing the UTF-8 text to be placed in the clipboard. The function returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetClipboardText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetClipboardText(const char *text);\n```\n\n----------------------------------------\n\nTITLE: Creating Vulkan Surface with SDL\nDESCRIPTION: This C code snippet demonstrates the syntax for the SDL_Vulkan_CreateSurface function. It shows how to pass the SDL_Window, VkInstance, VkAllocationCallbacks, and VkSurfaceKHR parameters to create a Vulkan surface for the specified window. The window must be created with the SDL_WINDOW_VULKAN flag.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_CreateSurface.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_Vulkan_CreateSurface(SDL_Window *window,\n                                  VkInstance instance,\n                                  const struct VkAllocationCallbacks *allocator,\n                                  VkSurfaceKHR *surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_SaveBMP Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_SaveBMP function, which saves a given SDL_Surface to a specified file path as a BMP image. It takes a pointer to the SDL_Surface and a const char pointer to the file path as input. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SaveBMP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SaveBMP(SDL_Surface *surface, const char *file);\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Blend Mode in SDL2 (C)\nDESCRIPTION: This code snippet demonstrates how to set the blend mode for a texture in SDL2 using SDL_SetTextureBlendMode. It takes an SDL_Texture pointer and an SDL_BlendMode as input. The function returns 0 on success or a negative error code on failure. An unsupported blend mode may result in the closest supported mode being chosen and a return value of -1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetTextureBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetTextureBlendMode(SDL_Texture * texture,\n                            SDL_BlendMode blendMode);\n```\n\n----------------------------------------\n\nTITLE: Get Base Path in C\nDESCRIPTION: Retrieves the absolute path to the application's base directory using SDL_GetBasePath. The returned path is UTF-8 encoded and ends with a path separator. The caller owns the returned pointer and must free it using SDL_free.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetBasePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar* SDL_GetBasePath(void);\n```\n\n----------------------------------------\n\nTITLE: Setting a Post-Mix Callback - C\nDESCRIPTION: Sets a function to be called after all mixing is performed in SDL_mixer. The callback `mix_func` receives the mixed audio data and can modify it. `arg` is a user-defined pointer passed to the callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetPostMix.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_SetPostMix(Mix_MixCallback mix_func, void *arg);\n```\n\n----------------------------------------\n\nTITLE: SDL_Quit Function Definition in C\nDESCRIPTION: This snippet shows the function definition for SDL_Quit in C. SDL_Quit cleans up all initialized SDL subsystems. It takes no arguments and returns nothing. It's crucial for proper application shutdown within the SDL3 framework.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRendererWithProperties Syntax in C\nDESCRIPTION: The `SDL_CreateRendererWithProperties` function creates a 2D rendering context for a window, allowing customization via properties. It accepts an `SDL_PropertiesID` that encapsulates the desired rendering configurations. It returns a pointer to the newly created `SDL_Renderer` or NULL upon failure, with `SDL_GetError` providing more information in case of errors.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateRendererWithProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_CreateRendererWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_HintCallback Definition C\nDESCRIPTION: Defines the SDL_HintCallback function pointer type, which is used to handle notifications about changes to hint values in SDL. The callback function receives a userdata pointer, the name of the hint, the old value, and the new value. This callback is invoked when a hint's value is initially set or when it changes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HintCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void(SDLCALL *SDL_HintCallback)(void *userdata, const char *name, const char *oldValue, const char *newValue);\n```\n\n----------------------------------------\n\nTITLE: SDL_Surface Structure Definition in C\nDESCRIPTION: This code snippet defines the `SDL_Surface` structure in C.  It includes fields for flags, pixel format, width, height, pitch, pixel data, user data, locking information, blit map, clipping rectangle, blit mapping, and reference count.  Most fields are read-only except for `pixels` and `userdata`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Surface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Surface\n{\n    Uint32 flags;               /**< Read-only */\n    SDL_PixelFormat *format;    /**< Read-only */\n    int w, h;                   /**< Read-only */\n    int pitch;                  /**< Read-only */\n    void *pixels;               /**< Read-write */\n\n    /** Application data associated with the surface */\n    void *userdata;             /**< Read-write */\n\n    /** information needed for surfaces requiring locks */\n    int locked;                 /**< Read-only */\n\n    /** list of BlitMap that hold a reference to this surface */\n    void *list_blitmap;         /**< Private */\n\n    /** clipping information */\n    SDL_Rect clip_rect;         /**< Read-only */\n\n    /** info for fast blit mapping to other surfaces */\n    SDL_BlitMap *map;           /**< Private */\n\n    /** Reference count -- used when freeing surface */\n    int refcount;               /**< Read-mostly */\n} SDL_Surface;\n```\n\n----------------------------------------\n\nTITLE: Using SDL_OUT_CAP in a C Function Signature\nDESCRIPTION: Illustrates the usage of the SDL_OUT_CAP macro within a function signature to specify the size of an output buffer. This helps static analysis tools verify that the function does not write beyond the allocated buffer size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OUT_CAP.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nchar *wcscpy(SDL_OUT_CAP(bufsize) wchar_t *dst, const wchar_t *src, size_t bufsize);\n```\n\n----------------------------------------\n\nTITLE: IMG_Load_RW Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_Load_RW function from the SDL_image library. This function loads an image from an SDL_RWops data source into an SDL_Surface. It takes an SDL_RWops pointer and an integer to indicate whether to free the RWops after loading.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_Load_RW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * IMG_Load_RW(SDL_RWops *src, int freesrc);\n```\n\n----------------------------------------\n\nTITLE: SDL_SaveBMP_IO Syntax in C\nDESCRIPTION: Defines the syntax for the `SDL_SaveBMP_IO` function, which saves a SDL_Surface to a seekable SDL_IOStream in BMP format.  It takes a pointer to the surface, a pointer to the destination IO stream, and a boolean indicating whether to close the IO stream after the operation. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SaveBMP_IO.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SaveBMP_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: TTF_OpenFontIO Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_OpenFontIO function, including its parameters and return type. This function loads a font from an SDL_IOStream. It accepts an SDL_IOStream, a boolean to close the stream after use, and a float representing the point size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_OpenFontIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFontIO(SDL_IOStream *src, bool closeio, float ptsize);\n```\n\n----------------------------------------\n\nTITLE: Get Render Driver Info with SDL_GetRenderDriverInfo in C\nDESCRIPTION: Retrieves information about a specific 2D rendering driver for the current display. It requires an index of the driver and a pointer to an SDL_RendererInfo structure to store the information. Returns 0 on success, negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRenderDriverInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetRenderDriverInfo(int index,\n                            SDL_RendererInfo * info);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_image with flags using IMG_Init (C)\nDESCRIPTION: This code initializes the SDL_image library with specified flags, enabling support for various image formats like JPG, PNG, TIF, WEBP, JXL, and AVIF. The function loads necessary dynamic libraries and prepares them for use. The flags parameter is an OR'd combination of IMG_INIT_* constants. The function returns the flags successfully initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_Init(int flags);\n```\n\n----------------------------------------\n\nTITLE: Get Usable Display Bounds using SDL_GetDisplayUsableBounds in C\nDESCRIPTION: This snippet demonstrates how to use the SDL_GetDisplayUsableBounds function in C to retrieve the usable bounds of a specified display. It takes the display index as input and populates an SDL_Rect structure with the usable bounds of the display. Returns 0 on success, negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDisplayUsableBounds.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepads with SDL_GetGamepads in C\nDESCRIPTION: This code snippet shows how to retrieve a list of currently connected gamepads using the SDL_GetGamepads function.  It returns a NULL-terminated array of SDL_JoystickID values. The memory allocated for the array must be freed with SDL_free() after use. The `count` parameter will contain the number of gamepads found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepads.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickID * SDL_GetGamepads(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioSpec Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_AudioSpec structure in C. It specifies various audio parameters such as frequency, format, number of channels, silence value, buffer size (in sample frames and bytes), a callback function, and user data to be passed to the callback. It is used to configure audio playback or capture with SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioSpec.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AudioSpec\n{\n    int freq;                   /**< DSP frequency -- samples per second */\n    SDL_AudioFormat format;     /**< Audio data format */\n    Uint8 channels;             /**< Number of channels: 1 mono, 2 stereo */\n    Uint8 silence;              /**< Audio buffer silence value (calculated) */\n    Uint16 samples;             /**< Audio buffer size in sample FRAMES (total samples divided by channel count) */\n    Uint16 padding;             /**< Necessary for some compile environments */\n    Uint32 size;                /**< Audio buffer size in bytes (calculated) */\n    SDL_AudioCallback callback; /**< Callback that feeds the audio device (NULL to use SDL_QueueAudio()). */\n    void *userdata;             /**< Userdata passed to callback (ignored for NULL callbacks). */\n} SDL_AudioSpec;\n```\n\n----------------------------------------\n\nTITLE: SDL_SetGPUViewport Syntax in C\nDESCRIPTION: Sets the current viewport state on a command buffer.\nRequires an SDL_GPURenderPass and an SDL_GPUViewport as input. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPUViewport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetGPUViewport(\n    SDL_GPURenderPass *render_pass,\n    const SDL_GPUViewport *viewport);\n```\n\n----------------------------------------\n\nTITLE: Opening the Default Audio Device with Mix_OpenAudio (C)\nDESCRIPTION: Opens the default audio device for playback using SDL_mixer's Mix_OpenAudio function. This snippet shows the function signature and its parameters: frequency, format, channels, and chunksize, all of which configure the audio device. The function returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_OpenAudio.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_OpenAudio(int frequency, Uint16 format, int channels, int chunksize);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateSoftwareRenderer Syntax C\nDESCRIPTION: Shows the syntax of the SDL_CreateSoftwareRenderer function in C. This function creates a 2D software rendering context for a given SDL_Surface. It takes a pointer to an SDL_Surface as input and returns a pointer to an SDL_Renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateSoftwareRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_CreateSoftwareRenderer(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetHintBoolean Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetHintBoolean function, which is used to get the boolean value of a specified hint. It takes the hint name and a default boolean value as input. The function returns a boolean representing the value of the hint or the default value if the hint is not set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHintBoolean.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetHintBoolean(const char *name, bool default_value);\n```\n\n----------------------------------------\n\nTITLE: Calculating Audio Duration in Milliseconds in C\nDESCRIPTION: This code snippet demonstrates how to calculate the duration of audio in milliseconds, given the number of frames and the audio frequency. It converts the number of frames to milliseconds using the provided equation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioDeviceFormat.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nms = (int) ((((Sint64) frames) * 1000) / spec.freq);\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseWheelEvent Structure Definition in C\nDESCRIPTION: Defines the SDL_MouseWheelEvent structure used for handling mouse wheel events in SDL3. It includes fields for event type, timestamp, window ID, mouse ID, scroll amounts (x and y), scroll direction, and mouse coordinates relative to the window.  The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseWheelEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MouseWheelEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_MOUSE_WHEEL */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The window with mouse focus, if any */\n    SDL_MouseID which;  /**< The mouse instance id in relative mode or 0 */\n    float x;            /**< The amount scrolled horizontally, positive to the right and negative to the left */\n    float y;            /**< The amount scrolled vertically, positive away from the user and negative toward the user */\n    SDL_MouseWheelDirection direction; /**< Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back */\n    float mouse_x;      /**< X coordinate, relative to window */\n    float mouse_y;      /**< Y coordinate, relative to window */\n} SDL_MouseWheelEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAudioDeviceGain Syntax\nDESCRIPTION: Retrieves the gain of an audio device. Accepts an SDL_AudioDeviceID as input and returns a float representing the gain. Returns -1.0f on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioDeviceGain.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetAudioDeviceGain(SDL_AudioDeviceID devid);\n```\n\n----------------------------------------\n\nTITLE: Pushing User Event in C\nDESCRIPTION: Shows how to create and push a custom user event onto the SDL event queue.  Before pushing the event, the structure must be initialized to keep memory checkers happy. SDL_zero is used for this.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Event.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nSDL_Event user_event;\nSDL_zero(user_event);  /* SDL will copy this entire struct! Initialize to keep memory checkers happy. */\nuser_event.type = SDL_EVENT_USER;\nuser_event.user.code = 2;\nuser_event.user.data1 = NULL;\nuser_event.user.data2 = NULL;\nSDL_PushEvent(&user_event);\n```\n\n----------------------------------------\n\nTITLE: Get Texture Scale Mode in SDL3 (C)\nDESCRIPTION: Retrieves the scale mode currently applied to a specified SDL_Texture. The function takes a pointer to the texture and a pointer to an SDL_ScaleMode variable, which it will populate with the current scale mode. Returns true on success, false on failure. Requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextureScaleMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode *scaleMode);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateDirectory Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateDirectory function in C. The function takes a const char * path as input, which represents the path of the directory to create. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateDirectory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CreateDirectory(const char *path);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerRumble Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GameControllerRumble function. It takes a pointer to an SDL_GameController, intensity values for low and high frequency rumble motors, and a duration in milliseconds. The function returns 0 on success or -1 if rumble is not supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerRumble.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerRumble(SDL_GameController *gamecontroller, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);\n```\n\n----------------------------------------\n\nTITLE: Set Gamepad Sensor Enabled in SDL3\nDESCRIPTION: This code snippet shows the syntax for the `SDL_SetGamepadSensorEnabled` function in SDL3. It takes a gamepad pointer, a sensor type, and a boolean value indicating whether to enable or disable the sensor. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGamepadSensorEnabled.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetGamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type, bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Outline in SDL_ttf (C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_SetFontOutline function, which sets the outline thickness of a font in SDL_ttf. It takes a TTF_Font pointer and an integer representing the outline thickness as input. A positive outline value enables the outline, while 0 disables it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontOutline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontOutline(TTF_Font *font, int outline);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV_IO Function Definition (C)\nDESCRIPTION: Defines the signature of the SDL_LoadWAV_IO function, which loads audio data from a WAVE file via an SDL_IOStream. It takes an SDL_IOStream, a closeio boolean, pointers to an SDL_AudioSpec, Uint8, and Uint32 as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadWAV_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_LoadWAV_IO(SDL_IOStream *src, bool closeio, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Camera Format with SDL_GetCameraFormat in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GetCameraFormat function to retrieve the image format of an opened camera device. It takes an SDL_Camera pointer and an SDL_CameraSpec pointer as input, and populates the SDL_CameraSpec with the camera's format. The function returns true on success and false on failure. It is safe to call this function from any thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameraFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetCameraFormat(SDL_Camera *camera, SDL_CameraSpec *spec);\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Priority in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax for setting the current thread's priority using SDL_SetCurrentThreadPriority in SDL3. It takes an SDL_ThreadPriority enum value as input and returns a boolean indicating success or failure. Platform limitations may prevent successful priority changes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetCurrentThreadPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetCurrentThreadPriority(SDL_ThreadPriority priority);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateProcessWithProperties Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_CreateProcessWithProperties function in C.  This function creates a new process with specified properties using an SDL_PropertiesID. It returns a pointer to the newly created SDL_Process or NULL if the process creation fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateProcessWithProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Process * SDL_CreateProcessWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: Set/Query Master Volume with Mix_MasterVolume in SDL_mixer (C)\nDESCRIPTION: This code snippet shows how to use the Mix_MasterVolume function to set the master volume for all audio channels in SDL_mixer. It takes an integer `volume` as input, which should be between 0 (silence) and MIX_MAX_VOLUME (full volume, which is 128). A value of -1 can be passed to query the current master volume without changing it. The function returns the previous volume setting.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_MasterVolume.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_MasterVolume(int volume);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Title with SDL_SetWindowTitle in C\nDESCRIPTION: Sets the title of an SDL window using the SDL_SetWindowTitle function. The function takes a pointer to the SDL_Window and a UTF-8 encoded string representing the desired title. The title will be displayed in the window's title bar.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowTitle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowTitle(SDL_Window * window,\n                        const char *title);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GamepadButton enum in C\nDESCRIPTION: This code snippet defines the `SDL_GamepadButton` enumeration, listing all possible gamepad buttons that SDL3 recognizes. It provides a symbolic representation for each button, making gamepad input handling more readable and portable. The enum includes standard buttons like face buttons (South, East, West, North), shoulder buttons, d-pad directions, stick buttons, and additional 'MISC' and 'PADDLE' buttons.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GamepadButton\n{\n    SDL_GAMEPAD_BUTTON_INVALID = -1,\n    SDL_GAMEPAD_BUTTON_SOUTH,           /**< Bottom face button (e.g. Xbox A button) */\n    SDL_GAMEPAD_BUTTON_EAST,            /**< Right face button (e.g. Xbox B button) */\n    SDL_GAMEPAD_BUTTON_WEST,            /**< Left face button (e.g. Xbox X button) */\n    SDL_GAMEPAD_BUTTON_NORTH,           /**< Top face button (e.g. Xbox Y button) */\n    SDL_GAMEPAD_BUTTON_BACK,\n    SDL_GAMEPAD_BUTTON_GUIDE,\n    SDL_GAMEPAD_BUTTON_START,\n    SDL_GAMEPAD_BUTTON_LEFT_STICK,\n    SDL_GAMEPAD_BUTTON_RIGHT_STICK,\n    SDL_GAMEPAD_BUTTON_LEFT_SHOULDER,\n    SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER,\n    SDL_GAMEPAD_BUTTON_DPAD_UP,\n    SDL_GAMEPAD_BUTTON_DPAD_DOWN,\n    SDL_GAMEPAD_BUTTON_DPAD_LEFT,\n    SDL_GAMEPAD_BUTTON_DPAD_RIGHT,\n    SDL_GAMEPAD_BUTTON_MISC1,           /**< Additional button (e.g. Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button, Google Stadia capture button) */\n    SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1,   /**< Upper or primary paddle, under your right hand (e.g. Xbox Elite paddle P1) */\n    SDL_GAMEPAD_BUTTON_LEFT_PADDLE1,    /**< Upper or primary paddle, under your left hand (e.g. Xbox Elite paddle P3) */\n    SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2,   /**< Lower or secondary paddle, under your right hand (e.g. Xbox Elite paddle P2) */\n    SDL_GAMEPAD_BUTTON_LEFT_PADDLE2,    /**< Lower or secondary paddle, under your left hand (e.g. Xbox Elite paddle P4) */\n    SDL_GAMEPAD_BUTTON_TOUCHPAD,        /**< PS4/PS5 touchpad button */\n    SDL_GAMEPAD_BUTTON_MISC2,           /**< Additional button */\n    SDL_GAMEPAD_BUTTON_MISC3,           /**< Additional button */\n    SDL_GAMEPAD_BUTTON_MISC4,           /**< Additional button */\n    SDL_GAMEPAD_BUTTON_MISC5,           /**< Additional button */\n    SDL_GAMEPAD_BUTTON_MISC6,           /**< Additional button */\n    SDL_GAMEPAD_BUTTON_COUNT\n} SDL_GamepadButton;\n```\n\n----------------------------------------\n\nTITLE: Get Window Opacity SDL3 (C)\nDESCRIPTION: Retrieves the opacity of the specified SDL_Window. The opacity is a float value between 0.0f (transparent) and 1.0f (opaque).  Transparency might not be supported on all platforms, in which case the function returns 1.0f.  This function must be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowOpacity.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetWindowOpacity(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTextureAlphaModFloat Syntax\nDESCRIPTION: Sets an additional alpha value multiplied into render copy operations.\nIt takes an SDL_Texture pointer and a float value as input, and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTextureAlphaModFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetTextureAlphaModFloat(SDL_Texture *texture, float alpha);\n```\n\n----------------------------------------\n\nTITLE: Bind Audio Stream in SDL3 (C)\nDESCRIPTION: Binds a single audio stream to an audio device. This function takes an audio device ID and an audio stream pointer as input, and returns true on success, or false on failure. It's a convenience function equivalent to calling SDL_BindAudioStreams(devid, &stream, 1).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderTextureRotated Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_RenderTextureRotated function in C. This function copies a portion of the source texture to the current rendering target, with rotation and flipping, at subpixel precision. It requires a renderer, texture, source and destination rectangles, rotation angle, center point for rotation, and flip mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderTextureRotated.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderTextureRotated(SDL_Renderer *renderer, SDL_Texture *texture,\n                         const SDL_FRect *srcrect, const SDL_FRect *dstrect,\n                         double angle, const SDL_FPoint *center,\n                         SDL_FlipMode flip);\n```\n\n----------------------------------------\n\nTITLE: Showing the Mouse Cursor in SDL3\nDESCRIPTION: The `SDL_ShowCursor` function shows the mouse cursor. It returns `true` on success, `false` on failure. It should be called on the main thread. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ShowCursor(void);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Button State in C\nDESCRIPTION: Retrieves the current state of a button on a specified joystick. The function takes an SDL_Joystick pointer and the button index as input. It returns true if the button is pressed and false otherwise. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetJoystickButton(SDL_Joystick *joystick, int button);\n```\n\n----------------------------------------\n\nTITLE: Creating a Texture from an SDL_Surface in SDL2 (C)\nDESCRIPTION: This snippet demonstrates creating an SDL_Texture directly from an existing SDL_Surface. SDL_CreateTextureFromSurface simplifies the process of converting surface data into a texture for hardware-accelerated rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nsdlTexture = SDL_CreateTextureFromSurface(sdlRenderer, mySurface);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawRectF Syntax in C\nDESCRIPTION: Shows the syntax of the SDL_RenderDrawRectF function. It takes a renderer and a rectangle as input and returns an integer indicating success or failure. The rectangle is drawn with subpixel precision.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawRectF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawRectF(SDL_Renderer * renderer,\n                        const SDL_FRect * rect);\n```\n\n----------------------------------------\n\nTITLE: Get Video Driver Name - C\nDESCRIPTION: Retrieves the name of a video driver at a specified index. The index represents the order in which drivers are normally checked during initialization. Returns a const char* representing the name of the video driver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetVideoDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetVideoDriver(int index);\n```\n\n----------------------------------------\n\nTITLE: Get Display Bounds SDL3 (C)\nDESCRIPTION: Retrieves the bounds of a specified display in SDL3. The function populates an SDL_Rect structure with the display's coordinates and dimensions. It requires an SDL_DisplayID to identify the display and an SDL_Rect pointer to store the results. Returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplayBounds.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetDisplayBounds(SDL_DisplayID displayID, SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: Get Current Audio Driver Name in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetCurrentAudioDriver function, which returns a const char* representing the name of the current audio driver. It takes no arguments and returns NULL if no driver is initialized. The returned string should not be modified or freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetCurrentAudioDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetCurrentAudioDriver(void);\n```\n\n----------------------------------------\n\nTITLE: Getting and Logging SDL Version in C\nDESCRIPTION: This example shows how to retrieve both the compiled and linked SDL versions using SDL_VERSION and SDL_GetVersion.  It then logs the versions to the console using SDL_Log. Dependencies: SDL2 library must be linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_version.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_version compiled;\nSDL_version linked;\n\nSDL_VERSION(&compiled);\nSDL_GetVersion(&linked);\nSDL_Log(\"We compiled against SDL version %u.%u.%u ...\\n\",\n       compiled.major, compiled.minor, compiled.patch);\nSDL_Log(\"But we are linking against SDL version %u.%u.%u.\\n\",\n       linked.major, linked.minor, linked.patch);\n```\n\n----------------------------------------\n\nTITLE: Close Joystick with SDL_CloseJoystick in C\nDESCRIPTION: Closes a joystick device that was previously opened using SDL_OpenJoystick.  Takes a pointer to an SDL_Joystick structure representing the joystick to close. The function releases resources associated with the joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CloseJoystick(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_Log Function Definition\nDESCRIPTION: This code snippet shows the definition of the SDL_Log function in C. It takes a format string and variable arguments, similar to the printf function, to log a message.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Log.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Log(const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Get Window Size using SDL_GetWindowSize (C)\nDESCRIPTION: This code snippet demonstrates how to use SDL_GetWindowSize to retrieve the width and height of a window's client area. It takes an SDL_Window pointer as input, along with pointers to integers where the width and height will be stored. The function returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowSize.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_GetWindowSize(SDL_Window *window, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogMessage Function Definition in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_LogMessage function in SDL3. It takes an integer category, an SDL_LogPriority level, and a format string with optional arguments as parameters. It logs a message with the specified category and priority using a printf-style format string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogMessage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogMessage(int category,\n                SDL_LogPriority priority,\n                const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Examining Assertion Report Example (C)\nDESCRIPTION: Provides a code example demonstrating how to iterate through the assertion report and print details of each failed assertion using SDL_GetAssertionReport. It depends on the SDL_AssertData structure for accessing assertion information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAssertionReport.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_AssertData *item = SDL_GetAssertionReport();\nwhile (item) {\n     printf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\n\",\n          item->condition, item->function, item->filename,\n          item->linenum, item->trigger_count,\n          item->always_ignore ? \"yes\" : \"no\");\n     item = item->next;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL3 Renderer Creation (SDL_CreateRenderer)\nDESCRIPTION: This code snippet creates a rendering context in SDL3, which abstracts the underlying rendering API (Direct3D, OpenGL, Metal, or software surfaces). The renderer is associated with a specific window and handles the drawing operations. The second parameter is typically NULL, allowing SDL to choose the best renderer.  Using `SDL_RENDERER_PRESENTVSYNC` attempts to sync to vblank.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nSDL_Renderer *renderer = SDL_CreateRenderer(sdlWindow, NULL);\n```\n\n----------------------------------------\n\nTITLE: Set Render Clip Rectangle in SDL3 (C)\nDESCRIPTION: Sets the clip rectangle for rendering on the specified target. This function takes an SDL_Renderer pointer and an SDL_Rect pointer as input. The SDL_Rect represents the clip area relative to the viewport. Passing NULL disables clipping. Returns true on success, false on failure. Call SDL_GetError() for more information.  This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderClipRect.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetRenderClipRect(SDL_Renderer *renderer, const SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderFillRectF Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderFillRectF function, which fills a rectangle on the current rendering target with the drawing color at subpixel precision. It takes a renderer and a rectangle as input, returning an integer indicating success or failure. The function is available since SDL 2.0.10.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderFillRectF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderFillRectF(SDL_Renderer * renderer,\n                        const SDL_FRect * rect);\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Device Gain in SDL3 (C)\nDESCRIPTION: This snippet shows the syntax for using SDL_SetAudioDeviceGain to adjust the gain of an audio device. It takes an SDL_AudioDeviceID and a float representing the desired gain as input. A gain of 1.0f represents no change, and 0.0f is silence. The function returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioDeviceGain.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAudioDeviceGain(SDL_AudioDeviceID devid, float gain);\n```\n\n----------------------------------------\n\nTITLE: Multiline Driver Info String Example (C)\nDESCRIPTION: This example shows a multiline string that can be returned by the `SDL_PROP_GPU_DEVICE_DRIVER_INFO_STRING` property. It demonstrates how driver information can be formatted with newlines to provide more detailed information about the driver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGPUDeviceProperties.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nDriver Build: 85da404, I46ff5fc46f, 1606794520\nDate: 11/30/20\nCompiler Version: EV031.31.04.01\nDriver Branch: promo490_3_Google\n```\n\n----------------------------------------\n\nTITLE: SDL_LockTexture Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_LockTexture function. It takes a texture, a rectangle representing the area to lock, a pointer to a void pointer to receive the pixel data, and a pointer to an integer to receive the pitch of the locked pixels.  The texture must be created with SDL_TEXTUREACCESS_STREAMING. The function returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_LockTexture(SDL_Texture *texture,\n                const SDL_Rect *rect,\n                void **pixels, int *pitch);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddGamepadMappingsFromFile Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_AddGamepadMappingsFromFile function in C. It takes a file path as input and returns the number of mappings added or -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddGamepadMappingsFromFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AddGamepadMappingsFromFile(const char *file);\n```\n\n----------------------------------------\n\nTITLE: Set Window Icon in SDL2 (C)\nDESCRIPTION: Sets the icon for a given SDL_Window. Requires an SDL_Window pointer and an SDL_Surface pointer representing the icon data. The function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowIcon.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowIcon(SDL_Window * window,\n                       SDL_Surface * icon);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick GUID in C\nDESCRIPTION: Retrieves the implementation-dependent GUID for the specified open joystick. Requires an open joystick obtained via SDL_JoystickOpen. Returns an SDL_JoystickGUID, or a zero GUID if the index is invalid. Check SDL_GetError for more information on errors.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetGUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickGUID SDL_JoystickGetGUID(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Solid_Wrapped Syntax in C\nDESCRIPTION: Defines the function signature for TTF_RenderText_Solid_Wrapped, which renders word-wrapped UTF-8 text to a new 8-bit surface using the SDL_ttf library. It takes a font, text, text length, color, and wrap length as input and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderText_Solid_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Solid_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, int wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Get Window ID in SDL2 (C)\nDESCRIPTION: Retrieves the numeric ID of an SDL window using SDL_GetWindowID. The function takes a pointer to an SDL_Window object as input and returns a Uint32 representing the window's ID. A return value of 0 indicates failure, in which case SDL_GetError should be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetWindowID(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Blend Mode in C with SDL_SetTextureBlendMode\nDESCRIPTION: Sets the blend mode for a specified texture.  The function takes an SDL_Texture pointer and an SDL_BlendMode enum value as input.  Returns true on success, false on failure. SDL_GetError() provides further information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTextureBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode blendMode);\n```\n\n----------------------------------------\n\nTITLE: Query Joystick Trigger Rumble Support in C\nDESCRIPTION: This code snippet demonstrates how to query if a joystick has rumble support on its triggers using the SDL_JoystickHasRumbleTriggers function. It requires an initialized SDL_Joystick pointer as input and returns SDL_TRUE if trigger rumble is supported, SDL_FALSE otherwise. The function is available since SDL 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickHasRumbleTriggers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_JoystickHasRumbleTriggers(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Set Surface RLE Flag C\nDESCRIPTION: Enables or disables RLE acceleration for a provided SDL_Surface. When enabled, color key and alpha blending blits will be faster. Requires SDL3 and the SDL_surface.h header file. The surface should be locked before accessing pixels directly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetSurfaceRLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetSurfaceRLE(SDL_Surface *surface, bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Hat State in C\nDESCRIPTION: Retrieves the current state of a specified POV hat on a given joystick. It takes a pointer to an SDL_Joystick structure and the index of the hat to query as input. The function returns a Uint8 value representing the current hat position, which can be one of the SDL_HAT_* constants.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickHat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint8 SDL_GetJoystickHat(SDL_Joystick *joystick, int hat);\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting a System Cursor in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to create a system cursor using SDL_CreateSystemCursor with the SDL_SYSTEM_CURSOR_POINTER enum value and then set it as the active cursor using SDL_SetCursor. The created cursor is stored in a SDL_Cursor pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateSystemCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor* cursor;\ncursor = SDL_CreateSystemCursor(SDL_SYSTEM_CURSOR_POINTER);\nSDL_SetCursor(cursor);\n```\n\n----------------------------------------\n\nTITLE: Query remaining storage space with SDL_GetStorageSpaceRemaining in C\nDESCRIPTION: This snippet shows the syntax for the SDL_GetStorageSpaceRemaining function, which queries the remaining space in a storage container. It takes a pointer to an SDL_Storage object as input and returns the amount of remaining space in bytes as a Uint64 value. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetStorageSpaceRemaining.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_GetStorageSpaceRemaining(SDL_Storage *storage);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Instance ID in SDL\nDESCRIPTION: Retrieves the instance ID of a joystick given its device index. The device_index parameter specifies the index of the joystick to query. The function returns an SDL_JoystickID representing the instance ID or -1 if the device_index is invalid. This function can be called before any joysticks are opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetDeviceInstanceID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickID SDL_JoystickGetDeviceInstanceID(int device_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetStringProperty Syntax in C\nDESCRIPTION: Retrieves a string property associated with a given name from the provided SDL_PropertiesID. If the property is not found or is not a string, the function returns the provided default value.  This function requires the SDL3 library. Thread safety can be ensured using SDL_LockProperties and SDL_UnlockProperties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetStringProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetStringProperty(SDL_PropertiesID props, const char *name, const char *default_value);\n```\n\n----------------------------------------\n\nTITLE: Get Window Brightness in C\nDESCRIPTION: Retrieves the brightness (gamma multiplier) of the display associated with the specified SDL_Window. It returns a float value between 0.0 (completely dark) and 1.0 (normal brightness).  The function operates on the display the window's center pixel belongs to, not the window directly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowBrightness.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetWindowBrightness(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderClear Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RenderClear function in C. It takes a pointer to an SDL_Renderer as input and returns a boolean indicating success or failure. The rendering context `renderer` is the target to be cleared.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderClear.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderClear(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Hiding Cursor with SDL_HideCursor in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HideCursor function. It is used to hide the mouse cursor. It returns true on success and false on failure. The function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HideCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HideCursor(void);\n```\n\n----------------------------------------\n\nTITLE: Set Text Wrap Width in SDL_ttf with C\nDESCRIPTION: This code snippet demonstrates how to set the text wrap width for a TTF_Text object using the TTF_SetTextWrapWidth function. The function takes a TTF_Text pointer and an integer representing the desired wrap width in pixels as input. Setting wrap_width to 0 disables wrapping, causing the text to only wrap at newline characters. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextWrapWidth.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextWrapWidth(TTF_Text *text, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: Rendering Shaded Latin1 Text with SDL_ttf in C\nDESCRIPTION: Renders Latin1 text to a new 8-bit surface using the specified font, foreground color, and background color. Requires the SDL_ttf library. Returns a pointer to the new SDL_Surface or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderText_Shaded.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Shaded(TTF_Font *font,\n                const char *text, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertAudioSamples Syntax (C)\nDESCRIPTION: The SDL_ConvertAudioSamples function converts audio data from one format to another. It takes source and destination audio specifications, data, and lengths as input. The converted audio data and its length are returned via pointers. The converted audio data should be freed with SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ConvertAudioSamples.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ConvertAudioSamples(const SDL_AudioSpec *src_spec, const Uint8 *src_data, int src_len, const SDL_AudioSpec *dst_spec, Uint8 **dst_data, int *dst_len);\n```\n\n----------------------------------------\n\nTITLE: Opening a Joystick with SDL_JoystickOpen in C\nDESCRIPTION: Opens a joystick device specified by its index and returns a SDL_Joystick pointer.  The joystick subsystem must be initialized before calling this function. The index refers to the N'th joystick recognized by SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickOpen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Joystick* SDL_JoystickOpen(int device_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_Delay Function Definition in C\nDESCRIPTION: Defines the SDL_Delay function, which pauses the execution of the current thread for a specified number of milliseconds. The function takes a Uint32 value representing the delay in milliseconds as its only parameter. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Delay.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Delay(Uint32 ms);\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Window Size in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_SetWindowMinimumSize function. It takes an SDL_Window pointer and minimum width and height as input. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowMinimumSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowMinimumSize(SDL_Window *window, int min_w, int min_h);\n```\n\n----------------------------------------\n\nTITLE: SDL_Event Union Definition in C\nDESCRIPTION: This code snippet defines the SDL_Event union, which encapsulates all possible event types in SDL. It includes members for common event data, display events, window events, keyboard events, mouse events, joystick events, controller events, audio device events, sensor events, quit events, user events, system window events, touch events, gesture events, and drag-and-drop events. It also contains padding for ABI compatibility.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Event.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef union SDL_Event\n{\n    Uint32 type;                            /**< Event type, shared with all events */\n    SDL_CommonEvent common;                 /**< Common event data */\n    SDL_DisplayEvent display;               /**< Display event data */\n    SDL_WindowEvent window;                 /**< Window event data */\n    SDL_KeyboardEvent key;                  /**< Keyboard event data */\n    SDL_TextEditingEvent edit;              /**< Text editing event data */\n    SDL_TextEditingExtEvent editExt;        /**< Extended text editing event data */\n    SDL_TextInputEvent text;                /**< Text input event data */\n    SDL_MouseMotionEvent motion;            /**< Mouse motion event data */\n    SDL_MouseButtonEvent button;            /**< Mouse button event data */\n    SDL_MouseWheelEvent wheel;              /**< Mouse wheel event data */\n    SDL_JoyAxisEvent jaxis;                 /**< Joystick axis event data */\n    SDL_JoyBallEvent jball;                 /**< Joystick ball event data */\n    SDL_JoyHatEvent jhat;                   /**< Joystick hat event data */\n    SDL_JoyButtonEvent jbutton;             /**< Joystick button event data */\n    SDL_JoyDeviceEvent jdevice;             /**< Joystick device change event data */\n    SDL_JoyBatteryEvent jbattery;           /**< Joystick battery event data */\n    SDL_ControllerAxisEvent caxis;          /**< Game Controller axis event data */\n    SDL_ControllerButtonEvent cbutton;      /**< Game Controller button event data */\n    SDL_ControllerDeviceEvent cdevice;      /**< Game Controller device event data */\n    SDL_ControllerTouchpadEvent ctouchpad;  /**< Game Controller touchpad event data */\n    SDL_ControllerSensorEvent csensor;      /**< Game Controller sensor event data */\n    SDL_AudioDeviceEvent adevice;           /**< Audio device event data */\n    SDL_SensorEvent sensor;                 /**< Sensor event data */\n    SDL_QuitEvent quit;                     /**< Quit request event data */\n    SDL_UserEvent user;                     /**< Custom event data */\n    SDL_SysWMEvent syswm;                   /**< System dependent window event data */\n    SDL_TouchFingerEvent tfinger;           /**< Touch finger event data */\n    SDL_MultiGestureEvent mgesture;         /**< Gesture event data */\n    SDL_DollarGestureEvent dgesture;        /**< Gesture event data */\n    SDL_DropEvent drop;                     /**< Drag and drop event data */\n\n    /* This is necessary for ABI compatibility between Visual C++ and GCC.\n       Visual C++ will respect the push pack pragma and use 52 bytes (size of\n       SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit\n       architectures) for this union, and GCC will use the alignment of the\n       largest datatype within the union, which is 8 bytes on 64-bit\n       architectures.\n\n       So... we'll add padding to force the size to be 56 bytes for both.\n\n       On architectures where pointers are 16 bytes, this needs rounding up to\n       the next multiple of 16, 64, and on architectures where pointers are\n       even larger the size of SDL_UserEvent will dominate as being 3 pointers.\n    */\n    Uint8 padding[sizeof(void *) <= 8 ? 56 : sizeof(void *) == 16 ? 64 : 3 * sizeof(void *)];\n} SDL_Event;\n```\n\n----------------------------------------\n\nTITLE: TTF_OpenFontIO Function\nDESCRIPTION: Creates a TTF_Font object from an SDL_IOStream, specifying the IOStream, a boolean indicating whether to close the stream after use, and the font size. This allows loading fonts from memory or other custom data sources.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFontIO(SDL_IOStream *src, bool closeio, float ptsize);                                                                  // Create a font from an SDL_IOStream, using a specified point size.\n```\n\n----------------------------------------\n\nTITLE: Get Window Size with SDL_GetWindowSize in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GetWindowSize function to retrieve the width and height of an SDL_Window. It requires an initialized SDL_Window pointer as input and populates the provided integer pointers with the window's dimensions in screen coordinates. If either the width or height is not needed, NULL can be passed as the respective parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetWindowSize(SDL_Window * window, int *w,\n                       int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddAtomicInt Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_AddAtomicInt function in C. It takes a pointer to an SDL_AtomicInt and an integer value as input, and returns the previous value of the atomic variable. This function acts as a full memory barrier.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddAtomicInt.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AddAtomicInt(SDL_AtomicInt *a, int v);\n```\n\n----------------------------------------\n\nTITLE: SDL_RumbleGamepad Syntax\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_RumbleGamepad function to start a rumble effect on a gamepad. It takes a gamepad pointer, low and high frequency rumble intensities, and the duration in milliseconds as input. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RumbleGamepad.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RumbleGamepad(SDL_Gamepad *gamepad, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);\n```\n\n----------------------------------------\n\nTITLE: Get Display Name with SDL_GetDisplayName in C\nDESCRIPTION: Retrieves the name of a display in UTF-8 encoding using its index. The function returns a pointer to the display name or NULL if the index is invalid or an error occurs. Requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDisplayName.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst char * SDL_GetDisplayName(int displayIndex);\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowOpenFolderDialog Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ShowOpenFolderDialog function in C. It takes a callback function, user data, a window pointer, a default location string, and a boolean flag for multiple selections as parameters. The function displays a dialog allowing the user to select a folder.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowOpenFolderDialog.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_ShowOpenFolderDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const char *default_location, bool allow_many);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowBordered Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_SetWindowBordered function in C. It takes an SDL_Window pointer and a boolean value as input. The boolean value determines whether the window should have a border (true) or not (false).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowBordered.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowBordered(SDL_Window *window, bool bordered);\n```\n\n----------------------------------------\n\nTITLE: Query game controller button presence using SDL_GameControllerHasButton in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_GameControllerHasButton` function, which determines if a given game controller has a specified button. It requires a pointer to an `SDL_GameController` and an `SDL_GameControllerButton` enum value as input. It returns an `SDL_bool` value indicating the presence of the button.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerHasButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GameControllerHasButton(SDL_GameController *gamecontroller,\n                                     SDL_GameControllerButton button);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetUserFolder Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetUserFolder function, which retrieves the path to a specific user folder. The function takes an SDL_Folder enum as input to specify the type of folder to find, and returns a const char* to the folder path or NULL in case of an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetUserFolder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetUserFolder(SDL_Folder folder);\n```\n\n----------------------------------------\n\nTITLE: Handling Text Input with SDL3 (C)\nDESCRIPTION: This snippet demonstrates how to handle text input using SDL_StartTextInput and SDL_EVENT_TEXT_INPUT. It sets a text input area, starts text input, polls for events, and appends the input text to a buffer. It also handles Escape and Return keys to stop text input. Dependencies include SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/BestKeyboardPractices.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n/* Set the text area and start text input */\nbool text_input_complete = false;\nchar text[1024] = { 0 };\nSDL_Rect area = { textfield.x, textfield.y, textfield.w, textfield.h };\nint cursor = 0;\nSDL_SetTextInputArea(window, &area, cursor);\nSDL_StartTextInput(window);\n\nwhile (!text_input_complete) {\n    SDL_Event e;\n    while (SDL_PollEvent(&e)) {\n        /* user has pressed a key? */\n        if (e.type == SDL_EVENT_KEY_DOWN) {\n            /* the pressed key was Escape or Return? */\n            if (e.key.key == SDLK_ESCAPE || e.key.key == SDLK_RETURN) {\n                SDL_StopTextInput(window);\n                text_input_complete = true;\n            }\n            /* Handle arrow keys, etc. */\n        } else if (e.type == SDL_EVENT_TEXT_INPUT) {\n            SDL_strlcat(text, e.text.text, sizeof(text));\n        }\n    }\n\n    /* Render the text, adjusting cursor to the offset in pixels from the left edge of the textfield */\n    ...\n\n    /* Update the text input area, adjusting the cursor so IME UI shows up at the correct location. */\n    SDL_SetTextInputArea(window, &area, cursor);\n}\n```\n\n----------------------------------------\n\nTITLE: Locking an Audio Stream in C\nDESCRIPTION: Locks the specified audio stream, providing serialized access. This prevents threading conflicts, especially when registering callbacks or protecting shared data during callbacks. It's a wrapper over SDL_LockMutex for an internal lock.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_LockAudioStream(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Get Video Driver Name - C\nDESCRIPTION: Retrieves the name of a video driver based on its index. The index parameter specifies the video driver to retrieve. Returns a const char* representing the name of the video driver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetVideoDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetVideoDriver(int index);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowMouseGrab Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetWindowMouseGrab function in C. It takes a pointer to an SDL_Window as input and returns an SDL_bool indicating whether the mouse is grabbed by the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowMouseGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GetWindowMouseGrab(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Get Path Information using SDL_GetPathInfo in C\nDESCRIPTION: Retrieves information about a file system path using SDL_GetPathInfo. The function takes a path string and a pointer to an SDL_PathInfo struct as input. It populates the struct with details about the path, or returns false if the path doesn't exist or another error occurs. Use SDL_GetError() to get detailed error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPathInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetPathInfo(const char *path, SDL_PathInfo *info);\n```\n\n----------------------------------------\n\nTITLE: Get Display Bounds in C using SDL_GetDisplayBounds\nDESCRIPTION: Retrieves the bounds of a display by its index. The function populates an SDL_Rect structure with the bounds. Returns 0 on success, negative on failure. Requires the SDL2 library to be linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDisplayBounds.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDisplayBounds(int displayIndex, SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetError Usage Example in C\nDESCRIPTION: Illustrates a common use case of SDL_SetError, where it's used in conjunction with an error code to set a descriptive error message. The function is typically returned when an error occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetError.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nif (error_code) {\n    return SDL_SetError(\"This operation has failed: %d\", error_code);\n}\n```\n\n----------------------------------------\n\nTITLE: Start Accepting Unicode Text Input: SDL_StartTextInput in C\nDESCRIPTION: This function starts accepting Unicode text input events in the focused SDL window. It emits SDL_TextInputEvent and SDL_TextEditingEvent events. It should be used in pair with SDL_StopTextInput().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_StartTextInput.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_StartTextInput(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderLine Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderLine function, which draws a line on the current rendering target at subpixel precision. It takes a renderer and the start and end coordinates of the line as floating-point numbers. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderLine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderLine(SDL_Renderer *renderer, float x1, float y1, float x2, float y2);\n```\n\n----------------------------------------\n\nTITLE: Set Channel Finished Callback in SDL_mixer (C)\nDESCRIPTION: Sets a callback function that will be called when a channel has finished playing.  The callback receives the channel number as an argument. A NULL pointer disables the callback. Avoid calling SDL_LockAudio() from within the callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_ChannelFinished.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_ChannelFinished(Mix_ChannelFinishedCallback channel_finished);\n```\n\n----------------------------------------\n\nTITLE: SDL_StorageInterface Structure Definition in C\nDESCRIPTION: Defines the structure SDL_StorageInterface, which serves as a function interface for SDL_Storage. It contains function pointers for various storage operations like closing, checking readiness, enumerating directories, getting file info, reading/writing files, creating directories, removing paths, renaming paths, copying files, and retrieving remaining space. This allows custom implementations of SDL_Storage to be used with SDL_OpenStorage.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StorageInterface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_StorageInterface\n{\n    /* The version of this interface */\n    Uint32 version;\n\n    /* Called when the storage is closed */\n    bool (SDLCALL *close)(void *userdata);\n\n    /* Optional, returns whether the storage is currently ready for access */\n    bool (SDLCALL *ready)(void *userdata);\n\n    /* Enumerate a directory, optional for write-only storage */\n    bool (SDLCALL *enumerate)(void *userdata, const char *path, SDL_EnumerateDirectoryCallback callback, void *callback_userdata);\n\n    /* Get path information, optional for write-only storage */\n    bool (SDLCALL *info)(void *userdata, const char *path, SDL_PathInfo *info);\n\n    /* Read a file from storage, optional for write-only storage */\n    bool (SDLCALL *read_file)(void *userdata, const char *path, void *destination, Uint64 length);\n\n    /* Write a file to storage, optional for read-only storage */\n    bool (SDLCALL *write_file)(void *userdata, const char *path, const void *source, Uint64 length);\n\n    /* Create a directory, optional for read-only storage */\n    bool (SDLCALL *mkdir)(void *userdata, const char *path);\n\n    /* Remove a file or empty directory, optional for read-only storage */\n    bool (SDLCALL *remove)(void *userdata, const char *path);\n\n    /* Rename a path, optional for read-only storage */\n    bool (SDLCALL *rename)(void *userdata, const char *oldpath, const char *newpath);\n\n    /* Copy a file, optional for read-only storage */\n    bool (SDLCALL *copy)(void *userdata, const char *oldpath, const char *newpath);\n\n    /* Get the space remaining, optional for read-only storage */\n    Uint64 (SDLCALL *space_remaining)(void *userdata);\n} SDL_StorageInterface;\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetButton Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerGetButton function, which is part of the SDL2 library and used to retrieve the state of a button on a game controller.\nIt requires a valid SDL_GameController pointer and an SDL_GameControllerButton enum value representing the button to query.\nReturns 1 if the button is pressed, 0 if it is not, or an error code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetButton.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint8 SDL_GameControllerGetButton(SDL_GameController *gamecontroller,\n                                  SDL_GameControllerButton button);\n```\n\n----------------------------------------\n\nTITLE: Get Window Size in Pixels - C\nDESCRIPTION: Retrieves the size of the specified window's client area in pixels. The function takes a window pointer and two integer pointers to store the width and height.  The function returns true on success and false on failure.  It is available since SDL 3.2.0 and should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowSizeInPixels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowSizeInPixels(SDL_Window *window, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Set Event Filter SDL\nDESCRIPTION: Sets up a filter to process SDL events before they change internal state and are posted to the internal event queue. This filter determines whether an event is added to the queue or dropped, allowing for selective filtering of dynamically arriving events. Be cautious when using this, as the filter function may run in a separate thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetEventFilter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetEventFilter(SDL_EventFilter filter,\n                        void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Audio Devices C\nDESCRIPTION: Illustrates the proper way to iterate through available audio devices using SDL_GetNumAudioDevices to avoid performance issues due to repeated hardware detection. The example shows to call SDL_GetNumAudioDevices once and store the result.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumAudioDevices.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n// Don't do this:\nfor (int i = 0; i < SDL_GetNumAudioDevices(0); i++)\n\n// do this instead:\nconst int count = SDL_GetNumAudioDevices(0);\nfor (int i = 0; i < count; ++i) { do_something_here(); }\n```\n\n----------------------------------------\n\nTITLE: Creating a Streaming Texture for Software Rendering in SDL2 (C)\nDESCRIPTION: This code snippet demonstrates how to create an SDL_Texture with SDL_TEXTUREACCESS_STREAMING for software rendering.  The texture is created to match the desired screen resolution (640x480 in this example) and pixel format (ARGB8888). This is suitable for games that draw directly to the screen buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nsdlTexture = SDL_CreateTexture(sdlRenderer,\n                               SDL_PIXELFORMAT_ARGB8888,\n                               SDL_TEXTUREACCESS_STREAMING,\n                               640, 480);\n```\n\n----------------------------------------\n\nTITLE: SDL_AcquireGPUSwapchainTexture Syntax in C\nDESCRIPTION: Acquires a texture to use in presentation. This function retrieves a swapchain texture handle associated with a given window and command buffer. The acquired texture is automatically submitted for presentation when the command buffer is submitted. It is crucial to call this function from the thread that created the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AcquireGPUSwapchainTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_AcquireGPUSwapchainTexture(\n    SDL_GPUCommandBuffer *command_buffer,\n    SDL_Window *window,\n    SDL_GPUTexture **swapchain_texture,\n    Uint32 *swapchain_texture_width,\n    Uint32 *swapchain_texture_height);\n```\n\n----------------------------------------\n\nTITLE: Render Blended Text C\nDESCRIPTION: This function renders UTF-8 text at high quality to a new ARGB surface. It requires a TTF_Font, the text, the length, and the foreground color. It returns an SDL_Surface, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_63\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Blended(TTF_Font *font, const char *text, size_t length, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Getting Compiled and Linked SDL Versions in C\nDESCRIPTION: This example shows how to use SDL_VERSION to get the SDL version used during compilation and SDL_GetVersion to get the SDL version the program is linking against at runtime. This allows for comparison to ensure compatibility.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_VERSION.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_version compiled;\nSDL_version linked;\n\nSDL_VERSION(&compiled);\nSDL_GetVersion(&linked);\nSDL_Log(\"We compiled against SDL version %u.%u.%u ...\\n\",\n       compiled.major, compiled.minor, compiled.patch);\nSDL_Log(\"But we are linking against SDL version %u.%u.%u.\\n\",\n       linked.major, linked.minor, linked.patch);\n```\n\n----------------------------------------\n\nTITLE: SDL_PlayHapticRumble Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_PlayHapticRumble function in C. It takes a pointer to an SDL_Haptic device, a strength value (0-1), and a length in milliseconds as input.  It returns a boolean value indicating success or failure. Requires SDL3/SDL_haptic.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PlayHapticRumble.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PlayHapticRumble(SDL_Haptic *haptic, float strength, Uint32 length);\n```\n\n----------------------------------------\n\nTITLE: SDL_WasInit Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_WasInit function in C. It takes an SDL_InitFlags as input and returns an SDL_InitFlags representing the mask of initialized subsystems. The SDL_InitFlags argument 'flags' can be set to 0 to retrieve the status of all initialized subsystems, or a specific subsystem to query only its status.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WasInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_InitFlags SDL_WasInit(SDL_InitFlags flags);\n```\n\n----------------------------------------\n\nTITLE: Closing an Audio Device using SDL_CloseAudioDevice in C\nDESCRIPTION: This C code snippet demonstrates how to properly close an audio device that was previously opened with SDL_OpenAudioDevice. It includes error handling for device opening, resuming audio playback, delaying execution for a set period, and finally closing the device. It depends on the SDL3 audio library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseAudioDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nextern SDL_AudioSpec want;\nSDL_AudioDeviceID devid = SDL_OpenAudioDevice(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &want);\nif (devid != 0) {\n    SDL_ResumeAudioDevice(devid);\n    SDL_Delay(5000);  // let device play for 5 seconds\n    SDL_CloseAudioDevice(devid);\n}\n```\n\n----------------------------------------\n\nTITLE: Get Audio Device Name in SDL3\nDESCRIPTION: Retrieves the human-readable name of a specific audio device. It takes the device ID as input and returns a pointer to a constant character string representing the name. Returns NULL on failure, and SDL_GetError() can be called for more information. The function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioDeviceName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetAudioDeviceName(SDL_AudioDeviceID devid);\n```\n\n----------------------------------------\n\nTITLE: SDL_malloc Syntax\nDESCRIPTION: Defines the syntax for using the SDL_malloc function in C. This function allocates a block of uninitialized memory with the specified size. The returned pointer should be freed using SDL_free to avoid memory leaks. If the allocation fails, the function returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_malloc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_malloc(size_t size);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateThread Syntax in C\nDESCRIPTION: Shows the syntax of the SDL_CreateThread function, which creates a new thread using a provided thread function, name, and data pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateThread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Thread * SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_LoadWAV function, which loads a WAV file from the specified path. It takes the file path, pointers to an SDL_AudioSpec for format details, a pointer to an audio buffer, and a pointer to the audio buffer's length as parameters. Upon success, it populates the SDL_AudioSpec, allocates the audio buffer, and fills it with the audio data, setting the audio length.  Returns true on success, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadWAV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_LoadWAV(const char *path, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);\n```\n\n----------------------------------------\n\nTITLE: Setting Render Viewport in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetRenderViewport function in C. It defines the function's parameters: a pointer to an SDL_Renderer and a pointer to an SDL_Rect, which specifies the viewport. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderViewport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderViewport(SDL_Renderer *renderer, const SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: Get Connected Sensors in SDL3 with SDL_GetSensors (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetSensors function to retrieve an array of sensor instance IDs. The function takes a pointer to an integer that will be filled with the number of sensors found. The returned array must be freed using SDL_free.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensors.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_SensorID * SDL_GetSensors(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAppMetadataProperty Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetAppMetadataProperty function in C. This function allows setting metadata properties for an SDL application, such as name, version, and identifier.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAppMetadataProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAppMetadataProperty(const char *name, const char *value);\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenAudioDevice Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_OpenAudioDevice function in C. This function opens a specific audio device for playback or recording based on the provided parameters. It returns a device ID on success or 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_OpenAudioDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioDeviceID SDL_OpenAudioDevice(\n                          const char *device,\n                          int iscapture,\n                          const SDL_AudioSpec *desired,\n                          SDL_AudioSpec *obtained,\n                          int allowed_changes);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Vendor ID using SDL_GetJoystickVendor (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetJoystickVendor function in C. It takes an SDL_Joystick pointer as input and returns a Uint16 representing the USB vendor ID of the joystick, or 0 if unavailable. The function is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickVendor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetJoystickVendor(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeInMusic Syntax (C)\nDESCRIPTION: Defines the syntax for the Mix_FadeInMusic function in C, which fades in a new music object. The function takes a Mix_Music pointer, an integer for the number of loops, and an integer representing the fade-in duration in milliseconds. It returns an integer indicating success (0) or error (-1).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadeInMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeInMusic(Mix_Music *music, int loops, int ms);\n```\n\n----------------------------------------\n\nTITLE: Destroying an SDL_AudioStream\nDESCRIPTION: This code snippet shows how to destroy an SDL_AudioStream using SDL_DestroyAudioStream. This function frees up internal state and buffers associated with the stream. After calling this function, the SDL_AudioStream pointer becomes invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/AudioStream.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nSDL_DestroyAudioStream(stream);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowSize Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetWindowSize function in C. It takes an SDL_Window pointer and the desired width and height as input, and returns a boolean indicating success or failure. The window parameter is the window to change. The parameters w and h specifies the width and height of the window, which must be greater than zero.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowSize(SDL_Window *window, int w, int h);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Read Function Signature\nDESCRIPTION: Illustrates the updated signature of SDL_ReadIO in SDL3.  It takes an SDL_IOStream context, a pointer to the buffer, and the total size to read in bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_ReadIO(SDL_IOStream *context, void *ptr, size_t size);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_MakeCurrent Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GL_MakeCurrent function, which associates an OpenGL context with a specified SDL_Window for rendering. It takes an SDL_Window pointer and an SDL_GLContext as input. Returns true on success, false on failure; check SDL_GetError for more info.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_MakeCurrent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GL_MakeCurrent(SDL_Window *window, SDL_GLContext context);\n```\n\n----------------------------------------\n\nTITLE: Set Window Position in SDL (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_SetWindowPosition function to set the position of an SDL window. The function takes a pointer to the SDL_Window, the x coordinate, and the y coordinate as parameters. X and Y can be set to SDL_WINDOWPOS_CENTERED or SDL_WINDOWPOS_UNDEFINED.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowPosition.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_SetWindowPosition(SDL_Window * window,\n                           int x, int y);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_GetAttribute Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GL_GetAttribute function in C, which retrieves the current value of a specified OpenGL attribute from the current context.\nIt takes an SDL_GLAttr enum and an integer pointer as parameters, returning true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_GetAttribute.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GL_GetAttribute(SDL_GLAttr attr, int *value);\n```\n\n----------------------------------------\n\nTITLE: Mix_AllocateChannels Syntax (C)\nDESCRIPTION: Shows the syntax of the Mix_AllocateChannels function in C.  This function allows dynamically changing the number of channels managed by the mixer. The `numchans` parameter specifies the desired number of channels, and the function returns the new number of allocated channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_AllocateChannels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_AllocateChannels(int numchans);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Draw Color (Float) in SDL3\nDESCRIPTION: Retrieves the color used for drawing operations (Rect, Line, and Clear) in a given SDL_Renderer. The function takes a pointer to the renderer and pointers to floats that will be filled with the red, green, blue, and alpha values of the current draw color. Returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderDrawColorFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderDrawColorFloat(SDL_Renderer *renderer, float *r, float *g, float *b, float *a);\n```\n\n----------------------------------------\n\nTITLE: SDL_PauseAudio Equivalent Call\nDESCRIPTION: Shows the equivalent SDL_PauseAudioDevice call. SDL_PauseAudio(pause_on) is equivalent to calling SDL_PauseAudioDevice(1, pause_on). This snippet highlights the relationship between the legacy function and its modern counterpart.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PauseAudio.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_PauseAudioDevice(1, pause_on);\n```\n\n----------------------------------------\n\nTITLE: Opening Audio Device - SDL_mixer (C)\nDESCRIPTION: Opens a specific audio device with the specified frequency, format, channels, chunk size, device name, and allowed changes. This function initializes SDL's audio subsystem if it hasn't been already. Returns 0 on success, -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_OpenAudioDevice.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_OpenAudioDevice(int frequency, Uint16 format, int channels, int chunksize, const char* device, int allowed_changes);\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Alpha Mod with SDL_SetTextureAlphaMod in C\nDESCRIPTION: Sets an additional alpha value to be multiplied into render copy operations for the specified texture. The texture's alpha value will be modulated during rendering based on the provided alpha value. Returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetTextureAlphaMod.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_SetTextureAlphaMod(SDL_Texture * texture,\n                           Uint8 alpha);\n```\n\n----------------------------------------\n\nTITLE: Get Display for Window Example (SDL3, C)\nDESCRIPTION: This code demonstrates how to use SDL_GetDisplayForWindow to retrieve the display ID associated with a window. It initializes SDL, creates a window, retrieves the display ID, and logs the display name.  Dependencies include SDL3/SDL_log.h, SDL3/SDL_main.h, and SDL3/SDL_video.h. Input is the window handle. Output is a log message indicating the display the window was created on.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplayForWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Example program\n// Use SDL3 to log which display a window was created on\n\n#include <SDL3/SDL_log.h>\n#include <SDL3/SDL_main.h>\n#include <SDL3/SDL_video.h>\n\nint\nmain(int argc, char** argv)\n{\n  if (!SDL_Init(SDL_INIT_VIDEO)) {\n    SDL_Log(\"Unable to initialize SDL: %s\", SDL_GetError());\n    return 0;\n  }\n\n  SDL_Window* window = SDL_CreateWindow(\"My Window\", 640, 480, 0);\n  if(window == NULL) {\n    SDL_Log(\"Unable to create window: %s\", SDL_GetError());\n    return 0;\n  }\n\n  SDL_DisplayID display_id = SDL_GetDisplayForWindow(window);\n  SDL_Log(\"Window created on display '%s'\", SDL_GetDisplayName(display_id));\n\n  SDL_DestroyWindow(window);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Mix_LoadWAV Syntax in C\nDESCRIPTION: This code snippet shows the function signature for Mix_LoadWAV, which loads an audio file into a Mix_Chunk. It takes a file path (const char*) as input and returns a pointer to a Mix_Chunk, or NULL on failure. The returned Mix_Chunk should be freed with Mix_FreeChunk when no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_LoadWAV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Chunk * Mix_LoadWAV(const char *file);\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Hint with Normal Priority in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_SetHint function to set a hint with normal priority. It takes the hint name and its value as parameters and returns a boolean value indicating whether the hint was set successfully. This hint can be overridden by existing override hints or environment variables.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetHint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_SetHint(const char *name,\n                     const char *value);\n```\n\n----------------------------------------\n\nTITLE: Get User Preference Path using SDL_GetPrefPath in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetPrefPath, which retrieves the path where user-specific application files can be written. It takes the organization and application names as input and returns a UTF-8 string of the user directory in a platform-dependent notation. The caller is responsible for freeing the returned pointer using SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPrefPath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar* SDL_GetPrefPath(const char *org, const char *app);\n```\n\n----------------------------------------\n\nTITLE: SDL_bsearch Example Usage in C\nDESCRIPTION: Demonstrates how to use SDL_bsearch to search for an element in a sorted array of structs using a custom comparison function. It defines a struct `data`, a comparison function `compare`, and an array `values`, and then uses `SDL_bsearch` to find an element in `values`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_bsearch.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *a, const void *b)\n{\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->n < B->n) {\n        return -1;\n    } else if (B->n < A->n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 1, \"first\" }, { 2, \"second\" }, { 3, \"third\" }\n};\ndata key = { 2, NULL };\n\ndata *result = SDL_bsearch(&key, values, SDL_arraysize(values), sizeof(values[0]), compare);\n```\n\n----------------------------------------\n\nTITLE: Setting Surface Blend Mode (C++)\nDESCRIPTION: Shows the default blend mode setup for surfaces with an alpha mask using SDL_SetSurfaceBlendMode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateRGBSurface.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nSDL_SetSurfaceBlendMode(surface, SDL_BLENDMODE_BLEND)\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_GetProcAddress Syntax (C)\nDESCRIPTION: The syntax for the SDL_GL_GetProcAddress function in C. This function takes a string representing the name of an OpenGL function as input and returns a pointer to that function. The returned pointer needs to be cast to the correct function signature before use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_GetProcAddress.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_FunctionPointer SDL_GL_GetProcAddress(const char *proc);\n```\n\n----------------------------------------\n\nTITLE: Creating a GPU Device with Properties in SDL3\nDESCRIPTION: This code snippet demonstrates the syntax for creating a GPU device using SDL_CreateGPUDeviceWithProperties in SDL3. It takes an SDL_PropertiesID as input, which specifies the properties to be used for creating the GPU context. The function returns a pointer to the created SDL_GPUDevice or NULL on failure. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUDeviceWithProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUDevice * SDL_CreateGPUDeviceWithProperties(\n    SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Postmix Callback in SDL3 (C)\nDESCRIPTION: Sets a callback function that is invoked before audio data is sent to the audio device. The callback allows for modification of the final audio mix. The function takes the audio device ID, the callback function pointer, and user data as parameters. Returns true on success, false on failure. The callback receives audio data in float format, and can be used for visualization or effects. Setting a NULL callback disables a previously set callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioPostmixCallback.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetAudioPostmixCallback(SDL_AudioDeviceID devid, SDL_AudioPostmixCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL 2.0 Fullscreen Desktop Window Creation\nDESCRIPTION: This code snippet demonstrates creating a fullscreen desktop window in SDL 2.0. It utilizes `SDL_WINDOW_FULLSCREEN_DESKTOP` to fill the entire screen without changing the resolution.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nSDL_Window *sdlWindow = SDL_CreateWindow(title,\n                             SDL_WINDOWPOS_UNDEFINED,\n                             SDL_WINDOWPOS_UNDEFINED,\n                             0, 0,\n                             SDL_WINDOW_FULLSCREEN_DESKTOP);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetErrorMsg Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetErrorMsg function. This function copies the last error message that was set for the current thread into a provided buffer. The function takes a character pointer to the buffer and the maximum length of the buffer as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetErrorMsg.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetErrorMsg(char *errstr, int maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowAspectRatio Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetWindowAspectRatio function in C. This function requests that the aspect ratio of a window's client area be set, taking a window pointer, a minimum aspect ratio, and a maximum aspect ratio as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowAspectRatio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowAspectRatio(SDL_Window *window, float min_aspect, float max_aspect);\n```\n\n----------------------------------------\n\nTITLE: SDL_IOFromFile Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_IOFromFile function in C. It takes a filename (UTF-8 encoded) and a mode string as input, and returns a pointer to an SDL_IOStream structure. If the function fails, it returns NULL; SDL_GetError() can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOFromFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStream * SDL_IOFromFile(const char *file, const char *mode);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PixelType Enum in C\nDESCRIPTION: This C code defines the SDL_PixelType enumeration, which specifies different pixel types used in the SDL3 library. It includes various types like indexed, packed, and array-based pixel formats. This enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PixelType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PixelType\n{\n    SDL_PIXELTYPE_UNKNOWN,\n    SDL_PIXELTYPE_INDEX1,\n    SDL_PIXELTYPE_INDEX4,\n    SDL_PIXELTYPE_INDEX8,\n    SDL_PIXELTYPE_PACKED8,\n    SDL_PIXELTYPE_PACKED16,\n    SDL_PIXELTYPE_PACKED32,\n    SDL_PIXELTYPE_ARRAYU8,\n    SDL_PIXELTYPE_ARRAYU16,\n    SDL_PIXELTYPE_ARRAYU32,\n    SDL_PIXELTYPE_ARRAYF16,\n    SDL_PIXELTYPE_ARRAYF32,\n    /* appended at the end for compatibility with sdl2-compat:  */\n    SDL_PIXELTYPE_INDEX2\n} SDL_PixelType;\n```\n\n----------------------------------------\n\nTITLE: Mix_Init Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_Init function in C. It takes an integer representing flags for initializing specific audio formats and returns an integer representing the flags that were successfully initialized.  The flags are OR'd together from the MIX_InitFlags enumeration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Init(int flags);\n```\n\n----------------------------------------\n\nTITLE: Opening User Storage in SDL3 (C)\nDESCRIPTION: Opens a container for a user's unique read/write filesystem using SDL_OpenUserStorage.  This function takes the organization name, application name, and an optional properties ID as input. It returns a pointer to the opened storage container or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenUserStorage.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Storage * SDL_OpenUserStorage(const char *org, const char *app, SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL2 and Creating a Window C++\nDESCRIPTION: This code snippet initializes the SDL2 library, creates a window, and a renderer. It then destroys the renderer and the window before quitting SDL. The window is created with a specified width and height.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/visualc.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n    #include \"SDL.h\"\n\n    int main( int argc, char* argv[] )\n    {\n        const int WIDTH = 640;\n        const int HEIGHT = 480;\n        SDL_Window* window = NULL;\n        SDL_Renderer* renderer = NULL;\n\n        SDL_Init(SDL_INIT_VIDEO);\n        window = SDL_CreateWindow(\"SDL2 Test\", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);\n        renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);\n\n        SDL_DestroyRenderer(renderer);\n        SDL_DestroyWindow(window);\n        SDL_Quit();\n        return 0;\n    }\n \n```\n\n----------------------------------------\n\nTITLE: SDL_SetAudioStreamPutCallback Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetAudioStreamPutCallback function, which sets a callback that runs when data is added to an audio stream. The function takes an SDL_AudioStream pointer, an SDL_AudioStreamCallback function pointer, and a void pointer as userdata. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioStreamPutCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAudioStreamPutCallback(SDL_AudioStream *stream, SDL_AudioStreamCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Color Structure in C\nDESCRIPTION: This code snippet defines the SDL_Color structure, containing Uint8 members for red, green, blue, and alpha components. It is used to represent colors within the SDL library. The structure members are `r` for red, `g` for green, `b` for blue, and `a` for alpha.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Color.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Color\n{\n    Uint8 r;\n    Uint8 g;\n    Uint8 b;\n    Uint8 a;\n} SDL_Color;\n```\n\n----------------------------------------\n\nTITLE: SDL_Log Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_Log function in C, which is used to log messages using a printf-style format string. The function takes a format string `fmt` and a variable number of arguments based on the format specifiers in `fmt`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Log.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Log(const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDL_clamp Macro Definition in C\nDESCRIPTION: Defines the SDL_clamp macro, which clamps a value 'x' between 'a' and 'b'. It checks if 'x' is less than 'a' and returns 'a' if true. Otherwise, it checks if 'x' is greater than 'b' and returns 'b' if true. If neither condition is met, it returns 'x'. This macro is designed for use with any comparable type but double-evaluates parameters, so it should not be used with side effects. Requires SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_clamp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_clamp(x, a, b) (((x) < (a)) ? (a) : (((x) > (b)) ? (b) : (x)))\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderCopyF Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_RenderCopyF function. It takes a renderer, texture, source rectangle, and destination rectangle as input, and returns an integer indicating success or failure. The function copies a portion of the texture to the rendering target at subpixel precision. Requires SDL2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderCopyF.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_RenderCopyF(SDL_Renderer * renderer,\n                    SDL_Texture * texture,\n                    const SDL_Rect * srcrect,\n                    const SDL_FRect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: Get Camera Properties in SDL3 (C)\nDESCRIPTION: Retrieves the properties associated with an opened camera using SDL_GetCameraProperties. Requires an SDL_Camera pointer obtained from SDL_OpenCamera(). Returns an SDL_PropertiesID on success or 0 on failure. Call SDL_GetError() for more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameraProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetCameraProperties(SDL_Camera *camera);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawLine Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RenderDrawLine function in C. It takes an SDL_Renderer pointer, the x and y coordinates of the start and end points of the line as integer values.  It returns 0 on success or a negative error code on failure.  It's available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawLine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawLine(SDL_Renderer * renderer,\n                       int x1, int y1, int x2, int y2);\n```\n\n----------------------------------------\n\nTITLE: Saving SDL_Surface as JPEG using IMG_SaveJPG in C\nDESCRIPTION: Saves an SDL_Surface to a JPEG file using the IMG_SaveJPG function from the SDL_image library. This function takes the SDL_Surface to save, the file path to save the JPEG, and the quality level as input. The quality parameter ranges from 0 to 100, with lower values resulting in smaller file sizes but lower image quality. The function returns 0 on success and -1 on error. Requires SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_SaveJPG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_SaveJPG(SDL_Surface *surface, const char *file, int quality);\n```\n\n----------------------------------------\n\nTITLE: SDL_strcasestr Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_strcasestr function in C. It takes two null-terminated UTF-8 strings, haystack and needle, as input and returns a pointer to the first occurrence of needle in haystack, ignoring case. If needle is not found, it returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strcasestr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strcasestr(const char *haystack, const char *needle);\n```\n\n----------------------------------------\n\nTITLE: TTF_AddFallbackFont Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_AddFallbackFont function, which adds a fallback font to a TTF_Font object. This function updates any TTF_Text objects using this font. It requires two TTF_Font pointers: the font to modify and the font to add as a fallback. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_AddFallbackFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_AddFallbackFont(TTF_Font *font, TTF_Font *fallback);\n```\n\n----------------------------------------\n\nTITLE: Creating and Pushing a User Event in C\nDESCRIPTION: This code demonstrates how to register a user-defined event type using SDL_RegisterEvents, create an SDL_Event structure, populate it with user-defined data, and push it onto the SDL event queue using SDL_PushEvent. It depends on external variables my_event_code, significant_data, and some_other_data being defined elsewhere in the program.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UserEvent.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nextern Sint32 my_event_code;\nextern void *significant_data;\nextern void *some_other_data;\n\nconst Uint32 myEventType = SDL_RegisterEvents(1);\nif (myEventType != 0) {\n    SDL_Event event;\n    SDL_zero(event);\n    event.type = myEventType;\n    event.user.code = my_event_code;\n    event.user.data1 = significant_data;\n    event.user.data2 = some_other_data;\n    SDL_PushEvent(&event);\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_SignalSemaphore Function Definition C\nDESCRIPTION: Defines the SDL_SignalSemaphore function, which atomically increments a semaphore's value, potentially waking waiting threads. It takes a pointer to an SDL_Semaphore as input. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SignalSemaphore.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SignalSemaphore(SDL_Semaphore *sem);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Fullscreen State in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to use SDL_SetWindowFullscreen to request a change in a window's fullscreen state. It takes an SDL_Window pointer and a boolean value indicating whether to switch to fullscreen or windowed mode. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowFullscreen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowFullscreen(SDL_Window *window, bool fullscreen);\n```\n\n----------------------------------------\n\nTITLE: Creating a GPU Buffer in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateGPUBuffer function in C. It takes a SDL_GPUDevice and a SDL_GPUBufferCreateInfo struct as input, and returns a SDL_GPUBuffer pointer.  The returned buffer can be used for vertex data, index data, or storage, depending on the flags set in the SDL_GPUBufferCreateInfo struct.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUBuffer * SDL_CreateGPUBuffer(\n    SDL_GPUDevice *device,\n    const SDL_GPUBufferCreateInfo *createinfo);\n```\n\n----------------------------------------\n\nTITLE: Destroying an SDL Surface in C\nDESCRIPTION: This code snippet demonstrates the syntax for the SDL_DestroySurface function, which is used to free an SDL_Surface and release the memory it occupies. It takes a single argument, a pointer to the SDL_Surface to be destroyed. Passing a NULL pointer is safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroySurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroySurface(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: Get Current Directory with SDL_GetCurrentDirectory in C\nDESCRIPTION: Retrieves the current working directory as a UTF-8 string using SDL_GetCurrentDirectory. The returned string must be freed using SDL_free after use. The function returns NULL if there is a problem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentDirectory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetCurrentDirectory(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_memcpy Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_memcpy function in C. It takes a destination pointer, a source pointer, and the length of the memory region as input.  The function copies 'len' bytes from the memory location pointed to by 'src' to the memory location pointed to by 'dst'. It returns a pointer to the destination memory region.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_memcpy.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid * SDL_memcpy(void *dst, const void *src, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Mapping String - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerMappingForGUID function, which retrieves the game controller mapping string for a given GUID. The function takes an SDL_JoystickGUID as input and returns a char* representing the mapping string. The returned string needs to be freed with SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerMappingForGUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUTO_UPDATE_JOYSTICKS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_AUTO_UPDATE_JOYSTICKS macro. It represents the string used to set the hint which controls the automatic updating of joystick states. The hint can be set anytime during the application's lifecycle to enable or disable automatic joystick updates. Possible values are \"0\" for manual updates via SDL_UpdateJoysticks() and \"1\" (default) for automatic updates by SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUTO_UPDATE_JOYSTICKS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUTO_UPDATE_JOYSTICKS \"SDL_AUTO_UPDATE_JOYSTICKS\"\n```\n\n----------------------------------------\n\nTITLE: Defining Keycode Constants\nDESCRIPTION: These macros define symbolic constants for various keycodes.  Each keycode is represented as a 32-bit unsigned integer. They allow developers to refer to specific keys by name instead of their raw numerical values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keycode.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define SDLK_UNKNOWN                0x00000000u /**< 0 */\n#define SDLK_RETURN                 0x0000000du /**< '\\r' */\n#define SDLK_ESCAPE                 0x0000001bu /**< '\\x1B' */\n#define SDLK_BACKSPACE              0x00000008u /**< '\\b' */\n#define SDLK_TAB                    0x00000009u /**< '\\t' */\n#define SDLK_SPACE                  0x00000020u /**< ' ' */\n#define SDLK_EXCLAIM                0x00000021u /**< '!' */\n#define SDLK_DBLAPOSTROPHE          0x00000022u /**< '\"' */\n#define SDLK_HASH                   0x00000023u /**< '#' */\n#define SDLK_DOLLAR                 0x00000024u /**< '$' */\n#define SDLK_PERCENT                0x00000025u /**< '%' */\n#define SDLK_AMPERSAND              0x00000026u /**< '&' */\n#define SDLK_APOSTROPHE             0x00000027u /**< '\\'' */\n#define SDLK_LEFTPAREN              0x00000028u /**< '(' */\n#define SDLK_RIGHTPAREN             0x00000029u /**< ')' */\n#define SDLK_ASTERISK               0x0000002au /**< '*' */\n#define SDLK_PLUS                   0x0000002bu /**< '+' */\n#define SDLK_COMMA                  0x0000002cu /**< ',' */\n#define SDLK_MINUS                  0x0000002du /**< '-' */\n#define SDLK_PERIOD                 0x0000002eu /**< '.' */\n#define SDLK_SLASH                  0x0000002fu /**< '/' */\n#define SDLK_0                      0x00000030u /**< '0' */\n#define SDLK_1                      0x00000031u /**< '1' */\n#define SDLK_2                      0x00000032u /**< '2' */\n#define SDLK_3                      0x00000033u /**< '3' */\n#define SDLK_4                      0x00000034u /**< '4' */\n#define SDLK_5                      0x00000035u /**< '5' */\n#define SDLK_6                      0x00000036u /**< '6' */\n#define SDLK_7                      0x00000037u /**< '7' */\n#define SDLK_8                      0x00000038u /**< '8' */\n#define SDLK_9                      0x00000039u /**< '9' */\n#define SDLK_COLON                  0x0000003au /**< ':' */\n#define SDLK_SEMICOLON              0x0000003bu /**< ';' */\n#define SDLK_LESS                   0x0000003cu /**< '<' */\n#define SDLK_EQUALS                 0x0000003du /**< '=' */\n#define SDLK_GREATER                0x0000003eu /**< '>' */\n#define SDLK_QUESTION               0x0000003fu /**< '?' */\n#define SDLK_AT                     0x00000040u /**< '@' */\n#define SDLK_LEFTBRACKET            0x0000005bu /**< '[' */\n#define SDLK_BACKSLASH              0x0000005cu /**< '\\\\' */\n#define SDLK_RIGHTBRACKET           0x0000005du /**< ']' */\n#define SDLK_CARET                  0x0000005eu /**< '^' */\n#define SDLK_UNDERSCORE             0x0000005fu /**< '_' */\n#define SDLK_GRAVE                  0x00000060u /**< '`' */\n#define SDLK_A                      0x00000061u /**< 'a' */\n#define SDLK_B                      0x00000062u /**< 'b' */\n#define SDLK_C                      0x00000063u /**< 'c' */\n#define SDLK_D                      0x00000064u /**< 'd' */\n#define SDLK_E                      0x00000065u /**< 'e' */\n#define SDLK_F                      0x00000066u /**< 'f' */\n#define SDLK_G                      0x00000067u /**< 'g' */\n#define SDLK_H                      0x00000068u /**< 'h' */\n#define SDLK_I                      0x00000069u /**< 'i' */\n#define SDLK_J                      0x0000006au /**< 'j' */\n#define SDLK_K                      0x0000006bu /**< 'k' */\n#define SDLK_L                      0x0000006cu /**< 'l' */\n#define SDLK_M                      0x0000006du /**< 'm' */\n#define SDLK_N                      0x0000006eu /**< 'n' */\n#define SDLK_O                      0x0000006fu /**< 'o' */\n#define SDLK_P                      0x00000070u /**< 'p' */\n#define SDLK_Q                      0x00000071u /**< 'q' */\n#define SDLK_R                      0x00000072u /**< 'r' */\n#define SDLK_S                      0x00000073u /**< 's' */\n#define SDLK_T                      0x00000074u /**< 't' */\n#define SDLK_U                      0x00000075u /**< 'u' */\n#define SDLK_V                      0x00000076u /**< 'v' */\n#define SDLK_W                      0x00000077u /**< 'w' */\n#define SDLK_X                      0x00000078u /**< 'x' */\n#define SDLK_Y                      0x00000079u /**< 'y' */\n#define SDLK_Z                      0x0000007au /**< 'z' */\n#define SDLK_LEFTBRACE              0x0000007bu /**< '{' */\n#define SDLK_PIPE                   0x0000007cu /**< '|' */\n#define SDLK_RIGHTBRACE             0x0000007du /**< '}' */\n#define SDLK_TILDE                  0x0000007eu /**< '~' */\n#define SDLK_DELETE                 0x0000007fu /**< '\\x7F' */\n#define SDLK_PLUSMINUS              0x000000b1u /**< '\\xB1' */\n#define SDLK_CAPSLOCK               0x40000039u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK) */\n#define SDLK_F1                     0x4000003au /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1) */\n#define SDLK_F2                     0x4000003bu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2) */\n#define SDLK_F3                     0x4000003cu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3) */\n#define SDLK_F4                     0x4000003du /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4) */\n#define SDLK_F5                     0x4000003eu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5) */\n#define SDLK_F6                     0x4000003fu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6) */\n#define SDLK_F7                     0x40000040u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7) */\n#define SDLK_F8                     0x40000041u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8) */\n#define SDLK_F9                     0x40000042u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9) */\n#define SDLK_F10                    0x40000043u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10) */\n#define SDLK_F11                    0x40000044u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11) */\n#define SDLK_F12                    0x40000045u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12) */\n#define SDLK_PRINTSCREEN            0x40000046u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN) */\n#define SDLK_SCROLLLOCK             0x40000047u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK) */\n#define SDLK_PAUSE                  0x40000048u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE) */\n#define SDLK_INSERT                 0x40000049u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT) */\n#define SDLK_HOME                   0x4000004au /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME) */\n#define SDLK_PAGEUP                 0x4000004bu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP) */\n#define SDLK_END                    0x4000004du /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END) */\n#define SDLK_PAGEDOWN               0x4000004eu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN) */\n#define SDLK_RIGHT                  0x4000004fu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT) */\n#define SDLK_LEFT                   0x40000050u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT) */\n#define SDLK_DOWN                   0x40000051u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN) */\n#define SDLK_UP                     0x40000052u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP) */\n#define SDLK_NUMLOCKCLEAR           0x40000053u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR) */\n#define SDLK_KP_DIVIDE              0x40000054u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE) */\n#define SDLK_KP_MULTIPLY            0x40000055u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY) */\n#define SDLK_KP_MINUS               0x40000056u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS) */\n#define SDLK_KP_PLUS                0x40000057u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS) */\n#define SDLK_KP_ENTER               0x40000058u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER) */\n#define SDLK_KP_1                   0x40000059u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1) */\n#define SDLK_KP_2                   0x4000005au /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2) */\n#define SDLK_KP_3                   0x4000005bu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3) */\n#define SDLK_KP_4                   0x4000005cu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4) */\n#define SDLK_KP_5                   0x4000005du /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5) */\n#define SDLK_KP_6                   0x4000005eu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6) */\n#define SDLK_KP_7                   0x4000005fu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7) */\n#define SDLK_KP_8                   0x40000060u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8) */\n#define SDLK_KP_9                   0x40000061u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9) */\n#define SDLK_KP_0                   0x40000062u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0) */\n#define SDLK_KP_PERIOD              0x40000063u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD) */\n#define SDLK_APPLICATION            0x40000065u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION) */\n#define SDLK_POWER                  0x40000066u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER) */\n#define SDLK_KP_EQUALS              0x40000067u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS) */\n#define SDLK_F13                    0x40000068u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13) */\n#define SDLK_F14                    0x40000069u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14) */\n#define SDLK_F15                    0x4000006au /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15) */\n#define SDLK_F16                    0x4000006bu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16) */\n#define SDLK_F17                    0x4000006cu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17) */\n#define SDLK_F18                    0x4000006du /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18) */\n#define SDLK_F19                    0x4000006eu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19) */\n```\n\n----------------------------------------\n\nTITLE: Get D3D12 Device from Renderer in C\nDESCRIPTION: This C code snippet shows the syntax for retrieving the D3D12 device associated with an SDL renderer. It takes an SDL_Renderer pointer as input and returns an ID3D12Device pointer, which represents the Direct3D 12 device. The returned device should be released after use to prevent memory leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetD3D12Device.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nID3D12Device* SDL_RenderGetD3D12Device(SDL_Renderer* renderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_MinimizeWindow Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_MinimizeWindow function in C, which is used to minimize an SDL window. It takes a pointer to an SDL_Window as a parameter and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MinimizeWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_MinimizeWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetRenderLogicalPresentation Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetRenderLogicalPresentation function in C. This function allows setting the logical presentation mode for an SDL renderer. The function takes a renderer, width, height and a presentation mode as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderLogicalPresentation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderLogicalPresentation(SDL_Renderer *renderer, int w, int h, SDL_RendererLogicalPresentation mode);\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Window Size in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax for using the `SDL_SetWindowMaximumSize` function in SDL3 to set the maximum width and height of a specified SDL window.  It takes an SDL_Window pointer and two integer values representing the maximum width and height as input. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowMaximumSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowMaximumSize(SDL_Window *window, int max_w, int max_h);\n```\n\n----------------------------------------\n\nTITLE: Customizing SDK/NDK versions\nDESCRIPTION: Shows how to customize the SDK and build tools versions in the `build.gradle` file. This allows specifying the target SDK and build tools versions for the Android project.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nandroid {\n    buildToolsVersion \"28.0.1\"\n    compileSdkVersion 28\n```\n\n----------------------------------------\n\nTITLE: Get List of Displays using SDL_GetDisplays in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GetDisplays function to retrieve a list of connected displays and print the number of displays to the console. It initializes SDL, calls SDL_GetDisplays, logs the number of found displays, and then frees the allocated memory.  It depends on SDL3 and requires SDL_INIT_VIDEO to be initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplays.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Example program\n// Use SDL3 to check how many displays there are\n\n#include <SDL3/SDL_log.h>\n#include <SDL3/SDL_main.h>\n#include <SDL3/SDL_video.h>\n\nint\nmain(int argc, char** argv)\n{\n  if (!SDL_Init(SDL_INIT_VIDEO)) {\n    SDL_Log(\"Unable to initialize SDL: %s\", SDL_GetError());\n    return 0;\n  }\n\n  int num_displays;\n  SDL_DisplayID *displays = SDL_GetDisplays(&num_displays);\n  SDL_Log(\"Found %d display(s)\", num_displays);\n\n  SDL_free(displays);\n\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Text Position in SDL_ttf (C)\nDESCRIPTION: Retrieves the x and y coordinates of the upper-left corner of a text object. It takes a TTF_Text pointer as input and fills the provided integer pointers x and y with the text's position in pixels. The function returns a boolean indicating success or failure. It is part of SDL_ttf version 3.0.0 and later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextPosition(TTF_Text *text, int *x, int *y);\n```\n\n----------------------------------------\n\nTITLE: Set Window Opacity in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_SetWindowOpacity function to set the opacity of an SDL window. The function takes a pointer to an SDL_Window and a float value representing the desired opacity (0.0f for transparent, 1.0f for opaque). It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowOpacity.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowOpacity(SDL_Window *window, float opacity);\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Data from an SDL_AudioStream\nDESCRIPTION: This code snippet shows how to retrieve converted audio data from an SDL_AudioStream using SDL_GetAudioStreamData. It reads up to 100 floats from the stream into the `converted` buffer. It includes error handling to check if the data retrieval was successful and then calls a function `write_more_samples_to_disk` to process the retrieved data. The `gotten` variable indicates the number of bytes actually retrieved.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/AudioStream.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nfloat converted[100];\n// this is in bytes, not samples!\nint gotten = SDL_GetAudioStreamData(stream, converted, sizeof (converted));\nif (gotten == -1) {\n    printf(\"Uhoh, failed to get converted data: %s\\n\", SDL_GetError());\n}\nwrite_more_samples_to_disk(converted, gotten); /* whatever. */\n```\n\n----------------------------------------\n\nTITLE: Create and bind a new datagram socket with SDLNet_CreateDatagramSocket in C\nDESCRIPTION: This code snippet demonstrates the syntax of the SDLNet_CreateDatagramSocket function, which creates and binds a new datagram socket. It takes an SDLNet_Address pointer and a port number as input and returns a pointer to the created SDLNet_DatagramSocket.  The addr parameter specifies the local address to listen for connections on (or NULL for all addresses), and port specifies the port to listen on (or zero for the system to decide).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_CreateDatagramSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDLNet_DatagramSocket * SDLNet_CreateDatagramSocket(SDLNet_Address *addr, Uint16 port);\n```\n\n----------------------------------------\n\nTITLE: Capture Mouse with SDL_CaptureMouse in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_CaptureMouse function in C to enable or disable mouse capturing. Capturing the mouse allows the application to receive mouse events even when the mouse cursor is outside of the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CaptureMouse.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_CaptureMouse(SDL_bool enabled);\n```\n\n----------------------------------------\n\nTITLE: SDL_zero Macro Definition in C\nDESCRIPTION: Defines the SDL_zero macro that uses SDL_memset to set all bytes of an object to zero. It takes the object 'x' as a parameter, calculates its size using sizeof((x)), and clears the memory by writing zeros. This macro expects an object, not a pointer or an array.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_zero.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_zero(x) SDL_memset(&(x), 0, sizeof((x)))\n```\n\n----------------------------------------\n\nTITLE: Defining Mix_Music struct in C\nDESCRIPTION: This snippet defines the Mix_Music structure, which is an opaque structure representing a music chunk in SDL_mixer.  It's a forward declaration; the actual members of the struct are hidden from the user. It's part of SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Music.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct Mix_Music Mix_Music;\n```\n\n----------------------------------------\n\nTITLE: Opening a Camera Device with SDL_OpenCamera in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_OpenCamera to open a camera device. It takes a camera instance ID and an optional camera specification as input and returns an SDL_Camera object or NULL on failure. The instance_id specifies which camera device to open and the spec pointer allows specifying the desired format for the camera stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenCamera.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Camera * SDL_OpenCamera(SDL_CameraID instance_id, const SDL_CameraSpec *spec);\n```\n\n----------------------------------------\n\nTITLE: SDL_RestoreWindow Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RestoreWindow function, which restores the size and position of a minimized or maximized window. It takes a pointer to an SDL_Window as input. This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RestoreWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RestoreWindow(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: SDL_BroadcastCondition Usage Example in C\nDESCRIPTION: This C code demonstrates the usage of SDL_BroadcastCondition to signal multiple threads (Thread_A, Thread_B) waiting on a condition. Thread_C sets the condition to true and then broadcasts to wake up all waiting threads.  It requires SDL3 and its mutex and condition variable functionalities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BroadcastCondition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// BEWARE: This code example was migrated from the SDL2 Wiki, by only updating the names.\n\nbool condition = false;\nSDL_Mutex *lock;\nSDL_Condition *cond;\nlock = SDL_CreateMutex();\ncond = SDL_CreateCondition();\n\nThread_A:\n    SDL_LockMutex(lock);\n    while (!condition) {\n        SDL_WaitCondition(cond, lock);\n    }\n    SDL_UnlockMutex(lock);\nThread_B:\n    SDL_LockMutex(lock);\n    while (!condition) {\n        SDL_WaitCondition(cond, lock);\n    }\n    SDL_UnlockMutex(lock);\nThread_C:\n    SDL_LockMutex(lock);\n    /* ... */\n    condition = true;\n    /* ... */\n    SDL_BroadcastCondition(cond);\n    SDL_UnlockMutex(lock);\n\nSDL_DestroyCondition(cond);\nSDL_DestroyMutex(lock);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Mapping - C\nDESCRIPTION: Retrieves the current mapping of a specified SDL_Gamepad. The function takes a pointer to an SDL_Gamepad structure as input and returns a string representing the gamepad's mapping. The returned string must be freed using SDL_free() when it's no longer needed. If no mapping is available, it returns NULL; SDL_GetError() provides more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadMapping.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetGamepadMapping(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: SDL_StartTextInputWithProperties Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_StartTextInputWithProperties function in C. It takes a window pointer and a properties ID as input, enabling text input with the specified properties. Returns `true` on success, `false` on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StartTextInputWithProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_StartTextInputWithProperties(SDL_Window *window, SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: Setting App Metadata with SDL_SetAppMetadata in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetAppMetadata function in C. It defines the function signature and its parameters, including the application name, version, and identifier. It's crucial to call this function as early as possible, before calling SDL_Init.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAppMetadata.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAppMetadata(const char *appname, const char *appversion, const char *appidentifier);\n```\n\n----------------------------------------\n\nTITLE: Open Haptic Device using SDL_HapticOpen (C)\nDESCRIPTION: This code snippet demonstrates how to open a haptic device using SDL_HapticOpen in SDL2. It takes an integer device index as input and returns a pointer to an SDL_Haptic structure. Error checking using SDL_GetError is essential to determine if the device was successfully opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticOpen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Haptic* SDL_HapticOpen(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Type by ID in SDL3 (C)\nDESCRIPTION: Retrieves the SDL_SensorType associated with a given SDL_SensorID.  This function takes an SDL_SensorID as input and returns the corresponding SDL_SensorType. If the provided instance_id is not valid, it returns SDL_SENSOR_INVALID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorTypeForID.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_SensorType SDL_GetSensorTypeForID(SDL_SensorID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerAddMappingsFromFile Macro Definition in C\nDESCRIPTION: Defines the SDL_GameControllerAddMappingsFromFile macro, which simplifies loading game controller mappings from a file. It uses SDL_RWFromFile to open the file in read-binary mode (\"rb\") and then passes the resulting SDL_RWops structure and a 'free' flag of 1 to SDL_GameControllerAddMappingsFromRW.  The macro abstracts the process of opening the file and managing the SDL_RWops structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerAddMappingsFromFile.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_GameControllerAddMappingsFromFile(file)   SDL_GameControllerAddMappingsFromRW(SDL_RWFromFile(file, \"rb\"), 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Clipping Rectangle in SDL (C)\nDESCRIPTION: This code snippet demonstrates how to set the clipping rectangle for an SDL surface using the SDL_SetClipRect function. The function takes a pointer to the SDL_Surface and a pointer to the SDL_Rect structure representing the desired clipping area. Passing NULL as the rect parameter disables clipping.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetClipRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_SetClipRect(SDL_Surface * surface,\n                         const SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetPerformanceCounter Syntax\nDESCRIPTION: Shows the syntax for the SDL_GetPerformanceCounter function, which retrieves the current value of the high resolution counter. It takes no arguments and returns a Uint64 representing the counter value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPerformanceCounter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_GetPerformanceCounter(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ScaleSurface Function Definition in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ScaleSurface function.  It takes a SDL_Surface pointer, desired width and height, and a scaling mode as input. It returns a pointer to the new scaled SDL_Surface, or NULL on failure.  The returned surface must be freed using SDL_DestroySurface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ScaleSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_ScaleSurface(SDL_Surface *surface, int width, int height, SDL_ScaleMode scaleMode);\n```\n\n----------------------------------------\n\nTITLE: Creating a GPU Compute Pipeline in SDL\nDESCRIPTION: This code snippet demonstrates how to create a GPU compute pipeline using the SDL_CreateGPUComputePipeline function. It takes a GPUDevice and a createinfo struct as input, and returns a GPUComputePipeline object. The function returns NULL on failure, and SDL_GetError() can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUComputePipeline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUComputePipeline * SDL_CreateGPUComputePipeline(\n    SDL_GPUDevice *device,\n    const SDL_GPUComputePipelineCreateInfo *createinfo);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetRenderDrawColorFloat Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetRenderDrawColorFloat function. This function sets the color used for drawing operations (Rect, Line and Clear) within an SDL renderer. It takes the renderer and RGBA values (as floats) as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderDrawColorFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderDrawColorFloat(SDL_Renderer *renderer, float r, float g, float b, float a);\n```\n\n----------------------------------------\n\nTITLE: Set Window Size using SDL_SetWindowSize in C\nDESCRIPTION: This C code snippet demonstrates the syntax for using the SDL_SetWindowSize function. It sets the width and height of a specified SDL window. The window size must be greater than 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowSize.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_SetWindowSize(SDL_Window * window, int w,\n                       int h);\n```\n\n----------------------------------------\n\nTITLE: Beginning a GPU Copy Pass in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to begin a copy pass on a command buffer using SDL_BeginGPUCopyPass in SDL3. It requires an initialized SDL_GPUCommandBuffer. The function returns a handle to the newly created copy pass, which is an SDL_GPUCopyPass pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BeginGPUCopyPass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUCopyPass * SDL_BeginGPUCopyPass(\n    SDL_GPUCommandBuffer *command_buffer);\n```\n\n----------------------------------------\n\nTITLE: Get Render Scale using SDL_GetRenderScale in C\nDESCRIPTION: This code snippet shows how to use the SDL_GetRenderScale function to retrieve the horizontal and vertical scaling factors of a given SDL_Renderer. The function takes a renderer and pointers to floats to store the scale values, and returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderScale(SDL_Renderer *renderer, float *scaleX, float *scaleY);\n```\n\n----------------------------------------\n\nTITLE: OpenGL Rendering with SDL_GL_SwapWindow in C\nDESCRIPTION: This example demonstrates how to create an SDL window with OpenGL context, set the swap interval for vertical sync, clear the context, perform extra drawing functions, and finally swap the window buffer to display the rendering using SDL_GL_SwapWindow.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_SwapWindow.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window* window = SDL_CreateWindow(\"SDL3/OpenGL Demo\", 640, 480, SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);\n      \n/* Create an OpenGL context associated with the window. */\nSDL_GLContext glcontext = SDL_GL_CreateContext(window);\n\n/* This makes our buffer swap syncronized with the monitor's vertical refresh */\nSDL_GL_SetSwapInterval(1);\n\n/* Clear context */\nglClearColor(0,0,0,1);\nglClear(GL_COLOR_BUFFER_BIT);\n\n/* <Extra drawing functions here> */ \n\n/* Swap our buffer to display the current contents of buffer on screen */ \nSDL_GL_SwapWindow(window);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateTextureFromSurface Syntax\nDESCRIPTION: Shows the function prototype for SDL_CreateTextureFromSurface in C. It takes an SDL_Renderer pointer and an SDL_Surface pointer as input, and returns an SDL_Texture pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateTextureFromSurface.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * SDL_CreateTextureFromSurface(SDL_Renderer *renderer, SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: WEBP Detection Function in SDL_image (C)\nDESCRIPTION: This function checks if the provided SDL_IOStream contains WEBP image data. It takes an SDL_IOStream pointer as input, reads a small amount of data to identify the file type, and then resets the stream position. The function returns true if the data is WEBP, and false otherwise. It requires SDL_image 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isWEBP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isWEBP(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderPresent Syntax in C\nDESCRIPTION: This code snippet shows the syntax for SDL_RenderPresent in C. It takes a pointer to an SDL_Renderer as its only argument, which represents the rendering context. The function updates the screen with any rendering performed since the previous call.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderPresent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RenderPresent(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Log Output Function in SDL (C)\nDESCRIPTION: This code snippet shows the syntax for the `SDL_LogSetOutputFunction`. It takes a callback function of type `SDL_LogOutputFunction` and a `void` pointer as user data. The callback function will then be used instead of the default logging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogSetOutputFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Get Input Report from HID Device in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_hid_get_input_report to retrieve data from a HID device. It requires an SDL_hid_device handle obtained from SDL_hid_open(), a data buffer to store the report, and the length of the buffer. The first byte of the data buffer should be set to the Report ID or zero if the device doesn't use numbered reports.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_get_input_report.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_input_report(SDL_hid_device *dev, unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_DrawGPUIndexedPrimitives Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_DrawGPUIndexedPrimitives function, which is used to draw data with index buffers and instancing in SDL3. It requires a render pass, number of indices, number of instances, starting index, vertex offset, and starting instance as parameters. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DrawGPUIndexedPrimitives.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DrawGPUIndexedPrimitives(\n    SDL_GPURenderPass *render_pass,\n    Uint32 num_indices,\n    Uint32 num_instances,\n    Uint32 first_index,\n    Sint32 vertex_offset,\n    Uint32 first_instance);\n```\n\n----------------------------------------\n\nTITLE: SDL_AndroidRequestPermission Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_AndroidRequestPermission function. This function is used to request a specific permission string on the Android platform. The function blocks the calling thread until the permission is granted or denied.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidRequestPermission.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_AndroidRequestPermission(const char *permission);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadBMP_RW Syntax in C\nDESCRIPTION: This snippet shows the syntax for the IMG_LoadBMP_RW function in C. It takes an SDL_RWops pointer as input, which is the source from which the BMP image data will be loaded. The function returns a pointer to an SDL_Surface, or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadBMP_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadBMP_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Get System Theme using SDL_GetSystemTheme in C\nDESCRIPTION: This C code snippet shows the syntax for using SDL_GetSystemTheme to retrieve the current system theme.  The function takes no arguments and returns an SDL_SystemTheme enum value. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSystemTheme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_SystemTheme SDL_GetSystemTheme(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GlobDirectory Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GlobDirectory function in C. It takes a path, pattern, flags, and a pointer to an integer as parameters, and returns a pointer to an array of strings.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GlobDirectory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar ** SDL_GlobDirectory(const char *path, const char *pattern, SDL_GlobFlags flags, int *count);\n```\n\n----------------------------------------\n\nTITLE: Setting Audio Volume\nDESCRIPTION: These functions control the volume of audio channels, chunks, and music objects. Volume ranges from 0 (silent) to MIX_MAX_VOLUME (full volume, usually 128).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nint Mix_Volume(int channel, int volume);                                                  // Set the volume for a specific channel.\nint Mix_VolumeChunk(Mix_Chunk *chunk, int volume);                                        // Set the volume for a specific chunk.\nint Mix_VolumeMusic(int volume);                                                          // Set the volume for the music channel.\nint Mix_GetMusicVolume(Mix_Music *music);                                                 // Query the current volume value for a music object.\n```\n\n----------------------------------------\n\nTITLE: Get Texture Properties in SDL3 (C)\nDESCRIPTION: Retrieves the properties associated with a texture using SDL_GetTextureProperties. The function takes an SDL_Texture pointer as input and returns an SDL_PropertiesID, which can be used to query specific properties of the texture. A return value of 0 indicates failure, and SDL_GetError() should be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextureProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetTextureProperties(SDL_Texture *texture);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowDisplayScale Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetWindowDisplayScale function in C. It takes an SDL_Window pointer as input and returns a float representing the display scale.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowDisplayScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetWindowDisplayScale(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Defining the SDL_RWops structure in C\nDESCRIPTION: This C code defines the structure `SDL_RWops`. It serves as an abstraction layer for input and output operations, allowing SDL to work with different data sources (files, memory, etc.) through a unified interface. The structure contains function pointers for essential operations like determining size, seeking positions, reading data, writing data, and closing the data stream. It also includes a union 'hidden' which allows for platform-specific or data-source specific implementations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWops.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_RWops\n{\n    /**\n     *  Return the size of the file in this rwops, or -1 if unknown\n     */\n    Sint64 (SDLCALL * size) (struct SDL_RWops * context);\n\n    /**\n     *  Seek to `offset` relative to `whence`, one of stdio's whence values:\n     *  RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END\n     *\n     *  \\return the final offset in the data stream, or -1 on error.\n     */\n    Sint64 (SDLCALL * seek) (struct SDL_RWops * context, Sint64 offset,\n                             int whence);\n\n    /**\n     *  Read up to `maxnum` objects each of size `size` from the data\n     *  stream to the area pointed at by `ptr`.\n     *\n     *  \\return the number of objects read, or 0 at error or end of file.\n     */\n    size_t (SDLCALL * read) (struct SDL_RWops * context, void *ptr,\n                             size_t size, size_t maxnum);\n\n    /**\n     *  Write exactly `num` objects each of size `size` from the area\n     *  pointed at by `ptr` to data stream.\n     *\n     *  \\return the number of objects written, or 0 at error or end of file.\n     */\n    size_t (SDLCALL * write) (struct SDL_RWops * context, const void *ptr,\n                              size_t size, size_t num);\n\n    /**\n     *  Close and free an allocated SDL_RWops structure.\n     *\n     *  \\return 0 if successful or -1 on write error when flushing data.\n     */\n    int (SDLCALL * close) (struct SDL_RWops * context);\n\n    Uint32 type;\n    union\n    {\n#if defined(__ANDROID__)\n        struct\n        {\n            void *asset;\n        } androidio;\n#elif defined(__WIN32__) || defined(__GDK__)\n        struct\n        {\n            SDL_bool append;\n            void *h;\n            struct\n            {\n                void *data;\n                size_t size;\n                size_t left;\n            } buffer;\n        } windowsio;\n#endif\n\n#ifdef HAVE_STDIO_H\n        struct\n        {\n            SDL_bool autoclose;\n            FILE *fp;\n        } stdio;\n#endif\n        struct\n        {\n            Uint8 *base;\n            Uint8 *here;\n            Uint8 *stop;\n        } mem;\n        struct\n        {\n            void *data1;\n            void *data2;\n        } unknown;\n    } hidden;\n\n} SDL_RWops;\n```\n\n----------------------------------------\n\nTITLE: Pausing/Resuming Audio with Mix_PauseAudio in SDL_mixer (C)\nDESCRIPTION: This C code snippet shows the syntax for using Mix_PauseAudio to suspend or resume the entire audio output. The `pause_on` parameter determines the action: 1 pauses the audio, and 0 resumes it. This function is part of the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_PauseAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_PauseAudio(int pause_on);\n```\n\n----------------------------------------\n\nTITLE: Get Render Viewport in C\nDESCRIPTION: Retrieves the drawing area for the current render target. The function populates the provided SDL_Rect structure with the viewport dimensions.  It requires an SDL_Renderer and a pointer to an SDL_Rect. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderViewport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderViewport(SDL_Renderer *renderer, SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerAddMapping Syntax\nDESCRIPTION: Defines the function signature for SDL_GameControllerAddMapping.  It takes a const char pointer to the mapping string as input and returns an integer indicating success or failure. Dependencies: SDL_gamecontroller.h\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerAddMapping.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerAddMapping(const char* mappingString);\n```\n\n----------------------------------------\n\nTITLE: Get Font Height - SDL_ttf - C\nDESCRIPTION: This code snippet shows the syntax for the TTF_FontHeight function in the SDL_ttf library. It takes a constant TTF_Font pointer as input and returns an integer representing the font's height. The height is usually equal to the font's point size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_FontHeight.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_FontHeight(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Creating a Tray Menu with SDL_CreateTrayMenu (C)\nDESCRIPTION: This snippet shows the syntax for creating a tray menu using the SDL_CreateTrayMenu function. It takes an SDL_Tray pointer as input and returns a pointer to the newly created SDL_TrayMenu. The function should be called on the same thread that created the tray.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateTrayMenu.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_TrayMenu * SDL_CreateTrayMenu(SDL_Tray *tray);\n```\n\n----------------------------------------\n\nTITLE: Set Window Display Mode - SDL2 - C\nDESCRIPTION: Sets the display mode for a given SDL window when it's in fullscreen mode. The function takes a pointer to the window and a pointer to the desired SDL_DisplayMode. If the display mode pointer is NULL, the window's dimensions and desktop's format and refresh rate are used.  Requires SDL2 library to be linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowDisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowDisplayMode(SDL_Window * window,\n                             const SDL_DisplayMode * mode);\n```\n\n----------------------------------------\n\nTITLE: Allocating a Socket Set with SDLNet_AllocSocketSet in C\nDESCRIPTION: This code snippet shows how to allocate a socket set using SDLNet_AllocSocketSet, specifying the maximum number of sockets the set can hold. The function returns a SDLNet_SocketSet, or NULL if memory allocation fails. It's part of the SDL_net library and requires including SDL_net.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_AllocSocketSet.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDLNet_SocketSet SDLNet_AllocSocketSet(int maxsockets);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Name in SDL3 (C)\nDESCRIPTION: Retrieves the implementation-dependent name of an opened gamepad using SDL_GetGamepadName. Requires a valid SDL_Gamepad pointer obtained from SDL_OpenGamepad as input. Returns a const char* representing the gamepad's name, or NULL if no name is available or the gamepad identifier is invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadName(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderTextureAffine Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_RenderTextureAffine function. It takes a renderer, a texture, source rectangle, and points for origin, right, and down as parameters. It copies a portion of the source texture to the current rendering target, with affine transform, at subpixel precision.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderTextureAffine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderTextureAffine(SDL_Renderer *renderer, SDL_Texture *texture,\n                         const SDL_FRect *srcrect, const SDL_FPoint *origin,\n                         const SDL_FPoint *right, const SDL_FPoint *down);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Icon in SDL3 (C)\nDESCRIPTION: Sets the icon for a specified SDL window.  The `window` parameter specifies the SDL_Window to modify, and the `icon` parameter provides an SDL_Surface containing the icon data. The function returns true on success or false on failure, with SDL_GetError() providing more information on failures. It automatically handles high DPI scenarios if the SDL_Surface contains alternate representations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowIcon.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowIcon(SDL_Window *window, SDL_Surface *icon);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertSurface Example\nDESCRIPTION: Example of using SDL_ConvertSurface to convert an input surface to a surface with RGBA32 pixel format. The code snippet demonstrates how to call the function with the input surface and the desired pixel format. Remember to free the returned surface when it's no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ConvertSurface.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface *input;\nSDL_Surface *output = SDL_ConvertSurface(input, SDL_PIXELFORMAT_RGBA32);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerAddMappingsFromRW Syntax (C)\nDESCRIPTION: This function loads game controller mappings from a seekable SDL data stream.  The `rw` parameter specifies the data stream, and `freerw` indicates whether the stream should be closed after being read. Returns the number of mappings added or -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerAddMappingsFromRW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_GameControllerAddMappingsFromRW(SDL_RWops * rw, int freerw);\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitEventTimeout Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WaitEventTimeout function. This function waits for a specified timeout for the next available event. It accepts a pointer to an SDL_Event structure and a timeout value in milliseconds. Returns true if an event was received, false if the timeout elapsed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitEventTimeout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitEventTimeout(SDL_Event *event, Sint32 timeoutMS);\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Joystick Event Polling in SDL2 (C)\nDESCRIPTION: The SDL_JoystickEventState function allows enabling or disabling joystick event polling. When disabled, the user must call SDL_JoystickUpdate() manually. The state parameter accepts SDL_QUERY, SDL_IGNORE, or SDL_ENABLE to query, ignore, or enable events, respectively. Calling this function might delete all events in SDL's event queue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickEventState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickEventState(int state);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Game Controller Mappings in SDL2 (C)\nDESCRIPTION: Retrieves the total number of game controller mappings that are currently installed. This function does not require any input parameters and returns an integer representing the count of mappings.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerNumMappings.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerNumMappings(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_RestoreWindow Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RestoreWindow function, which is used to request that a minimized or maximized window be restored to its original size and position. The function takes a pointer to an SDL_Window as input. It is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RestoreWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RestoreWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Check Text Input Status in SDL Window (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_TextInputActive function to check if Unicode text input events are enabled for a given SDL_Window. The function returns a boolean value indicating the text input status.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TextInputActive.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_TextInputActive(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL 2.0 Renderer Creation\nDESCRIPTION: This code snippet shows how to create a renderer in SDL 2.0.  A renderer handles the actual drawing to a window and can use various backends (Direct3D, OpenGL, software surfaces). The second argument of -1 tells SDL to choose the best driver for the system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nSDL_Renderer *renderer = SDL_CreateRenderer(sdlWindow, -1, 0);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Focusable State in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax for setting the focusable state of an SDL window. It takes an SDL_Window pointer and a boolean value indicating whether the window should be focusable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowFocusable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowFocusable(SDL_Window *window, bool focusable);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_ReadFromStreamSocket Syntax in C\nDESCRIPTION: Defines the syntax for the SDLNet_ReadFromStreamSocket function in C. This function reads data from a stream socket into a provided buffer, up to a specified maximum length. It's a crucial part of handling network communication using SDL_net.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_ReadFromStreamSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_ReadFromStreamSocket(SDLNet_StreamSocket *sock, void *buf, int buflen);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Name by ID in SDL3 (C)\nDESCRIPTION: Retrieves the implementation-dependent name of a joystick given its instance ID. This function can be called before any joysticks are opened. It returns the name of the selected joystick or NULL if no name is found. Requires SDL3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickNameForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetJoystickNameForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Initializing Character Set Conversion Context in SDL\nDESCRIPTION: This code snippet shows how to use the SDL_iconv_open function to create a context for converting between two character encodings. It takes the target encoding (`tocode`) and the source encoding (`fromcode`) as input, both as null-terminated C strings. The function returns a conversion descriptor or SDL_ICONV_ERROR on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv_open.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_iconv_t SDL_iconv_open(const char *tocode,\n                       const char *fromcode);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetCurrentDisplayMode Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetCurrentDisplayMode function in C. This function retrieves information about the current display mode of a specified display. It takes the display index and a pointer to an SDL_DisplayMode structure as input, which is then filled with the current display mode information. The function returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetCurrentDisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode * mode);\n```\n\n----------------------------------------\n\nTITLE: SDL_DisableScreenSaver Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_DisableScreenSaver function in C. This function prevents the screen from being blanked by a screensaver. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DisableScreenSaver.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_DisableScreenSaver(void);\n```\n\n----------------------------------------\n\nTITLE: Resuming Music SDL_mixer C\nDESCRIPTION: Resumes the playback of the paused music stream. The function takes no arguments. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_ResumeMusic(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRGBSurfaceFrom Function Signature in C\nDESCRIPTION: This code snippet shows the function signature of SDL_CreateRGBSurfaceFrom in C. It takes a pointer to existing pixel data, width, height, depth, pitch, and color masks as input and returns a pointer to an SDL_Surface structure. The function creates an SDL surface using the provided pixel data without allocating new memory for it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateRGBSurfaceFrom.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface* SDL_CreateRGBSurfaceFrom(void *pixels,\n                                      int width,\n                                      int height,\n                                      int depth,\n                                      int pitch,\n                                      Uint32 Rmask,\n                                      Uint32 Gmask,\n                                      Uint32 Bmask,\n                                      Uint32 Amask);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowKeyboardGrab Syntax (C)\nDESCRIPTION: Retrieves the keyboard grab mode of a given SDL window. Returns SDL_TRUE if the keyboard is grabbed by the window, and SDL_FALSE otherwise. Available since SDL 2.0.16.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowKeyboardGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GetWindowKeyboardGrab(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerFromPlayerIndex Signature in C\nDESCRIPTION: Defines the signature of the `SDL_GameControllerFromPlayerIndex` function in C. This function retrieves an SDL_GameController pointer based on the provided player index. It takes an integer representing the player index as input and returns a pointer to an SDL_GameController structure, or NULL if no controller is associated with the index.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerFromPlayerIndex.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_GameController* SDL_GameControllerFromPlayerIndex(int player_index);\n```\n\n----------------------------------------\n\nTITLE: Get Pixel Format Details in SDL3 (C)\nDESCRIPTION: Retrieves a pointer to an SDL_PixelFormatDetails structure corresponding to the specified SDL_PixelFormat.  The returned structure is from a shared global cache and should not be modified.  Failure returns NULL; call SDL_GetError() for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPixelFormatDetails.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_PixelFormatDetails * SDL_GetPixelFormatDetails(SDL_PixelFormat format);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetRenderColorScale Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetRenderColorScale function in C. It takes an SDL_Renderer pointer and a float scale value as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderColorScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderColorScale(SDL_Renderer *renderer, float scale);\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowOpenFileDialog Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_ShowOpenFileDialog function, which displays a file selection dialog to the user.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowOpenFileDialog.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ShowOpenFileDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const SDL_DialogFileFilter *filters, int nfilters, const char *default_location, bool allow_many);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDisplays Function Signature in C\nDESCRIPTION: This code snippet defines the signature of the SDL_GetDisplays function in C. It takes a pointer to an integer that will store the number of displays as an argument. It returns a pointer to an array of SDL_DisplayID, which represents the display instance IDs, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplays.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayID * SDL_GetDisplays(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitConditionTimeout Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_WaitConditionTimeout function, which waits on a condition variable with a specified timeout.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitConditionTimeout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitConditionTimeout(SDL_Condition *cond,\n                    SDL_Mutex *mutex, Sint32 timeoutMS);\n```\n\n----------------------------------------\n\nTITLE: Setting Render Draw Blend Mode in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_SetRenderDrawBlendMode function to set the blend mode for drawing operations in an SDL3 renderer. It takes an SDL_Renderer pointer and an SDL_BlendMode value as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderDrawBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode blendMode);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioInit Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_AudioInit function. It takes a constant character pointer representing the desired audio driver's name as input. The function returns an integer: 0 for success, or a negative error code if initialization fails. Call SDL_GetError() for details on the error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AudioInit(const char *driver_name);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_DRIVER in C\nDESCRIPTION: Defines the SDL_HINT_RENDER_DRIVER hint as a macro string literal. This hint allows the application to specify a preferred rendering backend (e.g., direct3d, opengl, metal) when SDL initializes the rendering system. If the specified driver is not available, SDL will fall back to a default driver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_DRIVER              \"SDL_RENDER_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRGBSurfaceWithFormat Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_CreateRGBSurfaceWithFormat function. It takes flags, width, height, depth, and a pixel format as input and returns a pointer to a newly created SDL_Surface structure, or NULL if it fails. The function is available since SDL 2.0.5.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateRGBSurfaceWithFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface* SDL_CreateRGBSurfaceWithFormat\n    (Uint32 flags, int width, int height, int depth, Uint32 format);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetClipboardData Syntax in C\nDESCRIPTION: This code snippet shows the syntax for SDL_SetClipboardData function. It takes callback functions for providing and cleaning up clipboard data, a user data pointer, an array of MIME types, and the number of MIME types. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetClipboardData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, void *userdata, const char **mime_types, size_t num_mime_types);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV_IO Usage Example with SDL_IOFromFile (C)\nDESCRIPTION: Illustrates how to use SDL_LoadWAV_IO with SDL_IOFromFile to load a WAV file from disk.  It shows how to pass the SDL_IOStream, closeio flag, audio spec, buffer, and length pointers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadWAV_IO.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_LoadWAV_IO(SDL_IOFromFile(\"sample.wav\", \"rb\"), true, &spec, &buf, &len);\n```\n\n----------------------------------------\n\nTITLE: SDL_SaveBMP Macro Definition in C\nDESCRIPTION: This macro simplifies saving an SDL surface to a BMP file by using SDL_SaveBMP_RW with SDL_RWFromFile. It requires an SDL_Surface and a filename as input. The filename is opened in \"wb\" mode for writing binary data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SaveBMP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SaveBMP(surface, file) \\\n        SDL_SaveBMP_RW(surface, SDL_RWFromFile(file, \"wb\"), 1)\n```\n\n----------------------------------------\n\nTITLE: Setting Font Kerning with TTF_SetFontKerning in C\nDESCRIPTION: This code snippet demonstrates how to use the TTF_SetFontKerning function in SDL_ttf to enable or disable kerning for a given font.  The function takes a TTF_Font pointer and an integer indicating whether kerning should be allowed (non-zero) or disallowed (zero).  It modifies the font object in-place to set the kerning option.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontKerning.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_SetFontKerning(TTF_Font *font, int allowed);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadBMP_IO Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_LoadBMP_IO function in C, which loads a BMP image from an SDL_IOStream. It takes an SDL_IOStream pointer and a boolean indicating whether to close the stream. It returns a pointer to a new SDL_Surface or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadBMP_IO.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * SDL_LoadBMP_IO(SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Check SDL_ttf Initialization - TTF_WasInit - C\nDESCRIPTION: The TTF_WasInit function checks if the SDL_ttf library is initialized. It returns an integer representing the number of initialization calls without corresponding TTF_Quit calls. A value greater than zero indicates that the library is currently initialized and ready to use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_WasInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_WasInit(void);\n```\n\n----------------------------------------\n\nTITLE: Save SDL_Surface as PNG using SDL_RWops in C\nDESCRIPTION: This code snippet shows the syntax of the `IMG_SavePNG_RW` function, which saves an SDL_Surface to PNG image data through an SDL_RWops stream. It takes an SDL_Surface pointer, an SDL_RWops pointer, and an integer indicating whether to free the SDL_RWops. It returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_SavePNG_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_SavePNG_RW(SDL_Surface *surface, SDL_RWops *dst, int freedst);\n```\n\n----------------------------------------\n\nTITLE: Create Metal View with SDL_Metal_CreateView in C\nDESCRIPTION: Creates a CAMetalLayer-backed NSView/UIView and attaches it to the specified SDL window. The returned handle can be cast directly to NSView or UIView. User code needs to associate a MTLDevice with the CAMetalLayer. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Metal_CreateView.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_MetalView SDL_Metal_CreateView(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Free audio chunk using Mix_FreeChunk in C\nDESCRIPTION: Frees an audio chunk allocated with Mix_LoadWAV or related functions. The function takes a pointer to the Mix_Chunk structure as input and releases the associated memory. Any channels currently playing this chunk will be stopped, effects deregistered, and channel finished callbacks triggered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FreeChunk.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_FreeChunk(Mix_Chunk *chunk);\n```\n\n----------------------------------------\n\nTITLE: Get Haptic Device from ID using SDL3 in C\nDESCRIPTION: Retrieves the SDL_Haptic device associated with the provided instance ID. Requires a valid SDL_HapticID. Returns a pointer to the SDL_Haptic device or NULL if not found or on failure.  Use SDL_GetError() for error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHapticFromID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Haptic * SDL_GetHapticFromID(SDL_HapticID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerSendEffect Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_GameControllerSendEffect` function in C. It takes a game controller, a pointer to data, and the size of the data as input, and returns an integer indicating success or failure. The function requires the SDL2 library and SDL_gamecontroller.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerSendEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerSendEffect(SDL_GameController *gamecontroller, const void *data, int size);\n```\n\n----------------------------------------\n\nTITLE: Get List of Connected Keyboards with SDL_GetKeyboards (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetKeyboards function to retrieve a list of connected keyboard instance IDs. It takes a pointer to an integer where the count of keyboards will be stored.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetKeyboards.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_KeyboardID * SDL_GetKeyboards(int *count);\n```\n\n----------------------------------------\n\nTITLE: Get GPU Text Draw Data with TTF_GetGPUTextDrawData in C\nDESCRIPTION: Retrieves the geometry data required for drawing text using the SDL_GPU API. The function expects a TTF_Text object created with a GPU-based text engine. It returns a linked list of TTF_GPUAtlasDrawSequence objects or NULL on failure. The returned geometry data uses a coordinate system where the positive X-axis is to the right and the positive Y-axis is upwards.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetGPUTextDrawData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_GPUAtlasDrawSequence * TTF_GetGPUTextDrawData(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_Surface Structure Definition in C\nDESCRIPTION: Defines the SDL_Surface structure, which represents a software blitting surface in SDL3. It includes fields for flags, pixel format, width, height, pitch, pixel data pointer, reference count, and reserved space. The pitch represents the number of bytes between rows of pixels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Surface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct SDL_Surface\n{\n    SDL_SurfaceFlags flags;     /**< The flags of the surface, read-only */\n    SDL_PixelFormat format;     /**< The format of the surface, read-only */\n    int w;                      /**< The width of the surface, read-only. */\n    int h;                      /**< The height of the surface, read-only. */\n    int pitch;                  /**< The distance in bytes between rows of pixels, read-only */\n    void *pixels;               /**< A pointer to the pixels of the surface, the pixels are writeable if non-NULL */\n\n    int refcount;               /**< Application reference count, used when freeing surface */\n\n    void *reserved;             /**< Reserved for internal use */\n};\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV_RW Syntax\nDESCRIPTION: Defines the syntax for the SDL_LoadWAV_RW function, which loads audio data from a WAVE file. It specifies the parameters: src (SDL_RWops data source), freesrc (flag to free the source), spec (SDL_AudioSpec for audio format), audio_buf (pointer to audio data buffer), and audio_len (pointer to audio data length).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadWAV_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioSpec* SDL_LoadWAV_RW(SDL_RWops * src,\n                              int freesrc,\n                              SDL_AudioSpec * spec,\n                              Uint8 ** audio_buf,\n                              Uint32 * audio_len);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetSurfaceBlendMode Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetSurfaceBlendMode function, which sets the blend mode for blit operations on an SDL_Surface. It takes a pointer to the SDL_Surface and an SDL_BlendMode as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetSurfaceBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode blendMode);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SDL_HapticDirection in C\nDESCRIPTION: Shows examples of how to use the SDL_HapticDirection structure with different coordinate systems (cartesian, polar, and spherical) to represent force coming from the south. Includes setting the type and direction parameters for each encoding.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticDirection.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n SDL_HapticDirection direction;\n\n // Cartesian directions\n direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.\n direction.dir[0] = 0; // X position\n direction.dir[1] = 1; // Y position\n // Assuming the device has 2 axes, we don't need to specify third parameter.\n\n // Polar directions\n direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.\n direction.dir[0] = 18000; // Polar only uses first parameter\n\n // Spherical coordinates\n direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding\n direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.\n```\n\n----------------------------------------\n\nTITLE: SDL_UserEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the structure of SDL_UserEvent, which is used to represent user-defined events in SDL. It includes fields for event type, timestamp, window ID, user-defined code, and two data pointers. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UserEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_UserEvent\n{\n    Uint32 type;        /**< SDL_EVENT_USER through SDL_EVENT_LAST-1, Uint32 because these are not in the SDL_EventType enumeration */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The associated window if any */\n    Sint32 code;        /**< User defined event code */\n    void *data1;        /**< User defined data pointer */\n    void *data2;        /**< User defined data pointer */\n} SDL_UserEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateGPUSampler Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_CreateGPUSampler function. It takes a SDL_GPUDevice pointer and a pointer to SDL_GPUSamplerCreateInfo as input and returns a pointer to SDL_GPUSampler. The function creates a sampler object to be used when binding textures in a graphics workflow.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUSampler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUSampler * SDL_CreateGPUSampler(\n    SDL_GPUDevice *device,\n    const SDL_GPUSamplerCreateInfo *createinfo);\n```\n\n----------------------------------------\n\nTITLE: SDL_FillSurfaceRects Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_FillSurfaceRects function in C. It takes an SDL_Surface pointer, an array of SDL_Rect structures, the number of rectangles in the array, and a Uint32 color as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FillSurfaceRects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_FillSurfaceRects(SDL_Surface *dst, const SDL_Rect *rects, int count, Uint32 color);\n```\n\n----------------------------------------\n\nTITLE: Loading Animation from SDL_IOStream in C\nDESCRIPTION: Loads an animation from an SDL_IOStream. Requires SDL_image library. The function takes an SDL_IOStream pointer as input and a boolean value to determine whether to close the stream after reading. Returns a pointer to an IMG_Animation object or NULL on error. Remember to free the animation using IMG_FreeAnimation when done.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadAnimation_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimation_IO(SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Query Haptic Device Features in C\nDESCRIPTION: This code snippet demonstrates how to use SDL_HapticQuery to get the supported features of a haptic device. The function takes an SDL_Haptic pointer as input and returns an unsigned integer representing the supported features in a bitwise manner. The returned value can be checked against SDL_HAPTIC_* flags to determine device capabilities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticQuery.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nunsigned int SDL_HapticQuery(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Mix_LoadWAV Syntax in C\nDESCRIPTION: This snippet shows the syntax for the Mix_LoadWAV function, which loads an audio file into a Mix_Chunk structure.\nThe function takes a file path as input and returns a pointer to the newly created Mix_Chunk, or NULL if an error occurred.\nIt requires SDL_mixer to be initialized and the SDL_mixer header file to be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_LoadWAV.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMix_Chunk * Mix_LoadWAV(const char *file);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertSurfaceAndColorspace Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_ConvertSurfaceAndColorspace function in C. It takes a SDL_Surface pointer, a SDL_PixelFormat, a SDL_Palette pointer, a SDL_Colorspace, and a SDL_PropertiesID as input, and returns a new SDL_Surface pointer.  The function converts the existing surface to the specified format and colorspace.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ConvertSurfaceAndColorspace.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_ConvertSurfaceAndColorspace(SDL_Surface *surface, SDL_PixelFormat format, SDL_Palette *palette, SDL_Colorspace colorspace, SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitAsyncIOResult Syntax (C)\nDESCRIPTION: Defines the function signature for SDL_WaitAsyncIOResult, which waits for a completed task in an asynchronous I/O queue. The function takes a queue, an outcome pointer to store the result, and a timeout value in milliseconds. It returns true if a task completed and false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitAsyncIOResult.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitAsyncIOResult(SDL_AsyncIOQueue *queue, SDL_AsyncIOOutcome *outcome, Sint32 timeoutMS);\n```\n\n----------------------------------------\n\nTITLE: SDL_IOWhence Enum Definition in C\nDESCRIPTION: This code snippet defines the SDL_IOWhence enum, which specifies the origin for seek operations within an SDL_IOStream. The enum includes SDL_IO_SEEK_SET (seek from the beginning), SDL_IO_SEEK_CUR (seek from the current position), and SDL_IO_SEEK_END (seek from the end). This enum is available since SDL 3.2.0 and mirrors the behavior of the 'whence' argument in functions like `fseek` and `lseek`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOWhence.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_IOWhence\n{\n    SDL_IO_SEEK_SET,  /**< Seek from the beginning of data */\n    SDL_IO_SEEK_CUR,  /**< Seek relative to current read point */\n    SDL_IO_SEEK_END   /**< Seek relative to the end of data */\n} SDL_IOWhence;\n```\n\n----------------------------------------\n\nTITLE: SDL_AsyncIOFromFile Syntax\nDESCRIPTION: Creates a new SDL_AsyncIO object for reading from and/or writing to a named file.  The 'file' parameter specifies the filename as a UTF-8 string. The 'mode' parameter specifies how the file should be opened, supporting modes like \"r\", \"w\", \"r+\", and \"w+\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AsyncIOFromFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AsyncIO * SDL_AsyncIOFromFile(const char *file, const char *mode);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Stream Gain in SDL3\nDESCRIPTION: Retrieves the gain (volume) of an audio stream. The function takes an SDL_AudioStream pointer as input and returns a float representing the gain.  A return value of -1.0f indicates failure, and SDL_GetError() can provide more information.  The stream-specific mutex is held during execution, making it thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamGain.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetAudioStreamGain(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUVertexElementFormat enum in C\nDESCRIPTION: This C code defines the SDL_GPUVertexElementFormat enum, which is used to specify the format of a vertex attribute within SDL3's GPU rendering pipeline. The enum includes options for various data types like integers, floats, and normalized values in different sizes (8-bit, 16-bit, and 32-bit). The values correspond to the data type and number of components for each vertex attribute, enabling precise control over vertex data layout.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUVertexElementFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUVertexElementFormat\n{\n    SDL_GPU_VERTEXELEMENTFORMAT_INVALID,\n\n    /* 32-bit Signed Integers */\n    SDL_GPU_VERTEXELEMENTFORMAT_INT,\n    SDL_GPU_VERTEXELEMENTFORMAT_INT2,\n    SDL_GPU_VERTEXELEMENTFORMAT_INT3,\n    SDL_GPU_VERTEXELEMENTFORMAT_INT4,\n\n    /* 32-bit Unsigned Integers */\n    SDL_GPU_VERTEXELEMENTFORMAT_UINT,\n    SDL_GPU_VERTEXELEMENTFORMAT_UINT2,\n    SDL_GPU_VERTEXELEMENTFORMAT_UINT3,\n    SDL_GPU_VERTEXELEMENTFORMAT_UINT4,\n\n    /* 32-bit Floats */\n    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT,\n    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2,\n    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3,\n    SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4,\n\n    /* 8-bit Signed Integers */\n    SDL_GPU_VERTEXELEMENTFORMAT_BYTE2,\n    SDL_GPU_VERTEXELEMENTFORMAT_BYTE4,\n\n    /* 8-bit Unsigned Integers */\n    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2,\n    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4,\n\n    /* 8-bit Signed Normalized */\n    SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM,\n    SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM,\n\n    /* 8-bit Unsigned Normalized */\n    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM,\n    SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM,\n\n    /* 16-bit Signed Integers */\n    SDL_GPU_VERTEXELEMENTFORMAT_SHORT2,\n    SDL_GPU_VERTEXELEMENTFORMAT_SHORT4,\n\n    /* 16-bit Unsigned Integers */\n    SDL_GPU_VERTEXELEMENTFORMAT_USHORT2,\n    SDL_GPU_VERTEXELEMENTFORMAT_USHORT4,\n\n    /* 16-bit Signed Normalized */\n    SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM,\n    SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM,\n\n    /* 16-bit Unsigned Normalized */\n    SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM,\n    SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM,\n\n    /* 16-bit Floats */\n    SDL_GPU_VERTEXELEMENTFORMAT_HALF2,\n    SDL_GPU_VERTEXELEMENTFORMAT_HALF4\n} SDL_GPUVertexElementFormat;\n```\n\n----------------------------------------\n\nTITLE: Get Process Environment in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax for retrieving the process environment using SDL_GetEnvironment in SDL3. It returns a pointer to the environment or NULL on failure. The environment is initialized at application start and not affected by standard setenv/unsetenv calls after that point.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetEnvironment.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Environment * SDL_GetEnvironment(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetError Usage Example in C\nDESCRIPTION: Illustrates a common usage pattern for SDL_SetError within an error-checking block. If an error occurs (indicated by error_code), SDL_SetError is called to set the error message, and the function returns false.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetError.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nif (error_code) {\n    return SDL_SetError(\"This operation has failed: %d\", error_code);\n}\n```\n\n----------------------------------------\n\nTITLE: Get Clipboard Text in C\nDESCRIPTION: This C code retrieves UTF-8 text from the clipboard using SDL_GetClipboardText. The caller is responsible for freeing the returned memory using SDL_free after use, even if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetClipboardText.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nchar * SDL_GetClipboardText(void);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Input Area with SDL_SetTextInputArea in C\nDESCRIPTION: Sets the area for Unicode text input within a specified SDL window. It takes the window, a rectangle representing the input area, and the cursor offset as parameters. Returns true on success or false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTextInputArea.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetTextInputArea(SDL_Window *window, const SDL_Rect *rect, int cursor);\n```\n\n----------------------------------------\n\nTITLE: SDL Event Filter for Mobile Devices in C\nDESCRIPTION: This code demonstrates how to use an SDL event filter to catch mobile-specific events immediately. It sets up a filter that checks for `SDL_APP_WILLENTERBACKGROUND` and frees resources to prevent the OS from terminating the application. `SDL_AddEventWatch` adds the filter to the event processing system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nint SDLCALL myEventFilter(void *userdata, SDL_Event * event)\n{\n    if (event->type == SDL_APP_WILLENTERBACKGROUND) {\n        // free up resources, DON'T DRAW ANY MORE until you're in the foreground again!\n    }\n    // etc\n    return 1;\n}\n\n// somewhere near startup...\n\n// this calls myEventFilter(data, event) as soon as event is generated.\nSDL_AddEventWatch(myEventFilter, data);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAudioStreamGetCallback Syntax (C)\nDESCRIPTION: Defines the syntax for setting a callback that runs when data is requested from an audio stream using SDL_SetAudioStreamGetCallback. The function takes an SDL_AudioStream pointer, a callback function pointer (SDL_AudioStreamCallback), and a userdata pointer as arguments. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioStreamGetCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAudioStreamGetCallback(SDL_AudioStream *stream, SDL_AudioStreamCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_asprintf Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_asprintf function in C. It takes a pointer to a char pointer, a format string, and a variable number of arguments, similar to printf. The function allocates memory for the formatted string and sets the char pointer to point to the allocated memory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_asprintf.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_asprintf(char **strp, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Set YUV Conversion Mode SDL C\nDESCRIPTION: Sets the YUV conversion mode for SDL. This function takes an SDL_YUV_CONVERSION_MODE enum as input, which determines how YUV color spaces are converted within the SDL library. It's available since SDL 2.0.8 and is defined in SDL_surface.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetYUVConversionMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED in C\nDESCRIPTION: Defines the SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED hint macro. This hint controls whether the window is activated when the SDL_RaiseWindow function is called. The value can be set to \"0\" or \"1\" to disable or enable activation, respectively. This hint is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED \"SDL_WINDOW_ACTIVATE_WHEN_RAISED\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_APP_ID in C\nDESCRIPTION: This code snippet defines the SDL_HINT_APP_ID constant as a string literal \"SDL_APP_ID\". This constant is used as a key to set the application ID hint before initializing SDL. It affects how the application's windows are grouped and identified by the operating system's desktop compositor.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_APP_ID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_APP_ID \"SDL_APP_ID\"\n```\n\n----------------------------------------\n\nTITLE: Set Music Finished Callback - SDL_mixer (C)\nDESCRIPTION: Sets a callback function to be executed when the currently playing music finishes or is halted using `Mix_HaltMusic`. The callback, `music_finished`, is a `Mix_MusicFinishedCallback` function. A `NULL` pointer disables the callback. This is part of the SDL_mixer library and available since version 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_HookMusicFinished.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HookMusicFinished(Mix_MusicFinishedCallback music_finished);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurface9Grid Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_BlitSurface9Grid function in C. This function performs a scaled blit using the 9-grid algorithm to a destination surface. It takes source and destination surfaces, source and destination rectangles, corner dimensions, a scale factor, and a scale mode as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitSurface9Grid.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_BlitSurface9Grid(SDL_Surface *src, const SDL_Rect *srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);\n```\n\n----------------------------------------\n\nTITLE: Setting a GPU Buffer Name in C with SDL_SetGPUBufferName\nDESCRIPTION: This code snippet demonstrates how to set a name for a GPU buffer using the SDL_SetGPUBufferName function in SDL3. It takes an SDL_GPUDevice, an SDL_GPUBuffer, and a const char* as input. The provided string is used to label the buffer. This function is not thread-safe, so ensure exclusive access to the buffer while calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPUBufferName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetGPUBufferName(\n    SDL_GPUDevice *device,\n    SDL_GPUBuffer *buffer,\n    const char *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowModal Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetWindowModal function in C. It takes an SDL_Window pointer and a boolean value as input, setting the modal status of the given window.  It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowModal.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowModal(SDL_Window *window, bool modal);\n```\n\n----------------------------------------\n\nTITLE: Implementing SDL2's SDL_CreateRGBSurface in SDL3\nDESCRIPTION: This code snippet reimplements the SDL2 `SDL_CreateRGBSurface` function using SDL3's `SDL_CreateSurface` and `SDL_GetPixelFormatForMasks`. This allows users to maintain compatibility while leveraging the new SDL3 API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_38\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *SDL_CreateRGBSurface(Uint32 flags, int width, int height, int depth, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)\n{\n    return SDL_CreateSurface(width, height,\n            SDL_GetPixelFormatForMasks(depth, Rmask, Gmask, Bmask, Amask));\n}\n```\n\n----------------------------------------\n\nTITLE: Set or Query Music Volume - SDL_mixer\nDESCRIPTION: This function sets the volume of the music channel in SDL_mixer. The volume parameter accepts values from 0 (silence) to MIX_MAX_VOLUME (full volume, 128). Passing -1 will query the current volume without changing it. The function returns the previous volume setting.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_VolumeMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_VolumeMusic(int volume);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateThread Function Definition in C\nDESCRIPTION: Defines the SDL_CreateThread function, which creates a new thread. It takes a function pointer (SDL_ThreadFunction), a thread name, and a void pointer as input. Returns an SDL_Thread pointer on success or NULL on failure. Requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateThread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nextern DECLSPEC SDL_Thread *SDLCALL\nSDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_NET_WM_PING Macro in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_NET_WM_PING macro, which corresponds to the string \"SDL_VIDEO_X11_NET_WM_PING\". This macro is used to set a hint that controls whether SDL should use the X11 _NET_WM_PING protocol to ensure the window manager knows the application is responsive.  The hint should be set before window creation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_X11_NET_WM_PING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_NET_WM_PING \"SDL_VIDEO_X11_NET_WM_PING\"\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenAudioDeviceStream Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_OpenAudioDeviceStream function in C. It takes an audio device ID, an audio specification, a callback function, and user data as input. It returns a pointer to an SDL_AudioStream on success or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenAudioDeviceStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioStream * SDL_OpenAudioDeviceStream(SDL_AudioDeviceID devid, const SDL_AudioSpec *spec, SDL_AudioStreamCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV Example\nDESCRIPTION: Shows an example using SDL_LoadWAV, which simplifies loading audio data from a file. This macro internally uses SDL_RWFromFile and SDL_LoadWAV_RW. The example loads audio data from \"sample.wav\" and stores the audio specification, buffer, and length in the provided variables.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadWAV_RW.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nSDL_LoadWAV(\"sample.wav\", &spec, &buf, &len);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_version struct in C\nDESCRIPTION: This code snippet defines the SDL_version struct, which contains the major, minor, and patch version numbers of the SDL library. It's a fundamental data structure for versioning SDL applications.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_version.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_version\n{\n    Uint8 major;        /**< major version */\n    Uint8 minor;        /**< minor version */\n    Uint8 patch;        /**< update version */\n} SDL_version;\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Path in SDL3 (C)\nDESCRIPTION: Retrieves the implementation-dependent path of a joystick. It requires a valid SDL_Joystick pointer obtained from SDL_OpenJoystick as input. The function returns a const char* representing the path, or NULL if no path can be found. SDL_GetError() can be called for more error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickPath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetJoystickPath(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_RumbleGamepadTriggers Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RumbleGamepadTriggers function. This function initiates a rumble effect in the gamepad's triggers, allowing independent control over the left and right trigger rumble motors with specified intensity and duration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RumbleGamepadTriggers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RumbleGamepadTriggers(SDL_Gamepad *gamepad, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseButtonEvent Structure Definition in C\nDESCRIPTION: Defines the structure for handling mouse button events. It includes information about the event type (down or up), timestamp, window ID, mouse ID, button that was pressed/released, whether it was a press or release event, click count, and the X and Y coordinates of the mouse relative to the window. This structure is used to pass mouse button event data to event handlers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseButtonEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MouseButtonEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_MOUSE_BUTTON_DOWN or SDL_EVENT_MOUSE_BUTTON_UP */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The window with mouse focus, if any */\n    SDL_MouseID which;  /**< The mouse instance id in relative mode, SDL_TOUCH_MOUSEID for touch events, or 0 */\n    Uint8 button;       /**< The mouse button index */\n    bool down;          /**< true if the button is pressed */\n    Uint8 clicks;       /**< 1 for single-click, 2 for double-click, etc. */\n    Uint8 padding;\n    float x;            /**< X coordinate, relative to window */\n    float y;            /**< Y coordinate, relative to window */\n} SDL_MouseButtonEvent;\n```\n\n----------------------------------------\n\nTITLE: Check if Text Input is Active (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_IsTextInputActive function, which is used to check if Unicode text input events are currently enabled in SDL. It takes no arguments and returns an SDL_bool value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsTextInputActive.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IsTextInputActive(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_qsort_r Usage Example\nDESCRIPTION: This example demonstrates how to use `SDL_qsort_r` to sort an array of structs based on a key, with the sorting order (increasing or decreasing) passed as user data to the comparison function. It defines an enum for sorting methods, a struct containing a key and a string, and a comparison function that utilizes the user data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_qsort_r.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum {\n    sort_increasing,\n    sort_decreasing,\n} sort_method;\n\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *userdata, const void *a, const void *b)\n{\n    sort_method method = (sort_method)(uintptr_t)userdata;\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->key < B->key) {\n        return (method == sort_increasing) ? -1 : 1;\n    } else if (B->key < A->key) {\n        return (method == sort_increasing) ? 1 : -1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }\n};\n\nSDL_qsort_r(values, SDL_arraysize(values), sizeof(values[0]), compare, (const void *)(uintptr_t)sort_increasing);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickGetPlayerIndex Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickGetPlayerIndex function in C. It takes a pointer to an SDL_Joystick and returns an integer representing the player index or -1 if unavailable. The joystick parameter must be obtained from SDL_JoystickOpen().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickGetPlayerIndex(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Retrieve Window Data Pointer using SDL_GetWindowData in C\nDESCRIPTION: This code snippet demonstrates how to retrieve a data pointer associated with a window using the `SDL_GetWindowData` function. It requires a valid `SDL_Window` pointer and a `const char *name` representing the name of the data pointer to retrieve. The function returns a `void *` representing the associated data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowData.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid* SDL_GetWindowData(SDL_Window * window,\n                        const char *name);\n```\n\n----------------------------------------\n\nTITLE: Release GPU Shader in SDL3 (C)\nDESCRIPTION: Releases the specified GPU shader associated with a given GPU device. The shader will be freed when it is safe to do so. It takes an SDL_GPUDevice pointer representing the GPU context and an SDL_GPUShader pointer representing the shader to be destroyed as parameters. After calling this function, the shader should not be referenced.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseGPUShader.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseGPUShader(\n    SDL_GPUDevice *device,\n    SDL_GPUShader *shader);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV_RW Example with SDL_RWFromFile\nDESCRIPTION: Demonstrates how to use SDL_LoadWAV_RW with SDL_RWFromFile to load audio data from a file. It opens \"sample.wav\" in read-binary mode, loads the audio data, and specifies that the data source should be freed after loading.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadWAV_RW.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_LoadWAV_RW(SDL_RWFromFile(\"sample.wav\", \"rb\"), 1, &spec, &buf, &len);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadObject Syntax\nDESCRIPTION: Shows the syntax for the SDL_LoadObject function, which dynamically loads a shared object and returns a pointer to it. The `sofile` parameter specifies the path to the shared object file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadObject.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_SharedObject * SDL_LoadObject(const char *sofile);\n```\n\n----------------------------------------\n\nTITLE: Set Gamepad Events Enabled in SDL3\nDESCRIPTION: This C code snippet demonstrates how to enable or disable gamepad event processing using SDL_SetGamepadEventsEnabled. When disabled, gamepad state must be updated manually using SDL_UpdateGamepads().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGamepadEventsEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetGamepadEventsEnabled(bool enabled);\n```\n\n----------------------------------------\n\nTITLE: SDL_PollEvent Syntax in C\nDESCRIPTION: Shows the syntax of the SDL_PollEvent function, which is used to retrieve events from the SDL event queue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PollEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PollEvent(SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: Query/Change Game Controller Event State in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_GameControllerEventState function, which is used to query or change the current state of game controller events. The 'state' parameter can be SDL_QUERY, SDL_IGNORE, or SDL_ENABLE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerEventState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerEventState(int state);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderFillRect Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_RenderFillRect function, which fills a rectangle on the current rendering target with the current drawing color. It takes a renderer and a rectangle as input. It returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderFillRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderFillRect(SDL_Renderer * renderer,\n                       const SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderCoordinatesToWindow Syntax (C)\nDESCRIPTION: The SDL_RenderCoordinatesToWindow function converts a point in render coordinates to window coordinates. It takes an SDL_Renderer, the x and y coordinates in render space, and pointers to store the resulting window x and y coordinates. It returns true on success and false on failure. Dependencies include SDL3/SDL_render.h\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderCoordinatesToWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderCoordinatesToWindow(SDL_Renderer *renderer, float x, float y, float *window_x, float *window_y);\n```\n\n----------------------------------------\n\nTITLE: SDL_SIMDAlloc Syntax in C\nDESCRIPTION: This snippet shows the syntax for using SDL_SIMDAlloc to allocate memory. The function takes the size of the memory block to allocate as input and returns a pointer to the allocated memory, which may be NULL if allocation fails. The allocated memory is aligned and padded for optimal SIMD performance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SIMDAlloc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_SIMDAlloc(const size_t len);\n```\n\n----------------------------------------\n\nTITLE: Run Haptic Effect in SDL3\nDESCRIPTION: Runs a specified haptic effect on a given SDL_Haptic device. The effect is identified by its ID (SDL_HapticEffectID) and can be set to repeat a certain number of times (iterations) or infinitely using SDL_HAPTIC_INFINITY. The function returns true if successful, or false if an error occurred; in case of error, SDL_GetError() can be called to get more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RunHapticEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RunHapticEffect(SDL_Haptic *haptic, SDL_HapticEffectID effect, Uint32 iterations);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioStreamGet Syntax\nDESCRIPTION: Retrieves converted/resampled audio data from the specified audio stream. The function takes a stream, a buffer to fill, and the maximum number of bytes to read, returning the number of bytes read or -1 on error. It requires a valid SDL_AudioStream pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioStreamGet.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AudioStreamGet(SDL_AudioStream *stream, void *buf, int len);\n```\n\n----------------------------------------\n\nTITLE: SDL_Texture Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_Texture structure in C, which is used to represent a texture in SDL. It includes members for the pixel format, width, height, and a reference count. This structure is used by SDL's rendering API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Texture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct SDL_Texture\n{\n    SDL_PixelFormat format;     /**< The format of the texture, read-only */\n    int w;                      /**< The width of the texture, read-only. */\n    int h;                      /**< The height of the texture, read-only. */\n\n    int refcount;               /**< Application reference count, used when freeing texture */\n};\n```\n\n----------------------------------------\n\nTITLE: Get Android Cache Path in C\nDESCRIPTION: Retrieves the application-specific cache directory path on Android. This function wraps the `android.content.Context.getCacheDir()` method. The returned path is a null-terminated string. Returns NULL on failure and SDL_GetError can be used for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidCachePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetAndroidCachePath(void);\n```\n\n----------------------------------------\n\nTITLE: Loading TGA Images from IO Stream\nDESCRIPTION: This C code snippet demonstrates the syntax for loading a TGA image directly from an SDL_IOStream using the IMG_LoadTGA_IO function. The function takes an SDL_IOStream as input and returns an SDL_Surface pointer, or NULL on error. It is part of the SDL_image library and available since version 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadTGA_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadTGA_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Set Custom Memory Functions with SDL_SetMemoryFunctions in C\nDESCRIPTION: This code snippet demonstrates the syntax for SDL_SetMemoryFunctions, which replaces SDL's default memory allocation functions (malloc, calloc, realloc, free) with custom implementations. The function takes four function pointers as arguments, each corresponding to one of the memory allocation functions. It is available since SDL 2.0.7.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetMemoryFunctions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetMemoryFunctions(SDL_malloc_func malloc_func,\n                           SDL_calloc_func calloc_func,\n                           SDL_realloc_func realloc_func,\n                           SDL_free_func free_func);\n```\n\n----------------------------------------\n\nTITLE: Get Font Line Skip SDL_ttf in C\nDESCRIPTION: Retrieves the recommended spacing between lines of text for a given font using TTF_GetFontLineSkip. The function takes a pointer to a TTF_Font structure as input and returns an integer representing the line skip value. It's part of the SDL_ttf library and is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontLineSkip.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontLineSkip(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddTimer Syntax in C\nDESCRIPTION: Defines the syntax for using SDL_AddTimer, which is used to call a callback function at a future time. Requires SDL_INIT_TIMER to be passed to SDL_Init(). The callback is executed on a separate thread. The callback receives the timer interval and a user-supplied parameter, and should return the next timer interval or 0 to cancel the timer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AddTimer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TimerID SDL_AddTimer(Uint32 interval,\n                         SDL_TimerCallback callback,\n                         void *param);\n```\n\n----------------------------------------\n\nTITLE: Enable Screen Saver in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_EnableScreenSaver function in SDL3. It allows the screen to be blanked by a screen saver. The function returns a boolean indicating success or failure, with SDL_GetError providing more information on failures. It is available since SDL 3.2.0 and should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EnableScreenSaver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_EnableScreenSaver(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertSurface Syntax in C\nDESCRIPTION: The SDL_ConvertSurface function converts an existing SDL_Surface to a new surface of the specified pixel format. It takes the source surface, the desired pixel format, and unused flags as input. The function returns a pointer to the new surface, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ConvertSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface* SDL_ConvertSurface\n    (SDL_Surface * src, const SDL_PixelFormat * fmt, Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTicks Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetTicks function in C, which takes no arguments and returns a Uint32 representing milliseconds since SDL initialization. The return value wraps after approximately 49 days.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTicks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetTicks(void);\n```\n\n----------------------------------------\n\nTITLE: Setting Surface Blend Mode in C\nDESCRIPTION: Sets the blend mode for a given SDL_Surface. The function takes a pointer to the SDL_Surface and an SDL_BlendMode as input. It returns 0 on success and a negative error code on failure, with SDL_GetError providing more details in case of failure. Setting the blend mode to SDL_BLENDMODE_NONE disables blending.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetSurfaceBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetSurfaceBlendMode(SDL_Surface * surface,\n                            SDL_BlendMode blendMode);\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowSaveFileDialog Syntax (C)\nDESCRIPTION: Shows a dialog that lets the user choose a new or existing file on their filesystem. It's an asynchronous function, returning immediately and passing the result to a callback function. The callback may be invoked from a different thread. Requires SDL3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowSaveFileDialog.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ShowSaveFileDialog(SDL_DialogFileCallback callback, void *userdata, SDL_Window *window, const SDL_DialogFileFilter *filters, int nfilters, const char *default_location);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateTray Syntax\nDESCRIPTION: Shows the syntax for the `SDL_CreateTray` function. It takes an `SDL_Surface` (icon) and a tooltip string as input and returns an `SDL_Tray` pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateTray.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Tray * SDL_CreateTray(SDL_Surface *icon, const char *tooltip);\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Name by Index in C\nDESCRIPTION: This C code snippet shows the syntax for using SDL_GameControllerNameForIndex to retrieve the name of a game controller based on its index. The function takes an integer `joystick_index` as input, which represents the device index of the controller. It returns a `const char*` representing the name of the controller or NULL if there's no name or the index is invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerNameForIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GameControllerNameForIndex(int joystick_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAudioStreamFormat Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetAudioStreamFormat function in C. This function allows for changing the input and output audio formats of a given audio stream. The function takes the audio stream and the new source and destination audio specifications as input parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioStreamFormat.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetAudioStreamFormat(SDL_AudioStream *stream, const SDL_AudioSpec *src_spec, const SDL_AudioSpec *dst_spec);\n```\n\n----------------------------------------\n\nTITLE: Handling Scancodes for Movement in SDL3 (C)\nDESCRIPTION: This snippet demonstrates how to use SDL_Scancodes to detect key presses for movement, treating the keyboard as a joystick with specific physical key locations. It checks for the 'W' and 'S' keys (on a US QWERTY layout) to determine forward or backward movement. Dependencies include SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/BestKeyboardPractices.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/* returns 1 if moving forward with this keypress, -1 if moving backward, 0 if not moving. */\nint direction_user_should_move(const SDL_Event *e)\n{\n    SDL_assert(e->type == SDL_EVENT_KEY_DOWN); /* just checking key presses here... */\n    if (e->key.scancode == SDL_SCANCODE_W) {\n        return 1;  /* pressed what would be \"W\" on a US QWERTY keyboard. Move forward! */\n    } else if (e->key.scancode == SDL_SCANCODE_S) {\n        return -1;  /* pressed what would be \"S\" on a US QWERTY keyboard. Move backward! */\n    }\n\n    /* (We aren't doing it here, but extra credit if your code sees both keys are pressed and cancel each other out!) */\n\n    return 0;  /* wasn't key in W or S location, don't move. */\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Log Output Function SDL3 (C)\nDESCRIPTION: Replaces SDL's default log output function with a custom function provided by the user. The callback function receives log messages instead of the default output method. A void pointer is passed to the callback function as user data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetLogOutputFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetLogOutputFunction(SDL_LogOutputFunction callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Mappings in C\nDESCRIPTION: Retrieves an array of gamepad mapping strings using SDL_GetGamepadMappings. The function populates the provided 'count' pointer with the number of mappings returned, or it can be NULL if the count is not needed. The returned array must be freed with SDL_free after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadMappings.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar ** SDL_GetGamepadMappings(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicGet Syntax in C\nDESCRIPTION: Retrieves the current value of an atomic variable. It takes a pointer to an SDL_atomic_t variable as input and returns the integer value currently stored in the atomic variable. This function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicGet.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AtomicGet(SDL_atomic_t *a);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasEvent Syntax in C\nDESCRIPTION: Defines the syntax of the SDL_HasEvent function in C. This function checks for the presence of a specific event type within the SDL event queue. It takes an event type as input and returns a boolean indicating whether the event type is present.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasEvent(Uint32 type);\n```\n\n----------------------------------------\n\nTITLE: Get Music Type in SDL_mixer (C)\nDESCRIPTION: Retrieves the format (Mix_MusicType) of a mixer music object. If the music object is NULL, it queries the currently playing music. It is available since SDL_mixer 2.0.0. The music object to query or NULL for the currently playing music.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_MusicType Mix_GetMusicType(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateSemaphore Syntax (C)\nDESCRIPTION: Defines the syntax for creating a semaphore in SDL3. It shows the function signature with its parameter, initial_value, which specifies the starting value of the semaphore.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateSemaphore.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Semaphore * SDL_CreateSemaphore(Uint32 initial_value);\n```\n\n----------------------------------------\n\nTITLE: Set Music Position in SDL_mixer (C)\nDESCRIPTION: Sets the current playback position of the music stream, specified in seconds. This function supports MOD, WAV, OGG, FLAC, and MP3 formats. Use SDL_GetError() to retrieve error information if the function fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetMusicPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_SetMusicPosition(double position);\n```\n\n----------------------------------------\n\nTITLE: Retrieving User's Preferred Locales in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetPreferredLocales function from SDL3. It takes a pointer to an integer as input, which will be populated with the number of locales returned. The function returns a NULL-terminated array of locale pointers, which must be freed with SDL_free when no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPreferredLocales.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Locale ** SDL_GetPreferredLocales(int *count);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_AudioCVT structure for conversion using SDL_BuildAudioCVT (C)\nDESCRIPTION: This code snippet demonstrates the syntax for initializing an SDL_AudioCVT structure using the SDL_BuildAudioCVT function in the SDL2 library. It requires the SDL_audio.h header file. The function takes source and destination audio formats, channel counts, and sample rates as input and prepares the cvt structure for audio conversion, returning 1 if a conversion is needed, 0 if not, and a negative error code upon failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_BuildAudioCVT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_BuildAudioCVT(SDL_AudioCVT * cvt,\n                      SDL_AudioFormat src_format,\n                      Uint8 src_channels,\n                      int src_rate,\n                      SDL_AudioFormat dst_format,\n                      Uint8 dst_channels,\n                      int dst_rate);\n```\n\n----------------------------------------\n\nTITLE: Create Renderer Text Engine in SDL_ttf (C)\nDESCRIPTION: Creates a text engine for drawing text on an SDL renderer. It takes an SDL_Renderer pointer as input and returns a TTF_TextEngine pointer. The returned TTF_TextEngine object is used for rendering text on the specified renderer. Returns NULL on failure and SDL_GetError() can be used for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateRendererTextEngine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateRendererTextEngine(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Condition Structure in C\nDESCRIPTION: Defines the SDL_Condition structure as an opaque type. This structure is used to manage condition variables, which allow threads to block and wait until a specific condition is signaled. It is typically used in conjunction with an SDL_Mutex for thread synchronization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Condition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Condition SDL_Condition;\n```\n\n----------------------------------------\n\nTITLE: Setting Stereo Panning in SDL_mixer (C)\nDESCRIPTION: Demonstrates how to use Mix_SetPanning to create a stereo panning effect by setting the left and right channel volumes inversely to each other. The 'left' parameter determines the volume of the left channel, and the right channel volume is calculated as 255 - left.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetPanning.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_SetPanning(channel, left, 255 - left);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Vertex Structure in C\nDESCRIPTION: This code snippet defines the SDL_Vertex structure, which is used to specify the attributes of a vertex for rendering. It includes the vertex's position (SDL_FPoint), color (SDL_Color), and normalized texture coordinates (SDL_FPoint). This structure is found in SDL_render.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Vertex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Vertex\n{\n    SDL_FPoint position;        /**< Vertex position, in SDL_Renderer coordinates  */\n    SDL_Color  color;           /**< Vertex color */\n    SDL_FPoint tex_coord;       /**< Normalized texture coordinates, if needed */\n} SDL_Vertex;\n```\n\n----------------------------------------\n\nTITLE: Creating a 32-bit RGBSurface (C++)\nDESCRIPTION: Demonstrates how to create a 32-bit RGB surface using SDL_CreateRGBSurface in C++. It sets the flags to 0 and the RGBA masks to 0, which results in default values based on the depth.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateRGBSurface.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nSDL_CreateRGBSurface(0,w,h,32,0,0,0,0);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_AudioStream structure in C\nDESCRIPTION: Defines the SDL_AudioStream structure, an opaque handle that represents an audio stream. This is the core of the SDL3 audio interface for converting and manipulating audio data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioStream.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_AudioStream SDL_AudioStream;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowFromID Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetWindowFromID function in C. It takes a Uint32 window ID as input and returns a pointer to the corresponding SDL_Window. If no window with the given ID exists, it returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowFromID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetWindowFromID(Uint32 id);\n```\n\n----------------------------------------\n\nTITLE: Claim Window for GPU Device in SDL3 (C)\nDESCRIPTION: This C code snippet shows the syntax for the `SDL_ClaimWindowForGPUDevice` function in SDL3. It claims a specified SDL_Window for a given SDL_GPUDevice, creating a swapchain for it. It requires pointers to both the GPU device and the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClaimWindowForGPUDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ClaimWindowForGPUDevice(\n    SDL_GPUDevice *device,\n    SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTextureTyped_IO Syntax (C)\nDESCRIPTION: Defines the syntax of the IMG_LoadTextureTyped_IO function used to load an image from an SDL data source into a GPU texture using a specified file type. It takes an SDL_Renderer, an SDL_IOStream, a boolean to close the stream, and a file type string as parameters and returns an SDL_Texture pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadTextureTyped_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * IMG_LoadTextureTyped_IO(SDL_Renderer *renderer, SDL_IOStream *src, bool closeio, const char *type);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogDebug Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_LogDebug function in C. It takes a category (int), a format string (const char*), and a variable number of arguments. It is used to log a debug message to the SDL logging system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogDebug.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogDebug(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDL_BeginGPUComputePass Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_BeginGPUComputePass function, which is used to start a compute pass on a command buffer. It takes a command buffer, arrays of storage texture and buffer bindings, and their respective counts as input. The function returns a compute pass handle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BeginGPUComputePass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUComputePass * SDL_BeginGPUComputePass(\n    SDL_GPUCommandBuffer *command_buffer,\n    const SDL_GPUStorageTextureReadWriteBinding *storage_texture_bindings,\n    Uint32 num_storage_texture_bindings,\n    const SDL_GPUStorageBufferReadWriteBinding *storage_buffer_bindings,\n    Uint32 num_storage_buffer_bindings);\n```\n\n----------------------------------------\n\nTITLE: SDL_qsort Usage Example\nDESCRIPTION: This code demonstrates how to use SDL_qsort to sort an array of custom data structures. It defines a data structure, a comparison function, and then calls SDL_qsort with the array, its size, element size, and the comparison function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_qsort.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct {\n    int key;\n    const char *string;\n} data;\n\nint SDLCALL compare(const void *a, const void *b)\n{\n    const data *A = (const data *)a;\n    const data *B = (const data *)b;\n\n    if (A->n < B->n) {\n        return -1;\n    } else if (B->n < A->n) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\ndata values[] = {\n    { 3, \"third\" }, { 1, \"first\" }, { 2, \"second\" }\n};\n\nSDL_qsort(values, SDL_arraysize(values), sizeof(values[0]), compare);\n```\n\n----------------------------------------\n\nTITLE: Get Clipboard Text in SDL\nDESCRIPTION: Retrieves UTF-8 text from the system clipboard using SDL_GetClipboardText. The returned string must be freed with SDL_free() after use to prevent memory leaks. This function returns an empty string on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetClipboardText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetClipboardText(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteAsyncIO Syntax (C)\nDESCRIPTION: The `SDL_WriteAsyncIO` function starts an asynchronous write operation.  It takes an `SDL_AsyncIO` structure, a pointer to the data to write, the offset in the data source, the size of the data to write, an `SDL_AsyncIOQueue` to add the task to, and a user-defined pointer for task results. The function returns true on success, false on failure. `ptr` must remain valid until the write completes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteAsyncIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteAsyncIO(SDL_AsyncIO *asyncio, void *ptr, Uint64 offset, Uint64 size, SDL_AsyncIOQueue *queue, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Example Game Loop Structure\nDESCRIPTION: This C code illustrates a typical game loop structure. It initializes, handles events and frames in a loop, and then deinitializes. Platforms like iOS and Emscripten may require or prefer external control over this loop, which SDL3's callback system addresses.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/main-functions.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint main(int argc, char **argv)\n{\n    initialize();\n    while (keep_running()) {\n        handle_new_events();\n        do_one_frame_of_stuff();\n    }\n    deinitialize();\n}\n```\n\n----------------------------------------\n\nTITLE: Check for AVX CPU feature support in SDL3\nDESCRIPTION: This C code snippet shows the syntax for using the `SDL_HasAVX` function in SDL3. This function checks if the CPU has AVX features. It takes no arguments and returns a boolean value indicating whether AVX is supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasAVX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasAVX(void);\n```\n\n----------------------------------------\n\nTITLE: Saving SDL Surface to PNG with IMG_SavePNG in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_SavePNG function, which saves an SDL_Surface to a PNG image file using the SDL_image library.  It requires a valid SDL_Surface and a file path. The function returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_SavePNG.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint IMG_SavePNG(SDL_Surface *surface, const char *file);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowKeyboardGrab Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetWindowKeyboardGrab function, which allows setting the keyboard grab mode for a specified SDL_Window. The grabbed parameter determines whether keyboard input is captured by the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowKeyboardGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowKeyboardGrab(SDL_Window * window,\n                               SDL_bool grabbed);\n```\n\n----------------------------------------\n\nTITLE: Enumerate Properties Callback Example in SDL3 (C)\nDESCRIPTION: This C code example demonstrates how to use SDL3 to enumerate the display properties of every display. It initializes SDL, retrieves display properties, and uses SDL_EnumerateProperties with a custom callback function to log each property's name, type, and value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EnumerateProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Example program\n// Use SDL3 to enumerate the display properties of every display\n\n#include <SDL3/SDL_log.h>\n#include <SDL3/SDL_main.h>\n#include <SDL3/SDL_video.h>\n\n\nstatic void\nmy_enumerate_properties_callback(void *userdata, SDL_PropertiesID props, const char *name)\n{\n  SDL_PropertyType prop_type = SDL_GetPropertyType(props, name);\n\n  switch (prop_type) {\n    case SDL_PROPERTY_TYPE_POINTER:\n      SDL_Log(\"%s is a pointer poperty\", name);\n      break;\n    case SDL_PROPERTY_TYPE_STRING:\n      SDL_Log(\n        \"%s is a string property with value %s\", name, SDL_GetStringProperty(props, name, \"\"));\n      break;\n    case SDL_PROPERTY_TYPE_NUMBER:\n      SDL_Log(\"%s is a number property with value %\"SDL_PRIs64, name, SDL_GetNumberProperty(props, name, 0));\n      break;\n    case SDL_PROPERTY_TYPE_FLOAT:\n      SDL_Log(\"%s is a float property with value %f\", name, SDL_GetFloatProperty(props, name, 0.0f));\n      break;\n    case SDL_PROPERTY_TYPE_BOOLEAN:\n      SDL_Log(\n        \"%s is a boolean property with value %d\", name, SDL_GetBooleanProperty(props, name, false));\n      break;\n    case SDL_PROPERTY_TYPE_INVALID:\n    default:\n      SDL_Log(\"%s is an invalid property\", name);\n      break;\n  }\n}\n\n\nint\nmain(int argc, char** argv)\n{\n  if (!SDL_Init(SDL_INIT_VIDEO)) {\n    SDL_Log(\"Unable to initialize SDL: %s\", SDL_GetError());\n    return 0;\n  }\n\n  SDL_Log(\"SDL initialized\");\n\n  int num_displays;\n  SDL_DisplayID *displays = SDL_GetDisplays(&num_displays);\n  SDL_Log(\"Found %d displays.\", num_displays);\n\n  for(int i = 0; i < num_displays; i++) {\n    SDL_PropertiesID prop_id = SDL_GetDisplayProperties(displays[i]);\n    SDL_Log(\"Display %d has properties ID %d\", i, prop_id);\n\n    if(!SDL_EnumerateProperties(prop_id, my_enumerate_properties_callback, NULL)) {\n      SDL_Log(\"Error enumerating properties: %s.\", SDL_GetError());\n    }\n  }\n\n  SDL_free(displays);\n\n  return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Opening a Font with DPI in SDL_ttf (C)\nDESCRIPTION: Opens a font file using the specified file path, point size, horizontal DPI (hdpi), and vertical DPI (vdpi). The function returns a pointer to a TTF_Font structure if successful, or NULL if an error occurs. Remember to call TTF_CloseFont when the font is no longer needed to free the allocated resources.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_OpenFontDPI.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_Font * TTF_OpenFontDPI(const char *file, int ptsize, unsigned int hdpi, unsigned int vdpi);\n```\n\n----------------------------------------\n\nTITLE: Get OpenGL function by name using SDL_GL_GetProcAddress (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GL_GetProcAddress function used to retrieve an OpenGL function pointer. It takes the name of the OpenGL function as input and returns a void pointer, which must be cast to the appropriate function signature. This function is necessary when loading the GL library at runtime or when accessing OpenGL extensions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_GetProcAddress.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_GL_GetProcAddress(const char *proc);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Opacity with SDL_SetWindowOpacity in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetWindowOpacity function in C. It takes an SDL_Window pointer and a float value for opacity as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowOpacity.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowOpacity(SDL_Window * window, float opacity);\n```\n\n----------------------------------------\n\nTITLE: Get High Resolution Counter in SDL2 (C)\nDESCRIPTION: Retrieves the current value of the high-resolution counter using SDL_GetPerformanceCounter. This is typically used for profiling purposes. The return value is a Uint64 representing the counter value, which should be used in conjunction with SDL_GetPerformanceFrequency to calculate time differences.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPerformanceCounter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_GetPerformanceCounter(void);\n```\n\n----------------------------------------\n\nTITLE: Deinitialize SDL_ttf in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_Quit function, which deinitializes the SDL_ttf library. It does not take any arguments and returns void. Make sure to close all fonts before calling this function to avoid memory issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer from Window in C\nDESCRIPTION: Retrieves the SDL_Renderer associated with a provided SDL_Window. The function takes a SDL_Window pointer as input and returns a pointer to the SDL_Renderer if successful, or NULL if an error occurs. The user should check the return value and call SDL_GetError() for more details if NULL is returned.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_GetRenderer(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Solid_Wrapped Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderText_Solid_Wrapped function in C, which renders Latin1 text with word wrapping to an 8-bit surface. It takes a TTF_Font, a const char * for text, an SDL_Color for the foreground color, and a Uint32 for the wrap length as input and returns an SDL_Surface pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderText_Solid_Wrapped.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderText_Solid_Wrapped(TTF_Font *font,\n                const char *text, SDL_Color fg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Get OpenGL Swap Interval - C\nDESCRIPTION: Retrieves the current OpenGL context's swap interval using SDL_GL_GetSwapInterval. The function takes a pointer to an integer where the swap interval will be stored. The possible values are 0 (no sync), 1 (sync with vertical retrace), and -1 (late swaps happen immediately).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_GetSwapInterval.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GL_GetSwapInterval(int *interval);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS hint, which is a string constant that can be used to set the hint controlling whether Nintendo Switch Joy-Con controllers are combined into a single controller when using the HIDAPI driver. The hint must be set before initializing joysticks and gamepads. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS \"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GPURenderStateDesc Structure Definition in C\nDESCRIPTION: Defines the structure SDL_GPURenderStateDesc, which describes the GPU render state, including fragment shader, sampler bindings, storage textures, and storage buffers. The structure is intended to be initialized using SDL_INIT_INTERFACE(). It is available since SDL 3.4.0 and used with SDL_CreateGPURenderState.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPURenderStateDesc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPURenderStateDesc\n{\n    Uint32 version;                 /**< the version of this interface */\n\n    SDL_GPUShader *fragment_shader; /**< The fragment shader to use when this render state is active */\n\n    Sint32 num_sampler_bindings;    /**< The number of additional fragment samplers to bind when this render state is active */\n    const SDL_GPUTextureSamplerBinding *sampler_bindings;   /**< Additional fragment samplers to bind when this render state is active */\n\n    Sint32 num_storage_textures;    /**< The number of storage textures to bind when this render state is active */\n    SDL_GPUTexture *const *storage_textures;    /**< Storage textures to bind when this render state is active */\n\n    Sint32 num_storage_buffers;    /**< The number of storage buffers to bind when this render state is active */\n    SDL_GPUBuffer *const *storage_buffers;      /**< Storage buffers to bind when this render state is active */\n} SDL_GPURenderStateDesc;\n```\n\n----------------------------------------\n\nTITLE: Get Date and Time Locale Preferences in SDL3\nDESCRIPTION: Retrieves the preferred date and time format for the system locale using SDL_GetDateTimeLocalePreferences. The function takes pointers to SDL_DateFormat and SDL_TimeFormat to store the results. It returns true on success, false on failure. This is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDateTimeLocalePreferences.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetDateTimeLocalePreferences(SDL_DateFormat *dateFormat, SDL_TimeFormat *timeFormat);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Serial Number in SDL\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetGamepadSerial function, which retrieves the serial number of an opened gamepad. It takes an SDL_Gamepad pointer as input and returns a const char* representing the serial number, or NULL if unavailable. This function requires the SDL3 library and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadSerial.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadSerial(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Get IOStream Size in C\nDESCRIPTION: Retrieves the size of the data stream associated with an SDL_IOStream. The function accepts an SDL_IOStream pointer as input and returns the size of the data stream as a Sint64 value on success, or a negative error code on failure. It requires the SDL3 library and the SDL_iostream.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetIOSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint64 SDL_GetIOSize(SDL_IOStream *context);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Stream Input Channel Map in C\nDESCRIPTION: Retrieves the current input channel map of an audio stream in SDL3. This function returns an array representing the channel mapping, or NULL if default (no remapping). The returned array should be freed using SDL_free when no longer needed. The count parameter, if not NULL, will be set to the number of channels in the map.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamInputChannelMap.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint * SDL_GetAudioStreamInputChannelMap(SDL_AudioStream *stream, int *count);\n```\n\n----------------------------------------\n\nTITLE: Get Log Priority in SDL3 (C)\nDESCRIPTION: Retrieves the log priority of a specified category using SDL_GetLogPriority. The function takes an integer representing the log category as input and returns an SDL_LogPriority enum value indicating the current priority level. This function is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetLogPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_LogPriority SDL_GetLogPriority(int category);\n```\n\n----------------------------------------\n\nTITLE: SDL_RemoveTimer Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RemoveTimer function. This function removes a timer created with SDL_AddTimer(). It takes an SDL_TimerID as input, which identifies the timer to be removed. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RemoveTimer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RemoveTimer(SDL_TimerID id);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Shaded_Wrapped Syntax (C)\nDESCRIPTION: Defines the syntax for the TTF_RenderText_Shaded_Wrapped function in C. This function renders word-wrapped Latin1 text at high quality to a new 8-bit surface. It takes a font, text, foreground color, background color, and wrap length as input and returns a pointer to the created SDL_Surface or NULL if an error occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderText_Shaded_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Shaded_Wrapped(TTF_Font *font,\n                const char *text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Type in SDL2\nDESCRIPTION: Retrieves the type of the provided SDL_GameController object. The function takes a pointer to an SDL_GameController as input and returns an SDL_GameControllerType enum value representing the type of the controller.  This function is available since SDL 2.0.12.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GameControllerType SDL_GameControllerGetType(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyCursor Syntax in C\nDESCRIPTION: Frees a previously created cursor. It is crucial to call this function to release the memory allocated for the cursor. The cursor parameter specifies the SDL_Cursor to be freed and must be a valid cursor created with SDL_CreateCursor, SDL_CreateColorCursor or SDL_CreateSystemCursor. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyCursor(SDL_Cursor *cursor);\n```\n\n----------------------------------------\n\nTITLE: SDL_IOprintf Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_IOprintf function in C, which is used for formatted printing to an SDL_IOStream. It takes an SDL_IOStream context, a format string, and variable arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOprintf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_IOprintf(SDL_IOStream *context, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDL_EventFilter Typedef Definition in C\nDESCRIPTION: Defines the SDL_EventFilter callback function type, which is used for monitoring and filtering events in the SDL event queue. The function receives user data and an SDL_Event pointer, and returns a boolean value indicating whether the event should be added to the queue. This function is thread-safe, requiring the application to manage locking resources.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EventFilter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef bool (SDLCALL *SDL_EventFilter)(void *userdata, SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAudioIterationCallbacks Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetAudioIterationCallbacks function. It takes an audio device ID, start and end callback functions, and user data as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioIterationCallbacks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAudioIterationCallbacks(SDL_AudioDeviceID devid, SDL_AudioIterationCallback start, SDL_AudioIterationCallback end, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Firmware Version in SDL3\nDESCRIPTION: Retrieves the firmware version of a connected joystick. The function takes an SDL_Joystick pointer as input and returns a Uint16 representing the firmware version or 0 if unavailable. Requires SDL3 and a valid SDL_Joystick obtained from SDL_OpenJoystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickFirmwareVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetJoystickFirmwareVersion(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasSSE Function Definition in C\nDESCRIPTION: This code snippet shows the function definition for SDL_HasSSE in C. The function takes no arguments and returns a boolean value indicating whether the CPU supports SSE features.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasSSE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasSSE(void);\n```\n\n----------------------------------------\n\nTITLE: Set Linux Thread Priority and Policy in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetLinuxThreadPriorityAndPolicy function, which is used to set the priority and scheduling policy of a thread in Linux. It requires including SDL3/SDL_system.h. The function takes the thread ID, an SDL priority value, and a scheduling policy as parameters and returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetLinuxThreadPriorityAndPolicy.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetLinuxThreadPriorityAndPolicy(Sint64 threadID, int sdlPriority, int schedPolicy);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HapticCondition Structure in C\nDESCRIPTION: This code snippet defines the SDL_HapticCondition structure, which is used to specify parameters for condition-based haptic effects such as spring, damper, inertia, and friction. It includes members for specifying direction, duration, trigger conditions, and axis-specific parameters like saturation, coefficient, deadband, and center position.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticCondition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticCondition\n{\n    /* Header */\n    Uint16 type;            /**< SDL_HAPTIC_SPRING, SDL_HAPTIC_DAMPER,\n                                 SDL_HAPTIC_INERTIA or SDL_HAPTIC_FRICTION */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect. */\n    Uint16 delay;           /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;          /**< Button that triggers the effect. */\n    Uint16 interval;        /**< How soon it can be triggered again after button. */\n\n    /* Condition */\n    Uint16 right_sat[3];    /**< Level when joystick is to the positive side; max 0xFFFF. */\n    Uint16 left_sat[3];     /**< Level when joystick is to the negative side; max 0xFFFF. */\n    Sint16 right_coeff[3];  /**< How fast to increase the force towards the positive side. */\n    Sint16 left_coeff[3];   /**< How fast to increase the force towards the negative side. */\n    Uint16 deadband[3];     /**< Size of the dead zone; max 0xFFFF: whole axis-range when 0-centered. */\n    Sint16 center[3];       /**< Position of the dead zone. */\n} SDL_HapticCondition;\n```\n\n----------------------------------------\n\nTITLE: Set Window as Modal (SDL_SetWindowModalFor) - C\nDESCRIPTION: Sets the specified modal window to be modal for the specified parent window.  This prevents the user from interacting with the parent window while the modal window is open. Returns 0 on success, or a negative error code on failure. Requires SDL 2.0.5 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowModalFor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowModalFor(SDL_Window * modal_window, SDL_Window * parent_window);\n```\n\n----------------------------------------\n\nTITLE: Get Scancode From Name - SDL2 - C\nDESCRIPTION: Retrieves an SDL_Scancode from a human-readable name using SDL_GetScancodeFromName. The function takes a const char * name as input, representing the scancode name. It returns the SDL_Scancode or SDL_SCANCODE_UNKNOWN if the name is not recognized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetScancodeFromName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Scancode SDL_GetScancodeFromName(const char *name);\n```\n\n----------------------------------------\n\nTITLE: SDL_LockTextureToSurface Syntax in C\nDESCRIPTION: Locks a portion of the texture for write-only pixel access and exposes it as an SDL surface. The texture must be created with SDL_TEXTUREACCESS_STREAMING. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockTextureToSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_LockTextureToSurface(SDL_Texture *texture, const SDL_Rect *rect, SDL_Surface **surface);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE in C\nDESCRIPTION: This code snippet shows how SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE is defined. This allows the user to specify a default ALSA audio device name. It is ignored when playback or recording hints are set. This hint should be set before opening an audio device. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE \"SDL_AUDIO_ALSA_DEFAULT_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: Get Fullscreen Display Modes in SDL3\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetFullscreenDisplayModes to retrieve a list of fullscreen display modes for a given display. It takes a SDL_DisplayID and a pointer to an integer as parameters. The returned array of SDL_DisplayMode pointers must be freed with SDL_free.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetFullscreenDisplayModes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayMode ** SDL_GetFullscreenDisplayModes(SDL_DisplayID displayID, int *count);\n```\n\n----------------------------------------\n\nTITLE: Get Texture Blend Mode in SDL3 (C)\nDESCRIPTION: Retrieves the blend mode used for texture copy operations in SDL3. It takes a SDL_Texture pointer and a pointer to a SDL_BlendMode as input. The SDL_BlendMode pointer is filled with the current blend mode of the specified texture. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextureBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode *blendMode);\n```\n\n----------------------------------------\n\nTITLE: Set Window Resizable State in C\nDESCRIPTION: Sets the user-resizable state of an SDL window. It takes a pointer to an SDL_Window and an SDL_bool indicating whether resizing should be allowed (SDL_TRUE) or disallowed (SDL_FALSE). This function is available since SDL 2.0.5 and has no effect on fullscreen windows.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowResizable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowResizable(SDL_Window * window,\n                            SDL_bool resizable);\n```\n\n----------------------------------------\n\nTITLE: Get SDL Version C\nDESCRIPTION: Retrieves the SDL version at runtime and stores it in the provided SDL_version struct. This function can be called before SDL_Init().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetVersion(SDL_version * ver);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MOUSE_NORMAL_SPEED_SCALE in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_MOUSE_NORMAL_SPEED_SCALE constant is defined in C. It defines the string literal associated with the hint, which can be used with SDL_SetHint to configure the mouse speed scale when the mouse is not in relative mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_NORMAL_SPEED_SCALE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_NORMAL_SPEED_SCALE \"SDL_MOUSE_NORMAL_SPEED_SCALE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MessageBoxData Structure in C\nDESCRIPTION: This code defines the `SDL_MessageBoxData` structure, used to configure message boxes in SDL. It contains members such as `flags` (SDL_MessageBoxFlags), `window` (parent SDL_Window), `title` and `message` (UTF-8 strings), `numbuttons` and `buttons` (SDL_MessageBoxButtonData array), and `colorScheme` (SDL_MessageBoxColorScheme).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MessageBoxData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MessageBoxData\n{\n    Uint32 flags;                       /**< SDL_MessageBoxFlags */\n    SDL_Window *window;                 /**< Parent window, can be NULL */\n    const char *title;                  /**< UTF-8 title */\n    const char *message;                /**< UTF-8 message text */\n\n    int numbuttons;\n    const SDL_MessageBoxButtonData *buttons;\n\n    const SDL_MessageBoxColorScheme *colorScheme;   /**< SDL_MessageBoxColorScheme, can be NULL to use system settings */\n} SDL_MessageBoxData;\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Vendor ID with SDL_GetGamepadVendor in C\nDESCRIPTION: Retrieves the USB vendor ID of an opened gamepad using SDL's SDL_GetGamepadVendor function. It requires an SDL_Gamepad pointer as input and returns the vendor ID as a Uint16 value. If the vendor ID is unavailable, the function returns 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadVendor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetGamepadVendor(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop End Time - C\nDESCRIPTION: Retrieves the loop end time position of a music stream, in seconds, using the Mix_GetMusicLoopEndTime function from SDL_mixer. If NULL is passed as the music object, the function returns the duration of the currently playing music. Returns -1.0 if the feature is not supported or not used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicLoopEndTime.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ndouble Mix_GetMusicLoopEndTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowAlwaysOnTop Syntax\nDESCRIPTION: Defines the syntax for the SDL_SetWindowAlwaysOnTop function in C. This function sets the specified SDL window to be always on top of other windows, or disables this behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowAlwaysOnTop.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowAlwaysOnTop(SDL_Window *window, bool on_top);\n```\n\n----------------------------------------\n\nTITLE: SDL_WindowEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_WindowEvent structure, which is used to store information about window events. The structure includes fields for the event type, timestamp, window ID, specific event, padding, and event-dependent data. This structure is used to represent window events, such as resizing or focus changes, within the SDL event system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WindowEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_WindowEvent\n{\n    Uint32 type;        /**< SDL_WINDOWEVENT */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;    /**< The associated window */\n    Uint8 event;        /**< SDL_WindowEventID */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n    Sint32 data1;       /**< event dependent data */\n    Sint32 data2;       /**< event dependent data */\n} SDL_WindowEvent;\n```\n\n----------------------------------------\n\nTITLE: Assigning a tag to consecutive audio channels using SDL_mixer in C\nDESCRIPTION: This code snippet demonstrates how to assign a tag to a group of consecutive audio channels using the Mix_GroupChannels function from the SDL_mixer library. The function assigns the specified tag to the channels ranging from 'from' to 'to' inclusive. It requires the SDL_mixer library and returns true on success, or false on failure, with SDL_GetError() providing more information. 'tag' of -1 removes tag.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GroupChannels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_GroupChannels(int from, int to, int tag);\n```\n\n----------------------------------------\n\nTITLE: Get FreeType Version with SDL_ttf in C\nDESCRIPTION: This code snippet shows the syntax for the `TTF_GetFreeTypeVersion` function, which is part of the SDL_ttf library. It retrieves the major, minor, and patch versions of the FreeType library in use.  `TTF_Init()` must be called before this function. The version information is written to the provided integer pointers.  Passing `NULL` is valid for any of the integer pointers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GetFreeTypeVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_GetFreeTypeVersion(int *major, int *minor, int *patch);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreatePopupWindow Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_CreatePopupWindow function in C. It takes a parent window, offset coordinates, width, height, and window flags as input and returns a pointer to the created SDL_Window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreatePopupWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_CreatePopupWindow(SDL_Window *parent, int offset_x, int offset_y, int w, int h, SDL_WindowFlags flags);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_CAMERA_DRIVER in C\nDESCRIPTION: This code defines the SDL_HINT_CAMERA_DRIVER macro, which represents the name of the hint used to specify the desired camera driver backend. This hint must be set before calling SDL_Init() to take effect. The hint's value should correspond to a supported camera backend driver name, such as 'directshow'.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_CAMERA_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_CAMERA_DRIVER \"SDL_CAMERA_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Setting Player Index for Game Controller in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GameControllerSetPlayerIndex function to set the player index of a connected game controller. It takes an SDL_GameController pointer and an integer representing the player index as input. A player_index of -1 clears the player index.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerSetPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GameControllerSetPlayerIndex(SDL_GameController *gamecontroller, int player_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRectIntersection Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetRectIntersection function in C. It takes two constant SDL_Rect pointers (A and B) as input, representing the two rectangles, and a non-constant SDL_Rect pointer (result) where the intersection will be stored. The function returns a boolean value indicating whether an intersection exists.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRectIntersection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRectIntersection(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);\n```\n\n----------------------------------------\n\nTITLE: Saving SDL_Surface to JPEG File in C with SDL_image\nDESCRIPTION: This code snippet shows the function signature for IMG_SaveJPG, which saves an SDL_Surface as a JPEG image file. It requires the SDL_image library and takes the surface to be saved, the output file path, and the JPEG quality as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_SaveJPG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveJPG(SDL_Surface *surface, const char *file, int quality);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogInfo Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_LogInfo function in C. It takes an integer category and a format string, along with optional arguments to be formatted into the string. The function is used to log messages with SDL_LOG_PRIORITY_INFO.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogInfo.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_LogInfo(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Get Current OpenGL Context in SDL (C)\nDESCRIPTION: Retrieves the currently active OpenGL context. Returns the OpenGL context if successful, or NULL if there is an error. Call SDL_GetError() to retrieve the specific error message.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_GetCurrentContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GLContext SDL_GL_GetCurrentContext(void);\n```\n\n----------------------------------------\n\nTITLE: Check for Clipboard Data with MIME Type in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasClipboardData function in SDL3. It takes a MIME type string as input and returns a boolean value indicating whether data of that type exists in the clipboard.  This function must be called on the main thread. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasClipboardData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasClipboardData(const char *mime_type);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GamepadButtonEvent Structure in C\nDESCRIPTION: Defines the structure SDL_GamepadButtonEvent, which represents a gamepad button event in SDL3. It includes the event type (SDL_EVENT_GAMEPAD_BUTTON_DOWN or SDL_EVENT_GAMEPAD_BUTTON_UP), a timestamp, the joystick instance ID, the gamepad button code, and a boolean indicating whether the button is pressed or released.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadButtonEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GamepadButtonEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_GAMEPAD_BUTTON_DOWN or SDL_EVENT_GAMEPAD_BUTTON_UP */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 button;       /**< The gamepad button (SDL_GamepadButton) */\n    bool down;      /**< true if the button is pressed */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_GamepadButtonEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_SetHint Function Definition in C\nDESCRIPTION: This snippet shows the function definition of SDL_SetHint. It takes the hint name and value as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetHint.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetHint(const char *name, const char *value);\n```\n\n----------------------------------------\n\nTITLE: Load WAV from SDL_RWops - C\nDESCRIPTION: Loads a WAV audio file from an SDL_RWops stream into a Mix_Chunk. The function takes an SDL_RWops pointer and a flag to determine whether to free the SDL_RWops after reading. It returns a pointer to the loaded Mix_Chunk, or NULL if an error occurred. The Mix_Chunk should be freed using Mix_FreeChunk when no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_LoadWAV_RW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMix_Chunk * Mix_LoadWAV_RW(SDL_RWops *src, int freesrc);\n```\n\n----------------------------------------\n\nTITLE: Set Music Position - SDL_mixer - C\nDESCRIPTION: This function sets the current position in the music stream, specified in seconds. It's part of the SDL_mixer library and requires the inclusion of SDL_mixer.h. It returns 0 on success and -1 on failure or if it's not implemented for the current music format. This function is available since SDL_mixer 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetMusicPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_SetMusicPosition(double position);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetSurfaceAlphaMod Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetSurfaceAlphaMod function in C. It takes a pointer to an SDL_Surface and a pointer to a Uint8 as input. The Uint8 pointer will be populated with the surface's current alpha modulation value. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfaceAlphaMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetSurfaceAlphaMod(SDL_Surface *surface, Uint8 *alpha);\n```\n\n----------------------------------------\n\nTITLE: SDL_ResumeAudioStreamDevice Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ResumeAudioStreamDevice function, which unpauses audio playback for a given SDL_AudioStream. It takes a pointer to an SDL_AudioStream as input and returns a boolean indicating success or failure.  Call SDL_GetError() for more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ResumeAudioStreamDevice.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_ResumeAudioStreamDevice(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick ID with SDL_GetJoystickID (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetJoystickID to retrieve the instance ID of an opened joystick. It takes an SDL_Joystick pointer as input and returns an SDL_JoystickID, which is the instance ID. The function may return 0 on failure, so SDL_GetError should be called to check for errors.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickID SDL_GetJoystickID(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: IMG_ReadXPMFromArray Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_ReadXPMFromArray function in C. It takes a null-terminated array of strings representing XPM data as input and returns a pointer to an SDL_Surface, or NULL on error. The returned surface should be disposed of using SDL_DestroySurface().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_ReadXPMFromArray.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_ReadXPMFromArray(char **xpm);\n```\n\n----------------------------------------\n\nTITLE: Loading Images from Files/Streams in SDL3_image\nDESCRIPTION: Functions to load images from file paths or SDL_IOStream into SDL_Surface or SDL_Texture objects. Includes variations for specifying the image type and managing the IO stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadTyped_IO(SDL_IOStream *src, bool closeio, const char *type);                                 // Load an image from an SDL data source into a software surface.\nSDL_Surface * IMG_Load(const char *file);                                                                          // Load an image from a filesystem path into a software surface.\nSDL_Surface * IMG_Load_IO(SDL_IOStream *src, bool closeio);                                                        // Load an image from an SDL data source into a software surface.\nSDL_Texture * IMG_LoadTexture(SDL_Renderer *renderer, const char *file);                                           // Load an image from a filesystem path into a GPU texture.\nSDL_Texture * IMG_LoadTexture_IO(SDL_Renderer *renderer, SDL_IOStream *src, bool closeio);                         // Load an image from an SDL data source into a GPU texture.\nSDL_Texture * IMG_LoadTextureTyped_IO(SDL_Renderer *renderer, SDL_IOStream *src, bool closeio, const char *type);  // Load an image from an SDL data source into a GPU texture.\n```\n\n----------------------------------------\n\nTITLE: Set Music Volume SDL_mixer (C)\nDESCRIPTION: This function sets the volume for the music channel in SDL_mixer. It takes an integer volume value between 0 (silence) and MIX_MAX_VOLUME (full volume, which is 128). A volume of -1 can be specified to query the current volume without changing it. Requires the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_VolumeMusic.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_VolumeMusic(int volume);\n```\n\n----------------------------------------\n\nTITLE: Get Keyboard Name by ID in SDL3 (C)\nDESCRIPTION: Retrieves the name of a keyboard using its instance ID. Returns a const char* to the keyboard name or NULL on failure. An empty string is returned if the keyboard has no name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetKeyboardNameForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetKeyboardNameForID(SDL_KeyboardID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Check Joystick Connection Status in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickConnected function. It takes an SDL_Joystick pointer as input and returns a boolean value indicating whether the joystick is connected. Requires SDL3/SDL_joystick.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoystickConnected.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_JoystickConnected(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL3_net API Reference\nDESCRIPTION: This code block presents a comprehensive quick reference for the SDL3_net API, offering a summary of the functions and macros available within the library for networking tasks. It includes initialization, address resolution, socket creation (stream and datagram), data transmission/reception, and socket management.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/QuickReference.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// SDL3_net API Quick Reference\n//\n// https://libsdl.org/\n//\n// The latest version of this document can be found at https://wiki.libsdl.org/SDL3_net/QuickReference\n// Based on SDL_net version 3.0.0\n//\n// This can be useful in an IDE with search and syntax highlighting.\n//\n// Original idea for this document came from Dan Bechard (thanks!)\n// ASCII art generated by: https://patorjk.com/software/taag/#p=display&f=ANSI%20Shadow (with modified 'S' for readability)\n\n\n//  ██████╗ ██████╗  ██╗      ███╗   ██╗ ███████╗ ████████╗\n// ██╔════╝ ██╔══██╗ ██║      ████╗  ██║ ██╔════╝ ╚══██╔══╝\n// ███████╗ ██║  ██║ ██║      ██╔██╗ ██║ █████╗      ██║   \n// ╚════██║ ██║  ██║ ██║      ██║╚██╗██║ ██╔══╝      ██║   \n// ██████╔╝ ██████╔╝ ███████╗ ██║ ╚████║ ███████╗    ██║   \n// ╚═════╝  ╚═════╝  ╚══════╝ ╚═╝  ╚═══╝ ╚══════╝    ╚═╝   \n\n#define SDL_NET_MAJOR_VERSION                                                                                              // Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO\n#define SDL_NET_VERSION                                                                                                    // This is the version number macro for the current SDL_net version.\n#define SDL_NET_VERSION_ATLEAST(X, Y, Z)                                                                                   // This macro will evaluate to true if compiled with SDL_net at least X.Y.Z.\nint SDLNet_Version(void);                                                                                                  // This function gets the version of the dynamically linked SDL_net library.\nbool SDLNet_Init(void);                                                                                                    // Initialize the SDL_net library.\nvoid SDLNet_Quit(void);                                                                                                    // Deinitialize the SDL_net library.\nSDLNet_Address * SDLNet_ResolveHostname(const char *host);                                                                 // Resolve a human-readable hostname.\nint SDLNet_WaitUntilResolved(SDLNet_Address *address, Sint32 timeout);                                                     // Block until an address is resolved.\nint SDLNet_GetAddressStatus(SDLNet_Address *address);                                                                      // Check if an address is resolved, without blocking.\nconst char * SDLNet_GetAddressString(SDLNet_Address *address);                                                             // Get a human-readable string from a resolved address.\nSDLNet_Address * SDLNet_RefAddress(SDLNet_Address *address);                                                               // Add a reference to an SDLNet_Address.\nvoid SDLNet_UnrefAddress(SDLNet_Address *address);                                                                         // Drop a reference to an SDLNet_Address.\nvoid SDLNet_SimulateAddressResolutionLoss(int percent_loss);                                                               // Enable simulated address resolution failures.\nint SDLNet_CompareAddresses(const SDLNet_Address *a, const SDLNet_Address *b);                                             // Compare two SDLNet_Address objects.\nSDLNet_Address ** SDLNet_GetLocalAddresses(int *num_addresses);                                                            // Obtain a list of local addresses on the system.\nvoid SDLNet_FreeLocalAddresses(SDLNet_Address **addresses);                                                                // Free the results from SDLNet_GetLocalAddresses.\nSDLNet_StreamSocket * SDLNet_CreateClient(SDLNet_Address *address, Uint16 port);                                           // Begin connecting a socket as a client to a remote server.\nint SDLNet_WaitUntilConnected(SDLNet_StreamSocket *sock, Sint32 timeout);                                                  // Block until a stream socket has connected to a server.\nSDLNet_Server * SDLNet_CreateServer(SDLNet_Address *addr, Uint16 port);                                                    // Create a server, which listens for connections to accept.\nbool SDLNet_AcceptClient(SDLNet_Server *server, SDLNet_StreamSocket **client_stream);                                      // Create a stream socket for the next pending client connection.\nvoid SDLNet_DestroyServer(SDLNet_Server *server);                                                                          // Dispose of a previously-created server.\nSDLNet_Address * SDLNet_GetStreamSocketAddress(SDLNet_StreamSocket *sock);                                                 // Get the remote address of a stream socket.\nint SDLNet_GetConnectionStatus(SDLNet_StreamSocket *sock);                                                                 // Check if a stream socket is connected, without blocking.\nbool SDLNet_WriteToStreamSocket(SDLNet_StreamSocket *sock, const void *buf, int buflen);                                   // Send bytes over a stream socket to a remote system.\nint SDLNet_GetStreamSocketPendingWrites(SDLNet_StreamSocket *sock);                                                        // Query bytes still pending transmission on a stream socket.\nint SDLNet_WaitUntilStreamSocketDrained(SDLNet_StreamSocket *sock, Sint32 timeout);                                        // Block until all of a stream socket's pending data is sent.\nint SDLNet_ReadFromStreamSocket(SDLNet_StreamSocket *sock, void *buf, int buflen);                                         // Receive bytes that a remote system sent to a stream socket.\nvoid SDLNet_SimulateStreamPacketLoss(SDLNet_StreamSocket *sock, int percent_loss);                                         // Enable simulated stream socket failures.\nvoid SDLNet_DestroyStreamSocket(SDLNet_StreamSocket *sock);                                                                // Dispose of a previously-created stream socket.\nSDLNet_DatagramSocket * SDLNet_CreateDatagramSocket(SDLNet_Address *addr, Uint16 port);                                    // Create and bind a new datagram socket.\nbool SDLNet_SendDatagram(SDLNet_DatagramSocket *sock, SDLNet_Address *address, Uint16 port, const void *buf, int buflen);  // Send a new packet over a datagram socket to a remote system.\nbool SDLNet_ReceiveDatagram(SDLNet_DatagramSocket *sock, SDLNet_Datagram **dgram);                                         // Receive a new packet that a remote system sent to a datagram socket.\nvoid SDLNet_DestroyDatagram(SDLNet_Datagram *dgram);                                                                       // Dispose of a datagram packet previously received.\nvoid SDLNet_SimulateDatagramPacketLoss(SDLNet_DatagramSocket *sock, int percent_loss);                                     // Enable simulated datagram socket failures.\nvoid SDLNet_DestroyDatagramSocket(SDLNet_DatagramSocket *sock);                                                            // Dispose of a previously-created datagram socket.\nint SDLNet_WaitUntilInputAvailable(void **vsockets, int numsockets, Sint32 timeout);                                       // Block on multiple sockets until at least one has data available.\n\n```\n\n----------------------------------------\n\nTITLE: IMG_SaveJPG_RW Function Signature in C\nDESCRIPTION: This code snippet shows the function signature for IMG_SaveJPG_RW, used to save an SDL_Surface as a JPEG image via SDL_RWops. The function takes a pointer to the SDL_Surface to save, a pointer to the SDL_RWops destination, an integer to indicate whether to free the destination, and an integer representing the JPEG quality.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_SaveJPG_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_SaveJPG_RW(SDL_Surface *surface, SDL_RWops *dst, int freedst, int quality);\n```\n\n----------------------------------------\n\nTITLE: Set Font Size with DPI in SDL_ttf (C)\nDESCRIPTION: This function sets the font size dynamically based on the target horizontal and vertical DPI. It updates TTF_Text objects using the font and clears cached glyphs. It requires the font to be created and is available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontSizeDPI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontSizeDPI(TTF_Font *font, float ptsize, int hdpi, int vdpi);\n```\n\n----------------------------------------\n\nTITLE: SDL_ResumeAudioDevice Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_ResumeAudioDevice function in C. It takes an SDL_AudioDeviceID as input and returns a boolean value indicating success or failure. It is used to resume audio playback on a previously paused audio device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ResumeAudioDevice.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_ResumeAudioDevice(SDL_AudioDeviceID devid);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetPaletteColors Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetPaletteColors function. This function is used to set a range of colors within an SDL_Palette structure. The function takes a palette pointer, a colors array pointer, the index of the first color to modify, and the number of colors to modify as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetPaletteColors.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetPaletteColors(SDL_Palette *palette, const SDL_Color *colors, int firstcolor, int ncolors);\n```\n\n----------------------------------------\n\nTITLE: Get Music Decoder Name - SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax for the Mix_GetMusicDecoder function in SDL_mixer. It takes an integer index as input and returns a const char pointer representing the decoder's name. It's crucial to call Mix_OpenAudio() or Mix_OpenAudioDevice() before using this function to activate decoders.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicDecoder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * Mix_GetMusicDecoder(int index);\n```\n\n----------------------------------------\n\nTITLE: Loading WEBP Images with SDL_image in C\nDESCRIPTION: Loads a WEBP image directly from an SDL_RWops stream, bypassing SDL_image's automatic file format detection. Requires the SDL_image library. The function returns a pointer to an SDL_Surface on success or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadWEBP_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadWEBP_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Name with SDL_JoystickName in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_JoystickName function. It takes a pointer to an SDL_Joystick object as input and returns a const char* representing the name of the joystick. A NULL return indicates an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_JoystickName(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Get List of Connected Joysticks in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax for the SDL_GetJoysticks function, which retrieves a list of currently connected joysticks. The function returns a null-terminated array of joystick instance IDs and populates the provided integer pointer with the number of joysticks. The returned array should be freed with SDL_free() after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoysticks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickID * SDL_GetJoysticks(int *count);\n```\n\n----------------------------------------\n\nTITLE: Initializing Video Subsystem in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_VideoInit to initialize the video subsystem with an optional driver name. Passing NULL initializes the default driver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_VideoInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_VideoInit(const char *driver_name);\n```\n\n----------------------------------------\n\nTITLE: Check if Haptic Device is Opened - SDL2 - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HapticOpened function, which checks if a haptic device at a specified index is currently opened. The function takes the device index as input and returns 1 if the device is opened, 0 otherwise, or an error code if the operation fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticOpened.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_HapticOpened(int device_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_PremultiplySurfaceAlpha Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_PremultiplySurfaceAlpha function in C. It takes a pointer to an SDL_Surface and a boolean value indicating whether to perform the alpha multiplication in linear space. The function returns a boolean indicating success or failure. Dependencies include SDL3/SDL_surface.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PremultiplySurfaceAlpha.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PremultiplySurfaceAlpha(SDL_Surface *surface, bool linear);\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Mutex in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to create a mutex using SDL_CreateMutex, attempt to lock it with SDL_TryLockMutex, perform operations while the mutex is locked, unlock it using SDL_UnlockMutex, and destroy it with SDL_DestroyMutex.  It also includes error handling if the mutex creation fails or is already locked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Mutex *mutex;\n\nmutex = SDL_CreateMutex();\nif (!mutex) {\n  SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't create mutex\\n\");\n  return 1;\n}\n\nif (SDL_TryLockMutex(mutex)) {\n  /* Do stuff while mutex is locked */\n  SDL_UnlockMutex(mutex);\n} else {\n  SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Mutex is locked on another thread\\n\");\n}\n\nSDL_DestroyMutex(mutex);\n```\n\n----------------------------------------\n\nTITLE: Attaching a Virtual Joystick with SDL_JoystickAttachVirtual in C\nDESCRIPTION: This code snippet demonstrates how to attach a new virtual joystick using the SDL_JoystickAttachVirtual function. It specifies the joystick type, number of axes, buttons, and hats. The function returns the joystick's device index or -1 if an error occurs. This function is available since SDL 2.0.14.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickAttachVirtual.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickAttachVirtual(SDL_JoystickType type,\n                              int naxes,\n                              int nbuttons,\n                              int nhats);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadBMP_RW Syntax in C\nDESCRIPTION: Shows the syntax for using SDL_LoadBMP_RW to load a BMP image from a data stream. The function takes a pointer to an SDL_RWops struct representing the data stream and an integer indicating whether to free the stream after reading. It returns a pointer to an SDL_Surface struct.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadBMP_RW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface* SDL_LoadBMP_RW(SDL_RWops * src,\n                            int freesrc);\n```\n\n----------------------------------------\n\nTITLE: Setting the Text Engine in SDL_ttf (C)\nDESCRIPTION: Sets the text engine used by a text object. The function takes a TTF_Text pointer and a TTF_TextEngine pointer as input. It returns a boolean value indicating success or failure. This function might rebuild the internal text representation and should be called on the thread that created the text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextEngine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextEngine(TTF_Text *text, TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Emscripten Test Build\nDESCRIPTION: This command builds a test program for Emscripten using `emcc`. It compiles testdraw2.c, links it with SDL2 libraries, and outputs an HTML file (a.html). The `-O2` flag enables optimization level 2, `--js-opts 0` disables javascript optimizations, and `-g4` enables debugging information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ncd test/\nemcc -O2 --js-opts 0 -g4 testdraw2.c -I../include ../build/.libs/libSDL2.a ../build/libSDL2_test.a -o a.html\n```\n\n----------------------------------------\n\nTITLE: Set String Property in SDL Properties - C\nDESCRIPTION: Sets a string property within a group of properties identified by `SDL_PropertiesID`. The function takes the properties ID, the name of the property, and the new string value as input.  It returns true on success and false on failure. A value of NULL for the string will remove the property.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetStringProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetStringProperty(SDL_PropertiesID props, const char *name, const char *value);\n```\n\n----------------------------------------\n\nTITLE: Getting the Latest Error Message with SDLNet_GetError in C\nDESCRIPTION: This code snippet demonstrates how to use the SDLNet_GetError function to retrieve the latest error message from the SDL_net library. The returned error message is a const char* in UTF-8 encoding. This function should be used immediately after an SDL_net function reports a failure to retrieve meaningful error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_GetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDLNet_GetError(void);\n```\n\n----------------------------------------\n\nTITLE: Setting RLE acceleration in C\nDESCRIPTION: This code snippet shows how to enable RLE acceleration on a surface after loading it with IMG_Load_RW, provided the image format supports a transparent pixel and SDL has set the colorkey. It uses SDL_SetColorKey with SDL_RLEACCEL to enable hardware acceleration for blitting.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_Load_RW.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetColorKey(image, SDL_RLEACCEL, image->format->colorkey);\n```\n\n----------------------------------------\n\nTITLE: Playing Audio Chunk on a Channel in SDL_mixer (C)\nDESCRIPTION: Plays an audio chunk on a specific channel using SDL_mixer. The function takes the channel number, a pointer to the audio chunk, and the number of loops as input. It returns the channel used to play the sound or -1 if the sound could not be played. Requires SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_PlayChannel.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_PlayChannel(int channel, Mix_Chunk *chunk, int loops);\n```\n\n----------------------------------------\n\nTITLE: Set/Query Volume of Audio Chunk in SDL_mixer (C)\nDESCRIPTION: This function sets the volume of a specific audio chunk in SDL_mixer. The volume is an integer between 0 (silence) and MIX_MAX_VOLUME (full volume, which is 128).  Passing -1 as the volume queries the current volume without changing it. Requires SDL_mixer.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_VolumeChunk.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_VolumeChunk(Mix_Chunk *chunk, int volume);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUTextureCreateInfo Definition in C\nDESCRIPTION: This code snippet defines the SDL_GPUTextureCreateInfo structure, which is used to specify the parameters of a texture in SDL3. It includes members for texture type, format, usage flags, width, height, layer count/depth, number of mip levels, sample count, and a properties ID for extensions. This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureCreateInfo.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_GPUTextureCreateInfo\n{\n    SDL_GPUTextureType type;          /**< The base dimensionality of the texture. */\n    SDL_GPUTextureFormat format;      /**< The pixel format of the texture. */\n    SDL_GPUTextureUsageFlags usage;   /**< How the texture is intended to be used by the client. */\n    Uint32 width;                     /**< The width of the texture. */\n    Uint32 height;                    /**< The height of the texture. */\n    Uint32 layer_count_or_depth;      /**< The layer count or depth of the texture. This value is treated as a layer count on 2D array textures, and as a depth value on 3D textures. */\n    Uint32 num_levels;                /**< The number of mip levels in the texture. */\n    SDL_GPUSampleCount sample_count;  /**< The number of samples per texel. Only applies if the texture is used as a render target. */\n\n    SDL_PropertiesID props;           /**< A properties ID for extensions. Should be 0 if no extensions are needed. */\n} SDL_GPUTextureCreateInfo;\n```\n\n----------------------------------------\n\nTITLE: Save SDL_Surface to JPEG via SDL_IOStream C\nDESCRIPTION: This function saves an SDL_Surface to JPEG image data via an SDL_IOStream. It accepts the SDL_Surface pointer, an SDL_IOStream pointer, a boolean indicating whether to close the IOStream after use, and an integer representing the JPEG quality. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveJPG_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio, int quality);\n```\n\n----------------------------------------\n\nTITLE: SDL_ProcessIO Enum Definition in C\nDESCRIPTION: This code snippet defines the SDL_ProcessIO enumeration, specifying the options for directing standard I/O streams when creating a process. The options include inheriting from the application, ignoring the stream, connecting to a new SDL_IOStream, and redirecting to an existing SDL_IOStream. The stream direction affects I/O behavior and how an application can interact with the subprocess' standard input, output, and error streams.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ProcessIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ProcessIO\n{\n    SDL_PROCESS_STDIO_INHERITED,    /**< The I/O stream is inherited from the application. */\n    SDL_PROCESS_STDIO_NULL,         /**< The I/O stream is ignored. */\n    SDL_PROCESS_STDIO_APP,          /**< The I/O stream is connected to a new SDL_IOStream that the application can read or write */\n    SDL_PROCESS_STDIO_REDIRECT      /**< The I/O stream is redirected to an existing SDL_IOStream. */\n} SDL_ProcessIO;\n```\n\n----------------------------------------\n\nTITLE: SDL Thread Creation with Stack Size in C\nDESCRIPTION: Creates a new thread using SDL with a specific stack size. The function takes a thread function, a name for the thread, the stack size in bytes, and a pointer to data that will be passed to the thread function. Returns an SDL_Thread pointer on success, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateThreadWithStackSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nextern DECLSPEC SDL_Thread *SDLCALL\nSDL_CreateThreadWithStackSize(SDL_ThreadFunction fn, const char *name, const size_t stacksize, void *data);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Connection State in C\nDESCRIPTION: This code snippet shows the syntax for the `SDL_GetJoystickConnectionState` function. It takes an `SDL_Joystick` pointer as input and returns an `SDL_JoystickConnectionState` enum value representing the connection state of the specified joystick. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickConnectionState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickConnectionState SDL_GetJoystickConnectionState(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Check Rumble Support on Haptic Device in SDL2 (C)\nDESCRIPTION: This code snippet demonstrates how to use the SDL_HapticRumbleSupported function to check if a haptic device supports rumble effects. It takes an SDL_Haptic pointer as input and returns an integer indicating support or an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticRumbleSupported.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_HapticRumbleSupported(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Get Product String from HID Device (SDL3, C)\nDESCRIPTION: Retrieves the product string from a HID device. Requires a valid SDL_hid_device handle obtained from SDL_hid_open(). The product string is written to the provided wchar_t buffer. Returns 0 on success, a negative error code on failure, and SDL_GetError() can be used for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_get_product_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_product_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Set Surface Clip Rectangle SDL3 (C)\nDESCRIPTION: Sets the clipping rectangle for a given SDL_Surface. The clipping rectangle defines the area of the surface that will be drawn to during blitting operations. Passing NULL as the rect disables clipping. The function returns true if the rectangle intersects the surface and false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetSurfaceClipRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetSurfaceClipRect(SDL_Surface *surface, const SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: Get GPU Device Driver Name in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetGPUDeviceDriver to get the name of the GPU device driver. It takes a pointer to an SDL_GPUDevice as input and returns a const char* representing the driver's name or NULL if an error occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGPUDeviceDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGPUDeviceDriver(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_AddSocket Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_UDP_AddSocket function in C. It takes a SDLNet_SocketSet and a UDPsocket as input and returns an integer representing the total number of sockets in the set or -1 if the set is full. It's a UDP-specific wrapper over SDLNet_AddSocket.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_AddSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE int SDLNet_UDP_AddSocket(SDLNet_SocketSet set, UDPsocket sock);\n```\n\n----------------------------------------\n\nTITLE: Setting Render Draw Color in SDL3 (C)\nDESCRIPTION: Sets the color used for drawing operations within an SDL_Renderer.  The function takes a renderer and RGBA color values (Uint8) as input, specifying the color to be used for subsequent drawing calls. It returns a boolean indicating success or failure, with SDL_GetError() providing more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderDrawColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderDrawColor(SDL_Renderer *renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: Check if Window Has Surface in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to use the `SDL_WindowHasSurface` function in SDL3 to determine if a given SDL window has an associated surface. The function takes a pointer to an `SDL_Window` as input and returns a boolean value indicating whether a surface is associated with the window. It is available since SDL 3.2.0 and should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WindowHasSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WindowHasSurface(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Device Product ID in C\nDESCRIPTION: Retrieves the USB product ID of a joystick device using SDL_JoystickGetDeviceProduct. The function takes the device index as input and returns the product ID as a Uint16.  A zero value indicates an invalid index or unavailable product ID. This can be called before opening any joysticks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetDeviceProduct.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_JoystickGetDeviceProduct(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Opening Font with DPI in SDL_ttf (C)\nDESCRIPTION: This code snippet shows the syntax for TTF_OpenFontIndexDPI, which opens a font file using the specified path, point size, index of the font face, horizontal DPI (hdpi) and vertical DPI (vdpi). It returns a pointer to a TTF_Font structure, or NULL on error. The function is part of the SDL_ttf library and is available since SDL_ttf 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_OpenFontIndexDPI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFontIndexDPI(const char *file, int ptsize, long index, unsigned int hdpi, unsigned int vdpi);\n```\n\n----------------------------------------\n\nTITLE: Get Serial Number of Game Controller in C\nDESCRIPTION: Retrieves the serial number of a connected game controller using the SDL_GameControllerGetSerial function. This function requires an SDL_GameController pointer as input and returns a const char* representing the serial number, or NULL if the serial number is unavailable. It's part of the SDL game controller API and available since SDL 2.0.14.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetSerial.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GameControllerGetSerial(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Creating SDL_IOStream from Dynamic Memory in C\nDESCRIPTION: Creates an SDL_IOStream backed by dynamically allocated memory using SDL_IOFromDynamicMem. It supports properties for accessing the memory and controlling allocations. Dependencies include SDL3/SDL_iostream.h. Returns a pointer to the created SDL_IOStream or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOFromDynamicMem.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStream * SDL_IOFromDynamicMem(void);\n```\n\n----------------------------------------\n\nTITLE: Get Device GUID for Joystick in C\nDESCRIPTION: Retrieves the GUID for a joystick at a specific device index using the SDL_JoystickGetDeviceGUID function. The function takes the device index as input and returns an SDL_JoystickGUID, which represents the unique identifier of the joystick. This function can be called before any joysticks are opened. It is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetDeviceGUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickGUID SDL_JoystickGetDeviceGUID(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Calculate UTF-8 String Dimensions with TTF_GetStringSize in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetStringSize function from the SDL_ttf library. It calculates the dimensions (width and height) of a UTF-8 encoded string when rendered with a specified font. It requires a pointer to a TTF_Font, the UTF-8 encoded text, the length of the text (or 0 for null-terminated), and pointers to integer variables where the calculated width and height will be stored.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetStringSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetStringSize(TTF_Font *font, const char *text, size_t length, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAudioStreamData Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAudioStreamData function in C. It takes an SDL_AudioStream pointer, a buffer to fill with audio data, and the maximum number of bytes to fill. The function returns the number of bytes read from the stream or -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetAudioStreamData(SDL_AudioStream *stream, void *buf, int len);\n```\n\n----------------------------------------\n\nTITLE: Opening a TCP Server Socket - SDLNet (C)\nDESCRIPTION: This code snippet shows the syntax for opening a TCP server socket using the SDLNet_TCP_OpenServer function.  It requires an IPaddress structure as input, which should already be in network byte order. It returns a TCPsocket on success or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_OpenServer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTCPsocket SDLNet_TCP_OpenServer(IPaddress *ip);\n```\n\n----------------------------------------\n\nTITLE: SDL_EndGPURenderPass Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_EndGPURenderPass function in C. It takes a pointer to an SDL_GPURenderPass struct as input and returns void. This function is available since SDL 3.2.0 and is used to end a GPU render pass, unsetting any bound graphics state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EndGPURenderPass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_EndGPURenderPass(\n    SDL_GPURenderPass *render_pass);\n```\n\n----------------------------------------\n\nTITLE: SDL3_net API Definitions\nDESCRIPTION: This code snippet provides a quick reference to SDL3_net API, including function prototypes and macros for network initialization, address resolution, stream sockets, and datagram sockets.  It includes definitions for version information, initialization, address management, stream sockets (client and server), and datagram sockets. The purpose is to provide a concise overview of the SDL3_net API for quick lookup and usage.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/QuickReferenceNoUnicode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// SDL3_net API Quick Reference\n//\n// https://libsdl.org/\n//\n// The latest version of this document can be found at https://wiki.libsdl.org/SDL3_net/QuickReference\n// Based on SDL_net version 3.0.0\n//\n// This can be useful in an IDE with search and syntax highlighting.\n//\n// Original idea for this document came from Dan Bechard (thanks!)\n// ASCII art generated by: https://patorjk.com/software/taag/#p=display&f=ANSI%20Shadow (with modified 'S' for readability)\n\n\n//  XXXXXX  XXXXXX   XX       XXX    XX  XXXXXXX  XXXXXXXX \n// XX       XX   XX  XX       XXXX   XX  XX          XX    \n// XXXXXXX  XX   XX  XX       XX XX  XX  XXXXX       XX    \n//      XX  XX   XX  XX       XX  XX XX  XX          XX    \n// XXXXXX   XXXXXX   XXXXXXX  XX   XXXX  XXXXXXX     XX    \n\n#define SDL_NET_MAJOR_VERSION                                                                                              // Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO\n#define SDL_NET_VERSION                                                                                                    // This is the version number macro for the current SDL_net version.\n#define SDL_NET_VERSION_ATLEAST(X, Y, Z)                                                                                   // This macro will evaluate to true if compiled with SDL_net at least X.Y.Z.\nint SDLNet_Version(void);                                                                                                  // This function gets the version of the dynamically linked SDL_net library.\nbool SDLNet_Init(void);                                                                                                    // Initialize the SDL_net library.\nvoid SDLNet_Quit(void);                                                                                                    // Deinitialize the SDL_net library.\nSDLNet_Address * SDLNet_ResolveHostname(const char *host);                                                                 // Resolve a human-readable hostname.\nint SDLNet_WaitUntilResolved(SDLNet_Address *address, Sint32 timeout);                                                     // Block until an address is resolved.\nint SDLNet_GetAddressStatus(SDLNet_Address *address);                                                                      // Check if an address is resolved, without blocking.\nconst char * SDLNet_GetAddressString(SDLNet_Address *address);                                                             // Get a human-readable string from a resolved address.\nSDLNet_Address * SDLNet_RefAddress(SDLNet_Address *address);                                                               // Add a reference to an SDLNet_Address.\nvoid SDLNet_UnrefAddress(SDLNet_Address *address);                                                                         // Drop a reference to an SDLNet_Address.\nvoid SDLNet_SimulateAddressResolutionLoss(int percent_loss);                                                               // Enable simulated address resolution failures.\nint SDLNet_CompareAddresses(const SDLNet_Address *a, const SDLNet_Address *b);                                             // Compare two SDLNet_Address objects.\nSDLNet_Address ** SDLNet_GetLocalAddresses(int *num_addresses);                                                            // Obtain a list of local addresses on the system.\nvoid SDLNet_FreeLocalAddresses(SDLNet_Address **addresses);                                                                // Free the results from SDLNet_GetLocalAddresses.\nSDLNet_StreamSocket * SDLNet_CreateClient(SDLNet_Address *address, Uint16 port);                                           // Begin connecting a socket as a client to a remote server.\nint SDLNet_WaitUntilConnected(SDLNet_StreamSocket *sock, Sint32 timeout);                                                  // Block until a stream socket has connected to a server.\nSDLNet_Server * SDLNet_CreateServer(SDLNet_Address *addr, Uint16 port);                                                    // Create a server, which listens for connections to accept.\nbool SDLNet_AcceptClient(SDLNet_Server *server, SDLNet_StreamSocket **client_stream);                                      // Create a stream socket for the next pending client connection.\nvoid SDLNet_DestroyServer(SDLNet_Server *server);                                                                          // Dispose of a previously-created server.\nSDLNet_Address * SDLNet_GetStreamSocketAddress(SDLNet_StreamSocket *sock);                                                 // Get the remote address of a stream socket.\nint SDLNet_GetConnectionStatus(SDLNet_StreamSocket *sock);                                                                 // Check if a stream socket is connected, without blocking.\nbool SDLNet_WriteToStreamSocket(SDLNet_StreamSocket *sock, const void *buf, int buflen);                                   // Send bytes over a stream socket to a remote system.\nint SDLNet_GetStreamSocketPendingWrites(SDLNet_StreamSocket *sock);                                                        // Query bytes still pending transmission on a stream socket.\nint SDLNet_WaitUntilStreamSocketDrained(SDLNet_StreamSocket *sock, Sint32 timeout);                                        // Block until all of a stream socket's pending data is sent.\nint SDLNet_ReadFromStreamSocket(SDLNet_StreamSocket *sock, void *buf, int buflen);                                         // Receive bytes that a remote system sent to a stream socket.\nvoid SDLNet_SimulateStreamPacketLoss(SDLNet_StreamSocket *sock, int percent_loss);                                         // Enable simulated stream socket failures.\nvoid SDLNet_DestroyStreamSocket(SDLNet_StreamSocket *sock);                                                                // Dispose of a previously-created stream socket.\nSDLNet_DatagramSocket * SDLNet_CreateDatagramSocket(SDLNet_Address *addr, Uint16 port);                                    // Create and bind a new datagram socket.\nbool SDLNet_SendDatagram(SDLNet_DatagramSocket *sock, SDLNet_Address *address, Uint16 port, const void *buf, int buflen);  // Send a new packet over a datagram socket to a remote system.\nbool SDLNet_ReceiveDatagram(SDLNet_DatagramSocket *sock, SDLNet_Datagram **dgram);                                         // Receive a new packet that a remote system sent to a datagram socket.\nvoid SDLNet_DestroyDatagram(SDLNet_Datagram *dgram);                                                                       // Dispose of a datagram packet previously received.\nvoid SDLNet_SimulateDatagramPacketLoss(SDLNet_DatagramSocket *sock, int percent_loss);                                     // Enable simulated datagram socket failures.\nvoid SDLNet_DestroyDatagramSocket(SDLNet_DatagramSocket *sock);                                                            // Dispose of a previously-created datagram socket.\nint SDLNet_WaitUntilInputAvailable(void **vsockets, int numsockets, Sint32 timeout);                                       // Block on multiple sockets until at least one has data available.\n```\n\n----------------------------------------\n\nTITLE: SDL_strlcat Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_strlcat function in C, which concatenates a source string to a destination string, ensuring that the resulting string is null-terminated and does not exceed the maximum length specified. The function returns the total length of the strings, not including the null terminator. Requires SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strlcat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_strlcat(char *dst, const char *src, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_PenTouchEvent Structure Definition in C\nDESCRIPTION: Defines the structure for pressure-sensitive pen touched events in SDL3. This structure includes information about the event type, timestamp, window ID, pen ID, pen state, coordinates, and whether the eraser end is used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenTouchEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_PenTouchEvent\n{\n    SDL_EventType type;     /**< SDL_EVENT_PEN_DOWN or SDL_EVENT_PEN_UP */\n    Uint32 reserved;\n    Uint64 timestamp;       /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID;  /**< The window with pen focus, if any */\n    SDL_PenID which;        /**< The pen instance id */\n    SDL_PenInputFlags pen_state;   /**< Complete pen input state at time of event */\n    float x;                /**< X coordinate, relative to window */\n    float y;                /**< Y coordinate, relative to window */\n    bool eraser;        /**< true if eraser end is used (not all pens support this). */\n    bool down;          /**< true if the pen is touching or false if the pen is lifted off */\n} SDL_PenTouchEvent;\n```\n\n----------------------------------------\n\nTITLE: Check if a property exists in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_HasProperty to check for the existence of a property within a set of properties in SDL3. It takes an SDL_PropertiesID representing the properties and a string representing the name of the property to check.  The function returns true if the property exists, and false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasProperty(SDL_PropertiesID props, const char *name);\n```\n\n----------------------------------------\n\nTITLE: SDL_sscanf Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_sscanf` function in C. It takes a string `text` to scan, a format string `fmt`, and a variable number of pointers to values where the scanned items will be stored. The function returns the number of items successfully matched in the format string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_sscanf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_sscanf(const char *text, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Including SDL in a project using CMake\nDESCRIPTION: This CMake script demonstrates how to include SDL in a project, supporting both system-installed and vendored SDL libraries.  It uses the `MYGAME_VENDORED` option to switch between the two methods.  It requires CMake version 3.5 or higher.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(mygame)\n\n# Create an option to switch between a system sdl library and a vendored SDL library\noption(MYGAME_VENDORED \"Use vendored libraries\" OFF)\n\nif(MYGAME_VENDORED)\n    # This assumes you have added SDL as a submodule in vendored/SDL\n    add_subdirectory(vendored/SDL EXCLUDE_FROM_ALL)\nelse()\n    # 1. Look for a SDL3 package,\n    # 2. look for the SDL3-shared component, and\n    # 3. fail if the shared component cannot be found.\n    find_package(SDL3 REQUIRED CONFIG REQUIRED COMPONENTS SDL3-shared)\nendif()\n\n# Create your game executable target as usual\nadd_executable(mygame WIN32 mygame.c)\n\n# Link to the actual SDL3 library.\ntarget_link_libraries(mygame PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: SDL_GetSurfaceImages Syntax in C\nDESCRIPTION: Retrieves an array of all versions of an SDL_Surface. The function takes an SDL_Surface pointer and an integer pointer to store the number of surfaces returned. It returns a NULL-terminated array of SDL_Surface pointers or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfaceImages.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface ** SDL_GetSurfaceImages(SDL_Surface *surface, int *count);\n```\n\n----------------------------------------\n\nTITLE: Get Window Maximum Size in C\nDESCRIPTION: Retrieves the maximum width and height of the client area of an SDL window.  The function takes an SDL_Window pointer and two integer pointers as input. The maximum width and height are written to the integer pointers. If either pointer is NULL, the corresponding dimension is not returned. Requires SDL 2.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowMaximumSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetWindowMaximumSize(SDL_Window * window,\n                              int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick USB Product ID (SDL3, C)\nDESCRIPTION: Retrieves the USB product ID of an opened joystick. Requires an SDL_Joystick pointer obtained from SDL_OpenJoystick(). Returns the USB product ID as a Uint16 value, or 0 if unavailable. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickProduct.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetJoystickProduct(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_Palette Structure Definition in C\nDESCRIPTION: Defines the SDL_Palette structure, which is used to represent a color palette in SDL. It contains fields for the number of colors in the palette (`ncolors`), a pointer to an array of `SDL_Color` structures (`colors`), and internal versioning and reference counting fields (`version`, `refcount`). This structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Palette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Palette\n{\n    int ncolors;        /**< number of elements in `colors`. */\n    SDL_Color *colors;  /**< an array of colors, `ncolors` long. */\n    Uint32 version;     /**< internal use only, do not touch. */\n    int refcount;       /**< internal use only, do not touch. */\n} SDL_Palette;\n```\n\n----------------------------------------\n\nTITLE: Setting Log Priority in SDL2 (C)\nDESCRIPTION: Sets the priority of a specific log category using SDL_LogSetPriority. This function allows developers to control the verbosity of log messages for different categories within their SDL2 application.  It requires the category and desired priority as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogSetPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogSetPriority(int category,\n                        SDL_LogPriority priority);\n```\n\n----------------------------------------\n\nTITLE: Get Window Mouse Rectangle in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetWindowMouseRect function in SDL2. It retrieves the mouse confinement rectangle of a window. The function takes a SDL_Window pointer as input and returns a const SDL_Rect pointer, or NULL if no rectangle is set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowMouseRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_Rect * SDL_GetWindowMouseRect(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: SDL_PushGPUComputeUniformData Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_PushGPUComputeUniformData function. This function pushes data to a uniform slot on the command buffer, allowing subsequent draw calls to use the provided uniform data. The data being pushed must respect std140 layout conventions, particularly ensuring that vec3 and vec4 fields are 16-byte aligned.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PushGPUComputeUniformData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PushGPUComputeUniformData(\n    SDL_GPUCommandBuffer *command_buffer,\n    Uint32 slot_index,\n    const void *data,\n    Uint32 length);\n\n```\n\n----------------------------------------\n\nTITLE: Get Current OpenGL Context in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GL_GetCurrentContext function, which retrieves the currently active OpenGL context. It takes no arguments and returns an SDL_GLContext pointer, which represents the active OpenGL context, or NULL on failure. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_GetCurrentContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GLContext SDL_GL_GetCurrentContext(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetJoystickEventsEnabled Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetJoystickEventsEnabled function. It takes a boolean parameter, 'enabled', to control whether joystick events are processed. When 'enabled' is true, joystick events are processed automatically. When 'enabled' is false, joystick events must be updated manually using SDL_UpdateJoysticks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetJoystickEventsEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetJoystickEventsEnabled(bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Get Music Title Tag in SDL_mixer (C)\nDESCRIPTION: Retrieves the title tag from a music object using Mix_GetMusicTitleTag. The function takes a pointer to a Mix_Music object as input, which represents the loaded music file. It returns a const char* pointing to the music's title if available, or an empty string if not. If the input Mix_Music pointer is NULL, it queries the currently-playing music.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicTitleTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicTitleTag(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Device Status in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAudioDeviceStatus function in C. It takes an SDL_AudioDeviceID as input, which represents the ID of an audio device opened with SDL_OpenAudioDevice. The function returns an SDL_AudioStatus enum value indicating the current audio state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAudioDeviceStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitThread Syntax (C)\nDESCRIPTION: The SDL_WaitThread function waits for a specified thread to finish its execution. It takes the SDL_Thread pointer and a pointer to an integer to store the thread's return value as parameters. It's crucial to wait for non-detached threads to prevent resource leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WaitThread.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_WaitThread(SDL_Thread * thread, int *status);\n```\n\n----------------------------------------\n\nTITLE: Handling Application Events in SDL on iOS (C)\nDESCRIPTION: This code snippet demonstrates how to handle application lifecycle events in SDL for iOS, such as termination, low memory, backgrounding, and foregrounding. The `HandleAppEvents` function is registered as an event filter using `SDL_SetEventFilter`. This is crucial for iOS apps as the OS may not grant processing time after delivering these events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/ios.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint HandleAppEvents(void *userdata, SDL_Event *event)\n{\n    switch (event->type)\n    {\n    case SDL_APP_TERMINATING:\n        /* Terminate the app.\n           Shut everything down before returning from this function.\n        */\n        return 0;\n    case SDL_APP_LOWMEMORY:\n        /* You will get this when your app is paused and iOS wants more memory.\n           Release as much memory as possible.\n        */\n        return 0;\n    case SDL_APP_WILLENTERBACKGROUND:\n        /* Prepare your app to go into the background.  Stop loops, etc.\n           This gets called when the user hits the home button, or gets a call.\n        */\n        return 0;\n    case SDL_APP_DIDENTERBACKGROUND:\n        /* This will get called if the user accepted whatever sent your app to the background.\n           If the user got a phone call and canceled it, you'll instead get an SDL_APP_DIDENTERFOREGROUND event and restart your loops.\n           When you get this, you have 5 seconds to save all your state or the app will be terminated.\n           Your app is NOT active at this point.\n        */\n        return 0;\n    case SDL_APP_WILLENTERFOREGROUND:\n        /* This call happens when your app is coming back to the foreground.\n           Restore all your state here.\n        */\n        return 0;\n    case SDL_APP_DIDENTERFOREGROUND:\n        /* Restart your loops here.\n           Your app is interactive and getting CPU again.\n        */\n        return 0;\n    default:\n        /* No special processing, add it to the event queue */\n        return 1;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_SetEventFilter(HandleAppEvents, NULL);\n\n    ... run your main loop\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Scale Mode using SDL_SetTextureScaleMode in C\nDESCRIPTION: Sets the scaling mode for a given SDL_Texture. The function takes a pointer to the texture and an SDL_ScaleMode enum value as input. It returns true on success and false on failure, providing error information via SDL_GetError(). This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTextureScaleMode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode scaleMode);\n```\n\n----------------------------------------\n\nTITLE: SDL_wcsnlen Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_wcsnlen function, used to calculate the length of a wide character string, `wstr`, up to a maximum length, `maxlen`. The function returns the length of the string in wide characters (excluding the null terminator) up to the specified maximum.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcsnlen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_wcsnlen(const wchar_t *wstr, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateWindowSurface Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_UpdateWindowSurface function in C. It takes a pointer to an SDL_Window as input and returns an integer representing the success or failure of the operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UpdateWindowSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UpdateWindowSurface(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Audio Device Enumeration\nDESCRIPTION: This code snippet demonstrates how to enumerate audio playback devices in SDL3. It initializes the audio subsystem, retrieves the list of playback devices using SDL_GetAudioPlaybackDevices, iterates through the list, and logs the name of each device using SDL_GetAudioDeviceName.  It requires initializing and quitting the SDL audio subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_AUDIO)) {\n        int i, num_devices;\n        SDL_AudioDeviceID *devices = SDL_GetAudioPlaybackDevices(&num_devices);\n        if (devices) {\n            for (i = 0; i < num_devices; ++i) {\n                SDL_AudioDeviceID instance_id = devices[i];\n                SDL_Log(\"AudioDevice %\" SDL_PRIu32 \": %s\", instance_id, SDL_GetAudioDeviceName(instance_id));\n            }\n            SDL_free(devices);\n        }\n        SDL_QuitSubSystem(SDL_INIT_AUDIO);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Check for Event Type in Queue - SDL3 (C)\nDESCRIPTION: The SDL_HasEvent function checks if the specified event type exists in the event queue. It takes a Uint32 representing the event type as input and returns a boolean value indicating whether the event type is present in the queue. This function is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasEvent(Uint32 type);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom GPU Render State in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for creating a custom GPU render state using the SDL_CreateGPURenderState function. It requires a valid SDL_Renderer and a SDL_GPURenderStateDesc structure initialized using SDL_INIT_INTERFACE(). It returns a pointer to the created SDL_GPURenderState, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPURenderState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPURenderState * SDL_CreateGPURenderState(SDL_Renderer *renderer, SDL_GPURenderStateDesc *desc);\n```\n\n----------------------------------------\n\nTITLE: SDL_OnApplicationDidReceiveMemoryWarning Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_OnApplicationDidReceiveMemoryWarning function in C. This function allows iOS apps with external event handling to hook into SDL to generate SDL events when the application receives a memory warning. It's safe to call from any thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OnApplicationDidReceiveMemoryWarning.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_OnApplicationDidReceiveMemoryWarning(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowBrightness Syntax in C\nDESCRIPTION: Defines the syntax for SDL_SetWindowBrightness function in C. This function takes an SDL_Window pointer and a float value for brightness as input, and returns an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowBrightness.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowBrightness(SDL_Window * window, float brightness);\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_LoadLibrary Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_Vulkan_LoadLibrary function in C. It takes a const char * path as input, representing the path to the Vulkan loader library, and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_LoadLibrary.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_Vulkan_LoadLibrary(const char *path);\n```\n\n----------------------------------------\n\nTITLE: SDL_NSTimerCallback Definition in C\nDESCRIPTION: Defines the function prototype for the nanosecond timer callback function in SDL3. It specifies the function's return type (Uint64) and parameters (userdata, timerID, interval). The callback function is responsible for determining the next timer interval, or disabling the timer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NSTimerCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint64 (SDLCALL *SDL_NSTimerCallback)(void *userdata, SDL_TimerID timerID, Uint64 interval);\n```\n\n----------------------------------------\n\nTITLE: Get CPU Cache Line Size in C\nDESCRIPTION: Retrieves the CPU's L1 cache line size using the SDL_GetCPUCacheLineSize function. This function is available since SDL 3.2.0 and is thread-safe. The return value is the size in bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCPUCacheLineSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetCPUCacheLineSize(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES in C\nDESCRIPTION: Defines the SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES hint as a string literal. This hint allows the user to specify the audio device's buffer size in sample frames before opening the audio device. The value should be an integer greater than 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES \"SDL_AUDIO_DEVICE_SAMPLE_FRAMES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderCopyEx Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderCopyEx function in C, including its parameters and return type. This function copies a portion of a texture to the current rendering target, allowing for rotation and flipping. It requires a renderer, texture, source rectangle, destination rectangle, angle, center point for rotation, and flip flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderCopyEx.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderCopyEx(SDL_Renderer * renderer,\n                   SDL_Texture * texture,\n                   const SDL_Rect * srcrect,\n                   const SDL_Rect * dstrect,\n                   const double angle,\n                   const SDL_Point *center,\n                   const SDL_RendererFlip flip);\n```\n\n----------------------------------------\n\nTITLE: TTF_CopyFont Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_CopyFont function, which creates a copy of an existing TTF_Font. It takes a pointer to the existing font as input and returns a pointer to the newly created font. Returns NULL on failure, requiring a call to SDL_GetError() for further information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CopyFont.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_Font * TTF_CopyFont(TTF_Font *existing_font);\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowSimpleMessageBox Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ShowSimpleMessageBox function in C. It takes flags (specifying the type of message box), a title, a message, and a parent window as input. It returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ShowSimpleMessageBox.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *message, SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_ComposeCustomBlendMode Syntax\nDESCRIPTION: Defines the syntax for the SDL_ComposeCustomBlendMode function in C, which is used to compose a custom blend mode.  The function takes source and destination blend factors for color and alpha, as well as the blend operations for color and alpha. It returns an SDL_BlendMode representing the composed blend mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ComposeCustomBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor,\n                                     SDL_BlendFactor dstColorFactor,\n                                     SDL_BlendOperation colorOperation,\n                                     SDL_BlendFactor srcAlphaFactor,\n                                     SDL_BlendFactor dstAlphaFactor,\n                                     SDL_BlendOperation alphaOperation);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickRumbleTriggers Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_JoystickRumbleTriggers function, which is used to start a rumble effect in the joystick's triggers. The function takes a joystick pointer, left and right rumble intensities, and a duration in milliseconds as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickRumbleTriggers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickRumbleTriggers(SDL_Joystick *joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);\n```\n\n----------------------------------------\n\nTITLE: Setting Volume with Mix_Volume in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_Volume function, which sets or queries the volume of a specific channel in SDL_mixer. It takes the channel number and the desired volume as input. A channel value of -1 affects all channels.  The volume should be between 0 and MIX_MAX_VOLUME (128).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Volume.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Volume(int channel, int volume);\n```\n\n----------------------------------------\n\nTITLE: Querying Events with SDL_PeepEvents in SDL3\nDESCRIPTION: This code snippet demonstrates how to query events using SDL_PeepEvents in SDL3. It showcases the updated syntax for specifying event masks using ranges instead of the SDL_EVENTMASK macro, specifically filtering for mouse button down events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nSDL_PeepEvents(&event, 1, SDL_GETEVENT, SDL_EVENT_MOUSE_BUTTON_DOWN, SDL_EVENT_MOUSE_BUTTON_DOWN);\n```\n\n----------------------------------------\n\nTITLE: SDL_PutAudioStreamData Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_PutAudioStreamData function in C, which is used to add audio data to an SDL_AudioStream. The function takes a pointer to an SDL_AudioStream, a const void pointer to the audio data, and an integer representing the length of the data in bytes. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PutAudioStreamData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PutAudioStreamData(SDL_AudioStream *stream, const void *buf, int len);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetStringForButton Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GameControllerGetStringForButton function, which takes an SDL_GameControllerButton enum as input and returns a constant character pointer (string) representing the button's mapping string.  The returned string should not be freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetStringForButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);\n```\n\n----------------------------------------\n\nTITLE: Get Clipboard Data with SDL_GetClipboardData in C\nDESCRIPTION: Retrieves data from the clipboard based on the provided MIME type. The function takes a MIME type string and a pointer to a size_t variable as input. The size_t variable will be populated with the size of the retrieved data. The function returns a pointer to the retrieved data buffer, or NULL on failure. The returned buffer should be freed using SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetClipboardData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_GetClipboardData(const char *mime_type, size_t *size);\n```\n\n----------------------------------------\n\nTITLE: SDL_calloc Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_calloc function in C, which allocates memory for an array and initializes it to zero. It takes the number of elements and the size of each element as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_calloc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_calloc(size_t nmemb, size_t size);\n```\n\n----------------------------------------\n\nTITLE: TTF_OpenFontIndexRW Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the `TTF_OpenFontIndexRW` function from the SDL_ttf library. It takes an SDL_RWops pointer (`src`), an integer indicating whether to free the source (`freesrc`), an integer for the point size (`ptsize`), and a long integer for the font index (`index`) as input parameters. It returns a pointer to a `TTF_Font` structure, which represents the opened font, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_OpenFontIndexRW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_Font * TTF_OpenFontIndexRW(SDL_RWops *src, int freesrc, int ptsize, long index);\n```\n\n----------------------------------------\n\nTITLE: Get Current Log Output Function in SDL3 (C)\nDESCRIPTION: Retrieves the currently set log output function and the associated user data pointer in SDL3.  This function populates the provided callback pointer with the address of the current log output function and the userdata pointer with the associated user data. This function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetLogOutputFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetLogOutputFunction(SDL_LogOutputFunction *callback, void **userdata);\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Joystick Button State in SDL2 (C)\nDESCRIPTION: Sets the state of a specific button on a virtual joystick. The function takes a pointer to the joystick, the button index, and the new value for the button (Uint8). Changes made by this function are not applied until SDL_JoystickUpdate is called, either directly or indirectly through other SDL functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickSetVirtualButton.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_JoystickSetVirtualButton(SDL_Joystick *joystick, int button, Uint8 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadFile_IO Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_LoadFile_IO function, which loads data from an SDL data stream. It takes an SDL_IOStream pointer, a pointer to a size_t for the data size, and a boolean indicating whether to close the stream after reading. It returns a void pointer to the loaded data, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadFile_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_LoadFile_IO(SDL_IOStream *src, size_t *datasize, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenAudioDevice Function Signature in C\nDESCRIPTION: This C code snippet presents the syntax or function signature of SDL_OpenAudioDevice as defined in SDL3/SDL_audio.h. It takes an SDL_AudioDeviceID and a pointer to an SDL_AudioSpec as input and returns an SDL_AudioDeviceID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenAudioDevice.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioDeviceID SDL_OpenAudioDevice(SDL_AudioDeviceID devid, const SDL_AudioSpec *spec);\n```\n\n----------------------------------------\n\nTITLE: Get Render Output Size in C\nDESCRIPTION: Retrieves the output size in pixels of a rendering context using SDL_GetRenderOutputSize. The function takes a pointer to an SDL_Renderer and pointers to integers that will be populated with the width and height of the output. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderOutputSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderOutputSize(SDL_Renderer *renderer, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Playing Status with Mix_Playing in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_Playing function, which is used to check the playback status of a specific audio channel in SDL_mixer. It takes an integer representing the channel number as input and returns an integer indicating whether the channel is playing (non-zero) or not (zero). If the channel is -1, it returns the total number of playing channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Playing.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Playing(int channel);\n```\n\n----------------------------------------\n\nTITLE: Setting Primary Selection Text with SDL_SetPrimarySelectionText in C\nDESCRIPTION: Sets the UTF-8 text to the primary selection using SDL_SetPrimarySelectionText. The function takes a const char * as input, representing the text to store in the primary selection.  It returns true on success and false on failure. SDL_GetError can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetPrimarySelectionText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetPrimarySelectionText(const char *text);\n```\n\n----------------------------------------\n\nTITLE: Play Music with SDL_mixer (C)\nDESCRIPTION: This code snippet demonstrates how to use the Mix_PlayMusic function from the SDL_mixer library to play a music object. It takes a Mix_Music pointer (music) and the number of loops as input. If another music object is playing, it will be stopped before the new music starts. The function returns 0 on success and -1 on error. If the music is fading out, the function will block until the fade is complete.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_PlayMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_PlayMusic(Mix_Music *music, int loops);\n```\n\n----------------------------------------\n\nTITLE: Opening Haptic Device from Mouse in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_OpenHapticFromMouse function. It attempts to open a haptic device that is connected to the current mouse. The function returns a pointer to the SDL_Haptic structure if successful, or NULL if it fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenHapticFromMouse.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Haptic * SDL_OpenHapticFromMouse(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_MessageBoxData Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_MessageBoxData structure, which is used to specify the properties of a message box. It includes fields for flags (SDL_MessageBoxFlags), the parent window (SDL_Window*), title and message text (const char*), buttons (SDL_MessageBoxButtonData*), the number of buttons (int), and color scheme (SDL_MessageBoxColorScheme*).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MessageBoxData\n{\n    SDL_MessageBoxFlags flags;\n    SDL_Window *window;                 /**< Parent window, can be NULL */\n    const char *title;                  /**< UTF-8 title */\n    const char *message;                /**< UTF-8 message text */\n\n    int numbuttons;\n    const SDL_MessageBoxButtonData *buttons;\n\n    const SDL_MessageBoxColorScheme *colorScheme;   /**< SDL_MessageBoxColorScheme, can be NULL to use system settings */\n} SDL_MessageBoxData;\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Data from an SDL_AudioStream in a Loop\nDESCRIPTION: This code snippet demonstrates how to repeatedly retrieve converted audio data from an SDL_AudioStream using SDL_GetAudioStreamData until no more data is available. It reads up to 100 floats from the stream into the `converted` buffer in a loop. It includes error handling and calls a function `write_more_samples_to_disk` to process the retrieved data. The loop continues as long as `gotten` is greater than 0, indicating that data was successfully retrieved.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/AudioStream.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint gotten;\ndo {\n    float converted[100];\n    // this is in bytes, not samples!\n    gotten = SDL_GetAudioStreamData(stream, converted, sizeof (converted));\n    if (gotten == -1) {\n        printf(\"Uhoh, failed to get converted data: %s\\n\", SDL_GetError());\n    } else {\n        // (gotten) might be less than requested in SDL_GetAudioStreamData!\n        write_more_samples_to_disk(converted, gotten); /* whatever. */\n    }\n} while (gotten > 0);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUVertexInputRate Enum Definition in C\nDESCRIPTION: This code defines the SDL_GPUVertexInputRate enum, which determines how vertex attributes are fetched from buffers. SDL_GPU_VERTEXINPUTRATE_VERTEX indicates fetching per vertex, while SDL_GPU_VERTEXINPUTRATE_INSTANCE indicates fetching per instance. It is available since SDL 3.2.0 and part of the SDL_gpu.h header.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUVertexInputRate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUVertexInputRate\n{\n    SDL_GPU_VERTEXINPUTRATE_VERTEX,   /**< Attribute addressing is a function of the vertex index. */\n    SDL_GPU_VERTEXINPUTRATE_INSTANCE  /**< Attribute addressing is a function of the instance index. */\n} SDL_GPUVertexInputRate;\n```\n\n----------------------------------------\n\nTITLE: SDL_SetGamepadLED Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetGamepadLED function in C, including its parameters and return type. It takes an SDL_Gamepad pointer, and three Uint8 values for red, green, and blue color components and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGamepadLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetGamepadLED(SDL_Gamepad *gamepad, Uint8 red, Uint8 green, Uint8 blue);\n```\n\n----------------------------------------\n\nTITLE: Setting Color Key with SDL_SetColorKey in C\nDESCRIPTION: This C code snippet shows the syntax of the SDL_SetColorKey function, used to define a color key (transparent pixel) for a given SDL surface. It takes the surface pointer, a flag to enable/disable the color key, and the color key itself as parameters. Returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetColorKey.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetColorKey(SDL_Surface * surface,\n                    int flag, Uint32 key);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetScancodeFromKey Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetScancodeFromKey function in C. It takes an SDL_Keycode and an optional pointer to an SDL_Keymod as input and returns the corresponding SDL_Scancode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetScancodeFromKey.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key, SDL_Keymod *modstate);\n```\n\n----------------------------------------\n\nTITLE: Enable Screen Saver in SDL2 (C)\nDESCRIPTION: Enables the screen saver functionality using SDL. This function allows the system to blank the screen after a period of inactivity. It requires the SDL2 library to be initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_EnableScreenSaver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_EnableScreenSaver(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_AppInit Syntax (C)\nDESCRIPTION: Defines the syntax of the SDL_AppInit function. This function serves as the application's entry point when SDL_MAIN_USE_CALLBACKS is defined. It takes a pointer to application state, argument count, and argument vector as input and returns an SDL_AppResult to control program flow.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AppResult SDL_AppInit(void **appstate, int argc, char *argv[]);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PowerState Enum in C\nDESCRIPTION: This code snippet defines the SDL_PowerState enumeration in C, which represents the power supply state of the system. The enum includes values for error, unknown, on battery, no battery, charging, and charged states. It is used by SDL_GetPowerInfo to retrieve power information about the system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PowerState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PowerState\n{\n    SDL_POWERSTATE_ERROR = -1,   /**< error determining power status */\n    SDL_POWERSTATE_UNKNOWN,      /**< cannot determine power status */\n    SDL_POWERSTATE_ON_BATTERY,   /**< Not plugged in, running on the battery */\n    SDL_POWERSTATE_NO_BATTERY,   /**< Plugged in, no battery available */\n    SDL_POWERSTATE_CHARGING,     /**< Plugged in, charging battery */\n    SDL_POWERSTATE_CHARGED       /**< Plugged in, battery charged */\n} SDL_PowerState;\n```\n\n----------------------------------------\n\nTITLE: SDL_RWFromConstMem Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_RWFromConstMem function. It takes a const void pointer to a read-only memory buffer and an integer representing the buffer size as input. It returns a pointer to an SDL_RWops structure, which is used for read-only I/O operations on the provided memory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWFromConstMem.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_RWops* SDL_RWFromConstMem(const void *mem,\n                              int size);\n```\n\n----------------------------------------\n\nTITLE: Querying Channel Fading SDL_mixer C\nDESCRIPTION: Queries the current fading status of a specific channel. Takes the channel ID as a parameter. Returns a Mix_Fading enum value representing the fading state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nMix_Fading Mix_FadingChannel(int which);\n```\n\n----------------------------------------\n\nTITLE: Check Screen Keyboard Visibility SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_IsScreenKeyboardShown function. It takes a pointer to an SDL_Window as input and returns an SDL_bool indicating whether the screen keyboard is currently shown for that window. This function is part of SDL2's keyboard API and is available since version 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsScreenKeyboardShown.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IsScreenKeyboardShown(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Hat Count with SDL_JoystickNumHats in C\nDESCRIPTION: This snippet demonstrates how to use SDL_JoystickNumHats to retrieve the number of POV hats associated with an SDL_Joystick. It takes a pointer to an SDL_Joystick structure as input and returns an integer representing the hat count. Requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickNumHats.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickNumHats(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Get Platform Name with SDL_GetPlatform in C\nDESCRIPTION: Retrieves the name of the platform using SDL_GetPlatform. This function returns a const char* representing the platform name. If the platform is unknown, it returns a string starting with \"Unknown\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPlatform.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetPlatform (void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SemWait Syntax in C\nDESCRIPTION: This snippet shows the syntax for using SDL_SemWait. It takes a pointer to an SDL_sem object as input and returns an integer indicating success or failure. The calling thread will block until the semaphore value is positive and then decremented.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SemWait.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SemWait(SDL_sem * sem);\n```\n\n----------------------------------------\n\nTITLE: Open Haptic Device with SDL_OpenHaptic in C\nDESCRIPTION: Opens a haptic device using its instance ID. The instance ID specifies the device to open. Returns a pointer to the haptic device or NULL on failure. Requires SDL3 and SDL_haptic.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Haptic * SDL_OpenHaptic(SDL_HapticID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetJoystickProductVersion Syntax (C)\nDESCRIPTION: Defines the syntax for retrieving the product version of an opened SDL joystick. Requires a pointer to an SDL_Joystick object obtained from SDL_OpenJoystick(). Returns the product version as a Uint16, or 0 if unavailable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickProductVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetJoystickProductVersion(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlendMode Enum Definition in C\nDESCRIPTION: Defines the SDL_BlendMode enum, which specifies how source and destination colors are blended during rendering operations in SDL. It includes modes for no blending, alpha blending, additive blending, color modulation, and color multiplication. The blend modes are used in functions like SDL_RenderCopy to control the appearance of rendered textures and primitives.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_BlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_BlendMode\n{\n    SDL_BLENDMODE_NONE = 0x00000000,     /**< no blending\n                                              dstRGBA = srcRGBA */\n    SDL_BLENDMODE_BLEND = 0x00000001,    /**< alpha blending\n                                              dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))\n                                              dstA = srcA + (dstA * (1-srcA)) */\n    SDL_BLENDMODE_ADD = 0x00000002,      /**< additive blending\n                                              dstRGB = (srcRGB * srcA) + dstRGB\n                                              dstA = dstA */\n    SDL_BLENDMODE_MOD = 0x00000004,      /**< color modulate\n                                              dstRGB = srcRGB * dstRGB\n                                              dstA = dstA */\n    SDL_BLENDMODE_MUL = 0x00000008,      /**< color multiply\n                                              dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA))\n                                              dstA = dstA */\n    SDL_BLENDMODE_INVALID = 0x7FFFFFFF\n\n    /* Additional custom blend modes can be returned by SDL_ComposeCustomBlendMode() */\n\n} SDL_BlendMode;\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadStorageFile Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadStorageFile function in C.  It takes a storage container, a file path, a destination buffer, and the length of the buffer as input.  It returns a boolean value indicating success or failure. Call SDL_GetError() for more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadStorageFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadStorageFile(SDL_Storage *storage, const char *path, void *destination, Uint64 length);\n```\n\n----------------------------------------\n\nTITLE: Get Channel Group Count SDL_mixer C\nDESCRIPTION: Retrieves the number of channels associated with a specific group identified by its tag using `Mix_GroupCount`. If the tag is -1, it returns the total number of allocated channels. This function requires the SDL_mixer library and is available since version 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GroupCount.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GroupCount(int tag);\n```\n\n----------------------------------------\n\nTITLE: Extending SDLActivity in Java\nDESCRIPTION: This Java class extends SDLActivity to customize the application's main activity. It resides in a directory structure matching the package name under the src directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage com.gamemaker.game;\n\nimport org.libsdl.app.SDLActivity;\n\n/**\n * A sample wrapper class that just calls SDLActivity\n */\n\npublic class MyGame extends SDLActivity { }\n```\n\n----------------------------------------\n\nTITLE: SDL_CloseIO Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_CloseIO function in C. It takes an SDL_IOStream pointer as input and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CloseIO(SDL_IOStream *context);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Driver Name in SDL3 (C)\nDESCRIPTION: Retrieves the name of a built-in audio driver by its index. The function takes an integer index as input and returns a const char* representing the driver's name. Returns NULL if the index is invalid. Part of the SDL3 audio API and is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetAudioDriver(int index);\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_VirtualJoystickDesc Structure in C\nDESCRIPTION: This code snippet shows the definition of the `SDL_VirtualJoystickDesc` structure in C. This structure is used to describe a virtual joystick and is passed to the `SDL_JoystickAttachVirtualEx` function to register the virtual joystick with SDL. The structure includes fields for joystick type, capabilities (axes, buttons, hats), USB vendor/product IDs, masks to specify which buttons and axes are valid, a joystick name, a user data pointer, and a set of callback functions for various joystick functionalities, such as updating the joystick state, setting the player index, rumble effects, LED control, and sending effects. The caller must initialize the version field with `SDL_VIRTUAL_JOYSTICK_DESC_VERSION` before using the structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_VirtualJoystickDesc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_VirtualJoystickDesc\n{\n    Uint16 version;     /**< `SDL_VIRTUAL_JOYSTICK_DESC_VERSION` */\n    Uint16 type;        /**< `SDL_JoystickType` */\n    Uint16 naxes;       /**< the number of axes on this joystick */\n    Uint16 nbuttons;    /**< the number of buttons on this joystick */\n    Uint16 nhats;       /**< the number of hats on this joystick */\n    Uint16 vendor_id;   /**< the USB vendor ID of this joystick */\n    Uint16 product_id;  /**< the USB product ID of this joystick */\n    Uint16 padding;     /**< unused */\n    Uint32 button_mask; /**< A mask of which buttons are valid for this controller\n                             e.g. (1 << SDL_CONTROLLER_BUTTON_A) */\n    Uint32 axis_mask;   /**< A mask of which axes are valid for this controller\n                             e.g. (1 << SDL_CONTROLLER_AXIS_LEFTX) */\n    const char *name;   /**< the name of the joystick */\n\n    void *userdata;     /**< User data pointer passed to callbacks */\n    void (SDLCALL *Update)(void *userdata); /**< Called when the joystick state should be updated */\n    void (SDLCALL *SetPlayerIndex)(void *userdata, int player_index); /**< Called when the player index is set */\n    int (SDLCALL *Rumble)(void *userdata, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble); /**< Implements SDL_JoystickRumble() */\n    int (SDLCALL *RumbleTriggers)(void *userdata, Uint16 left_rumble, Uint16 right_rumble); /**< Implements SDL_JoystickRumbleTriggers() */\n    int (SDLCALL *SetLED)(void *userdata, Uint8 red, Uint8 green, Uint8 blue); /**< Implements SDL_JoystickSetLED() */\n    int (SDLCALL *SendEffect)(void *userdata, const void *data, int size); /**< Implements SDL_JoystickSendEffect() */\n\n} SDL_VirtualJoystickDesc;\n```\n\n----------------------------------------\n\nTITLE: Emscripten Main Loop Replacement in C\nDESCRIPTION: This code snippet showcases the Emscripten-compatible main loop. It includes checks for the game's running state and deinitializes resources when the game is no longer running. The `emscripten_cancel_main_loop` function is used to terminate the application in Emscripten environments, while `exit(0)` is used in non-Emscripten environments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/emscripten.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nstatic void mainloop(void)   /* this will run often, possibly at the monitor's refresh rate */\n{\n    if (!game_is_still_running) {\n        deinitialize_the_game();\n        #ifdef __EMSCRIPTEN__\n        emscripten_cancel_main_loop();  /* this should \"kill\" the app. */\n        #else\n        exit(0);\n        #endif\n    }\n\n    check_for_new_input();\n    think_about_stuff();\n    draw_the_next_frame();\n}\n\nvoid main(void)\n{\n    initialize_the_game();\n    #ifdef __EMSCRIPTEN__\n    emscripten_set_main_loop(mainloop, 0, 1);\n    #else\n    while (1) { mainloop(); }\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: Get Music Duration in SDL_mixer (C)\nDESCRIPTION: The `Mix_MusicDuration` function retrieves the duration of a `Mix_Music` object in seconds.  It takes a pointer to the music object as input and returns a double representing the duration. A return value of -1.0 indicates an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_MusicDuration.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ndouble Mix_MusicDuration(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Get Environment Variables in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetEnvironmentVariables function, which retrieves all environment variables as a NULL-terminated array of strings from the provided SDL_Environment. The returned memory should be freed using SDL_free.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetEnvironmentVariables.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar ** SDL_GetEnvironmentVariables(SDL_Environment *env);\n```\n\n----------------------------------------\n\nTITLE: Mix_GroupAvailable Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_GroupAvailable function in C, which searches for the first available channel within a group identified by a tag. It takes an integer tag as input and returns the first available channel or -1 if none are available. SDL_mixer 3.0.0 or later is required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GroupAvailable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GroupAvailable(int tag);\n```\n\n----------------------------------------\n\nTITLE: SDL_GamepadDeviceEvent Definition C\nDESCRIPTION: Defines the SDL_GamepadDeviceEvent structure which represents events related to gamepad devices such as being added, removed, or remapped.  It includes the event type, a reserved field, a timestamp in nanoseconds, and the joystick instance ID.  This structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadDeviceEvent.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_GamepadDeviceEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_GAMEPAD_ADDED, SDL_EVENT_GAMEPAD_REMOVED, or SDL_EVENT_GAMEPAD_REMAPPED, SDL_EVENT_GAMEPAD_UPDATE_COMPLETE or SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which;       /**< The joystick instance id */\n} SDL_GamepadDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Axis State in C\nDESCRIPTION: Retrieves the current state of an axis control on a joystick using SDL_JoystickGetAxis. The function takes an SDL_Joystick pointer and the axis index as input. It returns a 16-bit signed integer representing the axis position, ranging from -32768 to 32767. Requires including SDL_joystick.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint16 SDL_JoystickGetAxis(SDL_Joystick *joystick,\n                           int axis);\n```\n\n----------------------------------------\n\nTITLE: Loading animation from file using IMG_LoadAnimation in SDL_image\nDESCRIPTION: Loads an animation from the specified file path. Returns a pointer to the loaded animation, or NULL if an error occurred. The animation must be freed using IMG_FreeAnimation when no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadAnimation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimation(const char *file);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad from Instance ID in C\nDESCRIPTION: Retrieves the SDL_Gamepad associated with the specified joystick instance ID.  The `instance_id` parameter specifies the joystick instance ID of the gamepad. It returns a pointer to an SDL_Gamepad struct on success, or NULL if the gamepad hasn't been opened or an error has occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadFromID.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Gamepad * SDL_GetGamepadFromID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Primary Display ID - C\nDESCRIPTION: Retrieves the instance ID of the primary display using SDL_GetPrimaryDisplay. Returns an SDL_DisplayID on success, or 0 on failure. Call SDL_GetError() for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPrimaryDisplay.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayID SDL_GetPrimaryDisplay(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticConstant Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_HapticConstant` which is used to create constant haptic effects. The structure contains members to define the effect's direction, length, delay, trigger button, trigger interval, strength level, attack/fade lengths, and attack/fade levels. This is used exclusively for the `SDL_HAPTIC_CONSTANT` effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticConstant.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticConstant\n{\n    /* Header */\n    SDL_HapticEffectType type;      /**< SDL_HAPTIC_CONSTANT */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect. */\n    Uint16 delay;           /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;          /**< Button that triggers the effect. */\n    Uint16 interval;        /**< How soon it can be triggered again after button. */\n\n    /* Constant */\n    Sint16 level;           /**< Strength of the constant effect. */\n\n    /* Envelope */\n    Uint16 attack_length;   /**< Duration of the attack. */\n    Uint16 attack_level;    /**< Level at the start of the attack. */\n    Uint16 fade_length;     /**< Duration of the fade. */\n    Uint16 fade_level;      /**< Level at the end of the fade. */\n} SDL_HapticConstant;\n```\n\n----------------------------------------\n\nTITLE: SDL_strdup Function Signature in C\nDESCRIPTION: This snippet shows the function signature of SDL_strdup. It takes a constant character pointer (const char *str) as input, representing the string to be copied, and returns a character pointer (char *) to the newly allocated and copied string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strdup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strdup(const char *str);\n```\n\n----------------------------------------\n\nTITLE: Loading and Scaling SVG with IMG_LoadSizedSVG_RW in C\nDESCRIPTION: Loads an SVG image from an SDL_RWops stream, scales it to the specified width and height, and returns an SDL_Surface. Either width or height can be set to 0 to preserve the aspect ratio during scaling. Requires SDL_image 2.6.0 or later and SDL. Remember to free the surface using SDL_FreeSurface after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadSizedSVG_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadSizedSVG_RW(SDL_RWops *src, int width, int height);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PropertyType Enum in C\nDESCRIPTION: Defines the SDL_PropertyType enumeration, which specifies the different data types that a property can hold within the SDL properties API. This includes types like pointers, strings, numbers, floating-point values, and booleans. It is part of the SDL3 library and is available from version 3.2.0 onwards.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PropertyType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PropertyType\n{\n    SDL_PROPERTY_TYPE_INVALID,\n    SDL_PROPERTY_TYPE_POINTER,\n    SDL_PROPERTY_TYPE_STRING,\n    SDL_PROPERTY_TYPE_NUMBER,\n    SDL_PROPERTY_TYPE_FLOAT,\n    SDL_PROPERTY_TYPE_BOOLEAN\n} SDL_PropertyType;\n```\n\n----------------------------------------\n\nTITLE: Set Game Controller Sensor Enabled in SDL2 (C)\nDESCRIPTION: Enables or disables data reporting for a specific sensor type on a given SDL_GameController. The function takes the controller instance, the sensor type, and a boolean value indicating whether to enable or disable the sensor. Returns 0 on success, -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerSetSensorEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerSetSensorEnabled(SDL_GameController *gamecontroller, SDL_SensorType type, SDL_bool enabled);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUColorTargetBlendState struct definition in C\nDESCRIPTION: Defines the structure SDL_GPUColorTargetBlendState for managing the blend state of a color target. It includes members for source and destination color and alpha blend factors, blend operations, color write mask flags, and boolean flags for enabling blending and color write masking. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUColorTargetBlendState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUColorTargetBlendState\n{\n    SDL_GPUBlendFactor src_color_blendfactor;     /**< The value to be multiplied by the source RGB value. */\n    SDL_GPUBlendFactor dst_color_blendfactor;     /**< The value to be multiplied by the destination RGB value. */\n    SDL_GPUBlendOp color_blend_op;                /**< The blend operation for the RGB components. */\n    SDL_GPUBlendFactor src_alpha_blendfactor;     /**< The value to be multiplied by the source alpha. */\n    SDL_GPUBlendFactor dst_alpha_blendfactor;     /**< The value to be multiplied by the destination alpha. */\n    SDL_GPUBlendOp alpha_blend_op;                /**< The blend operation for the alpha component. */\n    SDL_GPUColorComponentFlags color_write_mask;  /**< A bitmask specifying which of the RGBA components are enabled for writing. Writes to all channels if enable_color_write_mask is false. */\n    bool enable_blend;                        /**< Whether blending is enabled for the color target. */\n    bool enable_color_write_mask;             /**< Whether the color write mask is enabled. */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_GPUColorTargetBlendState;\n```\n\n----------------------------------------\n\nTITLE: Accessing Window Information (New Method) in C\nDESCRIPTION: This code snippet demonstrates the updated method of accessing window system-specific information using `SDL_GetPointerProperty` and `SDL_GetNumberProperty` to retrieve window properties. It shows how to access window handles and display information for different platforms. The code relies on the window properties, which are set using the new SDL API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_44\n\nLANGUAGE: c\nCODE:\n```\n#if defined(SDL_PLATFORM_WIN32)\n    HWND hwnd = (HWND)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_WIN32_HWND_POINTER, NULL);\n    if (hwnd) {\n        ...\n    }\n#elif defined(SDL_PLATFORM_MACOS)\n    NSWindow *nswindow = (__bridge NSWindow *)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_COCOA_WINDOW_POINTER, NULL);\n    if (nswindow) {\n        ...\n    }\n#elif defined(SDL_PLATFORM_LINUX)\n    if (SDL_strcmp(SDL_GetCurrentVideoDriver(), \"x11\") == 0) {\n        Display *xdisplay = (Display *)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_X11_DISPLAY_POINTER, NULL);\n        Window xwindow = (Window)SDL_GetNumberProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_X11_WINDOW_NUMBER, 0);\n        if (xdisplay && xwindow) {\n            ...\n        }\n    } else if (SDL_strcmp(SDL_GetCurrentVideoDriver(), \"wayland\") == 0) {\n        struct wl_display *display = (struct wl_display *)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER, NULL);\n        struct wl_surface *surface = (struct wl_surface *)SDL_GetPointerProperty(SDL_GetWindowProperties(window), SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER, NULL);\n        if (display && surface) {\n            ...\n        }\n    }\n#elif defined(SDL_PLATFORM_IOS)\n    SDL_PropertiesID props = SDL_GetWindowProperties(window);\n    UIWindow *uiwindow = (__bridge UIWindow *)SDL_GetPointerProperty(props, SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER, NULL);\n    if (uiwindow) {\n        GLuint framebuffer = (GLuint)SDL_GetNumberProperty(props, SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER, 0);\n        GLuint colorbuffer = (GLuint)SDL_GetNumberProperty(props, SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER, 0);\n        GLuint resolveFramebuffer = (GLuint)SDL_GetNumberProperty(props, SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER, 0);\n        ...\n    }\n#endif\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowGrab Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_SetWindowGrab function in C. It takes an SDL_Window pointer and an SDL_bool indicating whether to grab or release input. When grabbing input, the mouse will be confined to the window. Keyboard grabbing is contingent on the SDL_HINT_GRAB_KEYBOARD hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowGrab(SDL_Window * window,\n                       SDL_bool grabbed);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Product ID with SDL_GetGamepadProduct in C\nDESCRIPTION: Retrieves the USB product ID of an opened gamepad using the SDL_GetGamepadProduct function. This function takes an SDL_Gamepad pointer as input and returns a Uint16 representing the product ID. It returns 0 if the product ID is unavailable. Requires SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadProduct.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetGamepadProduct(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: SDL_CondWaitTimeout Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_CondWaitTimeout function. It takes a condition variable, a mutex, and a timeout in milliseconds as input. It returns an integer indicating success, timeout, or failure. The mutex must be locked before calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CondWaitTimeout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_CondWaitTimeout(SDL_cond * cond,\n                        SDL_mutex * mutex, Uint32 ms);\n```\n\n----------------------------------------\n\nTITLE: Get Preferred Locales in SDL2 (C)\nDESCRIPTION: Retrieves an array of SDL_Locale structs representing the user's preferred locales. The returned array is NULL-terminated, and the memory it occupies must be freed using SDL_free. The locale strings are in ISO-639 and ISO-3166 formats for language and country codes, respectively. Returns NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPreferredLocales.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Locale * SDL_GetPreferredLocales(void);\n```\n\n----------------------------------------\n\nTITLE: Set Joystick LED Color in SDL2\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_JoystickSetLED function. It sets the color of the specified joystick's LED using RGB values. The function returns 0 on success and -1 if the joystick does not support LED modification. Requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickSetLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickSetLED(SDL_Joystick *joystick, Uint8 red, Uint8 green, Uint8 blue);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddTimer Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_AddTimer function. It shows how to add a timer using SDL in C, specifying the interval, callback function, and user data pointer. The function returns a timer ID, or 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddTimer.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_TimerID SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Get User Data from SDL Texture in C\nDESCRIPTION: Retrieves the user-specified pointer (void *) associated with the given SDL_Texture. The returned pointer is NULL if the texture is invalid or if no user data has been associated with it using SDL_SetTextureUserData.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTextureUserData.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid * SDL_GetTextureUserData(SDL_Texture * texture);\n```\n\n----------------------------------------\n\nTITLE: Get Nanoseconds with SDL_GetTicksNS in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetTicksNS function, which returns the number of nanoseconds since SDL library initialization.  The function takes no arguments and returns a Uint64 value. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTicksNS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_GetTicksNS(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_FlushEvent Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_FlushEvent` function in C. It takes a `Uint32` type as a parameter, which specifies the event type to be cleared from the event queue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FlushEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FlushEvent(Uint32 type);\n```\n\n----------------------------------------\n\nTITLE: Mapping GPU Transfer Buffer in C\nDESCRIPTION: This code snippet demonstrates the syntax for using the SDL_MapGPUTransferBuffer function to map a GPU transfer buffer into the application's address space. It takes a GPUDevice, a GPUTransferBuffer, and a boolean indicating whether to cycle the buffer if it's already bound.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MapGPUTransferBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_MapGPUTransferBuffer(\n    SDL_GPUDevice *device,\n    SDL_GPUTransferBuffer *transfer_buffer,\n    bool cycle);\n```\n\n----------------------------------------\n\nTITLE: Set Joystick LED Color in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetJoystickLED function, used to update the LED color of a joystick in SDL3. It takes a joystick pointer and RGB color values as input, returning a boolean indicating success or failure. Call SDL_GetError() for more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetJoystickLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetJoystickLED(SDL_Joystick *joystick, Uint8 red, Uint8 green, Uint8 blue);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_DestroyServer Syntax in C\nDESCRIPTION: The SDLNet_DestroyServer function disposes of a previously created server. It takes a pointer to an SDLNet_Server as input. This function will immediately disconnect any pending client connections that have not yet been accepted but will not disconnect existing accepted connections.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_DestroyServer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_DestroyServer(SDLNet_Server *server);\n```\n\n----------------------------------------\n\nTITLE: Setting Render Viewport with SDL_RenderSetViewport in C\nDESCRIPTION: Sets the drawing area for rendering on the current target using SDL_RenderSetViewport. The function takes an SDL_Renderer pointer and a pointer to an SDL_Rect structure that defines the desired viewport. Passing NULL for the SDL_Rect resets the viewport to the entire target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderSetViewport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderSetViewport(SDL_Renderer * renderer,\n                          const SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: Get Vulkan Instance Extensions in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to use SDL_Vulkan_GetInstanceExtensions to retrieve Vulkan instance extensions, add a debug extension, and use the extensions when creating a Vulkan instance. It utilizes SDL's memory management functions and error handling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_GetInstanceExtensions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nextern void handle_error(void);\n#ifndef VK_EXT_DEBUG_REPORT_EXTENSION_NAME\n#define VK_EXT_DEBUG_REPORT_EXTENSION_NAME \"VK_EXT_debug_report\"\n#endif\n\nUint32 count_instance_extensions;\nconst char * const *instance_extensions = SDL_Vulkan_GetInstanceExtensions(&count_instance_extensions);\n\nif (instance_extensions == NULL) { handle_error(); }\n\nint count_extensions = count_instance_extensions + 1;\nconst char **extensions = SDL_malloc(count_extensions * sizeof(const char *));\nextensions[0] = VK_EXT_DEBUG_REPORT_EXTENSION_NAME;\nSDL_memcpy(&extensions[1], instance_extensions, count_instance_extensions * sizeof(const char*)); \n\n// Now we can make the Vulkan instance\nVkInstanceCreateInfo create_info = {};\ncreate_info.enabledExtensionCount = count_extensions;\ncreate_info.ppEnabledExtensionNames = extensions;\n\nVkInstance instance;\nVkResult result = vkCreateInstance(&create_info, NULL, &instance);\nSDL_free(extensions);\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_CreateSurface Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_Vulkan_CreateSurface function, which creates a Vulkan rendering surface associated with an SDL window. It takes an SDL_Window pointer, a VkInstance handle, and a pointer to a VkSurfaceKHR handle as input, returning SDL_TRUE on success and SDL_FALSE on failure. The window must have the SDL_WINDOW_VULKAN flag set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Vulkan_CreateSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_Vulkan_CreateSurface(SDL_Window *window,\n                                  VkInstance instance,\n                                  VkSurfaceKHR* surface);\n```\n\n----------------------------------------\n\nTITLE: Get Pixel Format Name in SDL3 (C)\nDESCRIPTION: Retrieves the human-readable name of a pixel format in SDL3. This function takes an SDL_PixelFormat as input and returns a const char* representing the name of the format. It returns \"[SDL_PIXELFORMAT_UNKNOWN](SDL_PIXELFORMAT_UNKNOWN)\" if the format is not recognized. This function is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPixelFormatName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetPixelFormatName(SDL_PixelFormat format);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTextureAlphaMod Syntax in C\nDESCRIPTION: Sets an additional alpha value multiplied into render copy operations for a texture.\n\nThis function takes a SDL_Texture pointer and a Uint8 alpha value as input. It returns true on success or false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTextureAlphaMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetTextureAlphaMod(SDL_Texture *texture, Uint8 alpha);\n```\n\n----------------------------------------\n\nTITLE: Get Music Album Tag in C\nDESCRIPTION: Retrieves the album name from a specified music object in SDL_mixer. If the provided music object is NULL, it queries the currently playing music. Returns the album name as a const char*, or an empty string if no album name is available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicAlbumTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicAlbumTag(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick GUID in C\nDESCRIPTION: Retrieves the implementation-dependent GUID for a joystick.  Requires an open SDL_Joystick instance obtained from SDL_OpenJoystick(). Returns an SDL_GUID. Returns a zero GUID if an invalid joystick is provided; check SDL_GetError() for details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickGUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GUID SDL_GetJoystickGUID(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_ControllerAxisEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_ControllerAxisEvent, which represents a game controller axis motion event. It includes fields for event type, timestamp, joystick instance ID, axis number, padding, and the axis value (range: -32768 to 32767).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ControllerAxisEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_ControllerAxisEvent\n{\n    Uint32 type;        /**< SDL_CONTROLLERAXISMOTION */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 axis;         /**< The controller axis (SDL_GameControllerAxis) */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n    Sint16 value;       /**< The axis value (range: -32768 to 32767) */\n    Uint16 padding4;\n} SDL_ControllerAxisEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_GamepadHasButton Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GamepadHasButton function in C. It takes a pointer to an SDL_Gamepad struct and an SDL_GamepadButton enum as input. The function returns a boolean value indicating whether the given gamepad has the specified button mapped.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadHasButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GamepadHasButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateWindowFrom Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_CreateWindowFrom function in C. This function takes a void pointer to driver-dependent window creation data (typically a native window handle cast to void*) and returns an SDL_Window pointer, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateWindowFrom.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_CreateWindowFrom(const void *data);\n```\n\n----------------------------------------\n\nTITLE: Waiting for an SDL Thread (C)\nDESCRIPTION: The SDL_WaitThread function waits for a specified SDL thread to complete its execution. The function takes an SDL_Thread pointer as input, representing the thread to wait for, and an integer pointer that will store the thread's return status. After calling this function, the SDL_Thread pointer becomes invalid and should not be referenced again.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitThread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_WaitThread(SDL_Thread *thread, int *status);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Firmware Version SDL3 C\nDESCRIPTION: Retrieves the firmware version of a given gamepad in SDL3. It accepts an SDL_Gamepad pointer as input. The function returns the firmware version as a Uint16 value. If the firmware version is not available, it returns 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadFirmwareVersion.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint16 SDL_GetGamepadFirmwareVersion(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: SDL_StartTextInput Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_StartTextInput function in C. It takes an SDL_Window pointer as input and returns a boolean indicating success or failure. The function enables text input events for the specified window, allowing the application to receive SDL_EVENT_TEXT_INPUT and SDL_EVENT_TEXT_EDITING events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StartTextInput.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_StartTextInput(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDebugTextFormat Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_RenderDebugTextFormat function in C. It takes an SDL_Renderer, x and y coordinates, a format string, and variable arguments as input. The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderDebugTextFormat.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_RenderDebugTextFormat(SDL_Renderer *renderer, float x, float y, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasSSE42 Function Definition in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_HasSSE42 function to check if the CPU supports SSE4.2 instructions.  It takes no arguments and returns an SDL_bool value, which indicates the presence or absence of SSE4.2 support. The function is part of the SDL library and is useful for optimizing code paths based on CPU capabilities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasSSE42.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasSSE42(void);\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Name - SDL_GameControllerName - C\nDESCRIPTION: Retrieves the implementation-dependent name of an opened game controller. It takes a SDL_GameController pointer as input and returns a const char* representing the name of the controller. Returns NULL if there is no name or the identifier passed is invalid. This function requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GameControllerName(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Mix_SetPosition Function Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_SetPosition function in C, which is used to set the position of an audio channel within SDL_mixer. It takes the channel number, angle, and distance as input parameters and returns an integer indicating success or failure. Requires SDL_mixer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_SetPosition(int channel, Sint16 angle, Uint8 distance);\n```\n\n----------------------------------------\n\nTITLE: SDL_ComposeCustomBlendMode Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ComposeCustomBlendMode function in C. This function allows you to define custom blend modes for SDL renderers by specifying the source and destination blend factors and operations for both color and alpha components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ComposeCustomBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor,\n                                         SDL_BlendFactor dstColorFactor,\n                                         SDL_BlendOperation colorOperation,\n                                         SDL_BlendFactor srcAlphaFactor,\n                                         SDL_BlendFactor dstAlphaFactor,\n                                         SDL_BlendOperation alphaOperation);\n```\n\n----------------------------------------\n\nTITLE: Get Power Information using SDL_GetPowerInfo in C\nDESCRIPTION: This code snippet shows the syntax for calling the SDL_GetPowerInfo function to retrieve the current power supply details. It takes two integer pointers as arguments to store the remaining battery life in seconds and the percentage of battery life left. These pointers can be NULL if the caller is not interested in these values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPowerInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PowerState SDL_GetPowerInfo(int *seconds, int *percent);\n```\n\n----------------------------------------\n\nTITLE: Get Window Minimum Size in C\nDESCRIPTION: This function retrieves the minimum width and height of a given SDL window. It takes an SDL_Window pointer and two integer pointers as input, which will be populated with the minimum width and height, respectively. The function returns true on success and false on failure. SDL_GetError() can be called for more error information.  This function must be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowMinimumSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowMinimumSize(SDL_Window *window, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Set/Query Channel Volume - SDL_mixer (C)\nDESCRIPTION: Sets the volume for a specific audio channel in SDL_mixer. The function takes the channel number and the desired volume level as input. It returns the previous volume setting. A volume of -1 queries the current volume without changing it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Volume.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_Volume(int channel, int volume);\n```\n\n----------------------------------------\n\nTITLE: Complete Sine Wave Haptic Effect in C\nDESCRIPTION: This code demonstrates creating and playing a sine wave haptic effect using the SDL Haptic subsystem. It opens a haptic device associated with a joystick, checks for sine wave support, creates an SDL_HapticEffect struct with sine wave parameters, uploads the effect to the device, runs the effect for 5 seconds, destroys the effect, and then closes the device. This requires the SDL library and an available joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/CategoryHaptic.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint test_haptic( SDL_Joystick * joystick ) {\n   SDL_Haptic *haptic;\n   SDL_HapticEffect effect;\n   int effect_id;\n\n   // Open the device\n   haptic = SDL_HapticOpenFromJoystick( joystick );\n   if (haptic == NULL) return -1; // Most likely joystick isn't haptic\n\n   // See if it can do sine waves\n   if ((SDL_HapticQuery(haptic) & SDL_HAPTIC_SINE)==0) {\n      SDL_HapticClose(haptic); // No sine effect\n      return -1;\n   }\n\n   // Create the effect\n   SDL_memset( &effect, 0, sizeof(SDL_HapticEffect) ); // 0 is safe default\n   effect.type = SDL_HAPTIC_SINE;\n   effect.periodic.direction.type = SDL_HAPTIC_POLAR; // Polar coordinates\n   effect.periodic.direction.dir[0] = 18000; // Force comes from south\n   effect.periodic.period = 1000; // 1000 ms\n   effect.periodic.magnitude = 20000; // 20000/32767 strength\n   effect.periodic.length = 5000; // 5 seconds long\n   effect.periodic.attack_length = 1000; // Takes 1 second to get max strength\n   effect.periodic.fade_length = 1000; // Takes 1 second to fade away\n\n   // Upload the effect\n   effect_id = SDL_HapticNewEffect( haptic, &effect );\n\n   // Test the effect\n   SDL_HapticRunEffect( haptic, effect_id, 1 );\n   SDL_Delay( 5000); // Wait for the effect to finish\n\n   // We destroy the effect, although closing the device also does this\n   SDL_HapticDestroyEffect( haptic, effect_id );\n\n   // Close the device\n   SDL_HapticClose(haptic);\n\n   return 0; // Success\n}\n```\n\n----------------------------------------\n\nTITLE: Mix_PlayChannelTimed Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_PlayChannelTimed function in C. It takes a channel number, a Mix_Chunk pointer, the number of loops, and the maximum number of milliseconds to play the chunk as parameters. It returns the channel number on which the sound was played, or -1 if the sound could not be played.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_PlayChannelTimed.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_PlayChannelTimed(int channel, Mix_Chunk *chunk, int loops, int ticks);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Device Name Syntax (SDL2, C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetAudioDeviceName function. It takes an index and a flag indicating whether to query recording or output devices, and returns the name of the audio device at that index.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAudioDeviceName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetAudioDeviceName(int index,\n                                   int iscapture);\n```\n\n----------------------------------------\n\nTITLE: Save SDL_Surface to JPEG File C\nDESCRIPTION: This function saves an SDL_Surface to a JPEG image file. It takes the SDL_Surface pointer, the file path as a string, and the JPEG quality as an integer parameter. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveJPG(SDL_Surface *surface, const char *file, int quality);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Button State - SDL3 - C\nDESCRIPTION: Retrieves the current state of a specified button on a gamepad. It takes a gamepad pointer and a button index as input and returns a boolean value indicating whether the button is pressed or not. This function requires the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetGamepadButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE (C)\nDESCRIPTION: This code snippet defines the SDL_HINT_AUDIO_DEVICE_STREAM_ROLE macro, which is used to set the audio device stream role hint.  It's used to tell the OS the type of audio being played (e.g., Game, Music, Movie). This macro should be defined before opening the audio device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DEVICE_STREAM_ROLE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE \"SDL_AUDIO_DEVICE_STREAM_ROLE\"\n```\n\n----------------------------------------\n\nTITLE: Saving Images to PNG format\nDESCRIPTION: This function saves an SDL_Surface into a PNG image file. It provides a way to export SDL_Surface data to a standard image format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SavePNG(SDL_Surface *surface, const char *file);                                                          // Save an SDL_Surface into a PNG image file.\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderTextureTiled Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderTextureTiled function, which tiles a portion of a texture on the rendering target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderTextureTiled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderTextureTiled(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float scale, const SDL_FRect *dstrect);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogCritical Function Signature in C\nDESCRIPTION: This snippet shows the signature of the SDL_LogCritical function. It takes an integer category and a format string along with variable arguments for logging a critical message. The function logs a message with SDL_LOG_PRIORITY_CRITICAL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogCritical.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogCritical(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurface Syntax\nDESCRIPTION: Defines the syntax for the SDL_BlitSurface function, showing its return type, name, and parameters. This function performs a fast blit from the source surface to the destination surface with clipping. It returns true on success or false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitSurface.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_BlitSurface(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Battery Level in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickCurrentPowerLevel function. It takes an SDL_Joystick pointer as input and returns an SDL_JoystickPowerLevel enum representing the battery level. The function is available since SDL 2.0.4.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickCurrentPowerLevel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickPowerLevel SDL_JoystickCurrentPowerLevel(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_net with SDLNet_Init in C\nDESCRIPTION: Initializes the SDL_net library. SDL must be initialized before calling this function. Returns 0 on success and -1 on error. Can be called multiple times; init and quit calls must be paired.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_Init(void);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeInChannel Syntax - C\nDESCRIPTION: This code snippet shows the syntax for using the Mix_FadeInChannel function. It defines the function's return type, name, and parameters. It's part of the SDL_mixer library for audio handling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadeInChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeInChannel(int channel, Mix_Chunk *chunk, int loops, int ms);\n```\n\n----------------------------------------\n\nTITLE: Set Font Wrap Alignment in SDL_ttf (C)\nDESCRIPTION: Sets the horizontal alignment for text wrapping within a TTF_Font object. This function updates any existing TTF_Text objects that are using the provided font.  It is crucial to call this function on the same thread that created the font to ensure thread safety.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontWrapAlignment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontWrapAlignment(TTF_Font *font, TTF_HorizontalAlignment align);\n```\n\n----------------------------------------\n\nTITLE: SDL 2.0 Window Creation with OpenGL\nDESCRIPTION: This code snippet shows how to create a fullscreen OpenGL window in SDL 2.0. It uses `SDL_CreateWindow` to create the window, allowing for multiple windows and more control over their properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_Window *screen = SDL_CreateWindow(\"My Game Window\",\n                          SDL_WINDOWPOS_UNDEFINED,\n                          SDL_WINDOWPOS_UNDEFINED,\n                          640, 480,\n                          SDL_WINDOW_FULLSCREEN | SDL_WINDOW_OPENGL);\n```\n\n----------------------------------------\n\nTITLE: Creating Window and Renderer with SDL_CreateWindowAndRenderer (C)\nDESCRIPTION: Creates a window and a default renderer.  The function takes the width and height of the window, window flags, and pointers to SDL_Window and SDL_Renderer, which will be populated by the function if successful. Returns 0 on success, -1 on failure. Check SDL_GetError() for error details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateWindowAndRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_CreateWindowAndRenderer(\n        int width, int height, Uint32 window_flags,\n        SDL_Window **window, SDL_Renderer **renderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitForGPUSwapchain Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WaitForGPUSwapchain function, which blocks the calling thread until a swapchain texture is available for acquisition. It requires a GPU device and a window as input parameters and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitForGPUSwapchain.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitForGPUSwapchain(\n    SDL_GPUDevice *device,\n    SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_LCD Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderText_LCD function in the SDL_ttf library. This function renders UTF-8 text with LCD subpixel quality to a new ARGB surface. It requires a TTF_Font pointer, a UTF-8 encoded text string, the text length, a foreground color, and a background color as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderText_LCD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_LCD(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Calculate UTF-8 Text Size with TTF_SizeUTF8 in C\nDESCRIPTION: Calculates the width and height of a UTF-8 encoded text string when rendered with the specified font. The function takes a font, a UTF-8 encoded string, and pointers to integers that will be populated with the width and height of the rendered text in pixels. It returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SizeUTF8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_SizeUTF8(TTF_Font *font, const char *text, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Checking for AVX-512F Support with SDL_HasAVX512F in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_HasAVX512F function to determine if the CPU supports the AVX-512F instruction set.  It returns 'true' if the CPU has the features and 'false' otherwise. It's crucial to include `<SDL3/SDL_cpuinfo.h>`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasAVX512F.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasAVX512F(void);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Mouse State with SDL_GetMouseState in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetMouseState function. It retrieves the current state of the mouse, including button presses and the x and y coordinates relative to the focus window. It takes pointers to integers as parameters to store the x and y coordinates and returns a Uint32 bitmask representing the current button state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetMouseState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetMouseState(int *x, int *y);\n```\n\n----------------------------------------\n\nTITLE: SDL_CalculateGammaRamp Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_CalculateGammaRamp function in C. The function takes a float representing the gamma value and a pointer to an array of Uint16 values where the gamma ramp will be stored.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CalculateGammaRamp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CalculateGammaRamp(float gamma, Uint16 * ramp);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetEnvironmentVariable Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_SetEnvironmentVariable function in C. It takes an environment, variable name, value, and overwrite flag as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetEnvironmentVariable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetEnvironmentVariable(SDL_Environment *env, const char *name, const char *value, bool overwrite);\n```\n\n----------------------------------------\n\nTITLE: Opening a Joystick with SDL_OpenJoystick in C\nDESCRIPTION: Opens a joystick identified by its instance ID for use in an SDL application. The joystick subsystem must be initialized before calling this function. The function returns a pointer to the joystick, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Joystick * SDL_OpenJoystick(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get IOStream Properties in C\nDESCRIPTION: Retrieves the properties associated with an SDL_IOStream. It takes a pointer to an SDL_IOStream structure as input and returns an SDL_PropertiesID. A successful call returns a valid property ID, while failure returns 0. SDL_GetError() can be called for more information in case of failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetIOProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetIOProperties(SDL_IOStream *context);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_FRect Structure in C\nDESCRIPTION: This code snippet defines the SDL_FRect structure, which represents a rectangle with floating-point coordinates and dimensions. The structure contains four float members: x and y for the top-left corner, and w and h for the width and height respectively. This structure is used for representing rectangles in floating-point space within SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_FRect\n{\n    float x;\n    float y;\n    float w;\n    float h;\n} SDL_FRect;\n```\n\n----------------------------------------\n\nTITLE: Set Hint with Priority - SDL2 - C\nDESCRIPTION: This code snippet demonstrates the syntax for using the SDL_SetHintWithPriority function in SDL2. It sets a hint with a specific priority level, which determines how it interacts with existing hint values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetHintWithPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_SetHintWithPriority(const char *name,\n                                 const char *value,\n                                 SDL_HintPriority priority);\n```\n\n----------------------------------------\n\nTITLE: Example of True Panning\nDESCRIPTION: This code snippet provides an example of how to achieve true panning using the Mix_SetPanning function. By setting the right channel volume to 255 minus the left channel volume, a realistic panning effect can be achieved.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetPanning.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nMix_SetPanning(channel, left, 255 - left);\n```\n\n----------------------------------------\n\nTITLE: Calling Java method from C++ using SDL_GetAndroidJNIEnv\nDESCRIPTION: This C++ code example demonstrates how to call a Java method named `showHome()` from C++ code using the `SDL_GetAndroidJNIEnv` function to retrieve the JNI environment, and `SDL_GetAndroidActivity` to get the activity object. It finds the method ID and calls the method, cleaning up local references afterward.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidJNIEnv.md#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <jni.h>\n\n// This example requires C++ and a custom Java method named \"void showHome()\"\n\n// Calls the void showHome() method of the Java instance of the activity.\nvoid showHome(void)\n{\n    // retrieve the JNI environment.\n    JNIEnv* env = (JNIEnv*)SDL_GetAndroidJNIEnv();\n\n    // retrieve the Java instance of the SDLActivity\n    jobject activity = (jobject)SDL_GetAndroidActivity();\n\n    // find the Java class of the activity. It should be SDLActivity or a subclass of it.\n    jclass clazz(env->GetObjectClass(activity));\n\n    // find the identifier of the method to call\n    jmethodID method_id = env->GetMethodID(clazz, \"showHome\", \"()V\");\n\n    // effectively call the Java method\n    env->CallVoidMethod(activity, method_id);\n\n    // clean up the local references.\n    env->DeleteLocalRef(activity);\n    env->DeleteLocalRef(clazz);\n\n    // Warning (and discussion of implementation details of SDL for Android):\n    // Local references are automatically deleted if a native function called\n    // from Java side returns. For SDL this native function is main() itself.\n    // Therefore references need to be manually deleted because otherwise the\n    // references will first be cleaned if main() returns (application exit).\n}\n```\n\n----------------------------------------\n\nTITLE: Set Font Style with TTF_SetFontStyle in C\nDESCRIPTION: Sets the style of a TTF font by passing a TTF_Font pointer and style flags. The style flags are bitwise OR'd together to specify bold, italic, underline, and strikethrough effects. This function updates TTF_Text objects and clears glyphs from the cache. It should be called on the thread that created the font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontStyle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontStyle(TTF_Font *font, TTF_FontStyleFlags style);\n```\n\n----------------------------------------\n\nTITLE: SDL_SendJoystickVirtualSensorData Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_SendJoystickVirtualSensorData function. It takes a joystick pointer, sensor type, timestamp, data array, and number of values as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SendJoystickVirtualSensorData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SendJoystickVirtualSensorData(SDL_Joystick *joystick, SDL_SensorType type, Uint64 sensor_timestamp, const float *data, int num_values);\n```\n\n----------------------------------------\n\nTITLE: Set Render Draw Blend Mode in SDL2 (C)\nDESCRIPTION: Sets the blend mode used for drawing operations within an SDL_Renderer context. It takes a pointer to the renderer and an SDL_BlendMode enum value as input. Returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetRenderDrawBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetRenderDrawBlendMode(SDL_Renderer * renderer,\n                               SDL_BlendMode blendMode);\n```\n\n----------------------------------------\n\nTITLE: Define TTF_ImageType Enum in SDL_ttf\nDESCRIPTION: This code snippet defines the `TTF_ImageType` enumeration in C, used by SDL_ttf to specify the type of data present in a glyph image. The enum members indicate whether the image contains alpha data, color data, or signed distance field information. This enum is available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_ImageType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum TTF_ImageType\n{\n    TTF_IMAGE_INVALID,\n    TTF_IMAGE_ALPHA,    /**< The color channels are white */\n    TTF_IMAGE_COLOR,    /**< The color channels have image data */\n    TTF_IMAGE_SDF,      /**< The alpha channel has signed distance field information */\n} TTF_ImageType;\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeOutMusic Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_FadeOutMusic function in C. It takes an integer representing the fade-out duration in milliseconds as input and returns a boolean value indicating whether the fade-out was successfully scheduled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadeOutMusic.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_FadeOutMusic(int ms);\n```\n\n----------------------------------------\n\nTITLE: Get Render Safe Area in C\nDESCRIPTION: Retrieves the safe area for rendering within the current viewport using SDL_GetRenderSafeArea. The function takes a SDL_Renderer pointer and a SDL_Rect pointer as input. It returns true on success and fills the SDL_Rect with the safe area, or false on failure. Ensure SDL is initialized and a valid SDL_Renderer is created.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderSafeArea.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderSafeArea(SDL_Renderer *renderer, SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontFamilyName Function\nDESCRIPTION: Queries a font's family name. Returns a const char* to the family name string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_39\n\nLANGUAGE: C\nCODE:\n```\nconst char * TTF_GetFontFamilyName(const TTF_Font *font);                                                                                  // Query a font's family name.\n```\n\n----------------------------------------\n\nTITLE: TTF_RemoveFallbackFont Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RemoveFallbackFont function, which removes a specified fallback font from the provided TTF_Font object.  It requires two TTF_Font pointers as input: the font to modify and the fallback font to remove.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RemoveFallbackFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_RemoveFallbackFont(TTF_Font *font, TTF_Font *fallback);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateGPUTexture Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateGPUTexture function in C. It takes a pointer to an SDL_GPUDevice and a pointer to an SDL_GPUTextureCreateInfo struct as input and returns a pointer to an SDL_GPUTexture. The function is used to create a texture object for use in graphics or compute workflows.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUTexture * SDL_CreateGPUTexture(\n    SDL_GPUDevice *device,\n    const SDL_GPUTextureCreateInfo *createinfo);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Custom Read Function\nDESCRIPTION: Demonstrates the updated custom read function for SDL3, utilizing SDL_ReadIO. The function handles edge cases where size or nitems is zero and adjusts the return value to match the expected behavior of SDL2's SDL_RWread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nsize_t custom_read(void *ptr, size_t size, size_t nitems, SDL_IOStream *stream)\n{\n    if (size > 0 && nitems > 0) {\n        return SDL_ReadIO(stream, ptr, size * nitems) / size;\n    }\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Properties in C\nDESCRIPTION: Retrieves the properties associated with an opened gamepad. The function takes an `SDL_Gamepad` pointer as input and returns an `SDL_PropertiesID`. A valid property ID is returned on success or 0 on failure. Call `SDL_GetError()` for more information if it fails. The properties retrieved are shared with the underlying joystick object.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetGamepadProperties(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Get Performance Frequency in SDL3\nDESCRIPTION: Retrieves the frequency of the high-resolution performance counter. This function returns the number of counts per second, which can be used to convert counter values into seconds. It's safe to call from any thread and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPerformanceFrequency.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_GetPerformanceFrequency(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GPUBlendFactor enum in C\nDESCRIPTION: This code defines the `SDL_GPUBlendFactor` enumeration in C.  It specifies the different blending factors that can be used when blending pixels. Each enum member represents a different way to combine the source and destination colors or alphas during rendering. This is used with `SDL_CreateGPUGraphicsPipeline`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBlendFactor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUBlendFactor\n{\n    SDL_GPU_BLENDFACTOR_INVALID,\n    SDL_GPU_BLENDFACTOR_ZERO,                      /**< 0 */\n    SDL_GPU_BLENDFACTOR_ONE,                       /**< 1 */\n    SDL_GPU_BLENDFACTOR_SRC_COLOR,                 /**< source color */\n    SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR,       /**< 1 - source color */\n    SDL_GPU_BLENDFACTOR_DST_COLOR,                 /**< destination color */\n    SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR,       /**< 1 - destination color */\n    SDL_GPU_BLENDFACTOR_SRC_ALPHA,                 /**< source alpha */\n    SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA,       /**< 1 - source alpha */\n    SDL_GPU_BLENDFACTOR_DST_ALPHA,                 /**< destination alpha */\n    SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA,       /**< 1 - destination alpha */\n    SDL_GPU_BLENDFACTOR_CONSTANT_COLOR,            /**< blend constant */\n    SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR,  /**< 1 - blend constant */\n    SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE         /**< min(source alpha, 1 - destination alpha) */\n} SDL_GPUBlendFactor;\n```\n\n----------------------------------------\n\nTITLE: SDL_MixAudioFormat Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_MixAudioFormat function, which mixes audio data from a source buffer into a destination buffer, applying volume adjustment and overflow clipping. It requires the destination buffer, source buffer, audio format, length of the buffers, and volume level as input. The destination buffer must be the same size and format as the source buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MixAudioFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_MixAudioFormat(Uint8 * dst,\n                        const Uint8 * src,\n                        SDL_AudioFormat format,\n                        Uint32 len, int volume);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_WGI in SDL_hints.h\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_WGI macro as a string literal. This hint controls whether Windows.Gaming.Input is used for controller handling. Setting it to \"1\" enables WGI, while \"0\" disables it. The default is WGI enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_WGI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_WGI \"SDL_JOYSTICK_WGI\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AcquireCameraFrame Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_AcquireCameraFrame function in C. This function attempts to acquire a frame from the given SDL_Camera. If a frame is available, it returns a pointer to an SDL_Surface containing the frame data, and updates the timestampNS pointer with the frame's timestamp.  The caller must release the acquired frame via SDL_ReleaseCameraFrame.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AcquireCameraFrame.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_AcquireCameraFrame(SDL_Camera *camera, Uint64 *timestampNS);\n```\n\n----------------------------------------\n\nTITLE: Mix_QuickLoad_WAV Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_QuickLoad_WAV function, which loads a WAV file from memory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_QuickLoad_WAV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Chunk * Mix_QuickLoad_WAV(Uint8 *mem);\n```\n\n----------------------------------------\n\nTITLE: SDL_QuitSubSystem Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_QuitSubSystem, which shuts down specific SDL subsystems. It takes an SDL_InitFlags parameter to specify which subsystems to deinitialize.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_QuitSubSystem.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_QuitSubSystem(SDL_InitFlags flags);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_device_change_count Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the `SDL_hid_device_change_count` function in C. It takes no arguments and returns a `Uint32` value representing a change counter. The counter increments with each potential device change, or returns 0 if device change detection is unavailable.  The function is available since SDL 3.2.0 and requires inclusion of `<SDL3/SDL_hidapi.h>`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_device_change_count.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_hid_device_change_count(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetError Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetError function in C. The function takes a format string and optional arguments, similar to printf, and returns a boolean value, which is always false.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetError(const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Get Text Input Area in SDL3 (C)\nDESCRIPTION: Retrieves the text input area for a specified window, filling in the provided SDL_Rect with the area's dimensions and the cursor offset. It returns true on success and false on failure. Call SDL_GetError() for more info. This relies on values set by SDL_SetTextInputArea.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextInputArea.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTextInputArea(SDL_Window *window, SDL_Rect *rect, int *cursor);\n```\n\n----------------------------------------\n\nTITLE: Set Text Color Float C\nDESCRIPTION: This function sets the color of a text object using floating-point color components. It takes a TTF_Text pointer and red, green, blue, and alpha color values as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_93\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextColorFloat(TTF_Text *text, float r, float g, float b, float a);\n```\n\n----------------------------------------\n\nTITLE: Pause/Unpause Audio Device using SDL_PauseAudioDevice (C)\nDESCRIPTION: This function pauses or unpauses audio playback for a given SDL audio device. It takes an SDL_AudioDeviceID and an integer (pause_on) as input. A non-zero value for 'pause_on' pauses the device, while 0 unpauses it. Newly opened devices start paused, requiring this function to start playback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PauseAudioDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PauseAudioDevice(SDL_AudioDeviceID dev,\n                          int pause_on);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogVerbose Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_LogVerbose function in C. This function logs a message with SDL_LOG_PRIORITY_VERBOSE priority. It takes an integer category and a format string with optional arguments, similar to printf.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogVerbose.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_LogVerbose(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Video Drivers SDL C\nDESCRIPTION: This function retrieves the number of video drivers compiled into SDL. It takes no arguments and returns an integer representing the number of video drivers or a negative error code on failure. It's available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumVideoDrivers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumVideoDrivers(void);\n```\n\n----------------------------------------\n\nTITLE: Set Window Progress Value with SDL_SetWindowProgressValue in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetWindowProgressValue function, which sets the progress value of a window's taskbar icon. It requires an SDL_Window pointer and a float value between 0.0f and 1.0f. The function returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowProgressValue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowProgressValue(SDL_Window *window, float value);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasIntersection Syntax in C\nDESCRIPTION: This code snippet shows the function signature of SDL_HasIntersection, which determines if two rectangles intersect. It takes two SDL_Rect pointers as input and returns an SDL_bool indicating whether an intersection exists. Null pointers will result in SDL_FALSE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasIntersection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasIntersection(const SDL_Rect * A,\n                             const SDL_Rect * B);\n```\n\n----------------------------------------\n\nTITLE: Creating a GPU Transfer Buffer in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_CreateGPUTransferBuffer function, which creates a GPU transfer buffer. The function requires a GPUDevice and a createinfo struct. It returns a pointer to the created buffer, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUTransferBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUTransferBuffer * SDL_CreateGPUTransferBuffer(\n    SDL_GPUDevice *device,\n    const SDL_GPUTransferBufferCreateInfo *createinfo);\n```\n\n----------------------------------------\n\nTITLE: Loading TIFF Image from IO Stream with SDL_image in C\nDESCRIPTION: This C code snippet shows the syntax for loading a TIFF image from an SDL_IOStream using the IMG_LoadTIF_IO function from the SDL_image library. It takes an SDL_IOStream as input and returns an SDL_Surface pointer containing the loaded image, or NULL if an error occurred. The function is part of SDL_image and requires including SDL_image.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadTIF_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadTIF_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Get SoundFonts paths with Mix_GetSoundFonts in SDL_mixer\nDESCRIPTION: Retrieves a semicolon-separated list of sound font paths used by supported MIDI backends in SDL_mixer. The function checks for the SDL_FORCE_SOUNDFONTS hint and SDL_SOUNDFONTS environment variable. It also checks if Mix_SetSoundFonts was successfully called. If none of these are set, it searches common locations on the filesystem before returning NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetSoundFonts.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetSoundFonts(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_StepBackUTF8 Syntax in C\nDESCRIPTION: This snippet shows the function signature of SDL_StepBackUTF8 in C. It takes a pointer to the beginning of the UTF-8 string and a pointer to a string pointer as input, and returns the previous Unicode codepoint in the string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StepBackUTF8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_StepBackUTF8(const char *start, const char **pstr);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_CreateContext Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GL_CreateContext function. It takes an SDL_Window pointer as input and returns an SDL_GLContext, which represents the OpenGL context.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_CreateContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GLContext SDL_GL_CreateContext(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Common Haptic Effect Parameters in C\nDESCRIPTION: This code snippet shows the common parameters included within various haptic effects, focusing on replay, trigger, and envelope characteristics. Replay parameters include effect length (duration) and delay before starting. Trigger parameters specify the button to trigger the effect and the minimum interval before it can be triggered again. Envelope parameters determine the attack and fade phases of the effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticEffect.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n // Replay - All effects have this\n Uint32 length;        // Duration of effect (ms).\n Uint16 delay;         // Delay before starting effect.\n\n // Trigger - All effects have this\n Uint16 button;        // Button that triggers effect.\n Uint16 interval;      // How soon before effect can be triggered again.\n\n // Envelope - All effects except condition effects have this\n Uint16 attack_length; // Duration of the attack (ms).\n Uint16 attack_level;  // Level at the start of the attack.\n Uint16 fade_length;   // Duration of the fade out (ms).\n Uint16 fade_level;    // Level at the end of the fade.\n```\n\n----------------------------------------\n\nTITLE: Setting Font Hinting with TTF_SetFontHinting in C\nDESCRIPTION: This code snippet demonstrates how to use the TTF_SetFontHinting function to set the hinting mode for a given TTF_Font object. The function takes a pointer to the TTF_Font and an integer representing the desired hinting mode as input. It requires the SDL_ttf library to be initialized and a TTF_Font to be loaded beforehand.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontHinting.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontHinting(TTF_Font *font, int hinting);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TextureAccess Enum in C\nDESCRIPTION: This code snippet defines the `SDL_TextureAccess` enumeration in C. It specifies the different access patterns allowed for a texture, including `SDL_TEXTUREACCESS_STATIC` for textures that rarely change, `SDL_TEXTUREACCESS_STREAMING` for textures that change frequently and are lockable, and `SDL_TEXTUREACCESS_TARGET` for textures that can be used as a render target. This enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TextureAccess.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_TextureAccess\n{\n    SDL_TEXTUREACCESS_STATIC,    /**< Changes rarely, not lockable */\n    SDL_TEXTUREACCESS_STREAMING, /**< Changes frequently, lockable */\n    SDL_TEXTUREACCESS_TARGET     /**< Texture can be used as a render target */\n} SDL_TextureAccess;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_IOStream Structure in C\nDESCRIPTION: This snippet defines the SDL_IOStream structure as an opaque handle for read/write operations.  It is defined as a typedef for a structure to hide implementation details. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_IOStream SDL_IOStream;\n```\n\n----------------------------------------\n\nTITLE: Set Channel Distance using Mix_SetDistance in C\nDESCRIPTION: This code snippet demonstrates how to use the Mix_SetDistance function to set the distance of a specific channel. The channel parameter specifies the mixer channel to modify, while the distance parameter sets the distance between the sound source and the listener. A distance of 0 means the sound is overlapping the listener, and 255 means it's as far away as possible.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetDistance.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_SetDistance(int channel, Uint8 distance);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_XINPUT_ENABLED in C\nDESCRIPTION: This snippet defines the SDL_HINT_XINPUT_ENABLED macro as a string literal. This macro is used as the name of the hint that controls whether XInput is enabled. The hint should be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_XINPUT_ENABLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_XINPUT_ENABLED \"SDL_XINPUT_ENABLED\"\n```\n\n----------------------------------------\n\nTITLE: Get Surface Color Modulation SDL3 C\nDESCRIPTION: Retrieves the color modulation values (red, green, blue) applied to blit operations on a given SDL_Surface. The function takes a pointer to the surface and three Uint8 pointers that will be populated with the current red, green, and blue color values, respectively. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfaceColorMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetSurfaceColorMod(SDL_Surface *surface, Uint8 *r, Uint8 *g, Uint8 *b);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateSoftwareRenderer Syntax\nDESCRIPTION: Defines the syntax for the SDL_CreateSoftwareRenderer function in C. It takes a pointer to an SDL_Surface as input and returns a pointer to an SDL_Renderer. The function is used to create a 2D software rendering context for a surface. The returned SDL_Renderer is used for drawing to the surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateSoftwareRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_CreateSoftwareRenderer(SDL_Surface * surface);\n```\n\n----------------------------------------\n\nTITLE: Get Music Type in SDL_mixer (C)\nDESCRIPTION: Retrieves the format of a mixer music object. The `music` parameter specifies the music object to query; if NULL, it queries the currently playing music. The function returns a Mix_MusicType enum value indicating the format of the music.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_MusicType Mix_GetMusicType(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenFileStorage Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_OpenFileStorage function in C. It takes a path as input, which is the base path prepended to all storage paths, and returns a pointer to an SDL_Storage object on success or NULL on failure. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenFileStorage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Storage * SDL_OpenFileStorage(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_OPENGL_LIBRARY in C\nDESCRIPTION: This C macro defines the SDL_HINT_OPENGL_LIBRARY string literal, which is used to specify the OpenGL library SDL should load. It must be set before creating an OpenGL window or context to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_OPENGL_LIBRARY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_OPENGL_LIBRARY \"SDL_OPENGL_LIBRARY\"\n```\n\n----------------------------------------\n\nTITLE: Check OpenGL Extension Support in C\nDESCRIPTION: This example demonstrates how to use the `SDL_GL_ExtensionSupported` function to check for the `GL_EXT_framebuffer_blit` extension. Based on the result, a different rendering path is chosen. It assumes the existence of two functions `draw_to_the_screen_with_framebuffer_blit` and `draw_to_the_screen_with_a_textured_quad`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_ExtensionSupported.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nextern void draw_to_the_screen_with_framebuffer_blit(void);\nextern void draw_to_the_screen_with_a_textured_quad(void);\n\nif (SDL_GL_ExtensionSupported(\"GL_EXT_framebuffer_blit\")) {\n    draw_to_the_screen_with_framebuffer_blit();   // faster!\n} else {\n    draw_to_the_screen_with_a_textured_quad();  // slower!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PackedLayout enum in C\nDESCRIPTION: This code snippet defines the SDL_PackedLayout enumeration in C. It lists the possible packed layouts, including None, 332, 4444, 1555, 5551, 565, 8888, 2101010, and 1010102, which represent different arrangements of color components within a pixel.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PackedLayout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PackedLayout\n{\n    SDL_PACKEDLAYOUT_NONE,\n    SDL_PACKEDLAYOUT_332,\n    SDL_PACKEDLAYOUT_4444,\n    SDL_PACKEDLAYOUT_1555,\n    SDL_PACKEDLAYOUT_5551,\n    SDL_PACKEDLAYOUT_565,\n    SDL_PACKEDLAYOUT_8888,\n    SDL_PACKEDLAYOUT_2101010,\n    SDL_PACKEDLAYOUT_1010102\n} SDL_PackedLayout;\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUVertexAttribute struct definition in C\nDESCRIPTION: Defines the structure SDL_GPUVertexAttribute, containing the shader input location index, buffer slot, vertex element format, and byte offset of the attribute. It requires SDL3/SDL_gpu.h and is used with SDL_GPUVertexInputState for configuring vertex input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUVertexAttribute.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUVertexAttribute\n{\n    Uint32 location;                    /**< The shader input location index. */\n    Uint32 buffer_slot;                 /**< The binding slot of the associated vertex buffer. */\n    SDL_GPUVertexElementFormat format;  /**< The size and type of the attribute data. */\n    Uint32 offset;                      /**< The byte offset of this attribute relative to the start of the vertex element. */\n} SDL_GPUVertexAttribute;\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_BYTESIZE Macro Definition in C\nDESCRIPTION: This macro calculates the size in bytes from a given SDL_AudioFormat. It utilizes the SDL_AUDIO_BITSIZE macro and divides the result by 8 to convert bits to bytes. The macro takes an SDL_AudioFormat value as input and returns the data size in bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_BYTESIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_BYTESIZE(x)        (SDL_AUDIO_BITSIZE(x) / 8)\n```\n\n----------------------------------------\n\nTITLE: Call CMake with Android toolchain file\nDESCRIPTION: Invokes CMake with the specified Android toolchain file. Sets the CMAKE_TOOLCHAIN_FILE variable to the path of the Android toolchain file. Requires the NDK toolchain bin directory to be in the PATH.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nPATH=$NDK_STANDALONE/bin:$PATH\ncmake \\\n  -D CMAKE_TOOLCHAIN_FILE=../android_toolchain.cmake \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: SDLNet_TCP_Recv Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_TCP_Recv function in C.  It takes a TCPsocket, a pointer to data, and the maximum length of the data to receive as input. It returns the number of bytes received. The function is part of the SDL_net library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_Recv.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_TCP_Recv(TCPsocket sock, void *data, int maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertPixels Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ConvertPixels function in C. This function converts a block of pixels from one format to another. It takes the width and height of the block, the source and destination pixel formats, source and destination pixel data pointers, and source and destination pitches as input. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ConvertPixels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawLines Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderDrawLines function, which draws a series of connected lines on the rendering target. The function takes a renderer, an array of SDL_Point structures, and the number of points as input. It returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawLines.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawLines(SDL_Renderer * renderer,\n                        const SDL_Point * points,\n                        int count);\n```\n\n----------------------------------------\n\nTITLE: Detach an SDL Thread in C\nDESCRIPTION: This code snippet demonstrates how to detach an SDL thread using SDL_DetachThread. It first creates a thread using SDL_CreateThread, then detaches it, allowing it to clean up on its own upon completion. This avoids the need to call SDL_WaitThread on the thread later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DetachThread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nextern int TestThread(void *ptr);\nSDL_Thread *thread = SDL_CreateThread(TestThread, \"TestThread\", (void *)NULL);\nSDL_DetachThread(thread);  /* will go away on its own upon completion. */\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerTypeForIndex Function Definition in C\nDESCRIPTION: Retrieves the type of a game controller given its index.  joystick_index is the index of the joystick, ranging from 0 to SDL_NumJoysticks()-1. The function returns an SDL_GameControllerType.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerTypeForIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GameControllerType SDL_GameControllerTypeForIndex(int joystick_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetGamepadPlayerIndex Syntax\nDESCRIPTION: Defines the syntax for the SDL_SetGamepadPlayerIndex function. This function associates a gamepad with a specific player index. It requires an SDL_Gamepad pointer and an integer representing the player index. Returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGamepadPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetGamepadPlayerIndex(SDL_Gamepad *gamepad, int player_index);\n```\n\n----------------------------------------\n\nTITLE: Get Window ID using SDL_GetWindowID in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetWindowID to get the numeric ID of a window. It takes a pointer to an SDL_Window as input and returns an SDL_WindowID. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_WindowID SDL_GetWindowID(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDebugText Syntax (C)\nDESCRIPTION: Shows the C syntax for the SDL_RenderDebugText function. It takes an SDL_Renderer, x and y coordinates, and a string as input.  Returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderDebugText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderDebugText(SDL_Renderer *renderer, float x, float y, const char *str);\n```\n\n----------------------------------------\n\nTITLE: Setting Hint with Priority - C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_SetHintWithPriority function to set an SDL hint with a specific priority. It requires the SDL3 library to be included. The function takes the hint name, the hint value, and the hint priority as parameters and returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetHintWithPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetHintWithPriority(const char *name, const char *value, SDL_HintPriority priority);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_GPU_LOW_POWER in C\nDESCRIPTION: This code snippet defines the SDL_HINT_RENDER_GPU_LOW_POWER macro, which is used to set the preferred GPU on multi-GPU systems. The hint can be set to \"0\" for high-performance or \"1\" for low-power. This should be set before renderer creation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_GPU_LOW_POWER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_GPU_LOW_POWER \"SDL_RENDER_GPU_LOW_POWER\"\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Type using SDL_GetJoystickType in C\nDESCRIPTION: Retrieves the type of an opened joystick using SDL_GetJoystickType. The function takes a pointer to an SDL_Joystick as input, which should be a joystick that has been successfully opened using SDL_OpenJoystick. It returns an SDL_JoystickType enum value representing the joystick's type. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickType SDL_GetJoystickType(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontStyle Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using TTF_GetFontStyle to retrieve the font style. It takes a TTF_Font pointer as input and returns a TTF_FontStyleFlags value, which represents the current font style as a set of bit flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontStyle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_FontStyleFlags TTF_GetFontStyle(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: IMG_SaveAVIF_IO Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_SaveAVIF_IO function, which saves an SDL_Surface to an AVIF image data stream using a provided SDL_IOStream. The function takes an SDL_Surface, an SDL_IOStream, a boolean indicating whether to close the stream, and an integer representing the desired quality as parameters. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_SaveAVIF_IO.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool IMG_SaveAVIF_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio, int quality);\n```\n\n----------------------------------------\n\nTITLE: Get Texture Blend Mode Syntax - C\nDESCRIPTION: Defines the syntax for SDL_GetTextureBlendMode, a function that retrieves the blend mode used for texture copy operations. It takes a SDL_Texture pointer and a pointer to an SDL_BlendMode as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTextureBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetTextureBlendMode(SDL_Texture * texture,\n                            SDL_BlendMode *blendMode);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeInChannelTimed Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_FadeInChannelTimed function in C. It takes a channel, a Mix_Chunk, the number of loops, the fade-in time in milliseconds, and the maximum playback time in milliseconds as input. It returns the channel number used for playback, or -1 if it fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadeInChannelTimed.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeInChannelTimed(int channel, Mix_Chunk *chunk, int loops, int ms, int ticks);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Sensor Data in SDL3 (C)\nDESCRIPTION: Retrieves the current state of a gamepad sensor. The function takes a gamepad pointer, sensor type, a pointer to store the data, and the number of values to write.  The number of values and interpretation of the data are sensor dependent. Requires SDL3 and knowledge of the specific sensor type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadSensorData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetGamepadSensorData(SDL_Gamepad *gamepad, SDL_SensorType type, float *data, int num_values);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_ResolveHostname Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_ResolveHostname function. It takes a hostname as a C-style string and returns a pointer to an SDLNet_Address. The function may return NULL on error, and SDL_GetError() should be called for details. The resulting SDLNet_Address needs to be released using SDLNet_UnrefAddress.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_ResolveHostname.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDLNet_Address * SDLNet_ResolveHostname(const char *host);\n```\n\n----------------------------------------\n\nTITLE: SDL_RWwrite Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for using SDL_RWwrite to write to an SDL_RWops data stream. It takes an SDL_RWops context, a pointer to the data buffer, the size of each data object, and the number of objects to write.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWwrite.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nsize_t SDL_RWwrite(SDL_RWops *context,\n                   const void *ptr, size_t size,\n                   size_t num);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_ttf with TTF_Init in C\nDESCRIPTION: This code snippet shows the syntax for initializing the SDL_ttf library using the TTF_Init function. SDL must be initialized before calling this function. It returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_Init(void);\n```\n\n----------------------------------------\n\nTITLE: Setting EGL Attribute Callbacks in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_EGL_SetAttributeCallbacks function, which allows setting custom callbacks to define EGLAttrib arrays for EGL initialization. The callbacks are used to customize the attributes passed to eglGetPlatformDisplay, eglCreateSurface, and eglCreateContext. The userdata pointer is passed to all callbacks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGL_SetAttributeCallbacks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_EGL_SetAttributeCallbacks(SDL_EGLAttribArrayCallback platformAttribCallback,\n                                   SDL_EGLIntArrayCallback surfaceAttribCallback,\n                                   SDL_EGLIntArrayCallback contextAttribCallback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDayOfYear Syntax in C\nDESCRIPTION: This snippet shows the syntax for using the SDL_GetDayOfYear function in C. It takes the year, month, and day as integer inputs and returns an integer representing the day of the year.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDayOfYear.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDayOfYear(int year, int month, int day);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph_Shaded Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderGlyph_Shaded function from the SDL_ttf library. This function renders a single 16-bit glyph with shading to a new 8-bit surface, using a specified font, character code, foreground color, and background color. It returns a pointer to the new SDL_Surface or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderGlyph_Shaded.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Shaded(TTF_Font *font,\n                Uint16 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Get SDL_Joystick from Instance ID in C\nDESCRIPTION: Retrieves an SDL_Joystick associated with a given instance id. It takes an SDL_JoystickID as input, which represents the instance id to search for. The function returns a pointer to the SDL_Joystick if found, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickFromInstanceID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Joystick* SDL_JoystickFromInstanceID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_LoadLibrary Syntax in C\nDESCRIPTION: This snippet shows the syntax for using the SDL_Vulkan_LoadLibrary function in C. It takes a path to the Vulkan loader library as input and returns an integer indicating success or failure. It's used to dynamically load the Vulkan library before creating any Vulkan windows. A NULL path will result in SDL attempting to load a default library based on the platform.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Vulkan_LoadLibrary.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_Vulkan_LoadLibrary(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Joystick Buttons in SDL3 (C)\nDESCRIPTION: Retrieves the number of buttons available on a specified SDL_Joystick. Returns the number of buttons or -1 on failure. Requires an initialized SDL_Joystick pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumJoystickButtons.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumJoystickButtons(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Check Music Decoder Availability in SDL_mixer (C)\nDESCRIPTION: This function, Mix_HasMusicDecoder, checks if a specific music decoder is available within the SDL_mixer library. It takes the decoder name as a string and returns a boolean value indicating its availability. Note that Mix_OpenAudio() must be called before using this function to activate decoders.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_HasMusicDecoder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_HasMusicDecoder(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Render Drivers in SDL3 (C)\nDESCRIPTION: Retrieves the number of 2D rendering drivers available for the current display using SDL3. The function takes no arguments and returns an integer representing the count of available render drivers. This information is useful for selecting a suitable renderer during initialization. The function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumRenderDrivers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumRenderDrivers(void);\n```\n\n----------------------------------------\n\nTITLE: Set Event Processing State SDL3 C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetEventEnabled function, which is used to set the state of processing events by type. The function takes the event type (Uint32) and a boolean indicating whether the event should be processed or not as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetEventEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetEventEnabled(Uint32 type, bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeInChannel Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_FadeInChannel function in C. This function fades in an audio chunk on a specified channel. It takes the channel number, the audio chunk, the number of loops, and the fade-in duration in milliseconds as parameters. The function returns the channel used or -1 if it failed to play the sound.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadeInChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeInChannel(int channel, Mix_Chunk *chunk, int loops, int ms);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetPrimarySelectionText Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetPrimarySelectionText function in C, used for setting UTF-8 text into the primary selection. It takes a const char* as input, representing the text to be stored, and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetPrimarySelectionText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetPrimarySelectionText(const char *text);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUTF8_Blended Syntax (SDL_ttf, C)\nDESCRIPTION: This snippet shows the syntax of the TTF_RenderUTF8_Blended function from SDL_ttf library. It takes a TTF_Font pointer, a const char pointer for the UTF-8 text, and an SDL_Color struct as input, and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUTF8_Blended.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUTF8_Blended(TTF_Font *font,\n                const char *text, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Setting Windows Message Hook SDL3 (C)\nDESCRIPTION: Sets a callback function that is called for every Windows message before `TranslateMessage()` is executed. The `callback` is a pointer to the `SDL_WindowsMessageHook` function, and `userdata` is a pointer passed to each iteration of the callback. The callback may modify the message and return true to continue processing, or false to prevent further processing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowsMessageHook.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowsMessageHook(SDL_WindowsMessageHook callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadFunction Syntax\nDESCRIPTION: Shows the correct function signature of SDL_LoadFunction in C. It takes a shared object handle and a function name as input and returns a function pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadFunction.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_FunctionPointer SDL_LoadFunction(SDL_SharedObject *handle, const char *name);\n```\n\n----------------------------------------\n\nTITLE: Simple Rumble Effect with SDL Haptic (C)\nDESCRIPTION: This snippet demonstrates a simple rumble effect using the SDL haptic subsystem. It opens a haptic device, initializes simple rumble, plays the effect at 50% strength for 2 seconds, and cleans up. Requires SDL library to be linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/CategoryHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n SDL_Haptic *haptic = NULL;\n\n   // Open the device\n   SDL_HapticID *haptics = SDL_GetHaptics(NULL);\n   if (haptics) {\n       haptic = SDL_OpenHaptic(haptics[0]);\n       SDL_free(haptics);\n   }\n   if (haptic == NULL)\n      return;\n\n   // Initialize simple rumble\n   if (!SDL_InitHapticRumble(haptic))\n      return;\n\n   // Play effect at 50% strength for 2 seconds\n   if (!SDL_PlayHapticRumble(haptic, 0.5, 2000))\n      return;\n   SDL_Delay(2000);\n\n   // Clean up\n   SDL_CloseHaptic(haptic);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_APP_NAME in C\nDESCRIPTION: Defines the SDL_HINT_APP_NAME macro which is used as a hint to specify the application name. This name is often displayed in OS volume control applets or in lists of applications inhibiting the screensaver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_APP_NAME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_APP_NAME \"SDL_APP_NAME\"\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateSurface Syntax (C)\nDESCRIPTION: This snippet shows the syntax for the SDL_CreateSurface function. It takes the width and height of the surface as integers, and an SDL_PixelFormat struct as input, and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateSurface.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * SDL_CreateSurface(int width, int height, SDL_PixelFormat format);\n```\n\n----------------------------------------\n\nTITLE: Get Desktop Display Mode using SDL_GetDesktopDisplayMode in C\nDESCRIPTION: Retrieves the desktop display mode information for a specified display index. The function populates the provided SDL_DisplayMode structure with details like width, height, and refresh rate. Returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDesktopDisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode * mode);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateProcess Example Arguments\nDESCRIPTION: This code snippet demonstrates how to create an array of strings to be used as arguments for the SDL_CreateProcess function. The array must be null-terminated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateProcess.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst char *args[] = { \"myprogram\", \"argument\", NULL };\n```\n\n----------------------------------------\n\nTITLE: Get current camera driver name - SDL3 - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetCurrentCameraDriver function. It retrieves the name of the currently active camera driver within the SDL3 framework. The function does not take any arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentCameraDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetCurrentCameraDriver(void);\n```\n\n----------------------------------------\n\nTITLE: Mix_Resume Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_Resume function in C, which resumes a specific audio channel that has been paused using Mix_Pause. The channel parameter specifies the channel to resume, or -1 to resume all paused channels. It's part of the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Resume.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_Resume(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_GLContext Definition in C\nDESCRIPTION: Defines SDL_GLContext as a void pointer, serving as an opaque handle to an OpenGL context within the SDL library. This type is used to represent and manage the OpenGL context, which is essential for rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GLContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *SDL_GLContext;\n```\n\n----------------------------------------\n\nTITLE: SDL_VirtualJoystickDesc Definition\nDESCRIPTION: This code snippet defines the SDL_VirtualJoystickDesc structure, used to describe a virtual joystick's properties and behavior. It includes fields for version, type, vendor/product IDs, number of axes, buttons, balls, hats, touchpads, and sensors.  It also defines function pointers for updating the joystick state, setting the player index, handling rumble effects, setting the LED, sending effects, enabling sensors, and cleaning up userdata. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VirtualJoystickDesc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_VirtualJoystickDesc\n{\n    Uint32 version;     /**< the version of this interface */\n    Uint16 type;        /**< `SDL_JoystickType` */\n    Uint16 padding;     /**< unused */\n    Uint16 vendor_id;   /**< the USB vendor ID of this joystick */\n    Uint16 product_id;  /**< the USB product ID of this joystick */\n    Uint16 naxes;       /**< the number of axes on this joystick */\n    Uint16 nbuttons;    /**< the number of buttons on this joystick */\n    Uint16 nballs;      /**< the number of balls on this joystick */\n    Uint16 nhats;       /**< the number of hats on this joystick */\n    Uint16 ntouchpads;  /**< the number of touchpads on this joystick, requires `touchpads` to point at valid descriptions */\n    Uint16 nsensors;    /**< the number of sensors on this joystick, requires `sensors` to point at valid descriptions */\n    Uint16 padding2[2]; /**< unused */\n    Uint32 button_mask; /**< A mask of which buttons are valid for this controller\n                             e.g. (1 << SDL_GAMEPAD_BUTTON_SOUTH) */\n    Uint32 axis_mask;   /**< A mask of which axes are valid for this controller\n                             e.g. (1 << SDL_GAMEPAD_AXIS_LEFTX) */\n    const char *name;   /**< the name of the joystick */\n    const SDL_VirtualJoystickTouchpadDesc *touchpads;   /**< A pointer to an array of touchpad descriptions, required if `ntouchpads` is > 0 */\n    const SDL_VirtualJoystickSensorDesc *sensors;       /**< A pointer to an array of sensor descriptions, required if `nsensors` is > 0 */\n\n    void *userdata;     /**< User data pointer passed to callbacks */\n    void (SDLCALL *Update)(void *userdata); /**< Called when the joystick state should be updated */\n    void (SDLCALL *SetPlayerIndex)(void *userdata, int player_index); /**< Called when the player index is set */\n    bool (SDLCALL *Rumble)(void *userdata, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble); /**< Implements SDL_RumbleJoystick() */\n    bool (SDLCALL *RumbleTriggers)(void *userdata, Uint16 left_rumble, Uint16 right_rumble); /**< Implements SDL_RumbleJoystickTriggers() */\n    bool (SDLCALL *SetLED)(void *userdata, Uint8 red, Uint8 green, Uint8 blue); /**< Implements SDL_SetJoystickLED() */\n    bool (SDLCALL *SendEffect)(void *userdata, const void *data, int size); /**< Implements SDL_SendJoystickEffect() */\n    bool (SDLCALL *SetSensorsEnabled)(void *userdata, bool enabled); /**< Implements SDL_SetGamepadSensorEnabled() */\n    void (SDLCALL *Cleanup)(void *userdata); /**< Cleans up the userdata when the joystick is detached */\n} SDL_VirtualJoystickDesc;\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitForGPUIdle Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WaitForGPUIdle function. This function blocks the calling thread until the specified GPU device is completely idle. It requires a pointer to an SDL_GPUDevice and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitForGPUIdle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitForGPUIdle(\n    SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: Attach Virtual Joystick with SDL_AttachVirtualJoystick in C\nDESCRIPTION: Attaches a new virtual joystick to the SDL system using the provided SDL_VirtualJoystickDesc. The function returns the joystick instance ID if successful, or 0 on failure.  The SDL_VirtualJoystickDesc must be properly initialized before calling this function, typically using SDL_INIT_INTERFACE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AttachVirtualJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickID SDL_AttachVirtualJoystick(const SDL_VirtualJoystickDesc *desc);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawPointsF Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderDrawPointsF function, which is used to draw multiple points on the current rendering target with subpixel precision. It requires a renderer, an array of SDL_FPoint structures, and the number of points to draw.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawPointsF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawPointsF(SDL_Renderer * renderer,\n                          const SDL_FPoint * points,\n                          int count);\n```\n\n----------------------------------------\n\nTITLE: Define Audio Frequency Hint in SDL3\nDESCRIPTION: This code snippet shows how the SDL_HINT_AUDIO_FREQUENCY is defined as a macro in SDL3. It represents the string literal \"SDL_AUDIO_FREQUENCY\", which is the key used to set the audio frequency hint. This hint is used to control the audio frequency when an application does not explicitly set the audio frequency.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_FREQUENCY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_FREQUENCY \"SDL_AUDIO_FREQUENCY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRGBA Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetRGBA function. It takes a pixel value, a pixel format, and pointers to Uint8 variables to store the RGBA components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRGBA.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_GetRGBA(Uint32 pixel,\n                 const SDL_PixelFormat * format,\n                 Uint8 * r, Uint8 * g, Uint8 * b,\n                 Uint8 * a);\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_GetVkGetInstanceProcAddr Syntax - C\nDESCRIPTION: Defines the syntax for the SDL_Vulkan_GetVkGetInstanceProcAddr function. This function retrieves the address of the `vkGetInstanceProcAddr` function, a core Vulkan function, for use within SDL applications. It takes no arguments and returns a function pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_GetVkGetInstanceProcAddr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FunctionPointer SDL_Vulkan_GetVkGetInstanceProcAddr(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyButtonEvent Structure Definition in C\nDESCRIPTION: Defines the SDL_JoyButtonEvent structure which contains information about a joystick button event. The structure includes fields for the event type (SDL_EVENT_JOYSTICK_BUTTON_DOWN or SDL_EVENT_JOYSTICK_BUTTON_UP), timestamp (in nanoseconds), joystick instance ID, the button index, a boolean indicating whether the button is pressed (down), and padding bytes for alignment. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoyButtonEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyButtonEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_JOYSTICK_BUTTON_DOWN or SDL_EVENT_JOYSTICK_BUTTON_UP */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 button;       /**< The joystick button index */\n    bool down;      /**< true if the button is pressed */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_JoyButtonEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_SetDefaultTextureScaleMode Syntax\nDESCRIPTION: Defines the syntax for the SDL_SetDefaultTextureScaleMode function, which sets the default texture scale mode for a given renderer. The function takes an SDL_Renderer pointer and an SDL_ScaleMode enum as input, returning a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetDefaultTextureScaleMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetDefaultTextureScaleMode(SDL_Renderer *renderer, SDL_ScaleMode scale_mode);\n```\n\n----------------------------------------\n\nTITLE: Get Window Border Size in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetWindowBordersSize function. It takes an SDL_Window pointer and four integer pointers to store the top, left, bottom, and right border sizes. The function returns true on success and false on failure. It's defined in SDL3/SDL_video.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowBordersSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowBordersSize(SDL_Window *window, int *top, int *left, int *bottom, int *right);\n```\n\n----------------------------------------\n\nTITLE: Setting UDP Packet Loss in SDL_net (C)\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_UDP_SetPacketLoss function. It sets the percentage of simulated packet loss on a specified UDP socket.  The function takes a UDPsocket and an integer representing the percentage of packet loss (0-100) as input. It does not return any value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_SetPacketLoss.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_UDP_SetPacketLoss(UDPsocket sock, int percent);\n```\n\n----------------------------------------\n\nTITLE: Set Window Minimum Size in SDL2 (C)\nDESCRIPTION: Sets the minimum size (width and height) for the client area of an SDL window. Prevents the window from being resized smaller than the specified dimensions. Requires a valid SDL_Window pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowMinimumSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowMinimumSize(SDL_Window * window,\n                              int min_w, int min_h);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_SetSwapInterval Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GL_SetSwapInterval function in C. It takes an integer as input, representing the swap interval, and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_SetSwapInterval.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GL_SetSwapInterval(int interval);\n```\n\n----------------------------------------\n\nTITLE: SDL_DialogFileCallback Example Implementation C\nDESCRIPTION: Illustrates the implementation of the SDL_DialogFileCallback function. It checks for errors, handles cases where the user cancels the dialog, iterates through the selected files, and logs information about the selected filter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DialogFileCallback.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n\nstatic const SDL_DialogFileFilter filters[] = {\n    { \"PNG images\",  \"png\" },\n    { \"JPEG images\", \"jpg;jpeg\" },\n    { \"All images\",  \"png;jpg;jpeg\" },\n    { \"All files\",   \"*\" }\n};\n\nstatic void SDLCALL callback(void* userdata, const char* const* filelist, int filter)\n{\n    if (!filelist) {\n        SDL_Log(\"An error occured: %s\", SDL_GetError());\n        return;\n    } else if (!*filelist) {\n        SDL_Log(\"The user did not select any file.\");\n        SDL_Log(\"Most likely, the dialog was canceled.\");\n        return;\n    }\n\n    while (*filelist) {\n        SDL_Log(\"Full path to selected file: '%s'\", *filelist);\n        filelist++;\n    }\n\n    if (filter < 0) {\n        SDL_Log(\"The current platform does not support fetching \"\n                \"the selected filter, or the user did not select\"\n                \" any filter.\");\n    } else if (filter < SDL_arraysize(filters)) {\n        SDL_Log(\"The filter selected by the user is '%s' (%s).\",\n                filters[filter].pattern, filters[filter].name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_GetDrawableSize Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GL_GetDrawableSize function in C. It takes an SDL_Window pointer and two integer pointers as input.  The function populates the integer pointers with the width and height of the drawable area of the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_GetDrawableSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GL_GetDrawableSize(SDL_Window * window, int *w,\n                            int *h);\n```\n\n----------------------------------------\n\nTITLE: Get Window ICC Profile (C)\nDESCRIPTION: Retrieves the raw ICC profile data for the screen associated with the specified SDL window. The size of the ICC profile is stored in the size parameter. The returned pointer must be freed using SDL_free(). It's critical this is called only from the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowICCProfile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_GetWindowICCProfile(SDL_Window *window, size_t *size);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddEventWatch Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_AddEventWatch function. It requires an SDL_EventFilter function pointer and a void pointer for user data as input. The function registers the filter to be called whenever an event is added to the event queue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AddEventWatch.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AddEventWatch(SDL_EventFilter filter,\n                       void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_AsyncIOResult Enum in C\nDESCRIPTION: Defines an enumeration `SDL_AsyncIOResult` to represent the result of an asynchronous I/O operation. It includes states for completion, failure, and cancellation. Check SDL_GetError() for failure details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AsyncIOResult.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_AsyncIOResult\n{\n    SDL_ASYNCIO_COMPLETE,  /**< request was completed without error */\n    SDL_ASYNCIO_FAILURE,   /**< request failed for some reason; check SDL_GetError()! */\n    SDL_ASYNCIO_CANCELED   /**< request was canceled before completing. */\n} SDL_AsyncIOResult;\n```\n\n----------------------------------------\n\nTITLE: SDL_MessageBoxFlags Definition in C\nDESCRIPTION: This code snippet defines the `SDL_MessageBoxFlags` enumeration in C.  It specifies flags for error, warning, and informational message boxes, as well as options to arrange buttons from left-to-right or right-to-left. The values are used when creating message boxes using the SDL library's `SDL_MessageBox` function to control their appearance and behavior. The header file dependency is SDL_messagebox.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MessageBoxFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_MessageBoxFlags\n{\n    SDL_MESSAGEBOX_ERROR                 = 0x00000010,   /**< error dialog */\n    SDL_MESSAGEBOX_WARNING               = 0x00000020,   /**< warning dialog */\n    SDL_MESSAGEBOX_INFORMATION           = 0x00000040,   /**< informational dialog */\n    SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 0x00000080,   /**< buttons placed left to right */\n    SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 0x00000100    /**< buttons placed right to left */\n} SDL_MessageBoxFlags;\n```\n\n----------------------------------------\n\nTITLE: Set Font Kerning - SDL_ttf - C\nDESCRIPTION: Sets whether kerning is enabled for a given TTF font. Kerning is enabled by default for newly opened fonts. This function updates any TTF_Text objects using the specified font. This function should be called on the thread that created the font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontKerning.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontKerning(TTF_Font *font, bool enabled);\n```\n\n----------------------------------------\n\nTITLE: SDL_FILE Macro Definition in C\nDESCRIPTION: Defines the SDL_FILE macro to be equivalent to the __FILE__ macro in C. This allows you to identify the current file being compiled, useful for debugging or logging purposes. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FILE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_FILE    __FILE__\n```\n\n----------------------------------------\n\nTITLE: Get Internal Storage Path in Android with SDL2 (C)\nDESCRIPTION: Retrieves the internal storage path for the application on Android using SDL. This path is unique to the application and read/write accessible.  The function returns a const char* representing the path or NULL on failure. Requires SDL 2.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidGetInternalStoragePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_AndroidGetInternalStoragePath(void);\n```\n\n----------------------------------------\n\nTITLE: Set Surface Colorspace in SDL3 (C)\nDESCRIPTION: Sets the colorspace of an SDL_Surface.  The surface parameter is the SDL_Surface to update, and colorspace is an SDL_Colorspace value describing the desired colorspace. The function returns true on success, false on failure.  It requires the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetSurfaceColorspace.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetSurfaceColorspace(SDL_Surface *surface, SDL_Colorspace colorspace);\n```\n\n----------------------------------------\n\nTITLE: SDL_wcslcpy Syntax\nDESCRIPTION: This code snippet shows the syntax of the SDL_wcslcpy function in C. It takes a destination buffer (dst), a source string (src), and the maximum length (maxlen) as input and returns the length of the source string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcslcpy.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_wcslcpy(wchar_t *dst, const wchar_t *src, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL Dynamic API Entry Point (C)\nDESCRIPTION: This C code snippet defines the signature of the SDL_DYNAPI_entry function. This function is called when an external SDL library is loaded, taking the version number, the address of the jump table, and the size of the table as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/dynapi.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nSint32 SDL_DYNAPI_entry(Uint32 version, void *table, Uint32 tablesize);\n```\n\n----------------------------------------\n\nTITLE: SDL_GUIDToString Syntax (C)\nDESCRIPTION: This code snippet shows the function signature of SDL_GUIDToString. It takes an SDL_GUID, a character buffer (pszGUID), and the size of the buffer (cbGUID) as input. The function converts the SDL_GUID to its string representation and writes it to the provided buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GUIDToString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GUIDToString(SDL_GUID guid, char *pszGUID, int cbGUID);\n```\n\n----------------------------------------\n\nTITLE: SDL_Window Struct Definition in C\nDESCRIPTION: Defines the SDL_Window struct as an opaque handle to a window. This struct is used throughout the SDL3 video API to refer to a specific window. It is available since SDL 3.2.0 and is defined in SDL3/SDL_video.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Window.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_Window SDL_Window;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK macro, which is a string used as a hint to control the usage of HIDAPI driver for the Steam Deck's built-in controller. Setting this hint before joystick initialization affects how the controller is handled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK \"SDL_JOYSTICK_HIDAPI_STEAMDECK\"\n```\n\n----------------------------------------\n\nTITLE: TTF_DrawRendererText Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_DrawRendererText function, which draws text to an SDL renderer. It takes a TTF_Text object, and x and y coordinates as input. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_DrawRendererText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DrawRendererText(TTF_Text *text, float x, float y);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Event Types Enum in C\nDESCRIPTION: This code defines an enumeration (`SDL_EventType`) listing various event types supported by the SDL library. These events cover different categories like drop events, audio device events, sensor updates, pen events, camera device events, rendering events, and user-defined events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EventType.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum\n{\n    SDL_EVENT_INVALID = 0x0000,\n\n    /* Application events */\n    SDL_EVENT_FIRST = 0x0100,\n    SDL_EVENT_QUIT,\n    SDL_EVENT_TERMINATING,\n    SDL_EVENT_LOW_MEMORY,\n    SDL_EVENT_WILL_ENTER_BACKGROUND,\n    SDL_EVENT_DID_ENTER_BACKGROUND,\n    SDL_EVENT_WILL_ENTER_FOREGROUND,\n    SDL_EVENT_DID_ENTER_FOREGROUND,\n    SDL_EVENT_LOCALE_CHANGED,\n\n    /* Display events */\n    SDL_EVENT_DISPLAY_CONNECTED = 0x0200,\n    SDL_EVENT_DISPLAY_DISCONNECTED,\n    SDL_EVENT_DISPLAY_ORIENTATION_CHANGED,\n\n    /* Window events */\n    SDL_EVENT_WINDOW_FIRST = 0x0300,\n    SDL_EVENT_WINDOW_SHOWN,\n    SDL_EVENT_WINDOW_HIDDEN,\n    SDL_EVENT_WINDOW_RAISED,\n    SDL_EVENT_WINDOW_RESIZED,\n    SDL_EVENT_WINDOW_MOVED,\n    SDL_EVENT_WINDOW_MINIMIZED,\n    SDL_EVENT_WINDOW_MAXIMIZED,\n    SDL_EVENT_WINDOW_RESTORED,\n    SDL_EVENT_WINDOW_ENTER,\n    SDL_EVENT_WINDOW_LEAVE,\n    SDL_EVENT_WINDOW_FOCUS_GAINED,\n    SDL_EVENT_WINDOW_FOCUS_LOST,\n    SDL_EVENT_WINDOW_CLOSE_REQUESTED,\n    SDL_EVENT_WINDOW_TAKE_FOCUS,\n    SDL_EVENT_WINDOW_HIT_TEST,\n    SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED,\n    SDL_EVENT_WINDOW_LAST,\n\n    /* Input events */\n    SDL_EVENT_INPUT_FIRST = 0x0400,\n    SDL_EVENT_KEY_DOWN,\n    SDL_EVENT_KEY_UP,\n    SDL_EVENT_TEXT_EDITING,\n    SDL_EVENT_TEXT_INPUT,\n    SDL_EVENT_MOUSE_MOTION,\n    SDL_EVENT_MOUSE_BUTTON_DOWN,\n    SDL_EVENT_MOUSE_BUTTON_UP,\n    SDL_EVENT_MOUSE_WHEEL,\n    SDL_EVENT_JOYSTICK_AXIS_MOTION,\n    SDL_EVENT_JOYSTICK_HAT_MOTION,\n    SDL_EVENT_JOYSTICK_BUTTON_DOWN,\n    SDL_EVENT_JOYSTICK_BUTTON_UP,\n    SDL_EVENT_JOYSTICK_ADDED,\n    SDL_EVENT_JOYSTICK_REMOVED,\n    SDL_EVENT_GAMEPAD_AXIS_MOTION,\n    SDL_EVENT_GAMEPAD_BUTTON_DOWN,\n    SDL_EVENT_GAMEPAD_BUTTON_UP,\n    SDL_EVENT_GAMEPAD_ADDED,\n    SDL_EVENT_GAMEPAD_REMOVED,\n    SDL_EVENT_GAMEPAD_REMAPPED,\n    SDL_EVENT_FINGER_DOWN,\n    SDL_EVENT_FINGER_UP,\n    SDL_EVENT_FINGER_MOTION,\n    SDL_EVENT_DOLLAR_GESTURE,\n    SDL_EVENT_DOLLAR_RECORD,\n    SDL_EVENT_MULTI_GESTURE,\n    SDL_EVENT_CLIPBOARD_UPDATE,\n    SDL_EVENT_INPUT_LAST,\n\n    /* Touch events */\n    SDL_EVENT_TOUCH_FIRST = 0x0700,\n    SDL_EVENT_TOUCH_DEVICE_ADDED,\n    SDL_EVENT_TOUCH_DEVICE_REMOVED,\n    SDL_EVENT_TOUCH_LAST,\n\n    /* System events */\n    SDL_EVENT_SYSTEM_FIRST = 0x0800,\n    SDL_EVENT_POWER_WILL_APPEAR,\n    SDL_EVENT_POWER_DID_APPEAR,\n    SDL_EVENT_POWER_WILL_DISAPPEAR,\n    SDL_EVENT_POWER_DID_DISAPPEAR,\n    SDL_EVENT_SYSTEM_LAST,\n\n    /* Controller events */\n    SDL_EVENT_CONTROLLER_FIRST = 0x0900,\n    SDL_EVENT_CONTROLLER_AXIS_MOTION,\n    SDL_EVENT_CONTROLLER_BUTTON_DOWN,\n    SDL_EVENT_CONTROLLER_BUTTON_UP,\n    SDL_EVENT_CONTROLLER_ADDED,\n    SDL_EVENT_CONTROLLER_REMOVED,\n    SDL_EVENT_CONTROLLER_REMAPPED,\n    SDL_EVENT_CONTROLLER_TOUCHPAD_DOWN,\n    SDL_EVENT_CONTROLLER_TOUCHPAD_MOTION,\n    SDL_EVENT_CONTROLLER_TOUCHPAD_UP,\n    SDL_EVENT_CONTROLLER_SENSOR_UPDATE,\n    SDL_EVENT_CONTROLLER_LAST,\n\n    /* Hotkey events */\n    SDL_EVENT_HOTKEY_FIRST = 0x0A00,\n    SDL_EVENT_HOTKEY_PRESSED,\n    SDL_EVENT_HOTKEY_LAST,\n\n    /* Audio events */\n    SDL_EVENT_AUDIO_FIRST = 0x0B00,\n    SDL_EVENT_AUDIO_DEVICE_ADDED,\n    SDL_EVENT_AUDIO_DEVICE_REMOVED,\n    SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED,\n    SDL_EVENT_AUDIO_LAST,\n\n    /* Sensor events */\n    SDL_EVENT_SENSOR_FIRST = 0x0C00,\n    SDL_EVENT_SENSOR_UPDATE,\n    SDL_EVENT_SENSOR_LAST,\n\n    /* Render events */\n    SDL_EVENT_RENDER_FIRST = 0x0D00,\n    SDL_EVENT_RENDER_TARGETS_RESET,\n    SDL_EVENT_RENDER_DEVICE_RESET,\n    SDL_EVENT_RENDER_DEVICE_LOST,\n    SDL_EVENT_RENDER_LAST,\n\n    /* Camera events */\n    SDL_EVENT_CAMERA_FIRST = 0x0E00,\n    SDL_EVENT_CAMERA_DEVICE_ADDED,\n    SDL_EVENT_CAMERA_DEVICE_REMOVED,\n    SDL_EVENT_CAMERA_DEVICE_APPROVED,\n    SDL_EVENT_CAMERA_DEVICE_DENIED,\n    SDL_EVENT_CAMERA_LAST,\n\n    /* Drop events */\n    SDL_EVENT_DROP_FIRST = 0x1000,\n    SDL_EVENT_DROP_BEGIN,\n    SDL_EVENT_DROP_COMPLETE,\n    SDL_EVENT_DROP_POSITION,\n    SDL_EVENT_DROP_LAST,\n\n    /* Audio hotplug events */\n    SDL_EVENT_AUDIO_DEVICE_ADDED = 0x1100,  /**< A new audio device is available */\n    SDL_EVENT_AUDIO_DEVICE_REMOVED,         /**< An audio device has been removed. */\n    SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED,  /**< An audio device's format has been changed by the system. */\n\n    /* Sensor events */\n    SDL_EVENT_SENSOR_UPDATE = 0x1200,     /**< A sensor was updated */\n\n    /* Pressure-sensitive pen events */\n    SDL_EVENT_PEN_PROXIMITY_IN = 0x1300,  /**< Pressure-sensitive pen has become available */\n    SDL_EVENT_PEN_PROXIMITY_OUT,          /**< Pressure-sensitive pen has become unavailable */\n    SDL_EVENT_PEN_DOWN,                   /**< Pressure-sensitive pen touched drawing surface */\n    SDL_EVENT_PEN_UP,                     /**< Pressure-sensitive pen stopped touching drawing surface */\n    SDL_EVENT_PEN_BUTTON_DOWN,            /**< Pressure-sensitive pen button pressed */\n    SDL_EVENT_PEN_BUTTON_UP,              /**< Pressure-sensitive pen button released */\n    SDL_EVENT_PEN_MOTION,                 /**< Pressure-sensitive pen is moving on the tablet */\n    SDL_EVENT_PEN_AXIS,                   /**< Pressure-sensitive pen angle/pressure/etc changed */\n\n    /* Camera hotplug events */\n    SDL_EVENT_CAMERA_DEVICE_ADDED = 0x1400,  /**< A new camera device is available */\n    SDL_EVENT_CAMERA_DEVICE_REMOVED,         /**< A camera device has been removed. */\n    SDL_EVENT_CAMERA_DEVICE_APPROVED,        /**< A camera device has been approved for use by the user. */\n    SDL_EVENT_CAMERA_DEVICE_DENIED,          /**< A camera device has been denied for use by the user. */\n\n    /* Render events */\n    SDL_EVENT_RENDER_TARGETS_RESET = 0x2000, /**< The render targets have been reset and their contents need to be updated */\n    SDL_EVENT_RENDER_DEVICE_RESET, /**< The device has been reset and all textures need to be recreated */\n    SDL_EVENT_RENDER_DEVICE_LOST, /**< The device has been lost and can't be recovered. */\n\n    /* Reserved events for private platforms */\n    SDL_EVENT_PRIVATE0 = 0x4000,\n    SDL_EVENT_PRIVATE1,\n    SDL_EVENT_PRIVATE2,\n    SDL_EVENT_PRIVATE3,\n\n    /* Internal events */\n    SDL_EVENT_POLL_SENTINEL = 0x7F00, /**< Signals the end of an event poll cycle */\n\n    /** Events SDL_EVENT_USER through SDL_EVENT_LAST are for your use,\n     *  and should be allocated with SDL_RegisterEvents()\n     */\n    SDL_EVENT_USER    = 0x8000,\n\n    /**\n     *  This last event is only for bounding internal arrays\n     */\n    SDL_EVENT_LAST    = 0xFFFF,\n\n    /* This just makes sure the enum is the size of Uint32 */\n    SDL_EVENT_ENUM_PADDING = 0x7FFFFFFF\n\n} SDL_EventType;\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Output Size in C\nDESCRIPTION: Retrieves the output width and height in pixels of a given SDL_Renderer.  This function is used to determine the actual rendering size, which might differ from the window size, especially on high-DPI displays. It takes a renderer and pointers to integers for the width and height as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRendererOutputSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetRendererOutputSize(SDL_Renderer * renderer,\n                              int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Get Touch Device Type in SDL2 (C)\nDESCRIPTION: Retrieves the type of a specific touch device identified by its ID. Requires SDL 2.0.10 or later. Returns an SDL_TouchDeviceType enum value indicating the device type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTouchDeviceType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);\n```\n\n----------------------------------------\n\nTITLE: Checking Joystick Rumble Support in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_JoystickHasRumble function to determine if a given SDL_Joystick instance supports rumble effects. It requires the SDL2 library to be initialized and a valid SDL_Joystick pointer. The function returns SDL_TRUE if rumble is supported, and SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickHasRumble.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_JoystickHasRumble(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Setting Shape and Parameters of Shaped Window in C\nDESCRIPTION: This code snippet shows the syntax for the `SDL_SetWindowShape` function. It sets the shape and parameters of a shaped window. The function takes a pointer to an `SDL_Window`, a pointer to an `SDL_Surface` that defines the shape, and a pointer to an `SDL_WindowShapeMode` structure that specifies how the shape should be applied. It returns 0 on success, SDL_INVALID_SHAPE_ARGUMENT on an invalid shape argument, or SDL_NONSHAPEABLE_WINDOW if the SDL_Window is not a valid shaped window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowShape.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowShape(SDL_Window *window,SDL_Surface *shape,SDL_WindowShapeMode *shape_mode);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetRenderVSync Syntax C\nDESCRIPTION: Defines the syntax for the SDL_SetRenderVSync function. It takes a renderer and an integer representing the vsync interval as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderVSync.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderVSync(SDL_Renderer *renderer, int vsync);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_FORCE_RAISEWINDOW in C\nDESCRIPTION: Defines the SDL_HINT_FORCE_RAISEWINDOW macro, which represents a string used to set or get the hint controlling window raising behavior. This hint is mainly relevant for MS Windows platforms due to OS-imposed restrictions on programmatically moving windows to the foreground. The hint accepts values \"0\" for no forcing (default) and \"1\" for an extra level of forcing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_FORCE_RAISEWINDOW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_FORCE_RAISEWINDOW    \"SDL_HINT_FORCE_RAISEWINDOW\"\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_Unbind Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_UDP_Unbind function. It requires SDL_net library to be included. It takes a UDPsocket and an integer channel as input and returns nothing (void).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_Unbind.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_UDP_Unbind(UDPsocket sock, int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_GPU_DRIVER Macro Definition in C\nDESCRIPTION: Defines the SDL_HINT_GPU_DRIVER macro, which is used to specify a preferred GPU backend for SDL. This hint should be set before any GPU functions are called to ensure the desired backend is used. The default behavior is for SDL to attempt to use all available backends.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GPU_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GPU_DRIVER \"SDL_GPU_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Get Joystick GUID for ID in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetJoystickGUIDForID to retrieve the GUID of a joystick. It takes the joystick instance ID as input and returns an SDL_GUID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickGUIDForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GUID SDL_GetJoystickGUIDForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Check Audio Device Pause State in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to use the SDL_AudioStreamDevicePaused function to check if an audio device associated with an SDL audio stream is paused. It takes an SDL_AudioStream pointer as input and returns a boolean value indicating whether the device is paused (true) or not (false).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioStreamDevicePaused.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_AudioStreamDevicePaused(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Freeing Audio Data (Chunks and Music)\nDESCRIPTION: These functions free allocated memory for audio chunks and music objects. It's important to free memory to prevent memory leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_FreeChunk(Mix_Chunk *chunk);                                                     // Free an audio chunk.\nvoid Mix_FreeMusic(Mix_Music *music);                                                     // Free a music object.\n```\n\n----------------------------------------\n\nTITLE: Loading Music from SDL_IOStream in C\nDESCRIPTION: This code snippet demonstrates how to load a music object from an SDL_IOStream using the Mix_LoadMUS_IO function in SDL_mixer. It takes an SDL_IOStream and a boolean value indicating whether to close the IOStream after loading. Returns a pointer to the Mix_Music object or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_LoadMUS_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Music * Mix_LoadMUS_IO(SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Creating TTF_TextEngine in SDL_ttf with C\nDESCRIPTION: This code snippet demonstrates how to create a text engine using the `TTF_CreateSurfaceTextEngine` function from the SDL_ttf library. It is essential for preparing to draw text on SDL surfaces. The function takes no arguments and returns a pointer to a TTF_TextEngine object, or NULL if it fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateSurfaceTextEngine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateSurfaceTextEngine(void);\n```\n\n----------------------------------------\n\nTITLE: Check Music Playing Status - SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax of the `Mix_PlayingMusic` function, which checks the playing status of the music stream in SDL_mixer. It takes no arguments and returns an integer indicating whether music is playing (non-zero) or not (zero). Paused music is considered as playing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_PlayingMusic.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_PlayingMusic(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertPixelsAndColorspace Syntax (C)\nDESCRIPTION: This function copies a block of pixels, converting from one format and colorspace to another.  It takes source and destination parameters for width, height, pixel format, colorspace, properties, data, and pitch. It returns true on success, false on failure.  Requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ConvertPixelsAndColorspace.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, const void *src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, void *dst, int dst_pitch);\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_ISBIGENDIAN Macro Definition in C\nDESCRIPTION: This macro determines if an SDL_AudioFormat represents bigendian data. It takes an SDL_AudioFormat value 'x' as input and performs a bitwise AND operation with SDL_AUDIO_MASK_BIG_ENDIAN. It returns a non-zero value if the format is bigendian, zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_ISBIGENDIAN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_ISBIGENDIAN(x)     ((x) & SDL_AUDIO_MASK_BIG_ENDIAN)\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUVertexStorageTextures Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_BindGPUVertexStorageTextures function. It takes a render pass, a starting slot, an array of storage textures, and the number of bindings as input to bind storage textures for a vertex shader.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUVertexStorageTextures.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_BindGPUVertexStorageTextures(\n    SDL_GPURenderPass *render_pass,\n    Uint32 first_slot,\n    SDL_GPUTexture *const *storage_textures,\n    Uint32 num_bindings);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLERCONFIG in C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLERCONFIG macro, a string constant that specifies the environment variable for manually configuring game controller mappings. This hint should be set before initializing the game controller subsystem with SDL_Init(SDL_INIT_GAMECONTROLLER).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_GAMECONTROLLERCONFIG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLERCONFIG \"SDL_GAMECONTROLLERCONFIG\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticLeftRight Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_HapticLeftRight` for controlling left/right haptic effects. The `type` member specifies the effect type as `SDL_HAPTIC_LEFTRIGHT`. The `length` member defines the duration of the effect in milliseconds. `large_magnitude` and `small_magnitude` control the intensity of the large (left) and small (right) motors respectively.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticLeftRight.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_HapticLeftRight\n{\n    /* Header */\n    SDL_HapticEffectType type;  /**< SDL_HAPTIC_LEFTRIGHT */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect in milliseconds. */\n\n    /* Rumble */\n    Uint16 large_magnitude; /**< Control of the large controller motor. */\n    Uint16 small_magnitude; /**< Control of the small controller motor. */\n} SDL_HapticLeftRight;\n```\n\n----------------------------------------\n\nTITLE: Query Joystick Event Processing State in SDL (C)\nDESCRIPTION: This C code snippet shows the syntax of the SDL_JoystickEventsEnabled function, which queries the state of joystick event processing. It returns a boolean value indicating whether joystick events are being processed or not. If disabled, SDL_UpdateJoysticks() must be called manually.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoystickEventsEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_JoystickEventsEnabled(void);\n```\n\n----------------------------------------\n\nTITLE: Setting Surface Palette using SDL_SetSurfacePalette in C\nDESCRIPTION: Sets the color palette used by an SDL_Surface. The function takes pointers to both the surface and the palette structures. It returns 0 on success and a negative error code on failure. Call SDL_GetError() for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetSurfacePalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetSurfacePalette(SDL_Surface * surface,\n                          SDL_Palette * palette);\n```\n\n----------------------------------------\n\nTITLE: SDL_CloseAudioDevice Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_CloseAudioDevice function in C. It takes an SDL_AudioDeviceID as input, which represents the device to close. The function has no return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CloseAudioDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CloseAudioDevice(SDL_AudioDeviceID dev);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddTimerNS Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_AddTimerNS function in C. It defines the function's return type (SDL_TimerID) and parameters: interval (Uint64), callback function (SDL_NSTimerCallback), and userdata (void *). The function returns a timer ID or 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddTimerNS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TimerID SDL_AddTimerNS(Uint64 interval, SDL_NSTimerCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadBMP Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_LoadBMP function in C to load a BMP image from a file. The function takes a const char pointer to the file path as input and returns a pointer to an SDL_Surface structure, or NULL on failure. The returned surface must be freed with SDL_DestroySurface() to avoid memory leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadBMP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_LoadBMP(const char *file);\n```\n\n----------------------------------------\n\nTITLE: SDL_MixAudio Function Definition in C\nDESCRIPTION: This C code snippet shows the function signature of SDL_MixAudio. It takes a destination buffer, a source buffer, the audio format, the length of the buffer, and the volume as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MixAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_MixAudio(Uint8 *dst, const Uint8 *src, SDL_AudioFormat format, Uint32 len, float volume);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateTexture Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_UpdateTexture function in C. It takes a texture, a rectangle representing the update area, pixel data, and the pitch as input and returns a boolean indicating success or failure. The pixel data is in the format of the texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_UpdateTexture(SDL_Texture *texture, const SDL_Rect *rect, const void *pixels, int pitch);\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv_utf8_ucs4 Macro Definition in C\nDESCRIPTION: This macro converts a UTF-8 string to UCS-4. It utilizes SDL_iconv_string with predefined encodings \"UCS-4\" and \"UTF-8\". The input string `S` is converted, and a new UCS-4 encoded string is returned. Be careful with side effects in the input `S` as it is double-evaluated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv_utf8_ucs4.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_iconv_utf8_ucs4(S)      (Uint32 *)SDL_iconv_string(\"UCS-4\", \"UTF-8\", S, SDL_strlen(S)+1)\n```\n\n----------------------------------------\n\nTITLE: SDL_PauseAudio Syntax\nDESCRIPTION: Defines the syntax for the SDL_PauseAudio function in C. This function is used to pause or unpause the audio device. The `pause_on` parameter determines whether to pause (non-zero) or unpause (0).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PauseAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PauseAudio(int pause_on);\n```\n\n----------------------------------------\n\nTITLE: SDL_SaveFile Syntax in C\nDESCRIPTION: This code snippet shows the function signature for SDL_SaveFile in the C programming language.  It defines the function's input parameters: a file path (const char *file), a pointer to the data (const void *data), and the size of the data (size_t datasize). The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SaveFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SaveFile(const char *file, const void *data, size_t datasize);\n```\n\n----------------------------------------\n\nTITLE: SDL_memset Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_memset function in C. It takes a destination pointer `dst`, an integer value `c` (treated as a byte), and a length `len` as input, and returns the destination pointer `dst`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_memset.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_memset(void *dst, int c, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Append Text String - SDL_ttf\nDESCRIPTION: Appends UTF-8 text to a text object. The `string` parameter is the text to append, and `length` is the length of the string in bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_104\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_AppendTextString(TTF_Text *text, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Get Texture Color Modulation - SDL3 - C\nDESCRIPTION: This function retrieves the color modulation values (red, green, blue) for a given SDL_Texture. It populates the provided Uint8 pointers with the current color modulation values of the texture. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextureColorMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTextureColorMod(SDL_Texture *texture, Uint8 *r, Uint8 *g, Uint8 *b);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES in C\nDESCRIPTION: Defines a macro constant for the SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES hint. This hint allows you to specify a comma-separated list of USB Vendor ID (VID) and Product ID (PID) pairs in hexadecimal format, which SDL will ignore when scanning for game controllers. The value can also be read from a file by specifying \"@filepath\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES \"SDL_GAMECONTROLLER_IGNORE_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Touch Coordinates from Event (C)\nDESCRIPTION: This code snippet shows how to access the x and y coordinates of a touch event using the event.tfinger structure. It assumes you have an SDL_Event named 'event' that contains a touch event.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/touch.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat x = event.tfinger.x;\nfloat y = event.tfinger.y;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WINDOW_ALLOW_TOPMOST in C\nDESCRIPTION: Defines the SDL_HINT_WINDOW_ALLOW_TOPMOST hint as a string literal. This hint determines whether an SDL window is allowed to be set as the topmost window. It is defined in SDL3/SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOW_ALLOW_TOPMOST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOW_ALLOW_TOPMOST \"SDL_WINDOW_ALLOW_TOPMOST\"\n```\n\n----------------------------------------\n\nTITLE: Get Window Mouse Grab State - C\nDESCRIPTION: Retrieves the mouse grab mode of a given SDL window. The function takes an SDL_Window pointer as input and returns a boolean indicating whether the mouse is currently grabbed by that window. It is available since SDL 3.2.0 and should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowMouseGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowMouseGrab(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_HIDAPI_LIBUSB_WHITELIST in C\nDESCRIPTION: Defines the SDL_HINT_HIDAPI_LIBUSB_WHITELIST macro, which is a string literal used to set the corresponding SDL hint. Setting this hint before SDL initialization controls whether HIDAPI uses libusb only for a set of whitelisted devices, or for all devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_HIDAPI_LIBUSB_WHITELIST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_HIDAPI_LIBUSB_WHITELIST \"SDL_HIDAPI_LIBUSB_WHITELIST\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticEffect Union Definition in C\nDESCRIPTION: This code snippet defines the SDL_HapticEffect union in C. It shows the various types of haptic effects that can be represented by the union, including constant, periodic, condition, ramp, left/right, and custom effects. The `type` member specifies the active effect type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef union SDL_HapticEffect\n{\n    /* Common for all force feedback effects */\n    SDL_HapticEffectType type;      /**< Effect type. */\n    SDL_HapticConstant constant;    /**< Constant effect. */\n    SDL_HapticPeriodic periodic;    /**< Periodic effect. */\n    SDL_HapticCondition condition;  /**< Condition effect. */\n    SDL_HapticRamp ramp;            /**< Ramp effect. */\n    SDL_HapticLeftRight leftright;  /**< Left/Right effect. */\n    SDL_HapticCustom custom;        /**< Custom effect. */\n} SDL_HapticEffect;\n```\n\n----------------------------------------\n\nTITLE: Mix_HookMusic Syntax\nDESCRIPTION: The Mix_HookMusic function adds a custom music player or mixer function to SDL_mixer. It takes a callback function `mix_func` and a pointer `arg` as parameters. The `mix_func` callback will be called every time SDL_mixer is preparing to supply more data to the audio device. Setting `mix_func` to NULL will disable the callback and re-enable built-in music playback. The `arg` pointer is passed directly to the callback function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_HookMusic.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_HookMusic(Mix_MixCallback mix_func, void *arg);\n```\n\n----------------------------------------\n\nTITLE: Check Music Playing Status - Mix_PlayingMusic - C\nDESCRIPTION: This code snippet shows the syntax of the `Mix_PlayingMusic` function in C, used to check the playing status of the music stream in SDL_mixer. It returns a boolean value indicating whether music is currently playing (true) or not (false). Paused music is considered as 'playing'.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_PlayingMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_PlayingMusic(void);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTexture Syntax in C\nDESCRIPTION: This code snippet shows the function signature for IMG_LoadTexture in C. It takes an SDL_Renderer and a file path as input and returns an SDL_Texture. The texture represents the image loaded into GPU memory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadTexture.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Texture * IMG_LoadTexture(SDL_Renderer *renderer, const char *file);\n```\n\n----------------------------------------\n\nTITLE: SDL_SemWaitTimeout Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SemWaitTimeout function in C. This function waits until a semaphore has a positive value or a timeout occurs. It takes a semaphore pointer and a timeout value as input and returns an integer indicating success, timeout, or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SemWaitTimeout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SemWaitTimeout(SDL_sem *sem, Uint32 timeout);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE in C\nDESCRIPTION: This code snippet defines the SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE macro, which specifies the pixel size of a single character used by the SDL_RenderDebugText function. The font is monospaced and square.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_DEBUG_TEXT_FONT_CHARACTER_SIZE 8\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Properties C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GetRendererProperties function to retrieve the properties associated with a renderer and then access the maximum texture size. It requires an initialized SDL_Renderer. The SDL_GetNumberProperty function is used to extract the integer value of the SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER property.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRendererProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer *renderer;\nSDL_PropertiesID props = SDL_GetRendererProperties(renderer);\nint max_texture_size = (int)SDL_GetNumberProperty(props, SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER, 0);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickRumble Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_JoystickRumble function in C. It takes a joystick pointer, low and high frequency rumble intensities, and a duration in milliseconds as input. It returns 0 on success or -1 if rumbling is not supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickRumble.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickRumble(SDL_Joystick *joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_LogOutputFunction in C\nDESCRIPTION: This code snippet defines the SDL_LogOutputFunction, a callback used by SDL for logging. It takes userdata, category, log priority, and the message as input. The function is part of the SDL3 library and provides a mechanism to customize the logging output.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogOutputFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_LogOutputFunction)(void *userdata, int category, SDL_LogPriority priority, const char *message);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Blended_Wrapped Syntax in C\nDESCRIPTION: This function renders Latin1 text with word wrapping at high quality to a new ARGB surface using SDL_ttf. It takes a font, text string, color, and wrap length as input, returning a new SDL_Surface or NULL on error. Wrap length of 0 will only wrap on newline characters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderText_Blended_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Blended_Wrapped(TTF_Font *font,\n                const char *text, SDL_Color fg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Stopping Haptic Effects with SDL_StopHapticEffects in C\nDESCRIPTION: This C code snippet demonstrates how to stop all currently playing haptic effects on a specified SDL_Haptic device using the SDL_StopHapticEffects function. It takes a pointer to an SDL_Haptic device as input and returns a boolean value indicating whether the operation was successful. SDL must be initialized before calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StopHapticEffects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_StopHapticEffects(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: SDL_Renderer Structure Definition in C\nDESCRIPTION: Defines the SDL_Renderer structure as an opaque type. This structure is a handle representing the rendering state. It's used with SDL's rendering API to draw graphics to a window. The actual structure members are not exposed to the user.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Renderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Renderer SDL_Renderer;\n```\n\n----------------------------------------\n\nTITLE: Get Current Thread ID in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetCurrentThreadID function to retrieve the current thread's ID. The function requires no input parameters and returns an SDL_ThreadID representing the thread's identifier. If SDL is running on a platform that doesn't support threads, the function will return zero.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentThreadID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_ThreadID SDL_GetCurrentThreadID(void);\n```\n\n----------------------------------------\n\nTITLE: Set GPU Scissor in C\nDESCRIPTION: Sets the current scissor state on a command buffer. It requires a render pass handle and a rectangle representing the scissor area. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPUScissor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetGPUScissor(\n    SDL_GPURenderPass *render_pass,\n    const SDL_Rect *scissor);\n\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Connection State in C\nDESCRIPTION: Retrieves the connection state of a specified SDL_Gamepad object. Returns an SDL_JoystickConnectionState enum indicating the gamepad's connection status, or SDL_JOYSTICK_CONNECTION_INVALID on failure. Requires a valid SDL_Gamepad pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadConnectionState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickConnectionState SDL_GetGamepadConnectionState(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioStreamClear Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the `SDL_AudioStreamClear` function. It takes a pointer to an `SDL_AudioStream` as input and returns nothing (void). It clears any pending data in the stream without performing any conversion.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioStreamClear.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AudioStreamClear(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Driver Name in SDL2 (C)\nDESCRIPTION: Retrieves the name of a built-in audio driver at a specified index. The function takes an integer index as input, ranging from 0 to SDL_GetNumAudioDrivers() - 1. It returns a constant character pointer to the audio driver name, or NULL if the index is invalid. This function requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAudioDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetAudioDriver(int index);\n```\n\n----------------------------------------\n\nTITLE: Retrieving SDL Error Message in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetError function, which retrieves a message about the last error that occurred on the current thread. It requires the SDL3 library. The function takes no arguments and returns a const char* pointing to a thread-local string containing the error message, or an empty string if no error has occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetError.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst char * SDL_GetError(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ColorPrimaries Enum in C\nDESCRIPTION: This code snippet defines the `SDL_ColorPrimaries` enumeration in C. It specifies a set of color primary values corresponding to different video standards like ITU-R BT.709, BT.601, BT.2020, SMPTE standards, and more. The enumeration provides a way to represent color spaces in SDL applications, available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ColorPrimaries.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ColorPrimaries\n{\n    SDL_COLOR_PRIMARIES_UNKNOWN = 0,\n    SDL_COLOR_PRIMARIES_BT709 = 1,                  /**< ITU-R BT.709-6 */\n    SDL_COLOR_PRIMARIES_UNSPECIFIED = 2,\n    SDL_COLOR_PRIMARIES_BT470M = 4,                 /**< ITU-R BT.470-6 System M */\n    SDL_COLOR_PRIMARIES_BT470BG = 5,                /**< ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625 */\n    SDL_COLOR_PRIMARIES_BT601 = 6,                  /**< ITU-R BT.601-7 525, SMPTE 170M */\n    SDL_COLOR_PRIMARIES_SMPTE240 = 7,               /**< SMPTE 240M, functionally the same as SDL_COLOR_PRIMARIES_BT601 */\n    SDL_COLOR_PRIMARIES_GENERIC_FILM = 8,           /**< Generic film (color filters using Illuminant C) */\n    SDL_COLOR_PRIMARIES_BT2020 = 9,                 /**< ITU-R BT.2020-2 / ITU-R BT.2100-0 */\n    SDL_COLOR_PRIMARIES_XYZ = 10,                   /**< SMPTE ST 428-1 */\n    SDL_COLOR_PRIMARIES_SMPTE431 = 11,              /**< SMPTE RP 431-2 */\n    SDL_COLOR_PRIMARIES_SMPTE432 = 12,              /**< SMPTE EG 432-1 / DCI P3 */\n    SDL_COLOR_PRIMARIES_EBU3213 = 22,               /**< EBU Tech. 3213-E */\n    SDL_COLOR_PRIMARIES_CUSTOM = 31\n} SDL_ColorPrimaries;\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUVertexBuffers Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for SDL_BindGPUVertexBuffers function. It binds an array of vertex buffers to a render pass, starting from a specific slot. It requires a render pass, a starting slot index, an array of buffer bindings, and the number of bindings as inputs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUVertexBuffers.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_BindGPUVertexBuffers(\n    SDL_GPURenderPass *render_pass,\n    Uint32 first_slot,\n    const SDL_GPUBufferBinding *bindings,\n    Uint32 num_bindings);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_ExtensionSupported Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_GL_ExtensionSupported` function in C. It takes a `const char *` as input, representing the name of the OpenGL extension to check, and returns a boolean value indicating whether the extension is supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_ExtensionSupported.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GL_ExtensionSupported(const char *extension);\n```\n\n----------------------------------------\n\nTITLE: Set Render Clip Rectangle - SDL2 - C\nDESCRIPTION: Sets the clip rectangle for rendering on the specified target using SDL2. The function takes a renderer and a rectangle as input. The rectangle defines the area to which rendering will be clipped, or NULL to disable clipping. It returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderSetClipRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderSetClipRect(SDL_Renderer * renderer,\n                          const SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: Pausing a Channel with Mix_Pause in SDL_mixer (C)\nDESCRIPTION: This code snippet demonstrates the syntax for using the Mix_Pause function from SDL_mixer. It shows how to pause a specific channel or all channels. The function takes an integer as a parameter, where a positive integer represents the channel number and -1 represents all channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Pause.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_Pause(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_InvalidParamError Usage Example in C\nDESCRIPTION: Illustrates a common usage pattern of SDL_InvalidParamError within an SDL function.  If the input string 'str' is null, the function returns an error using the macro, otherwise continues with normal execution. The function is assumed to return a boolean.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InvalidParamError.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbool MyFunction(const char *str) {\n    if (!str) {\n        return SDL_InvalidParamError(\"str\");  // returns false.\n    }\n    DoSomething(str);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_LockMutex Function Definition\nDESCRIPTION: Defines the SDL_LockMutex function in C for locking a mutex. It takes a pointer to an SDL_mutex as input and returns an integer indicating success or failure. The function blocks until the mutex is available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_LockMutex(SDL_mutex * mutex);\n```\n\n----------------------------------------\n\nTITLE: Opening Haptic Device from Joystick in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to open a haptic device associated with a joystick using SDL_OpenHapticFromJoystick. It requires a valid SDL_Joystick pointer as input and returns an SDL_Haptic pointer, which should be closed separately using SDL_CloseHaptic. Prior to using this function, the joystick should already be opened using SDL_JoystickOpen.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenHapticFromJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Haptic * SDL_OpenHapticFromJoystick(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Creating a GPU Graphics Pipeline in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateGPUGraphicsPipeline function, which creates a graphics pipeline object. It takes an SDL_GPUDevice pointer and a pointer to an SDL_GPUGraphicsPipelineCreateInfo structure as input. The function returns a pointer to the created pipeline or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUGraphicsPipeline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUGraphicsPipeline * SDL_CreateGPUGraphicsPipeline(\n    SDL_GPUDevice *device,\n    const SDL_GPUGraphicsPipelineCreateInfo *createinfo);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL Subsystem with SDL_InitSubSystem in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_InitSubSystem to initialize SDL subsystems.  The function takes SDL_InitFlags as input to specify which subsystems to initialize. It returns a boolean indicating success or failure.  Call SDL_GetError() for more information upon failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InitSubSystem.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_InitSubSystem(SDL_InitFlags flags);\n```\n\n----------------------------------------\n\nTITLE: Get Music Volume in SDL_mixer\nDESCRIPTION: This function retrieves the current volume level of a given music object. It takes a pointer to a Mix_Music object as input and returns an integer representing the volume, ranging from 0 to MIX_MAX_VOLUME (128). It is part of SDL_mixer library and available since version 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicVolume.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_GetMusicVolume(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WAVE_CHUNK_LIMIT in C\nDESCRIPTION: Defines the SDL_HINT_WAVE_CHUNK_LIMIT macro, which is a string constant used as a hint to set the maximum number of chunks allowed in a WAVE file. This hint helps prevent excessive processing time on malformed or corrupt WAVE files. The value of this hint should be set before calling SDL_LoadWAV or SDL_LoadWAV_IO.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WAVE_CHUNK_LIMIT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WAVE_CHUNK_LIMIT \"SDL_WAVE_CHUNK_LIMIT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerUpdate Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerUpdate function in C. This function is used to manually update the state of game controllers. It does not require any parameters and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerUpdate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GameControllerUpdate(void);\n```\n\n----------------------------------------\n\nTITLE: Accessing Finger Coordinates from Event - C/C++\nDESCRIPTION: This code snippet demonstrates how to access the x and y coordinates of a touch event within an SDL application.  It extracts the x and y coordinates from the event's tfinger member, assuming that 'event' is a valid SDL_Event structure containing a finger event (e.g., SDL_EVENT_FINGER_DOWN, SDL_EVENT_FINGER_MOTION, or SDL_EVENT_FINGER_UP).  These coordinates are normalized values between 0 and 1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/touch.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nfloat x = event.tfinger.x;\nfloat y = event.tfinger.y;\n```\n\n----------------------------------------\n\nTITLE: Setting Alpha Modulation on an SDL Surface (C)\nDESCRIPTION: Sets the alpha modulation value for a given SDL_Surface. This value is used to modulate the source alpha during blit operations. Requires an initialized SDL environment and a valid SDL_Surface pointer. The alpha value is an 8-bit unsigned integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetSurfaceAlphaMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetSurfaceAlphaMod(SDL_Surface * surface,\n                           Uint8 alpha);\n```\n\n----------------------------------------\n\nTITLE: Render Shaded Wrapped Text with SDL_ttf in C\nDESCRIPTION: This function renders UTF-8 encoded text to an 8-bit surface with shading and word wrapping. It requires an initialized TTF_Font, the text to render, its length, foreground and background colors, and the maximum width for wrapping. It returns a pointer to a new SDL_Surface, or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderText_Shaded_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Shaded_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Firmware Version in C\nDESCRIPTION: Retrieves the firmware version of an opened game controller using SDL_GameControllerGetFirmwareVersion. The function takes a pointer to an SDL_GameController object as input and returns the firmware version as a Uint16. A return value of zero indicates that the firmware version is unavailable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetFirmwareVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GameControllerGetFirmwareVersion(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetSensorData Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerGetSensorData function. It takes an SDL_GameController pointer, an SDL_SensorType, a float pointer to store the sensor data, and the number of values to write. The function returns 0 on success or -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetSensorData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerGetSensorData(SDL_GameController *gamecontroller, SDL_SensorType type, float *data, int num_values);\n```\n\n----------------------------------------\n\nTITLE: Get Window Position in SDL2 (C)\nDESCRIPTION: Retrieves the x and y coordinates of a specified SDL window. The function takes an SDL_Window pointer and two integer pointers as input. It fills the provided integer pointers with the x and y coordinates of the window in screen coordinates. NULL can be passed for x or y if the value is not needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetWindowPosition(SDL_Window * window,\n                           int *x, int *y);\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv_string Function Definition in C\nDESCRIPTION: Defines the syntax and parameters for the SDL_iconv_string function, which converts a string from one encoding to another. It requires specifying the target encoding (tocode), source encoding (fromcode), input buffer (inbuf), and the input buffer's size (inbytesleft).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_iconv_string(const char *tocode,\n                   const char *fromcode,\n                   const char *inbuf,\n                   size_t inbytesleft);\n```\n\n----------------------------------------\n\nTITLE: SDL_RendererFlags Enum Definition in C\nDESCRIPTION: This code snippet defines the SDL_RendererFlags enum in C.  It specifies flags used when creating a rendering context. The flags include options for software rendering, hardware acceleration, VSync synchronization, and support for rendering to textures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RendererFlags.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_RendererFlags\n{\n    SDL_RENDERER_SOFTWARE = 0x00000001,         /**< The renderer is a software fallback */\n    SDL_RENDERER_ACCELERATED = 0x00000002,      /**< The renderer uses hardware\n                                                     acceleration */\n    SDL_RENDERER_PRESENTVSYNC = 0x00000004,     /**< Present is synchronized\n                                                     with the refresh rate */\n    SDL_RENDERER_TARGETTEXTURE = 0x00000008     /**< The renderer supports\n                                                     rendering to texture */\n} SDL_RendererFlags;\n```\n\n----------------------------------------\n\nTITLE: Get Logical Rendering Size in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_RenderGetLogicalSize to retrieve the logical rendering size of an SDL_Renderer. It takes a renderer and two integer pointers as input, and fills the integer pointers with the width and height respectively. This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetLogicalSize.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_RenderGetLogicalSize(SDL_Renderer * renderer, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Audio Drivers in SDL3 (C)\nDESCRIPTION: This snippet shows the syntax for calling the SDL_GetNumAudioDrivers function, which returns the number of built-in audio drivers in SDL3. The function takes no arguments and returns an integer representing the driver count. It's safe to call from any thread and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumAudioDrivers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumAudioDrivers(void);\n```\n\n----------------------------------------\n\nTITLE: Getting Gamepad Path using SDL_GetGamepadPath in C\nDESCRIPTION: Retrieves the implementation-dependent path for an opened gamepad. It takes an SDL_Gamepad pointer as input, which should be a gamepad identifier previously returned by SDL_OpenGamepad(). The function returns a const char* representing the path, or NULL if there is no path or the identifier is invalid. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadPath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadPath(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Query Gamepad Event State - SDL_GamepadEventsEnabled - C\nDESCRIPTION: This snippet shows the syntax for the SDL_GamepadEventsEnabled function, which queries whether gamepad events are currently enabled in SDL. It returns true if gamepad events are being processed and false otherwise. If disabled, SDL_UpdateGamepads must be called manually.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadEventsEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GamepadEventsEnabled(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_US_PER_SECOND in C\nDESCRIPTION: Defines the SDL_US_PER_SECOND macro to represent the number of microseconds in a second. The macro is used for time calculations and conversions within the SDL library. It's a constant value of 1,000,000.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_US_PER_SECOND.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_US_PER_SECOND   1000000\n```\n\n----------------------------------------\n\nTITLE: SDL_ControllerButtonEvent Structure Definition in C\nDESCRIPTION: Defines the SDL_ControllerButtonEvent structure, which captures information about a game controller button event. The structure contains fields for the event type (SDL_CONTROLLERBUTTONDOWN or SDL_CONTROLLERBUTTONUP), timestamp, joystick instance ID, the specific button pressed, and the state of the button (SDL_PRESSED or SDL_RELEASED).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ControllerButtonEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_ControllerButtonEvent\n{\n    Uint32 type;        /**< SDL_CONTROLLERBUTTONDOWN or SDL_CONTROLLERBUTTONUP */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 button;       /**< The controller button (SDL_GameControllerButton) */\n    Uint8 state;        /**< SDL_PRESSED or SDL_RELEASED */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_ControllerButtonEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEODRIVER Macro in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEODRIVER macro. This macro is a string literal used as a key to set a hint influencing SDL's video driver selection. Setting this hint before SDL_Init allows the application to force the use of a specific video backend.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEODRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEODRIVER \"SDL_VIDEODRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Get Primary Selection Text in SDL3 (C)\nDESCRIPTION: Retrieves UTF-8 text from the primary selection using SDL_GetPrimarySelectionText. The returned string must be freed with SDL_free when it is no longer needed. This function should only be called on the main thread and returns an empty string on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPrimarySelectionText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetPrimarySelectionText(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAudioStreamAvailable Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetAudioStreamAvailable function in C.  This function retrieves the number of converted/resampled bytes that are available in the provided audio stream. The `stream` parameter is a pointer to the `SDL_AudioStream` to query.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamAvailable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetAudioStreamAvailable(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Mix_GroupAvailable Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_GroupAvailable function. This function takes an integer tag as input and returns the first available channel with that tag, or -1 if none are available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GroupAvailable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GroupAvailable(int tag);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderFillRects Syntax in C\nDESCRIPTION: Defines the syntax for SDL_RenderFillRects function in C. It takes a renderer, an array of rectangles, and the number of rectangles as input, and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderFillRects.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_RenderFillRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetRenderScale Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetRenderScale function in C. It takes an SDL_Renderer pointer, a horizontal scaling factor (scaleX), and a vertical scaling factor (scaleY) as input.  The function returns a boolean indicating success (true) or failure (false).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderScale(SDL_Renderer *renderer, float scaleX, float scaleY);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_mixer Effect Callback\nDESCRIPTION: Defines the function signature for a special effect callback in SDL_mixer. This function takes the channel number, audio stream, stream length, and user data as input, and modifies the audio stream to apply the desired effect. It is used with `Mix_RegisterEffect` to register the effect with SDL_mixer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_EffectFunc_t.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (SDLCALL *Mix_EffectFunc_t)(int chan, void *stream, int len, void *udata);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetClosestFullscreenDisplayMode Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetClosestFullscreenDisplayMode function in C. This function attempts to find the closest match to a requested display mode.  It takes the display ID, desired width, height, refresh rate, a boolean to include high density modes, and a pointer to an SDL_DisplayMode to store the closest match. The function returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetClosestFullscreenDisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, bool include_high_density_modes, SDL_DisplayMode *closest);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderPresent Syntax in C\nDESCRIPTION: This code snippet shows the syntax for SDL_RenderPresent function in C. It takes a pointer to an SDL_Renderer and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderPresent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderPresent(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Blend Mode Pseudocode\nDESCRIPTION: This pseudocode demonstrates the blending operation using the custom blend mode. It shows how the source and destination colors and alpha are combined based on the specified factors and operations. The result is then stored in the render target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ComposeCustomBlendMode.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ndstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);\ndstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);\n```\n\n----------------------------------------\n\nTITLE: Checking if a glyph is provided for a 32-bit codepoint (SDL_ttf, C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_GlyphIsProvided32 function in SDL_ttf. It takes a TTF_Font pointer and a Uint32 character code as input. It returns a non-zero value if the font provides a glyph for the character, and zero otherwise. Requires SDL_ttf version 2.0.18 or newer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GlyphIsProvided32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GlyphIsProvided32(TTF_Font *font, Uint32 ch);\n```\n\n----------------------------------------\n\nTITLE: Get Text Direction with TTF_GetTextDirection in SDL_ttf (C)\nDESCRIPTION: This code snippet demonstrates how to use the `TTF_GetTextDirection` function in the SDL_ttf library to retrieve the text direction of a `TTF_Text` object. The function takes a `TTF_Text` pointer as input and returns a `TTF_Direction` value representing the text direction. The function is available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextDirection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Direction TTF_GetTextDirection(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_CompareAndSwapAtomicU32 Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_CompareAndSwapAtomicU32 function. It takes a pointer to an SDL_AtomicU32, the old value (Uint32), and the new value (Uint32) as input. It returns a boolean value indicating whether the swap was successful.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CompareAndSwapAtomicU32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CompareAndSwapAtomicU32(SDL_AtomicU32 *a, Uint32 oldval, Uint32 newval);\n```\n\n----------------------------------------\n\nTITLE: Get External Storage State - SDL2 - C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_AndroidGetExternalStorageState function to get the current state of external storage on Android. It returns an integer representing the state, which is a bitmask of SDL_ANDROID_EXTERNAL_STORAGE_READ and SDL_ANDROID_EXTERNAL_STORAGE_WRITE. A return value of 0 indicates failure or unavailability of external storage.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidGetExternalStorageState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AndroidGetExternalStorageState(void);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Axis sfSymbolsName in SDL3 (C)\nDESCRIPTION: Retrieves the sfSymbolsName for a specific axis on a gamepad connected to an Apple platform using SDL3. It requires a valid SDL_Gamepad pointer and a valid SDL_GamepadAxis enum value. Returns a const char* representing the sfSymbolsName or NULL if not available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadAppleSFSymbolsNameForAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTicks64 Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetTicks64 function. This function takes no arguments and returns an unsigned 64-bit integer representing milliseconds since initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTicks64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_GetTicks64(void);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeOutChannel Syntax in C\nDESCRIPTION: Declaration of the Mix_FadeOutChannel function from SDL_mixer. This function fades out a specified channel over a given number of milliseconds and then halts the channel. Requires the SDL3_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadeOutChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeOutChannel(int which, int ms);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadSurfacePixel Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadSurfacePixel function. This function reads the RGBA color components of a pixel at a specified (x, y) coordinate on an SDL_Surface. It returns true on success, false on failure. Pointers to Uint8 variables are used to store the retrieved RGBA values; NULL can be passed to ignore a channel.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadSurfacePixel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadSurfacePixel(SDL_Surface *surface, int x, int y, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIO_DISK_TIMESCALE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_AUDIO_DISK_TIMESCALE macro, which is used to adjust the audio rate when using the disk audio driver. This hint should be set before opening an audio device to control the playback speed. The default value is \"1.0\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DISK_TIMESCALE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DISK_TIMESCALE \"SDL_AUDIO_DISK_TIMESCALE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTrayTooltip Syntax in C\nDESCRIPTION: Defines the syntax for the `SDL_SetTrayTooltip` function, which is used to update the tooltip of a system tray icon. The function takes a pointer to an `SDL_Tray` structure and a UTF-8 encoded string for the new tooltip. It should be called on the thread that created the tray.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTrayTooltip.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetTrayTooltip(SDL_Tray *tray, const char *tooltip);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_AUTO_CAPTURE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MOUSE_AUTO_CAPTURE macro, which is used to set the mouse auto-capture hint in SDL. It specifies the string \"SDL_MOUSE_AUTO_CAPTURE\" as the identifier for this hint. Setting this hint allows enabling or disabling mouse capture when mouse buttons are pressed. The hint can be set using SDL_SetHint before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_AUTO_CAPTURE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_AUTO_CAPTURE    \"SDL_MOUSE_AUTO_CAPTURE\"\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_PixelFormatDetails Structure in C\nDESCRIPTION: This C struct, SDL_PixelFormatDetails, contains detailed information about a pixel's format.  It includes the pixel format enum, bits and bytes per pixel, padding, RGBA masks, number of bits for each component, and bit shifts for each component. The struct is available starting from SDL version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PixelFormatDetails.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_PixelFormatDetails\n{\n    SDL_PixelFormat format;\n    Uint8 bits_per_pixel;\n    Uint8 bytes_per_pixel;\n    Uint8 padding[2];\n    Uint32 Rmask;\n    Uint32 Gmask;\n    Uint32 Bmask;\n    Uint32 Amask;\n    Uint8 Rbits;\n    Uint8 Gbits;\n    Uint8 Bbits;\n    Uint8 Abits;\n    Uint8 Rshift;\n    Uint8 Gshift;\n    Uint8 Bshift;\n    Uint8 Ashift;\n} SDL_PixelFormatDetails;\n```\n\n----------------------------------------\n\nTITLE: Get Linked SDL_mixer Version in C\nDESCRIPTION: This code snippet shows the syntax for using the Mix_Linked_Version function to get the version of the dynamically linked SDL_mixer library. The function takes no arguments and returns a pointer to a static SDL_version struct containing the version information. Do not free or modify the returned pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Linked_Version.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst SDL_version * Mix_Linked_Version(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_DelayNS Syntax in C\nDESCRIPTION: Shows the syntax for using the SDL_DelayNS function in C to pause execution for a specified number of nanoseconds. The function takes a Uint64 as input, representing the number of nanoseconds to delay.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DelayNS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DelayNS(Uint64 ns);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetError Syntax in C\nDESCRIPTION: Defines the syntax of the SDL_SetError function. It takes a format string and variable arguments, similar to printf, to set the error message. It always returns -1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetError(const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDL_swprintf Syntax in C\nDESCRIPTION: The SDL_swprintf function formats a wide string of up to `maxlen`-1 wchar_t values, converting each '%' item with values provided through variable arguments. It's defined in SDL3/SDL_stdinc.h and does not require a C runtime. The function returns the number of wide characters that should be written, excluding the null-terminator character, or a negative value on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_swprintf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_swprintf(wchar_t *text, size_t maxlen, const wchar_t *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Setting Reverse Stereo with Mix_SetReverseStereo in C\nDESCRIPTION: The Mix_SetReverseStereo function reverses the stereo channels of a specified channel or the final mixed output stream. It takes the channel number and a boolean value to enable or disable the effect. It uses Mix_RegisterEffect internally and might be more CPU intensive than alternative solutions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetReverseStereo.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_SetReverseStereo(int channel, int flip);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SensorEvent Structure in C\nDESCRIPTION: Defines the SDL_SensorEvent structure, which holds information about a sensor event in SDL3.  It includes fields for the event type, a reserved field, timestamps (system and sensor), sensor ID, and an array of floating-point sensor data. This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SensorEvent.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_SensorEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_SENSOR_UPDATE */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_SensorID which; /**< The instance ID of the sensor */\n    float data[6];      /**< Up to 6 values from the sensor - additional values can be queried using SDL_GetSensorData() */\n    Uint64 sensor_timestamp; /**< The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock */\n} SDL_SensorEvent;\n```\n\n----------------------------------------\n\nTITLE: TTF_MeasureString Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_MeasureString function in C. It takes a TTF_Font pointer, a UTF-8 string, the length of the string, a maximum width, and pointers to store the measured width and length. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_MeasureString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_MeasureString(TTF_Font *font, const char *text, size_t length, int max_width, int *measured_width, size_t *measured_length);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_ANDROID Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_ANDROID preprocessor macro in C. It is defined as 1 if the code is being compiled for Android. It is available since SDL 3.2.0 and found in SDL3/SDL_platform_defines.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_ANDROID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_ANDROID 1\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AppResult enum in C\nDESCRIPTION: This C code defines the `SDL_AppResult` enum, which is used to signal success, failure, or continuation from the SDL3 main callbacks. It provides a mechanism to control the application's lifecycle based on events and initialization results.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppResult.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_AppResult\n{\n    SDL_APP_CONTINUE,   /**< Value that requests that the app continue from the main callbacks. */\n    SDL_APP_SUCCESS,    /**< Value that requests termination with success from the main callbacks. */\n    SDL_APP_FAILURE     /**< Value that requests termination with error from the main callbacks. */\n} SDL_AppResult;\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerHasAxis Declaration in C\nDESCRIPTION: Declaration of the SDL_GameControllerHasAxis function. This function is used to query if a game controller has a specific axis defined in its mapping.\nIt requires a valid SDL_GameController pointer and an SDL_GameControllerAxis enum value as input and returns a SDL_bool indicating whether the controller supports that axis. It's available since SDL 2.0.14.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerHasAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nextern DECLSPEC SDL_bool SDLCALL\nSDL_GameControllerHasAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis);\n```\n\n----------------------------------------\n\nTITLE: SDL_size_add_check_overflow Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_size_add_check_overflow function, used to add two size_t integers and check for overflow. It takes two size_t input values (a and b) and a pointer to a size_t (ret) where the result will be stored if no overflow occurs. It returns a boolean value, indicating whether the addition resulted in an overflow.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_size_add_check_overflow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_size_add_check_overflow(size_t a, size_t b, size_t *ret);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_EnumerationResult Enum in C\nDESCRIPTION: This code snippet defines the SDL_EnumerationResult enumeration in C. The enum specifies possible return values from a directory enumeration callback function, allowing the callback to control the enumeration process. SDL_ENUM_CONTINUE requests continuation, SDL_ENUM_SUCCESS requests successful termination, and SDL_ENUM_FAILURE requests termination due to failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EnumerationResult.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_EnumerationResult\n{\n    SDL_ENUM_CONTINUE,   /**< Value that requests that enumeration continue. */\n    SDL_ENUM_SUCCESS,    /**< Value that requests that enumeration stop, successfully. */\n    SDL_ENUM_FAILURE     /**< Value that requests that enumeration stop, as a failure. */\n} SDL_EnumerationResult;\n```\n\n----------------------------------------\n\nTITLE: SDL_Colorspace Enum Definition in C\nDESCRIPTION: This code snippet defines the SDL_Colorspace enumeration in C. It lists various color spaces supported by SDL, including sRGB, HDR10, JPEG, and different BT.601, BT.709, and BT.2020 variants. The enumeration is used to specify the color space of a surface or texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Colorspace.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_Colorspace\n{\n    SDL_COLORSPACE_UNKNOWN = 0,\n\n    /* sRGB is a gamma corrected colorspace, and the default colorspace for SDL rendering and 8-bit RGB surfaces */\n    SDL_COLORSPACE_SRGB = 0x120005a0u, /**< Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709 */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,\n                                 SDL_COLOR_RANGE_FULL,\n                                 SDL_COLOR_PRIMARIES_BT709,\n                                 SDL_TRANSFER_CHARACTERISTICS_SRGB,\n                                 SDL_MATRIX_COEFFICIENTS_IDENTITY,\n                                 SDL_CHROMA_LOCATION_NONE), */\n\n    /* This is a linear colorspace and the default colorspace for floating point surfaces. On Windows this is the scRGB colorspace, and on Apple platforms this is kCGColorSpaceExtendedLinearSRGB for EDR content */\n    SDL_COLORSPACE_SRGB_LINEAR = 0x12000500u, /**< Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709  */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,\n                                 SDL_COLOR_RANGE_FULL,\n                                 SDL_COLOR_PRIMARIES_BT709,\n                                 SDL_TRANSFER_CHARACTERISTICS_LINEAR,\n                                 SDL_MATRIX_COEFFICIENTS_IDENTITY,\n                                 SDL_CHROMA_LOCATION_NONE), */\n\n    /* HDR10 is a non-linear HDR colorspace and the default colorspace for 10-bit surfaces */\n    SDL_COLORSPACE_HDR10 = 0x12002600u, /**< Equivalent to DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020  */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,\n                                 SDL_COLOR_RANGE_FULL,\n                                 SDL_COLOR_PRIMARIES_BT2020,\n                                 SDL_TRANSFER_CHARACTERISTICS_PQ,\n                                 SDL_MATRIX_COEFFICIENTS_IDENTITY,\n                                 SDL_CHROMA_LOCATION_NONE), */\n\n    SDL_COLORSPACE_JPEG = 0x220004c6u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_NONE_P709_X601 */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,\n                                 SDL_COLOR_RANGE_FULL,\n                                 SDL_COLOR_PRIMARIES_BT709,\n                                 SDL_TRANSFER_CHARACTERISTICS_BT601,\n                                 SDL_MATRIX_COEFFICIENTS_BT601,\n                                 SDL_CHROMA_LOCATION_NONE), */\n\n    SDL_COLORSPACE_BT601_LIMITED = 0x211018c6u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,\n                                 SDL_COLOR_RANGE_LIMITED,\n                                 SDL_COLOR_PRIMARIES_BT601,\n                                 SDL_TRANSFER_CHARACTERISTICS_BT601,\n                                 SDL_MATRIX_COEFFICIENTS_BT601,\n                                 SDL_CHROMA_LOCATION_LEFT), */\n\n    SDL_COLORSPACE_BT601_FULL = 0x221018c6u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601 */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,\n                                 SDL_COLOR_RANGE_FULL,\n                                 SDL_COLOR_PRIMARIES_BT601,\n                                 SDL_TRANSFER_CHARACTERISTICS_BT601,\n                                 SDL_MATRIX_COEFFICIENTS_BT601,\n                                 SDL_CHROMA_LOCATION_LEFT), */\n\n    SDL_COLORSPACE_BT709_LIMITED = 0x21100421u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,\n                                 SDL_COLOR_RANGE_LIMITED,\n                                 SDL_COLOR_PRIMARIES_BT709,\n                                 SDL_TRANSFER_CHARACTERISTICS_BT709,\n                                 SDL_MATRIX_COEFFICIENTS_BT709,\n                                 SDL_CHROMA_LOCATION_LEFT), */\n\n    SDL_COLORSPACE_BT709_FULL = 0x22100421u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709 */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,\n                                 SDL_COLOR_RANGE_FULL,\n                                 SDL_COLOR_PRIMARIES_BT709,\n                                 SDL_TRANSFER_CHARACTERISTICS_BT709,\n                                 SDL_MATRIX_COEFFICIENTS_BT709,\n                                 SDL_CHROMA_LOCATION_LEFT), */\n\n    SDL_COLORSPACE_BT2020_LIMITED = 0x21102609u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020 */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,\n                                 SDL_COLOR_RANGE_LIMITED,\n                                 SDL_COLOR_PRIMARIES_BT2020,\n                                 SDL_TRANSFER_CHARACTERISTICS_PQ,\n                                 SDL_MATRIX_COEFFICIENTS_BT2020_NCL,\n                                 SDL_CHROMA_LOCATION_LEFT), */\n\n    SDL_COLORSPACE_BT2020_FULL = 0x22102609u, /**< Equivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020 */\n        /* SDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_YCBCR,\n                                 SDL_COLOR_RANGE_FULL,\n                                 SDL_COLOR_PRIMARIES_BT2020,\n                                 SDL_TRANSFER_CHARACTERISTICS_PQ,\n                                 SDL_MATRIX_COEFFICIENTS_BT2020_NCL,\n                                 SDL_CHROMA_LOCATION_LEFT), */\n\n    SDL_COLORSPACE_RGB_DEFAULT = SDL_COLORSPACE_SRGB, /**< The default colorspace for RGB surfaces if no colorspace is specified */\n    SDL_COLORSPACE_YUV_DEFAULT = SDL_COLORSPACE_JPEG  /**< The default colorspace for YUV surfaces if no colorspace is specified */\n} SDL_Colorspace;\n\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_WindowEventID Enum in C\nDESCRIPTION: This code defines the SDL_WindowEventID enumeration, which specifies the various types of window events that SDL can detect. Each enumerator represents a specific window event, such as being shown, hidden, resized, or gaining/losing focus. This enum is part of the SDL_video.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WindowEventID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_WindowEventID\n{\n    SDL_WINDOWEVENT_NONE,           /**< Never used */\n    SDL_WINDOWEVENT_SHOWN,          /**< Window has been shown */\n    SDL_WINDOWEVENT_HIDDEN,         /**< Window has been hidden */\n    SDL_WINDOWEVENT_EXPOSED,        /**< Window has been exposed and should be\n                                         redrawn */\n    SDL_WINDOWEVENT_MOVED,          /**< Window has been moved to data1, data2\n                                     */\n    SDL_WINDOWEVENT_RESIZED,        /**< Window has been resized to data1xdata2 */\n    SDL_WINDOWEVENT_SIZE_CHANGED,   /**< The window size has changed, either as\n                                         a result of an API call or through the\n                                         system or user changing the window size. */\n    SDL_WINDOWEVENT_MINIMIZED,      /**< Window has been minimized */\n    SDL_WINDOWEVENT_MAXIMIZED,      /**< Window has been maximized */\n    SDL_WINDOWEVENT_RESTORED,       /**< Window has been restored to normal size\n                                         and position */\n    SDL_WINDOWEVENT_ENTER,          /**< Window has gained mouse focus */\n    SDL_WINDOWEVENT_LEAVE,          /**< Window has lost mouse focus */\n    SDL_WINDOWEVENT_FOCUS_GAINED,     /**< Window has gained keyboard focus */\n    SDL_WINDOWEVENT_FOCUS_LOST,     /**< Window has lost keyboard focus */\n    SDL_WINDOWEVENT_CLOSE,          /**< The window manager requests that the window be closed */\n    SDL_WINDOWEVENT_TAKE_FOCUS,     /**< Window is being offered a focus (should SetWindowInputFocus() on itself or a subwindow, or ignore) */\n    SDL_WINDOWEVENT_HIT_TEST,       /**< Window had a hit test that wasn't SDL_HITTEST_NORMAL. */\n    SDL_WINDOWEVENT_ICCPROF_CHANGED,/**< The ICC profile of the window's display has changed. */\n    SDL_WINDOWEVENT_DISPLAY_CHANGED /**< Window has been moved to display data1. */\n} SDL_WindowEventID;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MatrixCoefficients Enum in C\nDESCRIPTION: This code snippet defines the SDL_MatrixCoefficients enumeration, specifying different colorspace matrix coefficients according to various ITU-R and SMPTE standards. The enum is used for color space conversions and management within the SDL3 library. It is available since SDL 3.2.0. The coefficients are defined in SDL3/SDL_pixels.h\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MatrixCoefficients.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_MatrixCoefficients\n{\n    SDL_MATRIX_COEFFICIENTS_IDENTITY = 0,\n    SDL_MATRIX_COEFFICIENTS_BT709 = 1,              /**< ITU-R BT.709-6 */\n    SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,\n    SDL_MATRIX_COEFFICIENTS_FCC = 4,                /**< US FCC Title 47 */\n    SDL_MATRIX_COEFFICIENTS_BT470BG = 5,            /**< ITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, functionally the same as SDL_MATRIX_COEFFICIENTS_BT601 */\n    SDL_MATRIX_COEFFICIENTS_BT601 = 6,              /**< ITU-R BT.601-7 525 */\n    SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7,           /**< SMPTE 240M */\n    SDL_MATRIX_COEFFICIENTS_YCGCO = 8,\n    SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9,         /**< ITU-R BT.2020-2 non-constant luminance */\n    SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10,         /**< ITU-R BT.2020-2 constant luminance */\n    SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11,         /**< SMPTE ST 2085 */\n    SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12,\n    SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13,\n    SDL_MATRIX_COEFFICIENTS_ICTCP = 14,             /**< ITU-R BT.2100-0 ICTCP */\n    SDL_MATRIX_COEFFICIENTS_CUSTOM = 31\n} SDL_MatrixCoefficients;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FlashOperation Enum in C\nDESCRIPTION: This code snippet defines the `SDL_FlashOperation` enum in C. It allows specifying different flash operations for a window, such as canceling, flashing briefly, or flashing until the window receives focus. This enum is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlashOperation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_FlashOperation\n{\n    SDL_FLASH_CANCEL,                   /**< Cancel any window flash state */\n    SDL_FLASH_BRIEFLY,                  /**< Flash the window briefly to get attention */\n    SDL_FLASH_UNTIL_FOCUSED             /**< Flash the window until it gets focus */\n} SDL_FlashOperation;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_RequestAndroidPermissionCallback in C\nDESCRIPTION: Defines the SDL_RequestAndroidPermissionCallback function pointer, used to handle responses from Android permission requests.  It takes a userdata pointer, the permission string, and a boolean indicating whether the permission was granted as parameters. This is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RequestAndroidPermissionCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_RequestAndroidPermissionCallback)(void *userdata, const char *permission, bool granted);\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenAudio Equivalent Implementation\nDESCRIPTION: Shows the roughly equivalent implementation of SDL_OpenAudio using SDL_OpenAudioDevice with SDL_AUDIO_ALLOW_ANY_CHANGE flag. This equivalent implementation highlights that the major difference is the use of SDL_OpenAudioDevice and how parameters such as device ID and the flag SDL_AUDIO_ALLOW_ANY_CHANGE are handled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_OpenAudio.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_OpenAudioDevice(NULL, 0, desired, obtained, SDL_AUDIO_ALLOW_ANY_CHANGE);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadFile_RW Syntax in C\nDESCRIPTION: Loads all data from an SDL data stream. Takes an SDL_RWops pointer, a pointer to a size_t to store the data size, and a flag to indicate whether to close the stream after reading. Returns a pointer to the allocated data, or NULL on error. The data is null-terminated, and the allocated memory should be freed with SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadFile_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_LoadFile_RW(SDL_RWops *src,\n                      size_t *datasize,\n                      int freesrc);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ENABLE_SCREEN_KEYBOARD in C\nDESCRIPTION: Defines the SDL_HINT_ENABLE_SCREEN_KEYBOARD macro. This macro is a string literal that represents the name of the hint used to control the visibility of the on-screen keyboard.  The hint should be set before SDL text input is activated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ENABLE_SCREEN_KEYBOARD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ENABLE_SCREEN_KEYBOARD \"SDL_ENABLE_SCREEN_KEYBOARD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_DEFINE_PIXELFOURCC Usage Example in C\nDESCRIPTION: Example demonstrating how to use the SDL_DEFINE_PIXELFOURCC macro to define the SDL_PIXELFORMAT_YV12 pixel format. It shows the literal character values being passed into the macro, which get converted into the corresponding pixel format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEFINE_PIXELFOURCC.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2')\n```\n\n----------------------------------------\n\nTITLE: Query Event Filter in SDL2 (C)\nDESCRIPTION: Retrieves the current event filter function and its associated user data. The filter parameter stores the current callback function, and the userdata parameter stores the pointer that is passed to the current event filter. Returns SDL_TRUE on success or SDL_FALSE if no event filter is set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetEventFilter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GetEventFilter(SDL_EventFilter * filter,\n                            void **userdata);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Product Version for ID in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetJoystickProductVersionForID function in SDL3. It takes an SDL_JoystickID as input and returns a Uint16 representing the product version. It returns 0 if the instance_id is invalid or the product version is unavailable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickProductVersionForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetJoystickProductVersionForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_X11_SCALING_FACTOR in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_SCALING_FACTOR hint as a string literal. This hint is used to set the content scaling factor for X11 displays. The value should be a floating-point number between 1.0 and 10.0.  It must be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_X11_SCALING_FACTOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_SCALING_FACTOR \"SDL_VIDEO_X11_SCALING_FACTOR\"\n```\n\n----------------------------------------\n\nTITLE: Acquire GPU Command Buffer in C\nDESCRIPTION: Acquires a GPU command buffer from a given SDL_GPUDevice. This command buffer is managed by the implementation and should not be freed by the user. It is intended for use on the thread it was acquired on and should be submitted on the same thread. Multiple command buffers can be acquired at once for interleaving rendering and compute passes, or copy passes and preparatory work, to improve rendering performance. Returns a pointer to SDL_GPUCommandBuffer, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AcquireGPUCommandBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUCommandBuffer * SDL_AcquireGPUCommandBuffer(\n    SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: Mix_QuickLoad_RAW Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_QuickLoad_RAW function, which loads raw audio data from memory into a Mix_Chunk structure.  It takes a pointer to the memory buffer containing the raw PCM data and the length of the buffer in bytes as input.  The function returns a pointer to the newly created Mix_Chunk, or NULL if an error occurred. The audio data must be in the exact format as the audio device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_QuickLoad_RAW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Chunk * Mix_QuickLoad_RAW(Uint8 *mem, Uint32 len);\n```\n\n----------------------------------------\n\nTITLE: Query Fading Status of a Channel - SDL_mixer - C\nDESCRIPTION: This code snippet shows the syntax of the Mix_FadingChannel function from the SDL_mixer library.  It takes an integer representing the channel index as input and returns a Mix_Fading enum value indicating the channel's fading status (MIX_NO_FADING, MIX_FADING_OUT, or MIX_FADING_IN). The function requires SDL_mixer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadingChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Fading Mix_FadingChannel(int which);\n```\n\n----------------------------------------\n\nTITLE: SDL_MaximizeWindow Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_MaximizeWindow function, which is used to request that a window be maximized. The function takes an SDL_Window pointer as input and returns a boolean indicating success or failure. It's crucial to ensure the window is resizable for this function to have an effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MaximizeWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_MaximizeWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_getenv Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_getenv function, which retrieves the value of an environment variable.  It takes a const char *name as input and returns a const char * representing the variable's value or NULL if not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_getenv.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_getenv(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Get Steam Input Handle with SDL_GameControllerGetSteamHandle (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GameControllerGetSteamHandle function to retrieve the Steam Input handle of an SDL_GameController. It takes a pointer to an SDL_GameController object as input and returns a Uint64 representing the gamepad handle. A return value of 0 indicates that the handle is unavailable. The function is available since SDL 2.30.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetSteamHandle.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint64 SDL_GameControllerGetSteamHandle(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Detecting GIF Image Data\nDESCRIPTION: Detects if an SDL_RWops stream contains GIF image data. It takes a seekable/readable SDL_RWops as input and returns a non-zero value if the data is GIF, zero otherwise. The function attempts to seek back to the original position in the stream before returning.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isGIF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isGIF(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_PeepEvents Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_PeepEvents function in C.  It takes a pointer to an SDL_Event array, the number of events to process, an action to perform, and the minimum and maximum event types to consider. The function returns the number of events stored or -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PeepEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_PeepEvents(SDL_Event *events, int numevents, SDL_EventAction action, Uint32 minType, Uint32 maxType);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetPointerPropertyWithCleanup Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetPointerPropertyWithCleanup function. This function sets a pointer property within an SDL_PropertiesID with a cleanup callback that is called when the property is deleted or the function fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetPointerPropertyWithCleanup.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetPointerPropertyWithCleanup(SDL_PropertiesID props, const char *name, void *value, SDL_CleanupPropertyCallback cleanup, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetMasksForPixelFormat Syntax in C\nDESCRIPTION: Retrieves the bits per pixel (bpp) and RGBA masks for a specified SDL_PixelFormat. The function populates the provided pointers with the bit depth, red mask, green mask, blue mask, and alpha mask associated with the input format. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetMasksForPixelFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetMasksForPixelFormat(SDL_PixelFormat format, int *bpp, Uint32 *Rmask, Uint32 *Gmask, Uint32 *Bmask, Uint32 *Amask);\n```\n\n----------------------------------------\n\nTITLE: Get Window Pixel Format in SDL2\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_GetWindowPixelFormat function, which retrieves the pixel format of a specified SDL_Window.  It takes a pointer to an SDL_Window as input and returns a Uint32 representing the pixel format, or SDL_PIXELFORMAT_UNKNOWN on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowPixelFormat.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint32 SDL_GetWindowPixelFormat(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Close an SDL Joystick Device in C\nDESCRIPTION: Closes a joystick device that was previously opened using SDL_JoystickOpen. The function takes a pointer to the joystick device as input. This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickClose.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_JoystickClose(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Get Key Code from Scancode in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetKeyFromScancode function in C. It takes an SDL_Scancode, an SDL_Keymod (modifier state), and a boolean indicating if the keycode will be used in key events as input and returns the corresponding SDL_Keycode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetKeyFromScancode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, bool key_event);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_TOUCH_EVENTS in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_TOUCH_EVENTS macro used to control whether mouse events should generate synthetic touch events. The macro is a string literal that can be used with SDL_SetHint to configure the behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_TOUCH_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_TOUCH_EVENTS \"SDL_MOUSE_TOUCH_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Mutex with SDL_CreateMutex in C\nDESCRIPTION: The SDL_CreateMutex function is used to create a new mutex object in SDL. The function takes no arguments and returns a pointer to the created SDL_mutex, which will be initialized to an unlocked state. If creation fails, it returns NULL; SDL_GetError() can provide more information about the failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_mutex* SDL_CreateMutex(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ACQUIRE Macro Definition in C\nDESCRIPTION: This macro defines SDL_ACQUIRE, which is a wrapper around Clang's thread safety analysis annotations. It uses SDL_THREAD_ANNOTATION_ATTRIBUTE__ to apply the acquire_capability attribute to the provided mutex (x). This allows Clang to perform static analysis and detect potential thread safety issues related to mutex locking. The macro is available since SDL 3.2.0 and is defined in SDL3/SDL_mutex.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ACQUIRE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_ACQUIRE(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquire_capability(x))\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_POLAR Macro in C\nDESCRIPTION: Defines the SDL_HAPTIC_POLAR macro to represent the use of polar coordinates for direction in haptic effects. This macro is used when creating haptic effects with directional components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_POLAR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_POLAR      0\n```\n\n----------------------------------------\n\nTITLE: Mix_SetPanning Syntax\nDESCRIPTION: This code snippet shows the syntax of the Mix_SetPanning function in C. It takes an integer channel, and two Uint8 values representing the left and right channel volumes.  The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetPanning.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_SetPanning(int channel, Uint8 left, Uint8 right);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_STORAGE_USER_DRIVER Macro in C\nDESCRIPTION: Defines the SDL_HINT_STORAGE_USER_DRIVER macro, which is used to specify the user storage driver backend in SDL. This allows developers to override the default storage backend selection. The hint should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_STORAGE_USER_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_STORAGE_USER_DRIVER \"SDL_STORAGE_USER_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowWindow Syntax in C\nDESCRIPTION: Shows the provided SDL window. It returns true on success and false on failure. Requires SDL3/SDL_video.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ShowWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_DISK_INPUT_FILE in C\nDESCRIPTION: Defines the SDL_HINT_AUDIO_DISK_INPUT_FILE hint as a string literal. This hint allows users to specify the input file for audio recording when using the disk audio driver. It defaults to \"sdlaudio-in.raw\" and should be set before opening an audio device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DISK_INPUT_FILE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DISK_INPUT_FILE \"SDL_AUDIO_DISK_INPUT_FILE\"\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Screensaver Environment Variable\nDESCRIPTION: This snippet shows how to set the environment variable `SDL_VIDEO_ALLOW_SCREENSAVER` to `1` to allow the screensaver to run, overriding SDL's default behavior of disabling it. This can be set globally or on a per-application basis.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/FAQUsingSDL.md#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nSDL_VIDEO_ALLOW_SCREENSAVER=1\n```\n\n----------------------------------------\n\nTITLE: Get Keycode from Scancode in SDL2 (C)\nDESCRIPTION: Retrieves the SDL_Keycode corresponding to a given SDL_Scancode. The function takes an SDL_Scancode as input and returns the corresponding SDL_Keycode based on the current keyboard layout. It relies on the SDL2 library and is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetKeyFromScancode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode);\n```\n\n----------------------------------------\n\nTITLE: SDL_VERSION Macro Definition in C\nDESCRIPTION: This code snippet defines the SDL_VERSION macro in C. It utilizes the SDL_VERSIONNUM macro along with SDL_MAJOR_VERSION, SDL_MINOR_VERSION, and SDL_MICRO_VERSION to represent the current SDL version. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VERSION \\\n    SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_MICRO_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Name by Index - SDL (C)\nDESCRIPTION: Retrieves the implementation dependent name of a joystick using its index.  The function takes an integer representing the joystick index as input and returns a const char* representing the joystick's name. If the name cannot be found, it returns NULL.  This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickNameForIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_JoystickNameForIndex(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Mix_SetMusicCMD Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_SetMusicCMD function in C, which takes a command string as input and returns an integer indicating success or failure. The command is executed to generate the music stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetMusicCMD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_SetMusicCMD(const char *command);\n```\n\n----------------------------------------\n\nTITLE: Creating a System Cursor in SDL2\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateSystemCursor function. It takes an SDL_SystemCursor enum value as input and returns an SDL_Cursor pointer.  The function creates a system cursor and returns a pointer to it, or NULL on failure.  Call SDL_GetError() for more information about the failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateSystemCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Directory in C with SDL3\nDESCRIPTION: This code snippet shows the syntax of the `SDL_CreateStorageDirectory` function in SDL3. It takes a storage container pointer and a path string as input and attempts to create the specified directory within the storage container. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateStorageDirectory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CreateStorageDirectory(SDL_Storage *storage, const char *path);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderLines Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderLines function in C. This function draws a series of connected lines on the current rendering target at subpixel precision. It takes a renderer, an array of SDL_FPoint structures representing the points along the lines, and the number of points as input. It returns true on success, false on failure, and SDL_GetError() can be used for error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderLines.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderLines(SDL_Renderer *renderer, const SDL_FPoint *points, int count);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Serial in SDL2 (C)\nDESCRIPTION: Retrieves the serial number of an opened joystick using SDL_JoystickGetSerial. This function requires a valid SDL_Joystick pointer obtained from SDL_JoystickOpen(). It returns a const char* representing the serial number or NULL if unavailable. Available since SDL 2.0.14.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetSerial.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_JoystickGetSerial(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_PauseAudioStreamDevice Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_PauseAudioStreamDevice function in C. This function pauses the audio playback on the device associated with the provided SDL_AudioStream. It requires an SDL_AudioStream pointer as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PauseAudioStreamDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PauseAudioStreamDevice(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: SDL 2.0 Window and Renderer Creation Combined\nDESCRIPTION: This code snippet demonstrates creating both a window and a renderer in a single step using `SDL_CreateWindowAndRenderer`. It simplifies the setup process for basic rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nSDL_Window *sdlWindow;\nSDL_Renderer *sdlRenderer;\nSDL_CreateWindowAndRenderer(0, 0, SDL_WINDOW_FULLSCREEN_DESKTOP, &sdlWindow, &sdlRenderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateGPUShader Syntax - C\nDESCRIPTION: Defines the syntax for the SDL_CreateGPUShader function in C. It takes a SDL_GPUDevice pointer and a SDL_GPUShaderCreateInfo pointer as input, and returns a pointer to an SDL_GPUShader object or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPUShader.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUShader * SDL_CreateGPUShader(\n    SDL_GPUDevice *device,\n    const SDL_GPUShaderCreateInfo *createinfo);\n```\n\n----------------------------------------\n\nTITLE: SDL_setenv_unsafe Function Signature in C\nDESCRIPTION: This code snippet shows the function signature of `SDL_setenv_unsafe` in C.  It takes the variable name, value, and an overwrite flag as input, and returns an integer indicating success or failure. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_setenv_unsafe.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_setenv_unsafe(const char *name, const char *value, int overwrite);\n```\n\n----------------------------------------\n\nTITLE: SDL_calloc_func Callback Definition in C\nDESCRIPTION: Defines the SDL_calloc_func callback used to implement SDL_calloc(). It takes the number of elements and the size of each element as input and returns a pointer to the allocated array or NULL if allocation fails. SDL ensures that both `nmemb` and `size` are greater than 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_calloc_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *(SDLCALL *SDL_calloc_func)(size_t nmemb, size_t size);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Stream Output Channel Map in SDL3\nDESCRIPTION: This code retrieves the output channel map of an audio stream using SDL_GetAudioStreamOutputChannelMap. It takes an SDL_AudioStream pointer as input and populates the count parameter with the number of channels in the map. The function returns a dynamically allocated array representing the channel map, which should be freed with SDL_free after use. If the audio stream has no remapping applied, the function returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamOutputChannelMap.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint * SDL_GetAudioStreamOutputChannelMap(SDL_AudioStream *stream, int *count);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph_LCD Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderGlyph_LCD function, which renders a single UNICODE codepoint at LCD subpixel quality to a new ARGB surface. It takes a font, a codepoint, a foreground color, and a background color as input and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderGlyph_LCD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_LCD(TTF_Font *font, Uint32 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Close the Audio Mixer in SDL_mixer (C)\nDESCRIPTION: Closes the SDL_mixer audio device, halting all audio playback and deregistering effects. Any channel finish or music finish callbacks will be executed before the function returns.  It is the counterpart to Mix_OpenAudio and should be called before Mix_Quit. Does not deinitialize the SDL audio subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_CloseAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_CloseAudio(void);\n```\n\n----------------------------------------\n\nTITLE: Opening a HID Device with SDL_hid_open in C\nDESCRIPTION: This code snippet demonstrates how to open a HID device using the SDL_hid_open function in C. It takes the vendor ID, product ID, and serial number as input and returns a pointer to the SDL_hid_device object on success or NULL on failure. The serial_number can be NULL to open the first device with the given VID and PID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_open.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_hid_device * SDL_hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number);\n```\n\n----------------------------------------\n\nTITLE: SDL_AsyncIOQueue Structure Definition in C\nDESCRIPTION: Defines the SDL_AsyncIOQueue structure, a core component for managing asynchronous I/O operations within the SDL3 library. This structure is used to track completed asynchronous I/O tasks. It is an opaque structure, meaning its internal members are not directly accessible, and is manipulated through SDL's asynchronous I/O functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AsyncIOQueue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AsyncIOQueue SDL_AsyncIOQueue;\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetAxis Function Declaration (C)\nDESCRIPTION: This code snippet shows the function declaration of SDL_GameControllerGetAxis in C. It takes a pointer to an SDL_GameController and an SDL_GameControllerAxis enum value as input, returning a Sint16 representing the axis state. Requires SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nextern DECLSPEC Sint16 SDLCALL\nSDL_GameControllerGetAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis);\n```\n\n----------------------------------------\n\nTITLE: Find Most Recent Sample in Group - C\nDESCRIPTION: This snippet demonstrates the syntax of the Mix_GroupNewer function from the SDL_mixer library. It takes an integer tag as input, which is used to identify a group of channels. The function returns the channel number of the most recently started sample playing within that group, or -1 if no channel with the specified tag is currently playing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GroupNewer.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_GroupNewer(int tag);\n```\n\n----------------------------------------\n\nTITLE: SDL_ClearAudioStream Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ClearAudioStream function.  It takes a pointer to an SDL_AudioStream as input and returns a boolean value indicating success or failure. It is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClearAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ClearAudioStream(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AsyncIO Structure in C\nDESCRIPTION: This code snippet shows the type definition for SDL_AsyncIO, which is an opaque structure pointer used for asynchronous I/O operations. The actual structure details are hidden, and it is treated as a handle. It requires the SDL3/SDL_asyncio.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AsyncIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AsyncIO SDL_AsyncIO;\n```\n\n----------------------------------------\n\nTITLE: Opening Audio Device in SDL_mixer (C)\nDESCRIPTION: This code snippet demonstrates how to use Mix_OpenAudio to open an audio device for playback with SDL_mixer. It takes an audio device ID and a pointer to an SDL_AudioSpec structure as input.  If spec is NULL, a reasonable default is used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_OpenAudio.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_OpenAudio(SDL_AudioDeviceID devid, const SDL_AudioSpec *spec);\n```\n\n----------------------------------------\n\nTITLE: Get Current Log Output Function in C\nDESCRIPTION: Retrieves the current SDL logging output function and its associated user data. The `callback` parameter will be populated with the address of the current logging function, and `userdata` will receive the pointer that's passed to the logging function. This function is part of the SDL2 library and requires including SDL_log.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogGetOutputFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback, void **userdata);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MOUSE_TOUCHID in C\nDESCRIPTION: This macro defines SDL_MOUSE_TOUCHID as an SDL_TouchID with a value of -1. It's used to distinguish mouse-generated touch events from actual touch events. This macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MOUSE_TOUCHID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MOUSE_TOUCHID ((SDL_TouchID)-1)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GamepadAxisEvent Structure in C\nDESCRIPTION: This code defines the SDL_GamepadAxisEvent structure, which is used to represent gamepad axis motion events in SDL3. It includes fields for event type, timestamp, joystick ID, axis, and the axis value. The axis value ranges from -32768 to 32767.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadAxisEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GamepadAxisEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_GAMEPAD_AXIS_MOTION */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 axis;         /**< The gamepad axis (SDL_GamepadAxis) */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n    Sint16 value;       /**< The axis value (range: -32768 to 32767) */\n    Uint16 padding4;\n} SDL_GamepadAxisEvent;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR macro as a string literal. This macro is used as a hint to control which system cursor to use as the default.  The hint value should be an integer corresponding to an SDL_SystemCursor enum value. This must be set before calling SDL_Init().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_DEFAULT_SYSTEM_CURSOR \"SDL_MOUSE_DEFAULT_SYSTEM_CURSOR\"\n```\n\n----------------------------------------\n\nTITLE: Extracting Micro Version from SDL Version Number (C)\nDESCRIPTION: This macro extracts the micro version component from a provided SDL version number. It uses the modulo operator (%) to calculate the remainder when the version is divided by 1000, effectively isolating the micro version digits. The macro is defined in SDL3/SDL_version.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VERSIONNUM_MICRO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VERSIONNUM_MICRO(version) ((version) % 1000)\n```\n\n----------------------------------------\n\nTITLE: Update Joysticks State - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_UpdateJoysticks function. It updates the current state of the open joysticks. It is called automatically by the event loop if joystick events are enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateJoysticks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UpdateJoysticks(void);\n```\n\n----------------------------------------\n\nTITLE: Setting RLE acceleration for a SDL_Surface in C\nDESCRIPTION: This code snippet demonstrates the syntax for using SDL_SetSurfaceRLE to enable or disable RLE acceleration for a specific SDL_Surface. The function takes a pointer to the SDL_Surface and an integer flag (0 to disable, non-zero to enable) as input. It returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetSurfaceRLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetSurfaceRLE(SDL_Surface * surface,\n                      int flag);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT macro, which is used as a key when setting the video window share pixel format hint using SDL_SetHint. This hint allows sharing pixel formats between windows, particularly for OpenGL contexts.  The value of the hint should be the address (as a string formatted with \"%p\") of the SDL_Window to share the pixel format with.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WINDOW_SHARE_PIXEL_FORMAT    \"SDL_VIDEO_WINDOW_SHARE_PIXEL_FORMAT\"\n```\n\n----------------------------------------\n\nTITLE: Binding GPU Compute Storage Buffers in C\nDESCRIPTION: Binds storage buffers as readonly for use on the compute pipeline. Requires a compute pass, starting slot, array of storage buffers, and the number of bindings. The buffers must be created with SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ and the shader must be set up according to SDL_CreateGPUShader requirements.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUComputeStorageBuffers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUComputeStorageBuffers(\n    SDL_GPUComputePass *compute_pass,\n    Uint32 first_slot,\n    SDL_GPUBuffer *const *storage_buffers,\n    Uint32 num_bindings);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_device_info Structure Definition in C\nDESCRIPTION: Defines the structure SDL_hid_device_info, which contains information about a connected HID device. The structure includes members for the device path, vendor ID, product ID, serial number, release number, manufacturer string, product string, usage page, usage, interface number, interface class, interface subclass, interface protocol, bus type, and a pointer to the next device in a linked list. It is used to retrieve detailed information about connected HID devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_device_info.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_hid_device_info\n{\n    /** Platform-specific device path */\n    char *path;\n    /** Device Vendor ID */\n    unsigned short vendor_id;\n    /** Device Product ID */\n    unsigned short product_id;\n    /** Serial Number */\n    wchar_t *serial_number;\n    /** Device Release Number in binary-coded decimal,\n        also known as Device Version Number */\n    unsigned short release_number;\n    /** Manufacturer String */\n    wchar_t *manufacturer_string;\n    /** Product string */\n    wchar_t *product_string;\n    /** Usage Page for this Device/Interface\n        (Windows/Mac/hidraw only) */\n    unsigned short usage_page;\n    /** Usage for this Device/Interface\n        (Windows/Mac/hidraw only) */\n    unsigned short usage;\n    /** The USB interface which this logical device\n        represents.\n\n        Valid only if the device is a USB HID device.\n        Set to -1 in all other cases.\n    */\n    int interface_number;\n\n    /** Additional information about the USB interface.\n        Valid on libusb and Android implementations. */\n    int interface_class;\n    int interface_subclass;\n    int interface_protocol;\n\n    /** Underlying bus type */\n    SDL_hid_bus_type bus_type;\n\n    /** Pointer to the next device */\n    struct SDL_hid_device_info *next;\n\n} SDL_hid_device_info;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDisplayDPI Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetDisplayDPI function in C. This function retrieves the DPI (dots per inch) for a specific display. It populates the provided float pointers with the diagonal, horizontal, and vertical DPI values, if the pointers are not NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDisplayDPI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDisplayDPI(int displayIndex, float * ddpi, float * hdpi, float * vdpi);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TLSDestructorCallback in C\nDESCRIPTION: Defines the SDL_TLSDestructorCallback function pointer type. This callback is used to free resources associated with thread-local storage when a thread exits. The callback receives a pointer to the thread-local data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TLSDestructorCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_TLSDestructorCallback)(void *value);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasPrimarySelectionText declaration in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_HasPrimarySelectionText function in C. It takes no arguments and returns a boolean value indicating whether the primary selection contains text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasPrimarySelectionText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasPrimarySelectionText(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HintPriority Enum in C\nDESCRIPTION: This code snippet defines the SDL_HintPriority enumeration in C. It consists of three possible values: SDL_HINT_DEFAULT, SDL_HINT_NORMAL, and SDL_HINT_OVERRIDE, representing the priority levels for SDL hints. The enum is defined in the SDL3/SDL_hints.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HintPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_HintPriority\n{\n    SDL_HINT_DEFAULT,\n    SDL_HINT_NORMAL,\n    SDL_HINT_OVERRIDE\n} SDL_HintPriority;\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticClose Syntax in C\nDESCRIPTION: Closes a haptic device that was previously opened using SDL_HapticOpen(). The function takes a pointer to the SDL_Haptic device as input and releases the associated resources. This function is part of the SDL2 library and requires the SDL_haptic.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticClose.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_HapticClose(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Get Thread State using SDL_GetThreadState in C\nDESCRIPTION: Retrieves the current state of a specified SDL thread. Requires an SDL_Thread pointer as input and returns an SDL_ThreadState enumeration representing the thread's current state. Returns SDL_THREAD_UNKNOWN if the thread pointer is invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetThreadState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_ThreadState SDL_GetThreadState(SDL_Thread *thread);\n```\n\n----------------------------------------\n\nTITLE: Get Render Logical Presentation Rect - C\nDESCRIPTION: Retrieves the final presentation rectangle used for rendering, based on the presentation mode and output size. If logical presentation is disabled, it will fill the rectangle with the output size, in pixels.  This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderLogicalPresentationRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderLogicalPresentationRect(SDL_Renderer *renderer, SDL_FRect *rect);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_STADIA in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_STADIA macro, which is used to control whether the HIDAPI driver is used for Google Stadia controllers. Setting the hint to \"0\" disables the driver, while setting it to \"1\" enables it. The default value is inherited from SDL_HINT_JOYSTICK_HIDAPI.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_STADIA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_STADIA \"SDL_JOYSTICK_HIDAPI_STADIA\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Text Engine with SDL GPU API in C\nDESCRIPTION: This code snippet shows how to create a text engine using the TTF_CreateGPUTextEngine function from the SDL_ttf library. It takes an SDL_GPUDevice as input and returns a pointer to a TTF_TextEngine object. This engine is used for rendering text with the SDL GPU API. Error handling is necessary to check for NULL returns.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateGPUTextEngine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateGPUTextEngine(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeOutGroup Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_FadeOutGroup function in C. It takes an integer tag and an integer representing the fade-out duration in milliseconds as input. It returns the number of channels scheduled for fading.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadeOutGroup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeOutGroup(int tag, int ms);\n```\n\n----------------------------------------\n\nTITLE: Get Window Mouse Rectangle in SDL3 (C)\nDESCRIPTION: Retrieves the mouse confinement rectangle of a specified SDL_Window. The function takes a pointer to an SDL_Window as input and returns a pointer to an SDL_Rect representing the confinement area. Returns NULL if there is no confinement rectangle set. Should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowMouseRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_Rect * SDL_GetWindowMouseRect(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Defining main() for iOS with SDL_UIKitRunApp in C\nDESCRIPTION: This code snippet shows how to define a custom `main()` function for iOS applications when linking with the SDL2 XCFramework. It calls `SDL_UIKitRunApp()` to initialize the SDL application, which is necessary because `main()` cannot be in a dynamically loaded library on Apple platforms. This snippet addresses the shift from statically linked `libSDL2.lib` to using the XCFramework.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/ios.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#ifndef SDL_MAIN_HANDLED\n#ifdef main\n#undef main\n#endif\n\nint\nmain(int argc, char *argv[])\n{\n\treturn SDL_UIKitRunApp(argc, argv, SDL_main);\n}\n#endif /* !SDL_MAIN_HANDLED */\n```\n\n----------------------------------------\n\nTITLE: Setting Post-Mixing Callback Functions\nDESCRIPTION: These functions allow you to set callback functions that are called after all mixing is performed (post-mix) or when a music object has finished playing. They enable custom audio processing and event handling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_SetPostMix(Mix_MixCallback mix_func, void *arg);                                 // Set a function that is called after all mixing is performed.\nvoid Mix_HookMusic(Mix_MixCallback mix_func, void *arg);                                  // Add your own music player or additional mixer function.\nvoid Mix_HookMusicFinished(Mix_MusicFinishedCallback music_finished);                     // Set a callback that runs when a music object has stopped playing.\nvoid * Mix_GetMusicHookData(void);                                                        // Get a pointer to the user data for the current music hook.\nvoid Mix_ChannelFinished(Mix_ChannelFinishedCallback channel_finished);                   // Set a callback that runs when a channel has finished playing.\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Bindings using SDL_GetGamepadBindings in C\nDESCRIPTION: Retrieves the SDL joystick layer bindings for a gamepad. The function takes a gamepad and a pointer to an integer as input. The integer will be populated with the count of returned bindings. The returned array must be freed with SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadBindings.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadBinding ** SDL_GetGamepadBindings(SDL_Gamepad *gamepad, int *count);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadGIF_IO Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadGIF_IO function in the C programming language. This function loads a GIF image directly from an SDL_IOStream. It takes an SDL_IOStream pointer as input and returns an SDL_Surface pointer, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadGIF_IO.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * IMG_LoadGIF_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: TTF_FontStyleFlags Definition\nDESCRIPTION: Defines the TTF_FontStyleFlags type as a Uint32 and provides macros for different font styles (normal, bold, italic, underline, and strikethrough). These flags can be combined using bitwise OR to set multiple styles simultaneously using functions like TTF_SetFontStyle. Available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_FontStyleFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 TTF_FontStyleFlags;\n\n#define TTF_STYLE_NORMAL        0x00 /**< No special style */\n#define TTF_STYLE_BOLD          0x01 /**< Bold style */\n#define TTF_STYLE_ITALIC        0x02 /**< Italic style */\n#define TTF_STYLE_UNDERLINE     0x04 /**< Underlined text */\n#define TTF_STYLE_STRIKETHROUGH 0x08 /**< Strikethrough text */\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteS16BE Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WriteS16BE function in C. It takes an SDL_IOStream pointer and a Sint16 value as input and returns a boolean indicating success or failure. The function writes the 16-bit integer to the provided stream in big-endian format, performing byteswapping if needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteS16BE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_WriteS16BE(SDL_IOStream *dst, Sint16 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_WarpMouseGlobal Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WarpMouseGlobal function in C. This function moves the mouse cursor to a specific (x, y) coordinate within the global screen space. The function returns an integer value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WarpMouseGlobal.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_WarpMouseGlobal(int x, int y);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HAPTIC_AXES Macro in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HAPTIC_AXES macro, which is a string constant used as the key for setting the joystick haptic axes hint in SDL. This hint allows configuring the number of haptic axes for joysticks based on their VID/PID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HAPTIC_AXES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HAPTIC_AXES \"SDL_JOYSTICK_HAPTIC_AXES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticEffectID Type Definition in C\nDESCRIPTION: Defines SDL_HapticEffectID as an integer type. This type is used as an identifier for haptic effects created in SDL. It's important to note that a value of -1 signifies an invalid effect ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticEffectID.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef int SDL_HapticEffectID;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLERCONFIG in C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLERCONFIG macro to represent the hint string \"SDL_GAMECONTROLLERCONFIG\". This hint is used to provide additional gamepad configurations to SDL before initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GAMECONTROLLERCONFIG.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLERCONFIG \"SDL_GAMECONTROLLERCONFIG\"\n```\n\n----------------------------------------\n\nTITLE: SDL_LogInfo Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_LogInfo function in C. It takes an integer category, a format string, and variable arguments as input to log a message with SDL_LOG_PRIORITY_INFO. The function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogInfo(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Hiding an SDL Window in C\nDESCRIPTION: This code snippet demonstrates how to hide an SDL window using the SDL_HideWindow function. It takes a pointer to the window you want to hide as a parameter.  It returns true if the window was hidden successfully, or false if there was an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HideWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HideWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Setting OpenGL Attribute using SDL_GL_SetAttribute in C\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_GL_SetAttribute function. The function takes an SDL_GLattr enum value specifying the OpenGL attribute to set and an integer value representing the desired value for the attribute. It returns 0 on success or a negative error code on failure. Requires SDL2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_SetAttribute.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GL_SetAttribute(SDL_GLattr attr, int value);\n```\n\n----------------------------------------\n\nTITLE: Defining Audio Device Stream Role Hint in SDL\nDESCRIPTION: Defines the SDL_HINT_AUDIO_DEVICE_STREAM_ROLE macro, a string constant used as a hint to specify the application's role for an audio device stream. This helps audio backends like Pipewire categorize and manage audio streams based on their purpose (e.g., Game, Music, Movie). Setting it to an empty string or leaving it unset results in SDL using a default role.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUDIO_DEVICE_STREAM_ROLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DEVICE_STREAM_ROLE \"SDL_AUDIO_DEVICE_STREAM_ROLE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTextureColorMod Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_GetTextureColorMod function. It takes a texture pointer and three Uint8 pointers (r, g, b) as input. On success, the r, g, and b pointers will be filled with the current red, green, and blue color values of the texture's color modulation. Returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTextureColorMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetTextureColorMod(SDL_Texture * texture,\n                           Uint8 * r, Uint8 * g,\n                           Uint8 * b);\n```\n\n----------------------------------------\n\nTITLE: Get Parent of a Window in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetWindowParent function, which retrieves the parent window of a specified SDL_Window. The function takes a pointer to an SDL_Window as input and returns a pointer to its parent SDL_Window or NULL if it has no parent. This function is available since SDL 3.2.0 and should be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowParent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetWindowParent(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Get Touch Devices in SDL3 (C)\nDESCRIPTION: This function retrieves a list of registered touch devices in SDL3. It takes a pointer to an integer, which will be populated with the number of touch devices found. The function returns a null-terminated array of SDL_TouchID, which should be freed using SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTouchDevices.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TouchID * SDL_GetTouchDevices(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_SurfaceFlags Type Definition C\nDESCRIPTION: Defines the SDL_SurfaceFlags type as an unsigned 32-bit integer. This type is used to store the flags associated with an SDL_Surface, representing its state and memory allocation properties. It's a crucial datatype used within the SDL library for managing surfaces.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SurfaceFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_SurfaceFlags;\n```\n\n----------------------------------------\n\nTITLE: Get Text Substring - SDL_ttf\nDESCRIPTION: Retrieves the substring of a text object that surrounds a text offset.  The substring is returned in the `substring` parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_107\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSubString(TTF_Text *text, int offset, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: Setting Tray Entry Callback in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for SDL_SetTrayEntryCallback.  It sets a callback function to be invoked when the specified tray entry is selected. The callback can receive user-defined data through the userdata parameter. The function must be called on the thread that created the tray.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTrayEntryCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetTrayEntryCallback(SDL_TrayEntry *entry, SDL_TrayCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadS32LE Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ReadS32LE function. It takes an SDL_IOStream pointer and a Sint32 pointer as input.  The function reads 32 bits of little-endian data from the provided stream and stores the converted native format into the Sint32 pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadS32LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadS32LE(SDL_IOStream *src, Sint32 *value);\n```\n\n----------------------------------------\n\nTITLE: Get Surface Clip Rectangle in C\nDESCRIPTION: Retrieves the clipping rectangle for a given SDL_Surface. The clipping rectangle defines the area of the surface that will be drawn into during blitting operations. It takes a pointer to an SDL_Surface and a pointer to an SDL_Rect, which will be populated with the clipping rectangle's coordinates and dimensions. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfaceClipRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetSurfaceClipRect(SDL_Surface *surface, SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitForGPUFences Syntax in C\nDESCRIPTION: Defines the syntax for SDL_WaitForGPUFences function in C. This function blocks the thread until the given fences are signaled. It takes a GPU device, a boolean to specify whether to wait for all or any fence, an array of fences, and the number of fences as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitForGPUFences.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitForGPUFences(\n    SDL_GPUDevice *device,\n    bool wait_all,\n    SDL_GPUFence *const *fences,\n    Uint32 num_fences);\n```\n\n----------------------------------------\n\nTITLE: SDL_KeyboardEvent Structure Definition in C\nDESCRIPTION: Defines the structure of SDL_KeyboardEvent, which contains information about keyboard events such as key presses and releases. The structure includes fields for event type, timestamp, window ID, keyboard ID, scancode, keycode, modifiers, raw scancode, down state, and repeat state. This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_KeyboardEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_KeyboardEvent\n{\n    SDL_EventType type;     /**< SDL_EVENT_KEY_DOWN or SDL_EVENT_KEY_UP */\n    Uint32 reserved;\n    Uint64 timestamp;       /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID;  /**< The window with keyboard focus, if any */\n    SDL_KeyboardID which;   /**< The keyboard instance id, or 0 if unknown or virtual */\n    SDL_Scancode scancode;  /**< SDL physical key code */\n    SDL_Keycode key;        /**< SDL virtual key code */\n    SDL_Keymod mod;         /**< current key modifiers */\n    Uint16 raw;             /**< The platform dependent scancode for this event */\n    bool down;              /**< true if the key is pressed */\n    bool repeat;            /**< true if this is a key repeat */\n} SDL_KeyboardEvent;\n```\n\n----------------------------------------\n\nTITLE: IMG_isICO Syntax in C\nDESCRIPTION: This snippet shows the syntax for using the IMG_isICO function in C to detect ICO image data within a readable/seekable SDL_IOStream. It returns a boolean value indicating whether the provided stream contains ICO image data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isICO.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool IMG_isICO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Get Window Size in Pixels (C)\nDESCRIPTION: Retrieves the size of a window in pixels using the SDL_GetWindowSizeInPixels function. This function accounts for high-DPI settings. It takes an SDL_Window pointer and two integer pointers to store the width and height, respectively.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowSizeInPixels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetWindowSizeInPixels(SDL_Window * window,\n                               int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv_close Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_iconv_close function in C. It takes an SDL_iconv_t as input (the character set conversion handle) and returns an integer indicating success or failure. It requires the SDL3/SDL_stdinc.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv_close.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_iconv_close(SDL_iconv_t cd);\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Mouse Mode in SDL (C)\nDESCRIPTION: This code snippet demonstrates the syntax for using the SDL_SetRelativeMouseMode function to enable or disable relative mouse mode. When enabled, the mouse cursor is hidden and mouse motion is reported relative to the window center, even at the edges.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetRelativeMouseMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetRelativeMouseMode(SDL_bool enabled);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_UnbindTexture Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GL_UnbindTexture function. This function unbinds a specified SDL_Texture from the current OpenGL context. It requires a pointer to an SDL_Texture as input and returns an integer indicating success (0) or failure (-1).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_UnbindTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GL_UnbindTexture(SDL_Texture *texture);\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenTitleStorage Syntax - C\nDESCRIPTION: Defines the syntax for the SDL_OpenTitleStorage function in C. This function opens a read-only container for the application's filesystem. It takes an optional override path and a properties list as input, and returns a pointer to the storage container, or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenTitleStorage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Storage * SDL_OpenTitleStorage(const char *override, SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRectEnclosingPointsFloat Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetRectEnclosingPointsFloat function in C. It takes an array of SDL_FPoint structures, the number of points, a clipping rectangle, and a pointer to an SDL_FRect structure where the result will be stored.  The function returns a boolean indicating success or failure based on whether any points were enclosed within the clip rectangle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRectEnclosingPointsFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRectEnclosingPointsFloat(const SDL_FPoint *points, int count, const SDL_FRect *clip, SDL_FRect *result);\n```\n\n----------------------------------------\n\nTITLE: Using SDL_DialogFileFilter in an array\nDESCRIPTION: This code demonstrates how to use the SDL_DialogFileFilter structure in an array to define multiple file filters for a file dialog. It shows examples for PNG images, JPEG images, all images, and all files.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DialogFileFilter.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nconst SDL_DialogFileFilter filters[] = {\n    { \"PNG images\",  \"png\" },\n    { \"JPEG images\", \"jpg;jpeg\" },\n    { \"All images\",  \"png;jpg;jpeg\" },\n    { \"All files\",   \"*\" }\n};\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderTexture Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RenderTexture function. It requires an SDL_Renderer, SDL_Texture, source rectangle (SDL_FRect), and destination rectangle (SDL_FRect) as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderTexture(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, const SDL_FRect *dstrect);\n```\n\n----------------------------------------\n\nTITLE: Destroying an SDL Window in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_DestroyWindow function, which destroys an SDL window. The function takes a pointer to an SDL_Window as input. If the window pointer is NULL, the function sets an error message.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DestroyWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyWindow(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Get Surface Alpha Mod in SDL2 (C)\nDESCRIPTION: Retrieves the additional alpha value used in blit operations for a given SDL_Surface. The `surface` parameter specifies the SDL_Surface structure to query. The `alpha` parameter is a pointer that will be filled in with the current alpha value. Returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetSurfaceAlphaMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetSurfaceAlphaMod(SDL_Surface * surface,\n                           Uint8 * alpha);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadLE32 Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_ReadLE32 function. The function reads 32 bits of little-endian data from an SDL_RWops stream. It takes a pointer to an SDL_RWops structure as input and returns a Uint32 value containing the data in the native byte order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ReadLE32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_ReadLE32(SDL_RWops * src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS in C\nDESCRIPTION: This code defines the SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS macro.  It's a string literal used as the key when setting the hint with SDL_SetHint.  The hint controls whether controller input on Apple TV generates UI events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS \"SDL_APPLE_TV_CONTROLLER_UI_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyAxisEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the structure `SDL_JoyAxisEvent`, which is used to represent joystick axis motion events in SDL. It contains fields for the event type (`type`), timestamp (`timestamp`), joystick instance ID (`which`), axis index (`axis`), padding, and the axis value (`value`). The axis value ranges from -32768 to 32767.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoyAxisEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyAxisEvent\n{\n    Uint32 type;        /**< SDL_JOYAXISMOTION */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 axis;         /**< The joystick axis index */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n    Sint16 value;       /**< The axis value (range: -32768 to 32767) */\n    Uint16 padding4;\n} SDL_JoyAxisEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockAudio Equivalent in C\nDESCRIPTION: This code snippet shows the equivalent SDL_UnlockAudioDevice call for the SDL_UnlockAudio function. It is only useful if you used SDL_OpenAudio. It uses device ID 1 as an implicit default.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnlockAudio.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_UnlockAudioDevice(1);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MouseWheelDirection Enum in C\nDESCRIPTION: This C code snippet defines the SDL_MouseWheelDirection enumeration.  It specifies two possible values: SDL_MOUSEWHEEL_NORMAL for standard scrolling and SDL_MOUSEWHEEL_FLIPPED for flipped or natural scrolling behavior. This enum is part of the SDL library for handling mouse wheel input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MouseWheelDirection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_MouseWheelDirection\n{\n    SDL_MOUSEWHEEL_NORMAL,    /**< The scroll direction is normal */\n    SDL_MOUSEWHEEL_FLIPPED    /**< The scroll direction is flipped / natural */\n} SDL_MouseWheelDirection;\n```\n\n----------------------------------------\n\nTITLE: SDL_GLContext Flags Definitions\nDESCRIPTION: Defines the individual flags that can be used with SDL_GLContextFlag. These flags configure various aspects of the OpenGL context, such as enabling debugging, forward compatibility, robust access, and reset isolation. These are used when creating an OpenGL context with SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLContextFlag.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GL_CONTEXT_DEBUG_FLAG              0x0001\n#define SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG 0x0002\n#define SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG      0x0004\n#define SDL_GL_CONTEXT_RESET_ISOLATION_FLAG    0x0008\n```\n\n----------------------------------------\n\nTITLE: Defining Joystick Connection States in C\nDESCRIPTION: This code snippet defines the `SDL_JoystickConnectionState` enum, which represents the possible connection states for a joystick device. It includes values for invalid, unknown, wired, and wireless connections. The enum is used by the `SDL_GetJoystickConnectionState` function to report the connection type of a joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoystickConnectionState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_JoystickConnectionState\n{\n    SDL_JOYSTICK_CONNECTION_INVALID = -1,\n    SDL_JOYSTICK_CONNECTION_UNKNOWN,\n    SDL_JOYSTICK_CONNECTION_WIRED,\n    SDL_JOYSTICK_CONNECTION_WIRELESS\n} SDL_JoystickConnectionState;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_XBOXONE Macro (C)\nDESCRIPTION: Defines the SDL_PLATFORM_XBOXONE preprocessor macro as 1. This macro is used to identify if the code is being compiled for the Xbox One platform. It is available since SDL 3.2.0 and can be found in the SDL_platform_defines.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_XBOXONE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_XBOXONE 1\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitConditionTimeout Example in C\nDESCRIPTION: Illustrates the use of SDL_WaitConditionTimeout in a multi-threaded scenario, where one thread waits for a condition to become true or a timeout to occur, while another thread signals the condition.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitConditionTimeout.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbool condition = false;\nSDL_Mutex *lock;\nSDL_Condition *cond;\nlock = SDL_CreateMutex();\ncond = SDL_CreateCondition();\n\nThread_A:\n    const Uint32 timeout = 1000; /* wake up every second */\n    bool done = false;\n    while (!done) {\n        SDL_LockMutex(lock);\n        while (!condition && SDL_WaitConditionTimeout(cond, lock, timeout) == 0) {\n            continue;\n        }\n        SDL_UnlockMutex(lock);\n        if (condition) {\n            /* ... */\n        }\n        /* ... do some periodic work */\n    }\nThread_B:\n    SDL_LockMutex(lock);\n    /* ... */\n    condition = true;\n    /* ... */\n    SDL_SignalCondition(cond);\n    SDL_UnlockMutex(lock);\n\nSDL_DestroyCondition(cond);\nSDL_DestroyMutex(lock);\n```\n\n----------------------------------------\n\nTITLE: Adding Alternate Surface Image in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the SDL_AddSurfaceAlternateImage function, which adds an alternate version of a surface, useful for high DPI representations.  It takes two SDL_Surface pointers: the surface to update and the alternate image to associate. It returns true on success or false on failure.  Ensure SDL_DestroySurface is called on the image after this call to release the reference.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddSurfaceAlternateImage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_AddSurfaceAlternateImage(SDL_Surface *surface, SDL_Surface *image);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUTF8_Shaded Function Signature in C\nDESCRIPTION: This code snippet shows the function signature for TTF_RenderUTF8_Shaded. It defines the function's parameters, which include a TTF_Font pointer, a const char pointer for the UTF-8 text, and SDL_Color structures for the foreground and background colors. The function returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUTF8_Shaded.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderUTF8_Shaded(TTF_Font *font,\n                const char *text, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Query Async I/O Task Queue SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax for the SDL_GetAsyncIOResult function. It takes an SDL_AsyncIOQueue pointer and an SDL_AsyncIOOutcome pointer as parameters. It returns a boolean value indicating whether a task has completed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAsyncIOResult.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetAsyncIOResult(SDL_AsyncIOQueue *queue, SDL_AsyncIOOutcome *outcome);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogWarn Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_LogWarn function in C. It takes an integer category, a format string, and a variable number of arguments as input. It logs a warning message to the SDL logging system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogWarn.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogWarn(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Set Surface Color Mod SDL3 (C)\nDESCRIPTION: Sets the color modulation for a given SDL_Surface. The color modulation affects how the surface's colors are modified during blit operations. The function takes a surface pointer and the red, green, and blue color components as input, each represented as an 8-bit unsigned integer. It returns a boolean indicating success or failure, with SDL_GetError() providing more details on failures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetSurfaceColorMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetSurfaceColorMod(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);\n```\n\n----------------------------------------\n\nTITLE: SDL_ceilf Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ceilf function in C, which takes a float as input and returns a float representing the ceiling of the input value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ceilf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_ceilf(float x);\n```\n\n----------------------------------------\n\nTITLE: Get Window Flags - SDL2 - C\nDESCRIPTION: Retrieves the window flags associated with a given SDL_Window. The function takes a pointer to an SDL_Window as input and returns a Uint32 representing a mask of SDL_WindowFlags. This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetWindowFlags(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Remove Tray Entry in SDL3 (C)\nDESCRIPTION: Removes a specified tray entry from the system tray. The entry to be removed is passed as an SDL_TrayEntry pointer. This function must be called on the same thread that created the tray to ensure thread safety.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RemoveTrayEntry.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RemoveTrayEntry(SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: SDL_HitTest Callback Definition in C\nDESCRIPTION: Defines the SDL_HitTest callback function type. This function is responsible for determining if a given point within a window is considered a 'hit' for purposes such as window dragging or resizing.\n\nDependencies: SDL3/SDL_video.h, SDL_Window, SDL_Point, SDL_HitTestResult. The user-provided 'data' pointer from SDL_SetWindowHitTest is also available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HitTest.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_HitTestResult (SDLCALL *SDL_HitTest)(SDL_Window *win, const SDL_Point *area, void *data);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetGlobalMouseState Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetGlobalMouseState function in C. It takes two integer pointers, x and y, as input to store the mouse coordinates relative to the desktop. It returns a Uint32 representing the current button state as a bitmask.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetGlobalMouseState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetGlobalMouseState(int *x, int *y);\n```\n\n----------------------------------------\n\nTITLE: Get Surface Color Mod - SDL2 - C\nDESCRIPTION: Retrieves the color modulation values (red, green, and blue) currently applied to a given SDL_Surface. It takes a pointer to the surface and pointers to unsigned 8-bit integers to store the red, green, and blue color components. Returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetSurfaceColorMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetSurfaceColorMod(SDL_Surface * surface,\n                           Uint8 * r, Uint8 * g,\n                           Uint8 * b);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRGBSurface Syntax (C)\nDESCRIPTION: Defines the function signature for SDL_CreateRGBSurface in C. It takes flags, width, height, depth, and RGBA masks as input and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateRGBSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface* SDL_CreateRGBSurface\n    (Uint32 flags, int width, int height, int depth,\n     Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);\n```\n\n----------------------------------------\n\nTITLE: Creating an SDL Texture in C\nDESCRIPTION: This code snippet demonstrates how to create an SDL texture using SDL_CreateTexture within an SDL application. It initializes SDL, creates a window and renderer, and then creates a texture with specified pixel format, access type, width, and height.  The texture is then used within a rendering loop to draw a moving rectangle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\n/* Moving Rectangle */\nint main(int argc, char *argv[])\n{\n        SDL_Window *window;\n        SDL_Renderer *renderer;\n        SDL_Texture *texture;\n        SDL_Event event;\n        SDL_FRect r;\n\n        if (!SDL_Init(SDL_INIT_VIDEO)) {\n                SDL_LogError(SDL_LOG_CATEGORY_APPLICATION, \"Couldn't initialize SDL: %s\", SDL_GetError());\n                return 3;\n        }\n\n        window = SDL_CreateWindow(\"SDL_CreateTexture\",\n                        1024, 768,\n                        SDL_WINDOW_RESIZABLE);\n\n        r.w = 100;\n        r.h = 50;\n\n        renderer = SDL_CreateRenderer(window, NULL);\n\n        texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, 1024, 768);\n\n        while (1) {\n                SDL_PollEvent(&event);\n                if(event.type == SDL_EVENT_QUIT)\n                        break;\n                r.x = SDL_rand(500);\n                r.y = SDL_rand(500);\n\n                SDL_SetRenderTarget(renderer, texture);\n                SDL_SetRenderDrawColor(renderer, 0x00, 0x00, 0x00, 0xFF);\n                SDL_RenderClear(renderer);\n                SDL_RenderRect(renderer,&r);\n                SDL_SetRenderDrawColor(renderer, 0xFF, 0x00, 0x00, 0xFF);\n                SDL_RenderFillRect(renderer, &r);\n                SDL_SetRenderTarget(renderer, NULL);\n                SDL_RenderTexture(renderer, texture, NULL, NULL);\n                SDL_RenderPresent(renderer);\n        }\n        SDL_DestroyRenderer(renderer);\n        SDL_Quit()\n        return 0;\n}\n\n```\n\n----------------------------------------\n\nTITLE: SDL_BroadcastCondition Syntax in C\nDESCRIPTION: This C code snippet shows the function signature of SDL_BroadcastCondition, which takes a pointer to an SDL_Condition variable as input. This function is part of the SDL3 library and requires including SDL3/SDL_mutex.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BroadcastCondition.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BroadcastCondition(SDL_Condition *cond);\n```\n\n----------------------------------------\n\nTITLE: Get Atomic Integer Value in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetAtomicInt to retrieve the current value of an atomic integer variable. The function takes a pointer to an SDL_AtomicInt as input and returns an integer representing the atomic variable's current value. This function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAtomicInt.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetAtomicInt(SDL_AtomicInt *a);\n```\n\n----------------------------------------\n\nTITLE: Initializing Haptic Rumble - C\nDESCRIPTION: This code snippet shows the syntax for initializing a haptic device for simple rumble playback using SDL_InitHapticRumble. The function takes a pointer to an SDL_Haptic struct as input and returns a boolean value indicating whether the initialization was successful. It requires the SDL3/SDL_haptic.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InitHapticRumble.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_InitHapticRumble(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV Implementation Remark in C\nDESCRIPTION: Shows that SDL_LoadWAV is a convenience function equivalent to calling SDL_LoadWAV_IO with SDL_IOFromFile. It opens the file in read binary mode ('rb'), reads the WAV data, and populates the provided audio specification, buffer, and length parameters. It also manages the file I/O internally.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadWAV.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_LoadWAV_IO(SDL_IOFromFile(path, \"rb\"), true, spec, audio_buf, audio_len);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderRects Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderRects function, which draws multiple rectangles on a given SDL_Renderer. It takes a renderer, an array of SDL_FRect structures defining the rectangles, and the number of rectangles to draw as input. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderRects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderRects(SDL_Renderer *renderer, const SDL_FRect *rects, int count);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE in C\nDESCRIPTION: This C macro defines the SDL hint SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE. It's used to control whether SDL sends an SDL_QUIT event when the last window is closed. The default value is \"1\", and can be changed at any time.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE \"SDL_QUIT_ON_LAST_WINDOW_CLOSE\"\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Scale Mode in SDL2 (C)\nDESCRIPTION: Sets the scale mode used for texture scale operations. It takes an SDL_Texture pointer and an SDL_ScaleMode enum as input. Returns 0 on success, or -1 if the texture is not valid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetTextureScaleMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetTextureScaleMode(SDL_Texture * texture,\n                            SDL_ScaleMode scaleMode);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUGraphicsPipelineCreateInfo Definition in C\nDESCRIPTION: Defines the structure `SDL_GPUGraphicsPipelineCreateInfo` used to specify parameters for a graphics pipeline state. This includes vertex and fragment shaders, vertex input state, primitive type, rasterizer state, multisample state, depth-stencil state, target information, and properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUGraphicsPipelineCreateInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUGraphicsPipelineCreateInfo\n{\n    SDL_GPUShader *vertex_shader;                   /**< The vertex shader used by the graphics pipeline. */\n    SDL_GPUShader *fragment_shader;                 /**< The fragment shader used by the graphics pipeline. */\n    SDL_GPUVertexInputState vertex_input_state;     /**< The vertex layout of the graphics pipeline. */\n    SDL_GPUPrimitiveType primitive_type;            /**< The primitive topology of the graphics pipeline. */\n    SDL_GPURasterizerState rasterizer_state;        /**< The rasterizer state of the graphics pipeline. */\n    SDL_GPUMultisampleState multisample_state;      /**< The multisample state of the graphics pipeline. */\n    SDL_GPUDepthStencilState depth_stencil_state;   /**< The depth-stencil state of the graphics pipeline. */\n    SDL_GPUGraphicsPipelineTargetInfo target_info;  /**< Formats and blend modes for the render targets of the graphics pipeline. */\n\n    SDL_PropertiesID props;                         /**< A properties ID for extensions. Should be 0 if no extensions are needed. */\n} SDL_GPUGraphicsPipelineCreateInfo;\n```\n\n----------------------------------------\n\nTITLE: Get USB Product ID from SDL Game Controller in C\nDESCRIPTION: This function retrieves the USB product ID of an opened SDL game controller. It takes a pointer to an SDL_GameController object as input and returns a Uint16 representing the product ID, or zero if unavailable. The function is part of the SDL2 library and is available since version 2.0.6.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetProduct.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GameControllerGetProduct(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Start Music Track SDL_mixer C\nDESCRIPTION: Starts playing a specific track in a Mix_Music object. Requires a valid Mix_Music pointer and the track number to start. Returns true on success, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_35\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_StartTrack(Mix_Music *music, int track);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_read_timeout Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_hid_read_timeout function in C. This function reads an input report from a HID device with a specified timeout in milliseconds. It returns the number of bytes read or -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_read_timeout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_read_timeout(SDL_hid_device *dev, unsigned char *data, size_t length, int milliseconds);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_DISPLAY_USABLE_BOUNDS in C\nDESCRIPTION: This code defines the SDL_HINT_DISPLAY_USABLE_BOUNDS macro, which is used to set the hint that overrides the usable bounds of display 0. The hint's value should be a string containing four comma-separated integers representing the x, y, width, and height of the new usable bounds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_DISPLAY_USABLE_BOUNDS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_DISPLAY_USABLE_BOUNDS \"SDL_DISPLAY_USABLE_BOUNDS\"\n```\n\n----------------------------------------\n\nTITLE: Checking Available Audio Data in an SDL_AudioStream\nDESCRIPTION: This code snippet demonstrates how to check the amount of converted audio data available in an SDL_AudioStream using SDL_GetAudioStreamAvailable.  The returned value indicates available bytes, not samples. It checks if at least 100 bytes of data are available and prints a message indicating how many more bytes are needed if less than 100 are available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/AudioStream.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nint avail = SDL_GetAudioStreamAvailable(stream);  // this is in bytes, not samples!\nif (avail < 100) {\n    printf(\"I'm still waiting on %d bytes of data!\\n\", 100 - avail);\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_MS_TO_NS Macro Definition in C\nDESCRIPTION: This macro converts milliseconds to nanoseconds using the SDL_NS_PER_MS constant. It takes a millisecond value (MS) as input and returns the equivalent value in nanoseconds. The macro is designed for whole numbers and does not handle fractional milliseconds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MS_TO_NS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MS_TO_NS(MS)        (((Uint64)(MS)) * SDL_NS_PER_MS)\n```\n\n----------------------------------------\n\nTITLE: SDL_EnclosePoints Syntax in C\nDESCRIPTION: This C code snippet shows the syntax of the SDL_EnclosePoints function, including its parameters and return type. It calculates the smallest rectangle enclosing a set of points.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_EnclosePoints.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_EnclosePoints(const SDL_Point * points,\n                           int count,\n                           const SDL_Rect * clip,\n                           SDL_Rect * result);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAtomicU32 Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetAtomicU32 function to get the value of an atomic variable. It requires including the SDL3/SDL_atomic.h header file. The function takes a pointer to an SDL_AtomicU32 variable and returns a Uint32.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAtomicU32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetAtomicU32(SDL_AtomicU32 *a);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick from Gamepad SDL (C)\nDESCRIPTION: Retrieves the underlying SDL_Joystick associated with a given SDL_Gamepad object.  The gamepad parameter is the SDL_Gamepad object from which the joystick is to be retrieved. The function returns a pointer to the SDL_Joystick object if successful, or NULL if an error occurred. The returned SDL_Joystick pointer is owned by the SDL_Gamepad object and must not be closed manually.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Joystick * SDL_GetGamepadJoystick(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: AVIF Image Data Detection in SDL_image (C)\nDESCRIPTION: This code snippet defines the signature for the IMG_isAVIF function in the SDL_image library. It takes an SDL_IOStream pointer as input, which should be a readable and seekable stream containing potential AVIF image data. The function returns a boolean value indicating whether the data is AVIF or not. The function is available since SDL_image 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isAVIF.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool IMG_isAVIF(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUIndirectDispatchCommand Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_GPUIndirectDispatchCommand` used to specify the dispatch parameters for indirect GPU compute dispatches. It contains three `Uint32` members: `groupcount_x`, `groupcount_y`, and `groupcount_z`, which determine the number of local workgroups to dispatch in each dimension respectively. This structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUIndirectDispatchCommand.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUIndirectDispatchCommand\n{\n    Uint32 groupcount_x;  /**< The number of local workgroups to dispatch in the X dimension. */\n    Uint32 groupcount_y;  /**< The number of local workgroups to dispatch in the Y dimension. */\n    Uint32 groupcount_z;  /**< The number of local workgroups to dispatch in the Z dimension. */\n} SDL_GPUIndirectDispatchCommand;\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUNICODE_LCD Function Syntax in C\nDESCRIPTION: This snippet shows the syntax of the TTF_RenderUNICODE_LCD function. It takes a font, UCS-2 encoded text, a foreground color, and a background color as input and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUNICODE_LCD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUNICODE_LCD(TTF_Font *font,\n                const Uint16 *text, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: SDL_WarpMouseInWindow Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_WarpMouseInWindow function in C. It takes a pointer to an SDL_Window, and x and y coordinates as floats. The function moves the mouse cursor to the specified coordinates within the given window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WarpMouseInWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_WarpMouseInWindow(SDL_Window *window,\n                       float x, float y);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTyped_IO Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadTyped_IO function in C, which loads an image from an SDL_IOStream. It takes an SDL_IOStream, a boolean to close the stream, and a type string as input, and returns an SDL_Surface pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadTyped_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadTyped_IO(SDL_IOStream *src, bool closeio, const char *type);\n```\n\n----------------------------------------\n\nTITLE: Sint8 Type Definition and Macros\nDESCRIPTION: Defines the `Sint8` type as a signed 8-bit integer (`int8_t`) and provides macros for its maximum (`SDL_MAX_SINT8`) and minimum (`SDL_MIN_SINT8`) values.  These macros are helpful for setting limits and validating data when working with `Sint8` values.  The code requires the SDL3 standard include file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Sint8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int8_t Sint8;\n#define SDL_MAX_SINT8   ((Sint8)0x7F)           /* 127 */\n#define SDL_MIN_SINT8   ((Sint8)(~0x7F))        /* -128 */\n```\n\n----------------------------------------\n\nTITLE: SDL_IOFromMem Syntax\nDESCRIPTION: Defines the syntax for the SDL_IOFromMem function, which prepares a read-write memory buffer for use with SDL_IOStream. It takes a void pointer to the memory buffer and the size of the buffer as input and returns a pointer to an SDL_IOStream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOFromMem.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStream * SDL_IOFromMem(void *mem, size_t size);\n```\n\n----------------------------------------\n\nTITLE: Define Joystick Zero-Centered Devices Hint in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES hint as a string literal. This hint allows specifying devices known to have all axes centered at zero, identified by USB VID/PID pairs in hexadecimal format, or by loading the values from a file. The hint should be set before opening a controller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES \"SDL_JOYSTICK_ZERO_CENTERED_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticEffect Union Definition in C\nDESCRIPTION: This code defines the SDL_HapticEffect union in C. It contains a type field to identify the specific haptic effect type and then includes union members for each possible effect structure (constant, periodic, condition, ramp, left/right, and custom). Each member represents a specific type of haptic effect that can be applied.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef union SDL_HapticEffect\n{\n    /* Common for all force feedback effects */\n    Uint16 type;                    /**< Effect type. */\n    SDL_HapticConstant constant;    /**< Constant effect. */\n    SDL_HapticPeriodic periodic;    /**< Periodic effect. */\n    SDL_HapticCondition condition;  /**< Condition effect. */\n    SDL_HapticRamp ramp;            /**< Ramp effect. */\n    SDL_HapticLeftRight leftright;  /**< Left/Right effect. */\n    SDL_HapticCustom custom;        /**< Custom effect. */\n} SDL_HapticEffect;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_EXCLUDES Macro in C\nDESCRIPTION: This code snippet defines the SDL_EXCLUDES macro, which is a wrapper around Clang's thread safety analysis annotations. It utilizes the SDL_THREAD_ANNOTATION_ATTRIBUTE__ macro to apply the locks_excluded attribute. The macro takes a parameter 'x' which represents the mutex to be excluded from the thread safety analysis. This enhances thread safety checking during compilation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EXCLUDES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_EXCLUDES(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(locks_excluded(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowProgressValue Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetWindowProgressValue function, which retrieves the progress value (between 0.0f and 1.0f) of the progress bar associated with a given SDL window's taskbar icon. The function takes a pointer to an SDL_Window as input and returns a float representing the progress value or -1.0f on failure. It requires the SDL3/SDL_video.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowProgressValue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetWindowProgressValue(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Waiting for an event with a timeout in SDL2 (C)\nDESCRIPTION: The SDL_WaitEventTimeout function waits until the specified timeout (in milliseconds) for the next available event. The function takes an SDL_Event pointer to store the event data and an integer representing the timeout duration in milliseconds. It returns 1 on success, 0 if there was an error or timeout, and calls SDL_GetError() for more information about errors.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WaitEventTimeout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_WaitEventTimeout(SDL_Event * event,\n                         int timeout);\n```\n\n----------------------------------------\n\nTITLE: Mix_StartTrack Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_StartTrack function, which is used to start a specific track in a music object. It takes a pointer to a Mix_Music object and the track number as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_StartTrack.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_StartTrack(Mix_Music *music, int track);\n```\n\n----------------------------------------\n\nTITLE: SDL_EnumerateDirectory Syntax in C\nDESCRIPTION: The SDL_EnumerateDirectory function takes a directory path, a callback function, and user data as input. It iterates through the directory, calling the callback for each entry. The callback receives the directory entry and the user data. The function returns true on success, or false if there was a system problem or the callback returned SDL_ENUM_FAILURE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EnumerateDirectory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_EnumerateDirectory(const char *path, SDL_EnumerateDirectoryCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_Joystick Structure Definition in C\nDESCRIPTION: Defines the SDL_Joystick structure as an opaque data type in C. This structure is used to identify an SDL joystick and is available since SDL 3.2.0. It is defined in the SDL3/SDL_joystick.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Joystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Joystick SDL_Joystick;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRevision Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetRevision function in C. It takes no arguments and returns a const char pointer representing the revision string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRevision.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetRevision(void);\n```\n\n----------------------------------------\n\nTITLE: Get Mouse Name by ID - SDL3 (C)\nDESCRIPTION: Retrieves the name of a mouse using its instance ID. The function returns a `const char *` representing the mouse's name or `NULL` on failure. It is available since SDL 3.2.0 and should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetMouseNameForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetMouseNameForID(SDL_MouseID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRectAndLineIntersection Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetRectAndLineIntersection function in C. It takes a rectangle and the start and end points of a line segment as input and modifies the line segment's endpoints to represent the intersection with the rectangle, if any.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRectAndLineIntersection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRectAndLineIntersection(const SDL_Rect *rect, int *X1, int *Y1, int *X2, int *Y2);\n```\n\n----------------------------------------\n\nTITLE: SDL_utf8strnlen Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_utf8strnlen function.  It takes a const char pointer (the UTF-8 string) and a size_t (the maximum number of bytes to read) as input and returns a size_t representing the number of codepoints.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_utf8strnlen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_utf8strnlen(const char *str, size_t bytes);\n```\n\n----------------------------------------\n\nTITLE: SDL_atof Syntax in C\nDESCRIPTION: This snippet shows the function signature for SDL_atof, which takes a const char pointer as input and returns a double. It is used to convert a string representation of a floating-point number into its double equivalent.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_atof.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_atof(const char *str);\n```\n\n----------------------------------------\n\nTITLE: Get Apple SF Symbols Name for Gamepad Button in C\nDESCRIPTION: Retrieves the sfSymbolsName for a specified button on a gamepad connected to an Apple device using SDL3. This function requires a valid SDL_Gamepad pointer and a SDL_GamepadButton enum value as input. It returns a const char* representing the sfSymbolsName, or NULL if the name cannot be found. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadAppleSFSymbolsNameForButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad *gamepad, SDL_GamepadButton button);\n```\n\n----------------------------------------\n\nTITLE: Get GPU Driver Name using SDL_GetGPUDriver in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GetGPUDriver function to retrieve the name of a GPU driver based on its index. It takes an integer index as input and returns a const char* representing the driver's name. The function is part of the SDL3 library and requires the SDL3/SDL_gpu.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGPUDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGPUDriver(int index);\n```\n\n----------------------------------------\n\nTITLE: Destroy Datagram Packet in SDL_net (C)\nDESCRIPTION: Destroys a datagram packet previously received using SDLNet_ReceiveDatagram. This function is necessary to free the resources associated with the datagram, including memory allocated for the data and the associated SDLNet_Address. The datagram pointer becomes invalid after calling this function. It's available since SDL_Net 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_DestroyDatagram.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_DestroyDatagram(SDLNet_Datagram *dgram);\n```\n\n----------------------------------------\n\nTITLE: Intersect Two Rectangles with SDL_IntersectRect in C\nDESCRIPTION: This code snippet demonstrates the usage of the SDL_IntersectRect function to calculate the intersection of two SDL_Rect structures. It takes two SDL_Rect pointers, A and B, as input, representing the two rectangles, and a pointer to an SDL_Rect, result, to store the intersection. The function returns SDL_TRUE if there is an intersection and SDL_FALSE otherwise. If result is NULL, the function returns SDL_FALSE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IntersectRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IntersectRect(const SDL_Rect * A,\n                           const SDL_Rect * B,\n                           SDL_Rect * result);\n```\n\n----------------------------------------\n\nTITLE: SDL_PremultiplyAlpha Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_PremultiplyAlpha function in C. It takes width, height, source and destination pixel formats, source and destination pixel data pointers, and source and destination pitches as input. The function premultiplies the alpha component of the source pixels and writes the result to the destination pixels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PremultiplyAlpha.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_PremultiplyAlpha(int width, int height,\n                         Uint32 src_format,\n                         const void * src, int src_pitch,\n                         Uint32 dst_format,\n                         void * dst, int dst_pitch);\n```\n\n----------------------------------------\n\nTITLE: TTF_MeasureUNICODE Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_MeasureUNICODE function in C. It takes a TTF_Font pointer, a UCS-2 encoded string (Uint16), a maximum width (int), and two integer pointers to store the extent (width) and character count.  It returns an integer indicating success (0) or failure (-1).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_MeasureUNICODE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_MeasureUNICODE(TTF_Font *font, const Uint16 *text, int measure_width, int *extent, int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetKeyFromName Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetKeyFromName function. It takes a constant character pointer representing the key name as input and returns an SDL_Keycode. If the name is not recognized, it returns SDLK_UNKNOWN.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetKeyFromName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Keycode SDL_GetKeyFromName(const char *name);\n```\n\n----------------------------------------\n\nTITLE: SDL_PixelFormat Structure Definition in C\nDESCRIPTION: Defines the SDL_PixelFormat structure, which holds information about the pixel format, including color masks, palette, bits per pixel, and bytes per pixel. All fields within this structure are intended to be read-only.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PixelFormat.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_PixelFormat\n{\n    Uint32 format;\n    SDL_Palette *palette;\n    Uint8 BitsPerPixel;\n    Uint8 BytesPerPixel;\n    Uint8 padding[2];\n    Uint32 Rmask;\n    Uint32 Gmask;\n    Uint32 Bmask;\n    Uint32 Amask;\n    Uint8 Rloss;\n    Uint8 Gloss;\n    Uint8 Bloss;\n    Uint8 Aloss;\n    Uint8 Rshift;\n    Uint8 Gshift;\n    Uint8 Bshift;\n    Uint8 Ashift;\n    int refcount;\n    struct SDL_PixelFormat *next;\n} SDL_PixelFormat;\n```\n\n----------------------------------------\n\nTITLE: Determine if SDL_PixelFormat is Indexed (C)\nDESCRIPTION: This macro checks if a given SDL_PixelFormat is an indexed format. It uses SDL_ISPIXELFORMAT_FOURCC and SDL_PIXELTYPE to determine the format type and returns true if it is indexed, false otherwise.  The macro double-evaluates its parameter, so avoid side effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISPIXELFORMAT_INDEXED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISPIXELFORMAT_INDEXED(format)   \\\n    (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n     ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX2) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8)))\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderCoordinatesFromWindow Syntax in C\nDESCRIPTION: This code snippet shows the syntax for SDL_RenderCoordinatesFromWindow in C. It converts a point from window coordinates (window_x, window_y) to render coordinates, storing the results in the memory pointed to by x and y. The function requires an SDL_Renderer context.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderCoordinatesFromWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderCoordinatesFromWindow(SDL_Renderer *renderer, float window_x, float window_y, float *x, float *y);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS hint, a string constant used to set the value for vertical Joy-Con mode using the HIDAPI driver. Setting this hint before opening a Joy-Con controller will determine whether they operate in vertical mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS \"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS\"\n```\n\n----------------------------------------\n\nTITLE: Get Music Position SDL_mixer C\nDESCRIPTION: Retrieves the current playback position of the music stream, in seconds. Requires a valid Mix_Music pointer. Returns the position as a double.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_38\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicPosition(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AsyncIOTaskType Enum in C\nDESCRIPTION: Defines the SDL_AsyncIOTaskType enumeration used to specify the type of asynchronous I/O tasks. The enum lists possible operations: SDL_ASYNCIO_TASK_READ, SDL_ASYNCIO_TASK_WRITE, and SDL_ASYNCIO_TASK_CLOSE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AsyncIOTaskType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_AsyncIOTaskType\n{\n    SDL_ASYNCIO_TASK_READ,   /**< A read operation. */\n    SDL_ASYNCIO_TASK_WRITE,  /**< A write operation. */\n    SDL_ASYNCIO_TASK_CLOSE   /**< A close operation. */\n} SDL_AsyncIOTaskType;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Scancode Enumeration in C\nDESCRIPTION: This code snippet defines the `SDL_Scancode` enumeration, which is used to represent scancodes for keyboard keys in the SDL library.  It includes definitions for various keyboard keys, keypad keys, media keys, and mobile phone keys. The last item in the enumeration, `SDL_NUM_SCANCODES`, indicates the number of scancodes for array bounds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Scancode.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum {\n    SDL_SCANCODE_CURRENCYSUBUNIT = 181,\n    SDL_SCANCODE_KP_LEFTPAREN = 182,\n    SDL_SCANCODE_KP_RIGHTPAREN = 183,\n    SDL_SCANCODE_KP_LEFTBRACE = 184,\n    SDL_SCANCODE_KP_RIGHTBRACE = 185,\n    SDL_SCANCODE_KP_TAB = 186,\n    SDL_SCANCODE_KP_BACKSPACE = 187,\n    SDL_SCANCODE_KP_A = 188,\n    SDL_SCANCODE_KP_B = 189,\n    SDL_SCANCODE_KP_C = 190,\n    SDL_SCANCODE_KP_D = 191,\n    SDL_SCANCODE_KP_E = 192,\n    SDL_SCANCODE_KP_F = 193,\n    SDL_SCANCODE_KP_XOR = 194,\n    SDL_SCANCODE_KP_POWER = 195,\n    SDL_SCANCODE_KP_PERCENT = 196,\n    SDL_SCANCODE_KP_LESS = 197,\n    SDL_SCANCODE_KP_GREATER = 198,\n    SDL_SCANCODE_KP_AMPERSAND = 199,\n    SDL_SCANCODE_KP_DBLAMPERSAND = 200,\n    SDL_SCANCODE_KP_VERTICALBAR = 201,\n    SDL_SCANCODE_KP_DBLVERTICALBAR = 202,\n    SDL_SCANCODE_KP_COLON = 203,\n    SDL_SCANCODE_KP_HASH = 204,\n    SDL_SCANCODE_KP_SPACE = 205,\n    SDL_SCANCODE_KP_AT = 206,\n    SDL_SCANCODE_KP_EXCLAM = 207,\n    SDL_SCANCODE_KP_MEMSTORE = 208,\n    SDL_SCANCODE_KP_MEMRECALL = 209,\n    SDL_SCANCODE_KP_MEMCLEAR = 210,\n    SDL_SCANCODE_KP_MEMADD = 211,\n    SDL_SCANCODE_KP_MEMSUBTRACT = 212,\n    SDL_SCANCODE_KP_MEMMULTIPLY = 213,\n    SDL_SCANCODE_KP_MEMDIVIDE = 214,\n    SDL_SCANCODE_KP_PLUSMINUS = 215,\n    SDL_SCANCODE_KP_CLEAR = 216,\n    SDL_SCANCODE_KP_CLEARENTRY = 217,\n    SDL_SCANCODE_KP_BINARY = 218,\n    SDL_SCANCODE_KP_OCTAL = 219,\n    SDL_SCANCODE_KP_DECIMAL = 220,\n    SDL_SCANCODE_KP_HEXADECIMAL = 221,\n\n    SDL_SCANCODE_LCTRL = 224,\n    SDL_SCANCODE_LSHIFT = 225,\n    SDL_SCANCODE_LALT = 226, /**< alt, option */\n    SDL_SCANCODE_LGUI = 227, /**< windows, command (apple), meta */\n    SDL_SCANCODE_RCTRL = 228,\n    SDL_SCANCODE_RSHIFT = 229,\n    SDL_SCANCODE_RALT = 230, /**< alt gr, option */\n    SDL_SCANCODE_RGUI = 231, /**< windows, command (apple), meta */\n\n    SDL_SCANCODE_MODE = 257,    /**< I'm not sure if this is really not covered\n                                 *   by any of the above, but since there's a\n                                 *   special KMOD_MODE for it I'm adding it here\n                                 */\n\n    /* @} *//* Usage page 0x07 */\n\n    /**\n     *  \\name Usage page 0x0C\n     *\n     *  These values are mapped from usage page 0x0C (USB consumer page).\n     *  See https://usb.org/sites/default/files/hut1_2.pdf\n     *\n     *  There are way more keys in the spec than we can represent in the\n     *  current scancode range, so pick the ones that commonly come up in\n     *  real world usage.\n     */\n    /* @{ */\n\n    SDL_SCANCODE_AUDIONEXT = 258,\n    SDL_SCANCODE_AUDIOPREV = 259,\n    SDL_SCANCODE_AUDIOSTOP = 260,\n    SDL_SCANCODE_AUDIOPLAY = 261,\n    SDL_SCANCODE_AUDIOMUTE = 262,\n    SDL_SCANCODE_MEDIASELECT = 263,\n    SDL_SCANCODE_WWW = 264,             /**< AL Internet Browser */\n    SDL_SCANCODE_MAIL = 265,\n    SDL_SCANCODE_CALCULATOR = 266,      /**< AL Calculator */\n    SDL_SCANCODE_COMPUTER = 267,\n    SDL_SCANCODE_AC_SEARCH = 268,       /**< AC Search */\n    SDL_SCANCODE_AC_HOME = 269,         /**< AC Home */\n    SDL_SCANCODE_AC_BACK = 270,         /**< AC Back */\n    SDL_SCANCODE_AC_FORWARD = 271,      /**< AC Forward */\n    SDL_SCANCODE_AC_STOP = 272,         /**< AC Stop */\n    SDL_SCANCODE_AC_REFRESH = 273,      /**< AC Refresh */\n    SDL_SCANCODE_AC_BOOKMARKS = 274,    /**< AC Bookmarks */\n\n    /* @} *//* Usage page 0x0C */\n\n    /**\n     *  \\name Walther keys\n     *\n     *  These are values that Christian Walther added (for mac keyboard?).\n     */\n    /* @{ */\n\n    SDL_SCANCODE_BRIGHTNESSDOWN = 275,\n    SDL_SCANCODE_BRIGHTNESSUP = 276,\n    SDL_SCANCODE_DISPLAYSWITCH = 277, /**< display mirroring/dual display\n                                           switch, video mode switch */\n    SDL_SCANCODE_KBDILLUMTOGGLE = 278,\n    SDL_SCANCODE_KBDILLUMDOWN = 279,\n    SDL_SCANCODE_KBDILLUMUP = 280,\n    SDL_SCANCODE_EJECT = 281,\n    SDL_SCANCODE_SLEEP = 282,           /**< SC System Sleep */\n\n    SDL_SCANCODE_APP1 = 283,\n    SDL_SCANCODE_APP2 = 284,\n\n    /* @} *//* Walther keys */\n\n    /**\n     *  \\name Usage page 0x0C (additional media keys)\n     *\n     *  These values are mapped from usage page 0x0C (USB consumer page).\n     */\n    /* @{ */\n\n    SDL_SCANCODE_AUDIOREWIND = 285,\n    SDL_SCANCODE_AUDIOFASTFORWARD = 286,\n\n    /* @} *//* Usage page 0x0C (additional media keys) */\n\n    /**\n     *  \\name Mobile keys\n     *\n     *  These are values that are often used on mobile phones.\n     */\n    /* @{ */\n\n    SDL_SCANCODE_SOFTLEFT = 287, /**< Usually situated below the display on phones and\n                                      used as a multi-function feature key for selecting\n                                      a software defined function shown on the bottom left\n                                      of the display. */\n    SDL_SCANCODE_SOFTRIGHT = 288, /**< Usually situated below the display on phones and\n                                       used as a multi-function feature key for selecting\n                                       a software defined function shown on the bottom right\n                                       of the display. */\n    SDL_SCANCODE_CALL = 289, /**< Used for accepting phone calls. */\n    SDL_SCANCODE_ENDCALL = 290, /**< Used for rejecting phone calls. */\n\n    /* @} *//* Mobile keys */\n\n    /* Add any other keys here. */\n\n    SDL_NUM_SCANCODES = 512 /**< not a key, just marks the number of scancodes\n                                 for array bounds */\n} SDL_Scancode;\n```\n\n----------------------------------------\n\nTITLE: Pausing Music SDL_mixer C\nDESCRIPTION: Pauses the playback of the currently playing music stream. The function takes no arguments. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_PauseMusic(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_TextEditingEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_TextEditingEvent, which captures text editing events like input method editor (IME) compositions. It includes fields for event type, timestamp, window ID, the editing text itself, the start cursor position, and the length of selected text. This structure is used when SDL_TEXTEDITING events are dispatched.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TextEditingEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TextEditingEvent\n{\n    Uint32 type;                                /**< SDL_TEXTEDITING */\n    Uint32 timestamp;                           /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;                            /**< The window with keyboard focus, if any */\n    char text[SDL_TEXTEDITINGEVENT_TEXT_SIZE];  /**< The editing text */\n    Sint32 start;                               /**< The start cursor of selected editing text */\n    Sint32 length;                              /**< The length of selected editing text */\n} SDL_TextEditingEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_ResetKeyboard Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ResetKeyboard function. It takes no arguments and returns void. It is used to clear the state of the keyboard and generate key up events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ResetKeyboard.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ResetKeyboard(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_PLATFORM_EMSCRIPTEN Definition in C\nDESCRIPTION: This preprocessor macro is defined as '1' when compiling for the Emscripten platform. It allows for conditional compilation of code specific to Emscripten within SDL3 projects. The macro is available starting from SDL version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_EMSCRIPTEN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_EMSCRIPTEN 1\n```\n\n----------------------------------------\n\nTITLE: RTF_Load Syntax in C\nDESCRIPTION: Defines the syntax for the RTF_Load function which loads RTF data from a specified file into an RTF context. It takes an RTF_Context pointer and a file path as input. It returns a boolean indicating success or failure; SDL_GetError() provides more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_Load.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool RTF_Load(RTF_Context *ctx, const char *file);\n```\n\n----------------------------------------\n\nTITLE: Count Haptic Devices using SDL_NumHaptics in C\nDESCRIPTION: This code snippet demonstrates how to use the `SDL_NumHaptics` function to retrieve the number of haptic devices connected to the system. It requires the SDL2 library to be included and properly initialized. The function returns the number of haptic devices, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_NumHaptics.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_NumHaptics(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDisplayForRect Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetDisplayForRect function in C. It takes a pointer to an SDL_Rect as input and returns an SDL_DisplayID. The function retrieves the instance ID of the display that entirely contains the rectangle or is closest to the rectangle's center.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplayForRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayID SDL_GetDisplayForRect(const SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateMutex Function Signature (C)\nDESCRIPTION: This snippet shows the syntax or function signature of SDL_CreateMutex. It highlights that the function takes no arguments and returns a pointer to an SDL_Mutex object, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateMutex.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Mutex * SDL_CreateMutex(void);\n```\n\n----------------------------------------\n\nTITLE: Destroy Environment Variables in C\nDESCRIPTION: Destroys a set of environment variables previously created using SDL_CreateEnvironment. This function takes a pointer to an SDL_Environment structure as input, freeing the memory associated with it. It's crucial that the environment is not currently in use when this function is called to prevent memory corruption or other undefined behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyEnvironment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyEnvironment(SDL_Environment *env);\n```\n\n----------------------------------------\n\nTITLE: SDL_ISPIXELFORMAT_ARRAY Macro Definition in C\nDESCRIPTION: This macro checks if a given SDL_PixelFormat is an array format. It verifies that the format is not a FOURCC format and that its pixel type is one of the supported array types (SDL_PIXELTYPE_ARRAYU8, SDL_PIXELTYPE_ARRAYU16, SDL_PIXELTYPE_ARRAYU32, SDL_PIXELTYPE_ARRAYF16, SDL_PIXELTYPE_ARRAYF32). Note that this macro double-evaluates its parameter, so avoid using expressions with side effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISPIXELFORMAT_ARRAY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISPIXELFORMAT_ARRAY(format) \\\n    (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n     ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU8) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU16) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYU32) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32)))\n```\n\n----------------------------------------\n\nTITLE: SDL_GetKeyFromName Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetKeyFromName function, which takes a human-readable key name (const char *) as input and returns the corresponding SDL_Keycode. If the name is not recognized, it returns SDLK_UNKNOWN.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetKeyFromName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Keycode SDL_GetKeyFromName(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Mix_Chunk Structure Definition in C\nDESCRIPTION: This code snippet defines the `Mix_Chunk` structure, used by SDL_mixer to represent an audio chunk. It includes members for tracking memory allocation (`allocated`), the audio buffer (`abuf`), the buffer's length (`alen`), and the sample volume (`volume`).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Chunk.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct Mix_Chunk {\n    int allocated;\n    Uint8 *abuf;\n    Uint32 alen;\n    Uint8 volume;       /* Per-sample volume, 0-128 */\n} Mix_Chunk;\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetAxisFromString Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GameControllerGetAxisFromString function, used to convert a string representation of a game controller axis to its corresponding SDL_GameControllerAxis enum value. The function takes a const char * as input and returns an SDL_GameControllerAxis enum.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetAxisFromString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GameControllerAxis SDL_GameControllerGetAxisFromString(const char *str);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Haptic Effects - SDL_HapticNumEffects - C\nDESCRIPTION: Retrieves the number of effects a given SDL_Haptic device can store. It takes a pointer to the SDL_Haptic device as input and returns an integer representing the number of storable effects. The return value might be an approximation, so effect creation should be verified. Call SDL_GetError() for more details on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticNumEffects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticNumEffects(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlendMode Definition in C\nDESCRIPTION: Defines the SDL_BlendMode type as a Uint32 and lists the predefined blend mode constants. These constants represent different blending algorithms for controlling how source pixels are combined with destination pixels during rendering operations. The code includes definitions for no blending, alpha blending, pre-multiplied alpha blending, additive blending, color modulate, and color multiply.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_BlendMode;\n\n#define SDL_BLENDMODE_NONE                  0x00000000u /**< no blending: dstRGBA = srcRGBA */\n#define SDL_BLENDMODE_BLEND                 0x00000001u /**< alpha blending: dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA)), dstA = srcA + (dstA * (1-srcA)) */\n#define SDL_BLENDMODE_BLEND_PREMULTIPLIED   0x00000010u /**< pre-multiplied alpha blending: dstRGBA = srcRGBA + (dstRGBA * (1-srcA)) */\n#define SDL_BLENDMODE_ADD                   0x00000002u /**< additive blending: dstRGB = (srcRGB * srcA) + dstRGB, dstA = dstA */\n#define SDL_BLENDMODE_ADD_PREMULTIPLIED     0x00000020u /**< pre-multiplied additive blending: dstRGB = srcRGB + dstRGB, dstA = dstA */\n#define SDL_BLENDMODE_MOD                   0x00000004u /**< color modulate: dstRGB = srcRGB * dstRGB, dstA = dstA */\n#define SDL_BLENDMODE_MUL                   0x00000008u /**< color multiply: dstRGB = (srcRGB * dstRGB) + (dstRGB * (1-srcA)), dstA = dstA */\n#define SDL_BLENDMODE_INVALID               0x7FFFFFFFu\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUCommandBuffer Definition in C\nDESCRIPTION: Defines the SDL_GPUCommandBuffer as an opaque handle using a structure. This structure is available since SDL 3.2.0 and is used for managing GPU commands.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUCommandBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUCommandBuffer SDL_GPUCommandBuffer;\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicTryLock Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_AtomicTryLock function, which attempts to lock a spin lock. The function takes a pointer to an SDL_SpinLock and returns an SDL_bool indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicTryLock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_AtomicTryLock(SDL_SpinLock *lock);\n```\n\n----------------------------------------\n\nTITLE: Get Haptic Devices in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GetHaptics function to retrieve an array of haptic device instance IDs. It requires the SDL3 library. The returned array must be freed using SDL_free after use to avoid memory leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHaptics.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_HapticID * SDL_GetHaptics(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_ClearQueuedAudio Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_ClearQueuedAudio function in C. It requires an SDL_AudioDeviceID as input, which represents the device ID of the audio queue to be cleared. The function returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ClearQueuedAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Info using SDL_GetRendererInfo in C\nDESCRIPTION: Retrieves information about a rendering context. Takes a pointer to an SDL_Renderer and a pointer to an SDL_RendererInfo structure, populating the latter with information about the renderer. Returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRendererInfo.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_GetRendererInfo(SDL_Renderer * renderer,\n                        SDL_RendererInfo * info);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteS32BE Function Signature (C)\nDESCRIPTION: This code snippet shows the function signature for SDL_WriteS32BE, which writes a 32-bit integer to an SDL_IOStream in big-endian format. It takes a pointer to an SDL_IOStream and the integer value as input, and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteS32BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteS32BE(SDL_IOStream *dst, Sint32 value);\n```\n\n----------------------------------------\n\nTITLE: Insert Text String - SDL_ttf\nDESCRIPTION: Inserts UTF-8 text into a text object at a specified offset. The `offset` parameter specifies the position to insert the text, `string` is the text to insert, and `length` is the length of the string in bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_103\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_InsertTextString(TTF_Text *text, int offset, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_WinRTRunApp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WinRTRunApp function in C. This function initializes and launches an SDL/WinRT application. It requires an SDL_main_func as the entry point and a reserved void pointer, which should be NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WinRTRunApp.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_WinRTRunApp(SDL_main_func mainFunction, void * reserved);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadPCX_IO Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadPCX_IO function, which loads a PCX image from an SDL_IOStream. It takes an SDL_IOStream pointer as input and returns an SDL_Surface pointer, or NULL on error. This function bypasses the format detection routines in SDL_image, assuming the input is definitely a PCX image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadPCX_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadPCX_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Defining Mix_Fading Enum in SDL_mixer (C)\nDESCRIPTION: This code defines the Mix_Fading enum, used in SDL_mixer to represent the different fading states for audio channels. The enum includes values for no fading (MIX_NO_FADING), fading out (MIX_FADING_OUT), and fading in (MIX_FADING_IN). SDL_mixer library is required to use this enum.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Fading.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum Mix_Fading {\n    MIX_NO_FADING,\n    MIX_FADING_OUT,\n    MIX_FADING_IN\n} Mix_Fading;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Capitalization enum in C\nDESCRIPTION: This code snippet defines the `SDL_Capitalization` enum in C, which is used to specify the type of auto-capitalization for text input. The enum includes options for no capitalization, sentence capitalization, word capitalization, and all letters capitalization. It is used with `SDL_StartTextInputWithProperties` to control text input behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Capitalization.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_Capitalization\n{\n    SDL_CAPITALIZE_NONE,        /**< No auto-capitalization will be done */\n    SDL_CAPITALIZE_SENTENCES,   /**< The first letter of sentences will be capitalized */\n    SDL_CAPITALIZE_WORDS,       /**< The first letter of words will be capitalized */\n    SDL_CAPITALIZE_LETTERS      /**< All letters will be capitalized */\n} SDL_Capitalization;\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Name in SDL3 (C)\nDESCRIPTION: Retrieves the implementation-dependent name of a joystick using SDL_GetJoystickName. It takes a pointer to an SDL_Joystick object as input, which is obtained from SDL_OpenJoystick. The function returns a const char pointer to the joystick's name or NULL if no name is found. Call SDL_GetError() for more information in case of failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetJoystickName(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Get Android External Storage State in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_GetAndroidExternalStorageState function, which retrieves the current state of external storage for this Android application. The function takes no arguments and returns a Uint32 representing the state of external storage (read/write access).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidExternalStorageState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetAndroidExternalStorageState(void);\n```\n\n----------------------------------------\n\nTITLE: Set Audio Stream Frequency Ratio in SDL3\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetAudioStreamFrequencyRatio function, which adjusts the frequency ratio of an audio stream. The function takes an SDL_AudioStream pointer and a float representing the desired ratio (between 0.01 and 100). It returns true on success and false on failure. The frequency ratio modifies the speed and pitch of the audio.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioStreamFrequencyRatio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAudioStreamFrequencyRatio(SDL_AudioStream *stream, float ratio);\n```\n\n----------------------------------------\n\nTITLE: SDL_SemTryWait Syntax in C\nDESCRIPTION: Defines the syntax for SDL_SemTryWait function in C. This function attempts to decrement a semaphore if its value is positive, returning immediately if the semaphore is not available. It requires a pointer to an SDL_sem structure as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SemTryWait.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SemTryWait(SDL_sem * sem);\n```\n\n----------------------------------------\n\nTITLE: Register User-Defined Events in SDL3 (C)\nDESCRIPTION: Allocates a set of user-defined events using `SDL_RegisterEvents` and returns the beginning event number for that set. The function takes the number of events to allocate as input (`numevents`). It returns the starting event number or 0 if the allocation fails due to invalid input or insufficient available events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RegisterEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_RegisterEvents(int numevents);\n```\n\n----------------------------------------\n\nTITLE: Seeding Random Number Generator with SDL_srand in C\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_srand function in C, which is used to seed the pseudo-random number generator. It takes a Uint64 seed as input, or 0 to use SDL_GetPerformanceCounter().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_srand.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_srand(Uint64 seed);\n```\n\n----------------------------------------\n\nTITLE: SDL_AndroidGetActivity Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_AndroidGetActivity function in C. It retrieves the Java instance of the Android activity class. The return value is a void pointer, but represents a jobject which must be released by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidGetActivity.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_AndroidGetActivity(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetGrabbedWindow Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetGrabbedWindow function, which takes no arguments and returns a pointer to an SDL_Window. The function returns the window that currently has input grab enabled, or NULL if no window has input grab.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetGrabbedWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetGrabbedWindow(void);\n```\n\n----------------------------------------\n\nTITLE: Compiling sample app using androidbuild.sh\nDESCRIPTION: Compiles a sample SDL application using the `androidbuild.sh` script. This script handles the NDK build process and creates an Android application package (APK).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/src/SDL3/build-scripts/\n./androidbuild.sh org.libsdl.testgles ../test/testgles.c\n```\n\n----------------------------------------\n\nTITLE: Get Audio Playback Devices in SDL3 (C)\nDESCRIPTION: Retrieves a list of currently-connected audio playback devices using SDL_GetAudioPlaybackDevices. The function returns a null-terminated array of SDL_AudioDeviceID values, which represent the device IDs.  The 'count' parameter is a pointer to an integer that will be filled with the number of devices returned. The returned array must be freed using SDL_free after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioPlaybackDevices.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioDeviceID * SDL_GetAudioPlaybackDevices(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetJoystickPowerInfo Syntax in C\nDESCRIPTION: Retrieves the battery state of a joystick. The function takes a joystick pointer and an optional integer pointer to store the battery percentage. It returns an SDL_PowerState enum indicating the battery status or SDL_POWERSTATE_ERROR on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickPowerInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PowerState SDL_GetJoystickPowerInfo(SDL_Joystick *joystick, int *percent);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH in C\nDESCRIPTION: This code defines the SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH macro. This hint allows mouse click events when clicking to focus an SDL window. It can be set to \"0\" to ignore mouse clicks that activate a window, or \"1\" to generate events for mouse clicks that activate a window. This hint is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH \"SDL_MOUSE_FOCUS_CLICKTHROUGH\"\n```\n\n----------------------------------------\n\nTITLE: SDL_SysWMmsg Structure Definition in C\nDESCRIPTION: Defines the SDL_SysWMmsg structure, which holds system-specific window messages. It includes a version number, subsystem type, and a union containing the actual message data that varies depending on the operating system (Windows, X11, DirectFB, Cocoa, UIKit, Vivante, OS/2). A dummy integer is included to prevent empty struct issues. The structure facilitates handling native window events within the SDL framework.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SysWMmsg.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct SDL_SysWMmsg\n{\n    SDL_version version;\n    SDL_SYSWM_TYPE subsystem;\n    union\n    {\n#if defined(SDL_VIDEO_DRIVER_WINDOWS)\n        struct {\n            HWND hwnd;                  /**< The window for the message */\n            UINT msg;                   /**< The type of message */\n            WPARAM wParam;              /**< WORD message parameter */\n            LPARAM lParam;              /**< LONG message parameter */\n        } win;\n#endif\n#if defined(SDL_VIDEO_DRIVER_X11)\n        struct {\n            XEvent event;\n        } x11;\n#endif\n#if defined(SDL_VIDEO_DRIVER_DIRECTFB)\n        struct {\n            DFBEvent event;\n        } dfb;\n#endif\n#if defined(SDL_VIDEO_DRIVER_COCOA)\n        struct\n        {\n            /* Latest version of Xcode clang complains about empty structs in C v. C++:\n                 error: empty struct has size 0 in C, size 1 in C++\n             */\n            int dummy;\n            /* No Cocoa window events yet */\n        } cocoa;\n#endif\n#if defined(SDL_VIDEO_DRIVER_UIKIT)\n        struct\n        {\n            int dummy;\n            /* No UIKit window events yet */\n        } uikit;\n#endif\n#if defined(SDL_VIDEO_DRIVER_VIVANTE)\n        struct\n        {\n            int dummy;\n            /* No Vivante window events yet */\n        } vivante;\n#endif\n#if defined(SDL_VIDEO_DRIVER_OS2)\n        struct\n        {\n            BOOL fFrame;                /**< TRUE if hwnd is a frame window */\n            HWND hwnd;                  /**< The window receiving the message */\n            ULONG msg;                  /**< The message identifier */\n            MPARAM mp1;                 /**< The first first message parameter */\n            MPARAM mp2;                 /**< The second first message parameter */\n        } os2;\n#endif\n        /* Can't have an empty union */\n        int dummy;\n    } msg;\n};\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderFillRectsF Signature in C\nDESCRIPTION: This code snippet shows the function signature of SDL_RenderFillRectsF. It takes a renderer, an array of SDL_FRect structures, and the number of rectangles as input.  It returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderFillRectsF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderFillRectsF(SDL_Renderer * renderer,\n                         const SDL_FRect * rects,\n                         int count);\n```\n\n----------------------------------------\n\nTITLE: Complete Haptic Effect Test (C)\nDESCRIPTION: This snippet demonstrates a complete haptic effect test with SDL, creating a sine wave effect on a joystick. It opens a haptic device from a joystick, checks for sine wave support, creates the effect with specific parameters, uploads and runs the effect, and then destroys and closes the device. Requires SDL library to be linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/CategoryHaptic.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbool test_haptic(SDL_Joystick *joystick)\n{\n   SDL_Haptic *haptic;\n   SDL_HapticEffect effect;\n   SDL_HapticEffectID effect_id;\n\n   // Open the device\n   haptic = SDL_OpenHapticFromJoystick(joystick);\n   if (haptic == NULL) return false; // Most likely joystick isn't haptic\n\n   // See if it can do sine waves\n   if ((SDL_GetHapticFeatures(haptic) & SDL_HAPTIC_SINE)==0) {\n      SDL_CloseHaptic(haptic); // No sine effect\n      return false;\n   }\n\n   // Create the effect\n   SDL_memset(&effect, 0, sizeof(SDL_HapticEffect)); // 0 is safe default\n   effect.type = SDL_HAPTIC_SINE;\n   effect.periodic.direction.type = SDL_HAPTIC_POLAR; // Polar coordinates\n   effect.periodic.direction.dir[0] = 18000; // Force comes from south\n   effect.periodic.period = 1000; // 1000 ms\n   effect.periodic.magnitude = 20000; // 20000/32767 strength\n   effect.periodic.length = 5000; // 5 seconds long\n   effect.periodic.attack_length = 1000; // Takes 1 second to get max strength\n   effect.periodic.fade_length = 1000; // Takes 1 second to fade away\n\n   // Upload the effect\n   effect_id = SDL_CreateHapticEffect(haptic, &effect);\n\n   // Test the effect\n   SDL_RunHapticEffect(haptic, effect_id, 1);\n   SDL_Delay(5000); // Wait for the effect to finish\n\n   // We destroy the effect, although closing the device also does this\n   SDL_DestroyHapticEffect(haptic, effect_id);\n\n   // Close the device\n   SDL_CloseHaptic(haptic);\n\n   return true; // Success\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MessageBoxButtonData Structure in C\nDESCRIPTION: This code snippet defines the structure SDL_MessageBoxButtonData, which contains the flags, button id, and text for an individual button in a message box. The flags member stores SDL_MessageBoxButtonFlags. The buttonid member is a user-defined id returned via SDL_ShowMessageBox. The text member is the UTF-8 button text to be displayed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MessageBoxButtonData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MessageBoxButtonData\n{\n    Uint32 flags;       /**< SDL_MessageBoxButtonFlags */\n    int buttonid;       /**< User defined button id (value returned via SDL_ShowMessageBox) */\n    const char * text;  /**< The UTF-8 button text */\n} SDL_MessageBoxButtonData;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_CATEGORY in C\nDESCRIPTION: Defines the SDL_HINT_AUDIO_CATEGORY macro, which represents a string used to control the audio category hint. This hint affects audio behavior on iOS and macOS.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_CATEGORY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_CATEGORY \"SDL_AUDIO_CATEGORY\"\n```\n\n----------------------------------------\n\nTITLE: Destroy Async I/O Queue SDL3 (C)\nDESCRIPTION: Destroys a previously-created async I/O task queue. The function blocks until all pending tasks in the queue are finished and deallocated. Any pending reads from SDL_LoadFileAsync will have their buffers deallocated to prevent memory leaks. It is important to ensure that no threads are waiting on the queue via SDL_WaitAsyncIOResult before calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyAsyncIOQueue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyAsyncIOQueue(SDL_AsyncIOQueue *queue);\n```\n\n----------------------------------------\n\nTITLE: Get Texture Alpha Mod Value in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetTextureAlphaMod function in C. It retrieves the additional alpha value multiplied into render copy operations for a given SDL texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTextureAlphaMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetTextureAlphaMod(SDL_Texture * texture,\n                           Uint8 * alpha);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_NS_PER_US in SDL3 (C)\nDESCRIPTION: Defines the SDL_NS_PER_US macro, representing the number of nanoseconds in a microsecond. This macro is available since SDL 3.2.0 and is used for time conversions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NS_PER_US.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NS_PER_US       1000\n```\n\n----------------------------------------\n\nTITLE: Get Render Color Scale in SDL3 (C)\nDESCRIPTION: Retrieves the color scale used for render operations in a given SDL_Renderer. The function takes a pointer to the renderer and a pointer to a float, which will be filled with the current color scale value. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderColorScale.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_GetRenderColorScale(SDL_Renderer *renderer, float *scale);\n```\n\n----------------------------------------\n\nTITLE: Get Music Position using Mix_GetMusicPosition in C\nDESCRIPTION: This code snippet shows the syntax for using the `Mix_GetMusicPosition` function to get the current position of a music stream in seconds. The function takes a `Mix_Music` pointer as input and returns a double representing the position. It's part of the SDL_mixer library and requires version 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicPosition(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_CopyGPUTextureToTexture Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_CopyGPUTextureToTexture function in C, used to perform a texture-to-texture copy on the GPU timeline. It requires a copy pass, source texture location, destination texture location, width, height, depth, and a boolean to determine if the destination texture should be cycled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CopyGPUTextureToTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CopyGPUTextureToTexture(\n    SDL_GPUCopyPass *copy_pass,\n    const SDL_GPUTextureLocation *source,\n    const SDL_GPUTextureLocation *destination,\n    Uint32 w,\n    Uint32 h,\n    Uint32 d,\n    bool cycle);\n```\n\n----------------------------------------\n\nTITLE: Query Glyph Metrics using TTF_GlyphMetrics C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GlyphMetrics function, which retrieves glyph metrics (dimensions) from a specified font for a given 16-bit character. It requires SDL_ttf and a valid TTF_Font pointer. The function populates the provided integer pointers with the minx, maxx, miny, maxy, and advance values for the glyph.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GlyphMetrics.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GlyphMetrics(TTF_Font *font, Uint16 ch,\nint *minx, int *maxx,\nint *miny, int *maxy, int *advance);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticEffectSupported Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HapticEffectSupported function in C. It takes a pointer to an SDL_Haptic device and a pointer to an SDL_HapticEffect as input, and returns a boolean value indicating whether the effect is supported by the device. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticEffectSupported.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HapticEffectSupported(SDL_Haptic *haptic, const SDL_HapticEffect *effect);\n```\n\n----------------------------------------\n\nTITLE: Query SDL_ttf Linked Version in C\nDESCRIPTION: This code snippet shows the syntax for calling the TTF_Linked_Version function in C to retrieve the version of the linked SDL_ttf library. It returns a pointer to an SDL_version struct. The function requires the SDL_ttf library to be linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_Linked_Version.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_version * TTF_Linked_Version(void);\n```\n\n----------------------------------------\n\nTITLE: Get Window Flags using SDL_GetWindowFlags (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetWindowFlags function, which retrieves the flags associated with a specified SDL_Window. It takes a pointer to an SDL_Window as input and returns an SDL_WindowFlags mask indicating the flags associated with the window. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_WindowFlags SDL_GetWindowFlags(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetiOSAnimationCallback Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetiOSAnimationCallback function. This function sets the animation callback for a specified SDL_Window on Apple iOS. It takes the window, an interval (number of frames), the callback function, and a void pointer as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetiOSAnimationCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetiOSAnimationCallback(SDL_Window *window, int interval, SDL_iOSAnimationCallback callback, void *callbackParam);\n```\n\n----------------------------------------\n\nTITLE: SDL_PeepEvents Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_PeepEvents function in C. This function allows checking the event queue for messages and optionally returning them based on the specified action.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PeepEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_PeepEvents(SDL_Event * events, int numevents,\n                   SDL_eventaction action,\n                   Uint32 minType, Uint32 maxType);\n```\n\n----------------------------------------\n\nTITLE: Creating a Haptic Effect with SDL_CreateHapticEffect in C\nDESCRIPTION: This code snippet illustrates the syntax for using the SDL_CreateHapticEffect function. It takes an SDL_Haptic device pointer and an SDL_HapticEffect structure as input and returns the ID of the created effect. On failure, it returns -1, and SDL_GetError() can be called to retrieve error information. The function requires SDL3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateHapticEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_HapticEffectID SDL_CreateHapticEffect(SDL_Haptic *haptic, const SDL_HapticEffect *effect);\n```\n\n----------------------------------------\n\nTITLE: Get List of Windows SDL3 (C)\nDESCRIPTION: Retrieves a NULL-terminated array of SDL_Window pointers. The 'count' parameter is a pointer to an integer that will be filled with the number of windows returned. The returned array should be freed with SDL_free() when it's no longer needed. This function must be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindows.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window ** SDL_GetWindows(int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadFunction Syntax in C\nDESCRIPTION: The SDL_LoadFunction function looks up the address of a named function in a shared object. It takes a shared object handle and the function name as input, returning a pointer to the function or NULL on error. The function pointer becomes invalid after calling SDL_UnloadObject().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_LoadFunction(void *handle,\n                       const char *name);\n```\n\n----------------------------------------\n\nTITLE: SDL_UploadToGPUBuffer Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_UploadToGPUBuffer function, which is used to upload data from a transfer buffer to a GPU buffer. It takes a copy pass handle, source transfer buffer location, destination buffer region, and a boolean indicating whether to cycle the buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UploadToGPUBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UploadToGPUBuffer(\n    SDL_GPUCopyPass *copy_pass,\n    const SDL_GPUTransferBufferLocation *source,\n    const SDL_GPUBufferRegion *destination,\n    bool cycle);\n```\n\n----------------------------------------\n\nTITLE: SDL_DEFINE_COLORSPACE Usage Example in C\nDESCRIPTION: This example demonstrates how to use the SDL_DEFINE_COLORSPACE macro to define the standard sRGB color space. It shows how to provide the color type, range, primaries, transfer characteristics, matrix coefficients, and chroma location.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEFINE_COLORSPACE.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_DEFINE_COLORSPACE(SDL_COLOR_TYPE_RGB,\n                      SDL_COLOR_RANGE_FULL,\n                      SDL_COLOR_PRIMARIES_BT709,\n                      SDL_TRANSFER_CHARACTERISTICS_SRGB,\n                      SDL_MATRIX_COEFFICIENTS_IDENTITY,\n                      SDL_CHROMA_LOCATION_NONE)\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Mapping in C\nDESCRIPTION: Retrieves the current mapping string for the provided SDL_GameController. The returned string must be freed using SDL_free(). If no mapping exists, the function returns NULL, and SDL_GetError() can be called to retrieve more information about the error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerMapping.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GameControllerMapping(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Get Music Artist Tag in C\nDESCRIPTION: Retrieves the artist name from a Mix_Music object. If the music object is NULL, it queries the currently-playing music. Returns the artist name as a const char*, or an empty string if no artist information is available. Requires SDL_mixer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicArtistTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicArtistTag(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Setting Window Position with SDL_SetWindowPosition in C\nDESCRIPTION: The SDL_SetWindowPosition function is used to request that a window's position be set. It takes a window pointer, an x coordinate, and a y coordinate as input. The x and y coordinates can be absolute values or SDL_WINDOWPOS_CENTERED or SDL_WINDOWPOS_UNDEFINED. The function returns true on success and false on failure. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowPosition(SDL_Window *window, int x, int y);\n```\n\n----------------------------------------\n\nTITLE: SDL_strtod Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_strtod function, which parses a double from a null-terminated string.  It takes a string `str` as input and an optional pointer `endp` to store the address of the first invalid character after the parsed number. The function returns the parsed double value or 0 if parsing fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strtod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_strtod(const char *str, char **endp);\n```\n\n----------------------------------------\n\nTITLE: SDL_ResetHint Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ResetHint function in C. It takes a constant character pointer representing the name of the hint as input and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ResetHint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ResetHint(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Including SDL in your project using CMake\nDESCRIPTION: This CMake script demonstrates how to include SDL in a project, supporting both system SDL libraries and vendored SDL libraries, depending on the MYGAME_VENDORED option. It handles linking against SDL2main if it is available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5)\nproject(mygame)\n\n# Create an option to switch between a system sdl library and a vendored sdl library\noption(MYGAME_VENDORED \"Use vendored libraries\" OFF)\n\nif(MYGAME_VENDORED)\n    add_subdirectory(vendored/sdl EXCLUDE_FROM_ALL)\nelse()\n    # 1. Look for a SDL2 package, 2. look for the SDL2 component and 3. fail if none can be found\n    find_package(SDL2 REQUIRED CONFIG REQUIRED COMPONENTS SDL2)\n\n    # 1. Look for a SDL2 package, 2. Look for the SDL2maincomponent and 3. DO NOT fail when SDL2main is not available\n    find_package(SDL2 REQUIRED CONFIG COMPONENTS SDL2main)\nendif()\n\n# Create your game executable target as usual\nadd_executable(mygame WIN32 mygame.c)\n\n# SDL2::SDL2main may or may not be available. It is e.g. required by Windows GUI applications\nif(TARGET SDL2::SDL2main)\n    # It has an implicit dependency on SDL2 functions, so it MUST be added before SDL2::SDL2 (or SDL2::SDL2-static)\n    target_link_libraries(mygame PRIVATE SDL2::SDL2main)\nendif()\n\n# Link to the actual SDL2 library. SDL2::SDL2 is the shared SDL library, SDL2::SDL2-static is the static SDL libarary.\ntarget_link_libraries(mygame PRIVATE SDL2::SDL2)\n```\n\n----------------------------------------\n\nTITLE: SDL_fmod Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_fmod function in C.  It takes two double-precision floating-point numbers as input (x, the numerator, and y, the denominator) and returns the double-precision floating-point remainder of x / y.  The denominator must not be 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_fmod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_fmod(double x, double y);\n```\n\n----------------------------------------\n\nTITLE: TTF_SubString Structure Definition in C\nDESCRIPTION: Defines the structure `TTF_SubString` used in the SDL_ttf library to represent a substring. It contains information such as flags, offset, length, line index, cluster index, and rectangle of the substring. This structure is available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SubString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct TTF_SubString\n{\n    TTF_SubStringFlags flags;   /**< The flags for this substring */\n    int offset;                 /**< The byte offset from the beginning of the text */\n    int length;                 /**< The byte length starting at the offset */\n    int line_index;             /**< The index of the line that contains this substring */\n    int cluster_index;          /**< The internal cluster index, used for quickly iterating */\n    SDL_Rect rect;              /**< The rectangle, relative to the top left of the text, containing the substring */\n} TTF_SubString;\n```\n\n----------------------------------------\n\nTITLE: Set Log Priority - SDL3 - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetLogPriority function in C. It takes the log category (int) and the desired SDL_LogPriority as input parameters and sets the priority for that category.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetLogPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetLogPriority(int category, SDL_LogPriority priority);\n```\n\n----------------------------------------\n\nTITLE: Get Font from Text Object in SDL_ttf (C)\nDESCRIPTION: Retrieves the font used by a text object.  Requires the SDL_ttf library.  The function takes a TTF_Text pointer as input and returns a TTF_Font pointer, or NULL on failure. Call SDL_GetError() for more information about errors.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_GetTextFont(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Lock Texture to Surface with SDL_LockTextureToSurface in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_LockTextureToSurface function to lock a portion of a texture and expose it as an SDL surface. It takes a SDL_Texture, a SDL_Rect (or NULL for the entire texture), and a pointer to an SDL_Surface pointer as input. It returns 0 on success and -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockTextureToSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_LockTextureToSurface(SDL_Texture *texture,\n                    const SDL_Rect *rect,\n                    SDL_Surface **surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_size_mul_check_overflow Syntax - C\nDESCRIPTION: Defines the syntax for the SDL_size_mul_check_overflow function in C. This function multiplies two size_t integers (a and b) and checks for overflow. If no overflow occurs, it stores the result in the memory location pointed to by 'ret' and returns true. Otherwise, it returns false.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_size_mul_check_overflow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_size_mul_check_overflow(size_t a, size_t b, size_t *ret);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawRectsF Syntax in C\nDESCRIPTION: Defines the syntax for SDL_RenderDrawRectsF, a function in SDL2 that draws multiple rectangles on the current rendering target using subpixel precision. It requires a renderer, an array of SDL_FRect structures defining the rectangles, and the number of rectangles to draw. The function returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawRectsF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawRectsF(SDL_Renderer * renderer,\n                         const SDL_FRect * rects,\n                         int count);\n```\n\n----------------------------------------\n\nTITLE: Set Atomic Uint32 Value in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetAtomicU32 function, which atomically sets the value of a 32-bit unsigned integer. It requires the SDL3/SDL_atomic.h header file. The function takes a pointer to an SDL_AtomicU32 and the new Uint32 value, returning the previous value of the atomic variable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAtomicU32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_SetAtomicU32(SDL_AtomicU32 *a, Uint32 v);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick From Player Index in SDL3 (C)\nDESCRIPTION: Retrieves the SDL_Joystick associated with a given player index. The function takes an integer `player_index` as input, which represents the player index to get the joystick for. It returns an SDL_Joystick pointer on success or NULL on failure. Call SDL_GetError() for more information about the failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickFromPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Joystick * SDL_GetJoystickFromPlayerIndex(int player_index);\n```\n\n----------------------------------------\n\nTITLE: Loading JPG Image from SDL_RWops in C\nDESCRIPTION: This code snippet shows the signature of the IMG_LoadJPG_RW function, which is used to load a JPG image directly from an SDL_RWops data stream. The function requires an SDL_RWops pointer as input and returns an SDL_Surface pointer upon success or NULL upon failure. This function is part of the SDL_image library and requires linking against it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadJPG_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadJPG_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_WindowFlags Constant Definitions\nDESCRIPTION: Defines various constants representing different window flags. These flags can be combined using bitwise OR to specify the desired window properties when creating a window or to check the current state of a window. The flags are defined using `SDL_UINT64_C` to ensure proper 64-bit constant initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WindowFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOW_FULLSCREEN           SDL_UINT64_C(0x0000000000000001)    /**< window is in fullscreen mode */\n#define SDL_WINDOW_OPENGL               SDL_UINT64_C(0x0000000000000002)    /**< window usable with OpenGL context */\n#define SDL_WINDOW_OCCLUDED             SDL_UINT64_C(0x0000000000000004)    /**< window is occluded */\n#define SDL_WINDOW_HIDDEN               SDL_UINT64_C(0x0000000000000008)    /**< window is neither mapped onto the desktop nor shown in the taskbar/dock/window list; SDL_ShowWindow() is required for it to become visible */\n#define SDL_WINDOW_BORDERLESS           SDL_UINT64_C(0x0000000000000010)    /**< no window decoration */\n#define SDL_WINDOW_RESIZABLE            SDL_UINT64_C(0x0000000000000020)    /**< window can be resized */\n#define SDL_WINDOW_MINIMIZED            SDL_UINT64_C(0x0000000000000040)    /**< window is minimized */\n#define SDL_WINDOW_MAXIMIZED            SDL_UINT64_C(0x0000000000000080)    /**< window is maximized */\n#define SDL_WINDOW_MOUSE_GRABBED        SDL_UINT64_C(0x0000000000000100)    /**< window has grabbed mouse input */\n#define SDL_WINDOW_INPUT_FOCUS          SDL_UINT64_C(0x0000000000000200)    /**< window has input focus */\n#define SDL_WINDOW_MOUSE_FOCUS          SDL_UINT64_C(0x0000000000000400)    /**< window has mouse focus */\n#define SDL_WINDOW_EXTERNAL             SDL_UINT64_C(0x0000000000000800)    /**< window not created by SDL */\n#define SDL_WINDOW_MODAL                SDL_UINT64_C(0x0000000000001000)    /**< window is modal */\n#define SDL_WINDOW_HIGH_PIXEL_DENSITY   SDL_UINT64_C(0x0000000000002000)    /**< window uses high pixel density back buffer if possible */\n#define SDL_WINDOW_MOUSE_CAPTURE        SDL_UINT64_C(0x0000000000004000)    /**< window has mouse captured (unrelated to MOUSE_GRABBED) */\n#define SDL_WINDOW_MOUSE_RELATIVE_MODE  SDL_UINT64_C(0x0000000000008000)    /**< window has relative mode enabled */\n#define SDL_WINDOW_ALWAYS_ON_TOP        SDL_UINT64_C(0x0000000000010000)    /**< window should always be above others */\n#define SDL_WINDOW_UTILITY              SDL_UINT64_C(0x0000000000020000)    /**< window should be treated as a utility window, not showing in the task bar and window list */\n#define SDL_WINDOW_TOOLTIP              SDL_UINT64_C(0x0000000000040000)    /**< window should be treated as a tooltip and does not get mouse or keyboard focus, requires a parent window */\n#define SDL_WINDOW_POPUP_MENU           SDL_UINT64_C(0x0000000000080000)    /**< window should be treated as a popup menu, requires a parent window */\n#define SDL_WINDOW_KEYBOARD_GRABBED     SDL_UINT64_C(0x0000000000100000)    /**< window has grabbed keyboard input */\n#define SDL_WINDOW_VULKAN               SDL_UINT64_C(0x0000000010000000)    /**< window usable for Vulkan surface */\n#define SDL_WINDOW_METAL                SDL_UINT64_C(0x0000000020000000)    /**< window usable for Metal view */\n#define SDL_WINDOW_TRANSPARENT          SDL_UINT64_C(0x0000000040000000)    /**< window with transparent buffer */\n#define SDL_WINDOW_NOT_FOCUSABLE        SDL_UINT64_C(0x0000000080000000)    /**< window should not be focusable */\n```\n\n----------------------------------------\n\nTITLE: Get Clipboard MIME Types with SDL_GetClipboardMimeTypes in C\nDESCRIPTION: This code snippet shows the syntax of SDL_GetClipboardMimeTypes function, which retrieves a list of MIME types available on the clipboard. The function populates `num_mime_types` with the number of MIME types, if the pointer is not NULL. The caller is responsible for freeing the returned array using `SDL_free`. It requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetClipboardMimeTypes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar ** SDL_GetClipboardMimeTypes(size_t *num_mime_types);\n```\n\n----------------------------------------\n\nTITLE: SDL_DelayPrecise Syntax\nDESCRIPTION: Defines the syntax for the SDL_DelayPrecise function. It takes a Uint64 representing the number of nanoseconds to delay as input and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DelayPrecise.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DelayPrecise(Uint64 ns);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_DPI_SCALING in C\nDESCRIPTION: This C code defines the SDL_HINT_WINDOWS_DPI_SCALING macro. Setting the corresponding hint allows SDL to use DPI-scaled points as the coordinate system on Windows, ensuring windows are appropriately sized on high-DPI displays. It is defined as a string literal with the value \"SDL_WINDOWS_DPI_SCALING\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_DPI_SCALING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_DPI_SCALING \"SDL_WINDOWS_DPI_SCALING\"\n```\n\n----------------------------------------\n\nTITLE: Define Uint16 and related constants in C\nDESCRIPTION: Defines the Uint16 type as an alias for uint16_t and defines the maximum and minimum values for Uint16 using preprocessor macros. This allows for type-safe unsigned 16-bit integer operations within the SDL3 framework. Requires the SDL3/SDL_stdinc.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Uint16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint16_t Uint16;\n#define SDL_MAX_UINT16  ((Uint16)0xFFFF)        /* 65535 */\n#define SDL_MIN_UINT16  ((Uint16)0x0000)        /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Query Audio Device Specifications SDL_mixer C\nDESCRIPTION: This C code snippet shows the syntax of the Mix_QuerySpec function from the SDL_mixer library. It retrieves the frequency, format, and number of channels of the opened audio device. The function takes pointers to integers and a Uint16, which will be populated with the audio device's parameters if the audio device is opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_QuerySpec.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_QuerySpec(int *frequency, Uint16 *format, int *channels);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL macro in C. It defines the string literal used to identify this hint when setting its value using SDL_SetHint or SDL_SetHintWithPriority.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL \"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GamepadBindingType Enum in C\nDESCRIPTION: This code defines the `SDL_GamepadBindingType` enum in C, which specifies the possible types of gamepad bindings: NONE, BUTTON, AXIS, and HAT. This enum is used to map joystick inputs to a generic gamepad layout within the SDL3 framework and has been available since version 3.2.0. It's part of the SDL_GamepadBinding structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadBindingType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GamepadBindingType\n{\n    SDL_GAMEPAD_BINDTYPE_NONE = 0,\n    SDL_GAMEPAD_BINDTYPE_BUTTON,\n    SDL_GAMEPAD_BINDTYPE_AXIS,\n    SDL_GAMEPAD_BINDTYPE_HAT\n} SDL_GamepadBindingType;\n```\n\n----------------------------------------\n\nTITLE: SDL_ISCOLORSPACE_MATRIX_BT2020_NCL Macro Definition in C\nDESCRIPTION: This macro checks if an SDL_Colorspace uses BT2020_NCL matrix coefficients. It takes an SDL_Colorspace value as input and returns true if the color space uses BT2020_NCL coefficients, and false otherwise. It relies on SDL_COLORSPACEMATRIX and SDL_MATRIX_COEFFICIENTS_BT2020_NCL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISCOLORSPACE_MATRIX_BT2020_NCL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISCOLORSPACE_MATRIX_BT2020_NCL(cspace)   (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT2020_NCL)\n```\n\n----------------------------------------\n\nTITLE: Set Text Wrap Whitespace Visibility - SDL_ttf (C)\nDESCRIPTION: Sets whether whitespace should be visible when wrapping a text object. Takes a TTF_Text object and a boolean indicating whether whitespace should be visible. Returns true on success, false on failure. Must be called on the thread that created the text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextWrapWhitespaceVisible.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextWrapWhitespaceVisible(TTF_Text *text, bool visible);\n```\n\n----------------------------------------\n\nTITLE: Get Keyboard Modifier State in SDL3\nDESCRIPTION: This C code snippet demonstrates the syntax for using the SDL_GetModState function in SDL3. It takes no arguments and returns an SDL_Keymod value representing the current modifier key state. This function is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetModState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Keymod SDL_GetModState(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadU32BE Function Signature in C\nDESCRIPTION: Defines the function signature for SDL_ReadU32BE, which reads 32 bits of big-endian data from an SDL_IOStream. It takes a pointer to an SDL_IOStream and a pointer to a Uint32 as input. Returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadU32BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadU32BE(SDL_IOStream *src, Uint32 *value);\n```\n\n----------------------------------------\n\nTITLE: Querying Paused Channel SDL_mixer C\nDESCRIPTION: Queries whether a particular channel is paused. Takes the channel ID as a parameter. Returns 1 if the channel is paused, 0 if it is not.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Paused(int channel);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Solid Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderText_Solid function in C, used for rendering Latin1 text to a new 8-bit surface using SDL_ttf. The function takes a TTF_Font pointer, a const char pointer for the text, and an SDL_Color structure for the foreground color as input and returns an SDL_Surface pointer, which represents the rendered text. Returns NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderText_Solid.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Solid(TTF_Font *font,\n                const char *text, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Iterating over Sensors in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to initialize the sensor subsystem, retrieve a list of available sensors, and log information about each sensor, including its ID, name, type, and platform-specific type. The SDL_INIT_SENSOR flag is used to initialize the sensor subsystem. The SDL_GetSensors() function retrieves the list of sensors. The SDL_Log function logs the sensor information, and SDL_free releases the memory allocated for the sensor list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_35\n\nLANGUAGE: C\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_SENSOR)) {\n        int i, num_sensors;\n        SDL_SensorID *sensors = SDL_GetSensors(&num_sensors);\n        if (sensors) {\n            for (i = 0; i < num_sensors; ++i) {\n                SDL_Log(\"Sensor %\" SDL_PRIu32 \": %s, type %d, platform type %d\",\n                        sensors[i],\n                        SDL_GetSensorNameForID(sensors[i]),\n                        SDL_GetSensorTypeForID(sensors[i]),\n                        SDL_GetSensorNonPortableTypeForID(sensors[i]));\n            }\n            SDL_free(sensors);\n        }\n        SDL_QuitSubSystem(SDL_INIT_SENSOR);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRGB Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetRGB function, used to extract RGB color components from a pixel value. It requires a pixel value, a pointer to SDL_PixelFormatDetails describing the pixel format, an optional palette (can be NULL), and pointers to store the resulting red, green, and blue components. All pointers can be NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRGB.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetRGB(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_DISPLAY_USABLE_BOUNDS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_DISPLAY_USABLE_BOUNDS macro in C. This macro is a string literal that represents the name of the hint. When set, this hint allows overriding the usable bounds of the display.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_DISPLAY_USABLE_BOUNDS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_DISPLAY_USABLE_BOUNDS \"SDL_DISPLAY_USABLE_BOUNDS\"\n```\n\n----------------------------------------\n\nTITLE: Get HID Feature Report in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_hid_get_feature_report to retrieve a feature report from a HID device. It requires a device handle, a buffer for the data, and the length of the buffer. The first byte of the data buffer should be set to the report ID, or zero if the device doesn't use numbered reports.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_get_feature_report.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_feature_report(SDL_hid_device *dev, unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_isxdigit Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_isxdigit function in C. It takes an integer as input, representing a character, and returns a non-zero value if the character is a hexadecimal digit (0-9, A-F, a-f), otherwise it returns zero. The function relies on the SDL3 standard library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isxdigit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isxdigit(int x);\n```\n\n----------------------------------------\n\nTITLE: SDL_acosf Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_acosf function, which computes the arc cosine of a floating-point value. The function takes a single float argument 'x' and returns the arc cosine of 'x' as a float, measured in radians.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_acosf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_acosf(float x);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadU16LE Syntax (C)\nDESCRIPTION: This snippet shows the syntax for the SDL_ReadU16LE function. It reads 16 bits of little-endian data from an SDL_IOStream and stores it in a Uint16 variable.  The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadU16LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadU16LE(SDL_IOStream *src, Uint16 *value);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReportAssertion Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_ReportAssertion function in C. It takes an SDL_AssertData pointer, a function name, a file name, and a line number as input, and returns an SDL_AssertState value. It is defined in SDL3/SDL_assert.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReportAssertion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AssertState SDL_ReportAssertion(SDL_AssertData *data,\n                                const char *func,\n                                const char *file, int line);\n```\n\n----------------------------------------\n\nTITLE: Set Text Direction C\nDESCRIPTION: This function sets the direction to be used for text shaping in a text object. It takes a TTF_Text pointer and a TTF_Direction value as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_88\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextDirection(TTF_Text *text, TTF_Direction direction);\n```\n\n----------------------------------------\n\nTITLE: Closing an SDL_ttf Font in C\nDESCRIPTION: This code snippet shows the syntax for closing an SDL_ttf font using the TTF_CloseFont function. The function takes a pointer to a TTF_Font structure as input, which represents the font to be disposed of. It frees any resources associated with the font. It is safe to call this function on a NULL font pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CloseFont.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_CloseFont(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS macro to represent the hint string. This hint controls whether the HIDAPI driver is used for XBox 360 wireless controllers. Set this before initializing joysticks/gamepads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS \"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS\"\n```\n\n----------------------------------------\n\nTITLE: Query Game Controller LED (SDL_GameControllerHasLED) in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GameControllerHasLED function to determine if a game controller has an LED. The function takes an SDL_GameController pointer as input and returns SDL_TRUE if the controller has an LED and SDL_FALSE otherwise. It requires SDL 2.0.14 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerHasLED.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_bool SDL_GameControllerHasLED(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Check for ARM SIMD CPU feature using SDL_HasARMSIMD in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_HasARMSIMD function, which checks if the CPU has ARM SIMD (ARMv6) features. It takes no arguments and returns a boolean value indicating the presence of ARM SIMD support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasARMSIMD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasARMSIMD(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GDKSuspendComplete Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GDKSuspendComplete function in C. It's a void function that takes no arguments. It is used specifically for Xbox GDK to signal the suspend operation is complete.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GDKSuspendComplete.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_GDKSuspendComplete(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_size_mul_overflow Function Signature in C\nDESCRIPTION: This code snippet shows the function signature of `SDL_size_mul_overflow` which checks for size_t multiplication overflow. It takes two size_t values (a and b) as input and a pointer to a size_t variable (ret). If the multiplication overflows, it returns -1; otherwise, it stores the result in *ret and returns 0. This function is available since SDL 2.24.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_size_mul_overflow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE int SDL_size_mul_overflow (size_t a, size_t b, size_t *ret);\n```\n\n----------------------------------------\n\nTITLE: Convert GUID String to SDL_JoystickGUID in C\nDESCRIPTION: Converts a string representation of a GUID to an SDL_JoystickGUID structure. The function accepts a const char* as input and returns the SDL_JoystickGUID structure. No error checking is performed, so invalid GUID strings may produce unusable GUIDs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetGUIDFromString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickGUID SDL_JoystickGetGUIDFromString(const char *pchGUID);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN in C\nDESCRIPTION: This snippet defines the SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN macro, used to control window activation behavior when SDL_ShowWindow is called. It assigns the string \"SDL_WINDOW_ACTIVATE_WHEN_SHOWN\" to the macro, which is the key used to set or get the hint value. The value can be either \"0\" (disabled) or \"1\" (enabled, default).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN \"SDL_WINDOW_ACTIVATE_WHEN_SHOWN\"\n```\n\n----------------------------------------\n\nTITLE: Defining Direct3D 11 Debug Hint in SDL\nDESCRIPTION: This C macro defines the SDL_HINT_RENDER_DIRECT3D11_DEBUG hint, which is used to control whether Direct3D 11's debug layer is enabled. The hint accepts values \"0\" to disable and \"1\" to enable. It is defined in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_DIRECT3D11_DEBUG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_DIRECT3D11_DEBUG    \"SDL_RENDER_DIRECT3D11_DEBUG\"\n```\n\n----------------------------------------\n\nTITLE: SDL_realloc_func Typedef Definition in C\nDESCRIPTION: Defines the `SDL_realloc_func` callback as a function pointer type. This type is used to provide custom memory allocation functions to SDL through SDL_SetMemoryFunctions. The callback receives a pointer to the memory to be reallocated (`mem`) and the new size (`size`).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_realloc_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *(SDLCALL *SDL_realloc_func)(void *mem, size_t size);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Blended_Wrapped Syntax (C)\nDESCRIPTION: Defines the syntax for the TTF_RenderText_Blended_Wrapped function in C. This function takes a font, text, text length, foreground color, and wrap width as input and returns a pointer to a new SDL_Surface containing the rendered text, or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderText_Blended_Wrapped.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderText_Blended_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUTO_UPDATE_JOYSTICKS in C\nDESCRIPTION: This code defines the SDL_HINT_AUTO_UPDATE_JOYSTICKS macro, which represents the string key used to control automatic joystick updates. It's used with SDL_SetHint to configure SDL's behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUTO_UPDATE_JOYSTICKS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUTO_UPDATE_JOYSTICKS  \"SDL_AUTO_UPDATE_JOYSTICKS\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_INFINITY Macro in C\nDESCRIPTION: This macro defines SDL_HAPTIC_INFINITY as a constant representing an infinite number of repetitions for haptic effects. It is used as a parameter in functions like SDL_RunHapticEffect to play a haptic effect an infinite number of times. The macro is defined as an unsigned 32-bit integer with a maximum value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_INFINITY.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HAPTIC_INFINITY   4294967295U\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_RELATIVE_SCALING in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MOUSE_RELATIVE_SCALING macro in C. This hint controls whether relative mouse motion is scaled according to DPI scaling and logical size. Possible values are \"0\" (unaffected) and \"1\" (scaled).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_RELATIVE_SCALING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_SCALING \"SDL_MOUSE_RELATIVE_SCALING\"\n```\n\n----------------------------------------\n\nTITLE: SDL_qsort Syntax\nDESCRIPTION: This snippet shows the syntax for the SDL_qsort function. It takes a pointer to the base of the array, the number of elements, the size of each element, and a comparison function as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_qsort.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_qsort(void *base, size_t nmemb, size_t size, SDL_CompareCallback compare);\n```\n\n----------------------------------------\n\nTITLE: Drawing a Rectangle with SDL_RenderDrawRect in C\nDESCRIPTION: The SDL_RenderDrawRect function draws a rectangle on the current rendering target using the specified SDL_Renderer. It takes a pointer to an SDL_Renderer and an SDL_Rect structure as input. The function returns 0 on success and a negative error code on failure. The rect parameter can be NULL to outline the entire rendering target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawRect(SDL_Renderer * renderer,\n                       const SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertPixels Function Signature in C\nDESCRIPTION: This code snippet shows the function signature of SDL_ConvertPixels. It takes the width and height of the pixel block, the source and destination pixel formats, pointers to the source and destination pixel data, and the pitches of the source and destination surfaces as parameters. The function returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ConvertPixels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_ConvertPixels(int width, int height,\n                      Uint32 src_format,\n                      const void * src, int src_pitch,\n                      Uint32 dst_format,\n                      void * dst, int dst_pitch);\n```\n\n----------------------------------------\n\nTITLE: Render Shaded Text C\nDESCRIPTION: This function renders UTF-8 text at high quality to a new 8-bit surface with shading. It takes a TTF_Font, the UTF-8 text, text length, an SDL_Color for the foreground, and an SDL_Color for the background. It returns an SDL_Surface or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_60\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Shaded(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Get Initial Joystick Axis State in C\nDESCRIPTION: Retrieves the initial state of a specified axis control on a joystick. The function takes an SDL_Joystick pointer, an axis index, and a pointer to a Sint16 to store the initial state. Returns true if the axis has an initial value, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickAxisInitialState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetJoystickAxisInitialState(SDL_Joystick *joystick, int axis, Sint16 *state);\n```\n\n----------------------------------------\n\nTITLE: IMG_SaveJPG_IO Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the IMG_SaveJPG_IO function in C. It takes an SDL_Surface pointer, an SDL_IOStream pointer, a boolean indicating whether to close the IO stream, and an integer representing the JPEG quality as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_SaveJPG_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveJPG_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio, int quality);\n```\n\n----------------------------------------\n\nTITLE: Opening a Gamepad in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_OpenGamepad function in SDL3. It takes a joystick instance ID as input and returns a gamepad identifier, or NULL if an error occurs. This function requires including the SDL3/SDL_gamepad.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenGamepad.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Gamepad * SDL_OpenGamepad(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Pixel Format Name with SDL_GetPixelFormatName in C\nDESCRIPTION: Retrieves the human-readable name of a pixel format using SDL_GetPixelFormatName. The function takes a Uint32 representing the pixel format and returns a const char* with the name. If the pixel format is not recognized, it returns SDL_PIXELFORMAT_UNKNOWN.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPixelFormatName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetPixelFormatName(Uint32 format);\n```\n\n----------------------------------------\n\nTITLE: Hide SDL Window in C\nDESCRIPTION: Hides the specified SDL window. This function takes an SDL_Window pointer as input and makes the window invisible. It requires the SDL2 library to be included and initialized. The function does not return any value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HideWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_HideWindow(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Get SDL_image Version in C\nDESCRIPTION: This C code snippet shows the syntax of the IMG_Version function, which retrieves the version of the dynamically linked SDL_image library. The function takes no arguments and returns an integer representing the SDL_image version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_Version.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_Version(void);\n```\n\n----------------------------------------\n\nTITLE: JPG Data Detection in SDL_IOStream (IMG_isJPG)\nDESCRIPTION: This function checks if the data within an SDL_IOStream is a JPG image. It reads a minimal amount of data to identify the file type and resets the stream's position.  It requires a seekable/readable SDL_IOStream as input and returns a boolean indicating whether the data is JPG or not. The function is part of the SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isJPG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isJPG(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Destroying a GPU Device in SDL3 with SDL_DestroyGPUDevice\nDESCRIPTION: Destroys a GPU context previously created with SDL_CreateGPUDevice. It releases the resources associated with the specified SDL_GPUDevice. The function takes a pointer to the SDL_GPUDevice structure as its only argument.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyGPUDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyGPUDevice(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: Writing to a HID Device using SDL_hid_write (C)\nDESCRIPTION: This code snippet demonstrates the syntax for using SDL_hid_write to send data to a HID device. The function requires a device handle, a data buffer containing the report ID as the first byte, and the length of the data buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_write.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_write(SDL_hid_device *dev, const unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_FilterEvents Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_FilterEvents function. This function applies a given filter to the current event queue, removing events for which the filter returns 0. It requires a filter function and a user-defined data pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FilterEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FilterEvents(SDL_EventFilter filter,\n                      void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUComputePipelineCreateInfo Structure Definition in C\nDESCRIPTION: Defines the structure SDL_GPUComputePipelineCreateInfo used to specify parameters for creating a compute pipeline state. It includes fields for shader code size, code pointer, entry point, format, number of samplers, storage textures and buffers (readonly and readwrite), uniform buffers, thread counts, and properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUComputePipelineCreateInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUComputePipelineCreateInfo\n{\n    size_t code_size;                       /**< The size in bytes of the compute shader code pointed to. */\n    const Uint8 *code;                      /**< A pointer to compute shader code. */\n    const char *entrypoint;                 /**< A pointer to a null-terminated UTF-8 string specifying the entry point function name for the shader. */\n    SDL_GPUShaderFormat format;             /**< The format of the compute shader code. */\n    Uint32 num_samplers;                    /**< The number of samplers defined in the shader. */\n    Uint32 num_readonly_storage_textures;   /**< The number of readonly storage textures defined in the shader. */\n    Uint32 num_readonly_storage_buffers;    /**< The number of readonly storage buffers defined in the shader. */\n    Uint32 num_readwrite_storage_textures;  /**< The number of read-write storage textures defined in the shader. */\n    Uint32 num_readwrite_storage_buffers;   /**< The number of read-write storage buffers defined in the shader. */\n    Uint32 num_uniform_buffers;             /**< The number of uniform buffers defined in the shader. */\n    Uint32 threadcount_x;                   /**< The number of threads in the X dimension. This should match the value in the shader. */\n    Uint32 threadcount_y;                   /**< The number of threads in the Y dimension. This should match the value in the shader. */\n    Uint32 threadcount_z;                   /**< The number of threads in the Z dimension. This should match the value in the shader. */\n\n    SDL_PropertiesID props;                 /**< A properties ID for extensions. Should be 0 if no extensions are needed. */\n} SDL_GPUComputePipelineCreateInfo;\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateEnvironment Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateEnvironment function in C, including the parameter and the return type.  The `populated` parameter determines whether the environment is initialized from the C runtime or created empty. The function returns a pointer to the new SDL_Environment or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateEnvironment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Environment * SDL_CreateEnvironment(bool populated);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurfaceTiledWithScale Syntax in C\nDESCRIPTION: This C code snippet shows the syntax of the SDL_BlitSurfaceTiledWithScale function. It requires SDL3 and the SDL_surface.h header file. The function takes two SDL_Surface pointers (source and destination), two SDL_Rect pointers (source and destination rectangles), a float for scaling, and an SDL_ScaleMode enum.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitSurfaceTiledWithScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_BlitSurfaceTiledWithScale(SDL_Surface *src, const SDL_Rect *srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface *dst, const SDL_Rect *dstrect);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV Macro Definition in C\nDESCRIPTION: This macro simplifies loading a WAV file from disk. It uses SDL_RWFromFile to open the file with read-binary mode (\"rb\") and then calls SDL_LoadWAV_RW to load the audio data. The loaded audio specification, buffer, and length are returned via the provided pointers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadWAV.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_LoadWAV(file, spec, audio_buf, audio_len) \\\n    SDL_LoadWAV_RW(SDL_RWFromFile(file, \"rb\"),1, spec,audio_buf,audio_len)\n```\n\n----------------------------------------\n\nTITLE: Get Display Mode in SDL2 (C)\nDESCRIPTION: Retrieves information about a specific display mode using SDL_GetDisplayMode. It takes a display index, a mode index, and a pointer to an SDL_DisplayMode structure as input. Upon successful execution, the SDL_DisplayMode structure will be populated with the requested display mode's information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDisplayMode(int displayIndex, int modeIndex,\n                       SDL_DisplayMode * mode);\n```\n\n----------------------------------------\n\nTITLE: SDL_MapSurfaceRGB Syntax\nDESCRIPTION: Defines the syntax for the SDL_MapSurfaceRGB function which takes a surface and RGB values as input and returns a pixel value (Uint32). The surface provides the pixel format and palette for the color mapping.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MapSurfaceRGB.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_MapSurfaceRGB(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);\n```\n\n----------------------------------------\n\nTITLE: SDL_FillRect Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_FillRect function. It takes a destination SDL_Surface, a rectangle (SDL_Rect), and a Uint32 color as input. It returns an integer, 0 for success and a negative error code for failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FillRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_FillRect\n    (SDL_Surface * dst, const SDL_Rect * rect, Uint32 color);\n```\n\n----------------------------------------\n\nTITLE: Get Window ICC Profile using SDL_GetWindowICCProfile in C\nDESCRIPTION: This code snippet shows how to use the SDL_GetWindowICCProfile function to retrieve the ICC profile data associated with a given SDL window. The function returns a pointer to the raw ICC profile data, and the size of the data is stored in the 'size' parameter. The returned data must be freed using SDL_free after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowICCProfile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_GetWindowICCProfile(SDL_Window * window, size_t* size);\n```\n\n----------------------------------------\n\nTITLE: Mix_Playing Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_Playing function in C. It takes an integer representing the channel number as input and returns an integer indicating whether the channel is playing or not. SDL_mixer.h must be included to use this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Playing.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Playing(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_IsJoystickVirtual Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_IsJoystickVirtual function in C. It takes an SDL_JoystickID as input, representing the instance ID of the joystick, and returns a boolean value indicating whether the joystick is virtual or not.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsJoystickVirtual.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsJoystickVirtual(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetJoystickPlayerIndex Syntax (C)\nDESCRIPTION: Defines the syntax for SDL_GetJoystickPlayerIndex, a function that retrieves the player index of an opened joystick. It takes a pointer to an SDL_Joystick as input and returns an integer representing the player index.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetJoystickPlayerIndex(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Defining Extended SDL Keycodes in C\nDESCRIPTION: This code snippet defines extended keycodes, which represent keys that don't necessarily map to a standard scancode or unicode point.  These include keys like Left Tab, Level 5 Shift, and Meta/Hyper keys. These definitions provide a way to access more specialized keyboard input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keycode.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\n#define SDLK_LEFT_TAB               0x20000001u /**< Extended key Left Tab */\n#define SDLK_LEVEL5_SHIFT           0x20000002u /**< Extended key Level 5 Shift */\n#define SDLK_MULTI_KEY_COMPOSE      0x20000003u /**< Extended key Multi-key Compose */\n#define SDLK_LMETA                  0x20000004u /**< Extended key Left Meta */\n#define SDLK_RMETA                  0x20000005u /**< Extended key Right Meta */\n#define SDLK_LHYPER                 0x20000006u /**< Extended key Left Hyper */\n#define SDLK_RHYPER                 0x20000007u /**< Extended key Right Hyper */\n```\n\n----------------------------------------\n\nTITLE: Get GPU Device Properties in C\nDESCRIPTION: This code snippet shows the syntax for retrieving GPU device properties using SDL_GetGPUDeviceProperties in C. It takes an SDL_GPUDevice pointer as input and returns an SDL_PropertiesID, which can then be used to access the device's properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGPUDeviceProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetGPUDeviceProperties(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES hint as a string literal. This hint controls whether SDL uses Spaces for fullscreen windows on macOS. It must be set before any windows are created.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES    \"SDL_VIDEO_MAC_FULLSCREEN_SPACES\"\n```\n\n----------------------------------------\n\nTITLE: Get vkGetInstanceProcAddr Function Address in C\nDESCRIPTION: Retrieves the address of the `vkGetInstanceProcAddr` function using SDL. This function must be called after loading the Vulkan library or creating an SDL window with the `SDL_WINDOW_VULKAN` flag. Returns a void pointer to the function or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Vulkan_GetVkGetInstanceProcAddr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_Vulkan_GetVkGetInstanceProcAddr(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateCondition Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_CreateCondition in C.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateCondition.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Condition * SDL_CreateCondition(void);\n```\n\n----------------------------------------\n\nTITLE: Mix_LoadMUS_RW Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_LoadMUS_RW function, which loads a supported audio format into a music object from an SDL_RWops stream. It takes an SDL_RWops pointer and an integer (freesrc) indicating whether to close/free the SDL_RWops after reading. It returns a pointer to a Mix_Music object.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_LoadMUS_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Music * Mix_LoadMUS_RW(SDL_RWops *src, int freesrc);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Path by ID - C\nDESCRIPTION: Retrieves the implementation-dependent path of a joystick using its instance ID. This function can be called before any joysticks are opened. It returns a const char* representing the joystick's path or NULL if no path is found. Requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickPathForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetJoystickPathForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Device Specification in C\nDESCRIPTION: Retrieves the preferred audio format of a specific audio device.  It takes an index, a flag indicating capture or output device, and a pointer to an SDL_AudioSpec struct.  Returns 0 on success, nonzero on error, populating the provided SDL_AudioSpec with audio format details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAudioDeviceSpec.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetAudioDeviceSpec(int index,\n                           int iscapture,\n                           SDL_AudioSpec *spec);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasMMX Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasMMX function in C. The function takes no arguments and returns a boolean value indicating whether the CPU supports MMX features. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasMMX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasMMX(void);\n```\n\n----------------------------------------\n\nTITLE: Setting GL Attributes in C\nDESCRIPTION: This code snippet shows how to explicitly set OpenGL attributes before creating a window.  It configures the red, green, and blue buffer sizes. This may improve compatibility on some devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nSDL_GL_SetAttribute(SDL_GL_RED_SIZE, 5);\nSDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 6);\nSDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 5);\n```\n\n----------------------------------------\n\nTITLE: Building SDL with MinGW-w64 using CMake\nDESCRIPTION: These shell commands demonstrate how to build and install SDL using CMake and the Ninja build system with the MinGW-w64 toolchain on Windows. It involves creating a build directory, configuring CMake with the appropriate toolchain file, building the project, and installing it to a specified prefix. Requires CMake, Ninja and Git to be installed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/windows.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmkdir build\ncmake -S . -B build -G Ninja -DCMAKE_TOOLCHAIN_FILE=build-scripts/cmake-toolchain-mingw64-x86_64.cmake\ncmake --build build --parallel\ncmake --install build --prefix C:/Libraries\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenIO Syntax\nDESCRIPTION: This C code snippet shows the function signature for SDL_OpenIO, which is used to create a custom SDL_IOStream. It takes a pointer to an SDL_IOStreamInterface, which defines the custom I/O operations, and a void pointer for user-defined data.  It returns a pointer to the newly created SDL_IOStream or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStream * SDL_OpenIO(const SDL_IOStreamInterface *iface, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_GLattr Enum in C\nDESCRIPTION: This code snippet defines the SDL_GLattr enum in C. This enum lists the available OpenGL attributes that can be configured using SDL_GL_SetAttribute before creating an SDL window for OpenGL rendering. These attributes control aspects such as color buffer sizes, depth buffer, double buffering, multisampling, and OpenGL context versions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GLattr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GLattr\n{\n    SDL_GL_RED_SIZE,                    /**< the minimum number of bits for the red channel of the color buffer; defaults to 3. */\n    SDL_GL_GREEN_SIZE,                  /**< the minimum number of bits for the green channel of the color buffer; defaults to 3. */\n    SDL_GL_BLUE_SIZE,                   /**< the minimum number of bits for the blue channel of the color buffer; defaults to 2. */\n    SDL_GL_ALPHA_SIZE,                  /**< the minimum number of bits for the alpha channel of the color buffer; defaults to 0. */\n    SDL_GL_BUFFER_SIZE,                 /**< the minimum number of bits for frame buffer size; defaults to 0. */\n    SDL_GL_DOUBLEBUFFER,                /**< whether the output is single or double buffered; defaults to double buffering on. */\n    SDL_GL_DEPTH_SIZE,                  /**< the minimum number of bits in the depth buffer; defaults to 16. */\n    SDL_GL_STENCIL_SIZE,                /**< the minimum number of bits in the stencil buffer; defaults to 0. */\n    SDL_GL_ACCUM_RED_SIZE,              /**< the minimum number of bits for the red channel of the accumulation buffer; defaults to 0. */\n    SDL_GL_ACCUM_GREEN_SIZE,            /**< the minimum number of bits for the green channel of the accumulation buffer; defaults to 0. */\n    SDL_GL_ACCUM_BLUE_SIZE,             /**< the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0. */\n    SDL_GL_ACCUM_ALPHA_SIZE,            /**< the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0. */\n    SDL_GL_STEREO,                      /**< whether the output is stereo 3D; defaults to off. */\n    SDL_GL_MULTISAMPLEBUFFERS,          /**< the number of buffers used for multisample anti-aliasing; defaults to 0. */\n    SDL_GL_MULTISAMPLESAMPLES,          /**< the number of samples used around the current pixel used for multisample anti-aliasing. */\n    SDL_GL_ACCELERATED_VISUAL,          /**< set to 1 to require hardware acceleration, set to 0 to force software rendering; defaults to allow either. */\n    SDL_GL_RETAINED_BACKING,            /**< not used (deprecated). */\n    SDL_GL_CONTEXT_MAJOR_VERSION,       /**< OpenGL context major version. */\n    SDL_GL_CONTEXT_MINOR_VERSION,       /**< OpenGL context minor version. */\n    SDL_GL_CONTEXT_EGL,                 /**< deprecated: set SDL_GL_CONTEXT_PROFILE_MASK to SDL_GL_CONTEXT_PROFILE_ES to enable instead. */\n    SDL_GL_CONTEXT_FLAGS,               /**< some combination of 0 or more of elements of the SDL_GLcontextFlag enumeration; defaults to 0. */\n    SDL_GL_CONTEXT_PROFILE_MASK,        /**< type of GL context (Core, Compatibility, ES). See SDL_GLprofile; default value depends on platform. */\n    SDL_GL_SHARE_WITH_CURRENT_CONTEXT,  /**< OpenGL context sharing; defaults to 0. */\n    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,    /**< requests sRGB capable visual; defaults to 0. (>= SDL 2.0.1) */\n    SDL_GL_CONTEXT_RELEASE_BEHAVIOR,    /**< sets context the release behavior; defaults to 1. (>= SDL 2.0.4) */\n    SDL_GL_CONTEXT_RESET_NOTIFICATION,\n    SDL_GL_CONTEXT_NO_ERROR,\n    SDL_GL_FLOATBUFFERS\n} SDL_GLattr;\n```\n\n----------------------------------------\n\nTITLE: SDL_strupr Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_strupr function, which converts a string to uppercase. It takes a character pointer as input and returns a character pointer to the same string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strupr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strupr(char *str);\n```\n\n----------------------------------------\n\nTITLE: Register Audio Effect Function - C\nDESCRIPTION: This code snippet demonstrates the syntax for registering a special effect function using Mix_RegisterEffect in SDL_mixer. It specifies the channel, the effect callback function, the effect done callback function, and an argument to be passed to the callbacks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_RegisterEffect.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_RegisterEffect(int chan, Mix_EffectFunc_t f, Mix_EffectDone_t d, void *arg);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticRumblePlay Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_HapticRumblePlay function, which is used to play a rumble effect on a specified haptic device. The function requires a pointer to an SDL_Haptic structure, a float representing the strength of the rumble (0-1), and a Uint32 representing the length of the rumble in milliseconds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticRumblePlay.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticRumblePlay(SDL_Haptic * haptic, float strength, Uint32 length );\n```\n\n----------------------------------------\n\nTITLE: Get OpenGL Swap Interval in C\nDESCRIPTION: Retrieves the swap interval for the current OpenGL context using SDL_GL_GetSwapInterval. The function returns 0 for no vertical retrace synchronization, 1 for synchronized buffer swap, and -1 for immediate late swaps. Check SDL_GetError() for further details on error cases.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_GetSwapInterval.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GL_GetSwapInterval(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ttf Renderer Text Engine Properties (C)\nDESCRIPTION: Defines the properties that can be used when creating a renderer text engine using TTF_CreateRendererTextEngineWithProperties. These properties include specifying the renderer to use and the size of the texture atlas. The macros provide string identifiers for accessing these properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateRendererTextEngineWithProperties.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define TTF_PROP_RENDERER_TEXT_ENGINE_RENDERER                 \"SDL_ttf.renderer_text_engine.create.renderer\"\n#define TTF_PROP_RENDERER_TEXT_ENGINE_ATLAS_TEXTURE_SIZE       \"SDL_ttf.renderer_text_engine.create.atlas_texture_size\"\n```\n\n----------------------------------------\n\nTITLE: TTF_SizeText Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_SizeText function in C.  It takes a TTF_Font pointer, a const char pointer for the text (Latin1 encoded), and two int pointers to store the width and height. It returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SizeText.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_SizeText(TTF_Font *font, const char *text, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Set Relative Mouse Transform Callback - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetRelativeMouseTransform function. It takes a callback function (SDL_MouseMotionTransformCallback) and a userdata pointer as input. The callback will be used to transform relative mouse motion. Passing NULL for the callback restores the default behavior. Returns true on success, false on failure. Must be called before enabling relative mouse mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRelativeMouseTransform.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRelativeMouseTransform(SDL_MouseMotionTransformCallback callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowWindowSystemMenu Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ShowWindowSystemMenu function in C. It takes an SDL_Window pointer, an x coordinate, and a y coordinate as input, and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowWindowSystemMenu.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ShowWindowSystemMenu(SDL_Window *window, int x, int y);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadFileAsync Syntax in C\nDESCRIPTION: Defines the syntax for SDL_LoadFileAsync, a function that loads all the data from a file path asynchronously. It takes the file path, an SDL_AsyncIOQueue, and a user-defined pointer as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadFileAsync.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_LoadFileAsync(const char *file, SDL_AsyncIOQueue *queue, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyTexture Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_DestroyTexture function. It takes a pointer to an SDL_Texture as input and returns void. It's used to destroy a texture, freeing the memory it occupies. Passing a NULL texture will result in an SDL error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DestroyTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyTexture(SDL_Texture * texture);\n```\n\n----------------------------------------\n\nTITLE: SDL_SensorEvent Structure Definition in C\nDESCRIPTION: Defines the structure of SDL_SensorEvent which holds data related to sensor events. It contains fields for the event type (SDL_SENSORUPDATE), timestamp (milliseconds), sensor instance ID, sensor data (float array of size 6), and a timestamp in microseconds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_SensorEvent\n{\n    Uint32 type;        /**< SDL_SENSORUPDATE */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Sint32 which;       /**< The instance ID of the sensor */\n    float data[6];      /**< Up to 6 values from the sensor - additional values can be queried using SDL_SensorGetData() */\n    Uint64 timestamp_us; /**< The timestamp of the sensor reading in microseconds, if the hardware provides this information. */\n} SDL_SensorEvent;\n```\n\n----------------------------------------\n\nTITLE: TTF_CreateGPUTextEngineWithProperties declaration in C\nDESCRIPTION: This function creates a text engine for drawing text with the SDL GPU API, using the properties specified by the SDL_PropertiesID parameter. The function returns a TTF_TextEngine object or NULL on failure, with SDL_GetError() providing more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateGPUTextEngineWithProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateGPUTextEngineWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RENDER_LOGICAL_SIZE_MODE in C\nDESCRIPTION: Defines the SDL_HINT_RENDER_LOGICAL_SIZE_MODE macro, which represents the name of the hint used to control the scaling policy for SDL_RenderSetLogicalSize. This hint can be set to \"0\" or \"letterbox\" for letterboxing, or \"1\" or \"overscan\" to fill the entire screen, potentially drawing edges offscreen. By default, letterbox scaling is used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_LOGICAL_SIZE_MODE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_LOGICAL_SIZE_MODE       \"SDL_RENDER_LOGICAL_SIZE_MODE\"\n```\n\n----------------------------------------\n\nTITLE: SDL 2.0 Setting Render Scale Quality and Logical Size\nDESCRIPTION: This code snippet sets the render scale quality hint to \"linear\" for smoother scaling and sets the logical rendering size. This allows for scaling a smaller resolution to a larger display while maintaining aspect ratio and using the GPU.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, \"linear\");  // make the scaled rendering look smoother.\nSDL_RenderSetLogicalSize(sdlRenderer, 640, 480);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddEventWatch Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_AddEventWatch function in C. It takes an SDL_EventFilter function and a void pointer as arguments, and returns a boolean indicating success or failure. The filter function will be called when an event occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddEventWatch.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_AddEventWatch(SDL_EventFilter filter, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Get Window Title in SDL2 (C)\nDESCRIPTION: This snippet shows the syntax for the SDL_GetWindowTitle function, which retrieves the title of a specified SDL_Window. It returns a pointer to a UTF-8 encoded string containing the window title or an empty string if no title is set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowTitle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetWindowTitle(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Get Natural Display Orientation in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetNaturalDisplayOrientation function in SDL3. It takes an SDL_DisplayID as input and returns an SDL_DisplayOrientation enum value, indicating the natural orientation of the display. It should only be called from the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNaturalDisplayOrientation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(SDL_DisplayID displayID);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap32 Function Definition in C\nDESCRIPTION: Defines the SDL_Swap32 function, which swaps the byte order of a 32-bit unsigned integer. It is an inline function. It takes a 32-bit unsigned integer 'x' as input and returns the byte-swapped value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Swap32.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_FORCE_INLINE Uint32 SDL_Swap32(Uint32 x);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetNextTextSubString Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetNextTextSubString function, which retrieves the next substring in a TTF_Text object. It takes a TTF_Text pointer, a const TTF_SubString pointer representing the current substring, and a TTF_SubString pointer to store the next substring.  The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetNextTextSubString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetNextTextSubString(TTF_Text *text, const TTF_SubString *substring, TTF_SubString *next);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetFloatProperty Syntax\nDESCRIPTION: Retrieves a floating-point property value from an SDL_PropertiesID object by name. If the property doesn't exist or is not a floating-point type, it returns the provided default value. It is safe to call from any thread and requires an SDL_PropertiesID, property name (const char *), and a default float value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetFloatProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetFloatProperty(SDL_PropertiesID props, const char *name, float default_value);\n```\n\n----------------------------------------\n\nTITLE: SDL_MixAudio Signature in C\nDESCRIPTION: This code snippet shows the function signature of SDL_MixAudio. It takes a destination audio buffer, a source audio buffer, the length of the buffer, and the volume as parameters. The destination buffer is modified in place.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MixAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_MixAudio(Uint8 * dst, const Uint8 * src,\n                  Uint32 len, int volume);\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_GetDrawableSize Syntax - C\nDESCRIPTION: Retrieves the size of the window's underlying drawable dimensions in pixels using SDL and Vulkan. The function requires a pointer to an SDL_Window and pointers to integers where the width and height will be stored.  This function is available since SDL 2.0.6.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Vulkan_GetDrawableSize.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_Vulkan_GetDrawableSize(SDL_Window * window,\n                                int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Updating a Streaming Texture with Pixel Data in SDL2 (C)\nDESCRIPTION: This snippet shows how to update a streaming SDL_Texture with pixel data from a memory buffer. SDL_UpdateTexture copies the contents of 'myPixels' to the texture. The pitch (bytes per row) is also specified to ensure correct memory layout.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nSDL_UpdateTexture(sdlTexture, NULL, myPixels, 640 * sizeof (Uint32));\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUBlitRegion Structure Definition in C\nDESCRIPTION: Defines the SDL_GPUBlitRegion structure, used to specify a region of a texture for blitting. It contains members for the texture, mip level, layer/depth plane, and the rectangular area to be blitted.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBlitRegion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUBlitRegion\n{\n    SDL_GPUTexture *texture;  /**< The texture. */\n    Uint32 mip_level;             /**< The mip level index of the region. */\n    Uint32 layer_or_depth_plane;  /**< The layer index or depth plane of the region. This value is treated as a layer index on 2D array and cube textures, and as a depth plane on 3D textures. */\n    Uint32 x;                     /**< The left offset of the region. */\n    Uint32 y;                     /**< The top offset of the region.  */\n    Uint32 w;                     /**< The width of the region. */\n    Uint32 h;                     /**< The height of the region. */\n} SDL_GPUBlitRegion;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_DOUBLE_CLICK_TIME macro, which represents the hint for setting the mouse double-click time.  This hint can be set at any time to adjust the double-click interval in milliseconds. It requires the SDL3/SDL_hints.h header file to be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_DOUBLE_CLICK_TIME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME \"SDL_MOUSE_DOUBLE_CLICK_TIME\"\n```\n\n----------------------------------------\n\nTITLE: Set Joystick Player Index in SDL3 (C)\nDESCRIPTION: This function sets the player index of an opened SDL joystick. The joystick parameter is the joystick to modify, and player_index is the player index to assign, or -1 to clear the index. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetJoystickPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetJoystickPlayerIndex(SDL_Joystick *joystick, int player_index);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_PAUSE Macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_PAUSE macro as a bit flag. This flag indicates that the haptic device is capable of being paused. The macro is defined as a bitwise left shift of 1 by 19 bits. This macro is used to check the capabilities of the haptic device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_PAUSE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_PAUSE      (1u<<19)\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertSurfaceFormat Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ConvertSurfaceFormat function in C. This function converts an existing SDL_Surface to a new surface with a specified pixel format enum. The flags parameter is unused and should be set to 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ConvertSurfaceFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface* SDL_ConvertSurfaceFormat\n    (SDL_Surface * src, Uint32 pixel_format, Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: Fading Out Channel SDL_mixer C\nDESCRIPTION: Halts a specified channel after fading it out over a certain duration. The function takes the channel ID and fade-out duration in milliseconds as parameters. Returns 0 on success, -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeOutChannel(int which, int ms);\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop Start Time - SDL_mixer - C\nDESCRIPTION: Retrieves the loop start time of a music stream. The function takes a pointer to a `Mix_Music` object as input and returns the loop start time in seconds as a double. If the feature is unsupported or not used, it returns -1.0. If a NULL value is passed, it returns the duration of the current playing music.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicLoopStartTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicLoopStartTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_WINDOWPOS_ISCENTERED Macro Definition in C\nDESCRIPTION: This macro checks if a given window position value `X` is marked as centered by comparing the upper 16 bits of `X` with the `SDL_WINDOWPOS_CENTERED_MASK`. It uses a bitwise AND operation and comparison to determine if the position is centered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINDOWPOS_ISCENTERED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_ISCENTERED(X)    \\\n            (((X)&0xFFFF0000) == SDL_WINDOWPOS_CENTERED_MASK)\n```\n\n----------------------------------------\n\nTITLE: SDL_SetBooleanProperty Syntax\nDESCRIPTION: Defines the syntax for the SDL_SetBooleanProperty function in C. This function sets a boolean property associated with a given SDL_PropertiesID to a specified boolean value. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetBooleanProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetBooleanProperty(SDL_PropertiesID props, const char *name, bool value);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Type using SDL_GetSensorType in C\nDESCRIPTION: Retrieves the sensor type of a given SDL_Sensor object using the SDL_GetSensorType function. It takes a pointer to an SDL_Sensor as input and returns an SDL_SensorType enum representing the type of sensor or SDL_SENSOR_INVALID if the sensor pointer is NULL. Requires inclusion of SDL3/SDL_sensor.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_SensorType SDL_GetSensorType(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: Check if current thread is the main thread in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_IsMainThread function. It takes no arguments and returns a boolean value indicating whether the current thread is the main thread. This function can be called safely from any thread and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsMainThread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsMainThread(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_strchr Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_strchr function. It takes a constant character pointer representing the string to search and an integer representing the byte to search for.  It returns a character pointer to the first instance of the specified byte or NULL if not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strchr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strchr(const char *str, int c);\n```\n\n----------------------------------------\n\nTITLE: Freeing Animation Resources in SDL_image (C)\nDESCRIPTION: The IMG_FreeAnimation function disposes of an IMG_Animation structure and frees its allocated resources. The function accepts a pointer to an IMG_Animation structure as input and invalidates the pointer after freeing the associated memory. This function is part of the SDL_image library and requires inclusion of the SDL_image.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_FreeAnimation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid IMG_FreeAnimation(IMG_Animation *anim);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FColor structure in C\nDESCRIPTION: Defines a structure named SDL_FColor, containing four float members (r, g, b, a) representing the red, green, blue, and alpha components of a color. It is used to store floating-point color values and can be reinterpreted as a float-packed color using SDL_PIXELFORMAT_RGBA128_FLOAT.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_FColor\n{\n    float r;\n    float g;\n    float b;\n    float a;\n} SDL_FColor;\n```\n\n----------------------------------------\n\nTITLE: SDL_wcslcat Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_wcslcat function in C. It concatenates two wide strings, `src` to `dst`, with a maximum length of `maxlen`. The function returns the length of the concatenated string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcslcat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_wcslcat(wchar_t *dst, const wchar_t *src, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer VSync C\nDESCRIPTION: Retrieves the VSync setting of an SDL renderer.  The renderer parameter specifies the SDL_Renderer to query, and the vsync parameter is a pointer to an integer that will be filled with the current vertical refresh sync interval. This function requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderVSync.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderVSync(SDL_Renderer *renderer, int *vsync);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderViewportSet Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RenderViewportSet function in C. It takes an SDL_Renderer pointer as input and returns a boolean value indicating whether a specific rectangle was set as the viewport.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderViewportSet.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderViewportSet(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Enumerate HID Devices using SDL_hid_enumerate in C\nDESCRIPTION: Enumerates HID devices matching the specified vendor and product IDs. The returned linked list should be freed using `SDL_hid_free_enumeration()`.\n\nParameters:\n- `vendor_id`: Vendor ID (VID) to match, or 0 for any vendor.\n- `product_id`: Product ID (PID) to match, or 0 for any product.\n\nReturns: A pointer to a linked list of `SDL_hid_device_info` structures, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_enumerate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_hid_device_info * SDL_hid_enumerate(unsigned short vendor_id, unsigned short product_id);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_CATEGORY in C\nDESCRIPTION: Defines the SDL_HINT_AUDIO_CATEGORY macro as a string literal. This hint controls the audio category used on iOS and macOS. It can be set to \"ambient\" (default) or \"playback\" to configure audio behavior with respect to system mute switches.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUDIO_CATEGORY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_CATEGORY   \"SDL_AUDIO_CATEGORY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_memcmp Syntax in C\nDESCRIPTION: Defines the syntax for SDL_memcmp, which compares two memory buffers. It takes two pointers to void and a size_t representing the length to compare, returning an integer indicating their relative order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_memcmp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_memcmp(const void *s1, const void *s2, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Get Window Borders Size - C\nDESCRIPTION: Retrieves the size of a window's borders (decorations) around the client area using SDL_GetWindowBordersSize. It takes an SDL_Window pointer and pointers to integers for the top, left, bottom, and right border sizes as input. It returns 0 on success and a negative error code on failure. Call SDL_GetError() for more information about the error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowBordersSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetWindowBordersSize(SDL_Window * window,\n                             int *top, int *left,\n                             int *bottom, int *right);\n```\n\n----------------------------------------\n\nTITLE: SDL_assert_always Definition in C\nDESCRIPTION: Defines the SDL_assert_always macro, which calls SDL_enabled_assert. The macro takes a condition as input, which is a boolean value to test. It is always enabled regardless of SDL_ASSERT_LEVEL and can be configured using the SDL_ASSERT environment variable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_assert_always.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_assert_always(condition) SDL_enabled_assert(condition)\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_PenAxis enum in C\nDESCRIPTION: This code defines the `SDL_PenAxis` enumeration, which lists the available pen axis types, such as pressure, X/Y tilt, distance, rotation, slider, and tangential pressure. It also includes a count of the known pen axis types for versioning purposes. The values are used to identify specific pen characteristics within SDL_PenAxisEvent.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PenAxis\n{\n    SDL_PEN_AXIS_PRESSURE,  /**< Pen pressure.  Unidirectional: 0 to 1.0 */\n    SDL_PEN_AXIS_XTILT,     /**< Pen horizontal tilt angle.  Bidirectional: -90.0 to 90.0 (left-to-right). */\n    SDL_PEN_AXIS_YTILT,     /**< Pen vertical tilt angle.  Bidirectional: -90.0 to 90.0 (top-to-down). */\n    SDL_PEN_AXIS_DISTANCE,  /**< Pen distance to drawing surface.  Unidirectional: 0.0 to 1.0 */\n    SDL_PEN_AXIS_ROTATION,  /**< Pen barrel rotation.  Bidirectional: -180 to 179.9 (clockwise, 0 is facing up, -180.0 is facing down). */\n    SDL_PEN_AXIS_SLIDER,    /**< Pen finger wheel or slider (e.g., Airbrush Pen).  Unidirectional: 0 to 1.0 */\n    SDL_PEN_AXIS_TANGENTIAL_PRESSURE,    /**< Pressure from squeezing the pen (\"barrel pressure\"). */\n    SDL_PEN_AXIS_COUNT       /**< Total known pen axis types in this version of SDL. This number may grow in future releases! */\n} SDL_PenAxis;\n```\n\n----------------------------------------\n\nTITLE: IMG_isSVG Function Definition in C\nDESCRIPTION: This function checks if the provided SDL_IOStream contains SVG image data. It takes a seekable/readable SDL_IOStream as input and returns a boolean indicating whether the data is SVG. The function attempts to reset the stream's position after checking.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isSVG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isSVG(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitSemaphore Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WaitSemaphore function. It takes a pointer to an SDL_Semaphore as input and has a void return type. This function waits on the provided semaphore.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitSemaphore.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_WaitSemaphore(SDL_Semaphore *sem);\n```\n\n----------------------------------------\n\nTITLE: SDL_vswprintf Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_vswprintf function, which is used to format a wide character string and write it to a buffer. It takes a buffer, maximum length, format string, and a va_list as input and returns the number of characters written, excluding the null terminator, or a negative value on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_vswprintf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_vswprintf(wchar_t *text, size_t maxlen, const wchar_t *fmt, va_list ap);\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_ISLITTLEENDIAN Definition in C\nDESCRIPTION: This macro determines if an SDL_AudioFormat represents little-endian data by checking if it is NOT big-endian. It takes an SDL_AudioFormat value as input and returns non-zero if it is little-endian and zero otherwise. It depends on the SDL_AUDIO_ISBIGENDIAN macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_ISLITTLEENDIAN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_ISLITTLEENDIAN(x)  (!SDL_AUDIO_ISBIGENDIAN(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_IsAudioDevicePhysical Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_IsAudioDevicePhysical function in C. This function takes an SDL_AudioDeviceID as input and returns a boolean value indicating whether the device is physical or logical. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsAudioDevicePhysical.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsAudioDevicePhysical(SDL_AudioDeviceID devid);\n```\n\n----------------------------------------\n\nTITLE: Opening a Sensor with SDL_OpenSensor in SDL3 (C)\nDESCRIPTION: Opens a sensor for use in SDL3. This function takes an SDL_SensorID as input, which specifies the instance ID of the sensor to be opened. It returns an SDL_Sensor object if successful, or NULL on failure.  Call SDL_GetError() for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenSensor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Sensor * SDL_OpenSensor(SDL_SensorID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Device Type in SDL2 (C)\nDESCRIPTION: This function, SDL_JoystickGetDeviceType, retrieves the SDL_JoystickType of a joystick identified by its device index. It takes the joystick's index as input and returns its type. If the provided index is invalid, it returns SDL_JOYSTICK_TYPE_UNKNOWN. This function is available since SDL 2.0.6.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetDeviceType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickType SDL_JoystickGetDeviceType(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Reading 16-bit Little-Endian Data with SDL_ReadS16LE in C\nDESCRIPTION: Reads 16 bits of little-endian data from an SDL_IOStream and returns the data in native format. The function takes an SDL_IOStream pointer as input and a pointer to a Sint16 to store the result. It returns true on success, false on failure, and sets SDL_IO_STATUS_EOF if the end of the stream is reached.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadS16LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadS16LE(SDL_IOStream *src, Sint16 *value);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_EGLDisplay in C\nDESCRIPTION: This code snippet defines the SDL_EGLDisplay type as an opaque pointer (void *) in C. It's used for representing an EGL display within SDL's video subsystem. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGLDisplay.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *SDL_EGLDisplay;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT macro, which represents the name of the hint used to ignore all game controllers except those specified in the associated string value. The string should be a comma-separated list of USB VID/PID pairs in hexadecimal format, or a file path prefixed with \"@\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT \"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_OnApplicationWillTerminate Function Declaration in C\nDESCRIPTION: This code snippet shows the declaration of the SDL_OnApplicationWillTerminate function in C. It takes no arguments and returns void. This function is used to notify SDL about the application's impending termination, primarily for iOS apps with custom event handling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OnApplicationWillTerminate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_OnApplicationWillTerminate(void);\n```\n\n----------------------------------------\n\nTITLE: Get Window Minimum Size - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetWindowMinimumSize function in C. It retrieves the minimum width and height of the specified SDL window. The 'w' and 'h' parameters are pointers to integers that will be populated with the minimum width and height, respectively. They can be NULL if the caller is not interested in either dimension.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowMinimumSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetWindowMinimumSize(SDL_Window * window,\n                              int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_ChromaLocation Enum in C\nDESCRIPTION: This code snippet defines the `SDL_ChromaLocation` enumeration in C.  It specifies the possible locations for chroma samples relative to luma samples in a colorspace.  The enum is used to indicate how chroma (color) information is sampled and positioned relative to luma (brightness) information, which varies across different video standards. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ChromaLocation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ChromaLocation\n{\n    SDL_CHROMA_LOCATION_NONE = 0,   /**< RGB, no chroma sampling */\n    SDL_CHROMA_LOCATION_LEFT = 1,   /**< In MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on midpoint of the left-edge of the 2x2 square. In other words, they have the same horizontal location as the top-left pixel, but is shifted one-half pixel down vertically. */\n    SDL_CHROMA_LOCATION_CENTER = 2, /**< In JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at the center of the 2x2 square. In other words, they are offset one-half pixel to the right and one-half pixel down compared to the top-left pixel. */\n    SDL_CHROMA_LOCATION_TOPLEFT = 3 /**< In HEVC for BT.2020 and BT.2100 content (in particular on Blu-rays), Cb and Cr are sampled at the same location as the group's top-left Y pixel (\"co-sited\", \"co-located\"). */\n} SDL_ChromaLocation;\n```\n\n----------------------------------------\n\nTITLE: Emscripten Main Loop Adaptation in C\nDESCRIPTION: This snippet demonstrates how to adapt a traditional main loop for Emscripten by using `emscripten_set_main_loop`. It runs the mainloop function repeatedly and allows Emscripten to handle other tasks. The `emscripten_cancel_main_loop` function is called within the mainloop to exit the application gracefully.  The `#ifdef __EMSCRIPTEN__` preprocessor directives allows for conditional compilation based on the target platform. `exit(0)` is used when not compiling for emscripten.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nstatic void mainloop(void)   /* this will run often, possibly at the monitor's refresh rate */\n{\n    if (!game_is_still_running) {\n        deinitialize_the_game();\n        #ifdef __EMSCRIPTEN__\n        emscripten_cancel_main_loop();  /* this should \"kill\" the app. */\n        #else\n        exit(0);\n        #endif\n    }\n\n    check_for_new_input();\n    think_about_stuff();\n    draw_the_next_frame();\n}\n\nvoid main(void)\n{\n    initialize_the_game();\n    #ifdef __EMSCRIPTEN__\n    emscripten_set_main_loop(mainloop, 0, 1);\n    #else\n    while (1) { mainloop(); }\n    #endif\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_wcsnstr Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_wcsnstr function, which searches for the first instance of a wide string substring within another wide string, up to a maximum specified length. It takes the haystack, needle, and maximum length as parameters and returns a pointer to the first instance of the needle or NULL if not found. This function requires inclusion of SDL3/SDL_stdinc.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcsnstr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nwchar_t * SDL_wcsnstr(const wchar_t *haystack, const wchar_t *needle, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Get Font Weight with TTF_GetFontWeight in C\nDESCRIPTION: This code snippet shows the syntax for using TTF_GetFontWeight to retrieve the weight of a font. The function takes a pointer to a TTF_Font struct as input and returns an integer representing the font weight. The function should be called on the same thread that created the font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontWeight.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontWeight(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_isupper Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_isupper function. It takes an integer as input, representing the character to check, and returns an integer indicating whether the character is an uppercase letter ('A' through 'Z' in ASCII).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isupper.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isupper(int x);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteStorageFile Syntax\nDESCRIPTION: Defines the syntax for the SDL_WriteStorageFile function in C. It takes a storage container, a path, a source buffer, and the length of the buffer as input, and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteStorageFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteStorageFile(SDL_Storage *storage, const char *path, const void *source, Uint64 length);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Steam Handle in SDL3 (C)\nDESCRIPTION: Retrieves the Steam Input handle of an opened gamepad using the SDL_GetGamepadSteamHandle function. It requires an SDL_Gamepad object as input and returns a Uint64 representing the Steam Input handle. A return value of 0 indicates that the handle is unavailable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadSteamHandle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_GetGamepadSteamHandle(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUGraphicsPipelineTargetInfo Structure Definition\nDESCRIPTION: Defines the structure SDL_GPUGraphicsPipelineTargetInfo used to describe render targets within a graphics pipeline in SDL3. It includes members for color target descriptions, the number of color targets, the depth-stencil format, and a boolean indicating the presence of a depth-stencil target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUGraphicsPipelineTargetInfo.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_GPUGraphicsPipelineTargetInfo\n{\n    const SDL_GPUColorTargetDescription *color_target_descriptions;  /**< A pointer to an array of color target descriptions. */\n    Uint32 num_color_targets;                                        /**< The number of color target descriptions in the above array. */\n    SDL_GPUTextureFormat depth_stencil_format;                       /**< The pixel format of the depth-stencil target. Ignored if has_depth_stencil_target is false. */\n    bool has_depth_stencil_target;                               /**< true specifies that the pipeline uses a depth-stencil target. */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_GPUGraphicsPipelineTargetInfo;\n```\n\n----------------------------------------\n\nTITLE: SDL_WinRTGetFSPathUNICODE Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_WinRTGetFSPathUNICODE function. This function retrieves a WinRT defined path on the local file system as a wide character string (UCS-2). It takes an SDL_WinRT_Path enum value as input, which specifies the type of path to retrieve.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WinRTGetFSPathUNICODE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst wchar_t * SDL_WinRTGetFSPathUNICODE(SDL_WinRT_Path pathType);\n```\n\n----------------------------------------\n\nTITLE: Define SDL Keycodes\nDESCRIPTION: These #define statements create named constants for various SDL keycodes. Each constant maps a symbolic name (e.g., SDLK_F20, SDLK_VOLUMEUP) to a hexadecimal numerical value.  The comments indicate that the keycode is derived from the scancode using the SDL_SCANCODE_TO_KEYCODE macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keycode.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define SDLK_F20                    0x4000006fu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20) */\n#define SDLK_F21                    0x40000070u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21) */\n#define SDLK_F22                    0x40000071u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22) */\n#define SDLK_F23                    0x40000072u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23) */\n#define SDLK_F24                    0x40000073u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24) */\n#define SDLK_EXECUTE                0x40000074u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE) */\n#define SDLK_HELP                   0x40000075u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP) */\n#define SDLK_MENU                   0x40000076u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU) */\n#define SDLK_SELECT                 0x40000077u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT) */\n#define SDLK_STOP                   0x40000078u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP) */\n#define SDLK_AGAIN                  0x40000079u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN) */\n#define SDLK_UNDO                   0x4000007au /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO) */\n#define SDLK_CUT                    0x4000007bu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT) */\n#define SDLK_COPY                   0x4000007cu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY) */\n#define SDLK_PASTE                  0x4000007du /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE) */\n#define SDLK_FIND                   0x4000007eu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND) */\n#define SDLK_MUTE                   0x4000007fu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE) */\n#define SDLK_VOLUMEUP               0x40000080u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP) */\n#define SDLK_VOLUMEDOWN             0x40000081u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN) */\n#define SDLK_KP_COMMA               0x40000085u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA) */\n#define SDLK_KP_EQUALSAS400         0x40000086u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400) */\n#define SDLK_ALTERASE               0x40000099u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE) */\n#define SDLK_SYSREQ                 0x4000009au /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ) */\n#define SDLK_CANCEL                 0x4000009bu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL) */\n#define SDLK_CLEAR                  0x4000009cu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR) */\n#define SDLK_PRIOR                  0x4000009du /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR) */\n#define SDLK_RETURN2                0x4000009eu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2) */\n#define SDLK_SEPARATOR              0x4000009fu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR) */\n#define SDLK_OUT                    0x400000a0u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT) */\n#define SDLK_OPER                   0x400000a1u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER) */\n#define SDLK_CLEARAGAIN             0x400000a2u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN) */\n#define SDLK_CRSEL                  0x400000a3u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL) */\n#define SDLK_EXSEL                  0x400000a4u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL) */\n#define SDLK_KP_00                  0x400000b0u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00) */\n#define SDLK_KP_000                 0x400000b1u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000) */\n#define SDLK_THOUSANDSSEPARATOR     0x400000b2u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR) */\n#define SDLK_DECIMALSEPARATOR       0x400000b3u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR) */\n#define SDLK_CURRENCYUNIT           0x400000b4u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT) */\n#define SDLK_CURRENCYSUBUNIT        0x400000b5u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT) */\n#define SDLK_KP_LEFTPAREN           0x400000b6u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN) */\n#define SDLK_KP_RIGHTPAREN          0x400000b7u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN) */\n#define SDLK_KP_LEFTBRACE           0x400000b8u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE) */\n#define SDLK_KP_RIGHTBRACE          0x400000b9u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE) */\n#define SDLK_KP_TAB                 0x400000bau /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB) */\n#define SDLK_KP_BACKSPACE           0x400000bbu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE) */\n#define SDLK_KP_A                   0x400000bcu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A) */\n#define SDLK_KP_B                   0x400000bdu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B) */\n#define SDLK_KP_C                   0x400000beu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C) */\n#define SDLK_KP_D                   0x400000bfu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D) */\n#define SDLK_KP_E                   0x400000c0u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E) */\n#define SDLK_KP_F                   0x400000c1u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F) */\n#define SDLK_KP_XOR                 0x400000c2u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR) */\n#define SDLK_KP_POWER               0x400000c3u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER) */\n#define SDLK_KP_PERCENT             0x400000c4u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT) */\n#define SDLK_KP_LESS                0x400000c5u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS) */\n#define SDLK_KP_GREATER             0x400000c6u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER) */\n#define SDLK_KP_AMPERSAND           0x400000c7u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND) */\n#define SDLK_KP_DBLAMPERSAND        0x400000c8u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND) */\n#define SDLK_KP_VERTICALBAR         0x400000c9u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR) */\n#define SDLK_KP_DBLVERTICALBAR      0x400000cau /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR) */\n#define SDLK_KP_COLON               0x400000cbu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON) */\n#define SDLK_KP_HASH                0x400000ccu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH) */\n#define SDLK_KP_SPACE               0x400000cdu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE) */\n#define SDLK_KP_AT                  0x400000ceu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT) */\n#define SDLK_KP_EXCLAM              0x400000cfu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM) */\n#define SDLK_KP_MEMSTORE            0x400000d0u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE) */\n#define SDLK_KP_MEMRECALL           0x400000d1u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL) */\n#define SDLK_KP_MEMCLEAR            0x400000d2u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR) */\n#define SDLK_KP_MEMADD              0x400000d3u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD) */\n#define SDLK_KP_MEMSUBTRACT         0x400000d4u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT) */\n#define SDLK_KP_MEMMULTIPLY         0x400000d5u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY) */\n#define SDLK_KP_MEMDIVIDE           0x400000d6u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE) */\n#define SDLK_KP_PLUSMINUS           0x400000d7u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS) */\n#define SDLK_KP_CLEAR               0x400000d8u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR) */\n#define SDLK_KP_CLEARENTRY          0x400000d9u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY) */\n#define SDLK_KP_BINARY              0x400000dau /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY) */\n#define SDLK_KP_OCTAL               0x400000dbu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL) */\n#define SDLK_KP_DECIMAL             0x400000dcu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL) */\n#define SDLK_KP_HEXADECIMAL         0x400000ddu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL) */\n#define SDLK_LCTRL                  0x400000e0u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL) */\n#define SDLK_LSHIFT                 0x400000e1u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT) */\n#define SDLK_LALT                   0x400000e2u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT) */\n#define SDLK_LGUI                   0x400000e3u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI) */\n#define SDLK_RCTRL                  0x400000e4u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL) */\n#define SDLK_RSHIFT                 0x400000e5u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT) */\n#define SDLK_RALT                   0x400000e6u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT) */\n#define SDLK_RGUI                   0x400000e7u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI) */\n#define SDLK_MODE                   0x40000101u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE) */\n#define SDLK_SLEEP                  0x40000102u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP) */\n#define SDLK_WAKE                   0x40000103u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WAKE) */\n#define SDLK_CHANNEL_INCREMENT      0x40000104u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CHANNEL_INCREMENT) */\n#define SDLK_CHANNEL_DECREMENT      0x40000105u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CHANNEL_DECREMENT) */\n#define SDLK_MEDIA_PLAY             0x40000106u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PLAY) */\n#define SDLK_MEDIA_PAUSE            0x40000107u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PAUSE) */\n#define SDLK_MEDIA_RECORD           0x40000108u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_RECORD) */\n#define SDLK_MEDIA_FAST_FORWARD     0x40000109u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_FAST_FORWARD) */\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUBufferBinding Structure Definition in C\nDESCRIPTION: Defines the SDL_GPUBufferBinding structure which is used to specify parameters when binding a buffer for vertex or index data. It contains a pointer to the SDL_GPUBuffer and an offset indicating the starting byte within the buffer to bind.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBufferBinding.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUBufferBinding\n{\n    SDL_GPUBuffer *buffer;  /**< The buffer to bind. Must have been created with SDL_GPU_BUFFERUSAGE_VERTEX for SDL_BindGPUVertexBuffers, or SDL_GPU_BUFFERUSAGE_INDEX for SDL_BindGPUIndexBuffer. */\n    Uint32 offset;          /**< The starting byte of the data to bind in the buffer. */\n} SDL_GPUBufferBinding;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUVertexInputState in C\nDESCRIPTION: This code snippet defines the SDL_GPUVertexInputState structure in C. It contains pointers to arrays of vertex buffer descriptions and vertex attribute descriptions, along with the number of elements in each array. This structure is used to configure the vertex input state of a graphics pipeline.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUVertexInputState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUVertexInputState\n{\n    const SDL_GPUVertexBufferDescription *vertex_buffer_descriptions; /**< A pointer to an array of vertex buffer descriptions. */\n    Uint32 num_vertex_buffers;                                        /**< The number of vertex buffer descriptions in the above array. */\n    const SDL_GPUVertexAttribute *vertex_attributes;                  /**< A pointer to an array of vertex attribute descriptions. */\n    Uint32 num_vertex_attributes;                                     /**< The number of vertex attribute descriptions in the above array. */\n} SDL_GPUVertexInputState;\n```\n\n----------------------------------------\n\nTITLE: Example usage of SDL_DEFINE_PIXELFORMAT in C\nDESCRIPTION: This example demonstrates how to define the SDL_PIXELFORMAT_RGBA8888 pixel format using the SDL_DEFINE_PIXELFORMAT macro.  It sets the pixel type, order, layout, bits, and bytes to the appropriate values for RGBA8888 format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEFINE_PIXELFORMAT.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA, SDL_PACKEDLAYOUT_8888, 32, 4)\n```\n\n----------------------------------------\n\nTITLE: Overriding SDL with Environment Variable (Bash)\nDESCRIPTION: This bash command demonstrates how to override the statically linked SDL library by setting the SDL3_DYNAMIC_API environment variable to the path of the desired SDL library. This allows users to use a newer or better SDL library with a game that is statically linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/dynapi.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nexport SDL3_DYNAMIC_API=/my/actual/libSDL3.so.0\n./MyGameThatIsStaticallyLinkedToSDL\n```\n\n----------------------------------------\n\nTITLE: Creating a Semaphore in SDL2 (C)\nDESCRIPTION: Creates a new semaphore and initializes it with the given initial value. Returns a pointer to the created semaphore, or NULL on failure. Requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateSemaphore.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_sem* SDL_CreateSemaphore(Uint32 initial_value);\n```\n\n----------------------------------------\n\nTITLE: Check Gamepad for Sensor (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GamepadHasSensor function, which checks if a gamepad has a specified sensor. It requires the gamepad object and the sensor type to query. The function returns 'true' if the gamepad has the sensor, and 'false' otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadHasSensor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GamepadHasSensor(SDL_Gamepad *gamepad, SDL_SensorType type);\n```\n\n----------------------------------------\n\nTITLE: Creating a Streaming Texture for Mixed Rendering in SDL2 (C)\nDESCRIPTION: This code creates a streaming SDL_Texture, used in combination with an SDL_Surface, to allow for both software rendering and hardware acceleration.  The texture is updated with the surface's pixel data before rendering to the screen.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture *sdlTexture = SDL_CreateTexture(sdlRenderer,\n                                            SDL_PIXELFORMAT_ARGB8888,\n                                            SDL_TEXTUREACCESS_STREAMING,\n                                            640, 480);\n```\n\n----------------------------------------\n\nTITLE: SDL_strtoll Syntax in C\nDESCRIPTION: Defines the syntax of the SDL_strtoll function, which parses a long long integer from a string. It takes a string, a pointer to a char pointer (for error checking/parsing position), and the base of the number as input. It returns the parsed long long integer or 0 if parsing fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strtoll.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nlong long SDL_strtoll(const char *str, char **endp, int base);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawRects Function Signature in C\nDESCRIPTION: Defines the signature of the SDL_RenderDrawRects function for drawing multiple rectangles. Requires an SDL_Renderer, an array of SDL_Rect structures representing the rectangles, and the number of rectangles to draw. Returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawRects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawRects(SDL_Renderer * renderer,\n                        const SDL_Rect * rects,\n                        int count);\n```\n\n----------------------------------------\n\nTITLE: SDL_lltoa Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_lltoa function, which converts a long long integer to a string. The function takes the long long integer value, a character buffer to store the resulting string, and an integer representing the radix (base) for the conversion as parameters. It returns a pointer to the character buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_lltoa.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_lltoa(long long value, char *str, int radix);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_DestroyDatagramSocket Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_DestroyDatagramSocket function, which is used to dispose of a datagram socket. It takes a pointer to an SDLNet_DatagramSocket as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_DestroyDatagramSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_DestroyDatagramSocket(SDLNet_DatagramSocket *sock);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderFillRect Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RenderFillRect function. It takes an SDL_Renderer pointer and a pointer to an SDL_FRect as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderFillRect.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_RenderFillRect(SDL_Renderer *renderer, const SDL_FRect *rect);\n```\n\n----------------------------------------\n\nTITLE: Unload Shared Object in C\nDESCRIPTION: The SDL_UnloadObject function unloads a shared object from memory. It takes a pointer to the shared object handle as input, which was previously obtained using SDL_LoadObject. This function releases the memory and resources associated with the loaded shared object.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnloadObject.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnloadObject(void *handle);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetSurfaceColorKey Syntax in C\nDESCRIPTION: This code snippet shows the syntax for SDL_SetSurfaceColorKey function, used to set the color key (transparent pixel) in a surface.\nIt takes a SDL_Surface pointer, a boolean to enable/disable the color key, and a Uint32 representing the color key value.\nIt returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetSurfaceColorKey.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetSurfaceColorKey(SDL_Surface *surface, bool enabled, Uint32 key);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetJoystickAxis Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetJoystickAxis function, which retrieves the current state of a joystick axis. It takes an SDL_Joystick pointer and an axis index as input and returns a 16-bit signed integer representing the axis position. Returns 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint16 SDL_GetJoystickAxis(SDL_Joystick *joystick, int axis);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderSetScale Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_RenderSetScale function. It takes a renderer, horizontal scale factor, and vertical scale factor as input. The function sets the drawing scale for rendering on the specified renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderSetScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderSetScale(SDL_Renderer * renderer,\n                       float scaleX, float scaleY);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PowerState Enum in C\nDESCRIPTION: This code snippet defines the SDL_PowerState enumeration in C. It specifies the possible states of the system's power supply, including unknown, on battery, no battery, charging, and charged. This enum is part of the SDL library and resides in the SDL_power.h header file. It allows applications to determine the current power state of the system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PowerState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PowerState\n{\n    SDL_POWERSTATE_UNKNOWN,      /**< cannot determine power status */\n    SDL_POWERSTATE_ON_BATTERY,   /**< Not plugged in, running on the battery */\n    SDL_POWERSTATE_NO_BATTERY,   /**< Plugged in, no battery available */\n    SDL_POWERSTATE_CHARGING,     /**< Plugged in, charging battery */\n    SDL_POWERSTATE_CHARGED       /**< Plugged in, battery charged */\n} SDL_PowerState;\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitProcess Syntax in C\nDESCRIPTION: Defines the syntax of the SDL_WaitProcess function, used to wait for a specified process to finish executing. The function takes a SDL_Process pointer, a boolean indicating whether to block, and an integer pointer to store the exit code. Returns true if the process exited, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitProcess.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitProcess(SDL_Process *process, bool block, int *exitcode);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowDisplayMode Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetWindowDisplayMode function in C. This function takes a pointer to an SDL_Window and a pointer to an SDL_DisplayMode as input. It populates the SDL_DisplayMode structure with the current fullscreen display mode of the specified window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowDisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetWindowDisplayMode(SDL_Window * window,\n                             SDL_DisplayMode * mode);\n```\n\n----------------------------------------\n\nTITLE: Closing a Camera with SDL_CloseCamera in C\nDESCRIPTION: This code snippet demonstrates how to close a camera device using the `SDL_CloseCamera` function. It takes a pointer to an `SDL_Camera` object as input and shuts down the associated camera processing. The camera device should not be referenced after this function is called. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseCamera.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CloseCamera(SDL_Camera *camera);\n```\n\n----------------------------------------\n\nTITLE: SDL_isinf Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_isinf function in C. It takes a double-precision floating-point value as input and returns an integer indicating whether the value is infinity.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isinf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isinf(double x);\n```\n\n----------------------------------------\n\nTITLE: Set Channel Expiration Delay in SDL_mixer (C)\nDESCRIPTION: This code snippet demonstrates how to use the `Mix_ExpireChannel` function from the SDL_mixer library to set an expiration delay for a specific channel. The function accepts the channel number and the number of milliseconds after which the channel should be halted. A value of -1 removes the expiration. It returns the number of channels that had their expirations changed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_ExpireChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_ExpireChannel(int channel, int ticks);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDXGIOutputInfo Syntax in C\nDESCRIPTION: Retrieves the DXGI Adapter and Output indices for the specified display.\nParameters include the display ID, a pointer to store the adapter index, and a pointer to store the output index.  Returns true on success and false on failure. Requires SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDXGIOutputInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetDXGIOutputInfo(SDL_DisplayID displayID, int *adapterIndex, int *outputIndex);\n```\n\n----------------------------------------\n\nTITLE: Building SDL2 as a Universal Library (macOS)\nDESCRIPTION: This snippet shows how to build SDL2 as a universal library for both 64-bit Intel and ARM architectures on macOS. It uses CMake with the CMAKE_OSX_ARCHITECTURES flag to specify the target architectures. Requires CMake and Xcode 12.2+ with macOS 11.0 SDK.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/macos.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake .. \"-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64\" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13\ncmake --build .\nsudo cmake --install .\n```\n\n----------------------------------------\n\nTITLE: Define SDL_JoystickID in C\nDESCRIPTION: Defines a unique identifier for a joystick, represented as an unsigned 32-bit integer. This ID is unique for the duration the joystick is connected to the system. It's defined as a `typedef` for `Uint32`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoystickID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_JoystickID;\n```\n\n----------------------------------------\n\nTITLE: Get Mixer Channel Chunk - C\nDESCRIPTION: Retrieves the Mix_Chunk currently associated with a given mixer channel. Takes an integer 'channel' as input and returns a pointer to the Mix_Chunk. Returns NULL if the channel is invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetChunk.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMix_Chunk * Mix_GetChunk(int channel);\n```\n\n----------------------------------------\n\nTITLE: Get Display Index of Window in SDL2 (C)\nDESCRIPTION: Retrieves the index of the display associated with the specified SDL window. This function takes an SDL_Window pointer as input and returns an integer representing the display index, or a negative error code if the operation fails. The function is part of the SDL_video.h header and is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowDisplayIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetWindowDisplayIndex(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Loading JXL Image from RWops with SDL_image in C\nDESCRIPTION: This code snippet demonstrates how to load a JXL image from an SDL_RWops stream using the IMG_LoadJXL_RW function in the SDL_image library. The function takes an SDL_RWops pointer as input, reads the JXL image data from it, and returns an SDL_Surface pointer representing the loaded image. It returns NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadJXL_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadJXL_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Surface and Texture Creation with Streaming Access in C\nDESCRIPTION: This snippet demonstrates how to create an SDL surface and an SDL texture with streaming access in SDL3. It uses SDL_CreateSurface to create the surface and SDL_CreateTexture with SDL_TEXTUREACCESS_STREAMING to create the texture, allowing for frequent updates from the surface to the texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *screen = SDL_CreateSurface(640, 480, SDL_PIXELFORMAT_ARGB8888);\nSDL_Texture *sdlTexture = SDL_CreateTexture(sdlRenderer,\n                                            SDL_PIXELFORMAT_ARGB8888,\n                                            SDL_TEXTUREACCESS_STREAMING,\n                                            640, 480);\n```\n\n----------------------------------------\n\nTITLE: Setting SoundFont Paths in SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax of the Mix_SetSoundFonts function in C, which is used to set the paths where SDL_mixer will look for SoundFont files. The paths are specified as a semicolon-separated string. The function returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetSoundFonts.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_SetSoundFonts(const char *paths);\n```\n\n----------------------------------------\n\nTITLE: SDL Wide String Case-Insensitive Comparison in C\nDESCRIPTION: Compares two wide strings (str1 and str2) case-insensitively, up to a maximum of maxlen wchar_t characters. Returns a negative value if str1 < str2, a positive value if str1 > str2, and zero if str1 == str2. The function requires SDL3 and processes Unicode strings, handling case-folding and potential replacement characters. NULL pointers for str1 or str2 are not permitted.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcsncasecmp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_wcsncasecmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv_utf8_ucs2 Macro Definition in C\nDESCRIPTION: This macro converts a UTF-8 encoded string to UCS-2. It uses SDL_iconv_string internally. Be cautious when using expressions with side effects as the macro double-evaluates its parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv_utf8_ucs2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_iconv_utf8_ucs2(S)      (Uint16 *)SDL_iconv_string(\"UCS-2\", \"UTF-8\", S, SDL_strlen(S)+1)\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_LoadLibrary Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GL_LoadLibrary function in C. It takes a path to the OpenGL library as input and returns a boolean indicating success or failure. The path can be NULL to load the default OpenGL library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_LoadLibrary.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GL_LoadLibrary(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Button Label in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetGamepadButtonLabel function in C. It takes a gamepad pointer and a button index as input and returns an SDL_GamepadButtonLabel enum value. The gamepad parameter is a pointer to an SDL_Gamepad instance, and the button parameter is an SDL_GamepadButton enum value representing the button index.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadButtonLabel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(SDL_Gamepad *gamepad, SDL_GamepadButton button);\n```\n\n----------------------------------------\n\nTITLE: SDL_SysWMEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_SysWMEvent, containing the event type, timestamp, and a pointer to the driver-dependent message. The event is disabled by default and requires inclusion of SDL_syswm.h. The timestamp is populated by SDL_GetTicks().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SysWMEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_SysWMEvent\n{\n    Uint32 type;        /**< SDL_SYSWMEVENT */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_SysWMmsg *msg;  /**< driver dependent data, defined in SDL_syswm.h */\n} SDL_SysWMEvent;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RENDER_LINE_METHOD in C\nDESCRIPTION: Defines the SDL_HINT_RENDER_LINE_METHOD macro which is a string constant. This constant is used to set the hint that controls the line rendering method used by the 2D render API in SDL3. It should be defined before creating a renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_LINE_METHOD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_LINE_METHOD \"SDL_RENDER_LINE_METHOD\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Keycode type\nDESCRIPTION: This line defines the `SDL_Keycode` type as an alias for `Uint32`, which is a 32-bit unsigned integer. This type is used to represent keycodes in SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keycode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef Uint32 SDL_Keycode;\n```\n\n----------------------------------------\n\nTITLE: SDL_ispunct Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_ispunct function, which checks if a character is punctuation. It takes an integer representing the character to check as input and returns a non-zero value if it's punctuation, zero otherwise. The function is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ispunct.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_ispunct(int x);\n```\n\n----------------------------------------\n\nTITLE: Importing external surfaces into SDL windows with Qt\nDESCRIPTION: This C++ code demonstrates how to import an external Wayland surface from a Qt 6 application into an SDL window. It initializes Qt, retrieves the `wl_display` and `wl_surface` from Qt, sets the `SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER` property to share the display with SDL, creates an SDL window wrapping the Qt surface, and renders a blue screen. The example also shows how to handle window resizing and Qt's event loop within the SDL application. It requires Qt and SDL3 libraries to be installed and linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/wayland.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n#include <QApplication>\n#include <QWindow>\n#include <qpa/qplatformnativeinterface.h>\n\n#include <SDL3/SDL.h>\n\nint main(int argc, char *argv[])\n{\n    int ret = -1;\n    int done = 0;\n    SDL_PropertiesID props;\n    SDL_Event e;\n    SDL_Window *sdlWindow = NULL;\n    SDL_Renderer *sdlRenderer = NULL;\n    struct wl_display *display = NULL;\n    struct wl_surface *surface = NULL;\n\n    /* Initialize Qt */\n    QApplication qtApp(argc, argv);\n    QWindow qtWindow;\n\n    /* The windowing system must be Wayland. */\n    if (QApplication::platformName() != \"wayland\") {\n        goto exit;\n    }\n\n    {\n        /* Get the wl_display object from Qt */\n        QNativeInterface::QWaylandApplication *qtWlApp = qtApp.nativeInterface<QNativeInterface::QWaylandApplication>();\n        display = qtWlApp->display();\n\n        if (!display) {\n            goto exit;\n        }\n    }\n\n    /* Set SDL to use the existing wl_display object from Qt and initialize. */\n    SDL_SetPointerProperty(SDL_GetGlobalProperties(), SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER, display);\n    SDL_Init(SDL_INIT_VIDEO | SDL_INIT_EVENTS);\n\n    /* Create a basic, frameless QWindow */\n    qtWindow.setFlags(Qt::FramelessWindowHint);\n    qtWindow.setGeometry(0, 0, 640, 480);\n    qtWindow.show();\n\n    {\n        /* Get the native wl_surface backing resource for the window */\n        QPlatformNativeInterface *qtNative = qtApp.platformNativeInterface();\n        surface = (struct wl_surface *)qtNative->nativeResourceForWindow(\"surface\", &qtWindow);\n\n        if (!surface) {\n            goto exit;\n        }\n    }\n\n    /* Create a window that wraps the wl_surface from the QWindow.\n     * Qt objects should not be flagged as DPI-aware or protocol violations will result.\n     */\n    props = SDL_CreateProperties();\n    SDL_SetPointerProperty(props, SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER, surface);\n    SDL_SetBooleanProperty(props, SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN, true);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER, 640);\n    SDL_SetNumberProperty(props, SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER, 480);\n    sdlWindow = SDL_CreateWindowWithProperties(props);\n    SDL_DestroyProperties(props);\n    if (!sdlWindow) {\n        goto exit;\n    }\n\n    /* Create a renderer */\n    sdlRenderer = SDL_CreateRenderer(sdlWindow, NULL);\n    if (!sdlRenderer) {\n        goto exit;\n    }\n\n    /* Draw a blue screen for the window until ESC is pressed or the window is no longer visible. */\n    while (!done) {\n        while (SDL_PollEvent(&e)) {\n            if (e.type == SDL_EVENT_KEY_DOWN && e.key.key == SDLK_ESCAPE) {\n                done = 1;\n            }\n        }\n\n        qtApp.processEvents();\n\n        /* Update the backbuffer size if the window scale changed. */\n        qreal scale = qtWindow.devicePixelRatio();\n        SDL_SetWindowSize(sdlWindow, SDL_lround(640. * scale), SDL_lround(480. * scale));\n\n        if (qtWindow.isVisible()) {\n            SDL_SetRenderDrawColor(sdlRenderer, 0, 0, 255, SDL_ALPHA_OPAQUE);\n            SDL_RenderClear(sdlRenderer);\n            SDL_RenderPresent(sdlRenderer);\n        } else {\n            done = 1;\n        }\n    }\n\n    ret = 0;\n\nexit:\n    /* Cleanup */\n    if (sdlRenderer) {\n        SDL_DestroyRenderer(sdlRenderer);\n    }\n    if (sdlWindow) {\n        SDL_DestroyWindow(sdlWindow);\n    }\n\n    SDL_Quit();\n    return ret;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Get GDK Task Queue Handle in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetGDKTaskQueue function. It retrieves a reference to the global async task queue handle for GDK, initializing it if needed. The XTaskQueueHandle must be closed after usage to prevent resource leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGDKTaskQueue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetGDKTaskQueue(XTaskQueueHandle *outTaskQueue);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddGamepadMappingsFromIO Syntax\nDESCRIPTION: This code snippet shows the syntax for using the SDL_AddGamepadMappingsFromIO function. It takes an SDL_IOStream pointer as input, along with a boolean to indicate whether the stream should be closed after the function call.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddGamepadMappingsFromIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AddGamepadMappingsFromIO(SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: SDL_CompareAndSwapAtomicInt Syntax in C\nDESCRIPTION: Shows the function signature for SDL_CompareAndSwapAtomicInt, which atomically compares and swaps an integer value. It takes a pointer to an SDL_AtomicInt, the expected old value, and the new value to set if the old value matches. Returns true if the swap occurred, false otherwise. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CompareAndSwapAtomicInt.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CompareAndSwapAtomicInt(SDL_AtomicInt *a, int oldval, int newval);\n```\n\n----------------------------------------\n\nTITLE: SDL_DEFINE_AUDIO_FORMAT Definition in C\nDESCRIPTION: This macro defines an SDL_AudioFormat value by combining signedness, endianness, floating-point indicator, and sample size into a single Uint16.  It takes four parameters: signed (1 for signed, 0 for unsigned), bigendian (1 for big-endian, 0 for little-endian), flt (1 for floating-point, 0 for integer), and size (number of bits per sample). The macro returns a format value compatible with SDL_AudioFormat.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEFINE_AUDIO_FORMAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_DEFINE_AUDIO_FORMAT(signed, bigendian, flt, size) \\\n    (((Uint16)(signed) << 15) | ((Uint16)(bigendian) << 12) | ((Uint16)(flt) << 8) | ((size) & SDL_AUDIO_MASK_BITSIZE))\n```\n\n----------------------------------------\n\nTITLE: Get CAMetalLayer from Metal Renderer in C\nDESCRIPTION: Retrieves the CAMetalLayer associated with the given Metal renderer. The function returns a `void *`, which should be cast to a `CAMetalLayer *`.  It takes an SDL_Renderer as input and returns the associated CAMetalLayer, or NULL if the renderer is not a Metal renderer. This function must be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderMetalLayer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_GetRenderMetalLayer(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Open TCP Network Socket - SDLNet_TCP_Open - C\nDESCRIPTION: Opens a TCP network socket using SDL_net. If `ip->host` is INADDR_NONE or INADDR_ANY, it creates a local server socket on the given port. Otherwise, it attempts a TCP connection to the remote host and port. The address passed in should already be swapped to network byte order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_Open.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTCPsocket SDLNet_TCP_Open(IPaddress *ip);\n```\n\n----------------------------------------\n\nTITLE: Create Text Object C\nDESCRIPTION: This function creates a text object from UTF-8 text and a text engine.  It requires a valid TTF_TextEngine and a TTF_Font. The length argument specifies how many bytes of text should be used from the input string. The function returns a pointer to a new TTF_Text object, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_82\n\nLANGUAGE: C\nCODE:\n```\nTTF_Text * TTF_CreateText(TTF_TextEngine *engine, TTF_Font *font, const char *text, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Get Window Position in SDL3 (C)\nDESCRIPTION: Retrieves the current position of an SDL window. It takes a pointer to an SDL_Window and two integer pointers, x and y, which will be populated with the window's coordinates. Passing NULL for x or y is allowed if only one coordinate is needed. This function returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowPosition(SDL_Window *window, int *x, int *y);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_read Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_hid_read function, which is used to read an input report from a HID device. The function takes a device handle, a buffer to store the data, and the length of data to read as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_read.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_read(SDL_hid_device *dev, unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyBatteryEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_JoyBatteryEvent structure in C. It includes members for the event type, timestamp, joystick instance ID, and battery level. The structure is used to represent a joystick battery level change event.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoyBatteryEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyBatteryEvent\n{\n    Uint32 type;        /**< SDL_JOYBATTERYUPDATED */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    SDL_JoystickPowerLevel level; /**< The joystick battery level */\n} SDL_JoyBatteryEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Keymod and Modifier Constants in C\nDESCRIPTION: This code snippet defines the `SDL_Keymod` type as an unsigned 16-bit integer (`Uint16`) and provides a series of preprocessor macros that define constants for each key modifier. These constants are used to represent the state of modifier keys such as Shift, Ctrl, Alt, and GUI keys.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keymod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint16 SDL_Keymod;\n\n#define SDL_KMOD_NONE   0x0000u /**< no modifier is applicable. */\n#define SDL_KMOD_LSHIFT 0x0001u /**< the left Shift key is down. */\n#define SDL_KMOD_RSHIFT 0x0002u /**< the right Shift key is down. */\n#define SDL_KMOD_LEVEL5 0x0004u /**< the Level 5 Shift key is down. */\n#define SDL_KMOD_LCTRL  0x0040u /**< the left Ctrl (Control) key is down. */\n#define SDL_KMOD_RCTRL  0x0080u /**< the right Ctrl (Control) key is down. */\n#define SDL_KMOD_LALT   0x0100u /**< the left Alt key is down. */\n#define SDL_KMOD_RALT   0x0200u /**< the right Alt key is down. */\n#define SDL_KMOD_LGUI   0x0400u /**< the left GUI key (often the Windows key) is down. */\n#define SDL_KMOD_RGUI   0x0800u /**< the right GUI key (often the Windows key) is down. */\n#define SDL_KMOD_NUM    0x1000u /**< the Num Lock key (may be located on an extended keypad) is down. */\n#define SDL_KMOD_CAPS   0x2000u /**< the Caps Lock key is down. */\n#define SDL_KMOD_MODE   0x4000u /**< the !AltGr key is down. */\n#define SDL_KMOD_SCROLL 0x8000u /**< the Scroll Lock key is down. */\n#define SDL_KMOD_CTRL   (SDL_KMOD_LCTRL | SDL_KMOD_RCTRL)   /**< Any Ctrl key is down. */\n#define SDL_KMOD_SHIFT  (SDL_KMOD_LSHIFT | SDL_KMOD_RSHIFT) /**< Any Shift key is down. */\n#define SDL_KMOD_ALT    (SDL_KMOD_LALT | SDL_KMOD_RALT)     /**< Any Alt key is down. */\n#define SDL_KMOD_GUI    (SDL_KMOD_LGUI | SDL_KMOD_RGUI)     /**< Any GUI key is down. */\n```\n\n----------------------------------------\n\nTITLE: TTF_GPUAtlasDrawSequence Structure Definition in C\nDESCRIPTION: Defines the TTF_GPUAtlasDrawSequence structure, which is used for GPU-accelerated text rendering in SDL_ttf.  It contains members for the texture atlas, vertex positions, texture coordinates, indices, image type, and a pointer to the next sequence in a linked list. This structure is used by TTF_GetGPUTextDrawData for efficient rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GPUAtlasDrawSequence.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct TTF_GPUAtlasDrawSequence\n{\n    SDL_GPUTexture *atlas_texture;          /**< Texture atlas that stores the glyphs */\n    SDL_FPoint *xy;                         /**< An array of vertex positions */\n    SDL_FPoint *uv;                         /**< An array of normalized texture coordinates for each vertex */\n    int num_vertices;                       /**< Number of vertices */\n    int *indices;                           /**< An array of indices into the 'vertices' arrays */\n    int num_indices;                        /**< Number of indices */\n    TTF_ImageType image_type;               /**< The image type of this draw sequence */\n\n    struct TTF_GPUAtlasDrawSequence *next;  /**< The next sequence (will be NULL in case of the last sequence) */\n} TTF_GPUAtlasDrawSequence;\n```\n\n----------------------------------------\n\nTITLE: TTF_SetTextString Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_SetTextString function. This function is part of the SDL_ttf library and sets the UTF-8 text used by a TTF_Text object. It takes the TTF_Text object, the UTF-8 string, and the length of the string as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextString(TTF_Text *text, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTexture_IO Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadTexture_IO function in C, which loads an image from an SDL_IOStream into an SDL_Texture. It requires an SDL_Renderer, an SDL_IOStream, and a boolean indicating whether to close the IO stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadTexture_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * IMG_LoadTexture_IO(SDL_Renderer *renderer, SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Check Haptic Effect Support in SDL (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_HapticEffectSupported function. It takes a SDL_Haptic device and an SDL_HapticEffect as input and returns SDL_TRUE if the effect is supported, SDL_FALSE if it's not, or a negative error code on failure. Use SDL_GetError() to retrieve error details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticEffectSupported.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticEffectSupported(SDL_Haptic * haptic,\n                              SDL_HapticEffect *\n                              effect);\n```\n\n----------------------------------------\n\nTITLE: SDL_EGL_GetProcAddress Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_EGL_GetProcAddress function in C. It takes the name of an EGL function as a string and returns a function pointer. The returned function pointer needs to be cast to the appropriate function signature before use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGL_GetProcAddress.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FunctionPointer SDL_EGL_GetProcAddress(const char *proc);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Data with Timestamp in SDL2 (C)\nDESCRIPTION: Retrieves the current sensor data along with the timestamp of the last update. It requires a pointer to an SDL_Sensor object, a Uint64 pointer to store the timestamp, a float array to store the sensor data, and the number of values to read. The function returns 0 on success and -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetDataWithTimestamp.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_SensorGetDataWithTimestamp(SDL_Sensor *sensor, Uint64 *timestamp, float *data, int num_values);\n```\n\n----------------------------------------\n\nTITLE: Get Texture Size in SDL3\nDESCRIPTION: This code snippet shows how to use the SDL_GetTextureSize function to retrieve the width and height of an SDL_Texture. It requires an SDL_Texture pointer as input and populates the provided float pointers with the texture's dimensions. The function returns true on success and false on failure. SDL must be initialized to use SDL_Texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextureSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTextureSize(SDL_Texture *texture, float *w, float *h);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer from Window in SDL3 (C)\nDESCRIPTION: Retrieves the SDL_Renderer associated with the specified SDL_Window.  If successful, it returns a pointer to the SDL_Renderer; otherwise, it returns NULL. SDL_GetError() can be used to retrieve more information about the error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_GetRenderer(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_Event in C\nDESCRIPTION: Demonstrates how to create an empty SDL_Event structure, which is necessary before using SDL_PollEvent to populate it with event data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Event.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Event test_event;\n```\n\n----------------------------------------\n\nTITLE: Get Render Window - C\nDESCRIPTION: Retrieves the SDL_Window associated with a given SDL_Renderer. It returns the window on success and NULL on failure. SDL_GetError() can be called for more detailed error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderWindow.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Window * SDL_GetRenderWindow(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Increment Atomic Integer Reference Count in C with SDL_AtomicIncRef\nDESCRIPTION: This macro increments an atomic integer variable, which is used as a reference counter, in a thread-safe manner. It takes a pointer to an SDL_AtomicInt as input and uses SDL_AddAtomicInt to perform the increment. The macro returns the previous value of the atomic variable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AtomicIncRef.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AtomicIncRef(a)    SDL_AddAtomicInt(a, 1)\n```\n\n----------------------------------------\n\nTITLE: SDL_IOStreamInterface Initialization with Designated Initializers (C)\nDESCRIPTION: This example illustrates how to initialize an SDL_IOStreamInterface structure using designated initializers. It sets the version field to the size of the interface and assigns a function pointer to the 'seek' member before opening an IO stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_INIT_INTERFACE.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStreamInterface iface = {\n    .version = sizeof(iface),\n    .seek = ...\n};\nstream = SDL_OpenIO(&iface, NULL);\n```\n\n----------------------------------------\n\nTITLE: Setting Virtual Joystick Axis State in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_SetJoystickVirtualAxis to set the state of an axis on a virtual joystick. It takes a joystick pointer, the axis index, and the new axis value as input. The function returns true on success and false on failure. The updated axis value will be applied after calling SDL_UpdateJoysticks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetJoystickVirtualAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetJoystickVirtualAxis(SDL_Joystick *joystick, int axis, Sint16 value);\n```\n\n----------------------------------------\n\nTITLE: Load Music with Specified Type from IOStream (C)\nDESCRIPTION: Loads music data from an SDL_IOStream, allowing the application to explicitly specify the music type. The `src` parameter specifies the SDL_IOStream to read from. The `type` parameter indicates the specific `Mix_MusicType`. The `closeio` parameter indicates whether to close the IOStream after loading.  It returns a `Mix_Music` pointer, or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_LoadMUSType_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Music * Mix_LoadMUSType_IO(SDL_IOStream *src, Mix_MusicType type, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: SDL_PRILL_PREFIX Macro Definition in C\nDESCRIPTION: Defines the SDL_PRILL_PREFIX macro as \"ll\", which is used as a prefix in printf format strings for printing long long integer values when using SDL's logging functions. It is intended to be used in conjunction with format specifiers like %d, %u, %x, or %X. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILL_PREFIX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRILL_PREFIX \"ll\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUVertexBufferDescription Structure Definition in C\nDESCRIPTION: Defines the structure SDL_GPUVertexBufferDescription, which holds parameters for vertex buffers. Includes the binding slot, byte pitch, input rate (vertex or instance), and an instance step rate (reserved for future use). Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUVertexBufferDescription.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUVertexBufferDescription\n{\n    Uint32 slot;                        /**< The binding slot of the vertex buffer. */\n    Uint32 pitch;                       /**< The byte pitch between consecutive elements of the vertex buffer. */\n    SDL_GPUVertexInputRate input_rate;  /**< Whether attribute addressing is a function of the vertex index or instance index. */\n    Uint32 instance_step_rate;          /**< Reserved for future use. Must be set to 0. */\n} SDL_GPUVertexBufferDescription;\n```\n\n----------------------------------------\n\nTITLE: Saving SDL Surface as PNG using IMG_SavePNG in C\nDESCRIPTION: Saves an SDL_Surface to a PNG image file using the IMG_SavePNG function. The function takes an SDL_Surface pointer and a file path as input. It returns a boolean value indicating success or failure. Requires the SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_SavePNG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SavePNG(SDL_Surface *surface, const char *file);\n```\n\n----------------------------------------\n\nTITLE: Assign Channels to Tag using Mix_GroupChannels in C\nDESCRIPTION: This code snippet demonstrates how to use the Mix_GroupChannels function to assign a tag to a range of consecutive audio channels in SDL_mixer. The 'from' and 'to' parameters specify the starting and ending channel indices, while 'tag' assigns an arbitrary value to group the channels. It returns 0 on success, or negative on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GroupChannels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GroupChannels(int from, int to, int tag);\n```\n\n----------------------------------------\n\nTITLE: Setting Haptic Autocenter with SDL_SetHapticAutocenter in C\nDESCRIPTION: Sets the global autocenter of a haptic device. The `haptic` parameter is the SDL_Haptic device to set the autocentering on. The `autocenter` parameter is the value to set autocenter to (0-100), with 0 disabling autocentering. Requires SDL 3.2.0 or later and the SDL_HAPTIC_AUTOCENTER feature to be supported by the device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetHapticAutocenter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetHapticAutocenter(SDL_Haptic *haptic, int autocenter);\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontHinting Function\nDESCRIPTION: Sets the hinting style for a font, which affects how glyphs are rendered at smaller sizes. Uses TTF_HintingFlags. Improves readability but can affect performance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontHinting(TTF_Font *font, TTF_HintingFlags hinting);                                                                         // Set a font's current hinter setting.\n```\n\n----------------------------------------\n\nTITLE: Checking Compiler Builtin Support - SDL_HAS_BUILTIN Macro in C\nDESCRIPTION: This C macro checks if the compiler supports a specified builtin functionality using the __has_builtin preprocessor directive. If the compiler doesn't support __has_builtin, it's defined as 0, resulting in a always false condition. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAS_BUILTIN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAS_BUILTIN(x) __has_builtin(x)\n```\n\n----------------------------------------\n\nTITLE: SDL_BYTESPERPIXEL Macro Definition in C\nDESCRIPTION: This macro determines the bytes per pixel of a given SDL_PixelFormat. It checks if the format is a FourCC format and calculates the bytes per pixel accordingly. Note that the parameter is double-evaluated, so avoid side-effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BYTESPERPIXEL.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_BYTESPERPIXEL(format) \\\n    (SDL_ISPIXELFORMAT_FOURCC(format) ? \\\n        ((((format) == SDL_PIXELFORMAT_YUY2) || \\\n          ((format) == SDL_PIXELFORMAT_UYVY) || \\\n          ((format) == SDL_PIXELFORMAT_YVYU) || \\\n          ((format) == SDL_PIXELFORMAT_P010)) ? 2 : 1) : (((format) >> 0) & 0xFF))\n```\n\n----------------------------------------\n\nTITLE: Get Music Album Tag in SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax for the `Mix_GetMusicAlbumTag` function in SDL_mixer. It retrieves the album name from a `Mix_Music` object. If the music object is NULL, it retrieves the album tag from the currently playing music. The function returns a `const char*` representing the album name, or an empty string if the tag is not available. Requires SDL_mixer 2.6.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicAlbumTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicAlbumTag(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Style with TTF_SetFontStyle in C\nDESCRIPTION: This snippet shows how to use the TTF_SetFontStyle function to set the style of a TTF_Font. The style parameter accepts bitwise OR'd flags for bold, italic, underline, and strikethrough.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontStyle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontStyle(TTF_Font *font, int style);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockSpinlock Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UnlockSpinlock function in C, which unlocks a spin lock. It takes a pointer to an SDL_SpinLock as a parameter. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnlockSpinlock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockSpinlock(SDL_SpinLock *lock);\n```\n\n----------------------------------------\n\nTITLE: SDL_FingerID Typedef Definition in C\nDESCRIPTION: Defines SDL_FingerID as an unsigned 64-bit integer (Uint64). This type represents a unique ID for a finger touching a touch device. The value 0 is reserved as an invalid ID. The type is used within the SDL3 framework for managing touch events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FingerID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint64 SDL_FingerID;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED macro as a string literal. This hint overrides SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES and the built-in device list. The string represents a comma-separated list of USB VID/PID pairs in hexadecimal format, or a file path prefixed with '@' to load the list from a file. This hint is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED \"SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUDepthStencilTargetInfo Structure Definition in C\nDESCRIPTION: Defines the SDL_GPUDepthStencilTargetInfo structure, which specifies the parameters of a depth-stencil target used by a render pass. It includes members for the texture, clear depth, load/store operations for depth and stencil, whether to cycle the texture, and the clear stencil value. This struct is used with functions like SDL_BeginGPURenderPass.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUDepthStencilTargetInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUDepthStencilTargetInfo\n{\n    SDL_GPUTexture *texture;               /**< The texture that will be used as the depth stencil target by the render pass. */\n    float clear_depth;                     /**< The value to clear the depth component to at the beginning of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. */\n    SDL_GPULoadOp load_op;                 /**< What is done with the depth contents at the beginning of the render pass. */\n    SDL_GPUStoreOp store_op;               /**< What is done with the depth results of the render pass. */\n    SDL_GPULoadOp stencil_load_op;         /**< What is done with the stencil contents at the beginning of the render pass. */\n    SDL_GPUStoreOp stencil_store_op;       /**< What is done with the stencil results of the render pass. */\n    bool cycle;                        /**< true cycles the texture if the texture is bound and any load ops are not LOAD */\n    Uint8 clear_stencil;                   /**< The value to clear the stencil component to at the beginning of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_GPUDepthStencilTargetInfo;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WAVE_FACT_CHUNK in C\nDESCRIPTION: Defines the SDL_HINT_WAVE_FACT_CHUNK macro. This macro is used as the name of the environment variable or hint to control the handling of the WAVE file's fact chunk when loading audio data. This hint allows SDL to either truncate, strictly enforce, ignore if zero, or completely ignore the fact chunk information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WAVE_FACT_CHUNK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WAVE_FACT_CHUNK \"SDL_WAVE_FACT_CHUNK\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ceil Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ceil function, which takes a double as input and returns a double representing the ceiling of the input value. The function is available since SDL 3.2.0 and is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ceil.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_ceil(double x);\n```\n\n----------------------------------------\n\nTITLE: Check CPU for LSX Features using SDL_HasLSX in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_HasLSX` function in C, which determines if the CPU supports LOONGARCH LSX features. The function returns a boolean value indicating the presence of LSX.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasLSX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasLSX(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_SPHERICAL in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_SPHERICAL macro, which is used to specify that the direction of a haptic effect is defined using spherical coordinates. The macro is defined as an integer value of 2. It's defined in SDL3/SDL_haptic.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_SPHERICAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SPHERICAL  2\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Path by Index in SDL\nDESCRIPTION: Retrieves the implementation-dependent path for a game controller using its index. The `joystick_index` parameter specifies the index of the controller, ranging from 0 to SDL_NumJoysticks()-1. The function returns a string containing the path or NULL if the index is invalid or no path exists. This function can be called before any controllers are opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerPathForIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GameControllerPathForIndex(int joystick_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_VideoQuit Syntax in C\nDESCRIPTION: The SDL_VideoQuit function shuts down the video subsystem, closing all windows and restoring the original video mode. It takes no arguments and returns nothing. It requires SDL2 and the SDL_video.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_VideoQuit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_VideoQuit(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_LockAudio Equivalent in C\nDESCRIPTION: Shows that SDL_LockAudio is equivalent to calling SDL_LockAudioDevice(1). It is only useful if SDL_OpenAudio was used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockAudio.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_LockAudioDevice(1);\n```\n\n----------------------------------------\n\nTITLE: Minimal Java Class Extending SDLActivity\nDESCRIPTION: This Java code snippet demonstrates a minimal class extending SDLActivity. This class serves as a wrapper for your application and is placed in the `src` directory under your package name. It is crucial for connecting the Java frontend with the native SDL backend.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage com.gamemaker.game;\n\nimport org.libsdl.app.SDLActivity;\n\n/**\n * A sample wrapper class that just calls SDLActivity\n */\n\npublic class MyGame extends SDLActivity { }\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Path by ID - C\nDESCRIPTION: Retrieves the implementation-dependent path of a gamepad using its instance ID. The function takes an SDL_JoystickID as input and returns a const char* representing the path. It returns NULL if no path is found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadPathForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadPathForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Getting the Default XUserHandle for Single-Player Games\nDESCRIPTION: This function retrieves the default XUserHandle pointer for single-player games.  It's important to validate the return value as the function can return errors on OS failures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nSDL_GetGDKDefaultUser\n```\n\n----------------------------------------\n\nTITLE: Creating a Color Cursor in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateColorCursor function, which creates a color cursor from an SDL_Surface. It takes an SDL_Surface pointer, the x and y coordinates of the cursor's hot spot, and returns a pointer to the new cursor. The function returns NULL on failure, and SDL_GetError() can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateColorCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor* SDL_CreateColorCursor(SDL_Surface *surface,\n                                  int hot_x,\n                                  int hot_y);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_DIRECT3D_THREADSAFE in C\nDESCRIPTION: Defines the SDL_HINT_RENDER_DIRECT3D_THREADSAFE hint as a string literal. This hint is used to control whether the Direct3D renderer is initialized in a thread-safe manner. The hint should be set before creating any renderers to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_DIRECT3D_THREADSAFE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_DIRECT3D_THREADSAFE \"SDL_RENDER_DIRECT3D_THREADSAFE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_CompareCallback Typedef Definition in C\nDESCRIPTION: Defines the SDL_CompareCallback, a function pointer type in C. This callback is used by SDL's sorting (SDL_qsort) and searching (SDL_bsearch) functions to compare two elements. The function should return -1, 0, or 1, indicating the relative order of the two elements.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CompareCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int (SDLCALL *SDL_CompareCallback)(const void *a, const void *b);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyHatEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_JoyHatEvent, which represents a joystick hat position change event. This structure includes members for the event type, timestamp, joystick instance ID, hat index, hat position value, and padding.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoyHatEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyHatEvent\n{\n    Uint32 type;        /**< SDL_JOYHATMOTION */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 hat;          /**< The joystick hat index */\n    Uint8 value;        /**< The hat position value.\n                         *   \\sa SDL_HAT_LEFTUP SDL_HAT_UP SDL_HAT_RIGHTUP\n                         *   \\sa SDL_HAT_LEFT SDL_HAT_CENTERED SDL_HAT_RIGHT\n                         *   \\sa SDL_HAT_LEFTDOWN SDL_HAT_DOWN SDL_HAT_RIGHTDOWN\n                         *\n                         *   Note that zero means the POV is centered.\n                         */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_JoyHatEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickSendEffect Syntax in C\nDESCRIPTION: This snippet shows the syntax for the `SDL_JoystickSendEffect` function in C. It takes an SDL_Joystick pointer, a void pointer to the data to send, and the size of the data as input. It returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickSendEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickSendEffect(SDL_Joystick *joystick, const void *data, int size);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderWindowToLogical Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_RenderWindowToLogical function, which converts window coordinates to logical coordinates. It requires an SDL_Renderer, window coordinates (windowX, windowY) as integers, and pointers to floats to store the resulting logical coordinates (logicalX, logicalY).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderWindowToLogical.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_RenderWindowToLogical(SDL_Renderer * renderer, \n                                    int windowX, int windowY, \n                                    float *logicalX, float *logicalY);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockAudioDevice Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_UnlockAudioDevice function in C. It takes the device ID as input and has a void return type. The function unlocks the audio callback function for the specified device, allowing the audio device to resume audio processing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnlockAudioDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);\n```\n\n----------------------------------------\n\nTITLE: SDL_EndGPUCopyPass Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_EndGPUCopyPass function in C. It takes a pointer to an SDL_GPUCopyPass structure as input, which represents the copy pass to end.  This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EndGPUCopyPass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_EndGPUCopyPass(\n    SDL_GPUCopyPass *copy_pass);\n```\n\n----------------------------------------\n\nTITLE: Get RTF Height - RTF_GetHeight - C\nDESCRIPTION: This function retrieves the height of an RTF render area given a specified width, used to reflow text and prepare for rendering. It requires an RTF_Context pointer representing the RTF context and an integer representing the desired width. It returns the height in pixels as an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_GetHeight.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint RTF_GetHeight(RTF_Context *ctx, int width);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ANDROID_TRAP_BACK_BUTTON in C\nDESCRIPTION: Defines the SDL_HINT_ANDROID_TRAP_BACK_BUTTON macro, used to set the hint that controls whether the Android back button is trapped. Setting this hint allows handling of the back button manually, or enabling right mouse button functionality. The hint's value can be changed at any time during runtime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ANDROID_TRAP_BACK_BUTTON.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_ANDROID_TRAP_BACK_BUTTON \"SDL_ANDROID_TRAP_BACK_BUTTON\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetSensorFromID Syntax in C\nDESCRIPTION: Retrieves an SDL_Sensor object based on its instance ID.  Requires the SDL3 library. Returns a pointer to the SDL_Sensor object, or NULL on failure. The instance_id parameter specifies the ID of the sensor to retrieve.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorFromID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Sensor * SDL_GetSensorFromID(SDL_SensorID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_WINDOWPOS_UNDEFINED in C\nDESCRIPTION: Defines the SDL_WINDOWPOS_UNDEFINED macro, which is used to indicate that the window position should be determined automatically by the system, using the primary display. It is available since SDL 3.2.0 and relies on SDL_WINDOWPOS_UNDEFINED_DISPLAY(0).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINDOWPOS_UNDEFINED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_UNDEFINED         SDL_WINDOWPOS_UNDEFINED_DISPLAY(0)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WINDOWS_USE_D3D9EX Macro in C\nDESCRIPTION: Defines the SDL_HINT_WINDOWS_USE_D3D9EX macro as a string literal. This macro is used to set the hint value to control SDL's usage of the Direct3D 9Ex API on Windows. The hint should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_USE_D3D9EX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_USE_D3D9EX \"SDL_WINDOWS_USE_D3D9EX\"\n```\n\n----------------------------------------\n\nTITLE: Get GPU Text Engine Winding Order - C\nDESCRIPTION: Retrieves the winding order used by a GPU text engine. It takes a TTF_TextEngine pointer as input and returns a TTF_GPUTextEngineWinding value indicating the winding order or TTF_GPU_TEXTENGINE_WINDING_INVALID in case of an error. This function should be called on the thread that created the engine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetGPUTextEngineWinding.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_GPUTextEngineWinding TTF_GetGPUTextEngineWinding(const TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Check for Keyboard Connection\nDESCRIPTION: This code snippet shows the syntax of the SDL_HasKeyboard function in C. It takes no arguments and returns a boolean value indicating whether a keyboard is connected. It should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasKeyboard.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasKeyboard(void);\n```\n\n----------------------------------------\n\nTITLE: Releasing a GPU Transfer Buffer in SDL3 (C)\nDESCRIPTION: Frees the provided GPU transfer buffer, ensuring it's released when safe. It takes a pointer to an SDL_GPUDevice and a pointer to the SDL_GPUTransferBuffer to be released as input. The transfer buffer must not be referenced after this function is called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseGPUTransferBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseGPUTransferBuffer(\n    SDL_GPUDevice *device,\n    SDL_GPUTransferBuffer *transfer_buffer);\n```\n\n----------------------------------------\n\nTITLE: SDL_powf Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_powf function in C, which takes two float arguments, x (the base) and y (the exponent), and returns a float representing x raised to the power of y.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_powf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_powf(float x, float y);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasGamepad Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasGamepad function in C. It takes no arguments and returns a boolean value indicating whether a gamepad is connected. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasGamepad.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasGamepad(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_DownloadFromGPUTexture Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_DownloadFromGPUTexture function. This function copies data from a texture to a transfer buffer on the GPU timeline. It requires a copy pass handle, a source texture region, and destination transfer buffer information as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DownloadFromGPUTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DownloadFromGPUTexture(\n    SDL_GPUCopyPass *copy_pass,\n    const SDL_GPUTextureRegion *source,\n    const SDL_GPUTextureTransferInfo *destination);\n\n```\n\n----------------------------------------\n\nTITLE: Check Rectangle Intersection using SDL_HasRectIntersection in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_HasRectIntersection function in C. It takes two pointers to SDL_Rect structures as input and returns a boolean value indicating whether the rectangles intersect. If either pointer is NULL, it returns false.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasRectIntersection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasRectIntersection(const SDL_Rect *A, const SDL_Rect *B);\n```\n\n----------------------------------------\n\nTITLE: SDL_RWFromMem Syntax\nDESCRIPTION: Defines the syntax for the SDL_RWFromMem function in C. This function creates an SDL_RWops structure that reads from and writes to a specified memory buffer. The buffer is not copied and must remain valid until the stream is closed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWFromMem.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_RWops* SDL_RWFromMem(void *mem, int size);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_get_indexed_string Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_hid_get_indexed_string function. This function retrieves a string from a HID device based on its string index. It requires a device handle, the index of the string, a wide string buffer, and the maximum length of the buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_get_indexed_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_indexed_string(SDL_hid_device *dev, int string_index, wchar_t *string, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTrayIcon Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_SetTrayIcon function from the SDL3 library. It takes an SDL_Tray pointer and an SDL_Surface pointer as input, allowing you to update the icon of a system tray. The function does not return any value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTrayIcon.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetTrayIcon(SDL_Tray *tray, SDL_Surface *icon);\n```\n\n----------------------------------------\n\nTITLE: Iterate SoundFont paths using Mix_EachSoundFont in C\nDESCRIPTION: Iterates through the list of SoundFont paths, calling the provided callback function for each path. The paths are delimited by semicolons. The callback receives a path and a user-provided data pointer. Iteration stops if the callback returns a non-zero value. Requires SDL_mixer 2.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_EachSoundFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_EachSoundFont(Mix_EachSoundFontCallback function, void *data);\n```\n\n----------------------------------------\n\nTITLE: SDL_QuitEvent Structure Definition in C\nDESCRIPTION: Defines the SDL_QuitEvent structure, used to represent a quit event in SDL. It includes the event type, a reserved field for future use, and a timestamp indicating when the event occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_QuitEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_QuitEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_QUIT */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n} SDL_QuitEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_EGLSurface Type Definition in C\nDESCRIPTION: Defines an opaque pointer type `SDL_EGLSurface` that represents an EGL surface. This type is used to handle EGL surface objects within the SDL video subsystem. It's available since SDL 3.2.0 and defined in `SDL3/SDL_video.h`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGLSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *SDL_EGLSurface;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetEventFilter Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetEventFilter function in C. It takes a pointer to an SDL_EventFilter and a void pointer as arguments, which will store the current filter and its user data respectively. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetEventFilter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetEventFilter(SDL_EventFilter *filter, void **userdata);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeOutGroup Syntax (C)\nDESCRIPTION: Shows the function prototype for Mix_FadeOutGroup, used to fade out and halt a group of channels with a specific tag after a specified time in milliseconds. This function is part of the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadeOutGroup.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_FadeOutGroup(int tag, int ms);\n```\n\n----------------------------------------\n\nTITLE: OpenGL Profile Constants in C\nDESCRIPTION: Defines the constants for specifying the OpenGL context profile mask. These constants are used with the SDL_GL_CONTEXT_PROFILE_MASK attribute to select the desired OpenGL profile (Core, Compatibility, or ES) when creating an SDL window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLProfile.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GL_CONTEXT_PROFILE_CORE           0x0001  /**< OpenGL Core Profile context */\n#define SDL_GL_CONTEXT_PROFILE_COMPATIBILITY  0x0002  /**< OpenGL Compatibility Profile context */\n#define SDL_GL_CONTEXT_PROFILE_ES             0x0004  /**< GLX_CONTEXT_ES2_PROFILE_BIT_EXT */\n```\n\n----------------------------------------\n\nTITLE: SDL_DisplayMode Structure Definition in C\nDESCRIPTION: Defines the structure SDL_DisplayMode, which holds information about a display mode, including its display ID, pixel format, width, height, pixel density, refresh rate, and internal data. It is used to represent different display modes and their properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DisplayMode\n{\n    SDL_DisplayID displayID;        /**< the display this mode is associated with */\n    SDL_PixelFormat format;         /**< pixel format */\n    int w;                          /**< width */\n    int h;                          /**< height */\n    float pixel_density;            /**< scale converting size to pixels (e.g. a 1920x1080 mode with 2.0 scale would have 3840x2160 pixels) */\n    float refresh_rate;             /**< refresh rate (or 0.0f for unspecified) */\n    int refresh_rate_numerator;     /**< precise refresh rate numerator (or 0 for unspecified) */\n    int refresh_rate_denominator;   /**< precise refresh rate denominator */\n\n    SDL_DisplayModeData *internal;  /**< Private */\n\n} SDL_DisplayMode;\n```\n\n----------------------------------------\n\nTITLE: Check Game Controller Attachment Status in C\nDESCRIPTION: Checks if a given SDL game controller is currently connected. It takes an SDL_GameController pointer as input and returns SDL_TRUE if the controller is attached and SDL_FALSE otherwise. This function requires SDL 2.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetAttached.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GameControllerGetAttached(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Set Timidity Configuration Path - C\nDESCRIPTION: This function sets the full path of the Timidity config file for SDL_mixer. It is only relevant when SDL_mixer is configured to use Timidity for MIDI playback. The function takes the path to the configuration file as a string and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetTimidityCfg.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_SetTimidityCfg(const char *path);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogError Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_LogError function in C. It takes a category and a format string, along with optional arguments, to log an error message. The function is part of the SDL3 library and requires including SDL3/SDL_log.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogError(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Submitting a GPU Command Buffer in C\nDESCRIPTION: This code snippet demonstrates how to submit a GPU command buffer using SDL_SubmitGPUCommandBuffer. It takes an SDL_GPUCommandBuffer pointer as input and returns a boolean indicating success or failure. The command buffer is considered invalid after submission, and the function must be called from the thread where the command buffer was acquired.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SubmitGPUCommandBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SubmitGPUCommandBuffer(\n    SDL_GPUCommandBuffer *command_buffer);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_send_feature_report Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_hid_send_feature_report function in C, which sends a feature report to a specified HID device. The function requires a device handle, a pointer to the data to send, and the length of the data, including the report number as the first byte. Returns the number of bytes written or -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_send_feature_report.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_send_feature_report(SDL_hid_device *dev, const unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Saving Images in SDL3_image\nDESCRIPTION: Functions to save an SDL_Surface into an image file or through an SDL_IOStream. Includes options for specifying the quality of the saved image (e.g., for AVIF).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveAVIF(SDL_Surface *surface, const char *file, int quality);                                            // Save an SDL_Surface into a AVIF image file.\nbool IMG_SaveAVIF_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio, int quality);                          // Save an SDL_Surface into AVIF image data, via an SDL_IOStream.\nbool IMG_SavePNG(SDL_Surface *surface, const char *file);                                                          // Save an SDL_Surface into a PNG image file.\nbool IMG_SavePNG_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);                                        // Save an SDL_Surface into PNG image data, via an SDL_IOStream.\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderTexture9Grid Function Syntax in C\nDESCRIPTION: This code snippet shows the function signature of SDL_RenderTexture9Grid in C. It takes a renderer, texture, source rectangle, corner dimensions, scale, and destination rectangle as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderTexture9Grid.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderTexture9Grid(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect *dstrect);\n```\n\n----------------------------------------\n\nTITLE: SDL_GUID Structure Definition in C\nDESCRIPTION: Defines the SDL_GUID structure, a 128-bit identifier for input devices. It contains a single member, 'data', which is an array of 16 unsigned 8-bit integers (Uint8) representing the GUID's individual bytes. This structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GUID {\n    Uint8 data[16];\n} SDL_GUID;\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateYUVTexture Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_UpdateYUVTexture function, which updates a portion of a YUV texture with provided pixel data. It takes the texture, update rectangle, and plane data (Y, U, and V) along with their respective pitches.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateYUVTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_UpdateYUVTexture(SDL_Texture *texture,\n                     const SDL_Rect *rect,\n                     const Uint8 *Yplane, int Ypitch,\n                     const Uint8 *Uplane, int Upitch,\n                     const Uint8 *Vplane, int Vpitch);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderGeometryRaw Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RenderGeometryRaw function in C, including the function's return type, name, and parameters. It's used for rendering a list of triangles, optionally with a texture, color, and indices into vertex arrays. It requires the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderGeometryRaw.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderGeometryRaw(SDL_Renderer *renderer,\n                   SDL_Texture *texture,\n                   const float *xy, int xy_stride,\n                   const SDL_FColor *color, int color_stride,\n                   const float *uv, int uv_stride,\n                   int num_vertices,\n                   const void *indices, int num_indices, int size_indices);\n```\n\n----------------------------------------\n\nTITLE: Set Event Processing State with SDL_EventState in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_EventState` function. This function allows you to control how events of a specific type are processed by the SDL event loop. The `type` parameter specifies the event type, and the `state` parameter determines whether the event should be queried, ignored, or enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_EventState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint8 SDL_EventState(Uint32 type, int state);\n```\n\n----------------------------------------\n\nTITLE: Android Makefile Configuration for SDL3\nDESCRIPTION: This Android Makefile snippet shows how to link against SDL3 when using ndk-build.  It adds `SDL3` and `SDL3-Headers` to `LOCAL_SHARED_LIBRARIES`.  It also adds the prefab modules to the import path.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_3\n\nLANGUAGE: makefile\nCODE:\n```\nLOCAL_SHARED_LIBRARIES := SDL3 SDL3-Headers\n\n# https://google.github.io/prefab/build-systems.html\n# Add the prefab modules to the import path.\n$(call import-add-path,/out)\n```\n\n----------------------------------------\n\nTITLE: Get Sensor ID in C\nDESCRIPTION: Retrieves the instance ID of an SDL_Sensor object. Takes a pointer to an SDL_Sensor as input and returns the sensor's instance ID as an SDL_SensorID. Returns 0 on failure; use SDL_GetError() for details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_SensorID SDL_GetSensorID(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: Get Direct3D9 Adapter Index in SDL3 (C)\nDESCRIPTION: Retrieves the Direct3D 9 adapter index associated with the specified display ID. This function is part of SDL3 and allows applications to control which monitor a full-screen application will use. It takes an SDL_DisplayID as input and returns the D3D9 adapter index or -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDirect3D9AdapterIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDirect3D9AdapterIndex(SDL_DisplayID displayID);\n```\n\n----------------------------------------\n\nTITLE: Define Android APK Expansion Patch File Version Hint in C\nDESCRIPTION: Defines the SDL hint SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION. This hint is used to specify the version of the APK expansion patch file that SDL should search when SDL_RWFromFile is called. It must be set together with SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION for expansion files to be searched.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION \"SDL_ANDROID_APK_EXPANSION_PATCH_FILE_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: SDL VSync Definitions C\nDESCRIPTION: Defines the constants for disabling and enabling adaptive vsync. SDL_RENDERER_VSYNC_DISABLED is defined as 0 and SDL_RENDERER_VSYNC_ADAPTIVE is defined as -1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderVSync.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RENDERER_VSYNC_DISABLED 0\n#define SDL_RENDERER_VSYNC_ADAPTIVE (-1)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Camera Structure in C\nDESCRIPTION: This code snippet shows the definition of the `SDL_Camera` structure. It's an opaque structure, meaning its internal members are not directly accessible. It serves as a handle to an opened SDL camera and is used by other SDL camera functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Camera.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Camera SDL_Camera;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_AUTOCENTER Macro in C\nDESCRIPTION: This code defines the SDL_HAPTIC_AUTOCENTER macro. This macro is a bit flag that represents the ability of a haptic device to set its autocenter. It is defined as a preprocessor directive.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_AUTOCENTER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_AUTOCENTER (1u<<17)\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRGBA Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetRGBA function, which extracts RGBA values from a pixel value given a pixel format, palette, and pointers to store the results. Requires SDL3/SDL_pixels.h. Pointers to color components can be NULL if that specific component is not needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRGBA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetRGBA(Uint32 pixelvalue, const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);\n```\n\n----------------------------------------\n\nTITLE: SDL_ltoa Syntax in C\nDESCRIPTION: The SDL_ltoa function converts a long integer to a string representation in a given radix. It takes a long integer value, a character buffer to store the result, and the radix (base) for conversion. It is crucial to ensure the buffer is large enough to accommodate the resulting string to prevent overflows. The radix must be between 2 and 36.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ltoa.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_ltoa(long value, char *str, int radix);\n```\n\n----------------------------------------\n\nTITLE: Set Font Language in SDL_ttf (C)\nDESCRIPTION: Sets the language to be used for text shaping by a specified font using its BCP47 code. This function requires the font and the BCP47 language code as input. Returns true on success, false on failure. Requires SDL_ttf with HarfBuzz support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontLanguage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontLanguage(TTF_Font *font, const char *language_bcp47);\n```\n\n----------------------------------------\n\nTITLE: Enumerating Joysticks with SDL_GetJoysticks in C\nDESCRIPTION: This C code snippet demonstrates how to enumerate connected joysticks using the SDL_GetJoysticks function. It initializes the joystick subsystem, retrieves a list of joystick instance IDs, iterates through the list to obtain joystick names and paths, and then logs the information before quitting the joystick subsystem. The function SDL_GetJoysticks() returns an array of `SDL_JoystickID` and the number of joysticks. Remember to free the allocated memory with `SDL_free` after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\n{\n    if (SDL_InitSubSystem(SDL_INIT_JOYSTICK)) {\n        int i, num_joysticks;\n        SDL_JoystickID *joysticks = SDL_GetJoysticks(&num_joysticks);\n        if (joysticks) {\n            for (i = 0; i < num_joysticks; ++i) {\n                SDL_JoystickID instance_id = joysticks[i];\n                const char *name = SDL_GetJoystickNameForID(instance_id);\n                const char *path = SDL_GetJoystickPathForID(instance_id);\n\n                SDL_Log(\"Joystick %\" SDL_PRIu32 \": %s%s%s VID 0x%.4x, PID 0x%.4x\",\n                        instance_id, name ? name : \"Unknown\", path ? \", \" : \"\", path ? path : \"\", SDL_GetJoystickVendorForID(instance_id), SDL_GetJoystickProductForID(instance_id));\n            }\n            SDL_free(joysticks);\n        }\n        SDL_QuitSubSystem(SDL_INIT_JOYSTICK);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Texture Scale Mode in SDL\nDESCRIPTION: Retrieves the scaling mode used for texture scale operations. Requires an SDL_Texture pointer and a pointer to an SDL_ScaleMode where the current scale mode will be stored. Returns 0 on success and -1 if the texture is not valid.  Available since SDL 2.0.12.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTextureScaleMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetTextureScaleMode(SDL_Texture * texture,\n                            SDL_ScaleMode *scaleMode);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_NO_SIGNAL_HANDLERS in C\nDESCRIPTION: Defines the SDL_HINT_NO_SIGNAL_HANDLERS macro, which is a string representing the name of the hint. This hint controls whether SDL should install signal handlers for SIGINT and SIGTERM on Unix-like systems. It must be set before calling SDL_Init().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_NO_SIGNAL_HANDLERS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_NO_SIGNAL_HANDLERS   \"SDL_NO_SIGNAL_HANDLERS\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUShaderStage Enum in C\nDESCRIPTION: This code snippet defines the SDL_GPUShaderStage enum in C. It specifies the possible stages for a GPU shader program: vertex and fragment. This enum is used when creating shaders to identify their intended use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUShaderStage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUShaderStage\n{\n    SDL_GPU_SHADERSTAGE_VERTEX,\n    SDL_GPU_SHADERSTAGE_FRAGMENT\n} SDL_GPUShaderStage;\n```\n\n----------------------------------------\n\nTITLE: SDL_atan2f Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_atan2f function in C. It takes two float arguments, y and x, and returns the arc tangent of y/x as a float. The quadrant of the result is determined based on the signs of x and y.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_atan2f.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_atan2f(float y, float x);\n```\n\n----------------------------------------\n\nTITLE: Mix_GetChunk Syntax in C\nDESCRIPTION: Retrieves the Mix_Chunk associated with a mixer channel. The channel parameter specifies the channel to query. Returns a pointer to the Mix_Chunk if successful, or NULL if the channel is invalid. Do not use MAX_CHANNEL_POST or -1 for the channel.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetChunk.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Chunk * Mix_GetChunk(int channel);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Device Channel Map in SDL3\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAudioDeviceChannelMap function, used to retrieve the current channel map of an audio device in SDL3. It takes the device ID and a pointer to an integer to store the number of channels as input. The function returns a pointer to an integer array representing the channel mapping, which needs to be freed using SDL_free() when no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioDeviceChannelMap.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint * SDL_GetAudioDeviceChannelMap(SDL_AudioDeviceID devid, int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_atoi Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_atoi function, which takes a null-terminated string as input and returns an integer. The string must not be NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_atoi.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_atoi(const char *str);\n```\n\n----------------------------------------\n\nTITLE: TTF_AppendTextString Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_AppendTextString function in C, which appends UTF-8 text to a TTF_Text object. The function takes a pointer to the TTF_Text object, a pointer to the UTF-8 string, and the length of the string as parameters. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_AppendTextString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_AppendTextString(TTF_Text *text, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontLineSkip Function\nDESCRIPTION: Queries the spacing between lines of text for a font, in pixels. This value represents the total height of a line of text, including the font height and any additional line spacing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_34\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontLineSkip(const TTF_Font *font);                                                                                             // Query the spacing between lines of text for a font.\n```\n\n----------------------------------------\n\nTITLE: Get Glyph Image in SDL_ttf (C)\nDESCRIPTION: Retrieves the pixel image for a given UNICODE codepoint from a specified TTF_Font. The function returns an SDL_Surface containing the glyph, or NULL on failure. Call SDL_GetError() for more information in case of failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetGlyphImage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_GetGlyphImage(TTF_Font *font, Uint32 ch, TTF_ImageType *image_type);\n```\n\n----------------------------------------\n\nTITLE: SDL_IsGameController Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_IsGameController function. It takes an integer `joystick_index` as input, which represents the index of the joystick to check. The function returns an SDL_bool value indicating whether the joystick is supported by the game controller interface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsGameController.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IsGameController(int joystick_index);\n```\n\n----------------------------------------\n\nTITLE: Setting an Atomic Variable using SDL_AtomicSet in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_AtomicSet function to set the value of an atomic variable. It requires the SDL library to be included and linked. The function returns the previous value of the atomic variable. It's important to understand atomic operations before using this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicSet.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AtomicSet(SDL_atomic_t *a, int v);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Type by ID in SDL3 (C)\nDESCRIPTION: This snippet demonstrates how to use the `SDL_GetJoystickTypeForID` function to retrieve the joystick type based on its instance ID. It requires the SDL3 library. An invalid `instance_id` will return `SDL_JOYSTICK_TYPE_UNKNOWN`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickTypeForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickType SDL_GetJoystickTypeForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get HID Report Descriptor in C\nDESCRIPTION: Retrieves a report descriptor from a HID device using SDL_hid_get_report_descriptor. This function requires a preallocated buffer (buf) to store the descriptor. The size of the buffer (buf_size) must be provided. A device handle (dev) obtained from SDL_hid_open() is required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_get_report_descriptor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_report_descriptor(SDL_hid_device *dev, unsigned char *buf, size_t buf_size);\n```\n\n----------------------------------------\n\nTITLE: Set Font Size Dynamically in SDL_ttf (C)\nDESCRIPTION: Sets the font size dynamically for a given TTF_Font object. This function accepts a TTF_Font pointer and a float representing the desired point size as input. It returns true on success and false on failure, and updates existing TTF_Text objects and clears glyph caches.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontSize.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_SetFontSize(TTF_Font *font, float ptsize);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Weight Definitions in C\nDESCRIPTION: This code snippet defines the constants for various font weights. These constants are used to represent the lightness or heaviness of strokes in a font, ranging from Thin to ExtraBlack. They are the possible return values of `TTF_GetFontWeight`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontWeight.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_FONT_WEIGHT_THIN        100 /**< Thin (100) named font weight value */\n#define TTF_FONT_WEIGHT_EXTRA_LIGHT 200 /**< ExtraLight (200) named font weight value */\n#define TTF_FONT_WEIGHT_LIGHT       300 /**< Light (300) named font weight value */\n#define TTF_FONT_WEIGHT_NORMAL      400 /**< Normal (400) named font weight value */\n#define TTF_FONT_WEIGHT_MEDIUM      500 /**< Medium (500) named font weight value */\n#define TTF_FONT_WEIGHT_SEMI_BOLD   600 /**< SemiBold (600) named font weight value */\n#define TTF_FONT_WEIGHT_BOLD        700 /**< Bold (700) named font weight value */\n#define TTF_FONT_WEIGHT_EXTRA_BOLD  800 /**< ExtraBold (800) named font weight value */\n#define TTF_FONT_WEIGHT_BLACK       900 /**< Black (900) named font weight value */\n#define TTF_FONT_WEIGHT_EXTRA_BLACK 950 /**< ExtraBlack (950) named font weight value */\n```\n\n----------------------------------------\n\nTITLE: Calculate GPU Texture Format Size in C\nDESCRIPTION: This function calculates the size in bytes of a texture format with the given dimensions. It takes the texture format, width, height, and depth/layer count as input and returns the size in bytes. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CalculateGPUTextureFormatSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_CalculateGPUTextureFormatSize(\n    SDL_GPUTextureFormat format,\n    Uint32 width,\n    Uint32 height,\n    Uint32 depth_or_layer_count);\n\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickIsHaptic Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_JoystickIsHaptic function to check if a joystick has haptic features. It takes an SDL_Joystick pointer as input and returns an integer indicating whether the joystick is haptic (SDL_TRUE), not haptic (SDL_FALSE), or an error code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickIsHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickIsHaptic(SDL_Joystick * joystick);\n```\n\n----------------------------------------\n\nTITLE: Set Custom GPU Render State in SDL3\nDESCRIPTION: This C code snippet demonstrates how to set custom GPU render state using the SDL_SetRenderGPUState function in SDL3. It takes an SDL_Renderer pointer and an SDL_GPURenderState pointer as input. Passing NULL as the state clears any existing custom GPU render state. It returns true on success and false on failure. The function requires SDL3.4.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderGPUState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderGPUState(SDL_Renderer *renderer, SDL_GPURenderState *state);\n```\n\n----------------------------------------\n\nTITLE: Reset OpenGL Attributes in SDL2 (C)\nDESCRIPTION: Resets all previously set OpenGL context attributes to their default values. This function does not take any arguments and returns void. It is part of the SDL_video.h header and has been available since SDL 2.0.2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_ResetAttributes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GL_ResetAttributes(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_CloseAsyncIO Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_CloseAsyncIO function. It takes a pointer to an SDL_AsyncIO structure, a boolean indicating whether to flush data, a pointer to an SDL_AsyncIOQueue, and a void pointer for user data as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseAsyncIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CloseAsyncIO(SDL_AsyncIO *asyncio, bool flush, SDL_AsyncIOQueue *queue, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Get Window from Renderer in SDL2 (C)\nDESCRIPTION: Retrieves the SDL_Window associated with a given SDL_Renderer. This function takes a pointer to an SDL_Renderer and returns a pointer to the SDL_Window that the renderer is rendering to. If the function fails, it returns NULL and SDL_GetError() can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_RenderGetWindow(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Get Window Pixel Format in C\nDESCRIPTION: Retrieves the pixel format associated with the specified SDL window. The function takes a pointer to an SDL_Window as input and returns an SDL_PixelFormat value representing the window's pixel format. If the operation fails, it returns SDL_PIXELFORMAT_UNKNOWN. It should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowPixelFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PixelFormat SDL_GetWindowPixelFormat(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Toggle Cursor Visibility with SDL_ShowCursor in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_ShowCursor function to either show or hide the mouse cursor. The 'toggle' parameter controls the cursor's visibility: SDL_ENABLE shows the cursor, SDL_DISABLE hides it, and SDL_QUERY retrieves the current state. The function returns SDL_ENABLE if the cursor is currently shown, SDL_DISABLE if it is hidden, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ShowCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_ShowCursor(int toggle);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ORIENTATIONS Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_ORIENTATIONS macro in C. This macro expands to the string \"SDL_ORIENTATIONS\", which is used as the key when setting the hint via SDL_SetHint or SDL_SetHintWithPriority. This hint controls the allowed UI orientations on iOS and Android.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ORIENTATIONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ORIENTATIONS \"SDL_ORIENTATIONS\"\n```\n\n----------------------------------------\n\nTITLE: Mix_SetPosition Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_SetPosition function in C, which is used to set the position of an audio channel. It takes the channel number, angle, and distance as parameters, and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_SetPosition(int channel, Sint16 angle, Uint8 distance);\n```\n\n----------------------------------------\n\nTITLE: SDL_MapRGBA Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_MapRGBA function, which converts an RGBA color to a pixel value based on a given pixel format and palette. It takes the pixel format, an optional palette, and the red, green, blue, and alpha components as input. The function returns a Uint32 representing the mapped pixel value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MapRGBA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_MapRGBA(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b, Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: SDL_BindAudioStreams Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_BindAudioStreams function, which binds audio streams to an audio device. It takes an audio device ID, an array of audio streams, and the number of streams as input. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindAudioStreams.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream * const *streams, int num_streams);\n```\n\n----------------------------------------\n\nTITLE: Creating an RTF Context in C with SDL_rtf\nDESCRIPTION: This code snippet shows the syntax for creating an RTF display context using the RTF_CreateContext function. It takes an SDL_Renderer and an RTF_FontEngine as input and returns a pointer to the created RTF_Context. The created context is used for rendering RTF formatted text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_CreateContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nRTF_Context * RTF_CreateContext(SDL_Renderer *renderer, RTF_FontEngine *fontEngine);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_BATCHING in C\nDESCRIPTION: Defines the SDL_HINT_RENDER_BATCHING macro, a string constant used as the key for setting the render batching hint in SDL. This hint controls whether the render API batches draw calls for efficiency.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_BATCHING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_BATCHING  \"SDL_RENDER_BATCHING\"\n```\n\n----------------------------------------\n\nTITLE: Embedding Files with Emscripten\nDESCRIPTION: This command uses Emscripten's `emcc` compiler to compile a C source file and embed a data file into the web application. It compiles `loopwave.c`, embeds `../test/sample.wav` at the virtual path `/sounds/sample.wav`, and outputs an HTML file (`index.html`). The `--embed-file` option includes the specified file in the application's file system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/emscripten.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nemcc -o index.html loopwave.c --embed-file ../test/sample.wav@/sounds/sample.wav\n```\n\n----------------------------------------\n\nTITLE: SDL_GetProcessOutput Syntax\nDESCRIPTION: Retrieves the SDL_IOStream associated with a process's standard output.  The process must have been created with specific flags set during creation. Returns the output stream or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetProcessOutput.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStream * SDL_GetProcessOutput(SDL_Process *process);\n```\n\n----------------------------------------\n\nTITLE: Define TTF_STYLE_NORMAL macro in C\nDESCRIPTION: Defines the TTF_STYLE_NORMAL macro to represent the normal font style, which is equivalent to a value of 0x00. This macro is used by the SDL_ttf library to specify that no additional font styles (like bold or italic) should be applied when rendering text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_STYLE_NORMAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_STYLE_NORMAL        0x00\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Address Mode in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetRenderTextureAddressMode function. It sets the horizontal (u_mode) and vertical (v_mode) texture addressing modes for rendering geometry in SDL3 using a specified renderer.  The function requires a valid SDL_Renderer pointer and SDL_TextureAddressMode values for both U and V coordinates.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderTextureAddressMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderTextureAddressMode(SDL_Renderer *renderer, SDL_TextureAddressMode u_mode, SDL_TextureAddressMode v_mode);\n```\n\n----------------------------------------\n\nTITLE: Closing a TCP Socket with SDLNet_TCP_Close in C\nDESCRIPTION: This code snippet shows the syntax for closing a TCP network socket using the SDLNet_TCP_Close function from the SDL_net library. The function takes a TCPsocket as input, which is the socket to be closed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_Close.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_TCP_Close(TCPsocket sock);\n```\n\n----------------------------------------\n\nTITLE: IMG_ReadXPMFromArrayToRGB888 Syntax (C)\nDESCRIPTION: Defines the syntax for the IMG_ReadXPMFromArrayToRGB888 function in C. This function loads an XPM image from a memory array (char**) and returns a pointer to an SDL_Surface.  Dependencies: SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_ReadXPMFromArrayToRGB888.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_ReadXPMFromArrayToRGB888(char **xpm);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadJPG_IO Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadJPG_IO function in C, which loads a JPG image from an SDL_IOStream. It takes an SDL_IOStream pointer as input and returns an SDL_Surface pointer, or NULL on error. Requires the SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadJPG_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadJPG_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: TTF_TextEngine struct definition in C\nDESCRIPTION: Defines the `TTF_TextEngine` struct, which serves as a base for text rendering engines in SDL_ttf. Applications and libraries can use this public interface to perform custom rendering with text objects. See SDL3_ttf/SDL_textengine.h for details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_TextEngine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct TTF_TextEngine TTF_TextEngine;\n```\n\n----------------------------------------\n\nTITLE: IMG_isSVG Function Signature in C\nDESCRIPTION: This function checks if the provided SDL_RWops contains SVG image data. It requires a readable and seekable SDL_RWops as input. It returns a non-zero value if the data is SVG, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isSVG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isSVG(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_TLSGet Syntax in C\nDESCRIPTION: Retrieves the value associated with a thread-local storage ID for the current thread. It takes an SDL_TLSID as input and returns a void pointer to the associated value, or NULL if no value has been set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TLSGet.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_TLSGet(SDL_TLSID id);\n```\n\n----------------------------------------\n\nTITLE: Putting Audio Data into an SDL_AudioStream\nDESCRIPTION: This code snippet shows how to feed audio data into an SDL_AudioStream using SDL_PutAudioStreamData. It reads samples from a disk (simulated by a function `read_more_samples_from_disk`) and then puts the data into the stream, specifying the number of bytes. It includes error handling to check if the data was successfully added to the stream. The snippet also demonstrates adding a single sample to the stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/AudioStream.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSint16 samples[1024];\nint num_samples = read_more_samples_from_disk(samples); // whatever.\n// you tell it the number of _bytes_, not samples, you're putting!\nint rc = SDL_PutAudioStreamData(stream, samples, num_samples * sizeof (Sint16));\nif (rc == -1) {\n    printf(\"Uhoh, failed to put samples in stream: %s\\n\", SDL_GetError());\n    return;\n}\n\n// Whoops, forgot to add a single sample at the end...!\n//  You can put any amount at once, SDL will buffer\n//  appropriately, growing the buffer if necessary.\nSint16 onesample = 22;\nSDL_PutAudioStreamData(stream, &onesample, sizeof (Sint16));\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUDepthStencilState Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_GPUDepthStencilState` which is used to specify the parameters of the graphics pipeline depth stencil state. It includes members for compare operations, stencil operation states for front and back facing triangles, compare and write masks, and flags to enable depth and stencil testing and writing. This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUDepthStencilState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUDepthStencilState\n{\n    SDL_GPUCompareOp compare_op;                /**< The comparison operator used for depth testing. */\n    SDL_GPUStencilOpState back_stencil_state;   /**< The stencil op state for back-facing triangles. */\n    SDL_GPUStencilOpState front_stencil_state;  /**< The stencil op state for front-facing triangles. */\n    Uint8 compare_mask;                         /**< Selects the bits of the stencil values participating in the stencil test. */\n    Uint8 write_mask;                           /**< Selects the bits of the stencil values updated by the stencil test. */\n    bool enable_depth_test;                 /**< true enables the depth test. */\n    bool enable_depth_write;                /**< true enables depth writes. Depth writes are always disabled when enable_depth_test is false. */\n    bool enable_stencil_test;               /**< true enables the stencil test. */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_GPUDepthStencilState;\n```\n\n----------------------------------------\n\nTITLE: Get Number of Playing Effects SDL Haptic C\nDESCRIPTION: This code snippet shows the syntax for using SDL_HapticNumEffectsPlaying to retrieve the number of haptic effects that can play at the same time on a given haptic device. It takes an SDL_Haptic pointer as input and returns the number of effects as an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticNumEffectsPlaying.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticNumEffectsPlaying(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: SDL_RemoveTimer Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_RemoveTimer function. It takes a SDL_TimerID as input, which is the ID of the timer to be removed. The function returns SDL_TRUE if the timer is successfully removed, and SDL_FALSE if the timer is not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RemoveTimer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_RemoveTimer(SDL_TimerID id);\n```\n\n----------------------------------------\n\nTITLE: Getting Audio Decoder Information\nDESCRIPTION: These functions retrieve information about available audio decoders (chunks and music). They allow you to enumerate and check for specific decoders.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nint Mix_GetNumChunkDecoders(void);                                                        // Get a list of chunk decoders that this build of SDL_mixer provides.\nconst char * Mix_GetChunkDecoder(int index);                                              // Get a chunk decoder's name.\nbool Mix_HasChunkDecoder(const char *name);                                               // Check if a chunk decoder is available by name.\nint Mix_GetNumMusicDecoders(void);                                                        // Get a list of music decoders that this build of SDL_mixer provides.\nconst char * Mix_GetMusicDecoder(int index);                                              // Get a music decoder's name.\nbool Mix_HasMusicDecoder(const char *name);                                               // Check if a music decoder is available by name.\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Point structure in C\nDESCRIPTION: This code defines the SDL_Point structure, which consists of two integer members x and y, representing the coordinates of a point. It is used by SDL functions like SDL_EnclosePoints and SDL_PointInRect. It's defined in SDL_rect.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Point.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Point\n{\n    int x;\n    int y;\n} SDL_Point;\n```\n\n----------------------------------------\n\nTITLE: Loading LBM Images using SDL_image in C\nDESCRIPTION: Loads an LBM image directly from an SDL_RWops stream. This function bypasses SDL_image's file format detection. It requires the SDL_image library and an SDL_RWops source as input. Returns an SDL_Surface or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadLBM_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadLBM_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUShaderFormat Type Definition\nDESCRIPTION: Defines the SDL_GPUShaderFormat type as a Uint32. This type is used to represent the format of the shader code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUShaderFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_GPUShaderFormat;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAssertionReport Syntax\nDESCRIPTION: Provides the C syntax for the SDL_GetAssertionReport function. This function retrieves a list of all assertion failures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAssertionReport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_AssertData * SDL_GetAssertionReport(void);\n```\n\n----------------------------------------\n\nTITLE: SDL Header Renaming Script (Shell)\nDESCRIPTION: This command line uses the `rename_headers.py` script to rename SDL2 headers to their SDL3 counterparts in the specified source code path, updating include directives in the source code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nrename_headers.py source_code_path\n```\n\n----------------------------------------\n\nTITLE: Check Music Decoder Availability in SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax for the Mix_HasMusicDecoder function, which checks if a music decoder is available by name. It requires SDL_mixer to be initialized and a valid audio device to be opened via Mix_OpenAudio() or Mix_OpenAudioDevice() before being called. The function returns SDL_TRUE if the decoder is available and SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_HasMusicDecoder.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_bool Mix_HasMusicDecoder(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH macro, which is used to set the hint for asynchronous OpenGL dispatching on macOS. The hint value can be either \"0\" (blocking) or \"1\" (non-blocking). This macro is defined in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH \"SDL_MAC_OPENGL_ASYNC_DISPATCH\"\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop End Time SDL_mixer C\nDESCRIPTION: Retrieves the loop end time position of a music stream, specified in seconds. Requires a valid Mix_Music pointer. Returns the end time as a double.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicLoopEndTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Check if Font is Fixed-Width in SDL_ttf (C)\nDESCRIPTION: This C code snippet shows the syntax for using the `TTF_FontFaceIsFixedWidth` function from the SDL_ttf library. It takes a `TTF_Font` pointer as input and returns an integer indicating whether the font is fixed-width (non-zero) or not (zero).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_FontFaceIsFixedWidth.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_FontFaceIsFixedWidth(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_LockProperties Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_LockProperties function, which locks a group of properties for thread safety in SDL3. It takes an SDL_PropertiesID as input and returns a boolean indicating success or failure. Call SDL_GetError() for more information about failures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_LockProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_INIT_INTERFACE Macro Definition (C)\nDESCRIPTION: This macro initializes an SDL interface structure by zeroing its memory and setting its version to the size of the structure. It should be called before populating the interface with implementation-specific function pointers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_INIT_INTERFACE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_INIT_INTERFACE(iface)               \\\n    do {                                        \\\n        SDL_zerop(iface);                       \\\n        (iface)->version = sizeof(*(iface));    \\\n    } while (0)\n```\n\n----------------------------------------\n\nTITLE: Get Surface Color Key in SDL2 (C)\nDESCRIPTION: Retrieves the color key (transparent pixel) for a given SDL_Surface. The function takes a pointer to the SDL_Surface and a pointer to a Uint32 variable, which will be populated with the transparent pixel value. Returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetColorKey.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetColorKey(SDL_Surface * surface,\n                    Uint32 * key);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTextureAlphaModFloat Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetTextureAlphaModFloat function in C. This function retrieves the alpha modulation value of a texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextureAlphaModFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTextureAlphaModFloat(SDL_Texture *texture, float *alpha);\n```\n\n----------------------------------------\n\nTITLE: Defining TTF_GPUTextEngineWinding enum in C\nDESCRIPTION: Defines the TTF_GPUTextEngineWinding enum, which specifies the winding order (clockwise or counter-clockwise) for vertices used in GPU text rendering within SDL_ttf. It provides options for invalid, clockwise, and counter-clockwise winding orders. This enum is available starting from SDL_ttf version 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GPUTextEngineWinding.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum TTF_GPUTextEngineWinding\n{\n    TTF_GPU_TEXTENGINE_WINDING_INVALID = -1,\n    TTF_GPU_TEXTENGINE_WINDING_CLOCKWISE,\n    TTF_GPU_TEXTENGINE_WINDING_COUNTER_CLOCKWISE\n} TTF_GPUTextEngineWinding;\n```\n\n----------------------------------------\n\nTITLE: SDL_asin Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_asin function, which computes the arc sine of a double-precision floating point value. The function takes a double as input and returns a double representing the arc sine in radians.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_asin.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_asin(double x);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Chunk Decoders and Print Supported Types in SDL_mixer (C)\nDESCRIPTION: This code snippet demonstrates how to retrieve the number of chunk decoders available in SDL_mixer using `Mix_GetNumChunkDecoders()` and then iterate through each decoder to print its supported type using `Mix_GetChunkDecoder()`. It requires SDL_mixer to be initialized with `Mix_OpenAudio()` or `Mix_OpenAudioDevice()` before calling these functions. The `printf` function is used to output the results.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetNumChunkDecoders.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint i;\nconst int total = Mix_GetNumChunkDecoders();\nfor (i = 0; i < total; i++) {\n    printf(\"Supported chunk decoder: [%s]\\n\", Mix_GetChunkDecoder(i));\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadU8 Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadU8 function in C.  This function reads a byte from the provided SDL_IOStream and stores it in the memory location pointed to by the 'value' parameter. It returns a boolean indicating success or failure. Failure includes reaching the end-of-file (EOF).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadU8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadU8(SDL_IOStream *src, Uint8 *value);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MIXER_MAJOR_VERSION in C\nDESCRIPTION: This code snippet defines the SDL_MIXER_MAJOR_VERSION macro, which represents the major version number of the SDL_mixer library. It is a preprocessor directive that assigns the value 2 to the macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/SDL_MIXER_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIXER_MAJOR_VERSION 2\n```\n\n----------------------------------------\n\nTITLE: Deinitialize SDL_image with IMG_Quit in C\nDESCRIPTION: The IMG_Quit function deinitializes the SDL_image library. It unloads any shared libraries used for various image codecs. This function should be called after freeing all other SDL_image resources.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid IMG_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_RectEmpty Function Definition in C\nDESCRIPTION: This code snippet shows the definition of the `SDL_RectEmpty` function. It takes a constant pointer to an `SDL_Rect` structure as input and returns an `SDL_bool` value indicating whether the rectangle has no area (width or height is zero). The `SDL_FORCE_INLINE` directive suggests the compiler should inline this function for performance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RectEmpty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE SDL_bool SDL_RectEmpty(const SDL_Rect *r);\n```\n\n----------------------------------------\n\nTITLE: SDL_HAPTIC_CONSTANT Macro Definition in C\nDESCRIPTION: Defines the SDL_HAPTIC_CONSTANT macro, which is a bit flag indicating support for constant haptic effects. This macro is defined as (1u<<0), which is equivalent to 1.  It's available since SDL 3.2.0 and is used to check haptic device capabilities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_CONSTANT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_CONSTANT     (1u<<0)\n```\n\n----------------------------------------\n\nTITLE: Check Mouse Connection Status\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasMouse function in C, which checks if a mouse is currently connected to the system. It takes no arguments and returns a boolean value indicating whether a mouse is present.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasMouse.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasMouse(void);\n```\n\n----------------------------------------\n\nTITLE: Check if mouse has haptic capabilities in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_MouseIsHaptic function, which checks if the current mouse device has haptic feedback capabilities. It returns SDL_TRUE if the mouse is haptic and SDL_FALSE if it isn't. The function is part of the SDL_haptic.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MouseIsHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_MouseIsHaptic(void);\n```\n\n----------------------------------------\n\nTITLE: Halt Channel Group - SDL_mixer - C\nDESCRIPTION: This function halts playback on all channels with the specified tag in SDL_mixer. It takes an integer tag as input, which is an arbitrary value assigned to channels to form groups. The function returns 0, indicating success regardless of whether any channels were halted.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_HaltGroup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_HaltGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: Get SoundFonts Paths Mix_GetSoundFonts C\nDESCRIPTION: Retrieves the paths to the SoundFont files currently in use by the MIDI backend. This function returns a string containing the paths that were previously set using `Mix_SetSoundFonts`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_32\n\nLANGUAGE: c\nCODE:\n```\nconst char * Mix_GetSoundFonts(void);\n```\n\n----------------------------------------\n\nTITLE: Check Gamepad Axis Availability using SDL_GamepadHasAxis in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GamepadHasAxis function to check if a gamepad has a specific axis defined in its mapping. The function takes a pointer to an SDL_Gamepad structure and an SDL_GamepadAxis enum value as input. It returns true if the gamepad has the specified axis and false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadHasAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GamepadHasAxis(SDL_Gamepad *gamepad, SDL_GamepadAxis axis);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTicks64 Usage Example\nDESCRIPTION: Example code demonstrating how to use SDL_GetTicks64 to implement a timeout. It calculates a future timestamp and loops until that timestamp has been reached.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTicks64.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst Uint64 timeout = SDL_GetTicks64() + 100;\nwhile (SDL_GetTicks64() < timeout) {\n    // ... do work until timeout has elapsed\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_DrawGPUPrimitivesIndirect Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_DrawGPUPrimitivesIndirect function. This function draws data using bound graphics state with draw parameters from a buffer. It requires an SDL_GPURenderPass, an SDL_GPUBuffer, an offset, and a draw count.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DrawGPUPrimitivesIndirect.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_DrawGPUPrimitivesIndirect(\n    SDL_GPURenderPass *render_pass,\n    SDL_GPUBuffer *buffer,\n    Uint32 offset,\n    Uint32 draw_count);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTLS Syntax in C\nDESCRIPTION: This C code snippet shows the syntax of the `SDL_SetTLS` function in SDL3. It takes a pointer to an `SDL_TLSID`, a pointer to a value, and a destructor function as parameters. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTLS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetTLS(SDL_TLSID *id, const void *value, SDL_TLSDestructorCallback destructor);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_STEAM in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_STEAM hint as a string literal. This hint is used to control whether the HIDAPI driver is used for Bluetooth Steam Controllers. Setting this hint to \"1\" enables the driver, while \"0\" disables it (default). This should be set before initializing joysticks and gamepads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STEAM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_STEAM \"SDL_JOYSTICK_HIDAPI_STEAM\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_WINDOW_VISUALID in C\nDESCRIPTION: This C macro defines the SDL_HINT_VIDEO_X11_WINDOW_VISUALID hint, allowing you to set a preferred visual ID for X11 windows. This hint is crucial when specific visual configurations are required for X11 applications using SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_X11_WINDOW_VISUALID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_WINDOW_VISUALID      \"SDL_VIDEO_X11_WINDOW_VISUALID\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TransferCharacteristics Enum in C\nDESCRIPTION: Defines the SDL_TransferCharacteristics enumeration, which specifies the colorspace transfer characteristics. This enum includes a range of standard transfer functions as defined by various ITU-R and SMPTE standards, allowing for precise control over color representation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TransferCharacteristics.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_TransferCharacteristics\n{\n    SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0,\n    SDL_TRANSFER_CHARACTERISTICS_BT709 = 1,         /**< Rec. ITU-R BT.709-6 / ITU-R BT1361 */\n    SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,\n    SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4,       /**< ITU-R BT.470-6 System M / ITU-R BT1700 625 PAL & SECAM */\n    SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5,       /**< ITU-R BT.470-6 System B, G */\n    SDL_TRANSFER_CHARACTERISTICS_BT601 = 6,         /**< SMPTE ST 170M / ITU-R BT.601-7 525 or 625 */\n    SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7,      /**< SMPTE ST 240M */\n    SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8,\n    SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9,\n    SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10,\n    SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11,     /**< IEC 61966-2-4 */\n    SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12,       /**< ITU-R BT1361 Extended Colour Gamut */\n    SDL_TRANSFER_CHARACTERISTICS_SRGB = 13,         /**< IEC 61966-2-1 (sRGB or sYCC) */\n    SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14, /**< ITU-R BT2020 for 10-bit system */\n    SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15, /**< ITU-R BT2020 for 12-bit system */\n    SDL_TRANSFER_CHARACTERISTICS_PQ = 16,           /**< SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems */\n    SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17,     /**< SMPTE ST 428-1 */\n    SDL_TRANSFER_CHARACTERISTICS_HLG = 18,          /**< ARIB STD-B67, known as \"hybrid log-gamma\" (HLG) */\n    SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31\n} SDL_TransferCharacteristics;\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUTextureTransferInfo Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_GPUTextureTransferInfo structure in C. It specifies the layout and data types for members related to texture data transfer operations. The structure includes a transfer buffer pointer, offset within the buffer, pixels per row, and rows per layer. This structure is used as input to functions like SDL_UploadToGPUTexture and SDL_DownloadFromGPUTexture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureTransferInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUTextureTransferInfo\n{\n    SDL_GPUTransferBuffer *transfer_buffer;  /**< The transfer buffer used in the transfer operation. */\n    Uint32 offset;                           /**< The starting byte of the image data in the transfer buffer. */\n    Uint32 pixels_per_row;                   /**< The number of pixels from one row to the next. */\n    Uint32 rows_per_layer;                   /**< The number of rows from one layer/depth-slice to the next. */\n} SDL_GPUTextureTransferInfo;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_GAMEINPUT in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_GAMEINPUT macro, which is used as a key for controlling the use of GameInput for joystick handling in SDL on Windows. The hint's value determines whether SDL utilizes GameInput ('1') or not ('0'). This must be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_GAMEINPUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_GAMEINPUT \"SDL_JOYSTICK_GAMEINPUT\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SYSWM_TYPE Enumeration in C\nDESCRIPTION: This code snippet defines the SDL_SYSWM_TYPE enumeration, which lists the different windowing subsystems supported by SDL. Each member of the enum represents a specific windowing system, such as Windows, X11, Cocoa, or Android. The enumeration is used to identify the underlying windowing system being used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SYSWM_TYPE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_SYSWM_TYPE\n{\n    SDL_SYSWM_UNKNOWN,\n    SDL_SYSWM_WINDOWS,\n    SDL_SYSWM_X11,\n    SDL_SYSWM_DIRECTFB,\n    SDL_SYSWM_COCOA,\n    SDL_SYSWM_UIKIT,\n    SDL_SYSWM_WAYLAND,\n    SDL_SYSWM_MIR,  /* no longer available, left for API/ABI compatibility. Remove in 2.1! */\n    SDL_SYSWM_WINRT,\n    SDL_SYSWM_ANDROID,\n    SDL_SYSWM_VIVANTE,\n    SDL_SYSWM_OS2,\n    SDL_SYSWM_HAIKU,\n    SDL_SYSWM_KMSDRM,\n    SDL_SYSWM_RISCOS\n} SDL_SYSWM_TYPE;\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Instance ID in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_JoystickInstanceID to retrieve the instance ID of an opened joystick. It requires an SDL_Joystick pointer as input and returns an SDL_JoystickID representing the instance ID.  A negative value indicates failure, and SDL_GetError() can be called for more details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickInstanceID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickID SDL_JoystickInstanceID(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE macro, which is used to control whether the hardware cursor remains visible when relative mouse mode is enabled. The macro is a string literal that can be set to \"0\" to hide the cursor or \"1\" to keep it visible.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE \"SDL_MOUSE_RELATIVE_CURSOR_VISIBLE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_SWITCH Macro in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_SWITCH macro, which is used to enable or disable the HIDAPI driver for Nintendo Switch controllers. The hint should be set before initializing joysticks and gamepads. This macro is defined as a string literal, \"SDL_JOYSTICK_HIDAPI_SWITCH\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_SWITCH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH \"SDL_JOYSTICK_HIDAPI_SWITCH\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RWFromFP Syntax (C)\nDESCRIPTION: Creates an SDL_RWops structure from a standard I/O file pointer (FILE*).  It requires a pointer to the file stream (`fp`) and a boolean value (`autoclose`) to determine if the file stream should be closed automatically when the RWops is closed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWFromFP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_RWops* SDL_RWFromFP(void * fp,\n                        SDL_bool autoclose);\n```\n\n----------------------------------------\n\nTITLE: Load Animation with Type from SDL_IOStream C\nDESCRIPTION: This function loads an animation from an SDL datasource, specifying the type. It accepts an SDL_IOStream pointer, a boolean indicating whether to close the IOStream after use, and a string representing the animation type. Returns a pointer to IMG_Animation or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimationTyped_IO(SDL_IOStream *src, bool closeio, const char *type);\n```\n\n----------------------------------------\n\nTITLE: SDL_REQUIRES Macro Definition in C\nDESCRIPTION: This macro defines `SDL_REQUIRES(x)` which is a wrapper around Clang thread safety analysis annotations, indicating that a certain capability (likely a mutex lock) is required. It helps Clang's static analysis tool detect potential thread safety issues. The macro uses SDL_THREAD_ANNOTATION_ATTRIBUTE__ and requires Clang.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_REQUIRES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_REQUIRES(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(requires_capability(x))\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUNICODE_Solid Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderUNICODE_Solid function within the SDL_ttf library. This function renders UCS-2 text with solid color using the specified font and color. It returns a pointer to an SDL_Surface, which needs to be freed by the caller. The input text is expected to be in UCS-2 encoding.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUNICODE_Solid.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUNICODE_Solid(TTF_Font *font,\n                const Uint16 *text, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_RETURN_CAPABILITY C Macro\nDESCRIPTION: Defines the SDL_RETURN_CAPABILITY macro, which expands to SDL_THREAD_ANNOTATION_ATTRIBUTE__(lock_returned(x)). This macro is used to annotate functions that return a mutex and indicate that the caller is responsible for unlocking the returned mutex. It leverages Clang's thread safety analysis capabilities. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RETURN_CAPABILITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RETURN_CAPABILITY(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(lock_returned(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_strndup Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_strndup function in C. It takes a constant character pointer 'str' as input, representing the string to copy, and a size_t 'maxlen' representing the maximum length of the copied string (excluding the null terminator). It returns a character pointer to the newly allocated string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strndup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strndup(const char *str, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Getting Font Hinting - C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetFontHinting function, which is used to query the current FreeType hinter setting of a font. It takes a pointer to a TTF_Font structure as input and returns a TTF_HintingFlags value indicating the current hinting mode. The font must be a valid loaded font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontHinting.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_HintingFlags TTF_GetFontHinting(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_rand_bits Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_rand_bits function in C, which takes no arguments and returns a 32-bit unsigned integer representing a pseudo-random number. The function is available since SDL 3.2.0 and is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_rand_bits.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_rand_bits(void);\n```\n\n----------------------------------------\n\nTITLE: Get Silence Value for Audio Format in SDL3\nDESCRIPTION: This C code snippet demonstrates the syntax for using `SDL_GetSilenceValueForFormat` function in SDL3. The function takes an `SDL_AudioFormat` as input, representing the audio data format to query, and returns an integer representing a byte value suitable for use with `memset` or `SDL_memset` to silence an audio buffer. It is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSilenceValueForFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetSilenceValueForFormat(SDL_AudioFormat format);\n```\n\n----------------------------------------\n\nTITLE: Hiding sections from wikiheaders in C\nDESCRIPTION: This code snippet shows how to hide specific sections of the header file from the wikiheaders script using preprocessor directives.  Everything between `#ifndef SDL_WIKI_DOCUMENTATION_SECTION` and the subsequent `#endif` will be ignored by the script. Whitespace around the #ifndef directive is ignored.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/documentation-rules.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#ifndef SDL_WIKI_DOCUMENTATION_SECTION\n```\n\n----------------------------------------\n\nTITLE: memcpy Annotation with SDL_IN_BYTECAP in C\nDESCRIPTION: Illustrates the use of SDL_IN_BYTECAP to annotate the memcpy function's source buffer parameter.  This informs the compiler or static analysis tools that the `src` buffer should be `len` bytes in size and is only read by the function. This can help detect potential buffer overflows at compile time.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IN_BYTECAP.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid *memcpy(void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Detecting AVIF Image Data using IMG_isAVIF in C\nDESCRIPTION: This code snippet shows the syntax of the `IMG_isAVIF` function from the SDL_image library. It takes an SDL_RWops pointer as input, which represents a seekable/readable stream of image data. The function returns a non-zero integer if the stream contains AVIF data, and zero otherwise. This is available since SDL_image 2.6.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isAVIF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isAVIF(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUTextureType enum in C\nDESCRIPTION: Defines the SDL_GPUTextureType enumeration in C, representing different texture types supported by the SDL3 GPU API. This includes 2D, 2D array, 3D, cube, and cube array textures. This enum is used when creating textures to specify its type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUTextureType\n{\n    SDL_GPU_TEXTURETYPE_2D,         /**< The texture is a 2-dimensional image. */\n    SDL_GPU_TEXTURETYPE_2D_ARRAY,   /**< The texture is a 2-dimensional array image. */\n    SDL_GPU_TEXTURETYPE_3D,         /**< The texture is a 3-dimensional image. */\n    SDL_GPU_TEXTURETYPE_CUBE,       /**< The texture is a cube image. */\n    SDL_GPU_TEXTURETYPE_CUBE_ARRAY  /**< The texture is a cube array image. */\n} SDL_GPUTextureType;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_VSYNC in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_RENDER_VSYNC macro is defined in C. It represents the string literal \"SDL_RENDER_VSYNC\", which is used to set or get the vsync hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_VSYNC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_VSYNC \"SDL_RENDER_VSYNC\"\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyWindowSurface Syntax (C)\nDESCRIPTION: This C code snippet shows the syntax for the SDL_DestroyWindowSurface function. It takes an SDL_Window pointer as input and returns a boolean value indicating success or failure. The function is used to destroy the surface associated with a given SDL window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyWindowSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_DestroyWindowSurface(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_ROG_CHAKRAM in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_ROG_CHAKRAM macro, which is used to enable or disable ROG Chakram mice being recognized as joysticks. The hint's value should be set before SDL is initialized. Setting the value to \"1\" enables the feature, while \"0\" (default) disables it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_ROG_CHAKRAM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ROG_CHAKRAM \"SDL_JOYSTICK_ROG_CHAKRAM\"\n```\n\n----------------------------------------\n\nTITLE: SDL_FillSurfaceRect Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_FillSurfaceRect function in C. This function fills a specified rectangle on a given SDL_Surface with a provided color value. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FillSurfaceRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_FillSurfaceRect(SDL_Surface *dst, const SDL_Rect *rect, Uint32 color);\n```\n\n----------------------------------------\n\nTITLE: SDL_PointInRect Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_PointInRect function in C. It takes a pointer to an SDL_Point and a pointer to an SDL_Rect as input and returns a boolean value indicating whether the point is inside the rectangle. The function is marked as SDL_FORCE_INLINE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PointInRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetCameraSupportedFormats Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetCameraSupportedFormats function. It takes a camera instance ID and a pointer to an integer as input, and returns a NULL-terminated array of SDL_CameraSpec pointers, or NULL on failure. The count parameter, if not NULL, will be populated with the number of elements in the array.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameraSupportedFormats.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_CameraSpec ** SDL_GetCameraSupportedFormats(SDL_CameraID instance_id, int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_write Syntax\nDESCRIPTION: This code snippet shows the syntax of the SDL_hid_write function in C. It takes a device handle, a pointer to the data to be written, and the length of the data as input. The function returns an integer representing the number of bytes written or -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_write.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_write(SDL_hid_device *dev, const unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap64LE Macro Definition in C\nDESCRIPTION: This macro swaps a 64-bit value from little-endian to the native byte order. If the system is already little-endian, the value is returned unchanged.  It takes a 64-bit value 'x' as input and returns the swapped value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap64LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_Swap64LE(x) SwapOnlyIfNecessary(x)\n```\n\n----------------------------------------\n\nTITLE: Accept TCP Connection - SDLNet in C\nDESCRIPTION: Accepts an incoming TCP connection on the specified server socket using SDLNet.  The server socket must have been created with INADDR_NONE or INADDR_ANY. Returns a new TCP socket representing the connection or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_Accept.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTCPsocket SDLNet_TCP_Accept(TCPsocket server);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasAVX2 Function Definition in C\nDESCRIPTION: This code snippet shows the function signature for SDL_HasAVX2, which is used to detect AVX2 support on the CPU. It takes no arguments and returns an SDL_bool value indicating whether AVX2 is supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasAVX2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasAVX2(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowMouseRect Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetWindowMouseRect function. This function confines the mouse cursor to a specified rectangle within a given SDL window. It takes an SDL_Window pointer and a pointer to an SDL_Rect structure as input, returning an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowMouseRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowMouseRect(SDL_Window * window, const SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: Query Font Kerning Status in SDL_ttf (C)\nDESCRIPTION: This code snippet demonstrates how to use the `TTF_GetFontKerning` function to determine if kerning is enabled for a given font. It takes a `TTF_Font` pointer as input and returns a boolean indicating whether kerning is enabled or not. The function is part of the SDL_ttf library and requires including `SDL3_ttf/SDL_ttf.h`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontKerning.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetFontKerning(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_ExtensionSupported Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GL_ExtensionSupported function in C. It takes a const char pointer as input, representing the name of the OpenGL extension to check, and returns an SDL_bool value, indicating whether the extension is supported or not. The function requires an active OpenGL context to operate correctly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_ExtensionSupported.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GL_ExtensionSupported(const char\n                                   *extension);\n```\n\n----------------------------------------\n\nTITLE: Opening a UDP Socket with SDLNet_UDP_Open in C\nDESCRIPTION: This code snippet demonstrates the syntax for opening a UDP network socket using the SDLNet_UDP_Open function from the SDL_net library. The function takes a Uint16 representing the port number to bind the socket to. The function returns a UDPsocket.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_Open.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUDPsocket SDLNet_UDP_Open(Uint16 port);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteS16LE Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_WriteS16LE function to write a 16-bit integer to an SDL_IOStream. The function takes a pointer to the destination SDL_IOStream and the Sint16 value to be written as parameters.  It returns a boolean indicating success or failure of the write operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteS16LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteS16LE(SDL_IOStream *dst, Sint16 value);\n```\n\n----------------------------------------\n\nTITLE: Setting Log Priorities using SDL_SetLogPriorities in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_SetLogPriorities function to set a specific log priority for all log categories. The function takes an SDL_LogPriority enum value as input to define the new logging level.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetLogPriorities.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetLogPriorities(SDL_LogPriority priority);\n```\n\n----------------------------------------\n\nTITLE: SDL_SaveFile_IO Syntax in C\nDESCRIPTION: Saves data to an SDL_IOStream.  `src` is the SDL_IOStream to write to. `data` is a pointer to the data to be written (can be NULL if datasize is 0). `datasize` is the number of bytes to write. `closeio` indicates whether to close the stream after writing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SaveFile_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SaveFile_IO(SDL_IOStream *src, const void *data, size_t datasize, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Tracks in Music Object - SDL_mixer (C)\nDESCRIPTION: This function retrieves the number of tracks present in a given music object, specifically designed for GME music formats. It takes a pointer to a Mix_Music object as input and returns the number of tracks as an integer or -1 if the operation fails or is not implemented for the specified music type. It is available since SDL_mixer 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetNumTracks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GetNumTracks(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetGPUSwapchainParameters Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetGPUSwapchainParameters function in C, specifying the input parameters and the return type. It allows setting the swapchain composition and present mode for a given window and GPU device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPUSwapchainParameters.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetGPUSwapchainParameters(\n    SDL_GPUDevice *device,\n    SDL_Window *window,\n    SDL_GPUSwapchainComposition swapchain_composition,\n    SDL_GPUPresentMode present_mode);\n\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Player Index in C\nDESCRIPTION: This snippet shows the syntax for the SDL_GetGamepadPlayerIndex function, which retrieves the player index associated with an opened gamepad. The function takes a SDL_Gamepad pointer as input and returns an integer representing the player index, or -1 if not available. It is part of the SDL3 library and requires including SDL3/SDL_gamepad.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetGamepadPlayerIndex(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Allocate UDP Packet Vector in C\nDESCRIPTION: Allocates an array of UDP packets using SDLNet_AllocPacketV. The function takes the number of packets to allocate (`howmany`) and the maximum size of each packet (`size`) as parameters. It returns a pointer to the first packet in the array, or NULL if memory allocation fails. The allocated memory should be released using `SDLNet_FreePacketV`. This snippet is from the SDL_net library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_AllocPacketV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUDPpacket ** SDLNet_AllocPacketV(int howmany, int size);\n```\n\n----------------------------------------\n\nTITLE: Enable STL Support in Android NDK\nDESCRIPTION: This snippet shows how to enable STL support in an Android NDK project by adding a line to the Application.mk file. This allows you to use C++ Standard Template Library features in your native code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_4\n\nLANGUAGE: makefile\nCODE:\n```\nAPP_STL := c++_shared\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRectEnclosingPoints Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetRectEnclosingPoints function in C, used to calculate the minimal rectangle enclosing a set of points, optionally clipped by a specified rectangle. The function takes an array of SDL_Point structures, their count, an optional clip rectangle, and a pointer to an SDL_Rect structure to store the result. It returns a boolean indicating if any points were enclosed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRectEnclosingPoints.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRectEnclosingPoints(const SDL_Point *points, int count, const SDL_Rect *clip, SDL_Rect *result);\n```\n\n----------------------------------------\n\nTITLE: Building SDL for Nintendo 3DS with CMake\nDESCRIPTION: This set of commands uses CMake to build the SDL library for the Nintendo 3DS. It configures the build using the devkitARM toolchain file, builds the project in Release mode, and installs the built library. Ensure devkitARM and CMake are installed before running these commands.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/n3ds.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_TOOLCHAIN_FILE=\"$DEVKITPRO/cmake/3DS.cmake\" -DCMAKE_BUILD_TYPE=Release\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: SDL_TextInputEvent struct definition in C\nDESCRIPTION: Defines the structure `SDL_TextInputEvent` which is used to represent a text input event in SDL. It contains the event type, a reserved field, a timestamp, the window ID and a pointer to the UTF-8 encoded input text. Text input needs to be enabled with `SDL_StartTextInput` for this event to be delivered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TextInputEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TextInputEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_TEXT_INPUT */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The window with keyboard focus, if any */\n    const char *text;   /**< The input text, UTF-8 encoded */\n} SDL_TextInputEvent;\n```\n\n----------------------------------------\n\nTITLE: Get Text Color with TTF_GetTextColor in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetTextColor function. It retrieves the RGBA color values of a specified TTF_Text object and populates the provided Uint8 pointers with the corresponding color components. It requires the SDL_ttf library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextColor(TTF_Text *text, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);\n```\n\n----------------------------------------\n\nTITLE: SDL_realloc Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_realloc function in C. It takes a pointer to allocated memory and the new size as input, and returns a pointer to the newly allocated memory, or NULL if allocation failed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_realloc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_realloc(void *mem, size_t size);\n```\n\n----------------------------------------\n\nTITLE: Get CAMetalLayer with SDL_Metal_GetLayer in C\nDESCRIPTION: Retrieves a pointer to the backing CAMetalLayer for a given SDL_MetalView. The SDL_MetalView is passed as input, and the function returns a void pointer to the CAMetalLayer. This allows access to the native Metal layer for rendering. Requires SDL 2.0.14 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Metal_GetLayer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_Metal_GetLayer(SDL_MetalView view);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Product Version in SDL3 (C)\nDESCRIPTION: Retrieves the USB product version of an opened gamepad. Requires a valid SDL_Gamepad pointer. Returns the product version as a Uint16 value. If the product version is unavailable, it returns 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadProductVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetGamepadProductVersion(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Get Window Maximum Size in C\nDESCRIPTION: Retrieves the maximum width and height of a window's client area using SDL_GetWindowMaximumSize. The function takes an SDL_Window pointer and two integer pointers as input, which will be populated with the maximum width and height respectively. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowMaximumSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowMaximumSize(SDL_Window *window, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_EnumerateDirectoryCallback in C\nDESCRIPTION: Defines the SDL_EnumerateDirectoryCallback, a callback function used by SDL_EnumerateDirectory to enumerate files in a directory. The callback receives user data, the directory name, and the file name.  It returns an SDL_EnumerationResult to control the enumeration process.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EnumerateDirectoryCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_EnumerationResult (SDLCALL *SDL_EnumerateDirectoryCallback)(void *userdata, const char *dirname, const char *fname);\n```\n\n----------------------------------------\n\nTITLE: Mix_ResumeMusic Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the Mix_ResumeMusic function in C to resume the music stream. It requires the SDL_mixer library and has no parameters or return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_ResumeMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_ResumeMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Rect Structure in C\nDESCRIPTION: This code snippet defines the structure `SDL_Rect` in the C programming language. It is part of the SDL3 library and represents a rectangle. The structure contains four integer members: `x` and `y` represent the top-left corner coordinates, while `w` and `h` represent the width and height of the rectangle, respectively.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Rect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Rect\n{\n    int x, y;\n    int w, h;\n} SDL_Rect;\n```\n\n----------------------------------------\n\nTITLE: Get Environment Variable in SDL3 (C)\nDESCRIPTION: Retrieves the value of an environment variable from a specified SDL_Environment.  It takes a pointer to the SDL_Environment and the name of the variable as input. Returns a pointer to the variable's value or NULL if not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetEnvironmentVariable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetEnvironmentVariable(SDL_Environment *env, const char *name);\n```\n\n----------------------------------------\n\nTITLE: Get Text Size with TTF_GetTextSize in SDL_ttf (C)\nDESCRIPTION: Retrieves the width and height of a TTF_Text object. Requires a valid TTF_Text pointer. On success, the provided integer pointers *w and *h will be populated with the width and height of the rendered text, respectively. If the function fails, it returns false, and SDL_GetError() can be called to retrieve more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSize(TTF_Text *text, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Set Window Progress State in SDL3\nDESCRIPTION: This code snippet demonstrates the syntax for the SDL_SetWindowProgressState function in SDL3. It requires a pointer to an SDL_Window and an SDL_ProgressState enumeration value as input. It returns a boolean indicating success or failure, with SDL_GetError() providing more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowProgressState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowProgressState(SDL_Window *window, SDL_ProgressState state);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_RefAddress Syntax\nDESCRIPTION: The syntax for the SDLNet_RefAddress function in C.  It takes a pointer to an SDLNet_Address as input and returns a pointer to the same SDLNet_Address. It increments the reference count of the address object.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_RefAddress.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDLNet_Address* SDLNet_RefAddress(SDLNet_Address *address);\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUGraphicsPipeline Syntax in C\nDESCRIPTION: Binds a graphics pipeline to a render pass.  A graphics pipeline must be bound before making any draw calls. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUGraphicsPipeline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUGraphicsPipeline(\n    SDL_GPURenderPass *render_pass,\n    SDL_GPUGraphicsPipeline *graphics_pipeline);\n```\n\n----------------------------------------\n\nTITLE: SDL_LockRWLockForReading Syntax in C\nDESCRIPTION: This code snippet shows the syntax for SDL_LockRWLockForReading function in C. It takes a pointer to an SDL_RWLock structure as an argument, which represents the read/write lock to be locked for reading. The function blocks until the lock is available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockRWLockForReading.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockRWLockForReading(SDL_RWLock *rwlock);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Device Name in SDL2 (C)\nDESCRIPTION: Retrieves the implementation-dependent name of a sensor using its index. The function takes an integer representing the sensor's index as input and returns a constant character pointer to the sensor's name. It returns NULL if the device_index is out of range. This function is available since SDL 2.0.9.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetDeviceName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_SensorGetDeviceName(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Building SDL with Release configuration\nDESCRIPTION: Builds SDL with specified `Release` configuration. It can only be used if `CMAKE_BUILD_TYPE` was previously specified, otherwise default debug build is produced.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncmake --build . --config Release\n```\n\n----------------------------------------\n\nTITLE: Get Haptic Effect Status in SDL\nDESCRIPTION: Retrieves the status of a haptic effect (playing or not) on a specified SDL_Haptic device. The function requires the haptic device and the effect ID as input, and it returns 0 if the effect is not playing, 1 if it is playing, or a negative error code on failure. The device must support the SDL_HAPTIC_STATUS feature.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticGetEffectStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticGetEffectStatus(SDL_Haptic * haptic,\n                              int effect);\n```\n\n----------------------------------------\n\nTITLE: Get Process Properties in C\nDESCRIPTION: Retrieves the properties ID associated with a given SDL_Process. This ID can then be used to access specific properties of the process, such as its PID or standard input/output streams. It takes a pointer to an SDL_Process as input and returns an SDL_PropertiesID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetProcessProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetProcessProperties(SDL_Process *process);\n```\n\n----------------------------------------\n\nTITLE: Update Haptic Effect using SDL_HapticUpdateEffect in C\nDESCRIPTION: Updates the properties of a haptic effect on a given SDL_Haptic device. The function takes the haptic device, the effect ID, and a pointer to an SDL_HapticEffect structure containing the new properties. It returns 0 on success and a negative error code on failure. The function cannot change the type of effect while running.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticUpdateEffect.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_HapticUpdateEffect(SDL_Haptic * haptic,\n                           int effect,\n                           SDL_HapticEffect * data);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_EGLAttribArrayCallback in C\nDESCRIPTION: Defines a function pointer type named SDL_EGLAttribArrayCallback, which points to a function that takes a void pointer as userdata and returns a pointer to an array of SDL_EGLAttrib values. The array should be null-terminated with `EGL_NONE` and allocated using `SDL_malloc`. The allocated memory will be freed by `SDL_free`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGLAttribArrayCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_EGLAttrib *(SDLCALL *SDL_EGLAttribArrayCallback)(void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_INLINE Macro Definition in C\nDESCRIPTION: Defines the SDL_INLINE macro, which is a compiler hint to inline a function.  It's defined as '__inline' if supported by the compiler, otherwise it's effectively a no-op. This macro is intended for use with SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_INLINE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_INLINE __inline\n```\n\n----------------------------------------\n\nTITLE: Get CPU Cache Line Size in SDL2 (C)\nDESCRIPTION: Retrieves the L1 cache line size of the CPU using SDL_GetCPUCacheLineSize. This function is available since SDL 2.0.0 and is useful for optimizing multi-threaded structure padding or SIMD prefetch sizes. It returns the cache line size in bytes as an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetCPUCacheLineSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetCPUCacheLineSize(void);\n```\n\n----------------------------------------\n\nTITLE: Destroying a text object with TTF_DestroyText in C\nDESCRIPTION: This snippet demonstrates the syntax for using TTF_DestroyText to free the memory associated with a TTF_Text object. The function takes a pointer to the TTF_Text object to be destroyed as its only argument. It's crucial to call this on the same thread that created the text to avoid potential issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_DestroyText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroyText(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_ResetAssertionReport Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ResetAssertionReport function in C. It takes no arguments and returns void. It is used to clear the list of all assertion failures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ResetAssertionReport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ResetAssertionReport(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED macro as a string literal. This string is used to set the hint using SDL_SetHint. The hint controls the PS5 controller player LEDs when using HIDAPI. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\"\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadXV_IO Function Definition in C\nDESCRIPTION: Defines the IMG_LoadXV_IO function, which loads a XV image from an SDL_IOStream. It takes an SDL_IOStream as input and returns an SDL_Surface pointer, or NULL on error. It is available since SDL_image 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadXV_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadXV_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Get Haptic Device Name by ID - SDL_GetHapticNameForID - C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetHapticNameForID function, which retrieves the implementation-dependent name of a haptic device given its instance ID (SDL_HapticID). The function returns a const char* representing the device's name, or NULL if an error occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHapticNameForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetHapticNameForID(SDL_HapticID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Query Window Fullscreen Mode in C\nDESCRIPTION: Retrieves the display mode used when a specified SDL window is in fullscreen mode. This function returns a pointer to an SDL_DisplayMode structure representing the exclusive fullscreen mode or NULL if the window uses borderless fullscreen desktop mode. It requires an SDL_Window pointer as input and should be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowFullscreenMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_DisplayMode * SDL_GetWindowFullscreenMode(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv Function Signature\nDESCRIPTION: This code snippet shows the signature of the SDL_iconv function. It details the input parameters: the conversion descriptor `cd`, a pointer to the input buffer `inbuf`, the number of bytes remaining in the input buffer `inbytesleft`, a pointer to the output buffer `outbuf`, and the number of bytes remaining in the output buffer `outbytesleft`. It returns the number of conversions on success, or a negative error code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_iconv(SDL_iconv_t cd, const char **inbuf,\n             size_t *inbytesleft, char **outbuf,\n             size_t *outbytesleft);\n```\n\n----------------------------------------\n\nTITLE: fscanf Function Annotation in C\nDESCRIPTION: Illustrates how to use the SDL_SCANF_FORMAT_STRING macro to annotate the format string parameter of the fscanf function. This annotation informs the compiler and analysis tools that the 'fmt' parameter is expected to be a scanf-style format string, allowing them to perform checks and issue warnings if necessary.  This is a conceptual example and assumes the existence of the fscanf function and FILE type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SCANF_FORMAT_STRING.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint fscanf(FILE *f, SDL_SCANF_FORMAT_STRING const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Get Window Aspect Ratio in C\nDESCRIPTION: Retrieves the minimum and maximum aspect ratio of the specified SDL window. The function populates the provided float pointers with the minimum and maximum aspect ratio values, respectively. It returns true on success and false on failure. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowAspectRatio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowAspectRatio(SDL_Window *window, float *min_aspect, float *max_aspect);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetMouseFocus Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetMouseFocus function in C. It takes no arguments and returns a pointer to an SDL_Window object, which represents the window with mouse focus. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetMouseFocus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetMouseFocus(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ANDROID_EXTERNAL_STORAGE_WRITE Macro in C\nDESCRIPTION: Defines the SDL_ANDROID_EXTERNAL_STORAGE_WRITE macro which is used for indicating write access to external storage on Android. It's available since SDL 3.2.0 and included in SDL3/SDL_system.h. This macro should be used when requesting write permissions for Android external storage.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ANDROID_EXTERNAL_STORAGE_WRITE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_ANDROID_EXTERNAL_STORAGE_WRITE  0x02\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_BLACKLIST_DEVICES in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_BLACKLIST_DEVICES macro in C. This macro is used as a key for setting and retrieving the joystick blacklist hint using SDL_SetHint and SDL_GetHint functions, respectively. The value associated with this hint is a comma-separated list of USB VID/PID pairs in hexadecimal format or a path to a file containing such a list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_BLACKLIST_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES \"SDL_JOYSTICK_BLACKLIST_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES hint as a string literal. This hint allows you to specify a comma-separated list of USB VID/PID pairs (in hexadecimal format) for flightstick-style controllers. It can also refer to a file containing this list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES \"SDL_JOYSTICK_FLIGHTSTICK_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_NET_WM_PING in C\nDESCRIPTION: This C preprocessor definition provides a string constant that can be used as a hint to control whether SDL supports the X11 _NET_WM_PING protocol. Setting the hint to \"0\" disables it, while \"1\" enables it. This hint is checked when a window is created.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_X11_NET_WM_PING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_NET_WM_PING      \"SDL_VIDEO_X11_NET_WM_PING\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VITA_PVR_INIT in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VITA_PVR_INIT macro as a string literal. This hint controls whether SDL performs PVR initialization on the PlayStation Vita. It should be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VITA_PVR_INIT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VITA_PVR_INIT \"SDL_VITA_PVR_INIT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderGetIntegerScale Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_RenderGetIntegerScale to determine if integer scaling is enabled for a given SDL renderer. The function takes an SDL_Renderer pointer as input and returns an SDL_bool indicating whether integer scales are forced.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetIntegerScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_RenderGetIntegerScale(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowKeyboardGrab Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the `SDL_SetWindowKeyboardGrab` function.  It takes an SDL_Window pointer and a boolean indicating whether to grab the keyboard.  It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowKeyboardGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowKeyboardGrab(SDL_Window *window, bool grabbed);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE in C\nDESCRIPTION: This code snippet shows how to define the SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE hint in C. It defines a string literal that represents the name of the environment variable/hint. This hint allows users to specify the default ALSA audio recording device to be used by SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE \"SDL_AUDIO_ALSA_DEFAULT_RECORDING_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: Deinitialize SDL_mixer in C\nDESCRIPTION: This function deinitializes the SDL_mixer library. It should be the last SDL_mixer function called after freeing resources and closing audio devices. This function unloads any dynamically linked shared libraries used for various audio codecs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: Handling NSApplicationDelegate Termination (Objective-C)\nDESCRIPTION: This Objective-C code snippet addresses issues with SDL termination when using a custom NSApplicationDelegate. It checks the SDL_QUIT event state and pushes a SDL_QUIT event to ensure proper termination when a termination request is received.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/macos.md#_snippet_3\n\nLANGUAGE: objc\nCODE:\n```\n- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication *)sender\n{\n    if (SDL_GetEventState(SDL_QUIT) == SDL_ENABLE) {\n        SDL_Event event;\n        event.type = SDL_QUIT;\n        SDL_PushEvent(&event);\n    }\n\n    return NSTerminateCancel;\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing Music Stream with Mix_PauseMusic in SDL_mixer\nDESCRIPTION: This C code snippet shows the syntax for pausing the music stream using the Mix_PauseMusic function in the SDL_mixer library. The function takes no arguments and returns void, effectively pausing the currently playing music, allowing for later resumption from the same point.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_PauseMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_PauseMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Calling SDL_GDKRunApp Manually\nDESCRIPTION: Shows how to manually call `SDL_GDKRunApp` from your entry point if you cannot link against SDL2main.lib.  This function initializes the GDK and then calls your `SDL_main` function. The parameters after SDL_main are passed to it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\nSDL_GDKRunApp(SDL_main, NULL);\n```\n\n----------------------------------------\n\nTITLE: Install pkg-config .pc files for SDL (SDL2 renamed to SDL3)\nDESCRIPTION: Installs the pkg-config `.pc` files for SDL3, SDL3_image, SDL3_mixer, SDL3_net and SDL3_ttf by creating files in the `pkgconfig` directory. This allows tools like `pkg-config` to find the correct compiler and linker flags for SDL3 libraries.  Note: The name in the file is kept as sdl2, but the libs and includes point to SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/sdl2.pc\nprefix=/usr/src/ndk-standalone-14-arm/sysroot/usr\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/lib\nincludedir=${prefix}/include\nName: sdl2\nDescription: Simple DirectMedia Layer is a cross-platform multimedia library designed to provide low level access to audio, keyboard, mouse, joystick, 3D hardware via OpenGL, and 2D video framebuffer.\nVersion: 2.0.5\nRequires:\nConflicts:\nLibs: -lSDL3\nCflags: -I${includedir}/SDL3   -D_REENTRANT\nEOF\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/SDL3_image.pc\nprefix=/usr/src/ndk-standalone-14-arm/sysroot/usr\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/lib\nincludedir=${prefix}/include\nName: SDL3_image\nDescription: image loading library for Simple DirectMedia Layer\nVersion: 2.0.1\nRequires: sdl2 >= 2.0.0\nLibs: -L${libdir} -lSDL3_image\nCflags: -I${includedir}/SDL3\nEOF\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/SDL3_mixer.pc\nprefix=/usr/src/ndk-standalone-14-arm/sysroot/usr\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/lib\nincludedir=${prefix}/include\nName: SDL3_mixer\nDescription: mixer library for Simple DirectMedia Layer\nVersion: 2.0.1\nRequires: sdl2 >= 2.0.0\nLibs: -L${libdir} -lSDL3_mixer\nCflags: -I${includedir}/SDL3\nEOF\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/SDL3_net.pc\nprefix=/usr/src/ndk-standalone-14-arm/sysroot/usr\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/lib\nincludedir=${prefix}/include\nName: SDL3_net\nDescription: net library for Simple DirectMedia Layer\nVersion: 2.0.1\nRequires: sdl2 >= 2.0.0\nLibs: -L${libdir} -lSDL3_net\nCflags: -I${includedir}/SDL3\nEOF\n```\n\nLANGUAGE: bash\nCODE:\n```\ncat <<'EOF' > $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/SDL3_ttf.pc\nprefix=/usr/src/ndk-standalone-14-arm/sysroot/usr\nexec_prefix=${prefix}\nlibdir=${exec_prefix}/lib\nincludedir=${prefix}/include\nName: SDL3_ttf\nDescription: ttf library for Simple DirectMedia Layer with FreeType 2 support\nVersion: 2.0.14\nRequires: sdl2 >= 2.0.0\nLibs: -L${libdir} -lSDL3_ttf\nCflags: -I${includedir}/SDL3\nEOF\n```\n\n----------------------------------------\n\nTITLE: Set Timidity Config Path - SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax for using the Mix_SetTimidityCfg function. It takes a const char * representing the full path to the Timidity configuration file. The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetTimidityCfg.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_SetTimidityCfg(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Open HID Device by Path - SDL_hid_open_path (C)\nDESCRIPTION: Opens a HID device using the provided path. The path can be obtained from SDL_hid_enumerate or a platform-specific path. Returns a pointer to SDL_hid_device on success, or NULL on failure. Requires SDL3 and SDL_hidapi.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_open_path.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_hid_device * SDL_hid_open_path(const char *path);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnregisterApp Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_UnregisterApp function in C. This function deregisters the Win32 window class from a prior SDL_RegisterApp call. It takes no arguments and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnregisterApp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnregisterApp(void);\n```\n\n----------------------------------------\n\nTITLE: Freeing an RTF Context in C\nDESCRIPTION: This code snippet demonstrates how to free an RTF display context using the RTF_FreeContext function from the SDL_rtf library. The function takes a pointer to the RTF_Context as input and releases the resources associated with that context.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_FreeContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid RTF_FreeContext(RTF_Context *ctx);\n```\n\n----------------------------------------\n\nTITLE: Get GPU Shader Formats in C\nDESCRIPTION: Retrieves the supported shader formats for a given GPU device context. It takes an `SDL_GPUDevice` pointer as input and returns an `SDL_GPUShaderFormat` bitflag representing the shader formats supported by the driver. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGPUShaderFormats.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUShaderFormat SDL_GetGPUShaderFormats(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: TTF_SubString Flags Macros\nDESCRIPTION: These macros define specific flags that can be combined to describe the characteristics of a text substring when using `TTF_SubString` in SDL_ttf.  `TTF_SUBSTRING_DIRECTION_MASK` provides a mask for direction, while others identify the start/end of text or a specific line. These flags are used to determine substring flow direction and position within a text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SubStringFlags.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define TTF_SUBSTRING_DIRECTION_MASK    0x000000FF  /**< The mask for the flow direction for this substring */\n#define TTF_SUBSTRING_TEXT_START        0x00000100  /**< This substring contains the beginning of the text */\n#define TTF_SUBSTRING_LINE_START        0x00000200  /**< This substring contains the beginning of line `line_index` */\n#define TTF_SUBSTRING_LINE_END          0x00000400  /**< This substring contains the end of line `line_index` */\n#define TTF_SUBSTRING_TEXT_END          0x00000800  /**< This substring contains the end of the text */\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MAIN_HANDLED Macro in C\nDESCRIPTION: This code snippet defines the SDL_MAIN_HANDLED macro to the value 1.  Defining this macro tells SDL that the application will handle the platform-specific entry point and initialization, instead of relying on SDL's default implementation. This requires the application to manually call SDL_SetMainReady.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MAIN_HANDLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAIN_HANDLED 1\n```\n\n----------------------------------------\n\nTITLE: SDL_PumpEvents Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_PumpEvents function in C. It takes no arguments and returns void. It is used to update the event queue with input device information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PumpEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PumpEvents(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticCustom Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_HapticCustom structure in C, which is used for creating custom haptic effects in SDL. The structure contains members to define the effect's type, direction, length, delay, trigger, channels, period, samples, data, and envelope.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticCustom.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticCustom\n{\n    /* Header */\n    Uint16 type;            /**< SDL_HAPTIC_CUSTOM */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect. */\n    Uint16 delay;           /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;          /**< Button that triggers the effect. */\n    Uint16 interval;        /**< How soon it can be triggered again after button. */\n\n    /* Custom */\n    Uint8 channels;         /**< Axes to use, minimum of one. */\n    Uint16 period;          /**< Sample periods. */\n    Uint16 samples;         /**< Amount of samples. */\n    Uint16 *data;           /**< Should contain channels*samples items. */\n\n    /* Envelope */\n    Uint16 attack_length;   /**< Duration of the attack. */\n    Uint16 attack_level;    /**< Level at the start of the attack. */\n    Uint16 fade_length;     /**< Duration of the fade. */\n    Uint16 fade_level;      /**< Level at the end of the fade. */\n} SDL_HapticCustom;\n```\n\n----------------------------------------\n\nTITLE: Check for AVX-512F CPU Feature using SDL\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasAVX512F function. It takes no arguments and returns an SDL_bool value indicating whether the CPU has AVX-512F features. This function is only relevant on CPUs using Intel instruction sets.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasAVX512F.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasAVX512F(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetGamepadMapping Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetGamepadMapping function in C. It takes an SDL_JoystickID and a const char * mapping as parameters and returns a boolean value. The function is used to set the gamepad mapping for a given joystick instance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGamepadMapping.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetGamepadMapping(SDL_JoystickID instance_id, const char *mapping);\n```\n\n----------------------------------------\n\nTITLE: Get YUV Conversion Mode in SDL2 (C)\nDESCRIPTION: This function retrieves the current YUV conversion mode used by SDL. The mode determines how YUV color data is converted to RGB format for display. It requires SDL 2.0.8 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetYUVConversionMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode(void);\n```\n\n----------------------------------------\n\nTITLE: Get Key Modifier State in SDL2 (C)\nDESCRIPTION: Retrieves the current keyboard modifier state using SDL_GetModState. This function takes no arguments and returns an SDL_Keymod value, which is an OR'd combination of the currently pressed modifier keys. It requires the SDL2 library to be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetModState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Keymod SDL_GetModState(void);\n```\n\n----------------------------------------\n\nTITLE: Setting a Window Parent in SDL3\nDESCRIPTION: This code snippet shows the syntax for using the SDL_SetWindowParent function in SDL3 to set a window as a child of a parent window. It takes two SDL_Window pointers as input: the window to be set as a child and the new parent window.  The function returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowParent.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetWindowParent(SDL_Window *window, SDL_Window *parent);\n```\n\n----------------------------------------\n\nTITLE: SDL_DateTimeToTime Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_DateTimeToTime function which converts an SDL_DateTime structure to SDL_Time (nanoseconds since epoch). It takes a pointer to a constant SDL_DateTime structure and a pointer to an SDL_Time value as input. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DateTimeToTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_DateTimeToTime(const SDL_DateTime *dt, SDL_Time *ticks);\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Texture from Dimensions in SDL2 (C)\nDESCRIPTION: This code creates a static SDL_Texture with specific dimensions using SDL_TEXTUREACCESS_STATIC. This is used when texture contents are loaded once and rarely changed.  The pixel format is set to ARGB8888.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nsdlTexture = SDL_CreateTexture(sdlRenderer,\n                               SDL_PIXELFORMAT_ARGB8888,\n                               SDL_TEXTUREACCESS_STATIC,\n                               myWidth, myHeight);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_RAWINPUT Macro in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_RAWINPUT macro to represent the string \"SDL_JOYSTICK_RAWINPUT\". This hint controls whether RAWINPUT drivers are used for joysticks, enabling better handling of XInput-capable devices. It should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_RAWINPUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_RAWINPUT \"SDL_JOYSTICK_RAWINPUT\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_PEN_TOUCH_EVENTS in C\nDESCRIPTION: This C code defines the SDL_HINT_PEN_TOUCH_EVENTS macro, which represents the string literal \"SDL_PEN_TOUCH_EVENTS\". This string is used as the key when setting or querying the pen touch events hint via SDL_SetHint or SDL_GetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_PEN_TOUCH_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_PEN_TOUCH_EVENTS \"SDL_PEN_TOUCH_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HAPTIC_AXES in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HAPTIC_AXES macro, which represents the name of the hint.  This hint is used to set the number of haptic axes for joysticks based on their USB VID/PID. The hint should be set before a controller is opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HAPTIC_AXES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HAPTIC_AXES \"SDL_JOYSTICK_HAPTIC_AXES\"\n```\n\n----------------------------------------\n\nTITLE: Check Joystick Connection Status in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_HasJoystick function to determine if a joystick is connected. The function returns 'true' if a joystick is connected and 'false' otherwise. It requires the SDL3 library to be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasJoystick(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_PIXELTYPE Macro Definition in C\nDESCRIPTION: This macro extracts the pixel type information from an SDL_PixelFormat. It uses bitwise operations to isolate the relevant bits within the format. The format parameter is the SDL_PixelFormat to check. The return value is the pixel type, which corresponds to a value from the SDL_PixelType enumeration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PIXELTYPE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PIXELTYPE(format)    (((format) >> 24) & 0x0F)\n```\n\n----------------------------------------\n\nTITLE: SDL_ThreadID Typedef Definition in C\nDESCRIPTION: Defines SDL_ThreadID as an alias for Uint64. This allows for a unique numeric identifier to be associated with each thread. The type is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ThreadID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint64 SDL_ThreadID;\n```\n\n----------------------------------------\n\nTITLE: Mix_SetPanning Function Signature (C)\nDESCRIPTION: Defines the function signature for Mix_SetPanning. It accepts an integer representing the channel, and two Uint8 values for the left and right channel volumes. Returns an integer: zero on error, nonzero on success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetPanning.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint Mix_SetPanning(int channel, Uint8 left, Uint8 right);\n```\n\n----------------------------------------\n\nTITLE: Defining Flightstick Device Exclusion Hint in SDL (C)\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED macro, which is a string literal used to set the hint that excludes specific devices from being recognized as flightstick style controllers. The hint takes a comma-separated list of USB VID/PID pairs in hexadecimal format, or a file path prefixed with '@' to load the list from a file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED \"SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: Checking GPU Support with SDL_GPUSupportsProperties in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GPUSupportsProperties function in C. It checks whether the GPU runtime supports the specified properties, which are identified by their SDL_PropertiesID. The function returns 'true' if the properties are supported and 'false' otherwise. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUSupportsProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GPUSupportsProperties(\n    SDL_PropertiesID props);\n\n```\n\n----------------------------------------\n\nTITLE: SDL_GetHintBoolean Syntax - C\nDESCRIPTION: Retrieves the boolean value of a hint variable. It takes the hint name as a string and a default SDL_bool value which it returns if the hint is not defined. This function is available since SDL 2.0.5.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetHintBoolean.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GetHintBoolean(const char *name, SDL_bool default_value);\n```\n\n----------------------------------------\n\nTITLE: Load animation from SDL_IOStream with type in C\nDESCRIPTION: This function loads an animation from an SDL datasource, allowing the user to specify the image type. It accepts an SDL_IOStream pointer, a boolean to close the IO stream and a const char pointer indicating the image type. It returns a pointer to an IMG_Animation structure or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimationTyped_IO(SDL_IOStream *src, bool closeio, const char *type);\n```\n\n----------------------------------------\n\nTITLE: Check Glyph Availability in Font SDL_ttf (C)\nDESCRIPTION: Checks if a glyph is provided by the font for a 16-bit codepoint. The function takes a pointer to a TTF_Font object and a Uint16 character code as input. It returns a non-zero value if the font provides the glyph, and zero otherwise. This function is available since SDL_ttf 2.0.12.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GlyphIsProvided.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_GlyphIsProvided(TTF_Font *font, Uint16 ch);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SDL_DEFINE_AUDIO_FORMAT in C\nDESCRIPTION: This example demonstrates how the SDL_DEFINE_AUDIO_FORMAT macro can be used to represent the SDL_AUDIO_S32LE audio format. It showcases the parameter values required to achieve this specific format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEFINE_AUDIO_FORMAT.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 32)\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Product Version SDL2 C\nDESCRIPTION: Retrieves the product version of a joystick connected to the system, identified by its device index. The function can be called before opening any joysticks. Returns the product version as a Uint16 or 0 if unavailable or invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetDeviceProductVersion.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint16 SDL_JoystickGetDeviceProductVersion(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Including SDL_main.h and Declaring a main Function\nDESCRIPTION: Describes the recommended approach of including `SDL_main.h` and declaring a standard `main` function when using SDL with GDK. This leverages the provided `WinMain` implementation in SDL2main.lib.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n#include \"SDL_main.h\"\n\nint main(int argc, char* argv[]) {\n  // Your SDL code here\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_FlushIO Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_FlushIO function in C. It takes an SDL_IOStream pointer as input and returns a boolean indicating success or failure. Requires including SDL3/SDL_iostream.h. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlushIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_FlushIO(SDL_IOStream *context);\n```\n\n----------------------------------------\n\nTITLE: SDL_uitoa Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_uitoa function in C.  This function converts an unsigned integer value to a string representation in the specified radix. The resulting string is stored in the provided buffer 'str'.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_uitoa.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_uitoa(unsigned int value, char *str, int radix);\n```\n\n----------------------------------------\n\nTITLE: Get Touch Device Type with SDL_GetTouchDeviceType in C\nDESCRIPTION: This snippet shows how to use the SDL_GetTouchDeviceType function to retrieve the type of a touch device identified by its SDL_TouchID. The function is available since SDL 3.2.0 and requires including the SDL3/SDL_touch.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTouchDeviceType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);\n```\n\n----------------------------------------\n\nTITLE: Mounting an httpfs tree for RWops\nDESCRIPTION: This function unmounts the default root filesystem and allows mounting a different filesystem at /.  This is needed to override the default httpfs mount that SDL performs before calling the application's main function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/nacl.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\numount(\"/\");\n```\n\n----------------------------------------\n\nTITLE: Check Address Resolution Status (C)\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_GetAddressStatus function. It takes an SDLNet_Address pointer as input and returns an integer representing the status of the address resolution. A return value of 1 indicates successful resolution, -1 indicates failure, and 0 indicates that resolution is still in progress.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_GetAddressStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_GetAddressStatus(SDLNet_Address *address);\n```\n\n----------------------------------------\n\nTITLE: SDL_MaximizeWindow Syntax in C\nDESCRIPTION: Shows the syntax for the SDL_MaximizeWindow function. It takes an SDL_Window pointer as input and maximizes the corresponding window. The function is part of the SDL_video module and is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MaximizeWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_MaximizeWindow(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Sint32 Typedef and Macros Definition in C\nDESCRIPTION: Defines the Sint32 type as a typedef for int32_t and provides macros for the maximum and minimum values that can be stored in a Sint32 variable. This is essential for handling signed 32-bit integers within the SDL framework.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Sint32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int32_t Sint32;\n#define SDL_MAX_SINT32  ((Sint32)0x7FFFFFFF)    /* 2147483647 */\n#define SDL_MIN_SINT32  ((Sint32)(~0x7FFFFFFF)) /* -2147483648 */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_LogPriority Enum in C\nDESCRIPTION: Defines the SDL_LogPriority enum, which specifies the different levels of log priority available in SDL3. This enum is used to categorize log messages based on their severity, ranging from SDL_LOG_PRIORITY_TRACE to SDL_LOG_PRIORITY_CRITICAL. It is part of the SDL3 logging system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_LogPriority\n{\n    SDL_LOG_PRIORITY_INVALID,\n    SDL_LOG_PRIORITY_TRACE,\n    SDL_LOG_PRIORITY_VERBOSE,\n    SDL_LOG_PRIORITY_DEBUG,\n    SDL_LOG_PRIORITY_INFO,\n    SDL_LOG_PRIORITY_WARN,\n    SDL_LOG_PRIORITY_ERROR,\n    SDL_LOG_PRIORITY_CRITICAL,\n    SDL_LOG_PRIORITY_COUNT\n} SDL_LogPriority;\n```\n\n----------------------------------------\n\nTITLE: Opening Font with TTF_OpenFontIndex in C\nDESCRIPTION: Opens a font file using TTF_OpenFontIndex, specifying the file path, point size, and face index. The function returns a TTF_Font pointer, which should be checked for NULL to handle potential errors. The font needs to be closed with TTF_CloseFont after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_OpenFontIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFontIndex(const char *file, int ptsize, long index);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasAltiVec Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the `SDL_HasAltiVec` function in C. It is a function that takes no arguments and returns a boolean indicating whether the CPU has AltiVec features. It requires including the `SDL3/SDL_cpuinfo.h` header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasAltiVec.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasAltiVec(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurfaceUncheckedScaled Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_BlitSurfaceUncheckedScaled function in C. This function performs low-level surface scaled blitting.  It takes source and destination SDL_Surface pointers, source and destination SDL_Rect pointers, and a scaling mode as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitSurfaceUncheckedScaled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_BlitSurfaceUncheckedScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Audio Stream in SDL2 (C)\nDESCRIPTION: The `SDL_NewAudioStream` function creates an audio stream that is used for converting audio between different formats, channel counts, and sample rates. It takes source and destination audio format, channels, and rate as parameters, and returns a pointer to the new audio stream. If an error occurs, it returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_NewAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioStream * SDL_NewAudioStream(const SDL_AudioFormat src_format,\n                   const Uint8 src_channels,\n                   const int src_rate,\n                   const SDL_AudioFormat dst_format,\n                   const Uint8 dst_channels,\n                   const int dst_rate);\n```\n\n----------------------------------------\n\nTITLE: Check for Color Key on SDL Surface in C\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_HasColorKey function in C. It takes an SDL_Surface pointer as input and returns SDL_TRUE if the surface has a color key and SDL_FALSE otherwise. A NULL surface pointer will return SDL_FALSE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasColorKey.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasColorKey(SDL_Surface * surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUBufferUsageFlags Enumeration\nDESCRIPTION: Defines the enumeration values for SDL_GPUBufferUsageFlags, specifying different buffer usages such as vertex buffer, index buffer, indirect buffer, and storage buffer with read/write access for graphics and compute stages. These flags are combined to define how a buffer is intended to be used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBufferUsageFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GPU_BUFFERUSAGE_VERTEX                                  (1u << 0) /**< Buffer is a vertex buffer. */\n#define SDL_GPU_BUFFERUSAGE_INDEX                                   (1u << 1) /**< Buffer is an index buffer. */\n#define SDL_GPU_BUFFERUSAGE_INDIRECT                                (1u << 2) /**< Buffer is an indirect buffer. */\n#define SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ                   (1u << 3) /**< Buffer supports storage reads in graphics stages. */\n#define SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ                    (1u << 4) /**< Buffer supports storage reads in the compute stage. */\n#define SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE                   (1u << 5) /**< Buffer supports storage writes in the compute stage. */\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap32 Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_Swap32 function in C. It takes a Uint32 as input and returns a Uint32, which is the byte-swapped version of the input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE Uint32 SDL_Swap32(Uint32 x);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetTouchpadFinger Syntax in C\nDESCRIPTION: Retrieves the current state of a finger on a touchpad of a game controller. It requires a valid SDL_GameController pointer, the touchpad index, the finger index, and pointers to store the state, x-coordinate, y-coordinate, and pressure of the finger. Available since SDL 2.0.14.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetTouchpadFinger.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerGetTouchpadFinger(SDL_GameController *gamecontroller, int touchpad, int finger, Uint8 *state, float *x, float *y, float *pressure);\n```\n\n----------------------------------------\n\nTITLE: Customizing Android Gradle Plugin version\nDESCRIPTION: Shows how to specify the Android Gradle Plugin version in the `build.gradle` file. This setting controls the version of the Gradle plugin used to build the Android project.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n classpath 'com.android.tools.build:gradle:3.1.0' \n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_DIRECTINPUT in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_DIRECTINPUT macro, which is used to control whether DirectInput should be used for controller detection in SDL.  Setting the value to \"0\" disables DirectInput; setting it to \"1\" enables DirectInput. This hint should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_DIRECTINPUT.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_JOYSTICK_DIRECTINPUT \"SDL_JOYSTICK_DIRECTINPUT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_static_cast Macro Definition (C/C++)\nDESCRIPTION: This macro defines SDL_static_cast which performs a static cast. In C++, it uses static_cast<type>(expression). In C, it uses (type)(expression). This allows for type conversions while providing a C++-style static cast when compiling as C++ and a standard C cast when compiling as C.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_static_cast.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_static_cast(type, expression) static_cast<type>(expression)  /* or `((type)(expression))` in C */\n```\n\n----------------------------------------\n\nTITLE: Get Font Properties in SDL_ttf (C)\nDESCRIPTION: Retrieves the properties associated with a given font. This allows access to settings such as outline line cap, line join, and miter limit. Requires a valid TTF_Font pointer as input. Returns an SDL_PropertiesID on success, 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID TTF_GetFontProperties(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad From Player Index in SDL3 (C)\nDESCRIPTION: This function retrieves the SDL_Gamepad associated with a given player index. The function requires an integer representing the player index as input. It returns a pointer to the SDL_Gamepad object or NULL if no gamepad is associated with the provided index.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadFromPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Gamepad * SDL_GetGamepadFromPlayerIndex(int player_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAudioStreamFormat Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetAudioStreamFormat function. It takes an SDL_AudioStream pointer, and two SDL_AudioSpec pointers to store the input and output audio formats respectively. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetAudioStreamFormat(SDL_AudioStream *stream, SDL_AudioSpec *src_spec, SDL_AudioSpec *dst_spec);\n```\n\n----------------------------------------\n\nTITLE: Set Pixel Format Palette with SDL_SetPixelFormatPalette in C\nDESCRIPTION: Sets the palette for a given pixel format structure using SDL_SetPixelFormatPalette. This function associates an SDL_Palette with an SDL_PixelFormat. It takes pointers to both structures as input and returns 0 on success, or a negative error code on failure. Call SDL_GetError() for more information about the error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetPixelFormatPalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetPixelFormatPalette(SDL_PixelFormat * format,\n                              SDL_Palette *palette);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateWindowSurfaceRects Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UpdateWindowSurfaceRects function, which copies specified rectangular areas of a window's surface to the screen. It takes a window pointer, an array of SDL_Rect structures, and the number of rectangles as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateWindowSurfaceRects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_UpdateWindowSurfaceRects(SDL_Window *window, const SDL_Rect *rects, int numrects);\n```\n\n----------------------------------------\n\nTITLE: TTF_Text Structure Definition in C\nDESCRIPTION: Defines the structure `TTF_Text` used in the SDL_ttf library to represent text.  It contains a copy of the UTF-8 string, the number of lines, a reference counter for memory management, and a pointer to internal data. This struct is available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_Text.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct TTF_Text\n{\n    char *text;             /**< A copy of the UTF-8 string that this text object represents, useful for layout, debugging and retrieving substring text. This is updated when the text object is modified and will be freed automatically when the object is destroyed. */\n    int num_lines;          /**< The number of lines in the text, 0 if it's empty */\n\n    int refcount;           /**< Application reference count, used when freeing surface */\n\n    TTF_TextData *internal; /**< Private */\n\n} TTF_Text;\n```\n\n----------------------------------------\n\nTITLE: Get Number of Joystick Axes in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_JoystickNumAxes function to retrieve the number of axes on an SDL_Joystick. The function takes a pointer to an SDL_Joystick structure as input. It returns the number of axes as an integer or a negative error code if it fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickNumAxes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickNumAxes(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Set Haptic Autocenter in SDL\nDESCRIPTION: This code snippet shows the syntax for using the SDL_HapticSetAutocenter function. It requires a valid SDL_Haptic pointer and an integer value between 0 and 100 for the autocenter strength. Setting autocenter to 0 disables the feature. The haptic device must support SDL_HAPTIC_AUTOCENTER.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticSetAutocenter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticSetAutocenter(SDL_Haptic * haptic,\n                            int autocenter);\n```\n\n----------------------------------------\n\nTITLE: SDL_strncmp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_strncmp function, which compares two UTF-8 strings up to a maximum number of bytes. This function returns an integer indicating the lexicographical order of the strings or zero if they match.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strncmp.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_strncmp(const char *str1, const char *str2, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MUTE_CONSOLE_KEYBOARD in C\nDESCRIPTION: Defines the SDL_HINT_MUTE_CONSOLE_KEYBOARD macro, representing the name of the hint to control keyboard muting on the console. Setting this hint before SDL initialization allows keystrokes to go through to the console or mutes keyboard input. The default is to mute the keyboard input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MUTE_CONSOLE_KEYBOARD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MUTE_CONSOLE_KEYBOARD \"SDL_MUTE_CONSOLE_KEYBOARD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_PauseAudioDevice Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_PauseAudioDevice function. It takes an SDL_AudioDeviceID as input, representing the device to pause. The function returns a boolean value indicating success or failure, with SDL_GetError() providing more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PauseAudioDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PauseAudioDevice(SDL_AudioDeviceID devid);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_LOGGING in C\nDESCRIPTION: This snippet defines the SDL_HINT_LOGGING macro, which is a string literal used as a key to configure SDL's logging behavior via SDL_SetHint.  It's defined as \"SDL_LOGGING\". This allows to configure logging levels for different categories.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_LOGGING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_LOGGING   \"SDL_LOGGING\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_DeleteContext Syntax (C)\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_GL_DeleteContext function. It takes an SDL_GLContext as input, which represents the OpenGL context to be deleted. The function is part of the SDL video API and is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_DeleteContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GL_DeleteContext(SDL_GLContext context);\n```\n\n----------------------------------------\n\nTITLE: SDL_MetalView Type Definition in C\nDESCRIPTION: Defines SDL_MetalView as a void pointer. This type is used as a handle to a CAMetalLayer-backed NSView on macOS or UIView on iOS/tvOS, allowing SDL applications to integrate with Metal rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MetalView.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *SDL_MetalView;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTraySubmenu Syntax in C\nDESCRIPTION: Retrieves the SDL_TrayMenu associated with a given SDL_TrayEntry. This function allows access to a submenu previously created and bound to a specific tray entry.  It expects a pointer to a valid SDL_TrayEntry object and returns a pointer to the associated SDL_TrayMenu.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTraySubmenu.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TrayMenu * SDL_GetTraySubmenu(SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: Get Music Copyright Tag - C\nDESCRIPTION: Retrieves the copyright text from a Mix_Music object. It returns a const char* representing the copyright information, or an empty string if unavailable. It accepts a pointer to a Mix_Music object as input, which can be NULL to query the currently playing music. Requires SDL_mixer 2.6.0 or newer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicCopyrightTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicCopyrightTag(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Unloading OpenGL Library in SDL3 (C)\nDESCRIPTION: This snippet demonstrates the syntax for unloading the OpenGL library using SDL_GL_UnloadLibrary. This function should be called on the main thread and is available since SDL 3.2.0. It reverses the effect of SDL_GL_LoadLibrary.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_UnloadLibrary.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GL_UnloadLibrary(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseMotionEvent Structure Definition in C\nDESCRIPTION: Defines the structure for mouse motion events in SDL3. This includes fields for event type, timestamp, window ID, mouse ID, button states, x and y coordinates, and relative motion in x and y directions. It requires the SDL3 library and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseMotionEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MouseMotionEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_MOUSE_MOTION */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The window with mouse focus, if any */\n    SDL_MouseID which;  /**< The mouse instance id in relative mode, SDL_TOUCH_MOUSEID for touch events, or 0 */\n    SDL_MouseButtonFlags state;       /**< The current button state */\n    float x;            /**< X coordinate, relative to window */\n    float y;            /**< Y coordinate, relative to window */\n    float xrel;         /**< The relative motion in the X direction */\n    float yrel;         /**< The relative motion in the Y direction */\n} SDL_MouseMotionEvent;\n```\n\n----------------------------------------\n\nTITLE: PNG Data Detection with SDL_RWops in C\nDESCRIPTION: This C code snippet shows the signature of the IMG_isPNG function from the SDL_image library.  It takes a seekable/readable SDL_RWops pointer as input. It returns a non-zero integer if the data represents a PNG image, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isPNG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isPNG(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_FlushAudioStream Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_FlushAudioStream function in C. It takes an SDL_AudioStream pointer as input and returns a boolean indicating success or failure.  The function signals that no more data will be sent to the stream and forces processing of the buffered data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlushAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_FlushAudioStream(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: SDL_PollEvent Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_PollEvent function in C. The function takes a pointer to an SDL_Event structure as input and returns an integer indicating whether an event was available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PollEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_PollEvent(SDL_Event * event);\n```\n\n----------------------------------------\n\nTITLE: Query Font Faces in SDL_ttf (C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_FontFaces function, which is used to query the number of faces in a given TTF_Font. The function takes a pointer to a TTF_Font structure as input and returns a long integer representing the number of font faces.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_FontFaces.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nlong TTF_FontFaces(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv_wchar_utf8 Macro Definition in C\nDESCRIPTION: This macro converts a wide character string (wchar_t) to UTF-8 encoding using SDL_iconv_string. It takes a string 'S' as input and returns a new string in UTF-8 or NULL on error. The parameter 'S' should not be an expression with side effects as it is double-evaluated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv_wchar_utf8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_iconv_wchar_utf8(S)     SDL_iconv_string(\"UTF-8\", \"WCHAR_T\", (char *)S, (SDL_wcslen(S)+1)*sizeof(wchar_t))\n```\n\n----------------------------------------\n\nTITLE: Get Camera Name in SDL3\nDESCRIPTION: Retrieves the human-readable device name for a camera using its instance ID. This function returns a const char* representing the camera name or NULL on failure.  It is available since SDL 3.2.0 and is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameraName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetCameraName(SDL_CameraID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Hiding Cursor and Grabbing Input in SDL 1.2 in C\nDESCRIPTION: This snippet demonstrates how to hide the mouse cursor and grab input in SDL 1.2. SDL_ShowCursor(0) hides the cursor, and SDL_WM_GrabInput(SDL_GRAB_ON) grabs input, preventing the mouse from leaving the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\n/* in SDL 1.2 ... */\nSDL_ShowCursor(0);\nSDL_WM_GrabInput(SDL_GRAB_ON);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUStorageTextureReadWriteBinding Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_GPUStorageTextureReadWriteBinding` for specifying parameters when binding textures in a compute pass. The structure includes members for the texture to bind (`texture`), the mip level index (`mip_level`), the layer index (`layer`), a boolean to cycle the texture if already bound (`cycle`), and padding bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUStorageTextureReadWriteBinding.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUStorageTextureReadWriteBinding\n{\n    SDL_GPUTexture *texture;  /**< The texture to bind. Must have been created with SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE or SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE. */\n    Uint32 mip_level;         /**< The mip level index to bind. */\n    Uint32 layer;             /**< The layer index to bind. */\n    bool cycle;               /**< true cycles the texture if it is already bound. */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_GPUStorageTextureReadWriteBinding;\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeInChannelTimed Syntax (C)\nDESCRIPTION: Defines the syntax of the Mix_FadeInChannelTimed function from the SDL_mixer library. This function plays an audio chunk on a specific channel, fading it in over a specified duration, with a maximum playback duration. The function takes the channel number, the audio chunk, the number of loops, the fade-in duration in milliseconds, and the maximum playback duration in milliseconds as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadeInChannelTimed.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeInChannelTimed(int channel, Mix_Chunk *chunk, int loops, int ms, int ticks);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenamePath Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_RenamePath function in C. It takes the old path and the new path as input parameters and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenamePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenamePath(const char *oldpath, const char *newpath);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadXPM_RW Function Syntax in SDL_image\nDESCRIPTION: This code snippet shows the syntax for the IMG_LoadXPM_RW function in SDL_image.  It loads an XPM image from an SDL_RWops stream. It returns a pointer to an SDL_Surface, or NULL on error. The SDL_RWops pointer must be provided.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadXPM_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadXPM_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_TimeFromWindows Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_TimeFromWindows function in C. It takes two 32-bit unsigned integers as input, representing the low and high parts of a Windows FILETIME, and returns an SDL_Time value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TimeFromWindows.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Time SDL_TimeFromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);\n```\n\n----------------------------------------\n\nTITLE: SDL_TimeToDateTime Syntax in C\nDESCRIPTION: Converts an SDL_Time in nanoseconds since the epoch to a calendar time in the SDL_DateTime format. The `ticks` parameter is the SDL_Time to convert. `dt` is a pointer to the resulting SDL_DateTime. `localTime` indicates whether the result should be in local time (true) or UTC (false). Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TimeToDateTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_TimeToDateTime(SDL_Time ticks, SDL_DateTime *dt, bool localTime);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Touchpad Finger State in C\nDESCRIPTION: Retrieves the current state of a finger on a specific touchpad of a gamepad.  The function takes a gamepad pointer, touchpad index, finger index, and pointers to booleans and floats to store the finger's state (down or up), normalized X and Y coordinates, and pressure.  It returns true on success and false on failure. Requires SDL3 and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadTouchpadFinger.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetGamepadTouchpadFinger(SDL_Gamepad *gamepad, int touchpad, int finger, bool *down, float *x, float *y, float *pressure);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_LCD Function Declaration in C\nDESCRIPTION: Declaration of the TTF_RenderText_LCD function, which renders Latin1 text at LCD subpixel quality to a new ARGB surface using SDL_ttf. The function takes a font, text string, foreground color, and background color as input and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderText_LCD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_LCD(TTF_Font *font,\n                const char *text, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Define UNICODE_BOM_NATIVE macro in C (SDL_ttf)\nDESCRIPTION: This macro defines the UNICODE_BOM_NATIVE constant, representing the Unicode byte order mark (BOM) for the native byte order. It is defined in the SDL3_ttf/SDL_ttf.h header file and is used to detect the byte order of Unicode text. The value is 0xFEFF.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/UNICODE_BOM_NATIVE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define UNICODE_BOM_NATIVE  0xFEFF\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUCopyPass Structure Definition in C\nDESCRIPTION: Defines the SDL_GPUCopyPass structure as an opaque handle representing a copy pass. This handle is used internally by SDL_BeginGPUCopyPass and SDL_EndGPUCopyPass, and should not be held or referenced after SDL_EndGPUCopyPass is called. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUCopyPass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUCopyPass SDL_GPUCopyPass;\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderClipEnabled Syntax in C\nDESCRIPTION: This snippet shows the function signature of SDL_RenderClipEnabled, which takes an SDL_Renderer pointer as input and returns a boolean indicating whether clipping is enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderClipEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderClipEnabled(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_mixer Initialization Flags in C\nDESCRIPTION: This code snippet defines the MIX_InitFlags enum in C, used to specify which audio formats SDL_mixer should support during initialization. Each enum member represents a specific audio format, such as FLAC, MOD, MP3, OGG, MID, OPUS, and WAVPACK. These flags are bitwise ORed together when calling Mix_Init() to enable support for multiple formats.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/MIX_InitFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum MIX_InitFlags\n{\n    MIX_INIT_FLAC   = 0x00000001,\n    MIX_INIT_MOD    = 0x00000002,\n    MIX_INIT_MP3    = 0x00000008,\n    MIX_INIT_OGG    = 0x00000010,\n    MIX_INIT_MID    = 0x00000020,\n    MIX_INIT_OPUS   = 0x00000040,\n    MIX_INIT_WAVPACK= 0x00000080\n} MIX_InitFlags;\n```\n\n----------------------------------------\n\nTITLE: Loading Audio Data (Chunks and Music)\nDESCRIPTION: These functions load audio data into chunks (Mix_Chunk) or music objects (Mix_Music). They support loading from files and SDL_IOStream. Mix_LoadMUSType_IO loads a music object assuming a specific format.  Mix_QuickLoad functions are for quickly loading from memory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nMix_Chunk * Mix_LoadWAV_IO(SDL_IOStream *src, bool closeio);                              // Load a supported audio format into a chunk.\nMix_Chunk * Mix_LoadWAV(const char *file);                                                // Load a supported audio format into a chunk.\nMix_Music * Mix_LoadMUS(const char *file);                                                // Load a supported audio format into a music object.\nMix_Music * Mix_LoadMUS_IO(SDL_IOStream *src, bool closeio);                              // Load a supported audio format into a music object.\nMix_Music * Mix_LoadMUSType_IO(SDL_IOStream *src, Mix_MusicType type, bool closeio);      // Load an audio format into a music object, assuming a specific format.\nMix_Chunk * Mix_QuickLoad_WAV(Uint8 *mem);                                                // Load a WAV file from memory as quickly as possible.\nMix_Chunk * Mix_QuickLoad_RAW(Uint8 *mem, Uint32 len);                                    // Load a raw audio data from memory as quickly as possible.\n```\n\n----------------------------------------\n\nTITLE: Get Pixel Format from Masks in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetPixelFormatForMasks function. It takes bits-per-pixel (bpp) and RGBA masks as input, and returns an SDL_PixelFormat value or SDL_PIXELFORMAT_UNKNOWN if no match is found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPixelFormatForMasks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);\n```\n\n----------------------------------------\n\nTITLE: Get Touch Device Name - SDL2 (C)\nDESCRIPTION: Retrieves the name of a touch device using its index. The function returns a const char* representing the touch device name or NULL if the index is invalid. It is available since SDL 2.0.22.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTouchName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetTouchName(int index);\n```\n\n----------------------------------------\n\nTITLE: vfscanf Annotation Example\nDESCRIPTION: Example usage of SDL_SCANF_VARARG_FUNCV to annotate the vfscanf function. This indicates that the second parameter is a scanf-style format string followed by a va_list, enabling compiler warnings if the usage is incorrect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SCANF_VARARG_FUNCV.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint vfscanf(FILE *f, const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\n----------------------------------------\n\nTITLE: Defining Joystick Throttle Devices Exclusion Hint in SDL2 (C)\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED macro, which is used to specify a hint to exclude certain joystick devices from being recognized as throttle-style controllers. The hint accepts a comma-separated list of USB Vendor ID (VID) and Product ID (PID) pairs in hexadecimal format, allowing SDL2 applications to selectively disable throttle behavior for specific joysticks. Alternatively, the hint can point to a file containing the list of excluded devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED \"SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_image showimage.c\nDESCRIPTION: This C code demonstrates how to load and display an XPM image using SDL3 and SDL_image. It initializes SDL, creates a window and renderer, loads the image, and renders it on the screen. This snippet includes the XPM image data directly in the code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n#include <SDL3/SDL_image.h>\n\n/* XPM */\nstatic char * icon_xpm[] = {\n  \"32 23 3 1\",\n  \" \\tc #FFFFFF\",\n  \".\\tc #000000\",\n  \"+\\tc #FFFF00\",\n  \"                                \",\n  \"            ........            \",\n  \"          ..++++++++..          \",\n  \"         .++++++++++++.         \",\n  \"        .++++++++++++++.        \",\n  \"       .++++++++++++++++.       \",\n  \"      .++++++++++++++++++.      \",\n  \"      .+++....++++....+++.      \",\n  \"     .++++.. .++++.. .++++.     \",\n  \"     .++++....++++....++++.     \",\n  \"     .++++++++++++++++++++.     \",\n  \"     .++++++++++++++++++++.     \",\n  \"     .+++++++++..+++++++++.     \",\n  \"     .+++++++++..+++++++++.     \",\n  \"     .++++++++++++++++++++.     \",\n  \"      .++++++++++++++++++.      \",\n  \"      .++...++++++++...++.      \",\n  \"       .++............++.       \",\n  \"        .++..........++.        \",\n  \"         .+++......+++.         \",\n  \"          ..++++++++..          \",\n  \"            ........            \",\n  \"                                \"};\n\nint main(int argc, char *argv[])\n{\n  SDL_Window *window;\n  SDL_Renderer *renderer;\n  SDL_Surface *surface;\n  SDL_Texture *texture;\n  int done;\n  SDL_Event event;\n\n  if (SDL_CreateWindowAndRenderer(\"Show a simple image\", 0, 0, 0, &window, &renderer) < 0) {\n    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION,\n        \"SDL_CreateWindowAndRenderer() failed: %s\", SDL_GetError());\n    return(2);\n  }\n\n  surface = IMG_ReadXPMFromArray(icon_xpm);\n  texture = SDL_CreateTextureFromSurface(renderer, surface);\n  if (!texture) {\n    SDL_LogError(SDL_LOG_CATEGORY_APPLICATION,\n        \"Couldn't load texture: %s\", SDL_GetError());\n    return(2);\n  }\n  SDL_SetWindowSize(window, 800, 480);\n\n  done = 0;\n  while (!done) {\n    while (SDL_PollEvent(&event)) {\n      if (event.type == SDL_EVENT_QUIT)\n        done = 1;\n    }\n    SDL_RenderTexture(renderer, texture, NULL, NULL);\n    SDL_RenderPresent(renderer);\n    SDL_Delay(100);\n  }\n  SDL_DestroyTexture(texture);\n\n  SDL_Quit();\n  return(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Install pkg-config for Android NDK\nDESCRIPTION: Installs pkg-config into the standalone NDK sysroot. Downloads, extracts, configures, builds, and installs pkg-config. Creates a symbolic link for the Android-specific pkg-config binary in the toolchain's bin directory.  Also creates the directory for the .pc files.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nVERSION=0.9.12\ncd /usr/src/\nwget http://rabbit.dereferenced.org/~nenolod/distfiles/pkgconf-$VERSION.tar.gz\ntar xf pkgconf-$VERSION.tar.gz\ncd pkgconf-$VERSION/\nmkdir native-android/ && cd native-android/\n../configure --prefix=$NDK_STANDALONE/sysroot/usr\nmake -j$(nproc)\nmake install\nln -s ../sysroot/usr/bin/pkgconf $NDK_STANDALONE/bin/arm-linux-androideabi-pkg-config\nmkdir $NDK_STANDALONE/sysroot/usr/lib/pkgconfig/\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticConstant Structure Definition in C\nDESCRIPTION: This C code defines the SDL_HapticConstant structure, used to represent a constant haptic effect. It includes fields for the effect type, direction, duration, delay, trigger button and interval, force level, and attack/fade envelopes. The structure is designed to be used with the SDL_HAPTIC_CONSTANT effect type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticConstant.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_HapticConstant\n{\n    /* Header */\n    Uint16 type;            /**< SDL_HAPTIC_CONSTANT */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect. */\n    Uint16 delay;           /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;          /**< Button that triggers the effect. */\n    Uint16 interval;        /**< How soon it can be triggered again after button. */\n\n    /* Constant */\n    Sint16 level;           /**< Strength of the constant effect. */\n\n    /* Envelope */\n    Uint16 attack_length;   /**< Duration of the attack. */\n    Uint16 attack_level;    /**< Level at the start of the attack. */\n    Uint16 fade_length;     /**< Duration of the fade. */\n    Uint16 fade_level;      /**< Level at the end of the fade. */\n} SDL_HapticConstant;\n```\n\n----------------------------------------\n\nTITLE: SDL_AppEvent Callback\nDESCRIPTION: This C code shows the SDL_AppEvent callback function.  It is called whenever an SDL event arrives and passes the event to the application.  The application should not call SDL_PollEvent or SDL_PumpEvent. The return value determines whether the application continues, fails, or succeeds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/main-functions.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nSDL_AppResult SDL_AppEvent(void *appstate, SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetPointerProperty Syntax in C\nDESCRIPTION: Retrieves a pointer property from a group of properties. The function takes a SDL_PropertiesID, the property name (a C string), and a default value as input. It returns the property's value as a void pointer, or the default value if the property is not found or is not a pointer type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPointerProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_GetPointerProperty(SDL_PropertiesID props, const char *name, void *default_value);\n```\n\n----------------------------------------\n\nTITLE: IMG_isLBM Function Definition in C\nDESCRIPTION: This code snippet shows the function signature of `IMG_isLBM`. It takes a pointer to an SDL_IOStream as input and returns a boolean value indicating whether the stream contains LBM image data. The function is part of the SDL_image library and requires including SDL_image.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isLBM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isLBM(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Examining Assertion Report (C)\nDESCRIPTION: Illustrates how to properly examine the data returned by SDL_GetAssertionReport to iterate through the list of failed assertions and print their details. It requires SDL_AssertData struct.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAssertionReport.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_AssertData *item = SDL_GetAssertionReport();\nwhile (item) {\n   printf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\n\",\n          item->condition, item->function, item->filename,\n          item->linenum, item->trigger_count,\n          item->always_ignore ? \"yes\" : \"no\");\n   item = item->next;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyDeviceEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_JoyDeviceEvent structure in C. It includes fields for the event type (SDL_EVENT_JOYSTICK_ADDED, SDL_EVENT_JOYSTICK_REMOVED, or SDL_EVENT_JOYSTICK_UPDATE_COMPLETE), a reserved field, a timestamp indicating when the event occurred, and the joystick instance ID (which). This structure is used to represent joystick device events in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoyDeviceEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyDeviceEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_JOYSTICK_ADDED or SDL_EVENT_JOYSTICK_REMOVED or SDL_EVENT_JOYSTICK_UPDATE_COMPLETE */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which;       /**< The joystick instance id */\n} SDL_JoyDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: Get Text Color (Float) - SDL_ttf\nDESCRIPTION: Retrieves the color of a text object. The color components (red, green, blue, alpha) are returned as floating-point values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_95\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextColorFloat(TTF_Text *text, float *r, float *g, float *b, float *a);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_INVALID_UNICODE_CODEPOINT in C\nDESCRIPTION: This C macro defines SDL_INVALID_UNICODE_CODEPOINT as 0xFFFD, which is the Unicode REPLACEMENT CHARACTER.  It's used by SDL functions to indicate UTF-8 encoding errors.  This macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_INVALID_UNICODE_CODEPOINT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_INVALID_UNICODE_CODEPOINT 0xFFFD\n```\n\n----------------------------------------\n\nTITLE: SDL_cosf Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the `SDL_cosf` function in C. It takes a single-precision floating-point value `x` (in radians) as input and returns the cosine of that value as a single-precision floating-point number.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_cosf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_cosf(float x);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_disabled_assert Macro in C\nDESCRIPTION: This macro is defined in SDL3/SDL_assert.h. It's used when SDL_assert is disabled, typically in release builds. It takes a 'condition' but does nothing, except avoid compiler warnings by wrapping the condition in a sizeof.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_disabled_assert.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_disabled_assert(condition) \\\n    do { (void) sizeof ((condition)); } while (SDL_NULL_WHILE_LOOP_CONDITION)\n```\n\n----------------------------------------\n\nTITLE: Free Music Object Mix_FreeMusic - C\nDESCRIPTION: Frees a music object allocated by SDL_mixer. If the music is playing, it will be stopped. If fading out, the function blocks until the fade completes. Requires SDL_mixer.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FreeMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_FreeMusic(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Get Font Descent with SDL_ttf in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetFontDescent function, which retrieves the font's descent from a TTF_Font structure. The function takes a pointer to a TTF_Font struct as input and returns an integer representing the font's descent. The descent value is a negative offset from the baseline.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontDescent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontDescent(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Mix_ResumeMusic Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the Mix_ResumeMusic function in C. This function resumes the music stream, if paused. It takes no parameters and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_ResumeMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_ResumeMusic(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_RemoveHintCallback Syntax\nDESCRIPTION: This code snippet shows the syntax for the SDL_RemoveHintCallback function. It takes the hint name, callback function, and user data as input and removes the specified callback from the hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RemoveHintCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RemoveHintCallback(const char *name,\n                         SDL_HintCallback callback,\n                         void *userdata);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTIF_RW Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_LoadTIF_RW function. It takes an SDL_RWops pointer as input, which represents the data stream for the TIFF image, and returns an SDL_Surface pointer, which represents the loaded image. Returns NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadTIF_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadTIF_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: IMG_isJXL Function Declaration in C\nDESCRIPTION: This code snippet shows the function declaration of IMG_isJXL, used to detect if an SDL_IOStream contains JXL image data. It takes an SDL_IOStream pointer as input and returns a boolean value indicating whether the stream contains JXL data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isJXL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isJXL(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_IMAGE_VERSION_ATLEAST Macro Definition in C\nDESCRIPTION: Defines a macro to check if the SDL_image version is at least X.Y.Z. It uses SDL_IMAGE_MAJOR_VERSION, SDL_IMAGE_MINOR_VERSION, and SDL_IMAGE_PATCHLEVEL to perform the version check.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/SDL_IMAGE_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_IMAGE_MAJOR_VERSION >= X) && \\\n     (SDL_IMAGE_MAJOR_VERSION > X || SDL_IMAGE_MINOR_VERSION >= Y) && \\\n     (SDL_IMAGE_MAJOR_VERSION > X || SDL_IMAGE_MINOR_VERSION > Y || SDL_IMAGE_PATCHLEVEL >= Z))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MAIN_CALLBACK_RATE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MAIN_CALLBACK_RATE macro, which is used to set the rate at which the SDL_AppIterate function is called. The rate is specified in Hz, with '0' indicating the fastest possible iteration. The hint can also be set to 'waitevent' to only iterate when new events are available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MAIN_CALLBACK_RATE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MAIN_CALLBACK_RATE \"SDL_MAIN_CALLBACK_RATE\"\n```\n\n----------------------------------------\n\nTITLE: TTF_PROP_FONT_CREATE Macros in C\nDESCRIPTION: Defines macros for the TTF_PROP_FONT_CREATE properties, including filename, iostream pointer, iostream offset, iostream autoclose, size, face, horizontal DPI, vertical DPI and existing font. These macros are used to set the properties in SDL_PropertiesID when creating a font with TTF_OpenFontWithProperties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_OpenFontWithProperties.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define TTF_PROP_FONT_CREATE_FILENAME_STRING            \"SDL_ttf.font.create.filename\"\n#define TTF_PROP_FONT_CREATE_IOSTREAM_POINTER           \"SDL_ttf.font.create.iostream\"\n#define TTF_PROP_FONT_CREATE_IOSTREAM_OFFSET_NUMBER     \"SDL_ttf.font.create.iostream.offset\"\n#define TTF_PROP_FONT_CREATE_IOSTREAM_AUTOCLOSE_BOOLEAN \"SDL_ttf.font.create.iostream.autoclose\"\n#define TTF_PROP_FONT_CREATE_SIZE_FLOAT                 \"SDL_ttf.font.create.size\"\n#define TTF_PROP_FONT_CREATE_FACE_NUMBER                \"SDL_ttf.font.create.face\"\n#define TTF_PROP_FONT_CREATE_HORIZONTAL_DPI_NUMBER      \"SDL_ttf.font.create.hdpi\"\n#define TTF_PROP_FONT_CREATE_VERTICAL_DPI_NUMBER        \"SDL_ttf.font.create.vdpi\"\n#define TTF_PROP_FONT_CREATE_EXISTING_FONT              \"SDL_ttf.font.create.existing_font\"\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadAnimationTyped_IO Syntax (C)\nDESCRIPTION: Defines the syntax for the IMG_LoadAnimationTyped_IO function in C. This function loads an animation from an SDL_IOStream. It takes the SDL_IOStream, a boolean indicating whether to close the stream, and a file type string as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadAnimationTyped_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimationTyped_IO(SDL_IOStream *src, bool closeio, const char *type);\n```\n\n----------------------------------------\n\nTITLE: Set Text Engine C\nDESCRIPTION: This function sets the text engine used by a text object.  It requires a valid TTF_Text pointer and a TTF_TextEngine pointer. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_84\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextEngine(TTF_Text *text, TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateShapedWindow Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_CreateShapedWindow function in C. This function creates a shaped window with specified title, position, dimensions, and flags. It returns a pointer to the created SDL_Window structure or NULL if creation fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateShapedWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_CreateShapedWindow(const char *title,unsigned int x,unsigned int y,unsigned int w,unsigned int h,Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED in SDL3 (C)\nDESCRIPTION: This code snippet defines the SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED macro, used to configure how SDL handles the Alt+Tab key combination when the keyboard is grabbed by an SDL application. The hint allows developers to control whether SDL minimizes the window or leaves Alt+Tab handling to the application. This hint is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED \"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioStreamPut Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_AudioStreamPut function. It takes an SDL_AudioStream pointer, a void pointer to the audio data, and the length of the data in bytes as input.  It returns 0 on success and -1 on error. It requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioStreamPut.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AudioStreamPut(SDL_AudioStream *stream, const void *buf, int len);\n```\n\n----------------------------------------\n\nTITLE: SDL_PixelFormatEnumToMasks Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_PixelFormatEnumToMasks function, which converts an enumerated pixel format to a bpp value and RGBA masks. It takes a pixel format enum and pointers to integer and unsigned 32-bit integer variables to store the results.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PixelFormatEnumToMasks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_PixelFormatEnumToMasks(Uint32 format,\n                                    int *bpp,\n                                    Uint32 * Rmask,\n                                    Uint32 * Gmask,\n                                    Uint32 * Bmask,\n                                    Uint32 * Amask);\n```\n\n----------------------------------------\n\nTITLE: Handling iOS Application Events with SDL\nDESCRIPTION: This code snippet demonstrates how to handle application events in iOS using SDL. It sets up an event filter using SDL_SetEventFilter to capture specific events such as SDL_EVENT_TERMINATING, SDL_EVENT_LOW_MEMORY, and foreground/background events. The HandleAppEvents function processes these events and returns a boolean indicating whether to continue processing the event.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/ios.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool HandleAppEvents(void *userdata, SDL_Event *event)\n{\n    switch (event->type)\n    {\n    case SDL_EVENT_TERMINATING:\n        /* Terminate the app.\n           Shut everything down before returning from this function.\n        */\n        return false;\n    case SDL_EVENT_LOW_MEMORY:\n        /* You will get this when your app is paused and iOS wants more memory.\n           Release as much memory as possible.\n        */\n        return false;\n    case SDL_EVENT_WILL_ENTER_BACKGROUND:\n        /* Prepare your app to go into the background.  Stop loops, etc.\n           This gets called when the user hits the home button, or gets a call.\n        */\n        return false;\n    case SDL_EVENT_DID_ENTER_BACKGROUND:\n        /* This will get called if the user accepted whatever sent your app to the background.\n           If the user got a phone call and canceled it, you'll instead get an SDL_EVENT_DID_ENTER_FOREGROUND event and restart your loops.\n           When you get this, you have 5 seconds to save all your state or the app will be terminated.\n           Your app is NOT active at this point.\n        */\n        return false;\n    case SDL_EVENT_WILL_ENTER_FOREGROUND:\n        /* This call happens when your app is coming back to the foreground.\n           Restore all your state here.\n        */\n        return false;\n    case SDL_EVENT_DID_ENTER_FOREGROUND:\n        /* Restart your loops here.\n           Your app is interactive and getting CPU again.\n        */\n        return false;\n    default:\n        /* No special processing, add it to the event queue */\n        return true;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_SetEventFilter(HandleAppEvents, NULL);\n\n    ... run your main loop\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_WPRINTF_VARARG_FUNC macro in C\nDESCRIPTION: Defines the SDL_WPRINTF_VARARG_FUNC macro, which annotates vararg functions operating like wprintf. This macro helps in format string checking by compilers. On compilers without annotation mechanism, it is defined to nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WPRINTF_VARARG_FUNC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WPRINTF_VARARG_FUNC( fmtargnumber ) /* __attribute__ (( format( __wprintf__, fmtargnumber, fmtargnumber+1 ))) */\n```\n\n----------------------------------------\n\nTITLE: Resuming a Channel SDL_mixer C\nDESCRIPTION: Resumes the playback of audio on a particular channel. The function takes an integer identifying the channel to resume. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_Resume(int channel);\n```\n\n----------------------------------------\n\nTITLE: Check Audio Device Type in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for using `SDL_IsAudioDevicePlayback` to determine if a given audio device ID (`devid`) is a playback device or a recording device. The function returns `true` if the device is a playback device and `false` if it is a recording device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsAudioDevicePlayback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsAudioDevicePlayback(SDL_AudioDeviceID devid);\n```\n\n----------------------------------------\n\nTITLE: SDL_RegisterEvents Syntax\nDESCRIPTION: Defines the syntax for the SDL_RegisterEvents function. It takes an integer representing the number of events to allocate and returns a Uint32 representing the beginning event number or (Uint32)-1 if allocation fails. This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RegisterEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_RegisterEvents(int numevents);\n```\n\n----------------------------------------\n\nTITLE: Emscripten Build Configuration (Disable Threads)\nDESCRIPTION: This bash script configures the SDL build process for Emscripten, disabling pthreads, assembly, and cpuinfo. It sets compiler flags to use SDL=0 and optimization level 3.  The `emconfigure` command is used to configure the build with the emscripten toolchain.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ncd SDL\nmkdir build\ncd build\nemconfigure ../configure --host=wasm32-unknown-emscripten --disable-pthreads --disable-assembly --disable-cpuinfo CFLAGS=\"-sUSE_SDL=0 -O3\"\nemmake make -j4\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateYUVTexture Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UpdateYUVTexture function in C. This function updates a rectangle within a planar YV12 or IYUV texture with new pixel data. It takes the SDL_Texture, SDL_Rect, and raw pixel data for the Y, U, and V planes along with their respective pitches.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UpdateYUVTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UpdateYUVTexture(SDL_Texture * texture,\n                         const SDL_Rect * rect,\n                         const Uint8 *Yplane, int Ypitch,\n                         const Uint8 *Uplane, int Upitch,\n                         const Uint8 *Vplane, int Vpitch);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES macro. When set to \"1\", software-rendered video frames are saved as BMP files in the format \"SDL_windowX-Y.bmp\", where X is the window ID and Y is the frame number. The default value is \"0\", which disables saving frames.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES \"SDL_VIDEO_OFFSCREEN_SAVE_FRAMES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_StepUTF8 Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_StepUTF8 function, which takes a pointer to a UTF-8 string pointer and a pointer to the string's length as input. It returns the first Unicode codepoint in the string and adjusts the input pointers accordingly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StepUTF8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_StepUTF8(const char **pstr, size_t *pslen);\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Sensor Data Rate in C\nDESCRIPTION: Retrieves the data rate (number of events per second) of a specified sensor on a given SDL_GameController. Requires an initialized SDL_GameController and a valid SDL_SensorType. Returns the data rate as a float, or 0.0f if unavailable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetSensorDataRate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GameControllerGetSensorDataRate(SDL_GameController *gamecontroller, SDL_SensorType type);\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_GetInstanceExtensions Function Signature (C)\nDESCRIPTION: This code snippet represents the function signature for SDL_Vulkan_GetInstanceExtensions.  It takes a pointer to a Uint32 to store the count of extensions and returns a double pointer to char constants, representing an array of extension names.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_GetInstanceExtensions.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nchar const * const * SDL_Vulkan_GetInstanceExtensions(Uint32 *count);\n```\n\n----------------------------------------\n\nTITLE: Save SDL_Surface to JPG file in C\nDESCRIPTION: This function saves an SDL_Surface into a JPEG image file. It accepts an SDL_Surface pointer, a file path as a const char pointer, and an integer representing the image quality. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveJPG(SDL_Surface *surface, const char *file, int quality);\n```\n\n----------------------------------------\n\nTITLE: SDL_assert Macro Definition in C\nDESCRIPTION: Defines the SDL_assert macro, which conditionally triggers an assertion based on a boolean condition and the SDL_ASSERT_LEVEL. When assertions are disabled, it wraps the condition in a `sizeof` operator to prevent compiler warnings about unused variables.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_assert.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_assert(condition) if (assertion_enabled && (condition)) { trigger_assertion; }\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_COMPILEDVERSION Macro in C\nDESCRIPTION: This macro defines the SDL compiled version number using the major, minor, and patchlevel versions. Note that from SDL 2.9.0 onwards the minor version encoding uses the thousands digit and this macro is deprecated in SDL 3.x. Use SDL_VERSION_ATLEAST or SDL_VERSION instead.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_COMPILEDVERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_COMPILEDVERSION \\\n    SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL)\n```\n\n----------------------------------------\n\nTITLE: Allocate Mixer Channels in C\nDESCRIPTION: This code snippet shows the syntax for using the Mix_AllocateChannels function from the SDL_mixer library. It takes an integer `numchans` as input, which represents the desired number of audio channels. The function returns the new number of allocated channels.  If `numchans` is less than zero, it queries the current channel count.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_AllocateChannels.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_AllocateChannels(int numchans);\n```\n\n----------------------------------------\n\nTITLE: SDL_MixAudio Equivalent Call to SDL_MixAudioFormat in C\nDESCRIPTION: This code snippet shows the equivalent call to SDL_MixAudioFormat. It illustrates that SDL_MixAudio is a simplified wrapper around SDL_MixAudioFormat, using the format obtained from SDL_OpenAudio.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MixAudio.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_MixAudioFormat(dst, src, format, len, volume);\n```\n\n----------------------------------------\n\nTITLE: Hiding Mouse Cursor and Grabbing Input in SDL 1.2\nDESCRIPTION: This code snippet demonstrates how to hide the mouse cursor and grab input in SDL 1.2, which was commonly used to allow continuous mouse movement in applications like FPS games. It uses `SDL_ShowCursor` to hide the cursor and `SDL_WM_GrabInput` to grab the input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nSDL_ShowCursor(0);\nSDL_WM_GrabInput(SDL_GRAB_ON);\n```\n\n----------------------------------------\n\nTITLE: SDL_GLProfile Typedef Definition in C\nDESCRIPTION: Defines the SDL_GLProfile type as an unsigned 32-bit integer (Uint32). This type is used to represent the OpenGL context profile.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLProfile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_GLProfile;\n```\n\n----------------------------------------\n\nTITLE: Define Vulkan Library Hint String in C\nDESCRIPTION: This C code snippet defines the string literal for the SDL_HINT_VULKAN_LIBRARY hint, used to specify the Vulkan library to load before creating a Vulkan window or calling SDL_Vulkan_LoadLibrary(). It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VULKAN_LIBRARY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VULKAN_LIBRARY \"SDL_VULKAN_LIBRARY\"\n```\n\n----------------------------------------\n\nTITLE: Closing a Gamepad using SDL_CloseGamepad in C\nDESCRIPTION: Closes a gamepad that was previously opened using SDL_OpenGamepad().  It takes a pointer to the SDL_Gamepad structure as input and does not return any value. This function is available since SDL 3.2.0 and requires the SDL3/SDL_gamepad.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseGamepad.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CloseGamepad(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Resume Group Playback Mix_ResumeGroup C\nDESCRIPTION: Resumes playback of a group of channels identified by a tag. This function restarts the audio on all channels associated with the specified tag from the point where they were paused.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_ResumeGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: Define Opaque Alpha Float Value in C\nDESCRIPTION: This code defines the SDL_ALPHA_OPAQUE_FLOAT macro, which represents a fully opaque alpha value (1.0f) in floating-point format. It's used in SDL3 for pixel manipulation and transparency settings. The macro is defined in SDL3/SDL_pixels.h and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ALPHA_OPAQUE_FLOAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ALPHA_OPAQUE_FLOAT 1.0f\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_CHANNELS in C\nDESCRIPTION: Defines the SDL_HINT_AUDIO_CHANNELS macro, which is a string constant representing the hint's name. This hint is used to specify the default number of audio channels if the application does not explicitly define it when opening the audio device. The hint should be set before opening any audio devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_CHANNELS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_CHANNELS \"SDL_AUDIO_CHANNELS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_IMAGE_VERSION_ATLEAST Macro Definition in C\nDESCRIPTION: This macro evaluates to true if the SDL_image library is at least version X.Y.Z. It uses SDL_IMAGE_MAJOR_VERSION, SDL_IMAGE_MINOR_VERSION, and SDL_IMAGE_MICRO_VERSION to perform the comparison. It's part of the SDL_image library and defined in SDL3_image/SDL_image.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/SDL_IMAGE_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_IMAGE_MAJOR_VERSION >= X) && \\\n     (SDL_IMAGE_MAJOR_VERSION > X || SDL_IMAGE_MINOR_VERSION >= Y) && \\\n     (SDL_IMAGE_MAJOR_VERSION > X || SDL_IMAGE_MINOR_VERSION > Y || SDL_IMAGE_MICRO_VERSION >= Z))\n```\n\n----------------------------------------\n\nTITLE: Get Window Safe Area SDL3 C\nDESCRIPTION: Retrieves the safe area of a specified window.  This function populates the provided SDL_Rect with the dimensions of the area that is guaranteed to be visible and interactive, accounting for potential obstructions like on-screen controls or curved edges. It requires a valid SDL_Window pointer and an SDL_Rect pointer. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowSafeArea.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowSafeArea(SDL_Window *window, SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_PointInRect Function Definition in C\nDESCRIPTION: This code snippet shows the function signature of SDL_PointInRect. It takes a pointer to an SDL_Point and a pointer to an SDL_Rect as input, and returns an SDL_bool value indicating whether the point is within the rectangle. The function is declared as SDL_FORCE_INLINE, suggesting it's intended for inlining by the compiler.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PointInRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE SDL_bool SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRenderLogicalPresentation Syntax (C)\nDESCRIPTION: Retrieves the device-independent resolution and presentation mode for rendering. It requires a renderer, pointers to width and height integers, and a pointer to the presentation mode. The function returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderLogicalPresentation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderLogicalPresentation(SDL_Renderer *renderer, int *w, int *h, SDL_RendererLogicalPresentation *mode);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI in C\nDESCRIPTION: This code defines the SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI hint as a string literal. This hint is used to control whether SDL uses the HIDAPI driver for HORI licensed Steam controllers. The header file SDL3/SDL_hints.h must be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_STEAM_HORI \"SDL_JOYSTICK_HIDAPI_STEAM_HORI\"\n```\n\n----------------------------------------\n\nTITLE: Get Keyboard Focus in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetKeyboardFocus function. It takes no arguments and returns a pointer to the SDL_Window that currently has keyboard focus. The function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetKeyboardFocus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetKeyboardFocus(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph_Blended Syntax (C)\nDESCRIPTION: Defines the syntax for the TTF_RenderGlyph_Blended function. It takes a TTF_Font pointer, a Uint16 character, and an SDL_Color for the foreground color as input. It returns a pointer to an SDL_Surface, which is the rendered glyph, or NULL if an error occurred. Dependencies include SDL_ttf.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderGlyph_Blended.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Blended(TTF_Font *font,\n                Uint16 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_PEN_MOUSE_EVENTS Macro in C\nDESCRIPTION: This macro defines the SDL_HINT_PEN_MOUSE_EVENTS hint, used to control whether pen events generate synthetic mouse events.  Setting this hint to \"0\" disables the generation of mouse events from pen events, while setting it to \"1\" enables it (default). This hint is available since SDL 3.2.0 and can be set anytime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_PEN_MOUSE_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_PEN_MOUSE_EVENTS \"SDL_PEN_MOUSE_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: Get Touch Device ID in C\nDESCRIPTION: Retrieves the touch ID associated with a specific index. The index represents the position of the touch device in the system's list of touch devices. Returns an SDL_TouchID on success, or 0 if the index is invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTouchDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TouchID SDL_GetTouchDevice(int index);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Touchpads on Game Controller (SDL2, C)\nDESCRIPTION: This function retrieves the number of touchpads available on a specified SDL_GameController. It takes a pointer to an SDL_GameController as input and returns an integer representing the number of touchpads. The function is available from SDL 2.0.14 onwards.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetNumTouchpads.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerGetNumTouchpads(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Initializing HIDAPI with SDL_hid_init in C\nDESCRIPTION: This code snippet shows the syntax for initializing the HIDAPI library using the SDL_hid_init function. It takes no arguments and returns an integer indicating success or failure. A return value of 0 indicates success, while a negative value indicates failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_init(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUVertexStorageBuffers Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_BindGPUVertexStorageBuffers function in C. It takes a render pass, a starting slot, an array of storage buffers, and the number of buffers to bind as parameters. The function binds the specified storage buffers to the vertex shader for the given render pass.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUVertexStorageBuffers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUVertexStorageBuffers(\n    SDL_GPURenderPass *render_pass,\n    Uint32 first_slot,\n    SDL_GPUBuffer *const *storage_buffers,\n    Uint32 num_bindings);\n```\n\n----------------------------------------\n\nTITLE: Loading XPM Image from Array - C\nDESCRIPTION: This code snippet shows the syntax of the IMG_ReadXPMFromArray function from the SDL_image library. It takes a null-terminated array of strings (char **) as input, representing the XPM data, and returns an SDL_Surface pointer. The surface must be freed using SDL_FreeSurface() after use. The function returns NULL if there is an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_ReadXPMFromArray.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * IMG_ReadXPMFromArray(char **xpm);\n```\n\n----------------------------------------\n\nTITLE: SDL_WarpMouseInWindow Syntax in C\nDESCRIPTION: Defines the function signature for SDL_WarpMouseInWindow, which warps the mouse cursor to the specified coordinates (x, y) within the provided SDL_Window. The function takes a pointer to an SDL_Window and the x and y coordinates as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WarpMouseInWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_WarpMouseInWindow(SDL_Window * window,\n                           int x, int y);\n```\n\n----------------------------------------\n\nTITLE: Stop Haptic Rumble SDL3 (C)\nDESCRIPTION: Stops the simple rumble effect on the specified haptic device. The function takes a pointer to an SDL_Haptic struct as input and returns a boolean indicating success or failure. Use SDL_GetError() for more information on failures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StopHapticRumble.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_StopHapticRumble(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenURL Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_OpenURL function, which opens a URL in the system's default application for handling that URL type. It takes a const char* URL as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_OpenURL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_OpenURL(const char *url);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL macro. This macro is used as the name of the hint that controls whether to add the SDL_WINDOW_OPENGL flag when creating a window from a foreign window handle using SDL_CreateWindowFrom().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_FOREIGN_WINDOW_OPENGL \"SDL_VIDEO_FOREIGN_WINDOW_OPENGL\"\n```\n\n----------------------------------------\n\nTITLE: SDL_TryLockMutex Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_TryLockMutex function, which attempts to lock a specified mutex. It takes a pointer to an SDL_mutex as input and returns an integer indicating success, timeout, or error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TryLockMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_TryLockMutex(SDL_mutex * mutex);\n```\n\n----------------------------------------\n\nTITLE: SDL_CloseAudio Equivalent Call (C)\nDESCRIPTION: Demonstrates that SDL_CloseAudio is equivalent to calling SDL_CloseAudioDevice(1). This is relevant for code using the legacy SDL_OpenAudio function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CloseAudio.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_CloseAudioDevice(1);\n```\n\n----------------------------------------\n\nTITLE: Minimal CMakeLists.txt for SDL project\nDESCRIPTION: This CMake code provides a minimal `CMakeLists.txt` file for building a game linked against an SDL library that was built with MinGW-w64. It finds the SDL3 package, adds an executable, links the executable to the SDL3 library, and adds a post-build command to copy the SDL3 DLL to the build directory on Windows. Requires CMake.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/windows.md#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.15)\nproject(mygame)\n\nfind_package(SDL3 REQUIRED CONFIG COMPONENTS SDL3-shared)\n\nadd_executable(mygame WIN32 mygame.c)\ntarget_link_libraries(mygame PRIVATE SDL3::SDL3)\n\n# On Windows, copy SDL3.dll to the build directory\nif(WIN32)\n    add_custom_command(\n        TARGET mygame POST_BUILD\n        COMMAND \"${CMAKE_COMMAND}\" -E copy $<TARGET_FILE:SDL3::SDL3-shared> $<TARGET_FILE_DIR:mygame>\n        VERBATIM\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Haptic Gain with SDL_HapticSetGain in C\nDESCRIPTION: Sets the global gain of the specified haptic device using SDL_HapticSetGain. The function takes an SDL_Haptic pointer and an integer gain value (0-100) as input. It returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticSetGain.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticSetGain(SDL_Haptic * haptic, int gain);\n```\n\n----------------------------------------\n\nTITLE: Destroy Metal View in SDL3 (C)\nDESCRIPTION: Destroys an SDL_MetalView object. It takes the SDL_MetalView to be destroyed as a parameter. This should be called before SDL_DestroyWindow if SDL_Metal_CreateView was called after SDL_CreateWindow.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Metal_DestroyView.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Metal_DestroyView(SDL_MetalView view);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_IME_IMPLEMENTED_UI in C\nDESCRIPTION: This C macro defines the SDL_HINT_IME_IMPLEMENTED_UI hint string.  It is used to specify which IME UI elements the application can render, such as composition text or candidate lists. This hint should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_IME_IMPLEMENTED_UI.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_IME_IMPLEMENTED_UI \"SDL_IME_IMPLEMENTED_UI\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRendererProperties Syntax C\nDESCRIPTION: This code snippet shows the syntax for SDL_GetRendererProperties function in C. It takes an SDL_Renderer pointer as input and returns an SDL_PropertiesID. On failure, it returns 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRendererProperties.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetRendererProperties(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_SwapWindow Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GL_SwapWindow function. It takes a pointer to an SDL_Window as input and has no return value. This function is used to update a window with OpenGL rendering, typically in a double-buffered context. On macOS, it is important to ensure that the draw framebuffer is bound to 0 before swapping the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_SwapWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GL_SwapWindow(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Get Thread Name with SDL_GetThreadName in C\nDESCRIPTION: Retrieves the name of a thread created using SDL_CreateThread. It takes an SDL_Thread pointer as input and returns a const char pointer to a UTF-8 string representing the thread's name, or NULL if the thread has no name. This function requires the SDL3 library and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetThreadName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetThreadName(SDL_Thread *thread);\n```\n\n----------------------------------------\n\nTITLE: Locking an SDL Surface in C\nDESCRIPTION: The SDL_LockSurface function prepares an SDL_Surface for direct pixel access. It locks the surface, allowing direct read and write operations to the surface's pixels. The function requires a pointer to the SDL_Surface structure as input and returns a boolean value indicating success or failure. After accessing the surface, SDL_UnlockSurface must be called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_LockSurface(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAtomicPointer Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAtomicPointer function in C. It takes a pointer to a pointer as input and returns the current value of the pointed-to pointer. The function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAtomicPointer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_GetAtomicPointer(void **a);\n```\n\n----------------------------------------\n\nTITLE: Get Font DPI using TTF_GetFontDPI in C\nDESCRIPTION: Retrieves the target horizontal and vertical DPI of a TTF_Font. Requires a valid TTF_Font pointer and integer pointers to store the DPI values. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontDPI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetFontDPI(TTF_Font *font, int *hdpi, int *vdpi);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRenderTextureAddressMode Syntax (C)\nDESCRIPTION: Retrieves the texture addressing mode used for horizontal (u) and vertical (v) texture coordinates in SDL_RenderGeometry. It takes a renderer and pointers to SDL_TextureAddressMode variables to store the retrieved modes.  The u_mode and v_mode parameters can be NULL if the respective mode is not needed. Returns true on success, false on failure. Requires SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderTextureAddressMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderTextureAddressMode(SDL_Renderer *renderer, SDL_TextureAddressMode *u_mode, SDL_TextureAddressMode *v_mode);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED hint, used to configure the Home button LED behavior on Nintendo Switch Pro controllers connected through HIDAPI. The hint can be set to \"0\" to turn off the LED, \"1\" to turn it on, or a floating-point value between 0.0 and 1.0 to control the LED's brightness.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED \"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for iOS Device (arm64)\nDESCRIPTION: This command configures CMake to build SDL for an iOS device, using the latest installed SDK and targeting the arm64 architecture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=arm64\n```\n\n----------------------------------------\n\nTITLE: Free Allocated Memory: SDL_free in C\nDESCRIPTION: This snippet demonstrates the syntax of the SDL_free function in C, used to free memory previously allocated by SDL_malloc, SDL_calloc, or SDL_realloc. Passing a NULL pointer to this function results in no operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_free.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_free(void *mem);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUNICODE_Blended Function Signature in C\nDESCRIPTION: Defines the signature for the TTF_RenderUNICODE_Blended function, which renders UCS-2 text with alpha blending to a new ARGB surface. It takes a font, UCS-2 encoded text, and foreground color as input and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUNICODE_Blended.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUNICODE_Blended(TTF_Font *font,\n                const Uint16 *text, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Loading XPM from Memory Array\nDESCRIPTION: These functions load an XPM image from a memory array (char**). `IMG_ReadXPMFromArray` loads the XPM. `IMG_ReadXPMFromArrayToRGB888` loads to a specific color format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_ReadXPMFromArray(char **xpm);                                                                    // Load an XPM image from a memory array.\nSDL_Surface * IMG_ReadXPMFromArrayToRGB888(char **xpm);                                                            // Load an XPM image from a memory array.\n```\n\n----------------------------------------\n\nTITLE: SDL_GetProcessInput Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetProcessInput function, which retrieves the input stream (SDL_IOStream) of a given process (SDL_Process).  The function requires a pointer to an SDL_Process struct as input and returns a pointer to an SDL_IOStream struct.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetProcessInput.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStream * SDL_GetProcessInput(SDL_Process *process);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Type with SDL_SensorGetDeviceType in C\nDESCRIPTION: This snippet demonstrates how to use SDL_SensorGetDeviceType to retrieve the type of a sensor, given its device index. The device_index parameter specifies the sensor to query. The function returns an SDL_SensorType enum value, or SDL_SENSOR_INVALID if the device_index is invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetDeviceType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_SensorType SDL_SensorGetDeviceType(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Get UDP Peer Address in SDL_net (C)\nDESCRIPTION: Retrieves the IP address associated with a specific channel of a UDP socket. The function takes the UDP socket and channel number as input. Returns a pointer to the IPaddress structure if the channel is bound, NULL otherwise. If the channel is -1, it returns the primary IP port of the UDP socket.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_GetPeerAddress.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIPaddress * SDLNet_UDP_GetPeerAddress(UDPsocket sock, int channel);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Touch Devices SDL2 C\nDESCRIPTION: This function retrieves the number of registered touch devices. It's part of the SDL_touch.h header and requires SDL 2.0.0 or later. It returns an integer representing the number of touch devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumTouchDevices.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumTouchDevices(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUComputePass Definition in C\nDESCRIPTION: Defines an opaque handle `SDL_GPUComputePass` as a structure. This handle represents a compute pass within the SDL3 GPU API. The handle is transient and should not be stored after the compute pass ends.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUComputePass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUComputePass SDL_GPUComputePass;\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyProcess Syntax (C)\nDESCRIPTION: Destroys a previously created process object. This function releases the SDL object used to track the process. It requires a pointer to the SDL_Process object to be destroyed as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyProcess.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyProcess(SDL_Process *process);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_LINUX_JOYSTICK_CLASSIC C\nDESCRIPTION: Defines the SDL_HINT_LINUX_JOYSTICK_CLASSIC macro, which is a string that can be used to set the hint that controls which Linux joystick interface is used.  Setting the hint to \"0\" will use /dev/input/event* and \"1\" will use /dev/input/js*.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_LINUX_JOYSTICK_CLASSIC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_LINUX_JOYSTICK_CLASSIC \"SDL_LINUX_JOYSTICK_CLASSIC\"\n```\n\n----------------------------------------\n\nTITLE: SDL_QuitSubSystem Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_QuitSubSystem function. It takes a Uint32 flags parameter, specifying which SDL subsystems to shut down.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_QuitSubSystem.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_QuitSubSystem(Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_MACOS for macOS Compilation (C)\nDESCRIPTION: This code snippet defines the SDL_PLATFORM_MACOS preprocessor macro. It's set to 1 when compiling for macOS, allowing conditional compilation based on the target platform. The macro is available since SDL 3.2.0 and can be found in SDL3/SDL_platform_defines.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_MACOS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_MACOS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadBE32 Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_ReadBE32 function in C. This function reads 32 bits of big-endian data from an SDL_RWops stream. It takes a pointer to an SDL_RWops structure as input and returns a Uint32 value, representing the data read from the stream in native byte order. The function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ReadBE32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_ReadBE32(SDL_RWops * src);\n```\n\n----------------------------------------\n\nTITLE: SDL_DisplayMode Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_DisplayMode structure, which represents a display mode. The structure contains fields for pixel format (format), width (w), height (h), refresh rate (refresh_rate), and driver-specific data (driverdata). The driverdata field should be initialized to 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DisplayMode\n{\n    Uint32 format;              /**< pixel format */\n    int w;                      /**< width, in screen coordinates */\n    int h;                      /**< height, in screen coordinates */\n    int refresh_rate;           /**< refresh rate (or zero for unspecified) */\n    void *driverdata;           /**< driver-specific data, initialize to 0 */\n} SDL_DisplayMode;\n```\n\n----------------------------------------\n\nTITLE: Set iOS Event Pump State - C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_SetiOSEventPump function, which enables or disables the SDL event pump on Apple iOS. It takes a boolean value to specify whether the event pump should be enabled or disabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetiOSEventPump.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetiOSEventPump(bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Resuming a Channel Group SDL_mixer C\nDESCRIPTION: Resumes the playback of audio on a group of channels identified by a tag. The function takes an integer tag to identify the group to resume. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_ResumeGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIO_DEVICE_STREAM_NAME in C\nDESCRIPTION: This code snippet defines the SDL_HINT_AUDIO_DEVICE_STREAM_NAME macro. This macro is used to set a hint that specifies an application name for an audio device stream, allowing the OS to identify and manage audio from different applications.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUDIO_DEVICE_STREAM_NAME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DEVICE_STREAM_NAME \"SDL_AUDIO_DEVICE_STREAM_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Get HID Serial Number String in SDL\nDESCRIPTION: Retrieves the serial number string from a HID device using the SDL_hid_get_serial_number_string function. Requires a valid SDL_hid_device handle obtained from SDL_hid_open(). The function populates the provided wide character string buffer with the serial number. It returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_get_serial_number_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_serial_number_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED macro, which is used to set the hint that controls whether player LEDs are lit on Nintendo Switch controllers. It allows the user to specify if the LEDs should indicate the associated player.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GDKGetTaskQueue Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GDKGetTaskQueue function. It takes a pointer to an XTaskQueueHandle as input and returns an integer indicating success or failure. The outTaskQueue parameter will be populated with the task queue handle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GDKGetTaskQueue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GDKGetTaskQueue(XTaskQueueHandle * outTaskQueue);\n```\n\n----------------------------------------\n\nTITLE: SDL_SoftStretchLinear Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SoftStretchLinear function, which performs bilinear scaling between two SDL_Surface objects. It requires pointers to the source and destination surfaces, as well as source and destination rectangles, respectively. The function returns an integer, presumably indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SoftStretchLinear.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SoftStretchLinear(SDL_Surface * src,\n                    const SDL_Rect * srcrect,\n                    SDL_Surface * dst,\n                    const SDL_Rect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: Common Pixel Formats and Masks\nDESCRIPTION: This code snippet shows various mask (R, G, B, A) combinations and their corresponding pixel formats in SDL.  These formats are commonly used when working with surfaces and textures and are compatible with SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_42\n\nLANGUAGE: c\nCODE:\n```\n// Various mask (R, G, B, A) and their corresponding format:\n0xFF000000 0x00FF0000 0x0000FF00 0x000000FF => SDL_PIXELFORMAT_RGBA8888\n0x00FF0000 0x0000FF00 0x000000FF 0xFF000000 => SDL_PIXELFORMAT_ARGB8888\n0x0000FF00 0x00FF0000 0xFF000000 0x000000FF => SDL_PIXELFORMAT_BGRA8888\n0x000000FF 0x0000FF00 0x00FF0000 0xFF000000 => SDL_PIXELFORMAT_ABGR8888\n0x0000F800 0x000007E0 0x0000001F 0x00000000 => SDL_PIXELFORMAT_RGB565\n```\n\n----------------------------------------\n\nTITLE: SDL_atomic_t Structure Definition in C\nDESCRIPTION: Defines the SDL_atomic_t structure, which holds an atomic integer value. The structure is used to prevent accidental numeric operations and ensure atomic access to the integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_atomic_t.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_atomic_t {\n    int value;\n} SDL_atomic_t;\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop End Time - C\nDESCRIPTION: Retrieves the loop end time position of a music stream, in seconds. It takes a pointer to a Mix_Music object as input and returns a double representing the loop end time. If the feature is not used or supported, it returns -1.0. If NULL is passed, returns the duration of the currently playing music.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicLoopEndTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicLoopEndTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Loading AVIF Image from SDL_IOStream in C\nDESCRIPTION: Loads an AVIF image from an SDL_IOStream. This function skips file format detection, assuming the input is a valid AVIF image. It returns an SDL_Surface pointer on success, or NULL on failure. Requires SDL_image 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadAVIF_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadAVIF_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_RTF Version Check Macro Definition in C\nDESCRIPTION: This macro checks if the SDL_rtf library version is at least X.Y.Z. It uses the SDL_RTF_MAJOR_VERSION, SDL_RTF_MINOR_VERSION, and SDL_RTF_MICRO_VERSION macros to perform the version comparison. This macro allows conditional compilation based on the SDL_rtf version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/SDL_RTF_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RTF_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_RTF_MAJOR_VERSION >= X) && \\\n     (SDL_RTF_MAJOR_VERSION > X || SDL_RTF_MINOR_VERSION >= Y) && \\\n     (SDL_RTF_MAJOR_VERSION > X || SDL_RTF_MINOR_VERSION > Y || SDL_RTF_MICRO_VERSION >= Z))\n```\n\n----------------------------------------\n\nTITLE: U16 to S16 Audio Conversion\nDESCRIPTION: This C code snippet demonstrates an in-place conversion from unsigned 16-bit (Uint16) audio data to signed 16-bit (Sint16) audio data.  It iterates through the buffer, XORing each unsigned 16-bit value with 0x8000 to effectively convert it to a signed representation. The buffer size remains unchanged after the conversion.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\n/* this converts the buffer in-place. The buffer size does not change. */\nSint16 *audio_ui16_to_si16(Uint16 *buffer, const size_t num_samples)\n{\n    size_t i;\n    const Uint16 *src = buffer;\n    Sint16 *dst = (Sint16 *) buffer;\n\n    for (i = 0; i < num_samples; i++) {\n        dst[i] = (Sint16) (src[i] ^ 0x8000);\n    }\n\n    return dst;\n}\n```\n\n----------------------------------------\n\nTITLE: Load GIF animation from SDL_IOStream in C\nDESCRIPTION: This function loads a GIF animation directly from an SDL_IOStream. It takes an SDL_IOStream pointer and returns a pointer to an IMG_Animation structure, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadGIFAnimation_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 hint as a string literal. This hint controls whether SDL uses the HIDAPI driver for Xbox 360 controllers. It relies on SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360   \"SDL_JOYSTICK_HIDAPI_XBOX_360\"\n```\n\n----------------------------------------\n\nTITLE: SDL_MIX_MAXVOLUME Macro Definition in C\nDESCRIPTION: Defines the maximum volume allowed for audio mixing in SDL using the SDL_MixAudio and SDL_MixAudioFormat functions. This macro is a constant value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MIX_MAXVOLUME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIX_MAXVOLUME 128\n```\n\n----------------------------------------\n\nTITLE: Get Current Renderer Viewport in C\nDESCRIPTION: This code snippet shows the syntax for retrieving the current viewport of an SDL renderer. It takes an SDL_Renderer pointer as input and populates an SDL_Rect structure with the viewport dimensions. The function does not return any value; it modifies the provided SDL_Rect directly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetViewport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RenderGetViewport(SDL_Renderer * renderer,\n                           SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: Handling Modified Keycodes in SDL3 (C)\nDESCRIPTION: This snippet shows how to handle modified keycodes, considering modifiers like Shift, Ctrl, and Alt. It uses SDL_GetKeyFromScancode to get the keycode based on the scancode and modifier state. The example checks if the pressed key is '$', considering the keyboard layout. Dependencies include SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/BestKeyboardPractices.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nbool quit_the_app = false;\nwhile (!quit_the_app) {\n    SDL_Event e;\n    while (SDL_PollEvent(&e)) {\n        /* user has pressed a key? */\n        if (e.type == SDL_EVENT_KEY_DOWN) {\n            /* Was the pressed key '$', possibly generated by Shift+4 on a US keyboard or the '$' key on the French keyboard? */\n            SDL_Keycode keycode = SDL_GetKeyFromScancode(e.key.scancode, e.key.mod, false);\n            if (keycode == '$') {\n                /* Show me the money! */\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Define SDL Hint Macro in C\nDESCRIPTION: This code defines the SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL macro, which is used to specify a custom small icon resource ID for Windows applications. It is defined as a string literal.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL \"SDL_WINDOWS_INTRESOURCE_ICON_SMALL\"\n```\n\n----------------------------------------\n\nTITLE: Destroying a Vulkan Surface with SDL_Vulkan_DestroySurface in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_Vulkan_DestroySurface function, which is used to destroy a Vulkan rendering surface that was previously created for an SDL window. The function takes the Vulkan instance, the surface handle, and an optional allocator as parameters. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_DestroySurface.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_Vulkan_DestroySurface(VkInstance instance,\n                           VkSurfaceKHR surface,\n                           const struct VkAllocationCallbacks *allocator);\n```\n\n----------------------------------------\n\nTITLE: Playing Audio (Chunks and Music)\nDESCRIPTION: These functions play audio chunks and music objects. You can specify the channel, chunk/music object, number of loops, and fade-in duration.  Mix_PlayChannelTimed allows limiting playback duration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nint Mix_PlayChannel(int channel, Mix_Chunk *chunk, int loops);                            // Play an audio chunk on a specific channel.\nint Mix_PlayChannelTimed(int channel, Mix_Chunk *chunk, int loops, int ticks);            // Play an audio chunk on a specific channel for a maximum time.\nbool Mix_PlayMusic(Mix_Music *music, int loops);                                          // Play a new music object.\nbool Mix_FadeInMusic(Mix_Music *music, int loops, int ms);                                // Play a new music object, fading in the audio.\nbool Mix_FadeInMusicPos(Mix_Music *music, int loops, int ms, double position);            // Play a new music object, fading in the audio, from a starting position.\nint Mix_FadeInChannel(int channel, Mix_Chunk *chunk, int loops, int ms);                  // Play an audio chunk on a specific channel, fading in the audio.\nint Mix_FadeInChannelTimed(int channel, Mix_Chunk *chunk, int loops, int ms, int ticks);  // Play an audio chunk on a specific channel, fading in the audio, for a maximum time.\n```\n\n----------------------------------------\n\nTITLE: Get Audio Device Status with Device ID 1 (C)\nDESCRIPTION: Shows the equivalent function call using SDL_GetAudioDeviceStatus with the device ID set to 1. This highlights that SDL_GetAudioStatus is essentially a wrapper for SDL_GetAudioDeviceStatus when using the default audio device opened by the legacy SDL_OpenAudio function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAudioStatus.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_GetAudioDeviceStatus(1);\n```\n\n----------------------------------------\n\nTITLE: Get Global SDL Properties in C\nDESCRIPTION: Retrieves the global SDL properties. This function takes no arguments and returns an SDL_PropertiesID representing the global properties.  Call SDL_GetError() for more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGlobalProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetGlobalProperties(void);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeOutMusic Syntax (C)\nDESCRIPTION: Defines the syntax for the Mix_FadeOutMusic function in C. This function fades out the currently playing music over a specified duration and then halts it. The `ms` parameter determines the fade-out duration in milliseconds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadeOutMusic.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_FadeOutMusic(int ms);\n```\n\n----------------------------------------\n\nTITLE: Example of Using SDL_HapticDirection in C\nDESCRIPTION: Illustrates how to use the `SDL_HapticDirection` structure to define force coming from the south using cartesian, polar and spherical encoding. It initializes the `type` member to specify the encoding, and sets the `dir` array according to the chosen encoding.  This example showcases how different encoding methods represent the same directional force.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticDirection.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n SDL_HapticDirection direction;\n\n // Cartesian directions\n direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.\n direction.dir[0] = 0; // X position\n direction.dir[1] = 1; // Y position\n // Assuming the device has 2 axes, we don't need to specify third parameter.\n\n // Polar directions\n direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.\n direction.dir[0] = 18000; // Polar only uses first parameter\n\n // Spherical coordinates\n direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding\n direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenStorage Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_OpenStorage function in C. This function is used to open a storage container using a client-provided storage interface. It takes an SDL_StorageInterface pointer and a userdata pointer as input, and returns an SDL_Storage pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenStorage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Storage * SDL_OpenStorage(const SDL_StorageInterface *iface, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_CACHELINE_SIZE in C\nDESCRIPTION: This code snippet defines the SDL_CACHELINE_SIZE macro as 128. This value is a guess for the cacheline size used for padding. It defaults to 128 because some processors use this value, and choosing the larger value is considered generally safer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CACHELINE_SIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_CACHELINE_SIZE  128\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRevisionNumber Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetRevisionNumber function. This function takes no arguments and returns an integer, which always returns zero in modern SDL releases.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRevisionNumber.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetRevisionNumber(void);\n```\n\n----------------------------------------\n\nTITLE: Get Desktop Display Mode in SDL3 (C)\nDESCRIPTION: Retrieves the desktop display mode of a specific display. The function takes a display ID as input and returns a pointer to an SDL_DisplayMode structure, or NULL if an error occurs. This function is thread-safe only when called from the main thread and provides the native display mode, not the current mode if SDL is running fullscreen with a changed resolution.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDesktopDisplayMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_DisplayMode * SDL_GetDesktopDisplayMode(SDL_DisplayID displayID);\n```\n\n----------------------------------------\n\nTITLE: Compare SDLNet Addresses in C\nDESCRIPTION: Compares two SDLNet_Address objects, 'a' and 'b', and returns an integer indicating their relative order. Returns -1 if 'a' is less than 'b', 1 if 'a' is greater than 'b', and 0 if they are equal. This function is useful for sorting addresses using qsort or SDL_qsort. It is part of the SDL_net library and requires SDL_Net 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_CompareAddresses.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_CompareAddresses(const SDLNet_Address *a, const SDLNet_Address *b);\n```\n\n----------------------------------------\n\nTITLE: SDL_aligned_free Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_aligned_free function, which takes a pointer to memory allocated by SDL_aligned_alloc as input and frees it. If the pointer is NULL, the function does nothing. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_aligned_free.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_aligned_free(void *mem);\n```\n\n----------------------------------------\n\nTITLE: Rumble Joystick Triggers in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RumbleJoystickTriggers function in C. It takes a joystick pointer, left and right rumble intensities (0-0xFFFF), and a duration in milliseconds as input. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RumbleJoystickTriggers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RumbleJoystickTriggers(SDL_Joystick *joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetStringForAxis Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerGetStringForAxis function. It takes an SDL_GameControllerAxis enum as input and returns a const char* representing the corresponding axis string. The returned string should not be freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetStringForAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogMessageV Function Definition in C\nDESCRIPTION: Defines the SDL_LogMessageV function, which allows logging messages with a specified category, priority, and a variable argument list for formatting. The function takes the category (int), priority (SDL_LogPriority), format string (const char *), and a variable argument list (va_list) as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogMessageV.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_LogMessageV(int category,\n                 SDL_LogPriority priority,\n                 const char *fmt, va_list ap);\n```\n\n----------------------------------------\n\nTITLE: Mix_HaltMusic Syntax (C)\nDESCRIPTION: Defines the syntax for the Mix_HaltMusic function, which stops the current music stream playing in SDL_mixer. This function takes no arguments and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_HaltMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HaltMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Player Index by ID - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetJoystickPlayerIndexForID function in C. It takes an SDL_JoystickID as input, which represents the instance ID of the joystick, and returns an integer representing the player index, or -1 if the index is not available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickPlayerIndexForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetJoystickPlayerIndexForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_UploadToGPUTexture Syntax in C\nDESCRIPTION: Defines the syntax for SDL_UploadToGPUTexture, used to upload data from a transfer buffer to a texture. The function takes a copy pass, source transfer buffer info, destination texture region, and a boolean indicating whether to cycle the texture or overwrite the data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UploadToGPUTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UploadToGPUTexture(\n    SDL_GPUCopyPass *copy_pass,\n    const SDL_GPUTextureTransferInfo *source,\n    const SDL_GPUTextureRegion *destination,\n    bool cycle);\n\n```\n\n----------------------------------------\n\nTITLE: Set VSync for SDL Renderer in C\nDESCRIPTION: This C code snippet shows the syntax for using SDL_RenderSetVSync to toggle VSync for a given SDL_Renderer. It takes a renderer pointer and an integer to specify whether VSync should be enabled (1) or disabled (0). Returns 0 on success, non-zero on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderSetVSync.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderSetVSync(SDL_Renderer* renderer, int vsync);\n```\n\n----------------------------------------\n\nTITLE: snprintf Example with SDL_OUT_Z_CAP in C\nDESCRIPTION: Illustrates the use of SDL_OUT_Z_CAP with the `snprintf` function. It annotates the `text` parameter to indicate that it's a null-terminated C string with a size of `maxlen` bytes and is written to by the function. This allows static analysis tools to verify correct buffer usage and potentially warn against overflows.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OUT_Z_CAP.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint snprintf(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Thread in C\nDESCRIPTION: This code snippet shows the definition of the SDL_Thread structure. It's an opaque data type, so its internal structure is not exposed to the user. It is used to represent a thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Thread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Thread SDL_Thread;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_DAMPER Macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_DAMPER macro as a bitmask that indicates support for the damper haptic effect. The damper effect simulates dampening and is based on axes velocity. This macro is part of the SDL3 haptic API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_DAMPER.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HAPTIC_DAMPER       (1u<<8)\n```\n\n----------------------------------------\n\nTITLE: Check Clipboard for Text Availability in SDL (C)\nDESCRIPTION: This code snippet demonstrates the syntax for using SDL_HasClipboardText in C to check if the clipboard contains text.  It requires the SDL library to be included. The function returns SDL_TRUE if the clipboard has text and SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasClipboardText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasClipboardText(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteU32LE Function Definition in C\nDESCRIPTION: This code snippet shows the definition of the SDL_WriteU32LE function. It takes an SDL_IOStream pointer and a Uint32 value as input, and writes the value to the stream in little-endian format. It returns true on success, and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteU32LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteU32LE(SDL_IOStream *dst, Uint32 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateHapticEffect Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_UpdateHapticEffect function. It takes a SDL_Haptic pointer, a SDL_HapticEffectID, and a pointer to SDL_HapticEffect structure as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateHapticEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_UpdateHapticEffect(SDL_Haptic *haptic, SDL_HapticEffectID effect, const SDL_HapticEffect *data);\n```\n\n----------------------------------------\n\nTITLE: Create GPU Text Engine C\nDESCRIPTION: This function creates a text engine for drawing text with the SDL GPU API. It takes an SDL_GPUDevice pointer as input and returns a TTF_TextEngine pointer, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_76\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateGPUTextEngine(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_RELEASE_SHARED Macro in C\nDESCRIPTION: Defines the SDL_RELEASE_SHARED macro as a wrapper around the Clang thread safety annotation attribute release_shared_capability(x). This macro is used to help with thread safety analysis. It requires the Clang compiler and SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RELEASE_SHARED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RELEASE_SHARED(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_shared_capability(x))\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_DRIVER C\nDESCRIPTION: This defines the SDL_HINT_VIDEO_DRIVER macro, which is a string literal representing the name of the video driver hint. This hint is used to specify which video backend SDL should use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_DRIVER \"SDL_VIDEO_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowGrab Syntax in C\nDESCRIPTION: Retrieves the input grab mode of the specified SDL window.  It takes a pointer to an SDL_Window as input and returns SDL_TRUE if input is grabbed, SDL_FALSE otherwise.  This function is available since SDL 2.0.0 and depends on SDL_video.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GetWindowGrab(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurfaceScaled Syntax in C\nDESCRIPTION: Defines the syntax for SDL_BlitSurfaceScaled function in C. This function performs a scaled blit to a destination surface, which may be of a different format. It takes source and destination surfaces, rectangles for source and destination, and a scaling mode as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitSurfaceScaled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_BlitSurfaceScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HitTestResult Enum in C\nDESCRIPTION: This code snippet defines the `SDL_HitTestResult` enum, which specifies how different regions of a window should behave when interacted with by the user. It includes options for normal regions, draggable regions, and resizable border regions on all sides and corners of the window. This enum is used in conjunction with the `SDL_HitTest` callback function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HitTestResult.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_HitTestResult\n{\n    SDL_HITTEST_NORMAL,             /**< Region is normal. No special properties. */\n    SDL_HITTEST_DRAGGABLE,          /**< Region can drag entire window. */\n    SDL_HITTEST_RESIZE_TOPLEFT,     /**< Region is the resizable top-left corner border. */\n    SDL_HITTEST_RESIZE_TOP,         /**< Region is the resizable top border. */\n    SDL_HITTEST_RESIZE_TOPRIGHT,    /**< Region is the resizable top-right corner border. */\n    SDL_HITTEST_RESIZE_RIGHT,       /**< Region is the resizable right border. */\n    SDL_HITTEST_RESIZE_BOTTOMRIGHT, /**< Region is the resizable bottom-right corner border. */\n    SDL_HITTEST_RESIZE_BOTTOM,      /**< Region is the resizable bottom border. */\n    SDL_HITTEST_RESIZE_BOTTOMLEFT,  /**< Region is the resizable bottom-left corner border. */\n    SDL_HITTEST_RESIZE_LEFT         /**< Region is the resizable left border. */\n} SDL_HitTestResult;\n```\n\n----------------------------------------\n\nTITLE: Set Text Script C\nDESCRIPTION: This function sets the script to be used for text shaping in a text object. It takes a TTF_Text pointer and a Uint32 representing the script. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_90\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextScript(TTF_Text *text, Uint32 script);\n```\n\n----------------------------------------\n\nTITLE: Get Clipping Rectangle in SDL2 (C)\nDESCRIPTION: Retrieves the clipping rectangle of the specified SDL_Surface. The clipping rectangle defines the area within the surface that will be drawn to when the surface is the destination of a blit.  The provided SDL_Rect structure will be populated with the surface's clipping rectangle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetClipRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetClipRect(SDL_Surface * surface,\n                     SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReleaseWindowFromGPUDevice Syntax (C)\nDESCRIPTION: This C code snippet shows the syntax for the `SDL_ReleaseWindowFromGPUDevice` function. It takes an `SDL_GPUDevice` pointer and an `SDL_Window` pointer as input. It is used to release a claimed window from the specified GPU device, destroying the associated swapchain.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseWindowFromGPUDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseWindowFromGPUDevice(\n    SDL_GPUDevice *device,\n    SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteU64LE Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_WriteU64LE function, which writes a 64-bit unsigned integer to an SDL_IOStream in little-endian format. The function takes a pointer to an SDL_IOStream and a Uint64 value as input, returning a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteU64LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteU64LE(SDL_IOStream *dst, Uint64 value);\n```\n\n----------------------------------------\n\nTITLE: Destroy SDL Renderer in C\nDESCRIPTION: Destroys the rendering context for a window and frees all associated textures. The renderer parameter is a pointer to the rendering context that needs to be destroyed. This function should be called before destroying the associated window and only on the main thread. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyRenderer.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_DestroyRenderer(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Defining PS4 Report Interval Hint in SDL\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL hint as a string literal. This hint is used to configure the update rate of the PS4 controller over Bluetooth when using the HIDAPI driver in SDL3. It defaults to 4ms but can be set to \"1\", \"2\", or \"4\" for different update rates.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL \"SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL\"\n```\n\n----------------------------------------\n\nTITLE: Setting Key Modifier State with SDL_SetModState in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetModState function, which sets the current key modifier state for the keyboard. It takes an SDL_Keymod value as input, representing the desired modifier state. This function affects the flags reported by SDL and does not alter the actual keyboard state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetModState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetModState(SDL_Keymod modstate);\n```\n\n----------------------------------------\n\nTITLE: Get Initial Joystick Axis State in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickGetAxisInitialState function, used to retrieve the initial state of a joystick axis. It takes a joystick pointer, the axis index, and a pointer to a Sint16 where the initial state will be stored. It returns SDL_TRUE if the axis has an initial value, and SDL_FALSE otherwise. The state value ranges from -32768 to 32767.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetAxisInitialState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_JoystickGetAxisInitialState(SDL_Joystick *joystick,\n                           int axis, Sint16 *state);\n```\n\n----------------------------------------\n\nTITLE: TTF_FontIsScalable Function\nDESCRIPTION: Queries whether a font is scalable or not. Returns a boolean value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_38\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_FontIsScalable(const TTF_Font *font);                                                                                             // Query whether a font is scalable or not.\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLERCONFIG_FILE in C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLERCONFIG_FILE macro, which represents the hint name used to specify the gamepad configuration file path. This hint should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GAMECONTROLLERCONFIG_FILE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLERCONFIG_FILE \"SDL_GAMECONTROLLERCONFIG_FILE\"\n```\n\n----------------------------------------\n\nTITLE: Cloning SDL Repository via Git\nDESCRIPTION: This command clones the SDL repository from GitHub using Git. This allows users to access the latest development version of SDL, including up-to-the-minute fixes and enhancements. Requires Git to be installed and configured.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/git.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit clone https://github.com/libsdl-org/SDL\n```\n\n----------------------------------------\n\nTITLE: SDL_VERSION_ATLEAST Macro Definition in C\nDESCRIPTION: This macro checks if the compiled SDL version is at least the version specified by the X, Y, and Z parameters. It compares the global SDL_VERSION against SDL_VERSIONNUM(X, Y, Z). It requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VERSION_ATLEAST(X, Y, Z) \\\n    (SDL_VERSION >= SDL_VERSIONNUM(X, Y, Z))\n```\n\n----------------------------------------\n\nTITLE: TTF_GetGlyphScript Syntax in C\nDESCRIPTION: Retrieves the ISO 15924 script code for a given Unicode character. It takes a 32-bit codepoint as input and returns a Uint32 representing the script code or 0 on failure. The function is thread-safe and available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetGlyphScript.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetGlyphScript(Uint32 ch);\n```\n\n----------------------------------------\n\nTITLE: Playing Music with SDL_mixer in C\nDESCRIPTION: Plays a new music object using SDL_mixer. The function takes a Mix_Music pointer representing the music to play and an integer representing the number of loops. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_PlayMusic.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_PlayMusic(Mix_Music *music, int loops);\n```\n\n----------------------------------------\n\nTITLE: Reserve Channels with Mix_ReserveChannels in SDL_mixer (C)\nDESCRIPTION: Reserves a specified number of audio channels in SDL_mixer, preventing them from being automatically used by Mix_PlayChannel when a channel value of -1 is provided. The 'num' parameter specifies the number of channels to reserve, starting from index zero. The return value indicates the number of reserved channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_ReserveChannels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_ReserveChannels(int num);\n```\n\n----------------------------------------\n\nTITLE: Get Text Properties using TTF_GetTextProperties in C\nDESCRIPTION: This function retrieves the properties associated with a TTF_Text object. It takes a pointer to the TTF_Text object as input and returns an SDL_PropertiesID. A return value of 0 indicates failure, and SDL_GetError() can be called to get more information. The function is thread-safe and should be called on the thread that created the text object. It's available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID TTF_GetTextProperties(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_RemoveStoragePath Syntax in C\nDESCRIPTION: Defines the syntax for SDL_RemoveStoragePath. It takes an SDL_Storage pointer and a path string as input.  It returns a boolean indicating success or failure, and SDL_GetError() can provide more information on failures. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RemoveStoragePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RemoveStoragePath(SDL_Storage *storage, const char *path);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeOutChannel Syntax in C\nDESCRIPTION: Fades out a channel and halts it after a specified time in milliseconds. The 'which' parameter specifies the channel to fade out, and 'ms' is the duration of the fade in milliseconds. Returns the number of channels scheduled to fade.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadeOutChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeOutChannel(int which, int ms);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogMessage Function Signature in C\nDESCRIPTION: Defines the function signature for SDL_LogMessage. This function logs a message with the specified category and priority. It uses a printf-style format string for constructing the log message.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogMessage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogMessage(int category,\n                    SDL_LogPriority priority,\n                    const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Check if Application is Running on Android TV in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_IsAndroidTV function, which is used to determine if an application is running on an Android TV device. It requires the SDL_system.h header file to be included. The function takes no arguments and returns an SDL_bool value indicating whether the application is running on Android TV.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsAndroidTV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IsAndroidTV(void);\n```\n\n----------------------------------------\n\nTITLE: Register Win32 Window Class with SDL in C\nDESCRIPTION: This function registers a Win32 window class for SDL's use. It allows the specification of the window class name, style, and instance handle. It is generally called by SDL during video subsystem initialization and rarely needs to be called directly by applications.  Multiple calls must be paired with SDL_UnregisterApp.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RegisterApp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RegisterApp(const char *name, Uint32 style, void *hInst);\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL for Native Client (NaCl)\nDESCRIPTION: This command configures SDL for the PNaCl toolchain, specifying the host and installation prefix. It sets up the build environment for compiling SDL to run within the Native Client environment.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/nacl.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconfigure --host=pnacl --prefix some/install/destination\n```\n\n----------------------------------------\n\nTITLE: SDL_DownloadFromGPUBuffer Syntax in C\nDESCRIPTION: Copies data from a buffer to a transfer buffer on the GPU timeline using the SDL_DownloadFromGPUBuffer function. Requires an SDL_GPUCopyPass, a source SDL_GPUBufferRegion, and a destination SDL_GPUTransferBufferLocation. The data is not guaranteed to be copied until the command buffer fence is signaled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DownloadFromGPUBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DownloadFromGPUBuffer(\n    SDL_GPUCopyPass *copy_pass,\n    const SDL_GPUBufferRegion *source,\n    const SDL_GPUTransferBufferLocation *destination);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Type using SDL_SensorGetType in C\nDESCRIPTION: This snippet demonstrates how to retrieve the type of an SDL_Sensor using the SDL_SensorGetType function. The function takes a pointer to an SDL_Sensor object as input and returns an SDL_SensorType enumeration value. It requires the SDL2 library and SDL_sensor.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_SensorType SDL_SensorGetType(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: TTF_SizeUNICODE Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_SizeUNICODE function, which calculates the dimensions of a rendered string of UCS-2 text using the specified font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SizeUNICODE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_SizeUNICODE(TTF_Font *font, const Uint16 *text, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_TryWaitSemaphore Syntax in C\nDESCRIPTION: Shows the function signature for SDL_TryWaitSemaphore in C, which takes a semaphore pointer as input and returns a boolean indicating success or failure without blocking. The function is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TryWaitSemaphore.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_TryWaitSemaphore(SDL_Semaphore *sem);\n```\n\n----------------------------------------\n\nTITLE: Destroying a Text Engine with TTF_DestroyRendererTextEngine in C\nDESCRIPTION: Destroys a text engine that was previously created using TTF_CreateRendererTextEngine. This function is part of the SDL_ttf library and requires the TTF_TextEngine object to be passed as a parameter. All text created by the engine must be destroyed before calling this function. This function should be called on the thread that created the engine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_DestroyRendererTextEngine.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_DestroyRendererTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: SDL_logf Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_logf function in C, which computes the natural logarithm of a floating-point number. It takes a single float parameter, 'x', which must be greater than 0, and returns the natural logarithm of 'x' as a float.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_logf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_logf(float x);\n```\n\n----------------------------------------\n\nTITLE: Using SDL_FALLTHROUGH in a switch statement in C\nDESCRIPTION: This code demonstrates how to use the SDL_FALLTHROUGH macro within a switch statement in C. The macro indicates that the fallthrough to the next case is intentional, preventing the compiler from issuing a warning.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FALLTHROUGH.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nswitch (x) {\n    case 1:\n        DoSomethingOnlyForOne();\n        SDL_FALLTHROUGH;  // tell the compiler this was intentional.\n    case 2:\n        DoSomethingForOneAndTwo();\n        break;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_LoadLibrary Syntax in C\nDESCRIPTION: Dynamically loads an OpenGL library specified by the path. If path is NULL, the default OpenGL library is loaded. This function should be called after initializing the video driver and before creating any OpenGL windows. Returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_LoadLibrary.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GL_LoadLibrary(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Check for NEON Support with SDL_HasNEON in C\nDESCRIPTION: This C code snippet demonstrates how to use the SDL_HasNEON function to determine if the CPU supports ARM NEON (SIMD) instructions. The function returns a boolean value indicating the presence of NEON support. It is part of the SDL3 library and requires inclusion of the SDL3/SDL_cpuinfo.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasNEON.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasNEON(void);\n```\n\n----------------------------------------\n\nTITLE: Locking Joysticks for Multi-Threaded Access in SDL2 (C)\nDESCRIPTION: This code snippet demonstrates the syntax of the `SDL_LockJoysticks` function. It's used to ensure thread safety when accessing joystick API functions in a multi-threaded application using SDL2. No parameters are needed. The purpose is to protect the joystick API from concurrent access.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockJoysticks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockJoysticks(void);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad USB Product ID using SDL_GetGamepadProductForID in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetGamepadProductForID to retrieve the USB product ID of a gamepad. It takes an SDL_JoystickID as input and returns a Uint16 representing the product ID, or 0 if the ID is unavailable or the index is invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadProductForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetGamepadProductForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_SeekIO Syntax in C\nDESCRIPTION: Shows the syntax for the SDL_SeekIO function. This function allows seeking within an SDL_IOStream data stream. It takes an SDL_IOStream context, an offset, and a 'whence' value to determine the seek origin.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SeekIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint64 SDL_SeekIO(SDL_IOStream *context, Sint64 offset, SDL_IOWhence whence);\n```\n\n----------------------------------------\n\nTITLE: SDL_randf_r Function Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_randf_r function in C. It takes a pointer to a 64-bit unsigned integer as input, representing the random number state, and returns a float.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_randf_r.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_randf_r(Uint64 *state);\n```\n\n----------------------------------------\n\nTITLE: Loading GIF Animation from IO Stream in C\nDESCRIPTION: Loads a GIF animation directly from an SDL_IOStream.  This function bypasses SDL_image's file format detection and assumes the input is a GIF. It returns a pointer to the newly created IMG_Animation structure, or NULL on error. Requires SDL_image library and an initialized SDL_IOStream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadGIFAnimation_IO.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nIMG_Animation * IMG_LoadGIFAnimation_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_TOUCH_MOUSE_EVENTS in C\nDESCRIPTION: This C macro defines the SDL_HINT_TOUCH_MOUSE_EVENTS hint, which controls if touch events should generate synthetic mouse events. The hint's value can be set to \"0\" to disable mouse events from touch, or \"1\" to enable them (default).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_TOUCH_MOUSE_EVENTS.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_TOUCH_MOUSE_EVENTS \"SDL_TOUCH_MOUSE_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: Check Joystick Haptic Support - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_IsJoystickHaptic function. It checks if a provided SDL_Joystick pointer has haptic capabilities and returns a boolean value accordingly. The function is available since SDL 3.2.0 and requires an initialized SDL environment and a valid joystick pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsJoystickHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsJoystickHaptic(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DisplayEvent Structure in C\nDESCRIPTION: This code snippet defines the SDL_DisplayEvent structure, which is used to store information about display events in SDL3. It includes fields for the event type, timestamp, display ID, and event-dependent data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DisplayEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DisplayEvent\n{\n    SDL_EventType type; /**< SDL_DISPLAYEVENT_* */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_DisplayID displayID;/**< The associated display */\n    Sint32 data1;       /**< event dependent data */\n    Sint32 data2;       /**< event dependent data */\n} SDL_DisplayEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateWindowSurface Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UpdateWindowSurface function in C, which copies the window surface to the screen. It takes an SDL_Window pointer as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateWindowSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_UpdateWindowSurface(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Loading an animation using IMG_LoadAnimation in C\nDESCRIPTION: This snippet shows how to load an animation from a file using the IMG_LoadAnimation function in SDL_image. The function takes the file path as input and returns a pointer to an IMG_Animation structure. It's crucial to check for NULL return values to handle errors and to free the allocated memory with IMG_FreeAnimation when the animation is no longer needed to prevent memory leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadAnimation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimation(const char *file);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateCursor Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateCursor function, which creates a new cursor from provided bitmap data and mask. It takes the data, mask, width, height, hot spot x, and hot spot y as parameters and returns a pointer to the created SDL_Cursor.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor * SDL_CreateCursor(const Uint8 *data,\n                         const Uint8 *mask,\n                         int w, int h, int hot_x,\n                         int hot_y);\n```\n\n----------------------------------------\n\nTITLE: Closing a Storage Container in SDL3 (C)\nDESCRIPTION: Closes and frees a storage container using SDL_CloseStorage. The function takes a pointer to an SDL_Storage object as input and returns a boolean indicating success or failure. Even if it fails, the storage is freed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseStorage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CloseStorage(SDL_Storage *storage);\n```\n\n----------------------------------------\n\nTITLE: Direct Image Loading Functions in SDL3_image\nDESCRIPTION: Functions to directly load specific image formats from an SDL_IOStream into an SDL_Surface. These functions assume the input stream contains data for the specified image format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadAVIF_IO(SDL_IOStream *src);                                                                  // Load a AVIF image directly.\nSDL_Surface * IMG_LoadICO_IO(SDL_IOStream *src);                                                                   // Load a ICO image directly.\nSDL_Surface * IMG_LoadCUR_IO(SDL_IOStream *src);                                                                   // Load a CUR image directly.\nSDL_Surface * IMG_LoadBMP_IO(SDL_IOStream *src);                                                                   // Load a BMP image directly.\nSDL_Surface * IMG_LoadGIF_IO(SDL_IOStream *src);                                                                   // Load a GIF image directly.\nSDL_Surface * IMG_LoadJPG_IO(SDL_IOStream *src);                                                                   // Load a JPG image directly.\nSDL_Surface * IMG_LoadJXL_IO(SDL_IOStream *src);                                                                   // Load a JXL image directly.\nSDL_Surface * IMG_LoadLBM_IO(SDL_IOStream *src);                                                                   // Load a LBM image directly.\nSDL_Surface * IMG_LoadPCX_IO(SDL_IOStream *src);                                                                   // Load a PCX image directly.\nSDL_Surface * IMG_LoadPNG_IO(SDL_IOStream *src);                                                                   // Load a PNG image directly.\nSDL_Surface * IMG_LoadPNM_IO(SDL_IOStream *src);                                                                   // Load a PNM image directly.\nSDL_Surface * IMG_LoadSVG_IO(SDL_IOStream *src);                                                                   // Load a SVG image directly.\nSDL_Surface * IMG_LoadQOI_IO(SDL_IOStream *src);                                                                   // Load a QOI image directly.\nSDL_Surface * IMG_LoadTGA_IO(SDL_IOStream *src);                                                                   // Load a TGA image directly.\nSDL_Surface * IMG_LoadTIF_IO(SDL_IOStream *src);                                                                   // Load a TIFF image directly.\nSDL_Surface * IMG_LoadXCF_IO(SDL_IOStream *src);                                                                   // Load a XCF image directly.\nSDL_Surface * IMG_LoadXPM_IO(SDL_IOStream *src);                                                                   // Load a XPM image directly.\nSDL_Surface * IMG_LoadXV_IO(SDL_IOStream *src);                                                                    // Load a XV image directly.\nSDL_Surface * IMG_LoadWEBP_IO(SDL_IOStream *src);                                                                  // Load a WEBP image directly.\n```\n\n----------------------------------------\n\nTITLE: Get Music Title - SDL_mixer (C)\nDESCRIPTION: Retrieves the title of a music object or its filename if the title is unavailable.  If `music` is NULL, it queries the currently-playing music. The function returns a `const char*` which is either the title, the filename, or an empty string(\"\").\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicTitle.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst char* Mix_GetMusicTitle(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Set Music Finished Callback - SDL_mixer (C)\nDESCRIPTION: Sets a callback function to be executed when music playback has finished or has been explicitly stopped. The `music_finished` parameter specifies the callback function. Passing NULL disables the callback. The callback is triggered from a background thread, so limit its complexity.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_HookMusicFinished.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HookMusicFinished(Mix_MusicFinishedCallback music_finished);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticRamp Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_HapticRamp` used to create haptic ramp effects. The structure contains parameters for defining the effect's direction, duration, trigger, start and end strengths, and attack/fade envelopes. This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticRamp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticRamp\n{\n    /* Header */\n    SDL_HapticEffectType type;      /**< SDL_HAPTIC_RAMP */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect. */\n    Uint16 delay;           /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;          /**< Button that triggers the effect. */\n    Uint16 interval;        /**< How soon it can be triggered again after button. */\n\n    /* Ramp */\n    Sint16 start;           /**< Beginning strength level. */\n    Sint16 end;             /**< Ending strength level. */\n\n    /* Envelope */\n    Uint16 attack_length;   /**< Duration of the attack. */\n    Uint16 attack_level;    /**< Level at the start of the attack. */\n    Uint16 fade_length;     /**< Duration of the fade. */\n    Uint16 fade_level;      /**< Level at the end of the fade. */\n} SDL_HapticRamp;\n```\n\n----------------------------------------\n\nTITLE: Setting Window Gamma Ramp in C\nDESCRIPTION: This C code snippet shows the syntax for the `SDL_SetWindowGammaRamp` function in SDL2. It takes an SDL_Window pointer, and three Uint16 arrays representing the red, green, and blue gamma ramps for the display associated with the window. Dependencies: SDL2 library, SDL_video.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowGammaRamp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowGammaRamp(SDL_Window * window,\n                           const Uint16 * red,\n                           const Uint16 * green,\n                           const Uint16 * blue);\n```\n\n----------------------------------------\n\nTITLE: SDL_FreeWAV Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_FreeWAV function in C. It takes a Uint8 pointer to the audio buffer that needs to be freed. The audio buffer must have been previously allocated with SDL_LoadWAV or SDL_LoadWAV_RW.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FreeWAV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FreeWAV(Uint8 * audio_buf);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_HIDAPI_LIBUSB in C\nDESCRIPTION: This code snippet defines the SDL_HINT_HIDAPI_LIBUSB macro. This macro represents the hint key used to control whether HIDAPI uses libusb for device access. The hint should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_HIDAPI_LIBUSB.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_HIDAPI_LIBUSB \"SDL_HIDAPI_LIBUSB\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_X11_WINDOW_TYPE in C\nDESCRIPTION: Defines the SDL_HINT_X11_WINDOW_TYPE macro, which is used to force X11 windows to create as a custom type. This hint is only used for X11 and ignored elsewhere, and must be set before calling SDL_CreateWindow().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_X11_WINDOW_TYPE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_X11_WINDOW_TYPE \"SDL_X11_WINDOW_TYPE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_SIMDRealloc Syntax in C\nDESCRIPTION: Defines the syntax for using SDL_SIMDRealloc to reallocate memory previously allocated by SDL_SIMDAlloc. It accepts a pointer to the memory block and the new desired size. If the input pointer is NULL, it behaves like SDL_SIMDAlloc.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SIMDRealloc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_SIMDRealloc(void *mem, const size_t len);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_PS5 in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_JOYSTICK_HIDAPI_PS5 hint is defined as a macro in C. Setting the hint before initializing joysticks and gamepads determines whether the HIDAPI driver is used for PS5 controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS5.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS5 \"SDL_JOYSTICK_HIDAPI_PS5\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_VITA Macro in C\nDESCRIPTION: Defines the SDL_PLATFORM_VITA macro to 1. This macro is used to identify if the code is being compiled for the Sony Vita platform within an SDL3 project. It allows for platform-specific code execution.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_VITA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_VITA 1\n```\n\n----------------------------------------\n\nTITLE: SDL_IMAGE_VERSION Macro Definition in C\nDESCRIPTION: Defines the SDL_IMAGE_VERSION macro using SDL_VERSIONNUM. This macro combines the major, minor, and micro version numbers of the SDL_image library into a single version number. It is a crucial part of SDL_image and should be included in any program that uses the SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/SDL_IMAGE_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_VERSION \\\n    SDL_VERSIONNUM(SDL_IMAGE_MAJOR_VERSION, SDL_IMAGE_MINOR_VERSION, SDL_IMAGE_MICRO_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Get Text Script C\nDESCRIPTION: This function retrieves the script used for text shaping within a specified text object. It takes a TTF_Text pointer as input and returns the script as a Uint32.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_91\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetTextScript(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_WII in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_WII macro, which is a string constant used to set the hint controlling the HIDAPI driver for Nintendo Wii and Wii U controllers. The value of this hint determines whether the HIDAPI driver will be used for these controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_WII.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_WII \"SDL_JOYSTICK_HIDAPI_WII\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticPeriodic Structure Definition in C\nDESCRIPTION: Defines the SDL_HapticPeriodic structure, which is used to configure periodic haptic effects such as sine waves, square waves, and sawtooth waves. The structure contains fields for specifying the type of effect, direction, duration, delay, trigger button, interval, period, magnitude, offset, phase, and envelope parameters like attack and fade lengths and levels. This struct is part of the SDL_haptic API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticPeriodic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticPeriodic\n{\n    /* Header */\n    Uint16 type;        /**< SDL_HAPTIC_SINE, SDL_HAPTIC_LEFTRIGHT,\n                             SDL_HAPTIC_TRIANGLE, SDL_HAPTIC_SAWTOOTHUP or\n                             SDL_HAPTIC_SAWTOOTHDOWN */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;      /**< Duration of the effect. */\n    Uint16 delay;       /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;      /**< Button that triggers the effect. */\n    Uint16 interval;    /**< How soon it can be triggered again after button. */\n\n    /* Periodic */\n    Uint16 period;      /**< Period of the wave. */\n    Sint16 magnitude;   /**< Peak value; if negative, equivalent to 180 degrees extra phase shift. */\n    Sint16 offset;      /**< Mean value of the wave. */\n    Uint16 phase;       /**< Positive phase shift given by hundredth of a degree. */\n\n    /* Envelope */\n    Uint16 attack_length;   /**< Duration of the attack. */\n    Uint16 attack_level;    /**< Level at the start of the attack. */\n    Uint16 fade_length; /**< Duration of the fade. */\n    Uint16 fade_level;  /**< Level at the end of the fade. */\n} SDL_HapticPeriodic;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_DIRECTINPUT_ENABLED Macro in C\nDESCRIPTION: This code defines the SDL_HINT_DIRECTINPUT_ENABLED macro, which is used to control whether DirectInput gamepad devices are detected and used. The macro maps to the string \"SDL_DIRECTINPUT_ENABLED\", which is the environment variable or hint name that SDL uses to check its setting.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_DIRECTINPUT_ENABLED.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_DIRECTINPUT_ENABLED \"SDL_DIRECTINPUT_ENABLED\"\n```\n\n----------------------------------------\n\nTITLE: Querying paused channel state using Mix_Paused in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_Paused function in SDL_mixer. It takes an integer representing the channel to query, or -1 to query all channels, and returns an integer indicating whether the channel is paused (1) or not (0). If channel is -1, returns the number of paused channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Paused.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Paused(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteBE32 Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_WriteBE32 function in C. It takes a pointer to an SDL_RWops stream and a 32-bit unsigned integer as input. It returns the number of elements successfully written (1 on success, 0 on error).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WriteBE32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteBE32(SDL_RWops * dst, Uint32 value);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PEN_MOUSEID in C\nDESCRIPTION: This macro defines SDL_PEN_MOUSEID as an SDL_MouseID representing mouse events generated by pen input. It is used to differentiate pen-based mouse events from regular mouse events within the SDL event system. The macro is defined as ((SDL_MouseID)-2).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PEN_MOUSEID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PEN_MOUSEID ((SDL_MouseID)-2)\n```\n\n----------------------------------------\n\nTITLE: Get Linked SDL_net Version - C\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_Linked_Version function, which retrieves the version of the dynamically linked SDL_net library. It returns a pointer to a constant SDLNet_version structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_Linked_Version.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst SDLNet_version * SDLNet_Linked_Version(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING in C\nDESCRIPTION: Defines the SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING macro. This macro allows you to enable or disable thread naming on Windows, which can be useful for debugging purposes with different debuggers or .NET environments. Setting the macro to \"1\" disables thread naming.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_WINDOWS_DISABLE_THREAD_NAMING \"SDL_WINDOWS_DISABLE_THREAD_NAMING\"\n```\n\n----------------------------------------\n\nTITLE: SDL_INIT_INTERFACE Usage Example (C)\nDESCRIPTION: This example shows how to use the SDL_INIT_INTERFACE macro to initialize an SDL_IOStreamInterface structure before filling it with implementation-specific function pointers like 'seek'. It then demonstrates opening an IO stream with the interface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_INIT_INTERFACE.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStreamInterface iface;\n\nSDL_INIT_INTERFACE(&iface);\n\n// Fill in the interface function pointers with your implementation\niface.seek = ...\n\nstream = SDL_OpenIO(&iface, NULL);\n```\n\n----------------------------------------\n\nTITLE: Commit Message Example\nDESCRIPTION: Illustrates the proper format for commit messages in the SDL project, including a short description on the first line (50 characters or less), followed by a blank line and a longer description (each line 72 characters or less). This format ensures proper display of commit messages on GitHub.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/contributing.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nFix crash in SDL_FooBar.\n\nThis addresses the issue #123456 by making sure Foo was successful\nbefore calling Bar.\n```\n\n----------------------------------------\n\nTITLE: SDL_SpinLock Definition in C\nDESCRIPTION: Defines SDL_SpinLock as an integer type. This type represents an atomic spinlock used for thread synchronization within the SDL3 library. It's crucial for atomic operations but should be used carefully due to potential starvation issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SpinLock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int SDL_SpinLock;\n```\n\n----------------------------------------\n\nTITLE: SDL_AndroidBackButton Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_AndroidBackButton function, which is used to trigger the Android system back button behavior within an SDL application. The function takes no arguments and returns void. It is available since SDL 2.0.9.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidBackButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AndroidBackButton(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_CloseFont Syntax - C\nDESCRIPTION: This function disposes of a previously created font, freeing any associated resources. It is safe to call this function on NULL, such as the result of a failed call to TTF_OpenFont(). The font is not valid after being passed to this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_CloseFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_CloseFont(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED macro, which is a string literal used as the name of the hint. This hint controls whether the player LEDs on a PS5 controller are lit to indicate the associated player number when using the HIDAPI driver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR hint is defined in C using a #define macro. It assigns the string literal \"SDL_EMSCRIPTEN_CANVAS_SELECTOR\" to the macro, which can then be used to set the hint using SDL_SetHint. The hint is specific to the emscripten platform and should be set before creating a window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR \"SDL_EMSCRIPTEN_CANVAS_SELECTOR\"\n```\n\n----------------------------------------\n\nTITLE: Example Frame Rendering Callback for iOS with SDL in C++\nDESCRIPTION: This code snippet provides an example of a frame rendering callback function, `ShowFrame`, which is used in conjunction with `SDL_iPhoneSetAnimationCallback` on iOS. The callback handles event processing, frame logic, and rendering.  An example of how to initialize SDL and the game center.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/ios.md#_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nextern \"C\"\nvoid ShowFrame(void*)\n{\n    ... do event handling, frame logic and rendering ...\n}\n\nint main(int argc, char *argv[])\n{\n    ... initialize game ...\n\n#ifdef __IPHONEOS__\n    // Initialize the Game Center for scoring and matchmaking\n    InitGameCenter();\n\n    // Set up the game to run in the window animation callback on iOS\n    // so that Game Center and so forth works correctly.\n    SDL_iPhoneSetAnimationCallback(window, 1, ShowFrame, NULL);\n#else\n    while ( running ) {\n        ShowFrame(0);\n        DelayFrame();\n    }\n#endif\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_ClipboardEvent Structure Definition in C\nDESCRIPTION: Defines the structure for the SDL_ClipboardEvent, providing information about a clipboard update event. The structure includes the event type, timestamp in nanoseconds, a flag indicating ownership of the clipboard, the number of MIME types associated with the clipboard content, and a pointer to an array of MIME type strings. This structure is used to handle clipboard update events in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClipboardEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_ClipboardEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_CLIPBOARD_UPDATE */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    bool owner;         /**< are we owning the clipboard (internal update) */\n    Sint32 num_mime_types;   /**< number of mime types */\n    const char **mime_types; /**< current mime types */\n} SDL_ClipboardEvent;\n```\n\n----------------------------------------\n\nTITLE: CMake iOS Simulator Build (Latest SDK, x86_64)\nDESCRIPTION: This CMake command configures SDL3 for the iOS Simulator, using the latest installed SDK. It sets the target operating system to iOS, the SDK root to iphonesimulator, specifies the x86_64 architecture, and sets the minimum iOS deployment target to 9.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: SDL_DispatchGPUComputeIndirect Syntax\nDESCRIPTION: Defines the syntax for the SDL_DispatchGPUComputeIndirect function, which dispatches compute work using parameters stored in a buffer. It requires an SDL_GPUComputePass, an SDL_GPUBuffer, and an offset to the dispatch parameters within the buffer. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DispatchGPUComputeIndirect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DispatchGPUComputeIndirect(\n    SDL_GPUComputePass *compute_pass,\n    SDL_GPUBuffer *buffer,\n    Uint32 offset);\n```\n\n----------------------------------------\n\nTITLE: SDL_LINE Macro Definition in C\nDESCRIPTION: This macro, SDL_LINE, expands to the current line number of the file being compiled. It leverages the compiler's built-in __LINE__ macro. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LINE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_LINE    __LINE__\n```\n\n----------------------------------------\n\nTITLE: Get Real Gamepad Type for ID in SDL3 (C)\nDESCRIPTION: This C code snippet shows the syntax for the SDL_GetRealGamepadTypeForID function, which retrieves the actual gamepad type associated with a given joystick instance ID, ignoring any mapping overrides. It takes an SDL_JoystickID as input and returns an SDL_GamepadType.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRealGamepadTypeForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadType SDL_GetRealGamepadTypeForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Setting a Pointer Property in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetPointerProperty function, which is used to set a pointer property within an SDL_PropertiesID. The function takes the SDL_PropertiesID, the name of the property, and a void pointer as input. A NULL value will delete the property.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetPointerProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetPointerProperty(SDL_PropertiesID props, const char *name, void *value);\n```\n\n----------------------------------------\n\nTITLE: SDL_strlwr Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_strlwr function, which takes a character pointer as input (the string to convert) and returns a character pointer (the original string). The function modifies the string in-place.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strlwr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strlwr(char *str);\n```\n\n----------------------------------------\n\nTITLE: SDL_StretchSurface Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_StretchSurface function in C. This function performs a stretched pixel copy from the source SDL_Surface to the destination SDL_Surface, using the specified source and destination rectangles and scale mode. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StretchSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_StretchSurface(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect, SDL_ScaleMode scaleMode);\n```\n\n----------------------------------------\n\nTITLE: Define SDL Icon Resource Hint (C)\nDESCRIPTION: This code defines the SDL_HINT_WINDOWS_INTRESOURCE_ICON macro, which represents the string literal \"SDL_WINDOWS_INTRESOURCE_ICON\".  This string is used as a key to set a hint that specifies a custom icon resource ID on Windows platforms. This hint should be set before initializing SDL. The value associated with this hint should be the resource ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_INTRESOURCE_ICON.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_INTRESOURCE_ICON       \"SDL_WINDOWS_INTRESOURCE_ICON\"\n```\n\n----------------------------------------\n\nTITLE: Building SDL for Nintendo 3DS with CMake\nDESCRIPTION: This snippet demonstrates the CMake commands used to build the SDL library for the Nintendo 3DS using the devkitARM toolchain. It configures the build using the 3DS.cmake toolchain file, sets the build type to Release, builds the project, and installs the resulting files.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/n3ds.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_TOOLCHAIN_FILE=\"$DEVKITPRO/cmake/3DS.cmake\" -DCMAKE_BUILD_TYPE=Release\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Define Font Outline Line Cap Property (C)\nDESCRIPTION: Defines a constant for setting the font outline line cap property. This property corresponds to the FT_Stroker_LineCap value and controls how the ends of outline strokes are rendered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontProperties.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_PROP_FONT_OUTLINE_LINE_CAP_NUMBER           \"SDL_ttf.font.outline.line_cap\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 in C\nDESCRIPTION: Defines the SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 hint as a string literal.  This allows the application to use SDL_SetHint or SDL_SetHintWithPriority to control if Alt+F4 generates a window close event in Windows. The default value is \"1\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 \"SDL_WINDOWS_CLOSE_ON_ALT_F4\"\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockRWLock Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UnlockRWLock function. This function takes an SDL_RWLock pointer as input and unlocks the read/write lock. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnlockRWLock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockRWLock(SDL_RWLock *rwlock);\n```\n\n----------------------------------------\n\nTITLE: Get Camera ID using SDL_GetCameraID in C\nDESCRIPTION: Retrieves the instance ID of the provided SDL_Camera. Requires an SDL_Camera pointer as input. Returns the SDL_CameraID on success, or 0 on failure. Call SDL_GetError() for more information on failures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameraID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_CameraID SDL_GetCameraID(SDL_Camera *camera);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetQueuedAudioSize Syntax (C)\nDESCRIPTION: Shows the syntax for the SDL_GetQueuedAudioSize function. This function takes an SDL_AudioDeviceID as input, representing the audio device to query, and returns a Uint32 representing the number of bytes of queued audio.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetQueuedAudioSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);\n```\n\n----------------------------------------\n\nTITLE: SDL_IOFromConstMem Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_IOFromConstMem function in C. It takes a const void pointer to the memory buffer and its size as input. It returns a pointer to an SDL_IOStream, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOFromConstMem.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_IOStream * SDL_IOFromConstMem(const void *mem, size_t size);\n```\n\n----------------------------------------\n\nTITLE: Mix_HaltChannel Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_HaltChannel function, which halts audio playback on a specified channel or all channels if channel is -1. It's part of the SDL_mixer library and available since SDL_mixer 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_HaltChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HaltChannel(int channel);\n```\n\n----------------------------------------\n\nTITLE: Get USB Vendor ID of Joystick Device in SDL2 (C)\nDESCRIPTION: Retrieves the USB vendor ID of a joystick device using its index in SDL2. This function, SDL_JoystickGetDeviceVendor, is available since SDL 2.0.6 and can be called before any joysticks are opened. It returns a Uint16 representing the vendor ID; if the ID isn't available or the index is invalid, it returns 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetDeviceVendor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_JoystickGetDeviceVendor(int device_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUFragmentSamplers Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_BindGPUFragmentSamplers function in C. This function binds texture-sampler pairs for use in a fragment shader during a render pass. It requires a render pass, a starting slot index, an array of texture-sampler bindings, and the number of bindings.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUFragmentSamplers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUFragmentSamplers(\n    SDL_GPURenderPass *render_pass,\n    Uint32 first_slot,\n    const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,\n    Uint32 num_bindings);\n\n```\n\n----------------------------------------\n\nTITLE: SDL_GLContext Definition in C\nDESCRIPTION: Defines SDL_GLContext as a pointer to an opaque struct, SDL_GLContextState. This represents an OpenGL context managed by SDL. This type is used with SDL's OpenGL functions, and requires the SDL3/SDL_video.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GLContextState *SDL_GLContext;\n```\n\n----------------------------------------\n\nTITLE: SDL_ANALYZER_NORETURN Macro Definition in C\nDESCRIPTION: Defines the SDL_ANALYZER_NORETURN macro, which expands to the __attribute__((analyzer_noreturn)) compiler attribute for static analysis. If the compiler doesn't support analyzer_noreturn, the macro is defined as nothing. This macro helps static analyzers understand that a function is not supposed to return, allowing them to make assumptions about the program's state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ANALYZER_NORETURN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ANALYZER_NORETURN __attribute__((analyzer_noreturn))\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteU64BE Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_WriteU64BE function to write a 64-bit unsigned integer to an SDL_IOStream in big-endian format. The function takes a pointer to an SDL_IOStream and the 64-bit unsigned integer value as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteU64BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteU64BE(SDL_IOStream *dst, Uint64 value);\n```\n\n----------------------------------------\n\nTITLE: TTF_FontIsFixedWidth Syntax (SDL_ttf, C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_FontIsFixedWidth function in the SDL_ttf library. The function takes a pointer to a TTF_Font structure as input and returns a boolean value indicating whether the font is fixed-width.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_FontIsFixedWidth.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_FontIsFixedWidth(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Get GPU Text Draw Data C\nDESCRIPTION: This function retrieves the geometry data needed for drawing the text using the GPU.  It takes a TTF_Text pointer as input and returns a TTF_GPUAtlasDrawSequence pointer. The returned value must be released after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_78\n\nLANGUAGE: C\nCODE:\n```\nTTF_GPUAtlasDrawSequence * TTF_GetGPUTextDrawData(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ColorType Enum in C\nDESCRIPTION: This C code defines the SDL_ColorType enum, which specifies different colorspace types. The enum includes values for unknown, RGB, and YCBCR color types. It is available since SDL 3.2.0 and is defined in SDL3/SDL_pixels.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ColorType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ColorType\n{\n    SDL_COLOR_TYPE_UNKNOWN = 0,\n    SDL_COLOR_TYPE_RGB = 1,\n    SDL_COLOR_TYPE_YCBCR = 2\n} SDL_ColorType;\n```\n\n----------------------------------------\n\nTITLE: Loading LBM Image from IO Stream in C\nDESCRIPTION: This function loads a LBM image directly from an SDL_IOStream. It's part of SDL_image and skips the standard file format detection. It returns an SDL_Surface pointer, or NULL on failure. Requires SDL_image library and SDL_IOStream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadLBM_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadLBM_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_main_func in C\nDESCRIPTION: This code snippet defines the `SDL_main_func` typedef, which represents the prototype for the application's main function in SDL3. It takes an integer `argc` and an array of character pointers `argv` as arguments, similar to the standard ANSI-C main function, and returns an integer representing the exit code of the application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_main_func.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef int (SDLCALL *SDL_main_func)(int argc, char *argv[]);\n```\n\n----------------------------------------\n\nTITLE: Get Timidity Config SDL_mixer C\nDESCRIPTION: Retrieves the full path of the Timidity configuration file. Returns a const char* representing the path, or NULL if not set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_49\n\nLANGUAGE: C\nCODE:\n```\nconst char * Mix_GetTimidityCfg(void);\n```\n\n----------------------------------------\n\nTITLE: Clearing an SDL_AudioStream\nDESCRIPTION: This code snippet demonstrates how to clear an SDL_AudioStream using SDL_ClearAudioStream. Clearing the stream removes any data that has been put into the stream but not yet read and resets the internal state, useful for reusing a stream with different source data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/AudioStream.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nSDL_ClearAudioStream(stream);\n```\n\n----------------------------------------\n\nTITLE: Closing an SDL Sensor in C\nDESCRIPTION: This code snippet demonstrates how to close an SDL sensor using the SDL_SensorClose function. It requires a valid SDL_Sensor pointer as input. The function releases the resources associated with the sensor.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorClose.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SensorClose(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: Detecting Google Stadia Controller (SDL)\nDESCRIPTION: This C code defines a function that checks if a joystick is a Google Stadia controller. It identifies the controller based on vendor and product IDs (vendor_id == 0x18d1 && product_id == 0x9400). The function returns `true` if the provided vendor and product IDs match the Google Stadia controller's, and `false` otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsJoystickGoogleStadiaController(Uint16 vendor_id, Uint16 product_id)\n{\n    return (vendor_id == 0x18d1 && product_id == 0x9400);\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_KeyboardEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_KeyboardEvent, which is used to represent keyboard events.  It includes members for event type (SDL_KEYDOWN or SDL_KEYUP), timestamp, window ID, key state (SDL_PRESSED or SDL_RELEASED), repeat status, and the SDL_Keysym representing the key pressed or released. The structure is defined in SDL_events.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_KeyboardEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_KeyboardEvent\n{\n    Uint32 type;        /**< SDL_KEYDOWN or SDL_KEYUP */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;    /**< The window with keyboard focus, if any */\n    Uint8 state;        /**< SDL_PRESSED or SDL_RELEASED */\n    Uint8 repeat;       /**< Non-zero if this is a key repeat */\n    Uint8 padding2;\n    Uint8 padding3;\n    SDL_Keysym keysym;  /**< The key that was pressed or released */\n} SDL_KeyboardEvent;\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Path in C\nDESCRIPTION: Retrieves the implementation-dependent path for a specified game controller. The function takes a game controller identifier as input and returns a string containing the path, or NULL if no path is available or the identifier is invalid. Requires a valid SDL_GameController pointer obtained via SDL_GameControllerOpen().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerPath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GameControllerPath(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Music Decoders C\nDESCRIPTION: This snippet shows the syntax for using the Mix_GetNumMusicDecoders function in SDL_mixer. The function takes no arguments and returns an integer representing the number of music decoders available. It requires the SDL_mixer library and that Mix_OpenAudio has been called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetNumMusicDecoders.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GetNumMusicDecoders(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_JoyButtonEvent Structure in C\nDESCRIPTION: This code snippet defines the SDL_JoyButtonEvent structure. This structure is used to represent joystick button press or release events, including the type of event, timestamp, joystick instance ID, button index, and button state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoyButtonEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyButtonEvent\n{\n    Uint32 type;        /**< SDL_JOYBUTTONDOWN or SDL_JOYBUTTONUP */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 button;       /**< The joystick button index */\n    Uint8 state;        /**< SDL_PRESSED or SDL_RELEASED */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_JoyButtonEvent;\n```\n\n----------------------------------------\n\nTITLE: Set Music Position SDL_mixer C\nDESCRIPTION: Sets the current playback position within the music stream, specified in seconds. Takes a double representing the position. Returns true on success, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_SetMusicPosition(double position);\n```\n\n----------------------------------------\n\nTITLE: SDL_iOSAnimationCallback Prototype in C\nDESCRIPTION: Defines the function prototype for the callback function used with SDL_SetiOSAnimationCallback.  The callback function receives a void pointer as its only argument, which is the callbackParam passed to SDL_SetiOSAnimationCallback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetiOSAnimationCallback.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid callback(void *callbackParam);\n```\n\n----------------------------------------\n\nTITLE: Get Surface Colorspace using SDL_GetSurfaceColorspace in C\nDESCRIPTION: Retrieves the colorspace used by the specified SDL_Surface. The function takes a pointer to an SDL_Surface as input and returns an SDL_Colorspace enum value. It returns SDL_COLORSPACE_UNKNOWN if the surface is NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfaceColorspace.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Colorspace SDL_GetSurfaceColorspace(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: LOG_ERROR Macro Example C\nDESCRIPTION: Illustrates the usage of SDL_STRINGIFY_ARG within a LOG_ERROR macro. This macro prepends the function name to an error message before outputting it via OutputDebugString. It uses SDL_STRINGIFY_ARG to convert the __FUNCTION__ macro (which represents the current function's name) into a string literal.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_STRINGIFY_ARG.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define LOG_ERROR(X) OutputDebugString(SDL_STRINGIFY_ARG(__FUNCTION__) \": \" X \"\\n\")`\n```\n\n----------------------------------------\n\nTITLE: Define Mouse Relative Speed Scale Hint in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE macro, a string constant that represents the name of the hint used to scale mouse motion in relative mode. This allows for adjusting the sensitivity of mouse input when the mouse is captured in relative mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE \"SDL_MOUSE_RELATIVE_SPEED_SCALE\"\n```\n\n----------------------------------------\n\nTITLE: Simple Rumble Effect with SDL Haptic in C\nDESCRIPTION: This code snippet demonstrates a simple rumble effect using the SDL Haptic subsystem. It opens a haptic device, initializes the rumble effect, plays the effect at 50% strength for 2 seconds, waits for the effect to finish, and then closes the device. It requires the SDL library to be initialized with haptic support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/CategoryHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Haptic *haptic;\n\n   // Open the device\n   haptic = SDL_HapticOpen( 0 );\n   if (haptic == NULL)\n      return -1;\n\n   // Initialize simple rumble\n   if (SDL_HapticRumbleInit( haptic ) != 0)\n      return -1;\n\n   // Play effect at 50% strength for 2 seconds\n   if (SDL_HapticRumblePlay( haptic, 0.5, 2000 ) != 0)\n      return -1;\n   SDL_Delay( 2000 );\n\n   // Clean up\n   SDL_HapticClose( haptic );\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontHinting Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_SetFontHinting function, which is used to set a font's current hinting setting. The function takes a pointer to a TTF_Font structure and a TTF_HintingFlags enumeration value as parameters. It updates any TTF_Text objects using the font and clears already-generated glyphs, if any, from the cache. This function should be called on the thread that created the font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontHinting.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_SetFontHinting(TTF_Font *font, TTF_HintingFlags hinting);\n```\n\n----------------------------------------\n\nTITLE: Get Current Video Driver Name - SDL2 - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetCurrentVideoDriver function. It takes no arguments and returns a const char* representing the name of the currently initialized video driver, or NULL if no driver is initialized. It is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetCurrentVideoDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetCurrentVideoDriver(void);\n```\n\n----------------------------------------\n\nTITLE: Get Rectangle Intersection with Float Precision in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetRectIntersectionFloat function. It takes two SDL_FRect pointers (A and B) as input, representing the two rectangles to check for intersection, and a pointer to an SDL_FRect (result) where the intersection rectangle will be stored. The function returns true if the rectangles intersect and false otherwise. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRectIntersectionFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRectIntersectionFloat(const SDL_FRect *A, const SDL_FRect *B, SDL_FRect *result);\n```\n\n----------------------------------------\n\nTITLE: Adding Bluetooth Usage Description to Info.plist\nDESCRIPTION: This snippet shows the XML code that needs to be added to the Info.plist file for applications utilizing CoreBluetooth functionality for game controller support via SDL_JOYSTICK_HIDAPI. The `NSBluetoothPeripheralUsageDescription` key provides a human-readable explanation of why the application needs access to Bluetooth.  This requires linking with CoreBluetooth.framework.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/ios.md#_snippet_3\n\nLANGUAGE: objective-c\nCODE:\n```\n<key>NSBluetoothPeripheralUsageDescription</key>\n<string>MyApp would like to remain connected to nearby bluetooth Game Controllers and Game Pads even when you're not using the app.</string>\n```\n\n----------------------------------------\n\nTITLE: Get Max Haptic Effects - C\nDESCRIPTION: Retrieves the maximum number of effects a haptic device can store. The function takes an SDL_Haptic pointer as input and returns an integer representing the number of effects. It's important to verify if the effect was actually created, as the return value might be an approximation on some platforms. Returns a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetMaxHapticEffects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetMaxHapticEffects(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Firmware Version in C\nDESCRIPTION: Retrieves the firmware version of a connected joystick using SDL_JoystickGetFirmwareVersion. Requires a valid SDL_Joystick pointer obtained from SDL_JoystickOpen(). Returns a Uint16 representing the firmware version, or 0 if unavailable. Available since SDL 2.24.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetFirmwareVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_JoystickGetFirmwareVersion(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_FlushEvents Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_FlushEvents function. This function clears events from the event queue within a specified range of event types. It takes two Uint32 parameters, `minType` and `maxType`, which define the inclusive range of event types to be flushed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FlushEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FlushEvents(Uint32 minType, Uint32 maxType);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Name in SDL3\nDESCRIPTION: Retrieves the name of the specified SDL_Renderer.  The function accepts a pointer to an SDL_Renderer and returns a const char* representing the name of the renderer. Returns NULL on failure; call SDL_GetError() for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRendererName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetRendererName(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Haptic Axes in SDL3 (C)\nDESCRIPTION: Retrieves the number of axes supported by a specific haptic device. It takes an SDL_Haptic pointer representing the device as input.  The function returns the number of axes as an integer or -1 if an error occurs.  Error information can be retrieved using SDL_GetError().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumHapticAxes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumHapticAxes(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadXPM_IO Syntax in C\nDESCRIPTION: Loads an XPM image directly from an SDL_IOStream. It bypasses SDL_image's file format detection. Returns an SDL_Surface or NULL on error. Requires SDL_image 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadXPM_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadXPM_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: TTF_OpenFontWithProperties Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_OpenFontWithProperties function, which opens a font with specified properties using an SDL_PropertiesID. The function returns a pointer to a TTF_Font object, or NULL if an error occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_OpenFontWithProperties.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_Font * TTF_OpenFontWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_SurfaceHasColorKey Syntax\nDESCRIPTION: This snippet shows the syntax for the SDL_SurfaceHasColorKey function. It takes a pointer to an SDL_Surface structure as input and returns a boolean value indicating whether the surface has a color key.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SurfaceHasColorKey.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SurfaceHasColorKey(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_SSE3_INTRINSICS in C\nDESCRIPTION: This macro definition indicates that the compiler supports Intel SSE3 intrinsics. If defined, SDL automatically includes `<pmmintrin.h>`. This is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SSE3_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SSE3_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteU8 Function Signature in C\nDESCRIPTION: Defines the syntax of the SDL_WriteU8 function in C. It takes a pointer to an SDL_IOStream and a Uint8 value as input, and returns a boolean indicating the success of the write operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteU8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteU8(SDL_IOStream *dst, Uint8 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_IntersectFRectAndLine Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_IntersectFRectAndLine function in C. This function determines the intersection of a rectangle and a line segment, modifying the line segment's endpoints if necessary to clip it to the rectangle's boundaries. The function takes a pointer to an SDL_FRect structure, and pointers to floats representing the line's starting and ending X and Y coordinates.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IntersectFRectAndLine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IntersectFRectAndLine(const SDL_FRect *\n                                   rect, float *X1,\n                                   float *Y1, float *X2,\n                                   float *Y2);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Shaded Function Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderText_Shaded function in C, which is used to render UTF-8 text to a new 8-bit surface with a shaded effect using a specified font, text, foreground color, and background color. The length parameter specifies the length of the text in bytes, or 0 for null-terminated text. Returns a pointer to the new SDL_Surface or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderText_Shaded.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Shaded(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph32_Shaded Syntax (C)\nDESCRIPTION: Defines the syntax for the TTF_RenderGlyph32_Shaded function in C, which renders a 32-bit glyph to an 8-bit shaded surface. The function takes a font, a Unicode character, a foreground color, and a background color as input and returns a pointer to an SDL_Surface, or NULL if an error occurred. Dependencies include SDL_ttf.h and SDL.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderGlyph32_Shaded.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph32_Shaded(TTF_Font *font,\n                Uint32 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_3DS in C\nDESCRIPTION: This code snippet demonstrates the definition of the SDL_PLATFORM_3DS preprocessor macro. It is defined as 1 when the code is being compiled for the Nintendo 3DS platform.  It is used to conditionally include 3DS-specific code during compilation. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_3DS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_3DS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_wcscmp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_wcscmp function, which takes two const wchar_t pointers as input (str1 and str2) and returns an integer. This function compares the two wide character strings and returns a value less than zero if str1 is less than str2, greater than zero if str1 is greater than str2, and zero if they are equal.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcscmp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_wcscmp(const wchar_t *str1, const wchar_t *str2);\n```\n\n----------------------------------------\n\nTITLE: Get Display Orientation in C\nDESCRIPTION: This C code snippet demonstrates the syntax for using the SDL_GetDisplayOrientation function.  It retrieves the orientation of a display given its index. The function returns an SDL_DisplayOrientation enum representing the display's orientation or SDL_ORIENTATION_UNKNOWN if unavailable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDisplayOrientation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WINDOWS_RAW_KEYBOARD Macro in C\nDESCRIPTION: This C preprocessor macro defines SDL_HINT_WINDOWS_RAW_KEYBOARD, allowing developers to set the hint value to control raw keyboard input on Windows. Setting the value to \"1\" enables raw keyboard events for lower latency, while \"0\" uses the default Windows message loop.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_RAW_KEYBOARD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_RAW_KEYBOARD \"SDL_WINDOWS_RAW_KEYBOARD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_isnan Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_isnan function, which determines if a double value is NaN. It takes a double x as input and returns an int indicating whether x is NaN or not. The function is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isnan.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isnan(double x);\n```\n\n----------------------------------------\n\nTITLE: Convert String to SDL_GamepadType Enum in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetGamepadTypeFromString function. It takes a const char * as input, representing the string to convert, and returns an SDL_GamepadType enum value. If no match is found, it returns SDL_GAMEPAD_TYPE_UNKNOWN.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadTypeFromString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadType SDL_GetGamepadTypeFromString(const char *str);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticDirection Structure Definition in C\nDESCRIPTION: Defines the structure for representing a haptic direction, including the encoding type and the direction vector. The `type` member specifies the encoding method (polar, cartesian, or spherical), and the `dir` array holds the encoded direction values. This structure is used to configure haptic effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticDirection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticDirection\n{\n    SDL_HapticDirectionType type;  /**< The type of encoding. */\n    Sint32 dir[3];                 /**< The encoded direction. */\n} SDL_HapticDirection;\n```\n\n----------------------------------------\n\nTITLE: SDL_UserEvent Structure Definition in C\nDESCRIPTION: Defines the structure for a user-defined event in SDL.  It includes members for the event type, timestamp, window ID, user-defined code, and two user-defined data pointers. This allows applications to create custom events and pass data along with them.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UserEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_UserEvent\n{\n    Uint32 type;        /**< SDL_USEREVENT through SDL_LASTEVENT-1 */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;    /**< The associated window if any */\n    Sint32 code;        /**< User defined event code */\n    void *data1;        /**< User defined data pointer */\n    void *data2;        /**< User defined data pointer */\n} SDL_UserEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL2 Audio Callback Example\nDESCRIPTION: This code snippet demonstrates the typical audio callback approach in SDL2, including setting up the audio specification, opening the audio device, and starting audio playback. It uses the SDL_OpenAudioDevice and SDL_PauseAudioDevice functions. This example sets up a callback function `MyAudioCallback` to generate audio data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid SDLCALL MyAudioCallback(void *userdata, Uint8 * stream, int len)\n    {\n        /* Calculate a little more audio here, maybe using `userdata`, write it to `stream` */\n    }\n\n    /* ...somewhere near startup... */\n    SDL_AudioSpec my_desired_audio_format;\n    SDL_zero(my_desired_audio_format);\n    my_desired_audio_format.format = AUDIO_S16;\n    my_desired_audio_format.channels = 2;\n    my_desired_audio_format.freq = 44100;\n    my_desired_audio_format.samples = 1024;\n    my_desired_audio_format.callback = MyAudioCallback;\n    my_desired_audio_format.userdata = &my_audio_callback_user_data;\n    SDL_AudioDeviceID my_audio_device = SDL_OpenAudioDevice(NULL, 0, &my_desired_audio_format, NULL, 0);\n    SDL_PauseAudioDevice(my_audio_device, 0);\n```\n\n----------------------------------------\n\nTITLE: Set Font Language C\nDESCRIPTION: This function sets the language to be used for text shaping with a given font. It takes a TTF_Font pointer and a const char* representing the language in BCP47 format. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_48\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontLanguage(TTF_Font *font, const char *language_bcp47);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDayOfWeek Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetDayOfWeek function in C. It takes the year, month, and day as input parameters and returns the day of the week as an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDayOfWeek.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDayOfWeek(int year, int month, int day);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticPeriodic Structure Definition in C\nDESCRIPTION: This C structure defines the template for a periodic haptic effect. It includes fields for the effect type, direction, replay parameters, trigger conditions, wave parameters (period, magnitude, offset, phase), and envelope properties (attack/fade length and levels).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticPeriodic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticPeriodic\n{\n    /* Header */\n    SDL_HapticEffectType type;      /**< SDL_HAPTIC_SINE, SDL_HAPTIC_SQUARE\n                                         SDL_HAPTIC_TRIANGLE, SDL_HAPTIC_SAWTOOTHUP or\n                                         SDL_HAPTIC_SAWTOOTHDOWN */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;      /**< Duration of the effect. */\n    Uint16 delay;       /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;      /**< Button that triggers the effect. */\n    Uint16 interval;    /**< How soon it can be triggered again after button. */\n\n    /* Periodic */\n    Uint16 period;      /**< Period of the wave. */\n    Sint16 magnitude;   /**< Peak value; if negative, equivalent to 180 degrees extra phase shift. */\n    Sint16 offset;      /**< Mean value of the wave. */\n    Uint16 phase;       /**< Positive phase shift given by hundredth of a degree. */\n\n    /* Envelope */\n    Uint16 attack_length;   /**< Duration of the attack. */\n    Uint16 attack_level;    /**< Level at the start of the attack. */\n    Uint16 fade_length; /**< Duration of the fade. */\n    Uint16 fade_level;  /**< Level at the end of the fade. */\n} SDL_HapticPeriodic;\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_get_indexed_string Syntax in C\nDESCRIPTION: Retrieves a string from a HID device, given its string index. Requires a device handle obtained from SDL_hid_open(), the string index, a buffer to store the wide string, and the maximum length of the buffer. Returns 0 on success, -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_get_indexed_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_indexed_string(SDL_hid_device *dev, int string_index, wchar_t *string, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Determine Rectangle Equality with SDL_RectsEqual in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RectsEqual function.  It takes two const SDL_Rect pointers as input and returns a boolean value indicating whether the rectangles are equal. The comparison checks if both pointers are non-NULL and if the x, y, width, and height members of the structures match.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RectsEqual.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_RectsEqual(const SDL_Rect *a, const SDL_Rect *b);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_mixer Audio Effect Callback in C\nDESCRIPTION: This code defines the signature of the Mix_EffectFunc_t callback function used in SDL_mixer for processing audio effects. The function takes the channel number, audio stream, stream length, and user data as parameters. It is crucial not to call SDL_LockAudio() within this callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_EffectFunc_t.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (SDLCALL *Mix_EffectFunc_t)(int chan, void *stream, int len, void *udata);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED macro, which is a string literal used as the name of the hint. This hint controls whether player LEDs on Xbox 360 controllers are lit when using HIDAPI.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED\"\n```\n\n----------------------------------------\n\nTITLE: Freeing UDP Packet in SDL_net (C)\nDESCRIPTION: This function frees a UDP packet, including both the packet's payload and the packet structure itself. The `packet` parameter specifies the UDPpacket to be freed. After calling this function, the `packet` pointer is invalid and should not be used anymore. This function is part of SDL_net library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_FreePacket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_FreePacket(UDPpacket *packet);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadCUR_RW Syntax in C\nDESCRIPTION: The IMG_LoadCUR_RW function loads a CUR image directly from an SDL_RWops stream. It takes an SDL_RWops pointer as input, which represents the data source. The function returns a pointer to an SDL_Surface on success or NULL on failure. This function is part of SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadCUR_RW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * IMG_LoadCUR_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Polling SDL Events in C\nDESCRIPTION: This code demonstrates how to use SDL_PollEvent to retrieve events from the event queue within a while loop.  It then uses a switch statement to handle different event types, specifically looking for SDL_MOUSEMOTION events and logging the mouse position.  If the queue is empty, the while loop exits and a log message is printed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Event.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nwhile (SDL_PollEvent(&test_event)) {\n  switch (test_event.type) {\n    case SDL_MOUSEMOTION:\n      SDL_Log(\"We got a motion event.\");\n      SDL_Log(\"Current mouse position is: (%d, %d)\", test_event.motion.x, test_event.motion.y);\n      break;\n    default:\n      SDL_Log(\"Unhandled Event!\");\n      break;\n  }\n}\nSDL_Log(\"Event queue empty.\");\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderGeometryRaw Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RenderGeometryRaw function in C, including its parameters and return type. The function renders a list of triangles, optionally using a texture, colors, and indices into the vertex arrays. Color and alpha modulation are done per vertex; SDL_SetTextureColorMod and SDL_SetTextureAlphaMod are ignored.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGeometryRaw.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_RenderGeometryRaw(SDL_Renderer *renderer,\n                       SDL_Texture *texture,\n                       const float *xy, int xy_stride,\n                       const SDL_Color *color, int color_stride,\n                       const float *uv, int uv_stride,\n                       int num_vertices,\n                       const void *indices, int num_indices, int size_indices);\n```\n\n----------------------------------------\n\nTITLE: Opening an Audio Device with SDL_OpenAudioDevice in C\nDESCRIPTION: This C code snippet demonstrates how to open an audio device for playback using SDL_OpenAudioDevice. It sets up the desired audio format (SDL_AudioSpec) and then attempts to open the default playback device. Error handling is included, as well as a simple delay and then proper closure of the device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OpenAudioDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioSpec want;\nSDL_AudioDeviceID dev;\n\nSDL_memset(&want, 0, sizeof(want)); /* or SDL_zero(want) */\nwant.format = SDL_AUDIO_F32;\nwant.channels = 2;\nwant.freq = 48000;\n\ndev = SDL_OpenAudioDevice(SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK, &want);\nif (dev == 0) {\n    SDL_Log(\"Failed to open audio: %s\", SDL_GetError());\n} else {\n    SDL_ResumeAudioDevice(dev); /* start audio playing. */\n    SDL_Delay(5000);  // let device play for 5 seconds\n    SDL_CloseAudioDevice(dev);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GamepadSensorEvent structure in C\nDESCRIPTION: This code snippet defines the SDL_GamepadSensorEvent structure, which is used to hold information about gamepad sensor events.  It includes fields for the event type, a reserved field, a timestamp, the joystick instance ID, the sensor type (SDL_SensorType), an array of up to 3 float values representing the sensor data, and a timestamp for the sensor reading. This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadSensorEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GamepadSensorEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_GAMEPAD_SENSOR_UPDATE */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Sint32 sensor;      /**< The type of the sensor, one of the values of SDL_SensorType */\n    float data[3];      /**< Up to 3 values from the sensor, as defined in SDL_sensor.h */\n    Uint64 sensor_timestamp; /**< The timestamp of the sensor reading in nanoseconds, not necessarily synchronized with the system clock */\n} SDL_GamepadSensorEvent;\n```\n\n----------------------------------------\n\nTITLE: Read input events from a device file\nDESCRIPTION: This command attempts to read raw input events directly from the specified device file (e.g., /dev/input/event/XX). This is used to check if the user has the correct permissions to access the joystick's input events.  If a permission error occurs, a udev rule needs to be created to adjust device permissions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncat /dev/input/event/XX\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_PSP Macro in C\nDESCRIPTION: This code snippet defines the SDL_PLATFORM_PSP macro. This macro is defined as 1 only when the code is compiled for Sony PSP platform. It allows conditional compilation based on the target platform.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_PSP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_PSP 1\n```\n\n----------------------------------------\n\nTITLE: Install SDL build dependencies on Ubuntu 18.04\nDESCRIPTION: This command installs the necessary packages on Ubuntu 18.04 to enable all available features during the SDL build process. It uses apt-get to install build-essential, git, make, autoconf, automake, libtool, pkg-config, cmake, ninja-build, gnome-desktop-testing, and various development libraries for audio, X11, Wayland, and other subsystems.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential git make autoconf automake libtool \\\npkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \\\nlibaudio-dev libjack-dev libsndio-dev libsamplerate0-dev libx11-dev libxext-dev \\\nlibxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev \\\nlibxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \\\nlibegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_BSDI Macro in C\nDESCRIPTION: Defines the SDL_PLATFORM_BSDI macro to 1, indicating that the code is being compiled for the BSDi operating system. This macro is used for platform-specific conditional compilation within the SDL library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_BSDI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_BSDI 1\n```\n\n----------------------------------------\n\nTITLE: Define Mouse Double Click Time Hint in C\nDESCRIPTION: Defines a macro for the SDL_HINT_MOUSE_DOUBLE_CLICK_TIME hint, which is used to set the time, in milliseconds, that SDL considers a double click. This hint allows developers to configure the sensitivity of double-click detection.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_DOUBLE_CLICK_TIME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_DOUBLE_CLICK_TIME    \"SDL_MOUSE_DOUBLE_CLICK_TIME\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Log Priorities in C\nDESCRIPTION: This code snippet defines the SDL_LogPriority enumeration, which represents different logging levels. The enum lists verbose, debug, info, warning, error, and critical priorities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_LogPriority\n{\n    SDL_LOG_PRIORITY_VERBOSE = 1,\n    SDL_LOG_PRIORITY_DEBUG,\n    SDL_LOG_PRIORITY_INFO,\n    SDL_LOG_PRIORITY_WARN,\n    SDL_LOG_PRIORITY_ERROR,\n    SDL_LOG_PRIORITY_CRITICAL,\n    SDL_NUM_LOG_PRIORITIES\n} SDL_LogPriority;\n```\n\n----------------------------------------\n\nTITLE: SDL_ClickTrayEntry Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ClickTrayEntry function in C. This function simulates a click on a specified SDL_TrayEntry.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClickTrayEntry.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ClickTrayEntry(SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: Expiring Channel SDL_mixer C\nDESCRIPTION: Changes the expiration delay for a particular audio channel. Takes the channel ID and the number of ticks as parameters. Returns 0 on success, -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nint Mix_ExpireChannel(int channel, int ticks);\n```\n\n----------------------------------------\n\nTITLE: Emscripten Header Inclusion in C\nDESCRIPTION: This snippet shows how to conditionally include the Emscripten header file in C code. This is necessary to use Emscripten-specific functions and features when compiling for the web.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#ifdef __EMSCRIPTEN__\n#include <emscripten.h>\n#endif\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VITA_MODULE_PATH in C\nDESCRIPTION: Defines the SDL_HINT_VITA_MODULE_PATH macro, which is used as a key to set the module path on the PlayStation Vita. This hint must be set before initializing SDL. It defaults to \"app0:module\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VITA_MODULE_PATH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VITA_MODULE_PATH \"SDL_VITA_MODULE_PATH\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_CARTESIAN in C\nDESCRIPTION: This C preprocessor directive defines the SDL_HAPTIC_CARTESIAN macro, which represents the value 1. It indicates that cartesian coordinates are used to specify the direction of a haptic effect in SDL. The macro is available since SDL 3.2.0 and it is defined in SDL3/SDL_haptic.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_CARTESIAN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_CARTESIAN  1\n```\n\n----------------------------------------\n\nTITLE: SDL_mutexP Macro Definition\nDESCRIPTION: Defines a macro SDL_mutexP as a shorthand for calling SDL_LockMutex. This macro provides a more concise way to lock a mutex within SDL applications.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockMutex.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_mutexP(m)   SDL_LockMutex(m)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_THREAD_STACK_SIZE in C\nDESCRIPTION: Defines the SDL_HINT_THREAD_STACK_SIZE macro in C, which is a string literal used to set the thread stack size hint. This hint is used by SDL to configure the stack size for newly created threads. The stack size can be specified in bytes, or \"0\" to use the backend's default size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_THREAD_STACK_SIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_THREAD_STACK_SIZE              \"SDL_THREAD_STACK_SIZE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_MostSignificantBitIndex32 Function Declaration in C\nDESCRIPTION: This code snippet shows the function declaration for SDL_MostSignificantBitIndex32, a forced-inline function that returns the index of the most significant bit in a 32-bit unsigned integer. The function takes a Uint32 as input and returns an integer representing the index of the most significant bit or -1 if the value is 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MostSignificantBitIndex32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE int SDL_MostSignificantBitIndex32(Uint32 x);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_NULL_WHILE_LOOP_CONDITION in C\nDESCRIPTION: Defines the SDL_NULL_WHILE_LOOP_CONDITION macro to be (0). This is used in conjunction with a do-while loop to execute a block of code exactly once. It helps avoid compiler warnings, especially in Visual Studio with aggressive warning settings. This macro relies on the standard C preprocessor.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NULL_WHILE_LOOP_CONDITION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NULL_WHILE_LOOP_CONDITION (0)\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseMotionTransformCallback Definition C\nDESCRIPTION: Defines the SDL_MouseMotionTransformCallback, which is a function pointer type for a callback function that transforms raw mouse motion data. The callback receives user data, timestamp, window, mouse ID, and pointers to the x and y motion values, allowing modification of these values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseMotionTransformCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_MouseMotionTransformCallback)( void *userdata, Uint64 timestamp, SDL_Window *window, SDL_MouseID mouseID, float *x, float *y);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_DPI_AWARENESS Macro in C\nDESCRIPTION: This macro defines the SDL_HINT_WINDOWS_DPI_AWARENESS constant. This hint controls how SDL handles DPI awareness on Windows platforms, allowing developers to specify how SDL applications interact with high-DPI displays.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_DPI_AWARENESS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_DPI_AWARENESS \"SDL_WINDOWS_DPI_AWARENESS\"\n```\n\n----------------------------------------\n\nTITLE: Incorrect struct/union/enum typedef declaration in C\nDESCRIPTION: This code snippet shows an example of how NOT to define a struct/union/enum typedef, as the wikiheaders script will not parse it correctly. The typedef name should be on the first line.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/documentation-rules.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct\n{\n    int a;\n    int b;\n} SDL_MyStruct;\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontKerning Function\nDESCRIPTION: Sets if kerning is enabled for a font. Kerning adjusts the spacing between certain character pairs to improve readability. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_35\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontKerning(TTF_Font *font, bool enabled);                                                                                     // Set if kerning is enabled for a font.\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFreeTypeVersion Function\nDESCRIPTION: Retrieves the version of the FreeType library currently in use by SDL_ttf. This is important for understanding the capabilities and potential limitations of the font rendering engine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_GetFreeTypeVersion(int *major, int *minor, int *patch);                                                                           // Query the version of the FreeType library in use.\n```\n\n----------------------------------------\n\nTITLE: Get Text Wrap Whitespace Visibility - SDL_ttf\nDESCRIPTION: Returns whether whitespace is visible when wrapping a text object. Returns true if whitespace is shown, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_101\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_TextWrapWhitespaceVisible(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIX64 Macro Definition in C\nDESCRIPTION: This macro defines SDL_PRIX64 as \"llX\", which is a format specifier for printing Uint64 values as uppercase hexadecimal numbers using functions like SDL_Log. It is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIX64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRIX64 \"llX\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED macro, which is used as a key to set the joystick HIDAPI Joy-Con Home LED hint. This hint controls whether the Home button LED should be turned on when a Nintendo Switch Joy-Con controller is opened. The hint can be set to \"0\" (off), \"1\" (on), or a floating point value between 0.0 and 1.0 for brightness.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED \"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadBMP Macro Definition in C\nDESCRIPTION: This macro provides a convenient way to load a BMP image file into an SDL_Surface. It uses `SDL_RWFromFile` to open the file for reading in binary mode (\"rb\"), and then passes the resulting `SDL_RWops` structure to `SDL_LoadBMP_RW` along with a `1` to indicate that the `SDL_RWops` structure should be freed after the operation. The `file` parameter is a string representing the file path.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadBMP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_LoadBMP(file)   SDL_LoadBMP_RW(SDL_RWFromFile(file, \"rb\"), 1)\n```\n\n----------------------------------------\n\nTITLE: SDL_PathInfo Structure Definition in C\nDESCRIPTION: Defines the structure SDL_PathInfo containing information about a file or directory path. It includes the path type (SDL_PathType), the file size in bytes (Uint64 size), the time when the path was created (SDL_Time create_time), the last time the path was modified (SDL_Time modify_time), and the last time the path was read (SDL_Time access_time). This structure is used to retrieve filesystem path information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PathInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_PathInfo\n{\n    SDL_PathType type;      /**< the path type */\n    Uint64 size;            /**< the file size in bytes */\n    SDL_Time create_time;   /**< the time when the path was created */\n    SDL_Time modify_time;   /**< the last time the path was modified */\n    SDL_Time access_time;   /**< the last time the path was read */\n} SDL_PathInfo;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GamepadType enum in C\nDESCRIPTION: This code snippet defines the SDL_GamepadType enumeration in C. It lists the possible standard gamepad types that SDL recognizes, including unknown, standard, Xbox, PlayStation, and Nintendo Switch controllers. The `SDL_GAMEPAD_TYPE_COUNT` member is used to determine the number of gamepad types.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GamepadType\n{\n    SDL_GAMEPAD_TYPE_UNKNOWN = 0,\n    SDL_GAMEPAD_TYPE_STANDARD,\n    SDL_GAMEPAD_TYPE_XBOX360,\n    SDL_GAMEPAD_TYPE_XBOXONE,\n    SDL_GAMEPAD_TYPE_PS3,\n    SDL_GAMEPAD_TYPE_PS4,\n    SDL_GAMEPAD_TYPE_PS5,\n    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO,\n    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT,\n    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT,\n    SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR,\n    SDL_GAMEPAD_TYPE_COUNT\n} SDL_GamepadType;\n```\n\n----------------------------------------\n\nTITLE: Building SDL with CMake for PSP\nDESCRIPTION: This code snippet shows the commands to build and install the SDL library for the PSP using CMake. It configures the build directory, sets the build type to Release, specifies the toolchain file, builds the project, and installs it to the system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/psp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PSPDEV/psp/share/pspdev.cmake\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: SDL_FlushEvent Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_FlushEvent function in C. The function takes a Uint32 type as input, representing the type of event to be cleared from the event queue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlushEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FlushEvent(Uint32 type);\n```\n\n----------------------------------------\n\nTITLE: strlcat Function Annotation Example\nDESCRIPTION: Example of how to use the SDL_INOUT_Z_CAP macro to annotate the `strlcat` function.  This indicates that the `dst` parameter is a null-terminated C string that is both read from and written to, and its size should be `maxlen` bytes. This allows static analysis tools to verify that the code correctly handles buffer sizes, and helps prevent buffer overflows.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_INOUT_Z_CAP.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nsize_t strlcat(SDL_INOUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Query if the device is a tablet in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_IsTablet function in C to determine if the current device is a tablet. The function returns a boolean value, true if the device is a tablet, and false otherwise. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsTablet.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsTablet(void);\n```\n\n----------------------------------------\n\nTITLE: Get SDL_Joystick from Player Index in C\nDESCRIPTION: Retrieves the SDL_Joystick associated with the specified player index. The function takes an integer player_index as input and returns a pointer to an SDL_Joystick. Returns NULL on failure; use SDL_GetError() for error information. Available since SDL 2.0.12.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickFromPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Joystick* SDL_JoystickFromPlayerIndex(int player_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_SINT64_C Macro Definition\nDESCRIPTION: This macro appends the 64-bit integer suffix 'LL' (or the equivalent used by the compiler) to a given signed integer literal. This prevents compilers from incorrectly interpreting integer literals larger than 0xFFFFFFFF as overflowing a 32-bit value. It is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SINT64_C.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SINT64_C(c)  c ## LL  /* or whatever the current compiler uses. */\n```\n\n----------------------------------------\n\nTITLE: SDL_toupper Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_toupper function in C. It takes an integer as input (representing a character) and returns an integer, which is either the uppercase version of the character or the original character if no conversion is available.  The function only converts lowercase ASCII letters (a-z) to uppercase, regardless of the system locale.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_toupper.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_toupper(int x);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateSurfacePalette Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateSurfacePalette function in C. It takes an SDL_Surface pointer as input and returns an SDL_Palette pointer.  The returned palette is associated with the surface and will be automatically managed by SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateSurfacePalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Palette * SDL_CreateSurfacePalette(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: Building SDL on Windows using CMake\nDESCRIPTION: This snippet shows how to build and install SDL on Windows using CMake. It first generates the build files, then builds the project with the RelWithDebInfo configuration, and finally installs it to the specified prefix (C:/SDL).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build\ncmake --build build --config RelWithDebInfo\ncmake --install build --config RelWithDebInfo --prefix C:/SDL\n```\n\n----------------------------------------\n\nTITLE: Query udev information for an input device\nDESCRIPTION: This command queries the udev database for information about the specified input device (e.g., /dev/input/eventXX). The output includes properties such as device name, vendor ID, product ID, and whether the device is recognized as a joystick (ID_INPUT_JOYSTICK).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm info --query=all --name=input/eventXX\n```\n\n----------------------------------------\n\nTITLE: Create Cursor from XPM (C)\nDESCRIPTION: This code creates a custom mouse cursor from an XPM image. It defines an XPM image as a string array, then converts it to bitmap data and a mask, and finally creates the cursor using SDL_CreateCursor. It demonstrates how to initialize the cursor data and mask from XPM pixel data and sets the hotspot.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateCursor.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n/* XPM */\nstatic const char *arrow[] = {\n  /* width height num_colors chars_per_pixel */\n  \"    32    32        3            1\",\n  /* colors */\n  \"X c #000000\",\n  \". c #ffffff\",\n  \"  c None\",\n  /* pixels */\n  \"X                               \",\n  \"XX                              \",\n  \"X.X                             \",\n  \"X..X                            \",\n  \"X...X                           \",\n  \"X....X                          \",\n  \"X.....X                         \",\n  \"X......X                        \",\n  \"X.......X                       \",\n  \"X........X                      \",\n  \"X.....XXXXX                     \",\n  \"X..X..X                         \",\n  \"X.X X..X                        \",\n  \"XX  X..X                        \",\n  \"X    X..X                       \",\n  \"     X..X                       \",\n  \"      X..X                      \",\n  \"      X..X                      \",\n  \"       XX                       \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"                                \",\n  \"0,0\"\n};\n\nSDL_Cursor *init_system_cursor(const char *image[])\n{\n  int i, row, col;\n  Uint8 data[4*32];\n  Uint8 mask[4*32];\n  int hot_x, hot_y;\n\n  i = -1;\n  for (row=0; row<32; ++row) {\n    for (col=0; col<32; ++col) {\n      if (col % 8) {\n        data[i] <<= 1;\n        mask[i] <<= 1;\n      } else {\n        ++i;\n        data[i] = mask[i] = 0;\n      }\n      switch (image[4+row][col]) {\n        case 'X':\n          data[i] |= 0x01;\n          mask[i] |= 0x01;\n          break;\n        case '.':\n          mask[i] |= 0x01;\n          break;\n        case ' ':\n          break;\n      }\n    }\n  }\n  sscanf(image[4+row], \"%d,%d\", &hot_x, &hot_y);\n  return SDL_CreateCursor(data, mask, 32, 32, hot_x, hot_y);\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIs64 Usage Example C\nDESCRIPTION: Shows how to use the SDL_PRIs64 macro with SDL_Log to print a Sint64 value.  The macro is placed between the % and the type specifier in the format string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIs64.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRIs64 \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: SDL Main Function in C++ for WinRT\nDESCRIPTION: This C++ code snippet demonstrates a basic SDL main function for a WinRT application. It initializes SDL, creates a fullscreen window and renderer, handles input events (specifically, the ESC key to exit), and renders a green screen. The code includes necessary SDL headers and error handling for initialization and window creation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/winrt.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <SDL.h>\n\nint main(int argc, char **argv)\n{\n    SDL_DisplayMode mode;\n    SDL_Window * window = NULL;\n    SDL_Renderer * renderer = NULL;\n    SDL_Event evt;\n    SDL_bool keep_going = SDL_TRUE;\n\n    if (SDL_Init(SDL_INIT_VIDEO) != 0) {\n        return 1;\n    } else if (SDL_GetCurrentDisplayMode(0, &mode) != 0) {\n        return 1;\n    } else if (SDL_CreateWindowAndRenderer(mode.w, mode.h, SDL_WINDOW_FULLSCREEN, &window, &renderer) != 0) {\n        return 1;\n    }\n\n    while (keep_going) {\n        while (SDL_PollEvent(&evt)) {\n            if ((evt.type == SDL_KEYDOWN) && (evt.key.keysym.sym == SDLK_ESCAPE)) {\n                keep_going = SDL_FALSE;\n            }\n        }\n\n        SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255);\n        SDL_RenderClear(renderer);\n        SDL_RenderPresent(renderer);\n    }\n\n    SDL_Quit();\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontStyle Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetFontStyle function in C. It takes a pointer to a TTF_Font struct as input and returns an integer representing the current font style as a set of bit flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GetFontStyle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontStyle(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Serial in SDL3 (C)\nDESCRIPTION: Retrieves the serial number of an opened joystick using SDL_GetJoystickSerial. The function takes an SDL_Joystick pointer as input and returns a const char* representing the serial number, or NULL if not available. The joystick must be obtained from SDL_OpenJoystick().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickSerial.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetJoystickSerial(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_ThreadFunction Type Definition in C\nDESCRIPTION: Defines the SDL_ThreadFunction type as a function pointer. This function pointer takes a void pointer as input and returns an integer. This function is used as the entry point for a thread created using SDL_CreateThread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ThreadFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int (SDLCALL *SDL_ThreadFunction) (void *data);\n```\n\n----------------------------------------\n\nTITLE: SDL_OpenAudio Syntax\nDESCRIPTION: Defines the syntax for the SDL_OpenAudio function, which opens the audio device using the desired and obtained SDL_AudioSpec structures. The function returns 0 on success, placing the actual hardware parameters in the structure pointed to by `obtained`, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_OpenAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_OpenAudio(SDL_AudioSpec * desired,\n                  SDL_AudioSpec * obtained);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowWMInfo Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetWindowWMInfo function. It retrieves driver-specific information about a window, filling the SDL_SysWMinfo structure. The SDL_SysWMinfo structure's version member must be initialized using SDL_VERSION before calling this function. It returns SDL_TRUE if successful, SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowWMInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GetWindowWMInfo(SDL_Window * window,\n                             SDL_SysWMinfo * info);\n```\n\n----------------------------------------\n\nTITLE: CMake iOS Device Build (Latest SDK, mixed 32/64 bit)\nDESCRIPTION: This CMake command configures SDL3 for an iOS device, using the latest installed SDK with a mixed 32/64 bit architecture (arm64 and armv7s). It sets the target operating system to iOS, the SDK root to iphoneos, specifies both arm64 and armv7s architectures, and sets the minimum iOS deployment target to 9.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=\"arm64;armv7s\" -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GLAttr Enumeration in C\nDESCRIPTION: Defines the SDL_GLAttr enumeration in C, which lists the available OpenGL attributes configurable before window creation. These attributes are used to specify requirements for the OpenGL context, such as buffer sizes, double buffering, depth buffer, stencil buffer, and OpenGL context version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLAttr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GLAttr\n{\n    SDL_GL_RED_SIZE,                    /**< the minimum number of bits for the red channel of the color buffer; defaults to 8. */\n    SDL_GL_GREEN_SIZE,                  /**< the minimum number of bits for the green channel of the color buffer; defaults to 8. */\n    SDL_GL_BLUE_SIZE,                   /**< the minimum number of bits for the blue channel of the color buffer; defaults to 8. */\n    SDL_GL_ALPHA_SIZE,                  /**< the minimum number of bits for the alpha channel of the color buffer; defaults to 8. */\n    SDL_GL_BUFFER_SIZE,                 /**< the minimum number of bits for frame buffer size; defaults to 0. */\n    SDL_GL_DOUBLEBUFFER,                /**< whether the output is single or double buffered; defaults to double buffering on. */\n    SDL_GL_DEPTH_SIZE,                  /**< the minimum number of bits in the depth buffer; defaults to 16. */\n    SDL_GL_STENCIL_SIZE,                /**< the minimum number of bits in the stencil buffer; defaults to 0. */\n    SDL_GL_ACCUM_RED_SIZE,              /**< the minimum number of bits for the red channel of the accumulation buffer; defaults to 0. */\n    SDL_GL_ACCUM_GREEN_SIZE,            /**< the minimum number of bits for the green channel of the accumulation buffer; defaults to 0. */\n    SDL_GL_ACCUM_BLUE_SIZE,             /**< the minimum number of bits for the blue channel of the accumulation buffer; defaults to 0. */\n    SDL_GL_ACCUM_ALPHA_SIZE,            /**< the minimum number of bits for the alpha channel of the accumulation buffer; defaults to 0. */\n    SDL_GL_STEREO,                      /**< whether the output is stereo 3D; defaults to off. */\n    SDL_GL_MULTISAMPLEBUFFERS,          /**< the number of buffers used for multisample anti-aliasing; defaults to 0. */\n    SDL_GL_MULTISAMPLESAMPLES,          /**< the number of samples used around the current pixel used for multisample anti-aliasing. */\n    SDL_GL_ACCELERATED_VISUAL,          /**< set to 1 to require hardware acceleration, set to 0 to force software rendering; defaults to allow either. */\n    SDL_GL_RETAINED_BACKING,            /**< not used (deprecated). */\n    SDL_GL_CONTEXT_MAJOR_VERSION,       /**< OpenGL context major version. */\n    SDL_GL_CONTEXT_MINOR_VERSION,       /**< OpenGL context minor version. */\n    SDL_GL_CONTEXT_FLAGS,               /**< some combination of 0 or more of elements of the SDL_GLContextFlag enumeration; defaults to 0. */\n    SDL_GL_CONTEXT_PROFILE_MASK,        /**< type of GL context (Core, Compatibility, ES). See SDL_GLProfile; default value depends on platform. */\n    SDL_GL_SHARE_WITH_CURRENT_CONTEXT,  /**< OpenGL context sharing; defaults to 0. */\n    SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,    /**< requests sRGB capable visual; defaults to 0. */\n    SDL_GL_CONTEXT_RELEASE_BEHAVIOR,    /**< sets context the release behavior. See SDL_GLContextReleaseFlag; defaults to FLUSH. */\n    SDL_GL_CONTEXT_RESET_NOTIFICATION,  /**< set context reset notification. See SDL_GLContextResetNotification; defaults to NO_NOTIFICATION. */\n    SDL_GL_CONTEXT_NO_ERROR,\n    SDL_GL_FLOATBUFFERS,\n    SDL_GL_EGL_PLATFORM\n} SDL_GLAttr;\n```\n\n----------------------------------------\n\nTITLE: Conditional compilation for Android in configure.ac\nDESCRIPTION: Defines an Autoconf conditional named 'ANDROID' that is true when the target host is 'arm-unknown-linux-androideabi'. This enables platform-specific configuration in the Autotools build system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nAM_CONDITIONAL(ANDROID, test \"$host\" = \"arm-unknown-linux-androideabi\")\n```\n\n----------------------------------------\n\nTITLE: SDL_FilterEvents Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_FilterEvents function in C. It takes an SDL_EventFilter function pointer and a void pointer as parameters. The filter function is applied to the current event queue, removing events that the filter returns false for.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FilterEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FilterEvents(SDL_EventFilter filter, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetSIMDAlignment Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetSIMDAlignment function in C. It takes no arguments and returns a size_t value representing the required alignment in bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSIMDAlignment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_GetSIMDAlignment(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUTextureUsageFlags Type in C\nDESCRIPTION: Defines the SDL_GPUTextureUsageFlags type as a Uint32, used to represent texture usage flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureUsageFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_GPUTextureUsageFlags;\n```\n\n----------------------------------------\n\nTITLE: SDL_BITSPERPIXEL Macro Definition in C\nDESCRIPTION: This macro calculates the bits per pixel of an SDL_PixelFormat. It uses bitwise operations to extract the bits-per-pixel information from the format. It returns 0 for FourCC formats. The macro double-evaluates its parameter, so expressions with side effects should be avoided.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BITSPERPIXEL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_BITSPERPIXEL(format) \\\n    (SDL_ISPIXELFORMAT_FOURCC(format) ? 0 : (((format) >> 8) & 0xFF))\n```\n\n----------------------------------------\n\nTITLE: Mix_HookMusic Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_HookMusic function. It accepts a callback function (mix_func) of type Mix_MixCallback and a void pointer (arg) as arguments. The callback function will be used to provide custom audio data instead of the built-in music playback. The void pointer will be passed, untouched, to the callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_HookMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HookMusic(Mix_MixCallback mix_func, void *arg);\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop Length in Seconds - SDL_mixer - C\nDESCRIPTION: Retrieves the loop time length of a music stream in seconds using the Mix_GetMusicLoopLengthTime function from the SDL_mixer library. It takes a Mix_Music pointer as input and returns a double representing the loop time. Returns -1.0 if the feature is not used or supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicLoopLengthTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicLoopLengthTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Category Documentation Comment Example in C\nDESCRIPTION: This snippet illustrates how to add documentation to a wiki category page. The first Doxygen-style comment in a header file should start with '# CategoryABC' to denote category documentation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/documentation-rules.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n/**\n * # CategoryABC\n```\n\n----------------------------------------\n\nTITLE: TTF_OpenFontWithProperties Function\nDESCRIPTION: Creates a TTF_Font object using a SDL_PropertiesID, allowing to specify various font properties. Requires a valid SDL_PropertiesID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_7\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFontWithProperties(SDL_PropertiesID props);                                                                             // Create a font with the specified properties.\n```\n\n----------------------------------------\n\nTITLE: Define SDL_SOFTWARE_RENDERER Macro in C\nDESCRIPTION: This code snippet defines the SDL_SOFTWARE_RENDERER macro as the string literal \"software\". This macro can be used to specify the software rendering driver when initializing the renderer in SDL3. It's defined in SDL3/SDL_render.h and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SOFTWARE_RENDERER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SOFTWARE_RENDERER   \"software\"\n```\n\n----------------------------------------\n\nTITLE: TTF Font Face and Hinting Query Functions in C\nDESCRIPTION: Functions for querying information about the font face and hinting settings. Allows determining the number of font faces and the current FreeType hinting setting of a font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nint TTF_GetNumFontFaces(const TTF_Font *font);                                                                                             // Query the number of faces of a font.\nTTF_HintingFlags TTF_GetFontHinting(const TTF_Font *font);                                                                                 // Query a font's current FreeType hinter setting.\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadFile Syntax\nDESCRIPTION: Defines the syntax for using the SDL_LoadFile function, which loads the entire content of a file into memory. It takes a file path as input and an optional pointer to store the size of the loaded data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_LoadFile(const char *file, size_t *datasize);\n```\n\n----------------------------------------\n\nTITLE: Setting Log Priority Prefix with SDL_SetLogPriorityPrefix in C\nDESCRIPTION: Sets the text that is prepended to log messages of a given priority.  This allows customization of log messages based on severity. The `priority` parameter specifies the log priority to modify, and the `prefix` parameter is the string to prepend or NULL to remove the prefix. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetLogPriorityPrefix.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetLogPriorityPrefix(SDL_LogPriority priority, const char *prefix);\n```\n\n----------------------------------------\n\nTITLE: Get Thread Name - SDL2 - C\nDESCRIPTION: Retrieves the name of a specified SDL_Thread. The returned string is a UTF-8 string that is internally managed and should not be freed by the caller. The string remains valid until the thread is cleaned up by SDL_WaitThread().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetThreadName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetThreadName(SDL_Thread *thread);\n```\n\n----------------------------------------\n\nTITLE: Query Music Pause State in SDL_mixer (C)\nDESCRIPTION: This C code snippet shows the syntax for the `Mix_PausedMusic` function, part of the SDL_mixer library. This function takes no arguments and returns an integer indicating whether the currently playing music stream is paused (1 for paused, 0 for not paused). The function is available since SDL_mixer 2.0.0 and requires including SDL_mixer.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_PausedMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_PausedMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MessageBoxColor Structure in C\nDESCRIPTION: Defines the SDL_MessageBoxColor structure, which represents an RGB color with red, green, and blue components, each stored as an 8-bit unsigned integer. This structure is used to specify colors within SDL message boxes. It is defined in the SDL_messagebox.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MessageBoxColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MessageBoxColor\n{\n    Uint8 r, g, b;\n} SDL_MessageBoxColor;\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadU32LE Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_ReadU32LE function in C. It takes an SDL_IOStream pointer and a Uint32 pointer as arguments and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadU32LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadU32LE(SDL_IOStream *src, Uint32 *value);\n```\n\n----------------------------------------\n\nTITLE: SDL2 Write Function Signature\nDESCRIPTION: Demonstrates the signature of the SDL_RWwrite function in SDL2, which takes an SDL_RWops context, a pointer to the buffer, the size of each item, and the maximum number of items to write.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_RWwrite(SDL_RWops *context, const void *ptr, size_t size, size_t maxnum);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad String for Type in SDL3 (C)\nDESCRIPTION: Converts an SDL_GamepadType enum to a string representation. The function takes an SDL_GamepadType as input and returns a const char* representing the type. Returns NULL if the input type is invalid. This function is available since SDL 3.2.0 and is defined in SDL3/SDL_gamepad.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadStringForType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadStringForType(SDL_GamepadType type);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTrayMenuParentTray Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetTrayMenuParentTray function. This function takes an SDL_TrayMenu pointer as input and returns an SDL_Tray pointer, which represents the parent tray of the menu, or NULL if the menu is a submenu. It is crucial to call this function on the same thread that created the tray.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTrayMenuParentTray.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Tray * SDL_GetTrayMenuParentTray(SDL_TrayMenu *menu);\n```\n\n----------------------------------------\n\nTITLE: Pausing an SDL Haptic Device in C\nDESCRIPTION: Pauses the specified SDL_Haptic device. The function returns true on success and false on failure. It requires an initialized SDL_Haptic device pointer as input and depends on the SDL3 library. The device must support the SDL_HAPTIC_PAUSE feature to be paused.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PauseHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PauseHaptic(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ISCOLORSPACE_LIMITED_RANGE Macro in C\nDESCRIPTION: This macro checks if an SDL_Colorspace has a limited color range. It takes an SDL_Colorspace as input and returns true if the colorspace has a limited range, and false if it has a full range. The macro relies on the SDL_COLORSPACERANGE macro to determine the range.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISCOLORSPACE_LIMITED_RANGE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISCOLORSPACE_LIMITED_RANGE(cspace)       (SDL_COLORSPACERANGE(cspace) != SDL_COLOR_RANGE_FULL)\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad String for Button in SDL3\nDESCRIPTION: This C code snippet shows the syntax for the SDL_GetGamepadStringForButton function, which converts an SDL_GamepadButton enum value to its corresponding string representation. It takes an SDL_GamepadButton as input and returns a const char* representing the string for the given button. If the provided button is invalid, the function returns NULL. The function is available since SDL 3.2.0 and is part of the SDL_gamepad.h header.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadStringForButton.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst char * SDL_GetGamepadStringForButton(SDL_GamepadButton button);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAudioStreamQueued Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for calling the SDL_GetAudioStreamQueued function. It takes a pointer to an SDL_AudioStream as input and returns an integer representing the number of bytes queued. A return value of -1 indicates failure, with SDL_GetError providing more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamQueued.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_GetAudioStreamQueued(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Closing SDL_mixer Audio\nDESCRIPTION: Closes the mixer, halting all playing audio. Any halted channels will have effects deregistered and callbacks called before this function returns. It is crucial to manage resources like chunks and music separately before or after calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_CloseAudio.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_CloseAudio(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReleaseCameraFrame Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReleaseCameraFrame function in C. This function releases a frame of video acquired from a camera, allowing the back-end to re-use the internal buffer. The function takes an SDL_Camera pointer representing the opened camera device and an SDL_Surface pointer representing the video frame surface to release.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseCameraFrame.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseCameraFrame(SDL_Camera *camera, SDL_Surface *frame);\n```\n\n----------------------------------------\n\nTITLE: Get Pending Writes on Stream Socket in C\nDESCRIPTION: This function retrieves the number of bytes pending transmission on a given SDLNet_StreamSocket. It returns -1 on failure, and the number of bytes pending otherwise. Use SDL_GetError() to obtain details about failures. It's important to handle potential connection failures and destroy the socket if necessary.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_GetStreamSocketPendingWrites.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_GetStreamSocketPendingWrites(SDLNet_StreamSocket *sock);\n```\n\n----------------------------------------\n\nTITLE: Get GPU Swapchain Texture Format - SDL3 - C\nDESCRIPTION: Retrieves the texture format of the swapchain for a given SDL_Window. It requires a valid SDL_GPUDevice and an SDL_Window that has been claimed. Returns the texture format as an SDL_GPUTextureFormat. The format can change if the swapchain parameters change.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGPUSwapchainTextureFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUTextureFormat SDL_GetGPUSwapchainTextureFormat(\n    SDL_GPUDevice *device,\n    SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUComputePipeline Definition in C\nDESCRIPTION: Defines an opaque handle, `SDL_GPUComputePipeline`, as a struct. This handle is used to represent a compute pipeline within the SDL3 GPU API. It's used in conjunction with functions like `SDL_CreateGPUComputePipeline`, `SDL_BindGPUComputePipeline`, and `SDL_ReleaseGPUComputePipeline` during compute passes. The definition can be found in the SDL3/SDL_gpu.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUComputePipeline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUComputePipeline SDL_GPUComputePipeline;\n```\n\n----------------------------------------\n\nTITLE: Loading XCF Image from IO Stream using SDL_image in C\nDESCRIPTION: This snippet demonstrates how to load a XCF image from an SDL_IOStream using the IMG_LoadXCF_IO function from the SDL_image library.  The function takes an SDL_IOStream as input and returns an SDL_Surface pointer if successful, or NULL if an error occurred.  It's important to ensure SDL_image is properly initialized and that the IO stream points to valid XCF image data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadXCF_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadXCF_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyHatEvent Structure Definition in C\nDESCRIPTION: Defines the structure for representing a joystick hat position change event.  Includes members for the event type, timestamp, joystick instance ID, hat index, hat position value and padding. The hat position value uses predefined constants such as SDL_HAT_LEFTUP, SDL_HAT_UP, etc.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoyHatEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyHatEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_JOYSTICK_HAT_MOTION */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 hat;          /**< The joystick hat index */\n    Uint8 value;        /**< The hat position value.\n                         *   \\sa SDL_HAT_LEFTUP SDL_HAT_UP SDL_HAT_RIGHTUP\n                         *   \\sa SDL_HAT_LEFT SDL_HAT_CENTERED SDL_HAT_RIGHT\n                         *   \\sa SDL_HAT_LEFTDOWN SDL_HAT_DOWN SDL_HAT_RIGHTDOWN\n                         *\n                         *   Note that zero means the POV is centered.\n                         */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_JoyHatEvent;\n```\n\n----------------------------------------\n\nTITLE: Check Chunk Decoder Availability in SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax of the `Mix_HasChunkDecoder` function in SDL_mixer, which checks if a chunk decoder is available by name. This function returns SDL_TRUE if the decoder is available, and SDL_FALSE otherwise. The decoders are activated at device open time, so `Mix_OpenAudio` or `Mix_OpenAudioDevice` must be called before using this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_HasChunkDecoder.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_bool Mix_HasChunkDecoder(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Switching Xbox Live Sandbox (Command Line)\nDESCRIPTION: These commands are used to switch the Xbox Live sandbox for your title. This is useful when testing Xbox Live functionality.  You need to run the 'Desktop VS 2022 Gaming Command Prompt' to execute these.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_5\n\nLANGUAGE: Command Line\nCODE:\n```\nXblPCSandbox SANDBOX.#\n```\n\nLANGUAGE: Command Line\nCODE:\n```\nXblPCSandbox RETAIL\n```\n\n----------------------------------------\n\nTITLE: Get Text Color as Float in SDL_ttf (C)\nDESCRIPTION: Retrieves the RGBA color components of a text object as floating-point values using TTF_GetTextColorFloat. This function takes a TTF_Text object and pointers to float variables where the red, green, blue, and alpha values will be stored. The color values are typically in the range of 0-1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextColorFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextColorFloat(TTF_Text *text, float *r, float *g, float *b, float *a);\n```\n\n----------------------------------------\n\nTITLE: SDL_DrawGPUPrimitives Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_DrawGPUPrimitives function in C. This function draws data using the currently bound graphics state, specifying the render pass, number of vertices and instances, and starting indices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DrawGPUPrimitives.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_DrawGPUPrimitives(\n    SDL_GPURenderPass *render_pass,\n    Uint32 num_vertices,\n    Uint32 num_instances,\n    Uint32 first_vertex,\n    Uint32 first_instance);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddVulkanRenderSemaphores Syntax in C\nDESCRIPTION: This function adds a set of Vulkan synchronization semaphores for the current frame. It requires an SDL_Renderer, a wait stage mask, a wait semaphore, and a signal semaphore. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddVulkanRenderSemaphores.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_AddVulkanRenderSemaphores(SDL_Renderer *renderer, Uint32 wait_stage_mask, Sint64 wait_semaphore, Sint64 signal_semaphore);\n```\n\n----------------------------------------\n\nTITLE: SDL_TriggerBreakpoint Macro Definition in C\nDESCRIPTION: Defines the SDL_TriggerBreakpoint macro, which expands to TriggerABreakpointInAPlatformSpecificManner. This macro is intended to be used to programmatically trigger a breakpoint in an attached debugger. If no debugger is attached, calling this macro may terminate the program.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TriggerBreakpoint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TriggerBreakpoint() TriggerABreakpointInAPlatformSpecificManner\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_ENHANCED_REPORTS in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_ENHANCED_REPORTS macro, which is used to set the hint for enhanced joystick reports in SDL. This hint controls whether SDL uses enhanced reports for controllers, enabling features like rumble on PlayStation controllers and gyro on Nintendo Switch controllers, potentially affecting DirectInput compatibility.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_ENHANCED_REPORTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ENHANCED_REPORTS \"SDL_JOYSTICK_ENHANCED_REPORTS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDisplayForPoint Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetDisplayForPoint function in C.  It takes a pointer to an SDL_Point as input and returns an SDL_DisplayID, which is the instance ID of the display containing the specified point.  It returns 0 on failure, and SDL_GetError() can be called for more information. The function is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplayForPoint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayID SDL_GetDisplayForPoint(const SDL_Point *point);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetFloatProperty Syntax in C\nDESCRIPTION: Sets a floating-point property in a group of properties using SDL3. Requires the properties ID, property name, and the new floating-point value. Returns true on success, false on failure; use SDL_GetError() for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetFloatProperty.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetFloatProperty(SDL_PropertiesID props, const char *name, float value);\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUVertexSamplers Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_BindGPUVertexSamplers function, including its parameters and return type. The function binds texture-sampler pairs to specific slots for use in vertex shaders. It requires a render pass, a starting slot, an array of texture-sampler bindings, and the number of bindings.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUVertexSamplers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUVertexSamplers(\n    SDL_GPURenderPass *render_pass,\n    Uint32 first_slot,\n    const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,\n    Uint32 num_bindings);\n```\n\n----------------------------------------\n\nTITLE: Get Display Content Scale in SDL3\nDESCRIPTION: Retrieves the content scale of a given display using SDL_GetDisplayContentScale. The displayID parameter specifies the display to query. Returns the content scale as a float, or 0.0f on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplayContentScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetDisplayContentScale(SDL_DisplayID displayID);\n```\n\n----------------------------------------\n\nTITLE: Get Text Wrap Width SDL_ttf in C\nDESCRIPTION: This function retrieves the wrapping width of a TTF_Text object. It takes a TTF_Text pointer and an integer pointer as input. The integer pointer will be populated with the current wrap width or 0 if wrapping occurs on newline characters. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextWrapWidth.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextWrapWidth(TTF_Text *text, int *wrap_width);\n```\n\n----------------------------------------\n\nTITLE: Check if Application is Running on Chromebook (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_IsChromebook function, which returns a boolean value indicating whether the application is running on a Chromebook. It requires the SDL3/SDL_system.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsChromebook.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsChromebook(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_EndGPUComputePass Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_EndGPUComputePass function in C. It takes a pointer to an SDL_GPUComputePass as a parameter, which is the handle of the compute pass to end. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EndGPUComputePass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_EndGPUComputePass(\n    SDL_GPUComputePass *compute_pass);\n```\n\n----------------------------------------\n\nTITLE: Get Previous Text Substring - SDL_ttf\nDESCRIPTION: Retrieves the previous substring in a text object relative to the given substring. The `substring` parameter is the reference substring, and the previous substring is returned in the `previous` parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_111\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetPreviousTextSubString(TTF_Text *text, const TTF_SubString *substring, TTF_SubString *previous);\n```\n\n----------------------------------------\n\nTITLE: SDL_SurfaceHasAlternateImages Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SurfaceHasAlternateImages function in C. It takes a pointer to an SDL_Surface as input and returns a boolean value indicating whether the surface has alternate versions available. The function is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SurfaceHasAlternateImages.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SurfaceHasAlternateImages(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_THREAD in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_THREAD macro, which represents the string literal \"SDL_JOYSTICK_THREAD\". This macro is used as the name of the hint when setting its value using SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_THREAD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_THREAD \"SDL_JOYSTICK_THREAD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_SetJoystickVirtualButton Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetJoystickVirtualButton function. It takes a joystick pointer, a button index, and a boolean indicating whether the button is pressed as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetJoystickVirtualButton.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetJoystickVirtualButton(SDL_Joystick *joystick, int button, bool down);\n```\n\n----------------------------------------\n\nTITLE: Checking Glyph Availability C\nDESCRIPTION: This function checks whether a glyph is provided by the font for a given UNICODE codepoint. It requires a valid TTF_Font pointer and a Uint32 representing the codepoint. Returns true if the glyph is available, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_FontHasGlyph(TTF_Font *font, Uint32 ch);\n```\n\n----------------------------------------\n\nTITLE: Set Thread Priority in SDL (C)\nDESCRIPTION: This code snippet demonstrates the syntax for using the SDL_SetThreadPriority function to set the priority of the current thread. It takes an SDL_ThreadPriority enum value as input, which specifies the desired priority level.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetThreadPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetThreadPriority(SDL_ThreadPriority priority);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Stream Properties in SDL3\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAudioStreamProperties function in SDL3. It takes an SDL_AudioStream pointer as input and returns an SDL_PropertiesID representing the properties associated with the stream. A return value of 0 indicates failure, and SDL_GetError() can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetAudioStreamProperties(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Common Haptic Effect Properties in C\nDESCRIPTION: This code snippet illustrates the common properties shared by all haptic effects within SDL. These properties include replay attributes like duration and delay, trigger configurations such as button and interval, and envelope parameters that control the attack and fade phases of the effect. All of these properties impact the haptic experience.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticEffect.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n // Replay - All effects have this\n Uint32 length;        // Duration of effect (ms).\n Uint16 delay;         // Delay before starting effect.\n\n // Trigger - All effects have this\n Uint16 button;        // Button that triggers effect.\n Uint16 interval;      // How soon before effect can be triggered again.\n\n // Envelope - All effects except condition effects have this\n Uint16 attack_length; // Duration of the attack (ms).\n Uint16 attack_level;  // Level at the start of the attack.\n Uint16 fade_length;   // Duration of the fade out (ms).\n Uint16 fade_level;    // Level at the end of the fade.\n```\n\n----------------------------------------\n\nTITLE: Setting Post-Mix Callback Function in SDL_mixer (C)\nDESCRIPTION: This code snippet demonstrates how to set a post-mix callback function using `Mix_SetPostMix` in SDL_mixer. The callback function `mix_func` will be called after all mixing is performed, allowing access to the audio stream for processing or visualization. The `arg` pointer can be used to pass custom data to the callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetPostMix.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_SetPostMix(Mix_MixCallback mix_func, void *arg);\n```\n\n----------------------------------------\n\nTITLE: Check Channel Playing Status Mix_Playing C\nDESCRIPTION: Checks the playing status of a specific channel. This function returns a non-zero value if the channel is currently playing audio, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_29\n\nLANGUAGE: c\nCODE:\n```\nint Mix_Playing(int channel);\n```\n\n----------------------------------------\n\nTITLE: Install evtest utility on Ubuntu/Debian\nDESCRIPTION: This command installs the evtest utility on Ubuntu or Debian-based systems. evtest is a command-line tool that allows you to monitor input events generated by devices such as joysticks and keyboards, which is helpful for debugging joystick issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install evtest\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED in C\nDESCRIPTION: This snippet defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED macro, which is used as a key for setting the hint that controls the Xbox One controller's Home button LED behavior when using the HIDAPI driver. Setting the hint to \"0\" turns the LED off, \"1\" turns it on, and a floating-point value between 0.0 and 1.0 sets the LED brightness. By default, the LED state is not changed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED \"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED\"\n```\n\n----------------------------------------\n\nTITLE: Setting GPU Text Engine Winding Order in SDL_ttf (C)\nDESCRIPTION: This code snippet demonstrates the syntax for using the `TTF_SetGPUTextEngineWinding` function in SDL_ttf. It takes a `TTF_TextEngine` pointer and a `TTF_GPUTextEngineWinding` enum value as input to set the winding order of the text engine.  This affects the order in which vertices are processed for GPU rendering, useful for controlling front-face culling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetGPUTextEngineWinding.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetGPUTextEngineWinding(TTF_TextEngine *engine, TTF_GPUTextEngineWinding winding);\n```\n\n----------------------------------------\n\nTITLE: Get Tray Entry Enabled Status in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetTrayEntryEnabled function, which retrieves the enabled state of a given tray entry. It requires an SDL_TrayEntry pointer as input and returns a boolean indicating whether the entry is enabled (true) or disabled (false). The function is available since SDL 3.2.0 and should be called on the thread that created the tray.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTrayEntryEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTrayEntryEnabled(SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: Loading Images from SDL_IOStream\nDESCRIPTION: These functions load images from an SDL data source (SDL_IOStream) into a software surface or a GPU texture. `IMG_LoadTyped_IO` loads an image with a specified type. `IMG_Load_IO` loads an image, attempting to determine the type from the data. `IMG_LoadTextureTyped_IO` loads into a texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadTyped_IO(SDL_IOStream *src, bool closeio, const char *type);                                 // Load an image from an SDL data source into a software surface.\nSDL_Surface * IMG_Load_IO(SDL_IOStream *src, bool closeio);                                                        // Load an image from an SDL data source into a software surface.\nSDL_Texture * IMG_LoadTextureTyped_IO(SDL_Renderer *renderer, SDL_IOStream *src, bool closeio, const char *type);  // Load an image from an SDL data source into a GPU texture.\n```\n\n----------------------------------------\n\nTITLE: Pushing User Event in C\nDESCRIPTION: This code snippet shows how to create and push a user-defined event onto the SDL event queue using SDL_PushEvent. It initializes the SDL_Event structure, sets the type to SDL_USEREVENT, sets the code and data fields for the user event, and then pushes the event onto the queue.  SDL_zero is used to clear the event to avoid memory issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Event.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nSDL_Event user_event;\nSDL_zero(user_event);  /* SDL will copy this entire struct! Initialize to keep memory checkers happy. */\nuser_event.type = SDL_USEREVENT;\nuser_event.user.code = 2;\nuser_event.user.data1 = NULL;\nuser_event.user.data2 = NULL;\nSDL_PushEvent(&user_event);\n```\n\n----------------------------------------\n\nTITLE: Defining TTF_HorizontalAlignment Enum in C\nDESCRIPTION: This code snippet defines the `TTF_HorizontalAlignment` enum in C. The enum is used to specify the horizontal alignment of text rendered with SDL_ttf. It provides options for left, center, and right alignment, along with an invalid alignment option. This enum is part of the SDL_ttf library and available since version 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_HorizontalAlignment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum TTF_HorizontalAlignment\n{\n    TTF_HORIZONTAL_ALIGN_INVALID = -1,\n    TTF_HORIZONTAL_ALIGN_LEFT,\n    TTF_HORIZONTAL_ALIGN_CENTER,\n    TTF_HORIZONTAL_ALIGN_RIGHT\n} TTF_HorizontalAlignment;\n```\n\n----------------------------------------\n\nTITLE: List files on SD card via ADB shell\nDESCRIPTION: This command uses ADB to execute a shell command on the connected Android device, listing the files in the /sdcard directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nadb shell ls /sdcard/\n```\n\n----------------------------------------\n\nTITLE: Building with ndk-build\nDESCRIPTION: Executes the `ndk-build` command to compile the native code for the Android application. The `-j$(nproc)` option specifies the number of parallel build processes to use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nndk-build -j$(nproc)\n```\n\n----------------------------------------\n\nTITLE: HIDAPI License\nDESCRIPTION: This snippet shows the license under which the HIDAPI source code is distributed. It allows usage for any reason as long as the copyright notice remains intact.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/CategoryHIDAPI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nHIDAPI - Multi-Platform library for\ncommunication with HID devices.\n\nCopyright 2009, Alan Ott, Signal 11 Software.\nAll Rights Reserved.\n\nThis software may be used by anyone for any reason so\nlong as the copyright notice in the source files\nremains intact.\n```\n\n----------------------------------------\n\nTITLE: Set Windows Message Hook SDL (C)\nDESCRIPTION: Sets a callback function to be executed for every Windows message before TranslateMessage() is called. This allows custom processing of Windows messages at a low level. It takes the callback function and a user-defined data pointer as arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowsMessageHook.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowsMessageHook(SDL_WindowsMessageHook callback, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Open Sensor Using SDL_SensorOpen in C\nDESCRIPTION: This code snippet demonstrates how to open a sensor using the SDL_SensorOpen function in C. It takes the device index as input and returns a pointer to the opened sensor, or NULL if an error occurs. Ensure the SDL2 library is properly linked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorOpen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Sensor* SDL_SensorOpen(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_WinRT_DeviceFamily enum in C\nDESCRIPTION: This code snippet defines the `SDL_WinRT_DeviceFamily` enumeration in C. It allows applications to identify the Windows Runtime device family they are running on. The enum includes members for Unknown, Desktop, Mobile, and XBox device families.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WinRT_DeviceFamily.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_WinRT_DeviceFamily\n{\n    /** \\brief Unknown family  */\n    SDL_WINRT_DEVICEFAMILY_UNKNOWN,\n\n    /** \\brief Desktop family*/\n    SDL_WINRT_DEVICEFAMILY_DESKTOP,\n\n    /** \\brief Mobile family (for example smartphone) */\n    SDL_WINRT_DEVICEFAMILY_MOBILE,\n\n    /** \\brief XBox family */\n    SDL_WINRT_DEVICEFAMILY_XBOX,\n} SDL_WinRT_DeviceFamily;\n```\n\n----------------------------------------\n\nTITLE: SDL TLS Set Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_TLSSet function. It sets a thread-local storage value, taking an ID, a value, and a destructor function as arguments. It returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TLSSet.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_TLSSet(SDL_TLSID id, const void *value, SDL_TLSDestructorCallback destructor);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadWAV Usage Example (C)\nDESCRIPTION: Illustrates a simpler method of loading a WAV file using SDL_LoadWAV. This function handles file opening internally, simplifying the loading process compared to SDL_LoadWAV_IO.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LoadWAV_IO.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nSDL_LoadWAV(\"sample.wav\", &spec, &buf, &len);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Ball Motion - C\nDESCRIPTION: Retrieves the ball axis change since the last poll for a specified joystick. The function takes a joystick pointer, ball index, and pointers to store the x and y axis changes. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickBall.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetJoystickBall(SDL_Joystick *joystick, int ball, int *dx, int *dy);\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertAudio Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ConvertAudio function in C, which converts audio data to a specified format using a pre-configured SDL_AudioCVT structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ConvertAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_ConvertAudio(SDL_AudioCVT * cvt);\n```\n\n----------------------------------------\n\nTITLE: Rendering Blended Text C\nDESCRIPTION: This function renders UTF-8 text at high quality to a new ARGB surface. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, and an SDL_Color structure for the foreground color. Returns an SDL_Surface pointer containing the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Blended(TTF_Font *font, const char *text, size_t length, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: SDL_MessageBoxColorType Enum Definition in C\nDESCRIPTION: This code defines the SDL_MessageBoxColorType enumeration in C. It specifies the valid color types for customizing the appearance of message boxes, including background, text, button border, button background, and button selection. The SDL_MESSAGEBOX_COLOR_COUNT member provides the number of colors in the color scheme array.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxColorType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_MessageBoxColorType\n{\n    SDL_MESSAGEBOX_COLOR_BACKGROUND,\n    SDL_MESSAGEBOX_COLOR_TEXT,\n    SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,\n    SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,\n    SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,\n    SDL_MESSAGEBOX_COLOR_COUNT                    /**< Size of the colors array of SDL_MessageBoxColorScheme. */\n} SDL_MessageBoxColorType;\n```\n\n----------------------------------------\n\nTITLE: Setting Surface Alpha Mod SDL3 (C)\nDESCRIPTION: Sets an additional alpha value used in blit operations. This function takes an SDL_Surface pointer and an alpha value (Uint8) as input. During blitting, the source alpha is modulated by this value. Returns true on success, false on failure. Call SDL_GetError() for more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetSurfaceAlphaMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetSurfaceAlphaMod(SDL_Surface *surface, Uint8 alpha);\n```\n\n----------------------------------------\n\nTITLE: Render LCD Glyph C\nDESCRIPTION: This function renders a single UNICODE codepoint at LCD subpixel quality to a new ARGB surface.  It requires a font, the unicode character, a foreground color, and a background color. The function returns a pointer to the SDL_Surface that was created, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_68\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_LCD(TTF_Font *font, Uint32 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_GDK in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_GDK macro in C. The macro is defined as 1 when compiling for Microsoft GDK, enabling platform-specific code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_GDK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_GDK 1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS in C\nDESCRIPTION: This code defines the SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS macro, used to enable or disable joystick and gamecontroller events when the application is in the background. It is defined as a string \"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\". The macro allows setting the corresponding hint using SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS \"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUPrimitiveType Definition in C\nDESCRIPTION: Defines the SDL_GPUPrimitiveType enumeration, which specifies the primitive topology for a graphics pipeline. It includes options for triangle lists, triangle strips, line lists, line strips, and point lists. The enum is used to define how vertex data is interpreted during rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUPrimitiveType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUPrimitiveType\n{\n    SDL_GPU_PRIMITIVETYPE_TRIANGLELIST,  /**< A series of separate triangles. */\n    SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP, /**< A series of connected triangles. */\n    SDL_GPU_PRIMITIVETYPE_LINELIST,      /**< A series of separate lines. */\n    SDL_GPU_PRIMITIVETYPE_LINESTRIP,     /**< A series of connected lines. */\n    SDL_GPU_PRIMITIVETYPE_POINTLIST      /**< A series of separate points. */\n} SDL_GPUPrimitiveType;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_LUNA in C\nDESCRIPTION: This C code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_LUNA macro. It specifies the string literal that corresponds to this hint, which can then be used with SDL_SetHint or SDL_GetHint to control the behavior of the joystick subsystem regarding HIDAPI drivers for Amazon Luna controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_LUNA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_LUNA \"SDL_JOYSTICK_HIDAPI_LUNA\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_iconv_t as Opaque Handle in C\nDESCRIPTION: This code snippet defines SDL_iconv_t as a pointer to an incomplete structure SDL_iconv_data_t, making it an opaque handle. This hides the internal implementation details of the string encoding conversion state from the user, allowing the SDL library to modify the structure without breaking external code. It is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv_t.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_iconv_data_t *SDL_iconv_t;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS in C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS macro to the string \"SDL_GAMECONTROLLER_USE_BUTTON_LABELS\". This macro is used to set the hint using SDL_SetHint.  It allows developers to specify whether game controller face buttons should be reported by their position or their labels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLER_USE_BUTTON_LABELS \"SDL_GAMECONTROLLER_USE_BUTTON_LABELS\"\n```\n\n----------------------------------------\n\nTITLE: Setting Window Maximum Size in SDL2 (C)\nDESCRIPTION: Sets the maximum width and height of a window's client area.  It requires a pointer to an SDL_Window and the desired maximum width and height as integer values. This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowMaximumSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowMaximumSize(SDL_Window * window,\n                              int max_w, int max_h);\n```\n\n----------------------------------------\n\nTITLE: IMG_Load_IO Syntax (C)\nDESCRIPTION: Defines the syntax for the IMG_Load_IO function, which loads an image from an SDL_IOStream into a software surface.\nThe function takes an SDL_IOStream pointer and a boolean indicating whether to close the stream after loading as input.\nIt returns a pointer to the created SDL_Surface, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_Load_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_Load_IO(SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Building SDL2 for PS2 (CMake)\nDESCRIPTION: This snippet demonstrates how to build the SDL2 library for the PS2 using CMake. It sets the build type to Release and specifies the PS2 toolchain file.  It assumes the PS2DEV environment variable is set to the location of the PS2 SDK.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/ps2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PS2DEV/ps2sdk/ps2dev.cmake\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Rendering LCD Glyph C\nDESCRIPTION: This function renders a single UNICODE codepoint at LCD subpixel quality to a new ARGB surface. It requires a valid TTF_Font pointer, a Uint32 representing the codepoint, an SDL_Color structure for the foreground color, and an SDL_Color structure for the background color. Returns an SDL_Surface pointer containing the rendered glyph.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_42\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_LCD(TTF_Font *font, Uint32 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUNICODE_LCD_Wrapped Syntax in C\nDESCRIPTION: This is the function signature for TTF_RenderUNICODE_LCD_Wrapped, used to render UCS-2 text with LCD subpixel rendering and word wrapping in SDL_ttf. It takes a font, text (in UCS-2 encoding), foreground and background colors, and a wrap length as input. It returns a pointer to a new SDL_Surface or NULL if an error occurred. Note that it expects UCS-2 encoding, not full Unicode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUNICODE_LCD_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUNICODE_LCD_Wrapped(TTF_Font *font,\n                const Uint16 *text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Get Music Copyright Tag in SDL_mixer\nDESCRIPTION: This function retrieves the copyright text associated with a given music object. It takes a Mix_Music pointer as input and returns a const char* representing the copyright information. If the music object is NULL, it queries the currently playing music. The function returns an empty string if no copyright information is available. It is part of the SDL_mixer library and has been available since SDL_mixer 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicCopyrightTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicCopyrightTag(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL Hat Definitions in C\nDESCRIPTION: Defines constants representing the possible states of a joystick hat. These constants can be combined using bitwise OR to represent diagonal directions. The constants are used as return values from functions like SDL_GetJoystickHat.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickHat.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAT_CENTERED    0x00u\n#define SDL_HAT_UP          0x01u\n#define SDL_HAT_RIGHT       0x02u\n#define SDL_HAT_DOWN        0x04u\n#define SDL_HAT_LEFT        0x08u\n#define SDL_HAT_RIGHTUP     (SDL_HAT_RIGHT|SDL_HAT_UP)\n#define SDL_HAT_RIGHTDOWN   (SDL_HAT_RIGHT|SDL_HAT_DOWN)\n#define SDL_HAT_LEFTUP      (SDL_HAT_LEFT|SDL_HAT_UP)\n#define SDL_HAT_LEFTDOWN    (SDL_HAT_LEFT|SDL_HAT_DOWN)\n```\n\n----------------------------------------\n\nTITLE: Setting Font Direction with TTF_SetFontDirection in C\nDESCRIPTION: Sets the direction for text shaping using a specified font. This function takes a TTF_Font pointer and a TTF_Direction enum value as input. It returns 0 on success or -1 on error, and it requires SDL_ttf to be built with HarfBuzz support. Any value supplied here will override the global direction set with the deprecated [TTF_SetDirection](TTF_SetDirection)().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontDirection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_SetFontDirection(TTF_Font *font, TTF_Direction direction);\n```\n\n----------------------------------------\n\nTITLE: Set Text Color with Float - SDL_ttf - C\nDESCRIPTION: This code snippet shows how to use the TTF_SetTextColorFloat function from the SDL_ttf library to set the color of a text object. The function takes a pointer to a TTF_Text object and four float values representing the red, green, blue, and alpha components of the desired color. These color values are typically in the range of 0.0 to 1.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextColorFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextColorFloat(TTF_Text *text, float r, float g, float b, float a);\n```\n\n----------------------------------------\n\nTITLE: SDL_ISPIXELFORMAT_ALPHA Macro Definition in C\nDESCRIPTION: This macro checks if a given SDL_PixelFormat has an alpha channel. It examines the pixel format to determine if it is packed or array format and if the pixel order includes alpha components (ARGB, RGBA, ABGR, or BGRA).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISPIXELFORMAT_ALPHA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISPIXELFORMAT_ALPHA(format)   \\\n    ((SDL_ISPIXELFORMAT_PACKED(format) && \\\n      ((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) || \\\n       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA) || \\\n       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR) || \\\n       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA))) || \\\n     (SDL_ISPIXELFORMAT_ARRAY(format) && \\\n      ((SDL_PIXELORDER(format) == SDL_ARRAYORDER_ARGB) || \\\n       (SDL_PIXELORDER(format) == SDL_ARRAYORDER_RGBA) || \\\n       (SDL_PIXELORDER(format) == SDL_ARRAYORDER_ABGR) || \\\n       (SDL_PIXELORDER(format) == SDL_ARRAYORDER_BGRA))))\n```\n\n----------------------------------------\n\nTITLE: Getting Glyph Metrics C\nDESCRIPTION: This function queries the metrics (dimensions) of a font's glyph for a given UNICODE codepoint. It requires a valid TTF_Font pointer, a Uint32 representing the codepoint, and pointers to integers to store the minx, maxx, miny, maxy, and advance values. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetGlyphMetrics(TTF_Font *font, Uint32 ch, int *minx, int *maxx, int *miny, int *maxy, int *advance);\n```\n\n----------------------------------------\n\nTITLE: Get Original Memory Functions in SDL (C)\nDESCRIPTION: Retrieves the original memory allocation functions (malloc, calloc, realloc, free) used by SDL. These are the default functions used by SDL_malloc and related functions if SDL_SetMemoryFunctions has not been called.  The function populates the provided pointers with the addresses of the respective memory allocation functions. It requires SDL3/SDL_stdinc.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetOriginalMemoryFunctions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetOriginalMemoryFunctions(SDL_malloc_func *malloc_func,\n                                SDL_calloc_func *calloc_func,\n                                SDL_realloc_func *realloc_func,\n                                SDL_free_func *free_func);\n```\n\n----------------------------------------\n\nTITLE: Set Window Border State using SDL_SetWindowBordered (C)\nDESCRIPTION: This code snippet demonstrates the syntax for the SDL_SetWindowBordered function, which is used to set the border state of a specified SDL window. The function takes an SDL_Window pointer and an SDL_bool value (SDL_TRUE or SDL_FALSE) as input. It modifies the window's border appearance based on the provided boolean value, provided the window isn't fullscreen.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowBordered.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowBordered(SDL_Window * window,\n                           SDL_bool bordered);\n```\n\n----------------------------------------\n\nTITLE: TTF_MeasureText Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_MeasureText function from the SDL_ttf library. It takes a font, a Latin1 encoded string, a maximum width, and pointers to integers for storing the calculated width and character count. The function returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_MeasureText.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_MeasureText(TTF_Font *font, const char *text, int measure_width, int *extent, int *count);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES macro, which is used to set the hint that controls deadzone application for digital hats on Linux joysticks.  The macro expands to the string \"SDL_JOYSTICK_LINUX_HAT_DEADZONES\". This hint should be set before a controller is opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES \"SDL_JOYSTICK_LINUX_HAT_DEADZONES\"\n```\n\n----------------------------------------\n\nTITLE: Get D3D9 Adapter Index in SDL2 (C)\nDESCRIPTION: Retrieves the Direct3D 9 adapter index associated with a specific display index. The displayIndex parameter specifies the display to query. The function returns the adapter index on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Direct3D9GetAdapterIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_Direct3D9GetAdapterIndex( int displayIndex );\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ThreadPriority enum in C\nDESCRIPTION: Defines the SDL_ThreadPriority enumeration, which specifies the possible priority levels for SDL threads. These levels are low, normal, high, and time-critical. SDL attempts to apply the thread priority, and on some systems, special privileges are required to set high or time-critical priority.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ThreadPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ThreadPriority {\n    SDL_THREAD_PRIORITY_LOW,\n    SDL_THREAD_PRIORITY_NORMAL,\n    SDL_THREAD_PRIORITY_HIGH,\n    SDL_THREAD_PRIORITY_TIME_CRITICAL\n} SDL_ThreadPriority;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Pixel Order from SDL_PixelFormat in C\nDESCRIPTION: This macro extracts the pixel order from an SDL_PixelFormat value. It takes an SDL_PixelFormat as input and returns the pixel order. The pixel order is typically a value from SDL_BitmapOrder, SDL_PackedOrder, or SDL_ArrayOrder enumerations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PIXELORDER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PIXELORDER(format)   (((format) >> 20) & 0x0F)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_main_func in C\nDESCRIPTION: This code snippet defines the SDL_main_func typedef, specifying the signature for the application's main function. The main function takes an integer argument count (argc) and a character pointer array (argv) as parameters, and returns an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_main_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int (*SDL_main_func)(int argc, char *argv[]);\n```\n\n----------------------------------------\n\nTITLE: Building with Verbose Output using ndk-build (Shell)\nDESCRIPTION: This command line argument passed to ndk-build enables verbose output, displaying the complete command line used during the build process. This is helpful for debugging build issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_17\n\nLANGUAGE: Shell\nCODE:\n```\nndk-build V=1\n```\n\n----------------------------------------\n\nTITLE: CMake macOS Build (dylib/static) with x86_64 and arm64\nDESCRIPTION: This CMake command configures SDL3 for macOS, building a dynamic library (dylib) and/or static library for both x86_64 and arm64 architectures. It sets the target operating system to Darwin and specifies the architectures. It also defines the minimum macOS deployment target as 10.11.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11\n```\n\n----------------------------------------\n\nTITLE: SDL_SECONDS_TO_NS Macro Definition in C\nDESCRIPTION: Defines the SDL_SECONDS_TO_NS macro, which converts seconds to nanoseconds by multiplying the input seconds (S) by SDL_NS_PER_SECOND. This conversion is limited to whole numbers of seconds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SECONDS_TO_NS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SECONDS_TO_NS(S)    (((Uint64)(S)) * SDL_NS_PER_SECOND)\n```\n\n----------------------------------------\n\nTITLE: Save SDL_Surface to JPG via SDL_IOStream in C\nDESCRIPTION: This function saves an SDL_Surface into JPEG image data using an SDL_IOStream. It takes an SDL_Surface pointer, an SDL_IOStream pointer, a boolean indicating whether to close the IO stream, and an integer representing the image quality. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveJPG_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio, int quality);\n```\n\n----------------------------------------\n\nTITLE: Check if IME Window is Shown - SDL2 - C\nDESCRIPTION: This code snippet shows the syntax for the `SDL_IsTextInputShown` function in SDL2. It takes no arguments and returns an SDL_bool indicating whether an IME composite or candidate window is currently displayed. The function is available since SDL 2.0.22.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsTextInputShown.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IsTextInputShown(void);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeInMusic Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_FadeInMusic function in C. This function plays a new music object, fading in the audio over a specified duration. It takes a Mix_Music pointer, the number of loops, and the fade-in duration in milliseconds as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadeInMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_FadeInMusic(Mix_Music *music, int loops, int ms);\n```\n\n----------------------------------------\n\nTITLE: Calculate Union of Rectangles SDL_UnionRect in C\nDESCRIPTION: Calculates the union of two rectangles A and B, storing the result in the result rectangle.  A, B, and result are SDL_Rect structures. The function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnionRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnionRect(const SDL_Rect * A,\n                   const SDL_Rect * B,\n                   SDL_Rect * result);\n```\n\n----------------------------------------\n\nTITLE: SDL_exp Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_exp function, which computes the exponential of a double-precision floating-point value in SDL3. It takes a double as input and returns a double representing e^x.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_exp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_exp(double x);\n```\n\n----------------------------------------\n\nTITLE: Check GPU Present Mode Support SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_WindowSupportsGPUPresentMode function, which is used to check if a specific GPU presentation mode is supported by a window. It requires an SDL_GPUDevice pointer, an SDL_Window pointer, and an SDL_GPUPresentMode enum value as input and returns a boolean value indicating support. The window must be claimed before calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WindowSupportsGPUPresentMode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_WindowSupportsGPUPresentMode(\n    SDL_GPUDevice *device,\n    SDL_Window *window,\n    SDL_GPUPresentMode present_mode);\n```\n\n----------------------------------------\n\nTITLE: Load GIF Animation from SDL_IOStream C\nDESCRIPTION: This function loads a GIF animation directly from an SDL_IOStream. It takes an SDL_IOStream pointer as input and returns a pointer to an IMG_Animation object, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadGIFAnimation_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_vasprintf Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_vasprintf function. The function takes a pointer to a char pointer, a format string, and a va_list as input. It allocates memory for the formatted string and sets the char pointer to point to the newly allocated memory. The function returns the number of bytes in the newly allocated string, not counting the null terminator, or a negative value on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_vasprintf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_vasprintf(char **strp, const char *fmt, va_list ap);\n```\n\n----------------------------------------\n\nTITLE: memcpy Function Annotation Example in C\nDESCRIPTION: This snippet demonstrates how to use SDL_OUT_BYTECAP to annotate the dst parameter of the memcpy function, indicating that it has a capacity of bufsize bytes and is only written to by the function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OUT_BYTECAP.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid *memcpy(SDL_OUT_BYTECAP(bufsize) void *dst, const void *src, size_t bufsize);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Player Index by ID - SDL3 (C)\nDESCRIPTION: This C code snippet shows the syntax of the `SDL_GetGamepadPlayerIndexForID` function from SDL3. It takes an `SDL_JoystickID` as input, representing the gamepad's instance ID, and returns an integer representing the player index associated with that gamepad. A return value of -1 indicates that the player index is not available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadPlayerIndexForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetGamepadPlayerIndexForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Mix_GetMusicArtistTag Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_GetMusicArtistTag function which retrieves the artist name from a Mix_Music object. The function takes a pointer to a Mix_Music object as input and returns a constant character pointer representing the artist's name or an empty string if unavailable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicArtistTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicArtistTag(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TouchDeviceType Enum in C\nDESCRIPTION: This code snippet defines the `SDL_TouchDeviceType` enum, which specifies the different types of touch devices. It includes values for invalid devices, direct touch screens (window-relative coordinates), and indirect trackpads (absolute device coordinates or screen cursor-relative coordinates). This enum is available since SDL 3.2.0 and is part of the SDL_touch.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TouchDeviceType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_TouchDeviceType\n{\n    SDL_TOUCH_DEVICE_INVALID = -1,\n    SDL_TOUCH_DEVICE_DIRECT,            /**< touch screen with window-relative coordinates */\n    SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE, /**< trackpad with absolute device coordinates */\n    SDL_TOUCH_DEVICE_INDIRECT_RELATIVE  /**< trackpad with screen cursor-relative coordinates */\n} SDL_TouchDeviceType;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FOURCC Macro in C\nDESCRIPTION: This code snippet defines the SDL_FOURCC macro, which takes four ASCII characters as input and combines them into a 32-bit unsigned integer. Each character is cast to Uint8 to ensure only the least significant byte is used, then cast to Uint32 and bit-shifted to its correct position in the resulting integer. The macro is used to create a unique identifier from four characters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FOURCC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_FOURCC(A, B, C, D) \\\n    ((SDL_static_cast(Uint32, SDL_static_cast(Uint8, (A))) << 0) | \\\n     (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (B))) << 8) | \\\n     (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (C))) << 16) | \\\n     (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (D))) << 24))\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED hint. This hint is used to control the Home button LED on Nintendo Switch Joy-Con controllers. The value can be \"0\" to turn off the LED, \"1\" to turn it on, or a floating-point value between 0.0 and 1.0 for brightness.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED \"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_wcsdup Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_wcsdup` function in C. It takes a constant wide character string as input and returns a pointer to a newly allocated wide character string. The allocated memory must be freed using `SDL_free` after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcsdup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nwchar_t * SDL_wcsdup(const wchar_t *wstr);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_ASSERT Hint in C\nDESCRIPTION: This code snippet defines the SDL_HINT_ASSERT macro, which is used to control the response to SDL_assert failures. It's a string literal that represents the name of the hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ASSERT.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_ASSERT \"SDL_ASSERT\"\n```\n\n----------------------------------------\n\nTITLE: Loading PCX Image from RWops - SDL_image (C)\nDESCRIPTION: This code snippet shows the syntax for the IMG_LoadPCX_RW function in the SDL_image library. It loads a PCX image from an SDL_RWops stream. The function returns an SDL_Surface pointer on success, or NULL on failure. It skips the automatic file format detection of SDL_image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadPCX_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadPCX_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: TTF_FontHasGlyph Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_FontHasGlyph function in C. It takes a pointer to a TTF_Font structure and a Uint32 representing a Unicode codepoint as input. The function returns a boolean value indicating whether the font provides a glyph for the specified codepoint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_FontHasGlyph.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_FontHasGlyph(TTF_Font *font, Uint32 ch);\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyRenderer Syntax in C\nDESCRIPTION: Destroys the rendering context for a window and frees associated textures. The function takes a pointer to the SDL_Renderer as an argument. If the renderer is NULL, the function sets an SDL error message.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DestroyRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyRenderer(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: Mix_EachSoundFont Syntax C\nDESCRIPTION: The `Mix_EachSoundFont` function iterates through semicolon-delimited SoundFont paths and executes a callback function for each. The function takes a callback function (`Mix_EachSoundFontCallback`) and a user-defined data pointer as input. It returns `true` if the callback ever returns `true`, `false` otherwise. This function is available since SDL_mixer 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_EachSoundFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_EachSoundFont(Mix_EachSoundFontCallback function, void *data);\n```\n\n----------------------------------------\n\nTITLE: Unlocking an SDL Surface in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_UnlockSurface function. It takes a pointer to an SDL_Surface structure as input and unlocks the surface, allowing SDL to manage the surface data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnlockSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockSurface(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: Loading Dollar Gesture Templates with SDL_LoadDollarTemplates in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_LoadDollarTemplates function to load Dollar Gesture templates from a file. It takes a SDL_TouchID and a SDL_RWops pointer as input and returns the number of loaded templates or an error code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadDollarTemplates.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTyped_RW Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_LoadTyped_RW function in C. It takes an SDL_RWops pointer, an integer for freeing the source, and a file type string as input, and returns an SDL_Surface pointer. The SDL_RWops represents the data source, freesrc determines whether the RWops should be closed after reading, and type specifies the file format (e.g., \"BMP\", \"PNG\").\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadTyped_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadTyped_RW(SDL_RWops *src, int freesrc, const char *type);\n```\n\n----------------------------------------\n\nTITLE: Get Android SDK Version with SDL\nDESCRIPTION: Retrieves the Android API level of the current device. This function returns an integer representing the API level, which can be mapped to specific Android versions. The function is available since SDL 2.0.12 and requires including SDL_system.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAndroidSDKVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetAndroidSDKVersion(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_DEPRECATED Macro Definition in SDL_begin_code.h\nDESCRIPTION: This code snippet shows the definition of the SDL_DEPRECATED macro in the SDL_begin_code.h header file. The macro uses the __attribute__((deprecated)) compiler attribute if supported, otherwise it is defined as nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEPRECATED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_DEPRECATED __attribute__((deprecated))\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES macro as a string literal. This string is used as the key when setting or retrieving the hint using SDL_SetHint or SDL_GetHint functions. This hint controls whether SDL uses macOS Spaces for fullscreen windows.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES \"SDL_VIDEO_MAC_FULLSCREEN_SPACES\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_INTRESOURCE_ICON in C\nDESCRIPTION: This code snippet defines the SDL_HINT_WINDOWS_INTRESOURCE_ICON macro as a string literal. This hint is used to specify the resource ID of a custom icon to be used for the application window on Windows platforms. The macro should be defined before SDL_Init is called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_INTRESOURCE_ICON.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_INTRESOURCE_ICON       \"SDL_WINDOWS_INTRESOURCE_ICON\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetScancodeFromName Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetScancodeFromName function in C. The function takes a const char * name as input, which represents the human-readable scancode name, and returns an SDL_Scancode value. If the name is not recognized, it returns SDL_SCANCODE_UNKNOWN.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetScancodeFromName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Scancode SDL_GetScancodeFromName(const char *name);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawLinesF Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderDrawLinesF function in C. This function draws a series of connected lines on the current rendering target with subpixel precision. It requires an SDL_Renderer, an array of SDL_FPoint structures representing the points along the lines, and the number of points to draw (count-1 lines).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawLinesF.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_RenderDrawLinesF(SDL_Renderer * renderer,\n                         const SDL_FPoint * points,\n                         int count);\n```\n\n----------------------------------------\n\nTITLE: IMG_isTIF Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the IMG_isTIF function, which determines if an SDL_IOStream contains TIFF image data.\nIt takes an SDL_IOStream pointer as input and returns a boolean value indicating whether the data is in TIFF format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isTIF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isTIF(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_SignalCondition Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SignalCondition function. It takes a pointer to an SDL_Condition structure as input, which represents the condition variable to signal. The function does not return any value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SignalCondition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SignalCondition(SDL_Condition *cond);\n```\n\n----------------------------------------\n\nTITLE: Render Blended Glyph C\nDESCRIPTION: This function renders a single UNICODE codepoint at high quality to a new ARGB surface. It takes a font, the unicode character, and a color. The function returns a pointer to the SDL_Surface that was created, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_65\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Blended(TTF_Font *font, Uint32 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Deinitializing SDL_ttf with TTF_Quit in C\nDESCRIPTION: This code snippet shows the syntax for deinitializing the SDL_ttf library using the TTF_Quit function. It requires no input parameters and returns void. It's essential to call this function to free resources and before exiting the program.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: Destroy GPU Render State in SDL3 (C)\nDESCRIPTION: Destroys a previously created custom GPU render state. This function should be called on the same thread that created the renderer to ensure thread safety. It takes a pointer to the SDL_GPURenderState to be destroyed as a parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyGPURenderState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyGPURenderState(SDL_GPURenderState *state);\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_net with SDLNet_Init in C\nDESCRIPTION: Initializes the SDL_net library. This function must be called before using most SDL_net functions. It returns true on success and false on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDLNet_Init(void);\n```\n\n----------------------------------------\n\nTITLE: udev rule to set joystick permissions and ID\nDESCRIPTION: This udev rule sets the permissions (MODE) and joystick identification (ID_INPUT_JOYSTICK) for Saitek Pro Flight Rudder Pedals. It targets specific devices based on their vendor ID (idVendor) and product ID (idProduct).  The rule ensures that the device is accessible by all users and that SDL recognizes it as a joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"input\", ATTRS{idProduct}==\"0763\", ATTRS{idVendor}==\"06a3\", MODE=\"0666\", ENV{ID_INPUT_JOYSTICK}=\"1\"\nSUBSYSTEM==\"input\", ATTRS{idProduct}==\"0764\", ATTRS{idVendor}==\"06a3\", MODE=\"0666\", ENV{ID_INPUT_JOYSTICK}=\"1\"\n```\n\n----------------------------------------\n\nTITLE: SDL_LockSurface Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_LockSurface function in C. It takes a pointer to an SDL_Surface structure as input and returns an integer indicating success or failure. The function prepares the surface for direct pixel access.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_LockSurface(SDL_Surface * surface);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetGlyphKerning Syntax (C)\nDESCRIPTION: Defines the syntax for the TTF_GetGlyphKerning function, which retrieves the kerning size between two glyphs in an SDL_ttf font. The function requires a font, two Unicode codepoints, and a pointer to an integer to store the kerning value.  It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetGlyphKerning.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetGlyphKerning(TTF_Font *font, Uint32 previous_ch, Uint32 ch, int *kerning);\n```\n\n----------------------------------------\n\nTITLE: Stop all haptic effects with SDL_HapticStopAll in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_HapticStopAll function. It takes a pointer to an SDL_Haptic device as input and stops all currently playing effects on that device. It returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticStopAll.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticStopAll(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_JOYSTICK_AXIS_MAX in C\nDESCRIPTION: This code defines the SDL_JOYSTICK_AXIS_MAX macro, which represents the maximum possible value reported by an SDL_Joystick axis. This macro is defined to be 32767. It is included in the SDL3/SDL_joystick.h header file and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JOYSTICK_AXIS_MAX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_JOYSTICK_AXIS_MAX   32767\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_GAMEINPUT in C\nDESCRIPTION: This C code defines the SDL_HINT_WINDOWS_GAMEINPUT macro as a string literal. This hint controls the usage of GameInput for raw keyboard and mouse input on Windows. Setting it before SDL initialization influences the input handling mechanism.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_GAMEINPUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_GAMEINPUT   \"SDL_WINDOWS_GAMEINPUT\"\n```\n\n----------------------------------------\n\nTITLE: TTF_GlyphMetrics32 Function Definition in C\nDESCRIPTION: Defines the TTF_GlyphMetrics32 function used to query the metrics (dimensions) of a font's 32-bit glyph. It takes a TTF_Font pointer, a Uint32 character code, and pointers to integers for minx, maxx, miny, maxy, and advance as parameters. This function is available since SDL_ttf 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GlyphMetrics32.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_GlyphMetrics32(TTF_Font *font, Uint32 ch,\nint *minx, int *maxx,\nint *miny, int *maxy, int *advance);\n```\n\n----------------------------------------\n\nTITLE: Minimize SDL Window in C\nDESCRIPTION: This code snippet demonstrates how to minimize an SDL window using the SDL_MinimizeWindow function. The function takes a pointer to an SDL_Window as its only argument.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MinimizeWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_MinimizeWindow(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Check Screensaver Status using SDL_ScreenSaverEnabled in C\nDESCRIPTION: This code snippet shows the syntax for using the `SDL_ScreenSaverEnabled` function in C. It checks if the screensaver is enabled and returns a boolean value accordingly. This function requires the SDL3 library and should be called from the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ScreenSaverEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ScreenSaverEnabled(void);\n```\n\n----------------------------------------\n\nTITLE: Check Game Controller Sensor State in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerIsSensorEnabled function, which is used to determine if a specified sensor type is enabled on a given SDL_GameController. The function requires a valid SDL_GameController pointer and an SDL_SensorType enum value as input. It returns SDL_TRUE if the sensor is enabled and SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerIsSensorEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GameControllerIsSensorEnabled(SDL_GameController *gamecontroller, SDL_SensorType type);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_8BITDO in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_8BITDO macro as a string literal. This string literal is used as the key when setting or retrieving the hint using SDL_SetHint and SDL_GetHint. This hint controls whether SDL uses the HIDAPI driver for 8BitDo controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_8BITDO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_8BITDO \"SDL_JOYSTICK_HIDAPI_8BITDO\"\n```\n\n----------------------------------------\n\nTITLE: Building SDL2 Android App with androidbuild.sh\nDESCRIPTION: This script simplifies building simple SDL2 Android applications. It takes the application's package name and a list of source files as input. The script compiles the source files, creates an Android project, and generates a debug APK.  All source files must have unique names as they are placed in a single directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nandroidbuild.sh com.yourcompany.yourapp < sources.list\nandroidbuild.sh com.yourcompany.yourapp source1.c source2.c ...sourceN.c\n```\n\nLANGUAGE: sh\nCODE:\n```\n./androidbuild.sh org.libsdl.testgles ../test/testgles.c\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAtomicInt Syntax (C)\nDESCRIPTION: Shows the syntax of the SDL_SetAtomicInt function in C. This function sets the value of an atomic integer and returns its previous value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAtomicInt.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetAtomicInt(SDL_AtomicInt *a, int v);\n```\n\n----------------------------------------\n\nTITLE: SDL_GDKSuspendGPU Function Definition (C)\nDESCRIPTION: Defines the SDL_GDKSuspendGPU function, which suspends GPU operations on Xbox when receiving the SDL_EVENT_DID_ENTER_BACKGROUND event. It takes an SDL_GPUDevice pointer as input. No SDL_GPU functions should be called after this function is called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GDKSuspendGPU.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GDKSuspendGPU(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: Check if SDL Surface has RLE Enabled (SDL_SurfaceHasRLE) - C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_SurfaceHasRLE function to check if an SDL_Surface is RLE enabled. It takes an SDL_Surface pointer as input and returns a boolean value indicating the RLE status. A NULL surface input is safe and will return false.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SurfaceHasRLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SurfaceHasRLE(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Sensor Structure in C\nDESCRIPTION: This code snippet defines the `SDL_Sensor` structure as an opaque type in C. It serves as a handle to represent an opened sensor within the SDL library. The structure is defined in the `SDL3/SDL_sensor.h` header file and is available since SDL version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Sensor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Sensor SDL_Sensor;\n```\n\n----------------------------------------\n\nTITLE: Check for Clipboard Text - SDL_HasClipboardText - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasClipboardText function. It checks if the clipboard has text and returns a boolean value indicating whether text exists or not. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasClipboardText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasClipboardText(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_DOUBLE_BUFFER in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_DOUBLE_BUFFER macro as a string literal. This hint tells the video driver to use a double buffer scheme instead of the default triple buffering. This can reduce latency, especially in situations where quick response times are important. The hint should be set before SDL is initialized to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_DOUBLE_BUFFER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_DOUBLE_BUFFER \"SDL_VIDEO_DOUBLE_BUFFER\"\n```\n\n----------------------------------------\n\nTITLE: Initializing SDL_ttf in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_Init function in C. It initializes the SDL_ttf library, which is a prerequisite for using other SDL_ttf functions. The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_Init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_Init(void);\n```\n\n----------------------------------------\n\nTITLE: SDL2 Read Function Signature\nDESCRIPTION: Demonstrates the signature of the SDL_RWread function in SDL2, which takes an SDL_RWops context, a pointer to the buffer, the size of each item, and the maximum number of items to read.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_RWread(SDL_RWops *context, void *ptr, size_t size, size_t maxnum);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ISPIXELFORMAT_10BIT Macro in C\nDESCRIPTION: This macro determines if an SDL_PixelFormat is a 10-bit format. It checks if the format is not a FOURCC format and if the pixel type is PACKED32 with a PACKEDLAYOUT of 2101010. The format parameter is the SDL_PixelFormat to check.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISPIXELFORMAT_10BIT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISPIXELFORMAT_10BIT(format)    \\\n      (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n       ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32) && \\\n        (SDL_PIXELLAYOUT(format) == SDL_PACKEDLAYOUT_2101010)))\n```\n\n----------------------------------------\n\nTITLE: Rendering Shaded Text C\nDESCRIPTION: This function renders UTF-8 text at high quality to a new 8-bit surface. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, an SDL_Color structure for the foreground color, and an SDL_Color structure for the background color. Returns an SDL_Surface pointer containing the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_34\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Shaded(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Check for LOONGARCH LASX features using SDL_HasLASX (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_HasLASX function, which is used to determine if the CPU has LOONGARCH LASX features. It returns SDL_TRUE if the CPU has LASX features, and SDL_FALSE otherwise. It's important to note that this function always returns false on non-LOONGARCH CPUs. It requires SDL 2.24.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasLASX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasLASX(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_CameraDeviceEvent Structure in C\nDESCRIPTION: This C code snippet defines the SDL_CameraDeviceEvent structure, which contains information about camera device events.  It includes the event type (SDL_EVENT_CAMERA_DEVICE_ADDED, SDL_EVENT_CAMERA_DEVICE_REMOVED, SDL_EVENT_CAMERA_DEVICE_APPROVED, SDL_EVENT_CAMERA_DEVICE_DENIED), a reserved field, the timestamp of the event in nanoseconds, and the SDL_CameraID of the device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CameraDeviceEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_CameraDeviceEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_CAMERA_DEVICE_ADDED, SDL_EVENT_CAMERA_DEVICE_REMOVED, SDL_EVENT_CAMERA_DEVICE_APPROVED, SDL_EVENT_CAMERA_DEVICE_DENIED */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_CameraID which;       /**< SDL_CameraID for the device being added or removed or changing */\n} SDL_CameraDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_ClipboardDataCallback Definition in C\nDESCRIPTION: This code snippet defines the `SDL_ClipboardDataCallback` function pointer type. It's used as a callback that SDL calls when the system requests data from the clipboard for a specific MIME type. The callback receives user data, the MIME type being requested, and a pointer to a size variable which it should populate with the size of the data it returns.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClipboardDataCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef const void *(SDLCALL *SDL_ClipboardDataCallback)(void *userdata, const char *mime_type, size_t *size);\n```\n\n----------------------------------------\n\nTITLE: SDL_stack_alloc Macro Definition in C\nDESCRIPTION: This code snippet shows the definition of the SDL_stack_alloc macro. It checks if the platform has alloca() available, using it for stack allocation if possible, otherwise falling back to SDL_malloc(). It takes the data type and the number of elements as arguments. It's important to check the return value for NULL and to free the memory using SDL_stack_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_stack_alloc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_stack_alloc(type, count)    (type*)alloca(sizeof(type)*(count))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUSampleCount Enum in C\nDESCRIPTION: Defines the `SDL_GPUSampleCount` enumeration, specifying the available sample counts for multisample anti-aliasing (MSAA). The enum provides options for no multisampling (1), 2x MSAA, 4x MSAA, and 8x MSAA. This value is only relevant when the texture is used as a render target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUSampleCount.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUSampleCount\n{\n    SDL_GPU_SAMPLECOUNT_1,  /**< No multisampling. */\n    SDL_GPU_SAMPLECOUNT_2,  /**< MSAA 2x */\n    SDL_GPU_SAMPLECOUNT_4,  /**< MSAA 4x */\n    SDL_GPU_SAMPLECOUNT_8   /**< MSAA 8x */\n} SDL_GPUSampleCount;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GPUStencilOp enum in C\nDESCRIPTION: Defines the SDL_GPUStencilOp enum, which specifies the operation to perform on the stencil buffer. The available operations include keeping the current value, setting it to zero, replacing it with a reference value, incrementing and clamping, decrementing and clamping, inverting, incrementing and wrapping, and decrementing and wrapping.  This enum is used to configure stencil testing behavior in SDL_gpu.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUStencilOp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUStencilOp\n{\n    SDL_GPU_STENCILOP_INVALID,\n    SDL_GPU_STENCILOP_KEEP,                 /**< Keeps the current value. */\n    SDL_GPU_STENCILOP_ZERO,                 /**< Sets the value to 0. */\n    SDL_GPU_STENCILOP_REPLACE,              /**< Sets the value to reference. */\n    SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP,  /**< Increments the current value and clamps to the maximum value. */\n    SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP,  /**< Decrements the current value and clamps to 0. */\n    SDL_GPU_STENCILOP_INVERT,               /**< Bitwise-inverts the current value. */\n    SDL_GPU_STENCILOP_INCREMENT_AND_WRAP,   /**< Increments the current value and wraps back to 0. */\n    SDL_GPU_STENCILOP_DECREMENT_AND_WRAP    /**< Decrements the current value and wraps to the maximum value. */\n} SDL_GPUStencilOp;\n```\n\n----------------------------------------\n\nTITLE: Get Renderer from Texture in SDL3\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetRendererFromTexture function in SDL3. It takes an SDL_Texture pointer as input and returns a pointer to the SDL_Renderer that created the texture. If the function fails, it returns NULL, and SDL_GetError can be called for more information. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRendererFromTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_GetRendererFromTexture(SDL_Texture *texture);\n```\n\n----------------------------------------\n\nTITLE: Extracting Xcode project archive (bash)\nDESCRIPTION: This bash script shows how to extract Xcode project archive to the top level SDL directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/macos.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd [path_to_SDL_source]\ntar zxf Xcode.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_RESERVED3 Macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_RESERVED3 macro, which is a bit flag (1u shifted left by 14 bits). This is used to reserve a specific bit in a bitmask, preventing its use by other haptic features. The macro is intended for future expansions of the SDL haptic API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_RESERVED3.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HAPTIC_RESERVED3    (1u<<14)\n```\n\n----------------------------------------\n\nTITLE: Get Font Wrap Alignment - SDL_ttf - C\nDESCRIPTION: Retrieves the current wrap alignment option for the specified TTF_Font. The alignment can be left, center, or right. Requires SDL_ttf library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GetFontWrappedAlign.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_GetFontWrappedAlign(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Get Music Title with Mix_GetMusicTitle in C\nDESCRIPTION: Retrieves the title of a music object or its filename using Mix_GetMusicTitle. This function is part of SDL_mixer and is used to extract metadata from music files. It returns the title if available, the filename if the title is missing, or an empty string if neither is available. Requires SDL_mixer to be initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicTitle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicTitle(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: DirectFB Joystick Configuration\nDESCRIPTION: This snippet shows the necessary lines to be added to the `/etc/directfbrc` file to configure joystick support and avoid crashes when using DirectFB.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndisable-module=joystick\ndisable-module=cle266\ndisable-module=cyber5k\nno-linux-input-grab\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MMX_INTRINSICS in C\nDESCRIPTION: This code snippet shows the definition of the SDL_MMX_INTRINSICS macro. It is defined as 1 if the compiler supports Intel MMX intrinsics. If defined, SDL includes `<mmintrin.h>`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MMX_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MMX_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT Macro in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT macro as a string literal. This macro is used as a hint to control whether SDL should call XSelectInput() to enable input events on X11 windows wrapped by SDL windows. This hint should be set before creating a window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_EXTERNAL_WINDOW_INPUT \"SDL_VIDEO_X11_EXTERNAL_WINDOW_INPUT\"\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Ubuntu 18.04\nDESCRIPTION: Installs the necessary packages to build SDL2 with all available features enabled on Ubuntu 18.04. It uses apt-get to install build tools, development libraries and testing tools.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install build-essential git make \\\npkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \\\nlibaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev \\\nlibxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev \\\nlibxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \\\nlibegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev\n```\n\n----------------------------------------\n\nTITLE: Query Font Family Name - C\nDESCRIPTION: This code snippet shows the syntax of the `TTF_FontFaceFamilyName` function in C. It takes a `TTF_Font` pointer as input and returns a constant character pointer representing the font's family name. The returned string should not be modified or freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_FontFaceFamilyName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * TTF_FontFaceFamilyName(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_hid_device_ struct in C\nDESCRIPTION: Defines the SDL_hid_device_ structure, a handle representing an open HID device in SDL2. It is used with functions in the SDL_hidapi category. The struct is defined in SDL_hidapi.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_device_.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct SDL_hid_device_;\n```\n\n----------------------------------------\n\nTITLE: Uint8 Typedef and Macros Definition in C\nDESCRIPTION: This snippet shows the typedef definition of `Uint8` as an unsigned 8-bit integer (`uint8_t`) in C, along with the definitions for the maximum and minimum values that a `Uint8` variable can hold. These definitions are found within the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Uint8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint8_t Uint8;\n#define SDL_MAX_UINT8   ((Uint8)0xFF)           /* 255 */\n#define SDL_MIN_UINT8   ((Uint8)0x00)           /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_RAMP Macro in C\nDESCRIPTION: This macro defines the SDL_HAPTIC_RAMP constant, used to indicate support for ramp haptic effects. It represents a bit flag that can be checked to determine if a haptic device supports the ramp effect. The value is 1 shifted left by 6 bits.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_RAMP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_RAMP       (1u<<6)\n```\n\n----------------------------------------\n\nTITLE: SDL_FRectEquals Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_FRectEquals function. It takes two constant pointers to SDL_FRect structures as input and returns an SDL_bool indicating whether the rectangles are equal.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FRectEquals.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE SDL_bool SDL_FRectEquals(const SDL_FRect *a, const SDL_FRect *b);\n```\n\n----------------------------------------\n\nTITLE: Defining Mix_Chunk structure in C\nDESCRIPTION: This C code snippet defines the Mix_Chunk structure used in SDL_mixer. It includes fields for tracking memory allocation (`allocated`), a pointer to the audio buffer (`abuf`), the length of the buffer in bytes (`alen`), and the volume of the audio sample (`volume`). This structure is fundamental for managing and manipulating audio data within the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Chunk.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct Mix_Chunk {\n    int allocated;\n    Uint8 *abuf;\n    Uint32 alen;\n    Uint8 volume;       /* Per-sample volume, 0-128 */\n} Mix_Chunk;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Memory Functions in SDL3 (C)\nDESCRIPTION: Replaces SDL's memory allocation functions (malloc, calloc, realloc, free) with custom implementations. This allows developers to use their own memory management schemes within SDL. This should be called before any SDL allocations are made, typically at the very start of the program.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetMemoryFunctions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetMemoryFunctions(SDL_malloc_func malloc_func,\n                                SDL_calloc_func calloc_func,\n                                SDL_realloc_func realloc_func,\n                                SDL_free_func free_func);\n```\n\n----------------------------------------\n\nTITLE: SDL_COLORSPACETYPE Macro Definition in C\nDESCRIPTION: This macro extracts the SDL_ColorType from a given SDL_Colorspace. It uses a bitwise operation to shift the colorspace value 28 bits to the right and then performs a bitwise AND with 0x0F to isolate the color type. This allows for efficient retrieval of the color type information encoded within the SDL_Colorspace value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_COLORSPACETYPE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_COLORSPACETYPE(cspace)       (SDL_ColorType)(((cspace) >> 28) & 0x0F)\n```\n\n----------------------------------------\n\nTITLE: SDL3 Fullscreen Desktop Window Creation\nDESCRIPTION: This code snippet demonstrates creating a fullscreen desktop window in SDL3, allowing the game to use the entire screen without changing the resolution. This approach scales the game's output to the desktop resolution, offering a better experience on modern monitors. The `SDL_WINDOW_FULLSCREEN_DESKTOP` flag is crucial for this functionality.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_Window *sdlWindow = SDL_CreateWindow(title, 0, 0, SDL_WINDOW_FULLSCREEN_DESKTOP);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Window Creation (SDL_CreateWindow)\nDESCRIPTION: This code snippet demonstrates how to create a window in SDL3, replacing the functionality of SDL_SetVideoMode() from SDL 1.2. It shows creating a window with specified dimensions and flags, including fullscreen and OpenGL support. The primary purpose is to establish a display surface for rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Window *screen = SDL_CreateWindow(\"My Game Window\", 640, 480, SDL_WINDOW_FULLSCREEN | SDL_WINDOW_OPENGL);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DisplayEventID enum in C\nDESCRIPTION: This code defines the SDL_DisplayEventID enumeration in C. It provides a set of named integer constants representing different types of display events that SDL can generate. These event types include orientation changes, display connection, disconnection, and movement. The enumeration is defined in SDL_video.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DisplayEventID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_DisplayEventID\n{\n    SDL_DISPLAYEVENT_NONE,          /**< Never used */\n    SDL_DISPLAYEVENT_ORIENTATION,   /**< Display orientation has changed to data1 */\n    SDL_DISPLAYEVENT_CONNECTED,     /**< Display has been added to the system */\n    SDL_DISPLAYEVENT_DISCONNECTED,  /**< Display has been removed from the system */\n    SDL_DISPLAYEVENT_MOVED          /**< Display has changed position */\n} SDL_DisplayEventID;\n```\n\n----------------------------------------\n\nTITLE: Getting Previous Text Substring with SDL_ttf in C\nDESCRIPTION: This function retrieves the previous substring in a text object, given a reference substring. It requires a `TTF_Text` pointer, a pointer to a `TTF_SubString` structure representing the current substring, and a pointer to another `TTF_SubString` structure where the previous substring will be stored. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_85\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetPreviousTextSubString(TTF_Text *text, const TTF_SubString *substring, TTF_SubString *previous);\n```\n\n----------------------------------------\n\nTITLE: Registering and Unregistering Effects\nDESCRIPTION: These functions allow you to register and unregister special effect functions for specific channels. The MIX_CHANNEL_POST constant is used for effects operating on the postmix.  The MIX_EFFECTSMAXSPEED environment variable affects speed vs quality.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\n#define MIX_CHANNEL_POST                                                                  // Magic number for effects to operate on the postmix instead of a channel.\nbool Mix_RegisterEffect(int chan, Mix_EffectFunc_t f, Mix_EffectDone_t d, void *arg);     // Register a special effect function.\nbool Mix_UnregisterEffect(int channel, Mix_EffectFunc_t f);                               // Explicitly unregister a special effect function.\nbool Mix_UnregisterAllEffects(int channel);                                               // Explicitly unregister all special effect functions.\n#define MIX_EFFECTSMAXSPEED                                                               // Environment variable that makes some mixing effects favor speed over quality.\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Vendor ID (SDL3, C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetJoystickVendorForID function, which retrieves the USB vendor ID of a joystick based on its instance ID. It is part of the SDL3 library and requires the SDL_joystick.h header file. The function returns a Uint16 representing the vendor ID, or 0 if the instance ID is invalid or the vendor ID is not available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickVendorForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetJoystickVendorForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Getting Next Text Substring with SDL_ttf in C\nDESCRIPTION: This function retrieves the next substring in a text object, given a reference substring. It requires a `TTF_Text` pointer, a pointer to a `TTF_SubString` structure representing the current substring, and a pointer to another `TTF_SubString` structure where the next substring will be stored. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_86\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetNextTextSubString(TTF_Text *text, const TTF_SubString *substring, TTF_SubString *next);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Version Number Macro in C\nDESCRIPTION: This macro converts SDL version numbers (major, minor, patch) into a single numeric value. It assumes a maximum of 100 patchlevels and has different behavior for versions higher than 2.9.0 where the minor version overflows into the thousands digit. The macro is not available in SDL 3.x.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_VERSIONNUM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VERSIONNUM(X, Y, Z)                     \\\n    ((X)*1000 + (Y)*100 + (Z))\n```\n\n----------------------------------------\n\nTITLE: Querying a Font's Style Name in SDL_ttf (C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetFontStyleName function, which retrieves the style name of a given font. The function takes a pointer to a TTF_Font structure as input and returns a const char pointer to the style name string. The returned string is to internal storage and should not be modified or freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontStyleName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * TTF_GetFontStyleName(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Set Font Size with DPI using TTF_SetFontSizeDPI in C\nDESCRIPTION: Sets the font size dynamically based on target resolutions (horizontal and vertical DPI). This function requires a TTF_Font object, the desired point size, and the horizontal and vertical DPI values. It returns 0 on success and -1 on error, and clears any previously generated glyphs from the cache.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontSizeDPI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_SetFontSizeDPI(TTF_Font *font, int ptsize, unsigned int hdpi, unsigned int vdpi);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_InitStatus Enum in C\nDESCRIPTION: This code snippet defines the `SDL_InitStatus` enumeration in C, representing the different states an SDL initialization can be in: `SDL_INIT_STATUS_UNINITIALIZED`, `SDL_INIT_STATUS_INITIALIZING`, `SDL_INIT_STATUS_INITIALIZED`, and `SDL_INIT_STATUS_UNINITIALIZING`. It is part of the SDL3 library and available since version 3.2.0. The enum is used to track the state of mutexes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InitStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_InitStatus\n{\n    SDL_INIT_STATUS_UNINITIALIZED,\n    SDL_INIT_STATUS_INITIALIZING,\n    SDL_INIT_STATUS_INITIALIZED,\n    SDL_INIT_STATUS_UNINITIALIZING\n} SDL_InitStatus;\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for iOS Simulator\nDESCRIPTION: This command configures CMake to build SDL for the iOS Simulator, using the latest installed SDK and targeting the x86_64 architecture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=x86_64\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteSurfacePixelFloat Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_WriteSurfacePixelFloat function. It takes a surface pointer, x and y coordinates, and red, green, blue, and alpha floating-point values as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteSurfacePixelFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteSurfacePixelFloat(SDL_Surface *surface, int x, int y, float r, float g, float b, float a);\n```\n\n----------------------------------------\n\nTITLE: SDL_GDKResumeGPU Function Syntax in C\nDESCRIPTION: This snippet shows the syntax for using the SDL_GDKResumeGPU function, which resumes GPU operation on Xbox after the SDL_EVENT_WILL_ENTER_FOREGROUND event. It takes a pointer to an SDL_GPUDevice structure as a parameter. It must be called before any other SDL_GPU functions after resuming.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GDKResumeGPU.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GDKResumeGPU(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetThreadID Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_GetThreadID function. It takes an SDL_Thread pointer as input and returns an SDL_ThreadID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetThreadID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_ThreadID SDL_GetThreadID(SDL_Thread *thread);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickSetPlayerIndex Syntax in C\nDESCRIPTION: Defines the syntax for SDL_JoystickSetPlayerIndex, which is used to set the player index for a specified joystick. It takes an SDL_Joystick pointer and an integer representing the player index as input. The function is available since SDL 2.0.12.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickSetPlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_JoystickSetPlayerIndex(SDL_Joystick *joystick, int player_index);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Display Modes in SDL2 (C)\nDESCRIPTION: Retrieves the number of available display modes for a specified display using SDL_GetNumDisplayModes. The function takes the display index as input and returns the number of display modes or a negative error code on failure. Requires SDL2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumDisplayModes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumDisplayModes(int displayIndex);\n```\n\n----------------------------------------\n\nTITLE: Configuring environment variables\nDESCRIPTION: Configures environment variables required for Android development, including PATH, ANDROID_HOME, and ANDROID_NDK_HOME. These variables are essential for the build tools to locate the necessary SDK and NDK components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPATH=\"/usr/src/android-ndk-rXXx:$PATH\"\nPATH=\"/usr/src/android-sdk-linux/tools:$PATH\"\nPATH=\"/usr/src/android-sdk-linux/platform-tools:$PATH\"\nexport ANDROID_HOME=\"/usr/src/android-sdk-linux\"\nexport ANDROID_NDK_HOME=\"/usr/src/android-ndk-rXXx\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MessageBoxButtonFlags Enum in C\nDESCRIPTION: This code defines the SDL_MessageBoxButtonFlags enumeration in C. It includes flags to mark buttons as the default when the return key (SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT) or the escape key (SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT) is pressed. These flags are used in the SDL_MessageBoxButtonData structure to configure the behavior of message box buttons.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MessageBoxButtonFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_MessageBoxButtonFlags\n{\n    SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,  /**< Marks the default button when return is hit */\n    SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002   /**< Marks the default button when escape is hit */\n} SDL_MessageBoxButtonFlags;\n```\n\n----------------------------------------\n\nTITLE: SDL_strtoul Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_strtoul function in C, which parses an unsigned long from a string. The function takes a null-terminated string, a pointer to a char pointer to store the end of the parsed number, and an integer representing the base of the number.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strtoul.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nunsigned long SDL_strtoul(const char *str, char **endp, int base);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_PS5 in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_PS5 macro, which is used to set the hint that controls whether SDL uses the HIDAPI driver for PS5 controllers.  The value assigned to this macro is a string literal representing the name of the hint.  The macro is defined in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_PS5.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS5 \"SDL_JOYSTICK_HIDAPI_PS5\"\n```\n\n----------------------------------------\n\nTITLE: Get Grabbed Window in SDL3 (C)\nDESCRIPTION: Retrieves the SDL_Window that currently has an input grab enabled. This function requires the SDL3 library and should be called on the main thread. Returns a pointer to the grabbed window or NULL if no window is grabbed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGrabbedWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetGrabbedWindow(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_strncasecmp Function Definition in C\nDESCRIPTION: Defines the syntax for SDL_strncasecmp, a function used to compare two UTF-8 strings case-insensitively, up to a maximum length specified in bytes.  This function is available since SDL 3.2.0 and expects well-formed UTF-8 strings.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strncasecmp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_strncasecmp(const char *str1, const char *str2, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_THREAD_PRIORITY_POLICY in C\nDESCRIPTION: This code snippet defines the SDL_HINT_THREAD_PRIORITY_POLICY macro as a string literal. This macro can be used with SDL_SetThreadPriority to specify a custom scheduler policy for a thread, overriding SDL's default behavior. The hint values for pthreads include \"current\", \"other\", \"fifo\", and \"rr\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_THREAD_PRIORITY_POLICY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_THREAD_PRIORITY_POLICY         \"SDL_THREAD_PRIORITY_POLICY\"\n```\n\n----------------------------------------\n\nTITLE: Set Font Size Dynamically - TTF_SetFontSize - C\nDESCRIPTION: Sets the font size dynamically using TTF_SetFontSize. This function resizes a TTF_Font to a specified point size (ptsize). It requires a valid TTF_Font pointer and the new point size as an integer.  It clears any cached glyphs and returns 0 on success, -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontSize.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_SetFontSize(TTF_Font *font, int ptsize);\n```\n\n----------------------------------------\n\nTITLE: Get Metal Command Encoder in SDL2 (C)\nDESCRIPTION: Retrieves the Metal command encoder associated with the current frame of the specified SDL renderer. The function takes an SDL_Renderer pointer as input and returns a void pointer, which can be cast to an `id<MTLRenderCommandEncoder>`. It returns NULL if the renderer is not a Metal renderer or if an error occurs, such as when the window is hidden or minimized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetMetalCommandEncoder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_RenderGetMetalCommandEncoder(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDaysInMonth Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetDaysInMonth function. It takes the year and month as input parameters and returns the number of days in that month or -1 on failure. The function is defined in SDL3/SDL_time.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDaysInMonth.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDaysInMonth(int year, int month);\n```\n\n----------------------------------------\n\nTITLE: SDLCALL Macro Definition in C\nDESCRIPTION: This code snippet defines the SDLCALL macro as __cdecl.  It is used to ensure consistent calling conventions between the SDL library and applications using it, particularly for callbacks.  Using the correct calling convention is crucial for preventing unexpected behavior and debugging difficulties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDLCALL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDLCALL __cdecl\n```\n\n----------------------------------------\n\nTITLE: Open a HID Device using SDL_hid_open in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_hid_open function.  It takes the vendor ID, product ID, and serial number (optional) as input and returns a pointer to an SDL_hid_device or NULL if it fails. The header file SDL_hidapi.h is required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_open.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_hid_device * SDL_hid_open(unsigned short vendor_id, unsigned short product_id, const wchar_t *serial_number);\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowFileDialogWithProperties Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ShowFileDialogWithProperties function in C. It takes the file dialog type, a callback function, user data, and properties as input, and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowFileDialogWithProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ShowFileDialogWithProperties(SDL_FileDialogType type, SDL_DialogFileCallback callback, void *userdata, SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_Log Usage with SDL_PRIu64 in C\nDESCRIPTION: Shows how to use the SDL_PRIu64 macro with SDL_Log to print a Uint64 value. This ensures correct formatting of the 64-bit unsigned integer using the platform-specific format specifier.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIu64.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRIu64 \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: Building SDL with CMake\nDESCRIPTION: This snippet demonstrates how to build SDL using CMake. It involves creating a build directory, running CMake to generate build files, building the project, and installing the library. You need to edit CMakeLists.txt and add section for the platform.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/porting.md#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake -S . -B build && cmake --build build && cmake --install install\n```\n\n----------------------------------------\n\nTITLE: SDL_Delay Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_Delay function in C. It takes one parameter, ms, which represents the number of milliseconds to delay execution. The function is part of the SDL library and is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Delay.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Delay(Uint32 ms);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTLS Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetTLS function in C. This function takes a pointer to an SDL_TLSID and returns a void pointer, which represents the value associated with the ID for the current thread. The return value is NULL if no value has been set, and SDL_GetError() can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTLS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_GetTLS(SDL_TLSID *id);\n```\n\n----------------------------------------\n\nTITLE: Checking for SSE4.2 Support in C with SDL\nDESCRIPTION: This code snippet demonstrates how to use the SDL_HasSSE42 function from the SDL3 library to determine if the CPU supports SSE4.2 instruction sets. The function takes no arguments and returns a boolean value indicating whether SSE4.2 is supported. This function is only useful on Intel-based CPUs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasSSE42.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasSSE42(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WAVE_RIFF_CHUNK_SIZE in C\nDESCRIPTION: This snippet defines the SDL_HINT_WAVE_RIFF_CHUNK_SIZE macro in C. This hint controls how the size of the RIFF chunk affects the loading of WAVE files in SDL. It should be set before calling SDL_LoadWAV or SDL_LoadWAV_IO.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WAVE_RIFF_CHUNK_SIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WAVE_RIFF_CHUNK_SIZE \"SDL_WAVE_RIFF_CHUNK_SIZE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetPrimarySelectionText Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetPrimarySelectionText function, which retrieves the current primary selection text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPrimarySelectionText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GetPrimarySelectionText(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ENABLE_STEAM_CONTROLLERS in C\nDESCRIPTION: Defines the SDL_HINT_ENABLE_STEAM_CONTROLLERS macro, which is used to control whether SDL should scan for Steam Controllers. The hint can be set to \"0\" to disable scanning or \"1\" to enable scanning (the default). This must be set before initializing the joystick subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ENABLE_STEAM_CONTROLLERS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ENABLE_STEAM_CONTROLLERS \"SDL_ENABLE_STEAM_CONTROLLERS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_isinff Function Declaration in C\nDESCRIPTION: Declares the SDL_isinff function, which checks if a floating-point number is infinite. It takes a float as input and returns a non-zero integer if the float is infinite, and 0 otherwise. The function is part of the SDL3 library and thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isinff.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isinff(float x);\n```\n\n----------------------------------------\n\nTITLE: CMake macOS Build (Universal Framework) with x86_64 and arm64\nDESCRIPTION: This CMake command configures SDL3 for macOS, building an universal framework for both x86_64 and arm64 architectures. It sets the SDL_FRAMEWORK option to ON, the target operating system to Darwin, and specifies the architectures. The minimum macOS deployment target is set to 10.11.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DSDL_FRAMEWORK=ON -DCMAKE_SYSTEM_NAME=Darwin -DCMAKE_OSX_ARCHITECTURES=\"x86_64;arm64\" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.11\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ANDROID_BLOCK_ON_PAUSE in C\nDESCRIPTION: This code defines the SDL_HINT_ANDROID_BLOCK_ON_PAUSE macro, which is a string literal used to set the hint that controls whether the SDL event loop blocks when the Android application is paused. The hint can be set to \"0\" for non-blocking or \"1\" (default) for blocking. This should be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ANDROID_BLOCK_ON_PAUSE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ANDROID_BLOCK_ON_PAUSE \"SDL_ANDROID_BLOCK_ON_PAUSE\"\n```\n\n----------------------------------------\n\nTITLE: Pausing a Channel with Mix_Pause in C\nDESCRIPTION: The Mix_Pause function, part of the SDL_mixer library, allows pausing a specific audio channel. The channel parameter specifies which channel to pause; a value of -1 pauses all channels. When resumed, the channel continues playback from where it left off.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Pause.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_Pause(int channel);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS in C\nDESCRIPTION: Defines the SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS hint as a string literal. This hint is used to force SDL to use Critical Sections for mutexes on Windows, even when Slim Reader/Writer Locks are available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS \"SDL_WINDOWS_FORCE_MUTEX_CRITICAL_SECTIONS\"\n```\n\n----------------------------------------\n\nTITLE: Defining Keycode Masks and Scancode Conversion\nDESCRIPTION: These macros define bitmasks used to identify extended and scancode-based keycodes. The `SDL_SCANCODE_TO_KEYCODE` macro converts a scancode to a keycode by applying the `SDLK_SCANCODE_MASK`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keycode.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define SDLK_EXTENDED_MASK          (1u << 29)\n#define SDLK_SCANCODE_MASK          (1u << 30)\n#define SDL_SCANCODE_TO_KEYCODE(X)  (X | SDLK_SCANCODE_MASK)\n```\n\n----------------------------------------\n\nTITLE: SDL_ResetHints Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_ResetHints function in C. It resets all hints to their default values, which is either the value of associated environment variables or NULL if those variables are not set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ResetHints.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ResetHints(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_DestroyContext Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GL_DestroyContext function, which is used to delete an OpenGL context. It takes an SDL_GLContext as input and returns a boolean indicating success or failure. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_DestroyContext.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GL_DestroyContext(SDL_GLContext context);\n```\n\n----------------------------------------\n\nTITLE: Get Render Draw Color in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetRenderDrawColor function in C. It retrieves the current RGBA color used for drawing operations within a specified SDL_Renderer context. The function takes a renderer and pointers to Uint8 values to store the red, green, blue, and alpha color components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRenderDrawColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetRenderDrawColor(SDL_Renderer * renderer,\n                   Uint8 * r, Uint8 * g, Uint8 * b,\n                   Uint8 * a);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadSVG_IO Function Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadSVG_IO function, which loads a SVG image from an SDL_IOStream. It takes an SDL_IOStream pointer as input and returns an SDL_Surface pointer on success, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadSVG_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadSVG_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_ResumeHaptic Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ResumeHaptic function in C. This function takes a pointer to an SDL_Haptic struct as input and returns a boolean value indicating success or failure. It resumes the haptic device represented by the provided SDL_Haptic pointer after it has been paused.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ResumeHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ResumeHaptic(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: RTF Rendering to SDL_Renderer in C\nDESCRIPTION: Renders an RTF document within a specified rectangle on an SDL_Renderer. The rendering process uses the RTF context to determine the formatting and content to be displayed. It reflows text to fit the specified rectangle width and applies a vertical offset for precise positioning. Requires an RTF_Context obtained from RTF_CreateContext and an SDL_Rect defining the rendering area.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_Render.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid RTF_Render(RTF_Context *ctx, SDL_Rect *rect, int yOffset);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioPostmixCallback Type Definition in C\nDESCRIPTION: Defines the type for the SDL_AudioPostmixCallback function pointer. This callback is invoked when data is about to be fed to an audio device, allowing modification of the audio buffer. The callback receives a user-provided data pointer, the audio specification, the buffer containing audio samples, and the buffer's size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioPostmixCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_AudioPostmixCallback)(void *userdata, const SDL_AudioSpec *spec, float *buffer, int buflen);\n```\n\n----------------------------------------\n\nTITLE: Convert String to SDL_GamepadAxis Enum (C)\nDESCRIPTION: Converts a string representation of a gamepad axis to its corresponding SDL_GamepadAxis enum value. This function is mainly used internally for gamepad mapping. Returns SDL_GAMEPAD_AXIS_INVALID if no match is found. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadAxisFromString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadAxis SDL_GetGamepadAxisFromString(const char *str);\n```\n\n----------------------------------------\n\nTITLE: SDL_AppIterate Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_AppIterate function in C. This function is called repeatedly by SDL to perform one iteration of the main loop in SDL_MAIN_USE_CALLBACKS applications. The `appstate` parameter is an optional pointer provided by the app during SDL_AppInit().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppIterate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AppResult SDL_AppIterate(void *appstate);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogTrace Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_LogTrace function in C. It takes a category and a format string with optional arguments, similar to printf, to log a trace message.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogTrace.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogTrace(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_SendV Syntax in C\nDESCRIPTION: This code snippet shows the function signature for SDLNet_UDP_SendV. It details the parameters required for sending UDP packets: the UDP socket, an array of UDP packets, and the number of packets in the array.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_SendV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_UDP_SendV(UDPsocket sock, UDPpacket **packets, int npackets);\n```\n\n----------------------------------------\n\nTITLE: Checking Initialization of SDL_ttf in C\nDESCRIPTION: This function checks if the SDL_ttf library is initialized. It returns a non-zero value if initialized, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_91\n\nLANGUAGE: C\nCODE:\n```\nint TTF_WasInit(void);\n```\n\n----------------------------------------\n\nTITLE: Get HID Product String using SDL\nDESCRIPTION: Retrieves the product string from a HID device. Requires an initialized SDL environment and a valid SDL_hid_device handle. Returns 0 on success and -1 on error.  The string buffer must be large enough to hold the product string, up to maxlen wchar_t characters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_get_product_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_product_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Mix_QuickLoad_RAW Syntax\nDESCRIPTION: Defines the syntax for the Mix_QuickLoad_RAW function. It takes a pointer to a memory buffer (mem) and the length of the buffer (len) as input. The data must be in the same format as the audio device. Returns a pointer to a Mix_Chunk structure, or NULL on error. The provided memory buffer must remain valid until Mix_FreeChunk is called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_QuickLoad_RAW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Chunk * Mix_QuickLoad_RAW(Uint8 *mem, Uint32 len);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetSandbox Syntax in C\nDESCRIPTION: This code snippet shows the syntax for calling the SDL_GetSandbox function. It takes no arguments and returns an SDL_Sandbox enum value, which indicates the current sandbox environment or SDL_SANDBOX_NONE if the application is not running in a sandbox.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSandbox.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Sandbox SDL_GetSandbox(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP hint as a string literal. It's used to set the hint via SDL_SetHint. When enabled (set to \"1\"), SDL emulates mouse warp behavior using relative mouse mode under Wayland, which is helpful for older games that rely on mouse warping. When disabled (set to \"0\"), all mouse warps will fail. If not explicitly set, it is automatically enabled unless relative mouse mode is used by the application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_EMULATE_MOUSE_WARP \"SDL_VIDEO_WAYLAND_EMULATE_MOUSE_WARP\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_ISUNSIGNED macro definition in C\nDESCRIPTION: This macro determines if an SDL_AudioFormat represents unsigned data. It takes an SDL_AudioFormat value as input and returns non-zero if the format is unsigned, and zero otherwise. It depends on the SDL_AUDIO_ISSIGNED macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_ISUNSIGNED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_ISUNSIGNED(x)      (!SDL_AUDIO_ISSIGNED(x))\n```\n\n----------------------------------------\n\nTITLE: TTF_GetStringSizeWrapped Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_GetStringSizeWrapped function in C. This function calculates the dimensions of a rendered string of UTF-8 text, considering wrapping. It requires a TTF_Font pointer, the text string, its length, the wrap width, and pointers to integers where the width and height will be stored.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetStringSizeWrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetStringSizeWrapped(TTF_Font *font, const char *text, size_t length, int wrap_width, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_SignalAsyncIOQueue Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SignalAsyncIOQueue function in C. It takes a pointer to an SDL_AsyncIOQueue as a parameter and returns void. It's used to unblock threads waiting on the specified queue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SignalAsyncIOQueue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SignalAsyncIOQueue(SDL_AsyncIOQueue *queue);\n```\n\n----------------------------------------\n\nTITLE: Getting Font Size with TTF_GetFontSize in C\nDESCRIPTION: Retrieves the size of the specified font using the TTF_GetFontSize function from the SDL_ttf library. It takes a pointer to a TTF_Font object as input. The function returns a float representing the size of the font, or 0.0f on failure. The SDL_GetError() function can be called for more information in case of failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontSize.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nfloat TTF_GetFontSize(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: TTF_CreateText Syntax in C\nDESCRIPTION: Defines the syntax for creating a text object using the TTF_CreateText function. It takes a text engine, font, text string (UTF-8 encoded), and the length of the text as input and returns a TTF_Text object pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Text * TTF_CreateText(TTF_TextEngine *engine, TTF_Font *font, const char *text, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_GetInstanceExtensions Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_Vulkan_GetInstanceExtensions function in C. It takes an SDL_Window pointer, a pointer to an unsigned integer (pCount), and a pointer to a constant character pointer array (pNames) as parameters. The function returns an SDL_bool value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Vulkan_GetInstanceExtensions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_Vulkan_GetInstanceExtensions(SDL_Window *window,\n                                          unsigned int *pCount,\n                                          const char **pNames);\n```\n\n----------------------------------------\n\nTITLE: Install SDL3 binaries in the toolchain\nDESCRIPTION: Installs the SDL3 binaries into the standalone NDK's sysroot. It creates symbolic links from the SDL3 libraries to the appropriate directory in the NDK sysroot. It also copies SDL3 headers to the include directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/src/SDL3/build/org.libsdl/\nfor i in libs/armeabi/*; do ln -nfs $(pwd)/$i $NDK_STANDALONE/sysroot/usr/lib/; done\nmkdir $NDK_STANDALONE/sysroot/usr/include/SDL3/\ncp jni/SDL/include/* $NDK_STANDALONE/sysroot/usr/include/SDL3/\ncp jni/*/SDL*.h $NDK_STANDALONE/sysroot/usr/include/SDL3/\n```\n\n----------------------------------------\n\nTITLE: Check for LOONGARCH LSX Feature - SDL\nDESCRIPTION: This code snippet defines the SDL_HasLSX function which determines if the CPU supports LOONGARCH SIMD (LSX) features. It returns SDL_TRUE if LSX is supported and SDL_FALSE otherwise. It is available since SDL 2.24.0 and will always return false on non-LOONGARCH CPUs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasLSX.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_bool SDL_HasLSX(void);\n```\n\n----------------------------------------\n\nTITLE: SDL GDK Application Initialization C\nDESCRIPTION: Initializes and launches an SDL GDK application. This function requires an SDL_main_func, which represents the application's C-style main function. The reserved parameter should be NULL for future use. On success, the function returns 0; otherwise, it returns -1, and SDL_GetError can be used to retrieve error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GDKRunApp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GDKRunApp(SDL_main_func mainFunction, void *reserved);\n```\n\n----------------------------------------\n\nTITLE: Set Surface Color Modulation - SDL2 - C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetSurfaceColorMod function, which sets the color modulation for a given SDL_Surface. The function takes a pointer to the SDL_Surface and three Uint8 values representing the red, green, and blue color components. The color modulation is applied during blit operations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetSurfaceColorMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetSurfaceColorMod(SDL_Surface * surface,\n                           Uint8 r, Uint8 g, Uint8 b);\n```\n\n----------------------------------------\n\nTITLE: Get Font Script\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetFontScript function, which retrieves the script used for text shaping of a font. It takes a TTF_Font pointer as input and returns a Uint32 representing the ISO 15924 code for the script or 0 if no script is set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontScript.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetFontScript(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_HIGHDPI_DISABLED in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_HIGHDPI_DISABLED macro, which is used to disable high-DPI windows in SDL. Setting the hint associated with this macro to \"1\" will prevent the creation of high-DPI windows. This is defined in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_HIGHDPI_DISABLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_HIGHDPI_DISABLED \"SDL_VIDEO_HIGHDPI_DISABLED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticCustom Structure Definition in C\nDESCRIPTION: Defines the structure for a custom haptic effect, which allows the user to define the shape of the force feedback. The structure includes fields for effect type, direction, replay parameters, trigger conditions, custom data, and an envelope to control the attack and fade of the effect. The `data` field requires allocating memory of `channels * samples` size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticCustom.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticCustom\n{\n    /* Header */\n    SDL_HapticEffectType type;      /**< SDL_HAPTIC_CUSTOM */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect. */\n    Uint16 delay;           /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;          /**< Button that triggers the effect. */\n    Uint16 interval;        /**< How soon it can be triggered again after button. */\n\n    /* Custom */\n    Uint8 channels;         /**< Axes to use, minimum of one. */\n    Uint16 period;          /**< Sample periods. */\n    Uint16 samples;         /**< Amount of samples. */\n    Uint16 *data;           /**< Should contain channels*samples items. */\n\n    /* Envelope */\n    Uint16 attack_length;   /**< Duration of the attack. */\n    Uint16 attack_level;    /**< Level at the start of the attack. */\n    Uint16 fade_length;     /**< Duration of the fade. */\n    Uint16 fade_level;      /**< Level at the end of the fade. */\n} SDL_HapticCustom;\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_BindTexture Syntax in C\nDESCRIPTION: Defines the syntax for SDL_GL_BindTexture, which binds an SDL_Texture to the current OpenGL context and retrieves texture dimensions. It takes an SDL_Texture pointer, and pointers to floats for texture width and height as input parameters. Returns 0 on success, -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_BindTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GL_BindTexture(SDL_Texture *texture, float *texw, float *texh);\n```\n\n----------------------------------------\n\nTITLE: SDL_OnApplicationDidEnterForeground Syntax in C\nDESCRIPTION: Defines the syntax for the `SDL_OnApplicationDidEnterForeground` function in C.  This function allows iOS apps with external event handling to trigger SDL events when the application enters the foreground. It takes no arguments and returns nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OnApplicationDidEnterForeground.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_OnApplicationDidEnterForeground(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontProperties Function\nDESCRIPTION: Retrieves the properties associated with a TTF_Font object as an SDL_PropertiesID. This can be useful for inspecting and modifying font settings.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID TTF_GetFontProperties(TTF_Font *font);                                                                                    // Get the properties associated with a font.\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Name using SDL_GetSensorName in C\nDESCRIPTION: Retrieves the implementation-dependent name of a sensor in SDL. It takes an SDL_Sensor pointer as input and returns a const char* representing the sensor's name. If the function fails, it returns NULL, and SDL_GetError() can be called for more information. The function is available since SDL 3.2.0 and requires the SDL3/SDL_sensor.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetSensorName(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: Rendering Solid Text C\nDESCRIPTION: This function renders UTF-8 text at fast quality to a new 8-bit surface. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, and an SDL_Color structure for the foreground color. Returns an SDL_Surface pointer containing the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Solid(TTF_Font *font, const char *text, size_t length, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Simulate Datagram Packet Loss in SDL_net (C)\nDESCRIPTION: This function enables simulated datagram socket failures. It takes a pointer to an SDLNet_DatagramSocket and an integer representing the percentage of packets to lose. Setting percent_loss to 0 disables the simulation, while setting it to 100 causes everything to fail. The function is thread-safe and available since SDL_Net 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_SimulateDatagramPacketLoss.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_SimulateDatagramPacketLoss(SDLNet_DatagramSocket *sock, int percent_loss);\n```\n\n----------------------------------------\n\nTITLE: Loading TGA Images using SDL_image in C\nDESCRIPTION: The `IMG_LoadTGA_RW` function loads a TGA image from an SDL_RWops data stream. It takes an SDL_RWops pointer as input and returns an SDL_Surface representing the image, or NULL on error. This function bypasses the automatic file format detection and is intended for situations where the image format is definitely known to be TGA.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadTGA_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadTGA_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Querying Game Controller Trigger Rumble Support in SDL2 (C)\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GameControllerHasRumbleTriggers function to check if a given SDL_GameController has rumble support on its triggers. The function takes a pointer to the SDL_GameController as input and returns SDL_TRUE if trigger rumble is supported, and SDL_FALSE otherwise. This function is available since SDL 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerHasRumbleTriggers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GameControllerHasRumbleTriggers(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Rendering Blended Glyph C\nDESCRIPTION: This function renders a single UNICODE codepoint at high quality to a new ARGB surface. It requires a valid TTF_Font pointer, a Uint32 representing the codepoint, and an SDL_Color structure for the foreground color. Returns an SDL_Surface pointer containing the rendered glyph.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_39\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Blended(TTF_Font *font, Uint32 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Mix_LoadMUS Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_LoadMUS function, which is used to load a supported audio format into a music object. The function takes a file path as input and returns a pointer to a Mix_Music object.  The returned Mix_Music object needs to be freed using Mix_FreeMusic when it's no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_LoadMUS.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMix_Music * Mix_LoadMUS(const char *file);\n```\n\n----------------------------------------\n\nTITLE: TTF_InsertTextString Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_InsertTextString function in C. It takes a TTF_Text pointer, an integer offset, a const char pointer for the UTF-8 text to insert, and a size_t for the length of the text. The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_InsertTextString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_InsertTextString(TTF_Text *text, int offset, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseDeviceEvent Structure Definition in C\nDESCRIPTION: Defines the structure of `SDL_MouseDeviceEvent`, which contains information about mouse device events. It includes fields for the event type (`type`), a reserved field, the timestamp of the event (`timestamp`), and the mouse instance ID (`which`). This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseDeviceEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MouseDeviceEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_MOUSE_ADDED or SDL_EVENT_MOUSE_REMOVED */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_MouseID which;  /**< The mouse instance id */\n} SDL_MouseDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: Get Surface Blend Mode in SDL3\nDESCRIPTION: Retrieves the blend mode used for blit operations on a specified SDL_Surface. The function takes a pointer to an SDL_Surface and a pointer to an SDL_BlendMode, which will be populated with the current blend mode of the surface. It returns true on success and false on failure, with SDL_GetError() providing more information about the failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfaceBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode *blendMode);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUPresentMode Enum Definition in C\nDESCRIPTION: Defines the SDL_GPUPresentMode enum, which specifies the timing mode for presenting swapchain textures to the operating system. The enum includes VSYNC, IMMEDIATE, and MAILBOX options. VSYNC waits for vblank, IMMEDIATE presents immediately (allowing tearing), and MAILBOX waits for vblank but replaces pending images.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUPresentMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUPresentMode\n{\n    SDL_GPU_PRESENTMODE_VSYNC,\n    SDL_GPU_PRESENTMODE_IMMEDIATE,\n    SDL_GPU_PRESENTMODE_MAILBOX\n} SDL_GPUPresentMode;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_OPENGL_ES_DRIVER in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_OPENGL_ES_DRIVER macro in C, which is used to control the OpenGL ES driver used by SDL. The macro expands to the string \"SDL_OPENGL_ES_DRIVER\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_OPENGL_ES_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_OPENGL_ES_DRIVER \"SDL_OPENGL_ES_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Define XInput Joystick Mapping Hint in C\nDESCRIPTION: Defines the SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING macro which enables the use of the old axis and button mapping for XInput devices. It is important to set this hint before calling SDL_Init(). This is a backwards compatibility feature and will be removed in SDL 2.1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_XINPUT_USE_OLD_JOYSTICK_MAPPING \"SDL_XINPUT_USE_OLD_JOYSTICK_MAPPING\"\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Instance ID in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_SensorGetDeviceInstanceID function. It takes the device index as input and returns the sensor instance ID, or -1 if the index is out of range. This function requires the SDL_sensor.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetDeviceInstanceID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_SensorID SDL_SensorGetDeviceInstanceID(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Fedora 35\nDESCRIPTION: Installs the required packages to build SDL2 with all features on Fedora 35.  Uses yum to install development tools, libraries, and headers. Includes audio, graphics, and input-related development packages.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install gcc git-core make cmake \\\nalsa-lib-devel pulseaudio-libs-devel nas-devel pipewire-devel \\\nlibX11-devel libXext-devel libXrandr-devel libXcursor-devel libXfixes-devel \\\nlibXi-devel libXScrnSaver-devel dbus-devel ibus-devel \\\nsystemd-devel mesa-libGL-devel libxkbcommon-devel mesa-libGLES-devel \\\nmesa-libEGL-devel vulkan-devel wayland-devel wayland-protocols-devel \\\nlibdrm-devel mesa-libgbm-devel libusb-devel libdecor-devel \\\npipewire-jack-audio-connection-kit-devel\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontStyle Function\nDESCRIPTION: Queries the current font style flags (e.g., bold, italic, underline) of a TTF_Font object. Returns a bitmask of TTF_FontStyleFlags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nTTF_FontStyleFlags TTF_GetFontStyle(const TTF_Font *font);                                                                                 // Query a font's current style.\n```\n\n----------------------------------------\n\nTITLE: Including SDL headers in C/C++\nDESCRIPTION: This snippet demonstrates how to include the necessary SDL headers in your C/C++ code when working with SDL2. It includes `SDL_main.h` and `SDL.h`, which provide access to SDL functions and data structures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/ios.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#include \"SDL_main.h\"\n#include <SDL.h>\n#include <SDL_main.h>\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickGetGUIDString Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickGetGUIDString function in C.  It takes an SDL_JoystickGUID, a character buffer, and the size of the buffer as input. It converts the GUID to a string and stores it in the provided buffer. The buffer should be at least 33 bytes in size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetGUIDString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char *pszGUID, int cbGUID);\n```\n\n----------------------------------------\n\nTITLE: SDL_ultoa Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_ultoa function, which converts an unsigned long integer to a string representation in a given radix. It takes the unsigned long integer to be converted, a character buffer to store the resulting string, and the radix to use for the conversion as input. The function returns a pointer to the character buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ultoa.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_ultoa(unsigned long value, char *str, int radix);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Window and Renderer Creation (SDL_CreateWindowAndRenderer)\nDESCRIPTION: This code snippet demonstrates creating both a window and a renderer in a single step using SDL_CreateWindowAndRenderer(). This function simplifies the initialization process when no advanced configuration is needed. It takes window parameters and returns pointers to the created window and renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nSDL_Window *sdlWindow;\nSDL_Renderer *sdlRenderer;\nSDL_CreateWindowAndRenderer(title, 0, 0, SDL_WINDOW_FULLSCREEN_DESKTOP, &sdlWindow, &sdlRenderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_TextInputType Enum Definition in C\nDESCRIPTION: Defines the SDL_TextInputType enumeration with values representing different types of text input. These input types can be used with `SDL_StartTextInputWithProperties` to hint to the operating system the kind of text the application is expecting, influencing the behavior of the on-screen keyboard or input method editor. The enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TextInputType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_TextInputType\n{\n    SDL_TEXTINPUT_TYPE_TEXT,                        /**< The input is text */\n    SDL_TEXTINPUT_TYPE_TEXT_NAME,                   /**< The input is a person's name */\n    SDL_TEXTINPUT_TYPE_TEXT_EMAIL,                  /**< The input is an e-mail address */\n    SDL_TEXTINPUT_TYPE_TEXT_USERNAME,               /**< The input is a username */\n    SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN,        /**< The input is a secure password that is hidden */\n    SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE,       /**< The input is a secure password that is visible */\n    SDL_TEXTINPUT_TYPE_NUMBER,                      /**< The input is a number */\n    SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN,      /**< The input is a secure PIN that is hidden */\n    SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE      /**< The input is a secure PIN that is visible */\n} SDL_TextInputType;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ProgressState enum in C\nDESCRIPTION: This code snippet defines the `SDL_ProgressState` enumeration in C. This enum is used to represent the various states of a window's progress indicator, such as indeterminate, normal, paused, or error. It is available since SDL 3.2.8 and is defined in the SDL3/SDL_video.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ProgressState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ProgressState\n{\n    SDL_PROGRESS_STATE_INVALID = -1,    /**< An invalid progress state indicating an error; check SDL_GetError() */\n    SDL_PROGRESS_STATE_NONE,            /**< No progress bar is shown */\n    SDL_PROGRESS_STATE_INDETERMINATE,   /**< The progress bar is shown in a indeterminate state */\n    SDL_PROGRESS_STATE_NORMAL,          /**< The progress bar is shown in a normal state */\n    SDL_PROGRESS_STATE_PAUSED,          /**< The progress bar is shown in a paused state */\n    SDL_PROGRESS_STATE_ERROR            /**< The progress bar is shown in a state indicating the application had an error */\n} SDL_ProgressState;\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerButtonBind Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_GameControllerButtonBind structure in C. It includes a bindType member and a union to hold either a button index, an axis index, or hat information. This structure is used to represent the joystick layer binding for a controller button or axis mapping.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerButtonBind.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GameControllerButtonBind\n{\n    SDL_GameControllerBindType bindType;\n    union\n    {\n        int button;\n        int axis;\n        struct {\n            int hat;\n            int hat_mask;\n        } hat;\n    } value;\n\n} SDL_GameControllerButtonBind;\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_RecvV Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_UDP_RecvV function in C. It takes a UDPsocket and a NULL-terminated array of UDPpacket pointers as input and returns the number of packets read, or -1 on error. The packets array does not need to be allocated with SDLNet_AllocPacketV, but must be NULL terminated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_RecvV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_UDP_RecvV(UDPsocket sock, UDPpacket **packets);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION in C\nDESCRIPTION: This C macro defines the SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION hint, which is used to control whether the Apple TV remote's joystick axes are affected by the remote's orientation.  It maps the symbolic name to the string \"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION \"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\"\n```\n\n----------------------------------------\n\nTITLE: Handling Background Events on Mobile in SDL3\nDESCRIPTION: This code snippet illustrates how to use an event filter to catch SDL_EVENT_WILL_ENTER_BACKGROUND events on mobile platforms in SDL3. This allows immediate handling of critical events to prevent application termination by the OS.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nint SDLCALL myEventFilter(void *userdata, SDL_Event * event)\n{\n    if (event->type == SDL_EVENT_WILL_ENTER_BACKGROUND) {\n        // free up resources, DON'T DRAW ANY MORE until you're in the foreground again!\n    }\n    // etc\n    return 1;\n}\n\n// somewhere near startup...\n\n// this calls myEventFilter(data, event) as soon as an event is generated.\nSDL_AddEventWatch(myEventFilter, data);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Style Functions in C\nDESCRIPTION: Functions for setting and querying the font style (e.g., bold, italic, underline), outline, and hinting. These functions modify the visual presentation of the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_SetFontStyle(TTF_Font *font, TTF_FontStyleFlags style);                                                                           // Set a font's current style.\nTTF_FontStyleFlags TTF_GetFontStyle(const TTF_Font *font);                                                                                 // Query a font's current style.\nbool TTF_SetFontOutline(TTF_Font *font, int outline);                                                                                      // Set a font's current outline.\nint TTF_GetFontOutline(const TTF_Font *font);                                                                                              // Query a font's current outline.\nvoid TTF_SetFontHinting(TTF_Font *font, TTF_HintingFlags hinting);                                                                         // Set a font's current hinter setting.\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PathType enum in C\nDESCRIPTION: Defines the SDL_PathType enum, which represents the type of a file system entry.  It includes values for non-existent paths, regular files, directories, and other file system objects. This enum is used by the SDL_PathInfo structure to indicate the type of a given path.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PathType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PathType\n{\n    SDL_PATHTYPE_NONE,      /**< path does not exist */\n    SDL_PATHTYPE_FILE,      /**< a normal file */\n    SDL_PATHTYPE_DIRECTORY, /**< a directory */\n    SDL_PATHTYPE_OTHER      /**< something completely different like a device node (not a symlink, those are always followed) */\n} SDL_PathType;\n```\n\n----------------------------------------\n\nTITLE: Setting Volume for a Chunk - C\nDESCRIPTION: This C code snippet demonstrates how to set the volume for a specific sound chunk using the Mix_VolumeChunk function from the SDL_mixer library. The function takes a pointer to the Mix_Chunk and an integer representing the desired volume (0-MIX_MAX_VOLUME). It returns the previous volume of the chunk. The value -1 is used to query the current volume.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_VolumeChunk.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_VolumeChunk(Mix_Chunk *chunk, int volume);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Joystick Axes in SDL3 (C)\nDESCRIPTION: Retrieves the number of general axis controls on a specified joystick. The function takes an SDL_Joystick pointer as input and returns the number of axes as an integer. A return value of -1 indicates failure, and SDL_GetError() should be called for more information. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumJoystickAxes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumJoystickAxes(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: IMG_isPCX Function Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the IMG_isPCX function from the SDL_image library. It takes a seekable/readable SDL_RWops pointer as input, representing the image data source, and returns an integer indicating whether the data is in PCX format. A non-zero return value indicates PCX data, while zero indicates otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isPCX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isPCX(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Detecting PNM Image Data using IMG_isPNM in C\nDESCRIPTION: This code snippet shows the syntax for using the `IMG_isPNM` function from the SDL_image library to detect PNM image data within an SDL_IOStream. The function takes a seekable/readable `SDL_IOStream` as input and returns a boolean value indicating whether the stream contains PNM image data. It is available since SDL_image 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isPNM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isPNM(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Setting SDL_OS2_JOYSTICK Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the SDL_OS2_JOYSTICK environment variable to configure joystick features for SDL2 applications on OS/2. It allows specifying the joystick name, number of axes, buttons, hats, and balls. Note that Hats and Balls are currently ignored under OS/2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/os2.md#_snippet_0\n\nLANGUAGE: batch\nCODE:\n```\nSET SDL_OS2_JOYSTICK=[JOYSTICK_NAME] [AXES] [BUTTONS] [HATS] [BALLS]\n```\n\n----------------------------------------\n\nTITLE: Rendering Solid Glyph C\nDESCRIPTION: This function renders a single 32-bit glyph at fast quality to a new 8-bit surface. It requires a valid TTF_Font pointer, a Uint32 representing the glyph, and an SDL_Color structure for the foreground color. Returns an SDL_Surface pointer containing the rendered glyph.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Solid(TTF_Font *font, Uint32 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUMultisampleState Structure Definition in C\nDESCRIPTION: Defines the structure SDL_GPUMultisampleState, used to configure multisampling in the graphics pipeline. It includes fields for sample count, sample mask, mask enabling, and alpha-to-coverage enabling. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUMultisampleState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUMultisampleState\n{\n    SDL_GPUSampleCount sample_count;  /**< The number of samples to be used in rasterization. */\n    Uint32 sample_mask;               /**< Reserved for future use. Must be set to 0. */\n    bool enable_mask;             /**< Reserved for future use. Must be set to false. */\n    bool enable_alpha_to_coverage;    /**< true enables the alpha-to-coverage feature. */\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_GPUMultisampleState;\n```\n\n----------------------------------------\n\nTITLE: Setting Window Mouse Grab Mode in SDL2 (C)\nDESCRIPTION: This code snippet demonstrates how to use the SDL_SetWindowMouseGrab function to set the mouse grab mode for a given SDL window. It takes an SDL_Window pointer and a SDL_bool value indicating whether to grab (SDL_TRUE) or release (SDL_FALSE) the mouse. Grabbing the mouse confines the cursor to the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowMouseGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowMouseGrab(SDL_Window * window,\n                            SDL_bool grabbed);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Sandbox Enum in C\nDESCRIPTION: This code defines the SDL_Sandbox enumeration, which identifies different application sandbox environments. The enumeration includes values for no sandbox, an unknown container, Flatpak, Snap, and macOS sandbox. This enum is available since SDL 3.2.0 and is defined in SDL3/SDL_system.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Sandbox.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_Sandbox\n{\n    SDL_SANDBOX_NONE = 0,\n    SDL_SANDBOX_UNKNOWN_CONTAINER,\n    SDL_SANDBOX_FLATPAK,\n    SDL_SANDBOX_SNAP,\n    SDL_SANDBOX_MACOS\n} SDL_Sandbox;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GamepadAxis Enum (C)\nDESCRIPTION: Defines the SDL_GamepadAxis enumeration, representing the different axes available on a gamepad. It lists values for invalid axes, left/right thumbsticks (X and Y), left/right triggers, and a count of the axes. This enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GamepadAxis\n{\n    SDL_GAMEPAD_AXIS_INVALID = -1,\n    SDL_GAMEPAD_AXIS_LEFTX,\n    SDL_GAMEPAD_AXIS_LEFTY,\n    SDL_GAMEPAD_AXIS_RIGHTX,\n    SDL_GAMEPAD_AXIS_RIGHTY,\n    SDL_GAMEPAD_AXIS_LEFT_TRIGGER,\n    SDL_GAMEPAD_AXIS_RIGHT_TRIGGER,\n    SDL_GAMEPAD_AXIS_COUNT\n} SDL_GamepadAxis;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_NET_VERSION_ATLEAST Macro in C\nDESCRIPTION: This C preprocessor macro checks if the compiled SDL_net library version is greater than or equal to the specified X.Y.Z version. It uses SDL_NET_MAJOR_VERSION, SDL_NET_MINOR_VERSION, and SDL_NET_PATCHLEVEL macros to perform the version comparison. The macro returns true if the compiled SDL_net version is at least X.Y.Z.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDL_NET_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NET_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_NET_MAJOR_VERSION >= X) && \\\n     (SDL_NET_MAJOR_VERSION > X || SDL_NET_MINOR_VERSION >= Y) && \\\n     (SDL_NET_MAJOR_VERSION > X || SDL_NET_MINOR_VERSION > Y || SDL_NET_PATCHLEVEL >= Z))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ArrayOrder enum in C\nDESCRIPTION: This code snippet defines the SDL_ArrayOrder enumeration, which specifies the order of color components in an array. The enumeration includes values for various arrangements of Red, Green, Blue, and Alpha components. It is used to determine how pixel data is organized in memory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ArrayOrder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ArrayOrder\n{\n    SDL_ARRAYORDER_NONE,\n    SDL_ARRAYORDER_RGB,\n    SDL_ARRAYORDER_RGBA,\n    SDL_ARRAYORDER_ARGB,\n    SDL_ARRAYORDER_BGR,\n    SDL_ARRAYORDER_BGRA,\n    SDL_ARRAYORDER_ABGR\n} SDL_ArrayOrder;\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUSupportsShaderFormats Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GPUSupportsShaderFormats function in C. It takes an SDL_GPUShaderFormat (bitflag) and a const char* representing the preferred GPU driver name as input. It returns a boolean value indicating whether the specified shader formats are supported by the GPU runtime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUSupportsShaderFormats.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GPUSupportsShaderFormats(\n    SDL_GPUShaderFormat format_flags,\n    const char *name);\n\n```\n\n----------------------------------------\n\nTITLE: Compiling C code with Emscripten\nDESCRIPTION: This command uses Emscripten's `emcc` compiler to compile a C source file into a web application. It takes `mygame.c` as input and produces an HTML file (`index.html`) that loads and runs the application. The command generates supporting Javascript and WebAssembly (.wasm) files.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/emscripten.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nemcc -o index.html mygame.c\n```\n\n----------------------------------------\n\nTITLE: Define Arcade Stick Devices Hint in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES macro for setting arcade stick devices.  The value is a string that can be a comma-separated list of USB VID/PID pairs in hexadecimal format or a path to a file containing such a list. It's used to tell SDL which joysticks are arcade stick devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES \"SDL_JOYSTICK_ARCADESTICK_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_LCD_Wrapped Function Signature in C\nDESCRIPTION: This code snippet shows the function signature for TTF_RenderText_LCD_Wrapped in SDL_ttf. It renders Latin1 text with LCD subpixel quality and word wrapping to a new ARGB surface. The function takes a font, text, foreground color, background color, and wrap length as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderText_LCD_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_LCD_Wrapped(TTF_Font *font,\n                const char *text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUNICODE_Solid_Wrapped Function Signature in C\nDESCRIPTION: This code snippet shows the function signature for TTF_RenderUNICODE_Solid_Wrapped, which renders word-wrapped UCS-2 text at fast quality to a new 8-bit surface.\nThe function takes a font, text (in UCS-2), foreground color, and wrap length as input, and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUNICODE_Solid_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUNICODE_Solid_Wrapped(TTF_Font *font,\n                const Uint16 *text, SDL_Color fg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Update Texture (SDL_UpdateTexture) for Software Rendering\nDESCRIPTION: This code snippet updates an SDL_Texture with pixel data from a software-rendered frame. It uploads the pixel buffer to the texture, allowing the texture to be displayed on the screen. The pitch parameter specifies the number of bytes per row in the pixel buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nSDL_UpdateTexture(sdlTexture, NULL, myPixels, 640 * sizeof (Uint32));\n```\n\n----------------------------------------\n\nTITLE: Disabling SDL_main Implementation\nDESCRIPTION: This code snippet shows how to define the SDL_MAIN_NOIMPL macro before including SDL_main.h. This prevents SDL_main.h from generating platform-specific entry point code. This is useful if you need to include SDL_main.h in a file but don't want it to define the main function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/main-functions.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_MAIN_NOIMPL\n```\n\n----------------------------------------\n\nTITLE: Setting Font Script Name in SDL_ttf (C)\nDESCRIPTION: This code snippet shows the syntax for using TTF_SetFontScriptName to set the script used for text shaping in a specific font. It requires a TTF_Font pointer and a null-terminated string of exactly four characters representing the script. Returns 0 on success, -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontScriptName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_SetFontScriptName(TTF_Font *font, const char *script);\n```\n\n----------------------------------------\n\nTITLE: Getting String Size C\nDESCRIPTION: This function calculates the dimensions of a rendered string of UTF-8 text. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, and pointers to integers to store the width and height. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetStringSize(TTF_Font *font, const char *text, size_t length, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: UDEV Rule for Saitek Pro Flight Rudder Pedals\nDESCRIPTION: Example udev rule that sets the mode to 0666 and forces ID_INPUT_JOYSTICK=1 for the Saitek Pro Flight Rudder Pedals.  Two rules are provided for different product IDs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_8\n\nLANGUAGE: udev\nCODE:\n```\nSUBSYSTEM==\"input\", ATTRS{idProduct}==\"0763\", ATTRS{idVendor}==\"06a3\", MODE=\"0666\", ENV{ID_INPUT_JOYSTICK}=\"1\"\nSUBSYSTEM==\"input\", ATTRS{idProduct}==\"0764\", ATTRS{idVendor}==\"06a3\", MODE=\"0666\", ENV{ID_INPUT_JOYSTICK}=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Running a Haptic Effect in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_HapticRunEffect function, which is used to run a haptic effect on a haptic device. The function takes a pointer to an SDL_Haptic struct, the effect ID (int), and the number of iterations (Uint32) as parameters. It returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticRunEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticRunEffect(SDL_Haptic * haptic,\n                        int effect,\n                        Uint32 iterations);\n```\n\n----------------------------------------\n\nTITLE: Migrating Key Event Code in SDL\nDESCRIPTION: This code snippet demonstrates how to update code that accesses key event data in SDL. The keysym field has been removed, and 'sym' has been renamed to 'key'. The example shows the old and new ways to access key code and modifier information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\n    SDL_Event event;\n    SDL_Keycode key = event.key.keysym.sym;\n    SDL_Keymod mod = event.key.keysym.mod;\n```\n\n----------------------------------------\n\nTITLE: Get Ticks with SDL_GetTicks in C\nDESCRIPTION: This code snippet demonstrates how to use SDL_GetTicks() to measure time and print a report once per second. It initializes a variable lastTime to 0 and updates it with the current time every second.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTicks.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint variable;\nbool quit = false;\nunsigned int lastTime = 0, currentTime;\nwhile (!quit) {\n  // do stuff\n  // ...\n\n  // Print a report once per second\n  currentTime = SDL_GetTicks();\n  if (currentTime > lastTime + 1000) {\n    printf(\"Report: %d\\n\", variable);\n    lastTime = currentTime;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Check if SDL_PixelFormat is Packed (C)\nDESCRIPTION: This macro determines whether a given SDL_PixelFormat is a packed format in SDL3. It checks if the format is not a FourCC format and if its pixel type is one of the packed types (SDL_PIXELTYPE_PACKED8, SDL_PIXELTYPE_PACKED16, or SDL_PIXELTYPE_PACKED32). The macro double-evaluates its parameter, so side effects should be avoided.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISPIXELFORMAT_PACKED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISPIXELFORMAT_PACKED(format) \\\n    (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n     ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED8) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED16) || \\\n      (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_PACKED32)))\n```\n\n----------------------------------------\n\nTITLE: Defining custom pixel formats with SDL_DEFINE_PIXELFORMAT in C\nDESCRIPTION: This macro defines a custom pixel format using specified type, order, layout, bits per pixel, and bytes per pixel. It returns a format value compatible with SDL_PixelFormat. The macro is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEFINE_PIXELFORMAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes) \\\n    ((1 << 28) | ((type) << 24) | ((order) << 20) | ((layout) << 16) | \\\n     ((bits) << 8) | ((bytes) << 0))\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRelativeMouseState Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetRelativeMouseState. It takes pointers to floats for the x and y deltas and returns an SDL_MouseButtonFlags bitmask representing the button state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRelativeMouseState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_MouseButtonFlags SDL_GetRelativeMouseState(float *x, float *y);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetCursor Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetCursor function in C. It takes a pointer to an SDL_Cursor as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetCursor(SDL_Cursor *cursor);\n```\n\n----------------------------------------\n\nTITLE: Packaging Application (Windows)\nDESCRIPTION: This command packages the application using the specified PackageLayout.xml file, generating an .msixvc package. It includes options for setting the layout template, data directory, and package output directory.  It prevents inclusion of game OS specific files, and includes platform capabilities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_7\n\nLANGUAGE: Batchfile\nCODE:\n```\nmakepkg pack /f PackageLayout.xml /lt /d . /nogameos /pc /pd Package\n```\n\n----------------------------------------\n\nTITLE: Using ADB to Push Files to SD Card\nDESCRIPTION: This command pushes a file to the /sdcard directory on the Android device using adb push.  This location is typically used for external storage.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nadb push moose.dat /sdcard/moose.dat\n```\n\n----------------------------------------\n\nTITLE: SDL_ClearComposition Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_ClearComposition` function in C. It takes an `SDL_Window` pointer as input and returns a boolean value indicating success or failure. This function dismisses the composition window/IME without disabling the subsystem. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClearComposition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ClearComposition(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_EMSCRIPTEN_ASYNCIFY C\nDESCRIPTION: Defines the SDL_HINT_EMSCRIPTEN_ASYNCIFY macro, which is used to enable or disable `emscripten_sleep` calls within SDL2 when running in an Emscripten environment with asyncify. When asyncify is used, SDL2 calls `emscripten_sleep` during certain operations like refreshing the screen or polling events. Setting this hint to \"0\" disables these calls, while \"1\" enables them (default).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_EMSCRIPTEN_ASYNCIFY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EMSCRIPTEN_ASYNCIFY   \"SDL_EMSCRIPTEN_ASYNCIFY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HasSurfaceRLE Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasSurfaceRLE function in C. It takes a pointer to an SDL_Surface structure as input and returns an SDL_bool indicating whether RLE is enabled for the surface. A NULL surface will return SDL_FALSE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasSurfaceRLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasSurfaceRLE(SDL_Surface * surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_TARGETING Macro Definition (C)\nDESCRIPTION: Defines the SDL_TARGETING macro which uses the GCC's target function attribute to instruct the compiler to build the function with support for a specified CPU instruction set. On compilers without target support, the macro is defined to nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TARGETING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TARGETING(x) __attribute__((target(x)))\n```\n\n----------------------------------------\n\nTITLE: Halt Audio Channels by Tag in SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax for the Mix_HaltGroup function in SDL_mixer. It halts playback on all channels associated with a given tag. The tag is an integer value used to group channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_HaltGroup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HaltGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap64 Function Definition in C\nDESCRIPTION: This code snippet shows the function signature for SDL_Swap64, which takes a 64-bit unsigned integer as input and returns a 64-bit unsigned integer with its byte order swapped. It is marked as inline for potential performance benefits.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Swap64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE Uint64 SDL_Swap64(Uint64 x);\n```\n\n----------------------------------------\n\nTITLE: Convert Unicode to UTF-8 in C with SDL\nDESCRIPTION: This code snippet shows the syntax for the SDL_UCS4ToUTF8 function in C. It takes a Unicode codepoint as input and writes the UTF-8 encoded representation to the provided destination buffer. The destination buffer must be at least 4 bytes long.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UCS4ToUTF8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_UCS4ToUTF8(Uint32 codepoint, char *dst);\n```\n\n----------------------------------------\n\nTITLE: Loading PNG Image from IOStream in C\nDESCRIPTION: Loads a PNG image from an SDL_IOStream. This function skips file format detection and assumes the input stream contains a PNG image. It returns an SDL_Surface pointer on success, or NULL on error. Requires SDL_image 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadPNG_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadPNG_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Reading 64-bit Big-Endian Data from SDL_IOStream in C\nDESCRIPTION: Reads 64 bits of big-endian data from an SDL_IOStream and returns it in native format. The function takes an SDL_IOStream pointer `src` and a Uint64 pointer `value` as parameters. It returns true on success and false on failure.  SDL byteswaps the data only if necessary, so the data returned will be in the native byte order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadU64BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadU64BE(SDL_IOStream *src, Uint64 *value);\n```\n\n----------------------------------------\n\nTITLE: Uint16 Definition\nDESCRIPTION: Defines the Uint16 type as an unsigned 16-bit integer using typedef. Also defines SDL_MAX_UINT16 and SDL_MIN_UINT16 macros representing the maximum and minimum values for the Uint16 type, respectively. Dependencies include SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Uint16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint16_t Uint16;\n#define SDL_MAX_UINT16  ((Uint16)0xFFFF)        /* 65535 */\n#define SDL_MIN_UINT16  ((Uint16)0x0000)        /* 0 */\n```\n\n----------------------------------------\n\nTITLE: SDL_randf Syntax\nDESCRIPTION: Defines the syntax for the SDL_randf function in C. This function takes no arguments and returns a float representing a pseudo-random number between 0.0 (inclusive) and 1.0 (exclusive). It's included in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_randf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_randf(void);\n```\n\n----------------------------------------\n\nTITLE: Get Storage Path Info with SDL_GetStoragePathInfo in C\nDESCRIPTION: Retrieves information about a filesystem path within a given storage container using SDL_GetStoragePathInfo. It takes a storage container, a path, and a pointer to an SDL_PathInfo struct as input. The function populates the SDL_PathInfo struct with information about the specified path. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetStoragePathInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetStoragePathInfo(SDL_Storage *storage, const char *path, SDL_PathInfo *info);\n```\n\n----------------------------------------\n\nTITLE: Get Default Cursor in SDL3\nDESCRIPTION: This code snippet shows the syntax for retrieving the default cursor using SDL_GetDefaultCursor in SDL3. It takes no arguments and returns a pointer to an SDL_Cursor. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDefaultCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor * SDL_GetDefaultCursor(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR hint as a string literal. This hint is used to control whether SDL is allowed to use libdecor for window decorations in the Wayland backend. Setting the hint to \"0\" disables libdecor, while setting it to \"1\" enables it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR \"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\"\n```\n\n----------------------------------------\n\nTITLE: Setting Texture Color Modulation - SDL_SetTextureColorModFloat (C)\nDESCRIPTION: Sets the color modulation for a specified texture. This function takes an SDL_Texture pointer and three float values representing the red, green, and blue color components. It returns true on success and false on failure. The function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTextureColorModFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetTextureColorModFloat(SDL_Texture *texture, float r, float g, float b);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnbindAudioStreams Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_UnbindAudioStreams function, which unbinds a list of audio streams from their audio devices. It takes an array of SDL_AudioStream pointers and the number of streams as input. Unbinding a stream that isn't bound to a device is a legal no-op.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnbindAudioStreams.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnbindAudioStreams(SDL_AudioStream * const *streams, int num_streams);\n```\n\n----------------------------------------\n\nTITLE: SDL_SIMDFree Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SIMDFree function in C. It takes a void pointer as input, which represents the memory to be deallocated. The pointer must have been previously allocated using SDL_SIMDAlloc or SDL_SIMDRealloc. Passing NULL is a valid no-operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SIMDFree.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SIMDFree(void *ptr);\n```\n\n----------------------------------------\n\nTITLE: SDL_strstr Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_strstr function in C.  It takes two const char pointers, haystack and needle, as input, representing the string to search and the substring to search for, respectively.  It returns a char pointer to the first instance of the substring or NULL if not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strstr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strstr(const char *haystack, const char *needle);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_SHUTDOWN_DBUS_ON_QUIT (C)\nDESCRIPTION: Defines the SDL_HINT_SHUTDOWN_DBUS_ON_QUIT macro, which is used to control whether SDL calls dbus_shutdown() on quit. Setting this hint to \"1\" causes SDL to call dbus_shutdown() during SDL_Quit(). This is primarily a debug tool and should not be used in production.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_SHUTDOWN_DBUS_ON_QUIT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_SHUTDOWN_DBUS_ON_QUIT \"SDL_SHUTDOWN_DBUS_ON_QUIT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HasSSE41 Function Definition in C\nDESCRIPTION: This code snippet shows the function definition of SDL_HasSSE41 in C. It is used to determine if the CPU has SSE4.1 features. It returns a boolean value indicating whether SSE4.1 is supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasSSE41.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasSSE41(void);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Scale with SDL_RenderGetScale in C\nDESCRIPTION: Retrieves the drawing scale factors (horizontal and vertical) of a given SDL_Renderer. The function populates the provided float pointers scaleX and scaleY with the scaling factors. It requires a valid SDL_Renderer pointer as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RenderGetScale(SDL_Renderer * renderer,\n                       float *scaleX, float *scaleY);\n```\n\n----------------------------------------\n\nTITLE: SDL_StopHapticEffect Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_StopHapticEffect function. It takes an SDL_Haptic pointer and an SDL_HapticEffectID as input, and returns a boolean value indicating success or failure. The function is used to stop a haptic effect running on a given haptic device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StopHapticEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_StopHapticEffect(SDL_Haptic *haptic, SDL_HapticEffectID effect);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MAC_BACKGROUND_APP in C\nDESCRIPTION: This C macro defines the SDL_HINT_MAC_BACKGROUND_APP hint, which allows you to configure whether an SDL application is forced to become a foreground process on macOS. Setting this hint prevents SDL from forcing the app to the foreground.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MAC_BACKGROUND_APP.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_MAC_BACKGROUND_APP    \"SDL_MAC_BACKGROUND_APP\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ControllerDeviceEvent Structure Definition in C\nDESCRIPTION: Defines the structure SDL_ControllerDeviceEvent used to represent controller device events in SDL. It includes the event type, timestamp, and device index or instance ID. This structure is used when a controller is added, removed, or remapped.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ControllerDeviceEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_ControllerDeviceEvent\n{\n    Uint32 type;        /**< SDL_CONTROLLERDEVICEADDED, SDL_CONTROLLERDEVICEREMOVED, SDL_CONTROLLERDEVICEREMAPPED, or SDL_CONTROLLERSTEAMHANDLEUPDATED */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Sint32 which;       /**< The joystick device index for the ADDED event, instance id for the REMOVED or REMAPPED event */\n} SDL_ControllerDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: Get Environment Variable with SDL_getenv_unsafe (C)\nDESCRIPTION: This snippet shows the syntax for using the SDL_getenv_unsafe function to retrieve the value of an environment variable. It takes the name of the variable as input and returns a pointer to its value or NULL if not found. This function is not thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_getenv_unsafe.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_getenv_unsafe(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Destroying an SDL_Palette in C\nDESCRIPTION: Frees the memory associated with an SDL_Palette structure. The palette must have been created with SDL_CreatePalette. It is safe to call this function from any thread, as long as the palette is not modified or destroyed in another thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyPalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyPalette(SDL_Palette *palette);\n```\n\n----------------------------------------\n\nTITLE: SDL_lroundf Syntax\nDESCRIPTION: Shows the syntax of the SDL_lroundf function in C. The function takes a single-precision floating-point value as input and returns a long integer representing the nearest integer to the input value, rounding halfway values away from zero.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_lroundf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nlong SDL_lroundf(float x);\n```\n\n----------------------------------------\n\nTITLE: SDL_TICKS_PASSED Macro Replacement in C\nDESCRIPTION: This snippet demonstrates the replacement of the SDL_TICKS_PASSED macro with direct comparison for checking if a time deadline has passed. This change is due to SDL_GetTicks() now returning a 64-bit value. It compares current ticks with a deadline calculated earlier. The old method used 32 bit operations, potentially resulting in incorrect calculations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_45\n\nLANGUAGE: c\nCODE:\n```\nUint32 deadline = SDL_GetTicks() + 1000;\n...\nif (SDL_TICKS_PASSED(SDL_GetTicks(), deadline)) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Assertion Handler SDL2 (C)\nDESCRIPTION: Sets a custom assertion handler in SDL. The handler will be called when an assertion fails. The userdata pointer will be passed to the handler function, which is useful for maintaining state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetAssertionHandler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetAssertionHandler(\n                    SDL_AssertionHandler handler,\n                    void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_Event Structure Definition in C\nDESCRIPTION: Defines the SDL_Event union, which is used to represent all types of events in the SDL library. The union contains a type field and a number of event-specific structures, allowing access to relevant data based on the event type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Event.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef union SDL_Event\n{\n    Uint32 type;                            /**< Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration */\n    SDL_CommonEvent common;                 /**< Common event data */\n    SDL_DisplayEvent display;               /**< Display event data */\n    SDL_WindowEvent window;                 /**< Window event data */\n    SDL_KeyboardDeviceEvent kdevice;        /**< Keyboard device change event data */\n    SDL_KeyboardEvent key;                  /**< Keyboard event data */\n    SDL_TextEditingEvent edit;              /**< Text editing event data */\n    SDL_TextEditingCandidatesEvent edit_candidates; /**< Text editing candidates event data */\n    SDL_TextInputEvent text;                /**< Text input event data */\n    SDL_MouseDeviceEvent mdevice;           /**< Mouse device change event data */\n    SDL_MouseMotionEvent motion;            /**< Mouse motion event data */\n    SDL_MouseButtonEvent button;            /**< Mouse button event data */\n    SDL_MouseWheelEvent wheel;              /**< Mouse wheel event data */\n    SDL_JoyDeviceEvent jdevice;             /**< Joystick device change event data */\n    SDL_JoyAxisEvent jaxis;                 /**< Joystick axis event data */\n    SDL_JoyBallEvent jball;                 /**< Joystick ball event data */\n    SDL_JoyHatEvent jhat;                   /**< Joystick hat event data */\n    SDL_JoyButtonEvent jbutton;             /**< Joystick button event data */\n    SDL_JoyBatteryEvent jbattery;           /**< Joystick battery event data */\n    SDL_GamepadDeviceEvent gdevice;         /**< Gamepad device event data */\n    SDL_GamepadAxisEvent gaxis;             /**< Gamepad axis event data */\n    SDL_GamepadButtonEvent gbutton;         /**< Gamepad button event data */\n    SDL_GamepadTouchpadEvent gtouchpad;     /**< Gamepad touchpad event data */\n    SDL_GamepadSensorEvent gsensor;         /**< Gamepad sensor event data */\n    SDL_AudioDeviceEvent adevice;           /**< Audio device event data */\n    SDL_CameraDeviceEvent cdevice;          /**< Camera device event data */\n    SDL_SensorEvent sensor;                 /**< Sensor event data */\n    SDL_QuitEvent quit;                     /**< Quit request event data */\n    SDL_UserEvent user;                     /**< Custom event data */\n    SDL_TouchFingerEvent tfinger;           /**< Touch finger event data */\n    SDL_PenProximityEvent pproximity;       /**< Pen proximity event data */\n    SDL_PenTouchEvent ptouch;               /**< Pen tip touching event data */\n    SDL_PenMotionEvent pmotion;             /**< Pen motion event data */\n    SDL_PenButtonEvent pbutton;             /**< Pen button event data */\n    SDL_PenAxisEvent paxis;                 /**< Pen axis event data */\n    SDL_RenderEvent render;                 /**< Render event data */\n    SDL_DropEvent drop;                     /**< Drag and drop event data */\n    SDL_ClipboardEvent clipboard;           /**< Clipboard event data */\n\n    /* This is necessary for ABI compatibility between Visual C++ and GCC.\n       Visual C++ will respect the push pack pragma and use 52 bytes (size of\n       SDL_TextEditingEvent, the largest structure for 32-bit and 64-bit\n       architectures) for this union, and GCC will use the alignment of the\n       largest datatype within the union, which is 8 bytes on 64-bit\n       architectures.\n\n       So... we'll add padding to force the size to be the same for both.\n\n       On architectures where pointers are 16 bytes, this needs rounding up to\n       the next multiple of 16, 64, and on architectures where pointers are\n       even larger the size of SDL_UserEvent will dominate as being 3 pointers.\n    */\n    Uint8 padding[128];\n} SDL_Event;\n```\n\n----------------------------------------\n\nTITLE: SDL_SetSurfacePalette Function Definition in C\nDESCRIPTION: Defines the SDL_SetSurfacePalette function, which sets the palette of a given SDL_Surface. It takes a pointer to an SDL_Surface and a pointer to an SDL_Palette as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetSurfacePalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetSurfacePalette(SDL_Surface *surface, SDL_Palette *palette);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_GetAddressString Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_GetAddressString function in C. It takes an SDLNet_Address pointer as input and returns a const char* representing the address string or NULL on error. The function is part of the SDL_net library and requires SDL_net.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_GetAddressString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDLNet_GetAddressString(SDLNet_Address *address);\n```\n\n----------------------------------------\n\nTITLE: Get EGL Surface from SDL Window in C\nDESCRIPTION: Retrieves the EGL surface associated with the specified SDL window.  This function requires an initialized SDL window and returns an SDL_EGLSurface pointer, or NULL on failure.  It should be called on the main thread to ensure thread safety.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGL_GetWindowSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_EGLSurface SDL_EGL_GetWindowSurface(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Get Text Script with TTF_GetTextScript in C\nDESCRIPTION: Retrieves the script used for text shaping in a TTF_Text object. It returns an ISO 15924 code or 0 if a script hasn't been set on either the text object or the font. The function is available since SDL_ttf 3.0.0 and should be called on the thread that created the text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextScript.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetTextScript(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Get Chunk Decoder Name - SDL_mixer (C)\nDESCRIPTION: This C code snippet demonstrates how to retrieve a chunk decoder's name using the Mix_GetChunkDecoder function from the SDL_mixer library. The function takes an integer index as input and returns a const char* representing the decoder's name. Ensure SDL_mixer is initialized via Mix_OpenAudio or Mix_OpenAudioDevice before calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetChunkDecoder.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst char * Mix_GetChunkDecoder(int index);\n```\n\n----------------------------------------\n\nTITLE: SDL_IOvprintf Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_IOvprintf function, which prints formatted output to an SDL_IOStream. It takes an SDL_IOStream pointer, a format string, and a variable argument list as input. Returns the number of bytes written or 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOvprintf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_IOvprintf(SDL_IOStream *context, const char *fmt, va_list ap);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurfaceUnchecked Syntax in C\nDESCRIPTION: Shows the function signature for `SDL_BlitSurfaceUnchecked` in C. This function performs a blit (copy) from a source surface to a destination surface, given source and destination rectangles. It assumes the rectangles have already been clipped.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitSurfaceUnchecked.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_BlitSurfaceUnchecked(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);\n```\n\n----------------------------------------\n\nTITLE: Get RGB Values from Pixel C\nDESCRIPTION: Extracts RGB color components from a pixel value based on a given SDL_PixelFormat. The function populates the provided Uint8 pointers with the red, green, and blue color values. It requires the pixel value, a pointer to the SDL_PixelFormat structure, and pointers to store the resulting color components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRGB.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetRGB(Uint32 pixel,\n                const SDL_PixelFormat * format,\n                Uint8 * r, Uint8 * g, Uint8 * b);\n```\n\n----------------------------------------\n\nTITLE: IMG_isJXL Function Definition in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_isJXL function, which is used to detect JXL image data within an SDL_RWops stream. The function takes a pointer to an SDL_RWops struct as input and returns an integer indicating whether the data is JXL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isJXL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isJXL(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Defining the SDL_PenProximityEvent structure in C\nDESCRIPTION: This C code defines the structure SDL_PenProximityEvent which is used to store information about pen proximity events in SDL3. The structure includes fields for the event type (SDL_EVENT_PEN_PROXIMITY_IN or SDL_EVENT_PEN_PROXIMITY_OUT), a reserved field, the timestamp in nanoseconds, the window ID, and the pen instance ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenProximityEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_PenProximityEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_PEN_PROXIMITY_IN or SDL_EVENT_PEN_PROXIMITY_OUT */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The window with pen focus, if any */\n    SDL_PenID which;        /**< The pen instance id */\n} SDL_PenProximityEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurfaceTiled Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_BlitSurfaceTiled function, used to perform a tiled blit operation between two SDL_Surface structures. It takes source and destination SDL_Surface pointers, and SDL_Rect pointers for source and destination rectangles as parameters. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitSurfaceTiled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_BlitSurfaceTiled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst, const SDL_Rect *dstrect);\n```\n\n----------------------------------------\n\nTITLE: Get Player Index from Game Controller (SDL2, C)\nDESCRIPTION: Retrieves the player index of a given SDL_GameController. For XInput controllers, this corresponds to the XInput user index. Returns the player index or -1 if unavailable. Requires SDL 2.0.9 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetPlayerIndex.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_GameControllerGetPlayerIndex(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Set HID Device Non-Blocking Mode - C\nDESCRIPTION: This code snippet sets the non-blocking mode for a HID device. It takes a device handle and an integer indicating whether to enable or disable non-blocking mode (1 for enable, 0 for disable).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_set_nonblocking.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_set_nonblocking(SDL_hid_device *dev, int nonblock);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Name For ID in C\nDESCRIPTION: Retrieves the implementation-dependent name of a gamepad using its instance ID.  This function is part of the SDL3 library and requires the SDL_gamepad.h header. It returns a const char* representing the gamepad's name or NULL if no name is found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadNameForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadNameForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_STATUS in C\nDESCRIPTION: Defines the SDL_HAPTIC_STATUS macro, which is a bit flag used to indicate that the haptic device supports querying the effect status. It is a constant unsigned integer equal to 1 shifted left by 18 bits. This macro is used in conjunction with `SDL_GetHapticEffectStatus` to determine the state of a haptic effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_STATUS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_STATUS     (1u<<18)\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_UnloadLibrary Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GL_UnloadLibrary function in C. It takes no arguments and returns void. It unloads the OpenGL library previously loaded by SDL_GL_LoadLibrary().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_UnloadLibrary.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GL_UnloadLibrary(void);\n```\n\n----------------------------------------\n\nTITLE: Get Manufacturer String from HID Device in C\nDESCRIPTION: Retrieves the manufacturer string from a HID device using the SDL_hid_get_manufacturer_string function. This function requires a valid SDL_hid_device handle obtained from SDL_hid_open(), a wchar_t buffer to store the string, and the maximum length of the buffer. On success, it returns 0; otherwise, it returns a negative error code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_get_manufacturer_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_manufacturer_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_Keymod Enumeration Definition in C\nDESCRIPTION: Defines the SDL_Keymod enumeration, which lists possible keyboard modifiers.  These modifiers can be combined using bitwise OR to represent multiple active modifiers. The enumeration provides values for left and right shift, control, alt, GUI keys, as well as Num Lock, Caps Lock, Mode, and Scroll Lock.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Keymod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_Keymod\n{\n    KMOD_NONE = 0x0000,\n    KMOD_LSHIFT = 0x0001,\n    KMOD_RSHIFT = 0x0002,\n    KMOD_LCTRL = 0x0040,\n    KMOD_RCTRL = 0x0080,\n    KMOD_LALT = 0x0100,\n    KMOD_RALT = 0x0200,\n    KMOD_LGUI = 0x0400,\n    KMOD_RGUI = 0x0800,\n    KMOD_NUM = 0x1000,\n    KMOD_CAPS = 0x2000,\n    KMOD_MODE = 0x4000,\n    KMOD_SCROLL = 0x8000,\n\n    KMOD_CTRL = KMOD_LCTRL | KMOD_RCTRL,\n    KMOD_SHIFT = KMOD_LSHIFT | KMOD_RSHIFT,\n    KMOD_ALT = KMOD_LALT | KMOD_RALT,\n    KMOD_GUI = KMOD_LGUI | KMOD_RGUI,\n\n    KMOD_RESERVED = KMOD_SCROLL /* This is for source-level compatibility with SDL 2.0.0. */\n} SDL_Keymod;\n```\n\n----------------------------------------\n\nTITLE: IMG_SavePNG_IO Syntax in C\nDESCRIPTION: Saves an SDL_Surface into PNG image data, via an SDL_IOStream. The function takes an SDL_Surface pointer, an SDL_IOStream pointer, and a boolean indicating whether to close the IOStream. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_SavePNG_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SavePNG_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Check for ARM SIMD support using SDL_HasARMSIMD in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasARMSIMD function, which is used to determine if the CPU has ARM SIMD features. The function takes no arguments and returns a SDL_bool value indicating whether ARM SIMD is supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasARMSIMD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasARMSIMD(void);\n```\n\n----------------------------------------\n\nTITLE: Building SDL tests using CMake\nDESCRIPTION: This snippet demonstrates how to build the SDL test programs.  It adds the `-DSDL_TESTS=ON` option to the initial CMake command, enabling the test build. The tests can then be run from the `build/test/` directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build -DSDL_TESTS=ON\n```\n\n----------------------------------------\n\nTITLE: SDL_StopTextInput Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_StopTextInput function in C. It takes a pointer to an SDL_Window as input, which specifies the window to disable text input for. The function returns a boolean value indicating success or failure, with additional error information available via SDL_GetError().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StopTextInput.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_StopTextInput(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_FlushRenderer Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_FlushRenderer function in C. It takes a pointer to an SDL_Renderer as input and returns a boolean value indicating success or failure. Call SDL_GetError() for more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlushRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_FlushRenderer(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Get Active OpenGL Window with SDL_GL_GetCurrentWindow (C)\nDESCRIPTION: This function retrieves the currently active OpenGL window using SDL_GL_GetCurrentWindow. It takes no arguments and returns a pointer to the SDL_Window.  If no window is active or an error occurs, it returns NULL, and SDL_GetError() can be called for more information. This function is thread-safe only when called from the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_GetCurrentWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GL_GetCurrentWindow(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_DEVICE Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_JOYSTICK_DEVICE macro. The macro expands to the string \"SDL_JOYSTICK_DEVICE\", which is used to set the joystick device hint in SDL. It is defined in the SDL3/SDL_hints.h header file and is used to specify joystick devices on Linux.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_DEVICE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_JOYSTICK_DEVICE \"SDL_JOYSTICK_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_UpperBlitScaled Function Definition in C\nDESCRIPTION: Defines the SDL_UpperBlitScaled function which performs a scaled surface copy from the source surface (src) to the destination surface (dst). The srcrect specifies the area of the source surface to copy, and dstrect specifies the area of the destination surface to copy to. Returns an integer, likely indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UpperBlitScaled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UpperBlitScaled\n    (SDL_Surface * src, const SDL_Rect * srcrect,\n    SDL_Surface * dst, SDL_Rect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAndroidInternalStoragePath Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetAndroidInternalStoragePath function, which retrieves the internal storage path for the Android application. It takes no arguments and returns a const char*.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidInternalStoragePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetAndroidInternalStoragePath(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_PointInRectFloat Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_PointInRectFloat function in C. It takes a pointer to an SDL_FPoint and a pointer to an SDL_FRect as input and returns a boolean value indicating whether the point is within the rectangle. It's a forced-inline function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PointInRectFloat.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_PointInRectFloat(const SDL_FPoint *p, const SDL_FRect *r);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioIterationCallback Definition in C\nDESCRIPTION: Defines the SDL_AudioIterationCallback function signature. This callback function is invoked before and after an audio device processes its bound audio streams. The 'userdata' parameter is a pointer provided by the application, 'devid' is the audio device ID, and 'start' indicates if it's the start or end of the iteration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioIterationCallback.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (SDLCALL *SDL_AudioIterationCallback)(void *userdata, SDL_AudioDeviceID devid, bool start);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadS64LE Function Signature in C\nDESCRIPTION: This is the function signature for SDL_ReadS64LE. It reads 64 bits of little-endian data from an SDL_IOStream. The `src` parameter is a pointer to the SDL_IOStream to read from, and the `value` parameter is a pointer to a Sint64 where the read data will be stored. The function returns `true` on success and `false` on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadS64LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadS64LE(SDL_IOStream *src, Sint64 *value);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderCopy Function Definition in C\nDESCRIPTION: Defines the syntax for the SDL_RenderCopy function in C. This function copies a portion of the texture to the current rendering target. It takes a renderer, texture, source rectangle, and destination rectangle as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderCopy.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderCopy(SDL_Renderer * renderer,\n                   SDL_Texture * texture,\n                   const SDL_Rect * srcrect,\n                   const SDL_Rect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: Getting Window Progress State in C\nDESCRIPTION: Retrieves the current progress state of a window's taskbar icon using SDL_GetWindowProgressState. It takes an SDL_Window pointer as input and returns an SDL_ProgressState enum. This function is part of the SDL3 video subsystem and is available from SDL 3.4.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowProgressState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_ProgressState SDL_GetWindowProgressState(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Set Window Input Focus in SDL2 (C)\nDESCRIPTION: This snippet shows the syntax for the SDL_SetWindowInputFocus function, which explicitly sets the input focus to the specified SDL_Window. It takes a pointer to an SDL_Window as input. Returns 0 on success, or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowInputFocus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetWindowInputFocus(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Get Log Priority - SDL2 - C\nDESCRIPTION: Retrieves the log priority for a specified category using SDL_LogGetPriority. The function takes an integer representing the category as input and returns an SDL_LogPriority value indicating the current priority level set for that category. This function is part of the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogGetPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_LogPriority SDL_LogGetPriority(int category);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_GAMECUBE_DEVICES in C\nDESCRIPTION: This C code snippet defines the SDL_HINT_JOYSTICK_GAMECUBE_DEVICES macro. It's used to set the hint that specifies a comma-separated list of USB VID/PID pairs (in hexadecimal format) for identifying joysticks with a GameCube form factor. The value can also be a file path containing the list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_GAMECUBE_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES \"SDL_JOYSTICK_GAMECUBE_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_DISPLAY_PRIORITY in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_DISPLAY_PRIORITY macro. This macro is a string literal that acts as the key for setting the video display priority hint using SDL_SetHint(). The value associated with this hint should be a comma-separated string of display names.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_DISPLAY_PRIORITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_DISPLAY_PRIORITY \"SDL_VIDEO_DISPLAY_PRIORITY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUFragmentStorageBuffers Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_BindGPUFragmentStorageBuffers function. This function binds storage buffers to the fragment shader for a given render pass, starting at a specified slot. It takes a render pass, the starting slot, an array of GPU buffers, and the number of buffers to bind as parameters. The buffers must be created with SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUFragmentStorageBuffers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUFragmentStorageBuffers(\n    SDL_GPURenderPass *render_pass,\n    Uint32 first_slot,\n    SDL_GPUBuffer *const *storage_buffers,\n    Uint32 num_bindings);\n\n```\n\n----------------------------------------\n\nTITLE: SDLNet_CheckSockets Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDLNet_CheckSockets function in C. It takes an SDLNet_SocketSet and a timeout value in milliseconds as input and returns an integer indicating the number of sockets ready for reading or -1 on error. The function is part of the SDL_net library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_CheckSockets.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_CheckSockets(SDLNet_SocketSet set, Uint32 timeout);\n```\n\n----------------------------------------\n\nTITLE: Get Font Family Name with TTF_GetFontFamilyName in C\nDESCRIPTION: Retrieves the family name of a TTF font using the TTF_GetFontFamilyName function. The function accepts a pointer to a TTF_Font structure and returns a const char* representing the font's family name. The returned string should not be modified or freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontFamilyName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * TTF_GetFontFamilyName(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_SoftStretch Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SoftStretch function. This function performs a fast, low quality, stretch blit between two surfaces of the same format. It takes source and destination surfaces, source and destination rectangles as input parameters, and returns an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SoftStretch.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_SoftStretch(SDL_Surface * src,\n                    const SDL_Rect * srcrect,\n                    SDL_Surface * dst,\n                    const SDL_Rect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GPUBufferRegion Structure in C\nDESCRIPTION: Defines the `SDL_GPUBufferRegion` structure in C, which represents a region within a GPU buffer. It contains a pointer to the `SDL_GPUBuffer`, an offset representing the starting byte, and a size representing the length of the region in bytes. This structure is used when transferring data to or from GPU buffers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBufferRegion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUBufferRegion\n{\n    SDL_GPUBuffer *buffer;  /**< The buffer. */\n    Uint32 offset;          /**< The starting byte within the buffer. */\n    Uint32 size;            /**< The size in bytes of the region. */\n} SDL_GPUBufferRegion;\n```\n\n----------------------------------------\n\nTITLE: SDL_PRINTF_VARARG_FUNC Macro Definition in C\nDESCRIPTION: This macro annotates a vararg function that operates like printf. It uses the __attribute__ (( format( __printf__, fmtargnumber, fmtargnumber+1 ))) to tell the compiler that the specified argument number is a printf-style format string. If the compiler does not support this annotation mechanism, it is defined to nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRINTF_VARARG_FUNC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRINTF_VARARG_FUNC( fmtargnumber ) __attribute__ (( format( __printf__, fmtargnumber, fmtargnumber+1 )))\n```\n\n----------------------------------------\n\nTITLE: Get GDK Default User Handle in SDL3 (C)\nDESCRIPTION: Retrieves a reference to the default user handle for GDK using the `SDL_GetGDKDefaultUser` function. The `outUserHandle` parameter, a pointer to an `XUserHandle`, will be populated with the default user handle. The function returns `true` on success and `false` on failure. Requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGDKDefaultUser.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetGDKDefaultUser(XUserHandle *outUserHandle);\n```\n\n----------------------------------------\n\nTITLE: SDL_AppInit Callback\nDESCRIPTION: This C code demonstrates the SDL_AppInit callback function, which is called once before anything else in an SDL3 program using callback entry points. It receives command-line arguments and allows setting an application state pointer. The return value determines whether the application continues, fails, or succeeds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/main-functions.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nSDL_AppResult SDL_AppInit(void **appstate, int argc, char **argv);\n```\n\n----------------------------------------\n\nTITLE: CUR Image Data Detection in SDL_image (C)\nDESCRIPTION: This function detects if the data in the SDL_RWops stream is in CUR format. It reads a minimal amount of data to determine the file type and seeks back to the original position. The function returns non-zero if the data is CUR, and zero otherwise. It relies on SDL_RWops for stream handling and SDL_image for image format detection.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isCUR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isCUR(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Setting GPU Stencil Reference in C\nDESCRIPTION: Sets the stencil reference value for a given SDL_GPURenderPass. This function takes a render pass handle and an 8-bit unsigned integer as input. The specified reference value will be used in subsequent stencil tests within the provided render pass. Requires SDL3 and the SDL_gpu.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPUStencilReference.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetGPUStencilReference(\n    SDL_GPURenderPass *render_pass,\n    Uint8 reference);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick GUID Info in C\nDESCRIPTION: Retrieves device information (vendor, product, version, CRC16) encoded in an SDL_JoystickGUID structure. The function takes an SDL_JoystickGUID as input and populates the provided pointers with the extracted information. It requires the SDL2 library and is available since SDL 2.26.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetJoystickGUIDInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetJoystickGUIDInfo(SDL_JoystickGUID guid, Uint16 *vendor, Uint16 *product, Uint16 *version, Uint16 *crc16);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_GetLocalAddresses Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_GetLocalAddresses function, which retrieves a list of local network addresses.  It takes a pointer to an integer to store the number of addresses found and returns a NULL-terminated array of SDLNet_Address pointers or NULL on error.  The returned array must be freed using SDLNet_FreeLocalAddresses.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_GetLocalAddresses.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nextern SDL_DECLSPEC SDLNet_Address **SDLCALL SDLNet_GetLocalAddresses(int *num_addresses);\n```\n\n----------------------------------------\n\nTITLE: Check Joystick LED Availability in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_JoystickHasLED function to query whether a given SDL_Joystick instance has a modifiable LED.  The function returns SDL_TRUE if the joystick has an LED, and SDL_FALSE otherwise. This requires an initialized SDL context and a valid joystick instance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickHasLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_JoystickHasLED(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUTF8_LCD Syntax (C)\nDESCRIPTION: Defines the syntax for the TTF_RenderUTF8_LCD function in C.  This function renders UTF-8 text with LCD subpixel quality to a new ARGB surface.  It takes a TTF_Font pointer, a UTF-8 encoded text string, a foreground color, and a background color as arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUTF8_LCD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUTF8_LCD(TTF_Font *font,\n                const char *text, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Attaching Virtual Joystick (SDL2)\nDESCRIPTION: This code snippet shows the syntax for using SDL_JoystickAttachVirtualEx. The function takes a pointer to an SDL_VirtualJoystickDesc structure which defines the extended properties of the virtual joystick. It returns the joystick's device index, or -1 if an error occurred.  This function is available since SDL 2.24.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickAttachVirtualEx.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickAttachVirtualEx(const SDL_VirtualJoystickDesc *desc);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUTO_UPDATE_SENSORS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_AUTO_UPDATE_SENSORS macro, which is used to control whether SDL automatically updates the sensor state when input events are received. It's defined as a string literal, \"SDL_AUTO_UPDATE_SENSORS\". This hint can be toggled on and off at runtime and defaults to \"1\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUTO_UPDATE_SENSORS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUTO_UPDATE_SENSORS    \"SDL_AUTO_UPDATE_SENSORS\"\n```\n\n----------------------------------------\n\nTITLE: Getting Joystick Instance ID\nDESCRIPTION: This code shows how to get the SDL_JoystickID for an opened SDL_Joystick* in SDL 2.0. This ID is used to identify joysticks as devices are plugged in and pulled out during the game's lifetime. The `SDL_JoystickInstanceID` function is used to retrieve the ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nSDL_JoystickID myID = SDL_JoystickInstanceID(myOpenedStick);\n```\n\n----------------------------------------\n\nTITLE: Opening Haptic Device from Mouse in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_HapticOpenFromMouse to attempt to open a haptic device associated with the current mouse.  It returns a SDL_Haptic pointer, which will be NULL if it fails. Use SDL_GetError() to find out more about the failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticOpenFromMouse.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Haptic* SDL_HapticOpenFromMouse(void);\n```\n\n----------------------------------------\n\nTITLE: SDL Mouse Button Mask Macro and Constants (C)\nDESCRIPTION: Defines a macro SDL_BUTTON_MASK(X) that generates a bitmask for a given mouse button X. It also defines constants for the masks of each mouse button (SDL_BUTTON_LMASK, SDL_BUTTON_MMASK, SDL_BUTTON_RMASK, SDL_BUTTON_X1MASK, SDL_BUTTON_X2MASK).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseButtonFlags.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_BUTTON_MASK(X)  (1u << ((X)-1))\n#define SDL_BUTTON_LMASK    SDL_BUTTON_MASK(SDL_BUTTON_LEFT)\n#define SDL_BUTTON_MMASK    SDL_BUTTON_MASK(SDL_BUTTON_MIDDLE)\n#define SDL_BUTTON_RMASK    SDL_BUTTON_MASK(SDL_BUTTON_RIGHT)\n#define SDL_BUTTON_X1MASK   SDL_BUTTON_MASK(SDL_BUTTON_X1)\n#define SDL_BUTTON_X2MASK   SDL_BUTTON_MASK(SDL_BUTTON_X2)\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadAsyncIO Syntax in C\nDESCRIPTION: Defines the syntax for SDL_ReadAsyncIO, an asynchronous I/O function in SDL3 that initiates a read operation.  It takes a SDL_AsyncIO struct, a pointer to a buffer, an offset, a size, an SDL_AsyncIOQueue, and user data as parameters. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadAsyncIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadAsyncIO(SDL_AsyncIO *asyncio, void *ptr, Uint64 offset, Uint64 size, SDL_AsyncIOQueue *queue, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Flushing an SDL_AudioStream\nDESCRIPTION: This code snippet demonstrates how to flush an SDL_AudioStream using SDL_FlushAudioStream. Flushing forces the stream to convert any buffered data, ensuring that all remaining data is processed and made available for retrieval. It is useful for completing the stream and obtaining the last few samples.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Tutorials/AudioStream.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nSDL_FlushAudioStream(stream);\n```\n\n----------------------------------------\n\nTITLE: Detect XV Image Data - IMG_isXV - C\nDESCRIPTION: This function checks if the provided SDL_RWops stream contains XV image data. It reads the minimum amount of data necessary to identify the file type and then seeks back to the original position. It returns a non-zero value if the data is XV, and zero otherwise. Requires SDL_image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isXV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isXV(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Locking Sensors with SDL_LockSensors in C\nDESCRIPTION: This function locks access to the sensor API, ensuring thread safety when accessing sensors from multiple threads. It prevents the sensor list from changing and stops sensor events from being delivered while the lock is held. This is crucial when working with sensor data across multiple threads in an SDL application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockSensors.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockSensors(void);\n```\n\n----------------------------------------\n\nTITLE: Release GPU Texture SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_ReleaseGPUTexture function, which releases a GPU texture associated with a given SDL_GPUDevice. It takes two parameters: a pointer to the SDL_GPUDevice and a pointer to the SDL_GPUTexture to be destroyed. After calling this function, the texture should not be referenced.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseGPUTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseGPUTexture(\n    SDL_GPUDevice *device,\n    SDL_GPUTexture *texture);\n```\n\n----------------------------------------\n\nTITLE: Compiling with Emscripten\nDESCRIPTION: This snippet shows how to compile a C program using Emscripten's 'emcc' compiler.  It generates HTML, JavaScript, and WebAssembly files to run the application in a web browser.  The '-o index.html' option creates a simple HTML page to load the app.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nemcc -o index.html mygame.c\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderLogicalToWindow Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_RenderLogicalToWindow function. It takes an SDL_Renderer, logical x and y coordinates, and pointers to integers that will store the resulting window x and y coordinates. The function calculates the real window coordinates based on the logical coordinates, considering scaling and logical size settings of the renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderLogicalToWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RenderLogicalToWindow(SDL_Renderer * renderer, \n                                    float logicalX, float logicalY,\n                                    int *windowX, int *windowY);\n```\n\n----------------------------------------\n\nTITLE: Unsetting Environment Variable in SDL3 (C)\nDESCRIPTION: This C code snippet shows the syntax for using SDL_UnsetEnvironmentVariable to remove an environment variable from a specified SDL_Environment. It takes an SDL_Environment pointer and the name of the variable as input. It returns a boolean indicating success or failure, with SDL_GetError() providing additional error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnsetEnvironmentVariable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_UnsetEnvironmentVariable(SDL_Environment *env, const char *name);\n```\n\n----------------------------------------\n\nTITLE: SDL_EnterAppMainCallbacks Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_EnterAppMainCallbacks function in C. This function serves as an entry point for SDL when using callback functions for application lifecycle management. It takes standard Unix main arguments, along with function pointers for initialization, iteration, event handling, and quitting.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EnterAppMainCallbacks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_EnterAppMainCallbacks(int argc, char *argv[], SDL_AppInit_func appinit, SDL_AppIterate_func appiter, SDL_AppEvent_func appevent, SDL_AppQuit_func appquit);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS macro as a string literal. This hint controls whether window operations block until they are completed. Setting it to \"1\" is equivalent to calling SDL_SyncWindow() after every window operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS \"SDL_VIDEO_SYNC_WINDOW_OPERATIONS\"\n```\n\n----------------------------------------\n\nTITLE: Using SDL_PRILLx with SDL_Log in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_PRILLx macro with the SDL_Log function to print an unsigned long long integer value. The macro is inserted into the format string of SDL_Log to correctly format the value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILLx.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRILLx \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: Compiling with GCC\nDESCRIPTION: This snippet demonstrates the typical command for compiling a C program using GCC. It creates an executable file named 'mygame' from the source file 'mygame.c'.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngcc -o mygame mygame.c  # or whatever\n```\n\n----------------------------------------\n\nTITLE: Disable X11 Backend for DirectFB\nDESCRIPTION: This snippet demonstrates how to disable the use of the X11 backend when the DISPLAY environment variable is found, forcing DirectFB to use its native framebuffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL_DIRECTFB_X11_CHECK=0\n```\n\n----------------------------------------\n\nTITLE: SDL_EGLConfig Type Definition in C\nDESCRIPTION: Defines the SDL_EGLConfig type as a void pointer. This opaque type represents an EGL configuration used within SDL3 for video initialization and requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGLConfig.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *SDL_EGLConfig;\n```\n\n----------------------------------------\n\nTITLE: SDL_MostSignificantBitIndex32 Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_MostSignificantBitIndex32 function, which is used to determine the index of the most significant bit in a 32-bit unsigned integer. The function takes a Uint32 as input and returns an integer representing the index of the MSB, or -1 if the input is 0. It requires the SDL_bits.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MostSignificantBitIndex32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE int SDL_MostSignificantBitIndex32(Uint32 x);\n```\n\n----------------------------------------\n\nTITLE: Get Keyboard State in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetKeyboardState function, which retrieves a snapshot of the keyboard state. The function takes a pointer to an integer as input, which can receive the length of the returned array. The function returns a pointer to an array of Uint8 values representing the state of each key.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetKeyboardState.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nconst Uint8* SDL_GetKeyboardState(int *numkeys);\n```\n\n----------------------------------------\n\nTITLE: SDL_EGLIntArrayCallback Definition in C\nDESCRIPTION: Defines the SDL_EGLIntArrayCallback type, which is a function pointer to a callback that returns an array of EGL attributes. The callback takes a userdata pointer, EGLDisplay, and EGLConfig as input and returns a dynamically allocated array of EGL attributes terminated by EGL_NONE. This array is used during EGL surface or context creation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGLIntArrayCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_EGLint *(SDLCALL *SDL_EGLIntArrayCallback)(void *userdata, SDL_EGLDisplay display, SDL_EGLConfig config);\n```\n\n----------------------------------------\n\nTITLE: Query Font Line Skip - SDL_ttf - C\nDESCRIPTION: This code snippet shows the syntax for the TTF_FontLineSkip function, which retrieves the line spacing of a specified font. It takes a pointer to a TTF_Font structure as input and returns an integer representing the line spacing in pixels. The function is part of the SDL_ttf library and requires SDL_ttf.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_FontLineSkip.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_FontLineSkip(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_UINT64_C Macro Definition in C\nDESCRIPTION: The SDL_UINT64_C macro appends the 64-bit integer suffix (ULL) to an unsigned integer literal. This prevents compilers from incorrectly interpreting large integer literals (larger than 0xFFFFFFFF) as overflowing a 32-bit value. It takes an unsigned integer literal as input and returns the same literal with the ULL suffix.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UINT64_C.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_UINT64_C(c)  c ## ULL /* or whatever the current compiler uses. */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE macro. This macro is a string literal that represents the name of the hint used to specify the default ALSA audio playback device. Setting this hint allows applications to select a specific ALSA device for audio playback instead of relying on the system default.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE \"SDL_AUDIO_ALSA_DEFAULT_PLAYBACK_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HitTestResult Enum in C\nDESCRIPTION: This code snippet defines the `SDL_HitTestResult` enumeration in C. It specifies the possible return values from the `SDL_HitTest` callback function, allowing the application to define regions within a window that have special properties like dragging or resizing. The values indicate how the window should behave when the user interacts with the specified region.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HitTestResult.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_HitTestResult\n{\n    SDL_HITTEST_NORMAL,  /**< Region is normal. No special properties. */\n    SDL_HITTEST_DRAGGABLE,  /**< Region can drag entire window. */\n    SDL_HITTEST_RESIZE_TOPLEFT,\n    SDL_HITTEST_RESIZE_TOP,\n    SDL_HITTEST_RESIZE_TOPRIGHT,\n    SDL_HITTEST_RESIZE_RIGHT,\n    SDL_HITTEST_RESIZE_BOTTOMRIGHT,\n    SDL_HITTEST_RESIZE_BOTTOM,\n    SDL_HITTEST_RESIZE_BOTTOMLEFT,\n    SDL_HITTEST_RESIZE_LEFT\n} SDL_HitTestResult;\n```\n\n----------------------------------------\n\nTITLE: Destroy SDL_MetalView in C\nDESCRIPTION: Destroys an existing SDL_MetalView object. This function is part of the SDL_metal API and is used to release resources associated with the Metal view. It should be called before destroying the associated SDL window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Metal_DestroyView.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Metal_DestroyView(SDL_MetalView view);\n```\n\n----------------------------------------\n\nTITLE: SDL_EventType Enumeration Definition in C\nDESCRIPTION: This code snippet defines the `SDL_EventType` enumeration in C. It lists all possible event types that SDL can generate, each associated with a specific integer value. These values are used to identify the type of event when processing the event queue. The events range from application lifecycle events to user input events and system events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_EventType.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_EventType\n{\n    SDL_FIRSTEVENT     = 0,     /**< Unused (do not remove) */\n\n    /* Application events */\n    SDL_QUIT           = 0x100, /**< User-requested quit */\n\n    /* These application events have special meaning on iOS, see README-ios.md for details */\n    SDL_APP_TERMINATING,        /**< The application is being terminated by the OS\n                                     Called on iOS in applicationWillTerminate()\n                                     Called on Android in onDestroy()\n                                */\n    SDL_APP_LOWMEMORY,          /**< The application is low on memory, free memory if possible.\n                                     Called on iOS in applicationDidReceiveMemoryWarning()\n                                     Called on Android in onLowMemory()\n                                */\n    SDL_APP_WILLENTERBACKGROUND, /**< The application is about to enter the background\n                                     Called on iOS in applicationWillResignActive()\n                                     Called on Android in onPause()\n                                */\n    SDL_APP_DIDENTERBACKGROUND, /**< The application did enter the background and may not get CPU for some time\n                                     Called on iOS in applicationDidEnterBackground()\n                                     Called on Android in onPause()\n                                */\n    SDL_APP_WILLENTERFOREGROUND, /**< The application is about to enter the foreground\n                                     Called on iOS in applicationWillEnterForeground()\n                                     Called on Android in onResume()\n                                */\n    SDL_APP_DIDENTERFOREGROUND, /**< The application is now interactive\n                                     Called on iOS in applicationDidBecomeActive()\n                                     Called on Android in onResume()\n                                */\n\n    SDL_LOCALECHANGED,  /**< The user's locale preferences have changed. */\n\n    /* Display events */\n    SDL_DISPLAYEVENT   = 0x150,  /**< Display state change */\n\n    /* Window events */\n    SDL_WINDOWEVENT    = 0x200, /**< Window state change */\n    SDL_SYSWMEVENT,             /**< System specific event */\n\n    /* Keyboard events */\n    SDL_KEYDOWN        = 0x300, /**< Key pressed */\n    SDL_KEYUP,                  /**< Key released */\n    SDL_TEXTEDITING,            /**< Keyboard text editing (composition) */\n    SDL_TEXTINPUT,              /**< Keyboard text input */\n    SDL_KEYMAPCHANGED,          /**< Keymap changed due to a system event such as an\n                                     input language or keyboard layout change.\n                                */\n    SDL_TEXTEDITING_EXT,       /**< Extended keyboard text editing (composition) */\n\n    /* Mouse events */\n    SDL_MOUSEMOTION    = 0x400, /**< Mouse moved */\n    SDL_MOUSEBUTTONDOWN,        /**< Mouse button pressed */\n    SDL_MOUSEBUTTONUP,          /**< Mouse button released */\n    SDL_MOUSEWHEEL,             /**< Mouse wheel motion */\n\n    /* Joystick events */\n    SDL_JOYAXISMOTION  = 0x600, /**< Joystick axis motion */\n    SDL_JOYBALLMOTION,          /**< Joystick trackball motion */\n    SDL_JOYHATMOTION,           /**< Joystick hat position change */\n    SDL_JOYBUTTONDOWN,          /**< Joystick button pressed */\n    SDL_JOYBUTTONUP,            /**< Joystick button released */\n    SDL_JOYDEVICEADDED,         /**< A new joystick has been inserted into the system */\n    SDL_JOYDEVICEREMOVED,       /**< An opened joystick has been removed */\n    SDL_JOYBATTERYUPDATED,      /**< Joystick battery level change */\n\n    /* Game controller events */\n    SDL_CONTROLLERAXISMOTION  = 0x650, /**< Game controller axis motion */\n    SDL_CONTROLLERBUTTONDOWN,          /**< Game controller button pressed */\n    SDL_CONTROLLERBUTTONUP,            /**< Game controller button released */\n    SDL_CONTROLLERDEVICEADDED,         /**< A new Game controller has been inserted into the system */\n    SDL_CONTROLLERDEVICEREMOVED,       /**< An opened Game controller has been removed */\n    SDL_CONTROLLERDEVICEREMAPPED,      /**< The controller mapping was updated */\n    SDL_CONTROLLERTOUCHPADDOWN,        /**< Game controller touchpad was touched */\n    SDL_CONTROLLERTOUCHPADMOTION,      /**< Game controller touchpad finger was moved */\n    SDL_CONTROLLERTOUCHPADUP,          /**< Game controller touchpad finger was lifted */\n    SDL_CONTROLLERSENSORUPDATE,        /**< Game controller sensor was updated */\n    SDL_CONTROLLERUPDATECOMPLETE_RESERVED_FOR_SDL3,\n    SDL_CONTROLLERSTEAMHANDLEUPDATED,  /**< Game controller Steam handle has changed */\n\n    /* Touch events */\n    SDL_FINGERDOWN      = 0x700,\n    SDL_FINGERUP,\n    SDL_FINGERMOTION,\n\n    /* Gesture events */\n    SDL_DOLLARGESTURE   = 0x800,\n    SDL_DOLLARRECORD,\n    SDL_MULTIGESTURE,\n\n    /* Clipboard events */\n    SDL_CLIPBOARDUPDATE = 0x900, /**< The clipboard or primary selection changed */\n\n    /* Drag and drop events */\n    SDL_DROPFILE        = 0x1000, /**< The system requests a file open */\n    SDL_DROPTEXT,                 /**< text/plain drag-and-drop event */\n    SDL_DROPBEGIN,                /**< A new set of drops is beginning (NULL filename) */\n    SDL_DROPCOMPLETE,             /**< Current set of drops is now complete (NULL filename) */\n\n    /* Audio hotplug events */\n    SDL_AUDIODEVICEADDED = 0x1100, /**< A new audio device is available */\n    SDL_AUDIODEVICEREMOVED,        /**< An audio device has been removed. */\n\n    /* Sensor events */\n    SDL_SENSORUPDATE = 0x1200,     /**< A sensor was updated */\n\n    /* Render events */\n    SDL_RENDER_TARGETS_RESET = 0x2000, /**< The render targets have been reset and their contents need to be updated */\n    SDL_RENDER_DEVICE_RESET, /**< The device has been reset and all textures need to be recreated */\n\n    /* Internal events */\n    SDL_POLLSENTINEL = 0x7F00, /**< Signals the end of an event poll cycle */\n\n    /** Events SDL_USEREVENT through SDL_LASTEVENT are for your use,\n     *  and should be allocated with SDL_RegisterEvents()\n     */\n    SDL_USEREVENT    = 0x8000,\n\n    /**\n     *  This last event is only for bounding internal arrays\n     */\n    SDL_LASTEVENT    = 0xFFFF\n} SDL_EventType;\n```\n\n----------------------------------------\n\nTITLE: Get Wrapped String Size C\nDESCRIPTION: This function calculates the dimensions of a rendered string of UTF-8 text with word wrapping. It takes a TTF_Font, the UTF-8 text, the text length, the wrap width, and pointers to store the calculated width and height. It returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_55\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetStringSizeWrapped(TTF_Font *font, const char *text, size_t length, int wrap_width, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FileDialogType enum in C\nDESCRIPTION: Defines the `SDL_FileDialogType` enumeration in C. This enum is used to specify the type of file dialog to display, with options for opening a file (`SDL_FILEDIALOG_OPENFILE`), saving a file (`SDL_FILEDIALOG_SAVEFILE`), and opening a folder (`SDL_FILEDIALOG_OPENFOLDER`).  It's used with `SDL_ShowFileDialogWithProperties` to determine which type of dialog to present.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FileDialogType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_FileDialogType\n{\n    SDL_FILEDIALOG_OPENFILE,\n    SDL_FILEDIALOG_SAVEFILE,\n    SDL_FILEDIALOG_OPENFOLDER\n} SDL_FileDialogType;\n```\n\n----------------------------------------\n\nTITLE: Setting Render Draw Color in SDL (C)\nDESCRIPTION: Sets the color used for drawing operations (Rect, Line and Clear) in SDL. The function takes an SDL_Renderer pointer, red, green, blue, and alpha values as input. It returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetRenderDrawColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetRenderDrawColor(SDL_Renderer * renderer,\n                   Uint8 r, Uint8 g, Uint8 b,\n                   Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: Check GPU Swapchain Composition Support in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_WindowSupportsGPUSwapchainComposition function in SDL3. It determines whether a swapchain composition is supported by the window. The function takes an SDL_GPUDevice, an SDL_Window, and an SDL_GPUSwapchainComposition as input and returns a boolean indicating whether the composition is supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WindowSupportsGPUSwapchainComposition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WindowSupportsGPUSwapchainComposition(\n    SDL_GPUDevice *device,\n    SDL_Window *window,\n    SDL_GPUSwapchainComposition swapchain_composition);\n\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderTargetSupported Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for SDL_RenderTargetSupported. It takes an SDL_Renderer pointer as input and returns an SDL_bool indicating whether the renderer supports render targets. The function checks if the specified SDL_Renderer can use render targets and returns SDL_TRUE if supported, SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderTargetSupported.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_RenderTargetSupported(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Platform Detection with __GDK__ and __WINGDK__\nDESCRIPTION: Demonstrates using preprocessor defines `__GDK__` and `__WINGDK__` to detect the GDK platform at compile time. `__GDK__` is defined on all GDK platforms, while `__WINGDK__` is specific to Windows GDK. This allows for platform-specific code execution within an SDL application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\n#define __GDK__\n#define __WINGDK__\n```\n\n----------------------------------------\n\nTITLE: SDL_EncloseFPoints Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_EncloseFPoints function in C. It takes an array of SDL_FPoint structures, the count of points, an optional clipping rectangle, and a pointer to an SDL_FRect structure to store the result. The function returns SDL_TRUE if any points were enclosed, and SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_EncloseFPoints.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_EncloseFPoints(const SDL_FPoint * points,\n                            int count,\n                            const SDL_FRect * clip,\n                            SDL_FRect * result);\n```\n\n----------------------------------------\n\nTITLE: Mix_SetReverseStereo Syntax in C\nDESCRIPTION: The Mix_SetReverseStereo function reverses the stereo channels of a given mixer channel. The `channel` parameter specifies the mixer channel to reverse, or MIX_CHANNEL_POST to apply the effect to the final mixed stream. The `flip` parameter is non-zero to reverse stereo and zero to disable the effect. It returns true on success or false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_SetReverseStereo.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_SetReverseStereo(int channel, int flip);\n```\n\n----------------------------------------\n\nTITLE: fprintf Annotation Example in C\nDESCRIPTION: This example shows how to use SDL_PRINTF_VARARG_FUNC with the fprintf function. It indicates that the second parameter of fprintf is a printf-style format string, followed by a variable number of arguments. This allows the compiler to perform static analysis and warn about potential format string vulnerabilities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRINTF_VARARG_FUNC.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint fprintf(FILE *f, const char *fmt, ...) SDL_PRINTF_VARARG_FUNC(2);\n```\n\n----------------------------------------\n\nTITLE: SDL_AppInit_func Typedef Definition in C\nDESCRIPTION: Defines the function pointer type SDL_AppInit_func. This type is used for application initialization routines that are called via SDL_EnterAppMainCallbacks. The function takes a pointer to an application state, an argument count, and an array of argument strings, and returns an SDL_AppResult indicating success, failure, or continuation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppInit_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_AppResult (SDLCALL *SDL_AppInit_func)(void **appstate, int argc, char *argv[]);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Size Functions in C\nDESCRIPTION: Functions for setting and getting the font size and DPI. These functions dynamically modify the size and resolution settings of a font, affecting the rendered text's appearance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_SetFontSize(TTF_Font *font, float ptsize);                                                                                        // Set a font's size dynamically.\nbool TTF_SetFontSizeDPI(TTF_Font *font, float ptsize, int hdpi, int vdpi);                                                                 // Set font size dynamically with target resolutions, in dots per inch.\nfloat TTF_GetFontSize(TTF_Font *font);                                                                                                     // Get the size of a font.\nbool TTF_GetFontDPI(TTF_Font *font, int *hdpi, int *vdpi);                                                                                 // Get font target resolutions, in dots per inch.\n```\n\n----------------------------------------\n\nTITLE: Check for SSE3 CPU Feature using SDL_HasSSE3 in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_HasSSE3 function, which determines if the CPU supports SSE3 features. The function takes no arguments and returns SDL_TRUE if SSE3 is supported, and SDL_FALSE otherwise. The function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasSSE3.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_bool SDL_HasSSE3(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_rand_bits_r Function Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_rand_bits_r function in C. This function takes a pointer to a 64-bit unsigned integer as state and returns a 32-bit unsigned integer representing the generated pseudo-random bits.  The 'state' parameter must not be NULL, and will be updated during the function call.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_rand_bits_r.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_rand_bits_r(Uint64 *state);\n```\n\n----------------------------------------\n\nTITLE: SDL_AppQuit Callback\nDESCRIPTION: This C code shows the SDL_AppQuit callback function. This function is called once before the SDL3 application terminates, providing a last chance for cleanup. If an appstate pointer was set during SDL_AppInit, this is where the associated data should be freed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/main-functions.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_AppQuit(void *appstate, SDL_AppResult result);\n```\n\n----------------------------------------\n\nTITLE: CMake iOS Device Build (Specific SDK Revision, iOS 12.4)\nDESCRIPTION: This CMake command configures SDL3 for an iOS device, using a specific SDK revision (iOS 12.4 in this example). It sets the target operating system to iOS, the SDK root to iphoneos12.4, and specifies the arm64 architecture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos12.4 -DCMAKE_OSX_ARCHITECTURES=arm64\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowAndroidToast Function Declaration in C\nDESCRIPTION: This code snippet shows the function signature for SDL_ShowAndroidToast. This function displays a toast notification on Android devices, allowing developers to provide short, unobtrusive messages to the user. It requires the message to display, duration of the notification, gravity (position), and x/y offsets.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowAndroidToast.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ShowAndroidToast(const char *message, int duration, int gravity, int xoffset, int yoffset);\n```\n\n----------------------------------------\n\nTITLE: SDL_GlobStorageDirectory Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GlobStorageDirectory function in C, including the parameters and return type. The function enumerates files in a directory within an SDL_Storage container, filtering by a pattern and flags. The returned array of file paths must be freed by the caller using SDL_free.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GlobStorageDirectory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar ** SDL_GlobStorageDirectory(SDL_Storage *storage, const char *path, const char *pattern, SDL_GlobFlags flags, int *count);\n```\n\n----------------------------------------\n\nTITLE: Get Shaped Window Mode - C\nDESCRIPTION: Retrieves the shape parameters of a shaped window. It takes an SDL_Window pointer and an SDL_WindowShapeMode pointer as input. The shape_mode parameter is filled with the mode data if the window has a shape and shape_mode is not NULL. Returns 0 if successful, SDL_NONSHAPEABLE_WINDOW if the window is not a shaped window, or SDL_WINDOW_LACKS_SHAPE if the window lacks a shape.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetShapedWindowMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetShapedWindowMode(SDL_Window *window,SDL_WindowShapeMode *shape_mode);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Opening Functions in C\nDESCRIPTION: Functions for opening fonts from different sources (file, SDL_IOStream, properties). Allows creating TTF_Font objects from a specified file path, an SDL_IOStream, or a set of font properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nTTF_Font * TTF_OpenFont(const char *file, float ptsize);                                                                                   // Create a font from a file, using a specified point size.\nTTF_Font * TTF_OpenFontIO(SDL_IOStream *src, bool closeio, float ptsize);                                                                  // Create a font from an SDL_IOStream, using a specified point size.\nTTF_Font * TTF_OpenFontWithProperties(SDL_PropertiesID props);                                                                             // Create a font with the specified properties.\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRGBSurfaceWithFormatFrom Syntax (C)\nDESCRIPTION: Defines the function signature for SDL_CreateRGBSurfaceWithFormatFrom in C. This function allocates a new RGB surface with a specific pixel format and existing pixel data. It takes pixel data, width, height, depth, pitch, and pixel format as input and returns a pointer to the created SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateRGBSurfaceWithFormatFrom.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface* SDL_CreateRGBSurfaceWithFormatFrom\n    (void *pixels, int width, int height, int depth, int pitch, Uint32 format);\n```\n\n----------------------------------------\n\nTITLE: Logging with Android's Logging Library (C)\nDESCRIPTION: This snippet demonstrates how to use the Android logging library to output debugging information from native C code. It includes the necessary header file and a sample logging statement. The log messages can be viewed using `adb logcat`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\n#include <android/log.h>\n\n__android_log_print(ANDROID_LOG_INFO, \"foo\", \"Something happened! x = %d\", x);\n```\n\n----------------------------------------\n\nTITLE: Setting Linux Thread Priority with SDL_SetLinuxThreadPriority (C)\nDESCRIPTION: This code snippet shows the syntax for the `SDL_SetLinuxThreadPriority` function in C, which is used to set the UNIX nice value (priority) for a given thread. The function takes the thread ID and the new priority value as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetLinuxThreadPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetLinuxThreadPriority(Sint64 threadID, int priority);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_ANDROID_LOW_LATENCY_AUDIO in C\nDESCRIPTION: This C code snippet defines the SDL_HINT_ANDROID_LOW_LATENCY_AUDIO macro, which is used to set the hint for enabling or disabling low-latency audio on Android. The value of this hint should be set before SDL audio initialization occurs. Setting to \"1\" enables low latency, while \"0\" disables it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ANDROID_LOW_LATENCY_AUDIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ANDROID_LOW_LATENCY_AUDIO \"SDL_ANDROID_LOW_LATENCY_AUDIO\"\n```\n\n----------------------------------------\n\nTITLE: Drawing a Line with SDL_RenderDrawLineF in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RenderDrawLineF function, which draws a line between two points specified by floating-point coordinates. It takes an SDL_Renderer pointer and the x and y coordinates of the start and end points as input. The function returns 0 on success and -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawLineF.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_RenderDrawLineF(SDL_Renderer * renderer,\n                        float x1, float y1, float x2, float y2);\n```\n\n----------------------------------------\n\nTITLE: SDL_AppEvent Function Definition in C\nDESCRIPTION: Defines the SDL_AppEvent function signature for handling SDL events in applications using SDL_MAIN_USE_CALLBACKS. It takes an optional application state pointer and an SDL_Event pointer as input, and returns an SDL_AppResult indicating whether to continue, terminate with success, or terminate with failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AppResult SDL_AppEvent(void *appstate, SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on Arch Linux\nDESCRIPTION: Installs necessary packages for building SDL2 on Arch Linux using pacman. This includes audio libraries, input libraries, graphics drivers, windowing system libraries, and build tools.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo pacman -S alsa-lib cmake hidapi ibus jack libdecor libgl libpulse libusb libx11 libxcursor libxext libxinerama libxkbcommon libxrandr libxrender libxss libxtst mesa ninja pipewire sndio vulkan-driver vulkan-headers wayland wayland-protocols\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_LCD_Wrapped Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderText_LCD_Wrapped function in C. This function renders word-wrapped UTF-8 text at LCD subpixel quality to a new ARGB surface. It takes a font, text, length, foreground color, background color, and wrap width as input parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderText_LCD_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_LCD_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_Send Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_UDP_Send function, which sends a UDP packet through a specified UDP socket and channel. The 'sock' parameter represents the UDP socket, 'channel' specifies the channel to send the packet on, and 'packet' is a pointer to the UDPpacket structure to be sent.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_Send.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_UDP_Send(UDPsocket sock, int channel, UDPpacket *packet);\n```\n\n----------------------------------------\n\nTITLE: Getting Music Object Information\nDESCRIPTION: These functions retrieve information about a music object, such as its type, title, artist, album, and copyright information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nMix_MusicType Mix_GetMusicType(const Mix_Music *music);                                   // Find out the format of a mixer music.\nconst char * Mix_GetMusicTitle(const Mix_Music *music);                                   // Get the title for a music object, or its filename.\nconst char * Mix_GetMusicTitleTag(const Mix_Music *music);                                // Get the title for a music object.\nconst char * Mix_GetMusicArtistTag(const Mix_Music *music);                               // Get the artist name for a music object.\nconst char * Mix_GetMusicAlbumTag(const Mix_Music *music);                                // Get the album name for a music object.\nconst char * Mix_GetMusicCopyrightTag(const Mix_Music *music);                            // Get the copyright text for a music object.\n```\n\n----------------------------------------\n\nTITLE: Querying Vulkan Presentation Support in C\nDESCRIPTION: This C code snippet demonstrates the syntax of the SDL_Vulkan_GetPresentationSupport function, which checks if a given Vulkan physical device and queue family support presentation. It takes a Vulkan instance, a physical device handle, and a queue family index as input and returns a boolean value indicating support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_GetPresentationSupport.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_Vulkan_GetPresentationSupport(VkInstance instance,\n                                           VkPhysicalDevice physicalDevice,\n                                           Uint32 queueFamilyIndex);\n```\n\n----------------------------------------\n\nTITLE: Get Default Audio Info - C\nDESCRIPTION: Retrieves the name and preferred format of the default audio device. The `name` parameter receives the device name (must be freed with SDL_free), `spec` receives the audio format, and `iscapture` specifies whether to query the default recording or output device. Returns 0 on success, nonzero on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDefaultAudioInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetDefaultAudioInfo(char **name,\n                            SDL_AudioSpec *spec,\n                            int iscapture);\n```\n\n----------------------------------------\n\nTITLE: Get App Metadata Property in C with SDL3\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAppMetadataProperty function in SDL3. It takes a metadata property name as input and returns a const char pointer representing the value of the metadata property. If the property is not set, it returns the default value or NULL if there is no default.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAppMetadataProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetAppMetadataProperty(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE macro which is a string used to set or get the hint using SDL_SetHint and SDL_GetHint. This hint controls SDL's behavior when moving an exclusive fullscreen window to a different display, specifically if it attempts to automatically match the display mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE \"SDL_VIDEO_MATCH_EXCLUSIVE_MODE_ON_MOVE\"\n```\n\n----------------------------------------\n\nTITLE: Defining GPU Transfer Buffer Creation Info Structure in C\nDESCRIPTION: Defines the SDL_GPUTransferBufferCreateInfo structure, which specifies the parameters for creating a GPU transfer buffer. It includes members for usage, size, and properties, allowing for customization of the transfer buffer's behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTransferBufferCreateInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUTransferBufferCreateInfo\n{\n    SDL_GPUTransferBufferUsage usage;  /**< How the transfer buffer is intended to be used by the client. */\n    Uint32 size;                       /**< The size in bytes of the transfer buffer. */\n\n    SDL_PropertiesID props;            /**< A properties ID for extensions. Should be 0 if no extensions are needed. */\n} SDL_GPUTransferBufferCreateInfo;\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderReadPixels Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_RenderReadPixels function, which reads pixels from the current rendering target.  It takes a renderer, rectangle, format, pixel data pointer, and pitch as input. It returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderReadPixels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderReadPixels(SDL_Renderer * renderer,\n                         const SDL_Rect * rect,\n                         Uint32 format,\n                         void *pixels, int pitch);\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_AtomicU32 Struct in C\nDESCRIPTION: Defines the structure SDL_AtomicU32, which encapsulates an unsigned 32-bit integer for atomic operations. This struct is available since SDL 3.2.0 and should be accessed using SDL atomic functions to prevent race conditions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AtomicU32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AtomicU32 { Uint32 value; } SDL_AtomicU32;\n```\n\n----------------------------------------\n\nTITLE: SDL_TouchFingerEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_TouchFingerEvent, used to represent touch events like finger motion, finger down, and finger up. It includes fields for the event type, timestamp, touch and finger IDs, normalized x and y coordinates, normalized deltas (dx, dy), pressure, and the window ID the event occurred in.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TouchFingerEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TouchFingerEvent\n{\n    Uint32 type;        /**< SDL_FINGERMOTION or SDL_FINGERDOWN or SDL_FINGERUP */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_TouchID touchId; /**< The touch device id */\n    SDL_FingerID fingerId;\n    float x;            /**< Normalized in the range 0...1 */\n    float y;            /**< Normalized in the range 0...1 */\n    float dx;           /**< Normalized in the range -1...1 */\n    float dy;           /**< Normalized in the range -1...1 */\n    float pressure;     /**< Normalized in the range 0...1 */\n    Uint32 windowID;    /**< The window underneath the finger, if any */\n} SDL_TouchFingerEvent;\n```\n\n----------------------------------------\n\nTITLE: Set Text String - SDL_ttf\nDESCRIPTION: Sets the UTF-8 text used by a text object. The `string` parameter is the new text, and `length` is the length of the string in bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_102\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextString(TTF_Text *text, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetHapticName Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetHapticName function. It takes an SDL_Haptic pointer as input and returns a const char* representing the name of the haptic device. It requires the SDL3/SDL_haptic.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHapticName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetHapticName(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_CARTESIAN in C\nDESCRIPTION: Defines the SDL_HAPTIC_CARTESIAN macro to the value 1. This macro signifies that Cartesian coordinates will be used to define the direction of a haptic effect. It is a part of the SDL_haptic.h header file. No external dependencies beyond SDL2 are required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_CARTESIAN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_CARTESIAN  1\n```\n\n----------------------------------------\n\nTITLE: Get Texture Color Modulation (Float) - C\nDESCRIPTION: Retrieves the additional color value multiplied into render copy operations for a given texture. It takes a pointer to an SDL_Texture and three float pointers for red, green, and blue color components. Returns true on success, false on failure; use SDL_GetError() for details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextureColorModFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTextureColorModFloat(SDL_Texture *texture, float *r, float *g, float *b);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_arraysize Macro in C\nDESCRIPTION: This code snippet defines the SDL_arraysize macro, which calculates the number of elements in a static array. It takes an array as input and returns the number of elements. It's available since SDL 3.2.0 and defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_arraysize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_arraysize(array) (sizeof(array)/sizeof(array[0]))\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIx32 Macro Usage Example\nDESCRIPTION: This code demonstrates how to use the SDL_PRIx32 macro with SDL_Log to print a Uint32 value (bottles) in hexadecimal format. The SDL_Log function requires the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIx32.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRIx32 \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: SDL_SCANF_FORMAT_STRING Macro Definition in C\nDESCRIPTION: Defines the SDL_SCANF_FORMAT_STRING macro as _Scanf_format_string_impl_. This macro is used to annotate function parameters that should be scanf-style format strings.  It enables compilers and analysis tools to provide warnings if the format string is not used correctly. This macro is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SCANF_FORMAT_STRING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SCANF_FORMAT_STRING _Scanf_format_string_impl_\n```\n\n----------------------------------------\n\nTITLE: SDL_isdigit Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_isdigit function in C, which checks if a given integer represents an ASCII digit (0-9). It takes an integer 'x' representing the character to check as input and returns a non-zero integer if 'x' is a digit, and zero otherwise. Note that it only considers ASCII digits regardless of system locale.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isdigit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isdigit(int x);\n```\n\n----------------------------------------\n\nTITLE: Mix_HaltChannel Syntax (C)\nDESCRIPTION: Shows the syntax for calling the Mix_HaltChannel function from the SDL_mixer library. The function takes an integer representing the channel to halt as an argument, or -1 to halt all channels.  It returns 0 on success or -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_HaltChannel.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_HaltChannel(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_sin Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_sin function in C.  It takes a double-precision floating-point number (in radians) as input and returns the sine of that value as a double. The function is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_sin.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_sin(double x);\n```\n\n----------------------------------------\n\nTITLE: Get Audio Stream Frequency Ratio in C\nDESCRIPTION: Retrieves the frequency ratio of a given SDL_AudioStream. The function takes an SDL_AudioStream pointer as input and returns a float representing the frequency ratio. A return value of 0.0 indicates failure, and SDL_GetError() can be called for more detailed error information. This function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamFrequencyRatio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetAudioStreamFrequencyRatio(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: SDL_itoa Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_itoa function in C. The function converts an integer value to a string representation in a specified radix and stores it in a provided buffer. The buffer must be large enough to hold the converted string including the null terminator.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_itoa.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_itoa(int value, char *str, int radix);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadU16BE Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadU16BE function in C. This function reads 16 bits of big-endian data from an SDL_IOStream and stores it in a Uint16 variable. It returns true on success and false on failure, with errors accessible via SDL_GetError.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadU16BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadU16BE(SDL_IOStream *src, Uint16 *value);\n```\n\n----------------------------------------\n\nTITLE: SDL_CloseAudio Syntax (C)\nDESCRIPTION: Shows the syntax of the SDL_CloseAudio function. This function takes no arguments and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CloseAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CloseAudio(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_fabsf Function Definition in C\nDESCRIPTION: This snippet shows the syntax for the SDL_fabsf function, which calculates the absolute value of a float. It takes a single float as input and returns its absolute value as a float.  This function is part of the SDL3 library and is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_fabsf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_fabsf(float x);\n```\n\n----------------------------------------\n\nTITLE: Unregister All Effects in SDL_mixer (C)\nDESCRIPTION: This function unregisters all special effects functions on the specified channel. It takes an integer representing the channel and returns a boolean indicating success or failure. Using MIX_CHANNEL_POST unregisters post-effects. This function affects internal effect processing like panning and is called when a channel finishes playback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_UnregisterAllEffects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_UnregisterAllEffects(int channel);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUTF8_LCD_Wrapped Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_RenderUTF8_LCD_Wrapped function from the SDL_ttf library. It takes a font, UTF-8 encoded text, foreground color, background color and wrap length as input and returns a new ARGB surface, or NULL if there was an error. It depends on the SDL_ttf library and SDL_Color struct.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUTF8_LCD_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUTF8_LCD_Wrapped(TTF_Font *font,\n                const char *text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteBE16 Syntax in C\nDESCRIPTION: This C code snippet shows the syntax of the SDL_WriteBE16 function.\nThe function writes a 16-bit unsigned integer in native format to a specified SDL_RWops stream as big-endian data. It returns 1 on successful write, 0 on error. Requires SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WriteBE16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteBE16(SDL_RWops * dst, Uint16 value);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Sensors - C\nDESCRIPTION: This snippet shows the syntax for using the SDL_NumSensors function to retrieve the number of attached sensors. It requires the SDL_sensor.h header file and returns an integer representing the sensor count.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_NumSensors.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_NumSensors(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreatePalette Syntax in C\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_CreatePalette function. It shows the function's return type (SDL_Palette*), its name, and its single parameter: an integer representing the number of colors to allocate in the palette. The function returns a pointer to the newly created SDL_Palette structure, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreatePalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Palette * SDL_CreatePalette(int ncolors);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteLE16 Syntax in C\nDESCRIPTION: Writes a 16-bit unsigned integer to a SDL_RWops stream in little-endian format. The function takes a pointer to the SDL_RWops stream and the 16-bit value as input. Returns 1 on successful write, 0 on error. The SDL_RWops struct represents an abstract interface for performing I/O operations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WriteLE16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteLE16(SDL_RWops * dst, Uint16 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_GUIDFromString Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GUIDFromString function. It takes a character pointer 'pchGUID' representing the GUID string as input and returns an SDL_GUID structure. No error checking is performed on the input string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GUIDFromString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GUID SDL_GUIDFromString(const char *pchGUID);\n```\n\n----------------------------------------\n\nTITLE: Releasing a GPU Compute Pipeline in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_ReleaseGPUComputePipeline function, which is used to release a GPU compute pipeline. The function takes a pointer to an SDL_GPUDevice and a pointer to an SDL_GPUComputePipeline as input and frees the compute pipeline associated with the given device. It's crucial not to reference the pipeline after calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseGPUComputePipeline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseGPUComputePipeline(\n    SDL_GPUDevice *device,\n    SDL_GPUComputePipeline *compute_pipeline);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLER_SENSOR_FUSION in C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLER_SENSOR_FUSION macro in C, which is used to set the hint controlling gamepad sensor fusion. This macro is used to set the hint's value via SDL_SetHint.  It's found within SDL3/SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GAMECONTROLLER_SENSOR_FUSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLER_SENSOR_FUSION \"SDL_GAMECONTROLLER_SENSOR_FUSION\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED in C\nDESCRIPTION: Defines the SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED hint as a string literal. This hint is used to specify a comma-separated list of USB VID/PID pairs (or a file containing such a list) to exclude specific mice from being considered ROG gamepad capable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED \"SDL_ROG_GAMEPAD_MICE_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_LogWarn Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_LogWarn function in C. It takes an integer category and a formatted string as input, along with any additional arguments required by the format string. The function logs a warning message to the SDL logging system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogWarn.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_LogWarn(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIO_FORMAT in C\nDESCRIPTION: This code snippet defines the SDL_HINT_AUDIO_FORMAT macro, which is used to specify a default audio format for SDL audio devices. It should be set before opening the audio device. The macro expands to a string literal \"SDL_AUDIO_FORMAT\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_FORMAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_FORMAT \"SDL_AUDIO_FORMAT\"\n```\n\n----------------------------------------\n\nTITLE: Get Last SDL_ttf Error Macro Definition in C\nDESCRIPTION: This macro defines TTF_GetError as a direct alias for SDL_GetError. This means that calling TTF_GetError will execute SDL_GetError, retrieving the last error message set by any SDL or SDL_ttf function. It relies on the SDL library being initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_GetError    SDL_GetError\n```\n\n----------------------------------------\n\nTITLE: Defining Sint64 as int64_t in C\nDESCRIPTION: Defines Sint64 as a typedef for int64_t. This ensures a consistent way to refer to signed 64-bit integers within the SDL3 library. It's a simple type alias for portability.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Sint64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int64_t Sint64;\n```\n\n----------------------------------------\n\nTITLE: Checking for SSE Support using SDL_HasSSE in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_HasSSE function in C. The function checks if the CPU has SSE (Streaming SIMD Extensions) features and returns SDL_TRUE if it does, or SDL_FALSE if it doesn't. This function is part of the SDL library and requires including SDL_cpuinfo.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasSSE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasSSE(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioDevicePaused Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_AudioDevicePaused function in C. It takes an SDL_AudioDeviceID as input and returns a boolean value indicating whether the specified audio device is paused. Logical devices created through SDL_OpenAudioDevice() can be paused or unpaused.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioDevicePaused.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_AudioDevicePaused(SDL_AudioDeviceID devid);\n```\n\n----------------------------------------\n\nTITLE: Calculating CRC-16 Value with SDL_crc16 in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_crc16 function, which calculates a CRC-16 checksum value. It takes the current checksum, a pointer to the data block, and the size of the data block as input. The function returns the updated CRC-16 checksum.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_crc16.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint16 SDL_crc16(Uint16 crc, const void *data, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_BlendFactor Enum in C\nDESCRIPTION: This code snippet defines the SDL_BlendFactor enumeration in C, part of the SDL library. It specifies the different blending factors that can be used to control how source and destination pixels are combined during rendering. Each enum member represents a different blend factor, such as zero, one, source color, or destination alpha. The values are used within SDL's blending functions to manipulate pixel color components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_BlendFactor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_BlendFactor\n{\n    SDL_BLENDFACTOR_ZERO                = 0x1,  /**< 0, 0, 0, 0 */\n    SDL_BLENDFACTOR_ONE                 = 0x2,  /**< 1, 1, 1, 1 */\n    SDL_BLENDFACTOR_SRC_COLOR           = 0x3,  /**< srcR, srcG, srcB, srcA */\n    SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,  /**< 1-srcR, 1-srcG, 1-srcB, 1-srcA */\n    SDL_BLENDFACTOR_SRC_ALPHA           = 0x5,  /**< srcA, srcA, srcA, srcA */\n    SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,  /**< 1-srcA, 1-srcA, 1-srcA, 1-srcA */\n    SDL_BLENDFACTOR_DST_COLOR           = 0x7,  /**< dstR, dstG, dstB, dstA */\n    SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,  /**< 1-dstR, 1-dstG, 1-dstB, 1-dstA */\n    SDL_BLENDFACTOR_DST_ALPHA           = 0x9,  /**< dstA, dstA, dstA, dstA */\n    SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA   /**< 1-dstA, 1-dstA, 1-dstA, 1-dstA */\n} SDL_BlendFactor;\n```\n\n----------------------------------------\n\nTITLE: Getting RTF Document Title in C\nDESCRIPTION: This code snippet shows the syntax for the RTF_GetTitle function, which retrieves the title of an RTF document. It takes an RTF_Context pointer as input and returns a const char pointer to the title string in UTF-8 encoding. The returned string should not be modified or freed by the application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_GetTitle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * RTF_GetTitle(RTF_Context *ctx);\n```\n\n----------------------------------------\n\nTITLE: SDL_floorf Function Definition in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_floorf function in C. The function takes a float as input and returns a float representing the floor of the input value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_floorf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_floorf(float x);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyBallEvent Structure Definition in C\nDESCRIPTION: Defines the structure SDL_JoyBallEvent, which encapsulates data related to joystick trackball motion events. The structure contains fields for the event type, a reserved field, a timestamp, the joystick instance ID, the trackball index, padding bytes, and the relative motion in the X and Y directions as signed 16-bit integers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoyBallEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyBallEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_JOYSTICK_BALL_MOTION */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 ball;         /**< The joystick trackball index */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n    Sint16 xrel;        /**< The relative motion in the X direction */\n    Sint16 yrel;        /**< The relative motion in the Y direction */\n} SDL_JoyBallEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_qsort_r Syntax\nDESCRIPTION: Declaration of the `SDL_qsort_r` function, showing its parameters and return type. It takes a pointer to the array, the number of elements, the size of each element, a comparison function, and a user data pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_qsort_r.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_qsort_r(void *base, size_t nmemb, size_t size, SDL_CompareCallback_r compare, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: TTF_CreateRendererTextEngineWithProperties Syntax (C)\nDESCRIPTION: Defines the syntax for the TTF_CreateRendererTextEngineWithProperties function. This function creates a text engine for drawing text on an SDL renderer, configured by provided properties. It requires an SDL_PropertiesID as input and returns a pointer to a TTF_TextEngine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateRendererTextEngineWithProperties.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_TextEngine * TTF_CreateRendererTextEngineWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph32_Blended Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderGlyph32_Blended function in SDL_ttf.  This function renders a single 32-bit glyph at high quality to a new ARGB surface using alpha blending. It takes a TTF_Font pointer, a Uint32 character code, and an SDL_Color for the foreground as input and returns a pointer to the SDL_Surface, or NULL if there's an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderGlyph32_Blended.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph32_Blended(TTF_Font *font,\n                Uint32 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetGamepadButtonFromString Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetGamepadButtonFromString function, which takes a string representing a gamepad button and returns the corresponding SDL_GamepadButton enum value. If no match is found, it returns SDL_GAMEPAD_BUTTON_INVALID. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadButtonFromString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadButton SDL_GetGamepadButtonFromString(const char *str);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_GAIN Macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_GAIN macro, which is a bit flag that signifies the haptic device supports setting the global gain. It's a constant unsigned integer value left-shifted by 16 bits. This macro is used to check if a haptic device has the capability to adjust its overall force feedback strength.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_GAIN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_GAIN       (1u<<16)\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUTF8_Solid_Wrapped Syntax in C\nDESCRIPTION: This code snippet shows the function signature for `TTF_RenderUTF8_Solid_Wrapped` function in C. It renders UTF-8 encoded text to an 8-bit surface with word wrapping. The function takes a font, text, foreground color, and wrap length as input, and returns a pointer to the SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUTF8_Solid_Wrapped.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderUTF8_Solid_Wrapped(TTF_Font *font,\n                const char *text, SDL_Color fg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Destroy Text Object - SDL_ttf\nDESCRIPTION: Destroys a text object created by a text engine. This function releases the memory associated with the text object.  The `text` parameter is the pointer to the text object to destroy.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_114\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroyText(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_ACQUIRED_AFTER Macro Definition in C\nDESCRIPTION: This code snippet shows the definition of the SDL_ACQUIRED_AFTER macro in C. It utilizes SDL_THREAD_ANNOTATION_ATTRIBUTE__ to apply the acquired_after annotation for thread safety analysis with Clang. This indicates that a mutex is acquired after a certain point in the code, aiding in detecting potential data races.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ACQUIRED_AFTER.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_ACQUIRED_AFTER(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_after(x))\n```\n\n----------------------------------------\n\nTITLE: Get Default Texture Scale Mode in SDL3 (C)\nDESCRIPTION: Retrieves the default texture scale mode of the specified SDL_Renderer. The function takes an SDL_Renderer pointer and an SDL_ScaleMode pointer as input. On success, it populates the SDL_ScaleMode pointer with the current default scale mode and returns true; otherwise, it returns false and SDL_GetError() can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDefaultTextureScaleMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetDefaultTextureScaleMode(SDL_Renderer *renderer, SDL_ScaleMode *scale_mode);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontSDF Function\nDESCRIPTION: Queries whether Signed Distance Field (SDF) rendering is enabled for a TTF_Font object. Returns a boolean value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetFontSDF(const TTF_Font *font);                                                                                                 // Query whether Signed Distance Field rendering is enabled for a font.\n```\n\n----------------------------------------\n\nTITLE: Packaging application for Xbox\nDESCRIPTION: This snippet shows how to package an application for Xbox using the `makepkg` command.  It uses the PackageLayout.xml file to define the package contents, sets the /lt flag, specifies the directory and sets the package output directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_8\n\nLANGUAGE: batch\nCODE:\n```\nmakepkg pack /f PackageLayout.xml /lt /d . /pd Package\n```\n\n----------------------------------------\n\nTITLE: SDL_GetKeyName Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetKeyName function in C. It takes an SDL_Keycode as input and returns a constant character pointer representing the key's name. The returned string is valid until the next call to this function, so it must be copied if you need it to persist longer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetKeyName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetKeyName(SDL_Keycode key);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderPoint Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderPoint function in C. It takes a renderer, x-coordinate, and y-coordinate as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderPoint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderPoint(SDL_Renderer *renderer, float x, float y);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_DestroyStreamSocket Syntax in C\nDESCRIPTION: Defines the syntax for SDLNet_DestroyStreamSocket function in C, which is used to destroy a previously created stream socket. It takes a pointer to a SDLNet_StreamSocket as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_DestroyStreamSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_DestroyStreamSocket(SDLNet_StreamSocket *sock);  /* Destroy your sockets when finished with them. Does not block, handles shutdown internally. */\n```\n\n----------------------------------------\n\nTITLE: Get Metal Layer from SDL_MetalView (C)\nDESCRIPTION: Retrieves a pointer to the CAMetalLayer backing the provided SDL_MetalView. This allows direct manipulation of the Metal layer for custom rendering or integration with other Metal-based libraries. Requires an SDL_MetalView object as input. Returns a void pointer to the CAMetalLayer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Metal_GetLayer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_Metal_GetLayer(SDL_MetalView view);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerRumbleTriggers C Syntax\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GameControllerRumbleTriggers function. It requires an SDL_GameController pointer, rumble intensities for the left and right triggers (Uint16), and the duration of the rumble effect in milliseconds (Uint32).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerRumbleTriggers.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_GameControllerRumbleTriggers(SDL_GameController *gamecontroller, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_EnumeratePropertiesCallback in C\nDESCRIPTION: This code defines the SDL_EnumeratePropertiesCallback function pointer type. This callback is used by SDL_EnumerateProperties to iterate through properties. The callback receives user data, the SDL_PropertiesID being enumerated, and the name of the current property.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EnumeratePropertiesCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_EnumeratePropertiesCallback)(void *userdata, SDL_PropertiesID props, const char *name);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_LogCategory Enumeration in C\nDESCRIPTION: Defines the SDL_LogCategory enumeration in C, providing a set of predefined categories for SDL logging.  The enumeration includes categories such as Application, Error, Assert, System, Audio, Video, Render, Input, and Test.  It also defines reserved categories and a custom category for application-specific logging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogCategory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_LogCategory\n{\n    SDL_LOG_CATEGORY_APPLICATION,\n    SDL_LOG_CATEGORY_ERROR,\n    SDL_LOG_CATEGORY_ASSERT,\n    SDL_LOG_CATEGORY_SYSTEM,\n    SDL_LOG_CATEGORY_AUDIO,\n    SDL_LOG_CATEGORY_VIDEO,\n    SDL_LOG_CATEGORY_RENDER,\n    SDL_LOG_CATEGORY_INPUT,\n    SDL_LOG_CATEGORY_TEST,\n\n    /* Reserved for future SDL library use */\n    SDL_LOG_CATEGORY_RESERVED1,\n    SDL_LOG_CATEGORY_RESERVED2,\n    SDL_LOG_CATEGORY_RESERVED3,\n    SDL_LOG_CATEGORY_RESERVED4,\n    SDL_LOG_CATEGORY_RESERVED5,\n    SDL_LOG_CATEGORY_RESERVED6,\n    SDL_LOG_CATEGORY_RESERVED7,\n    SDL_LOG_CATEGORY_RESERVED8,\n    SDL_LOG_CATEGORY_RESERVED9,\n    SDL_LOG_CATEGORY_RESERVED10,\n\n    /* Beyond this point is reserved for application use, e.g.\n       enum {\n           MYAPP_CATEGORY_AWESOME1 = SDL_LOG_CATEGORY_CUSTOM,\n           MYAPP_CATEGORY_AWESOME2,\n           MYAPP_CATEGORY_AWESOME3,\n           ...\n       };\n     */\n    SDL_LOG_CATEGORY_CUSTOM\n} SDL_LogCategory;\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontOutline Syntax in C\nDESCRIPTION: Retrieves the current outline value of a font. Requires SDL_ttf library. The function takes a TTF_Font pointer as input and returns an integer representing the outline value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontOutline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontOutline(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_atan2 Function Syntax in C\nDESCRIPTION: This snippet shows the function signature of SDL_atan2. It takes two double-precision floating-point numbers, y and x, as input and returns a double-precision floating-point number representing the arc tangent of y/x in radians, adjusted for the correct quadrant.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_atan2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_atan2(double y, double x);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED macro for setting the hint to exclude specific USB VID/PID pairs from being recognized as GameCube controllers. The value should be a comma-separated list of hexadecimal VID/PID pairs or a file path preceded by '@'. This hint can be set anytime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED \"SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP in C\nDESCRIPTION: This code snippet shows how SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP is defined as a macro in C.  It represents a string literal that can be used with SDL_SetHint to control whether SDL processes the Windows message loop. Setting it to \"0\" disables the message loop, while \"1\" enables it to be processed in SDL_PumpEvents().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP \"SDL_WINDOWS_ENABLE_MESSAGELOOP\"\n```\n\n----------------------------------------\n\nTITLE: SDL_PushGPUVertexUniformData Syntax in C\nDESCRIPTION: Defines the syntax for SDL_PushGPUVertexUniformData, used to push data to a vertex uniform slot on the command buffer. It takes a command buffer, slot index, data pointer, and data length as input.  The pushed data must respect std140 layout conventions, ensuring proper alignment for vec3 and vec4 fields.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PushGPUVertexUniformData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PushGPUVertexUniformData(\n    SDL_GPUCommandBuffer *command_buffer,\n    Uint32 slot_index,\n    const void *data,\n    Uint32 length);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_TCP_OpenClient Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_TCP_OpenClient function. It takes an IPaddress pointer as input and returns a TCPsocket. The IPaddress should be in network byte order, typically obtained via SDLNet_ResolveHost(). If an error occurs, NULL is returned.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_OpenClient.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTCPsocket SDLNet_TCP_OpenClient(IPaddress *ip);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadAnimation_RW Syntax in C\nDESCRIPTION: Shows the function signature for IMG_LoadAnimation_RW in C. This function loads an animation from an SDL_RWops stream. It takes an SDL_RWops pointer and an integer indicating whether to free the stream after reading.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadAnimation_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimation_RW(SDL_RWops *src, int freesrc);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_X11_XRANDR in C\nDESCRIPTION: This C macro defines the SDL_HINT_VIDEO_X11_XRANDR hint. It associates the string literal \"SDL_VIDEO_X11_XRANDR\" with the hint. This string literal is used to set or query the hint using SDL_SetHint and SDL_GetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_X11_XRANDR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_XRANDR           \"SDL_VIDEO_X11_XRANDR\"\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable Mouse Capture in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to enable or disable mouse capturing in SDL3 using the SDL_CaptureMouse function. Capturing the mouse allows the application to receive mouse events even when the cursor is outside the window. The `enabled` parameter determines whether capturing is enabled (true) or disabled (false).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CaptureMouse.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_CaptureMouse(bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeInMusicPos Syntax (C)\nDESCRIPTION: Defines the syntax for the Mix_FadeInMusicPos function in C. This function plays a new music object, fading in the audio, from a specified starting position. It takes a pointer to a Mix_Music object, the number of loops, the fade-in duration in milliseconds, and the start position in seconds as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadeInMusicPos.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeInMusicPos(Mix_Music *music, int loops, int ms, double position);\n```\n\n----------------------------------------\n\nTITLE: SDL Dynamic API Override with Environment Variable (Bash)\nDESCRIPTION: This bash command demonstrates how to override the statically linked SDL library using the SDL_DYNAMIC_API environment variable. Setting this variable points to an alternate SDL library, allowing the game to use the specified version instead of the statically linked one.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/dynapi.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL_DYNAMIC_API=/my/actual/libSDL-2.0.so.0\n./MyGameThatIsStaticallyLinkedToSDL2\n```\n\n----------------------------------------\n\nTITLE: Setting compiler flags for modern x64 architecture\nDESCRIPTION: Sets compiler flags to optimize SDL library for modern x64 microprocessor architectures using gcc or clang compilers. This allows the produced binary to take advantage of instruction sets supported by newer processors, leading to better performance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncmake ~/sdl -DCMAKE_C_FLAGS=\"-march=x86-64-v3\" -DCMAKE_CXX_FLAGS=\"-march=x86-64-v3\"\n```\n\n----------------------------------------\n\nTITLE: Set Text Color in SDL_ttf (C)\nDESCRIPTION: This code snippet demonstrates the syntax for setting the color of a text object using the TTF_SetTextColor function from the SDL_ttf library. It takes a TTF_Text pointer and RGBA values (Uint8) as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextColor(TTF_Text *text, Uint8 r, Uint8 g, Uint8 b, Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: Freeing a Socket Set with SDLNet_FreeSocketSet in C\nDESCRIPTION: Frees a set of sockets previously allocated using SDLNet_AllocSocketSet. The function takes the socket set as input and releases its resources. Note that this does not close the individual sockets, which must be closed separately using SDLNet_TCP_Close or SDLNet_UDP_Close.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_FreeSocketSet.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDLNet_FreeSocketSet(SDLNet_SocketSet set);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Address Resolution in SDL_net (C)\nDESCRIPTION: This code snippet demonstrates how to use SDLNet_WaitUntilResolved to block until an SDLNet_Address is resolved, with a specified timeout. The function checks the address resolution status or waits until the timeout. The address must be initially resolved via SDLNet_ResolveHostname. Dependencies: SDL_net library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_WaitUntilResolved.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_WaitUntilResolved(SDLNet_Address *address, Sint32 timeout);\n```\n\n----------------------------------------\n\nTITLE: Updating SDL Texture from Surface and Rendering in C\nDESCRIPTION: This snippet updates an SDL texture with the pixel data from an SDL surface and then renders the texture using SDL_RenderTexture. It also clears the renderer and presents the rendered output to the screen, finalizing the rendering process.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nSDL_UpdateTexture(sdlTexture, NULL, screen->pixels, screen->pitch);\nSDL_RenderClear(sdlRenderer);\nSDL_RenderTexture(sdlRenderer, sdlTexture, NULL, NULL);\nSDL_RenderPresent(sdlRenderer);\n```\n\n----------------------------------------\n\nTITLE: Get SDL Memory Functions in C\nDESCRIPTION: Retrieves the current memory allocation functions (malloc, calloc, realloc, and free) used by SDL. This allows inspection of the functions being used for memory management within the SDL library. It requires pointers to the function types to store the retrieved functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetMemoryFunctions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func,\n                            SDL_calloc_func *calloc_func,\n                            SDL_realloc_func *realloc_func,\n                            SDL_free_func *free_func);\n```\n\n----------------------------------------\n\nTITLE: Command Line Build with configure and make (macOS)\nDESCRIPTION: This snippet demonstrates the standard configure and make process to build SDL from the command line on macOS. It involves creating a build directory, running the configure script, compiling the code with make, and installing the library using sudo make install.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/macos.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\n../configure\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Mouse Mode in SDL 2.0\nDESCRIPTION: This code snippet shows how to set the relative mouse mode in SDL 2.0. This approach replaces the SDL 1.2 method of hiding the cursor and grabbing input, providing a cleaner way to handle continuous mouse movement. It relies on the `SDL_SetRelativeMouseMode` function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetRelativeMouseMode(SDL_TRUE);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetHapticID Syntax in C\nDESCRIPTION: Retrieves the instance ID of an opened haptic device using SDL_GetHapticID.  The function takes a pointer to an `SDL_Haptic` structure as input and returns an `SDL_HapticID`.  A return value of 0 indicates failure, and SDL_GetError() should be called for further error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHapticID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_HapticID SDL_GetHapticID(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: Detect XCF Image Data in SDL_RWops (C)\nDESCRIPTION: This function detects XCF image data within a readable and seekable SDL_RWops stream. It takes a pointer to an SDL_RWops struct as input and returns a non-zero value if the data is XCF, and zero otherwise. The function attempts to reset the RWops position after reading.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isXCF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isXCF(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_LUNA in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_LUNA macro to enable or disable the HIDAPI driver for Amazon Luna controllers connected via Bluetooth. Setting it to \"1\" enables the driver; \"0\" disables it. This should be set before initializing joysticks and gamepads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_LUNA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_LUNA \"SDL_JOYSTICK_HIDAPI_LUNA\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SDL_TICKS_PASSED with SDL_GetTicks in C\nDESCRIPTION: This code snippet demonstrates how to use SDL_TICKS_PASSED to wait for a specified timeout period. It initializes a timeout value based on the current ticks from SDL_GetTicks() and then loops until the timeout has elapsed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TICKS_PASSED.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst Uint32 timeout = SDL_GetTicks() + 100;\nwhile (!SDL_TICKS_PASSED(SDL_GetTicks(), timeout)) {\n    // ... do work until timeout has elapsed\n}\n```\n\n----------------------------------------\n\nTITLE: Get HID Device Info in C\nDESCRIPTION: Retrieves device information for a HID device using its handle. The device handle (`dev`) must be obtained by calling `SDL_hid_open`. Returns a pointer to `SDL_hid_device_info` if successful, or NULL if an error occurred. The returned structure is valid until `SDL_hid_close` is called on the device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_get_device_info.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_hid_device_info * SDL_hid_get_device_info(SDL_hid_device *dev);\n```\n\n----------------------------------------\n\nTITLE: Clear Surface with RGBA color in SDL3 (C)\nDESCRIPTION: Clears an SDL_Surface with a specific RGBA color. The function takes a pointer to the SDL_Surface to clear and the red, green, blue, and alpha components of the color as floating-point values, typically in the range 0-1. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClearSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ClearSurface(SDL_Surface *surface, float r, float g, float b, float a);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetNumberProperty Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_SetNumberProperty function in C. It's used to set an integer property associated with a given SDL_PropertiesID, using a provided property name and Sint64 value. The function returns 'true' on success and 'false' on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetNumberProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetNumberProperty(SDL_PropertiesID props, const char *name, Sint64 value);\n```\n\n----------------------------------------\n\nTITLE: Check for CPU LASX Features in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasLASX function, which determines whether the CPU has LOONGARCH LASX (SIMD) features. It takes no arguments and returns a boolean value indicating the presence of LASX.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasLASX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasLASX(void);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Clip Enable State - C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_RenderIsClipEnabled function, which is used to determine if clipping is enabled on a given SDL renderer. The function takes a pointer to an SDL_Renderer as input and returns an SDL_bool indicating whether clipping is enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderIsClipEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_RenderIsClipEnabled(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: Enabling SDL3 Callback Entry Points\nDESCRIPTION: This code snippet shows how to enable SDL3's callback entry points by defining SDL_MAIN_USE_CALLBACKS before including SDL_main.h. This replaces the standard main function with a set of callbacks for initialization, iteration, event handling, and quitting.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/main-functions.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_MAIN_USE_CALLBACKS\n#include <SDL3/SDL_main.h>\n```\n\n----------------------------------------\n\nTITLE: Get Surface Blend Mode in C\nDESCRIPTION: Retrieves the blend mode used for blit operations on a given SDL_Surface. The function takes a pointer to the surface and a pointer to an SDL_BlendMode variable, which will be filled with the current blend mode of the surface. It returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetSurfaceBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetSurfaceBlendMode(SDL_Surface * surface,\n                            SDL_BlendMode *blendMode);\n```\n\n----------------------------------------\n\nTITLE: Mix_Paused Syntax in C\nDESCRIPTION: This snippet shows the syntax for the Mix_Paused function. It takes an integer representing the channel to query as input and returns an integer indicating whether the channel is paused (1) or not (0). A channel value of -1 queries all channels, returning the number of paused channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Paused.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Paused(int channel);\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling Android Project with GCC toolchain\nDESCRIPTION: Cross-compiles the Android project using the GCC toolchain environment. Configures the build with the target host, prefix, and any project-specific options. Includes necessary PATH adjustments. Creates a build directory for cross-compilation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nPATH=$NDK_STANDALONE/bin:$PATH\nmkdir cross-android/ && cd cross-android/\n../configure --host=arm-linux-androideabi \\\n  --prefix=/android-aint-posix \\\n  --with-your-option --enable-your-other-option ...\nmake\n```\n\n----------------------------------------\n\nTITLE: SDL_AppIterate Callback\nDESCRIPTION: This C code shows the SDL_AppIterate callback function, which is the heart of an SDL3 application using callbacks. It is called repeatedly and should perform game updates and rendering. Its return value determines whether the application continues, fails, or succeeds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/main-functions.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nSDL_AppResult SDL_AppIterate(void *appstate);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Path by Index - C\nDESCRIPTION: Retrieves the implementation-dependent path of a joystick based on its device index. The function takes an integer representing the joystick's index as input and returns a const char* representing the path or NULL if not found. This function can be called before any joysticks are opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickPathForIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_JoystickPathForIndex(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Simulating Message Box Functionality (SDL 1.2)\nDESCRIPTION: This code snippet demonstrates a common workaround used in SDL 1.2 applications to display a message box by printing to stderr. It is included to illustrate the need for SDL_ShowSimpleMessageBox in SDL3, which simplifies message box creation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n#if USING_SDL\nfprintf(stderr, \"MSGBOX: %s\\n%s\\n\", title, text);   // oh well.\n#endif\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop Length Time in Seconds (SDL_mixer)\nDESCRIPTION: Retrieves the loop time length of a music stream in seconds using the Mix_GetMusicLoopLengthTime function. It takes a Mix_Music pointer as input and returns a double representing the loop length. A return value of -1.0 indicates that the feature is either not used or not supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicLoopLengthTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicLoopLengthTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicCAS Syntax\nDESCRIPTION: Shows the syntax for using the SDL_AtomicCAS function. The function attempts to atomically set the value of the `SDL_atomic_t` pointed to by `a` to `newval` if its current value is `oldval`. It returns SDL_TRUE if the swap was successful, SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicCAS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetSensorData Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetSensorData function in C. It takes an SDL_Sensor pointer, a float pointer to store the sensor data, and an integer representing the number of values to read. The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetSensorData(SDL_Sensor *sensor, float *data, int num_values);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MICRO_VERSION in C\nDESCRIPTION: This code snippet shows the definition of the SDL_MICRO_VERSION macro. It is used to represent the micro version (patch level) of the SDL headers. The macro is defined as a preprocessor directive in C, setting its value to 0 in this specific example.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MICRO_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MICRO_VERSION   0\n```\n\n----------------------------------------\n\nTITLE: Installing evtest utility\nDESCRIPTION: Installs the evtest utility on Debian/Ubuntu-based systems.  This utility is used for debugging joystick/input device issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install evtest\n```\n\n----------------------------------------\n\nTITLE: SDL_NET_VERSION_ATLEAST Definition in C\nDESCRIPTION: This macro checks if the compiled SDL_net version is at least the specified version (X.Y.Z). It compares the major, minor, and micro versions to determine compatibility. The macro evaluates to true if the compiled version meets or exceeds the specified version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDL_NET_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NET_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_NET_MAJOR_VERSION >= X) && \\\n     (SDL_NET_MAJOR_VERSION > X || SDL_NET_MINOR_VERSION >= Y) && \\\n     (SDL_NET_MAJOR_VERSION > X || SDL_NET_MINOR_VERSION > Y || SDL_NET_MICRO_VERSION >= Z))\n```\n\n----------------------------------------\n\nTITLE: Casting SDL_Vulkan_GetVkGetInstanceProcAddr Return - C\nDESCRIPTION: Illustrates how to cast the return value of `SDL_Vulkan_GetVkGetInstanceProcAddr` to the appropriate function pointer type `PFN_vkGetInstanceProcAddr`. This is necessary because the Vulkan headers are not directly included in SDL's headers. This example demonstrates assigning the returned function pointer to a variable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_GetVkGetInstanceProcAddr.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvkGetInstanceProcAddr = \\\n(PFN_vkGetInstanceProcAddr)SDL_Vulkan_GetVkGetInstanceProcAddr();\n```\n\n----------------------------------------\n\nTITLE: SDL_WINDOW_SURFACE_VSYNC Macros (C)\nDESCRIPTION: These macros define the possible values for the vsync parameter of SDL_SetWindowSurfaceVSync. SDL_WINDOW_SURFACE_VSYNC_DISABLED disables VSync, and SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE enables late swap tearing (adaptive VSync). Other integer values set the VSync interval.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowSurfaceVSync.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOW_SURFACE_VSYNC_DISABLED 0\n#define SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE (-1)\n```\n\n----------------------------------------\n\nTITLE: SDL_HitTest Callback Definition in C\nDESCRIPTION: This code snippet defines the SDL_HitTest callback function signature in C. It's used to determine if a specific point on a window should be considered a 'hit' for interaction.  The function receives the window, the point to test, and user-provided data, returning an SDL_HitTestResult.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HitTest.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_HitTestResult (SDLCALL *SDL_HitTest)(SDL_Window *win, const SDL_Point *area, void *data);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetGlyphMetrics Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_GetGlyphMetrics function in C. It takes a TTF_Font pointer, a Uint32 codepoint, and integer pointers to store the minimum and maximum x and y coordinates, and the advance value of the glyph. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetGlyphMetrics.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetGlyphMetrics(TTF_Font *font, Uint32 ch, int *minx, int *maxx, int *miny, int *maxy, int *advance);\n```\n\n----------------------------------------\n\nTITLE: Reserve Audio Channels in SDL_mixer (C)\nDESCRIPTION: Reserves a specified number of audio channels in SDL_mixer, starting from index zero. These reserved channels will not be automatically used when playing sounds with Mix_PlayChannel using a channel value of -1. This function requires the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_ReserveChannels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_ReserveChannels(int num);\n```\n\n----------------------------------------\n\nTITLE: SDL_strcasecmp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_strcasecmp function in C, used to compare two null-terminated UTF-8 strings case-insensitively.  The function takes two const char pointers as input, representing the strings to compare, and returns an integer indicating their relative order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strcasecmp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_strcasecmp(const char *str1, const char *str2);\n```\n\n----------------------------------------\n\nTITLE: Calculating CRC-32 Checksum with SDL_crc32 in C\nDESCRIPTION: The SDL_crc32 function calculates the CRC-32 checksum of a data block. It takes the previous CRC value, a pointer to the data, and the data length as input. It returns the updated CRC-32 checksum value. The function is defined in SDL3/SDL_stdinc.h and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_crc32.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint32 SDL_crc32(Uint32 crc, const void *data, size_t len);\n```\n\n----------------------------------------\n\nTITLE: Getting the GDK Task Queue Handle\nDESCRIPTION: This function retrieves the handle to the global GDK task queue. After using the queue, it is important to close the handle using `XTaskQueueCloseHandle` to prevent resource leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nSDL_GetGDKTaskQueue\n```\n\n----------------------------------------\n\nTITLE: Draw Surface Text C\nDESCRIPTION: This function draws text to an SDL surface. It takes a TTF_Text, an x coordinate, a y coordinate, and the target SDL_Surface as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_70\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DrawSurfaceText(TTF_Text *text, int x, int y, SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_RectEmpty Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RectEmpty function in C. It takes a constant pointer to an SDL_Rect as input and returns a boolean value indicating whether the rectangle is empty (i.e., NULL or has a non-positive width or height).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RectEmpty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_RectEmpty(const SDL_Rect *r);\n```\n\n----------------------------------------\n\nTITLE: SDL_RWseek Function Definition in C\nDESCRIPTION: Defines the signature of the SDL_RWseek function, which is used to seek within an SDL_RWops data stream.  It takes a pointer to an SDL_RWops structure, an offset, and a 'whence' value (RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END) as input and returns the final offset or -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWseek.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSint64 SDL_RWseek(SDL_RWops *context,\n                  Sint64 offset, int whence);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_SINE Macro in C\nDESCRIPTION: This C code snippet defines the SDL_HAPTIC_SINE macro. It's a bit flag (1u<<1) used in the SDL library to indicate that a haptic device supports sine wave effects. The macro is utilized when configuring or checking haptic device capabilities related to periodic effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_SINE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SINE       (1u<<1)\n```\n\n----------------------------------------\n\nTITLE: Setting Relative Mouse Mode in SDL3 in C\nDESCRIPTION: This snippet shows how to enable relative mouse mode in SDL3 using SDL_SetRelativeMouseMode. When relative mouse mode is enabled, the mouse cursor is hidden, and the mouse movement is reported relative to the center of the window, allowing for infinite mouse movement in games like FPS.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetRelativeMouseMode(true);\n```\n\n----------------------------------------\n\nTITLE: Check Gamepad Connection Status (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GamepadConnected function in SDL3. It takes a gamepad identifier (SDL_Gamepad*) as input and returns a boolean value indicating whether the gamepad is currently connected. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadConnected.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GamepadConnected(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Check Music Pause State in SDL_mixer (C)\nDESCRIPTION: This code snippet shows the syntax for the Mix_PausedMusic function from the SDL_mixer library. It's used to determine if the music stream is currently paused. It takes no arguments and returns a boolean value (true if paused, false otherwise).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_PausedMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_PausedMusic(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUTF8_Solid Syntax in C\nDESCRIPTION: Renders UTF-8 text to a new 8-bit surface with a solid color. Requires the SDL_ttf library.  The function takes a font, UTF-8 encoded text, and a foreground color as input and returns a new SDL_Surface or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUTF8_Solid.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUTF8_Solid(TTF_Font *font,\n                const char *text, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetBindForButton Syntax (C)\nDESCRIPTION: This function retrieves the SDL joystick layer binding for a specified game controller button. It takes a game controller instance and a button enum value as input. It returns an SDL_GameControllerButtonBind structure describing the bind or SDL_CONTROLLER_BINDTYPE_NONE on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetBindForButton.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nextern DECLSPEC SDL_GameControllerButtonBind SDLCALL\nSDL_GameControllerGetBindForButton(SDL_GameController *gamecontroller,\n                                   SDL_GameControllerButton button);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Wrap Width with SDL_ttf in C\nDESCRIPTION: This function sets the wrap width for a text object. It requires a `TTF_Text` pointer and the wrap width as an integer. It enables or disables text wrapping based on the provided width.  Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_72\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextWrapWidth(TTF_Text *text, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Language C\nDESCRIPTION: This function sets the language to be used for text shaping with the given font. It requires a valid TTF_Font pointer and a const char pointer to the language BCP-47 code. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontLanguage(TTF_Font *font, const char *language_bcp47);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetGamepadVendorForID Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetGamepadVendorForID function in C. It takes an SDL_JoystickID as input (the gamepad's instance ID) and returns a Uint16 representing the USB vendor ID of the gamepad. If the instance ID is invalid or the vendor ID is unavailable, the function returns 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadVendorForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetGamepadVendorForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Performance Frequency in SDL2\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetPerformanceFrequency function in SDL2. It takes no arguments and returns a Uint64 representing the platform-specific count per second of the high resolution counter. This is used to determine the rate at which the counter increments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPerformanceFrequency.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_GetPerformanceFrequency(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_THREAD in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_THREAD macro as a string literal. This macro is used to set a hint that controls whether SDL uses a separate thread for handling joystick detection and raw input messages on Windows.  The value should be set before SDL_Init() is called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_THREAD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_THREAD \"SDL_JOYSTICK_THREAD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_iOSSetEventPump Macro Definition in C\nDESCRIPTION: Defines the SDL_iOSSetEventPump macro, which is an alias for the SDL_iPhoneSetEventPump function. This macro provides an alternative way to access the SDL_iPhoneSetEventPump functionality and takes a SDL_bool value to enable or disable the event pump.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_iPhoneSetEventPump.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_iOSSetEventPump(enabled) SDL_iPhoneSetEventPump(enabled)\n```\n\n----------------------------------------\n\nTITLE: Counting Joysticks with SDL_NumJoysticks in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_NumJoysticks function in C. It takes no arguments and returns an integer representing the number of attached joysticks. A negative return value indicates an error, which can be further investigated using SDL_GetError().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_NumJoysticks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_NumJoysticks(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_ROG_GAMEPAD_MICE in C\nDESCRIPTION: This C macro defines the SDL_HINT_ROG_GAMEPAD_MICE, which allows SDL to recognize ROG gamepad-compatible mice. The hint's value is a string, either a comma-separated list of USB VID/PID pairs or a filename pointing to a file containing such a list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ROG_GAMEPAD_MICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ROG_GAMEPAD_MICE \"SDL_ROG_GAMEPAD_MICE\"\n```\n\n----------------------------------------\n\nTITLE: Playing an audio chunk on a specific channel in SDL_mixer (C)\nDESCRIPTION: This code snippet defines the syntax for the Mix_PlayChannel function in SDL_mixer. It takes a channel number, a pointer to a Mix_Chunk, and the number of loops as input. The function returns the channel used to play the sound or -1 if it couldn't be played.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_PlayChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_PlayChannel(int channel, Mix_Chunk *chunk, int loops);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Audio Drivers in SDL (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetNumAudioDrivers function. It takes no arguments and returns an integer representing the number of audio drivers built into SDL. The function is available since SDL 2.0.0 and is part of the SDL_audio.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumAudioDrivers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumAudioDrivers(void);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_DelSocket Syntax in C\nDESCRIPTION: Defines the syntax for the SDLNet_UDP_DelSocket function, used to remove a UDP socket from a socket set within the SDL_net library. It takes an SDLNet_SocketSet and a UDPsocket as input and returns an integer representing the number of sockets remaining in the set or -1 if the socket was not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_DelSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE int SDLNet_UDP_DelSocket(SDLNet_SocketSet set, UDPsocket sock);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AssertionHandler in C\nDESCRIPTION: This code snippet defines the SDL_AssertionHandler callback function in C. The handler takes a pointer to SDL_AssertData and a void pointer as input, and returns an SDL_AssertState value. This function is called when an SDL assertion fails, allowing custom error handling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AssertionHandler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_AssertState (SDLCALL *SDL_AssertionHandler)( const SDL_AssertData *data, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Get Renderer Blend Mode in C\nDESCRIPTION: Retrieves the blend mode currently used for drawing operations in the specified SDL_Renderer. The function takes a pointer to an SDL_Renderer and a pointer to an SDL_BlendMode, where the current blend mode will be stored.  Returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRenderDrawBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetRenderDrawBlendMode(SDL_Renderer * renderer,\n                               SDL_BlendMode *blendMode);\n```\n\n----------------------------------------\n\nTITLE: SDL_SaveBMP_RW Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_SaveBMP_RW function in C. It takes an SDL_Surface pointer, an SDL_RWops pointer, and an integer as input. The SDL_Surface contains the image to be saved. The SDL_RWops represents the data stream to save to, and the integer determines whether the stream should be closed after writing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SaveBMP_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SaveBMP_RW\n    (SDL_Surface * surface, SDL_RWops * dst, int freedst);\n```\n\n----------------------------------------\n\nTITLE: Get Semaphore Value in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SemValue function in C. It takes a pointer to an SDL_sem structure as input and returns a Uint32 representing the semaphore's value. This function is available since SDL 2.0.0 and requires the SDL_mutex.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SemValue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_SemValue(SDL_sem * sem);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateProcess Syntax\nDESCRIPTION: This code snippet shows the syntax for the SDL_CreateProcess function. It takes an array of strings representing the arguments for the new process and a boolean indicating whether to pipe standard input/output. It returns a pointer to the newly created process, or NULL if the process couldn't be created.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateProcess.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Process * SDL_CreateProcess(const char * const *args, bool pipe_stdio);\n```\n\n----------------------------------------\n\nTITLE: Set Channel Finished Callback (SDL_mixer, C)\nDESCRIPTION: This code snippet shows the syntax for the Mix_ChannelFinished function, which sets a callback to be executed when a specific audio channel finishes playing. The `channel_finished` parameter is a pointer to the callback function that will be called when the channel stops.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_ChannelFinished.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_ChannelFinished(Mix_ChannelFinishedCallback channel_finished);\n```\n\n----------------------------------------\n\nTITLE: SDL_InsertGPUDebugLabel Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_InsertGPUDebugLabel function. It requires an SDL_GPUCommandBuffer pointer and a constant character pointer representing the UTF-8 string label to be inserted into the command buffer. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InsertGPUDebugLabel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_InsertGPUDebugLabel(\n    SDL_GPUCommandBuffer *command_buffer,\n    const char *text);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI macro, which is used to control whether SDL uses HIDAPI drivers for joysticks. Setting this hint to \"1\" enables HIDAPI drivers, while setting it to \"0\" disables them. It is defined as a string literal.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI \"SDL_JOYSTICK_HIDAPI\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ACQUIRED_BEFORE Macro Definition (C)\nDESCRIPTION: This macro is a wrapper around Clang's thread safety analysis annotations. It defines SDL_ACQUIRED_BEFORE(x) using SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_before(x)). The macro is intended to be used to indicate that a mutex 'x' is acquired before the current thread proceeds, aiding in thread safety analysis.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ACQUIRED_BEFORE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ACQUIRED_BEFORE(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_before(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_image Version Macros and Function\nDESCRIPTION: Defines macros for managing the SDL_image library version and provides a function to retrieve the version of the dynamically linked SDL_image library. This is used to check compatibility and feature availability.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_MAJOR_VERSION                                                                                    // Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO\n#define SDL_IMAGE_VERSION                                                                                          // This is the version number macro for the current SDL_image version.\n#define SDL_IMAGE_VERSION_ATLEAST(X, Y, Z)                                                                         // This macro will evaluate to true if compiled with SDL_image at least X.Y.Z.\nint IMG_Version(void);                                                                                             // This function gets the version of the dynamically linked SDL_image library.\n```\n\n----------------------------------------\n\nTITLE: SDL_GetScancodeName Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetScancodeName function in C. It takes an SDL_Scancode as input and returns a const char* representing the name of the scancode. The returned string should not be modified and may be an empty string if the scancode has no name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetScancodeName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetScancodeName(SDL_Scancode scancode);\n```\n\n----------------------------------------\n\nTITLE: Get Real Gamepad Type with SDL_GetRealGamepadType in C\nDESCRIPTION: Retrieves the actual gamepad type, bypassing any mapping overrides. It takes an SDL_Gamepad pointer as input and returns an SDL_GamepadType enum value. If the type is unavailable, it returns SDL_GAMEPAD_TYPE_UNKNOWN. Requires SDL3 version 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRealGamepadType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Query Audio Device Parameters using Mix_QuerySpec (C)\nDESCRIPTION: This code snippet shows the syntax for using the `Mix_QuerySpec` function in SDL_mixer to retrieve the audio device parameters. It takes pointers to integers for frequency and channels, and a pointer to an `SDL_AudioFormat` variable to store the format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_QuerySpec.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_QuerySpec(int *frequency, SDL_AudioFormat *format, int *channels);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS hint string. This hint controls whether SDL3 uses the HIDAPI driver for Nintendo Switch Joy-Cons. It must be set before initializing joysticks or gamepads. The default value inherits from SDL_HINT_JOYSTICK_HIDAPI.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS \"SDL_JOYSTICK_HIDAPI_JOY_CONS\"\n```\n\n----------------------------------------\n\nTITLE: Stopping a Haptic Effect in SDL2 (C)\nDESCRIPTION: Stops the haptic effect with the given ID on the specified haptic device. The function requires a valid SDL_Haptic pointer and the ID of the effect to stop. Returns 0 on success, or a negative error code on failure.  Use SDL_GetError() to get more info.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticStopEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticStopEffect(SDL_Haptic * haptic,\n                         int effect);\n```\n\n----------------------------------------\n\nTITLE: Querying Font Scalability with TTF_FontIsScalable in C\nDESCRIPTION: This code snippet demonstrates how to use the TTF_FontIsScalable function to check if a font is scalable. It takes a TTF_Font pointer as input and returns a boolean value (true if the font is scalable, false otherwise).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_FontIsScalable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_FontIsScalable(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: RTF_Load_IO Syntax in C\nDESCRIPTION: Defines the syntax for the RTF_Load_IO function, which loads RTF data from an SDL_IOStream into an RTF context. It takes an RTF_Context pointer, an SDL_IOStream pointer, and a boolean indicating whether to close the IOStream after loading. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_Load_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool RTF_Load_IO(RTF_Context *ctx, SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WAVE_FACT_CHUNK in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_WAVE_FACT_CHUNK is defined as a macro string in C. This macro is used to set the hint that controls how SDL handles the fact chunk when loading WAVE files. The fact chunk stores information about the number of samples of a WAVE file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WAVE_FACT_CHUNK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WAVE_FACT_CHUNK   \"SDL_WAVE_FACT_CHUNK\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MIXER_VERSION Macro in C\nDESCRIPTION: Defines the SDL_MIXER_VERSION macro using the SDL_VERSIONNUM macro with the major, minor, and micro version numbers of the SDL_mixer library. This macro allows developers to check the version of the SDL_mixer library being used at compile time. It requires the SDL3_mixer library to be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/SDL_MIXER_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIXER_VERSION \\\n    SDL_VERSIONNUM(SDL_MIXER_MAJOR_VERSION, SDL_MIXER_MINOR_VERSION, SDL_MIXER_MICRO_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Set Integer Scale for Renderer in C\nDESCRIPTION: Sets whether to force integer scales for resolution-independent rendering using SDL_RenderSetIntegerScale.  This function takes an SDL_Renderer pointer and an SDL_bool value to enable or disable integer scaling. It returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderSetIntegerScale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderSetIntegerScale(SDL_Renderer * renderer,\n                              SDL_bool enable);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateCursor Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_CreateCursor function in C. It takes bitmap data, mask, width, height, hot spot X and Y coordinates as input to create a custom cursor. The function returns a pointer to the newly created SDL_Cursor object, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor* SDL_CreateCursor(const Uint8 * data,\n                             const Uint8 * mask,\n                             int w, int h, int hot_x,\n                             int hot_y);\n```\n\n----------------------------------------\n\nTITLE: Defining the Audio Device App Name Hint in C\nDESCRIPTION: This code snippet defines the SDL_HINT_AUDIO_DEVICE_APP_NAME macro, which is used to specify the application name for an audio device. Setting this hint allows the application to describe its audio stream to the OS, potentially enabling more granular volume control.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUDIO_DEVICE_APP_NAME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DEVICE_APP_NAME \"SDL_AUDIO_DEVICE_APP_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_X11_WINDOW_TYPE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_X11_WINDOW_TYPE macro, which is used to specify the type of an X11 window when creating it with SDL. The value of this macro is a string that SDL uses to set the _NET_WM_WINDOW_TYPE X11 property.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_X11_WINDOW_TYPE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_X11_WINDOW_TYPE \"SDL_X11_WINDOW_TYPE\"\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontLineSkip Function\nDESCRIPTION: Sets the spacing between lines of text for a font, in pixels. This value is added to the font height to determine the line spacing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontLineSkip(TTF_Font *font, int lineskip);                                                                                    // Set the spacing between lines of text for a font.\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockAudio Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_UnlockAudio function. It takes no arguments and returns nothing. It unlocks the audio device for writing after a lock using SDL_LockAudio.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnlockAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockAudio(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap64BE Macro Definition in C\nDESCRIPTION: Defines the SDL_Swap64BE macro, which swaps a 64-bit value from big endian to the native byte order. If the system is big endian, the value is returned unchanged. The macro uses SwapOnlyIfNecessary to perform the conditional swapping.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap64BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_Swap64BE(x) SwapOnlyIfNecessary(x)\n```\n\n----------------------------------------\n\nTITLE: Get Scancode Name in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetScancodeName function. It takes an SDL_Scancode as input and returns a const char* representing the human-readable name of the scancode.  The returned string may be empty if the scancode has no name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetScancodeName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetScancodeName(SDL_Scancode scancode);\n```\n\n----------------------------------------\n\nTITLE: SDL_isalnum Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_isalnum function in C. This function takes an integer representing a character value as input and returns an integer indicating whether the character is alphanumeric according to the ASCII standard.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isalnum.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isalnum(int x);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Touch Fingers in SDL\nDESCRIPTION: Retrieves the number of active fingers for a specified touch device using its SDL_TouchID. Returns the number of fingers on success, or 0 on failure. Requires SDL 2.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumTouchFingers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumTouchFingers(SDL_TouchID touchID);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_read_timeout Syntax in C\nDESCRIPTION: Reads an Input report from a HID device with a specified timeout. Requires a valid SDL_hid_device handle, a buffer to store the read data, the length of data to read, and a timeout value in milliseconds. Returns the number of bytes read or -1 on error. Returns 0 if no packet was available within the timeout period.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_read_timeout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_read_timeout(SDL_hid_device *dev, unsigned char *data, size_t length, int milliseconds);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_VULKAN_DEBUG Macro in C\nDESCRIPTION: This code snippet defines the `SDL_HINT_RENDER_VULKAN_DEBUG` macro. This macro is used as a key when setting an SDL hint that controls whether Vulkan Validation Layers should be enabled. Setting the hint to \"1\" enables the layers, while setting it to \"0\" disables them. This hint is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_VULKAN_DEBUG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_VULKAN_DEBUG \"SDL_RENDER_VULKAN_DEBUG\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicSetPtr Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_AtomicSetPtr function, which atomically sets a pointer to a new value. It takes a pointer to a pointer and the desired pointer value as input and returns the previous value of the pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicSetPtr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_AtomicSetPtr(void **a, void* v);\n```\n\n----------------------------------------\n\nTITLE: SDL_sqrt Function Syntax\nDESCRIPTION: This code snippet shows the syntax of the SDL_sqrt function, which calculates the square root of a double-precision floating-point number. The function takes a double as input and returns a double representing the square root.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_sqrt.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_sqrt(double x);\n```\n\n----------------------------------------\n\nTITLE: SDL_scalbn Syntax\nDESCRIPTION: Defines the syntax for using the SDL_scalbn function to scale a double by an integer power of two. The function takes a double `x` and an integer `n` as input, and returns a double representing `x * 2^n`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_scalbn.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_scalbn(double x, int n);\n```\n\n----------------------------------------\n\nTITLE: SDL_bsearch Syntax in C\nDESCRIPTION: Shows the function signature for SDL_bsearch in C. It accepts a key, a pointer to the base of the array, the number of elements, the size of each element, and a comparison function as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_bsearch.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_bsearch(const void *key, const void *base, size_t nmemb, size_t size, SDL_CompareCallback compare);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Name by ID - SDL3 - C\nDESCRIPTION: Retrieves the implementation-dependent name of a sensor given its instance ID. The function takes an SDL_SensorID as input and returns a const char* representing the sensor's name or NULL if the ID is invalid. This can be called before any sensors are opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorNameForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetSensorNameForID(SDL_SensorID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_WINGDK in C\nDESCRIPTION: This macro definition is used to identify that the code is being compiled for Microsoft GDK for Windows. It's a preprocessor directive that sets SDL_PLATFORM_WINGDK to 1 when the condition is met. This allows conditional compilation based on the target platform.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_WINGDK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_WINGDK 1\n```\n\n----------------------------------------\n\nTITLE: SDL_strnstr Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_strnstr function. This function searches for the first instance of a substring (`needle`) within a string (`haystack`), up to a maximum length (`maxlen`). It returns a pointer to the beginning of the substring if found, otherwise it returns NULL. The header file SDL3/SDL_stdinc.h must be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strnstr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strnstr(const char *haystack, const char *needle, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRectAndLineIntersectionFloat Function Signature in C\nDESCRIPTION: Defines the function signature for SDL_GetRectAndLineIntersectionFloat, which calculates the intersection between an SDL_FRect and a line segment defined by two points (X1, Y1) and (X2, Y2). The function returns true if there's an intersection, modifying the line segment coordinates to represent the clipped segment, and false otherwise. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRectAndLineIntersectionFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRectAndLineIntersectionFloat(const SDL_FRect *rect, float *X1, float *Y1, float *X2, float *Y2);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Gamepad Structure in C\nDESCRIPTION: This code snippet defines the SDL_Gamepad structure using a typedef. It is part of the SDL3 library and used for gamepad identification. The structure is available since SDL 3.2.0 and is defined in SDL3/SDL_gamepad.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Gamepad.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Gamepad SDL_Gamepad;\n```\n\n----------------------------------------\n\nTITLE: SDL_MemoryBarrierAcquireFunction Syntax C\nDESCRIPTION: Defines the syntax for the SDL_MemoryBarrierAcquireFunction, which is used to insert a memory acquire barrier. It takes no arguments and returns void. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MemoryBarrierAcquireFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_MemoryBarrierAcquireFunction(void);\n```\n\n----------------------------------------\n\nTITLE: Convert String to 32-bit Tag in SDL_ttf (C)\nDESCRIPTION: Converts a 4-character string to its 32-bit tag representation using the TTF_StringToTag function from the SDL_ttf library. This function takes a null-terminated C string as input and returns a 32-bit unsigned integer representing the tag.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_StringToTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_StringToTag(const char *string);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogDebug Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_LogDebug function in C. It takes an integer category, a format string (const char *fmt), and a variable number of arguments to be formatted into the string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogDebug.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogDebug(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDL_memset4 Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_memset4 function. It takes a destination pointer `dst`, a Uint32 value `val`, and the number of Uint32 values `dwords` to set. It returns the destination pointer `dst`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_memset4.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_memset4(void *dst, Uint32 val, size_t dwords);\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUComputeStorageTextures Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_BindGPUComputeStorageTextures function. This function binds storage textures to the compute pipeline for read-only access. It takes a compute pass, the first slot, an array of storage textures, and the number of bindings as parameters. The textures should be created with SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUComputeStorageTextures.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUComputeStorageTextures(\n    SDL_GPUComputePass *compute_pass,\n    Uint32 first_slot,\n    SDL_GPUTexture *const *storage_textures,\n    Uint32 num_bindings);\n```\n\n----------------------------------------\n\nTITLE: SDL_SendGamepadEffect Syntax in C\nDESCRIPTION: Shows the syntax of the SDL_SendGamepadEffect function, which sends a gamepad specific effect packet. It takes a SDL_Gamepad pointer, a void pointer to the effect data, and the size of the data as input. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SendGamepadEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SendGamepadEffect(SDL_Gamepad *gamepad, const void *data, int size);\n```\n\n----------------------------------------\n\nTITLE: Get D3D11 Device from SDL Renderer (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_RenderGetD3D11Device function, which retrieves the D3D11 device associated with an SDL renderer. The function takes an SDL_Renderer pointer as input and returns an ID3D11Device pointer.  It returns NULL if the renderer is not a D3D11 renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetD3D11Device.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nID3D11Device* SDL_RenderGetD3D11Device(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FRect structure in C\nDESCRIPTION: This C code snippet defines the SDL_FRect structure, which represents a rectangle with floating point coordinates. The structure contains four float members: x and y representing the top-left corner's coordinates, and w and h representing the width and height of the rectangle respectively. This structure is defined in SDL_rect.h and is a fundamental data type for working with rectangular regions in SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_FRect\n{\n    float x;\n    float y;\n    float w;\n    float h;\n} SDL_FRect;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUTransferBufferUsage Enum in C\nDESCRIPTION: This C code snippet defines the SDL_GPUTransferBufferUsage enum, which specifies the intended use of a transfer buffer. It includes two possible values: SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD for buffers intended for uploading data to the GPU, and SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD for buffers intended for downloading data from the GPU.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTransferBufferUsage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUTransferBufferUsage\n{\n    SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD,\n    SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD\n} SDL_GPUTransferBufferUsage;\n```\n\n----------------------------------------\n\nTITLE: Get Max Haptic Effects Playing in SDL (C)\nDESCRIPTION: Retrieves the number of effects a haptic device can play at the same time using SDL_GetMaxHapticEffectsPlaying.  It takes a pointer to an SDL_Haptic device as input and returns an integer representing the number of effects the device can play simultaneously, or -1 if an error occurs. This function is part of the SDL3 library and is available since version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetMaxHapticEffectsPlaying.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetMaxHapticEffectsPlaying(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: Installing all test APKs (CMake)\nDESCRIPTION: This command installs all built SDL test APKs onto the Android device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_25\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target install-sdl-test-apks\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop Start Time SDL_mixer C\nDESCRIPTION: Retrieves the loop start time position of a music stream, specified in seconds. Requires a valid Mix_Music pointer. Returns the start time as a double.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_40\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicLoopStartTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAsyncIOSize Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetAsyncIOSize function in C. This function retrieves the size of the data stream in an SDL_AsyncIO object. It takes an SDL_AsyncIO pointer as input and returns the size of the data stream as a Sint64.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAsyncIOSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint64 SDL_GetAsyncIOSize(SDL_AsyncIO *asyncio);\n```\n\n----------------------------------------\n\nTITLE: Releasing a GPU Fence in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_ReleaseGPUFence function. It takes a pointer to an SDL_GPUDevice and a pointer to an SDL_GPUFence as input.  The function releases the specified GPU fence associated with the given device. The fence should not be referenced after this call.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseGPUFence.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseGPUFence(\n    SDL_GPUDevice *device,\n    SDL_GPUFence *fence);\n```\n\n----------------------------------------\n\nTITLE: TTF_ClearFallbackFonts Syntax (C)\nDESCRIPTION: Removes all fallback fonts associated with the specified TTF_Font object. This function is part of SDL_ttf, a separate library from SDL. Requires the SDL_ttf library to be included and initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_ClearFallbackFonts.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_ClearFallbackFonts(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Deleting Text String with SDL_ttf in C\nDESCRIPTION: This function deletes UTF-8 text from a text object. It requires a `TTF_Text` pointer, the offset at which to start deleting, and the length of the text to delete. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_79\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DeleteTextString(TTF_Text *text, int offset, int length);\n```\n\n----------------------------------------\n\nTITLE: SDL_isspace Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_isspace function in C. It takes an integer representing a character as input and returns an integer indicating whether the character is considered whitespace (non-zero) or not (zero) according to SDL's definition.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isspace.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isspace(int x);\n```\n\n----------------------------------------\n\nTITLE: SDL_PushGPUFragmentUniformData Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_PushGPUFragmentUniformData function, which is used to push data to a fragment uniform slot on the command buffer. It takes a command buffer, a slot index, a pointer to the data, and the length of the data as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PushGPUFragmentUniformData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PushGPUFragmentUniformData(\n    SDL_GPUCommandBuffer *command_buffer,\n    Uint32 slot_index,\n    const void *data,\n    Uint32 length);\n```\n\n----------------------------------------\n\nTITLE: Get Haptic Device Index in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HapticIndex function. It takes a pointer to an SDL_Haptic device as input and returns its index, or a negative error code on failure.  The SDL_Haptic struct must be initialized and the device opened prior to calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticIndex(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: SDL_RectEquals Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RectEquals function, which checks if two SDL_Rect structures are equal. It takes two const SDL_Rect pointers as input and returns an SDL_bool value indicating equality. It is defined as an inline function for performance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RectEquals.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE SDL_bool SDL_RectEquals(const SDL_Rect *a, const SDL_Rect *b);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAudioStreamOutputChannelMap Syntax\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetAudioStreamOutputChannelMap function in C. It takes an SDL_AudioStream pointer, a pointer to an integer array representing the channel map, and the number of channels in the map as input. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioStreamOutputChannelMap.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAudioStreamOutputChannelMap(SDL_AudioStream *stream, const int *chmap, int count);\n```\n\n----------------------------------------\n\nTITLE: SDL_DEFINE_PIXELFOURCC Macro Definition in C\nDESCRIPTION: Defines a macro named SDL_DEFINE_PIXELFOURCC that takes four character arguments (A, B, C, D) and expands to SDL_FOURCC(A, B, C, D).  This macro is used to define custom pixel formats based on FourCC codes in SDL3. The defined pixel format can then be used in SDL surface or texture creation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEFINE_PIXELFOURCC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_DEFINE_PIXELFOURCC(A, B, C, D) SDL_FOURCC(A, B, C, D)\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUShaderCreateInfo Structure Definition in C\nDESCRIPTION: Defines the SDL_GPUShaderCreateInfo structure, which holds the data needed to create a GPU shader. This includes the shader code, entry point, format, stage, and resource counts. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUShaderCreateInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUShaderCreateInfo\n{\n    size_t code_size;             /**< The size in bytes of the code pointed to. */\n    const Uint8 *code;            /**< A pointer to shader code. */\n    const char *entrypoint;       /**< A pointer to a null-terminated UTF-8 string specifying the entry point function name for the shader. */\n    SDL_GPUShaderFormat format;   /**< The format of the shader code. */\n    SDL_GPUShaderStage stage;     /**< The stage the shader program corresponds to. */\n    Uint32 num_samplers;          /**< The number of samplers defined in the shader. */\n    Uint32 num_storage_textures;  /**< The number of storage textures defined in the shader. */\n    Uint32 num_storage_buffers;   /**< The number of storage buffers defined in the shader. */\n    Uint32 num_uniform_buffers;   /**< The number of uniform buffers defined in the shader. */\n\n    SDL_PropertiesID props;       /**< A properties ID for extensions. Should be 0 if no extensions are needed. */\n} SDL_GPUShaderCreateInfo;\n```\n\n----------------------------------------\n\nTITLE: SDL_GDKSuspendComplete Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GDKSuspendComplete function. It's a void function that takes no arguments. This function must be called from the application to indicate to SDL that it is ready for the suspend to continue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GDKSuspendComplete.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GDKSuspendComplete(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_OnApplicationWillEnterBackground Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_OnApplicationWillEnterBackground function in C. This function allows iOS apps with external event handling to report onApplicationWillResignActive events to SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OnApplicationWillEnterBackground.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_OnApplicationWillEnterBackground(void);\n```\n\n----------------------------------------\n\nTITLE: Free Music Object in SDL_mixer (C)\nDESCRIPTION: Frees a music object that was previously loaded using Mix_LoadMUS, Mix_LoadMUS_IO, or Mix_LoadMUSType_IO. If the music is currently playing, it will be stopped. If the music is fading out, this function will block until the fade is complete.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FreeMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_FreeMusic(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_IOS_HIDE_HOME_INDICATOR in C\nDESCRIPTION: Defines the SDL_HINT_IOS_HIDE_HOME_INDICATOR macro, which represents the string used to set the hint controlling the visibility of the home indicator on iPhone X. The hint can be used to hide, dim, or show the indicator bar. It is a string constant that should be passed to SDL_SetHint to configure its behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_IOS_HIDE_HOME_INDICATOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_IOS_HIDE_HOME_INDICATOR \"SDL_IOS_HIDE_HOME_INDICATOR\"\n```\n\n----------------------------------------\n\nTITLE: Get Manufacturer String from HID Device (SDL_hid_get_manufacturer_string) - C\nDESCRIPTION: This function retrieves the manufacturer string from a HID device. It requires a device handle obtained from SDL_hid_open(), a wide string buffer to store the data, and the maximum length of the buffer. Returns 0 on success and -1 on error. Available since SDL 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_get_manufacturer_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_manufacturer_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Releasing a GPU Graphics Pipeline in C\nDESCRIPTION: This code snippet shows the syntax for the `SDL_ReleaseGPUGraphicsPipeline` function. It takes an SDL_GPUDevice pointer and an SDL_GPUGraphicsPipeline pointer as arguments and releases the specified graphics pipeline. After calling this function, the graphics pipeline should not be referenced.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseGPUGraphicsPipeline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseGPUGraphicsPipeline(\n    SDL_GPUDevice *device,\n    SDL_GPUGraphicsPipeline *graphics_pipeline);\n```\n\n----------------------------------------\n\nTITLE: Disable Optimization in Android NDK Build\nDESCRIPTION: This snippet shows how to disable optimization in an Android NDK build by adding a line to the Application.mk file. This is useful for debugging as it makes the code easier to step through.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_15\n\nLANGUAGE: makefile\nCODE:\n```\nAPP_OPTIM := debug\n```\n\n----------------------------------------\n\nTITLE: Getting Text Wrap Width with SDL_ttf in C\nDESCRIPTION: This function retrieves the wrap width of a text object. It requires a `TTF_Text` pointer and a pointer to an integer to store the wrap width. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_73\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextWrapWidth(TTF_Text *text, int *wrap_width);\n```\n\n----------------------------------------\n\nTITLE: SDL_CopyProperties Syntax\nDESCRIPTION: Defines the syntax for the SDL_CopyProperties function, which copies properties from a source SDL_PropertiesID to a destination SDL_PropertiesID. It returns a boolean indicating success or failure. Properties requiring cleanup are not copied.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CopyProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CopyProperties(SDL_PropertiesID src, SDL_PropertiesID dst);\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Mapping by Index (C)\nDESCRIPTION: Retrieves the game controller mapping string at the specified index. The returned string must be freed using SDL_free(). Returns NULL if the index is out of range.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerMappingForIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_GameControllerMappingForIndex(int mapping_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_PointInFRect Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_PointInFRect function in C. It takes a pointer to an SDL_FPoint and a pointer to an SDL_FRect as input and returns an SDL_bool indicating whether the point is inside the rectangle.  SDL_FORCE_INLINE is a compiler hint for inlining the function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PointInFRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE SDL_bool SDL_PointInFRect(const SDL_FPoint *p, const SDL_FRect *r);\n```\n\n----------------------------------------\n\nTITLE: Binding Fragment Storage Textures in C with SDL3\nDESCRIPTION: This code snippet shows the syntax for the SDL_BindGPUFragmentStorageTextures function, used to bind storage textures for a fragment shader. It requires an SDL_GPURenderPass, a starting slot index, an array of SDL_GPUTexture pointers, and the number of bindings to be made. The textures must be created with SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUFragmentStorageTextures.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUFragmentStorageTextures(\n    SDL_GPURenderPass *render_pass,\n    Uint32 first_slot,\n    SDL_GPUTexture *const *storage_textures,\n    Uint32 num_bindings);\n\n```\n\n----------------------------------------\n\nTITLE: SDLNet_DelSocket Syntax (C)\nDESCRIPTION: Removes a socket from a set of sockets to be checked for available data. This is the general function, but the inline wrappers SDLNet_TCP_DelSocket and SDLNet_UDP_DelSocket are generally preferred. Returns the number of sockets in the set after removal, or -1 if the socket was not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_DelSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_DelSocket(SDLNet_SocketSet set, SDLNet_GenericSocket sock);\n```\n\n----------------------------------------\n\nTITLE: SDL_CAPABILITY Macro Definition in C\nDESCRIPTION: This macro defines SDL_CAPABILITY which is used to annotate code with thread safety capabilities, leveraging Clang's thread safety analysis tools. It takes a single argument 'x' representing the capability to be associated with the code. The macro expands to SDL_THREAD_ANNOTATION_ATTRIBUTE__(capability(x)).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CAPABILITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_CAPABILITY(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(capability(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_PropertiesID Type Definition in C\nDESCRIPTION: Defines SDL_PropertiesID as an alias for Uint32 in C. This type is used to identify properties within the SDL3 library's properties system. It's a simple type definition providing a clear abstraction for property identifiers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PropertiesID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_PropertiesID;\n```\n\n----------------------------------------\n\nTITLE: SDL_copyp Macro Definition\nDESCRIPTION: This macro copies memory from a source object to a destination object, ensuring that both objects have the same size. It uses SDL_COMPILE_TIME_ASSERT to perform a compile-time check of the object sizes and then uses SDL_memcpy to copy the memory. Parameters: dst (destination pointer), src (source pointer).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_copyp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_copyp(dst, src)                                                                 \\\n    { SDL_COMPILE_TIME_ASSERT(SDL_copyp, sizeof (*(dst)) == sizeof (*(src))); }             \\\n    SDL_memcpy((dst), (src), sizeof(*(src)))\n```\n\n----------------------------------------\n\nTITLE: Define Screensaver Inhibit Activity Name Hint in C\nDESCRIPTION: This code snippet defines the SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME macro, which is used to specify the hint's name when disabling the screensaver. It allows developers to provide a descriptive activity name to the OS, indicating why the screensaver is being inhibited. The macro is a string literal, and setting it allows for a customized message to be displayed in systems that support this feature, aiding in user awareness of the application's screen saver inhibition.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME \"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME\"\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockProperties Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_UnlockProperties function. It takes an SDL_PropertiesID as input, which represents the properties to unlock. The function is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnlockProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: Get Music Hook Data in SDL_mixer (C)\nDESCRIPTION: This function retrieves the user-defined data pointer that was previously set using Mix_HookMusic. It returns a void pointer to the user data, or NULL if Mix_HookMusic has not been called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicHookData.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid * Mix_GetMusicHookData(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_OpenFontDPIRW Syntax in C\nDESCRIPTION: Opens a font from an SDL_RWops with target resolutions (in DPI).  Takes SDL_RWops pointer, freesrc flag, point size, horizontal DPI, and vertical DPI as parameters. Returns a TTF_Font pointer or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_OpenFontDPIRW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_Font * TTF_OpenFontDPIRW(SDL_RWops *src, int freesrc, int ptsize, unsigned int hdpi, unsigned int vdpi);\n```\n\n----------------------------------------\n\nTITLE: Set iOS Animation Callback for Game Center Integration (C++)\nDESCRIPTION: This snippet demonstrates how to use SDL_SetiOSAnimationCallback to integrate with Game Center on iOS.  Instead of running an endless main loop, each frame is rendered in a callback function, yielding control back to the system, which is necessary for Game Center to function correctly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/ios.md#_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\nextern \"C\"\n{\n    void ShowFrame(void*)\n    {\n        ... do event handling, frame logic and rendering ...\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    ... initialize game ...\n\n#ifdef SDL_PLATFORM_IOS\n    // Initialize the Game Center for scoring and matchmaking\n    InitGameCenter();\n\n    // Set up the game to run in the window animation callback on iOS\n    // so that Game Center and so forth works correctly.\n    SDL_SetiOSAnimationCallback(window, 1, ShowFrame, NULL);\n#else\n    while ( running ) {\n        ShowFrame(0);\n        DelayFrame();\n    }\n#endif\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Camera Driver Name with SDL_GetCameraDriver (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetCameraDriver function to retrieve the name of a camera driver at a specific index. It takes an integer index as input and returns a const char* representing the driver name. If the index is invalid, it returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameraDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetCameraDriver(int index);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_SQUARE in SDL3 (C)\nDESCRIPTION: Defines the SDL_HAPTIC_SQUARE macro as a bit flag to indicate support for square wave haptic effects. This macro is used within the SDL haptic system to configure and identify haptic effects. It is available since SDL 3.2.0 and defined in SDL3/SDL_haptic.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_SQUARE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SQUARE       (1u<<2)\n```\n\n----------------------------------------\n\nTITLE: Creating a new haptic effect using SDL_HapticNewEffect in C\nDESCRIPTION: Creates a new haptic effect on a specified haptic device. The function requires a valid SDL_Haptic pointer to the device and a pre-configured SDL_HapticEffect structure that defines the effect's properties. Returns an effect ID or a negative error code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticNewEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticNewEffect(SDL_Haptic * haptic,\n                        SDL_HapticEffect * effect);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowMouseRect Syntax (C)\nDESCRIPTION: Defines the syntax of the SDL_SetWindowMouseRect function. This function confines the mouse cursor to a defined rectangle within a specified SDL window. It requires a pointer to an SDL_Window and a pointer to an SDL_Rect representing the confinement area, or NULL to remove any existing confinement.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowMouseRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowMouseRect(SDL_Window *window, const SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: Setting Global Log Priority with SDL_LogSetAllPriority in C\nDESCRIPTION: This code snippet demonstrates how to set the global log priority to SDL_LOG_PRIORITY_WARN using the SDL_LogSetAllPriority function. This means that only log messages with a priority of WARN or higher will be outputted. This is useful for debugging SDL applications.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/CategoryLog.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n[SDL_LogSetAllPriority](SDL_LogSetAllPriority)([SDL_LOG_PRIORITY_WARN](SDL_LOG_PRIORITY_WARN));\n```\n\n----------------------------------------\n\nTITLE: TTF Font Copying and Properties Functions in C\nDESCRIPTION: Functions for creating copies of existing fonts and accessing their properties. Allows duplicating a TTF_Font object and retrieving its associated SDL_PropertiesID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nTTF_Font * TTF_CopyFont(TTF_Font *existing_font);                                                                                          // Create a copy of an existing font.\nSDL_PropertiesID TTF_GetFontProperties(TTF_Font *font);                                                                                    // Get the properties associated with a font.\nUint32 TTF_GetFontGeneration(TTF_Font *font);                                                                                              // Get the font generation.\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Instance ID with SDL_GetGamepadID in C\nDESCRIPTION: This code snippet demonstrates how to retrieve the instance ID of an opened gamepad using the SDL_GetGamepadID function in SDL3. It requires a valid SDL_Gamepad pointer obtained from SDL_OpenGamepad(). The function returns the SDL_JoystickID, which is the instance ID of the gamepad, or 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_JoystickID SDL_GetGamepadID(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasWindowSurface Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_HasWindowSurface function in C. It takes an SDL_Window pointer as input and returns an SDL_bool value indicating whether the window has a surface associated with it. The function is available since SDL 2.28.0 and requires SDL_video.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasWindowSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasWindowSurface(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_TRIANGLE in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HAPTIC_TRIANGLE macro. It is a bit flag used to specify a triangular wave effect for haptic feedback using the SDL_HapticPeriodic function. The macro is defined as a bitwise left shift of 1 by 3 bits, resulting in the value 8.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_TRIANGLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_TRIANGLE   (1u<<3)\n```\n\n----------------------------------------\n\nTITLE: Setting the Render Target in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_SetRenderTarget function.  It takes an SDL_Renderer pointer and an SDL_Texture pointer as input. The texture should be created with the SDL_TEXTUREACCESS_TARGET flag to be a valid render target.  A NULL texture pointer resets the render target to the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetRenderTarget.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetRenderTarget(SDL_Renderer *renderer, SDL_Texture *texture);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FlipMode Enum in C\nDESCRIPTION: This code snippet defines the `SDL_FlipMode` enumeration, which specifies options for flipping surfaces. The available options are `SDL_FLIP_NONE`, `SDL_FLIP_HORIZONTAL`, and `SDL_FLIP_VERTICAL`. This enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlipMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_FlipMode\n{\n    SDL_FLIP_NONE,          /**< Do not flip */\n    SDL_FLIP_HORIZONTAL,    /**< flip horizontally */\n    SDL_FLIP_VERTICAL       /**< flip vertically */\n} SDL_FlipMode;\n```\n\n----------------------------------------\n\nTITLE: SDL_acos Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_acos function in C. It takes a double as input, representing a floating-point value in radians, and returns a double, which is the arc cosine of the input value. The function is available since SDL 2.0.2 and is defined in SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_acos.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_acos(double x);\n```\n\n----------------------------------------\n\nTITLE: Mix_RegisterEffect Syntax in C\nDESCRIPTION: The `Mix_RegisterEffect` function registers a callback function to be applied as an audio effect to a specific channel. The `chan` parameter specifies the channel, `f` is the effect callback function, `d` is the done callback function, and `arg` is an argument passed to the callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_RegisterEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_RegisterEffect(int chan, Mix_EffectFunc_t f, Mix_EffectDone_t d, void *arg);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowData Function Signature in C\nDESCRIPTION: This code snippet shows the function signature for SDL_SetWindowData, which associates an arbitrary named pointer with a window. It takes an SDL_Window pointer, a name string, and a userdata pointer as input. It returns the previous value associated with the name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_SetWindowData(SDL_Window * window,\n                        const char *name,\n                        void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Clearing all hints with SDL_ClearHints in C\nDESCRIPTION: The SDL_ClearHints function clears all hints. It's automatically called during SDL_Quit() and deletes all callbacks without calling them and frees all memory associated with hints. This function will be removed from the API the next time we rev the ABI.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ClearHints.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ClearHints(void);\n```\n\n----------------------------------------\n\nTITLE: Get Mouse Focus - SDL2 - C\nDESCRIPTION: This snippet shows the syntax for the `SDL_GetMouseFocus` function. The function takes no arguments and returns a pointer to an `SDL_Window` object, which represents the window with current mouse focus. The function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetMouseFocus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetMouseFocus(void);\n```\n\n----------------------------------------\n\nTITLE: Get Touch Device Name - SDL3 - C\nDESCRIPTION: This function retrieves the name of a touch device as reported by the driver, using its SDL_TouchID. It returns a const char* representing the device name or NULL on failure. The function requires the SDL_TouchID of the device as input and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTouchDeviceName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetTouchDeviceName(SDL_TouchID touchID);\n```\n\n----------------------------------------\n\nTITLE: Get D3D9 Device from SDL Renderer (C)\nDESCRIPTION: Retrieves the IDirect3DDevice9 associated with an SDL_Renderer.  The renderer parameter specifies the SDL renderer to query. Returns the D3D9 device if the renderer is D3D9-based, otherwise NULL.  Remember to release the returned device when finished to avoid resource leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetD3D9Device.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIDirect3DDevice9* SDL_RenderGetD3D9Device(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: CMake toolchain file definition for Android\nDESCRIPTION: Defines a CMake toolchain file for Android cross-compilation. Specifies the system name as Linux, forces the C compiler to the Android GCC toolchain, and sets a variable to indicate that the build is for Android.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\n# CMake toolchain file\nSET(CMAKE_SYSTEM_NAME Linux)  # Tell CMake we're cross-compiling\ninclude(CMakeForceCompiler)\n# Prefix detection only works with compiler id \"GNU\"\nCMAKE_FORCE_C_COMPILER(arm-linux-androideabi-gcc GNU)\nSET(ANDROID TRUE)\n```\n\n----------------------------------------\n\nTITLE: Mix_GroupChannel Syntax in C\nDESCRIPTION: This is the function signature for Mix_GroupChannel, which assigns a tag to a specific audio channel within SDL_mixer.  It accepts an integer representing the channel to tag and an integer representing the tag itself. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GroupChannel.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_GroupChannel(int which, int tag);\n```\n\n----------------------------------------\n\nTITLE: Get System RAM in MiB using SDL_GetSystemRAM (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetSystemRAM function in C. The function takes no arguments and returns an integer representing the amount of RAM configured in the system, measured in MiB. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSystemRAM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetSystemRAM(void);\n```\n\n----------------------------------------\n\nTITLE: Standard C main function\nDESCRIPTION: This is a basic C program's main function, serving as the entry point. It prints \"Hello world!\" to the console and returns 0, indicating successful execution. This is the standard main function used when SDL handles platform-specific entry points automatically.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/main-functions.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint main(int argc, char **argv)\n{\n    printf(\"Hello world!\\n\");\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRenderMetalCommandEncoder Syntax in C\nDESCRIPTION: Retrieves the Metal command encoder for the current frame using SDL_GetRenderMetalCommandEncoder. The renderer parameter specifies the renderer to query. The return value is a void pointer that can be cast to id<MTLRenderCommandEncoder> on success, or NULL if the renderer is not a Metal renderer or an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderMetalCommandEncoder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_GetRenderMetalCommandEncoder(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnionFRect Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UnionFRect function in C. This function calculates the union of two SDL_FRect structures and stores the result in another SDL_FRect structure. It requires pointers to the two input rectangles (A and B) and a pointer to the rectangle where the union will be stored (result).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnionFRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnionFRect(const SDL_FRect * A,\n                    const SDL_FRect * B,\n                    SDL_FRect * result);\n```\n\n----------------------------------------\n\nTITLE: Define Joystick Hint Macro in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES macro, which represents a hint for identifying joysticks with axes centered at zero. The hint value is a string containing a comma-separated list of USB VID/PID pairs in hexadecimal format or a filename prefixed with @.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES \"SDL_JOYSTICK_ZERO_CENTERED_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Getting GPU Text Engine Winding C\nDESCRIPTION: This function gets the winding order of the vertices returned by TTF_GetGPUTextDrawData for a particular GPU text engine. It requires a pointer to the TTF_TextEngine. Returns a TTF_GPUTextEngineWinding value representing the current winding order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_55\n\nLANGUAGE: C\nCODE:\n```\nTTF_GPUTextEngineWinding TTF_GetGPUTextEngineWinding(const TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Get IOStream Status in SDL3\nDESCRIPTION: This C code snippet shows the syntax for the SDL_GetIOStatus function, which is used to query the status of an SDL_IOStream. The function takes an SDL_IOStream pointer as input and returns an SDL_IOStatus enum value representing the current status of the stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetIOStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_IOStatus SDL_GetIOStatus(SDL_IOStream *context);\n```\n\n----------------------------------------\n\nTITLE: Destroying a Condition Variable in SDL3 (C)\nDESCRIPTION: This snippet shows the syntax for destroying a condition variable using SDL_DestroyCondition.  It takes a pointer to the SDL_Condition variable to be destroyed as its only argument. The function is available since SDL 3.2.0 and requires including SDL3/SDL_mutex.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyCondition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyCondition(SDL_Condition *cond);\n```\n\n----------------------------------------\n\nTITLE: SDL_CloseSensor Syntax (C)\nDESCRIPTION: Closes a sensor that was previously opened using SDL_OpenSensor(). This function releases the resources associated with the specified sensor. The function takes a pointer to the SDL_Sensor object as input and returns void. The sensor parameter represents the sensor to be closed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseSensor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CloseSensor(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: Check for AVX CPU Feature Support in SDL2 (C)\nDESCRIPTION: This C code snippet shows the syntax for the SDL_HasAVX function, which determines whether the CPU supports AVX features. It takes no arguments and returns an SDL_bool value indicating the presence of AVX support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasAVX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasAVX(void);\n```\n\n----------------------------------------\n\nTITLE: Creating an SDL Texture from an SDL Surface in C\nDESCRIPTION: This snippet demonstrates creating an SDL texture from an existing SDL surface using SDL_CreateTextureFromSurface. It simplifies the process of converting a surface loaded from an image into a texture that can be rendered efficiently. After creating the texture, the original SDL surface can be freed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nsdlTexture = SDL_CreateTextureFromSurface(sdlRenderer, mySurface);\n```\n\n----------------------------------------\n\nTITLE: Reset Log Priorities in SDL3 (C)\nDESCRIPTION: Resets all log priorities to their default values. This function is automatically called by SDL_Quit(). It is thread-safe and available since SDL 3.2.0. No parameters are required; the function operates globally on SDL's logging system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ResetLogPriorities.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ResetLogPriorities(void);\n```\n\n----------------------------------------\n\nTITLE: Get Glyph Image by Index C\nDESCRIPTION: This function gets the pixel image for a character index in the font. It requires a valid TTF_Font, the glyph index, and a pointer to a TTF_ImageType to store image format. Returns an SDL_Surface with the glyph image or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_51\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_GetGlyphImageForIndex(TTF_Font *font, Uint32 glyph_index, TTF_ImageType *image_type);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Direction in SDL_ttf (C)\nDESCRIPTION: This snippet showcases the syntax of the TTF_SetFontDirection function, used to set the text direction for a specified TTF_Font. The function takes a TTF_Font pointer and a TTF_Direction as input. Returns true on success or false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontDirection.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_SetFontDirection(TTF_Font *font, TTF_Direction direction);\n```\n\n----------------------------------------\n\nTITLE: Set Text Color C\nDESCRIPTION: This function sets the color of a text object using 8-bit color components. It takes a TTF_Text pointer and red, green, blue, and alpha color values as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_92\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextColor(TTF_Text *text, Uint8 r, Uint8 g, Uint8 b, Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: Setting Text String with SDL_ttf in C\nDESCRIPTION: This function sets the UTF-8 text used by a text object. It requires a `TTF_Text` pointer, a pointer to the UTF-8 string, and the length of the string. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_76\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextString(TTF_Text *text, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Audio Devices C\nDESCRIPTION: Retrieves the number of audio devices available for either playback (iscapture=0) or recording (iscapture!=0). The function returns -1 if an explicit list of devices can't be determined. This function is available since SDL 2.0.0 and requires the audio subsystem to be initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumAudioDevices.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumAudioDevices(int iscapture);\n```\n\n----------------------------------------\n\nTITLE: SDL_DECLSPEC Macro Definition in C\nDESCRIPTION: Defines the SDL_DECLSPEC macro, which is used to mark a symbol as part of the public SDL API. This macro uses the __attribute__((visibility(\"default\"))) attribute to ensure the symbol is visible outside of the current compilation unit, which is typically required for functions in shared libraries.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DECLSPEC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_DECLSPEC __attribute__ ((visibility(\"default\")))\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_IME_SHOW_UI Macro in C\nDESCRIPTION: This code snippet defines the SDL_HINT_IME_SHOW_UI macro as a string literal. This macro is used as the key when setting the hint using SDL_SetHint. The value associated with this hint controls whether the Input Method Editor (IME) displays native UI components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_IME_SHOW_UI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_IME_SHOW_UI \"SDL_IME_SHOW_UI\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerSetLED Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerSetLED function, which allows to update a game controller's LED color. It takes a game controller, and RGB color values as input parameters. Returns 0 on success and -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerSetLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerSetLED(SDL_GameController *gamecontroller, Uint8 red, Uint8 green, Uint8 blue);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderGeometry Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_RenderGeometry function in C. It takes a renderer, texture, vertices, number of vertices, indices, and number of indices as input and returns an integer indicating success or failure. The function is available since SDL 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGeometry.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderGeometry(SDL_Renderer *renderer,\n                       SDL_Texture *texture,\n                       const SDL_Vertex *vertices, int num_vertices,\n                       const int *indices, int num_indices);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Chunk Decoders with Mix_GetNumChunkDecoders in C\nDESCRIPTION: Retrieves the number of chunk decoders available in the current SDL_mixer build. This function requires Mix_OpenAudio to be successfully called beforehand, as decoders are activated at device open time. The return value indicates how many decoders are available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetNumChunkDecoders.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GetNumChunkDecoders(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_TrayEntryFlags Macro Definitions C\nDESCRIPTION: Defines several macros for use with the SDL_TrayEntryFlags. These macros represent different options for system tray entries, such as `SDL_TRAYENTRY_BUTTON`, `SDL_TRAYENTRY_CHECKBOX`, `SDL_TRAYENTRY_SUBMENU`, `SDL_TRAYENTRY_DISABLED`, and `SDL_TRAYENTRY_CHECKED`.  They are used to specify the behavior and appearance of each tray entry. The hexadecimal values assigned to each macro are used for bitwise operations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TrayEntryFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TRAYENTRY_BUTTON      0x00000001u /**< Make the entry a simple button. Required. */\n#define SDL_TRAYENTRY_CHECKBOX    0x00000002u /**< Make the entry a checkbox. Required. */\n#define SDL_TRAYENTRY_SUBMENU     0x00000004u /**< Prepare the entry to have a submenu. Required */\n#define SDL_TRAYENTRY_DISABLED    0x80000000u /**< Make the entry disabled. Optional. */\n#define SDL_TRAYENTRY_CHECKED     0x40000000u /**< Make the entry checked. This is valid only for checkboxes. Optional. */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_THROTTLE_DEVICES in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_THROTTLE_DEVICES macro in C. It is used to specify a comma-separated list of USB VID/PID pairs in hexadecimal form for throttle style controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_THROTTLE_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES \"SDL_JOYSTICK_THROTTLE_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_TICKS_PASSED Macro in C\nDESCRIPTION: This macro compares two 32-bit SDL ticks values A and B and returns true if A has passed B. It uses a signed 32-bit integer comparison to handle counter wrapping in SDL_GetTicks().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TICKS_PASSED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TICKS_PASSED(A, B)  ((Sint32)((B) - (A)) <= 0)\n```\n\n----------------------------------------\n\nTITLE: SDL_SendJoystickEffect Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SendJoystickEffect function, which sends a joystick-specific effect packet. It requires an SDL_Joystick pointer, a void pointer to the effect data, and the size of the data in bytes. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SendJoystickEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SendJoystickEffect(SDL_Joystick *joystick, const void *data, int size);\n```\n\n----------------------------------------\n\nTITLE: Associate User Data with SDL Texture (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetTextureUserData function. It takes an SDL_Texture pointer and a void pointer as input, associating the user-provided data with the texture.  The function returns an integer indicating success (0) or failure (-1).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetTextureUserData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetTextureUserData(SDL_Texture * texture,\n                           void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_ResetAssertionReport Syntax\nDESCRIPTION: Defines the syntax for the SDL_ResetAssertionReport function, which takes no arguments and returns void. It clears the internal list of failed assertions in SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ResetAssertionReport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ResetAssertionReport(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_MapSurfaceRGBA Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_MapSurfaceRGBA function. It takes an SDL_Surface pointer and four Uint8 values representing the red, green, blue, and alpha components of a color. It returns a Uint32 pixel value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MapSurfaceRGBA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_MapSurfaceRGBA(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: Getting Wrapped String Size C\nDESCRIPTION: This function calculates the dimensions of a word-wrapped rendered string of UTF-8 text. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, the wrap width, and pointers to integers to store the width and height. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetStringSizeWrapped(TTF_Font *font, const char *text, size_t length, int wrap_width, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_MessageBoxButtonFlags Type Definition in C\nDESCRIPTION: Defines the SDL_MessageBoxButtonFlags type as a Uint32, used to represent flags for message box button configuration. This type is utilized to set button behaviors, such as specifying the default button when the return or escape key is pressed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxButtonFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_MessageBoxButtonFlags;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_AIX Macro in C\nDESCRIPTION: Defines the SDL_PLATFORM_AIX preprocessor macro. This macro is set to 1 when the code is compiled for the AIX operating system. It allows developers to write platform-specific code that only executes on AIX systems. This macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_AIX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_AIX 1\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_VIRTUAL_JOYSTICK_DESC_VERSION in C\nDESCRIPTION: This code snippet defines the SDL_VIRTUAL_JOYSTICK_DESC_VERSION macro, which is used to specify the version of the SDL_VirtualJoystickDesc structure. This is used for version checking and compatibility when working with virtual joysticks. The value `1` represents the current version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_VIRTUAL_JOYSTICK_DESC_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VIRTUAL_JOYSTICK_DESC_VERSION   1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_WHEEL_DEVICES in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_WHEEL_DEVICES macro, which is a string literal used as the key for accessing the joystick wheel devices hint. This hint allows specifying a comma-separated list of USB VID/PID pairs for wheel-style controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_WHEEL_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_WHEEL_DEVICES \"SDL_JOYSTICK_WHEEL_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ROG_GAMEPAD_MICE C\nDESCRIPTION: Defines the SDL_HINT_ROG_GAMEPAD_MICE hint as a string literal. This hint is used to specify a comma-separated list of USB VID/PID pairs (in hexadecimal format) for ROG gamepad capable mice. This hint must be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ROG_GAMEPAD_MICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ROG_GAMEPAD_MICE \"SDL_ROG_GAMEPAD_MICE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR hint as a string literal. This hint controls whether SDL3 is allowed to use the libdecor Wayland backend when the xdg-decoration protocol is unavailable. The hint must be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR \"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR\"\n```\n\n----------------------------------------\n\nTITLE: Get Audio Recording Devices in SDL3 (C)\nDESCRIPTION: Retrieves a list of currently connected audio recording devices using SDL3. The function populates a provided pointer with the number of devices and returns a null-terminated array of device IDs. The returned array must be freed using SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioRecordingDevices.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioDeviceID * SDL_GetAudioRecordingDevices(int *count);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_INERTIA macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_INERTIA macro as a bit flag. It indicates that a haptic device supports inertia effects, simulating resistance to changes in motion using axes acceleration. The value is used in conjunction with SDL_HapticCondition.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_INERTIA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_INERTIA    (1u<<9)\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickGetBall Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_JoystickGetBall function. This function retrieves the ball axis change since the last poll, for a given joystick and ball index, storing the results in provided dx and dy pointers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetBall.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickGetBall(SDL_Joystick *joystick,\n                        int ball, int *dx, int *dy);\n```\n\n----------------------------------------\n\nTITLE: Emscripten CMake Build Configuration\nDESCRIPTION: These bash commands create a build directory, navigate into it, use `emcmake` to configure a CMake project, and then builds the project using emmake.  `emcmake` is used to setup CMake for Emscripten.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmkdir build\ncd build\nemcmake cmake ..\nemmake make -j4\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontStyleName Function\nDESCRIPTION: Queries a font's style name. Returns a const char* to the style name string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_40\n\nLANGUAGE: C\nCODE:\n```\nconst char * TTF_GetFontStyleName(const TTF_Font *font);                                                                                   // Query a font's style name.\n```\n\n----------------------------------------\n\nTITLE: SDL_WasInit Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_WasInit function in C. It takes a Uint32 flags parameter, which can be 0 to get a mask of all initialized subsystems or a specific flag to check the status of a particular subsystem. It returns a Uint32 representing the initialization status.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WasInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_WasInit(Uint32 flags);\n```\n\n----------------------------------------\n\nTITLE: Mix_FadeInMusicPos Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_FadeInMusicPos function in C.  It takes a Mix_Music pointer, the number of loops, the fade-in time in milliseconds, and the start position in seconds as parameters.  The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadeInMusicPos.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_FadeInMusicPos(Mix_Music *music, int loops, int ms, double position);\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicInt Structure Definition in C\nDESCRIPTION: Defines the structure SDL_AtomicInt, which contains a single integer value. This structure is used for performing atomic operations, ensuring thread safety when modifying the integer value from multiple threads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AtomicInt.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_AtomicInt { int value; } SDL_AtomicInt;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_RAMP in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_RAMP macro, which is used to indicate that a haptic device supports the ramp effect. The macro is defined as a bit flag (1u<<6).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_RAMP.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HAPTIC_RAMP         (1u<<6)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenGL Swap Interval with SDL_GL_SetSwapInterval in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GL_SetSwapInterval function in C to set the swap interval for the current OpenGL context. The interval parameter controls whether updates are immediate, synchronized with the vertical retrace, or use adaptive vsync.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_SetSwapInterval.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GL_SetSwapInterval(int interval);\n```\n\n----------------------------------------\n\nTITLE: Get Texel Block Size with SDL_GPUTextureFormatTexelBlockSize in C\nDESCRIPTION: Retrieves the texel block size of a specified SDL_GPUTextureFormat. The function takes the texture format as input and returns the size as a Uint32. This is useful when working with textures in SDL3 and needing to understand their memory layout.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureFormatTexelBlockSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GPUTextureFormatTexelBlockSize(\n    SDL_GPUTextureFormat format);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE in C\nDESCRIPTION: Defines the SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE macro, which is a string constant used as a key for setting the hint that controls the Metal render driver's preference for a low-power device. The value of the hint should be set before creating a renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE \"SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: Setting Log Priority for All Categories in C\nDESCRIPTION: Sets the priority for all SDL log categories to a specified level. This function takes an SDL_LogPriority enum value as input, which represents the desired log priority level. The function does not return any value and modifies the global SDL log configuration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogSetAllPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogSetAllPriority(SDL_LogPriority priority);\n```\n\n----------------------------------------\n\nTITLE: Convert SDL_GUID to String in C\nDESCRIPTION: Converts a given SDL_GUID to its ASCII string representation and stores it in the provided buffer. Requires the SDL3 library. The buffer 'pszGUID' must be at least 33 bytes in size to accommodate the entire string representation including the null terminator.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GUIDToString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GUIDToString(SDL_GUID guid, char *pszGUID, int cbGUID);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad GUID by Instance ID in SDL3 (C)\nDESCRIPTION: Retrieves the implementation-dependent GUID of a gamepad. Takes an SDL_JoystickID as input, representing the instance ID of the gamepad. Returns an SDL_GUID representing the gamepad's GUID, or a zero GUID if the instance ID is invalid. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadGUIDForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GUID SDL_GetGamepadGUIDForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Font Faces - SDL_ttf - C\nDESCRIPTION: This function retrieves the number of font faces within a specified TTF_Font object. It takes a pointer to the TTF_Font as input and returns an integer representing the count of font faces. This information is essential for understanding the structure of the font file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetNumFontFaces.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetNumFontFaces(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Fallback Functions in C\nDESCRIPTION: Functions for managing fallback fonts for a given font. Allows adding, removing, and clearing fallback fonts to handle characters not supported by the primary font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_AddFallbackFont(TTF_Font *font, TTF_Font *fallback);                                                                              // Add a fallback font.\nvoid TTF_RemoveFallbackFont(TTF_Font *font, TTF_Font *fallback);                                                                           // Remove a fallback font.\nvoid TTF_ClearFallbackFonts(TTF_Font *font);                                                                                               // Remove all fallback fonts.\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Color Structure in C\nDESCRIPTION: This code snippet shows the definition of the SDL_Color structure in C. It consists of four Uint8 members: r, g, b, and a, representing the red, green, blue, and alpha components of a color. The structure is used to represent colors in various SDL functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Color.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Color\n{\n    Uint8 r;\n    Uint8 g;\n    Uint8 b;\n    Uint8 a;\n} SDL_Color;\n```\n\n----------------------------------------\n\nTITLE: Query Music Volume in SDL_mixer (C)\nDESCRIPTION: Retrieves the current volume of a music object in SDL_mixer. The function takes a Mix_Music pointer as input and returns an integer representing the volume, which ranges from 0 to MIX_MAX_VOLUME (128). SDL_mixer 2.6.0 or later is required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicVolume.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GetMusicVolume(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadS64BE Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadS64BE function. This function reads a 64-bit big-endian integer from an SDL_IOStream. It takes a pointer to the SDL_IOStream and a pointer to a Sint64 to store the read value. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadS64BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadS64BE(SDL_IOStream *src, Sint64 *value);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_SAWTOOTHUP in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_SAWTOOTHUP macro as a bit flag. It is used to specify a sawtooth up waveform for periodic haptic effects in the SDL library. The macro expands to the unsigned integer value 1 shifted left by 4 bits.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_SAWTOOTHUP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SAWTOOTHUP (1u<<4)\n```\n\n----------------------------------------\n\nTITLE: Mix_Resume Syntax in C\nDESCRIPTION: This C code snippet shows the syntax of the Mix_Resume function from SDL_mixer, used to resume a paused audio channel. It takes an integer 'channel' as input, which is the channel ID to resume, or -1 to resume all paused channels. It returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Resume.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_Resume(int channel);\n```\n\n----------------------------------------\n\nTITLE: Loading PNM Image from SDL_RWops in C\nDESCRIPTION: Loads a PNM image directly from an SDL_RWops stream. This function bypasses SDL_image's format detection, assuming the input is a valid PNM image. Returns an SDL_Surface pointer on success, or NULL on failure. Requires SDL_image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadPNM_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadPNM_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HapticDirectionType in C\nDESCRIPTION: Defines SDL_HapticDirectionType as an alias for Uint8, representing the type of coordinates used for haptic direction. This definition is found in the SDL3/SDL_haptic.h header file. This type is used to specify whether a haptic effect's direction is represented using Cartesian, polar, or spherical coordinates.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticDirectionType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint8 SDL_HapticDirectionType;\n```\n\n----------------------------------------\n\nTITLE: Appending Text String with SDL_ttf in C\nDESCRIPTION: This function appends UTF-8 text to a text object. It requires a `TTF_Text` pointer, a pointer to the UTF-8 string, and the length of the string. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_78\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_AppendTextString(TTF_Text *text, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteBE64 Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_WriteBE64 function in C. It takes an SDL_RWops pointer and a Uint64 value as input, writing the 64-bit value in big-endian format to the stream. The function returns 1 on success and 0 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WriteBE64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteBE64(SDL_RWops * dst, Uint64 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAudioFormatName Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAudioFormatName function. It takes an SDL_AudioFormat as input and returns a const char* representing the human-readable name of the audio format. The function is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioFormatName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetAudioFormatName(SDL_AudioFormat format);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES macro, which is used to set the hint for specifying arcade stick devices. The hint value is a string containing a comma-separated list of USB VID/PID pairs in hexadecimal form.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES \"SDL_JOYSTICK_ARCADESTICK_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR in SDL\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR hint macro used to control X11 compositor bypassing. Setting the hint to \"0\" disables _NET_WM_BYPASS_COMPOSITOR, while setting it to \"1\" enables it. By default, SDL uses _NET_WM_BYPASS_COMPOSITOR.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR \"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\"\n```\n\n----------------------------------------\n\nTITLE: Render Shaded Glyph C\nDESCRIPTION: This function renders a single UNICODE codepoint at high quality to a new 8-bit surface. It takes a TTF_Font, the UNICODE codepoint, an SDL_Color for the foreground, and an SDL_Color for the background. It returns an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_62\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Shaded(TTF_Font *font, Uint32 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateWindowSurfaceRects Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UpdateWindowSurfaceRects function in C. This function copies areas of the window surface to the screen, taking a window pointer, an array of rectangles, and the number of rectangles as input. It returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UpdateWindowSurfaceRects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UpdateWindowSurfaceRects(SDL_Window * window,\n                                 const SDL_Rect * rects,\n                                 int numrects);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Type in SDL3 (C)\nDESCRIPTION: This function retrieves the type of an opened gamepad as an SDL_GamepadType. It takes an SDL_Gamepad pointer as input and returns the corresponding gamepad type, or SDL_GAMEPAD_TYPE_UNKNOWN if the type is not available. This function requires SDL3 and the SDL_gamepad.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadType SDL_GetGamepadType(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_WriteToStreamSocket Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDLNet_WriteToStreamSocket function in C. It takes a stream socket, a buffer of data, and the buffer's length as input and returns a boolean indicating success or failure. Failure can be further investigated using SDL_GetError().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_WriteToStreamSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDLNet_WriteToStreamSocket(SDLNet_StreamSocket *sock, const void *buf, int buflen);\n```\n\n----------------------------------------\n\nTITLE: Getting Text Size with SDL_ttf in C\nDESCRIPTION: This function retrieves the width and height of a text object. It requires a `TTF_Text` pointer and pointers to integers to store the width and height. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_80\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSize(TTF_Text *text, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: Determine if SDL_AudioFormat is Signed (C)\nDESCRIPTION: This macro determines if an SDL_AudioFormat value represents signed audio data. It takes an SDL_AudioFormat value as input and returns non-zero if the format is signed, and zero otherwise. This macro is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_ISSIGNED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_ISSIGNED(x)        ((x) & SDL_AUDIO_MASK_SIGNED)\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawPointF Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RenderDrawPointF function in C. It takes a renderer, x coordinate, and y coordinate as input and returns an integer representing the success or failure of the operation. The function draws a point at the specified floating-point coordinates on the rendering target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawPointF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawPointF(SDL_Renderer * renderer,\n                         float x, float y);\n```\n\n----------------------------------------\n\nTITLE: SDL 2.0 Clearing the Screen\nDESCRIPTION: This code snippet demonstrates how to clear the screen to black in SDL 2.0 using the rendering API.  It sets the draw color, clears the renderer, and presents the result to the screen.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nSDL_SetRenderDrawColor(sdlRenderer, 0, 0, 0, 255);\nSDL_RenderClear(sdlRenderer);\nSDL_RenderPresent(sdlRenderer);\n```\n\n----------------------------------------\n\nTITLE: Adding Planar Audio Data to an Audio Stream in C\nDESCRIPTION: Adds audio data to the specified SDL_AudioStream, where each audio channel is provided in a separate array. The function interleaves the data and queues it for playback. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PutAudioStreamPlanarData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PutAudioStreamPlanarData(SDL_AudioStream *stream, const void * const *channel_buffers, int num_samples);\n```\n\n----------------------------------------\n\nTITLE: Get Clip Rectangle SDL2 (C)\nDESCRIPTION: Retrieves the clip rectangle for the current render target using SDL_RenderGetClipRect. The function takes an SDL_Renderer pointer and an SDL_Rect pointer as input. The SDL_Rect will be populated with the clipping area, or an empty rectangle if clipping is disabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetClipRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RenderGetClipRect(SDL_Renderer * renderer,\n                           SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: Setting GPU Blend Constants in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for setting GPU blend constants using the SDL_SetGPUBlendConstants function. It requires a render pass handle (SDL_GPURenderPass*) and an SDL_FColor structure representing the blend constant color.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPUBlendConstants.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetGPUBlendConstants(\n    SDL_GPURenderPass *render_pass,\n    SDL_FColor blend_constants);\n\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioCallback Definition in C\nDESCRIPTION: This code snippet defines the SDL_AudioCallback function pointer type in C. The callback is invoked when the audio device requires additional data. It receives a user-defined pointer (`userdata`), a pointer to the audio data buffer (`stream`), and the length of the buffer (`len`).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL * SDL_AudioCallback) (void *userdata, Uint8 * stream, int len);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC hint as a string literal. This hint controls whether the HIDAPI driver is used for Nintendo Online classic controllers. Setting this hint before initializing joysticks and gamepads is recommended.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC \"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC\"\n```\n\n----------------------------------------\n\nTITLE: SDL_MasksToPixelFormatEnum Syntax in C\nDESCRIPTION: Defines the syntax for SDL_MasksToPixelFormatEnum, a function that converts bits per pixel (bpp) and RGBA masks to a pixel format enum. The function takes the bpp and RGBA masks as input and returns a Uint32 representing the pixel format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MasksToPixelFormatEnum.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_MasksToPixelFormatEnum(int bpp,\n                                  Uint32 Rmask,\n                                  Uint32 Gmask,\n                                  Uint32 Bmask,\n                                  Uint32 Amask);\n```\n\n----------------------------------------\n\nTITLE: Getting Glyph Kerning C\nDESCRIPTION: This function queries the kerning size between the glyphs of two UNICODE codepoints. It requires a valid TTF_Font pointer, Uint32 values representing the previous and current codepoints, and a pointer to an integer to store the kerning value. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetGlyphKerning(TTF_Font *font, Uint32 previous_ch, Uint32 ch, int *kerning);\n```\n\n----------------------------------------\n\nTITLE: Get Touch Finger - SDL2 - C\nDESCRIPTION: Retrieves the finger object for a given touch device ID and finger index. It takes a touchID of type SDL_TouchID and an index (int) as input. Returns a pointer to an SDL_Finger object or NULL if no finger is found for the given ID and index. The returned finger object is owned by SDL and should not be deallocated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetTouchFinger.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Finger * SDL_GetTouchFinger(SDL_TouchID touchID, int index);\n```\n\n----------------------------------------\n\nTITLE: SDL_MemoryBarrierRelease Macro Definition in C\nDESCRIPTION: Defines the SDL_MemoryBarrierRelease macro, which calls the SDL_MemoryBarrierReleaseFunction. This macro provides a platform-independent way to insert a memory release barrier, using compiler intrinsics or inline assembly when possible. It's crucial for thread synchronization to prevent reordering of memory operations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MemoryBarrierRelease.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MemoryBarrierRelease() SDL_MemoryBarrierReleaseFunction()\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawPoints Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderDrawPoints function. This function draws multiple points to the current rendering target using the specified renderer and array of SDL_Point structures. It requires an SDL_Renderer pointer, a pointer to an array of SDL_Point structures, and the number of points to draw.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawPoints.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawPoints(SDL_Renderer * renderer,\n                         const SDL_Point * points,\n                         int count);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap16BE Macro Definition\nDESCRIPTION: Defines the SDL_Swap16BE macro which swaps a 16-bit value from big-endian to native byte order. It uses the SwapOnlyIfNecessary macro internally. The input value `x` is in big-endian format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap16BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_Swap16BE(x) SwapOnlyIfNecessary(x)\n```\n\n----------------------------------------\n\nTITLE: SDL_RectEmptyFloat Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_RectEmptyFloat function. It takes a pointer to a constant SDL_FRect structure as input and returns a boolean value indicating whether the rectangle is empty (either NULL or having a non-positive width or height).  It is a forced-inline function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RectEmptyFloat.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_RectEmptyFloat(const SDL_FRect *r);\n```\n\n----------------------------------------\n\nTITLE: Opening a Font with TTF_OpenFont in C\nDESCRIPTION: Opens a font file at the specified path with the given point size. Returns a pointer to the created TTF_Font structure, or NULL if an error occurred. Requires SDL_ttf library to be initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_OpenFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFont(const char *file, int ptsize);\n```\n\n----------------------------------------\n\nTITLE: Using SDL_PRIu32 with SDL_Log in C\nDESCRIPTION: Illustrates how to use the SDL_PRIu32 macro within an SDL_Log statement. It demonstrates how to correctly format and print a Uint32 variable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIu32.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRIu32 \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_XBOXSERIES in C\nDESCRIPTION: This code snippet demonstrates the definition of the SDL_PLATFORM_XBOXSERIES macro. It is a preprocessor directive that sets the value of SDL_PLATFORM_XBOXSERIES to 1 when compiling for the Xbox Series platform. This allows for platform-specific code execution within an SDL application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_XBOXSERIES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_XBOXSERIES 1\n```\n\n----------------------------------------\n\nTITLE: Query Font Hinting in SDL_ttf (C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetFontHinting function, which retrieves the current FreeType hinter setting for a given font. The function takes a pointer to a TTF_Font structure as input and returns an integer representing the hinting mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GetFontHinting.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontHinting(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ScaleMode enum in C\nDESCRIPTION: This code snippet defines the SDL_ScaleMode enumeration in C.  It specifies the different scaling modes available: SDL_SCALEMODE_NEAREST for nearest pixel sampling, SDL_SCALEMODE_LINEAR for linear filtering, and SDL_SCALEMODE_PIXELART for nearest pixel sampling with improved scaling for pixel art.  It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ScaleMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ScaleMode\n{\n    SDL_SCALEMODE_INVALID = -1,\n    SDL_SCALEMODE_NEAREST,  /**< nearest pixel sampling */\n    SDL_SCALEMODE_LINEAR,   /**< linear filtering */\n    SDL_SCALEMODE_PIXELART  /**< nearest pixel sampling with improved scaling for pixel art */\n} SDL_ScaleMode;\n```\n\n----------------------------------------\n\nTITLE: SDL_wcstol Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_wcstol function in C. It takes a wide string, a pointer to a wide string pointer, and an integer base as input, and returns a long.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcstol.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nlong SDL_wcstol(const wchar_t *str, wchar_t **endp, int base);\n```\n\n----------------------------------------\n\nTITLE: SDL_fabs Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_fabs function, which calculates the absolute value of a double-precision floating-point number. It takes a double as input and returns its absolute value as a double.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_fabs.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_fabs(double x);\n```\n\n----------------------------------------\n\nTITLE: SDL_wcsncmp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_wcsncmp function, which compares two wide strings (`str1` and `str2`) up to a specified maximum length (`maxlen`). It requires the SDL3/SDL_stdinc.h header file. Returns an integer indicating the comparison result.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcsncmp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_wcsncmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateNVTexture Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UpdateNVTexture function, used to update a portion of an NV12 or NV21 texture with new pixel data. It takes the texture to update, the rectangle to update, the Y plane data, the Y plane pitch, the UV plane data, and the UV plane pitch as input. Returns 0 on success and -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UpdateNVTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UpdateNVTexture(SDL_Texture * texture,\n                         const SDL_Rect * rect,\n                         const Uint8 *Yplane, int Ypitch,\n                         const Uint8 *UVplane, int UVpitch);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_BMP_SAVE_LEGACY_FORMAT in C\nDESCRIPTION: This code snippet defines the SDL_HINT_BMP_SAVE_LEGACY_FORMAT macro, which is used as a key for setting the hint that controls the BMP save format.  The value associated with this hint determines whether SDL uses the legacy BMP format when saving files, affecting alpha channel support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_BMP_SAVE_LEGACY_FORMAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_BMP_SAVE_LEGACY_FORMAT \"SDL_BMP_SAVE_LEGACY_FORMAT\"\n```\n\n----------------------------------------\n\nTITLE: Get Current Display Orientation in SDL3 (C)\nDESCRIPTION: This C code snippet shows the syntax for using SDL_GetCurrentDisplayOrientation to retrieve the orientation of a display.  It takes an SDL_DisplayID as input and returns an SDL_DisplayOrientation enum value, or SDL_ORIENTATION_UNKNOWN if the orientation is not available. This function must be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentDisplayOrientation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(SDL_DisplayID displayID);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockMutex Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_UnlockMutex function in C. It takes a pointer to an SDL_mutex as input and returns an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnlockMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UnlockMutex(SDL_mutex * mutex);\n```\n\n----------------------------------------\n\nTITLE: SDL_Storage Struct Definition in C\nDESCRIPTION: Defines the SDL_Storage struct, which represents an abstract filesystem interface within SDL3. It is an opaque datatype, meaning its internal structure is hidden. The struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Storage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Storage SDL_Storage;\n```\n\n----------------------------------------\n\nTITLE: SDL_fmodf Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_fmodf function in C, used to calculate the floating-point remainder of dividing x by y. The function takes two float arguments, x (numerator) and y (denominator), and returns the remainder as a float. The denominator, y, must not be 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_fmodf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_fmodf(float x, float y);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetInitialized Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetInitialized function in C. It takes a pointer to an SDL_InitState and a boolean value to set the initialization status.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetInitialized.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetInitialized(SDL_InitState *state, bool initialized);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetButtonFromString Syntax (C)\nDESCRIPTION: Defines the syntax for SDL_GameControllerGetButtonFromString function in C. This function takes a string representation of a game controller button and returns the corresponding SDL_GameControllerButton enum value. The input string *str* should represent a valid SDL_GameController button mapping string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetButtonFromString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GameControllerButton SDL_GameControllerGetButtonFromString(const char *str);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_FRICTION macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_FRICTION macro, which is used to indicate that a haptic device supports the friction effect. The friction effect simulates resistance based on the movement of axes. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_FRICTION.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HAPTIC_FRICTION     (1u<<10)\n```\n\n----------------------------------------\n\nTITLE: Get Font Generation in SDL_ttf\nDESCRIPTION: Retrieves the font generation number for a given TTF_Font. The generation number increments each time a font property that requires glyph rebuilding is changed (e.g., style, size). This function should be called on the same thread that created the font. Returns the font generation or 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontGeneration.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetFontGeneration(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Get Remote Address of Stream Socket using SDLNet_GetStreamSocketAddress in C\nDESCRIPTION: Retrieves the remote address of a stream socket. The function takes a pointer to an SDLNet_StreamSocket and returns a pointer to an SDLNet_Address structure representing the remote address. The returned address must be unreferenced using SDLNet_UnrefAddress when no longer in use. Returns NULL on error; call SDL_GetError() for details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_GetStreamSocketAddress.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDLNet_Address * SDLNet_GetStreamSocketAddress(SDLNet_StreamSocket *sock);\n```\n\n----------------------------------------\n\nTITLE: SDL_PushGPUDebugGroup Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_PushGPUDebugGroup function in C.  It takes a pointer to an SDL_GPUCommandBuffer and a const char* representing the name of the debug group. This function allows the developer to create a debug group within the command buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PushGPUDebugGroup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PushGPUDebugGroup(\n    SDL_GPUCommandBuffer *command_buffer,\n    const char *name);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_SOLARIS Macro in C\nDESCRIPTION: This code snippet defines the SDL_PLATFORM_SOLARIS macro as 1. This macro is automatically defined by the SDL library when compiling for SunOS/Solaris. It allows developers to write platform-specific code that will only be compiled when targeting Solaris systems. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_SOLARIS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_SOLARIS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUTexture Structure Definition in C\nDESCRIPTION: This code snippet defines the `SDL_GPUTexture` structure as an opaque handle. It is a typedef for a struct named `SDL_GPUTexture`. The pointer is used to refer to a texture managed by the GPU.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUTexture SDL_GPUTexture;\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Product ID (SDL3, C)\nDESCRIPTION: Retrieves the USB product ID of a joystick using its instance ID. Returns a Uint16 representing the product ID, or 0 if the instance ID is invalid or the product ID is unavailable.  This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickProductForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetJoystickProductForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: OpenGL Context Reset Notification Constants (C)\nDESCRIPTION: Defines constants related to OpenGL context reset notification. SDL_GL_CONTEXT_RESET_NO_NOTIFICATION indicates that no notification should be provided when the context is lost. SDL_GL_CONTEXT_RESET_LOSE_CONTEXT specifies that the application should be notified when the OpenGL context is lost.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLContextResetNotification.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GL_CONTEXT_RESET_NO_NOTIFICATION  0x0000\n#define SDL_GL_CONTEXT_RESET_LOSE_CONTEXT     0x0001\n```\n\n----------------------------------------\n\nTITLE: SDL_ALLOC_SIZE Macro Definition in C\nDESCRIPTION: Defines the SDL_ALLOC_SIZE macro which uses the __attribute__((alloc_size(p))) compiler attribute to indicate that the function allocates memory based on the size of argument 'p'. If the compiler doesn't support alloc_size, the macro is defined as nothing. This helps the compiler optimize memory allocation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ALLOC_SIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ALLOC_SIZE(p) __attribute__((alloc_size(p)))\n```\n\n----------------------------------------\n\nTITLE: Pausing an SDL Haptic Device in C\nDESCRIPTION: This code snippet demonstrates how to pause a haptic device using the SDL_HapticPause function. It takes an SDL_Haptic pointer as input, which represents the haptic device to pause. The function returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticPause.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticPause(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Releasing a GPU Sampler in SDL3 (C)\nDESCRIPTION: The SDL_ReleaseGPUSampler function frees the specified GPU sampler. It takes a pointer to the SDL_GPUDevice and the SDL_GPUSampler as parameters. After calling this function, the sampler must not be referenced.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseGPUSampler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseGPUSampler(\n    SDL_GPUDevice *device,\n    SDL_GPUSampler *sampler);\n```\n\n----------------------------------------\n\nTITLE: Getting Joystick Instance ID in SDL3\nDESCRIPTION: This code snippet demonstrates how to retrieve the SDL_JoystickID for an opened SDL_Joystick* in SDL3. This is essential for handling joystick events due to the dynamic nature of device lists in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nSDL_JoystickID myID = SDL_GetJoystickInstanceID(myOpenedStick);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUFillMode Enum in C\nDESCRIPTION: Defines the SDL_GPUFillMode enumeration, which controls whether polygons are rendered filled (SDL_GPU_FILLMODE_FILL) or as line segments (SDL_GPU_FILLMODE_LINE). This enum is used in conjunction with SDL_CreateGPUGraphicsPipeline to configure the graphics pipeline.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUFillMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUFillMode\n{\n    SDL_GPU_FILLMODE_FILL,  /**< Polygons will be rendered via rasterization. */\n    SDL_GPU_FILLMODE_LINE   /**< Polygon edges will be drawn as line segments. */\n} SDL_GPUFillMode;\n```\n\n----------------------------------------\n\nTITLE: SDL_COLORSPACEPRIMARIES Macro Definition in C\nDESCRIPTION: This macro retrieves the color primaries from an SDL_Colorspace value. It uses bitwise operations to extract the relevant bits representing the SDL_ColorPrimaries enum value. The macro takes an SDL_Colorspace value as input and returns the corresponding SDL_ColorPrimaries enum value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_COLORSPACEPRIMARIES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_COLORSPACEPRIMARIES(cspace)  (SDL_ColorPrimaries)(((cspace) >> 10) & 0x1F)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUFilter Enum in C\nDESCRIPTION: This C code snippet defines the SDL_GPUFilter enum, which is used to specify the filtering method used by a sampler when sampling a texture. It provides two options: SDL_GPU_FILTER_NEAREST for point filtering and SDL_GPU_FILTER_LINEAR for linear filtering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUFilter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUFilter\n{\n    SDL_GPU_FILTER_NEAREST,  /**< Point filtering. */\n    SDL_GPU_FILTER_LINEAR    /**< Linear filtering. */\n} SDL_GPUFilter;\n```\n\n----------------------------------------\n\nTITLE: SDL_blit Function Type Definition in C\nDESCRIPTION: Defines the SDL_blit function pointer type for SDL surface blitting.  It takes source and destination SDL_Surface pointers, source and destination SDL_Rect pointers, and returns an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_blit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int (SDLCALL *SDL_blit) (struct SDL_Surface * src, SDL_Rect * srcrect, struct SDL_Surface * dst, SDL_Rect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetGPURenderStateFragmentUniforms Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetGPURenderStateFragmentUniforms function in C. This function is used to set fragment shader uniform variables in a custom GPU render state. It takes the render state, slot index, data pointer, and data length as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPURenderStateFragmentUniforms.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetGPURenderStateFragmentUniforms(SDL_GPURenderState *state, Uint32 slot_index, const void *data, Uint32 length);\n```\n\n----------------------------------------\n\nTITLE: Set Text Script in SDL_ttf (C)\nDESCRIPTION: Sets the script to be used for text shaping in a text object using SDL_ttf. This function requires SDL_ttf to be built with HarfBuzz support. The script is specified using an ISO 15924 code. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextScript.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextScript(TTF_Text *text, Uint32 script);\n```\n\n----------------------------------------\n\nTITLE: Get SDL_ttf Version in C\nDESCRIPTION: This snippet shows the syntax for the TTF_Version function, which returns the version number of the dynamically linked SDL_ttf library. It takes no arguments and returns an integer representing the version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_Version.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_Version(void);\n```\n\n----------------------------------------\n\nTITLE: Enable/Disable SDF rendering for a font using TTF_SetFontSDF in C\nDESCRIPTION: This code snippet shows how to enable or disable Signed Distance Field (SDF) rendering for a given font using the `TTF_SetFontSDF` function from the SDL_ttf library. It requires a `TTF_Font` pointer and a boolean value to enable or disable SDF. The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontSDF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontSDF(TTF_Font *font, bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ThreadPriority Enum in C\nDESCRIPTION: Defines the SDL_ThreadPriority enumeration, specifying different thread priority levels supported by SDL. The levels are SDL_THREAD_PRIORITY_LOW, SDL_THREAD_PRIORITY_NORMAL, SDL_THREAD_PRIORITY_HIGH, and SDL_THREAD_PRIORITY_TIME_CRITICAL. These values can be used with functions like SDL_SetCurrentThreadPriority to adjust the priority of a thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ThreadPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ThreadPriority {\n    SDL_THREAD_PRIORITY_LOW,\n    SDL_THREAD_PRIORITY_NORMAL,\n    SDL_THREAD_PRIORITY_HIGH,\n    SDL_THREAD_PRIORITY_TIME_CRITICAL\n} SDL_ThreadPriority;\n```\n\n----------------------------------------\n\nTITLE: SDL_IsTV Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_IsTV function in C. It takes no arguments and returns a boolean value indicating whether the current device is a TV.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsTV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsTV(void);\n```\n\n----------------------------------------\n\nTITLE: Get Default Assertion Handler in SDL3 (C)\nDESCRIPTION: Retrieves the default assertion handler function pointer in SDL3. This function allows developers to access the built-in assertion handling mechanism provided by SDL when a custom handler isn't set via SDL_SetAssertionHandler(). It returns a function pointer of type SDL_AssertionHandler, which can be used to analyze or modify assertion behavior. This function takes no arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDefaultAssertionHandler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AssertionHandler SDL_GetDefaultAssertionHandler(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_rand_r Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_rand_r function in C, used for generating pseudo-random numbers. It takes a pointer to a Uint64 state and a Sint32 n as input, where n represents the upper bound (exclusive) of the generated random number.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_rand_r.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint32 SDL_rand_r(Uint64 *state, Sint32 n);\n```\n\n----------------------------------------\n\nTITLE: Define SDL Hint for Small Icon Resource ID (Windows)\nDESCRIPTION: Defines the SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL macro to specify a custom small icon resource ID from an RC file on the Windows platform. This hint should be set before SDL is initialized. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL \"SDL_WINDOWS_INTRESOURCE_ICON_SMALL\"\n```\n\n----------------------------------------\n\nTITLE: TTF_GetNumFontFaces Function\nDESCRIPTION: Queries the number of faces of a font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetNumFontFaces(const TTF_Font *font);                                                                                             // Query the number of faces of a font.\n```\n\n----------------------------------------\n\nTITLE: Mix_PlayChannelTimed Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_PlayChannelTimed function in C. It takes the channel to play on, the audio chunk to play, the number of loops, and the maximum playback time in milliseconds as parameters. It returns the channel used to play the sound, or -1 if the sound could not be played.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_PlayChannelTimed.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_PlayChannelTimed(int channel, Mix_Chunk *chunk, int loops, int ticks);\n```\n\n----------------------------------------\n\nTITLE: Defining the SDL_DateTime Structure in C\nDESCRIPTION: This C code defines the SDL_DateTime structure, which is used to store date and time components. The structure includes fields for year, month, day, hour, minute, second, nanosecond, day of the week, and UTC offset. The structure is available from SDL 3.2.0 and later versions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DateTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DateTime\n{\n    int year;                  /**< Year */\n    int month;                 /**< Month [01-12] */\n    int day;                   /**< Day of the month [01-31] */\n    int hour;                  /**< Hour [0-23] */\n    int minute;                /**< Minute [0-59] */\n    int second;                /**< Seconds [0-60] */\n    int nanosecond;            /**< Nanoseconds [0-999999999] */\n    int day_of_week;           /**< Day of the week [0-6] (0 being Sunday) */\n    int utc_offset;            /**< Seconds east of UTC */\n} SDL_DateTime;\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_GamepadBinding structure in C\nDESCRIPTION: This C code defines the `SDL_GamepadBinding` structure used in SDL3. It contains fields for input and output types, along with unions to represent different input and output options such as buttons, axes, and hats. The structure is used to map joystick inputs to gamepad controls.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadBinding.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_GamepadBinding\n{\n    SDL_GamepadBindingType input_type;\n    union\n    {\n        int button;\n\n        struct\n        {\n            int axis;\n            int axis_min;\n            int axis_max;\n        } axis;\n\n        struct\n        {\n            int hat;\n            int hat_mask;\n        } hat;\n\n    } input;\n\n    SDL_GamepadBindingType output_type;\n    union\n    {\n        SDL_GamepadButton button;\n\n        struct\n        {\n            SDL_GamepadAxis axis;\n            int axis_min;\n            int axis_max;\n        } axis;\n\n    } output;\n} SDL_GamepadBinding;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK hint as a string literal. This allows developers to set this hint using SDL_SetHint or SDL_SetHintWithPriority before SDL initialization to control the fallback behavior of EGL display initialization. It determines if SDL should try eglGetDisplay if eglGetPlatformDisplay fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK \"SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ResetKeyboard Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ResetKeyboard function, which clears the keyboard state. The function takes no arguments and returns void. It is available since SDL 2.24.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ResetKeyboard.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ResetKeyboard(void);\n```\n\n----------------------------------------\n\nTITLE: Defining Screensaver Inhibit Activity Name Hint in SDL3 (C)\nDESCRIPTION: Defines the SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME macro in SDL3. This hint allows specifying a descriptive name for the activity that's inhibiting the screensaver, which is useful on platforms like Linux desktops to provide context to the user.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME \"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_ISINT Macro Definition in C\nDESCRIPTION: This macro determines if a given SDL_AudioFormat (x) represents integer audio data. It leverages the SDL_AUDIO_ISFLOAT macro to achieve this, returning the logical negation of whether the format is floating-point.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_ISINT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_ISINT(x)           (!SDL_AUDIO_ISFLOAT(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_ReleaseGPUBuffer Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ReleaseGPUBuffer function in C. It takes an SDL_GPUDevice pointer and an SDL_GPUBuffer pointer as input parameters. The function releases the specified GPU buffer associated with the given device when it is safe to do so. After calling this function, the buffer should not be referenced again.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReleaseGPUBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ReleaseGPUBuffer(\n    SDL_GPUDevice *device,\n    SDL_GPUBuffer *buffer);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_LOGGING macro in C\nDESCRIPTION: Defines the SDL_HINT_LOGGING macro as a string literal. This macro is used as the key for setting the SDL_LOGGING hint, which controls the default SDL log levels. The macro is defined within the SDL3/SDL_hints.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_LOGGING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_LOGGING \"SDL_LOGGING\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION macro, which represents the string literal used as the hint name when setting the video Wayland mode emulation behavior. This hint controls whether a standard set of emulated CVT video modes will be exposed for use by the application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION \"SDL_VIDEO_WAYLAND_MODE_EMULATION\"\n```\n\n----------------------------------------\n\nTITLE: SDL_TryLockRWLockForReading Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_TryLockRWLockForReading function in C. It takes a pointer to an SDL_RWLock as input and returns a boolean indicating success or failure to acquire the read lock without blocking. Returns true on success, false if the lock would block or if a NULL rwlock is passed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TryLockRWLockForReading.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_TryLockRWLockForReading(SDL_RWLock *rwlock);\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyTray Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_DestroyTray function, which destroys a tray object. It takes a pointer to an SDL_Tray object as input. This function should be called on the thread that created the tray.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyTray.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyTray(SDL_Tray *tray);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetDisplayForWindow Syntax (SDL3, C)\nDESCRIPTION: This is the function signature for SDL_GetDisplayForWindow. It takes a pointer to an SDL_Window and returns an SDL_DisplayID. Dependencies: SDL3/SDL_video.h. Input: SDL_Window*. Output: SDL_DisplayID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDisplayForWindow.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_DisplayID SDL_GetDisplayForWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Loading SVG Image with Specified Size in SDL_image (C)\nDESCRIPTION: Loads an SVG image from an SDL_IOStream, scaled to a specific width and height. The function returns a pointer to a newly created SDL_Surface, or NULL if there was an error. The returned surface should be freed using SDL_DestroySurface() after use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadSizedSVG_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadSizedSVG_IO(SDL_IOStream *src, int width, int height);\n```\n\n----------------------------------------\n\nTITLE: SDL_TrayCallback Definition in C\nDESCRIPTION: Defines the SDL_TrayCallback, a function pointer type used as a callback when a tray entry is selected. The callback receives a user-defined data pointer and a pointer to the selected SDL_TrayEntry.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TrayCallback.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef void (SDLCALL *SDL_TrayCallback)(void *userdata, SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: SDL Error Handling Migration (C)\nDESCRIPTION: This snippet shows how to change error handling logic when migrating from SDL 2.0 to SDL 3.0 due to the change in return values from negative error codes to boolean values for many SDL functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n    if (SDL_Function() < 0 || SDL_Function() == -1) {\n        /* Failure... */\n    }\n\n```\n\nLANGUAGE: C\nCODE:\n```\n    if (SDL_Function() == 0) {\n        /* Success... */\n    }\n\n```\n\nLANGUAGE: C\nCODE:\n```\n    if (!SDL_Function()) {\n        /* Success... */\n    }\n\n```\n\nLANGUAGE: C\nCODE:\n```\n    if (SDL_Function()) {\n        /* Success... */\n    } else {\n        /* Failure... */\n    }\n\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ANDROID_EXTERNAL_STORAGE_READ Macro in C\nDESCRIPTION: This code snippet defines the SDL_ANDROID_EXTERNAL_STORAGE_READ macro with a hexadecimal value. It is used to indicate that the application requires read access to the external storage on Android devices. The value 0x01 represents the flag for read access.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ANDROID_EXTERNAL_STORAGE_READ.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ANDROID_EXTERNAL_STORAGE_READ   0x01\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph32_LCD Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderGlyph32_LCD function in C, showcasing the required parameters: font (TTF_Font pointer), ch (Uint32 character), fg (SDL_Color foreground), and bg (SDL_Color background). It returns a pointer to an SDL_Surface or NULL if an error occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderGlyph32_LCD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph32_LCD(TTF_Font *font,\n                Uint32 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Get Android SDK Version in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_GetAndroidSDKVersion function from the SDL3 library to query the Android API level of the current device. The function takes no arguments and returns an integer representing the API level.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidSDKVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetAndroidSDKVersion(void);\n```\n\n----------------------------------------\n\nTITLE: Set Master Volume in SDL_mixer (C)\nDESCRIPTION: Sets the master volume for all channels in SDL_mixer. The volume parameter accepts a value between 0 and MIX_MAX_VOLUME (128). Passing -1 will query the current volume without changing it. The function returns the previous master volume.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_MasterVolume.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_MasterVolume(int volume);\n```\n\n----------------------------------------\n\nTITLE: SDL_MALLOC Macro Definition in C\nDESCRIPTION: Defines the SDL_MALLOC macro, which is used to tag a function as an allocator, providing a hint to the compiler. It leverages __declspec(allocator) and __declspec(restrict) for compilers that support them; otherwise, it's defined as nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MALLOC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MALLOC __declspec(allocator) __desclspec(restrict)\n```\n\n----------------------------------------\n\nTITLE: Halt Music Playback in C with SDL_mixer\nDESCRIPTION: This code snippet demonstrates the syntax of the Mix_HaltMusic function in SDL_mixer. It halts the currently playing music stream and returns 0 regardless of whether any music was halted. The function is available since SDL_mixer 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_HaltMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_HaltMusic(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_LockSpinlock Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_LockSpinlock function in C. It takes a pointer to an SDL_SpinLock as input and locks the spinlock by setting it to a non-zero value. It is crucial to understand the thread safety implications before using spinlocks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockSpinlock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockSpinlock(SDL_SpinLock *lock);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Music Tracks Mix_GetNumTracks C\nDESCRIPTION: Retrieves the number of tracks within a `Mix_Music` object.  This is useful for music formats that support multiple tracks within a single file, enabling selective playback of different parts of the music.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_22\n\nLANGUAGE: c\nCODE:\n```\nint Mix_GetNumTracks(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for SDL3\nDESCRIPTION: This CMake configuration snippet shows how to link against SDL3 using the `find_package` and `target_link_libraries` commands.  It assumes that SDL3 is installed as a CMake package.  `SDL3::SDL3` is the imported target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(SDL3 REQUIRED CONFIG)\ntarget_link_libraries(yourgame PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_RELATIVE_WARP_MOTION macro, which is used to control whether mouse warping generates motion events in relative mode. Setting this hint to \"0\" disables motion events, while setting it to \"1\" enables them.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_RELATIVE_WARP_MOTION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION  \"SDL_MOUSE_RELATIVE_WARP_MOTION\"\n```\n\n----------------------------------------\n\nTITLE: Callback Function Prototype (C)\nDESCRIPTION: This code snippet illustrates the function prototype for the callback function that is used with SDL_iPhoneSetAnimationCallback.  It takes a void pointer as an argument, which is the callback parameter that was passed to SDL_iPhoneSetAnimationCallback. The callback function is responsible for performing animation-related tasks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_iPhoneSetAnimationCallback.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nvoid callback(void* callbackParam);\n```\n\n----------------------------------------\n\nTITLE: SDL_DelEventWatch Syntax in C\nDESCRIPTION: Removes an event watch callback added with SDL_AddEventWatch(). The function takes the SDL_EventFilter and userdata originally passed to SDL_AddEventWatch() as input to identify and delete the corresponding callback. It is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DelEventWatch.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DelEventWatch(SDL_EventFilter filter,\n                       void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_FlashWindow Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_FlashWindow function. It takes an SDL_Window pointer and an SDL_FlashOperation enum value as input. It returns a boolean value indicating success or failure. This function should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlashWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_FlashWindow(SDL_Window *window, SDL_FlashOperation operation);\n```\n\n----------------------------------------\n\nTITLE: SDLK_SCANCODE_MASK Macro\nDESCRIPTION: Defines a macro `SDLK_SCANCODE_MASK` that sets the 30th bit of an integer. This mask is used to differentiate between keycodes and scancodes within the SDL library. Applying this mask indicates that the value represents a scancode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Keycode.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDLK_SCANCODE_MASK (1<<30)\n```\n\n----------------------------------------\n\nTITLE: SDL_IntersectFRect Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_IntersectFRect function in C. This function calculates the intersection of two rectangles, A and B, defined as SDL_FRect structures, and stores the resulting intersection in the result SDL_FRect structure. It returns SDL_TRUE if there is an intersection and SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IntersectFRect.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_bool SDL_IntersectFRect(const SDL_FRect * A,\n                            const SDL_FRect * B,\n                            SDL_FRect * result);\n```\n\n----------------------------------------\n\nTITLE: Get Keyboard Focus in SDL3 (C)\nDESCRIPTION: Retrieves the SDL_Window that currently has keyboard focus. This function is part of the SDL3 library and is available since version 3.2.0. It should only be called on the main thread to ensure thread safety.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetKeyboardFocus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetKeyboardFocus(void);\n```\n\n----------------------------------------\n\nTITLE: Set OpenGL ES Attributes in SDL (C/C++)\nDESCRIPTION: This snippet demonstrates how to set OpenGL ES attributes before creating an SDL window. This can improve performance on some devices by explicitly specifying the color buffer sizes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nSDL_GL_SetAttribute(SDL_GL_RED_SIZE, 5);\nSDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 6);\nSDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 5);\n```\n\n----------------------------------------\n\nTITLE: SDL_RaiseWindow Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_RaiseWindow function in C. It takes an SDL_Window pointer as input and returns a boolean value indicating success or failure. The function is used to raise a specified window above other windows and request input focus.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RaiseWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RaiseWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Load Music Object with Mix_LoadMUS in C\nDESCRIPTION: Loads a supported audio format into a music object. Takes a file path as input and returns a pointer to the loaded music object. Returns NULL on error. The allocated memory for the music object must be freed with Mix_FreeMusic.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_LoadMUS.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMix_Music * Mix_LoadMUS(const char *file);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRectUnion Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetRectUnion function, which calculates the union of two SDL_Rect structures. It takes two constant SDL_Rect pointers as input and stores the result in a third SDL_Rect pointer. Returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRectUnion.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_GetRectUnion(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateGPURenderer Syntax in C\nDESCRIPTION: Creates a 2D GPU rendering context for a window, with support for the specified shader format.\nRequires SDL3 and the SDL_render.h header file.\nReturns a pointer to the SDL_Renderer or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateGPURenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_CreateGPURenderer(SDL_Window *window, SDL_GPUShaderFormat format_flags, SDL_GPUDevice **device);\n```\n\n----------------------------------------\n\nTITLE: SDL_asinf Syntax\nDESCRIPTION: This C code snippet shows the syntax for the SDL_asinf function in the SDL3 library. It takes a single-precision floating-point value as input and returns its arc sine as a single-precision floating-point value. The function is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_asinf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_asinf(float x);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_EVENT_LOGGING in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_EVENT_LOGGING macro in C.  It defines the string literal \"SDL_EVENT_LOGGING\" which is the key used to set the hint value.  This hint controls the verbosity of SDL event logging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_EVENT_LOGGING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EVENT_LOGGING \"SDL_EVENT_LOGGING\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ResetHint Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_ResetHint function. It takes a const char* representing the name of the hint to reset as input and returns an SDL_bool indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ResetHint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_ResetHint(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Creating Renderer Text Engine with Properties C\nDESCRIPTION: This function creates a text engine for drawing text on an SDL renderer, with the specified properties. It requires an SDL_PropertiesID representing the properties to be applied. Returns a pointer to the created TTF_TextEngine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_47\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateRendererTextEngineWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickGetVendor Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickGetVendor function. It takes an SDL_Joystick pointer as input and returns a Uint16 representing the USB vendor ID. The function is part of the SDL2 library and requires SDL_joystick.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetVendor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_JoystickGetVendor(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Get the value of a hint using SDL_GetHint in C\nDESCRIPTION: The SDL_GetHint function retrieves the string value associated with a given hint name. The 'name' parameter specifies the hint to query. The function returns a const char * representing the hint's value, or NULL if the hint is not set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetHint(const char *name);\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicAdd Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_AtomicAdd function in C. It takes a pointer to an SDL_atomic_t and an integer value as input, and returns an integer representing the previous value of the atomic variable. The function atomically adds the integer value to the atomic variable pointed to by the SDL_atomic_t pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicAdd.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AtomicAdd(SDL_atomic_t *a, int v);\n```\n\n----------------------------------------\n\nTITLE: Get Local IP Addresses using SDLNet_GetLocalAddresses in C\nDESCRIPTION: This code snippet demonstrates the usage of the SDLNet_GetLocalAddresses function to retrieve local IP addresses. It populates an array of IPaddress structures with the addresses of the network interfaces on the system. The function requires SDL_net 2.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_GetLocalAddresses.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_GetLocalAddresses(IPaddress *addresses, int maxcount);\n```\n\n----------------------------------------\n\nTITLE: Check Chunk Decoder Availability in SDL_mixer (C)\nDESCRIPTION: This code snippet demonstrates the syntax of the Mix_HasChunkDecoder function. It takes a decoder name as input and returns a boolean indicating whether the decoder is available. You must call Mix_OpenAudio() before calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_HasChunkDecoder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_HasChunkDecoder(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_DOUBLE_BUFFER in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_DOUBLE_BUFFER macro. This macro is a string literal that is used to set the corresponding SDL hint to request a double buffer for the video output. The hint can be set using SDL_SetHint before initializing the video subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_DOUBLE_BUFFER.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_VIDEO_DOUBLE_BUFFER      \"SDL_VIDEO_DOUBLE_BUFFER\"\n```\n\n----------------------------------------\n\nTITLE: Event Masking in SDL 2.0\nDESCRIPTION: This code shows the event masking in SDL 2.0. The `SDL_PeepEvents` function is used with direct event types instead of masks. This example retrieves only mouse button down events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nSDL_PeepEvents(&event, 1, SDL_GETEVENT, SDL_MOUSEBUTTONDOWN, SDL_MOUSEBUTTONDOWN);\n```\n\n----------------------------------------\n\nTITLE: Getting GPU Text Draw Data C\nDESCRIPTION: This function retrieves the geometry data needed for drawing the text using the SDL GPU API. It requires a TTF_Text pointer. Returns a pointer to the TTF_GPUAtlasDrawSequence containing the draw data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_52\n\nLANGUAGE: C\nCODE:\n```\nTTF_GPUAtlasDrawSequence * TTF_GetGPUTextDrawData(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Default SDL Initialization (C)\nDESCRIPTION: This snippet illustrates the default SDL initialization function, SDL_Init_DEFAULT, which is called at startup. It calls SDL_InitDynamicAPI to fill in the jump table with the actual SDL function pointers. This default function is only called once.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/dynapi.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_Init_DEFAULT(SDL_InitFlags flags)\n{\n    SDL_InitDynamicAPI();\n    return jump_table.SDL_Init(flags);\n}\n```\n\n----------------------------------------\n\nTITLE: TTF Font Wrap Alignment Functions in C\nDESCRIPTION: Functions for setting and querying the horizontal alignment option for text wrapping. Determines how text is aligned within a wrapping boundary.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_SetFontWrapAlignment(TTF_Font *font, TTF_HorizontalAlignment align);                                                              // Set a font's current wrap alignment option.\nTTF_HorizontalAlignment TTF_GetFontWrapAlignment(const TTF_Font *font);                                                                    // Query a font's current wrap alignment option.\n```\n\n----------------------------------------\n\nTITLE: SDL_Init Function Pointer Implementation in C\nDESCRIPTION: This code snippet shows how SDL_Init is implemented using a function pointer in a jump table.  The actual implementation is called via the jump_table.SDL_Init function pointer, allowing for dynamic switching of the SDL implementation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/dynapi.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint32 SDL_Init(Uint32 flags)\n{\n    return jump_table.SDL_Init(flags);\n}\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontSDF Function\nDESCRIPTION: Enables or disables Signed Distance Field (SDF) rendering for a font. SDF rendering can improve the quality of scaled fonts, especially at larger sizes. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontSDF(TTF_Font *font, bool enabled);                                                                                         // Enable Signed Distance Field rendering for a font.\n```\n\n----------------------------------------\n\nTITLE: Start Music Track Mix_StartTrack C\nDESCRIPTION: Starts a specific track within a music object, which can be useful for multi-track music formats.  The function requires a valid `Mix_Music` object and a track number to begin playback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_StartTrack(Mix_Music *music, int track);\n```\n\n----------------------------------------\n\nTITLE: BMP Image Data Detection in SDL_IOStream (IMG_isBMP) - C\nDESCRIPTION: This function detects if the data in an SDL_IOStream is BMP image data. It takes a seekable/readable SDL_IOStream as input and returns a boolean value indicating whether the data is BMP. The function attempts to reset the stream's position after reading.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isBMP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isBMP(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Lock Joysticks API in SDL3 (C)\nDESCRIPTION: Locks the SDL3 joystick API for atomic access, preventing changes to the joystick list and delivery of joystick/gamepad events. This function ensures thread safety when interacting with joystick-related functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockJoysticks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockJoysticks(void);\n```\n\n----------------------------------------\n\nTITLE: Query SDL_rtf Linked Version (C)\nDESCRIPTION: This function retrieves the version of the dynamically linked SDL_rtf library. It returns a pointer to a constant SDL_Version structure containing the version information.  The returned pointer refers to static internal data, so it should not be freed or modified.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_Linked_Version.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_Version * RTF_Linked_Version(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_CloseAudioDevice Syntax in C\nDESCRIPTION: The syntax of the SDL_CloseAudioDevice function. It takes SDL_AudioDeviceID as a parameter and has a void return type. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseAudioDevice.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CloseAudioDevice(SDL_AudioDeviceID devid);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetMainReady Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetMainReady function in C. This function is used to circumvent the failure of SDL_Init when not using SDL_main as an entry point. It takes no arguments and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetMainReady.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetMainReady(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_ALLOW_SCREENSAVER in C\nDESCRIPTION: This code defines the SDL_HINT_VIDEO_ALLOW_SCREENSAVER macro. It maps to the string \"SDL_VIDEO_ALLOW_SCREENSAVER\", which is the actual environment variable or property key used to set this hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_ALLOW_SCREENSAVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_ALLOW_SCREENSAVER    \"SDL_VIDEO_ALLOW_SCREENSAVER\"\n```\n\n----------------------------------------\n\nTITLE: Setting Text Script C\nDESCRIPTION: This function sets the script to be used for text shaping a text object. It requires a pointer to the TTF_Text and a Uint32 representing the script. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_64\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextScript(TTF_Text *text, Uint32 script);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE in C\nDESCRIPTION: This code defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE hint as a string literal. It controls whether the HIDAPI driver is used for Xbox One controllers. Set to \"0\" to disable or \"1\" to enable the HIDAPI driver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE \"SDL_JOYSTICK_HIDAPI_XBOX_ONE\"\n```\n\n----------------------------------------\n\nTITLE: SDL Version Check Macro Definition in C\nDESCRIPTION: This macro evaluates to true if the SDL version at compile time is at least X.Y.Z. It uses SDL_MAJOR_VERSION, SDL_MINOR_VERSION, and SDL_PATCHLEVEL to perform the comparison. It is defined in SDL_version.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_MAJOR_VERSION >= X) && \\\n     (SDL_MAJOR_VERSION > X || SDL_MINOR_VERSION >= Y) && \\\n     (SDL_MAJOR_VERSION > X || SDL_MINOR_VERSION > Y || SDL_PATCHLEVEL >= Z))\n```\n\n----------------------------------------\n\nTITLE: Set Palette Colors in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetPaletteColors function in SDL2. It modifies a specified range of colors within an SDL_Palette structure using an array of SDL_Color structures. The function returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetPaletteColors.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SetPaletteColors(SDL_Palette * palette,\n                         const SDL_Color * colors,\n                         int firstcolor, int ncolors);\n```\n\n----------------------------------------\n\nTITLE: Get CPU Core Count in SDL2 (C)\nDESCRIPTION: Retrieves the number of CPU cores available using the SDL_GetCPUCount function. This function returns an integer representing the total number of logical CPU cores. Defined in SDL_cpuinfo.h and available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetCPUCount.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetCPUCount(void);\n```\n\n----------------------------------------\n\nTITLE: Running autogen.sh for SDL Build\nDESCRIPTION: This instruction indicates that if building SDL from the Git repository using the configure script, it is necessary to first execute `autogen.sh`. This script prepares the build environment by generating the configure script itself, ensuring compatibility with the current source tree. Requires autoconf and related tools.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/git.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nautogen.sh\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderDrawPoint Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RenderDrawPoint function. It takes an SDL_Renderer pointer, the x and y coordinates of the point as integers, and returns an integer indicating success or failure. The function draws a single point on the current rendering target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderDrawPoint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderDrawPoint(SDL_Renderer * renderer,\n                        int x, int y);\n```\n\n----------------------------------------\n\nTITLE: SDL_Metal_GetDrawableSize Syntax in C\nDESCRIPTION: Retrieves the size of a window's underlying drawable in pixels. It takes an SDL_Window pointer and two integer pointers as input. The function writes the width and height of the drawable to the provided integer pointers. The width and height pointers can be NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Metal_GetDrawableSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Metal_GetDrawableSize(SDL_Window* window, int *w,\n                               int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_QTWAYLAND_WINDOW_FLAGS Definition in C\nDESCRIPTION: Defines the SDL_HINT_QTWAYLAND_WINDOW_FLAGS hint as a string literal. This hint is used to configure window flags on QtWayland platforms, allowing for integration with the native window manager. The value should be a space-separated list of flag names.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_QTWAYLAND_WINDOW_FLAGS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_QTWAYLAND_WINDOW_FLAGS \"SDL_QTWAYLAND_WINDOW_FLAGS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticID Definition in C\nDESCRIPTION: Defines the SDL_HapticID type as an unsigned 32-bit integer (Uint32). This type is used to uniquely identify haptic devices connected to the system. The haptic ID is only valid for the duration the device is connected and is not reused for the lifetime of the application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_HapticID;\n```\n\n----------------------------------------\n\nTITLE: SDL_InitState Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_InitState` which is used for thread-safe initialization and shutdown. It contains an atomic integer `status` to track the initialization state, a thread ID `thread`, and a reserved pointer `reserved`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InitState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_InitState\n{\n    SDL_AtomicInt status;\n    SDL_ThreadID thread;\n    void *reserved;\n} SDL_InitState;\n```\n\n----------------------------------------\n\nTITLE: Get Music Duration in C with Mix_MusicDuration\nDESCRIPTION: This code snippet shows the syntax for the Mix_MusicDuration function in SDL_mixer, which returns the duration of a Mix_Music object in seconds. It takes a pointer to a Mix_Music object as input and returns a double representing the duration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_MusicDuration.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_MusicDuration(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderFillRects Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RenderFillRects function in C. It takes a renderer, an array of SDL_Rect structures, and the number of rectangles as input, and returns an integer indicating success or failure. Requires SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderFillRects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderFillRects(SDL_Renderer * renderer,\n                        const SDL_Rect * rects,\n                        int count);\n```\n\n----------------------------------------\n\nTITLE: Bind GPU Compute Pipeline in SDL3 (C)\nDESCRIPTION: Binds a compute pipeline to a specified compute pass in SDL3. This allows the application to utilize the provided compute pipeline during a compute dispatch operation. It requires an SDL_GPUComputePass and an SDL_GPUComputePipeline object.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUComputePipeline.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_BindGPUComputePipeline(\n    SDL_GPUComputePass *compute_pass,\n    SDL_GPUComputePipeline *compute_pipeline);\n```\n\n----------------------------------------\n\nTITLE: SDL_WinRTGetDeviceFamily Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for calling the SDL_WinRTGetDeviceFamily function. It requires the SDL_system.h header file to be included and returns a value of type SDL_WinRT_DeviceFamily, which represents the detected device family.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WinRTGetDeviceFamily.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_WinRT_DeviceFamily SDL_WinRTGetDeviceFamily();\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VITA_TOUCH_MOUSE_DEVICE in C\nDESCRIPTION: This code defines the SDL_HINT_VITA_TOUCH_MOUSE_DEVICE macro as a string literal. This macro is used as a key when setting a hint using SDL_SetHint or SDL_SetHintWithPriority. The hint controls which Vita touchpad generates synthetic mouse events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VITA_TOUCH_MOUSE_DEVICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VITA_TOUCH_MOUSE_DEVICE \"SDL_VITA_TOUCH_MOUSE_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: Allocate SDL_RWops Structure in C\nDESCRIPTION: This code snippet demonstrates the syntax for using the SDL_AllocRW function to allocate memory for a new SDL_RWops structure. It returns a pointer to the allocated memory, or NULL on failure. The caller is responsible for freeing the memory using SDL_FreeRW.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AllocRW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_RWops* SDL_AllocRW(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_CompareAndSwapAtomicPointer Syntax\nDESCRIPTION: This code snippet shows the syntax of the SDL_CompareAndSwapAtomicPointer function in C. It takes a pointer to a pointer, the old pointer value, and the new pointer value as parameters. It returns a boolean value indicating whether the swap was successful.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CompareAndSwapAtomicPointer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CompareAndSwapAtomicPointer(void **a, void *oldval, void *newval);\n```\n\n----------------------------------------\n\nTITLE: Get Text Substring For Line - SDL_ttf\nDESCRIPTION: Retrieves the substring of a text object that contains the given line. The `line` parameter specifies the line number (starting from 0), and the substring is returned in the `substring` parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_108\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSubStringForLine(TTF_Text *text, int line, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: IMG_isGIF Syntax in C\nDESCRIPTION: This snippet shows the syntax of the IMG_isGIF function, which is used to detect if an SDL_IOStream contains GIF image data. It takes an SDL_IOStream pointer as input and returns a boolean value indicating whether the data is GIF data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isGIF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isGIF(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Error Message\nDESCRIPTION: This C code snippet shows the syntax for the SDL_SetErrorV function, which sets the SDL error message for the current thread, similar to printf, using a format string and a variable argument list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetErrorV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetErrorV(const char *fmt, va_list ap);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction C\nDESCRIPTION: This function sets the direction to be used for text shaping a text object. It requires a pointer to the TTF_Text and a TTF_Direction value. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_62\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextDirection(TTF_Text *text, TTF_Direction direction);\n```\n\n----------------------------------------\n\nTITLE: SDL_AddGamepadMapping Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_AddGamepadMapping function in C.  This function adds or updates a gamepad mapping in SDL.  It takes a mapping string as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AddGamepadMapping.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AddGamepadMapping(const char *mapping);\n```\n\n----------------------------------------\n\nTITLE: Load Animation from SDL_IOStream C\nDESCRIPTION: This function loads an animation from an SDL_IOStream. It accepts an SDL_IOStream pointer and a boolean indicating whether to close the IOStream after use. It returns a pointer to an IMG_Animation object. Returns NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_9\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimation_IO(SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIO_DISK_OUTPUT_FILE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_AUDIO_DISK_OUTPUT_FILE macro, which is used to specify the file name for audio output when using the disk audio driver. This hint must be set before an audio device is opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DISK_OUTPUT_FILE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DISK_OUTPUT_FILE \"SDL_AUDIO_DISK_OUTPUT_FILE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickGetHat Syntax in C\nDESCRIPTION: This snippet shows the syntax for using the SDL_JoystickGetHat function to get the state of a joystick hat. It requires an SDL_Joystick pointer and the hat index as input. The function returns a Uint8 representing the current hat position.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetHat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint8 SDL_JoystickGetHat(SDL_Joystick *joystick,\n                         int hat);\n```\n\n----------------------------------------\n\nTITLE: SDL_EventAction Enum Definition in C\nDESCRIPTION: Defines the SDL_EventAction enum in C, specifying the possible actions that can be performed on the event queue using SDL_PeepEvents. The enum includes SDL_ADDEVENT, SDL_PEEKEVENT, and SDL_GETEVENT.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EventAction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_EventAction\n{\n    SDL_ADDEVENT,  /**< Add events to the back of the queue. */\n    SDL_PEEKEVENT, /**< Check but don't remove events from the queue front. */\n    SDL_GETEVENT   /**< Retrieve/remove events from the front of the queue. */\n} SDL_EventAction;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_SAWTOOTHDOWN in C\nDESCRIPTION: This code defines the SDL_HAPTIC_SAWTOOTHDOWN macro, used to specify that a haptic device supports sawtooth down wave effects. It is a bit flag that can be used in conjunction with SDL_HapticPeriodic.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_SAWTOOTHDOWN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SAWTOOTHDOWN (1u<<5)\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickGetProduct Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_JoystickGetProduct function in C. It takes an SDL_Joystick pointer as input and returns a Uint16 representing the USB product ID. The function is part of the SDL2 library and requires SDL_joystick.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetProduct.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_JoystickGetProduct(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadTextureTyped_RW Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the IMG_LoadTextureTyped_RW function in SDL_image. It takes an SDL_Renderer, an SDL_RWops data source, a flag to free the source, and the image type as parameters, and returns an SDL_Texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadTextureTyped_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Texture * IMG_LoadTextureTyped_RW(SDL_Renderer *renderer, SDL_RWops *src, int freesrc, const char *type);\n```\n\n----------------------------------------\n\nTITLE: Iterate SoundFonts Mix_EachSoundFont C\nDESCRIPTION: Iterates through the SoundFonts paths currently set for MIDI playback, calling a provided callback function for each path. This enables custom processing of each SoundFont path.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_33\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_EachSoundFont(Mix_EachSoundFontCallback function, void *data);\n```\n\n----------------------------------------\n\nTITLE: IMG_isXV Function Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_isXV function, which checks if an SDL_IOStream contains XV image data. It takes an SDL_IOStream pointer as input and returns a boolean value indicating whether the data is in XV format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isXV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isXV(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE macro, which can be used to set the scale for mouse motion in relative mode. The value is a string representation of a floating point number. This hint is defined in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE    \"SDL_MOUSE_RELATIVE_SPEED_SCALE\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RENDER_VSYNC Macro in C\nDESCRIPTION: This code snippet defines the SDL_HINT_RENDER_VSYNC macro, which is used to control the vertical synchronization of rendering in SDL. The macro expands to the string \"SDL_RENDER_VSYNC\". This string is used as the key when setting the hint using SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_VSYNC.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_RENDER_VSYNC               \"SDL_RENDER_VSYNC\"\n```\n\n----------------------------------------\n\nTITLE: SDL_DuplicateSurface Syntax in C\nDESCRIPTION: Defines the syntax for SDL_DuplicateSurface, a function that creates a copy of an SDL_Surface. The function takes a pointer to an SDL_Surface as input and returns a pointer to a new SDL_Surface. The caller is responsible for freeing the returned surface using SDL_DestroySurface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DuplicateSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_DuplicateSurface(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap32BE Macro Definition\nDESCRIPTION: Defines the SDL_Swap32BE macro, which swaps a 32-bit value from big-endian to native byte order using the SwapOnlyIfNecessary macro. It's available since SDL 3.2.0 and is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap32BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_Swap32BE(x) SwapOnlyIfNecessary(x)\n```\n\n----------------------------------------\n\nTITLE: Close SDL Game Controller in C\nDESCRIPTION: Closes a game controller that was previously opened using SDL_GameControllerOpen. The function takes a pointer to an SDL_GameController structure as input, which represents the game controller to be closed. It frees the resources associated with the game controller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerClose.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GameControllerClose(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: TTF_OpenFont Function\nDESCRIPTION: Creates a TTF_Font object from a font file, specifying the font file path and point size. The created font needs to be freed using TTF_CloseFont when no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFont(const char *file, float ptsize);                                                                                   // Create a font from a file, using a specified point size.\n```\n\n----------------------------------------\n\nTITLE: Get Window Opacity in SDL2\nDESCRIPTION: Retrieves the opacity of a window using SDL_GetWindowOpacity. The function takes a pointer to an SDL_Window and a pointer to a float to store the opacity value. The opacity value will be between 0.0f (transparent) and 1.0f (opaque).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowOpacity.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetWindowOpacity(SDL_Window * window, float * out_opacity);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_IOKIT in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_JOYSTICK_IOKIT hint is defined as a preprocessor macro in C. This hint controls whether SDL uses IOKit for joystick handling on macOS. The default value is to use IOKit.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_IOKIT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_IOKIT \"SDL_JOYSTICK_IOKIT\"\n```\n\n----------------------------------------\n\nTITLE: Querying udev device information\nDESCRIPTION: Queries udev for information about the joystick device. It is used to check if the ID_INPUT_JOYSTICK property is set. Replace `input/eventXX` with the actual device name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm info --query=all --name=input/eventXX\n```\n\n----------------------------------------\n\nTITLE: Get Number of Music Decoders Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_GetNumMusicDecoders function in C. It takes no arguments and returns an integer representing the number of available music decoders. It's part of the SDL_mixer library and requires SDL_mixer.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetNumMusicDecoders.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GetNumMusicDecoders(void);\n```\n\n----------------------------------------\n\nTITLE: Closing a HID Device in SDL3 with SDL_hid_close (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_hid_close function, which is used to close a HID device. The function takes a device handle as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_close.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_close(SDL_hid_device *dev);\n```\n\n----------------------------------------\n\nTITLE: SDL_SyncWindow Function Signature in C\nDESCRIPTION: This code snippet shows the function signature of SDL_SyncWindow in C. It takes a pointer to an SDL_Window as input and returns a boolean value indicating success or failure (timeout). The function is used to synchronize pending window state changes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SyncWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SyncWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SensorID in C\nDESCRIPTION: Defines the SDL_SensorID type as a signed 32-bit integer (Sint32). This type is used to uniquely identify sensors connected to the system during their connection lifetime. The value -1 is reserved to indicate an invalid sensor ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Sint32 SDL_SensorID;\n```\n\n----------------------------------------\n\nTITLE: Set Assertion Handler in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates how to set a custom assertion handler in SDL3. The handler function will be called when an assertion fails. The userdata pointer can be used to pass custom data to the handler.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAssertionHandler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetAssertionHandler(\n                SDL_AssertionHandler handler,\n                void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_SensorFromInstanceID Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_SensorFromInstanceID function. It takes an SDL_SensorID as input and returns a pointer to an SDL_Sensor object. The instance_id parameter specifies the sensor's instance ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorFromInstanceID.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Sensor* SDL_SensorFromInstanceID(SDL_SensorID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Camera Position with SDL_GetCameraPosition in C\nDESCRIPTION: Retrieves the position of a camera device using its instance ID.  The function returns an SDL_CameraPosition enum indicating the camera's location (e.g., front, back, unknown).  Requires including SDL3/SDL_camera.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameraPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_CameraPosition SDL_GetCameraPosition(SDL_CameraID instance_id);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadWEBPAnimation_RW Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadWEBPAnimation_RW function, which loads a WEBP animation from an SDL_RWops stream. It takes an SDL_RWops pointer as input and returns an IMG_Animation pointer or NULL on error. It is part of SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadWEBPAnimation_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadWEBPAnimation_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_KillProcess Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_KillProcess function in SDL3. It takes an SDL_Process pointer and a boolean indicating whether to force termination as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_KillProcess.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_KillProcess(SDL_Process *process, bool force);\n```\n\n----------------------------------------\n\nTITLE: SDL_CancelGPUCommandBuffer Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_CancelGPUCommandBuffer function. This function cancels a GPU command buffer, preventing its execution. It takes a pointer to a SDL_GPUCommandBuffer as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CancelGPUCommandBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CancelGPUCommandBuffer(\n    SDL_GPUCommandBuffer *command_buffer);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetMainReady Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetMainReady function in C. The function takes no arguments and returns void. It is used to signal that the application's main function is ready, circumventing potential initialization failures when not using the SDL_main entry point.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetMainReady.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetMainReady(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_LogOutputFunction Callback in C\nDESCRIPTION: This code snippet shows the prototype for the SDL_LogOutputFunction callback, which is used for redirecting SDL's logging output to a custom function. The function receives user data, the log category, log priority, and the message itself. It's defined in SDL_log.h and must be implemented to handle custom logging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogOutputFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_LogOutputFunction)(void *userdata, int category, SDL_LogPriority priority, const char *message);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticDirection Structure Definition in C\nDESCRIPTION: Defines the structure SDL_HapticDirection used to represent a haptic direction. It includes the type of encoding (polar, cartesian, or spherical) and an array to store the encoded direction values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticDirection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticDirection\n{\n    Uint8 type;         /**< The type of encoding. */\n    Sint32 dir[3];      /**< The encoded direction. */\n} SDL_HapticDirection;\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicGetPtr Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_AtomicGetPtr function in C. This function retrieves the current value of a pointer atomically. The function takes a pointer to a pointer as input and returns the current value of the pointed-to pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicGetPtr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_AtomicGetPtr(void **a);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ASSERT_CAPABILITY Macro in C\nDESCRIPTION: This code snippet defines the SDL_ASSERT_CAPABILITY macro. It takes a parameter 'x' and uses the SDL_THREAD_ANNOTATION_ATTRIBUTE__ macro to attach the 'assert_capability(x)' annotation. This allows Clang's thread safety analysis to verify if the current thread has the required capability before accessing shared resources. This macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ASSERT_CAPABILITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ASSERT_CAPABILITY(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(assert_capability(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_AddHintCallback Syntax in C\nDESCRIPTION: The SDL_AddHintCallback function adds a callback to be triggered when a specific hint's value changes. It requires the hint name, a callback function of type SDL_HintCallback, and a user-defined data pointer to be passed to the callback. This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AddHintCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AddHintCallback(const char *name,\n                         SDL_HintCallback callback,\n                         void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_strnlen Function Definition in C\nDESCRIPTION: This C code defines the SDL_strnlen function, which calculates the length of a null-terminated string (`str`) up to a maximum length (`maxlen`). It returns the length of the string, excluding the null terminator, but never exceeds `maxlen`. The function is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strnlen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_strnlen(const char *str, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MINOR_VERSION in C\nDESCRIPTION: This C macro defines the SDL_MINOR_VERSION. It represents the minor version number of the SDL headers. In this case, it's set to 3, which would correspond to the '2' in version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MINOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MINOR_VERSION   3\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowMouseGrab Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetWindowMouseGrab function in C. This function sets the mouse grab mode for a given SDL_Window. The `window` parameter specifies the SDL window, and the `grabbed` parameter is a boolean that enables or disables mouse grabbing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowMouseGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowMouseGrab(SDL_Window *window, bool grabbed);\n```\n\n----------------------------------------\n\nTITLE: Determining Rectangle Intersection with SDL_HasRectIntersectionFloat in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_HasRectIntersectionFloat function in C to determine if two rectangles (SDL_FRect structures) intersect. It takes two const SDL_FRect pointers as input and returns a boolean value indicating whether an intersection exists. If either pointer is NULL, the function returns false.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasRectIntersectionFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasRectIntersectionFloat(const SDL_FRect *A, const SDL_FRect *B);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_KeyboardID in C\nDESCRIPTION: Defines SDL_KeyboardID as an alias for Uint32. This unique ID is assigned to a keyboard and is never reused during the application's lifetime. A new ID is assigned if the keyboard is disconnected and reconnected. The value 0 is an invalid ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_KeyboardID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_KeyboardID;\n```\n\n----------------------------------------\n\nTITLE: SDL_IntersectRectAndLine Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_IntersectRectAndLine function in C. This function calculates the intersection of a rectangle and line segment, modifying the line's coordinates if it intersects the rectangle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IntersectRectAndLine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IntersectRectAndLine(const SDL_Rect *\n                                  rect, int *X1,\n                                  int *Y1, int *X2,\n                                  int *Y2);\n```\n\n----------------------------------------\n\nTITLE: SDL_IsScreenSaverEnabled Syntax (C)\nDESCRIPTION: This C code snippet shows the syntax for the SDL_IsScreenSaverEnabled function. It takes no arguments and returns an SDL_bool value indicating whether the screensaver is enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsScreenSaverEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IsScreenSaverEnabled(void);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Axis String in SDL3\nDESCRIPTION: This snippet shows the syntax for using the SDL_GetGamepadStringForAxis function. It takes an SDL_GamepadAxis enum as input and returns a const char* representing the axis as a string. The function is part of the SDL3 library and requires inclusion of SDL3/SDL_gamepad.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadStringForAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);\n```\n\n----------------------------------------\n\nTITLE: SDL_isalpha Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_isalpha function in C. It takes an integer representing a character value as input and returns an integer indicating whether the character is an ASCII alphabetic letter (a-z, A-Z).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isalpha.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isalpha(int x);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_SHIELD in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_JOYSTICK_HIDAPI_SHIELD macro in C.  It defines the string literal that represents the hint's name, which is used when setting the hint value using SDL_SetHint. The hint controls whether SDL uses the HIDAPI driver for NVIDIA SHIELD controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_SHIELD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_SHIELD \"SDL_JOYSTICK_HIDAPI_SHIELD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GenerateMipmapsForGPUTexture Syntax (C)\nDESCRIPTION: Defines the syntax for using the SDL_GenerateMipmapsForGPUTexture function. This function generates mipmaps for the given SDL_GPUTexture within an SDL_GPUCommandBuffer. It requires a valid command buffer and a texture with more than one mip level as inputs. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GenerateMipmapsForGPUTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GenerateMipmapsForGPUTexture(\n    SDL_GPUCommandBuffer *command_buffer,\n    SDL_GPUTexture *texture);\n```\n\n----------------------------------------\n\nTITLE: SDL_COMPILE_TIME_ASSERT Macro Definition in C\nDESCRIPTION: Defines the SDL_COMPILE_TIME_ASSERT macro for compile-time assertions.  It uses a macro `FailToCompileIf_x_IsFalse(x)` to trigger a compilation error if the condition `x` is false. The `name` parameter provides a unique identifier for the assertion.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_COMPILE_TIME_ASSERT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_COMPILE_TIME_ASSERT(name, x) FailToCompileIf_x_IsFalse(x)\n```\n\n----------------------------------------\n\nTITLE: TTF_FontIsFixedWidth Function\nDESCRIPTION: Queries whether a font is fixed-width (monospace). Returns a boolean value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_37\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_FontIsFixedWidth(const TTF_Font *font);                                                                                           // Query whether a font is fixed-width.\n```\n\n----------------------------------------\n\nTITLE: SDL_MessageBoxFlags Typedef Definition\nDESCRIPTION: Defines the SDL_MessageBoxFlags type as a Uint32, which is used to represent the message box flags. This allows for bitwise operations to combine multiple flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_MessageBoxFlags;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MainThreadCallback in C\nDESCRIPTION: Defines a function pointer type named SDL_MainThreadCallback. This callback is designed to be executed on the main thread. It accepts a void pointer as its argument, allowing for the passing of arbitrary data to the callback function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MainThreadCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_MainThreadCallback)(void *userdata);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetTextSubStringForLine Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_GetTextSubStringForLine function in C. This function retrieves the substring of a text object that corresponds to a specified line. The function takes a TTF_Text pointer, an integer representing the line number, and a TTF_SubString pointer as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextSubStringForLine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSubStringForLine(TTF_Text *text, int line, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_EGL_LIBRARY in C\nDESCRIPTION: This code snippet defines the SDL_HINT_EGL_LIBRARY macro, which is used to specify the EGL library to load when using SDL with EGL for OpenGL context management. The hint should be set before creating an OpenGL window or context.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_EGL_LIBRARY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EGL_LIBRARY \"SDL_EGL_LIBRARY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetAppleSFSymbolsNameForButton Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerGetAppleSFSymbolsNameForButton function, which returns the sfSymbolsName associated with a specific button on a game controller for Apple platforms.  It takes a SDL_GameController pointer and a SDL_GameControllerButton enum as input, and returns a const char* which is the SF Symbols name, or NULL if not found. The function is available since SDL 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetAppleSFSymbolsNameForButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GameControllerGetAppleSFSymbolsNameForButton(SDL_GameController *gamecontroller, SDL_GameControllerButton button);\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicUnlock Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_AtomicUnlock function, which takes a pointer to an SDL_SpinLock as input and returns void. This function unlocks a spin lock by setting its value to 0, allowing other threads to acquire it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicUnlock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AtomicUnlock(SDL_SpinLock *lock);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_QNXNTO Macro in C\nDESCRIPTION: This code snippet demonstrates how the SDL_PLATFORM_QNXNTO macro is defined. It is a preprocessor macro that is set to 1 when the code is being compiled for the QNX Neutrino operating system. This allows platform-specific code to be conditionally compiled based on the value of this macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_QNXNTO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_QNXNTO 1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_WGI C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_WGI macro, which is used to set the hint controlling the use of Windows.Gaming.Input for controller handling in SDL. The hint can be set to \"0\" to disable WGI or \"1\" (default) to enable it. This must be done before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_WGI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_WGI \"SDL_JOYSTICK_WGI\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RectToFRect Function Definition in C\nDESCRIPTION: This code snippet shows the function definition of SDL_RectToFRect in C. It takes a pointer to an SDL_Rect and a pointer to an SDL_FRect as input. It converts the SDL_Rect to an SDL_FRect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RectToFRect.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_FORCE_INLINE void SDL_RectToFRect(const SDL_Rect *rect, SDL_FRect *frect);\n```\n\n----------------------------------------\n\nTITLE: SDL_MAX_SINT16 Macro Definition (C)\nDESCRIPTION: Defines the SDL_MAX_SINT16 macro as the maximum value for a Sint16, which is 32767. This macro is a constant expression that can be used in C code to represent the maximum value for a signed 16-bit integer within the SDL3 framework. It ensures portability and consistency across different platforms.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Sint16.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_MAX_SINT16  ((Sint16)0x7FFF)        /* 32767 */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_WINDOWPOS_CENTERED_MASK in C\nDESCRIPTION: This snippet defines the SDL_WINDOWPOS_CENTERED_MASK macro, which is a constant used to help center the window. It is used with SDL_WINDOWPOS_CENTERED and SDL_WINDOWPOS_CENTERED_DISPLAY to calculate the centered position. The mask value is 0x2FFF0000u.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINDOWPOS_CENTERED_MASK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_CENTERED_MASK    0x2FFF0000u\n```\n\n----------------------------------------\n\nTITLE: SDL_Haptic Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_Haptic structure as an opaque type.  It serves as a handle for an SDL haptic device and is used with functions like SDL_OpenHaptic and SDL_CloseHaptic. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Haptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Haptic SDL_Haptic;\n```\n\n----------------------------------------\n\nTITLE: SDL_iPhoneSetAnimationCallback Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_iPhoneSetAnimationCallback function in C. It defines the function signature with parameters for the window, interval, callback function, and a callback parameter.  The callback function is executed after a specified number of frames.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_iPhoneSetAnimationCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_iPhoneSetAnimationCallback(SDL_Window * window, int interval, SDL_iOSAnimationCallback callback, void *callbackParam);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Data using SDL_SensorGetData in C\nDESCRIPTION: Retrieves the current state of an opened sensor using SDL_SensorGetData. Requires an SDL_Sensor object, a float array to store the data, and the number of values to retrieve. Returns 0 on success, -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SensorGetData(SDL_Sensor *sensor, float *data, int num_values);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticCondition Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_HapticCondition structure, which is used to specify parameters for condition-based haptic effects such as spring, damper, inertia, and friction. It includes members for direction, duration, delay, trigger, saturation levels, coefficients, deadband size, and center position for each axis (X, Y, Z).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticCondition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticCondition\n{\n    /* Header */\n    SDL_HapticEffectType type;      /**< SDL_HAPTIC_SPRING, SDL_HAPTIC_DAMPER,\n                                         SDL_HAPTIC_INERTIA or SDL_HAPTIC_FRICTION */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect. */\n    Uint16 delay;           /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;          /**< Button that triggers the effect. */\n    Uint16 interval;        /**< How soon it can be triggered again after button. */\n\n    /* Condition */\n    Uint16 right_sat[3];    /**< Level when joystick is to the positive side; max 0xFFFF. */\n    Uint16 left_sat[3];     /**< Level when joystick is to the negative side; max 0xFFFF. */\n    Sint16 right_coeff[3];  /**< How fast to increase the force towards the positive side. */\n    Sint16 left_coeff[3];  /**< How fast to increase the force towards the negative side. */\n    Uint16 deadband[3];     /**< Size of the dead zone; max 0xFFFF: whole axis-range when 0-centered. */\n    Sint16 center[3];       /**< Position of the dead zone. */\n} SDL_HapticCondition;\n```\n\n----------------------------------------\n\nTITLE: Using SDL_WPRINTF_VARARG_FUNC with fwprintf in C\nDESCRIPTION: Illustrates the use of SDL_WPRINTF_VARARG_FUNC with the fwprintf function.  It annotates that the second parameter of fwprintf should be a wprintf-style format wide string, enabling compiler warnings for incorrect usage.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WPRINTF_VARARG_FUNC.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint fwprintf(FILE *f, const wchar_t *fmt, ...) SDL_WPRINTF_VARARG_FUNC(2);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_bus_type Enumeration Definition in C\nDESCRIPTION: This code snippet defines the SDL_hid_bus_type enumeration in C. It specifies the different types of buses that a HID device can use, such as USB, Bluetooth, I2C, and SPI.  It is available since SDL 3.2.0 and is part of the SDL_hidapi.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_bus_type.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_hid_bus_type {\n    /** Unknown bus type */\n    SDL_HID_API_BUS_UNKNOWN = 0x00,\n\n    /** USB bus\n       Specifications:\n       https://usb.org/hid */\n    SDL_HID_API_BUS_USB = 0x01,\n\n    /** Bluetooth or Bluetooth LE bus\n       Specifications:\n       https://www.bluetooth.com/specifications/specs/human-interface-device-profile-1-1-1/\n       https://www.bluetooth.com/specifications/specs/hid-service-1-0/\n       https://www.bluetooth.com/specifications/specs/hid-over-gatt-profile-1-0/ */\n    SDL_HID_API_BUS_BLUETOOTH = 0x02,\n\n    /** I2C bus\n       Specifications:\n       https://docs.microsoft.com/previous-versions/windows/hardware/design/dn642101(v=vs.85) */\n    SDL_HID_API_BUS_I2C = 0x03,\n\n    /** SPI bus\n       Specifications:\n       https://www.microsoft.com/download/details.aspx?id=103325 */\n    SDL_HID_API_BUS_SPI = 0x04\n\n} SDL_hid_bus_type;\n```\n\n----------------------------------------\n\nTITLE: Getting Font Script C\nDESCRIPTION: This function retrieves the script used for text shaping with the given font. It requires a valid TTF_Font pointer and returns a Uint32 representing the script.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetFontScript(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetGPUTextureName Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetGPUTextureName function in C. This function is used to set a text label for a GPU texture. It takes a GPU device context, a GPU texture, and a C-style string as input. This is a non-thread safe function and should be used with caution.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPUTextureName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetGPUTextureName(\n    SDL_GPUDevice *device,\n    SDL_GPUTexture *texture,\n    const char *text);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_FRAMEBUFFER_ACCELERATION C\nDESCRIPTION: Defines the SDL_HINT_FRAMEBUFFER_ACCELERATION macro for use with SDL_SetHint. This hint controls the use of 3D acceleration for the SDL screen surface. The value can be 0 (disable), 1 (enable with default renderer), or a specific rendering driver (e.g., \"direct3d\", \"opengl\").\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_FRAMEBUFFER_ACCELERATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_FRAMEBUFFER_ACCELERATION \"SDL_FRAMEBUFFER_ACCELERATION\"\n```\n\n----------------------------------------\n\nTITLE: SDL_InsertTrayEntryAt Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_InsertTrayEntryAt function in C. It takes a tray menu, a position, a label string, and tray entry flags as input and returns a pointer to the newly created tray entry or NULL if the position is out of bounds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_InsertTrayEntryAt.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TrayEntry * SDL_InsertTrayEntryAt(SDL_TrayMenu *menu, int pos, const char *label, SDL_TrayEntryFlags flags);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUTF8_Shaded_Wrapped Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_RenderUTF8_Shaded_Wrapped function in C. It takes a TTF_Font pointer, a UTF-8 encoded character pointer, SDL_Color structures for foreground and background colors, and a Uint32 wrapLength. It returns a pointer to an SDL_Surface, which is the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUTF8_Shaded_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUTF8_Shaded_Wrapped(TTF_Font *font,\n                const char *text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Getting HarfBuzz Version with SDL_ttf in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetHarfBuzzVersion function. It retrieves the major, minor, and patch version numbers of the HarfBuzz library used by SDL_ttf. The function populates the provided integer pointers with the respective version components. If HarfBuzz is unavailable, it returns 0.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetHarfBuzzVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_GetHarfBuzzVersion(int *major, int *minor, int *patch);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticRamp Structure Definition in C\nDESCRIPTION: Defines the SDL_HapticRamp structure used to configure a ramp haptic effect. The structure contains fields for effect type, direction, duration, delay, trigger button/interval, start/end strengths, and attack/fade envelope parameters. It is exclusively for the SDL_HAPTIC_RAMP effect type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticRamp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticRamp\n{\n    /* Header */\n    Uint16 type;            /**< SDL_HAPTIC_RAMP */\n    SDL_HapticDirection direction;  /**< Direction of the effect. */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect. */\n    Uint16 delay;           /**< Delay before starting the effect. */\n\n    /* Trigger */\n    Uint16 button;          /**< Button that triggers the effect. */\n    Uint16 interval;        /**< How soon it can be triggered again after button. */\n\n    /* Ramp */\n    Sint16 start;           /**< Beginning strength level. */\n    Sint16 end;             /**< Ending strength level. */\n\n    /* Envelope */\n    Uint16 attack_length;   /**< Duration of the attack. */\n    Uint16 attack_level;    /**< Level at the start of the attack. */\n    Uint16 fade_length;     /**< Duration of the fade. */\n    Uint16 fade_level;      /**< Level at the end of the fade. */\n} SDL_HapticRamp;\n```\n\n----------------------------------------\n\nTITLE: SDL_MapRGB Function Signature in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_MapRGB function, which maps an RGB triple to an opaque pixel value. It requires the SDL3/SDL_pixels.h header file and takes a pixel format, palette, and RGB values as input, returning a pixel value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MapRGB.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_MapRGB(const SDL_PixelFormatDetails *format, const SDL_Palette *palette, Uint8 r, Uint8 g, Uint8 b);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_REQUIRES_SHARED Macro in C\nDESCRIPTION: This code snippet defines the SDL_REQUIRES_SHARED macro, which is a wrapper around the SDL_THREAD_ANNOTATION_ATTRIBUTE__ macro, used to specify that a shared capability 'x' is required for thread safety analysis. It utilizes Clang's thread safety features to ensure proper synchronization in multithreaded environments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_REQUIRES_SHARED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_REQUIRES_SHARED(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(requires_shared_capability(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_floor Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_floor function, which computes the floor of a double-precision floating-point value. It takes a double as input and returns a double representing the floor of the input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_floor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_floor(double x);\n```\n\n----------------------------------------\n\nTITLE: Pausing Music with SDL_mixer in C\nDESCRIPTION: The Mix_PauseMusic function pauses the music stream. This function does not require any input and does not return any value. The paused music can be resumed by calling Mix_ResumeMusic(). It's part of the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_PauseMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_PauseMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GamepadButtonLabel enum in C\nDESCRIPTION: This code snippet defines the `SDL_GamepadButtonLabel` enumeration in C. It provides a set of predefined labels for common gamepad face buttons, such as A, B, X, Y, Cross, Circle, Square, and Triangle, along with an Unknown label. These labels are intended for displaying button prompts within applications using the SDL3 library, available since version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadButtonLabel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GamepadButtonLabel\n{\n    SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN,\n    SDL_GAMEPAD_BUTTON_LABEL_A,\n    SDL_GAMEPAD_BUTTON_LABEL_B,\n    SDL_GAMEPAD_BUTTON_LABEL_X,\n    SDL_GAMEPAD_BUTTON_LABEL_Y,\n    SDL_GAMEPAD_BUTTON_LABEL_CROSS,\n    SDL_GAMEPAD_BUTTON_LABEL_CIRCLE,\n    SDL_GAMEPAD_BUTTON_LABEL_SQUARE,\n    SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE\n} SDL_GamepadButtonLabel;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_STEAM in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_STEAM macro, which represents the name of the hint used to control the HIDAPI driver for Bluetooth Steam Controllers. This allows developers to set the hint using SDL_SetHint to enable or disable the driver. The hint's value can be either \"0\" (disabled) or \"1\" (enabled).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_STEAM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_STEAM \"SDL_JOYSTICK_HIDAPI_STEAM\"\n```\n\n----------------------------------------\n\nTITLE: Defining the SDL_WindowsMessageHook Callback in C\nDESCRIPTION: This code snippet defines the signature of the SDL_WindowsMessageHook callback function in C. This callback is used to intercept and process Windows messages before SDL handles them. The 'userdata' parameter allows passing application-specific data to the hook, and 'msg' is a pointer to the Windows message structure. The function should return 'true' to allow the message to continue processing or 'false' to drop it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WindowsMessageHook.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef bool (SDLCALL *SDL_WindowsMessageHook)(void *userdata, MSG *msg);\n```\n\n----------------------------------------\n\nTITLE: SDL_isnanf Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_isnanf function in the C programming language. It takes a float as input and returns an integer, which is non-zero if the input is NaN and 0 otherwise. This function is part of the SDL3 library and requires including SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isnanf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isnanf(float x);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetTextSubString Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_GetTextSubString function in the SDL_ttf library. This function retrieves a substring from a TTF_Text object based on a given byte offset. It requires a TTF_Text pointer, an integer offset, and a TTF_SubString pointer as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextSubString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSubString(TTF_Text *text, int offset, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_AddSocket Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_AddSocket function. This function adds a generic socket to a given socket set. It takes the socket set and the generic socket as parameters and returns an integer representing the new size of the set or -1 if an error occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_AddSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_AddSocket(SDLNet_SocketSet set, SDLNet_GenericSocket sock);\n```\n\n----------------------------------------\n\nTITLE: Set Text Font C\nDESCRIPTION: This function sets the font used by a text object.  It takes a TTF_Text pointer and a TTF_Font pointer as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_86\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextFont(TTF_Text *text, TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Wiki Category Comment Example in C\nDESCRIPTION: This snippet shows how to specify a category for symbols within an SDL header file using a special comment. All symbols defined after this comment will be categorized under 'Blah' in the wiki.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/documentation-rules.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\n/* WIKI CATEGORY: Blah */\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_X11_VISUALID in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_VISUALID hint as a string literal \"SDL_VIDEO_X11_VISUALID\". This hint allows forcing a specific visual ID for X11 display modes. It must be set before the video subsystem is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_X11_VISUALID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_VISUALID \"SDL_VIDEO_X11_VISUALID\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_FRAMESIZE Macro Definition in C\nDESCRIPTION: This macro calculates the size of an audio frame (in bytes) based on the audio format and number of channels specified in the provided SDL_AudioSpec. It uses the SDL_AUDIO_BYTESIZE macro to get the size of each individual audio sample and multiplies it by the number of channels in the audio stream. This value represents the number of bytes per frame.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_FRAMESIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_FRAMESIZE(x) (SDL_AUDIO_BYTESIZE((x).format) * (x).channels)\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Blended Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderText_Blended function in C. This function renders UTF-8 encoded text using the specified font and foreground color, returning a new 32-bit ARGB surface or NULL if an error occurred. It depends on the SDL_ttf library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderText_Blended.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Blended(TTF_Font *font, const char *text, size_t length, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE hint as a string literal. This hint controls whether extended input reports are used for PS5 controllers when using the HIDAPI driver. Setting it to \"1\" enables extended reports, while \"0\" disables them.  Extended reports enable rumble on Bluetooth PS5 controllers but may break DirectInput handling for applications that don't use SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE \"SDL_JOYSTICK_HIDAPI_PS5_RUMBLE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GDKGetDefaultUser Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GDKGetDefaultUser function in C. It takes a pointer to an XUserHandle as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GDKGetDefaultUser.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GDKGetDefaultUser(XUserHandle * outUserHandle);\n```\n\n----------------------------------------\n\nTITLE: Mix_PauseGroup Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the Mix_PauseGroup function in C, which pauses playing of a group of channels by arbitrary tag. The `tag` parameter is an integer value assigned to channels to search for.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_PauseGroup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_PauseGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GPURenderPass structure\nDESCRIPTION: Defines the SDL_GPURenderPass structure as an opaque handle using a typedef. This handle is used to represent a render pass in the SDL3 GPU rendering API. The structure is defined as a pointer to an incomplete struct, making it opaque to the user.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPURenderPass.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPURenderPass SDL_GPURenderPass;\n```\n\n----------------------------------------\n\nTITLE: Get Android JNI Environment in C\nDESCRIPTION: Retrieves the Android Java Native Interface Environment (JNIEnv) for the current thread. This allows native C code to interact with the Java Virtual Machine on Android. Returns a pointer to the JNIEnv or 0 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidGetJNIEnv.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_AndroidGetJNIEnv(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_FlashWindow Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_FlashWindow function in C, which takes an SDL_Window pointer and an SDL_FlashOperation as input. It returns an integer, with 0 indicating success and a negative value indicating failure.  Requires SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FlashWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_FlashWindow(SDL_Window * window, SDL_FlashOperation operation);\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_open_path Syntax (C)\nDESCRIPTION: Defines the syntax for SDL_hid_open_path function which opens a HID device by its path name. It takes the path as a const char pointer and an integer bExclusive, returning a pointer to a SDL_hid_device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_open_path.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_hid_device * SDL_hid_open_path(const char *path, int bExclusive);\n```\n\n----------------------------------------\n\nTITLE: Get Controller Product Version in C\nDESCRIPTION: This function retrieves the USB product version of a given SDL game controller. It requires a valid SDL_GameController pointer as input and returns a Uint16 representing the product version. If the product version is unavailable, it returns 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetProductVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GameControllerGetProductVersion(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Referencing and Assigning SDLNet_Address\nDESCRIPTION: Example of how to use SDLNet_RefAddress to increment the reference count of an SDLNet_Address and assign it to a new variable. This is commonly used when sharing address objects between different parts of an application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_RefAddress.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nmyAddr = SDLNet_RefAddress(yourAddr);\n```\n\n----------------------------------------\n\nTITLE: TTF_UpdateText Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_UpdateText function in C. It takes a pointer to a TTF_Text object as input and returns a boolean value indicating success or failure. Call SDL_GetError() for more information on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_UpdateText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_UpdateText(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Updating Texture from Surface Pixels in SDL2 (C)\nDESCRIPTION: This code updates an SDL_Texture with pixel data from an SDL_Surface. It copies the pixel data from the surface to the texture, allowing the texture to be rendered to the screen.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nSDL_UpdateTexture(sdlTexture, NULL, screen->pixels, screen->pitch);\n```\n\n----------------------------------------\n\nTITLE: Free Animation Resources C\nDESCRIPTION: This function disposes of an IMG_Animation and frees its allocated resources. It takes a pointer to an IMG_Animation object as its argument. After calling this function, the `anim` pointer should be considered invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nvoid IMG_FreeAnimation(IMG_Animation *anim);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AVX512F_INTRINSICS in C\nDESCRIPTION: This code snippet defines the SDL_AVX512F_INTRINSICS macro to 1. This indicates that the compiler supports Intel AVX-512F intrinsics. The macro is available since SDL 3.2.0 and automatically includes `<immintrin.h>`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AVX512F_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AVX512F_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_FORCE_INLINE in C\nDESCRIPTION: This code snippet shows the definition of the SDL_FORCE_INLINE macro, which expands to __forceinline on compilers that support it, or static SDL_INLINE otherwise. This macro encourages the compiler to inline functions for performance optimization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FORCE_INLINE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_FORCE_INLINE __forceinline\n```\n\n----------------------------------------\n\nTITLE: SDL_RWread Function Signature in C\nDESCRIPTION: This code snippet shows the function signature of the SDL_RWread function. It takes an SDL_RWops pointer, a void pointer, and two size_t values as input. It returns a size_t representing the number of objects read.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_RWread(SDL_RWops *context,\n                  void *ptr, size_t size,\n                  size_t maxnum);\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop End Time Mix_GetMusicLoopEndTime C\nDESCRIPTION: Retrieves the loop end time position of a music stream, measured in seconds. When the music reaches this point during playback, it will loop back to the loop start time.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_27\n\nLANGUAGE: c\nCODE:\n```\ndouble Mix_GetMusicLoopEndTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Instance ID in C\nDESCRIPTION: Retrieves the instance ID of a specified SDL_Sensor object. The function takes an SDL_Sensor pointer as input and returns an SDL_SensorID representing the instance ID, or -1 if the sensor pointer is NULL. This function is available since SDL 2.0.9.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetInstanceID.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_SensorID SDL_SensorGetInstanceID(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: SDL_IsGamepad Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_IsGamepad function in C. It takes an SDL_JoystickID as input and returns a boolean value indicating whether the joystick is a supported gamepad.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsGamepad.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsGamepad(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_IMAGE_MAJOR_VERSION in C\nDESCRIPTION: This code snippet shows the definition of the SDL_IMAGE_MAJOR_VERSION macro. It is a preprocessor definition that assigns the value 3 to the macro. This indicates that the major version of the SDL_image library being used is version 3. This definition is located in the SDL3_image/SDL_image.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/SDL_IMAGE_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_MAJOR_VERSION 3\n```\n\n----------------------------------------\n\nTITLE: Get Current Audio Driver Name - C\nDESCRIPTION: Retrieves the name of the currently initialized audio driver using the SDL_GetCurrentAudioDriver function in SDL3. Returns a const char* representing the driver's name or NULL if no driver is initialized. Safe to call from any thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCurrentAudioDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetCurrentAudioDriver(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUTO_UPDATE_SENSORS in C\nDESCRIPTION: Defines the SDL_HINT_AUTO_UPDATE_SENSORS hint as a string literal. This hint is used to control whether SDL automatically updates sensor state or if the user needs to call SDL_UpdateSensors() manually. The hint can be set anytime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUTO_UPDATE_SENSORS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUTO_UPDATE_SENSORS \"SDL_AUTO_UPDATE_SENSORS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_copysign Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_copysign function in C. It takes two double-precision floating-point values, x and y, as input. The function returns a double-precision floating-point value with the magnitude of x and the sign of y.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_copysign.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_copysign(double x, double y);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetSurfaceProperties Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetSurfaceProperties in C to get the properties associated with a given SDL_Surface. It takes a pointer to an SDL_Surface as input and returns an SDL_PropertiesID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfaceProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetSurfaceProperties(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetBindForAxis Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerGetBindForAxis function. It takes a game controller pointer and an axis enum value as input, and returns an SDL_GameControllerButtonBind describing the binding.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetBindForAxis.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nextern DECLSPEC SDL_GameControllerButtonBind SDLCALL\nSDL_GameControllerGetBindForAxis(SDL_GameController *gamecontroller,\n                                 SDL_GameControllerAxis axis);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickDetachVirtual Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickDetachVirtual function. It takes an integer `device_index` as input, which is a value previously returned by `SDL_JoystickAttachVirtual`. The function returns 0 on success and -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickDetachVirtual.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickDetachVirtual(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT Macro in C\nDESCRIPTION: Defines the macro `SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT` to be used as a hint for controlling override-redirect behavior in X11 windows. This macro should be used with SDL_SetHint before window creation to influence the override-redirect flag.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT \"SDL_X11_FORCE_OVERRIDE_REDIRECT\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINRT_PRIVACY_POLICY_URL in C\nDESCRIPTION: Defines the SDL_HINT_WINRT_PRIVACY_POLICY_URL macro, which is used as the key for setting a hint that specifies the URL to a WinRT app's privacy policy. The hint should be set before calling SDL_Init().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINRT_PRIVACY_POLICY_URL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINRT_PRIVACY_POLICY_URL \"SDL_WINRT_PRIVACY_POLICY_URL\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAudioDeviceFormat Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAudioDeviceFormat function in C. It takes an SDL_AudioDeviceID, an SDL_AudioSpec pointer, and an int pointer as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioDeviceFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec *spec, int *sample_frames);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GlobFlags in C\nDESCRIPTION: This code snippet shows the definition of SDL_GlobFlags as a Uint32 and the SDL_GLOB_CASEINSENSITIVE flag, which can be used to perform case-insensitive path matching when using functions like SDL_GlobDirectory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GlobFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_GlobFlags;\n\n#define SDL_GLOB_CASEINSENSITIVE (1u << 0)\n```\n\n----------------------------------------\n\nTITLE: MIX_EFFECTSMAXSPEED Macro Definition\nDESCRIPTION: This code snippet defines the MIX_EFFECTSMAXSPEED macro as a string literal. This macro is likely related to the maximum speed or processing capability of audio effects within the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_UnregisterAllEffects.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define MIX_EFFECTSMAXSPEED  \"MIX_EFFECTSMAXSPEED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyCond Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_DestroyCond function. It takes a pointer to an SDL_cond struct as input, which represents the condition variable to be destroyed. This function releases resources associated with the condition variable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DestroyCond.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyCond(SDL_cond * cond);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Write Function Signature\nDESCRIPTION: Illustrates the updated signature of SDL_WriteIO in SDL3.  It takes an SDL_IOStream context, a pointer to the buffer, and the total size to write in bytes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteIO(SDL_IOStream *context, const void *ptr, size_t size);\n```\n\n----------------------------------------\n\nTITLE: SDL_AndroidSendMessage Syntax in C\nDESCRIPTION: The SDL_AndroidSendMessage function sends a user command to SDLActivity. The command must be greater than or equal to 0x8000. The 'param' argument is a user-defined parameter. Override 'boolean onUnhandledMessage(Message msg)' to handle the message.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidSendMessage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AndroidSendMessage(Uint32 command, int param);\n```\n\n----------------------------------------\n\nTITLE: SDL_DetachThread Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_DetachThread function in C. It takes a pointer to an SDL_Thread as input and has no return value. It allows a thread to clean up on exit without intervention.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DetachThread.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DetachThread(SDL_Thread * thread);\n```\n\n----------------------------------------\n\nTITLE: Logging Message with Category and Priority in SDL (C)\nDESCRIPTION: Logs a message using a specified category, priority, and a printf-style format string with a variable argument list. It is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogMessageV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogMessageV(int category,\n                     SDL_LogPriority priority,\n                     const char *fmt, va_list ap);\n```\n\n----------------------------------------\n\nTITLE: SDL_tolower Syntax in C\nDESCRIPTION: Shows the syntax of the SDL_tolower function, which takes an integer representing a character and returns its lowercase equivalent, or the original character if no conversion is possible.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_tolower.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_tolower(int x);\n```\n\n----------------------------------------\n\nTITLE: SDL3 Surface Creation (New)\nDESCRIPTION: This code snippet shows the new way of creating a surface with an indexed pixel format and accessing its palette in SDL3. It showcases using SDL_CreateSurface and SDL_CreateSurfacePalette to create and access the palette respectively.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_37\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *surface = SDL_CreateSurface(32, 32, SDL_PIXELFORMAT_INDEX8);\nSDL_Palette *palette = SDL_CreateSurfacePalette(surface);\n...\n```\n\n----------------------------------------\n\nTITLE: Get Android External Storage Path in C\nDESCRIPTION: Retrieves the path used for external storage for an Android application. This function is a C wrapper over android.content.Context.getExternalFilesDir(). Returns the path on success or NULL on failure. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidExternalStoragePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetAndroidExternalStoragePath(void);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Attachment Status in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickGetAttached function in C. It takes a SDL_Joystick pointer as input and returns an SDL_bool value indicating whether the joystick is attached.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetAttached.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_JoystickGetAttached(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_EGLint in C\nDESCRIPTION: This code snippet shows the definition of the SDL_EGLint type as a typedef for an integer. It is used as an EGL integer attribute when creating EGL surfaces in the SDL3 library. This type is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGLint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int SDL_EGLint;\n```\n\n----------------------------------------\n\nTITLE: SDL_PRINTF_VARARG_FUNCV Macro Definition in C\nDESCRIPTION: Defines the SDL_PRINTF_VARARG_FUNCV macro, which adds a compiler attribute to functions that take a format string and a va_list, enabling format string checking. The macro takes the format argument number as a parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRINTF_VARARG_FUNCV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRINTF_VARARG_FUNCV( fmtargnumber ) __attribute__(( format( __printf__, fmtargnumber, 0 )))\n```\n\n----------------------------------------\n\nTITLE: SDL_GetBooleanProperty Syntax\nDESCRIPTION: Retrieves a boolean property from a group of properties. The function takes a SDL_PropertiesID, the name of the property, and a default boolean value. It returns the value of the property if it exists and is a boolean, otherwise it returns the default value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetBooleanProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetBooleanProperty(SDL_PropertiesID props, const char *name, bool default_value);\n```\n\n----------------------------------------\n\nTITLE: Unmapping a GPU Transfer Buffer in C\nDESCRIPTION: This code snippet demonstrates the syntax for the SDL_UnmapGPUTransferBuffer function in C. This function unmaps a previously mapped GPU transfer buffer associated with a given SDL_GPUDevice. It requires pointers to both the device and the transfer buffer as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnmapGPUTransferBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnmapGPUTransferBuffer(\n    SDL_GPUDevice *device,\n    SDL_GPUTransferBuffer *transfer_buffer);\n```\n\n----------------------------------------\n\nTITLE: Fixing libdl.so Symlink\nDESCRIPTION: Fixes the libdl.so symlink within the sysroot, as the default absolute path does not work correctly in this setup. This involves removing the old symlink and creating a new relative symlink.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo rm -rf $SYSROOT/usr/lib/arm-linux-gnueabihf/libdl.so\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo ln -s ../../../lib/arm-linux-gnueabihf/libdl.so.2 $SYSROOT/usr/lib/arm-linux-gnueabihf/libdl.so\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DialogFileFilter Structure\nDESCRIPTION: This code defines the SDL_DialogFileFilter structure, which consists of a name (user-readable label for the filter) and a pattern (a semicolon-separated list of file extensions or a wildcard).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DialogFileFilter.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_DialogFileFilter\n{\n    const char *name;\n    const char *pattern;\n} SDL_DialogFileFilter;\n```\n\n----------------------------------------\n\nTITLE: Get Number of Joystick Buttons in C\nDESCRIPTION: Retrieves the number of buttons on a joystick. Requires an SDL_Joystick pointer as input. Returns the number of buttons or a negative error code on failure.  Use SDL_GetError() to get more information about the failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickNumButtons.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickNumButtons(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Get Text Font C\nDESCRIPTION: This function gets the font used by a text object. It takes a TTF_Text pointer as input and returns a pointer to the TTF_Font that is being used, or NULL if there's an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_87\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_GetTextFont(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Get Logical CPU Cores SDL3 C\nDESCRIPTION: Retrieves the number of logical CPU cores available in the system using SDL3. This function is thread-safe and returns an integer representing the number of logical cores. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumLogicalCPUCores.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumLogicalCPUCores(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph32_Solid Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_RenderGlyph32_Solid function in C. It takes a TTF_Font pointer, a Uint32 character code, and an SDL_Color as input, and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderGlyph32_Solid.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph32_Solid(TTF_Font *font,\n                Uint32 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Get Default Cursor in SDL\nDESCRIPTION: This code snippet shows the syntax for using SDL_GetDefaultCursor, which retrieves the default cursor for the application. The function takes no arguments and returns a pointer to an SDL_Cursor structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDefaultCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor* SDL_GetDefaultCursor(void);\n```\n\n----------------------------------------\n\nTITLE: Logging a Critical Message using SDL_LogCritical in C\nDESCRIPTION: Logs a critical message to the SDL logging system. The message is formatted using a printf-style format string and can include additional parameters.  Requires the SDL3 library and inclusion of SDL_log.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogCritical.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_LogCritical(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_CreateServer Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_CreateServer function, which creates a server that listens for incoming connections. It takes an SDLNet_Address and a port number as input and returns a pointer to an SDLNet_Server.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_CreateServer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDLNet_Server * SDLNet_CreateServer(SDLNet_Address *addr, Uint16 port);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RPI_VIDEO_LAYER in C\nDESCRIPTION: Defines the SDL_HINT_RPI_VIDEO_LAYER macro, which is used to set the desired Dispmanx layer (Z-order) for the SDL window on Raspberry Pi. The default value is 10000. It is defined in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RPI_VIDEO_LAYER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RPI_VIDEO_LAYER           \"SDL_RPI_VIDEO_LAYER\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DisplayID in C\nDESCRIPTION: This code snippet defines the SDL_DisplayID type as an alias for Uint32. This ID is used to uniquely identify displays connected to the system during the application's lifetime. It's introduced in SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DisplayID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_DisplayID;\n```\n\n----------------------------------------\n\nTITLE: Freeing HID Device Enumeration List in C\nDESCRIPTION: Frees a linked list of HID device information structures. This function deallocates the memory allocated by a previous call to `SDL_hid_enumerate`. It takes a pointer to the head of the linked list as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_free_enumeration.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_hid_free_enumeration(SDL_hid_device_info *devs);\n```\n\n----------------------------------------\n\nTITLE: Query Mouse Haptic Capabilities in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_IsMouseHaptic function in C. It takes no arguments and returns a boolean value indicating whether the current mouse has haptic capabilities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsMouseHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsMouseHaptic(void);\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop Start Time Mix_GetMusicLoopStartTime C\nDESCRIPTION: Retrieves the loop start time position of a music stream, measured in seconds. This is particularly relevant for looping music, indicating where the loop begins.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_26\n\nLANGUAGE: c\nCODE:\n```\ndouble Mix_GetMusicLoopStartTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticDestroyEffect Syntax in C\nDESCRIPTION: Destroys a haptic effect on a specified SDL_Haptic device. This function takes a pointer to an SDL_Haptic struct and an integer representing the ID of the effect to destroy. The effect is stopped if it's currently playing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticDestroyEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_HapticDestroyEffect(SDL_Haptic * haptic,\n                             int effect);\n```\n\n----------------------------------------\n\nTITLE: Installing Java environment\nDESCRIPTION: Installs the minimal Java environment including OpenJDK, Ant, and Android SDK platform tools on Debian/Ubuntu systems. This is a prerequisite for building Android applications with SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install openjdk-17-jdk ant android-sdk-platform-tools-common\n```\n\n----------------------------------------\n\nTITLE: SDL_SetEventFilter Syntax in C\nDESCRIPTION: Shows the basic syntax for using the `SDL_SetEventFilter` function in C. This involves specifying a function pointer to an event filter and a void pointer for user data that will be passed to the filter function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetEventFilter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetEventFilter(SDL_EventFilter filter, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Using ADB to Push Files to Device\nDESCRIPTION: This command pushes a local file to a specified remote path on the Android device using adb push. You can push data files or assets to the device for testing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nadb push local_file remote_path_and_file\n```\n\n----------------------------------------\n\nTITLE: Getting the active cursor with SDL_GetCursor in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetCursor function to get the active cursor. It returns a pointer to the current SDL_Cursor or NULL if there is no mouse.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor* SDL_GetCursor(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitScaled Macro Definition in C\nDESCRIPTION: Defines the SDL_BlitScaled macro as an alias for the SDL_UpperBlitScaled function. This provides a less confusing name for the function that performs scaled surface copies in SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UpperBlitScaled.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_BlitScaled SDL_UpperBlitScaled\n```\n\n----------------------------------------\n\nTITLE: SDL_TrayMenu Structure Definition in C\nDESCRIPTION: This snippet defines the SDL_TrayMenu structure as an opaque handle. It is used to represent a menu/submenu on a system tray object. The struct is available since SDL 3.2.0 and is defined in SDL3/SDL_tray.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TrayMenu.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TrayMenu SDL_TrayMenu;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLERCONFIG_FILE in C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLERCONFIG_FILE macro, used to specify a file containing game controller configuration data. This hint needs to be set before initializing the game controller subsystem with SDL_Init(SDL_INIT_GAMECONTROLLER).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_GAMECONTROLLERCONFIG_FILE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLERCONFIG_FILE \"SDL_GAMECONTROLLERCONFIG_FILE\"\n```\n\n----------------------------------------\n\nTITLE: Draw Renderer Text C\nDESCRIPTION: This function draws text to an SDL renderer. It takes a TTF_Text pointer, an x coordinate, and a y coordinate as input. It returns a boolean value indicating the success of the operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_74\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DrawRendererText(TTF_Text *text, float x, float y);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Blended Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderText_Blended function, which is used to render Latin1 text to an ARGB surface. It takes a font, text, and color as input and returns a surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderText_Blended.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderText_Blended(TTF_Font *font,\n                const char *text, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Fade Out Music Mix_FadeOutMusic C\nDESCRIPTION: Halts the music stream after fading it out over a specified time period. This function smoothly reduces the volume of the music before stopping playback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_8\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_FadeOutMusic(int ms);\n```\n\n----------------------------------------\n\nTITLE: Creating Surface Text Engine C\nDESCRIPTION: This function creates a text engine specifically for drawing text on SDL surfaces. It requires no input parameters and returns a pointer to the created TTF_TextEngine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_43\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateSurfaceTextEngine(void);\n```\n\n----------------------------------------\n\nTITLE: Mixer Initialization and Deinitialization\nDESCRIPTION: These functions initialize and deinitialize the SDL_mixer library. Mix_Init takes flags to specify which mixer subsystems to initialize. Mix_Quit deinitializes the library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nMIX_InitFlags Mix_Init(MIX_InitFlags flags);                                              // Initialize SDL_mixer.\nvoid Mix_Quit(void);                                                                      // Deinitialize SDL_mixer.\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Type for ID in SDL3 (C)\nDESCRIPTION: Retrieves the gamepad type associated with the given SDL_JoystickID. This function allows determining the type of gamepad before opening it. Returns the SDL_GamepadType.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadTypeForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadType SDL_GetGamepadTypeForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Get Assertion Handler Function Signature C\nDESCRIPTION: Retrieves the current assertion handler function pointer and associated user data.  The function signature defines the return type as SDL_AssertionHandler and accepts a pointer to a void pointer to store user data.  The function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAssertionHandler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AssertionHandler SDL_GetAssertionHandler(void **puserdata);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_ALTIVEC_INTRINSICS in C\nDESCRIPTION: This code snippet shows how the SDL_ALTIVEC_INTRINSICS macro is defined in C. It indicates that the compiler supports PowerPC Altivec intrinsics. When this macro is defined, SDL includes <altivec.h>.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ALTIVEC_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ALTIVEC_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: Create Android Project with Python\nDESCRIPTION: This Python script creates an Android project using Android aar-archives. It requires specifying the variant, the application package name, and a list of source files.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nbuild-scripts/create-android-project.py --variant aar com.yourcompany.yourapp < sources.list\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE in C\nDESCRIPTION: This macro defines the SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE hint, used to control extended input reports for PS4 controllers when using the HIDAPI driver. Setting this hint to \"1\" enables extended reports, allowing rumble on Bluetooth PS4 controllers, but potentially breaking DirectInput handling for applications not using SDL. Setting it to \"0\" disables extended reports (default).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE \"SDL_JOYSTICK_HIDAPI_PS4_RUMBLE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_LowerBlitScaled Syntax in C\nDESCRIPTION: This code snippet shows the function signature for SDL_LowerBlitScaled in C. It takes source and destination SDL_Surface pointers, along with source and destination SDL_Rect pointers, and returns an integer representing the success or failure of the blit operation.  It assumes input rectangles have already been clipped.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LowerBlitScaled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_LowerBlitScaled\n    (SDL_Surface * src, SDL_Rect * srcrect,\n    SDL_Surface * dst, SDL_Rect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseButtonEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_MouseButtonEvent structure in C. It includes members for the event type (SDL_MOUSEBUTTONDOWN or SDL_MOUSEBUTTONUP), timestamp, window ID, mouse instance ID, button index, state (SDL_PRESSED or SDL_RELEASED), click count, and X/Y coordinates relative to the window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MouseButtonEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MouseButtonEvent\n{\n    Uint32 type;        /**< SDL_MOUSEBUTTONDOWN or SDL_MOUSEBUTTONUP */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;    /**< The window with mouse focus, if any */\n    Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */\n    Uint8 button;       /**< The mouse button index */\n    Uint8 state;       /**< SDL_PRESSED or SDL_RELEASED */\n    Uint8 clicks;       /**< 1 for single-click, 2 for double-click, etc. */\n    Uint8 padding1;\n    Sint32 x;           /**< X coordinate, relative to window */\n    Sint32 y;           /**< Y coordinate, relative to window */\n} SDL_MouseButtonEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockMutex Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_UnlockMutex function in C. It takes a pointer to an SDL_Mutex as input and unlocks it, allowing other threads to access it.  It's crucial to unlock the mutex the same number of times it has been locked by the current thread to avoid undefined behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnlockMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockMutex(SDL_Mutex *mutex);\n```\n\n----------------------------------------\n\nTITLE: Mix_ClearError Macro Definition in C\nDESCRIPTION: This macro clears the last SDL_mixer error by calling SDL_ClearError. It is defined in SDL_mixer.h. Dependencies: SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_ClearError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define Mix_ClearError  SDL_ClearError\n```\n\n----------------------------------------\n\nTITLE: SDL Macro Renaming Script (Shell)\nDESCRIPTION: This command line uses the `rename_macros.py` script to replace renamed and/or removed SDL3 macros.  It also adds fixme comments on how to further improve the code, aiding in the migration process.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nrename_macros.py source_code_path\n```\n\n----------------------------------------\n\nTITLE: SDL_FRectEmpty Function Definition in C\nDESCRIPTION: This code snippet shows the definition of the `SDL_FRectEmpty` function in C. It takes a constant pointer to an `SDL_FRect` structure as input and returns an `SDL_bool` indicating whether the rectangle is empty. The function is marked as `SDL_FORCE_INLINE`, suggesting that the compiler should attempt to inline it for performance.  It's defined in `SDL_rect.h`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FRectEmpty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE SDL_bool SDL_FRectEmpty(const SDL_FRect *r);\n```\n\n----------------------------------------\n\nTITLE: Get Current EGL Display - C\nDESCRIPTION: Retrieves the currently active EGL display. It returns an SDL_EGLDisplay representing the display or NULL on failure. This function should be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGL_GetCurrentDisplay.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_EGLDisplay SDL_EGL_GetCurrentDisplay(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_DetachThread Syntax in C\nDESCRIPTION: This code shows the syntax of the SDL_DetachThread function. It takes an SDL_Thread pointer as an argument and detaches the associated thread, allowing it to be cleaned up automatically upon termination.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DetachThread.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DetachThread(SDL_Thread *thread);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_IME_SUPPORT_EXTENDED_TEXT in C\nDESCRIPTION: This code snippet defines the SDL_HINT_IME_SUPPORT_EXTENDED_TEXT macro, which is used to control whether extended IME text support is enabled in SDL. It's defined as a string literal.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_IME_SUPPORT_EXTENDED_TEXT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_IME_SUPPORT_EXTENDED_TEXT \"SDL_IME_SUPPORT_EXTENDED_TEXT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUBlitInfo Structure Definition in C\nDESCRIPTION: This code defines the `SDL_GPUBlitInfo` structure in C. It includes fields for the source and destination regions (`SDL_GPUBlitRegion`), a load operation (`SDL_GPULoadOp`), a clear color (`SDL_FColor`), flip mode (`SDL_FlipMode`), filter (`SDL_GPUFilter`), a boolean for cycling, and padding bytes. The structure is used to pass parameters to blitting functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBlitInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUBlitInfo {\n    SDL_GPUBlitRegion source;       /**< The source region for the blit. */\n    SDL_GPUBlitRegion destination;  /**< The destination region for the blit. */\n    SDL_GPULoadOp load_op;          /**< What is done with the contents of the destination before the blit. */\n    SDL_FColor clear_color;         /**< The color to clear the destination region to before the blit. Ignored if load_op is not SDL_GPU_LOADOP_CLEAR. */\n    SDL_FlipMode flip_mode;         /**< The flip mode for the source region. */\n    SDL_GPUFilter filter;           /**< The filter mode used when blitting. */\n    bool cycle;                 /**< true cycles the destination texture if it is already bound. */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_GPUBlitInfo;\n```\n\n----------------------------------------\n\nTITLE: SDL_Keysym Structure Definition in C\nDESCRIPTION: Defines the SDL_Keysym structure, used to represent a key event in SDL.  It contains the scancode (physical key), the keycode (virtual key), modifiers, and an unused field. The structure is defined in SDL_keyboard.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Keysym.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Keysym\n{\n    SDL_Scancode scancode;      /**< SDL physical key code - see SDL_Scancode for details */\n    SDL_Keycode sym;            /**< SDL virtual key code - see SDL_Keycode for details */\n    Uint16 mod;                 /**< current key modifiers */\n    Uint32 unused;\n} SDL_Keysym;\n```\n\n----------------------------------------\n\nTITLE: SDL_LockAudioDevice Syntax in C\nDESCRIPTION: Shows the syntax for the SDL_LockAudioDevice function in C. This function locks the audio device identified by its ID, preventing the audio callback from running. The parameter `dev` is the ID of the audio device to be locked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockAudioDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockAudioDevice(SDL_AudioDeviceID dev);\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseWheelEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the structure `SDL_MouseWheelEvent` which is used to store information about a mouse wheel event in SDL. It includes members for the event type, timestamp, window ID, mouse instance ID, scroll amounts (x and y), scroll direction, precise scroll amounts (preciseX and preciseY), and mouse coordinates (mouseX and mouseY).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MouseWheelEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MouseWheelEvent\n{\n    Uint32 type;        /**< SDL_MOUSEWHEEL */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;    /**< The window with mouse focus, if any */\n    Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */\n    Sint32 x;           /**< The amount scrolled horizontally, positive to the right and negative to the left */\n    Sint32 y;           /**< The amount scrolled vertically, positive away from the user and negative toward the user */\n    Uint32 direction;   /**< Set to one of the SDL_MOUSEWHEEL_* defines. When FLIPPED the values in X and Y will be opposite. Multiply by -1 to change them back */\n    float preciseX;     /**< The amount scrolled horizontally, positive to the right and negative to the left, with float precision (added in 2.0.18) */\n    float preciseY;     /**< The amount scrolled vertically, positive away from the user and negative toward the user, with float precision (added in 2.0.18) */\n    Sint32 mouseX;      /**< X coordinate, relative to window (added in 2.26.0) */\n    Sint32 mouseY;      /**< Y coordinate, relative to window (added in 2.26.0) */\n} SDL_MouseWheelEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_islower Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_islower function, which checks if a character is lowercase according to ASCII standards.  It takes an integer representing a character and returns a non-zero value if the character is lowercase 'a' to 'z', otherwise zero.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_islower.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_islower(int x);\n```\n\n----------------------------------------\n\nTITLE: Makefile rule for creating a macOS application bundle\nDESCRIPTION: This Makefile snippet shows how to create a macOS application bundle (.app) from an executable. It creates the necessary directories (Contents/MacOS, Contents/Resources), adds a PkgInfo file, and copies the executable into the bundle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/macos.md#_snippet_5\n\nLANGUAGE: make\nCODE:\n```\nbundle_contents = APP_NAME.app/Contents\nAPP_NAME_bundle: EXE_NAME\n\tmkdir -p $(bundle_contents)/MacOS\n\tmkdir -p $(bundle_contents)/Resources\n\techo \"APPL????\" > $(bundle_contents)/PkgInfo\n\t$(INSTALL_PROGRAM) $< $(bundle_contents)/MacOS/\n```\n\n----------------------------------------\n\nTITLE: SDL_SemPost Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_SemPost to increment a semaphore. It takes a pointer to an SDL_sem structure as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SemPost.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SemPost(SDL_sem * sem);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAudioStreamGain Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetAudioStreamGain function, which is used to change the gain of an audio stream. It takes an SDL_AudioStream pointer and a float value representing the gain as input. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioStreamGain.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetAudioStreamGain(SDL_AudioStream *stream, float gain);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogError Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_LogError function in C. This function allows logging of error messages with a specified category and a printf-style format string. It is part of the SDL library for logging and debugging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogError.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_LogError(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 in C\nDESCRIPTION: Defines a string constant representing the SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 hint. This hint controls whether the HIDAPI driver is used for XBox 360 controllers. The value can be set to \"0\" to disable or \"1\" to enable the driver. This should be set before initializing joysticks and gamepads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 \"SDL_JOYSTICK_HIDAPI_XBOX_360\"\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadBMP_IO Function Definition in C\nDESCRIPTION: The `IMG_LoadBMP_IO` function loads a BMP image directly from an `SDL_IOStream`.  It requires SDL_image and SDL3. It returns a pointer to an `SDL_Surface` structure if successful, or `NULL` if an error occurs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadBMP_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadBMP_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: TTF_CopyFont Function\nDESCRIPTION: Creates a copy of an existing TTF_Font object. This allows creating multiple fonts with the same properties without reloading the font data. The copied font needs to be freed when no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_CopyFont(TTF_Font *existing_font);                                                                                          // Create a copy of an existing font.\n```\n\n----------------------------------------\n\nTITLE: Check for Samsung DeX Mode in SDL3\nDESCRIPTION: This code snippet shows the syntax of the SDL_IsDeXMode function, which is used to determine if the application is running on a Samsung DeX docking station. It returns a boolean value indicating whether the application is running in DeX mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IsDeXMode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_IsDeXMode(void);\n```\n\n----------------------------------------\n\nTITLE: CMake tvOS Device Build (Latest SDK)\nDESCRIPTION: This CMake command configures SDL3 for a tvOS device, using the latest installed SDK. It sets the target operating system to tvOS, the SDK root to appletvos, specifies the arm64 architecture, and sets the minimum tvOS deployment target to 9.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvos -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIO_RESAMPLING_MODE in C\nDESCRIPTION: Defines the SDL_HINT_AUDIO_RESAMPLING_MODE macro. This macro is a string representing the name of the hint that controls the audio resampling mode used by SDL. The available modes are '0' (default), '1' (fast), '2' (medium), and '3' (best).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUDIO_RESAMPLING_MODE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_RESAMPLING_MODE   \"SDL_AUDIO_RESAMPLING_MODE\"\n```\n\n----------------------------------------\n\nTITLE: Get Feature Report using SDL_hid_get_feature_report in C\nDESCRIPTION: Retrieves a feature report from a HID device using SDL_hid_get_feature_report. The function requires a device handle, a data buffer, and the length of the buffer. The first byte of the data buffer should be set to the Report ID or zero if the device does not use numbered reports. The function returns the number of bytes read plus one for the report ID, or -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_get_feature_report.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_feature_report(SDL_hid_device *dev, unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Get SDL_image Version\nDESCRIPTION: Retrieves the version of the dynamically linked SDL_image library. It returns a pointer to a constant SDL_version structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_Linked_Version.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_version * IMG_Linked_Version(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_isgraph Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_isgraph function in C, which checks if a character is a printable character excluding space. It takes an integer representing the character value and returns a non-zero value if it's a printable character (excluding space), and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isgraph.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isgraph(int x);\n```\n\n----------------------------------------\n\nTITLE: Parsing unsigned long long from string using SDL_strtoull in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_strtoull function in C.  It takes a null-terminated string, a pointer to a char pointer for storing the end position, and an integer representing the base of the number.  It returns the parsed unsigned long long integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strtoull.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nunsigned long long SDL_strtoull(const char *str, char **endp, int base);\n```\n\n----------------------------------------\n\nTITLE: SDL_lround function declaration in C\nDESCRIPTION: Declaration of the SDL_lround function, which takes a double-precision floating-point value as input and returns the nearest long integer. Defined in SDL3/SDL_stdinc.h. Rounds to nearest integer, away from zero for halfway values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_lround.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nlong SDL_lround(double x);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS hint, which is a string constant used to set the hint controlling how joystick hats are handled on Linux. Setting the hint to \"1\" forces digital hat behavior, while \"0\" uses a default auto-detection method. This hint must be set before opening a controller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS \"SDL_JOYSTICK_LINUX_DIGITAL_HATS\"\n```\n\n----------------------------------------\n\nTITLE: Map RGBA to Pixel Value with SDL_MapRGBA in C\nDESCRIPTION: Maps an RGBA color to a pixel value based on the provided SDL_PixelFormat. The function takes the pixel format and RGBA components as input and returns the corresponding pixel value. The alpha component is ignored if the format does not support it. The function has been available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MapRGBA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_MapRGBA(const SDL_PixelFormat * format,\n                   Uint8 r, Uint8 g, Uint8 b,\n                   Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAssertionReport Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetAssertionReport function in C. This function retrieves a list of all failed assertions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAssertionReport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_AssertData * SDL_GetAssertionReport(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadProcess Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadProcess function in C. This function reads all the output from a specified SDL_Process, providing the data size and exit code, if available. The returned data must be freed with SDL_free().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadProcess.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_ReadProcess(SDL_Process *process, size_t *datasize, int *exitcode);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasSSE41 Function Definition in C\nDESCRIPTION: This C code snippet shows the definition of the SDL_HasSSE41 function, which determines if the CPU supports SSE4.1 instruction set extensions. The function takes no arguments and returns an SDL_bool value indicating the presence of SSE4.1 support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasSSE41.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasSSE41(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_HAPTIC_TRIANGLE Macro Definition in C\nDESCRIPTION: Defines the SDL_HAPTIC_TRIANGLE macro as a bit flag (1u<<3) to indicate support for triangle wave haptic effects. This is a periodic haptic effect that simulates triangular waves. It requires the SDL3 library and is available since version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_TRIANGLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_TRIANGLE     (1u<<3)\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockSurface Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_UnlockSurface function in C. It takes a pointer to an SDL_Surface structure as input, which represents the surface to be unlocked after direct pixel access. This function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnlockSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockSurface(SDL_Surface * surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockJoysticks Syntax\nDESCRIPTION: Defines the syntax for the SDL_UnlockJoysticks function. It takes no arguments and returns void. This function should be called to release a lock previously acquired with SDL_LockJoysticks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnlockJoysticks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockJoysticks(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_PEN_TOUCHID Macro Definition in C\nDESCRIPTION: This code snippet defines the SDL_PEN_TOUCHID macro, which represents the SDL_TouchID for touch events simulated with pen input. It is defined as an SDL_TouchID with the value -2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PEN_TOUCHID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PEN_TOUCHID ((SDL_TouchID)-2)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_WIN32 Macro in C\nDESCRIPTION: This code snippet shows how the SDL_PLATFORM_WIN32 macro is defined. It is a preprocessor macro that is set to 1 if the code is being compiled for Windows. This allows developers to write platform-specific code that is only compiled when building for Windows.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_WIN32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_WIN32 1\n```\n\n----------------------------------------\n\nTITLE: SDL_Finger Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_Finger` in C, used to represent a single finger in a multitouch event. It includes the finger ID (`id`), normalized x and y coordinates (`x`, `y`), and the normalized pressure (`pressure`). This structure is available since SDL 3.2.0 and is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Finger.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Finger\n{\n    SDL_FingerID id;  /**< the finger ID */\n    float x;  /**< the x-axis location of the touch event, normalized (0...1) */\n    float y;  /**< the y-axis location of the touch event, normalized (0...1) */\n    float pressure; /**< the quantity of pressure applied, normalized (0...1) */\n} SDL_Finger;\n```\n\n----------------------------------------\n\nTITLE: SDL_OnApplicationWillEnterForeground Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_OnApplicationWillEnterForeground function in C. This function allows iOS applications with custom event handling to trigger the SDL_APP_WILLENTERBACKGROUND event.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OnApplicationWillEnterForeground.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_OnApplicationWillEnterForeground(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAtomicPointer Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetAtomicPointer function, which sets a pointer to a value atomically. It takes a pointer to a pointer (void **) and the desired pointer value (void *) as input and returns the previous value of the pointer (void *).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAtomicPointer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_SetAtomicPointer(void **a, void *v);\n```\n\n----------------------------------------\n\nTITLE: SDL_PenMotionEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_PenMotionEvent, capturing pen motion data such as event type, timestamp, window ID, pen ID, pen input state, and X/Y coordinates. This structure is used to represent pen motion events in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenMotionEvent.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_PenMotionEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_PEN_MOTION */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The window with pen focus, if any */\n    SDL_PenID which;        /**< The pen instance id */\n    SDL_PenInputFlags pen_state;   /**< Complete pen input state at time of event */\n    float x;                /**< X coordinate, relative to window */\n    float y;                /**< Y coordinate, relative to window */\n} SDL_PenMotionEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetClosestDisplayMode Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetClosestDisplayMode function in C. This function finds the closest matching display mode to a requested mode for a given display. It takes the display index, desired display mode, and a pointer to an SDL_DisplayMode struct to be filled with the closest matching mode as input, and returns a pointer to the closest SDL_DisplayMode, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetClosestDisplayMode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_DisplayMode * SDL_GetClosestDisplayMode(int displayIndex, const SDL_DisplayMode * mode, SDL_DisplayMode * closest);\n```\n\n----------------------------------------\n\nTITLE: Defining TTF_Direction Enum in SDL_ttf\nDESCRIPTION: Defines the `TTF_Direction` enum to specify text direction (Left-to-Right, Right-to-Left, Top-to-Bottom, Bottom-to-Top). It is used to set the direction of text rendering in SDL_ttf, ensuring compatibility with `hb_direction_t` from HarfBuzz. The enum is available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_Direction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum TTF_Direction\n{\n  TTF_DIRECTION_INVALID = 0,\n  TTF_DIRECTION_LTR = 4,        /**< Left to Right */\n  TTF_DIRECTION_RTL,            /**< Right to Left */\n  TTF_DIRECTION_TTB,            /**< Top to Bottom */\n  TTF_DIRECTION_BTT             /**< Bottom to Top */\n} TTF_Direction;\n```\n\n----------------------------------------\n\nTITLE: Loading QOI Image from IO Stream - SDL_image (C)\nDESCRIPTION: Loads a QOI image directly from an SDL_IOStream. This function bypasses the standard file format detection routines, so it should only be called if you are certain that the stream contains a QOI image. Requires the SDL_image library and an initialized SDL_IOStream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadQOI_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadQOI_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteU8 Syntax in C\nDESCRIPTION: The SDL_WriteU8 function writes a single byte (Uint8) to the specified SDL_RWops stream. It takes a pointer to the SDL_RWops structure and the byte value to write as input. It returns 1 on success and 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WriteU8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteU8(SDL_RWops * dst, Uint8 value);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_JOYSTICK_AXIS_MIN in C\nDESCRIPTION: This code snippet defines the SDL_JOYSTICK_AXIS_MIN macro, which represents the smallest value that an SDL_Joystick's axis can report. This value is -32768. It is used to interpret joystick axis data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JOYSTICK_AXIS_MIN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_JOYSTICK_AXIS_MIN   -32768\n```\n\n----------------------------------------\n\nTITLE: Mix_ExpireChannel Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_ExpireChannel function in C. This function modifies the expiration delay for a specified audio channel, determining how long it plays before halting. Setting 'ticks' to -1 removes the expiration. The function is part of the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_ExpireChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_ExpireChannel(int channel, int ticks);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Log Categories in C\nDESCRIPTION: This code snippet defines the `SDL_LogCategory` enumeration in C. It lists the predefined log categories provided by SDL, including categories for application, error, assert, system, audio, video, render, input, test, and GPU. It also defines reserved categories and a custom category for application-specific logging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LogCategory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_LogCategory\n{\n    SDL_LOG_CATEGORY_APPLICATION,\n    SDL_LOG_CATEGORY_ERROR,\n    SDL_LOG_CATEGORY_ASSERT,\n    SDL_LOG_CATEGORY_SYSTEM,\n    SDL_LOG_CATEGORY_AUDIO,\n    SDL_LOG_CATEGORY_VIDEO,\n    SDL_LOG_CATEGORY_RENDER,\n    SDL_LOG_CATEGORY_INPUT,\n    SDL_LOG_CATEGORY_TEST,\n    SDL_LOG_CATEGORY_GPU,\n\n    /* Reserved for future SDL library use */\n    SDL_LOG_CATEGORY_RESERVED2,\n    SDL_LOG_CATEGORY_RESERVED3,\n    SDL_LOG_CATEGORY_RESERVED4,\n    SDL_LOG_CATEGORY_RESERVED5,\n    SDL_LOG_CATEGORY_RESERVED6,\n    SDL_LOG_CATEGORY_RESERVED7,\n    SDL_LOG_CATEGORY_RESERVED8,\n    SDL_LOG_CATEGORY_RESERVED9,\n    SDL_LOG_CATEGORY_RESERVED10,\n\n    /* Beyond this point is reserved for application use, e.g.\n       enum {\n           MYAPP_CATEGORY_AWESOME1 = SDL_LOG_CATEGORY_CUSTOM,\n           MYAPP_CATEGORY_AWESOME2,\n           MYAPP_CATEGORY_AWESOME3,\n           ...\n       };\n     */\n    SDL_LOG_CATEGORY_CUSTOM\n} SDL_LogCategory;\n```\n\n----------------------------------------\n\nTITLE: SDL_strcmp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_strcmp function in C, used to compare two null-terminated UTF-8 strings. It takes two constant character pointers as input and returns an integer indicating their lexicographical order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strcmp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_strcmp(const char *str1, const char *str2);\n```\n\n----------------------------------------\n\nTITLE: Set Text Direction with TTF_SetTextDirection in C\nDESCRIPTION: Sets the direction to be used for text shaping a text object. The function takes a TTF_Text pointer and a TTF_Direction enum as parameters. It returns true on success or false on failure. Note that left-to-right text shaping is only supported without HarfBuzz.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextDirection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextDirection(TTF_Text *text, TTF_Direction direction);\n```\n\n----------------------------------------\n\nTITLE: Setting SoundFonts Paths in SDL_mixer (C)\nDESCRIPTION: The Mix_SetSoundFonts function sets the paths to SoundFonts that will be used by supported MIDI backends in SDL_mixer. The function takes a string of semicolon-separated paths as input. A NULL path removes any previously specified paths. Returns 1 on success, 0 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetSoundFonts.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_SetSoundFonts(const char *paths);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_STANDARD_GRAVITY in C\nDESCRIPTION: This code snippet defines the SDL_STANDARD_GRAVITY constant as a floating-point value representing the standard gravity (9.80665) in meters per second squared. It is used in sensor-related functionalities, particularly accelerometer readings, to account for the force of gravity. This macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_STANDARD_GRAVITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_STANDARD_GRAVITY    9.80665f\n```\n\n----------------------------------------\n\nTITLE: Check for SSE3 Support using SDL_HasSSE3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_HasSSE3 function, which is used to determine if the CPU has SSE3 features. The function returns a boolean value indicating the presence or absence of SSE3 support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasSSE3.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasSSE3(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION hint is defined as a macro in C. This hint controls if the Apple TV remote's joystick axes will automatically adjust to the rotation of the remote.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION \"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION\"\n```\n\n----------------------------------------\n\nTITLE: SDL_DialogFileCallback Definition C\nDESCRIPTION: Defines the SDL_DialogFileCallback type, which is a callback function used with SDL file dialogs. It takes a userdata pointer, a filelist (array of file paths), and a filter index as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DialogFileCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_DialogFileCallback)(void *userdata, const char * const *filelist, int filter);\n```\n\n----------------------------------------\n\nTITLE: Allocating an SDL_PixelFormat in C\nDESCRIPTION: Allocates an SDL_PixelFormat structure based on the given pixel format enum. The pixel_format parameter specifies the desired format. The function returns a pointer to the new structure, or NULL on failure. The returned structure should not be modified directly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AllocFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PixelFormat * SDL_AllocFormat(Uint32 pixel_format);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_TCP_Send Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_TCP_Send function in C. It takes a TCPsocket, a pointer to the data to send, and the length of the data as input and returns the number of bytes sent.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_Send.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDLNet_TCP_Send(TCPsocket sock, const void *data, int len);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SystemCursor Enum in SDL3\nDESCRIPTION: This code snippet defines the SDL_SystemCursor enum, which specifies different system cursor types for use with SDL_CreateSystemCursor. The enum includes standard cursor styles like default, text, wait, crosshair, resize cursors, move, and not-allowed. The `SDL_SYSTEM_CURSOR_COUNT` member is typically used as a size hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SystemCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_SystemCursor\n{\n    SDL_SYSTEM_CURSOR_DEFAULT,      /**< Default cursor. Usually an arrow. */\n    SDL_SYSTEM_CURSOR_TEXT,         /**< Text selection. Usually an I-beam. */\n    SDL_SYSTEM_CURSOR_WAIT,         /**< Wait. Usually an hourglass or watch or spinning ball. */\n    SDL_SYSTEM_CURSOR_CROSSHAIR,    /**< Crosshair. */\n    SDL_SYSTEM_CURSOR_PROGRESS,     /**< Program is busy but still interactive. Usually it's WAIT with an arrow. */\n    SDL_SYSTEM_CURSOR_NWSE_RESIZE,  /**< Double arrow pointing northwest and southeast. */\n    SDL_SYSTEM_CURSOR_NESW_RESIZE,  /**< Double arrow pointing northeast and southwest. */\n    SDL_SYSTEM_CURSOR_EW_RESIZE,    /**< Double arrow pointing west and east. */\n    SDL_SYSTEM_CURSOR_NS_RESIZE,    /**< Double arrow pointing north and south. */\n    SDL_SYSTEM_CURSOR_MOVE,         /**< Four pointed arrow pointing north, south, east, and west. */\n    SDL_SYSTEM_CURSOR_NOT_ALLOWED,  /**< Not permitted. Usually a slashed circle or crossbones. */\n    SDL_SYSTEM_CURSOR_POINTER,      /**< Pointer that indicates a link. Usually a pointing hand. */\n    SDL_SYSTEM_CURSOR_NW_RESIZE,    /**< Window resize top-left. This may be a single arrow or a double arrow like NWSE_RESIZE. */\n    SDL_SYSTEM_CURSOR_N_RESIZE,     /**< Window resize top. May be NS_RESIZE. */\n    SDL_SYSTEM_CURSOR_NE_RESIZE,    /**< Window resize top-right. May be NESW_RESIZE. */\n    SDL_SYSTEM_CURSOR_E_RESIZE,     /**< Window resize right. May be EW_RESIZE. */\n    SDL_SYSTEM_CURSOR_SE_RESIZE,    /**< Window resize bottom-right. May be NWSE_RESIZE. */\n    SDL_SYSTEM_CURSOR_S_RESIZE,     /**< Window resize bottom. May be NS_RESIZE. */\n    SDL_SYSTEM_CURSOR_SW_RESIZE,    /**< Window resize bottom-left. May be NESW_RESIZE. */\n    SDL_SYSTEM_CURSOR_W_RESIZE,     /**< Window resize left. May be EW_RESIZE. */\n    SDL_SYSTEM_CURSOR_COUNT\n} SDL_SystemCursor;\n```\n\n----------------------------------------\n\nTITLE: Getting Current Thread ID in C with SDL\nDESCRIPTION: This code snippet shows the syntax for the SDL_ThreadID function, which returns the thread identifier of the current thread. The function takes no arguments and returns a value of type SDL_threadID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ThreadID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_threadID SDL_ThreadID(void);\n```\n\n----------------------------------------\n\nTITLE: Getting SDL_image Version\nDESCRIPTION: This function retrieves the version of the dynamically linked SDL_image library. It allows developers to verify the version of the library at runtime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint IMG_Version(void);                                                                                             // This function gets the version of the dynamically linked SDL_image library.\n```\n\n----------------------------------------\n\nTITLE: Assign Tag to Channel - Mix_GroupChannel - C\nDESCRIPTION: The `Mix_GroupChannel` function assigns an integer tag to a specified audio channel in SDL_mixer. This allows grouping channels together for collective control. A tag value of -1 removes the current tag. The function returns a non-zero value on success, or zero if the specified channel does not exist.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GroupChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GroupChannel(int which, int tag);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUShaderFormat Constants\nDESCRIPTION: Defines constants for various shader formats like SPIR-V (Vulkan), DXBC and DXIL (D3D12), MSL and metallib (Metal). Each constant represents a specific shader format supported by a graphics backend.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUShaderFormat.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GPU_SHADERFORMAT_INVALID  0\n#define SDL_GPU_SHADERFORMAT_PRIVATE  (1u << 0) /**< Shaders for NDA'd platforms. */\n#define SDL_GPU_SHADERFORMAT_SPIRV    (1u << 1) /**< SPIR-V shaders for Vulkan. */\n#define SDL_GPU_SHADERFORMAT_DXBC     (1u << 2) /**< DXBC SM5_1 shaders for D3D12. */\n#define SDL_GPU_SHADERFORMAT_DXIL     (1u << 3) /**< DXIL SM6_0 shaders for D3D12. */\n#define SDL_GPU_SHADERFORMAT_MSL      (1u << 4) /**< MSL shaders for Metal. */\n#define SDL_GPU_SHADERFORMAT_METALLIB (1u << 5) /**< Precompiled metallib shaders for Metal. */\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowSurfaceVSync Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetWindowSurfaceVSync function. It takes a pointer to an SDL_Window and a pointer to an integer as arguments. The function retrieves the current vertical refresh sync interval associated with the window's surface. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowSurfaceVSync.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowSurfaceVSync(SDL_Window *window, int *vsync);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Properties in SDL3 (C)\nDESCRIPTION: Retrieves the properties associated with a given SDL_Sensor object. It returns an SDL_PropertiesID, which can be used to access the sensor's properties. Returns 0 on failure, and SDL_GetError() can be called for more information. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetSensorProperties(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: Get Music Track Count SDL_mixer C\nDESCRIPTION: Retrieves the number of tracks present in a Mix_Music object. Requires a valid Mix_Music pointer. Returns the number of tracks as an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GetNumTracks(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Render Drivers - C\nDESCRIPTION: Retrieves the number of 2D rendering drivers available for the current display using the SDL_GetNumRenderDrivers function. This function takes no arguments and returns the number of available drivers or a negative error code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumRenderDrivers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumRenderDrivers(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_cos Function Syntax\nDESCRIPTION: This code snippet shows the syntax of the SDL_cos function in C, which calculates the cosine of a double-precision floating-point value. The function takes a double as input (in radians) and returns a double representing the cosine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_cos.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_cos(double x);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for tvOS Simulator\nDESCRIPTION: This command configures CMake to build SDL for the tvOS Simulator, using the latest installed SDK and targeting the x86_64 architecture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvsimulator -DCMAKE_OSX_ARCHITECTURES=x86_64\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ENABLE_SCREEN_KEYBOARD C\nDESCRIPTION: Defines the SDL_HINT_ENABLE_SCREEN_KEYBOARD hint as a string literal. This macro allows developers to use a symbolic name instead of the raw string value when setting the hint using SDL_SetHint or SDL_SetHintWithPriority.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ENABLE_SCREEN_KEYBOARD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ENABLE_SCREEN_KEYBOARD \"SDL_ENABLE_SCREEN_KEYBOARD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateRenderer Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_CreateRenderer function, which creates a 2D rendering context for a window. It takes an SDL_Window pointer and a renderer name as input, returning an SDL_Renderer pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateRenderer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Renderer * SDL_CreateRenderer(SDL_Window *window, const char *name);\n```\n\n----------------------------------------\n\nTITLE: Verbose NDK build\nDESCRIPTION: This command executes an Android NDK build, displaying the complete command line used by ndk-build for each compilation step.  This is useful for debugging build issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nndk-build V=1\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRectDisplayIndex Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetRectDisplayIndex function in C. It takes a pointer to an SDL_Rect structure as input and returns an integer representing the display index or a negative error code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRectDisplayIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetRectDisplayIndex(const SDL_Rect * rect);\n```\n\n----------------------------------------\n\nTITLE: Creating an SDL Condition Variable in C\nDESCRIPTION: This code snippet demonstrates how to create an SDL condition variable using SDL_CreateCond. It returns a pointer to SDL_cond, or NULL on failure. It requires the SDL2 library and SDL_mutex.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CreateCond.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_cond* SDL_CreateCond(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_TTF Major Version in C\nDESCRIPTION: This C macro definition sets the SDL_TTF_MAJOR_VERSION to 3. It's a fundamental constant for identifying the major version of the SDL_ttf library being used. The macro is defined in the SDL3_ttf/SDL_ttf.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/SDL_TTF_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TTF_MAJOR_VERSION   3\n```\n\n----------------------------------------\n\nTITLE: Closing Font with SDL_ttf in C\nDESCRIPTION: This function disposes of a previously-created font. It requires a `TTF_Font` pointer. This function should be called to free the resources allocated for the font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_89\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_CloseFont(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontStyle Function\nDESCRIPTION: Sets the font style (e.g., bold, italic, underline) of a TTF_Font object. Uses a bitmask of TTF_FontStyleFlags. Affects subsequent rendering operations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontStyle(TTF_Font *font, TTF_FontStyleFlags style);                                                                           // Set a font's current style.\n```\n\n----------------------------------------\n\nTITLE: SDL_GetJoystickFromID Syntax (C)\nDESCRIPTION: Retrieves the SDL_Joystick associated with a specific instance ID.  Requires an instance ID as input. Returns a pointer to SDL_Joystick on success, or NULL on failure. Part of SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickFromID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Joystick * SDL_GetJoystickFromID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAudioStreamDevice Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetAudioStreamDevice function in C, used to query an audio stream for its currently-bound device. It takes an SDL_AudioStream pointer as input and returns an SDL_AudioDeviceID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAudioStreamDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioDeviceID SDL_GetAudioStreamDevice(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Destroy GPU Text Engine C\nDESCRIPTION: This function destroys a text engine created for drawing text with the SDL GPU API.  It takes a TTF_TextEngine pointer as input and frees the associated resources.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_79\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroyGPUTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_NO_SIGNAL_HANDLERS C\nDESCRIPTION: Defines the SDL_HINT_NO_SIGNAL_HANDLERS macro. This hint is used to tell SDL whether to catch SIGINT or SIGTERM signals on POSIX platforms. It should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_NO_SIGNAL_HANDLERS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_NO_SIGNAL_HANDLERS \"SDL_NO_SIGNAL_HANDLERS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetSurfaceColorKey Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_GetSurfaceColorKey function. It takes a pointer to an SDL_Surface and a pointer to a Uint32 as parameters. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfaceColorKey.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetSurfaceColorKey(SDL_Surface *surface, Uint32 *key);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTrayEntryLabel Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetTrayEntryLabel function. It takes an SDL_TrayEntry pointer as input and returns a constant character pointer representing the label of the tray entry in UTF-8 encoding.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTrayEntryLabel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetTrayEntryLabel(SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Script Function in C\nDESCRIPTION: Function to set the script to be used for text shaping by a font. Allows specifying the writing system for proper text rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_SetFontScript(TTF_Font *font, Uint32 script);                                                                                     // Set the script to be used for text shaping by a font.\n```\n\n----------------------------------------\n\nTITLE: SDL_abs Function Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_abs function. It takes an integer 'x' as input and returns its absolute value as an integer. It is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_abs.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_abs(int x);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RENDER_LINE_METHOD\nDESCRIPTION: Defines the SDL_HINT_RENDER_LINE_METHOD macro, which is used to set the hint controlling the line rendering method used by the 2D rendering API in SDL. The hint accepts string values to specify the desired method.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_LINE_METHOD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_LINE_METHOD \"SDL_RENDER_LINE_METHOD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_DisableScreenSaver Syntax in C\nDESCRIPTION: The SDL_DisableScreenSaver function prevents the screen from being blanked by a screen saver. It takes no parameters and returns void. Disabling the screensaver is automatically reverted when SDL quits.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DisableScreenSaver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DisableScreenSaver(void);\n```\n\n----------------------------------------\n\nTITLE: Getting Glyph Script C\nDESCRIPTION: This function retrieves the script used by a 32-bit codepoint (character). It takes a Uint32 representing the codepoint as input and returns a Uint32 representing the script.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetGlyphScript(Uint32 ch);\n```\n\n----------------------------------------\n\nTITLE: TTF Initialization Function in C\nDESCRIPTION: Initializes the SDL_ttf library.  Must be called before other TTF functions are used. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_Init(void);                                                                                                                       // Initialize SDL_ttf.\n```\n\n----------------------------------------\n\nTITLE: SDL_FlipSurface Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_FlipSurface function in C. It takes an SDL_Surface pointer and a SDL_FlipMode enum value as input, and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlipSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_FlipSurface(SDL_Surface *surface, SDL_FlipMode flip);\n```\n\n----------------------------------------\n\nTITLE: SDL_Window Structure Definition in C\nDESCRIPTION: Defines the SDL_Window structure as an opaque type.  This means the internal members of the struct are not exposed to the user, and it should only be accessed through SDL API calls.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Window.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_Window SDL_Window;\n```\n\n----------------------------------------\n\nTITLE: Mix_SetDistance Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_SetDistance function. It takes an integer representing the channel and a Uint8 representing the distance as parameters. It returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetDistance.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_SetDistance(int channel, Uint8 distance);\n```\n\n----------------------------------------\n\nTITLE: TTF_Version Function\nDESCRIPTION: This function retrieves the version of the dynamically linked SDL_ttf library at runtime. It is essential for ensuring compatibility and identifying the specific features available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint TTF_Version(void);                                                                                                                     // This function gets the version of the dynamically linked SDL_ttf library.\n```\n\n----------------------------------------\n\nTITLE: SDL_DelHintCallback Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_DelHintCallback function in C. It takes the hint name, the callback function, and user data as parameters and removes the specified callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DelHintCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DelHintCallback(const char *name,\n                         SDL_HintCallback callback,\n                         void *userdata);\n```\n\n----------------------------------------\n\nTITLE: Read Byte from SDL_RWops in C\nDESCRIPTION: Reads an unsigned 8-bit integer (byte) from an SDL_RWops stream. Takes a pointer to the SDL_RWops structure as input. Returns the read byte on success or 0 on failure. Use SDL_GetError() for error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ReadU8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint8 SDL_ReadU8(SDL_RWops * src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED hint as a string literal. This hint is used to specify a list of joystick devices that should be excluded from being treated as arcade sticks. The value is a comma-separated list of USB VID/PID pairs in hexadecimal format or a path to a file containing such a list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED \"SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: Workaround for ld.so.preload during Cross-Compilation\nDESCRIPTION: Workaround to prevent issues during cross-compilation by commenting out all lines in $SYSROOT/etc/ld.so.preload, resolving issues with preloaded libraries.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo chroot $SYSROOT\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_NEON_INTRINSICS in C\nDESCRIPTION: This macro definition indicates that the compiler supports ARM NEON intrinsics. If defined, SDL includes necessary ARM intrinsic headers. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NEON_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NEON_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: Getting Text Script C\nDESCRIPTION: This function gets the script used for text shaping a text object. It requires a pointer to the TTF_Text. Returns a Uint32 representing the script.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_65\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetTextScript(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Get Number of GPU Drivers in SDL (C)\nDESCRIPTION: Retrieves the number of GPU drivers compiled into SDL. This function takes no arguments and returns an integer representing the count of available GPU drivers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumGPUDrivers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumGPUDrivers(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_WII in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_WII hint as a string literal. This hint is used to control whether SDL uses the HIDAPI driver for Nintendo Wii and Wii U controllers. Setting it to \"1\" enables the driver, while \"0\" disables it. This hint must be set before initializing joysticks and gamepads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_WII.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_WII \"SDL_JOYSTICK_HIDAPI_WII\"\n```\n\n----------------------------------------\n\nTITLE: Creating Renderer Text Engine C\nDESCRIPTION: This function creates a text engine for drawing text on an SDL renderer. It requires a pointer to the SDL_Renderer. Returns a pointer to the created TTF_TextEngine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_46\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateRendererTextEngine(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontSize Function\nDESCRIPTION: Dynamically sets the font size of a TTF_Font object. This allows changing the font size without reloading the font data. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontSize(TTF_Font *font, float ptsize);                                                                                        // Set a font's size dynamically.\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTrayEntryEnabled Syntax (C)\nDESCRIPTION: Sets whether or not a tray entry is enabled. This function requires an SDL_TrayEntry pointer representing the entry to update and a boolean indicating whether it should be enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTrayEntryEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetTrayEntryEnabled(SDL_TrayEntry *entry, bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Get Glyph Script C\nDESCRIPTION: This function returns the script associated with a given 32-bit Unicode codepoint. It takes a Uint32 representing the codepoint as input and returns a Uint32 representing the script.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_47\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetGlyphScript(Uint32 ch);\n```\n\n----------------------------------------\n\nTITLE: SDL_LockMutex Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_LockMutex function in C. It takes a pointer to an SDL_Mutex as input and has a void return type. The function blocks until the mutex is acquired.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockMutex(SDL_Mutex *mutex);\n```\n\n----------------------------------------\n\nTITLE: Get SDL_mixer Version in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_Version function, which returns the version of the SDL_mixer library. The function takes no arguments and returns an integer representing the version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_Version.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Version(void);\n```\n\n----------------------------------------\n\nTITLE: Getting Text Direction C\nDESCRIPTION: This function gets the direction to be used for text shaping a text object. It requires a pointer to the TTF_Text. Returns a TTF_Direction value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_63\n\nLANGUAGE: C\nCODE:\n```\nTTF_Direction TTF_GetTextDirection(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Set Music Position Mix_SetMusicPosition C\nDESCRIPTION: Sets the current playback position in the music stream, specified in seconds. This allows precise control over where the music plays from.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_SetMusicPosition(double position);\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontOutline Function\nDESCRIPTION: Sets the outline size of a TTF_Font object. The outline is rendered around the glyphs. A value of 0 disables outlining. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontOutline(TTF_Font *font, int outline);                                                                                      // Set a font's current outline.\n```\n\n----------------------------------------\n\nTITLE: Update Text Layout - SDL_ttf\nDESCRIPTION: Updates the layout of a text object. This function should be called after modifying the text, color, or wrapping properties to ensure the text is rendered correctly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_113\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_UpdateText(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_roundf Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_roundf function in C. It takes a single-precision floating-point value as input and returns the nearest integer as a single-precision floating-point value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_roundf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_roundf(float x);\n```\n\n----------------------------------------\n\nTITLE: Using ADB to View Logcat Output\nDESCRIPTION: This command allows you to view log messages from the default Android device using adb logcat.  This is helpful for debugging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nadb logcat\n```\n\n----------------------------------------\n\nTITLE: SDL_utf8strlen Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_utf8strlen function in C. This function takes a null-terminated UTF-8 string as input and returns the number of codepoints in the string, excluding the null terminator.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_utf8strlen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_utf8strlen(const char *str);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph_Blended Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderGlyph_Blended function. It takes a TTF_Font pointer, a Uint32 codepoint, and an SDL_Color as input, and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderGlyph_Blended.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Blended(TTF_Font *font, Uint32 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Resume Channel Playback Mix_Resume C\nDESCRIPTION: Resumes playback on a particular channel that was previously paused. This function restarts the audio on the channel from the point where it was paused.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_Resume(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_GLContextFlag Type Definition\nDESCRIPTION: Defines the SDL_GLContextFlag as an unsigned 32-bit integer (Uint32). This type is used to represent flags for OpenGL context configuration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLContextFlag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_GLContextFlag;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_STRINGIFY_ARG Macro in C\nDESCRIPTION: This macro takes an argument and converts it into a string literal. It is used to create more complex macros that involve string manipulation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_STRINGIFY_ARG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_STRINGIFY_ARG(arg)  #arg\n```\n\n----------------------------------------\n\nTITLE: View logcat output\nDESCRIPTION: This command displays the system log, including application-specific logging output, from the default Android device connected via ADB.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nadb logcat\n```\n\n----------------------------------------\n\nTITLE: SDL_HasPrimarySelectionText Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_HasPrimarySelectionText function in C. It takes no arguments and returns a SDL_bool value indicating whether the primary selection contains text. The function is part of the SDL library and available since SDL 2.26.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasPrimarySelectionText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasPrimarySelectionText(void);\n```\n\n----------------------------------------\n\nTITLE: Defining Joystick Throttle Exclusion Hint Macro - C\nDESCRIPTION: This code snippet defines the macro SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED, which is used to specify a comma-separated list of USB VID/PID pairs (in hexadecimal form) that should be excluded from being recognized as throttle-style joystick controllers. The value of the hint can also be read from a file specified by '@file'. This hint overrides SDL_HINT_JOYSTICK_THROTTLE_DEVICES and built-in device lists.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED \"SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_WindowID Type Definition in C\nDESCRIPTION: This code snippet shows the type definition of `SDL_WindowID` in C. It's defined as an unsigned 32-bit integer (`Uint32`). This ID is a unique identifier for an SDL window, and a value of 0 indicates an invalid ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WindowID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_WindowID;\n```\n\n----------------------------------------\n\nTITLE: Including SDL3 in Autotools Project\nDESCRIPTION: This snippet demonstrates how to integrate SDL3 into an Autotools project. It checks for the `sdl3` module using `PKG_CHECK_MODULES` and sets the necessary compiler and linker flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_5\n\nLANGUAGE: m4\nCODE:\n```\nPKG_CHECK_MODULES([SDL3], [sdl3])\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_RENDER_GPU_DEBUG Definition in C\nDESCRIPTION: This macro defines the hint string \"SDL_RENDER_GPU_DEBUG\" that can be used to control whether the GPU device is created in debug mode. It can be set to \"0\" to disable debug mode or \"1\" to enable it. This hint must be set before creating a renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_GPU_DEBUG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_GPU_DEBUG \"SDL_RENDER_GPU_DEBUG\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUGraphicsPipeline Definition (C)\nDESCRIPTION: Defines the `SDL_GPUGraphicsPipeline` struct as an opaque handle for a graphics pipeline. This structure is used during render passes and is available since SDL 3.2.0. It's declared using a typedef, making it an alias for a struct of the same name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUGraphicsPipeline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUGraphicsPipeline SDL_GPUGraphicsPipeline;\n```\n\n----------------------------------------\n\nTITLE: SDL_TryLockMutex Syntax in C\nDESCRIPTION: This is the syntax for the SDL_TryLockMutex function, which attempts to lock a mutex. It takes a pointer to an SDL_Mutex as input and returns a boolean indicating success or failure (if the mutex would block).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TryLockMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_TryLockMutex(SDL_Mutex *mutex);\n```\n\n----------------------------------------\n\nTITLE: SDL_CommonEvent Structure Definition in C\nDESCRIPTION: Defines the SDL_CommonEvent structure, which is a base structure for all SDL events. It includes the event type (Uint32 type) and the timestamp of when the event occurred (Uint32 timestamp), obtained via SDL_GetTicks(). This structure is defined in SDL_events.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CommonEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_CommonEvent\n{\n    Uint32 type;\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n} SDL_CommonEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitCondition Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WaitCondition function in C. This function unlocks the provided mutex and waits for a signal or broadcast on the specified condition variable. The mutex must be locked before calling this function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitCondition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_WaitCondition(SDL_Condition *cond, SDL_Mutex *mutex);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_CameraPosition Enum in C\nDESCRIPTION: This code snippet defines the SDL_CameraPosition enum, which is used to represent the position of a camera relative to the system device. It includes the values SDL_CAMERA_POSITION_UNKNOWN, SDL_CAMERA_POSITION_FRONT_FACING, and SDL_CAMERA_POSITION_BACK_FACING. This enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CameraPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_CameraPosition\n{\n    SDL_CAMERA_POSITION_UNKNOWN,\n    SDL_CAMERA_POSITION_FRONT_FACING,\n    SDL_CAMERA_POSITION_BACK_FACING\n} SDL_CameraPosition;\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitAndAcquireGPUSwapchainTexture Syntax (C)\nDESCRIPTION: Defines the syntax for SDL_WaitAndAcquireGPUSwapchainTexture, a function in SDL3 that blocks and acquires a GPU swapchain texture. It takes a command buffer, a window, and pointers to store the texture and its dimensions. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitAndAcquireGPUSwapchainTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitAndAcquireGPUSwapchainTexture(\n    SDL_GPUCommandBuffer *command_buffer,\n    SDL_Window *window,\n    SDL_GPUTexture **swapchain_texture,\n    Uint32 *swapchain_texture_width,\n    Uint32 *swapchain_texture_height);\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_ISFLOAT Macro Definition in C\nDESCRIPTION: This macro checks if a given SDL_AudioFormat represents floating-point data. It uses a bitwise AND operation with SDL_AUDIO_MASK_FLOAT to determine if the format is floating-point. The macro takes an SDL_AudioFormat value as input and returns a non-zero value if the format is floating-point, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_ISFLOAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_ISFLOAT(x)         ((x) & SDL_AUDIO_MASK_FLOAT)\n```\n\n----------------------------------------\n\nTITLE: SDL_iPhoneSetEventPump Function Definition in C\nDESCRIPTION: Defines the SDL_iPhoneSetEventPump function, which takes a SDL_bool value to enable or disable the SDL event pump on Apple iOS. The 'enabled' parameter, when set to SDL_TRUE, enables the event pump; SDL_FALSE disables it. This function is only available on Apple iOS.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_iPhoneSetEventPump.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_iPhoneSetEventPump(SDL_bool enabled);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_PS4 in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_PS4 macro, which is a string constant used to set the hint for enabling the HIDAPI driver for PS4 controllers. The hint can be set to \"0\" to disable the driver or \"1\" to enable it. The default value is determined by SDL_HINT_JOYSTICK_HIDAPI.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS4.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS4 \"SDL_JOYSTICK_HIDAPI_PS4\"\n```\n\n----------------------------------------\n\nTITLE: SDL Dynamic API Entry Function Definition in C\nDESCRIPTION: This C code defines the `SDL_DYNAPI_entry` function signature, which is used to initialize the jump table with function pointers from an external SDL library. The function takes the version number, the address of the jump table, and the size of the table as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/dynapi.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nSint32 SDL_DYNAPI_entry(Uint32 version, void *table, Uint32 tablesize);\n```\n\n----------------------------------------\n\nTITLE: SDL_DEFINE_COLORSPACE Macro Definition in C\nDESCRIPTION: This snippet shows the definition of the SDL_DEFINE_COLORSPACE macro in C. It takes several parameters related to color characteristics and combines them into a single SDL_Colorspace format value. It is defined in SDL3/SDL_pixels.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEFINE_COLORSPACE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_DEFINE_COLORSPACE(type, range, primaries, transfer, matrix, chroma) \\\n    (((Uint32)(type) << 28) | ((Uint32)(range) << 24) | ((Uint32)(chroma) << 20) | \\\n    ((Uint32)(primaries) << 10) | ((Uint32)(transfer) << 5) | ((Uint32)(matrix) << 0))\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadLE64 Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_ReadLE64 function in C. It takes a pointer to an SDL_RWops structure as input, which represents the stream from which to read the data, and returns a Uint64 value, representing the 64-bit data read from the stream in the native byte order of the platform. It's available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ReadLE64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_ReadLE64(SDL_RWops * src);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_AudioDeviceID in C\nDESCRIPTION: Defines the `SDL_AudioDeviceID` type as an unsigned 32-bit integer (`Uint32`). This type represents a unique identifier for an audio device instance in the SDL3 library. Zero signifies an invalid/null device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioDeviceID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_AudioDeviceID;\n```\n\n----------------------------------------\n\nTITLE: SDL_RumbleJoystick Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_RumbleJoystick function in C. This function initiates a rumble effect on a given joystick. It takes the joystick, low and high-frequency rumble intensities, and the duration in milliseconds as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RumbleJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RumbleJoystick(SDL_Joystick *joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);\n```\n\n----------------------------------------\n\nTITLE: SDL_sinf Function Signature in C\nDESCRIPTION: This is the function signature for `SDL_sinf`, which calculates the sine of a floating-point number. It takes a float `x` (in radians) as input and returns its sine as a float.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_sinf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_sinf(float x);\n```\n\n----------------------------------------\n\nTITLE: SDL_GUID Structure Definition in C\nDESCRIPTION: Defines the SDL_GUID structure, which is a 128-bit identifier represented as an array of 16 unsigned 8-bit integers. This structure is used to uniquely identify devices within the SDL framework.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GUID {\n    Uint8 data[16];\n} SDL_GUID;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_INCLUDE_MONITORS in C\nDESCRIPTION: This code defines the SDL_HINT_AUDIO_INCLUDE_MONITORS macro, which is a string literal used as the key for setting the hint that controls whether SDL includes audio monitors. This hint is used by PulseAudio to expose virtual audio devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUDIO_INCLUDE_MONITORS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_INCLUDE_MONITORS \"SDL_AUDIO_INCLUDE_MONITORS\"\n```\n\n----------------------------------------\n\nTITLE: Mix_ModMusicJumpToOrder Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_ModMusicJumpToOrder function in C. This function jumps to a specified order in MOD music. It requires the SDL_mixer library. The function takes an integer representing the order to jump to as input and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_ModMusicJumpToOrder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_ModMusicJumpToOrder(int order);\n```\n\n----------------------------------------\n\nTITLE: Destroy SDL Properties in C\nDESCRIPTION: Destroys a group of properties identified by `SDL_PropertiesID`. All properties within the group are deleted, and their associated cleanup functions, if any, are invoked. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogVerbose Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_LogVerbose function, which logs a message with the SDL_LOG_PRIORITY_VERBOSE priority. It takes a category integer and a printf-style format string with optional arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogVerbose.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LogVerbose(int category, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Get Music Position Mix_GetMusicPosition C\nDESCRIPTION: Retrieves the current playback position of the music stream, in seconds. This function allows applications to track the current playback time of the music.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_24\n\nLANGUAGE: c\nCODE:\n```\ndouble Mix_GetMusicPosition(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_SharedObject Definition in C\nDESCRIPTION: Defines an opaque datatype SDL_SharedObject as a pointer to a struct. This type represents a loaded shared object and is used with functions like SDL_LoadObject, SDL_LoadFunction, and SDL_UnloadObject.  It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SharedObject.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_SharedObject SDL_SharedObject;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_INFINITY in C\nDESCRIPTION: This code snippet defines the `SDL_HAPTIC_INFINITY` macro, which is used to specify that a haptic effect should play infinitely. It's defined as an unsigned 32-bit integer with the value 4294967295. This macro is part of the SDL_haptic API and allows for haptic effects to loop continuously until explicitly stopped.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_INFINITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_INFINITY   4294967295U\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_OPENBSD in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_OPENBSD preprocessor macro. It is defined as 1 when compiling for OpenBSD. This macro can be used in conditional compilation to include or exclude platform-specific code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_OPENBSD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_OPENBSD 1\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT macro as a string literal. This hint controls whether the RAWINPUT driver uses correlated data from XInput to enhance joystick support, particularly for Xbox controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT   \"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AssertData Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_AssertData` which contains information about an assertion failure, including whether to always ignore the assertion, the number of times it has been triggered, the condition, filename, line number, function name, and a pointer to the next `SDL_AssertData` in a linked list. This structure is filled in by the assertion handler and is used by `SDL_GetAssertionReport`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AssertData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AssertData\n{\n    bool always_ignore;  /**< true if app should always continue when assertion is triggered. */\n    unsigned int trigger_count; /**< Number of times this assertion has been triggered. */\n    const char *condition;  /**< A string of this assert's test code. */\n    const char *filename;  /**< The source file where this assert lives. */\n    int linenum;  /**< The line in `filename` where this assert lives. */\n    const char *function;  /**< The name of the function where this assert lives. */\n    const struct SDL_AssertData *next;  /**< next item in the linked list. */\n} SDL_AssertData;\n```\n\n----------------------------------------\n\nTITLE: TTF_Font Structure Definition in C\nDESCRIPTION: This code snippet defines the `TTF_Font` structure in C. It's an opaque structure used internally by SDL_ttf to store font information.  Users should not directly access or modify the members of this structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/_TTF_Font.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct _TTF_Font TTF_Font;\n```\n\n----------------------------------------\n\nTITLE: Check if Window is Shaped - SDL_IsShapedWindow - C\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_IsShapedWindow function, which determines if a given SDL window is a shaped window. It takes a pointer to an SDL_Window as input and returns SDL_TRUE if the window is shaped, SDL_FALSE otherwise, or SDL_FALSE if the window is NULL. It is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsShapedWindow.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_bool SDL_IsShapedWindow(const SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Set Timidity Config SDL_mixer C\nDESCRIPTION: Sets the full path to the Timidity configuration file. Takes a const char* representing the path to the config file. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_48\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_SetTimidityCfg(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Mix_StartTrack Syntax in C\nDESCRIPTION: Shows the syntax for the Mix_StartTrack function which starts a specific track in a music object. This function is part of SDL_mixer and primarily used for GME music formats. It returns 0 on success, -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_StartTrack.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_StartTrack(Mix_Music *music, int track);\n```\n\n----------------------------------------\n\nTITLE: Check SDL_ttf Initialization - SDL_ttf\nDESCRIPTION: Checks if SDL_ttf is initialized. Returns a non-zero value if SDL_ttf is initialized, 0 otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_117\n\nLANGUAGE: C\nCODE:\n```\nint TTF_WasInit(void);\n```\n\n----------------------------------------\n\nTITLE: Unpausing a Haptic Device in SDL2 (C)\nDESCRIPTION: The `SDL_HapticUnpause` function resumes haptic feedback on a specified haptic device. It requires a pointer to an `SDL_Haptic` structure representing the device.  The function returns 0 on success, and a negative error code on failure, which can be further investigated using `SDL_GetError()`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticUnpause.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticUnpause(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SensorType Enum in C\nDESCRIPTION: This code snippet defines the SDL_SensorType enumeration in C.  It lists the possible values representing different types of sensors that SDL can interact with, including invalid, unknown, accelerometer, and gyroscope sensor types for both generic devices and specific Joy-Con controllers. The purpose is to provide a standardized way to identify and access sensor data within SDL applications.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_SensorType\n{\n    SDL_SENSOR_INVALID = -1,    /**< Returned for an invalid sensor */\n    SDL_SENSOR_UNKNOWN,         /**< Unknown sensor type */\n    SDL_SENSOR_ACCEL,           /**< Accelerometer */\n    SDL_SENSOR_GYRO,            /**< Gyroscope */\n    SDL_SENSOR_ACCEL_L,         /**< Accelerometer for left Joy-Con controller and Wii nunchuk */\n    SDL_SENSOR_GYRO_L,         /**< Gyroscope for left Joy-Con controller */\n    SDL_SENSOR_ACCEL_R,         /**< Accelerometer for right Joy-Con controller */\n    SDL_SENSOR_GYRO_R           /**< Gyroscope for right Joy-Con controller */\n} SDL_SensorType;\n```\n\n----------------------------------------\n\nTITLE: Retrieving SDL_ColorRange from SDL_Colorspace in C\nDESCRIPTION: This macro retrieves the SDL_ColorRange from the provided SDL_Colorspace value. It shifts the cspace value by 24 bits to the right and performs a bitwise AND operation with 0x0F to extract the range. It relies on the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_COLORSPACERANGE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_COLORSPACERANGE(cspace)      (SDL_ColorRange)(((cspace) >> 24) & 0x0F)\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUColorTargetInfo Structure Definition in C\nDESCRIPTION: Defines the structure SDL_GPUColorTargetInfo, used for specifying color target parameters in SDL render passes.  Includes members for the texture, mip level, layer/depth plane, clear color, load/store operations, resolve texture, and flags for texture cycling. This structure is fundamental for configuring render passes using SDL_BeginGPURenderPass.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUColorTargetInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUColorTargetInfo\n{\n    SDL_GPUTexture *texture;         /**< The texture that will be used as a color target by a render pass. */\n    Uint32 mip_level;                /**< The mip level to use as a color target. */\n    Uint32 layer_or_depth_plane;     /**< The layer index or depth plane to use as a color target. This value is treated as a layer index on 2D array and cube textures, and as a depth plane on 3D textures. */\n    SDL_FColor clear_color;          /**< The color to clear the color target to at the start of the render pass. Ignored if SDL_GPU_LOADOP_CLEAR is not used. */\n    SDL_GPULoadOp load_op;           /**< What is done with the contents of the color target at the beginning of the render pass. */\n    SDL_GPUStoreOp store_op;         /**< What is done with the results of the render pass. */\n    SDL_GPUTexture *resolve_texture; /**< The texture that will receive the results of a multisample resolve operation. Ignored if a RESOLVE* store_op is not used. */\n    Uint32 resolve_mip_level;        /**< The mip level of the resolve texture to use for the resolve operation. Ignored if a RESOLVE* store_op is not used. */\n    Uint32 resolve_layer;            /**< The layer index of the resolve texture to use for the resolve operation. Ignored if a RESOLVE* store_op is not used. */\n    bool cycle;                  /**< true cycles the texture if the texture is bound and load_op is not LOAD */\n    bool cycle_resolve_texture;  /**< true cycles the resolve texture if the resolve texture is bound. Ignored if a RESOLVE* store_op is not used. */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_GPUColorTargetInfo;\n```\n\n----------------------------------------\n\nTITLE: Query Gamepad Sensor Enabled State in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GamepadSensorEnabled function, which checks if a given sensor type is enabled for a specific gamepad. It requires a valid SDL_Gamepad pointer and an SDL_SensorType enum value as input, returning a boolean value representing the sensor's enabled state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadSensorEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GamepadSensorEnabled(SDL_Gamepad *gamepad, SDL_SensorType type);\n```\n\n----------------------------------------\n\nTITLE: Defining IMG_InitFlags enum in C\nDESCRIPTION: Defines the IMG_InitFlags enum for use with SDL_image to determine which image formats should be initialized. The enum values represent flags for JPG, PNG, TIF, WEBP, JXL, and AVIF support.  It is a typedef enum, allowing it to be referred to as IMG_InitFlags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_InitFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum IMG_InitFlags\n{\n    IMG_INIT_JPG    = 0x00000001,\n    IMG_INIT_PNG    = 0x00000002,\n    IMG_INIT_TIF    = 0x00000004,\n    IMG_INIT_WEBP   = 0x00000008,\n    IMG_INIT_JXL    = 0x00000010,\n    IMG_INIT_AVIF   = 0x00000020\n} IMG_InitFlags;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_PREFERRED_LOCALES in C\nDESCRIPTION: This code snippet defines the SDL_HINT_PREFERRED_LOCALES macro, which is used as a key for setting the preferred locales hint in SDL. The hint accepts a comma-separated string of locale identifiers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_PREFERRED_LOCALES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_PREFERRED_LOCALES \"SDL_PREFERRED_LOCALES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIX64 Usage Example in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_PRIX64 macro with SDL_Log to print a Uint64 variable named 'bottles' as an uppercase hexadecimal number. The SDL_Log function requires the format string and any variables to be printed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIX64.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRIX64 \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: SDL_ISCOLORSPACE_MATRIX_BT709 Macro Definition in C\nDESCRIPTION: This macro determines if an SDL_Colorspace uses BT709 matrix coefficients. It takes an SDL_Colorspace as input and compares its matrix coefficients to SDL_MATRIX_COEFFICIENTS_BT709. The macro returns true if the colorspace uses BT709 coefficients, and false otherwise. It requires the SDL3/SDL_pixels.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISCOLORSPACE_MATRIX_BT709.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISCOLORSPACE_MATRIX_BT709(cspace)        (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT709)\n```\n\n----------------------------------------\n\nTITLE: Get Text Substring For Point in SDL_ttf (C)\nDESCRIPTION: Retrieves the closest substring of a TTF_Text object to a specified point (x, y). The function takes a TTF_Text pointer, x and y coordinates, and a pointer to a TTF_SubString struct to be populated with the result. It returns true on success, false on failure. Call SDL_GetError() for details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextSubStringForPoint.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_GetTextSubStringForPoint(TTF_Text *text, int x, int y, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: SDL_RWclose Syntax\nDESCRIPTION: This code snippet shows the syntax for the SDL_RWclose function, which is used to close and free an allocated SDL_RWops structure. It takes a pointer to the SDL_RWops structure as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWclose.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RWclose(SDL_RWops *context);\n```\n\n----------------------------------------\n\nTITLE: Check Cursor Visibility in SDL3 with SDL_CursorVisible (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_CursorVisible function in SDL3 to determine if the mouse cursor is currently visible. The function takes no arguments and returns a boolean value, true if the cursor is shown, false if it's hidden. It is available since SDL 3.2.0 and should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CursorVisible.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CursorVisible(void);\n```\n\n----------------------------------------\n\nTITLE: fprintf Function Annotation Example in C\nDESCRIPTION: Illustrates how to use the SDL_PRINTF_FORMAT_STRING macro to annotate the format string parameter of the fprintf function. This annotation informs the compiler that the `fmt` parameter should be a printf-style format string, enabling warnings if it is not used correctly.  The `FILE` struct must be defined before using this example.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRINTF_FORMAT_STRING.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint fprintf(FILE *f, SDL_PRINTF_FORMAT_STRING const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: TTF_DeleteTextString Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_DeleteTextString function in C, used to delete UTF-8 text from a TTF_Text object within the SDL_ttf library. The function takes a TTF_Text pointer, an offset, and a length as input and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_DeleteTextString.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DeleteTextString(TTF_Text *text, int offset, int length);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GDK_TEXTINPUT_TITLE in C\nDESCRIPTION: Defines the SDL_HINT_GDK_TEXTINPUT_TITLE macro as a string literal. This macro is used as a hint to set the title of the TextInput window on GDK platforms using SDL. It relies on the SDL3 headers and should be set before initializing text input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GDK_TEXTINPUT_TITLE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_GDK_TEXTINPUT_TITLE \"SDL_GDK_TEXTINPUT_TITLE\"\n```\n\n----------------------------------------\n\nTITLE: Get Render Target in SDL2 (C)\nDESCRIPTION: Retrieves the current render target of the specified SDL renderer. If no render target is set (default window), it returns NULL. Requires an SDL_Renderer pointer as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRenderTarget.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Texture * SDL_GetRenderTarget(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Loading Sized SVG from SDL_IOStream\nDESCRIPTION: This function loads an SVG image from an SDL_IOStream and scales it to a specific width and height. It's useful for rendering SVG images at a desired size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadSizedSVG_IO(SDL_IOStream *src, int width, int height);                                       // Load an SVG image, scaled to a specific size.\n```\n\n----------------------------------------\n\nTITLE: Set Virtual Joystick Hat State in SDL3 (C)\nDESCRIPTION: Sets the state of a specific hat on a virtual joystick. The function requires a pointer to an SDL_Joystick, the index of the hat to modify, and a Uint8 value representing the new state of the hat. The changes will only be applied after calling SDL_UpdateJoysticks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetJoystickVirtualHat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetJoystickVirtualHat(SDL_Joystick *joystick, int hat, Uint8 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderSetLogicalSize Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_RenderSetLogicalSize function in C. It takes an SDL_Renderer pointer, width, and height as input, and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderSetLogicalSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderSetLogicalSize(SDL_Renderer * renderer, int w, int h);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderRect Syntax in C\nDESCRIPTION: This code snippet shows the function signature for SDL_RenderRect in C. It takes a renderer and a rectangle as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderRect(SDL_Renderer *renderer, const SDL_FRect *rect);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_KMSDRM_DEVICE_INDEX in C\nDESCRIPTION: Defines the SDL_HINT_KMSDRM_DEVICE_INDEX macro which is used to set the KMSDRM device index. SDL uses this hint to open the specified KMSDRM device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_KMSDRM_DEVICE_INDEX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_KMSDRM_DEVICE_INDEX \"SDL_KMSDRM_DEVICE_INDEX\"\n```\n\n----------------------------------------\n\nTITLE: Halt Group Playback Mix_HaltGroup C\nDESCRIPTION: Halts the playback of audio on a group of channels identified by a tag. This function stops audio playback on all channels associated with the specified tag.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_HaltGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: SDL_PushEvent Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_PushEvent function in C. This function adds a given SDL_Event to the SDL event queue. It takes a pointer to an SDL_Event structure as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PushEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_PushEvent(SDL_Event * event);\n```\n\n----------------------------------------\n\nTITLE: Build, Install, and Start a specific test (CMake)\nDESCRIPTION: This CMake command automates the process of building, installing, and starting a specific test on the connected Android device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target build-install-start-testsprite\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIu32 Macro Definition in C\nDESCRIPTION: Defines the SDL_PRIu32 macro as a string literal \"u\". This macro is used as a format specifier for printing Uint32 values using printf-style functions like SDL_Log.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIu32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRIu32 \"u\"\n```\n\n----------------------------------------\n\nTITLE: Halting a Channel Group SDL_mixer C\nDESCRIPTION: Halts the playback of audio on a group of channels identified by a tag. The function takes an integer tag to identify the group to stop. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HaltGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: Destroying Renderer Text Engine C\nDESCRIPTION: This function destroys a text engine created for drawing text on an SDL renderer. It requires a pointer to the TTF_TextEngine to be destroyed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_49\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroyRendererTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontHeight Function\nDESCRIPTION: Queries the total height of a font, in pixels. This is the distance from the top of the highest glyph to the bottom of the lowest glyph.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontHeight(const TTF_Font *font);                                                                                               // Query the total height of a font.\n```\n\n----------------------------------------\n\nTITLE: Pause Channel Playback Mix_Pause C\nDESCRIPTION: Pauses playback on a particular channel. This function temporarily stops the audio on the channel, allowing it to be resumed later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_Pause(int channel);\n```\n\n----------------------------------------\n\nTITLE: Build Mesa with DirectFB\nDESCRIPTION: These commands build and install Mesa with DirectFB support after configuring `configs/linux-directfb` file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake linux-directfb\nmake\n\necho Installing - please enter sudo pw.\n\nsudo make install INSTALL_DIR=/usr/local/dfb_GL\ncd src/mesa/drivers/directfb\nmake\nsudo make install INSTALL_DIR=/usr/local/dfb_GL\n```\n\n----------------------------------------\n\nTITLE: Free IMG_Animation in C\nDESCRIPTION: This function disposes of an IMG_Animation and frees its allocated resources. It takes a pointer to an IMG_Animation structure as input and has no return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nvoid IMG_FreeAnimation(IMG_Animation *anim);\n```\n\n----------------------------------------\n\nTITLE: Get Thread ID using SDL_GetThreadID in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetThreadID function to retrieve the thread identifier of an SDL_Thread object. The function returns the OS-specific thread ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetThreadID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_threadID SDL_GetThreadID(SDL_Thread * thread);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReloadGamepadMappings Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReloadGamepadMappings function in C. This function reinitializes the SDL mapping database to its initial state and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReloadGamepadMappings.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReloadGamepadMappings(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_trunc Syntax in C\nDESCRIPTION: Defines the syntax of the SDL_trunc function, which takes a double-precision floating-point number as input and returns its truncated integer part as a double.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_trunc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_trunc(double x);\n```\n\n----------------------------------------\n\nTITLE: Destroying GPU Text Engine C\nDESCRIPTION: This function destroys a text engine created for drawing text with the SDL GPU API. It requires a pointer to the TTF_TextEngine to be destroyed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_53\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroyGPUTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VITA_TOUCH_MOUSE_DEVICE in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_VITA_TOUCH_MOUSE_DEVICE hint is defined as a macro in C. It is a string literal used to set the hint via SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VITA_TOUCH_MOUSE_DEVICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VITA_TOUCH_MOUSE_DEVICE    \"SDL_HINT_VITA_TOUCH_MOUSE_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_WINDOWPOS_UNDEFINED_MASK in C\nDESCRIPTION: This macro is used to indicate that the window position is undefined and should be automatically determined by the system. It is defined as a hexadecimal value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WINDOWPOS_UNDEFINED_MASK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_UNDEFINED_MASK    0x1FFF0000u\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_CPU_FEATURE_MASK in C\nDESCRIPTION: This code snippet defines the SDL_HINT_CPU_FEATURE_MASK macro, which is used as a key for setting a hint that limits available CPU features in SDL. It is defined as a string literal \"SDL_CPU_FEATURE_MASK\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_CPU_FEATURE_MASK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_CPU_FEATURE_MASK \"SDL_CPU_FEATURE_MASK\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetCursor Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetCursor function, which returns a pointer to the active cursor. The function takes no arguments and returns an SDL_Cursor pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Cursor * SDL_GetCursor(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_Init Function\nDESCRIPTION: Initializes the SDL_ttf library, required before using any other TTF functions. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_Init(void);                                                                                                                       // Initialize SDL_ttf.\n```\n\n----------------------------------------\n\nTITLE: SDL_ISCOLORSPACE_FULL_RANGE Macro Definition in C\nDESCRIPTION: This macro determines if an SDL_Colorspace has a full range. It checks if the color range of the given colorspace is equal to SDL_COLOR_RANGE_FULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISCOLORSPACE_FULL_RANGE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISCOLORSPACE_FULL_RANGE(cspace)          (SDL_COLORSPACERANGE(cspace) == SDL_COLOR_RANGE_FULL)\n```\n\n----------------------------------------\n\nTITLE: Rewinding Music SDL_mixer C\nDESCRIPTION: Rewinds the music stream to the beginning. This typically only applies to MOD music files. The function takes no arguments. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_RewindMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_IME_INTERNAL_EDITING in C\nDESCRIPTION: This code snippet shows how SDL_HINT_IME_INTERNAL_EDITING is defined as a macro in C. It represents a string literal used to set the hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_IME_INTERNAL_EDITING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_IME_INTERNAL_EDITING \"SDL_IME_INTERNAL_EDITING\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticRumbleStop Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_HapticRumbleStop function. This function stops the simple rumble on a haptic device. It takes an SDL_Haptic pointer as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticRumbleStop.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticRumbleStop(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Get Window Properties in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetWindowProperties function in SDL3. This function retrieves properties associated with a window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetWindowProperties(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_LockRWLockForWriting Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_LockRWLockForWriting function. This function locks the provided read/write lock for writing.  It blocks until the lock is acquired.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LockRWLockForWriting.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockRWLockForWriting(SDL_RWLock *rwlock);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_Address struct definition in C\nDESCRIPTION: Defines the SDLNet_Address struct as an opaque type. This struct represents a computer-readable address and should only be manipulated via SDL_net functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_Address.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDLNet_Address SDLNet_Address;\n```\n\n----------------------------------------\n\nTITLE: UDEV Rule for Older udev Systems\nDESCRIPTION: Example udev rule for older systems, setting ID_INPUT_JOYSTICK=1 if ID_CLASS is joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_10\n\nLANGUAGE: udev\nCODE:\n```\nSUBSYSTEM==\"input\", ENV{ID_CLASS}==\"joystick\", ENV{ID_INPUT_JOYSTICK}=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_HIDAPI_IGNORE_DEVICES in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_HIDAPI_IGNORE_DEVICES macro, which represents the hint string used to ignore specific HID devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_HIDAPI_IGNORE_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_HIDAPI_IGNORE_DEVICES \"SDL_HIDAPI_IGNORE_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_malloc_func Typedef Definition in C\nDESCRIPTION: Defines the typedef for SDL_malloc_func, a callback function pointer used to implement SDL_malloc.  It takes a size_t argument representing the size to allocate and returns a void pointer to the allocated memory or NULL if the allocation fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_malloc_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *(SDLCALL *SDL_malloc_func)(size_t size);\n```\n\n----------------------------------------\n\nTITLE: SDL_RendererFlip Enum Definition in C\nDESCRIPTION: Defines the `SDL_RendererFlip` enumeration. This enumeration is used to specify whether a texture should be flipped horizontally, vertically, or not at all when rendering with `SDL_RenderCopyEx`. The enumeration constants `SDL_FLIP_NONE`, `SDL_FLIP_HORIZONTAL`, and `SDL_FLIP_VERTICAL` represent these options, respectively.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RendererFlip.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_RendererFlip\n{\n    SDL_FLIP_NONE = 0x00000000,     /**< Do not flip */\n    SDL_FLIP_HORIZONTAL = 0x00000001,    /**< flip horizontally */\n    SDL_FLIP_VERTICAL = 0x00000002     /**< flip vertically */\n} SDL_RendererFlip;\n```\n\n----------------------------------------\n\nTITLE: SDL_strtol Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_strtol function in C. This function parses a long integer from a string based on the specified base. It takes a null-terminated string, a pointer to a char pointer for storing the end position, and the base of the number as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strtol.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nlong SDL_strtol(const char *str, char **endp, int base);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateTrays Syntax in C\nDESCRIPTION: The SDL_UpdateTrays function updates the system trays. It is called automatically by the event loop and is only needed if you're using trays but aren't handling SDL events. This function is available since SDL 3.2.0 and should only be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateTrays.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UpdateTrays(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AudioFormat enum in C\nDESCRIPTION: This code snippet defines the SDL_AudioFormat enumeration in C. It specifies different audio formats, including unsigned and signed 8-bit samples, signed 16-bit and 32-bit samples in little-endian and big-endian byte order, and 32-bit floating-point samples in little-endian and big-endian byte order. The enumeration also includes byte order definitions based on the system's endianness using preprocessor directives.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_AudioFormat\n{\n    SDL_AUDIO_UNKNOWN   = 0x0000u,  /**< Unspecified audio format */\n    SDL_AUDIO_U8        = 0x0008u,  /**< Unsigned 8-bit samples */\n        /* SDL_DEFINE_AUDIO_FORMAT(0, 0, 0, 8), */\n    SDL_AUDIO_S8        = 0x8008u,  /**< Signed 8-bit samples */\n        /* SDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 8), */\n    SDL_AUDIO_S16LE     = 0x8010u,  /**< Signed 16-bit samples */\n        /* SDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 16), */\n    SDL_AUDIO_S16BE     = 0x9010u,  /**< As above, but big-endian byte order */\n        /* SDL_DEFINE_AUDIO_FORMAT(1, 1, 0, 16), */\n    SDL_AUDIO_S32LE     = 0x8020u,  /**< 32-bit integer samples */\n        /* SDL_DEFINE_AUDIO_FORMAT(1, 0, 0, 32), */\n    SDL_AUDIO_S32BE     = 0x9020u,  /**< As above, but big-endian byte order */\n        /* SDL_DEFINE_AUDIO_FORMAT(1, 1, 0, 32), */\n    SDL_AUDIO_F32LE     = 0x8120u,  /**< 32-bit floating point samples */\n        /* SDL_DEFINE_AUDIO_FORMAT(1, 0, 1, 32), */\n    SDL_AUDIO_F32BE     = 0x9120u,  /**< As above, but big-endian byte order */\n        /* SDL_DEFINE_AUDIO_FORMAT(1, 1, 1, 32), */\n\n    /* These represent the current system's byteorder. */\n    #if SDL_BYTEORDER == SDL_LIL_ENDIAN\n    SDL_AUDIO_S16 = SDL_AUDIO_S16LE,\n    SDL_AUDIO_S32 = SDL_AUDIO_S32LE,\n    SDL_AUDIO_F32 = SDL_AUDIO_F32LE\n    #else\n    SDL_AUDIO_S16 = SDL_AUDIO_S16BE,\n    SDL_AUDIO_S32 = SDL_AUDIO_S32BE,\n    SDL_AUDIO_F32 = SDL_AUDIO_F32BE\n    #endif\n} SDL_AudioFormat;\n```\n\n----------------------------------------\n\nTITLE: Compiling SDL_image app for Android\nDESCRIPTION: Compiles the `showimage.c` application using `androidbuild.sh`, links SDL_image, and builds the Android application. The script also includes commands to link necessary libraries and configure the build process.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/src/SDL3/build-scripts/\n./androidbuild.sh org.libsdl.showimage /usr/src/SDL3_image/showimage.c\ncd /usr/src/SDL3/build/org.libsdl.showimage/\nln -s /usr/src/SDL3_image jni/\nln -s /usr/src/SDL3_image/external/libwebp-0.3.0 jni/webp\nsed -i -e 's/^LOCAL_SHARED_LIBRARIES.*/& SDL3_image/' jni/src/Android.mk\nndk-build -j$(nproc)\nant debug install\n```\n\n----------------------------------------\n\nTITLE: SDL_YUV_CONVERSION_MODE Enum Definition in C\nDESCRIPTION: Defines the enumeration SDL_YUV_CONVERSION_MODE, which specifies the formula used for converting between YUV and RGB color spaces. The enumeration includes constants for JPEG (full range), BT.601 (default), BT.709, and an automatic mode that chooses between BT.601 for standard definition content and BT.709 for high definition content.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_YUV_CONVERSION_MODE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_YUV_CONVERSION_MODE\n{\n    SDL_YUV_CONVERSION_JPEG,        /**< Full range JPEG */\n    SDL_YUV_CONVERSION_BT601,       /**< BT.601 (the default) */\n    SDL_YUV_CONVERSION_BT709,       /**< BT.709 */\n    SDL_YUV_CONVERSION_AUTOMATIC    /**< BT.601 for SD content, BT.709 for HD content */\n} SDL_YUV_CONVERSION_MODE;\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontScript Function\nDESCRIPTION: Set the script to be used for text shaping by a font. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_45\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontScript(TTF_Font *font, Uint32 script);                                                                                     // Set the script to be used for text shaping by a font.\n```\n\n----------------------------------------\n\nTITLE: SDL_TryLockRWLockForWriting Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_TryLockRWLockForWriting function in C. It takes a pointer to an SDL_RWLock as input and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TryLockRWLockForWriting.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_TryLockRWLockForWriting(SDL_RWLock *rwlock);\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseButtonFlags Type Definition (C)\nDESCRIPTION: Defines the SDL_MouseButtonFlags type as an unsigned 32-bit integer (Uint32) in C. This type is used to represent the state of mouse buttons.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseButtonFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_MouseButtonFlags;\n```\n\n----------------------------------------\n\nTITLE: SDL_ThreadFunction Definition in C\nDESCRIPTION: Defines the function signature `SDL_ThreadFunction` for use with `SDL_CreateThread`. It takes a void pointer as an argument and returns an integer value, which represents the thread's exit code. The `SDLCALL` macro specifies the calling convention.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ThreadFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int (SDLCALL * SDL_ThreadFunction) (void *data);\n```\n\n----------------------------------------\n\nTITLE: SDL_reinterpret_cast Macro Definition (C/C++)\nDESCRIPTION: This macro provides a C++ reinterpret_cast if compiled as C++, and a C-style cast if compiled as C. It is defined in SDL3/SDL_stdinc.h and is used to avoid compiler warnings in C++ when casting between types. The macro takes the target type and the expression to cast as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_reinterpret_cast.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_reinterpret_cast(type, expression) reinterpret_cast<type>(expression)  /* or `((type)(expression))` in C */\n```\n\n----------------------------------------\n\nTITLE: SDL_TimeFormat Enum Definition in C\nDESCRIPTION: This code snippet defines the SDL_TimeFormat enum, which is used to represent the preferred time format (either 24-hour or 12-hour) of the current system locale. It is available since SDL 3.2.0 and is defined in SDL3/SDL_time.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TimeFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_TimeFormat\n{\n    SDL_TIME_FORMAT_24HR = 0, /**< 24 hour time */\n    SDL_TIME_FORMAT_12HR = 1  /**< 12 hour time */\n} SDL_TimeFormat;\n```\n\n----------------------------------------\n\nTITLE: Setting HID Device to Non-Blocking Mode in SDL (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_hid_set_nonblocking function, which sets the device handle to be non-blocking.  This controls the behavior of SDL_hid_read, determining if it blocks waiting for data or returns immediately if no data is available. The first parameter is the device handle and the second parameter enables (1) or disables (0) non-blocking mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_set_nonblocking.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_set_nonblocking(SDL_hid_device *dev, int nonblock);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WAVE_RIFF_CHUNK_SIZE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_WAVE_RIFF_CHUNK_SIZE macro. This hint is used to control how SDL handles the RIFF chunk size when loading WAVE files. The string value associated with the macro represents the environment variable that can be used to configure this behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WAVE_RIFF_CHUNK_SIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WAVE_RIFF_CHUNK_SIZE   \"SDL_WAVE_RIFF_CHUNK_SIZE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_MFI in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_JOYSTICK_MFI hint is defined as a macro string in C. It represents the environment variable name that can be used to control the usage of GCController for handling game controllers. This hint needs to be set before initializing SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_MFI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_MFI \"SDL_JOYSTICK_MFI\"\n```\n\n----------------------------------------\n\nTITLE: SDLNet_AcceptClient Syntax (C)\nDESCRIPTION: The SDLNet_AcceptClient function accepts a pending client connection on a server and creates a stream socket for communication. It takes a server object and a pointer to a stream socket as input. The function returns true on success (even if no connection was pending) and sets the client_stream to the new stream socket if a connection was accepted, or NULL if not. False is returned on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_AcceptClient.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDLNet_AcceptClient(SDLNet_Server *server, SDLNet_StreamSocket **client_stream);\n```\n\n----------------------------------------\n\nTITLE: C Example Using SDL_assert with if-else\nDESCRIPTION: This code shows how SDL_assert should be used within an if-else block. The do/while construct in SDL_enabled_assert ensures that the 'else' statement binds to the intended 'if' statement and avoids dangling else problems.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_enabled_assert.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nif (x) SDL_assert(y); else blah();\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Event Logging Hint in C\nDESCRIPTION: This code snippet shows how SDL_HINT_EVENT_LOGGING is defined as a macro string in C. This macro is used to set the hint using SDL_SetHint to control the verbosity of SDL event logging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_EVENT_LOGGING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EVENT_LOGGING   \"SDL_EVENT_LOGGING\"\n```\n\n----------------------------------------\n\nTITLE: SDL Audio Format Bit Structure\nDESCRIPTION: Illustrates the bit structure of SDL_AudioFormat. It explains the meaning of each bit, indicating whether the sample is signed, big-endian, float, and the sample bit size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioFormat.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n++-----------------------sample is signed if set\n||\n||       ++-----------sample is bigendian if set\n||       ||\n||       ||          ++---sample is float if set\n||       ||          ||\n||       ||          || +---sample bit size---+\n||       ||          || |\n15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Media Keycodes in C\nDESCRIPTION: This code snippet defines a set of preprocessor macros that represent different media keycodes within the SDL library.  These macros map SDL scancodes to specific keycode values, enabling developers to handle media-related key presses. The `SDL_SCANCODE_TO_KEYCODE` macro likely converts a scancode to a keycode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keycode.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\n#define SDLK_MEDIA_REWIND           0x4000010au /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_REWIND) */\n#define SDLK_MEDIA_NEXT_TRACK       0x4000010bu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_NEXT_TRACK) */\n#define SDLK_MEDIA_PREVIOUS_TRACK   0x4000010cu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PREVIOUS_TRACK) */\n#define SDLK_MEDIA_STOP             0x4000010du /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_STOP) */\n#define SDLK_MEDIA_EJECT            0x4000010eu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_EJECT) */\n#define SDLK_MEDIA_PLAY_PAUSE       0x4000010fu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_PLAY_PAUSE) */\n#define SDLK_MEDIA_SELECT           0x40000110u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIA_SELECT) */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RETURN_KEY_HIDES_IME in C\nDESCRIPTION: This C code snippet defines the SDL_HINT_RETURN_KEY_HIDES_IME macro, which is used as the key for setting the hint that controls the soft keyboard return key behavior on Android and iOS. The hint's value determines whether the return key triggers a key event or hides the keyboard. The default behavior is to handle it as a key event.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RETURN_KEY_HIDES_IME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RETURN_KEY_HIDES_IME \"SDL_RETURN_KEY_HIDES_IME\"\n```\n\n----------------------------------------\n\nTITLE: SDLNet_TCP_GetPeerAddress Syntax in C\nDESCRIPTION: Defines the syntax for SDLNet_TCP_GetPeerAddress function, which retrieves the IP address information associated with a TCP socket. It takes a TCPsocket as input and returns a pointer to an IPaddress structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_GetPeerAddress.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIPaddress * SDLNet_TCP_GetPeerAddress(TCPsocket sock);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteS64LE Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_WriteS64LE function. It takes an SDL_IOStream pointer and a Sint64 value as input. The function attempts to write the provided 64-bit integer to the specified stream in little-endian format, returning a boolean indicating success or failure. It requires the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteS64LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteS64LE(SDL_IOStream *dst, Sint64 value);\n```\n\n----------------------------------------\n\nTITLE: Define SDL Major Version in C\nDESCRIPTION: This macro defines the SDL major version number. In this case, the SDL_MAJOR_VERSION is defined as 3. This value is used to identify the major version of the SDL library being used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAJOR_VERSION   3\n```\n\n----------------------------------------\n\nTITLE: SDL_VERSIONNUM_MINOR Macro Definition in C\nDESCRIPTION: This macro extracts the minor version number from a given SDL version number. It takes the version number as input and performs integer division and modulo operations to isolate the minor version component. The macro is defined in SDL3/SDL_version.h and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VERSIONNUM_MINOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VERSIONNUM_MINOR(version) (((version) / 1000) % 1000)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AUDIO_MASK_SIGNED in C\nDESCRIPTION: This code defines the SDL_AUDIO_MASK_SIGNED macro. It's a bitmask (1u << 15) used to identify the signed data flag within an SDL_AudioFormat structure in SDL. This macro is available starting with SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_MASK_SIGNED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_MASK_SIGNED        (1u<<15)\n```\n\n----------------------------------------\n\nTITLE: SDL_DrawGPUIndexedPrimitivesIndirect Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_DrawGPUIndexedPrimitivesIndirect function, which draws data using bound graphics state with an index buffer enabled and draw parameters set from a buffer. It requires an SDL_GPURenderPass, an SDL_GPUBuffer, an offset, and a draw count as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DrawGPUIndexedPrimitivesIndirect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DrawGPUIndexedPrimitivesIndirect(\n    SDL_GPURenderPass *render_pass,\n    SDL_GPUBuffer *buffer,\n    Uint32 offset,\n    Uint32 draw_count);\n\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MAX_LOG_MESSAGE Macro in C\nDESCRIPTION: This code snippet defines the SDL_MAX_LOG_MESSAGE macro, which specifies the maximum size for SDL log messages before SDL version 2.0.24. The macro is defined as 4096 and is included in the SDL_log.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MAX_LOG_MESSAGE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAX_LOG_MESSAGE 4096\n```\n\n----------------------------------------\n\nTITLE: Define SDL_CompareCallback_r Function Pointer Type in C\nDESCRIPTION: This snippet defines the `SDL_CompareCallback_r` function pointer type.  It is used for custom comparison functions within SDL's sorting and binary search algorithms. The callback takes a `userdata` pointer and two const void pointers (`a` and `b`) as input, and returns an integer indicating their relative order (-1, 0, or 1).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CompareCallback_r.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int (SDLCALL *SDL_CompareCallback_r)(void *userdata, const void *a, const void *b);\n```\n\n----------------------------------------\n\nTITLE: SDL_MessageBox Flags Constants\nDESCRIPTION: Defines the constants used for specifying the type and behavior of the message box. These constants can be combined using bitwise OR to create custom message box configurations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MESSAGEBOX_ERROR                    0x00000010u /**< error dialog */\n#define SDL_MESSAGEBOX_WARNING                  0x00000020u /**< warning dialog */\n#define SDL_MESSAGEBOX_INFORMATION              0x00000040u /**< informational dialog */\n#define SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT    0x00000080u /**< buttons placed left to right */\n#define SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT    0x00000100u /**< buttons placed right to left */\n```\n\n----------------------------------------\n\nTITLE: Start/Stop BLE Scan - SDL_hid_ble_scan (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_hid_ble_scan function, which is used to initiate or terminate a Bluetooth Low Energy (BLE) scan specifically on iOS and tvOS platforms. It takes a boolean parameter to start (true) or stop (false) the scan. This function facilitates the pairing of Steam Controllers with these devices using the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_ble_scan.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_hid_ble_scan(bool active);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_NO_THREAD_SAFETY_ANALYSIS Macro in C\nDESCRIPTION: This code snippet defines the SDL_NO_THREAD_SAFETY_ANALYSIS macro. It expands to SDL_THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis), which is used to disable thread safety analysis by Clang. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NO_THREAD_SAFETY_ANALYSIS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NO_THREAD_SAFETY_ANALYSIS \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis)\n```\n\n----------------------------------------\n\nTITLE: SDL_IN_BYTECAP Macro Definition in C\nDESCRIPTION: Defines the SDL_IN_BYTECAP macro using _In_bytecount_(x) if the compiler supports it. This macro annotates function parameters indicating the size of the input buffer. It helps static analysis tools and compilers identify potential buffer overflows. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IN_BYTECAP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IN_BYTECAP(x) _In_bytecount_(x)\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockTexture Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_UnlockTexture function in C. It takes a pointer to an SDL_Texture as input and unlocks the texture, potentially uploading changes to video memory. This function should be called on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnlockTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockTexture(SDL_Texture *texture);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTrayMenu Syntax in C\nDESCRIPTION: Retrieves a previously created tray menu associated with a given SDL_Tray. The function requires an SDL_Tray pointer as input and returns an SDL_TrayMenu pointer, or NULL on failure. The returned menu does not need to be explicitly destroyed, as it will be destroyed along with the tray.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTrayMenu.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TrayMenu * SDL_GetTrayMenu(SDL_Tray *tray);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyAxisEvent Structure Definition in C\nDESCRIPTION: Defines the structure SDL_JoyAxisEvent used to represent joystick axis motion events. It contains information like event type, timestamp, joystick ID, axis index and axis value. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoyAxisEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyAxisEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_JOYSTICK_AXIS_MOTION */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 axis;         /**< The joystick axis index */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n    Sint16 value;       /**< The axis value (range: -32768 to 32767) */\n    Uint16 padding4;\n} SDL_JoyAxisEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_LowerBlit Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_LowerBlit function in C. It takes source and destination SDL_Surface pointers, as well as source and destination SDL_Rect pointers as arguments.  The function returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LowerBlit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_LowerBlit\n    (SDL_Surface * src, SDL_Rect * srcrect,\n     SDL_Surface * dst, SDL_Rect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_WINDOWS in C\nDESCRIPTION: This macro is defined to 1 when compiling for Windows or related platforms.  It's used in conditional compilation to execute platform-specific code.  Related platform macros offer more specific identification.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_WINDOWS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_WINDOWS 1\n```\n\n----------------------------------------\n\nTITLE: Close Haptic Device in SDL3 (C)\nDESCRIPTION: Closes a haptic device that was previously opened using `SDL_OpenHaptic`. This function releases the resources associated with the haptic device. The parameter `haptic` is a pointer to the `SDL_Haptic` structure representing the device to be closed. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CloseHaptic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CloseHaptic(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: SDL_FLT_EPSILON Definition in C\nDESCRIPTION: This code snippet shows the definition of the SDL_FLT_EPSILON macro in C. It defines a constant value used for floating-point comparisons, ensuring platform compatibility. The value is either the platform's FLT_EPSILON or a default value if FLT_EPSILON is not available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FLT_EPSILON.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_FLT_EPSILON 1.1920928955078125e-07F /* 0x0.000002p0 */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR hint as a preprocessor macro. This hint is used to control whether the libdecor Wayland backend is preferred for window decorations over native decorations. The hint should be set before SDL is initialized to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR \"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Scancode Enum in C\nDESCRIPTION: This code snippet defines the SDL_Scancode enumeration in C. The enum assigns symbolic names to integer values representing keyboard scancodes. This allows for keyboard input handling that is independent of the specific keyboard layout.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Scancode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_Scancode\n{\n    SDL_SCANCODE_UNKNOWN = 0,\n\n    /**\n     *  \\name Usage page 0x07\n     *\n     *  These values are from usage page 0x07 (USB keyboard page).\n     */\n    /* @{ */\n\n    SDL_SCANCODE_A = 4,\n    SDL_SCANCODE_B = 5,\n    SDL_SCANCODE_C = 6,\n    SDL_SCANCODE_D = 7,\n    SDL_SCANCODE_E = 8,\n    SDL_SCANCODE_F = 9,\n    SDL_SCANCODE_G = 10,\n    SDL_SCANCODE_H = 11,\n    SDL_SCANCODE_I = 12,\n    SDL_SCANCODE_J = 13,\n    SDL_SCANCODE_K = 14,\n    SDL_SCANCODE_L = 15,\n    SDL_SCANCODE_M = 16,\n    SDL_SCANCODE_N = 17,\n    SDL_SCANCODE_O = 18,\n    SDL_SCANCODE_P = 19,\n    SDL_SCANCODE_Q = 20,\n    SDL_SCANCODE_R = 21,\n    SDL_SCANCODE_S = 22,\n    SDL_SCANCODE_T = 23,\n    SDL_SCANCODE_U = 24,\n    SDL_SCANCODE_V = 25,\n    SDL_SCANCODE_W = 26,\n    SDL_SCANCODE_X = 27,\n    SDL_SCANCODE_Y = 28,\n    SDL_SCANCODE_Z = 29,\n\n    SDL_SCANCODE_1 = 30,\n    SDL_SCANCODE_2 = 31,\n    SDL_SCANCODE_3 = 32,\n    SDL_SCANCODE_4 = 33,\n    SDL_SCANCODE_5 = 34,\n    SDL_SCANCODE_6 = 35,\n    SDL_SCANCODE_7 = 36,\n    SDL_SCANCODE_8 = 37,\n    SDL_SCANCODE_9 = 38,\n    SDL_SCANCODE_0 = 39,\n\n    SDL_SCANCODE_RETURN = 40,\n    SDL_SCANCODE_ESCAPE = 41,\n    SDL_SCANCODE_BACKSPACE = 42,\n    SDL_SCANCODE_TAB = 43,\n    SDL_SCANCODE_SPACE = 44,\n\n    SDL_SCANCODE_MINUS = 45,\n    SDL_SCANCODE_EQUALS = 46,\n    SDL_SCANCODE_LEFTBRACKET = 47,\n    SDL_SCANCODE_RIGHTBRACKET = 48,\n    SDL_SCANCODE_BACKSLASH = 49, /**< Located at the lower left of the return\n                                  *   key on ISO keyboards and at the right end\n                                  *   of the QWERTY row on ANSI keyboards.\n                                  *   Produces REVERSE SOLIDUS (backslash) and\n                                  *   VERTICAL LINE in a US layout, REVERSE\n                                  *   SOLIDUS and VERTICAL LINE in a UK Mac\n                                  *   layout, NUMBER SIGN and TILDE in a UK\n                                  *   Windows layout, DOLLAR SIGN and POUND SIGN\n                                  *   in a Swiss German layout, NUMBER SIGN and\n                                  *   APOSTROPHE in a German layout, GRAVE\n                                  *   ACCENT and POUND SIGN in a French Mac\n                                  *   layout, and ASTERISK and MICRO SIGN in a\n                                  *   French Windows layout.\n                                  */\n    SDL_SCANCODE_NONUSHASH = 50, /**< ISO USB keyboards actually use this code\n                                  *   instead of 49 for the same key, but all\n                                  *   OSes I've seen treat the two codes\n                                  *   identically. So, as an implementor, unless\n                                  *   your keyboard generates both of those\n                                  *   codes and your OS treats them differently,\n                                  *   you should generate SDL_SCANCODE_BACKSLASH\n                                  *   instead of this code. As a user, you\n                                  *   should not rely on this code because SDL\n                                  *   will never generate it with most (all?)\n                                  *   keyboards.\n                                  */\n    SDL_SCANCODE_SEMICOLON = 51,\n    SDL_SCANCODE_APOSTROPHE = 52,\n    SDL_SCANCODE_GRAVE = 53, /**< Located in the top left corner (on both ANSI\n                              *   and ISO keyboards). Produces GRAVE ACCENT and\n                              *   TILDE in a US Windows layout and in US and UK\n                              *   Mac layouts on ANSI keyboards, GRAVE ACCENT\n                              *   and NOT SIGN in a UK Windows layout, SECTION\n                              *   SIGN and PLUS-MINUS SIGN in US and UK Mac\n                              *   layouts on ISO keyboards, SECTION SIGN and\n                              *   DEGREE SIGN in a Swiss German layout (Mac:\n                              *   only on ISO keyboards), CIRCUMFLEX ACCENT and\n                              *   DEGREE SIGN in a German layout (Mac: only on\n                              *   ISO keyboards), SUPERSCRIPT TWO and TILDE in a\n                              *   French Windows layout, COMMERCIAL AT and\n                              *   NUMBER SIGN in a French Mac layout on ISO\n                              *   keyboards, and LESS-THAN SIGN and GREATER-THAN\n                              *   SIGN in a Swiss German, German, or French Mac\n                              *   layout on ANSI keyboards.\n                              */\n    SDL_SCANCODE_COMMA = 54,\n    SDL_SCANCODE_PERIOD = 55,\n    SDL_SCANCODE_SLASH = 56,\n\n    SDL_SCANCODE_CAPSLOCK = 57,\n\n    SDL_SCANCODE_F1 = 58,\n    SDL_SCANCODE_F2 = 59,\n    SDL_SCANCODE_F3 = 60,\n    SDL_SCANCODE_F4 = 61,\n    SDL_SCANCODE_F5 = 62,\n    SDL_SCANCODE_F6 = 63,\n    SDL_SCANCODE_F7 = 64,\n    SDL_SCANCODE_F8 = 65,\n    SDL_SCANCODE_F9 = 66,\n    SDL_SCANCODE_F10 = 67,\n    SDL_SCANCODE_F11 = 68,\n    SDL_SCANCODE_F12 = 69,\n\n    SDL_SCANCODE_PRINTSCREEN = 70,\n    SDL_SCANCODE_SCROLLLOCK = 71,\n    SDL_SCANCODE_PAUSE = 72,\n    SDL_SCANCODE_INSERT = 73, /**< insert on PC, help on some Mac keyboards (but\n                                   does send code 73, not 117) */\n    SDL_SCANCODE_HOME = 74,\n    SDL_SCANCODE_PAGEUP = 75,\n    SDL_SCANCODE_DELETE = 76,\n    SDL_SCANCODE_END = 77,\n    SDL_SCANCODE_PAGEDOWN = 78,\n    SDL_SCANCODE_RIGHT = 79,\n    SDL_SCANCODE_LEFT = 80,\n    SDL_SCANCODE_DOWN = 81,\n    SDL_SCANCODE_UP = 82,\n\n    SDL_SCANCODE_NUMLOCKCLEAR = 83, /**< num lock on PC, clear on Mac keyboards\n                                     */\n    SDL_SCANCODE_KP_DIVIDE = 84,\n    SDL_SCANCODE_KP_MULTIPLY = 85,\n    SDL_SCANCODE_KP_MINUS = 86,\n    SDL_SCANCODE_KP_PLUS = 87,\n    SDL_SCANCODE_KP_ENTER = 88,\n    SDL_SCANCODE_KP_1 = 89,\n    SDL_SCANCODE_KP_2 = 90,\n    SDL_SCANCODE_KP_3 = 91,\n    SDL_SCANCODE_KP_4 = 92,\n    SDL_SCANCODE_KP_5 = 93,\n    SDL_SCANCODE_KP_6 = 94,\n    SDL_SCANCODE_KP_7 = 95,\n    SDL_SCANCODE_KP_8 = 96,\n    SDL_SCANCODE_KP_9 = 97,\n    SDL_SCANCODE_KP_0 = 98,\n    SDL_SCANCODE_KP_PERIOD = 99,\n\n    SDL_SCANCODE_NONUSBACKSLASH = 100, /**< This is the additional key that ISO\n                                        *   keyboards have over ANSI ones,\n                                        *   located between left shift and Y.\n                                        *   Produces GRAVE ACCENT and TILDE in a\n                                        *   US or UK Mac layout, REVERSE SOLIDUS\n                                        *   (backslash) and VERTICAL LINE in a\n                                        *   US or UK Windows layout, and\n                                        *   LESS-THAN SIGN and GREATER-THAN SIGN\n                                        *   in a Swiss German, German, or French\n                                        *   layout. */\n    SDL_SCANCODE_APPLICATION = 101, /**< windows contextual menu, compose */\n    SDL_SCANCODE_POWER = 102, /**< The USB document says this is a status flag,\n                               *   not a physical key - but some Mac keyboards\n                               *   do have a power key. */\n    SDL_SCANCODE_KP_EQUALS = 103,\n    SDL_SCANCODE_F13 = 104,\n    SDL_SCANCODE_F14 = 105,\n    SDL_SCANCODE_F15 = 106,\n    SDL_SCANCODE_F16 = 107,\n    SDL_SCANCODE_F17 = 108,\n    SDL_SCANCODE_F18 = 109,\n    SDL_SCANCODE_F19 = 110,\n    SDL_SCANCODE_F20 = 111,\n    SDL_SCANCODE_F21 = 112,\n    SDL_SCANCODE_F22 = 113,\n    SDL_SCANCODE_F23 = 114,\n    SDL_SCANCODE_F24 = 115,\n    SDL_SCANCODE_EXECUTE = 116,\n    SDL_SCANCODE_HELP = 117,    /**< AL Integrated Help Center */\n    SDL_SCANCODE_MENU = 118,    /**< Menu (show menu) */\n    SDL_SCANCODE_SELECT = 119,\n    SDL_SCANCODE_STOP = 120,    /**< AC Stop */\n    SDL_SCANCODE_AGAIN = 121,   /**< AC Redo/Repeat */\n    SDL_SCANCODE_UNDO = 122,    /**< AC Undo */\n    SDL_SCANCODE_CUT = 123,     /**< AC Cut */\n    SDL_SCANCODE_COPY = 124,    /**< AC Copy */\n    SDL_SCANCODE_PASTE = 125,   /**< AC Paste */\n    SDL_SCANCODE_FIND = 126,    /**< AC Find */\n    SDL_SCANCODE_MUTE = 127,\n    SDL_SCANCODE_VOLUMEUP = 128,\n    SDL_SCANCODE_VOLUMEDOWN = 129,\n/* not sure whether there's a reason to enable these */\n/*     SDL_SCANCODE_LOCKINGCAPSLOCK = 130,  */\n/*     SDL_SCANCODE_LOCKINGNUMLOCK = 131, */\n/*     SDL_SCANCODE_LOCKINGSCROLLLOCK = 132, */\n    SDL_SCANCODE_KP_COMMA = 133,\n    SDL_SCANCODE_KP_EQUALSAS400 = 134,\n\n    SDL_SCANCODE_INTERNATIONAL1 = 135, /**< used on Asian keyboards, see\n                                            footnotes in USB doc */\n    SDL_SCANCODE_INTERNATIONAL2 = 136,\n    SDL_SCANCODE_INTERNATIONAL3 = 137, /**< Yen */\n    SDL_SCANCODE_INTERNATIONAL4 = 138,\n    SDL_SCANCODE_INTERNATIONAL5 = 139,\n    SDL_SCANCODE_INTERNATIONAL6 = 140,\n    SDL_SCANCODE_INTERNATIONAL7 = 141,\n    SDL_SCANCODE_INTERNATIONAL8 = 142,\n    SDL_SCANCODE_INTERNATIONAL9 = 143,\n    SDL_SCANCODE_LANG1 = 144, /**< Hangul/English toggle */\n    SDL_SCANCODE_LANG2 = 145, /**< Hanja conversion */\n    SDL_SCANCODE_LANG3 = 146, /**< Katakana */\n    SDL_SCANCODE_LANG4 = 147, /**< Hiragana */\n    SDL_SCANCODE_LANG5 = 148, /**< Zenkaku/Hankaku */\n    SDL_SCANCODE_LANG6 = 149, /**< reserved */\n    SDL_SCANCODE_LANG7 = 150, /**< reserved */\n    SDL_SCANCODE_LANG8 = 151, /**< reserved */\n    SDL_SCANCODE_LANG9 = 152, /**< reserved */\n\n    SDL_SCANCODE_ALTERASE = 153,    /**< Erase-Eaze */\n    SDL_SCANCODE_SYSREQ = 154,\n    SDL_SCANCODE_CANCEL = 155,      /**< AC Cancel */\n    SDL_SCANCODE_CLEAR = 156,\n    SDL_SCANCODE_PRIOR = 157,\n    SDL_SCANCODE_RETURN2 = 158,\n    SDL_SCANCODE_SEPARATOR = 159,\n    SDL_SCANCODE_OUT = 160,\n    SDL_SCANCODE_OPER = 161,\n    SDL_SCANCODE_CLEARAGAIN = 162,\n    SDL_SCANCODE_CRSEL = 163,\n    SDL_SCANCODE_EXSEL = 164,\n\n    SDL_SCANCODE_KP_00 = 176,\n    SDL_SCANCODE_KP_000 = 177,\n    SDL_SCANCODE_THOUSANDSSEPARATOR = 178,\n    SDL_SCANCODE_DECIMALSEPARATOR = 179,\n    SDL_SCANCODE_CURRENCYUNIT = 180\n} SDL_Scancode;\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Name in C\nDESCRIPTION: Retrieves the implementation-dependent name of a sensor using its SDL_Sensor object. The function takes an SDL_Sensor pointer as input and returns a const char pointer representing the sensor's name. It returns NULL if the input sensor is NULL. Available since SDL 2.0.9.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_SensorGetName(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: SDL_CondBroadcast Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_CondBroadcast function in C. It takes a pointer to an SDL_cond structure as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CondBroadcast.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_CondBroadcast(SDL_cond * cond);\n```\n\n----------------------------------------\n\nTITLE: Check Texture Format Support SDL_GPU C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GPUTextureSupportsFormat function. It takes a SDL_GPUDevice pointer, a SDL_GPUTextureFormat, a SDL_GPUTextureType, and SDL_GPUTextureUsageFlags as input.  It returns a boolean indicating if the specified texture format is supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureSupportsFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GPUTextureSupportsFormat(\n    SDL_GPUDevice *device,\n    SDL_GPUTextureFormat format,\n    SDL_GPUTextureType type,\n    SDL_GPUTextureUsageFlags usage);\n\n```\n\n----------------------------------------\n\nTITLE: Get CAMetalLayer from SDL_Renderer (C)\nDESCRIPTION: Retrieves the CAMetalLayer associated with the given Metal renderer.  This function allows access to the underlying Metal layer for advanced rendering operations.  The returned void* should be cast to a `CAMetalLayer *`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderGetMetalLayer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_RenderGetMetalLayer(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_hid_device_info struct in C\nDESCRIPTION: Defines the structure SDL_hid_device_info, which encapsulates information about a connected HID device. The structure members provide device identification (vendor_id, product_id, serial_number), descriptive strings (manufacturer_string, product_string), interface details (interface_number, interface_class, interface_subclass, interface_protocol), and device connection information (path, release_number, usage_page, usage). It also contains a pointer to the next SDL_hid_device_info structure to implement a linked list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_device_info.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_hid_device_info\n{\n    /** Platform-specific device path */\n    char *path;\n    /** Device Vendor ID */\n    unsigned short vendor_id;\n    /** Device Product ID */\n    unsigned short product_id;\n    /** Serial Number */\n    wchar_t *serial_number;\n    /** Device Release Number in binary-coded decimal,\n        also known as Device Version Number */\n    unsigned short release_number;\n    /** Manufacturer String */\n    wchar_t *manufacturer_string;\n    /** Product string */\n    wchar_t *product_string;\n    /** Usage Page for this Device/Interface\n        (Windows/Mac only). */\n    unsigned short usage_page;\n    /** Usage for this Device/Interface\n        (Windows/Mac only).*/\n    unsigned short usage;\n    /** The USB interface which this logical device\n        represents.\n\n        * Valid on both Linux implementations in all cases.\n        * Valid on the Windows implementation only if the device\n          contains more than one interface. */\n    int interface_number;\n\n    /** Additional information about the USB interface.\n        Valid on libusb and Android implementations. */\n    int interface_class;\n    int interface_subclass;\n    int interface_protocol;\n\n    /** Pointer to the next device */\n    struct SDL_hid_device_info *next;\n} SDL_hid_device_info;\n```\n\n----------------------------------------\n\nTITLE: SDL_TimeToWindows Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_TimeToWindows function which converts an SDL time into a Windows FILETIME. It requires an SDL_Time value representing the time to convert and two Uint32 pointers to store the low and high parts of the resulting FILETIME.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TimeToWindows.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_TimeToWindows(SDL_Time ticks, Uint32 *dwLowDateTime, Uint32 *dwHighDateTime);\n```\n\n----------------------------------------\n\nTITLE: SDL_LogResetPriorities Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_LogResetPriorities function in C. This function takes no arguments and returns void, resetting all logging priorities to their default values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LogResetPriorities.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDL_LogResetPriorities(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AVX2_INTRINSICS in C\nDESCRIPTION: This code snippet shows how the SDL_AVX2_INTRINSICS macro is defined. When this macro is defined, it indicates that the compiler supports Intel AVX2 intrinsics, and SDL includes the `<immintrin.h>` header file, providing access to AVX2 instructions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AVX2_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AVX2_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUStorageBufferReadWriteBinding Structure Definition in C\nDESCRIPTION: Defines the SDL_GPUStorageBufferReadWriteBinding structure, used to specify parameters for binding buffers within a compute pass in SDL3. The buffer must be created with SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE. The cycle flag determines whether the buffer should be cycled if it is already bound.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUStorageBufferReadWriteBinding.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUStorageBufferReadWriteBinding\n{\n    SDL_GPUBuffer *buffer;  /**< The buffer to bind. Must have been created with SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE. */\n    bool cycle;             /**< true cycles the buffer if it is already bound. */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_GPUStorageBufferReadWriteBinding;\n```\n\n----------------------------------------\n\nTITLE: Placeholder Message Box Implementation in C\nDESCRIPTION: This code snippet shows a placeholder implementation for a message box using `fprintf` when `USING_SDL` is defined. It's a common workaround used in SDL 1.2 applications before SDL 2.0 introduced `SDL_ShowSimpleMessageBox`. The snippet uses `stderr` to output the message to the console.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n#if USING_SDL\nfprintf(stderr, \"MSGBOX: %s\\n%s\\n\", title, text);   // oh well.\n#endif\n```\n\n----------------------------------------\n\nTITLE: SDL_PenButtonEvent Structure Definition in C\nDESCRIPTION: Defines the structure for pressure-sensitive pen button events in SDL3.  It includes the event type (SDL_EVENT_PEN_BUTTON_DOWN or SDL_EVENT_PEN_BUTTON_UP), timestamp, window ID, pen ID, pen input state, X and Y coordinates relative to the window, the pen button index (starting from 1), and a boolean indicating whether the button is pressed. This structure is used to handle events related to pen buttons, distinct from the pen pressing down for drawing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenButtonEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_PenButtonEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_PEN_BUTTON_DOWN or SDL_EVENT_PEN_BUTTON_UP */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The window with mouse focus, if any */\n    SDL_PenID which;        /**< The pen instance id */\n    SDL_PenInputFlags pen_state;   /**< Complete pen input state at time of event */\n    float x;                /**< X coordinate, relative to window */\n    float y;                /**< Y coordinate, relative to window */\n    Uint8 button;       /**< The pen button index (first button is 1). */\n    bool down;      /**< true if the button is pressed */\n} SDL_PenButtonEvent;\n```\n\n----------------------------------------\n\nTITLE: Get Render Draw Blend Mode\nDESCRIPTION: Retrieves the blend mode used for drawing operations in SDL3. Requires an SDL_Renderer pointer and an SDL_BlendMode pointer to store the retrieved blend mode. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderDrawBlendMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode *blendMode);\n```\n\n----------------------------------------\n\nTITLE: Get Window from Event - C\nDESCRIPTION: Retrieves the SDL_Window associated with an SDL_Event. The function takes a pointer to an SDL_Event as input and returns a pointer to the SDL_Window if successful, or NULL if no window is associated with the event. It requires the SDL3 library and the SDL_events.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowFromEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window * SDL_GetWindowFromEvent(const SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Locale struct in C\nDESCRIPTION: This C code snippet defines the `SDL_Locale` structure, which contains pointers to the language and country strings. The language is expected to be in ISO-639 format, and the country, if provided, will be in ISO-3166 format.  This structure is fundamental for handling locale-specific settings in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Locale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Locale\n{\n    const char *language;  /**< A language name, like \"en\" for English. */\n    const char *country;  /**< A country, like \"US\" for America. Can be NULL. */\n} SDL_Locale;\n```\n\n----------------------------------------\n\nTITLE: Halting a Channel SDL_mixer C\nDESCRIPTION: Halts the playback of audio on a specific channel. The function takes an integer identifying the channel to stop. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HaltChannel(int channel);\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL as optimized Release library\nDESCRIPTION: Configures SDL as an optimized `Release` library. It is essential to specify `CMAKE_BUILD_TYPE=Release` when configuring the build using cmake.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncmake ~/SDL -DCMAKE_BUILD_TYPE=Release\n```\n\n----------------------------------------\n\nTITLE: Query Relative Mouse Mode SDL_GetRelativeMouseMode C\nDESCRIPTION: Queries whether relative mouse mode is enabled. Returns SDL_TRUE if enabled, SDL_FALSE otherwise. Available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRelativeMouseMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GetRelativeMouseMode(void);\n```\n\n----------------------------------------\n\nTITLE: SDL Audio Format Typedef\nDESCRIPTION: Defines the SDL_AudioFormat as a 16-bit unsigned integer (Uint16). This type is used to represent the audio format flags in SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint16 SDL_AudioFormat;\n```\n\n----------------------------------------\n\nTITLE: Checking Channel Playing Status SDL_mixer C\nDESCRIPTION: Checks the current playing status of a specific channel. Takes the channel ID as a parameter. Returns 1 if the channel is playing, 0 if it is not.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_43\n\nLANGUAGE: C\nCODE:\n```\nint Mix_Playing(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_strrchr Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_strrchr function.  It takes a constant character pointer `str` (the string to search) and an integer `c` (the byte value to search for) as input. It returns a character pointer to the last instance of `c` in `str`, or NULL if not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strrchr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strrchr(const char *str, int c);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph_Solid Function Signature in C\nDESCRIPTION: This C code snippet shows the signature of the TTF_RenderGlyph_Solid function from the SDL_ttf library. It takes a font, a 16-bit character, and a color as input and returns a surface pointer. The surface contains the rendered glyph with a transparent background.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderGlyph_Solid.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Solid(TTF_Font *font,\n                Uint16 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Get Render Clip Rectangle in C\nDESCRIPTION: This C code snippet demonstrates how to use SDL_GetRenderClipRect to retrieve the current clipping rectangle of a given SDL_Renderer. It takes an SDL_Renderer pointer as input and populates the provided SDL_Rect structure with the current clipping area. If clipping is disabled, an empty rectangle is returned.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderClipRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRenderClipRect(SDL_Renderer *renderer, SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: Querying Relative Mouse Mode in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetWindowRelativeMouseMode function in SDL3. It queries whether relative mouse mode is enabled for the specified SDL_Window. The function returns true if relative mode is enabled, and false otherwise. It should be called only on the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowRelativeMouseMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowRelativeMouseMode(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Freeing an IMG_Animation Object in C\nDESCRIPTION: This code snippet shows the syntax of the IMG_FreeAnimation function, which is used to release the memory allocated for an IMG_Animation object. The function takes a pointer to an IMG_Animation as input and frees the resources associated with it. After calling this function, the provided IMG_Animation pointer is no longer valid and should not be dereferenced.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_FreeAnimation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid IMG_FreeAnimation(IMG_Animation *anim);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteIO Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WriteIO function, which writes data to an SDL_IOStream.  It takes an SDL_IOStream pointer, a void pointer to the data to be written, and the size of the data to write as input. It returns the number of bytes written.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteIO(SDL_IOStream *context, const void *ptr, size_t size);\n```\n\n----------------------------------------\n\nTITLE: TTF Library Version Functions in C\nDESCRIPTION: Functions to query the versions of the SDL_ttf, FreeType, and HarfBuzz libraries. These functions allow developers to retrieve the version information of the dynamically linked libraries used by SDL_ttf.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint TTF_Version(void);                                                                                                                     // This function gets the version of the dynamically linked SDL_ttf library.\nvoid TTF_GetFreeTypeVersion(int *major, int *minor, int *patch);                                                                           // Query the version of the FreeType library in use.\nvoid TTF_GetHarfBuzzVersion(int *major, int *minor, int *patch);                                                                           // Query the version of the HarfBuzz library in use.\n```\n\n----------------------------------------\n\nTITLE: Setting Text Position with TTF_SetTextPosition in SDL_ttf (C)\nDESCRIPTION: Sets the position of a TTF_Text object using TTF_SetTextPosition. The function takes a TTF_Text pointer and x and y coordinates as input, modifying the text object's position. This function is part of the SDL_ttf library and requires SDL_ttf 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextPosition(TTF_Text *text, int x, int y);\n```\n\n----------------------------------------\n\nTITLE: Check Haptic Rumble Support in C\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_HapticRumbleSupported function. It takes a pointer to an SDL_Haptic device as input and returns a boolean value indicating whether the device supports rumble effects. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticRumbleSupported.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HapticRumbleSupported(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: Rewind Music Playback Mix_RewindMusic C\nDESCRIPTION: Rewinds the music stream to the beginning. This function resets the playback position of the music to the start.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_RewindMusic(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontHinting Function\nDESCRIPTION: Queries the current hinting style of a TTF_Font object. Returns a TTF_HintingFlags value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nTTF_HintingFlags TTF_GetFontHinting(const TTF_Font *font);                                                                                 // Query a font's current FreeType hinter setting.\n```\n\n----------------------------------------\n\nTITLE: Build Android NDK project\nDESCRIPTION: This command builds an Android NDK project, compiling the native code into shared libraries.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nndk-build\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadU64LE Function Definition in C\nDESCRIPTION: Defines the SDL_ReadU64LE function, which reads a 64-bit unsigned integer from an SDL_IOStream in little-endian format. The function takes an SDL_IOStream pointer and a Uint64 pointer as input. It returns true on success and false on failure, setting an error message with SDL_GetError().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadU64LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadU64LE(SDL_IOStream *src, Uint64 *value);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetJoystickGUIDInfo Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetJoystickGUIDInfo function in C. This function retrieves device information (vendor ID, product ID, version, and CRC16) from an SDL_GUID. It requires a valid SDL_GUID as input and pointers to Uint16 variables to store the retrieved information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickGUIDInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetJoystickGUIDInfo(SDL_GUID guid, Uint16 *vendor, Uint16 *product, Uint16 *version, Uint16 *crc16);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_SendDatagram Syntax in C\nDESCRIPTION: Defines the syntax for the SDLNet_SendDatagram function in C. This function sends a datagram packet to a specified address and port through a given datagram socket.  It requires a socket, address, port, data buffer, and the buffer's length as input.  It returns a boolean value indicating success or failure, with SDL_GetError() providing more details on failures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_SendDatagram.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDLNet_SendDatagram(SDLNet_DatagramSocket *sock, SDLNet_Address *address, Uint16 port, const void *buf, int buflen);\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Sensor Data Rate in C\nDESCRIPTION: Retrieves the data rate (number of events per second) of a gamepad sensor. The function takes a gamepad pointer and a sensor type as input and returns the data rate as a float. It returns 0.0f if the data rate is not available. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadSensorDataRate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetGamepadSensorDataRate(SDL_Gamepad *gamepad, SDL_SensorType type);\n```\n\n----------------------------------------\n\nTITLE: Check if application is running on Chromebook in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_IsChromebook function, which returns SDL_TRUE if the application is running on a Chromebook and SDL_FALSE otherwise. The function is available since SDL 2.0.9 and requires SDL_system.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsChromebook.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IsChromebook(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioDeviceEvent Structure Definition in C\nDESCRIPTION: Defines the structure of the SDL_AudioDeviceEvent, containing information about audio device events such as addition or removal. The structure members include the event type (SDL_AUDIODEVICEADDED or SDL_AUDIODEVICEREMOVED), timestamp, the audio device index/ID, and a flag indicating whether the device is a capture device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioDeviceEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AudioDeviceEvent\n{\n    Uint32 type;        /**< SDL_AUDIODEVICEADDED, or SDL_AUDIODEVICEREMOVED */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 which;       /**< The audio device index for the ADDED event (valid until next SDL_GetNumAudioDevices() call), SDL_AudioDeviceID for the REMOVED event */\n    Uint8 iscapture;    /**< zero if an output device, non-zero if a capture device. */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_AudioDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL Window Flags Enumeration in C\nDESCRIPTION: This code snippet defines the `SDL_WindowFlags` enumeration in C. It specifies various flags that can be used when creating or manipulating SDL windows. Each flag represents a specific window property, such as fullscreen mode, OpenGL context usage, visibility, borderless state, resizability, and input focus.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WindowFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_WindowFlags\n{\n    SDL_WINDOW_FULLSCREEN = 0x00000001,         /**< fullscreen window */\n    SDL_WINDOW_OPENGL = 0x00000002,             /**< window usable with OpenGL context */\n    SDL_WINDOW_SHOWN = 0x00000004,              /**< window is visible */\n    SDL_WINDOW_HIDDEN = 0x00000008,             /**< window is not visible */\n    SDL_WINDOW_BORDERLESS = 0x00000010,         /**< no window decoration */\n    SDL_WINDOW_RESIZABLE = 0x00000020,          /**< window can be resized */\n    SDL_WINDOW_MINIMIZED = 0x00000040,          /**< window is minimized */\n    SDL_WINDOW_MAXIMIZED = 0x00000080,          /**< window is maximized */\n    SDL_WINDOW_MOUSE_GRABBED = 0x00000100,      /**< window has grabbed mouse input */\n    SDL_WINDOW_INPUT_FOCUS = 0x00000200,        /**< window has input focus */\n    SDL_WINDOW_MOUSE_FOCUS = 0x00000400,        /**< window has mouse focus */\n    SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN | 0x00001000 ),\n    SDL_WINDOW_FOREIGN = 0x00000800,            /**< window not created by SDL */\n    SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000,      /**< window should be created in high-DPI mode if supported.\n                                                     On macOS NSHighResolutionCapable must be set true in the\n                                                     application's Info.plist for this to have any effect. */\n    SDL_WINDOW_MOUSE_CAPTURE    = 0x00004000,   /**< window has mouse captured (unrelated to MOUSE_GRABBED) */\n    SDL_WINDOW_ALWAYS_ON_TOP    = 0x00008000,   /**< window should always be above others */\n    SDL_WINDOW_SKIP_TASKBAR     = 0x00010000,   /**< window should not be added to the taskbar */\n    SDL_WINDOW_UTILITY          = 0x00020000,   /**< window should be treated as a utility window */\n    SDL_WINDOW_TOOLTIP          = 0x00040000,   /**< window should be treated as a tooltip */\n    SDL_WINDOW_POPUP_MENU       = 0x00080000,   /**< window should be treated as a popup menu */\n    SDL_WINDOW_KEYBOARD_GRABBED = 0x00100000,   /**< window has grabbed keyboard input */\n    SDL_WINDOW_VULKAN           = 0x10000000,   /**< window usable for Vulkan surface */\n    SDL_WINDOW_METAL            = 0x20000000,   /**< window usable for Metal view */\n\n    SDL_WINDOW_INPUT_GRABBED = SDL_WINDOW_MOUSE_GRABBED /**< equivalent to SDL_WINDOW_MOUSE_GRABBED for compatibility */\n} SDL_WindowFlags;\n```\n\n----------------------------------------\n\nTITLE: Installing a macOS Application Bundle with a Makefile\nDESCRIPTION: This Makefile snippet shows how to install a previously created macOS application bundle to a designated applications directory. It first removes any existing bundle and then copies the new bundle to the target location under $(DESTDIR)$(prefix)/Applications/. Requires `APP_NAME_bundle` to be defined.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/macos.md#_snippet_4\n\nLANGUAGE: make\nCODE:\n```\ninstall-exec-hook: APP_NAME_bundle\n\trm -rf $(DESTDIR)$(prefix)/Applications/APP_NAME.app\n\tmkdir -p $(DESTDIR)$(prefix)/Applications/\n\tcp -r $< /$(DESTDIR)$(prefix)Applications/\n```\n\n----------------------------------------\n\nTITLE: SDL_GPULoadOp Enum Definition in C\nDESCRIPTION: Defines the SDL_GPULoadOp enum, which specifies how a texture's contents are handled at the beginning of a render pass. The enum includes options for loading previous content, clearing to a color, or discarding the content.  This enum is used with functions like SDL_BeginGPURenderPass to configure render pass behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPULoadOp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPULoadOp\n{\n    SDL_GPU_LOADOP_LOAD,      /**< The previous contents of the texture will be preserved. */\n    SDL_GPU_LOADOP_CLEAR,     /**< The contents of the texture will be cleared to a color. */\n    SDL_GPU_LOADOP_DONT_CARE  /**< The previous contents of the texture need not be preserved. The contents will be undefined. */\n} SDL_GPULoadOp;\n```\n\n----------------------------------------\n\nTITLE: Get Glyph Metrics C\nDESCRIPTION: This function retrieves the metrics (dimensions) of a font's glyph for a UNICODE codepoint. It takes a TTF_Font pointer, the Unicode codepoint, and pointers to integers to store the minx, maxx, miny, maxy, and advance values. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_52\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetGlyphMetrics(TTF_Font *font, Uint32 ch, int *minx, int *maxx, int *miny, int *maxy, int *advance);\n```\n\n----------------------------------------\n\nTITLE: Initializing Haptic Device for Rumble Playback in SDL2 (C)\nDESCRIPTION: Initializes a specified SDL_Haptic device for playing simple rumble effects. The function takes a pointer to an SDL_Haptic structure, representing the haptic device to initialize. It returns 0 on success or a negative error code if initialization fails. Use SDL_GetError() for detailed error information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticRumbleInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticRumbleInit(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_EVDEV_DEVICES Macro in C\nDESCRIPTION: Defines the SDL_HINT_EVDEV_DEVICES macro as a string literal \"SDL_EVDEV_DEVICES\". This macro is used as the key for the SDL hint to specify evdev devices. The hint should be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_EVDEV_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EVDEV_DEVICES \"SDL_EVDEV_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_BYTEORDER in C\nDESCRIPTION: The SDL_BYTEORDER macro is defined to either SDL_LIL_ENDIAN or SDL_BIG_ENDIAN, indicating the system's byte order.  This macro is resolved during compilation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BYTEORDER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_BYTEORDER   SDL_LIL_ENDIAN___or_maybe___SDL_BIG_ENDIAN\n```\n\n----------------------------------------\n\nTITLE: Pseudocode Example of Blend Mode Operation\nDESCRIPTION: Illustrates how the custom blend mode operates using pseudocode.  It shows how the source and destination RGB and Alpha components are combined based on the provided factors and operations. This helps in understanding the blending process conceptually.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ComposeCustomBlendMode.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ndstRGB = colorOperation(srcRGB * srcColorFactor, dstRGB * dstColorFactor);\ndstA = alphaOperation(srcA * srcAlphaFactor, dstA * dstAlphaFactor);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_XBOX in C\nDESCRIPTION: This code defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX macro, which is used as the key for setting the hint that controls the use of the HIDAPI driver for Xbox controllers. This hint must be set before initializing the joystick subsystem. It's defined within the SDL_hints.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX \"SDL_JOYSTICK_HIDAPI_XBOX\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED hint as a string literal. This hint controls whether the Home button LED on a Nintendo Switch Pro controller is turned on or off when opened using HIDAPI. The value can be \"0\" (off), \"1\" (on), or a floating-point value between 0.0 and 1.0 for brightness.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED \"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MessageBoxColor struct in C\nDESCRIPTION: Defines the SDL_MessageBoxColor structure, which contains three Uint8 members representing the red, green, and blue color components. This structure is used to specify colors in SDL message boxes. It requires the SDL3/SDL_messagebox.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxColor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MessageBoxColor\n{\n    Uint8 r, g, b;\n} SDL_MessageBoxColor;\n```\n\n----------------------------------------\n\nTITLE: IMG_Animation Structure Definition in C\nDESCRIPTION: Defines the `IMG_Animation` structure used for storing animated image data in the SDL_image library.  It includes members for the width and height of each frame, the total number of frames, an array of `SDL_Surface` pointers representing the frames, and an array of integers representing the delay in milliseconds for each frame. Animated GIFs and WEBP images are the only currently supported formats.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_Animation.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct IMG_Animation\n{\n    int w;                  /**< The width of the frames */\n    int h;                  /**< The height of the frames */\n    int count;              /**< The number of frames */\n    SDL_Surface **frames;   /**< An array of frames */\n    int *delays;            /**< An array of frame delays, in milliseconds */\n} IMG_Animation;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS in C\nDESCRIPTION: This snippet defines the SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS macro, which represents the string used to set the hint that controls whether fullscreen windows are minimized when they lose focus. The hint can be set anytime using SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS \"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUTextureLocation Structure in C\nDESCRIPTION: This code defines the SDL_GPUTextureLocation structure in C, which is used to specify a location in a texture. It includes members for the texture pointer, mip level index, layer index, and x, y, and z offsets within the texture. It is used when copying data from one texture to another.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureLocation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUTextureLocation\n{\n    SDL_GPUTexture *texture;  /**< The texture used in the copy operation. */\n    Uint32 mip_level;         /**< The mip level index of the location. */\n    Uint32 layer;             /**< The layer index of the location. */\n    Uint32 x;                 /**< The left offset of the location. */\n    Uint32 y;                 /**< The top offset of the location. */\n    Uint32 z;                 /**< The front offset of the location. */\n} SDL_GPUTextureLocation;\n```\n\n----------------------------------------\n\nTITLE: Including SDL Headers in C\nDESCRIPTION: The most portable way to include SDL3 headers is using angular quotes with the full header name. This is a change from SDL2, where double quotes were recommended.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/FAQDevelopment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#include <SDL3/SDL.h>\n```\n\n----------------------------------------\n\nTITLE: SDL_Keycode Type Definition\nDESCRIPTION: Defines the SDL_Keycode type as a signed 32-bit integer (Sint32). This type is used to represent keyboard keys within the SDL library, allowing for a wide range of key representations including Unicode values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Keycode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Sint32 SDL_Keycode;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH macro, which is used to set a hint that controls whether mouse clicks are processed when clicking to focus an SDL window. The macro expands to the string literal \"SDL_MOUSE_FOCUS_CLICKTHROUGH\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH \"SDL_MOUSE_FOCUS_CLICKTHROUGH\"\n```\n\n----------------------------------------\n\nTITLE: SDL_WarpMouseGlobal Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WarpMouseGlobal function in C, which takes the x and y coordinates as floats and returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WarpMouseGlobal.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WarpMouseGlobal(float x, float y);\n```\n\n----------------------------------------\n\nTITLE: SDL_strtok_r Syntax\nDESCRIPTION: Defines the syntax for the SDL_strtok_r function, which tokenizes a string. It takes a string to tokenize, a delimiter string, and a pointer to a char pointer for saving state between calls. Returns a pointer to the next token or NULL if no tokens remain.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strtok_r.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strtok_r(char *str, const char *delim, char **saveptr);\n```\n\n----------------------------------------\n\nTITLE: Get Texture Alpha Mod - SDL3 - C\nDESCRIPTION: Retrieves the additional alpha value multiplied into render copy operations for a specified SDL_Texture. The function takes a pointer to the texture and a pointer to a Uint8 variable where the alpha value will be stored. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTextureAlphaMod.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTextureAlphaMod(SDL_Texture *texture, Uint8 *alpha);\n```\n\n----------------------------------------\n\nTITLE: Linking SDL libraries as NDK modules\nDESCRIPTION: Creates symbolic links to SDL libraries and their dependencies in the `jni` directory. This allows the NDK build system to find and link the necessary libraries.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nln -s /usr/src/SDL3_image jni/\nln -s /usr/src/SDL3_image/external/libwebp-0.3.0 jni/webp\nln -s /usr/src/SDL3_mixer jni/\nln -s /usr/src/SDL3_mixer/external/libmikmod-3.1.12 jni/libmikmod\nln -s /usr/src/SDL3_mixer/external/smpeg2-2.0.0 jni/smpeg2\nln -s /usr/src/SDL3_net jni/\nln -s /usr/src/SDL3_ttf jni/\n```\n\n----------------------------------------\n\nTITLE: Get current EGL config in SDL3\nDESCRIPTION: This C code snippet shows the function signature for retrieving the current EGL configuration in SDL3. It takes no arguments and returns a pointer to the current SDL_EGLConfig, or NULL on failure. This function should only be called from the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGL_GetCurrentConfig.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_EGLConfig SDL_EGL_GetCurrentConfig(void);\n```\n\n----------------------------------------\n\nTITLE: Installing SDL with CMake\nDESCRIPTION: This command shows how to install the built SDL library using CMake's install command. Requires CMake 3.15 or newer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake --install .        # '--install' requires CMake 3.15, or newer\n```\n\n----------------------------------------\n\nTITLE: SDL_ShouldInit Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_ShouldInit function in C. It takes a pointer to an SDL_InitState and returns a boolean value indicating whether initialization should be performed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShouldInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ShouldInit(SDL_InitState *state);\n```\n\n----------------------------------------\n\nTITLE: Mix_UnregisterEffect Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_UnregisterEffect function, which unregisters a special effect function from a specified channel. The channel parameter identifies the channel to remove the effect from, and 'f' is the Mix_EffectFunc_t callback to stop calling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_UnregisterEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_UnregisterEffect(int channel, Mix_EffectFunc_t f);\n```\n\n----------------------------------------\n\nTITLE: Automake modifications for Android library build\nDESCRIPTION: Modifies the Automake Makefile.am to build a shared library for Android instead of an executable. Sets compiler flags for position-independent code (-fPIC) and linker flags to build a shared library (-shared). Also adds SDL_android_main.c to the common objects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_23\n\nLANGUAGE: c\nCODE:\n```\nif ANDROID\n<!--  Build .so JNI libs rather than executables -->\n  AM_CFLAGS = -fPIC\n  AM_LDFLAGS += -shared\n  COMMON_OBJS += SDL_android_main.c\nendif\n```\n\n----------------------------------------\n\nTITLE: SDL_PenAxisEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_PenAxisEvent, capturing information about pen axis events, including the event type, timestamp, window ID, pen ID, pen state, X and Y coordinates, the changed axis, and its new value. This structure is used to represent pressure-sensitive pen events in SDL3. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenAxisEvent.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_PenAxisEvent\n{\n    SDL_EventType type;     /**< SDL_EVENT_PEN_AXIS */\n    Uint32 reserved;\n    Uint64 timestamp;       /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID;  /**< The window with pen focus, if any */\n    SDL_PenID which;        /**< The pen instance id */\n    SDL_PenInputFlags pen_state;   /**< Complete pen input state at time of event */\n    float x;                /**< X coordinate, relative to window */\n    float y;                /**< Y coordinate, relative to window */\n    SDL_PenAxis axis;       /**< Axis that has changed */\n    float value;            /**< New value of axis */\n} SDL_PenAxisEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_FillRects Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_FillRects function in C, specifying the parameters: destination SDL_Surface, array of SDL_Rect structures, the number of rectangles, and the Uint32 color. It returns an integer indicating success (0) or failure (negative value).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FillRects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_FillRects\n    (SDL_Surface * dst, const SDL_Rect * rects, int count, Uint32 color);\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIx32 Macro Definition\nDESCRIPTION: This code defines the SDL_PRIx32 macro as a string literal \"x\". This macro is used as a format specifier for printing Uint32 values in lowercase hexadecimal format using functions like SDL_Log.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIx32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRIx32 \"x\"\n```\n\n----------------------------------------\n\nTITLE: SDL_PIXELFLAG Macro Definition in C\nDESCRIPTION: This macro extracts the pixel format flags from an SDL_PixelFormat value. The format parameter is an SDL_PixelFormat to check. It returns the flags of the format by bit shifting and masking the format value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PIXELFLAG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PIXELFLAG(format)    (((format) >> 28) & 0x0F)\n```\n\n----------------------------------------\n\nTITLE: Query Font Outline Value in SDL_ttf (C)\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetFontOutline function in SDL_ttf. It takes a const TTF_Font pointer as input and returns an integer representing the font's current outline value. This function is available since SDL_ttf 2.0.12.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GetFontOutline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontOutline(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_PopGPUDebugGroup Syntax (C)\nDESCRIPTION: Shows the syntax for the SDL_PopGPUDebugGroup function in C. It requires an SDL_GPUCommandBuffer pointer as input to specify which command buffer to operate on.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PopGPUDebugGroup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PopGPUDebugGroup(\n    SDL_GPUCommandBuffer *command_buffer);\n```\n\n----------------------------------------\n\nTITLE: Check for SSE2 CPU feature support in SDL3 (C)\nDESCRIPTION: The `SDL_HasSSE2` function is used to determine whether the CPU has SSE2 (Streaming SIMD Extensions 2) support. It is part of the SDL3 CPU info API. It returns `true` if SSE2 is supported, and `false` otherwise. This function always returns false on non-Intel instruction sets.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasSSE2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasSSE2(void);\n```\n\n----------------------------------------\n\nTITLE: Clear Clipboard Data in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax of the SDL_ClearClipboardData function. It clears the current clipboard data. The function returns a boolean indicating success or failure, with additional error information available through SDL_GetError.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClearClipboardData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ClearClipboardData(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SensorType Enum in C\nDESCRIPTION: Defines the SDL_SensorType enumeration, representing various sensor types such as accelerometer and gyroscope. It includes values for invalid, unknown, and specific device sensors.  The enum is used to identify the type of sensor being accessed or reported by the SDL library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SensorType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_SensorType\n{\n    SDL_SENSOR_INVALID = -1,    /**< Returned for an invalid sensor */\n    SDL_SENSOR_UNKNOWN,         /**< Unknown sensor type */\n    SDL_SENSOR_ACCEL,           /**< Accelerometer */\n    SDL_SENSOR_GYRO,            /**< Gyroscope */\n    SDL_SENSOR_ACCEL_L,         /**< Accelerometer for left Joy-Con controller and Wii nunchuk */\n    SDL_SENSOR_GYRO_L,          /**< Gyroscope for left Joy-Con controller */\n    SDL_SENSOR_ACCEL_R,         /**< Accelerometer for right Joy-Con controller */\n    SDL_SENSOR_GYRO_R           /**< Gyroscope for right Joy-Con controller */\n} SDL_SensorType;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_GDK_TEXTINPUT_SCOPE in C\nDESCRIPTION: This C preprocessor definition sets the string literal for the SDL_HINT_GDK_TEXTINPUT_SCOPE hint.  This hint is used to configure the text input scope on GDK platforms. It must be set before SDL_StartTextInput is called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GDK_TEXTINPUT_SCOPE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GDK_TEXTINPUT_SCOPE \"SDL_GDK_TEXTINPUT_SCOPE\"\n```\n\n----------------------------------------\n\nTITLE: Freeing an Audio Chunk\nDESCRIPTION: This C code snippet shows the syntax for using the Mix_FreeChunk function in SDL_mixer. It releases the memory allocated for an audio chunk, preventing memory leaks. The function accepts a pointer to a Mix_Chunk structure as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FreeChunk.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_FreeChunk(Mix_Chunk *chunk);\n```\n\n----------------------------------------\n\nTITLE: SDL_Process Definition in C\nDESCRIPTION: Defines the SDL_Process as an opaque struct in C.\nThis handle represents a system process. It is available since SDL 3.2.0 and used in functions like SDL_CreateProcess.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Process.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Process SDL_Process;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TEXTINPUTEVENT_TEXT_SIZE in C\nDESCRIPTION: Defines the SDL_TEXTINPUTEVENT_TEXT_SIZE macro to be 32. This macro indicates the maximum number of bytes that can be stored in the 'text' field of an SDL_TextInputEvent. This limit ensures that the event structure does not become excessively large.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TEXTINPUTEVENT_TEXT_SIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TEXTINPUTEVENT_TEXT_SIZE (32)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_CleanupPropertyCallback in C\nDESCRIPTION: Defines the SDL_CleanupPropertyCallback as a function pointer type in C. This callback is used to free resources when an SDL property is deleted. The callback takes a user-defined pointer and the property's value as arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CleanupPropertyCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_CleanupPropertyCallback)(void *userdata, void *value);\n```\n\n----------------------------------------\n\nTITLE: Building SDL examples using CMake\nDESCRIPTION: This snippet demonstrates how to build the SDL example programs. It adds the `-DSDL_EXAMPLES=ON` option to the initial CMake command, enabling the example build.  The examples can then be run from the `build/examples/` directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build -DSDL_EXAMPLES=ON\n```\n\n----------------------------------------\n\nTITLE: SDL_AndroidShowToast Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_AndroidShowToast function in C. It takes a message string, a duration integer (0 for short, 1 for long), a gravity integer, and x and y offsets (only when gravity >= 0) as input, and returns an integer indicating success (0) or failure (-1).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidShowToast.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AndroidShowToast(const char* message, int duration, int gravity, int xoffset, int yoffset);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetAppleSFSymbolsNameForAxis Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GameControllerGetAppleSFSymbolsNameForAxis function, which is used to retrieve the SF Symbols name for a specific axis on an Apple game controller. It takes a game controller pointer and an axis enum value as input and returns a constant character pointer representing the SF Symbols name or NULL if not found. This function requires the SDL2 library and is available since SDL 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetAppleSFSymbolsNameForAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GameControllerGetAppleSFSymbolsNameForAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis);\n```\n\n----------------------------------------\n\nTITLE: Detect QOI Image Data\nDESCRIPTION: This function checks if the provided SDL_RWops stream contains QOI image data. It reads a small amount of data from the stream and attempts to identify the QOI file format. The stream is then seeked back to the original position, regardless of whether QOI data is detected or not. The function returns non-zero if the image is QOI and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isQOI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isQOI(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Scancode Enum in SDL\nDESCRIPTION: This C code snippet defines the `SDL_Scancode` enumeration. It assigns symbolic names to various keyboard scan codes, representing different keys on a keyboard. These scan codes are based on the USB keyboard page (usage page 0x07) and are used by SDL to identify which key has been pressed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Scancode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_Scancode\n{\n    SDL_SCANCODE_UNKNOWN = 0,\n\n    /**\n     *  \\name Usage page 0x07\n     *\n     *  These values are from usage page 0x07 (USB keyboard page).\n     */\n    /* @{ */\n\n    SDL_SCANCODE_A = 4,\n    SDL_SCANCODE_B = 5,\n    SDL_SCANCODE_C = 6,\n    SDL_SCANCODE_D = 7,\n    SDL_SCANCODE_E = 8,\n    SDL_SCANCODE_F = 9,\n    SDL_SCANCODE_G = 10,\n    SDL_SCANCODE_H = 11,\n    SDL_SCANCODE_I = 12,\n    SDL_SCANCODE_J = 13,\n    SDL_SCANCODE_K = 14,\n    SDL_SCANCODE_L = 15,\n    SDL_SCANCODE_M = 16,\n    SDL_SCANCODE_N = 17,\n    SDL_SCANCODE_O = 18,\n    SDL_SCANCODE_P = 19,\n    SDL_SCANCODE_Q = 20,\n    SDL_SCANCODE_R = 21,\n    SDL_SCANCODE_S = 22,\n    SDL_SCANCODE_T = 23,\n    SDL_SCANCODE_U = 24,\n    SDL_SCANCODE_V = 25,\n    SDL_SCANCODE_W = 26,\n    SDL_SCANCODE_X = 27,\n    SDL_SCANCODE_Y = 28,\n    SDL_SCANCODE_Z = 29,\n\n    SDL_SCANCODE_1 = 30,\n    SDL_SCANCODE_2 = 31,\n    SDL_SCANCODE_3 = 32,\n    SDL_SCANCODE_4 = 33,\n    SDL_SCANCODE_5 = 34,\n    SDL_SCANCODE_6 = 35,\n    SDL_SCANCODE_7 = 36,\n    SDL_SCANCODE_8 = 37,\n    SDL_SCANCODE_9 = 38,\n    SDL_SCANCODE_0 = 39,\n\n    SDL_SCANCODE_RETURN = 40,\n    SDL_SCANCODE_ESCAPE = 41,\n    SDL_SCANCODE_BACKSPACE = 42,\n    SDL_SCANCODE_TAB = 43,\n    SDL_SCANCODE_SPACE = 44,\n\n    SDL_SCANCODE_MINUS = 45,\n    SDL_SCANCODE_EQUALS = 46,\n    SDL_SCANCODE_LEFTBRACKET = 47,\n    SDL_SCANCODE_RIGHTBRACKET = 48,\n    SDL_SCANCODE_BACKSLASH = 49, /**< Located at the lower left of the return\n                                  *   key on ISO keyboards and at the right end\n                                  *   of the QWERTY row on ANSI keyboards.\n                                  *   Produces REVERSE SOLIDUS (backslash) and\n                                  *   VERTICAL LINE in a US layout, REVERSE\n                                  *   SOLIDUS and VERTICAL LINE in a UK Mac\n                                  *   layout, NUMBER SIGN and TILDE in a UK\n                                  *   Windows layout, DOLLAR SIGN and POUND SIGN\n                                  *   in a Swiss German layout, NUMBER SIGN and\n                                  *   APOSTROPHE in a German layout, GRAVE\n                                  *   ACCENT and POUND SIGN in a French Mac\n                                  *   layout, and ASTERISK and MICRO SIGN in a\n                                  *   French Windows layout.\n                                  */\n    SDL_SCANCODE_NONUSHASH = 50, /**< ISO USB keyboards actually use this code\n                                  *   instead of 49 for the same key, but all\n                                  *   OSes I've seen treat the two codes\n                                  *   identically. So, as an implementor, unless\n                                  *   your keyboard generates both of those\n                                  *   codes and your OS treats them differently,\n                                  *   you should generate SDL_SCANCODE_BACKSLASH\n                                  *   instead of this code. As a user, you\n                                  *   should not rely on this code because SDL\n                                  *   will never generate it with most (all?)\n                                  *   keyboards.\n                                  */\n    SDL_SCANCODE_SEMICOLON = 51,\n    SDL_SCANCODE_APOSTROPHE = 52,\n    SDL_SCANCODE_GRAVE = 53, /**< Located in the top left corner (on both ANSI\n                              *   and ISO keyboards). Produces GRAVE ACCENT and\n                              *   TILDE in a US Windows layout and in US and UK\n                              *   Mac layouts on ANSI keyboards, GRAVE ACCENT\n                              *   and NOT SIGN in a UK Windows layout, SECTION\n                              *   SIGN and PLUS-MINUS SIGN in US and UK Mac\n                              *   layouts on ISO keyboards, SECTION SIGN and\n                              *   DEGREE SIGN in a Swiss German layout (Mac:\n                              *   only on ISO keyboards), CIRCUMFLEX ACCENT and\n                              *   DEGREE SIGN in a German layout (Mac: only on\n                              *   ISO keyboards), SUPERSCRIPT TWO and TILDE in a\n                              *   French Windows layout, COMMERCIAL AT and\n                              *   NUMBER SIGN in a French Mac layout on ISO\n                              *   keyboards, and LESS-THAN SIGN and GREATER-THAN\n                              *   SIGN in a Swiss German, German, or French Mac\n                              *   layout on ANSI keyboards.\n                              */\n    SDL_SCANCODE_COMMA = 54,\n    SDL_SCANCODE_PERIOD = 55,\n    SDL_SCANCODE_SLASH = 56,\n\n    SDL_SCANCODE_CAPSLOCK = 57,\n\n    SDL_SCANCODE_F1 = 58,\n    SDL_SCANCODE_F2 = 59,\n    SDL_SCANCODE_F3 = 60,\n    SDL_SCANCODE_F4 = 61,\n    SDL_SCANCODE_F5 = 62,\n    SDL_SCANCODE_F6 = 63,\n    SDL_SCANCODE_F7 = 64,\n    SDL_SCANCODE_F8 = 65,\n    SDL_SCANCODE_F9 = 66,\n    SDL_SCANCODE_F10 = 67,\n    SDL_SCANCODE_F11 = 68,\n    SDL_SCANCODE_F12 = 69,\n\n    SDL_SCANCODE_PRINTSCREEN = 70,\n    SDL_SCANCODE_SCROLLLOCK = 71,\n    SDL_SCANCODE_PAUSE = 72,\n    SDL_SCANCODE_INSERT = 73, /**< insert on PC, help on some Mac keyboards (but\n                                   does send code 73, not 117) */\n    SDL_SCANCODE_HOME = 74,\n    SDL_SCANCODE_PAGEUP = 75,\n    SDL_SCANCODE_DELETE = 76,\n    SDL_SCANCODE_END = 77,\n    SDL_SCANCODE_PAGEDOWN = 78,\n    SDL_SCANCODE_RIGHT = 79,\n    SDL_SCANCODE_LEFT = 80,\n    SDL_SCANCODE_DOWN = 81,\n    SDL_SCANCODE_UP = 82,\n\n    SDL_SCANCODE_NUMLOCKCLEAR = 83, /**< num lock on PC, clear on Mac keyboards\n                                     */\n    SDL_SCANCODE_KP_DIVIDE = 84,\n    SDL_SCANCODE_KP_MULTIPLY = 85,\n    SDL_SCANCODE_KP_MINUS = 86,\n    SDL_SCANCODE_KP_PLUS = 87,\n    SDL_SCANCODE_KP_ENTER = 88,\n    SDL_SCANCODE_KP_1 = 89,\n    SDL_SCANCODE_KP_2 = 90,\n    SDL_SCANCODE_KP_3 = 91,\n    SDL_SCANCODE_KP_4 = 92,\n    SDL_SCANCODE_KP_5 = 93,\n    SDL_SCANCODE_KP_6 = 94,\n    SDL_SCANCODE_KP_7 = 95,\n    SDL_SCANCODE_KP_8 = 96,\n    SDL_SCANCODE_KP_9 = 97,\n    SDL_SCANCODE_KP_0 = 98,\n    SDL_SCANCODE_KP_PERIOD = 99,\n\n    SDL_SCANCODE_NONUSBACKSLASH = 100, /**< This is the additional key that ISO\n                                        *   keyboards have over ANSI ones,\n                                        *   located between left shift and Y.\n                                        *   Produces GRAVE ACCENT and TILDE in a\n                                        *   US or UK Mac layout, REVERSE SOLIDUS\n                                        *   (backslash) and VERTICAL LINE in a\n                                        *   US or UK Windows layout, and\n                                        *   LESS-THAN SIGN and GREATER-THAN SIGN\n                                        *   in a Swiss German, German, or French\n                                        *   layout. */\n    SDL_SCANCODE_APPLICATION = 101, /**< windows contextual menu, compose */\n    SDL_SCANCODE_POWER = 102, /**< The USB document says this is a status flag,\n                               *   not a physical key - but some Mac keyboards\n                               *   do have a power key. */\n    SDL_SCANCODE_KP_EQUALS = 103,\n    SDL_SCANCODE_F13 = 104,\n    SDL_SCANCODE_F14 = 105,\n    SDL_SCANCODE_F15 = 106,\n    SDL_SCANCODE_F16 = 107,\n    SDL_SCANCODE_F17 = 108,\n    SDL_SCANCODE_F18 = 109,\n    SDL_SCANCODE_F19 = 110,\n    SDL_SCANCODE_F20 = 111,\n    SDL_SCANCODE_F21 = 112,\n    SDL_SCANCODE_F22 = 113,\n    SDL_SCANCODE_F23 = 114,\n    SDL_SCANCODE_F24 = 115,\n    SDL_SCANCODE_EXECUTE = 116,\n    SDL_SCANCODE_HELP = 117,    /**< AL Integrated Help Center */\n    SDL_SCANCODE_MENU = 118,    /**< Menu (show menu) */\n    SDL_SCANCODE_SELECT = 119,\n    SDL_SCANCODE_STOP = 120,    /**< AC Stop */\n    SDL_SCANCODE_AGAIN = 121,   /**< AC Redo/Repeat */\n    SDL_SCANCODE_UNDO = 122,    /**< AC Undo */\n    SDL_SCANCODE_CUT = 123,     /**< AC Cut */\n    SDL_SCANCODE_COPY = 124,    /**< AC Copy */\n    SDL_SCANCODE_PASTE = 125,   /**< AC Paste */\n    SDL_SCANCODE_FIND = 126,    /**< AC Find */\n    SDL_SCANCODE_MUTE = 127,\n    SDL_SCANCODE_VOLUMEUP = 128,\n    SDL_SCANCODE_VOLUMEDOWN = 129,\n/* not sure whether there's a reason to enable these */\n/*     SDL_SCANCODE_LOCKINGCAPSLOCK = 130,  */\n/*     SDL_SCANCODE_LOCKINGNUMLOCK = 131, */\n/*     SDL_SCANCODE_LOCKINGSCROLLLOCK = 132, */\n    SDL_SCANCODE_KP_COMMA = 133,\n    SDL_SCANCODE_KP_EQUALSAS400 = 134,\n\n    SDL_SCANCODE_INTERNATIONAL1 = 135, /**< used on Asian keyboards, see\n                                            footnotes in USB doc */\n    SDL_SCANCODE_INTERNATIONAL2 = 136,\n    SDL_SCANCODE_INTERNATIONAL3 = 137, /**< Yen */\n    SDL_SCANCODE_INTERNATIONAL4 = 138,\n    SDL_SCANCODE_INTERNATIONAL5 = 139,\n    SDL_SCANCODE_INTERNATIONAL6 = 140,\n    SDL_SCANCODE_INTERNATIONAL7 = 141,\n    SDL_SCANCODE_INTERNATIONAL8 = 142,\n    SDL_SCANCODE_INTERNATIONAL9 = 143,\n    SDL_SCANCODE_LANG1 = 144, /**< Hangul/English toggle */\n    SDL_SCANCODE_LANG2 = 145, /**< Hanja conversion */\n    SDL_SCANCODE_LANG3 = 146, /**< Katakana */\n    SDL_SCANCODE_LANG4 = 147, /**< Hiragana */\n    SDL_SCANCODE_LANG5 = 148, /**< Zenkaku/Hankaku */\n    SDL_SCANCODE_LANG6 = 149, /**< reserved */\n    SDL_SCANCODE_LANG7 = 150, /**< reserved */\n    SDL_SCANCODE_LANG8 = 151, /**< reserved */\n    SDL_SCANCODE_LANG9 = 152, /**< reserved */\n\n    SDL_SCANCODE_ALTERASE = 153,    /**< Erase-Eaze */\n    SDL_SCANCODE_SYSREQ = 154,\n    SDL_SCANCODE_CANCEL = 155,      /**< AC Cancel */\n    SDL_SCANCODE_CLEAR = 156,\n    SDL_SCANCODE_PRIOR = 157,\n    SDL_SCANCODE_RETURN2 = 158,\n    SDL_SCANCODE_SEPARATOR = 159,\n    SDL_SCANCODE_OUT = 160,\n    SDL_SCANCODE_OPER = 161,\n    SDL_SCANCODE_CLEARAGAIN = 162,\n    SDL_SCANCODE_CRSEL = 163,\n    SDL_SCANCODE_EXSEL = 164,\n\n    SDL_SCANCODE_KP_00 = 176,\n    SDL_SCANCODE_KP_000 = 177,\n    SDL_SCANCODE_THOUSANDSSEPARATOR = 178,\n    SDL_SCANCODE_DECIMALSEPARATOR = 179,\n    SDL_SCANCODE_CURRENCYUNIT = 180\n} SDL_Scancode;\n```\n\n----------------------------------------\n\nTITLE: Mix_GetError Macro Definition in C\nDESCRIPTION: This macro is defined as an alias to SDL_GetError, allowing SDL_mixer to use SDL's error handling. It's used to retrieve the last error message generated by SDL_mixer functions. No specific dependencies outside of SDL and SDL_mixer are needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define Mix_GetError    SDL_GetError\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ISPIXELFORMAT_FLOAT Macro in C\nDESCRIPTION: This macro determines if an SDL_PixelFormat is a floating point format. It checks if the format is not a FOURCC format and if its pixel type is either SDL_PIXELTYPE_ARRAYF16 or SDL_PIXELTYPE_ARRAYF32. The macro double-evaluates its parameter, so avoid side effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISPIXELFORMAT_FLOAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISPIXELFORMAT_FLOAT(format)    \\\n      (!SDL_ISPIXELFORMAT_FOURCC(format) && \\\n       ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF16) || \\\n        (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_ARRAYF32)))\n```\n\n----------------------------------------\n\nTITLE: SDL_AppQuit_func Typedef Definition in C\nDESCRIPTION: Defines the SDL_AppQuit_func function pointer typedef. This type is used for application quit callbacks, taking an application state pointer and an SDL_AppResult as parameters. It's part of the application lifecycle management in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppQuit_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_AppQuit_func)(void *appstate, SDL_AppResult result);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontWeight Function\nDESCRIPTION: Queries a font's weight, in terms of the lightness/heaviness of the strokes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_27\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontWeight(const TTF_Font *font);                                                                                               // Query a font's weight, in terms of the lightness/heaviness of the strokes.\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIs64 Definition C\nDESCRIPTION: Defines the SDL_PRIs64 macro as a string literal \"lld\", which is the format specifier for a long long integer in printf. This macro allows portable printing of Sint64 values using SDL_Log.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIs64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRIs64 \"lld\"\n```\n\n----------------------------------------\n\nTITLE: SDLNet_SocketReady Macro Definition in C\nDESCRIPTION: This macro determines whether a socket has data available for reading after the socket has been checked within a set using SDLNet_CheckSockets. It takes a socket `sock` as input and returns a non-zero value if data is ready, otherwise returns zero.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_SocketReady.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDLNet_SocketReady(sock) _SDLNet_SocketReady((SDLNet_GenericSocket)(sock))\n```\n\n----------------------------------------\n\nTITLE: SDL_wcslen Syntax in C\nDESCRIPTION: This code snippet shows the function signature for SDL_wcslen. It takes a pointer to a constant wide character string (wchar_t*) as input and returns the length of the string (size_t). The input string must be null-terminated and must not be NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcslen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_wcslen(const wchar_t *wstr);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetJoystickVirtualBall Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetJoystickVirtualBall function, which sets the relative motion of a ball on a virtual joystick. This function takes a joystick pointer, ball index, and relative x and y motion as input. The changes are only applied after calling SDL_UpdateJoysticks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetJoystickVirtualBall.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetJoystickVirtualBall(SDL_Joystick *joystick, int ball, Sint16 xrel, Sint16 yrel);\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_POLL_SENTINEL Definition in C\nDESCRIPTION: Defines the SDL_HINT_POLL_SENTINEL macro, which is used to enable or disable poll sentinels.  When enabled, SDL uses a sentinel event to prevent getting stuck in a poll loop when a device continuously generates events. The hint can be set to \"0\" to disable or \"1\" to enable the poll sentinels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_POLL_SENTINEL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_POLL_SENTINEL \"SDL_POLL_SENTINEL\"\n```\n\n----------------------------------------\n\nTITLE: SDL_DequeueAudio Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_DequeueAudio function in C, showing its parameters and return type.\nThis function is used to retrieve audio data from a non-callback capture device.\nThe function takes the device ID, a pointer to the buffer to store the data, and the length of the buffer as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DequeueAudio.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nUint32 SDL_DequeueAudio(SDL_AudioDeviceID dev, void *data, Uint32 len);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MetalView type in C\nDESCRIPTION: Defines a type SDL_MetalView as a void pointer. This can be cast directly to an NSView or UIView.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MetalView.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void *SDL_MetalView;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_TRACKPAD_IS_TOUCH_ONLY in C\nDESCRIPTION: This code snippet defines the SDL_HINT_TRACKPAD_IS_TOUCH_ONLY macro, which is used to set a hint that determines whether trackpad input should be treated as touch input instead of mouse input. This hint is checked during SDL_Init and cannot be changed after. It is supported on macOS (MacBooks' trackpads) as of SDL 2.24.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_TRACKPAD_IS_TOUCH_ONLY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_TRACKPAD_IS_TOUCH_ONLY \"SDL_TRACKPAD_IS_TOUCH_ONLY\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUFrontFace Enum in C\nDESCRIPTION: This code snippet shows the definition of the `SDL_GPUFrontFace` enum in C. It specifies how the winding order of vertices determines the front face of a triangle. The enum consists of two possible values: `SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE` and `SDL_GPU_FRONTFACE_CLOCKWISE`. This enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUFrontFace.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUFrontFace\n{\n    SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE,  /**< A triangle with counter-clockwise vertex winding will be considered front-facing. */\n    SDL_GPU_FRONTFACE_CLOCKWISE           /**< A triangle with clockwise vertex winding will be considered front-facing. */\n} SDL_GPUFrontFace;\n```\n\n----------------------------------------\n\nTITLE: Mix_QuickLoad_WAV Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_QuickLoad_WAV function, which loads a WAV file from memory into a Mix_Chunk. The function requires a pointer to a memory buffer containing the WAV data as input. The function is part of the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_QuickLoad_WAV.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nMix_Chunk * Mix_QuickLoad_WAV(Uint8 *mem);\n```\n\n----------------------------------------\n\nTITLE: SDL_SendAndroidMessage Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SendAndroidMessage function in C. It takes a Uint32 command and an int param as input and returns a bool indicating success or failure. The command must be greater or equal to 0x8000.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SendAndroidMessage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SendAndroidMessage(Uint32 command, int param);\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontWrapAlignment Function\nDESCRIPTION: Sets a font's current wrap alignment option, used for multi-line text rendering. Alignment options are defined in TTF_HorizontalAlignment.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_28\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontWrapAlignment(TTF_Font *font, TTF_HorizontalAlignment align);                                                              // Set a font's current wrap alignment option.\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SDL_COMPILE_TIME_ASSERT in C\nDESCRIPTION: Demonstrates how to use SDL_COMPILE_TIME_ASSERT to check the size of a Uint32 type at compile time. This ensures that the size of the data type is as expected, preventing potential issues related to data representation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_COMPILE_TIME_ASSERT.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_COMPILE_TIME_ASSERT(uint32_size, sizeof(Uint32) == 4);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_CommonEvent Structure in C\nDESCRIPTION: This C code defines the SDL_CommonEvent structure, which is shared by all SDL events. It contains the event type (`type`), a reserved field (`reserved`), and the event timestamp in nanoseconds (`timestamp`). The event type is a Uint32 to accommodate user-defined events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CommonEvent.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_CommonEvent\n{\n    Uint32 type;        /**< Event type, shared with all events, Uint32 to cover user events which are not in the SDL_EventType enumeration */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n} SDL_CommonEvent;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_LINUX_DEADZONES C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_LINUX_DEADZONES macro. This macro represents the name of the hint that controls whether SDL uses the HID-defined deadzones for joysticks on Linux or returns unfiltered axis values. It should be set before a controller is opened to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_LINUX_DEADZONES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_LINUX_DEADZONES \"SDL_JOYSTICK_LINUX_DEADZONES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_NOLONGLONG Macro Definition in C\nDESCRIPTION: This macro definition disables the use of 'long long' C types within the SDL library. Defining this macro is useful when compiling with older compilers that do not support the 'long long' data type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NOLONGLONG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NOLONGLONG 1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_AUTOCENTER in C\nDESCRIPTION: Defines the SDL_HAPTIC_AUTOCENTER macro to indicate that a haptic device can set autocenter. This macro is a bit flag that can be checked against the device's capabilities. It is defined as 1u left-shifted by 13.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_AUTOCENTER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_AUTOCENTER (1u<<13)\n```\n\n----------------------------------------\n\nTITLE: SDL_modf Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_modf function in C. It takes a double as input and a pointer to a double to store the integer part, and returns the fractional part of the input double. This function is part of the SDL3 library and is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_modf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_modf(double x, double *y);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SSE2_INTRINSICS in C\nDESCRIPTION: This code snippet shows the definition of the SDL_SSE2_INTRINSICS macro. It's a simple preprocessor directive that sets the value of SDL_SSE2_INTRINSICS to 1 when SSE2 intrinsics are supported by the compiler. It requires the SDL3/SDL_intrin.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SSE2_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SSE2_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ALLOW_TOPMOST in C\nDESCRIPTION: This C macro defines the string constant for the SDL_HINT_ALLOW_TOPMOST hint.  This hint controls whether SDL is allowed to set the topmost bit on a window.  Setting it to \"0\" will prevent SDL from setting the topmost bit, and setting it to \"1\" will allow SDL to set the topmost bit. The default is \"1\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ALLOW_TOPMOST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ALLOW_TOPMOST \"SDL_ALLOW_TOPMOST\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_DUMMY_TIMESCALE in C\nDESCRIPTION: Defines the SDL_HINT_AUDIO_DUMMY_TIMESCALE macro. This macro is used as a hint to adjust the audio rate when using the dummy audio driver in SDL3. It should be set before opening an audio device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DUMMY_TIMESCALE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DUMMY_TIMESCALE \"SDL_AUDIO_DUMMY_TIMESCALE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TextureAccess Enum in C\nDESCRIPTION: This code snippet defines the SDL_TextureAccess enum, specifying the possible access types for a texture. The access types are SDL_TEXTUREACCESS_STATIC (rarely changes, not lockable), SDL_TEXTUREACCESS_STREAMING (changes frequently, lockable), and SDL_TEXTUREACCESS_TARGET (can be used as a render target). It's defined in SDL_render.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TextureAccess.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_TextureAccess\n{\n    SDL_TEXTUREACCESS_STATIC,    /**< Changes rarely, not lockable */\n    SDL_TEXTUREACCESS_STREAMING, /**< Changes frequently, lockable */\n    SDL_TEXTUREACCESS_TARGET     /**< Texture can be used as a render target */\n} SDL_TextureAccess;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUFence in C\nDESCRIPTION: This code snippet defines the SDL_GPUFence structure as an opaque handle.  It is a forward declaration of a structure, meaning the internal details of the structure are not exposed in the header file.  This is a common practice for opaque handles, as it allows the implementation to change without breaking API compatibility.  The SDL_GPUFence is used for GPU synchronization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUFence.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUFence SDL_GPUFence;\n```\n\n----------------------------------------\n\nTITLE: Detect BMP Image Data\nDESCRIPTION: This function, IMG_isBMP, detects BMP image data from a readable SDL_RWops stream. It attempts to determine if the provided SDL_RWops contains BMP image data by reading a minimal amount of data. It takes a seekable/readable SDL_RWops as input and returns a non-zero integer if the data is BMP, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isBMP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isBMP(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_truncf Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_truncf function in C. It takes a single-precision floating-point value as input and returns the truncated floating-point value. The function is defined in the SDL3/SDL_stdinc.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_truncf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_truncf(float x);\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_OPENVR_LIBRARY Definition in C\nDESCRIPTION: Defines the SDL_HINT_OPENVR_LIBRARY macro, which is a string used as a hint to specify the location of the OpenVR API library. This allows the application to load the OpenVR library from a non-default location. The hint should be set before initializing SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_OPENVR_LIBRARY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_OPENVR_LIBRARY              \"SDL_OPENVR_LIBRARY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_atan Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_atan function in C. It takes a double as input and returns a double, representing the arc tangent of the input value in radians. The function is available since SDL 3.2.0 and is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_atan.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_atan(double x);\n```\n\n----------------------------------------\n\nTITLE: Uint64 Type Definition\nDESCRIPTION: Defines the Uint64 type as an alias for uint64_t. This provides a platform-independent way to represent an unsigned 64-bit integer in SDL applications. It depends on the standard C library's uint64_t.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Uint64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint64_t Uint64;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetTrayMenuParentEntry Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetTrayMenuParentEntry function in C. This function takes a pointer to an SDL_TrayMenu as input and returns a pointer to an SDL_TrayEntry representing the parent entry, or NULL if the menu is not a submenu.  It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTrayMenuParentEntry.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TrayEntry * SDL_GetTrayMenuParentEntry(SDL_TrayMenu *menu);\n```\n\n----------------------------------------\n\nTITLE: Define TTF_MAJOR_VERSION Macro in C\nDESCRIPTION: This code snippet defines the TTF_MAJOR_VERSION macro, which is used to represent the major version number of the SDL_ttf library. It is part of the backwards compatibility mechanism. It is defined in the SDL_ttf.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_MAJOR_VERSION   SDL_TTF_MAJOR_VERSION\n```\n\n----------------------------------------\n\nTITLE: SDL_IsTablet Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_IsTablet function in C. The function takes no arguments and returns an SDL_bool value, indicating whether the current device is a tablet.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsTablet.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_IsTablet(void);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadXV_RW Syntax\nDESCRIPTION: Defines the syntax for loading a XV image directly from an SDL_RWops stream using SDL_image. The function bypasses format detection, assuming the input is definitely a XV image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadXV_RW.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * IMG_LoadXV_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontOutline Function\nDESCRIPTION: Queries the current outline size of a TTF_Font object. Returns the outline size in pixels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontOutline(const TTF_Font *font);                                                                                              // Query a font's current outline.\n```\n\n----------------------------------------\n\nTITLE: Check Screen Keyboard Visibility in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the `SDL_ScreenKeyboardShown` function in SDL3. It takes an `SDL_Window` pointer as input and returns a boolean indicating whether the screen keyboard is currently visible for that window. The function is available since SDL 3.2.0 and must be called from the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ScreenKeyboardShown.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ScreenKeyboardShown(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_TextInputEvent Structure Definition in C\nDESCRIPTION: Defines the structure for SDL_TextInputEvent, which represents a text input event. It includes the event type, timestamp, window ID, and the input text, encoded in UTF-8.  The text field has a fixed size defined by SDL_TEXTINPUTEVENT_TEXT_SIZE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TextInputEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TextInputEvent\n{\n    Uint32 type;                              /**< SDL_TEXTINPUT */\n    Uint32 timestamp;                         /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;                          /**< The window with keyboard focus, if any */\n    char text[SDL_TEXTINPUTEVENT_TEXT_SIZE];  /**< The input text; UTF-8 encoded. */\n} SDL_TextInputEvent;\n```\n\n----------------------------------------\n\nTITLE: Getting a Hint Value using SDL_GetHint in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_GetHint function to retrieve the value of a specified hint. It takes the name of the hint as a string, and returns a string representing the current value of that hint. If the hint is not set, it returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetHint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetHint(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Get Font Descent using SDL_ttf in C\nDESCRIPTION: This code snippet shows how to retrieve the font's descent using the TTF_FontDescent function. It requires an initialized TTF_Font pointer as input and returns the font's descent as an integer value, which is a negative offset from the baseline.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_FontDescent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_FontDescent(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Get Text Substrings For Range - SDL_ttf\nDESCRIPTION: Retrieves the substrings of a text object that contain a range of text.  `offset` is the starting position, `length` is the length of the range, and `count` will be populated with the number of substrings returned.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_109\n\nLANGUAGE: C\nCODE:\n```\nTTF_SubString ** TTF_GetTextSubStringsForRange(TTF_Text *text, int offset, int length, int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_WPRINTF_VARARG_FUNCV Macro Definition in C\nDESCRIPTION: Defines the SDL_WPRINTF_VARARG_FUNCV macro, which is used to annotate va_list functions operating like wprintf. It utilizes the __attribute__ format specifier for compilers that support it.  On compilers without this feature, it is defined to nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WPRINTF_VARARG_FUNCV.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_WPRINTF_VARARG_FUNCV( fmtargnumber ) /* __attribute__ (( format( __wprintf__, fmtargnumber, 0 ))) */\n```\n\n----------------------------------------\n\nTITLE: Mix_ResumeGroup Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_ResumeGroup function in C. It takes an integer tag as input, which specifies the group of channels to resume. The function is part of the SDL_mixer library and is available since version 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_ResumeGroup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_ResumeGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: IMG_isPNG Function Definition in C\nDESCRIPTION: This code snippet shows the definition of the IMG_isPNG function, which is used to detect PNG image data from a readable/seekable SDL_IOStream. It takes an SDL_IOStream pointer as input and returns a boolean value indicating whether the stream contains PNG data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isPNG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isPNG(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_bsearch_r Syntax in C\nDESCRIPTION: The SDL_bsearch_r function performs a binary search with a user-provided comparison function. It requires a pointer to the key to search for, a pointer to the base of the sorted array, the number of elements in the array, the size of each element, a comparison function (SDL_CompareCallback_r), and a userdata pointer to be passed to the compare function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_bsearch_r.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_bsearch_r(const void *key, const void *base, size_t nmemb, size_t size, SDL_CompareCallback_r compare, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetPointDisplayIndex Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetPointDisplayIndex function in C. It takes a pointer to a SDL_Point structure as input and returns an integer representing the display index, or a negative error code on failure. It is defined in SDL_video.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetPointDisplayIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetPointDisplayIndex(const SDL_Point * point);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_WaitUntilConnected Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_WaitUntilConnected function. It takes a pointer to an SDLNet_StreamSocket and a timeout value (in milliseconds) as input. The function blocks until the socket connects or the timeout expires. Returns 1 if connected, -1 if failed, or 0 if timed out.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_WaitUntilConnected.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_WaitUntilConnected(SDLNet_StreamSocket *sock, Sint32 timeout);\n```\n\n----------------------------------------\n\nTITLE: SDL_TextEditingEvent Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_TextEditingEvent` in C, used for representing text editing events. It includes fields for event type, timestamp, window ID, editing text, start cursor position, and length of selected text. This structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TextEditingEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TextEditingEvent\n{\n    SDL_EventType type;         /**< SDL_EVENT_TEXT_EDITING */\n    Uint32 reserved;\n    Uint64 timestamp;           /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID;      /**< The window with keyboard focus, if any */\n    const char *text;           /**< The editing text */\n    Sint32 start;               /**< The start cursor of selected editing text, or -1 if not set */\n    Sint32 length;              /**< The length of selected editing text, or -1 if not set */\n} SDL_TextEditingEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_TryLockSpinlock Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_TryLockSpinlock function in C, which attempts to acquire a spinlock. It takes a pointer to an SDL_SpinLock and returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TryLockSpinlock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_TryLockSpinlock(SDL_SpinLock *lock);\n```\n\n----------------------------------------\n\nTITLE: Get HID Device Change Count in SDL2\nDESCRIPTION: This code snippet shows the syntax for the SDL_hid_device_change_count function, which returns a counter incremented with each potential HID device change. A return value of 0 indicates that device change detection is not available. The function requires SDL 2.0.18 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_device_change_count.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_hid_device_change_count(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_USE_D3D9EX in C\nDESCRIPTION: This C code snippet defines the SDL_HINT_WINDOWS_USE_D3D9EX macro, which is used to enable or disable the use of the Direct3D 9Ex API on Windows. The hint must be set before initializing the video subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_USE_D3D9EX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_USE_D3D9EX \"SDL_WINDOWS_USE_D3D9EX\"\n```\n\n----------------------------------------\n\nTITLE: Clearing SDL Error in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_ClearError function. It clears any previously set error message for the current thread. This function does not take any arguments and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ClearError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ClearError(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_HPUX Macro in C\nDESCRIPTION: This code snippet defines the SDL_PLATFORM_HPUX preprocessor macro, which is set to 1 when compiling for the HP-UX platform. This allows conditional compilation of code specific to HP-UX systems. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_HPUX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_HPUX 1\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderReadPixels Syntax (C)\nDESCRIPTION: Defines the syntax for SDL_RenderReadPixels function in C, which reads pixels from the current rendering target.\nIt takes a SDL_Renderer pointer and an optional SDL_Rect pointer as input.\nIt returns a pointer to an SDL_Surface containing the read pixels, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderReadPixels.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * SDL_RenderReadPixels(SDL_Renderer *renderer, const SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticName Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the `SDL_HapticName` function in C. It takes an integer representing the device index as input and returns a const char pointer, which is the name of the haptic device. The function returns NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_HapticName(int device_index);\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontWrappedAlign Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_SetFontWrappedAlign function in C. It takes a TTF_Font pointer and an integer representing the alignment as input.  The alignment parameter should be one of TTF_WRAPPED_ALIGN_LEFT, TTF_WRAPPED_ALIGN_CENTER, or TTF_WRAPPED_ALIGN_RIGHT.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontWrappedAlign.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontWrappedAlign(TTF_Font *font, int align);\n```\n\n----------------------------------------\n\nTITLE: SDL_KeyboardDeviceEvent Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_KeyboardDeviceEvent` which is used to represent keyboard device events in SDL3.  The structure contains the event type (either `SDL_EVENT_KEYBOARD_ADDED` or `SDL_EVENT_KEYBOARD_REMOVED`), a reserved field, a timestamp obtained from `SDL_GetTicksNS()`, and the keyboard instance ID.  This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_KeyboardDeviceEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_KeyboardDeviceEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_KEYBOARD_ADDED or SDL_EVENT_KEYBOARD_REMOVED */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_KeyboardID which;   /**< The keyboard instance id */\n} SDL_KeyboardDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_ResetHints Syntax in C\nDESCRIPTION: The SDL_ResetHints function resets all hints to the default values, which are determined by associated environment variables. No input parameters are required. This function is available since SDL 2.26.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ResetHints.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ResetHints(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_X11_XCB_LIBRARY in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_X11_XCB_LIBRARY hint as a macro in C. This hint is used to specify the XCB library to load for the X11 driver within SDL3. It should be set before initializing the video subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_X11_XCB_LIBRARY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_X11_XCB_LIBRARY \"SDL_X11_XCB_LIBRARY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_LockAudio Syntax in C\nDESCRIPTION: Defines the syntax of the SDL_LockAudio function. This function locks the audio device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LockAudio.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_LockAudio(void);\n```\n\n----------------------------------------\n\nTITLE: Querying Paused Music SDL_mixer C\nDESCRIPTION: Queries whether the music stream is currently paused. Returns true if the music is paused, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_33\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_PausedMusic(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_DestroyGPUTextEngine Syntax in C\nDESCRIPTION: This snippet shows the syntax for the TTF_DestroyGPUTextEngine function. It takes a TTF_TextEngine pointer as input, which represents the text engine to be destroyed. All text created by this engine should be destroyed before calling this function. The function does not return any value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_DestroyGPUTextEngine.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroyGPUTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ThreadState Enum in C\nDESCRIPTION: This code snippet defines the `SDL_ThreadState` enumeration in C, providing a way to represent the different states of a thread. The possible values are `SDL_THREAD_UNKNOWN`, `SDL_THREAD_ALIVE`, `SDL_THREAD_DETACHED`, and `SDL_THREAD_COMPLETE`. The `SDL_GetThreadState` function can be used to retrieve the current state of a thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ThreadState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ThreadState\n{\n    SDL_THREAD_UNKNOWN,     /**< The thread is not valid */\n    SDL_THREAD_ALIVE,       /**< The thread is currently running */\n    SDL_THREAD_DETACHED,    /**< The thread is detached and can't be waited on */\n    SDL_THREAD_COMPLETE     /**< The thread has finished and should be cleaned up with SDL_WaitThread() */\n} SDL_ThreadState;\n```\n\n----------------------------------------\n\nTITLE: Get Number of Video Displays in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetNumVideoDisplays function, which retrieves the number of available video displays. The function requires no input parameters and returns an integer representing the number of displays, or a negative error code on failure. Call SDL_GetError() for more details about the error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumVideoDisplays.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumVideoDisplays(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 in C\nDESCRIPTION: This macro defines the SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 hint, which can be used to control whether SDL generates window-close events when Alt+F4 is pressed on Windows. The value of the hint should be set to \"0\" to generate the event or \"1\" to disable it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_NO_CLOSE_ON_ALT_F4 \"SDL_WINDOWS_NO_CLOSE_ON_ALT_F4\"\n```\n\n----------------------------------------\n\nTITLE: SDL_PumpEvents Syntax in C\nDESCRIPTION: This code snippet shows the basic syntax of the SDL_PumpEvents function in C. It takes no arguments and returns void. It's important to call this function periodically to update the event queue, especially when not using SDL_PollEvent or SDL_WaitEvent.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_PumpEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_PumpEvents(void);\n```\n\n----------------------------------------\n\nTITLE: Get Tray Menu Entries in C\nDESCRIPTION: Retrieves a NULL-terminated list of tray entries from the specified SDL_TrayMenu. The `menu` parameter specifies the tray menu to get the entries from. The `count` parameter is an optional pointer where the number of entries in the menu will be stored. The returned pointer becomes invalid when menu entries are added or removed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTrayEntries.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_TrayEntry ** SDL_GetTrayEntries(SDL_TrayMenu *menu, int *count);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED in C\nDESCRIPTION: This macro definition specifies the name of the SDL hint used to control Alt+Tab behavior when the keyboard is grabbed. It defines the string literal that should be used when setting or getting the value of this hint using SDL_SetHint or SDL_GetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED \"SDL_ALLOW_ALT_TAB_WHILE_GRABBED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_CameraSpec Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_CameraSpec structure, which describes the output format of a camera device.  It includes members for pixel format, colorspace, width, height, framerate numerator, and framerate denominator. This structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CameraSpec.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_CameraSpec\n{\n    SDL_PixelFormat format;     /**< Frame format */\n    SDL_Colorspace colorspace;  /**< Frame colorspace */\n    int width;                  /**< Frame width */\n    int height;                 /**< Frame height */\n    int framerate_numerator;     /**< Frame rate numerator ((num / denom) == FPS, (denom / num) == duration in seconds) */\n    int framerate_denominator;   /**< Frame rate demoninator ((num / denom) == FPS, (denom / num) == duration in seconds) */\n} SDL_CameraSpec;\n```\n\n----------------------------------------\n\nTITLE: SDL_GetError Syntax in C\nDESCRIPTION: This snippet shows the syntax of the SDL_GetError function in C. The function takes no arguments and returns a const char* pointing to an error message, or an empty string if no error has occurred since the last call to SDL_ClearError.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetError(void);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Product Version in SDL2 (C)\nDESCRIPTION: Retrieves the product version of an opened joystick. Requires an SDL_Joystick pointer obtained from SDL_JoystickOpen(). Returns a Uint16 representing the product version or 0 if unavailable. Available since SDL 2.0.6.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetProductVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_JoystickGetProductVersion(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Render Shaded Wrapped Text C\nDESCRIPTION: This function renders word-wrapped UTF-8 text at high quality to a new 8-bit surface. It requires a TTF_Font, text string, length, foreground and background colors, and the wrap width. Returns SDL_Surface with the rendered text or NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_61\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Shaded_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: Define GameCube Devices Hint String in C\nDESCRIPTION: Defines a string literal used as a hint to specify GameCube-style joysticks by their USB Vendor ID and Product ID. The hint takes a comma-separated list of VID/PID pairs in hexadecimal format. It can also point to a file containing the list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_GAMECUBE_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES \"SDL_JOYSTICK_GAMECUBE_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ShouldQuit Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_ShouldQuit function in C. It takes an SDL_InitState pointer as input and returns a boolean value indicating whether cleanup should be performed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShouldQuit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ShouldQuit(SDL_InitState *state);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUSwapchainComposition Enum (C)\nDESCRIPTION: This code snippet defines the SDL_GPUSwapchainComposition enumeration. It specifies the supported texture formats and colorspaces for GPU swapchain textures in SDL3. The enum values represent different encoding methods, including SDR (sRGB), SDR_LINEAR (linear sRGB), HDR_EXTENDED_LINEAR (extended linear sRGB), and HDR10_ST2084 (BT.2020 ST2084).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUSwapchainComposition.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_GPUSwapchainComposition\n{\n    SDL_GPU_SWAPCHAINCOMPOSITION_SDR,\n    SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR,\n    SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR,\n    SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2084\n} SDL_GPUSwapchainComposition;\n```\n\n----------------------------------------\n\nTITLE: SDL_Metal_CreateView Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_Metal_CreateView function, which creates a Metal view and associates it with a specified SDL_Window. The function returns a SDL_MetalView handle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Metal_CreateView.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_MetalView SDL_Metal_CreateView(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Cloning SDL3 Git Repository\nDESCRIPTION: This command clones the SDL3 Git repository from GitHub, allowing access to the latest bug fixes and improvements. SDL3 is currently on the \"main\" branch.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SourceCode.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/libsdl-org/SDL\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderText_Solid Function Signature in C\nDESCRIPTION: This code snippet shows the function signature for TTF_RenderText_Solid, which renders UTF-8 text to an 8-bit surface. It takes a font, text, text length, and foreground color as input and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderText_Solid.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Solid(TTF_Font *font, const char *text, size_t length, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MAIN_USE_CALLBACKS in C\nDESCRIPTION: This macro definition instructs SDL to use the provided callback functions instead of the standard `main` function. This is useful when integrating SDL with environments that require a specific application lifecycle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MAIN_USE_CALLBACKS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAIN_USE_CALLBACKS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteS32LE Function Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_WriteS32LE function. It takes an SDL_IOStream pointer and a Sint32 value as input and returns a boolean indicating success or failure. The function writes the 32-bit integer value to the specified SDL_IOStream in little-endian format, performing byteswapping if needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteS32LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteS32LE(SDL_IOStream *dst, Sint32 value);\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_VirtualJoystickSensorDesc Structure in C\nDESCRIPTION: This code snippet shows the definition of the SDL_VirtualJoystickSensorDesc structure in C. It includes the 'type' member, representing the sensor type (SDL_SensorType), and the 'rate' member, representing the sensor's update frequency as a float value.  It is available since SDL 3.2.0 and requires the SDL3/SDL_joystick.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VirtualJoystickSensorDesc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_VirtualJoystickSensorDesc\n{\n    SDL_SensorType type;    /**< the type of this sensor */\n    float rate;             /**< the update frequency of this sensor, may be 0.0f */\n} SDL_VirtualJoystickSensorDesc;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Scancode Enumeration in C\nDESCRIPTION: This C code defines the SDL_Scancode enumeration with various keyboard scancodes. The scancodes cover keypad keys, modifier keys (Ctrl, Shift, Alt, GUI), media keys (Play, Pause, Stop, etc.), and mobile keys (SoftLeft, SoftRight, Call, EndCall).  It adheres to the USB usage page standard.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Scancode.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum\n{\n    SDL_SCANCODE_CURRENCYSUBUNIT = 181,\n    SDL_SCANCODE_KP_LEFTPAREN = 182,\n    SDL_SCANCODE_KP_RIGHTPAREN = 183,\n    SDL_SCANCODE_KP_LEFTBRACE = 184,\n    SDL_SCANCODE_KP_RIGHTBRACE = 185,\n    SDL_SCANCODE_KP_TAB = 186,\n    SDL_SCANCODE_KP_BACKSPACE = 187,\n    SDL_SCANCODE_KP_A = 188,\n    SDL_SCANCODE_KP_B = 189,\n    SDL_SCANCODE_KP_C = 190,\n    SDL_SCANCODE_KP_D = 191,\n    SDL_SCANCODE_KP_E = 192,\n    SDL_SCANCODE_KP_F = 193,\n    SDL_SCANCODE_KP_XOR = 194,\n    SDL_SCANCODE_KP_POWER = 195,\n    SDL_SCANCODE_KP_PERCENT = 196,\n    SDL_SCANCODE_KP_LESS = 197,\n    SDL_SCANCODE_KP_GREATER = 198,\n    SDL_SCANCODE_KP_AMPERSAND = 199,\n    SDL_SCANCODE_KP_DBLAMPERSAND = 200,\n    SDL_SCANCODE_KP_VERTICALBAR = 201,\n    SDL_SCANCODE_KP_DBLVERTICALBAR = 202,\n    SDL_SCANCODE_KP_COLON = 203,\n    SDL_SCANCODE_KP_HASH = 204,\n    SDL_SCANCODE_KP_SPACE = 205,\n    SDL_SCANCODE_KP_AT = 206,\n    SDL_SCANCODE_KP_EXCLAM = 207,\n    SDL_SCANCODE_KP_MEMSTORE = 208,\n    SDL_SCANCODE_KP_MEMRECALL = 209,\n    SDL_SCANCODE_KP_MEMCLEAR = 210,\n    SDL_SCANCODE_KP_MEMADD = 211,\n    SDL_SCANCODE_KP_MEMSUBTRACT = 212,\n    SDL_SCANCODE_KP_MEMMULTIPLY = 213,\n    SDL_SCANCODE_KP_MEMDIVIDE = 214,\n    SDL_SCANCODE_KP_PLUSMINUS = 215,\n    SDL_SCANCODE_KP_CLEAR = 216,\n    SDL_SCANCODE_KP_CLEARENTRY = 217,\n    SDL_SCANCODE_KP_BINARY = 218,\n    SDL_SCANCODE_KP_OCTAL = 219,\n    SDL_SCANCODE_KP_DECIMAL = 220,\n    SDL_SCANCODE_KP_HEXADECIMAL = 221,\n\n    SDL_SCANCODE_LCTRL = 224,\n    SDL_SCANCODE_LSHIFT = 225,\n    SDL_SCANCODE_LALT = 226, /**< alt, option */\n    SDL_SCANCODE_LGUI = 227, /**< windows, command (apple), meta */\n    SDL_SCANCODE_RCTRL = 228,\n    SDL_SCANCODE_RSHIFT = 229,\n    SDL_SCANCODE_RALT = 230, /**< alt gr, option */\n    SDL_SCANCODE_RGUI = 231, /**< windows, command (apple), meta */\n\n    SDL_SCANCODE_MODE = 257,    /**< I'm not sure if this is really not covered\n                                 *   by any of the above, but since there's a\n                                 *   special SDL_KMOD_MODE for it I'm adding it here\n                                 */\n\n    /* @} *//* Usage page 0x07 */\n\n    /**\n     *  \\name Usage page 0x0C\n     *\n     *  These values are mapped from usage page 0x0C (USB consumer page).\n     *\n     *  There are way more keys in the spec than we can represent in the\n     *  current scancode range, so pick the ones that commonly come up in\n     *  real world usage.\n     */\n    /* @{ */\n\n    SDL_SCANCODE_SLEEP = 258,                   /**< Sleep */\n    SDL_SCANCODE_WAKE = 259,                    /**< Wake */\n\n    SDL_SCANCODE_CHANNEL_INCREMENT = 260,       /**< Channel Increment */\n    SDL_SCANCODE_CHANNEL_DECREMENT = 261,       /**< Channel Decrement */\n\n    SDL_SCANCODE_MEDIA_PLAY = 262,          /**< Play */\n    SDL_SCANCODE_MEDIA_PAUSE = 263,         /**< Pause */\n    SDL_SCANCODE_MEDIA_RECORD = 264,        /**< Record */\n    SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,  /**< Fast Forward */\n    SDL_SCANCODE_MEDIA_REWIND = 266,        /**< Rewind */\n    SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,    /**< Next Track */\n    SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268, /**< Previous Track */\n    SDL_SCANCODE_MEDIA_STOP = 269,          /**< Stop */\n    SDL_SCANCODE_MEDIA_EJECT = 270,         /**< Eject */\n    SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,    /**< Play / Pause */\n    SDL_SCANCODE_MEDIA_SELECT = 272,        /* Media Select */\n\n    SDL_SCANCODE_AC_NEW = 273,              /**< AC New */\n    SDL_SCANCODE_AC_OPEN = 274,             /**< AC Open */\n    SDL_SCANCODE_AC_CLOSE = 275,            /**< AC Close */\n    SDL_SCANCODE_AC_EXIT = 276,             /**< AC Exit */\n    SDL_SCANCODE_AC_SAVE = 277,             /**< AC Save */\n    SDL_SCANCODE_AC_PRINT = 278,            /**< AC Print */\n    SDL_SCANCODE_AC_PROPERTIES = 279,       /**< AC Properties */\n\n    SDL_SCANCODE_AC_SEARCH = 280,           /**< AC Search */\n    SDL_SCANCODE_AC_HOME = 281,             /**< AC Home */\n    SDL_SCANCODE_AC_BACK = 282,          /**< AC Back */\n    SDL_SCANCODE_AC_FORWARD = 283,          /**< AC Forward */\n    SDL_SCANCODE_AC_STOP = 284,             /**< AC Stop */\n    SDL_SCANCODE_AC_REFRESH = 285,          /**< AC Refresh */\n    SDL_SCANCODE_AC_BOOKMARKS = 286,        /**< AC Bookmarks */\n\n    /* @} *//* Usage page 0x0C */\n\n\n    /**\n     *  \\name Mobile keys\n     *\n     *  These are values that are often used on mobile phones.\n     */\n    /* @{ */\n\n    SDL_SCANCODE_SOFTLEFT = 287, /**< Usually situated below the display on phones and\n                                      used as a multi-function feature key for selecting\n                                      a software defined function shown on the bottom left\n                                      of the display. */\n    SDL_SCANCODE_SOFTRIGHT = 288, /**< Usually situated below the display on phones and\n                                       used as a multi-function feature key for selecting\n                                       a software defined function shown on the bottom right\n                                       of the display. */\n    SDL_SCANCODE_CALL = 289, /**< Used for accepting phone calls. */\n    SDL_SCANCODE_ENDCALL = 290, /**< Used for rejecting phone calls. */\n\n    /* @} *//* Mobile keys */\n\n    /* Add any other keys here. */\n\n    SDL_SCANCODE_RESERVED = 400,    /**< 400-500 reserved for dynamic keycodes */\n\n    SDL_SCANCODE_COUNT = 512 /**< not a key, just marks the number of scancodes for array bounds */\n\n} SDL_Scancode;\n```\n\n----------------------------------------\n\nTITLE: SDL_strrev Syntax in C\nDESCRIPTION: Shows the syntax of the SDL_strrev function, which takes a character pointer as input and returns the same pointer after reversing the string in place. The input string must be null-terminated and only contains low ASCII characters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strrev.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strrev(char *str);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Line Spacing Functions in C\nDESCRIPTION: Functions for setting and querying the line spacing for a font.  Controls the vertical distance between lines of text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_13\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_SetFontLineSkip(TTF_Font *font, int lineskip);                                                                                    // Set the spacing between lines of text for a font.\nint TTF_GetFontLineSkip(const TTF_Font *font);                                                                                             // Query the spacing between lines of text for a font.\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY hint as a string literal. This hint allows the user to control whether the EGL window can be composited as transparent, rather than opaque. The macro is defined in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_EGL_ALLOW_TRANSPARENCY \"SDL_VIDEO_EGL_ALLOW_TRANSPARENCY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockAudioStream Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_UnlockAudioStream function in C. It takes an SDL_AudioStream pointer as input and returns a boolean value indicating success or failure. It must be called from the same thread that called SDL_LockAudioStream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnlockAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_UnlockAudioStream(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS hint as a string literal. It allows SDL to combine Nintendo Switch Joy-Con controllers into a single controller when using the HIDAPI driver. The value can be set to \"0\" to disable combining or \"1\" to enable combining Joy-Cons.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS \"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS\"\n```\n\n----------------------------------------\n\nTITLE: Get Default Assertion Handler in SDL\nDESCRIPTION: This snippet shows the syntax for retrieving the default assertion handler in SDL. It takes no arguments and returns a function pointer of type SDL_AssertionHandler.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetDefaultAssertionHandler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AssertionHandler SDL_GetDefaultAssertionHandler(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnloadObject Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_UnloadObject function in C. It takes an SDL_SharedObject pointer as input, which should be a handle previously returned by SDL_LoadObject. The function unloads the shared object from memory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnloadObject.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnloadObject(SDL_SharedObject *handle);\n```\n\n----------------------------------------\n\nTITLE: TTF_OpenFontIndexDPIRW Syntax in C\nDESCRIPTION: The TTF_OpenFontIndexDPIRW function opens a font from an SDL_RWops stream, specifying the point size, font face index, and target DPI values. It returns a TTF_Font pointer on success or NULL on failure. The 'freesrc' parameter dictates whether the RWops stream is closed automatically upon closing the font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_OpenFontIndexDPIRW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_OpenFontIndexDPIRW(SDL_RWops *src, int freesrc, int ptsize, long index, unsigned int hdpi, unsigned int vdpi);\n```\n\n----------------------------------------\n\nTITLE: Lock a Spin Lock with SDL_AtomicLock in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_AtomicLock function, which sets a spin lock to a non-zero value, effectively locking it.  It takes a pointer to an SDL_SpinLock variable as input. Be cautious when using spinlocks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicLock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AtomicLock(SDL_SpinLock *lock);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadS32BE Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadS32BE function, which reads a 32-bit big-endian value from an SDL_IOStream. It takes an SDL_IOStream pointer and a pointer to a Sint32 as input, and returns a boolean indicating success or failure. It automatically byteswaps the data to the native byte order if necessary.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadS32BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadS32BE(SDL_IOStream *src, Sint32 *value);\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Gravity Constant in C\nDESCRIPTION: This code snippet defines the SDL_STANDARD_GRAVITY constant, representing the standard gravity value. It is used to interpret accelerometer readings, accounting for the force of gravity.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_STANDARD_GRAVITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_STANDARD_GRAVITY    9.80665f\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_INERTIA Macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_INERTIA macro as a bit flag (1u << 9). This flag is used to indicate that a haptic device supports inertia effects, which are based on the axes' acceleration. This macro is part of the SDL3 haptic API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_INERTIA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_INERTIA      (1u<<9)\n```\n\n----------------------------------------\n\nTITLE: Load animation from file in C\nDESCRIPTION: This function loads an animation from a file. It takes a file path as a const char pointer and returns a pointer to an IMG_Animation structure. The function returns NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimation(const char *file);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Direction with TTF_SetDirection in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_SetDirection function in SDL_ttf. It takes an integer representing the hb_direction_t value as input and returns an integer. The function is used to set a global text direction, influencing the rendering of all fonts without explicitly set directions. It returns 0 on success, or -1 if HarfBuzz support is missing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetDirection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_SetDirection(int direction); /* hb_direction_t */\n```\n\n----------------------------------------\n\nTITLE: SDL_NODISCARD Macro Definition in C\nDESCRIPTION: This code snippet shows the definition of the SDL_NODISCARD macro. It uses the [[nodiscard]] attribute in C++ to hint to the compiler that the function's return value is important and should not be ignored.  On compilers that do not support nodiscard, it will be defined to nothing. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NODISCARD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NODISCARD [[nodiscard]]\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyWindowSurface Syntax in C\nDESCRIPTION: Destroys the surface associated with the specified window. This function is available since SDL 2.28.0. The `window` parameter specifies the SDL_Window to update. Returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DestroyWindowSurface.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_DestroyWindowSurface(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_DEVICE_DEFAULT_RECORDING Macro Definition in C\nDESCRIPTION: Defines the SDL_AUDIO_DEVICE_DEFAULT_RECORDING macro, which represents a default recording audio device. This macro is used in functions that require an SDL_AudioDeviceID, allowing the system to choose a default device. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_DEVICE_DEFAULT_RECORDING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_DEVICE_DEFAULT_RECORDING ((SDL_AudioDeviceID) 0xFFFFFFFEu)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS macro, which is used as a key to set the hint for allowing joystick and gamecontroller events in the background. It sets the value to \"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\". This allows the SDL library to recognize this hint when used with SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS \"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: Setting Thread Priority and Policy in SDL2 (C)\nDESCRIPTION: Sets the priority and scheduling policy for a thread on Linux using SDL2. It takes the thread ID, SDL priority, and scheduling policy as input and returns 0 on success, or -1 on error. This function is available since SDL 2.0.18.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LinuxSetThreadPriorityAndPolicy.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_LinuxSetThreadPriorityAndPolicy(Sint64 threadID, int sdlPriority, int schedPolicy);\n```\n\n----------------------------------------\n\nTITLE: SDL_RWtell Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RWtell function, which retrieves the current read/write offset in an SDL_RWops data stream. It takes a pointer to an SDL_RWops structure as input and returns a Sint64 representing the current offset.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWtell.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint64 SDL_RWtell(SDL_RWops *context);\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv Error Codes\nDESCRIPTION: These macros define the error codes that SDL_iconv can return. `SDL_ICONV_ERROR` indicates a generic error, `SDL_ICONV_E2BIG` indicates the output buffer was too small, `SDL_ICONV_EILSEQ` indicates an invalid input sequence, and `SDL_ICONV_EINVAL` indicates an incomplete input sequence.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ICONV_ERROR     (size_t)-1  /**< Generic error. Check SDL_GetError()? */\n#define SDL_ICONV_E2BIG     (size_t)-2  /**< Output buffer was too small. */\n#define SDL_ICONV_EILSEQ    (size_t)-3  /**< Invalid input sequence was encountered. */\n#define SDL_ICONV_EINVAL    (size_t)-4  /**< Incomplete input sequence was encountered. */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_PS4 in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_PS4 hint as a string literal. This hint controls whether the HIDAPI driver for PS4 controllers is used. Setting it to \"1\" enables the HIDAPI driver, while setting it to \"0\" disables it. The default value inherits from SDL_HINT_JOYSTICK_HIDAPI.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_PS4.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS4 \"SDL_JOYSTICK_HIDAPI_PS4\"\n```\n\n----------------------------------------\n\nTITLE: Defining Stadia HIDAPI Joystick Hint in SDL3 (C)\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_STADIA macro, which is a string constant used to set the hint controlling the use of the HIDAPI driver for Google Stadia controllers. The hint can be set to \"0\" to disable the HIDAPI driver or \"1\" to enable it. It relies on SDL3 and SDL_hints.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STADIA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_STADIA \"SDL_JOYSTICK_HIDAPI_STADIA\"\n```\n\n----------------------------------------\n\nTITLE: Channel Properties (Panning, Position, Distance, Stereo)\nDESCRIPTION: These functions control the spatial audio properties of a channel, including panning (left/right balance), position (angle and distance), distance, and stereo reversal.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_SetPanning(int channel, Uint8 left, Uint8 right);                                // Set the panning of a channel.\nbool Mix_SetPosition(int channel, Sint16 angle, Uint8 distance);                          // Set the position of a channel.\nbool Mix_SetDistance(int channel, Uint8 distance);                                        // Set the \"distance\" of a channel.\nbool Mix_SetReverseStereo(int channel, int flip);                                         // Cause a channel to reverse its stereo.\n```\n\n----------------------------------------\n\nTITLE: Detect CUR Image Data\nDESCRIPTION: This function checks if the provided SDL_IOStream contains CUR image data. It reads a small amount of data from the stream to determine the file type and attempts to reset the stream's position to the original offset. It requires an SDL_IOStream pointer as input and returns a boolean value indicating whether the data is CUR image data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isCUR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isCUR(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TrayEntry structure in C\nDESCRIPTION: This code snippet defines the SDL_TrayEntry structure, which serves as an opaque handle for a system tray entry.  It is used to represent an item displayed in the system tray. The definition is available starting with SDL 3.2.0 and is located in the SDL3/SDL_tray.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TrayEntry.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TrayEntry SDL_TrayEntry;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_BlendOperation Enum in C\nDESCRIPTION: This code snippet defines the SDL_BlendOperation enum, which represents the different blending operations available in SDL. It includes operations like addition, subtraction, and minimum/maximum, along with their corresponding hexadecimal values. The enum is used to specify how source and destination pixel components are combined during rendering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_BlendOperation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_BlendOperation\n{\n    SDL_BLENDOPERATION_ADD              = 0x1,  /**< dst + src: supported by all renderers */\n    SDL_BLENDOPERATION_SUBTRACT         = 0x2,  /**< src - dst : supported by D3D9, D3D11, OpenGL, OpenGLES */\n    SDL_BLENDOPERATION_REV_SUBTRACT     = 0x3,  /**< dst - src : supported by D3D9, D3D11, OpenGL, OpenGLES */\n    SDL_BLENDOPERATION_MINIMUM          = 0x4,  /**< min(dst, src) : supported by D3D9, D3D11 */\n    SDL_BLENDOPERATION_MAXIMUM          = 0x5   /**< max(dst, src) : supported by D3D9, D3D11 */\n} SDL_BlendOperation;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TimerCallback in C\nDESCRIPTION: This code snippet shows the definition of the SDL_TimerCallback function prototype in C.  It's a typedef for a function pointer that takes a void pointer, a SDL_TimerID, and a Uint32 as input, and returns a Uint32.  The function pointer is marked with SDLCALL, indicating the calling convention.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TimerCallback.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef Uint32 (SDLCALL *SDL_TimerCallback)(void *userdata, SDL_TimerID timerID, Uint32 interval);\n```\n\n----------------------------------------\n\nTITLE: Get Music Position in Seconds - C\nDESCRIPTION: Retrieves the current playback position of a music stream in seconds using the Mix_GetMusicPosition function from the SDL_mixer library.\nDependencies: SDL_mixer library (version 2.6.0 or later).\nParameters: music (Mix_Music*): A pointer to the music object to query.\nReturns: A double representing the current music position in seconds or -1.0 if the feature is not supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicPosition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicPosition(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_EXTERNAL_CONTEXT in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_EXTERNAL_CONTEXT macro in C, setting its value to the string \"SDL_VIDEO_EXTERNAL_CONTEXT\". This macro is used to set the hint that controls SDL's graphics context management.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_EXTERNAL_CONTEXT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_EXTERNAL_CONTEXT    \"SDL_VIDEO_EXTERNAL_CONTEXT\"\n```\n\n----------------------------------------\n\nTITLE: Get Number of Haptic Axes - C\nDESCRIPTION: Retrieves the number of axes available on a given SDL_Haptic device. The haptic parameter represents a pointer to the SDL_Haptic device being queried. It returns the number of axes as an integer on success, or a negative error code on failure, in which case SDL_GetError() can be called for more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticNumAxes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_HapticNumAxes(SDL_Haptic * haptic);\n```\n\n----------------------------------------\n\nTITLE: Get Tray Entry Parent - SDL3 - C\nDESCRIPTION: Retrieves the parent menu of a given SDL_TrayEntry. The function takes a pointer to an SDL_TrayEntry as input and returns a pointer to the SDL_TrayMenu that contains the entry. This function must be called on the same thread that created the tray.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTrayEntryParent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TrayMenu * SDL_GetTrayEntryParent(SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: SDL_utf8strlcpy Syntax in C\nDESCRIPTION: Shows the function signature for SDL_utf8strlcpy in the C programming language. This function copies an UTF-8 string from source to destination, ensuring null termination and preventing truncated multi-byte sequences.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_utf8strlcpy.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_utf8strlcpy(char *dst, const char *src, size_t dst_bytes);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_BlendFactor Enum in C\nDESCRIPTION: This code defines the SDL_BlendFactor enumeration, which specifies the factors used to multiply pixel components during blending. Each enum member represents a different blending factor, such as zero, one, source color, or destination alpha. This is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlendFactor.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_BlendFactor\n{\n    SDL_BLENDFACTOR_ZERO                = 0x1,  /**< 0, 0, 0, 0 */\n    SDL_BLENDFACTOR_ONE                 = 0x2,  /**< 1, 1, 1, 1 */\n    SDL_BLENDFACTOR_SRC_COLOR           = 0x3,  /**< srcR, srcG, srcB, srcA */\n    SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,  /**< 1-srcR, 1-srcG, 1-srcB, 1-srcA */\n    SDL_BLENDFACTOR_SRC_ALPHA           = 0x5,  /**< srcA, srcA, srcA, srcA */\n    SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,  /**< 1-srcA, 1-srcA, 1-srcA, 1-srcA */\n    SDL_BLENDFACTOR_DST_COLOR           = 0x7,  /**< dstR, dstG, dstB, dstA */\n    SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,  /**< 1-dstR, 1-dstG, 1-dstB, 1-dstA */\n    SDL_BLENDFACTOR_DST_ALPHA           = 0x9,  /**< dstA, dstA, dstA, dstA */\n    SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA   /**< 1-dstA, 1-dstA, 1-dstA, 1-dstA */\n} SDL_BlendFactor;\n```\n\n----------------------------------------\n\nTITLE: Get Current Memory Functions - SDL3 - C\nDESCRIPTION: Retrieves the current set of SDL memory functions. This function takes pointers to SDL_malloc_func, SDL_calloc_func, SDL_realloc_func, and SDL_free_func as arguments, which will be populated with the current function pointers used by SDL for memory allocation. Thread safety is a concern if SDL_SetMemoryFunctions is being called from another thread simultaneously.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetMemoryFunctions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func,\n                        SDL_calloc_func *calloc_func,\n                        SDL_realloc_func *realloc_func,\n                        SDL_free_func *free_func);\n```\n\n----------------------------------------\n\nTITLE: Setting up sysroot for Cross-Compilation\nDESCRIPTION: Sets up the sysroot environment required for cross-compilation.  This involves exporting the SYSROOT path, mounting the Raspbian image, copying files, and installing qemu for ARM emulation. Includes binding /dev, /proc, and /sys.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport SYSROOT=/opt/rpi-sysroot\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo kpartx -a -v <path_to_raspbian_image>.img\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo mount -o loop /dev/mapper/loop0p2 /mnt\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp -r /mnt $SYSROOT\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install qemu binfmt-support qemu-user-static\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp /usr/bin/qemu-arm-static $SYSROOT/usr/bin\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo mount --bind /dev $SYSROOT/dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo mount --bind /proc $SYSROOT/proc\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo mount --bind /sys $SYSROOT/sys\n```\n\n----------------------------------------\n\nTITLE: Convert GUID String to SDL_GUID C\nDESCRIPTION: Converts a GUID string (const char*) into an SDL_GUID structure. It takes a string containing an ASCII representation of a GUID as input. The function returns an SDL_GUID structure representing the converted GUID. No error checking is performed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StringToGUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GUID SDL_StringToGUID(const char *pchGUID);\n```\n\n----------------------------------------\n\nTITLE: SDL_SwapFloat Syntax\nDESCRIPTION: This code snippet shows the syntax of the SDL_SwapFloat function, which takes a float as input and returns a float with byte order swapped. It's a forced inline function defined in SDL3/SDL_endian.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SwapFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE float SDL_SwapFloat(float x);\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Sensor Data with Timestamp in C\nDESCRIPTION: Retrieves the current state of a game controller sensor along with the timestamp of the last update.  Requires an SDL_GameController pointer, SDL_SensorType, pointers to store the timestamp (Uint64) and sensor data (float array), and the number of values to read. Returns 0 on success, -1 on error. This function is available since SDL 2.26.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetSensorDataWithTimestamp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerGetSensorDataWithTimestamp(SDL_GameController *gamecontroller, SDL_SensorType type, Uint64 *timestamp, float *data, int num_values);\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Non-Portable Type (C)\nDESCRIPTION: Retrieves the platform-dependent sensor type using its ID. The function takes an SDL_SensorID as input and returns the platform-dependent type as an integer, or -1 if the ID is invalid. This can be called before any sensors are opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorNonPortableTypeForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetSensorNonPortableTypeForID(SDL_SensorID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DropEvent Structure in C\nDESCRIPTION: This code snippet defines the SDL_DropEvent structure in C, which represents an event triggered when a file is dropped onto an SDL window. The structure contains the event type, timestamp, file path (which needs to be freed), and the ID of the window the file was dropped on.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DropEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DropEvent\n{\n    Uint32 type;        /**< SDL_DROPBEGIN or SDL_DROPFILE or SDL_DROPTEXT or SDL_DROPCOMPLETE */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    char *file;         /**< The file name, which should be freed with SDL_free(), is NULL on begin/complete */\n    Uint32 windowID;    /**< The window that was dropped on, if any */\n} SDL_DropEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL Mouse Button Constants (C)\nDESCRIPTION: Defines constants for each mouse button (left, middle, right, X1, X2) as integer values in C. These constants are used to identify specific mouse buttons.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseButtonFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_BUTTON_LEFT     1\n#define SDL_BUTTON_MIDDLE   2\n#define SDL_BUTTON_RIGHT    3\n#define SDL_BUTTON_X1       4\n#define SDL_BUTTON_X2       5\n```\n\n----------------------------------------\n\nTITLE: Stopping Text Input with SDL_StopTextInput in C\nDESCRIPTION: The SDL_StopTextInput function stops the application from receiving text input events. This is useful when the application no longer needs to receive keyboard input as text. The function takes no arguments and returns nothing. It is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_StopTextInput.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_StopTextInput(void);\n```\n\n----------------------------------------\n\nTITLE: Timer Callback Signature in C\nDESCRIPTION: This code snippet illustrates the updated signature for the callback function used with SDL_AddTimer(). The timer callback now includes an SDL_TimerID parameter. The callback is responsible for managing the timer and must return a Uint32 value representing the interval for the next timer event, or 0 to stop the timer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_48\n\nLANGUAGE: c\nCODE:\n```\nUint32 SDLCALL TimerCallback(void *userdata, SDL_TimerID timerID, Uint32 interval);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AppIterate_func Function Pointer in C\nDESCRIPTION: Defines a function pointer type, `SDL_AppIterate_func`, for functions that iterate over application states. The function takes a `void*` as input (appstate) and returns an `SDL_AppResult` indicating whether to continue, succeed, or fail. This is part of the SDL3 library and used with SDL_EnterAppMainCallbacks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppIterate_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_AppResult (SDLCALL *SDL_AppIterate_func)(void *appstate);\n```\n\n----------------------------------------\n\nTITLE: Render LCD Text C\nDESCRIPTION: This function renders UTF-8 text at LCD subpixel quality to a new ARGB surface. It requires a TTF_Font, the UTF-8 text, the text length, an SDL_Color for the foreground, and an SDL_Color for the background. It returns an SDL_Surface or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_66\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_LCD(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Quitting SDL_ttf with SDL_ttf in C\nDESCRIPTION: This function deinitializes the SDL_ttf library. This function should be called to free the resources allocated by SDL_ttf before the program exits.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_90\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_WindowEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_WindowEvent structure, which is used to store data for window events in SDL3. It includes the event type, a reserved field, a timestamp, the window ID, and two event-dependent data fields.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WindowEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_WindowEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_WINDOW_* */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The associated window */\n    Sint32 data1;       /**< event dependent data */\n    Sint32 data2;       /**< event dependent data */\n} SDL_WindowEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderCopyExF Function Signature (SDL2, C)\nDESCRIPTION: Defines the signature for the SDL_RenderCopyExF function in SDL2. This function copies a portion of the source texture to the current rendering target, with rotation and flipping, at subpixel precision. It takes a renderer, texture, source rectangle, destination rectangle, angle, center point, and flip type as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderCopyExF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderCopyExF(SDL_Renderer * renderer,\n                    SDL_Texture * texture,\n                    const SDL_Rect * srcrect,\n                    const SDL_FRect * dstrect,\n                    const double angle,\n                    const SDL_FPoint *center,\n                    const SDL_RendererFlip flip);\n```\n\n----------------------------------------\n\nTITLE: Setting compiler flags for modern x64 architecture using Visual C\nDESCRIPTION: Sets compiler flags to optimize SDL library for modern x64 microprocessor architectures using Visual C compiler. Using /ARCH:AVX2 allows compiler to use AVX2 instructions if they are available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncmake .. -DCMAKE_C_FLAGS=\"/ARCH:AVX2\" -DCMAKE_CXX_FLAGS=\"/ARCH:AVX2\"\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickUpdate Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_JoystickUpdate function in C. It takes no arguments and returns void. It updates the current state of the open joysticks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickUpdate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_JoystickUpdate(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS hint as a string literal. This hint controls whether an SDL_Window minimizes if it loses key focus when in fullscreen mode. The default value for this hint is false.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS   \"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS\"\n```\n\n----------------------------------------\n\nTITLE: Check Music Playing Status Mix_PlayingMusic C\nDESCRIPTION: Checks the playing status of the music stream. This function returns `true` if the music is currently playing, and `false` otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_30\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_PlayingMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining Joystick Wheel Devices Excluded Hint in SDL3 (C)\nDESCRIPTION: Defines the constant SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED as a string literal. This hint is used to specify a comma-separated list of USB VID/PID pairs of devices that should be excluded from being recognized as wheel-style controllers. It overrides SDL_HINT_JOYSTICK_WHEEL_DEVICES and the built-in device list. This is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED \"SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AssertionHandler Callback in C\nDESCRIPTION: Defines the SDL_AssertionHandler callback, which is triggered when an SDL assertion fails. It takes a pointer to SDL_AssertData and a user-defined data pointer as input. The handler returns an SDL_AssertState value to determine how the assertion failure should be handled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AssertionHandler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_AssertState (SDLCALL *SDL_AssertionHandler)( const SDL_AssertData* data, void* userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_PRILLx Macro Definition in C\nDESCRIPTION: This code snippet defines the SDL_PRILLx macro. It's used as a printf-formatting string for unsigned long long values in lowercase hexadecimal. It is defined using another macro SDL_PRILL_PREFIX concatenated with the string literal \"x\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILLx.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRILLx SDL_PRILL_PREFIX \"x\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Version Macro in C\nDESCRIPTION: This macro definition shows how the SDL_VERSION macro is structured to populate a given SDL_version struct's fields with the major, minor, and patch version numbers of the SDL library at compile time.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_VERSION.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_VERSION(x)                          \\\n{\\n    (x)->major = SDL_MAJOR_VERSION;                 \\\n    (x)->minor = SDL_MINOR_VERSION;                 \\\n    (x)->patch = SDL_PATCHLEVEL;                    \\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Shaded Wrapped Text C\nDESCRIPTION: This function renders word-wrapped UTF-8 text at high quality to a new 8-bit surface. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, an SDL_Color structure for the foreground color, an SDL_Color structure for the background color, and the wrap width. Returns an SDL_Surface pointer containing the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_35\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Shaded_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: Measure String Fit C\nDESCRIPTION: This function calculates how much of a UTF-8 string will fit within a given width. It takes a TTF_Font, the UTF-8 text, the text length, the maximum width, and pointers to store the measured width and length. It returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_56\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_MeasureString(TTF_Font *font, const char *text, size_t length, int max_width, int *measured_width, size_t *measured_length);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteS64BE Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WriteS64BE function, which writes a 64-bit integer to an SDL_IOStream in big-endian format. The function takes a pointer to an SDL_IOStream and a 64-bit integer as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteS64BE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_WriteS64BE(SDL_IOStream *dst, Sint64 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUSamplerCreateInfo Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_GPUSamplerCreateInfo structure, used to specify the parameters for creating a GPU sampler in SDL3. It includes members for filtering modes (min_filter, mag_filter), mipmap mode, addressing modes (address_mode_u, address_mode_v, address_mode_w), LOD bias, anisotropy, comparison operation, LOD clamping, and flags for enabling anisotropic filtering and comparison. It also includes a properties ID for extensions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUSamplerCreateInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUSamplerCreateInfo\n{\n    SDL_GPUFilter min_filter;                  /**< The minification filter to apply to lookups. */\n    SDL_GPUFilter mag_filter;                  /**< The magnification filter to apply to lookups. */\n    SDL_GPUSamplerMipmapMode mipmap_mode;      /**< The mipmap filter to apply to lookups. */\n    SDL_GPUSamplerAddressMode address_mode_u;  /**< The addressing mode for U coordinates outside [0, 1). */\n    SDL_GPUSamplerAddressMode address_mode_v;  /**< The addressing mode for V coordinates outside [0, 1). */\n    SDL_GPUSamplerAddressMode address_mode_w;  /**< The addressing mode for W coordinates outside [0, 1). */\n    float mip_lod_bias;                        /**< The bias to be added to mipmap LOD calculation. */\n    float max_anisotropy;                      /**< The anisotropy value clamp used by the sampler. If enable_anisotropy is false, this is ignored. */\n    SDL_GPUCompareOp compare_op;               /**< The comparison operator to apply to fetched data before filtering. */\n    float min_lod;                             /**< Clamps the minimum of the computed LOD value. */\n    float max_lod;                             /**< Clamps the maximum of the computed LOD value. */\n    bool enable_anisotropy;                /**< true to enable anisotropic filtering. */\n    bool enable_compare;                   /**< true to enable comparison against a reference value during lookups. */\n    Uint8 padding1;\n    Uint8 padding2;\n\n    SDL_PropertiesID props;                    /**< A properties ID for extensions. Should be 0 if no extensions are needed. */\n} SDL_GPUSamplerCreateInfo;\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_UnloadLibrary Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_Vulkan_UnloadLibrary function in C. It takes no arguments and returns void.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vulkan_UnloadLibrary.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Vulkan_UnloadLibrary(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUBufferLocation Structure Definition in C\nDESCRIPTION: Defines a structure SDL_GPUBufferLocation that represents a location in a GPU buffer. It contains a pointer to the SDL_GPUBuffer and an offset (Uint32) indicating the starting byte within the buffer. This structure is used for copying data between GPU buffers and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBufferLocation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUBufferLocation\n{\n    SDL_GPUBuffer *buffer;  /**< The buffer. */\n    Uint32 offset;          /**< The starting byte within the buffer. */\n} SDL_GPUBufferLocation;\n```\n\n----------------------------------------\n\nTITLE: Freeing HID Device Enumeration List in SDL3 (C)\nDESCRIPTION: This code snippet demonstrates the syntax for using SDL_hid_free_enumeration in C to free a linked list of HID device information. The function takes a pointer to the list (devs) as its sole argument. The list should be one previously returned by SDL_hid_enumerate.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_free_enumeration.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_hid_free_enumeration(SDL_hid_device_info *devs);\n```\n\n----------------------------------------\n\nTITLE: SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT Macro in C\nDESCRIPTION: Defines the SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT macro to mark a button as the default when the return key is pressed in a message box. This allows the user to select the button by pressing the return key. The value is a unsigned 32-bit integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxButtonFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT 0x00000001u\n```\n\n----------------------------------------\n\nTITLE: Getting Text Substrings for Range with SDL_ttf in C\nDESCRIPTION: This function retrieves the substrings of a text object that contain a specified range of text. It requires a `TTF_Text` pointer, the offset and length of the range, and a pointer to an integer to store the number of substrings. Returns a pointer to an array of `TTF_SubString` pointers, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_83\n\nLANGUAGE: C\nCODE:\n```\nTTF_SubString ** TTF_GetTextSubStringsForRange(TTF_Text *text, int offset, int length, int *count);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_KEYCODE_OPTIONS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_KEYCODE_OPTIONS macro, which is used as a key to set and get hint values related to keycode options.  It sets the value of the hint to the string \"SDL_KEYCODE_OPTIONS\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_KEYCODE_OPTIONS.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_KEYCODE_OPTIONS \"SDL_KEYCODE_OPTIONS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetWindowKeyboardGrab Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetWindowKeyboardGrab function in C. It takes an SDL_Window pointer as input and returns a boolean value indicating whether the keyboard is grabbed for that window. The function is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowKeyboardGrab.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetWindowKeyboardGrab(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: SDL_SCANF_VARARG_FUNCV Macro Definition\nDESCRIPTION: Defines the SDL_SCANF_VARARG_FUNCV macro, which annotates a va_list function to operate like scanf. It specifies the format argument number. On compilers without the annotation mechanism, it's defined to nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SCANF_VARARG_FUNCV.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SCANF_VARARG_FUNCV( fmtargnumber ) __attribute__(( format( __scanf__, fmtargnumber, 0 )))\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroySemaphore Syntax in C\nDESCRIPTION: Destroys a given semaphore. It is unsafe to destroy a semaphore if threads are currently waiting on it. The function accepts a pointer to the semaphore to be destroyed as its only argument.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DestroySemaphore.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroySemaphore(SDL_sem * sem);\n```\n\n----------------------------------------\n\nTITLE: Setting SDL Videodriver Environment Variable\nDESCRIPTION: This snippet demonstrates how to set the SDL_VIDEODRIVER environment variable to 'pandora' before running an application. This is necessary to force the use of the Pandora-specific video driver when running from the framebuffer. No dependencies are explicitly mentioned, but assumes a standard shell environment.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/pandora.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL_VIDEODRIVER=pandora\n```\n\n----------------------------------------\n\nTITLE: SDL_AsyncIOOutcome Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_AsyncIOOutcome` to represent the outcome of an asynchronous I/O operation. It includes fields indicating the associated `SDL_AsyncIO` object, the type of operation, the result, the buffer used, the offset, the number of bytes requested, the number of bytes transferred, and a user-defined pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AsyncIOOutcome.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AsyncIOOutcome\n{\n    SDL_AsyncIO *asyncio;   /**< what generated this task. This pointer will be invalid if it was closed! */\n    SDL_AsyncIOTaskType type;  /**< What sort of task was this? Read, write, etc? */\n    SDL_AsyncIOResult result;  /**< the result of the work (success, failure, cancellation). */\n    void *buffer;  /**< buffer where data was read/written. */\n    Uint64 offset;  /**< offset in the SDL_AsyncIO where data was read/written. */\n    Uint64 bytes_requested;  /**< number of bytes the task was to read/write. */\n    Uint64 bytes_transferred;  /**< actual number of bytes that were read/written. */\n    void *userdata;    /**< pointer provided by the app when starting the task */\n} SDL_AsyncIOOutcome;\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUSampler Struct Definition in C\nDESCRIPTION: Defines an opaque handle, SDL_GPUSampler, which represents a sampler. This is used within SDL3's GPU API for managing texture sampling. The structure itself is not defined, making it an opaque handle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUSampler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUSampler SDL_GPUSampler;\n```\n\n----------------------------------------\n\nTITLE: SDL_HAPTIC_STATUS Macro Definition in C\nDESCRIPTION: Defines the SDL_HAPTIC_STATUS macro which represents the flag to check if a haptic device supports querying the effect status. It's a bitwise flag, specifically 1u left-shifted by 14 bits.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_STATUS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_STATUS     (1u<<14)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TLSID in C\nDESCRIPTION: This code snippet shows the definition of SDL_TLSID as a typedef for SDL_AtomicInt.  This type represents a unique identifier for thread-local storage, allowing each thread to have its own unique value associated with a given ID. A TLS ID of 0 is invalid.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TLSID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_AtomicInt SDL_TLSID;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED macro. It specifies the string that is used to set or query the joystick HIDAPI switch player LED hint using SDL_SetHint and SDL_GetHint. The hint controls whether the player LEDs are lit on Nintendo Switch controllers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED\"\n```\n\n----------------------------------------\n\nTITLE: Define Joystick Blacklist Devices Hint C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_BLACKLIST_DEVICES hint as a string literal. This hint is used to specify a comma-separated list of USB VID/PID pairs to exclude from joystick detection in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_BLACKLIST_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES \"SDL_JOYSTICK_BLACKLIST_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: SDL 1.2 Audio Callback Example\nDESCRIPTION: This code snippet shows a typical audio callback implementation in SDL 1.2. It includes the callback function definition, audio specification setup, opening the audio device, pausing/unpausing audio, and closing the audio device. It depends on SDL 1.2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nstatic void SDLCALL my_audio_callback(void *userdata, Uint8 *stream, int len)\n{\n    /* fill `stream` with `len` bytes of data */\n    memcpy(stream, my_audio_data, len);\n}\n\n/* somewhere near startup... */\n\nSDL_AudioSpec spec;\nspec.freq = 22050;\nspec.format = AUDIO_S16SYS;\nspec.channels = 2;\nspec.samples = 1024;\nspec.callback = my_audio_callback;\nspec.userdata = whatever;\n\nif (SDL_OpenAudio(&spec, NULL) == -1) {\n    /* oh no, we failed, report an error and quit. */\n}\n\nSDL_PauseAudio(0);  /* now the callback will start. */\n\n/* at the end of the program ... */\nSDL_CloseAudio();\n```\n\n----------------------------------------\n\nTITLE: Get Music Title Tag in SDL_mixer (C)\nDESCRIPTION: Retrieves the title tag from a Mix_Music object. If the music object is NULL, the currently-playing music's title tag is returned. This function returns an empty string if the title tag is not available and never returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicTitleTag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetMusicTitleTag(const Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Path in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickPath function. It takes an SDL_Joystick pointer as input and returns a const char* representing the joystick's path, or NULL if the path cannot be determined. Requires SDL 2.24.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickPath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_JoystickPath(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Using SDL_DEPRECATED to Mark a Function as Deprecated\nDESCRIPTION: This code snippet demonstrates how to use the SDL_DEPRECATED macro to mark a function as deprecated.  The macro is placed before the function's return type in its declaration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DEPRECATED.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nextern SDL_DEPRECATED int ThisFunctionWasABadIdea(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT in C\nDESCRIPTION: This code snippet defines the SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT macro as a string literal. This hint is used to specify the HTML element that will receive keyboard input in Emscripten builds. The hint must be set before creating a window to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT \"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_SHIELD in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_SHIELD macro, which is used to control whether SDL uses the HIDAPI driver for NVIDIA SHIELD controllers. The macro expands to a string literal, which serves as the key for setting the hint using SDL_SetHint. The values \"0\" and \"1\" disable or enable the driver, respectively. The default value is linked to the SDL_HINT_JOYSTICK_HIDAPI hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_SHIELD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_SHIELD \"SDL_JOYSTICK_HIDAPI_SHIELD\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE macro, which is used to set the hint for GameCube controller rumble behavior. Setting this hint allows applications to control the rumble behavior of GameCube controllers to maintain compatibility with ADSR envelope requirements. It is used with SDL_SetHint and related functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_JOYSTICK_GAMECUBE_RUMBLE_BRAKE \"SDL_JOYSTICK_GAMECUBE_RUMBLE_BRAKE\"\n```\n\n----------------------------------------\n\nTITLE: Check for Screen Keyboard Support in SDL2 (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_HasScreenKeyboardSupport function from the SDL2 library. It checks if the platform has screen keyboard support and returns SDL_TRUE if supported, SDL_FALSE if not.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasScreenKeyboardSupport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasScreenKeyboardSupport(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUIndexedIndirectDrawCommand Structure Definition in C\nDESCRIPTION: Defines the SDL_GPUIndexedIndirectDrawCommand structure in C, used for specifying the parameters of an indexed indirect draw command. It includes members for the number of indices, number of instances, base index, vertex offset, and first instance. This structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUIndexedIndirectDrawCommand.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUIndexedIndirectDrawCommand\n{\n    Uint32 num_indices;    /**< The number of indices to draw per instance. */\n    Uint32 num_instances;  /**< The number of instances to draw. */\n    Uint32 first_index;    /**< The base index within the index buffer. */\n    Sint32 vertex_offset;  /**< The value added to the vertex index before indexing into the vertex buffer. */\n    Uint32 first_instance; /**< The ID of the first instance to draw. */\n} SDL_GPUIndexedIndirectDrawCommand;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ANDROID_BLOCK_ON_PAUSE in C\nDESCRIPTION: This code defines the SDL_HINT_ANDROID_BLOCK_ON_PAUSE macro, which is used to set a hint controlling whether the SDL event loop blocks when an Android application is paused. The macro expands to the string \"SDL_ANDROID_BLOCK_ON_PAUSE\". This hint should be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ANDROID_BLOCK_ON_PAUSE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ANDROID_BLOCK_ON_PAUSE \"SDL_ANDROID_BLOCK_ON_PAUSE\"\n```\n\n----------------------------------------\n\nTITLE: Closing HID Device in SDL (C)\nDESCRIPTION: Closes a HID device using a device handle. The device handle `dev` must be a valid pointer returned by SDL_hid_open(). This function releases the resources associated with the specified HID device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_close.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_hid_close(SDL_hid_device *dev);\n```\n\n----------------------------------------\n\nTITLE: SDL_CondWait Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_CondWait function in C. This function waits until a condition variable is signaled, temporarily unlocking a mutex.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CondWait.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_CondWait(SDL_cond * cond, SDL_mutex * mutex);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PackedOrder Enum in C\nDESCRIPTION: Defines the SDL_PackedOrder enumeration, specifying the order of packed color components. It includes options for arrangements like XRGB, RGBA, and BGR variants. This enum is used to define pixel formats and requires the SDL3/SDL_pixels.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PackedOrder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_PackedOrder\n{\n    SDL_PACKEDORDER_NONE,\n    SDL_PACKEDORDER_XRGB,\n    SDL_PACKEDORDER_RGBX,\n    SDL_PACKEDORDER_ARGB,\n    SDL_PACKEDORDER_RGBA,\n    SDL_PACKEDORDER_XBGR,\n    SDL_PACKEDORDER_BGRX,\n    SDL_PACKEDORDER_ABGR,\n    SDL_PACKEDORDER_BGRA\n} SDL_PackedOrder;\n```\n\n----------------------------------------\n\nTITLE: SDL_HAPTIC_DAMPER Definition in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_DAMPER macro, which is a bit flag indicating that the haptic device supports the damper effect. This effect simulates damping based on the velocity of the axes. It is defined as a bit shift of 1 by 8 bits.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_DAMPER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_DAMPER     (1u<<8)\n```\n\n----------------------------------------\n\nTITLE: Create Surface Text Engine C\nDESCRIPTION: This function creates a text engine for drawing text on SDL surfaces.  It takes no arguments and returns a pointer to a TTF_TextEngine, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_69\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateSurfaceTextEngine(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TouchID Type in C\nDESCRIPTION: Defines SDL_TouchID as a 64-bit unsigned integer (Uint64). This type represents a unique identifier assigned to a touch device. The identifier remains valid for the duration the device is connected to the system and is never reused within the application's lifetime. A value of 0 indicates an invalid ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TouchID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint64 SDL_TouchID;\n```\n\n----------------------------------------\n\nTITLE: Detect TIFF image data using IMG_isTIF in SDL_image (C)\nDESCRIPTION: This function checks if the data in the provided SDL_RWops stream is TIFF image data. It reads the least amount of data possible and seeks back to the original position. Returns a non-zero value if the data is TIFF, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isTIF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isTIF(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL Error Setting Example in C\nDESCRIPTION: This code snippet demonstrates a common pattern for setting an error message using SDL_SetError when a function fails. It returns the result of SDL_SetError, typically used in functions that return true for success and false for failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/CategoryError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nif (something_went_wrong) {\n   return SDL_SetError(\"The thing broke in this specific way: %d\", errcode);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ColorRange Enumeration in C\nDESCRIPTION: This code snippet defines the SDL_ColorRange enumeration in C, which specifies the color range (limited or full) for a surface. The enumeration includes values for unknown, limited, and full color ranges, aligned with ITU-R BT.2100-2 recommendations. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ColorRange.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ColorRange\n{\n    SDL_COLOR_RANGE_UNKNOWN = 0,\n    SDL_COLOR_RANGE_LIMITED = 1, /**< Narrow range, e.g. 16-235 for 8-bit RGB and luma, and 16-240 for 8-bit chroma */\n    SDL_COLOR_RANGE_FULL = 2    /**< Full range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 for 8-bit chroma */\n} SDL_ColorRange;\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Product Version by ID in C\nDESCRIPTION: Retrieves the product version of a gamepad given its instance ID using SDL_GetGamepadProductVersionForID. The function returns the product version as a Uint16 value. If the provided instance ID is invalid or the product version is unavailable, it returns zero.  It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadProductVersionForID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GetGamepadProductVersionForID(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Define TTF_SetError Macro in C\nDESCRIPTION: This macro defines `TTF_SetError` as an alias for `SDL_SetError`.  It allows the SDL_ttf library to use SDL's built-in error reporting functions. There are no specific parameters for this macro definition; it directly maps one function call to another. It's defined in the `SDL_ttf.h` header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_SetError    SDL_SetError\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ControllerTouchpadEvent Structure in C\nDESCRIPTION: This C code defines the SDL_ControllerTouchpadEvent structure, which is used to store information about game controller touchpad events.  The structure contains the event type, timestamp, joystick instance ID, touchpad and finger indices, normalized x and y coordinates, and pressure.  It is defined in SDL_events.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ControllerTouchpadEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_ControllerTouchpadEvent\n{\n    Uint32 type;        /**< SDL_CONTROLLERTOUCHPADDOWN or SDL_CONTROLLERTOUCHPADMOTION or SDL_CONTROLLERTOUCHPADUP */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Sint32 touchpad;    /**< The index of the touchpad */\n    Sint32 finger;      /**< The index of the finger on the touchpad */\n    float x;            /**< Normalized in the range 0...1 with 0 being on the left */\n    float y;            /**< Normalized in the range 0...1 with 0 being at the top */\n    float pressure;     /**< Normalized in the range 0...1 */\n} SDL_ControllerTouchpadEvent;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_ISCOLORSPACE_MATRIX_BT601 in C\nDESCRIPTION: This macro determines if an SDL_Colorspace uses BT601 (or BT470BG) matrix coefficients. It takes an SDL_Colorspace as input and returns true if the colorspace uses BT601 or BT470BG matrix coefficients, and false otherwise. Note that the macro double-evaluates its parameter, so avoid side effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISCOLORSPACE_MATRIX_BT601.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISCOLORSPACE_MATRIX_BT601(cspace)        (SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT601 || SDL_COLORSPACEMATRIX(cspace) == SDL_MATRIX_COEFFICIENTS_BT470BG)\n```\n\n----------------------------------------\n\nTITLE: Freeing an SDL Cursor in C\nDESCRIPTION: This code snippet shows the syntax for freeing a cursor created with SDL in C. It takes a pointer to an SDL_Cursor structure as its parameter. It releases the memory associated with the cursor, which was previously allocated using functions like SDL_CreateCursor.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FreeCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FreeCursor(SDL_Cursor * cursor);\n```\n\n----------------------------------------\n\nTITLE: SDL_NS_TO_SECONDS Macro Definition in C\nDESCRIPTION: This macro converts nanoseconds to seconds by dividing the input nanoseconds value (NS) by SDL_NS_PER_SECOND.  It's defined in SDL3/SDL_timer.h and is available since SDL 3.2.0.  The result can vary significantly depending on whether NS is an integer or a floating-point value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NS_TO_SECONDS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NS_TO_SECONDS(NS)   ((NS) / SDL_NS_PER_SECOND)\n```\n\n----------------------------------------\n\nTITLE: SDL_expf Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_expf function, which calculates the exponential of a single-precision floating-point number.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_expf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_expf(float x);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE macro in C, which represents the hint string used to control the HIDAPI driver for Nintendo GameCube controllers.  It is used to enable or disable the HIDAPI driver, and its default value is the same as SDL_HINT_JOYSTICK_HIDAPI.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE \"SDL_JOYSTICK_HIDAPI_GAMECUBE\"\n```\n\n----------------------------------------\n\nTITLE: Define Joystick Throttle Devices Hint in SDL3 (C)\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_THROTTLE_DEVICES macro, which is used to specify a list of USB VID/PID pairs for joystick throttle devices. The value is a comma-separated string of hexadecimal VID/PID pairs (e.g., \"0xAAAA/0xBBBB,0xCCCC/0xDDDD\") or \"@file\" to load the value from a file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_THROTTLE_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_THROTTLE_DEVICES \"SDL_JOYSTICK_THROTTLE_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_Vulkan_UnloadLibrary Syntax (C)\nDESCRIPTION: This snippet shows the syntax for the SDL_Vulkan_UnloadLibrary function in C. This function unloads the Vulkan library. It takes no arguments and returns void. It requires SDL 2.0.6 or later and SDL_vulkan.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Vulkan_UnloadLibrary.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_Vulkan_UnloadLibrary(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT macro, which is used as a hint to control the behavior of the RAWINPUT driver in SDL. Setting the hint to \"1\" enables correlation with XInput data for better gamepad support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT \"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_SensorUpdate Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_SensorUpdate function in C. It takes no arguments and returns void. It updates the current state of the open sensors, and needs to be called from the thread that initialized the sensor subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorUpdate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SensorUpdate(void);\n```\n\n----------------------------------------\n\nTITLE: Unregister Audio Effect Function - C\nDESCRIPTION: Unregisters a special effect function from a specified channel. This allows an effect to be stopped during playback. The `channel` parameter specifies the channel to unregister the effect from, and `f` is the effect callback to stop calling. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_UnregisterEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_UnregisterEffect(int channel, Mix_EffectFunc_t f);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_RESERVED2 in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_RESERVED2 macro as a bit flag. This macro is reserved for future use within the SDL haptic subsystem. It is defined as a unsigned integer left bit-shifted by 13.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_RESERVED2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_RESERVED2    (1u<<13)\n```\n\n----------------------------------------\n\nTITLE: Get Window Surface in SDL\nDESCRIPTION: Retrieves the SDL surface associated with the specified window. The function takes a pointer to an SDL_Window and returns a pointer to the SDL_Surface. If the surface doesn't exist or fails to be created, it returns NULL. The returned surface should not be freed by the user.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowSurface.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * SDL_GetWindowSurface(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_SimulateStreamPacketLoss Syntax in C\nDESCRIPTION: Enables simulated stream socket failures by introducing packet loss. The function takes a stream socket and a percentage of loss as input. Setting the percentage to zero disables the simulation, while higher percentages introduce delays and potential connection drops, simulating real-world network issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_SimulateStreamPacketLoss.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDLNet_SimulateStreamPacketLoss(SDLNet_StreamSocket *sock, int percent_loss);\n```\n\n----------------------------------------\n\nTITLE: Delete Text String - SDL_ttf\nDESCRIPTION: Deletes UTF-8 text from a text object. The `offset` parameter specifies the starting position to delete from, and `length` is the number of bytes to delete.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_105\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DeleteTextString(TTF_Text *text, int offset, int length);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE hint in C using a preprocessor macro. The macro expands to a string literal that represents the name of the hint, which is \"SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE\". This hint controls whether warping a hidden mouse cursor activates relative mouse mode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE \"SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE\"\n```\n\n----------------------------------------\n\nTITLE: Destroying an Audio Stream with SDL_DestroyAudioStream in C\nDESCRIPTION: This code snippet shows the syntax for using SDL_DestroyAudioStream to free an allocated audio stream, releasing all associated data and unbinding it from any bound audio device. The stream parameter specifies the audio stream to be destroyed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyAudioStream(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_X11EventHook Callback in C\nDESCRIPTION: Defines the SDL_X11EventHook callback function type. This callback allows an application to intercept and process X11 events before SDL handles them. The callback receives a user-defined data pointer and a pointer to the XEvent structure, and must return a boolean indicating whether to continue processing the event.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_X11EventHook.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef bool (SDLCALL *SDL_X11EventHook)(void *userdata, XEvent *xevent);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE macro.  It allows developers to control whether SDL sends SDL_EVENT_QUIT when the last window is closed.  The value is a string literal that can be used with SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE \"SDL_QUIT_ON_LAST_WINDOW_CLOSE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_LSX_INTRINSICS in C\nDESCRIPTION: This code snippet shows how the SDL_LSX_INTRINSICS macro is defined. It indicates that the compiler supports Loongarch LSX intrinsics. If this macro is defined, SDL includes `<lsxintrin.h>` automatically. This macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LSX_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_LSX_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_TRY_ACQUIRE Macro Definition in C\nDESCRIPTION: Defines the SDL_TRY_ACQUIRE macro, which wraps Clang's thread safety analysis annotations. It uses SDL_THREAD_ANNOTATION_ATTRIBUTE__ to attach the try_acquire_capability attribute to a function or code block. This macro indicates an attempt to acquire a mutex and helps with static analysis for thread safety.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TRY_ACQUIRE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TRY_ACQUIRE(x, y) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_capability(x, y))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FUNCTION Macro in C\nDESCRIPTION: This code snippet shows how the SDL_FUNCTION macro is defined in C using the preprocessor. It expands to the __FUNCTION__ macro provided by the C compiler or \"???\" if the compiler's way of reporting the function is unknown.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FUNCTION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_FUNCTION __FUNCTION__\n```\n\n----------------------------------------\n\nTITLE: Getting Whitespace Visibility on Wrap with SDL_ttf in C\nDESCRIPTION: This function returns whether whitespace is shown when wrapping a text object. It requires a `TTF_Text` pointer. Returns true if whitespace is visible, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_75\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_TextWrapWhitespaceVisible(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WAYLAND_MODE_SCALING in C\nDESCRIPTION: This C macro defines the SDL_HINT_VIDEO_WAYLAND_MODE_SCALING hint. This hint controls how SDL scales video modes that don't match the display's aspect ratio under Wayland. The hint should be set before creating a window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_WAYLAND_MODE_SCALING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_MODE_SCALING \"SDL_VIDEO_WAYLAND_MODE_SCALING\"\n```\n\n----------------------------------------\n\nTITLE: Redefining main() for SDL Applications in C\nDESCRIPTION: This code snippet demonstrates the recommended structure for the main() function in SDL applications. It includes the necessary SDL headers (SDL3/SDL.h and SDL3/SDL_main.h) and provides an empty main function body as a starting point. This structure ensures cross-platform compatibility by allowing SDL to handle platform-specific details.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/CategoryMain.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#include <SDL3/SDL.h>\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char *argv[])\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Set SoundFonts Paths SDL_mixer C\nDESCRIPTION: Sets the paths to SoundFont files used by MIDI backends.  Takes a const char* representing the path(s). Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_45\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_SetSoundFonts(const char *paths);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_TCP_AddSocket Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_TCP_AddSocket function, which adds a TCP socket to a socket set. It takes an SDLNet_SocketSet and a TCPsocket as input, returning the total number of sockets in the set or -1 if the set is full. This function is inline.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_AddSocket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE int SDLNet_TCP_AddSocket(SDLNet_SocketSet set, TCPsocket sock);\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseMotionEvent Structure Definition in C\nDESCRIPTION: Defines the structure SDL_MouseMotionEvent, which encapsulates data related to mouse motion events. It contains fields for event type, timestamp, window ID, mouse instance ID, button state, x and y coordinates, and relative motion in the x and y directions. The structure is used to provide detailed information about mouse movement within an SDL application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MouseMotionEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MouseMotionEvent\n{\n    Uint32 type;        /**< SDL_MOUSEMOTION */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;    /**< The window with mouse focus, if any */\n    Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */\n    Uint32 state;       /**< The current button state */\n    Sint32 x;           /**< X coordinate, relative to window */\n    Sint32 y;           /**< Y coordinate, relative to window */\n    Sint32 xrel;        /**< The relative motion in the X direction */\n    Sint32 yrel;        /**< The relative motion in the Y direction */\n} SDL_MouseMotionEvent;\n```\n\n----------------------------------------\n\nTITLE: Building SDL on UNIX using CMake\nDESCRIPTION: This snippet demonstrates how to build and install SDL on UNIX-like systems using CMake. It generates build files, builds the library, and installs it to /usr/local. The installation step requires superuser privileges.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build\ncmake --build build\nsudo cmake --install build --prefix /usr/local\n```\n\n----------------------------------------\n\nTITLE: Get HarfBuzz Version with SDL_ttf in C\nDESCRIPTION: This function retrieves the version of the HarfBuzz library used by SDL_ttf. It populates the provided integer pointers with the major, minor, and patch version numbers. If HarfBuzz is not available, the version reported is 0.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GetHarfBuzzVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_GetHarfBuzzVersion(int *major, int *minor, int *patch);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_X11_FORCE_EGL in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_X11_FORCE_EGL hint as a string literal. This hint is used to control whether SDL uses GLX or EGL on X11 systems. Setting this hint to \"1\" forces the use of EGL; setting it to \"0\" forces the use of GLX.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_X11_FORCE_EGL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_FORCE_EGL \"SDL_VIDEO_X11_FORCE_EGL\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RectsEqualFloat Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_RectsEqualFloat function. It takes two const SDL_FRect pointers as input and returns a boolean value indicating whether the rectangles are equal within SDL_FLT_EPSILON.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RectsEqualFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_RectsEqualFloat(const SDL_FRect *a, const SDL_FRect *b);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS in C\nDESCRIPTION: This C code snippet defines the SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS macro, which is used to enable or disable the generation of UI events from controller input on Apple TV. The hint takes values \"0\" (disabled) or \"1\" (enabled). This setting affects how the Apple TV responds to controller input, particularly regarding backgrounding the app when specific buttons are pressed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS \"SDL_APPLE_TV_CONTROLLER_UI_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_MemoryBarrierAcquire Macro Definition in C\nDESCRIPTION: This code snippet shows the definition of the SDL_MemoryBarrierAcquire macro. It maps to the SDL_MemoryBarrierAcquireFunction. This macro ensures memory synchronization, preventing the compiler and CPU from reordering memory operations across the barrier.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MemoryBarrierAcquire.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MemoryBarrierAcquire() SDL_MemoryBarrierAcquireFunction()\n```\n\n----------------------------------------\n\nTITLE: Define SDL_RESTRICT macro in C\nDESCRIPTION: This code snippet defines the SDL_RESTRICT macro, which expands to the __restrict__ keyword if supported by the compiler. If the compiler doesn't support __restrict__, the macro expands to nothing, effectively disabling the restrict keyword functionality. The macro is defined in the SDL_begin_code.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RESTRICT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RESTRICT __restrict__\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_CPUPauseInstruction in C\nDESCRIPTION: This code snippet shows the definition of the SDL_CPUPauseInstruction macro in C. It expands to a compiler- and architecture-specific instruction intended to pause the CPU briefly, which can be useful in busy-wait loops. This macro is defined in the SDL3/SDL_atomic.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CPUPauseInstruction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_CPUPauseInstruction() DoACPUPauseInACompilerAndArchitectureSpecificWay\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowShape Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_SetWindowShape function. It takes an SDL_Window pointer and an SDL_Surface pointer as input, representing the window and the shape, respectively.  It returns a boolean value indicating success or failure. This function requires the window to be created with the SDL_WINDOW_TRANSPARENT flag.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowShape.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowShape(SDL_Window *window, SDL_Surface *shape);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_TV_REMOTE_AS_JOYSTICK in C\nDESCRIPTION: This code defines the SDL_HINT_TV_REMOTE_AS_JOYSTICK macro, which is used as a hint to control whether Android and tvOS remotes are treated as joystick devices or generate keyboard events. It should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_TV_REMOTE_AS_JOYSTICK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_TV_REMOTE_AS_JOYSTICK \"SDL_TV_REMOTE_AS_JOYSTICK\"\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadGIFAnimation_RW Syntax in C\nDESCRIPTION: Defines the syntax for the IMG_LoadGIFAnimation_RW function, which loads a GIF animation directly from an SDL_RWops data stream. The function takes a pointer to an SDL_RWops structure as input and returns a pointer to an IMG_Animation structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadGIFAnimation_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadGIFAnimation_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_THREAD_PRIORITY_POLICY in C\nDESCRIPTION: Defines the SDL_HINT_THREAD_PRIORITY_POLICY macro, which is a string literal used to set a hint controlling the thread priority policy. This hint is used in conjunction with SDL_SetCurrentThreadPriority to override SDL's default behavior for setting thread priorities. It takes string values such as \"current\", \"other\", \"fifo\" and \"rr\" for pthreads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_THREAD_PRIORITY_POLICY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_THREAD_PRIORITY_POLICY \"SDL_THREAD_PRIORITY_POLICY\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_CYGWIN Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_CYGWIN macro. It's a preprocessor directive that is set to 1 when the code is compiled for the Cygwin platform. This allows for platform-specific code execution or compilation based on the presence of this macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_CYGWIN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_CYGWIN 1\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIs32 Macro Definition in C\nDESCRIPTION: Defines the SDL_PRIs32 macro as a string literal \"d\", which is the standard format specifier for signed decimal integers in C's printf family of functions. This macro simplifies the use of printf with Sint32 values in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIs32.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_PRIs32 \"d\"\n```\n\n----------------------------------------\n\nTITLE: SDL Initialization with Jump Table (C)\nDESCRIPTION: This code snippet shows how SDL_Init is implemented using a jump table. Instead of directly calling the initialization function, it calls a function pointer in the jump_table, which allows for dynamic overriding.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/dynapi.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_Init(SDL_InitFlags flags)\n{\n    return jump_table.SDL_Init(flags);\n}\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GPUTextureRegion Structure in C\nDESCRIPTION: Defines the SDL_GPUTextureRegion structure, used for specifying a rectangular region within a GPU texture for data transfer operations like uploading and downloading. It includes fields for the texture, mip level, layer, and the region's offset and dimensions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureRegion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUTextureRegion\n{\n    SDL_GPUTexture *texture;  /**< The texture used in the copy operation. */\n    Uint32 mip_level;         /**< The mip level index to transfer. */\n    Uint32 layer;             /**< The layer index to transfer. */\n    Uint32 x;                 /**< The left offset of the region. */\n    Uint32 y;                 /**< The top offset of the region. */\n    Uint32 z;                 /**< The front offset of the region. */\n    Uint32 w;                 /**< The width of the region. */\n    Uint32 h;                 /**< The height of the region. */\n    Uint32 d;                 /**< The depth of the region. */\n} SDL_GPUTextureRegion;\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIx64 Usage Example with SDL_Log\nDESCRIPTION: This snippet demonstrates how to use the SDL_PRIx64 macro with the SDL_Log function to print a Uint64 value.  The macro is inserted into the format string of SDL_Log to specify that the 'bottles' variable should be formatted as a lowercase hexadecimal string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIx64.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRIx64 \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TRY_ACQUIRE_SHARED Macro in C\nDESCRIPTION: This code snippet defines the SDL_TRY_ACQUIRE_SHARED macro. It takes two parameters, 'x' and 'y', and uses SDL_THREAD_ANNOTATION_ATTRIBUTE__ to apply the 'try_acquire_shared_capability' attribute. This helps Clang's thread safety analyzer to understand the code's threading behavior and identify potential issues. The macro is intended for use with shared mutexes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TRY_ACQUIRE_SHARED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TRY_ACQUIRE_SHARED(x, y) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_shared_capability(x, y))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_TIMER_RESOLUTION in C\nDESCRIPTION: This C code defines the SDL_HINT_TIMER_RESOLUTION macro as a string literal. This macro is used as a key when setting the timer resolution hint using SDL_SetHint. It affects the frequency of timer interrupts and therefore the precision of delays on Windows.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_TIMER_RESOLUTION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_TIMER_RESOLUTION \"SDL_TIMER_RESOLUTION\"\n```\n\n----------------------------------------\n\nTITLE: SDL_Log Usage with SDL_PRILL_PREFIX in C\nDESCRIPTION: Demonstrates how to use the SDL_PRILL_PREFIX macro with SDL_Log to print a long long integer value. The example shows the correct syntax for formatting and outputting a long long value through SDL's logging mechanism. It uses the SDL_PRILL_PREFIX macro in conjunction with the %d format specifier.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILL_PREFIX.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRILL_PREFIX \"d bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: Define Opaque Alpha Value in SDL3 (C)\nDESCRIPTION: Defines the SDL_ALPHA_OPAQUE macro to represent a fully opaque alpha value. This macro is used in SDL3 for pixel manipulation and transparency settings. It is defined as 255, which corresponds to the maximum value for an 8-bit alpha channel.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ALPHA_OPAQUE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ALPHA_OPAQUE 255\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PRILLd Macro in C\nDESCRIPTION: This code defines the SDL_PRILLd macro as a concatenation of the SDL_PRILL_PREFIX macro and the string \"d\". It provides a portable way to format `long long` integers using printf-style functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILLd.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRILLd SDL_PRILL_PREFIX \"d\"\n```\n\n----------------------------------------\n\nTITLE: IMG_GetError Macro Definition in C\nDESCRIPTION: Defines the IMG_GetError macro as an alias for SDL_GetError. This allows accessing the last SDL_image error message using a specific IMG_ prefixed function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_GetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define IMG_GetError    SDL_GetError\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_LEFTRIGHT Macro in C\nDESCRIPTION: Defines the SDL_HAPTIC_LEFTRIGHT macro, which represents a bit flag indicating that a haptic device supports direct control over high/low frequency motors.  This allows more nuanced haptic feedback.  It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_LEFTRIGHT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_LEFTRIGHT    (1u<<11)\n```\n\n----------------------------------------\n\nTITLE: Query Music Fading Status with Mix_FadingMusic in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_FadingMusic function, which is used to get the current fading status of the music stream. The function takes no arguments and returns a Mix_Fading enum value, which can be MIX_NO_FADING, MIX_FADING_OUT, or MIX_FADING_IN.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadingMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Fading Mix_FadingMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ASSERT_LEVEL in C\nDESCRIPTION: This code snippet demonstrates the definition of the SDL_ASSERT_LEVEL macro, which dictates the level of assertion checking performed by SDL. The value assigned determines which assertion macros are enabled or disabled. The value can be 0, 1, 2, or 3, each representing a different level of assertion aggressiveness.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ASSERT_LEVEL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ASSERT_LEVEL SomeNumberBasedOnVariousFactors\n```\n\n----------------------------------------\n\nTITLE: Define SDL_EventFilter in C\nDESCRIPTION: Defines the SDL_EventFilter type, a function pointer that takes a userdata pointer and an SDL_Event pointer as input, and returns an integer. This function is used for filtering events before they are added to the event queue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_EventFilter.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int (SDLCALL * SDL_EventFilter) (void *userdata, SDL_Event * event);\n```\n\n----------------------------------------\n\nTITLE: SDL_Vertex Structure Definition in C\nDESCRIPTION: Defines the SDL_Vertex structure, which represents a vertex in 2D space.  It includes the vertex position (SDL_FPoint), color (SDL_FColor), and normalized texture coordinates (SDL_FPoint). This structure is used in SDL3 rendering functions that require vertex data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Vertex.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_Vertex\n{\n    SDL_FPoint position;        /**< Vertex position, in SDL_Renderer coordinates  */\n    SDL_FColor color;           /**< Vertex color */\n    SDL_FPoint tex_coord;       /**< Normalized texture coordinates, if needed */\n} SDL_Vertex;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUCompareOp Enum in C\nDESCRIPTION: Defines the SDL_GPUCompareOp enumeration, specifying comparison operators. This enum is used in depth, stencil, and sampler operations. It includes values for 'never', 'less', 'equal', 'less or equal', 'greater', 'not equal', 'greater or equal', and 'always' comparisons.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUCompareOp.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_GPUCompareOp\n{\n    SDL_GPU_COMPAREOP_INVALID,\n    SDL_GPU_COMPAREOP_NEVER,             /**< The comparison always evaluates false. */\n    SDL_GPU_COMPAREOP_LESS,              /**< The comparison evaluates reference < test. */\n    SDL_GPU_COMPAREOP_EQUAL,             /**< The comparison evaluates reference == test. */\n    SDL_GPU_COMPAREOP_LESS_OR_EQUAL,     /**< The comparison evaluates reference <= test. */\n    SDL_GPU_COMPAREOP_GREATER,           /**< The comparison evaluates reference > test. */\n    SDL_GPU_COMPAREOP_NOT_EQUAL,         /**< The comparison evaluates reference != test. */\n    SDL_GPU_COMPAREOP_GREATER_OR_EQUAL,  /**< The comparison evalutes reference >= test. */\n    SDL_GPU_COMPAREOP_ALWAYS             /**< The comparison always evaluates true. */\n} SDL_GPUCompareOp;\n```\n\n----------------------------------------\n\nTITLE: Sint64 Typedef Definition\nDESCRIPTION: Defines the Sint64 type as a typedef for int64_t. This allows for a platform-independent way to represent a signed 64-bit integer. It depends on the availability of int64_t, typically provided by standard C libraries.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Sint64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int64_t Sint64;\n```\n\n----------------------------------------\n\nTITLE: Get Gamepad Button Label C\nDESCRIPTION: Retrieves the label of a button on a gamepad, given its type and the button index. Requires SDL3.2.0 or later. The function returns the corresponding SDL_GamepadButtonLabel enum value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetGamepadButtonLabelForType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);\n```\n\n----------------------------------------\n\nTITLE: Including SDL_main.h in iOS apps\nDESCRIPTION: This code shows the necessary includes for using SDL_main in iOS apps. Since SDL_main is implemented inline in SDL_main.h in SDL3, including this header provides a header-only SDL_main implementation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/ios.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#include \"SDL_main.h\"\n#include <SDL.h>\n#include <SDL_main.h>\n```\n\n----------------------------------------\n\nTITLE: TTF_GetGlyphImageForIndex Syntax in C\nDESCRIPTION: Retrieves the pixel image for a character index from a given TTF_Font. It takes the font, glyph index, and an optional pointer to store the image type as parameters and returns an SDL_Surface containing the glyph or NULL on failure. This is useful for text engine implementations using TTF_CopyOperation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetGlyphImageForIndex.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_GetGlyphImageForIndex(TTF_Font *font, Uint32 glyph_index, TTF_ImageType *image_type);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteU16LE Syntax in C\nDESCRIPTION: This snippet shows the function signature of SDL_WriteU16LE. It takes a pointer to an SDL_IOStream and a Uint16 value as input, and returns a boolean indicating success or failure of the write operation. The data is written in little-endian format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteU16LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteU16LE(SDL_IOStream *dst, Uint16 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_UnlockTexture Syntax in C\nDESCRIPTION: Unlocks a texture previously locked by SDL_LockTexture, uploading changes to video memory if needed. The texture pointer passed to the function should be a valid texture that has been previously locked. Note that SDL_LockTexture is intended to be write-only, and the texture contents might not be preserved.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnlockTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockTexture(SDL_Texture * texture);\n```\n\n----------------------------------------\n\nTITLE: Destroy Surface Text Engine C\nDESCRIPTION: This function destroys a text engine created for drawing text on SDL surfaces. It frees the memory allocated for the engine. Takes a TTF_TextEngine pointer as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_71\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroySurfaceTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RENDER_DRIVER Macro in C\nDESCRIPTION: This macro defines the SDL_HINT_RENDER_DRIVER constant, used to set the preferred render driver. The hint should be set before creating a renderer. It accepts a comma-separated list of driver names.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_DRIVER.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_RENDER_DRIVER \"SDL_RENDER_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Check Screen Keyboard Support\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasScreenKeyboardSupport function. It checks if the platform has screen keyboard support and returns a boolean value indicating whether it is supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasScreenKeyboardSupport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasScreenKeyboardSupport(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_FILE_DIALOG_DRIVER in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_FILE_DIALOG_DRIVER constant is defined. It is used to specify the file dialog driver to be used by SDL. The value is a string literal that is used as the key for setting the hint using SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_FILE_DIALOG_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_FILE_DIALOG_DRIVER \"SDL_FILE_DIALOG_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: SDL_STRINGIFY_ARG Definition C\nDESCRIPTION: Defines the SDL_STRINGIFY_ARG macro, which converts a given argument into a string literal. This macro is useful for creating other macros that need to handle strings, such as logging or debugging macros. It takes a single argument 'arg' and uses the preprocessor's stringification operator '#' to convert it into a string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_STRINGIFY_ARG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_STRINGIFY_ARG(arg)  #arg\n```\n\n----------------------------------------\n\nTITLE: Defining Mix_MusicType Enum in C\nDESCRIPTION: This code snippet defines the `Mix_MusicType` enum, which specifies the supported music file types within the SDL_mixer library. The enum includes values for no music, WAV, MOD, MID, OGG, MP3, FLAC, OPUS, WAVPACK, and GME. It helps identify the format of loaded music and is used internally by SDL_mixer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_MusicType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum Mix_MusicType {\n    MUS_NONE,\n    MUS_WAV,\n    MUS_MOD,\n    MUS_MID,\n    MUS_OGG,\n    MUS_MP3,\n    MUS_FLAC,\n    MUS_OPUS,\n    MUS_WAVPACK,\n    MUS_GME\n} Mix_MusicType;\n```\n\n----------------------------------------\n\nTITLE: Initializing HIDAPI in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_hid_init function. It takes no arguments and returns an integer, with 0 indicating success and -1 indicating an error. The HIDAPI library must be initialized before calling other HIDAPI functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_init.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_init(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MAC_BACKGROUND_APP Macro in C\nDESCRIPTION: This macro definition sets the string literal for the SDL_HINT_MAC_BACKGROUND_APP hint. The hint is used to configure whether the application is brought to the foreground or remains in the background when launched on macOS.  This hint must be set before calling SDL_Init().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MAC_BACKGROUND_APP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MAC_BACKGROUND_APP \"SDL_MAC_BACKGROUND_APP\"\n```\n\n----------------------------------------\n\nTITLE: Defining Steam Home LED Hint in SDL3 (C)\nDESCRIPTION: This code snippet shows how to define the `SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED` hint in SDL3 using a macro. It is used to control the Steam button LED when a Steam controller is connected. The value is a string literal that represents the name of the hint, which can be set to \"0\", \"1\", or a floating-point value between 0.0 and 1.0 to control the LED's state and brightness.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_STEAM_HOME_LED \"SDL_JOYSTICK_HIDAPI_STEAM_HOME_LED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_SurfaceFlags Constant Definitions C\nDESCRIPTION: Defines constants representing flags for an SDL_Surface. These flags indicate whether the surface uses preallocated pixel memory, needs to be locked to access pixels, is currently locked, or uses pixel memory allocated with SDL_aligned_alloc(). These flags provide information about the surface's state and memory management.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SurfaceFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SURFACE_PREALLOCATED    0x00000001u /**< Surface uses preallocated pixel memory */\n#define SDL_SURFACE_LOCK_NEEDED     0x00000002u /**< Surface needs to be locked to access pixels */\n#define SDL_SURFACE_LOCKED          0x00000004u /**< Surface is currently locked */\n#define SDL_SURFACE_SIMD_ALIGNED    0x00000008u /**< Surface uses pixel memory allocated with SDL_aligned_alloc() */\n```\n\n----------------------------------------\n\nTITLE: Specialized Image Loading Functions in SDL3_image\nDESCRIPTION: Functions to load images with specific features or from specific data structures. Includes loading a sized SVG image and loading an XPM image from an array.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadSizedSVG_IO(SDL_IOStream *src, int width, int height);                                       // Load an SVG image, scaled to a specific size.\nSDL_Surface * IMG_ReadXPMFromArray(char **xpm);                                                                    // Load an XPM image from a memory array.\nSDL_Surface * IMG_ReadXPMFromArrayToRGB888(char **xpm);                                                            // Load an XPM image from a memory array.\n```\n\n----------------------------------------\n\nTITLE: Get Touch Fingers - SDL3 - C\nDESCRIPTION: Retrieves a list of active fingers for a given touch device using SDL_GetTouchFingers. The function takes a SDL_TouchID as input, representing the ID of the touch device, and a pointer to an integer to store the number of fingers returned. The function returns a NULL-terminated array of SDL_Finger pointers, which should be freed with SDL_free when no longer needed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTouchFingers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Finger ** SDL_GetTouchFingers(SDL_TouchID touchID, int *count);\n```\n\n----------------------------------------\n\nTITLE: Installing Package (Windows)\nDESCRIPTION: This command installs the generated .msixvc package on the system. It deploys the application to the start menu, allowing the user to launch it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_8\n\nLANGUAGE: Batchfile\nCODE:\n```\nwdapp install PACKAGENAME.msixvc\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Platform Type in C\nDESCRIPTION: Retrieves the platform-dependent type of an SDL_Sensor object.  The function requires a valid SDL_Sensor pointer as input. It returns an integer representing the platform-specific sensor type or -1 if the sensor pointer is NULL.  This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSensorNonPortableType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetSensorNonPortableType(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: Emscripten Main Loop Implementation in C\nDESCRIPTION: This code snippet demonstrates how to adapt a traditional game loop to work with Emscripten's main loop system. It replaces the blocking `while` loop with `emscripten_set_main_loop`, which allows the browser to handle other tasks. The code also includes conditional compilation for Emscripten and non-Emscripten builds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/emscripten.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid main(void)\n{\n    initialize_the_game();\n    while (game_is_still_running) {\n        check_for_new_input();\n        think_about_stuff();\n        draw_the_next_frame();\n    }\n    deinitialize_the_game();\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_HasNEON Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_HasNEON function in C. The function takes no arguments and returns an SDL_bool indicating whether the CPU has NEON features.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasNEON.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasNEON(void);\n```\n\n----------------------------------------\n\nTITLE: Defining Max and Min Sint64 Constants in C\nDESCRIPTION: Defines SDL_MAX_SINT64 and SDL_MIN_SINT64, representing the maximum and minimum values for the Sint64 type. These are defined using the SDL_SINT64_C macro to ensure cross-platform compatibility. This allows easy access to the boundaries of the data type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Sint64.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAX_SINT64  SDL_SINT64_C(0x7FFFFFFFFFFFFFFF)   /* 9223372036854775807 */\n#define SDL_MIN_SINT64  ~SDL_SINT64_C(0x7FFFFFFFFFFFFFFF)  /* -9223372036854775808 */\n```\n\n----------------------------------------\n\nTITLE: SDL_HasIntersectionF Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_HasIntersectionF function in C. It takes two pointers to SDL_FRect structures as input (A and B) and returns an SDL_bool value indicating whether the rectangles intersect. If either input pointer is NULL, the function returns SDL_FALSE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasIntersectionF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasIntersectionF(const SDL_FRect * A,\n                             const SDL_FRect * B);\n```\n\n----------------------------------------\n\nTITLE: CMake iOS Simulator Build with SDL Tests (.app bundles)\nDESCRIPTION: This CMake command configures SDL3 for the iOS Simulator, using the latest installed SDK, and builds SDL test apps as .app bundles. It sets the SDL_TESTS option to 1, the target operating system to iOS, the SDK root to iphonesimulator, specifies the x86_64 architecture, and sets the minimum iOS deployment target to 9.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DSDL_TESTS=1 -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Mix_SetSynchroValue Syntax in C\nDESCRIPTION: This snippet shows the syntax of the Mix_SetSynchroValue function in C. The function takes an integer as input but ignores it, and it always returns -1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetSynchroValue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_SetSynchroValue(int value);\n```\n\n----------------------------------------\n\nTITLE: SDL_PT_GUARDED_BY Macro Definition in C\nDESCRIPTION: This code snippet defines the SDL_PT_GUARDED_BY macro, which is used for thread safety analysis with Clang. It wraps the `SDL_THREAD_ANNOTATION_ATTRIBUTE__` macro with the `pt_guarded_by(x)` attribute, indicating that a variable is protected by the mutex `x`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PT_GUARDED_BY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PT_GUARDED_BY(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(pt_guarded_by(x))\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_TVOS in C\nDESCRIPTION: This code snippet shows how the SDL_PLATFORM_TVOS macro is defined in the SDL3 header file. When compiling for tvOS, this macro is set to 1, allowing conditional compilation of tvOS-specific code. The macro is defined in the SDL_platform_defines.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_TVOS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_TVOS 1\n```\n\n----------------------------------------\n\nTITLE: Pause Music Playback Mix_PauseMusic C\nDESCRIPTION: Pauses the music stream. This function temporarily stops the currently playing music, allowing it to be resumed later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_PauseMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_mixer Fading Types Enum in C\nDESCRIPTION: Defines the `Mix_Fading` enum which represents the different fading types supported by SDL_mixer. The enum has three possible values: `MIX_NO_FADING`, `MIX_FADING_OUT`, and `MIX_FADING_IN`. It is used to control audio fading during playback. The code is found in the SDL_mixer.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Fading.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum Mix_Fading {\n    MIX_NO_FADING,\n    MIX_FADING_OUT,\n    MIX_FADING_IN\n} Mix_Fading;\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioDeviceEvent Structure Definition (C)\nDESCRIPTION: Defines the structure SDL_AudioDeviceEvent, which is used to represent events related to audio devices in SDL3.  The structure includes the event type, a timestamp, the audio device ID, and a boolean indicating whether the device is a recording device. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AudioDeviceEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_AudioDeviceEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_AUDIO_DEVICE_ADDED, or SDL_EVENT_AUDIO_DEVICE_REMOVED, or SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_AudioDeviceID which;       /**< SDL_AudioDeviceID for the device being added or removed or changing */\n    bool recording; /**< false if a playback device, true if a recording device. */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_AudioDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIx64 Macro Definition\nDESCRIPTION: This snippet shows the definition of the SDL_PRIx64 macro. It's a string literal that expands to \"llx\", which is used as a format specifier in printf-style functions for printing unsigned long long integers in lowercase hexadecimal format. It is defined in the SDL3/SDL_stdinc.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIx64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRIx64 \"llx\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED macro, which is used as a key for SDL hints related to Wii controller player LED behavior. This allows developers to configure if the player LEDs should be enabled or disabled. The default value is \"1\", meaning LEDs are enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RemoveSurfaceAlternateImages Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_RemoveSurfaceAlternateImages function in C. It takes a pointer to an SDL_Surface as input and removes all alternate images associated with it. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RemoveSurfaceAlternateImages.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RemoveSurfaceAlternateImages(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: Query fading status of a channel SDL_mixer C\nDESCRIPTION: This snippet demonstrates the syntax for calling the Mix_FadingChannel function to query the fading status of a specified audio channel in SDL_mixer. The function takes an integer representing the channel number as input and returns a Mix_Fading enum value representing the current fading status of the channel. Available since SDL_mixer 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_FadingChannel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Fading Mix_FadingChannel(int which);\n```\n\n----------------------------------------\n\nTITLE: Define MIX_EFFECTSMAXSPEED Macro in C\nDESCRIPTION: This C macro defines the MIX_EFFECTSMAXSPEED environment variable, which is used to instruct SDL_mixer to favor speed over quality when applying certain mixing effects. It is defined in the SDL3_mixer/SDL_mixer.h header file and can be used to optimize performance in resource-constrained environments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/MIX_EFFECTSMAXSPEED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define MIX_EFFECTSMAXSPEED  \"MIX_EFFECTSMAXSPEED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadS8 Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadS8 function, which reads a signed 8-bit integer from an SDL_IOStream. It takes an SDL_IOStream pointer and a pointer to a Sint8 as input. The function returns a boolean indicating success or failure. Requires the SDL3/SDL_iostream.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadS8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadS8(SDL_IOStream *src, Sint8 *value);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUBufferCreateInfo Structure Definition in C\nDESCRIPTION: Defines the structure SDL_GPUBufferCreateInfo for specifying the parameters of a GPU buffer.  The 'usage' member determines how the buffer is intended to be used. The 'size' member specifies the buffer's size in bytes. The 'props' member is used for extensions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBufferCreateInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUBufferCreateInfo\n{\n    SDL_GPUBufferUsageFlags usage;  /**< How the buffer is intended to be used by the client. */\n    Uint32 size;                    /**< The size in bytes of the buffer. */\n\n    SDL_PropertiesID props;         /**< A properties ID for extensions. Should be 0 if no extensions are needed. */\n} SDL_GPUBufferCreateInfo;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MOUSE_RELATIVE_MODE_WARP in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MOUSE_RELATIVE_MODE_WARP macro, which represents the name of the hint used to control relative mouse mode warping. The hint can be set to \"0\" for raw input or \"1\" for mouse warping. It is defined in the SDL_hints.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_RELATIVE_MODE_WARP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_MODE_WARP    \"SDL_MOUSE_RELATIVE_MODE_WARP\"\n```\n\n----------------------------------------\n\nTITLE: SDL_NS_TO_MS Macro Definition in C\nDESCRIPTION: Defines the SDL_NS_TO_MS macro, which converts nanoseconds to milliseconds by dividing the input NS by SDL_NS_PER_MS.  The input NS represents the number of nanoseconds to be converted. The result is the equivalent time in milliseconds. The results may differ dramatically depending on the input type (integer vs. floating point).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NS_TO_MS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NS_TO_MS(NS)        ((NS) / SDL_NS_PER_MS)\n```\n\n----------------------------------------\n\nTITLE: Destroy Renderer Text Engine C\nDESCRIPTION: This function destroys a text engine created for drawing text on an SDL renderer. It takes a TTF_TextEngine pointer as input and frees the associated resources.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_75\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroyRendererTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE macro as a string literal. This macro is used to set the hint that controls whether relative mouse motion is scaled using the system's mouse acceleration curve. The hint accepts values '0' (unscaled) and '1' (scaled).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE \"SDL_MOUSE_RELATIVE_SYSTEM_SCALE\"\n```\n\n----------------------------------------\n\nTITLE: Get Font Style Name - SDL_ttf - C\nDESCRIPTION: This function retrieves the style name of a TTF font. It takes a pointer to a TTF_Font structure as input and returns a const char* representing the font's style name. The returned string is managed internally by SDL_ttf and should not be modified or freed by the caller. The string becomes invalid when the font is closed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_FontFaceStyleName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * TTF_FontFaceStyleName(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Using SDL_OUT_Z_BYTECAP Macro in C\nDESCRIPTION: This example demonstrates how to use the SDL_OUT_Z_BYTECAP macro to annotate the destination buffer in a `strcpy`-like function.  The annotation indicates that `dst` should have a capacity of `bufsize` bytes and that a zero-terminated string is written to it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OUT_Z_BYTECAP.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nchar *strcpy(SDL_OUT_Z_BYTECAP(bufsize) char *dst, const char *src, size_t bufsize);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickSetVirtualAxis Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_JoystickSetVirtualAxis function in C. It takes a pointer to an SDL_Joystick, the axis index, and the Sint16 value to set the axis to.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickSetVirtualAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickSetVirtualAxis(SDL_Joystick *joystick, int axis, Sint16 value);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_WINAPI_FAMILY_PHONE Macro in C\nDESCRIPTION: This macro definition checks if the compilation target is Windows Phone by comparing WINAPI_FAMILY with WINAPI_FAMILY_PHONE_APP. If they are equal, SDL_WINAPI_FAMILY_PHONE is defined as 1; otherwise, it is likely defined as 0 or remains undefined. This check enables platform-specific conditional compilation for Windows Phone targets.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINAPI_FAMILY_PHONE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINAPI_FAMILY_PHONE (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_iOSAnimationCallback in C\nDESCRIPTION: This code snippet defines the SDL_iOSAnimationCallback, which is a function pointer type used as an Apple iOS animation callback. The callback receives a void pointer as userdata.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iOSAnimationCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_iOSAnimationCallback)(void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_Log Usage with SDL_PRIs32 in C\nDESCRIPTION: Demonstrates how to use the SDL_PRIs32 macro with the SDL_Log function to print an Sint32 value. The SDL_PRIs32 macro ensures the correct format specifier is used for the Sint32 value when logging messages.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIs32.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRIs32 \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: Define SDL Window Activation Hint in C\nDESCRIPTION: Defines the SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN macro, which is used to control whether a window is activated when SDL_ShowWindow is called.  Setting this hint to \"1\" prevents the window from being activated when shown. A value of \"0\" will allow the window to be activated when it is shown, which is the default behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOW_NO_ACTIVATION_WHEN_SHOWN    \"SDL_WINDOW_NO_ACTIVATION_WHEN_SHOWN\"\n```\n\n----------------------------------------\n\nTITLE: SDL_Semaphore Struct Definition in C\nDESCRIPTION: This code snippet defines the `SDL_Semaphore` struct. It's an opaque type, so its internal structure isn't directly accessible. This structure is available since SDL 3.2.0 and is used for managing access to resources between threads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Semaphore.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_Semaphore SDL_Semaphore;\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_send_feature_report Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_hid_send_feature_report function in C. It takes a device handle, a data buffer, and the length of the data as input, and returns the number of bytes written or -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_send_feature_report.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_send_feature_report(SDL_hid_device *dev, const unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: SDL_MessageBoxColorScheme Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_MessageBoxColorScheme` which contains an array of `SDL_MessageBoxColor` to define the color scheme used for message boxes. This struct is part of the SDL3 library and available since version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxColorScheme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MessageBoxColorScheme\n{\n    SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_COUNT];\n} SDL_MessageBoxColorScheme;\n```\n\n----------------------------------------\n\nTITLE: Unlock Joysticks API in SDL3 (C)\nDESCRIPTION: Unlocks the joystick API for atomic access. This function is available since SDL 3.2.0 and is defined in SDL3/SDL_joystick.h. No parameters are required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnlockJoysticks.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnlockJoysticks(void);\n```\n\n----------------------------------------\n\nTITLE: ICO Image Data Detection in SDL_image (C)\nDESCRIPTION: Detects if the provided SDL_RWops contains ICO image data. It takes a seekable/readable SDL_RWops as input. Returns a non-zero value if the data is ICO format; otherwise, returns zero. This function attempts to reset the RWops position after the check.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isICO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isICO(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Using SDL_PRILLd with SDL_Log in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_PRILLd macro with the SDL_Log function to print a `long long` integer value. It showcases the correct syntax for using the macro as a format specifier.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILLd.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRILLd \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadICO_RW Function Signature in C\nDESCRIPTION: Defines the function signature for IMG_LoadICO_RW, which loads an ICO image from an SDL_RWops stream. It takes a pointer to an SDL_RWops structure as input, which represents the data source, and returns a pointer to an SDL_Surface structure, or NULL if an error occurred. The function skips SDL_image's file format detection routines.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadICO_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadICO_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Define TTF_HINTING_NORMAL Macro in C\nDESCRIPTION: Defines the TTF_HINTING_NORMAL macro to represent a specific hinting mode in SDL_ttf. This macro is used to specify normal hinting when rendering text. No dependencies outside of SDL_ttf headers are required. The value is set to 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_HINTING_NORMAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_HINTING_NORMAL          0\n```\n\n----------------------------------------\n\nTITLE: Makefile rule for installing a macOS application bundle\nDESCRIPTION: This Makefile snippet demonstrates how to install a macOS application bundle to the Applications directory. It removes any existing bundle and copies the newly created bundle to the specified installation directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/macos.md#_snippet_6\n\nLANGUAGE: make\nCODE:\n```\ninstall-exec-hook: APP_NAME_bundle\n\trm -rf $(DESTDIR)$(prefix)/Applications/APP_NAME.app\n\tmkdir -p $(DESTDIR)$(prefix)/Applications/\n\tcp -r $< /$(DESTDIR)$(prefix)Applications/\n```\n\n----------------------------------------\n\nTITLE: Defining Mix_EffectDone_t Callback in C\nDESCRIPTION: Defines the Mix_EffectDone_t callback function, which is part of the SDL_mixer library. This callback is triggered when an audio channel completes its playback.  The callback receives the channel number (chan) and user data (udata) as parameters. This callback is invoked upon normal completion, halt, reallocation, or callback unregistration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_EffectDone_t.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *Mix_EffectDone_t)(int chan, void *udata);\n```\n\n----------------------------------------\n\nTITLE: SDL_MUTEX_TIMEDOUT Macro Definition in C\nDESCRIPTION: Defines the SDL_MUTEX_TIMEDOUT macro to the value 1. This value is returned by SDL synchronization functions if a timeout occurs. It indicates that the lock acquisition or other synchronization operation timed out before completion. The macro is defined in the SDL_mutex.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MUTEX_TIMEDOUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MUTEX_TIMEDOUT  1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PenID in C\nDESCRIPTION: Defines a new type `SDL_PenID` as an alias for `Uint32`. This type represents a unique identifier for a pen input device, allowing SDL to distinguish between multiple pens.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_PenID;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_FREEBSD Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_FREEBSD preprocessor macro. It is used to check if the code is being compiled for the FreeBSD platform. This macro is defined in SDL3/SDL_platform_defines.h and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_FREEBSD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_FREEBSD 1\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUBlendOp enum in C\nDESCRIPTION: This code snippet defines the SDL_GPUBlendOp enumeration, which specifies the blend operation to be used when pixels in a render target are blended with existing pixels in the texture. It includes blend operations such as addition, subtraction, reverse subtraction, min, and max.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBlendOp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUBlendOp\n{\n    SDL_GPU_BLENDOP_INVALID,\n    SDL_GPU_BLENDOP_ADD,               /**< (source * source_factor) + (destination * destination_factor) */\n    SDL_GPU_BLENDOP_SUBTRACT,          /**< (source * source_factor) - (destination * destination_factor) */\n    SDL_GPU_BLENDOP_REVERSE_SUBTRACT,  /**< (destination * destination_factor) - (source * source_factor) */\n    SDL_GPU_BLENDOP_MIN,               /**< min(source, destination) */\n    SDL_GPU_BLENDOP_MAX                /**< max(source, destination) */\n} SDL_GPUBlendOp;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_TOUCH_MOUSE_EVENTS in C\nDESCRIPTION: This C macro defines the hint key SDL_HINT_TOUCH_MOUSE_EVENTS. This hint controls whether touch events generate synthetic mouse events. It can be set to \"0\" or \"1\" to disable or enable mouse events from touch, respectively.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_TOUCH_MOUSE_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_TOUCH_MOUSE_EVENTS    \"SDL_TOUCH_MOUSE_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: Mix_GetChunkDecoder Syntax (C)\nDESCRIPTION: Defines the syntax for the Mix_GetChunkDecoder function in C. It takes an integer index as input and returns a const char pointer, which is the name of the chunk decoder. If the index is invalid, it returns NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetChunkDecoder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * Mix_GetChunkDecoder(int index);\n```\n\n----------------------------------------\n\nTITLE: Copy NDK to GCC toolchain (arm architecture)\nDESCRIPTION: Copies the Android NDK to a traditional GCC toolchain for ARM architecture. The platform is set to android-14, and the installation directory is specified as /usr/src/ndk-standalone-14-arm. This sets up the base toolchain for cross-compiling to Android.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n/usr/src/android-ndk-r8c/build/tools/make-standalone-toolchain.sh \\\n  --platform=android-14 --install-dir=/usr/src/ndk-standalone-14-arm --arch=arm\n```\n\n----------------------------------------\n\nTITLE: SDL_REVISION Macro Definition in C\nDESCRIPTION: Defines the SDL_REVISION macro as a string literal. The actual string value is determined during the SDL build process, often based on revision control system information. This string is intended for debugging purposes only.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_REVISION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_REVISION \"Some arbitrary string decided at SDL build time\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RecordGesture Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RecordGesture function in C. This function is used to initiate the recording of a gesture on a specific touch device or all available touch devices. The function takes an SDL_TouchID as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RecordGesture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RecordGesture(SDL_TouchID touchId);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickGUID Definition in C\nDESCRIPTION: Defines SDL_JoystickGUID as a typedef for SDL_GUID. This provides a type alias for representing the unique identifier of a joystick device in SDL. The definition is found in SDL_joystick.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGUID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_GUID SDL_JoystickGUID;\n```\n\n----------------------------------------\n\nTITLE: Loading CUR Image from IO Stream in C\nDESCRIPTION: Loads a CUR image directly from an SDL_IOStream. This function bypasses SDL_image's file format detection. It requires an SDL_IOStream as input and returns an SDL_Surface or NULL on failure. Available since SDL_image 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadCUR_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadCUR_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Get Font Kerning Status in SDL_ttf\nDESCRIPTION: This function checks if kerning is enabled for a given font. It takes a pointer to a TTF_Font structure as input. It returns a non-zero integer if kerning is enabled and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_GetFontKerning.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontKerning(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_LG4FF in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_LG4FF macro, which is used as a hint to control the use of the HIDAPI driver for Logitech wheels. The macro is a string literal. It depends on SDL3/SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_LG4FF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_LG4FF \"SDL_JOYSTICK_HIDAPI_LG4FF\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadBE16 Syntax\nDESCRIPTION: Defines the syntax for the SDL_ReadBE16 function in C. It takes a pointer to an SDL_RWops stream as input and returns a Uint16 value, representing 16 bits of data read from the stream in the native byte order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ReadBE16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_ReadBE16(SDL_RWops * src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL Soft and Call Keycodes in C\nDESCRIPTION: This code defines keycodes for soft keys (left and right) and call-related keys (call and end call) using preprocessor macros in SDL. These macros define the keycodes associated with specific phone/device related actions. They rely on the `SDL_SCANCODE_TO_KEYCODE` macro to convert scancodes to keycodes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Keycode.md#_snippet_6\n\nLANGUAGE: C\nCODE:\n```\n#define SDLK_SOFTLEFT               0x4000011fu /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTLEFT) */\n#define SDLK_SOFTRIGHT              0x40000120u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SOFTRIGHT) */\n#define SDLK_CALL                   0x40000121u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALL) */\n#define SDLK_ENDCALL                0x40000122u /**< SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ENDCALL) */\n```\n\n----------------------------------------\n\nTITLE: Define SDL_SSE4_2_INTRINSICS in C\nDESCRIPTION: This macro definition indicates that the compiler supports Intel SSE4.2 intrinsics. When this macro is defined, SDL will have already included the `<nmmintrin.h>` header file, which provides access to the SSE4.2 intrinsics functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SSE4_2_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SSE4_2_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_SetScancodeName Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetScancodeName function, which sets a human-readable name for a given scancode. It takes an SDL_Scancode and a const char* as input. The provided string for the name should remain valid as long as SDL is being used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetScancodeName.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetScancodeName(SDL_Scancode scancode, const char *name);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ACCELEROMETER_AS_JOYSTICK in C\nDESCRIPTION: Defines the SDL_HINT_ACCELEROMETER_AS_JOYSTICK macro. This macro is used as a hint to control whether the built-in accelerometer on Android and iOS devices should be listed as a joystick device. The hint accepts values \"0\" or \"1\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ACCELEROMETER_AS_JOYSTICK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ACCELEROMETER_AS_JOYSTICK \"SDL_ACCELEROMETER_AS_JOYSTICK\"\n```\n\n----------------------------------------\n\nTITLE: Insecure File Access Example in C\nDESCRIPTION: This code demonstrates common pitfalls in filesystem access, such as assuming a global filesystem, writeable content paths, and constant accessibility. This approach is not portable and can lead to failures or crashes on various platforms.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/CategoryStorage.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid ReadGameData(void)\n{\n    extern char** fileNames;\n    extern size_t numFiles;\n    for (size_t i = 0; i < numFiles; i += 1) {\n        FILE *data = fopen(fileNames[i], \"rwb\");\n        if (data == NULL) {\n            // Something bad happened!\n        } else {\n            // A bunch of stuff happens here\n            fclose(data);\n        }\n    }\n}\n\nvoid ReadSave(void)\n{\n    FILE *save = fopen(\"saves/save0.sav\", \"rb\");\n    if (save == NULL) {\n        // Something bad happened!\n    } else {\n        // A bunch of stuff happens here\n        fclose(save);\n    }\n}\n\nvoid WriteSave(void)\n{\n    FILE *save = fopen(\"saves/save0.sav\", \"wb\");\n    if (save == NULL) {\n        // Something bad happened!\n    } else {\n        // A bunch of stuff happens here\n        fclose(save);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Default Log Output Function - SDL3 - C\nDESCRIPTION: Retrieves the default log output function in SDL3. This function requires no parameters and returns a SDL_LogOutputFunction callback. It is safe to call this function from any thread. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetDefaultLogOutputFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_LogOutputFunction SDL_GetDefaultLogOutputFunction(void);\n```\n\n----------------------------------------\n\nTITLE: SSE2 Function Targeting Example (C)\nDESCRIPTION: Illustrates how to use the SDL_TARGETING macro with SSE2 intrinsics. The code conditionally defines a function `DoSomethingWithSSE2` that uses SSE2 instructions, and then conditionally calls this function based on whether the system supports SSE2 at runtime, as determined by `SDL_HasSSE2()`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TARGETING.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#ifdef SDL_SSE2_INTRINSICS\nstatic void SDL_TARGETING(\"sse2\") DoSomethingWithSSE2(char *x) {\n   ...use SSE2 intrinsic functions, etc...\n}\n#endif\n\n// later...\n#ifdef SDL_SSE2_INTRINSICS\nif (SDL_HasSSE2()) {\n    DoSomethingWithSSE2(str);\n}\n#endif\n```\n\n----------------------------------------\n\nTITLE: SDL_PIXELLAYOUT Macro Definition in C\nDESCRIPTION: This macro retrieves the layout information from an SDL_PixelFormat. It extracts the layout value by bitwise shifting and masking the format parameter. The format parameter is an SDL_PixelFormat to check, and the return value is the layout of the format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PIXELLAYOUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PIXELLAYOUT(format)  (((format) >> 16) & 0x0F)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling all test APKs (CMake)\nDESCRIPTION: This command uninstalls all installed SDL test APKs from the Android device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_26\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target uninstall-sdl-test-apks\n```\n\n----------------------------------------\n\nTITLE: Defining Joystick HIDAPI Wii Player LED Hint in SDL3\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED macro, which is used as a key for controlling the player LEDs on Wii controllers connected via HIDAPI in SDL3. Setting this hint to \"0\" disables the LEDs, while \"1\" enables them.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED\"\n```\n\n----------------------------------------\n\nTITLE: Get Number of Allocations SDL3 (C)\nDESCRIPTION: Retrieves the number of outstanding (unfreed) allocations using SDL_GetNumAllocations. This function is available since SDL 3.2.0 and is thread-safe. It returns the number of allocations or -1 if allocation counting is disabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumAllocations.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumAllocations(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_TTF_MAJOR_VERSION in C\nDESCRIPTION: This code snippet defines the SDL_TTF_MAJOR_VERSION macro, which represents the major version number of the SDL_ttf library. The macro is defined as 2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/SDL_TTF_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TTF_MAJOR_VERSION   2\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontDirection Function\nDESCRIPTION: Sets the direction to be used for text shaping by a font. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontDirection(TTF_Font *font, TTF_Direction direction);                                                                        // Set the direction to be used for text shaping by a font.\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Type in C\nDESCRIPTION: Retrieves the SDL_JoystickType of a specified joystick. Requires an opened joystick obtained from SDL_JoystickOpen as input. Returns an SDL_JoystickType enumeration value representing the type of the joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetType.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_JoystickType SDL_JoystickGetType(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpperBlit Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_UpperBlit function.  It takes two SDL_Surface pointers (source and destination) and two SDL_Rect pointers (source and destination rectangles) as input.  The function returns an integer, likely indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UpperBlit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UpperBlit\n    (SDL_Surface * src, const SDL_Rect * srcrect,\n     SDL_Surface * dst, SDL_Rect * dstrect);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED in C\nDESCRIPTION: This snippet shows the definition of the SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED hint as a string literal. This hint allows the user to specify a list of joystick devices (identified by their USB VID/PID) that should *not* be considered flightsticks, overriding other related hints and built-in lists. The hint can be set at any time.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED \"SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: Clear wrap property\nDESCRIPTION: This command uses `adb shell setprop` to clear the wrap property, effectively disabling the wrapper script used for launching the application. This is done after debugging or instrumentation is complete.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nadb shell setprop wrap.org.libsdl.app \"\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_OUT_CAP Macro in C\nDESCRIPTION: Defines the SDL_OUT_CAP macro, which is used to annotate function parameters to specify the capacity of an output buffer. This allows static analysis tools to check for potential buffer overflows. The actual definition depends on the compiler; it may be a no-op.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OUT_CAP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_OUT_CAP(x) _Out_cap_(x)\n```\n\n----------------------------------------\n\nTITLE: SDL_GetYUVConversionModeForResolution Syntax (C)\nDESCRIPTION: This snippet shows the syntax for the SDL_GetYUVConversionModeForResolution function. It takes the width and height of a surface as input and returns an SDL_YUV_CONVERSION_MODE enum value, which indicates the appropriate YUV conversion mode for the given resolution when automatic conversion is enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetYUVConversionModeForResolution.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);\n```\n\n----------------------------------------\n\nTITLE: SDL_OnApplicationDidChangeStatusBarOrientation Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for calling the `SDL_OnApplicationDidChangeStatusBarOrientation` function. It takes no arguments and has a void return type. It is used in iOS applications to report changes in the status bar orientation to SDL, triggering SDL events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OnApplicationDidChangeStatusBarOrientation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_OnApplicationDidChangeStatusBarOrientation(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MUTEX_MAXWAIT in C\nDESCRIPTION: This code defines the SDL_MUTEX_MAXWAIT macro, which is used as a timeout value that indicates to wait indefinitely for a mutex.  It is a bitwise negation of a Uint32 value, effectively setting all bits to 1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MUTEX_MAXWAIT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MUTEX_MAXWAIT   (~(Uint32)0)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUColorTargetDescription in C\nDESCRIPTION: Defines the structure `SDL_GPUColorTargetDescription` in C. This structure specifies the parameters for a color target used in a graphics pipeline. It contains the pixel format (`SDL_GPUTextureFormat`) and the blend state (`SDL_GPUColorTargetBlendState`).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUColorTargetDescription.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUColorTargetDescription\n{\n    SDL_GPUTextureFormat format;               /**< The pixel format of the texture to be used as a color target. */\n    SDL_GPUColorTargetBlendState blend_state;  /**< The blend state to be used for the color target. */\n} SDL_GPUColorTargetDescription;\n```\n\n----------------------------------------\n\nTITLE: Get Tray Entry Checkbox State in C\nDESCRIPTION: This C code snippet demonstrates how to use SDL_GetTrayEntryChecked to determine if a specified tray entry (created as a checkbox) is currently checked. The function returns 'true' if the entry is checked and 'false' otherwise.  It is assumed the entry was created with the SDL_TRAYENTRY_CHECKBOX flag.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetTrayEntryChecked.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetTrayEntryChecked(SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: Loading XCF Image from RWops - SDL_image (C)\nDESCRIPTION: Loads an XCF image from an SDL_RWops stream. This function is part of the SDL_image library and is used to load XCF image data directly, bypassing file format detection.  The function takes an SDL_RWops pointer as input and returns an SDL_Surface, or NULL on failure. Requires SDL_image 2.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadXCF_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadXCF_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK macro as a string literal. This macro is used as the key when setting the hint via SDL_SetHint. The hint controls whether the HIDAPI driver for the Steam Deck builtin controller is used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK \"SDL_JOYSTICK_HIDAPI_STEAMDECK\"\n```\n\n----------------------------------------\n\nTITLE: SDL_MemoryBarrierReleaseFunction Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_MemoryBarrierReleaseFunction in C. This function inserts a memory release barrier. It's a function version, useful for scripting languages or cases where SDL does heavy lifting internally.  Consider using the macro version `SDL_MemoryBarrierRelease` for better efficiency in C/C++.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MemoryBarrierReleaseFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_MemoryBarrierReleaseFunction(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLERTYPE in SDL2\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLERTYPE macro in C, used to specify a hint for overriding the automatic game controller type detection. The hint expects a comma-separated string of VID/PID=type entries, where VID and PID are hexadecimal values, and type is one of the supported controller types (Xbox360, XboxOne, PS3, PS4, PS5, SwitchPro).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_GAMECONTROLLERTYPE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLERTYPE \"SDL_GAMECONTROLLERTYPE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AUDIO_BITSIZE Macro Definition in C\nDESCRIPTION: This macro extracts the bit size from an SDL_AudioFormat value. It uses a bitwise AND operation with SDL_AUDIO_MASK_BITSIZE to isolate the relevant bits. The input 'x' is an SDL_AudioFormat enum value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_BITSIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_BITSIZE(x)         ((x) & SDL_AUDIO_MASK_BITSIZE)\n```\n\n----------------------------------------\n\nTITLE: SDL Symbol Renaming Script (Shell)\nDESCRIPTION: This command line uses the `rename_symbols.py` script to rename SDL2 symbols to their SDL3 counterparts in the specified source code path. It processes all symbols in the provided source code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nrename_symbols.py --all-symbols source_code_path\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUSamplerAddressMode Enumeration Definition in C\nDESCRIPTION: Defines the SDL_GPUSamplerAddressMode enum in C, which configures how texture sampling handles coordinates outside the 0-1 range. It specifies options for repeating, mirrored repeating, and clamping texture coordinates to the edge. This enum is available since SDL 3.2.0 and is used with SDL_CreateGPUSampler.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUSamplerAddressMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUSamplerAddressMode\n{\n    SDL_GPU_SAMPLERADDRESSMODE_REPEAT,           /**< Specifies that the coordinates will wrap around. */\n    SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT,  /**< Specifies that the coordinates will wrap around mirrored. */\n    SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE     /**< Specifies that the coordinates will clamp to the 0-1 range. */\n} SDL_GPUSamplerAddressMode;\n```\n\n----------------------------------------\n\nTITLE: TTF_WRAPPED_ALIGN_LEFT Macro Definition in C\nDESCRIPTION: Defines the TTF_WRAPPED_ALIGN_LEFT macro, which specifies left alignment when rendering wrapped text using the SDL_ttf library. This macro is used as a layout option when calling functions like TTF_RenderTextWrapped or similar functions that support text wrapping.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_WRAPPED_ALIGN_LEFT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_WRAPPED_ALIGN_LEFT      0\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph_Shaded Syntax\nDESCRIPTION: This code snippet shows the syntax for using the TTF_RenderGlyph_Shaded function. It takes a font, a Unicode code point, a foreground color, and a background color as input and returns a pointer to an SDL_Surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderGlyph_Shaded.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Shaded(TTF_Font *font, Uint32 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_enabled_assert Macro in C\nDESCRIPTION: This code defines the SDL_enabled_assert macro in C, which is used to perform assertions. When the condition is false, it calls SDL_ReportAssertion to handle the assertion and provides options to retry, break, or continue.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_enabled_assert.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_enabled_assert(condition) \\\n    do { \\\n        while ( !(condition) ) { \\\n            static struct SDL_AssertData sdl_assert_data = { 0, 0, #condition, 0, 0, 0, 0 }; \\\n            const SDL_AssertState sdl_assert_state = SDL_ReportAssertion(&sdl_assert_data, SDL_FUNCTION, SDL_FILE, SDL_LINE); \\\n            if (sdl_assert_state == SDL_ASSERTION_RETRY) { \\\n                continue; /* go again. */ \\\n            } else if (sdl_assert_state == SDL_ASSERTION_BREAK) { \\\n                SDL_AssertBreakpoint(); \\\n            } \\\n            break; /* not retrying. */ \\\n        } \\\n    } while (SDL_NULL_WHILE_LOOP_CONDITION)\n```\n\n----------------------------------------\n\nTITLE: Reading Input Report from HID Device in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_hid_read function, which is used to read an Input report from a HID device. It takes a device handle, a buffer to store the data, and the length of the buffer as input. It returns the number of bytes read or -1 on error. It's part of the SDL_hidapi.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_read.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_read(SDL_hid_device *dev, unsigned char *data, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_DIRECT3D11_DEBUG in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_RENDER_DIRECT3D11_DEBUG hint is defined as a macro string. This macro is used to refer to the hint when setting it using SDL_SetHint. It's important to set this hint before creating a renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RENDER_DIRECT3D11_DEBUG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_DIRECT3D11_DEBUG \"SDL_RENDER_DIRECT3D11_DEBUG\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HasEvents Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_HasEvents function in C to check for events within a specified range of event types. The function takes two Uint32 parameters, minType and maxType, representing the lower and upper bounds of the event type range to check. It returns SDL_TRUE if events within the range exist in the queue, and SDL_FALSE otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasEvents(Uint32 minType, Uint32 maxType);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap16 Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_Swap16` function in C. It takes an unsigned 16-bit integer as input and returns the byte-swapped version of the same integer. This is a forced-inline function defined in SDL_endian.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE Uint16 SDL_Swap16(Uint16 x);\n```\n\n----------------------------------------\n\nTITLE: Resolving Host to IP Address SDLNet in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_ResolveHost function, used to resolve a hostname and port to an IP address. The function populates the provided IPaddress struct with the resolved address and port. It returns 0 on success, and -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_ResolveHost.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_ResolveHost(IPaddress *address, const char *host, Uint16 port);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION Macro in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MOUSE_RELATIVE_WARP_MOTION macro, which is a string literal used to identify the mouse relative warp motion hint. The hint controls whether mouse warping in relative mode generates a motion event. This hint is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_RELATIVE_WARP_MOTION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_WARP_MOTION \"SDL_MOUSE_RELATIVE_WARP_MOTION\"\n```\n\n----------------------------------------\n\nTITLE: Gradle Configuration for SDL3 AAR\nDESCRIPTION: This Gradle configuration snippet demonstrates how to integrate the SDL3 Android Archive (.aar) into an Android project. It enables prefab support and adds the SDL3 AAR file as a dependency. The AAR file should be placed in the `app/libs` directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_1\n\nLANGUAGE: gradle\nCODE:\n```\nandroid {\n    /* ... */\n    buildFeatures {\n        prefab true\n    }\n}\ndependencies {\n    implementation files('libs/SDL3-X.Y.Z.aar') /* Replace with the filename of the actual SDL3-x.y.z.aar file you downloaded */\n    /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Define transparent floating point alpha value in C\nDESCRIPTION: Defines a macro for a fully transparent floating-point alpha value. This macro is used to represent a completely transparent color in SDL, where the alpha component is set to 0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ALPHA_TRANSPARENT_FLOAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ALPHA_TRANSPARENT_FLOAT 0.0f\n```\n\n----------------------------------------\n\nTITLE: Drawing Text to an SDL Surface using TTF_DrawSurfaceText in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_DrawSurfaceText function, which is used to draw text to an SDL surface. It requires a TTF_Text object (created from a TTF_TextEngine), x and y coordinates for the text's position, and a pointer to the SDL_Surface to draw on. The function returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_DrawSurfaceText.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DrawSurfaceText(TTF_Text *text, int x, int y, SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_FunctionPointer Definition in C\nDESCRIPTION: Defines a generic function pointer type `SDL_FunctionPointer` as a pointer to a function that takes no arguments and returns void.  This is intended to be used for generic function pointers instead of `void *` for increased portability.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FunctionPointer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (*SDL_FunctionPointer)(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_DisplayEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_DisplayEvent structure in C. It contains fields for the event type, timestamp, display index, event ID, padding, and event-dependent data. The structure is used to represent display state change events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DisplayEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DisplayEvent\n{\n    Uint32 type;        /**< SDL_DISPLAYEVENT */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 display;     /**< The associated display index */\n    Uint8 event;        /**< SDL_DisplayEventID */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n    Sint32 data1;       /**< event dependent data */\n} SDL_DisplayEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUSamplerMipmapMode Enum Definition in C\nDESCRIPTION: This code snippet defines the SDL_GPUSamplerMipmapMode enum, which is used to specify the mipmap filtering mode for a GPU sampler. The enum has two possible values: SDL_GPU_SAMPLERMIPMAPMODE_NEAREST for point filtering and SDL_GPU_SAMPLERMIPMAPMODE_LINEAR for linear filtering. This enum is part of the SDL3 library and is available since version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUSamplerMipmapMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUSamplerMipmapMode\n{\n    SDL_GPU_SAMPLERMIPMAPMODE_NEAREST,  /**< Point filtering. */\n    SDL_GPU_SAMPLERMIPMAPMODE_LINEAR    /**< Linear filtering. */\n} SDL_GPUSamplerMipmapMode;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TOUCH_MOUSEID in C\nDESCRIPTION: This code snippet defines the SDL_TOUCH_MOUSEID macro in C. It assigns the value of -1, cast to the SDL_MouseID type, to the SDL_TOUCH_MOUSEID identifier. This macro is used to distinguish mouse events that are generated via touch input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TOUCH_MOUSEID.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_TOUCH_MOUSEID ((SDL_MouseID)-1)\n```\n\n----------------------------------------\n\nTITLE: Get Text Wrap Width - SDL_ttf\nDESCRIPTION: Retrieves the wrap width of a text object. The `wrap_width` parameter will be populated with the current wrap width. A value of 0 indicates that wrapping is disabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_99\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextWrapWidth(TTF_Text *text, int *wrap_width);\n```\n\n----------------------------------------\n\nTITLE: SDL_strpbrk Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_strpbrk function in C. The function takes two null-terminated strings as input: 'str' (the string to search) and 'breakset' (the string containing characters to search for). It returns a pointer to the first occurrence of any character from 'breakset' within 'str', or NULL if no match is found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strpbrk.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_strpbrk(const char *str, const char *breakset);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_LIL_ENDIAN in C\nDESCRIPTION: This code snippet defines the SDL_LIL_ENDIAN macro, which is used to represent little-endian byte order. It is defined as the integer value 1234.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LIL_ENDIAN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_LIL_ENDIAN  1234\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_TOUCH_EVENTS in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_TOUCH_EVENTS macro as a string literal. This macro is used to set a hint that determines whether mouse events generate synthetic touch events. The value can be \"0\" to disable touch event generation or \"1\" to enable it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_TOUCH_EVENTS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_TOUCH_EVENTS    \"SDL_MOUSE_TOUCH_EVENTS\"\n```\n\n----------------------------------------\n\nTITLE: Loading XPM Image from Array - SDL_image (C)\nDESCRIPTION: This function loads an XPM image from a null-terminated array of strings. The input 'xpm' is a pointer to an array of char pointers, where each char pointer represents a line of the XPM data. The function returns a 32-bit RGB SDL_Surface, which must be freed using SDL_FreeSurface() when no longer needed. It returns NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_ReadXPMFromArrayToRGB888.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_ReadXPMFromArrayToRGB888(char **xpm);\n```\n\n----------------------------------------\n\nTITLE: Rewinding Music Stream using Mix_RewindMusic in SDL_mixer (C)\nDESCRIPTION: This snippet shows the syntax for using the Mix_RewindMusic function in SDL_mixer.  It rewinds the currently playing music to the beginning. The function takes no arguments and returns void.  It is available since SDL_mixer 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_RewindMusic.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_RewindMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION in C\nDESCRIPTION: This code defines the SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION macro, which is a string literal used as the key for setting the content orientation hint on QtWayland platforms.  It's used by SDL to inform the system about the application's content orientation, enabling correct positioning of overlays and gestures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_QTWAYLAND_CONTENT_ORIENTATION \"SDL_QTWAYLAND_CONTENT_ORIENTATION\"\n```\n\n----------------------------------------\n\nTITLE: SDL_TellIO Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_TellIO function in C. This function takes a pointer to an SDL_IOStream and returns the current offset as a Sint64 value. A return value of -1 indicates an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TellIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint64 SDL_TellIO(SDL_IOStream *context);\n```\n\n----------------------------------------\n\nTITLE: CMake QNX/aarch64 Build (Latest SDK)\nDESCRIPTION: This CMake command configures SDL3 for QNX/aarch64, using the specified toolchain file. It sets the CMAKE_TOOLCHAIN_FILE to the QNX aarch64 toolchain and disables X11 support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_TOOLCHAIN_FILE=~/sdl/build-scripts/cmake-toolchain-qnx-aarch64le.cmake -DSDL_X11=0\n```\n\n----------------------------------------\n\nTITLE: Sint16 Type Definition (C)\nDESCRIPTION: Defines the Sint16 type as an alias for int16_t. This ensures a consistent signed 16-bit integer type across platforms when using SDL3. It relies on the standard int16_t type defined in standard C headers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Sint16.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef int16_t Sint16;\n```\n\n----------------------------------------\n\nTITLE: Enumerating HID Devices in C with SDL\nDESCRIPTION: This code snippet shows the syntax of the SDL_hid_enumerate function in C, part of the SDL HIDAPI. It takes vendor ID and product ID as parameters and returns a pointer to a linked list of SDL_hid_device_info structures. The list contains information about HID devices matching the specified IDs or all HID devices if both IDs are set to 0. The returned linked list must be freed using SDL_hid_free_enumeration().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_enumerate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_hid_device_info * SDL_hid_enumerate(unsigned short vendor_id, unsigned short product_id);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables and Building SDL2\nDESCRIPTION: Configures environment variables such as CC (compiler), then configures and builds SDL2 for cross-compilation. It specifies sysroot, host, prefix, and disables pulseaudio and esd.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nexport CC=\"/opt/rpi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian/bin/arm-linux-gnueabihf-gcc --sysroot=$SYSROOT -I$SYSROOT/opt/vc/include -I$SYSROOT/usr/include -I$SYSROOT/opt/vc/include/interface/vcos/pthreads -I$SYSROOT/opt/vc/include/interface/vmcs_host/linux\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd <SDL SOURCE>\n```\n\nLANGUAGE: shell\nCODE:\n```\nmkdir -p build;cd build\n```\n\nLANGUAGE: shell\nCODE:\n```\nLDFLAGS=\"-L$SYSROOT/opt/vc/lib\" ../configure --with-sysroot=$SYSROOT --host=arm-raspberry-linux-gnueabihf --prefix=$PWD/rpi-sdl2-installed --disable-pulseaudio --disable-esd\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Renaming platform macros using Python\nDESCRIPTION: Refers to a Python script for automatically renaming platform-specific preprocessor macros to align with SDL3 naming conventions. The script can be used to update codebases that use the old macro names. Link to the script in the SDL repository is provided.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\nhttps://github.com/libsdl-org/SDL/blob/main/build-scripts/rename_macros.py\n```\n\n----------------------------------------\n\nTITLE: SDL_SendAndroidBackButton Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SendAndroidBackButton function, which is used to trigger the Android system back button behavior. The function takes no arguments and returns void. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SendAndroidBackButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SendAndroidBackButton(void);\n```\n\n----------------------------------------\n\nTITLE: Get String Size C\nDESCRIPTION: This function calculates the dimensions of a rendered string of UTF-8 text. It requires a TTF_Font, the UTF-8 text string, the length of the text, and pointers to integers to store the calculated width and height. It returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_54\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetStringSize(TTF_Font *font, const char *text, size_t length, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_CameraID Typedef Definition in C\nDESCRIPTION: Defines `SDL_CameraID` as an unsigned 32-bit integer (`Uint32`). This type represents a unique identifier for a camera device connected to the system. The ID is only valid for the duration the device is connected and is not reused during the application's lifetime. A value of 0 is considered an invalid ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CameraID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_CameraID;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_FRAMEBUFFER_ACCELERATION C\nDESCRIPTION: Defines the SDL_HINT_FRAMEBUFFER_ACCELERATION macro. This macro is a string that serves as a key to set and query the framebuffer acceleration hint. The hint controls whether and how SDL uses 3D acceleration for the SDL screen surface.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_FRAMEBUFFER_ACCELERATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_FRAMEBUFFER_ACCELERATION   \"SDL_FRAMEBUFFER_ACCELERATION\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ShowSimpleMessageBox Syntax in C\nDESCRIPTION: Shows the syntax for the SDL_ShowSimpleMessageBox function in C. It takes flags, title, message, and a window pointer as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ShowSimpleMessageBox.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, const char *title, const char *message, SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DisplayOrientation Enum in C\nDESCRIPTION: This code snippet defines the SDL_DisplayOrientation enum, which represents the possible orientations of a display. It includes values for unknown orientation, landscape, flipped landscape, portrait, and flipped portrait modes. It is defined in SDL_video.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DisplayOrientation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_DisplayOrientation\n{\n    SDL_ORIENTATION_UNKNOWN,            /**< The display orientation can't be determined */\n    SDL_ORIENTATION_LANDSCAPE,          /**< The display is in landscape mode, with the right side up, relative to portrait mode */\n    SDL_ORIENTATION_LANDSCAPE_FLIPPED,  /**< The display is in landscape mode, with the left side up, relative to portrait mode */\n    SDL_ORIENTATION_PORTRAIT,           /**< The display is in portrait mode */\n    SDL_ORIENTATION_PORTRAIT_FLIPPED    /**< The display is in portrait mode, upside down */\n} SDL_DisplayOrientation;\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteU32BE Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_WriteU32BE function, which writes a 32-bit unsigned integer to an SDL_IOStream in big-endian format. The function takes an SDL_IOStream pointer and a Uint32 value as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteU32BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteU32BE(SDL_IOStream *dst, Uint32 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_tan Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_tan function in C, which takes a double-precision floating point value as input and returns its tangent as a double.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_tan.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_tan(double x);\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateGamepads Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_UpdateGamepads function in C. It takes no arguments and returns void. It is used to manually update gamepad states when the event loop is not active.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateGamepads.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UpdateGamepads(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_RESERVED1 in C\nDESCRIPTION: This C macro defines SDL_HAPTIC_RESERVED1 as a bit flag (1u << 12). It's a reserved value for future extensions of the SDL haptic system. Including SDL3/SDL_haptic.h is required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_RESERVED1.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_RESERVED1    (1u<<12)\n```\n\n----------------------------------------\n\nTITLE: Platform Detection with SDL_PLATFORM_GDK and SDL_PLATFORM_WINGDK\nDESCRIPTION: These preprocessor defines are used for compile-time platform detection in SDL programs targeting GDK. SDL_PLATFORM_GDK is defined for all GDK platforms, while SDL_PLATFORM_WINGDK is specific to Windows GDK. This allows developers to conditionally compile code based on the target GDK platform.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\n`SDL_PLATFORM_GDK` is `#define`d on every GDK platform, and the  `SDL_PLATFORM_WINGDK` is `#define`d on Windows GDK, specifically.\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_PREFERRED_LOCALES Macro in C\nDESCRIPTION: Defines the SDL_HINT_PREFERRED_LOCALES macro, a string literal representing the name of the hint used to override the system's preferred locales. This hint takes a comma-separated string of locales, such as \"en_GB,jp,es_PT\". Setting this hint will affect the result of SDL_GetPreferredLocales.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_PREFERRED_LOCALES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_PREFERRED_LOCALES \"SDL_PREFERRED_LOCALES\"\n```\n\n----------------------------------------\n\nTITLE: Get System RAM using SDL_GetSystemRAM in C\nDESCRIPTION: Retrieves the amount of RAM configured in the system using SDL_GetSystemRAM. This function is defined in SDL_cpuinfo.h and returns an integer representing the RAM in MiB. The function takes no arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetSystemRAM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetSystemRAM(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUIndirectDrawCommand Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_GPUIndirectDrawCommand` used for specifying parameters for an indirect draw command. It contains `num_vertices` (number of vertices to draw), `num_instances` (number of instances to draw), `first_vertex` (index of the first vertex), and `first_instance` (ID of the first instance). The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUIndirectDrawCommand.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_GPUIndirectDrawCommand\n{\n    Uint32 num_vertices;   /**< The number of vertices to draw. */\n    Uint32 num_instances;  /**< The number of instances to draw. */\n    Uint32 first_vertex;   /**< The index of the first vertex to draw. */\n    Uint32 first_instance; /**< The ID of the first instance to draw. */\n} SDL_GPUIndirectDrawCommand;\n```\n\n----------------------------------------\n\nTITLE: SDL_HasAltiVec Function Definition in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HasAltiVec function. It takes no arguments and returns an SDL_bool indicating whether the CPU has AltiVec features. It is used to detect AltiVec support at runtime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasAltiVec.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasAltiVec(void);\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse Double Click Radius Hint in SDL\nDESCRIPTION: Defines the SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS macro which is used to configure the double click radius for mouse events in SDL. This macro maps to the string \"SDL_MOUSE_DOUBLE_CLICK_RADIUS\" and can be set anytime to adjust the radius.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS \"SDL_MOUSE_DOUBLE_CLICK_RADIUS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerFromInstanceID Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GameControllerFromInstanceID function, which takes a SDL_JoystickID (instance ID) as input and returns a pointer to an SDL_GameController object. If no controller is associated with that ID, or if an error occurs, it returns NULL. It requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerFromInstanceID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GameController* SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_SHUTDOWN_DBUS_ON_QUIT in C\nDESCRIPTION: This code snippet defines the SDL_HINT_SHUTDOWN_DBUS_ON_QUIT hint as a macro. This macro expands to a string literal, which is the name of the hint that can be used with SDL_SetHint() to control the behavior of SDL's DBus shutdown on quit.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_SHUTDOWN_DBUS_ON_QUIT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_SHUTDOWN_DBUS_ON_QUIT \"SDL_SHUTDOWN_DBUS_ON_QUIT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_OnApplicationDidEnterBackground Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_OnApplicationDidEnterBackground function. This function is used by iOS applications with custom event handling to signal that the application has entered the background state. It takes no arguments and returns nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OnApplicationDidEnterBackground.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_OnApplicationDidEnterBackground(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_TagToString Syntax (SDL_ttf, C)\nDESCRIPTION: Defines the syntax for the TTF_TagToString function in the SDL_ttf library. This function converts a 32-bit tag into a 4-character string. The function takes the tag to convert, a pointer to a character array, and the size of the character array as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_TagToString.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_TagToString(Uint32 tag, char *string, size_t size);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderFlush Syntax in C\nDESCRIPTION: This snippet shows the syntax for calling the SDL_RenderFlush function. It takes a pointer to an SDL_Renderer as input and returns an integer indicating success or failure. It's crucial to understand that this function should only be called under very specific circumstances, namely when combining SDL's rendering API with direct calls to lower-level APIs like OpenGL or Direct3D when batch rendering is enabled. The `renderer` parameter specifies the rendering context to flush.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderFlush.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderFlush(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: Detect JPG Image Data in SDL_RWops (C)\nDESCRIPTION: Detects if the provided SDL_RWops contains JPG image data. It takes an SDL_RWops pointer as input, attempts to read data from it to identify the JPG format, and then seeks back to the initial position. Returns a non-zero value if the data is JPG, and zero otherwise. Requires SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isJPG.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isJPG(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GameControllerAxis Enum in C\nDESCRIPTION: This C code defines the `SDL_GameControllerAxis` enumeration. It lists all possible controller axes, including left/right sticks, triggers, and an invalid value. This enum is used when querying controller axis states.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerAxis.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GameControllerAxis\n{\n    SDL_CONTROLLER_AXIS_INVALID = -1,\n    SDL_CONTROLLER_AXIS_LEFTX,\n    SDL_CONTROLLER_AXIS_LEFTY,\n    SDL_CONTROLLER_AXIS_RIGHTX,\n    SDL_CONTROLLER_AXIS_RIGHTY,\n    SDL_CONTROLLER_AXIS_TRIGGERLEFT,\n    SDL_CONTROLLER_AXIS_TRIGGERRIGHT,\n    SDL_CONTROLLER_AXIS_MAX\n} SDL_GameControllerAxis;\n```\n\n----------------------------------------\n\nTITLE: SDLNet_TCP_DelSocket Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_TCP_DelSocket function. It takes an SDLNet_SocketSet and a TCPsocket as input and returns an integer indicating the number of sockets in the set after removal or -1 if the socket was not found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_TCP_DelSocket.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_FORCE_INLINE int SDLNet_TCP_DelSocket(SDLNet_SocketSet set, TCPsocket sock);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL in C\nDESCRIPTION: Defines the SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL hint as a string literal. This hint allows forcing SDL to use Kernel Semaphores on Windows, potentially affecting performance.  It can be set to \"0\" (default, use Atomics and WaitOnAddress API when available) or \"1\" (force Kernel Objects).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL \"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\"\n```\n\n----------------------------------------\n\nTITLE: Get Haptic Effect Status SDL3 (C)\nDESCRIPTION: Retrieves the status of the current effect on the specified haptic device using SDL3. This function takes a pointer to an SDL_Haptic device and an SDL_HapticEffectID as input. It returns true if the effect is playing, false otherwise. It requires the SDL_HAPTIC_STATUS feature to be supported.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHapticEffectStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetHapticEffectStatus(SDL_Haptic *haptic, SDL_HapticEffectID effect);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_KMSDRM_DEVICE_INDEX in C\nDESCRIPTION: Defines the SDL_HINT_KMSDRM_DEVICE_INDEX macro for specifying the KMSDRM device index. This hint must be set before SDL initialization to take effect. It allows the user to select a specific KMSDRM device by its index number, overriding SDL's default selection.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_KMSDRM_DEVICE_INDEX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_KMSDRM_DEVICE_INDEX \"SDL_KMSDRM_DEVICE_INDEX\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_NETBSD for NetBSD platform in C\nDESCRIPTION: This code snippet demonstrates the definition of the SDL_PLATFORM_NETBSD macro. This macro is defined with a value of 1 when compiling for the NetBSD operating system using SDL3. It can be used for conditional compilation based on the target platform.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_NETBSD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_NETBSD 1\n```\n\n----------------------------------------\n\nTITLE: Defining Shader Compiler Hint in SDL\nDESCRIPTION: This code defines the SDL_HINT_VIDEO_WIN_D3DCOMPILER hint as a string literal. This hint allows developers to specify which shader compiler DLL to preload when using the Chrome ANGLE binaries for EGL and OpenGL ES2 support on Windows. The values can be 'd3dcompiler_46.dll', 'd3dcompiler_43.dll', or 'none'.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_WIN_D3DCOMPILER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WIN_D3DCOMPILER              \"SDL_VIDEO_WIN_D3DCOMPILER\"\n```\n\n----------------------------------------\n\nTITLE: Setting Text Font C\nDESCRIPTION: This function sets the font used by a text object. It requires a pointer to the TTF_Text and a pointer to the TTF_Font. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_60\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextFont(TTF_Text *text, TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_US_TO_NS Macro Definition in C\nDESCRIPTION: Defines the SDL_US_TO_NS macro to convert microseconds (US) to nanoseconds. It multiplies the input value by SDL_NS_PER_US, ensuring the result is a 64-bit unsigned integer. This macro is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_US_TO_NS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_US_TO_NS(US)        (((Uint64)(US)) * SDL_NS_PER_US)\n```\n\n----------------------------------------\n\nTITLE: SDL_TTF Version Check Macro Definition in C\nDESCRIPTION: This macro checks if the SDL_ttf library version is at least X.Y.Z. It uses SDL_TTF_MAJOR_VERSION, SDL_TTF_MINOR_VERSION, and SDL_TTF_PATCHLEVEL to compare against the provided version numbers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/SDL_TTF_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TTF_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_TTF_MAJOR_VERSION >= X) && \\\n     (SDL_TTF_MAJOR_VERSION > X || SDL_TTF_MINOR_VERSION >= Y) && \\\n     (SDL_TTF_MAJOR_VERSION > X || SDL_TTF_MINOR_VERSION > Y || SDL_TTF_PATCHLEVEL >= Z))\n```\n\n----------------------------------------\n\nTITLE: Get Font Script C\nDESCRIPTION: This function retrieves the script used for text shaping in a specified font. It takes a TTF_Font pointer as input and returns a Uint32 representing the script.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_46\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetFontScript(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SSE4_1_INTRINSICS in C\nDESCRIPTION: Defines the SDL_SSE4_1_INTRINSICS macro to 1, indicating that the compiler supports Intel SSE4.1 intrinsics. This macro is defined in SDL3/SDL_intrin.h. If defined, SDL includes `<smmintrin.h>`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SSE4_1_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SSE4_1_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_atanf Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_atanf function in C to compute the arc tangent of a single-precision floating-point number. It takes a float 'x' as input and returns a float representing the arc tangent of 'x' in radians. The function is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_atanf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_atanf(float x);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_LINUX_DIGITAL_HATS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_LINUX_DIGITAL_HATS macro, used to set the hint that controls how SDL handles joystick hat inputs on Linux. The hint accepts values \"0\" to treat hats as digital only if they appear digital, and \"1\" to always treat them as digital.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_LINUX_DIGITAL_HATS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_LINUX_DIGITAL_HATS \"SDL_LINUX_DIGITAL_HATS\"\n```\n\n----------------------------------------\n\nTITLE: Defining Mouse Speed Scale Hint in SDL (C)\nDESCRIPTION: This snippet defines the SDL_HINT_MOUSE_NORMAL_SPEED_SCALE macro, which is used as a key to set the mouse speed scale when the mouse is not in relative mode. It is defined as a string literal. The definition is found in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_NORMAL_SPEED_SCALE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_NORMAL_SPEED_SCALE    \"SDL_MOUSE_NORMAL_SPEED_SCALE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_ClearComposition Syntax\nDESCRIPTION: This code snippet shows the syntax for the SDL_ClearComposition function. It's a void function that takes no arguments and dismisses the composition window or IME without disabling the subsystem. This function is available since SDL 2.0.22.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ClearComposition.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ClearComposition(void);\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Image Formats from SDL_IOStream\nDESCRIPTION: These functions load specific image formats directly from an SDL_IOStream. Each function is designed for a specific image type (e.g., AVIF, ICO, BMP, GIF, JPG, PNG, WEBP).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_5\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadAVIF_IO(SDL_IOStream *src);                                                                  // Load a AVIF image directly.\nSDL_Surface * IMG_LoadICO_IO(SDL_IOStream *src);                                                                   // Load a ICO image directly.\nSDL_Surface * IMG_LoadCUR_IO(SDL_IOStream *src);                                                                   // Load a CUR image directly.\nSDL_Surface * IMG_LoadBMP_IO(SDL_IOStream *src);                                                                   // Load a BMP image directly.\nSDL_Surface * IMG_LoadGIF_IO(SDL_IOStream *src);                                                                   // Load a GIF image directly.\nSDL_Surface * IMG_LoadJPG_IO(SDL_IOStream *src);                                                                   // Load a JPG image directly.\nSDL_Surface * IMG_LoadJXL_IO(SDL_IOStream *src);                                                                   // Load a JXL image directly.\nSDL_Surface * IMG_LoadLBM_IO(SDL_IOStream *src);                                                                   // Load a LBM image directly.\nSDL_Surface * IMG_LoadPCX_IO(SDL_IOStream *src);                                                                   // Load a PCX image directly.\nSDL_Surface * IMG_LoadPNG_IO(SDL_IOStream *src);                                                                   // Load a PNG image directly.\nSDL_Surface * IMG_LoadPNM_IO(SDL_IOStream *src);                                                                   // Load a PNM image directly.\nSDL_Surface * IMG_LoadSVG_IO(SDL_IOStream *src);                                                                   // Load a SVG image directly.\nSDL_Surface * IMG_LoadQOI_IO(SDL_IOStream *src);                                                                   // Load a QOI image directly.\nSDL_Surface * IMG_LoadTGA_IO(SDL_IOStream *src);                                                                   // Load a TGA image directly.\nSDL_Surface * IMG_LoadTIF_IO(SDL_IOStream *src);                                                                   // Load a TIFF image directly.\nSDL_Surface * IMG_LoadXCF_IO(SDL_IOStream *src);                                                                   // Load a XCF image directly.\nSDL_Surface * IMG_LoadXPM_IO(SDL_IOStream *src);                                                                   // Load a XPM image directly.\nSDL_Surface * IMG_LoadXV_IO(SDL_IOStream *src);                                                                    // Load a XV image directly.\nSDL_Surface * IMG_LoadWEBP_IO(SDL_IOStream *src);                                                                  // Load a WEBP image directly.\n```\n\n----------------------------------------\n\nTITLE: Freeing a UDP Packet Vector in SDL_net (C)\nDESCRIPTION: This C code snippet demonstrates the syntax for SDLNet_FreePacketV, which is used to free a UDP packet vector allocated by SDLNet_AllocPacketV. It takes a pointer to a pointer to a UDPpacket as input, allowing it to free the memory associated with both the array of packets and the packets themselves. Passing a NULL pointer is safe and results in no operation. It's important to only free packet vectors allocated through SDLNet_AllocPacketV.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_FreePacketV.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDLNet_FreePacketV(UDPpacket **packetV);\n```\n\n----------------------------------------\n\nTITLE: Render Solid Text C\nDESCRIPTION: This function renders UTF-8 text at fast quality to a new 8-bit surface. It requires a TTF_Font, the UTF-8 text, text length, and an SDL_Color for the foreground color. Returns an SDL_Surface with the rendered text, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_57\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Solid(TTF_Font *font, const char *text, size_t length, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Building all test APKs (CMake)\nDESCRIPTION: This CMake command is used to build APKs for all available tests.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_23\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target sdl-test-apks\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_SWITCH in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_SWITCH hint as a string literal. This hint controls whether the HIDAPI driver is used for Nintendo Switch controllers. It depends on SDL_hints.h. Values can be '0' to disable or '1' to enable.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_SWITCH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_SWITCH \"SDL_JOYSTICK_HIDAPI_SWITCH\"\n```\n\n----------------------------------------\n\nTITLE: Loading GIF image using IMG_LoadGIF_RW in C\nDESCRIPTION: Loads a GIF image from an SDL_RWops stream using IMG_LoadGIF_RW. This function assumes the provided data is a GIF image and skips format detection. The function requires the SDL_image library and SDL. It returns an SDL_Surface pointer or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadGIF_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadGIF_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasAVX2 Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_HasAVX2 function in C. It takes no arguments and returns a boolean value indicating whether the CPU supports AVX2 instruction set extensions. It relies on the SDL3/SDL_cpuinfo.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasAVX2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasAVX2(void);\n```\n\n----------------------------------------\n\nTITLE: Check Font Glyph Availability C\nDESCRIPTION: This function checks if a glyph is available in the font for the given UNICODE codepoint. It takes a TTF_Font pointer and a Uint32 representing the codepoint as input. It returns a boolean value indicating whether the glyph exists.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_49\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_FontHasGlyph(TTF_Font *font, Uint32 ch);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_IMAGE_VERSION Macro in C\nDESCRIPTION: This macro populates an SDL_version structure with the major, minor, and patch level version numbers of the SDL_image library at compile time. The macro takes a pointer to an SDL_version structure as input and sets its `major`, `minor`, and `patch` members to the corresponding SDL_IMAGE_MAJOR_VERSION, SDL_IMAGE_MINOR_VERSION, and SDL_IMAGE_PATCHLEVEL constants.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/SDL_IMAGE_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_VERSION(X)                        \\\n{\n    (X)->major = SDL_IMAGE_MAJOR_VERSION;           \\\n    (X)->minor = SDL_IMAGE_MINOR_VERSION;           \\\n    (X)->patch = SDL_IMAGE_PATCHLEVEL;              \\\n}\n```\n\n----------------------------------------\n\nTITLE: udev rule for older systems\nDESCRIPTION: This udev rule is designed for older systems (e.g., CentOS) and sets the joystick identification (ID_INPUT_JOYSTICK) based on the device's class. It targets devices that are already identified as joysticks by udev.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nSUBSYSTEM==\"input\", ENV{ID_CLASS}==\"joystick\", ENV{ID_INPUT_JOYSTICK}=\"1\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_IOKIT C Macro\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_IOKIT macro, which is a string used to set the hint that controls whether IOKit is used for joystick input on macOS. The hint can be set to \"0\" to disable IOKit or \"1\" to enable it (default). This hint should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_IOKIT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_IOKIT \"SDL_JOYSTICK_IOKIT\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_RAWINPUT in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_RAWINPUT hint as a string literal. This hint controls whether SDL uses RAWINPUT drivers for joysticks, which can improve support for XInput devices. Setting the hint to \"1\" enables RAWINPUT, while \"0\" disables it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_RAWINPUT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_RAWINPUT \"SDL_JOYSTICK_RAWINPUT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_POLL_SENTINEL Definition in C\nDESCRIPTION: This defines the SDL_HINT_POLL_SENTINEL macro as a string literal, \"SDL_POLL_SENTINEL\". This macro is used as a hint to control the use of sentinel events when polling the event queue. The hint can be set to \"0\" to disable poll sentinels or \"1\" to enable them.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_POLL_SENTINEL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_POLL_SENTINEL \"SDL_POLL_SENTINEL\"\n```\n\n----------------------------------------\n\nTITLE: IMG_Load Syntax in C\nDESCRIPTION: Defines the syntax for using the IMG_Load function from SDL_image. This function takes a file path (const char *) as input and returns an SDL_Surface pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_Load.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * IMG_Load(const char *file);\n```\n\n----------------------------------------\n\nTITLE: Mix_GetSoundFonts Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_GetSoundFonts function in C. It takes no arguments and returns a const char* representing the semicolon-separated list of SoundFont paths.  The returned pointer points to internal memory that should not be modified or freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetSoundFonts.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetSoundFonts(void);\n```\n\n----------------------------------------\n\nTITLE: Calculate Array Size with SDL_arraysize Macro in C\nDESCRIPTION: This macro calculates the number of elements in an array. It uses the sizeof operator to determine the total size of the array and divides it by the size of a single element in the array.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_arraysize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_arraysize(array)    (sizeof(array)/sizeof(array[0]))\n```\n\n----------------------------------------\n\nTITLE: Get Surface Palette in SDL3 (C)\nDESCRIPTION: Retrieves the palette used by an SDL_Surface. The function takes a pointer to the SDL_Surface as input and returns a pointer to the SDL_Palette if the surface uses a palette, or NULL otherwise. This function is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSurfacePalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Palette * SDL_GetSurfacePalette(SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: SDL_TICKS_PASSED Macro Definition in C\nDESCRIPTION: This code defines the SDL_TICKS_PASSED macro for cases where it's still needed, ensuring compatibility with existing code. It calculates the difference between two tick values, casting the result to Sint32, and checks if it's less than or equal to zero.  This allows the macro to still be used if ported from older SDL versions, or if tick values are used for purposes other than SDL ticks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_47\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_TICKS_PASSED(A, B)  ((Sint32)((B) - (A)) <= 0)\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTrayEntryChecked Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_SetTrayEntryChecked function in C. This function sets the checked state of a tray entry. It takes a pointer to an SDL_TrayEntry and a boolean value indicating whether the entry should be checked.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTrayEntryChecked.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetTrayEntryChecked(SDL_TrayEntry *entry, bool checked);\n```\n\n----------------------------------------\n\nTITLE: Get Property Type using SDL_GetPropertyType in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetPropertyType function, which is used to retrieve the data type of a property within a group of properties. The function takes an SDL_PropertiesID and the name of the property as input, and returns the SDL_PropertyType. It returns SDL_PROPERTY_TYPE_INVALID if the property is not set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPropertyType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertyType SDL_GetPropertyType(SDL_PropertiesID props, const char *name);\n```\n\n----------------------------------------\n\nTITLE: Check Storage Readiness in SDL3\nDESCRIPTION: This code snippet shows the syntax of the SDL_StorageReady function, which is used to determine if a specified SDL_Storage container is ready for use. The function takes a pointer to an SDL_Storage object as input and returns a boolean value indicating its readiness.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_StorageReady.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_StorageReady(SDL_Storage *storage);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_ALLOW_SCREENSAVER in C\nDESCRIPTION: This C macro defines the string literal associated with the SDL_HINT_VIDEO_ALLOW_SCREENSAVER hint, which is used to enable or disable the screensaver functionality within an SDL application. The hint should be set before SDL is initialized to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_ALLOW_SCREENSAVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_ALLOW_SCREENSAVER \"SDL_VIDEO_ALLOW_SCREENSAVER\"\n```\n\n----------------------------------------\n\nTITLE: SDL_log10 Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_log10 function in C. This function calculates the base-10 logarithm of a double-precision floating-point value. The input 'x' must be greater than 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_log10.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_log10(double x);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetTextSubStringsForRange Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the TTF_GetTextSubStringsForRange function in C. It takes a TTF_Text pointer, an offset, a length, and a pointer to an integer as parameters. It returns a pointer to an array of TTF_SubString pointers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextSubStringsForRange.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_SubString ** TTF_GetTextSubStringsForRange(TTF_Text *text, int offset, int length, int *count);\n```\n\n----------------------------------------\n\nTITLE: Disabling Atomic Functions for GCCSDK < 4.7.4\nDESCRIPTION: This CMake option disables atomic functions during the SDL build process when using older versions of GCCSDK (prior to 4.7.4 release 6). This is a workaround for broken atomic functions in these older versions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/riscos.md#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n-DSDL_GCC_ATOMICS=OFF\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS macro in C. It is used to enable or disable the Windows menu mnemonics feature in SDL applications. The hint's value can be either \"0\" (disabled) or \"1\" (enabled).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS \"SDL_WINDOWS_ENABLE_MENU_MNEMONICS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_SIZE_MAX Macro Definition in C\nDESCRIPTION: This macro defines SDL_SIZE_MAX as an alias for SIZE_MAX. SIZE_MAX is the standard C macro defining the maximum value that can be stored in a size_t type. This ensures that SDL uses the platform-specific maximum size for size_t.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SIZE_MAX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SIZE_MAX SIZE_MAX\n```\n\n----------------------------------------\n\nTITLE: Disabling formats in Android.mk\nDESCRIPTION: This shows how to optionally disable certain formats in the `jni/Android.mk` file during the build process, e.g. MP3 support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_12\n\nLANGUAGE: make\nCODE:\n```\nSUPPORT_MP3_SMPEG := false\ninclude $(call all-subdir-makefiles)\n```\n\n----------------------------------------\n\nTITLE: Setting Haptic Gain in SDL3 (C)\nDESCRIPTION: This snippet shows the syntax for using the SDL_SetHapticGain function. It takes a pointer to an SDL_Haptic device and an integer representing the gain value (0-100). The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetHapticGain.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetHapticGain(SDL_Haptic *haptic, int gain);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Line Skip - SDL_ttf (C)\nDESCRIPTION: This code snippet demonstrates the syntax for the TTF_SetFontLineSkip function in SDL_ttf. It sets the line spacing for a given TTF_Font object. The function takes a pointer to the font and an integer representing the desired line spacing as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontLineSkip.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontLineSkip(TTF_Font *font, int lineskip);\n```\n\n----------------------------------------\n\nTITLE: Uint64 Type Definition and Macros in SDL\nDESCRIPTION: This snippet defines the `Uint64` type as an alias for `uint64_t`. It also defines macros `SDL_MAX_UINT64` and `SDL_MIN_UINT64` representing the maximum and minimum values for a `Uint64` variable, respectively. This code is found within the SDL standard include header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Uint64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint64_t Uint64;\n#define SDL_MAX_UINT64  SDL_UINT64_C(0xFFFFFFFFFFFFFFFF)   /* 18446744073709551615 */\n#define SDL_MIN_UINT64  SDL_UINT64_C(0x0000000000000000)   /* 0 */\n```\n\n----------------------------------------\n\nTITLE: SDL_MIXER Version Macros\nDESCRIPTION: These macros provide information about the SDL_mixer library version. SDL_MIXER_MAJOR_VERSION defines the printable format. SDL_MIXER_VERSION is the version number. SDL_MIXER_VERSION_ATLEAST checks if the compiled version is at least a specific version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_MIXER_MAJOR_VERSION                                                           // Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO\n#define SDL_MIXER_VERSION                                                                 // This is the version number macro for the current SDL_mixer version.\n#define SDL_MIXER_VERSION_ATLEAST(X, Y, Z)                                                // This macro will evaluate to true if compiled with SDL_mixer at least X.Y.Z.\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ANDROID_EXTERNAL_STORAGE_READ in C\nDESCRIPTION: This code snippet shows the definition of the SDL_ANDROID_EXTERNAL_STORAGE_READ macro. It assigns the hexadecimal value 0x01 to the macro, which can then be used to specify the external storage read permission within the SDL framework for Android.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ANDROID_EXTERNAL_STORAGE_READ.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ANDROID_EXTERNAL_STORAGE_READ   0x01\n```\n\n----------------------------------------\n\nTITLE: Setting Font Script with TTF_SetFontScript in C\nDESCRIPTION: Sets the script to be used for text shaping by a font using the TTF_SetFontScript function. It takes a TTF_Font pointer and a Uint32 script code as input. Returns true on success, false on failure. Requires SDL_ttf library with HarfBuzz support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontScript.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontScript(TTF_Font *font, Uint32 script);\n```\n\n----------------------------------------\n\nTITLE: SDL_RegisterApp Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RegisterApp function in C. It takes a window class name, style, and instance handle as input.  The `name` parameter is the window class name in UTF-8 encoding. The `style` parameter is the value to use in WNDCLASSEX::style. The `hInst` parameter is the HINSTANCE to use in WNDCLASSEX::hInstance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RegisterApp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RegisterApp(const char *name, Uint32 style, void *hInst);\n```\n\n----------------------------------------\n\nTITLE: Using ADB to List Devices\nDESCRIPTION: This command allows you to see a list of connected Android devices using the Android Debug Bridge (adb).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nadb devices\n```\n\n----------------------------------------\n\nTITLE: Define SDL_WINDOWPOS_CENTERED_MASK in SDL\nDESCRIPTION: This macro defines the SDL_WINDOWPOS_CENTERED_MASK. When used in conjunction with SDL_CreateWindow or SDL_CreateWindowAndRenderer, it tells SDL to center the window on the screen. The value of the macro is 0x2FFF0000u.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WINDOWPOS_CENTERED_MASK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_CENTERED_MASK    0x2FFF0000u\n```\n\n----------------------------------------\n\nTITLE: Install SDL build dependencies on Fedora 35\nDESCRIPTION: This command installs the required development packages on Fedora 35 to enable all available features when building SDL. It leverages yum to install gcc, git, make, cmake, autoconf, automake, libtool, and various -devel packages for audio, X11, Wayland, systemd, mesa, vulkan and other essential components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo yum install gcc git-core make cmake autoconf automake libtool \\\nalsa-lib-devel pulseaudio-libs-devel nas-devel pipewire-devel \\\nlibX11-devel libXext-devel libXrandr-devel libXcursor-devel libXfixes-devel \\\nlibXi-devel libXScrnSaver-devel dbus-devel ibus-devel fcitx-devel \\\nsystemd-devel mesa-libGL-devel libxkbcommon-devel mesa-libGLES-devel \\\nmesa-libEGL-devel vulkan-devel wayland-devel wayland-protocols-devel \\\nlibdrm-devel mesa-libgbm-devel libusb-devel libdecor-devel \\\nlibsamplerate-devel pipewire-jack-audio-connection-kit-devel\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AUDIO_MASK_BIG_ENDIAN in C\nDESCRIPTION: Defines the SDL_AUDIO_MASK_BIG_ENDIAN macro as a bitmask to identify big-endian audio format flags within SDL_AudioFormat. This macro is available since SDL 3.2.0. It is recommended to use SDL_AUDIO_ISBIGENDIAN or SDL_AUDIO_ISLITTLEENDIAN instead.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_MASK_BIG_ENDIAN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_MASK_BIG_ENDIAN    (1u<<12)\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop Length Time SDL_mixer C\nDESCRIPTION: Retrieves the loop time length of a music stream, specified in seconds. Requires a valid Mix_Music pointer. Returns the time as a double.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_42\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicLoopLengthTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_OSF Macro in C\nDESCRIPTION: This code snippet defines the SDL_PLATFORM_OSF preprocessor macro. It's set to 1 when compiling for Tru64 (OSF/1). This macro is used for conditional compilation, allowing developers to write platform-specific code that is only included when compiling for Tru64.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_OSF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_OSF 1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VULKAN_DISPLAY in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VULKAN_DISPLAY macro as a string literal. This hint is used to override the display index used when creating a Vulkan surface with `SDL_Vulkan_CreateSurface`.  It must be set before calling `SDL_Vulkan_CreateSurface`. The display index defaults to 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VULKAN_DISPLAY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VULKAN_DISPLAY \"SDL_VULKAN_DISPLAY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyBallEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_JoyBallEvent structure in C. This structure is used to represent joystick trackball motion events in SDL.  It includes the event type, timestamp, joystick instance ID, trackball index, and relative motion in the X and Y directions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoyBallEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyBallEvent\n{\n    Uint32 type;        /**< SDL_JOYBALLMOTION */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Uint8 ball;         /**< The joystick trackball index */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n    Sint16 xrel;        /**< The relative motion in the X direction */\n    Sint16 yrel;        /**< The relative motion in the Y direction */\n} SDL_JoyBallEvent;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FlashOperation Enum in C\nDESCRIPTION: This code snippet defines the `SDL_FlashOperation` enumeration in C, which is used to specify the type of window flashing operation to perform. The enumeration includes options to cancel flashing, flash briefly, and flash until the window is focused. This is defined in `SDL_video.h`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FlashOperation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_FlashOperation\n{\n    SDL_FLASH_CANCEL,                   /**< Cancel any window flash state */\n    SDL_FLASH_BRIEFLY,                  /**< Flash the window briefly to get attention */\n    SDL_FLASH_UNTIL_FOCUSED             /**< Flash the window until it gets focus */\n} SDL_FlashOperation;\n```\n\n----------------------------------------\n\nTITLE: Loading QOI Image from SDL_RWops in C\nDESCRIPTION: This code snippet demonstrates how to load a QOI image from an SDL_RWops stream using the IMG_LoadQOI_RW function. The function takes an SDL_RWops pointer as input, which provides access to the image data. It returns an SDL_Surface pointer representing the loaded image, or NULL if an error occurs. Requires SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadQOI_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadQOI_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: TTF Hinting Flags Enumeration Definition in C\nDESCRIPTION: This code defines the `TTF_HintingFlags` enumeration in C. It specifies different hinting levels that can be applied when rendering fonts using SDL_ttf.  The flags control how the font's outlines are adjusted for pixel grid alignment. Available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_HintingFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum TTF_HintingFlags\n{\n    TTF_HINTING_INVALID = -1,\n    TTF_HINTING_NORMAL,         /**< Normal hinting applies standard grid-fitting. */\n    TTF_HINTING_LIGHT,          /**< Light hinting applies subtle adjustments to improve rendering. */\n    TTF_HINTING_MONO,           /**< Monochrome hinting adjusts the font for better rendering at lower resolutions. */\n    TTF_HINTING_NONE,           /**< No hinting, the font is rendered without any grid-fitting. */\n    TTF_HINTING_LIGHT_SUBPIXEL  /**< Light hinting with subpixel rendering for more precise font edges. */\n} TTF_HintingFlags;\n```\n\n----------------------------------------\n\nTITLE: Channel Allocation\nDESCRIPTION: This function dynamically changes the number of channels managed by the mixer. It takes the number of channels as an argument.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint Mix_AllocateChannels(int numchans);                                                   // Dynamically change the number of channels managed by the mixer.\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED macro, which is a string constant used to set the hint that excludes specific joystick devices from being treated as GameCube-style controllers. The value represents the name of the hint used to configure this behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED \"SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_IOStatus Enum Definition in C\nDESCRIPTION: Defines the SDL_IOStatus enum, which represents the status of an SDL_IOStream read or write operation. It includes status codes for ready, error, end-of-file, not ready, read-only, and write-only states. This enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_IOStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_IOStatus\n{\n    SDL_IO_STATUS_READY,     /**< Everything is ready (no errors and not EOF). */\n    SDL_IO_STATUS_ERROR,     /**< Read or write I/O error */\n    SDL_IO_STATUS_EOF,       /**< End of file */\n    SDL_IO_STATUS_NOT_READY, /**< Non blocking I/O, not ready */\n    SDL_IO_STATUS_READONLY,  /**< Tried to write a read-only buffer */\n    SDL_IO_STATUS_WRITEONLY  /**< Tried to read a write-only buffer */\n} SDL_IOStatus;\n```\n\n----------------------------------------\n\nTITLE: Loading AVIF Image from RWops - C\nDESCRIPTION: Loads an AVIF image from an SDL_RWops stream, bypassing the standard file format detection.  It requires the SDL_image library and an initialized SDL_RWops. Returns an SDL_Surface on success or NULL on error. Available since SDL_image 2.6.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadAVIF_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadAVIF_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_NET_COMPILEDVERSION in C\nDESCRIPTION: This C macro defines SDL_NET_COMPILEDVERSION, which constructs the version number from SDL_NET_MAJOR_VERSION, SDL_NET_MINOR_VERSION, and SDL_NET_PATCHLEVEL using the SDL_VERSIONNUM macro. It provides a way to access the compiled version of the SDL_net library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDL_NET_COMPILEDVERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NET_COMPILEDVERSION \\\n    SDL_VERSIONNUM(SDL_NET_MAJOR_VERSION, SDL_NET_MINOR_VERSION, SDL_NET_PATCHLEVEL)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PI_F Macro in C\nDESCRIPTION: This code snippet defines the SDL_PI_F macro, which provides the single-precision floating-point representation of the mathematical constant Pi. It is defined in the SDL3/SDL_stdinc.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PI_F.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PI_F   3.141592653589793238462643383279502884F      /**< pi (float) */\n```\n\n----------------------------------------\n\nTITLE: Defining the maximum number of audio filters in SDL_AudioCVT\nDESCRIPTION: This macro defines the maximum number of filters allowed in the `SDL_AudioCVT` structure. The `SDL_AudioCVT.filters` array has 10 pointers, with the last one being a terminating NULL pointer. It's defined in SDL_audio.h and is used for configuring audio conversion processes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AUDIOCVT_MAX_FILTERS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIOCVT_MAX_FILTERS 9\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_LINUX in C\nDESCRIPTION: This code snippet demonstrates how the SDL_PLATFORM_LINUX preprocessor macro is defined. When compiling for Linux, this macro is defined to the integer value 1. This allows conditional compilation of code specific to Linux platforms within an SDL3 project.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_LINUX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_LINUX 1\n```\n\n----------------------------------------\n\nTITLE: Define SDL_TextureAddressMode Enum in C\nDESCRIPTION: This C code snippet defines the SDL_TextureAddressMode enumeration, which specifies how texture coordinates outside the range [0, 1] are handled during rendering.  It offers options for automatic wrapping (SDL_TEXTURE_ADDRESS_AUTO), clamping (SDL_TEXTURE_ADDRESS_CLAMP), and tiling (SDL_TEXTURE_ADDRESS_WRAP). This enum is used by SDL_RenderGeometry.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TextureAddressMode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_TextureAddressMode\n{\n    SDL_TEXTURE_ADDRESS_INVALID = -1,\n    SDL_TEXTURE_ADDRESS_AUTO,   /**< Wrapping is enabled if texture coordinates are outside [0, 1], this is the default */\n    SDL_TEXTURE_ADDRESS_CLAMP,  /**< Texture coordinates are clamped to the [0, 1] range */\n    SDL_TEXTURE_ADDRESS_WRAP,   /**< The texture is repeated (tiled) */\n} SDL_TextureAddressMode;\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUViewport Structure Definition in C\nDESCRIPTION: This code defines the SDL_GPUViewport structure, which represents a viewport for SDL_GPU rendering. It includes members for the x and y offsets, width, height, minimum depth, and maximum depth of the viewport.  The structure is used to define the visible region of a rendering target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUViewport.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUViewport\n{\n    float x;          /**< The left offset of the viewport. */\n    float y;          /**< The top offset of the viewport. */\n    float w;          /**< The width of the viewport. */\n    float h;          /**< The height of the viewport. */\n    float min_depth;  /**< The minimum depth of the viewport. */\n    float max_depth;  /**< The maximum depth of the viewport. */\n} SDL_GPUViewport;\n```\n\n----------------------------------------\n\nTITLE: Copying Storage File using SDL_CopyStorageFile in C\nDESCRIPTION: This code snippet demonstrates the syntax for using the SDL_CopyStorageFile function in C to copy a file within an SDL Storage container. It takes an SDL_Storage pointer, the old path, and the new path as input, returning true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CopyStorageFile.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_CopyStorageFile(SDL_Storage *storage, const char *oldpath, const char *newpath);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS macro, which is a string literal representing the name of the hint. This hint is used to control whether the HIDAPI driver is used for XBox 360 wireless controllers within the SDL library. The value of this hint can be set to \"0\" to disable the HIDAPI driver or \"1\" to enable it. It depends on SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS   \"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WAVE_TRUNCATION in C\nDESCRIPTION: Defines the SDL_HINT_WAVE_TRUNCATION hint as a string macro. This macro is used to set or query the hint's value using SDL_SetHint() and SDL_GetHint(). It specifies how SDL will handle truncated WAVE files during audio decoding. The defined string is \"SDL_WAVE_TRUNCATION\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WAVE_TRUNCATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WAVE_TRUNCATION   \"SDL_WAVE_TRUNCATION\"\n```\n\n----------------------------------------\n\nTITLE: Checking SDL_ttf Initialization Status with TTF_WasInit in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_WasInit function, which is used to check if the SDL_ttf library has been initialized. It returns an integer representing the number of times TTF_Init has been called without a corresponding TTF_Quit.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_WasInit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_WasInit(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetAudioStreamInputChannelMap Syntax in C\nDESCRIPTION: Shows the function signature for SDL_SetAudioStreamInputChannelMap, defining the parameters it takes and the return type. This function sets the input channel map of an audio stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetAudioStreamInputChannelMap.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_SetAudioStreamInputChannelMap(SDL_AudioStream *stream, const int *chmap, int count);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetWindowSurfaceVSync Function Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetWindowSurfaceVSync function in C. It takes an SDL_Window pointer and an integer representing the VSync interval as input and returns a boolean indicating success or failure. The function should only be called from the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetWindowSurfaceVSync.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetWindowSurfaceVSync(SDL_Window *window, int vsync);\n```\n\n----------------------------------------\n\nTITLE: Mix_SetError Macro Definition in C\nDESCRIPTION: This macro defines Mix_SetError, which is used to report SDL_mixer errors. It is implemented as a direct call to SDL_SetError from the SDL library.  It allows SDL_mixer to set error messages that can then be retrieved using other SDL_mixer functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_SetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define Mix_SetError    SDL_SetError\n```\n\n----------------------------------------\n\nTITLE: Freeing an SDL_Palette in C\nDESCRIPTION: Frees a palette previously created with SDL_AllocPalette. It takes a pointer to the SDL_Palette structure as input. This function has no return value. It is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FreePalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FreePalette(SDL_Palette * palette);\n```\n\n----------------------------------------\n\nTITLE: Get Current Assertion Handler in C\nDESCRIPTION: Retrieves the current assertion handler function pointer that is called when an assertion is triggered. The function also retrieves the associated user data pointer that was passed to SDL_SetAssertionHandler. If no application-specified function is set, it returns the default assertion handler.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAssertionHandler.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AssertionHandler SDL_GetAssertionHandler(void **puserdata);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SensorID in C\nDESCRIPTION: This snippet defines the SDL_SensorID type as an unsigned 32-bit integer (Uint32) in C. It's used to represent a unique sensor ID during the application's runtime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SensorID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_SensorID;\n```\n\n----------------------------------------\n\nTITLE: SDL_ACQUIRE_SHARED Macro Definition in C\nDESCRIPTION: This macro defines SDL_ACQUIRE_SHARED, which is a wrapper around Clang's thread safety annotations. It is used to annotate code indicating that a shared lock is acquired. It takes a mutex 'x' as input and uses the SDL_THREAD_ANNOTATION_ATTRIBUTE__ macro to apply the acquire_shared_capability attribute.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ACQUIRE_SHARED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ACQUIRE_SHARED(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquire_shared_capability(x))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_TV_REMOTE_AS_JOYSTICK in C\nDESCRIPTION: This code snippet defines the SDL_HINT_TV_REMOTE_AS_JOYSTICK macro, which is used to control how Android/tvOS remotes are handled by SDL. Setting this hint allows developers to choose between treating remotes as joysticks or as keyboard input devices. This macro should be defined before calling SDL_Init.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_TV_REMOTE_AS_JOYSTICK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_TV_REMOTE_AS_JOYSTICK \"SDL_TV_REMOTE_AS_JOYSTICK\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_SCANF_VARARG_FUNC Macro in C\nDESCRIPTION: Defines the SDL_SCANF_VARARG_FUNC macro, which uses the __attribute__((format(__scanf__, fmtargnumber, fmtargnumber+1))) to enable scanf-style format checking for vararg functions. If the compiler doesn't support this attribute, the macro is defined as nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SCANF_VARARG_FUNC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SCANF_VARARG_FUNC( fmtargnumber ) __attribute__ (( format( __scanf__, fmtargnumber, fmtargnumber+1 )))\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_CONSTANT in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_CONSTANT macro. It is a bit flag that, when set, indicates that the haptic device supports constant force feedback effects. The macro is defined as a bitwise left shift of 1 by 0 bits, resulting in the value 1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_CONSTANT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_CONSTANT   (1u<<0)\n```\n\n----------------------------------------\n\nTITLE: SDL_HasSSE2 Function Definition in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_HasSSE2 function in C. It takes no arguments and returns an SDL_bool indicating whether the CPU supports SSE2 instructions. It always returns false on non-Intel CPUs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasSSE2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasSSE2(void);\n```\n\n----------------------------------------\n\nTITLE: Loading Images from File\nDESCRIPTION: These functions load images from a filesystem path into a software surface or a GPU texture. `IMG_Load` loads into a surface. `IMG_LoadTexture` loads into a texture using a renderer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_Load(const char *file);                                                                          // Load an image from a filesystem path into a software surface.\nSDL_Texture * IMG_LoadTexture(SDL_Renderer *renderer, const char *file);                                           // Load an image from a filesystem path into a GPU texture.\n```\n\n----------------------------------------\n\nTITLE: Getting the Global Task Queue Handle\nDESCRIPTION: Illustrates how to get the handle of the global task queue using `SDL_GDKGetTaskQueue`. The handle should be closed using `XTaskQueueCloseHandle` when no longer needed to prevent resource leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nSDL_GDKGetTaskQueue();\nXTaskQueueCloseHandle();\n```\n\n----------------------------------------\n\nTITLE: Get Chunk from Channel Mix_GetChunk C\nDESCRIPTION: Retrieves the `Mix_Chunk` currently associated with a specified mixer channel. This function allows access to the audio data currently playing on a channel.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nMix_Chunk * Mix_GetChunk(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadSurfacePixelFloat Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadSurfacePixelFloat function. This function reads a single pixel from a specified SDL_Surface at coordinates (x, y) and stores its RGBA color components as floating-point values through the provided pointers. It requires an SDL_Surface pointer, x and y coordinates (integers), and pointers to float values for red, green, blue, and alpha components.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadSurfacePixelFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadSurfacePixelFloat(SDL_Surface *surface, int x, int y, float *r, float *g, float *b, float *a);\n```\n\n----------------------------------------\n\nTITLE: SDL_mutexV Macro Definition in C\nDESCRIPTION: This code snippet defines a macro SDL_mutexV that simplifies unlocking a mutex. It essentially calls SDL_UnlockMutex with the provided mutex.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnlockMutex.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_mutexV(m)   SDL_UnlockMutex(m)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES in C\nDESCRIPTION: This C macro defines the SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES hint, which determines whether the dummy video driver should save output frames. Setting the hint to \"1\" saves frames to BMP files, while \"0\" disables saving. The default value is \"0\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES \"SDL_VIDEO_DUMMY_SAVE_FRAMES\"\n```\n\n----------------------------------------\n\nTITLE: SDL_pow Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_pow function in C, which takes two double-precision floating-point numbers as input (the base x and the exponent y) and returns a double-precision floating-point result (x raised to the power of y). This function is part of the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_pow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_pow(double x, double y);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_EMSCRIPTEN_ASYNCIFY Macro in C\nDESCRIPTION: This code snippet defines the SDL_HINT_EMSCRIPTEN_ASYNCIFY macro, which is used as a key for setting the hint that controls Emscripten's asyncify behavior in SDL. The macro is a string literal representing the hint's name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_EMSCRIPTEN_ASYNCIFY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EMSCRIPTEN_ASYNCIFY \"SDL_EMSCRIPTEN_ASYNCIFY\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_WINDOWPOS_UNDEFINED_DISPLAY Macro in C\nDESCRIPTION: Defines the SDL_WINDOWPOS_UNDEFINED_DISPLAY macro, which takes a display ID as input and combines it with SDL_WINDOWPOS_UNDEFINED_MASK. This macro is used to indicate that the window position is undefined, targeting the specified display.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINDOWPOS_UNDEFINED_DISPLAY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_UNDEFINED_DISPLAY(X)  (SDL_WINDOWPOS_UNDEFINED_MASK|(X))\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY in C\nDESCRIPTION: Defines the SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY macro, which is a string representing the hint's name. This hint controls whether the Android activity is allowed to be re-created by the operating system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY \"SDL_ANDROID_ALLOW_RECREATE_ACTIVITY\"\n```\n\n----------------------------------------\n\nTITLE: Get Number of Joystick Trackballs in C\nDESCRIPTION: This C code snippet demonstrates how to retrieve the number of trackballs on a given joystick using the SDL_JoystickNumBalls function. The function requires an SDL_Joystick pointer as an argument. It returns the number of trackballs on success or a negative error code on failure. Trackball data is based on relative motion events only.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickNumBalls.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickNumBalls(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_murmur3_32 Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_murmur3_32 function in C, which calculates a 32-bit MurmurHash3 value for a block of data. It takes a pointer to the data, the length of the data in bytes, and a seed value as input. It returns a Uint32 hash value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_murmur3_32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_murmur3_32(const void *data, size_t len, Uint32 seed);\n```\n\n----------------------------------------\n\nTITLE: Setting Font Line Skip with TTF_SetFontLineSkip in C\nDESCRIPTION: This code snippet demonstrates the syntax for using the TTF_SetFontLineSkip function from the SDL_ttf library. It sets the line spacing for a specified TTF_Font object. The function takes a pointer to the TTF_Font and an integer representing the new line spacing as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetFontLineSkip.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontLineSkip(TTF_Font *font, int lineskip);\n```\n\n----------------------------------------\n\nTITLE: SDL_MUSTLOCK Macro Definition in C\nDESCRIPTION: This macro checks if a given SDL_Surface needs to be locked before accessing its pixels. It evaluates to true if the SDL_RLEACCEL flag is set in the surface's flags member.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MUSTLOCK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MUSTLOCK(S) (((S)->flags & SDL_RLEACCEL) != 0)\n```\n\n----------------------------------------\n\nTITLE: Set wrap property\nDESCRIPTION: This command uses `adb shell setprop` to instruct Android to launch the application with a wrapper script. This is a common method for running debuggers or other instrumentation tools.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nadb shell setprop wrap.org.libsdl.app \"logwrapper /data/local/start_valgrind_app\"\n```\n\n----------------------------------------\n\nTITLE: Using SDL_FLOATWORDORDER in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_FLOATWORDORDER macro with preprocessor directives to conditionally execute code based on the system's floating-point endianness. The example uses SDL_Log to output a message if the system is big-endian.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FLOATWORDORDER.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#if SDL_FLOATWORDORDER == SDL_BIG_ENDIAN\nSDL_Log(\"This system's floats are bigendian.\");\n#endif\n```\n\n----------------------------------------\n\nTITLE: Define TTF_MAJOR_VERSION Macro in C\nDESCRIPTION: This macro defines TTF_MAJOR_VERSION as SDL_TTF_MAJOR_VERSION for backwards compatibility within the SDL_ttf library. It's crucial for ensuring that code compiled with older versions of SDL_ttf continues to function correctly with newer versions, as it provides a consistent interface despite potential underlying changes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_MAJOR_VERSION   SDL_TTF_MAJOR_VERSION\n```\n\n----------------------------------------\n\nTITLE: SDL_image API Version Macros\nDESCRIPTION: These macros define the version of SDL_image being used. `SDL_IMAGE_MAJOR_VERSION` specifies the major, minor, and micro version numbers. `SDL_IMAGE_VERSION` is the version number macro. `SDL_IMAGE_VERSION_ATLEAST` evaluates to true if the compiled version is at least X.Y.Z.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_MAJOR_VERSION                                                                                    // Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO\n#define SDL_IMAGE_VERSION                                                                                          // This is the version number macro for the current SDL_image version.\n#define SDL_IMAGE_VERSION_ATLEAST(X, Y, Z)                                                                         // This macro will evaluate to true if compiled with SDL_image at least X.Y.Z.\n```\n\n----------------------------------------\n\nTITLE: List connected ADB devices\nDESCRIPTION: This command lists all Android devices currently connected to the computer and visible through ADB (Android Debug Bridge).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nadb devices\n```\n\n----------------------------------------\n\nTITLE: SDL_ConvertEventToRenderCoordinates Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_ConvertEventToRenderCoordinates function in C. It takes a renderer and an event as input and returns a boolean indicating success or failure. This function is available since SDL 3.2.0 and converts event coordinates to rendering coordinates.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ConvertEventToRenderCoordinates.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ConvertEventToRenderCoordinates(SDL_Renderer *renderer, SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MOUSE_RELATIVE_MODE_CENTER in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MOUSE_RELATIVE_MODE_CENTER macro, which is a string literal used to identify the hint. This hint controls whether relative mouse mode restricts the mouse to the center of the window or the entire window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_RELATIVE_MODE_CENTER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_MODE_CENTER \"SDL_MOUSE_RELATIVE_MODE_CENTER\"\n```\n\n----------------------------------------\n\nTITLE: Defining IMG_SetError Macro in C\nDESCRIPTION: This macro defines IMG_SetError as an alias for SDL_SetError. It allows the SDL_image library to set the last error message, which can then be retrieved using SDL_GetError or IMG_GetError. This macro is part of the SDL_image library and requires SDL to be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_SetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define IMG_SetError    SDL_SetError\n```\n\n----------------------------------------\n\nTITLE: SDL_FPoint Structure Definition in C\nDESCRIPTION: Defines the SDL_FPoint structure, which represents a point with floating-point coordinates (x, y). This structure is used for functions that require precise positioning and calculations with floating-point numbers within the SDL library. It includes two float members representing the x and y coordinates.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FPoint.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_FPoint\n{\n    float x;\n    float y;\n} SDL_FPoint;\n```\n\n----------------------------------------\n\nTITLE: Fading Out Music SDL_mixer C\nDESCRIPTION: Halts the music stream after fading it out over a specified duration. Takes the fade-out duration in milliseconds as a parameter. Returns true on success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_FadeOutMusic(int ms);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_SPRING in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_SPRING macro as a bit flag used to indicate support for the spring haptic effect. The value (1u<<7) represents the bitwise representation of this flag. It relies on the SDL_haptic.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_SPRING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SPRING     (1u<<7)\n```\n\n----------------------------------------\n\nTITLE: SDL_RWLock Structure Definition in C\nDESCRIPTION: This snippet shows the definition of the SDL_RWLock structure in C. It is an opaque structure representing a read-write lock, where multiple readers can hold the lock simultaneously, but only one writer can hold it at a time. This structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RWLock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_RWLock SDL_RWLock;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER in C\nDESCRIPTION: Defines the SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER macro which represents the string used to set the hint that controls whether SDL requires DRM master access when initializing the KMSDRM video backend. This hint must be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER \"SDL_KMSDRM_REQUIRE_DRM_MASTER\"\n```\n\n----------------------------------------\n\nTITLE: SDL_wcsstr Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_wcsstr function. It takes two const wchar_t pointers as input, haystack (the string to search in) and needle (the string to search for). It returns a wchar_t pointer to the first instance of the needle in the haystack, or NULL if not found. Requires inclusion of SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcsstr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nwchar_t * SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle);\n```\n\n----------------------------------------\n\nTITLE: Get Timidity Configuration Path SDL_mixer (C)\nDESCRIPTION: This function retrieves the full path of a previously specified Timidity configuration file. It returns a const char* representing the file path or NULL if no path has been specified. The returned pointer points to internal memory and should not be modified or freed by the caller.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetTimidityCfg.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetTimidityCfg(void);\n```\n\n----------------------------------------\n\nTITLE: Get Text Color C\nDESCRIPTION: This function retrieves the color of a text object, storing the color components in the provided pointers. It takes a TTF_Text pointer and pointers to unsigned 8-bit integers for red, green, blue, and alpha as input. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_94\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextColor(TTF_Text *text, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);\n```\n\n----------------------------------------\n\nTITLE: Documenting a Symbol using Doxygen format in C\nDESCRIPTION: This code snippet demonstrates how to document a symbol using Doxygen-style comments. These comments are used by the wikiheaders script to generate well-formatted wiki pages, manpages, and books in LaTeX format. The comment must start with '/**' in the first column of the line.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/documentation-rules.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n/**\n * This is a function that does something.\n *\n * It can be used for frozzling bobbles. Be aware that the Frozulator module\n * _must_ be initialized before calling this.\n *\n * \\param frozzlevel The amount of frozzling to perform.\n * \\param color What color bobble to frozzle. 0 is red, 1 is green.\n * \\returns the number of bobbles that were actually frozzled, -1 on error.\n *\n * \\threadsafety Do not call this from two threads at once, or the bobbles\n *               won't all frozzle correctly!\n *\n * \\since This function is available since SDL 7.3.1.\n *\n * \\sa SDL_DoSomethingElse\n */\nextern SDL_DECLSPEC int SDLCALL SDL_DoSomething(int frozzlevel, int color);\n```\n\n----------------------------------------\n\nTITLE: SDL_SwapFloatLE Definition in C\nDESCRIPTION: This macro swaps a floating-point value from little-endian to the native byte order. It returns the value in native byte order. If the system is little-endian, the input value is returned unchanged. The macro utilizes the SwapOnlyIfNecessary function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SwapFloatLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SwapFloatLE(x) SwapOnlyIfNecessary(x)\n```\n\n----------------------------------------\n\nTITLE: SDL_vsnprintf Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_vsnprintf function in C.  The function takes a character buffer, the maximum length of the buffer, a format string, and a va_list as input. It returns the number of bytes that should be written (excluding the null terminator) or a negative value on error. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_vsnprintf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_vsnprintf(char *text, size_t maxlen, const char *fmt, va_list ap);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_ResolveIP Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_ResolveIP function which resolves an IP address to a hostname. It takes a pointer to a constant IPaddress structure as input and returns a constant character pointer representing the hostname or NULL if resolution fails.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_ResolveIP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDLNet_ResolveIP(const IPaddress *ip);\n```\n\n----------------------------------------\n\nTITLE: SDL_INOUT_Z_CAP Macro Definition\nDESCRIPTION: Defines the SDL_INOUT_Z_CAP macro, which expands to _Inout_z_cap_(x) on compilers that support it, and to nothing otherwise. This macro is used to annotate function parameters with input/output string buffer size information, allowing compilers and static analysis tools to check for potential buffer overflows. The macro takes the maximum length of the buffer as its parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_INOUT_Z_CAP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_INOUT_Z_CAP(x) _Inout_z_cap_(x)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL in C\nDESCRIPTION: This C macro defines the SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL hint. It is used to configure if SDL_THREAD_PRIORITY_TIME_CRITICAL should be treated as realtime. This allows SDL to apply specific configurations such as setting SCHED_RESET_ON_FORK bit and configuring RLIMIT_RTTIME on platforms like Linux.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL \"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL\"\n```\n\n----------------------------------------\n\nTITLE: SDL_NS_PER_MS Macro Definition in C\nDESCRIPTION: Defines the SDL_NS_PER_MS macro, representing the number of nanoseconds in a millisecond. It is a constant value equal to 1000000. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NS_PER_MS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NS_PER_MS       1000000\n```\n\n----------------------------------------\n\nTITLE: Get Font Direction with TTF_GetFontDirection in C\nDESCRIPTION: Retrieves the text shaping direction of a font using TTF_GetFontDirection. The function takes a TTF_Font pointer as input and returns a TTF_Direction enumeration value. The returned direction dictates how text is shaped and rendered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontDirection.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_Direction TTF_GetFontDirection(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Building SDL on macOS using CMake\nDESCRIPTION: This snippet shows how to build and install SDL on macOS using CMake, creating a framework and specifying architectures. It generates build files, builds the library and installs it to ~/SDL. It is necessary to specify the architecture since macOS supports both arm64 and x86_64 architectures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S . -B build -DSDL_FRAMEWORK=ON -DCMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\"\ncmake --build build\ncmake --install build --prefix ~/SDL\n```\n\n----------------------------------------\n\nTITLE: Define SDL_VirtualJoystickTouchpadDesc Structure in C\nDESCRIPTION: Defines the SDL_VirtualJoystickTouchpadDesc structure in C, used to describe a virtual joystick touchpad. It contains a field for the number of simultaneous fingers (nfingers) and padding.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VirtualJoystickTouchpadDesc.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_VirtualJoystickTouchpadDesc\n{\n    Uint16 nfingers;    /**< the number of simultaneous fingers on this touchpad */\n    Uint16 padding[3];\n} SDL_VirtualJoystickTouchpadDesc;\n```\n\n----------------------------------------\n\nTITLE: Get Non-Portable Sensor Type in SDL2 (C)\nDESCRIPTION: Retrieves the platform-dependent type of an SDL_Sensor object. The function takes a pointer to an SDL_Sensor as input and returns an integer representing the sensor's type. Returns -1 if the sensor pointer is NULL. Requires SDL 2.0.9 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetNonPortableType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SensorGetNonPortableType(SDL_Sensor *sensor);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL in C\nDESCRIPTION: Defines the SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL hint as a string literal. This hint controls whether SDL uses Kernel Semaphores or the WaitOnAddress API for synchronization primitives on Windows. The hint should be set before SDL initialization to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL \"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_WINDOW_VISUALID in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_WINDOW_VISUALID macro, which is used as a string key for setting the video X11 window visual ID hint. This hint must be set before creating a window to take effect. The macro expands to the string literal \"SDL_VIDEO_X11_WINDOW_VISUALID\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_X11_WINDOW_VISUALID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_WINDOW_VISUALID \"SDL_VIDEO_X11_WINDOW_VISUALID\"\n```\n\n----------------------------------------\n\nTITLE: SDL_zeroa Macro Definition in C\nDESCRIPTION: This code defines the SDL_zeroa macro. It utilizes SDL_memset to set all bytes in the given array 'x' to zero. The sizeof operator determines the size of the array, ensuring that the entire array is cleared. 'x' must be an array; objects or pointers will not work.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_zeroa.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_zeroa(x) SDL_memset((x), 0, sizeof((x)))\n```\n\n----------------------------------------\n\nTITLE: Set Text Wrap Width - SDL_ttf\nDESCRIPTION: Sets the wrap width for a text object.  If `wrap_width` is greater than 0, the text will wrap to fit within the specified width.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_98\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextWrapWidth(TTF_Text *text, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadS16BE Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadS16BE function, which reads 16 bits of big-endian data from an SDL_IOStream. It takes a pointer to an SDL_IOStream and a pointer to a Sint16 value as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadS16BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ReadS16BE(SDL_IOStream *src, Sint16 *value);\n```\n\n----------------------------------------\n\nTITLE: Using ADB to List SD Card Files\nDESCRIPTION: This command uses adb shell to execute the ls command on the /sdcard directory of the Android device, showing the files stored there.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nadb shell ls /sdcard/\n```\n\n----------------------------------------\n\nTITLE: Defining Mix_EffectDone_t Callback in C\nDESCRIPTION: This code defines the Mix_EffectDone_t callback function type, which is used in SDL_mixer to signal the completion of audio playback on a specific channel. The callback provides the channel number (chan) and user data (udata) associated with the effect. This function is called when a channel finishes playing or is halted.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_EffectDone_t.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *Mix_EffectDone_t)(int chan, void *udata);\n```\n\n----------------------------------------\n\nTITLE: Building SDL with Emscripten using CMake and Make\nDESCRIPTION: These commands demonstrate how to build SDL using Emscripten. It creates a build directory, navigates into it, and uses `emcmake` to configure the CMake project for Emscripten. Then, `emmake make` compiles the project.  This includes steps for enabling threads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/emscripten.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\nemcmake cmake ..\n# you can also do `emcmake cmake -G Ninja ..` and then use `ninja` instead of this command.\nemmake make -j4\n```\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\nemcmake cmake -DSDL_THREADS=ON ..\n# you can also do `emcmake cmake -G Ninja ..` and then use `ninja` instead of this command.\nemmake make -j4\n```\n\n----------------------------------------\n\nTITLE: SDL_IMAGE_COMPILEDVERSION Macro Definition in C\nDESCRIPTION: Defines the SDL_IMAGE_COMPILEDVERSION macro using SDL_VERSIONNUM to encapsulate the major, minor, and patchlevel versions of the SDL_image library. This macro provides a way to retrieve the compiled version of SDL_image, but it's deprecated and should be replaced by SDL_IMAGE_VERSION_ATLEAST or SDL_IMAGE_VERSION.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/SDL_IMAGE_COMPILEDVERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_COMPILEDVERSION \\\n    SDL_VERSIONNUM(SDL_IMAGE_MAJOR_VERSION, SDL_IMAGE_MINOR_VERSION, SDL_IMAGE_PATCHLEVEL)\n```\n\n----------------------------------------\n\nTITLE: SDL_AppEvent_func Definition in C\nDESCRIPTION: Defines the SDL_AppEvent_func function pointer type, which is used to handle SDL_AppEvent events. This function pointer takes an application state pointer and an SDL_Event pointer as arguments and returns an SDL_AppResult.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppEvent_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef SDL_AppResult (SDLCALL *SDL_AppEvent_func)(void *appstate, SDL_Event *event);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_PS2_DYNAMIC_VSYNC in C\nDESCRIPTION: This code snippet defines the SDL_HINT_PS2_DYNAMIC_VSYNC hint as a string literal. It is used to enable or disable dynamic VSYNC adjustment on the PlayStation 2 platform.  The hint can be set before SDL_Init is called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_PS2_DYNAMIC_VSYNC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_PS2_DYNAMIC_VSYNC    \"SDL_PS2_DYNAMIC_VSYNC\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RPI_VIDEO_LAYER\nDESCRIPTION: This code snippet defines the SDL_HINT_RPI_VIDEO_LAYER macro. This macro should be set before SDL is initialized. It's used to control the Dispmanx layer used on a Raspberry Pi, also known as Z-order. The value can be positive or negative. Default is 10000.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RPI_VIDEO_LAYER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RPI_VIDEO_LAYER \"SDL_RPI_VIDEO_LAYER\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_EGLAttrib in C\nDESCRIPTION: This code snippet defines the SDL_EGLAttrib type as an integer pointer (intptr_t). It's used for specifying EGL attributes when creating an EGL context within SDL3. The type is available starting from SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EGLAttrib.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef intptr_t SDL_EGLAttrib;\n```\n\n----------------------------------------\n\nTITLE: Mix_GetSynchroValue Syntax in C\nDESCRIPTION: Defines the syntax for the Mix_GetSynchroValue function in C. The function takes no arguments and returns an integer value, which is always -1.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetSynchroValue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GetSynchroValue(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_LinuxSetThreadPriority Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_LinuxSetThreadPriority function in C. It takes a thread ID (Sint64) and a priority value (int) as input and returns an integer indicating success or failure. It sets the UNIX nice value for a thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LinuxSetThreadPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_LinuxSetThreadPriority(Sint64 threadID, int priority);\n```\n\n----------------------------------------\n\nTITLE: SDL_FlushEvents Syntax in C\nDESCRIPTION: The SDL_FlushEvents function clears events of a range of types from the event queue. It takes two parameters: minType and maxType, which define the inclusive range of event types to be cleared. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FlushEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FlushEvents(Uint32 minType, Uint32 maxType);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteU16BE Function Definition (C)\nDESCRIPTION: Defines the SDL_WriteU16BE function signature, which takes an SDL_IOStream pointer and a Uint16 value as input. It writes the Uint16 value to the specified stream in big-endian format, handling byte swapping if required. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteU16BE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteU16BE(SDL_IOStream *dst, Uint16 value);\n```\n\n----------------------------------------\n\nTITLE: SDL_SetJoystickVirtualTouchpad Function Signature in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_SetJoystickVirtualTouchpad function, which allows setting touchpad finger state on an opened virtual joystick. The function takes a joystick pointer, touchpad index, finger index, down state, x and y coordinates, and pressure as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetJoystickVirtualTouchpad.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetJoystickVirtualTouchpad(SDL_Joystick *joystick, int touchpad, int finger, bool down, float x, float y, float pressure);\n```\n\n----------------------------------------\n\nTITLE: SDL_MAX_UINT64 Macro Definition\nDESCRIPTION: Defines the SDL_MAX_UINT64 macro, representing the maximum value for a Uint64. This macro provides a convenient way to access the maximum possible value of the Uint64 type. The value is cast to Uint64 to ensure correct type handling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Uint64.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAX_UINT64  ((Uint64)0xFFFFFFFFFFFFFFFFull)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_FORCE_EGL in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_FORCE_EGL macro, used to set the hint that forces SDL to use EGL for OpenGL context creation. This hint should be set before SDL initialization to take effect. It accepts values \"0\" (platform-specific) or \"1\" (EGL).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_FORCE_EGL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_FORCE_EGL \"SDL_VIDEO_FORCE_EGL\"\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_Recv Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_UDP_Recv function. It takes a UDPsocket and a UDPpacket pointer as input and returns an integer indicating success, failure, or if no packets are available. SDL_net is a separate library from SDL, and this function is available since SDL_net 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_Recv.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_UDP_Recv(UDPsocket sock, UDPpacket *packet);\n```\n\n----------------------------------------\n\nTITLE: SDL_RendererInfo Structure Definition in C\nDESCRIPTION: Defines the SDL_RendererInfo structure, which contains information about a renderer's capabilities. The structure includes fields for the renderer's name, supported flags, the number of available texture formats, an array of texture formats, and the maximum texture width and height.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RendererInfo.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_RendererInfo\n{\n    const char *name;           /**< The name of the renderer */\n    Uint32 flags;               /**< Supported SDL_RendererFlags */\n    Uint32 num_texture_formats; /**< The number of available texture formats */\n    Uint32 texture_formats[16]; /**< The available texture formats */\n    int max_texture_width;      /**< The maximum texture width */\n    int max_texture_height;     /**< The maximum texture height */\n} SDL_RendererInfo;\n```\n\n----------------------------------------\n\nTITLE: Getting Text Color C\nDESCRIPTION: This function gets the color of a text object. It requires a pointer to the TTF_Text and pointers to Uint8 variables to store the red, green, blue, and alpha components. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_68\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextColor(TTF_Text *text, Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);\n```\n\n----------------------------------------\n\nTITLE: Halt Channel Playback Mix_HaltChannel C\nDESCRIPTION: Halts the playback of audio on a specified channel. This function immediately stops any audio currently playing on the given channel.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_HaltChannel(int channel);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_LINUX_CLASSIC in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_LINUX_CLASSIC macro, which is used to specify whether SDL should use the classic /dev/input/js* or the newer /dev/input/event* joystick interface on Linux. This hint must be set before SDL is initialized to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_LINUX_CLASSIC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_LINUX_CLASSIC \"SDL_JOYSTICK_LINUX_CLASSIC\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_OPENGL_ES_DRIVER in C\nDESCRIPTION: This code snippet defines the SDL_HINT_OPENGL_ES_DRIVER macro, which is used to set the hint controlling the OpenGL ES driver selection. The hint allows specifying whether to use the ES profile of OpenGL or to load a separate OpenGL ES library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_OPENGL_ES_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_OPENGL_ES_DRIVER   \"SDL_OPENGL_ES_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Get Audio Status SDL (C)\nDESCRIPTION: Retrieves the audio status of the audio device opened by SDL_OpenAudio(). It returns an SDL_AudioStatus enum indicating the current status (e.g., stopped, playing, paused). This function is a legacy method; SDL_GetAudioDeviceStatus is recommended for newer programs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAudioStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_AudioStatus SDL_GetAudioStatus(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_vsscanf Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_vsscanf function in C. This function scans a string according to a format string and stores the results in variables pointed to by the va_list ap.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_vsscanf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_vsscanf(const char *text, const char *fmt, va_list ap);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MOUSE_AUTO_CAPTURE in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_AUTO_CAPTURE hint as a string literal. This hint controls whether the mouse is automatically captured when mouse buttons are pressed. Setting it to \"1\" enables capture, while \"0\" disables it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MOUSE_AUTO_CAPTURE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_AUTO_CAPTURE \"SDL_MOUSE_AUTO_CAPTURE\"\n```\n\n----------------------------------------\n\nTITLE: TTF_AddFallbackFont Function\nDESCRIPTION: Adds a fallback font to an existing font. If a glyph is not found in the primary font, the fallback font will be used to render it. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_11\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_AddFallbackFont(TTF_Font *font, TTF_Font *fallback);                                                                              // Add a fallback font.\n```\n\n----------------------------------------\n\nTITLE: Define SDL_RELEASE Macro in C\nDESCRIPTION: This C macro, SDL_RELEASE(x), is a wrapper around Clang's thread safety analysis annotations. It uses SDL_THREAD_ANNOTATION_ATTRIBUTE__ to define the release_capability attribute for the mutex 'x'. This informs the Clang analyzer that the mutex 'x' is being released at this point in the code, helping to identify potential thread safety issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RELEASE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RELEASE(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_capability(x))\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioDeviceID Typedef Definition in C\nDESCRIPTION: Defines SDL_AudioDeviceID as an unsigned 32-bit integer (Uint32). This type is used to identify audio devices opened with SDL_OpenAudioDevice(). Device ID 1 is reserved for SDL_OpenAudio().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioDeviceID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_AudioDeviceID;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT in C\nDESCRIPTION: Defines the macro for the SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT hint. This hint is used to specify a list of game controller devices to ignore during scanning except for the ones listed in the hint's value. The format is a comma-separated list of USB VID/PID pairs in hexadecimal form or a path to a file containing the list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT \"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RENDER_OPENGL_SHADERS in C\nDESCRIPTION: Defines the SDL_HINT_RENDER_OPENGL_SHADERS macro as a string literal. This hint controls whether the OpenGL render driver uses shaders if they are available. Setting this hint allows the user to enable or disable shaders.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_OPENGL_SHADERS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_OPENGL_SHADERS      \"SDL_RENDER_OPENGL_SHADERS\"\n```\n\n----------------------------------------\n\nTITLE: Get Text Direction C\nDESCRIPTION: This function retrieves the direction currently used for text shaping in a text object. It takes a TTF_Text pointer as input and returns a TTF_Direction value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_89\n\nLANGUAGE: C\nCODE:\n```\nTTF_Direction TTF_GetTextDirection(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_APPLE Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_APPLE macro. It's a preprocessor definition that sets SDL_PLATFORM_APPLE to 1 if the compilation target is an Apple platform. This enables conditional compilation based on the target operating system.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_APPLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_APPLE 1\n```\n\n----------------------------------------\n\nTITLE: Minimal CMake Toolchain File for MinGW-w64\nDESCRIPTION: This CMake code defines a minimal toolchain file for building Windows applications with the MinGW-w64 compiler. It specifies the system name, processor architecture, and the paths to the C, C++, and resource compilers. This file is used to instruct CMake to use the MinGW-w64 toolchain instead of the default Visual Studio toolchain. Requires CMake.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/windows.md#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_SYSTEM_NAME Windows)\nset(CMAKE_SYSTEM_PROCESSOR x86_64)\n\nfind_program(CMAKE_C_COMPILER NAMES x86_64-w64-mingw32-gcc REQUIRED)\nfind_program(CMAKE_CXX_COMPILER NAMES x86_64-w64-mingw32-g++ REQUIRED)\nfind_program(CMAKE_RC_COMPILER NAMES x86_64-w64-mingw32-windres windres REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Get Haptic Features SDL\nDESCRIPTION: Retrieves the supported features of an SDL_Haptic device. The function takes a pointer to an SDL_Haptic structure as input and returns a Uint32 representing the bitwise OR of the supported features. A return value of 0 indicates failure; SDL_GetError() can be called for more information. Requires SDL 3.2.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetHapticFeatures.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetHapticFeatures(SDL_Haptic *haptic);\n```\n\n----------------------------------------\n\nTITLE: Get Font Wrap Alignment in SDL_ttf (C)\nDESCRIPTION: This code snippet shows the syntax for using TTF_GetFontWrapAlignment to query the horizontal alignment used for text wrapping with a given font in SDL_ttf. It takes a pointer to a TTF_Font structure as input and returns a TTF_HorizontalAlignment enum value representing the current alignment.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontWrapAlignment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nTTF_HorizontalAlignment TTF_GetFontWrapAlignment(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Channel Grouping\nDESCRIPTION: These functions allow you to group channels together for easier management. You can reserve channels, assign channels to a tag, and find available/oldest/newest channels within a group.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nint Mix_ReserveChannels(int num);                                                         // Reserve the first channels for the application.\nbool Mix_GroupChannel(int which, int tag);                                                // Assign a tag to a channel.\nbool Mix_GroupChannels(int from, int to, int tag);                                        // Assign several consecutive channels to the same tag.\nint Mix_GroupAvailable(int tag);                                                          // Finds the first available channel in a group of channels.\nint Mix_GroupCount(int tag);                                                              // Returns the number of channels in a group.\nint Mix_GroupOldest(int tag);                                                             // Find the \"oldest\" sample playing in a group of channels.\nint Mix_GroupNewer(int tag);                                                              // Find the \"most recent\" sample playing in a group of channels.\n```\n\n----------------------------------------\n\nTITLE: Setting the Xbox Live Sandbox\nDESCRIPTION: Shows how to switch the Xbox Live sandbox using the `XblPCSandbox` command. It details switching to a specific sandbox and back to the retail sandbox, which is crucial for testing Xbox Live functionality.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_5\n\nLANGUAGE: bat\nCODE:\n```\nXblPCSandbox SANDBOX.#\nXblPCSandbox RETAIL\n```\n\n----------------------------------------\n\nTITLE: SDL_PenInputFlags Typedef Definition in C\nDESCRIPTION: Defines the SDL_PenInputFlags type as an unsigned 32-bit integer (Uint32) for storing pen input flags. This allows for representing various pen states as bit flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenInputFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_PenInputFlags;\n```\n\n----------------------------------------\n\nTITLE: Installing debug APK using gradlew\nDESCRIPTION: Installs the debug version of the compiled Android application on a connected device or emulator using Gradle. This command deploys the APK to the target device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /usr/src/SDL3/build/org.libsdl.testgles/\n./gradlew installDebug\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIu64 Macro Definition in C\nDESCRIPTION: Defines the SDL_PRIu64 macro as a string literal \"llu\" for formatting Uint64 values in printf-style functions. This allows for platform-independent formatting of 64-bit unsigned integers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIu64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRIu64 \"llu\"\n```\n\n----------------------------------------\n\nTITLE: Setting Master Volume SDL_mixer C\nDESCRIPTION: Sets the master volume for all audio channels using SDL_mixer. The function accepts an integer representing the desired volume level. Returns the previous volume level.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nint Mix_MasterVolume(int volume);\n```\n\n----------------------------------------\n\nTITLE: Defining MIX_CHANNEL_POST Macro in C\nDESCRIPTION: This code snippet defines the MIX_CHANNEL_POST macro, which is used to specify that effects should be applied to the postmix rather than to a specific channel. This allows for global audio effects processing after individual channel mixes have been completed. The value -2 is used as a magic number to identify this postmix operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/MIX_CHANNEL_POST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define MIX_CHANNEL_POST  (-2)\n```\n\n----------------------------------------\n\nTITLE: Installing Xbox Application Package\nDESCRIPTION: This snippet shows how to install a packaged application on Xbox using the `xbapp` command. [PACKAGE].xvc represents the name of the packaged Xbox application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_9\n\nLANGUAGE: batch\nCODE:\n```\nxbapp install [PACKAGE].xvc\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_APP_NAME in C\nDESCRIPTION: This code snippet shows how SDL_HINT_APP_NAME is defined as a macro. This macro is a string literal that represents the name of the hint used to set the application name. It is intended to be used with SDL_SetHint or SDL_SetHintWithPriority before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_APP_NAME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_APP_NAME \"SDL_APP_NAME\"\n```\n\n----------------------------------------\n\nTITLE: SDL_mixer Initialization Flags Definition in C\nDESCRIPTION: Defines the `MIX_InitFlags` type and several preprocessor definitions for use with the `Mix_Init` function in SDL_mixer. Each macro specifies a different audio format to support, like FLAC, MOD, MP3, OGG, MID, OPUS, and WAVPACK. These flags are bitwise ORed together to indicate support for multiple formats.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/MIX_InitFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 MIX_InitFlags;\n\n#define MIX_INIT_FLAC       0x00000001\n#define MIX_INIT_MOD        0x00000002\n#define MIX_INIT_MP3        0x00000008\n#define MIX_INIT_OGG        0x00000010\n#define MIX_INIT_MID        0x00000020\n#define MIX_INIT_OPUS       0x00000040\n#define MIX_INIT_WAVPACK    0x00000080\n```\n\n----------------------------------------\n\nTITLE: Get External Storage Path in Android (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_AndroidGetExternalStoragePath function, which retrieves the path used for external storage for an Android application. It takes no arguments and returns a const char* representing the path or NULL on failure. The returned path is unique to the application but publicly accessible.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AndroidGetExternalStoragePath.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_AndroidGetExternalStoragePath(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontDescent Function\nDESCRIPTION: Queries the offset from the baseline to the bottom of a font, in pixels. The descent is typically a negative value, representing the distance below the baseline that the lowest glyph extends.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontDescent(const TTF_Font *font);                                                                                              // Query the offset from the baseline to the bottom of a font.\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioStreamAvailable Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_AudioStreamAvailable function in C. It takes an SDL_AudioStream pointer as input and returns an integer representing the number of converted/resampled bytes available in the stream. It is available since SDL 2.0.7.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioStreamAvailable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AudioStreamAvailable(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: SDL_sqrtf Function Definition in C\nDESCRIPTION: Defines the SDL_sqrtf function, which calculates the square root of a single-precision floating-point number. It accepts a float 'x' as input and returns its square root as a float. The input 'x' must be greater than or equal to 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_sqrtf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_sqrtf(float x);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GameControllerButton Enum in C\nDESCRIPTION: This code snippet defines the `SDL_GameControllerButton` enumeration, listing all possible buttons available on a game controller. It includes standard buttons (A, B, X, Y), directional pad buttons (DPAD_UP, DPAD_DOWN, DPAD_LEFT, DPAD_RIGHT), shoulder buttons (LEFTSHOULDER, RIGHTSHOULDER), stick buttons (LEFTSTICK, RIGHTSTICK), and special buttons such as paddles and the touchpad. The enumeration is used to identify specific button presses during game controller input handling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerButton.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GameControllerButton\n{\n    SDL_CONTROLLER_BUTTON_INVALID = -1,\n    SDL_CONTROLLER_BUTTON_A,\n    SDL_CONTROLLER_BUTTON_B,\n    SDL_CONTROLLER_BUTTON_X,\n    SDL_CONTROLLER_BUTTON_Y,\n    SDL_CONTROLLER_BUTTON_BACK,\n    SDL_CONTROLLER_BUTTON_GUIDE,\n    SDL_CONTROLLER_BUTTON_START,\n    SDL_CONTROLLER_BUTTON_LEFTSTICK,\n    SDL_CONTROLLER_BUTTON_RIGHTSTICK,\n    SDL_CONTROLLER_BUTTON_LEFTSHOULDER,\n    SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,\n    SDL_CONTROLLER_BUTTON_DPAD_UP,\n    SDL_CONTROLLER_BUTTON_DPAD_DOWN,\n    SDL_CONTROLLER_BUTTON_DPAD_LEFT,\n    SDL_CONTROLLER_BUTTON_DPAD_RIGHT,\n    SDL_CONTROLLER_BUTTON_MISC1,    /* Xbox Series X share button, PS5 microphone button, Nintendo Switch Pro capture button, Amazon Luna microphone button */\n    SDL_CONTROLLER_BUTTON_PADDLE1,  /* Xbox Elite paddle P1 (upper left, facing the back) */\n    SDL_CONTROLLER_BUTTON_PADDLE2,  /* Xbox Elite paddle P3 (upper right, facing the back) */\n    SDL_CONTROLLER_BUTTON_PADDLE3,  /* Xbox Elite paddle P2 (lower left, facing the back) */\n    SDL_CONTROLLER_BUTTON_PADDLE4,  /* Xbox Elite paddle P4 (lower right, facing the back) */\n    SDL_CONTROLLER_BUTTON_TOUCHPAD, /* PS4/PS5 touchpad button */\n    SDL_CONTROLLER_BUTTON_MAX\n} SDL_GameControllerButton;\n```\n\n----------------------------------------\n\nTITLE: Check if Joystick is Virtual - C\nDESCRIPTION: This code snippet shows the syntax of the SDL_JoystickIsVirtual function. It takes a device index as input and returns SDL_TRUE if the joystick is virtual, SDL_FALSE otherwise. It requires the SDL_joystick.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickIsVirtual.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_JoystickIsVirtual(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_CUSTOM macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_CUSTOM macro as a bit flag (1u<<11). This macro is used to identify and enable custom haptic effects within the SDL library. It relies on the SDL_haptic.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_CUSTOM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_CUSTOM     (1u<<11)\n```\n\n----------------------------------------\n\nTITLE: Get DXGI Output Info - C\nDESCRIPTION: This function retrieves the DXGI adapter and output indices for the specified display index using SDL_DXGIGetOutputInfo. The function takes a display index as input and populates the provided pointers with the adapter and output indices. It returns SDL_TRUE on success or SDL_FALSE on failure. It requires the SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DXGIGetOutputInfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_DXGIGetOutputInfo( int displayIndex, int *adapterIndex, int *outputIndex );\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VITA_PVR_OPENGL in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VITA_PVR_OPENGL macro, which represents the string \"SDL_VITA_PVR_OPENGL\". This string is used as the key for setting the hint using SDL_SetHint. The value of the hint determines whether OpenGL or OpenGL ES is used on the PlayStation Vita.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VITA_PVR_OPENGL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VITA_PVR_OPENGL \"SDL_VITA_PVR_OPENGL\"\n```\n\n----------------------------------------\n\nTITLE: Jumping to Order (MOD) SDL_mixer C\nDESCRIPTION: Jumps to a specified order within the MOD music sequence. Takes the order number as input. Returns true on success, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_34\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_ModMusicJumpToOrder(int order);\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Keyboard Configuration\nDESCRIPTION: Reconfigures the keyboard layout on Raspbian.  This command launches a configuration utility to choose the correct keyboard layout used by the kernel and SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsudo dpkg-reconfigure keyboard-configuration\n```\n\n----------------------------------------\n\nTITLE: Define SDL_RenderEvent structure in C\nDESCRIPTION: This C code snippet defines the SDL_RenderEvent structure. It contains fields for the event type (SDL_EventType), a reserved field, a timestamp (Uint64), and the window ID (SDL_WindowID). The structure is used to represent events related to the renderer, such as target resets or device loss.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_RenderEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_RENDER_TARGETS_RESET, SDL_EVENT_RENDER_DEVICE_RESET, SDL_EVENT_RENDER_DEVICE_LOST */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID; /**< The window containing the renderer in question. */\n} SDL_RenderEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUTextureSamplerBinding Structure Definition in C\nDESCRIPTION: Defines the SDL_GPUTextureSamplerBinding structure, which is used to specify a texture and sampler binding. The texture must have been created with SDL_GPU_TEXTUREUSAGE_SAMPLER. The sampler is the SDL_GPUSampler to bind.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureSamplerBinding.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUTextureSamplerBinding\n{\n    SDL_GPUTexture *texture;  /**< The texture to bind. Must have been created with SDL_GPU_TEXTUREUSAGE_SAMPLER. */\n    SDL_GPUSampler *sampler;  /**< The sampler to bind. */\n} SDL_GPUTextureSamplerBinding;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TTF_VERSION Macro in C\nDESCRIPTION: This code snippet defines the SDL_TTF_VERSION macro using SDL_VERSIONNUM and SDL_TTF_MAJOR_VERSION, SDL_TTF_MINOR_VERSION, and SDL_TTF_MICRO_VERSION. It is part of the SDL_ttf library and provides a way to determine the library's version. The macro is defined in the SDL3_ttf/SDL_ttf.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/SDL_TTF_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TTF_VERSION \\\n    SDL_VERSIONNUM(SDL_TTF_MAJOR_VERSION, SDL_TTF_MINOR_VERSION, SDL_TTF_MICRO_VERSION)\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap32LE Macro Definition (C)\nDESCRIPTION: Defines the SDL_Swap32LE macro that converts a 32-bit little-endian value to native byte order. It utilizes the SwapOnlyIfNecessary macro for conditional swapping, depending on the system's endianness. The input 'x' is the 32-bit value to swap, and the return value is 'x' in native byte order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap32LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_Swap32LE(x) SwapOnlyIfNecessary(x)\n```\n\n----------------------------------------\n\nTITLE: SDL_log Syntax\nDESCRIPTION: Defines the syntax for the SDL_log function, which takes a double as input and returns a double representing the natural logarithm of the input.  The input value `x` must be greater than 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_log.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_log(double x);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontSize Function\nDESCRIPTION: Retrieves the current font size of a TTF_Font object. This returns the size set by TTF_SetFontSize or the initial size specified when opening the font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_16\n\nLANGUAGE: C\nCODE:\n```\nfloat TTF_GetFontSize(TTF_Font *font);                                                                                                     // Get the size of a font.\n```\n\n----------------------------------------\n\nTITLE: Implementing SDL2's SDL_CreateRGBSurfaceWithFormatFrom in SDL3\nDESCRIPTION: This code snippet reimplements the SDL2 `SDL_CreateRGBSurfaceWithFormatFrom` function using SDL3's `SDL_CreateSurfaceFrom`.  This allows users to maintain compatibility while leveraging the new SDL3 API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_41\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *SDL_CreateRGBSurfaceWithFormatFrom(void *pixels, int width, int height, int depth, int pitch, Uint32 format)\n{\n    return SDL_CreateSurfaceFrom(width, height, format, pixels, pitch);\n}\n```\n\n----------------------------------------\n\nTITLE: Sint64 Minimum Value Constant\nDESCRIPTION: Defines SDL_MIN_SINT64 as the minimum value a Sint64 can hold. This constant is useful for checking against underflows when performing arithmetic operations with Sint64 values. The value is represented in hexadecimal notation and uses the complement operator.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Sint64.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIN_SINT64  ((Sint64)(~0x7FFFFFFFFFFFFFFFll))\n```\n\n----------------------------------------\n\nTITLE: Drawing Surface Text C\nDESCRIPTION: This function draws text to an SDL surface using a text engine. It requires a TTF_Text pointer, the x and y coordinates for the text's position, and an SDL_Surface pointer. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_44\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DrawSurfaceText(TTF_Text *text, int x, int y, SDL_Surface *surface);\n```\n\n----------------------------------------\n\nTITLE: Building SDL with CMake\nDESCRIPTION: These commands demonstrate how to create a build directory, configure SDL with CMake, build SDL, and install it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd ~\nmkdir build\ncd build\ncmake ~/sdl\ncmake --build .\n```\n\n----------------------------------------\n\nTITLE: SDL_WINDOWPOS_ISUNDEFINED Macro Definition in C\nDESCRIPTION: This macro checks if a window position is marked as undefined. It takes the window position value (X) as input and compares it with the SDL_WINDOWPOS_UNDEFINED_MASK. It returns true if the position is undefined, false otherwise. This macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINDOWPOS_ISUNDEFINED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_ISUNDEFINED(X)    (((X)&0xFFFF0000) == SDL_WINDOWPOS_UNDEFINED_MASK)\n```\n\n----------------------------------------\n\nTITLE: Defining TTF_STYLE_NORMAL Macro in C\nDESCRIPTION: This code snippet defines the TTF_STYLE_NORMAL macro, which represents the default font style in the SDL_ttf library. It's a bitwise flag that can be combined with other style flags. It's defined as 0x00.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_STYLE_NORMAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_STYLE_NORMAL        0x00\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE in C\nDESCRIPTION: This C code defines the SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE macro, which is used to control whether SDL uses the system's mouse acceleration curve for relative mouse motion. Setting this hint to \"1\" enables the system's mouse acceleration, while setting it to \"0\" disables it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE    \"SDL_MOUSE_RELATIVE_SYSTEM_SCALE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_BMP_SAVE_LEGACY_FORMAT in C\nDESCRIPTION: This code defines the SDL_HINT_BMP_SAVE_LEGACY_FORMAT macro. It represents a string that SDL uses as a key when setting and getting hint values.  This hint controls whether SDL uses version 4 of the BMP header when saving BMP files, which affects alpha channel support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_BMP_SAVE_LEGACY_FORMAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_BMP_SAVE_LEGACY_FORMAT \"SDL_BMP_SAVE_LEGACY_FORMAT\"\n```\n\n----------------------------------------\n\nTITLE: Query Music Fading Status Mix_FadingMusic C\nDESCRIPTION: Queries the fading status of the music stream. This function returns the current fading state of the music, indicating whether it is fading in, fading out, or not fading.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nMix_Fading Mix_FadingMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining TTF_Direction Enum in C\nDESCRIPTION: This code snippet defines the `TTF_Direction` enumeration in C. It specifies possible text directions such as Left-to-Right (LTR), Right-to-Left (RTL), Top-to-Bottom (TTB), and Bottom-to-Top (BTT). The enumeration is part of SDL_ttf and is used to set the text rendering direction.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_Direction.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum TTF_Direction\n{\n  TTF_DIRECTION_LTR = 0,    /* Left to Right */\n  TTF_DIRECTION_RTL,        /* Right to Left */\n  TTF_DIRECTION_TTB,        /* Top to Bottom */\n  TTF_DIRECTION_BTT         /* Bottom to Top */\n} TTF_Direction;\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadPNM_IO Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_LoadPNM_IO function in C. It takes an SDL_IOStream as input and returns an SDL_Surface pointer, or NULL on error. This function is part of the SDL_image library and requires SDL_image.h to be included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadPNM_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadPNM_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUStencilOpState struct in C\nDESCRIPTION: Defines the SDL_GPUStencilOpState structure, which specifies the stencil operation state of a graphics pipeline. It includes members for stencil test failure operation, depth and stencil test pass operation, depth test failure operation, and comparison operator. This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUStencilOpState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUStencilOpState\n{\n    SDL_GPUStencilOp fail_op;        /**< The action performed on samples that fail the stencil test. */\n    SDL_GPUStencilOp pass_op;        /**< The action performed on samples that pass the depth and stencil tests. */\n    SDL_GPUStencilOp depth_fail_op;  /**< The action performed on samples that pass the stencil test and fail the depth test. */\n    SDL_GPUCompareOp compare_op;     /**< The comparison operator used in the stencil test. */\n} SDL_GPUStencilOpState;\n```\n\n----------------------------------------\n\nTITLE: Set Master Volume Mix_MasterVolume C\nDESCRIPTION: Sets the master volume for all audio channels. This function adjusts the overall volume level for all audio output handled by SDL_mixer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint Mix_MasterVolume(int volume);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_MFI Macro in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_MFI macro, which is a string literal used to identify the joystick MFI hint in SDL. This hint controls the usage of GCController for joystick handling. The string \"SDL_JOYSTICK_MFI\" is used to set or query the value of this hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_MFI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_MFI \"SDL_JOYSTICK_MFI\"\n```\n\n----------------------------------------\n\nTITLE: Load WEBP Animation from SDL_IOStream C\nDESCRIPTION: This function loads a WEBP animation directly from an SDL_IOStream. It takes an SDL_IOStream pointer as input and returns a pointer to an IMG_Animation object, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadWEBPAnimation_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_LoadObject Syntax in C\nDESCRIPTION: Shows the syntax for the SDL_LoadObject function in C. This function dynamically loads a shared object and returns a pointer to the object handle. It takes the path to the shared object as a parameter and returns NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_LoadObject.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid* SDL_LoadObject(const char *sofile);\n```\n\n----------------------------------------\n\nTITLE: SDL_BUTTON Macro Definition in C\nDESCRIPTION: This macro defines a bitmask for a specific mouse button. It takes a button number (X) as input and returns a bitmask that corresponds to that button. Button 1 is the left mouse button, Button 2 is the middle mouse button, and Button 3 is the right mouse button. The macro is defined in SDL_mouse.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_BUTTON.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_BUTTON(X)       (1 << ((X)-1))\n```\n\n----------------------------------------\n\nTITLE: SDL_PRILLu Macro Definition in C\nDESCRIPTION: Defines the SDL_PRILLu macro as a string that can be used in printf-style functions to format unsigned long long integers. This ensures proper formatting for logging or other output purposes using SDL's logging functions. It depends on SDL_PRILL_PREFIX.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILLu.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRILLu SDL_PRILL_PREFIX \"u\"\n```\n\n----------------------------------------\n\nTITLE: Pause Group Playback Mix_PauseGroup C\nDESCRIPTION: Pauses playback of a group of channels identified by a tag. This function temporarily stops the audio on all channels associated with the specified tag, allowing them to be resumed later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_PauseGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: SDL_assert_release Macro Definition in C\nDESCRIPTION: This macro defines SDL_assert_release, an assertion test that executes even in release builds. It uses SDL_disabled_assert to perform the actual assertion. The condition parameter is the boolean value to be tested.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_assert_release.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_assert_release(condition) SDL_disabled_assert(condition)\n```\n\n----------------------------------------\n\nTITLE: Sint64 Maximum Value Constant\nDESCRIPTION: Defines SDL_MAX_SINT64 as the maximum value a Sint64 can hold. This constant is useful for checking against overflows when performing arithmetic operations with Sint64 values.  The value is represented in hexadecimal notation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Sint64.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MAX_SINT64  ((Sint64)0x7FFFFFFFFFFFFFFFll)\n```\n\n----------------------------------------\n\nTITLE: Get Number of Camera Drivers SDL3 C\nDESCRIPTION: This function retrieves the number of built-in camera drivers compiled into the SDL3 library. It takes no arguments and returns an integer representing the count of available drivers. The return value is never negative; a value of zero indicates that no drivers were compiled into the library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumCameraDrivers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumCameraDrivers(void);\n```\n\n----------------------------------------\n\nTITLE: Define TTF_HINTING_NORMAL in SDL_ttf (C)\nDESCRIPTION: Defines the TTF_HINTING_NORMAL macro to 0, indicating normal font hinting. This macro is used by SDL_ttf to control the hinting algorithm applied to fonts during rendering. It does not require any external dependencies beyond the SDL_ttf library itself.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_HINTING_NORMAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_HINTING_NORMAL          0\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Assertion Report in SDL2 (C)\nDESCRIPTION: Demonstrates how to iterate through the assertion report data returned by SDL_GetAssertionReport in C. It retrieves the assertion report and loops through each item, printing details such as the condition, function, filename, line number, trigger count, and whether it's always ignored.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetAssertionReport.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nconst SDL_AssertData *item = SDL_GetAssertionReport();\nwhile (item) {\n   printf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\n\",\n          item->condition, item->function, item->filename,\n          item->linenum, item->trigger_count,\n          item->always_ignore ? \"yes\" : \"no\");\n   item = item->next;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_mixer Music Types Enum in C\nDESCRIPTION: This C code defines the `Mix_MusicType` enumeration, which is part of the SDL_mixer library. It specifies the different music file formats that SDL_mixer can handle.  The enum values represent different music types, such as WAV, MOD, MID, OGG, MP3, FLAC, OPUS, WAVPACK, and GME.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_MusicType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum Mix_MusicType {\n    MUS_NONE,\n    MUS_CMD,\n    MUS_WAV,\n    MUS_MOD,\n    MUS_MID,\n    MUS_OGG,\n    MUS_MP3,\n    MUS_MP3_MAD_UNUSED,\n    MUS_FLAC,\n    MUS_MODPLUG_UNUSED,\n    MUS_OPUS,\n    MUS_WAVPACK,\n    MUS_GME\n} Mix_MusicType;\n```\n\n----------------------------------------\n\nTITLE: Mix_GetError Macro Definition in C\nDESCRIPTION: This code snippet defines the `Mix_GetError` macro, which expands to `SDL_GetError`. This macro allows users to retrieve the last error that occurred within the SDL_mixer library, utilizing SDL's error handling mechanisms. There are no explicit dependencies beyond the SDL and SDL_mixer libraries themselves. The return is a char*.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetError.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define Mix_GetError    SDL_GetError\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN in C\nDESCRIPTION: This code snippet defines the SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN macro in C. It associates the macro name with a string literal, which is the key used to set the hint. The hint controls whether the window frame is interactive when the cursor is hidden.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN    \"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\"\n```\n\n----------------------------------------\n\nTITLE: SDL_min Macro Definition in C\nDESCRIPTION: Defines the SDL_min macro which takes two values, x and y, and returns the smaller of the two. The macro uses a ternary operator to compare x and y, and returns x if x is less than y, otherwise it returns y. It double-evaluates its arguments, which can be problematic if the arguments have side effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_min.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_min(x, y) (((x) < (y)) ? (x) : (y))\n```\n\n----------------------------------------\n\nTITLE: SDL_QueryGPUFence Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the `SDL_QueryGPUFence` function in C. It takes an `SDL_GPUDevice` pointer and an `SDL_GPUFence` pointer as input and returns a boolean value indicating whether the fence is signaled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_QueryGPUFence.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_QueryGPUFence(\n    SDL_GPUDevice *device,\n    SDL_GPUFence *fence);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_QuitRequested macro in C\nDESCRIPTION: This macro defines `SDL_QuitRequested` by calling `SDL_PumpEvents` and `SDL_PeepEvents`. It checks if a quit event is pending. This macro replaces the function that was removed in `SDL_quit.h`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_QuitRequested() (SDL_PumpEvents(), (SDL_PeepEvents(NULL,0,SDL_PEEKEVENT,SDL_EVENT_QUIT,SDL_EVENT_QUIT) > 0))\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroyMutex Syntax in C\nDESCRIPTION: Destroys a mutex created with SDL_CreateMutex. It takes a pointer to the mutex to be destroyed as input. It's crucial to destroy mutexes when they are no longer needed to prevent memory leaks.  The mutex should be unlocked before destruction.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DestroyMutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyMutex(SDL_mutex * mutex);\n```\n\n----------------------------------------\n\nTITLE: Adding Linker Flags for Debug Builds in MSVC\nDESCRIPTION: This code snippet shows the linker flags that should be added to Debug builds in MSVC to resolve the \"error LNK2038: mismatch detected for 'vccorlib_lib_should_be_specified_before_msvcrt_lib_to_linker'\" error. These flags disable default libraries and explicitly specify the correct debug libraries to use for the build.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/winrt.md#_snippet_2\n\nLANGUAGE: linker flags\nCODE:\n```\n/nodefaultlib:vccorlibd /nodefaultlib:msvcrtd vccorlibd.lib msvcrtd.lib\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_FRICTION Macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_FRICTION macro. It is a bit flag that indicates that the haptic device supports a friction effect. The effect is based on the movement of axes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_FRICTION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_FRICTION   (1u<<10)\n```\n\n----------------------------------------\n\nTITLE: SDL_const_cast Macro Definition (C/C++)\nDESCRIPTION: Defines the SDL_const_cast macro, which performs a C++ const_cast when compiling as C++ and a C-style cast when compiling as C. This macro helps to avoid compiler warnings in C++ when needing to cast away constness. It takes a type and an expression as parameters, returning the expression cast to the specified type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_const_cast.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_const_cast(type, expression) const_cast<type>(expression)  /* or `((type)(expression))` in C */\n```\n\n----------------------------------------\n\nTITLE: SDL_SysWMinfo Structure Definition in C\nDESCRIPTION: Defines the SDL_SysWMinfo structure, which contains information about the window manager.  It provides system-specific window handles and contexts for various platforms.  The structure includes a union to accommodate different system-specific data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SysWMinfo.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct SDL_SysWMinfo\n{\n    SDL_version version;\n    SDL_SYSWM_TYPE subsystem;\n    union\n    {\n#if defined(SDL_VIDEO_DRIVER_WINDOWS)\n        struct\n        {\n            HWND window;                /**< The window handle */\n            HDC hdc;                    /**< The window device context */\n            HINSTANCE hinstance;        /**< The instance handle */\n        } win;\n#endif\n#if defined(SDL_VIDEO_DRIVER_WINRT)\n        struct\n        {\n            IInspectable * window;      /**< The WinRT CoreWindow */\n        } winrt;\n#endif\n#if defined(SDL_VIDEO_DRIVER_X11)\n        struct\n        {\n            Display *display;           /**< The X11 display */\n            Window window;              /**< The X11 window */\n        } x11;\n#endif\n#if defined(SDL_VIDEO_DRIVER_DIRECTFB)\n        struct\n        {\n            IDirectFB *dfb;             /**< The directfb main interface */\n            IDirectFBWindow *window;    /**< The directfb window handle */\n            IDirectFBSurface *surface;  /**< The directfb client surface */\n        } dfb;\n#endif\n#if defined(SDL_VIDEO_DRIVER_COCOA)\n        struct\n        {\n#if defined(__OBJC__) && defined(__has_feature)\n        #if __has_feature(objc_arc)\n            NSWindow __unsafe_unretained *window; /**< The Cocoa window */\n        #else\n            NSWindow *window;                     /**< The Cocoa window */\n        #endif\n#else\n            NSWindow *window;                     /**< The Cocoa window */\n#endif\n        } cocoa;\n#endif\n#if defined(SDL_VIDEO_DRIVER_UIKIT)\n        struct\n        {\n#if defined(__OBJC__) && defined(__has_feature)\n        #if __has_feature(objc_arc)\n            UIWindow __unsafe_unretained *window; /**< The UIKit window */\n        #else\n            UIWindow *window;                     /**< The UIKit window */\n        #endif\n#else\n            UIWindow *window;                     /**< The UIKit window */\n#endif\n            GLuint framebuffer; /**< The GL view's Framebuffer Object. It must be bound when rendering to the screen using GL. */\n            GLuint colorbuffer; /**< The GL view's color Renderbuffer Object. It must be bound when SDL_GL_SwapWindow is called. */\n            GLuint resolveFramebuffer; /**< The Framebuffer Object which holds the resolve color Renderbuffer, when MSAA is used. */\n        } uikit;\n#endif\n#if defined(SDL_VIDEO_DRIVER_WAYLAND)\n        struct\n        {\n            struct wl_display *display;             /**< Wayland display */\n            struct wl_surface *surface;             /**< Wayland surface */\n            void *shell_surface;                    /**< DEPRECATED Wayland shell_surface (window manager handle) */\n            struct wl_egl_window *egl_window;       /**< Wayland EGL window (native window) */\n            struct xdg_surface *xdg_surface;        /**< Wayland xdg surface (window manager handle) */\n            struct xdg_toplevel *xdg_toplevel;      /**< Wayland xdg toplevel role */\n            struct xdg_popup *xdg_popup;            /**< Wayland xdg popup role */\n            struct xdg_positioner *xdg_positioner;  /**< Wayland xdg positioner, for popup */\n        } wl;\n#endif\n#if defined(SDL_VIDEO_DRIVER_MIR)  /* no longer available, left for API/ABI compatibility. Remove in 2.1! */\n        struct\n        {\n            void *connection;  /**< Mir display server connection */\n            void *surface;  /**< Mir surface */\n        } mir;\n#endif\n\n#if defined(SDL_VIDEO_DRIVER_ANDROID)\n        struct\n        {\n            ANativeWindow *window;\n            EGLSurface surface;\n        } android;\n#endif\n\n#if defined(SDL_VIDEO_DRIVER_OS2)\n        struct\n        {\n            HWND hwnd;                  /**< The window handle */\n            HWND hwndFrame;             /**< The frame window handle */\n        } os2;\n#endif\n\n#if defined(SDL_VIDEO_DRIVER_VIVANTE)\n        struct\n        {\n            EGLNativeDisplayType display;\n            EGLNativeWindowType window;\n        } vivante;\n#endif\n\n#if defined(SDL_VIDEO_DRIVER_KMSDRM)\n        struct\n        {\n            int dev_index;               /**< Device index (ex: the X in /dev/dri/cardX) */\n            int drm_fd;                  /**< DRM FD (unavailable on Vulkan windows) */\n            struct gbm_device *gbm_dev;  /**< GBM device (unavailable on Vulkan windows) */\n        } kmsdrm;\n#endif\n\n        /* Make sure this union is always 64 bytes (8 64-bit pointers). */\n        /* Be careful not to overflow this if you add a new target! */\n        Uint8 dummy[64];\n    } info;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing NDK targets\nDESCRIPTION: Shows how to customize the NDK build targets by specifying arguments and ABI filters in the `build.gradle` file. This allows targeting specific architectures and Android API levels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nexternalNativeBuild {\n    ndkBuild {\n        arguments \"APP_PLATFORM=android-14\"\n        abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'\n```\n\n----------------------------------------\n\nTITLE: Define SDL_RELEASE_GENERIC Macro in C\nDESCRIPTION: This macro defines SDL_RELEASE_GENERIC, which utilizes the SDL_THREAD_ANNOTATION_ATTRIBUTE__ macro to incorporate Clang's thread safety analysis.  It releases a generic capability 'x'. The macro depends on SDL_THREAD_ANNOTATION_ATTRIBUTE__.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RELEASE_GENERIC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RELEASE_GENERIC(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_generic_capability(x))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ASSERT_SHARED_CAPABILITY Macro in C\nDESCRIPTION: This code snippet defines the SDL_ASSERT_SHARED_CAPABILITY macro, which is used for Clang thread safety analysis. It utilizes the SDL_THREAD_ANNOTATION_ATTRIBUTE__ macro and the assert_shared_capability attribute to enable thread safety checks on the given expression 'x'. It requires Clang's thread safety analysis features.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ASSERT_SHARED_CAPABILITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ASSERT_SHARED_CAPABILITY(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(assert_shared_capability(x))\n```\n\n----------------------------------------\n\nTITLE: Saving Images to AVIF format\nDESCRIPTION: These functions save an SDL_Surface into a AVIF image file or SDL_IOStream.  IMG_SaveAVIF saves to a file and IMG_SaveAVIF_IO saves to a stream, allowing specification of quality.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveAVIF(SDL_Surface *surface, const char *file, int quality);                                            // Save an SDL_Surface into a AVIF image file.\nbool IMG_SaveAVIF_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio, int quality);                          // Save an SDL_Surface into AVIF image data, via an SDL_IOStream.\n```\n\n----------------------------------------\n\nTITLE: Get GPU Text Engine Winding C\nDESCRIPTION: This function retrieves the winding order of the vertices returned by TTF_GetGPUTextDrawData for a particular GPU text engine. It takes a TTF_TextEngine pointer as input and returns a TTF_GPUTextEngineWinding value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_81\n\nLANGUAGE: C\nCODE:\n```\nTTF_GPUTextEngineWinding TTF_GetGPUTextEngineWinding(const TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUColorComponentFlags Typedef Definition in C\nDESCRIPTION: Defines a typedef for Uint8 as SDL_GPUColorComponentFlags, used to represent flags indicating which color components should be written. This type is used in functions like SDL_CreateGPUGraphicsPipeline to specify the color write mask.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUColorComponentFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint8 SDL_GPUColorComponentFlags;\n```\n\n----------------------------------------\n\nTITLE: SDL_WaitSemaphoreTimeout Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_WaitSemaphoreTimeout function in C. It takes a semaphore pointer and a timeout value in milliseconds as input, and returns a boolean value indicating success or timeout.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WaitSemaphoreTimeout.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WaitSemaphoreTimeout(SDL_Semaphore *sem, Sint32 timeoutMS);\n```\n\n----------------------------------------\n\nTITLE: Implementing SDL2's SDL_CreateRGBSurfaceFrom in SDL3\nDESCRIPTION: This code snippet reimplements the SDL2 `SDL_CreateRGBSurfaceFrom` function using SDL3's `SDL_CreateSurfaceFrom` and `SDL_GetPixelFormatForMasks`. This allows users to maintain compatibility while leveraging the new SDL3 API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_40\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *SDL_CreateRGBSurfaceFrom(void *pixels, int width, int height, int depth, int pitch, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)\n{\n    return SDL_CreateSurfaceFrom(width, height,\n                                 SDL_GetPixelFormatForMasks(depth, Rmask, Gmask, Bmask, Amask),\n                                 pixels, pitch);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_LEFTRIGHT in C\nDESCRIPTION: This macro defines the SDL_HAPTIC_LEFTRIGHT constant, a bit flag indicating that a haptic device supports left/right haptic effects via direct control of high/low frequency motors.  It is defined as a bit shift of 1 to the left by 2 places, effectively setting the value to 4. This macro is used when querying or configuring haptic devices to determine if they support this specific type of effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_LEFTRIGHT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_LEFTRIGHT     (1u<<2)\n```\n\n----------------------------------------\n\nTITLE: SDLNet_Quit Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_Quit function in C.  It takes no arguments and returns void. It's used to deinitialize the SDL_net library. It should be called as the last SDL_net call in the program.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MessageBoxButtonData Structure in C\nDESCRIPTION: This code snippet defines the SDL_MessageBoxButtonData structure, which is used to represent the data for a button in a message box. It includes fields for flags, a user-defined button ID, and the UTF-8 text displayed on the button. This structure is part of SDL3 and is available since version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxButtonData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MessageBoxButtonData\n{\n    SDL_MessageBoxButtonFlags flags;\n    int buttonID;       /**< User defined button id (value returned via SDL_ShowMessageBox) */\n    const char *text;   /**< The UTF-8 button text */\n} SDL_MessageBoxButtonData;\n```\n\n----------------------------------------\n\nTITLE: Skipping IOP Reset in SDL PS2 Application\nDESCRIPTION: This C code snippet demonstrates how to prevent the IOP (Input/Output Processor) from resetting in an SDL application running on the PS2.  Skipping the reset is crucial when debugging with ps2client to maintain the connection. However, resetting the IOP is recommended for release binaries.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/ps2.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n.....\n\nSDL_PS2_SKIP_IOP_RESET();\n\nint main(int argc, char *argv[])\n{\n.....\n```\n\n----------------------------------------\n\nTITLE: Customizing Gradle version\nDESCRIPTION: Shows how to customize the Gradle version used for building the Android project by modifying the `gradle-wrapper.properties` file. This ensures that the correct Gradle version is used during the build process.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\n distributionUrl=https\\://services.gradle.org/distributions/gradle-4.9-all.zip \n```\n\n----------------------------------------\n\nTITLE: Get Camera Permission State in SDL3\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetCameraPermissionState function in SDL3. It takes an SDL_Camera pointer as input and returns an integer representing the permission state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetCameraPermissionState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetCameraPermissionState(SDL_Camera *camera);\n```\n\n----------------------------------------\n\nTITLE: Defining Sint32 in C with SDL3\nDESCRIPTION: This snippet defines the Sint32 type as an alias for int32_t in C, along with macros for the maximum and minimum values that a Sint32 can hold. It is available since SDL 3.2.0 and provides a platform-independent way to work with signed 32-bit integers. The header file SDL3/SDL_stdinc.h must be included to use this definition.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Sint32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int32_t Sint32;\n#define SDL_MAX_SINT32  ((Sint32)0x7FFFFFFF)    /* 2147483647 */\n#define SDL_MIN_SINT32  ((Sint32)(~0x7FFFFFFF)) /* -2147483648 */\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap16LE Macro Definition in C\nDESCRIPTION: This macro swaps a 16-bit value from little-endian byte order to the native byte order.  If the system is already little-endian, it returns the value unchanged. It uses `SwapOnlyIfNecessary` function internally.  The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap16LE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_Swap16LE(x) SwapOnlyIfNecessary(x)\n```\n\n----------------------------------------\n\nTITLE: Create Renderer Text Engine with Properties C\nDESCRIPTION: This function creates a text engine for drawing text on an SDL renderer, with the specified properties. It takes an SDL_PropertiesID as input, which contains the properties for the text engine. It returns a TTF_TextEngine pointer or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_73\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateRendererTextEngineWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_GRAB_KEYBOARD Macro Definition in C\nDESCRIPTION: Defines the SDL_HINT_GRAB_KEYBOARD macro, which is used to control whether keyboard input is grabbed along with the mouse when SDL input grabbing is enabled. Setting this hint to \"0\" will grab only the mouse, while setting it to \"1\" will grab both the mouse and keyboard. The default behavior is to not grab the keyboard to allow system shortcuts to function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_GRAB_KEYBOARD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GRAB_KEYBOARD              \"SDL_GRAB_KEYBOARD\"\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteLE64 Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_WriteLE64 function in C. It takes an SDL_RWops pointer and a Uint64 value as input and returns a size_t representing the number of elements written.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WriteLE64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteLE64(SDL_RWops * dst, Uint64 value);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_SimulateAddressResolutionLoss Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_SimulateAddressResolutionLoss function in C. This function takes an integer representing the percentage of address resolutions that should fail.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_SimulateAddressResolutionLoss.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_SimulateAddressResolutionLoss(int percent_loss);\n```\n\n----------------------------------------\n\nTITLE: SDL2 Custom Read Function\nDESCRIPTION: Shows how to define a custom read function for SDL2 that uses SDL_RWread.  It takes a void pointer, size and nitems, and an SDL_RWops stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nsize_t custom_read(void *ptr, size_t size, size_t nitems, SDL_RWops *stream)\n{\n    return SDL_RWread(stream, ptr, size, nitems);\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing a Channel Group SDL_mixer C\nDESCRIPTION: Pauses the playback of audio on a group of channels identified by a tag. The function takes an integer tag to identify the group to pause. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_26\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_PauseGroup(int tag);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK in C\nDESCRIPTION: This macro definition sets SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK to 0xFFFFFFFFu, an SDL_AudioDeviceID value. This value signals to SDL functions to use the system's default audio playback device. It's available since SDL 3.2.0 and defined in SDL3/SDL_audio.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK ((SDL_AudioDeviceID) 0xFFFFFFFFu)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_APPLE_RWFROMFILE_USE_RESOURCES in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_APPLE_RWFROMFILE_USE_RESOURCES hint as a preprocessor macro in C.  It's used to control if SDL_RWFromFile on Apple platforms should use the resource directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_APPLE_RWFROMFILE_USE_RESOURCES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_APPLE_RWFROMFILE_USE_RESOURCES \"SDL_APPLE_RWFROMFILE_USE_RESOURCES\"\n```\n\n----------------------------------------\n\nTITLE: Get Group Count SDL_mixer C\nDESCRIPTION: Retrieves the number of channels in a group identified by the provided tag. If the tag is -1, it returns the total number of allocated channels. Requires SDL_mixer 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GroupCount.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GroupCount(int tag);\n```\n\n----------------------------------------\n\nTITLE: Push files to SD card\nDESCRIPTION: This command pushes a local file from the computer to the /sdcard directory on the connected Android device using ADB.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nadb push moose.dat /sdcard/moose.dat\n```\n\n----------------------------------------\n\nTITLE: Query Music Volume Mix_GetMusicVolume C\nDESCRIPTION: Queries the current volume value for a music object. This function retrieves the volume setting applied to the specified music stream.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_GetMusicVolume(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontDirection Function\nDESCRIPTION: Get the direction to be used for text shaping by a font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_42\n\nLANGUAGE: C\nCODE:\n```\nTTF_Direction TTF_GetFontDirection(TTF_Font *font);                                                                                        // Get the direction to be used for text shaping by a font.\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MIXER_MAJOR_VERSION in SDL_mixer.h\nDESCRIPTION: This code defines the SDL_MIXER_MAJOR_VERSION macro to be 3. It indicates that the major version of SDL_mixer is 3. This macro is defined in the SDL3_mixer/SDL_mixer.h header file and is part of the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/SDL_MIXER_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIXER_MAJOR_VERSION 3\n```\n\n----------------------------------------\n\nTITLE: Close Font - SDL_ttf\nDESCRIPTION: Disposes of a previously-created font. This function releases the memory associated with the font.  The `font` parameter is the pointer to the font to close.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_115\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_CloseFont(TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Fade Out Group Mix_FadeOutGroup C\nDESCRIPTION: Halts a group of channels after fading them out over a specified time period. This function smoothly reduces the volume of all channels in the group before stopping playback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_7\n\nLANGUAGE: c\nCODE:\n```\nint Mix_FadeOutGroup(int tag, int ms);\n```\n\n----------------------------------------\n\nTITLE: SDL_SaveDollarTemplate Syntax in C\nDESCRIPTION: Saves a Dollar Gesture template identified by its gesture ID to a given SDL_RWops stream. It returns 1 on success and 0 on failure. Use SDL_GetError to retrieve error information. The function requires a valid SDL_GestureID and SDL_RWops pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SaveDollarTemplate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SaveDollarTemplate(SDL_GestureID gestureId,SDL_RWops *dst);\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioStreamFlush Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_AudioStreamFlush function in C. This function is used to flush the audio stream, processing any remaining buffered data. It returns an integer, where 0 likely indicates success and a negative value likely indicates an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioStreamFlush.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_AudioStreamFlush(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitSurface Macro Definition in C\nDESCRIPTION: Defines the SDL_BlitSurface macro which is an alias for SDL_UpperBlit. This provides a simplified interface for blitting operations in SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_BlitSurface.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_BlitSurface SDL_UpperBlit\n```\n\n----------------------------------------\n\nTITLE: Get Size of Data Stream with SDL_RWsize in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_RWsize function, which retrieves the size of a data stream from an SDL_RWops structure. It takes a pointer to an SDL_RWops structure as input and returns the size as a Sint64. The function can return -1 if the size is unknown or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RWsize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint64 SDL_RWsize(SDL_RWops *context);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PI_D Constant in C\nDESCRIPTION: This C macro defines the double-precision floating point representation of Pi. It is used to provide a precise value of Pi for mathematical calculations within the SDL3 library. The macro is defined in the SDL3/SDL_stdinc.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PI_D.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PI_D   3.141592653589793238462643383279502884       /**< pi (double) */\n```\n\n----------------------------------------\n\nTITLE: Get Next Text Substring - SDL_ttf\nDESCRIPTION: Retrieves the next substring in a text object relative to the given substring. The `substring` parameter is the reference substring, and the next substring is returned in the `next` parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_112\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetNextTextSubString(TTF_Text *text, const TTF_SubString *substring, TTF_SubString *next);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_assert_paranoid Macro in C\nDESCRIPTION: Defines the SDL_assert_paranoid macro. It uses SDL_disabled_assert when paranoid assertions are enabled, or wraps the condition in a sizeof operator to avoid compiler warnings about unused variables when assertions are disabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_assert_paranoid.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_assert_paranoid(condition) SDL_disabled_assert(condition)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VITA_RESOLUTION in C\nDESCRIPTION: Defines the SDL_HINT_VITA_RESOLUTION macro as a string literal. This macro is used to set the resolution for the PlayStation Vita before SDL is initialized. The available values are \"544\", \"720\", and \"1080\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VITA_RESOLUTION.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_VITA_RESOLUTION \"SDL_VITA_RESOLUTION\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_RendererLogicalPresentation Enum in C\nDESCRIPTION: This code snippet defines the SDL_RendererLogicalPresentation enumeration in C, specifying different methods for mapping the logical size to the output. It includes options such as disabling logical presentation, stretching the content, letterboxing, overscan, and integer scaling.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RendererLogicalPresentation.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_RendererLogicalPresentation\n{\n    SDL_LOGICAL_PRESENTATION_DISABLED,  /**< There is no logical size in effect */\n    SDL_LOGICAL_PRESENTATION_STRETCH,   /**< The rendered content is stretched to the output resolution */\n    SDL_LOGICAL_PRESENTATION_LETTERBOX, /**< The rendered content is fit to the largest dimension and the other dimension is letterboxed with black bars */\n    SDL_LOGICAL_PRESENTATION_OVERSCAN,  /**< The rendered content is fit to the smallest dimension and the other dimension extends beyond the output bounds */\n    SDL_LOGICAL_PRESENTATION_INTEGER_SCALE   /**< The rendered content is scaled up by integer multiples to fit the output resolution */\n} SDL_RendererLogicalPresentation;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_Time type and related constants in C\nDESCRIPTION: This snippet defines the SDL_Time type as a 64-bit signed integer (Sint64) and defines constants for the maximum and minimum values that SDL_Time can hold. These constants are derived from the maximum and minimum values for Sint64.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Time.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Sint64 SDL_Time;\n#define SDL_MAX_TIME SDL_MAX_SINT64\n#define SDL_MIN_TIME SDL_MIN_SINT64\n```\n\n----------------------------------------\n\nTITLE: SDL Thread Annotation Attribute Macro in C\nDESCRIPTION: This macro defines the SDL_THREAD_ANNOTATION_ATTRIBUTE__ to add thread safety attributes using the __attribute__ syntax. It is designed to be used with Clang and can be safely erased when compiling with other compilers. It leverages the compiler's attribute system to mark code sections for thread safety analysis.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_THREAD_ANNOTATION_ATTRIBUTE__.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_THREAD_ANNOTATION_ATTRIBUTE__(x)   __attribute__((x))\n```\n\n----------------------------------------\n\nTITLE: SDL_copysignf Function Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_copysignf function in C. It takes two float parameters, 'x' (magnitude) and 'y' (sign), and returns a float value with the sign of 'y' and magnitude of 'x'.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_copysignf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_copysignf(float x, float y);\n```\n\n----------------------------------------\n\nTITLE: Unbind Audio Stream SDL3 (C)\nDESCRIPTION: Unbinds a single audio stream from its audio device.  This is a convenience function, equivalent to calling `SDL_UnbindAudioStreams(&stream, 1)`. It is safe to call this function from any thread. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UnbindAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnbindAudioStream(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Query Channel Paused Status Mix_Paused C\nDESCRIPTION: Queries whether a particular channel is currently paused. Returns a non-zero value if the specified channel is paused, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nint Mix_Paused(int channel);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteS8 Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_WriteS8 function. It writes a signed 8-bit integer (Sint8) to an SDL_IOStream. Requires SDL3 and SDL_iostream.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteS8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteS8(SDL_IOStream *dst, Sint8 value);\n```\n\n----------------------------------------\n\nTITLE: Handling NSApplicationDelegate Open File (Objective-C)\nDESCRIPTION: This Objective-C snippet handles the SDL_DROPFILE event when opening files in a macOS application. It checks the SDL_DROPFILE event state and pushes a SDL_DROPFILE event with the filename to SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/macos.md#_snippet_4\n\nLANGUAGE: objc\nCODE:\n```\n- (BOOL)application:(NSApplication *)theApplication openFile:(NSString *)filename\n{\n    if (SDL_GetEventState(SDL_DROPFILE) == SDL_ENABLE) {\n        SDL_Event event;\n        event.type = SDL_DROPFILE;\n        event.drop.file = SDL_strdup([filename UTF8String]);\n        return (SDL_PushEvent(&event) > 0);\n    }\n\n    return NO;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED macro, which can be used to specify a comma-separated list of USB VID/PID pairs (in hexadecimal format) of devices to exclude as joysticks, overriding the default blacklist and SDL_HINT_JOYSTICK_BLACKLIST_DEVICES. The value can also be a path to a file containing the comma-separated list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED \"SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: Defining _SDL_GameController Structure in C\nDESCRIPTION: This code snippet shows the declaration of the _SDL_GameController structure in C. The structure is used to identify an SDL game controller. The definition is found within SDL_gamecontroller.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/_SDL_GameController.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nstruct _SDL_GameController;\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_AUDIO_INCLUDE_MONITORS Macro Definition in C\nDESCRIPTION: This macro defines the SDL_HINT_AUDIO_INCLUDE_MONITORS constant, which is used to set the corresponding SDL hint.  Setting this hint before SDL initialization determines whether audio monitor devices are included in the enumerated audio devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_INCLUDE_MONITORS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_INCLUDE_MONITORS \"SDL_AUDIO_INCLUDE_MONITORS\"\n```\n\n----------------------------------------\n\nTITLE: Mixer Library Version Function\nDESCRIPTION: This function retrieves the version of the dynamically linked SDL_mixer library. It takes no arguments and returns an integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint Mix_Version(void);                                                                    // This function gets the version of the dynamically linked SDL_mixer library.\n```\n\n----------------------------------------\n\nTITLE: Setting Working Directory in Haiku OS after SDL_Init C\nDESCRIPTION: This code snippet demonstrates how to set the current working directory to the executable's path in Haiku OS after calling SDL_Init, as this behavior is no longer automatic in SDL3. It checks if SDL_GetBasePath() returns a valid path before calling chdir().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_21\n\nLANGUAGE: c\nCODE:\n```\n{\n    const char *path = SDL_GetBasePath();\n    if (path) {\n        chdir(path);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining window position centered on display in SDL3 (C)\nDESCRIPTION: This macro calculates the window position to be centered on a specific display using SDL3. It takes the SDL_DisplayID of the desired display (X) as input and combines it with SDL_WINDOWPOS_CENTERED_MASK to define the centered position.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINDOWPOS_CENTERED_DISPLAY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_CENTERED_DISPLAY(X)  (SDL_WINDOWPOS_CENTERED_MASK|(X))\n```\n\n----------------------------------------\n\nTITLE: SDL_MessageBoxColorScheme Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_MessageBoxColorScheme structure in C. It consists of an array of SDL_MessageBoxColor structures, allowing developers to specify colors for different parts of a message box, such as the background, text, and buttons. The SDL_MESSAGEBOX_COLOR_MAX constant determines the size of the colors array.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MessageBoxColorScheme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MessageBoxColorScheme\n{\n    SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_MAX];\n} SDL_MessageBoxColorScheme;\n```\n\n----------------------------------------\n\nTITLE: SDL_hid_ble_scan Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_hid_ble_scan function. It takes a SDL_bool value as input to either start or stop a BLE scan.  The function is designed for iOS and tvOS platforms to pair Steam Controllers and is part of the SDL_hidapi.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_ble_scan.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_hid_ble_scan(SDL_bool active);\n```\n\n----------------------------------------\n\nTITLE: SDL_strlcpy Syntax\nDESCRIPTION: This code snippet shows the syntax for the SDL_strlcpy function in C. It takes a destination buffer, a source string, and a maximum length as input.  It is defined in SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strlcpy.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_strlcpy(char *dst, const char *src, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyDeviceEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_JoyDeviceEvent structure, which is used to represent joystick device events (added or removed).  It contains the event type (SDL_JOYDEVICEADDED or SDL_JOYDEVICEREMOVED), a timestamp indicating when the event occurred, and an identifier (joystick device index for ADDED, instance ID for REMOVED).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoyDeviceEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyDeviceEvent\n{\n    Uint32 type;        /**< SDL_JOYDEVICEADDED or SDL_JOYDEVICEREMOVED */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    Sint32 which;       /**< The joystick device index for the ADDED event, instance id for the REMOVED event */\n} SDL_JoyDeviceEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_OutOfMemory Function Definition in C\nDESCRIPTION: This code snippet shows the function definition for SDL_OutOfMemory, which sets an error indicating memory allocation has failed. It takes no arguments and returns a boolean value (false). This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OutOfMemory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_OutOfMemory(void);\n```\n\n----------------------------------------\n\nTITLE: Detecting NVIDIA SHIELD Controller (SDL)\nDESCRIPTION: This C code snippet defines a function to detect NVIDIA SHIELD controllers by checking their vendor and product IDs. It checks if the vendor ID is 0x0955 and the product ID is either 0x7210 or 0x7214. It returns `true` if a NVIDIA SHIELD controller is detected, and `false` otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsJoystickNVIDIASHIELDController(Uint16 vendor_id, Uint16 product_id)\n{\n    return (vendor_id == 0x0955 && (product_id == 0x7210 || product_id == 0x7214));\n}\n```\n\n----------------------------------------\n\nTITLE: Get Number of Allocations in SDL (C)\nDESCRIPTION: Retrieves the number of outstanding (unfreed) memory allocations in the SDL library. This function takes no arguments and returns an integer representing the allocation count. It's useful for debugging memory leaks within SDL applications.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetNumAllocations.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumAllocations(void);\n```\n\n----------------------------------------\n\nTITLE: Set Text Position - SDL_ttf\nDESCRIPTION: Sets the position of a text object.  The `x` and `y` parameters specify the new coordinates for the text object's top-left corner.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_96\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextPosition(TTF_Text *text, int x, int y);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ControllerSensorEvent Structure in C\nDESCRIPTION: This code defines the SDL_ControllerSensorEvent structure, which is used to store information about a game controller sensor event. It includes the event type, timestamp, joystick instance id, sensor type, sensor data (up to 3 float values), and timestamp in microseconds. It relies on SDL_events.h and SDL_sensor.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ControllerSensorEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_ControllerSensorEvent\n{\n    Uint32 type;        /**< SDL_CONTROLLERSENSORUPDATE */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Sint32 sensor;      /**< The type of the sensor, one of the values of SDL_SensorType */\n    float data[3];      /**< Up to 3 values from the sensor, as defined in SDL_sensor.h */\n    Uint64 timestamp_us; /**< The timestamp of the sensor reading in microseconds, if the hardware provides this information. */\n} SDL_ControllerSensorEvent;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_IMAGE_MAJOR_VERSION in C\nDESCRIPTION: This macro defines the major version of the SDL_image library. It is a preprocessor directive that assigns the value 2 to SDL_IMAGE_MAJOR_VERSION, indicating the major version number. The macro is used to check the version of the SDL_image library at compile time.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/SDL_IMAGE_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_IMAGE_MAJOR_VERSION 2\n```\n\n----------------------------------------\n\nTITLE: Set Font for TTF_Text Object in SDL_ttf (C)\nDESCRIPTION: Sets the font for a TTF_Text object. Changes to the font will regenerate the text. Setting the font to NULL will stop font changes from affecting the text. Requires SDL_ttf library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SetTextFont.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextFont(TTF_Text *text, TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetVersion Syntax\nDESCRIPTION: Defines the syntax for the SDL_GetVersion function. This function takes no arguments and returns an integer representing the version of the linked SDL library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetVersion(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_FRectEqualsEpsilon Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_FRectEqualsEpsilon function in C. It takes two SDL_FRect pointers and a float epsilon value as input and returns an SDL_bool indicating whether the rectangles are equal within the epsilon.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FRectEqualsEpsilon.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE SDL_bool SDL_FRectEqualsEpsilon(const SDL_FRect *a, const SDL_FRect *b, const float epsilon);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_SPHERICAL Macro in C\nDESCRIPTION: Defines the SDL_HAPTIC_SPHERICAL macro for specifying the direction of a haptic effect using spherical coordinates. The macro is defined as an integer value, 2. It is used with SDL_HapticDirection.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_SPHERICAL.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SPHERICAL  2\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS macro as a string literal. This macro is used to set the hint that controls whether menus can be opened with their keyboard shortcut (Alt+mnemonic) on Windows. Setting this hint to \"1\" enables mnemonics, while \"0\" disables them.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS \"SDL_WINDOWS_ENABLE_MENU_MNEMONICS\"\n```\n\n----------------------------------------\n\nTITLE: Measuring String Length C\nDESCRIPTION: This function calculates how much of a UTF-8 string will fit within a given width. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, the maximum width, and pointers to an integer and a size_t to store the measured width and length, respectively. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_30\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_MeasureString(TTF_Font *font, const char *text, size_t length, int max_width, int *measured_width, size_t *measured_length);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_SAWTOOTHDOWN in SDL\nDESCRIPTION: This macro defines SDL_HAPTIC_SAWTOOTHDOWN, used to indicate that a haptic device supports sawtooth down wave effects. It's a bit flag used within the SDL_HapticPeriodic structure to configure periodic haptic effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_SAWTOOTHDOWN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SAWTOOTHDOWN (1u<<5)\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontKerning Function\nDESCRIPTION: Queries whether or not kerning is enabled for a font. Returns a boolean value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetFontKerning(const TTF_Font *font);                                                                                             // Query whether or not kerning is enabled for a font.\n```\n\n----------------------------------------\n\nTITLE: Define TTF_Font Structure in C\nDESCRIPTION: Defines the `TTF_Font` structure as an opaque type in C. This structure is used internally by the SDL_ttf library to hold font information. Users should not directly access members of this struct. It is a forward declaration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/_TTF_Font.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct _TTF_Font TTF_Font;\n```\n\n----------------------------------------\n\nTITLE: Define Font Outline Miter Limit Property (C)\nDESCRIPTION: Defines a constant for setting the font outline miter limit property. This property corresponds to the FT_Fixed miter limit and controls the maximum length of miter joins in outline strokes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontProperties.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_PROP_FONT_OUTLINE_MITER_LIMIT_NUMBER        \"SDL_ttf.font.outline.miter_limit\"\n```\n\n----------------------------------------\n\nTITLE: Sint16 Typedef and Macros Definition in C\nDESCRIPTION: This code snippet defines the `Sint16` type as an alias for `int16_t` and provides macros for the maximum (`SDL_MAX_SINT16`) and minimum (`SDL_MIN_SINT16`) values that `Sint16` can hold. This provides a platform-independent way to work with signed 16-bit integers within the SDL library. The definition ensures consistent behavior across different systems.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Sint16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int16_t Sint16;\n#define SDL_MAX_SINT16  ((Sint16)0x7FFF)        /* 32767 */\n#define SDL_MIN_SINT16  ((Sint16)(~0x7FFF))     /* -32768 */\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MAC_SCROLL_MOMENTUM in C\nDESCRIPTION: Defines the SDL_HINT_MAC_SCROLL_MOMENTUM macro, which is used to set the hint for enabling or disabling mouse wheel momentum on macOS. This macro should be defined before calling SDL_Init(). The hint accepts values \"0\" (disabled) or \"1\" (enabled).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MAC_SCROLL_MOMENTUM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MAC_SCROLL_MOMENTUM \"SDL_MAC_SCROLL_MOMENTUM\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUIndexElementSize Enum in C\nDESCRIPTION: This code snippet defines the SDL_GPUIndexElementSize enum in C. It specifies the possible sizes of index elements in an index buffer, either 16-bit (SDL_GPU_INDEXELEMENTSIZE_16BIT) or 32-bit (SDL_GPU_INDEXELEMENTSIZE_32BIT). This enum is used when creating graphics pipelines with SDL_CreateGPUGraphicsPipeline to determine how vertex data is indexed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUIndexElementSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUIndexElementSize\n{\n    SDL_GPU_INDEXELEMENTSIZE_16BIT, /**< The index elements are 16-bit. */\n    SDL_GPU_INDEXELEMENTSIZE_32BIT  /**< The index elements are 32-bit. */\n} SDL_GPUIndexElementSize;\n```\n\n----------------------------------------\n\nTITLE: SDL_OUT_Z_CAP Macro Definition in C\nDESCRIPTION: Defines the SDL_OUT_Z_CAP macro. This macro annotates function parameters indicating the size of an output string buffer. It's used for static analysis to help prevent buffer overflows. The macro expands to `_Out_z_cap_(x)` if supported by the compiler, otherwise it expands to nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OUT_Z_CAP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_OUT_Z_CAP(x) _Out_z_cap_(x)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ANDROID_TRAP_BACK_BUTTON in C\nDESCRIPTION: Defines the SDL_HINT_ANDROID_TRAP_BACK_BUTTON macro as a string literal. This macro is used to set the hint that controls whether the Android back button is trapped for manual handling.  The hint can be set anytime.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ANDROID_TRAP_BACK_BUTTON.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ANDROID_TRAP_BACK_BUTTON \"SDL_ANDROID_TRAP_BACK_BUTTON\"\n```\n\n----------------------------------------\n\nTITLE: Detach Virtual Joystick in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for SDL_DetachVirtualJoystick. It takes an SDL_JoystickID as input, which is the instance ID of the joystick to detach.  It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DetachVirtualJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);\n```\n\n----------------------------------------\n\nTITLE: Getting Text Substring with SDL_ttf in C\nDESCRIPTION: This function retrieves the substring of a text object that surrounds a specified text offset. It requires a `TTF_Text` pointer, the text offset, and a pointer to a `TTF_SubString` structure to store the substring. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_81\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSubString(TTF_Text *text, int offset, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: IMG_isXCF Function Definition in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_isXCF function, which is used to detect XCF image data within an SDL_IOStream. It takes a pointer to an SDL_IOStream as input and returns a boolean value indicating whether the stream contains XCF data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isXCF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isXCF(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Detecting WEBP Image Data in SDL_RWops (C)\nDESCRIPTION: The IMG_isWEBP function checks if an SDL_RWops stream contains WEBP image data. It reads a minimal amount of data to identify the file type and attempts to reset the stream's position. The function returns a non-zero value if the data is WEBP, and zero otherwise. Requires SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isWEBP.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint IMG_isWEBP(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Rendering Blended Wrapped Text C\nDESCRIPTION: This function renders word-wrapped UTF-8 text at high quality to a new ARGB surface. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, an SDL_Color structure for the foreground color, and the wrap width. Returns an SDL_Surface pointer containing the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_38\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Blended_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_WaitUntilInputAvailable Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_WaitUntilInputAvailable function. It takes an array of void pointers representing sockets, the number of sockets, and a timeout value in milliseconds as input. It returns the number of sockets with available data or -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_WaitUntilInputAvailable.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_WaitUntilInputAvailable(void **vsockets, int numsockets, Sint32 timeout);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_HIDAPI_UDEV in C\nDESCRIPTION: Defines the SDL_HINT_HIDAPI_UDEV macro.  This macro represents the string literal used to set the hint via SDL_SetHint.  The hint controls whether HIDAPI will use udev for device detection or poll for device changes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_HIDAPI_UDEV.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_HIDAPI_UDEV \"SDL_HIDAPI_UDEV\"\n```\n\n----------------------------------------\n\nTITLE: SDL_Texture Structure Definition in C\nDESCRIPTION: Defines the SDL_Texture structure, which is an opaque handle to a texture used for rendering in SDL. This structure represents an efficient, driver-specific representation of pixel data.  No direct access to the members of the structure is available; it is used as a pointer type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Texture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nstruct SDL_Texture;\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for tvOS Device\nDESCRIPTION: This command configures CMake to build SDL for a tvOS device, using the latest installed SDK and targeting the arm64 architecture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvos -DCMAKE_OSX_ARCHITECTURES=arm64`\n```\n\n----------------------------------------\n\nTITLE: Get Current OpenGL Window in SDL (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GL_GetCurrentWindow function in C. It takes no arguments and returns a pointer to the currently active OpenGL window (SDL_Window*) or NULL on failure. SDL_GetError() can be called to get more information in case of failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_GetCurrentWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Window* SDL_GL_GetCurrentWindow(void);\n```\n\n----------------------------------------\n\nTITLE: Rendering LCD Wrapped Text C\nDESCRIPTION: This function renders word-wrapped UTF-8 text at LCD subpixel quality to a new ARGB surface. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, an SDL_Color structure for the foreground color, an SDL_Color structure for the background color, and the wrap width. Returns an SDL_Surface pointer containing the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_41\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_LCD_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: SDL_HasMMX Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_HasMMX function in C. It takes no arguments and returns an SDL_bool value indicating whether the CPU supports MMX features. It's part of SDL's CPU information API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasMMX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasMMX(void);\n```\n\n----------------------------------------\n\nTITLE: Building SDL as a Universal Library (macOS)\nDESCRIPTION: This snippet demonstrates how to build SDL as a Universal library, which is a single binary compatible with both 64-bit Intel and ARM architectures, using the build-scripts/clang-fat.sh script.  It requires setting the CC environment variable to point to the clang-fat.sh script before running configure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/macos.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\nCC=$PWD/../build-scripts/clang-fat.sh ../configure\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: SDL_SaveAllDollarTemplates Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SaveAllDollarTemplates function. This function saves all currently loaded Dollar Gesture templates to the specified SDL_RWops stream. It returns the number of saved templates on success or 0 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SaveAllDollarTemplates.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SaveAllDollarTemplates(SDL_RWops *dst);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE hint as a string literal. This hint controls whether the HIDAPI driver is used for Nintendo GameCube controllers. Setting this hint before initializing joysticks and gamepads can modify their behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE \"SDL_JOYSTICK_HIDAPI_GAMECUBE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_PRILLX Macro Definition in C\nDESCRIPTION: This macro defines SDL_PRILLX for printf-formatting an unsigned long long value as upper-case hexadecimal. It's defined using SDL_PRILL_PREFIX and concatenating it with \"X\". It requires including SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILLX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRILLX SDL_PRILL_PREFIX \"X\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_OS2 Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_OS2 macro. It is a preprocessor directive that defines SDL_PLATFORM_OS2 to 1 if the code is being compiled for the OS/2 platform. This allows for platform-specific code to be included or excluded based on this macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_OS2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_OS2 1\n```\n\n----------------------------------------\n\nTITLE: Finalize HIDAPI library\nDESCRIPTION: This C function finalizes the HIDAPI library by freeing all static data associated with it. It must be called at the end of execution to prevent memory leaks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_hid_exit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_exit(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_NET_VERSION Macro in C\nDESCRIPTION: This macro defines the SDL_NET_VERSION, which represents the version number of the SDL_net library. It uses the SDL_VERSIONNUM macro, along with SDL_NET_MAJOR_VERSION, SDL_NET_MINOR_VERSION, and SDL_NET_MICRO_VERSION, to construct the version number.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDL_NET_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NET_VERSION \\\n    SDL_VERSIONNUM(SDL_NET_MAJOR_VERSION, SDL_NET_MINOR_VERSION, SDL_NET_MICRO_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Rendering Solid Wrapped Text C\nDESCRIPTION: This function renders word-wrapped UTF-8 text at fast quality to a new 8-bit surface. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, an SDL_Color structure for the foreground color, and the wrap length. Returns an SDL_Surface pointer containing the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_32\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Solid_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, int wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_X11_NODIRECTCOLOR in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_NODIRECTCOLOR macro, which is used to enable or disable DirectColor visuals in SDL when using the X11 video subsystem. This hint must be set before initializing the video subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_X11_NODIRECTCOLOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_NODIRECTCOLOR \"SDL_VIDEO_X11_NODIRECTCOLOR\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetNumberProperty Syntax in C\nDESCRIPTION: Retrieves a number property from a set of properties. It accepts a SDL_PropertiesID, the property name as a C string, and a default value. Returns the property's value as a Sint64, or the default value if the property is not set or is not a number.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumberProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint64 SDL_GetNumberProperty(SDL_PropertiesID props, const char *name, Sint64 default_value);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UnrefAddress Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_UnrefAddress function in C. It takes a pointer to an SDLNet_Address as input and does not return any value. The function decreases the reference count of the provided address, and deallocates the address if it's the last reference.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_UnrefAddress.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_UnrefAddress(SDLNet_Address *address);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUTransferBuffer struct definition in C\nDESCRIPTION: Defines an opaque handle for a GPU transfer buffer. This handle is used for transferring data to and from the GPU device. It is available since SDL 3.2.0 and is used in conjunction with other SDL_GPU functions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTransferBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUTransferBuffer SDL_GPUTransferBuffer;\n```\n\n----------------------------------------\n\nTITLE: Mix_GetMusicHookData Syntax (C)\nDESCRIPTION: Retrieves the user data pointer that was previously set using Mix_HookMusic. Returns a void pointer to the user data or NULL if Mix_HookMusic has never been called. This is part of SDL_mixer and available since version 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicHookData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * Mix_GetMusicHookData(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderClear Function Definition in C\nDESCRIPTION: This code snippet shows the function signature of SDL_RenderClear in C. It takes an SDL_Renderer pointer as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RenderClear.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_RenderClear(SDL_Renderer * renderer);\n```\n\n----------------------------------------\n\nTITLE: Resume Music Playback Mix_ResumeMusic C\nDESCRIPTION: Resumes the music stream that was previously paused. This function restarts the music from the point where it was paused.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_ResumeMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Get SDL_net Version in C\nDESCRIPTION: This code snippet demonstrates how to use the SDLNet_Version function to retrieve the version of the dynamically linked SDL_net library. The function takes no arguments and returns an integer representing the SDL_net version. It's available since SDL_net 3.0.0 and requires including SDL3_net/SDL_net.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_Version.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDLNet_Version(void);\n```\n\n----------------------------------------\n\nTITLE: Define Joystick HIDAPI Xbox One Home LED Hint in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED macro, which is a string literal used to set the hint that controls the Xbox One controller Home button LED when opened through HIDAPI.  The hint can be set to \"0\" to turn the LED off, \"1\" to turn it on, or a floating-point value between 0.0 and 1.0 to control its brightness.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED \"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED\"\n```\n\n----------------------------------------\n\nTITLE: Get Music Duration Mix_MusicDuration C\nDESCRIPTION: Retrieves the total duration of a music object, in seconds. This is useful for displaying the length of the music or for calculations related to playback progress.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_25\n\nLANGUAGE: c\nCODE:\n```\ndouble Mix_MusicDuration(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Mix_GroupNewer Syntax (C)\nDESCRIPTION: Shows the syntax of the Mix_GroupNewer function in C. It takes an integer tag as input and returns an integer representing the channel number of the most recent sample playing with that tag, or -1 if no such channel is playing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GroupNewer.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_GroupNewer(int tag);\n```\n\n----------------------------------------\n\nTITLE: Define Emscripten Keyboard Element Hint - C\nDESCRIPTION: Defines the SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT macro which is used to set the element to bind keyboard input to in Emscripten builds. Valid values include '#window', '#document', '#screen', '#canvas', or an element ID. This hint only applies to the emscripten platform.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT   \"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT\"\n```\n\n----------------------------------------\n\nTITLE: Enable YUV Texture Underlay for DirectFB (DirectFB 1.2.x)\nDESCRIPTION: This snippet enables the YUV texture as an underlay in DirectFB (specifically for DirectFB 1.2.x). This allows the cursor to be displayed over the YUV texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL_DIRECTFB_YUV_UNDERLAY=1\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_XINPUT_ENABLED Macro Definition in C\nDESCRIPTION: Defines the SDL_HINT_XINPUT_ENABLED macro, which is a string constant used as the key for setting the XInput gamepad detection hint in SDL. Setting this hint allows disabling or enabling XInput.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_XINPUT_ENABLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_XINPUT_ENABLED \"SDL_XINPUT_ENABLED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_acos Function Definition\nDESCRIPTION: Defines the SDL_acos function, which computes the arc cosine of a double-precision floating-point value. The function takes a double x as input and returns its arc cosine in radians. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_acos.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_acos(double x);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_UNIX in C\nDESCRIPTION: This code snippet shows how the SDL_PLATFORM_UNIX macro is defined. It is set to 1 when compiling for a Unix-like system, indicating that the code is being compiled on a Unix platform. Other platform-specific macros may also be defined.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_UNIX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_UNIX 1\n```\n\n----------------------------------------\n\nTITLE: IMG_isQOI Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_isQOI function in C. It takes an SDL_IOStream pointer as input and returns a boolean value indicating whether the stream contains QOI image data. The function attempts to seek the stream back to its original position regardless of the outcome.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isQOI.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isQOI(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: TTF_PROP_GPU_TEXT_ENGINE_DEVICE macro definition in C\nDESCRIPTION: This macro defines the property key for specifying the SDL_GPUDevice to use when creating the text engine.  It is used within the SDL_PropertiesID passed to TTF_CreateGPUTextEngineWithProperties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateGPUTextEngineWithProperties.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_PROP_GPU_TEXT_ENGINE_DEVICE                   \"SDL_ttf.gpu_text_engine.create.device\"\n```\n\n----------------------------------------\n\nTITLE: TTF_RemoveFallbackFont Function\nDESCRIPTION: Removes a specific fallback font from a primary font. Requires a valid primary and fallback font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_12\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_RemoveFallbackFont(TTF_Font *font, TTF_Font *fallback);                                                                           // Remove a fallback font.\n```\n\n----------------------------------------\n\nTITLE: Get SoundFonts Paths SDL_mixer C\nDESCRIPTION: Retrieves the paths to the SoundFont files currently in use by the MIDI backends. Returns a const char* representing the paths, or NULL if none are set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_46\n\nLANGUAGE: C\nCODE:\n```\nconst char * Mix_GetSoundFonts(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_TTF_COMPILEDVERSION Macro in C\nDESCRIPTION: This macro defines the compiled version number of the SDL_ttf library using the SDL_VERSIONNUM macro. It requires the SDL_ttf.h header file. The major, minor, and patchlevel versions of SDL_ttf are used to construct the version number.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/SDL_TTF_COMPILEDVERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TTF_COMPILEDVERSION \\\n    SDL_VERSIONNUM(SDL_TTF_MAJOR_VERSION, SDL_TTF_MINOR_VERSION, SDL_TTF_PATCHLEVEL)\n```\n\n----------------------------------------\n\nTITLE: SDL_snprintf Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_snprintf function in C. The function formats a string, similar to snprintf, into the provided buffer with a maximum length, using a printf-style format string and variable arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_snprintf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_snprintf(char *text, size_t maxlen, const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: Setting iOS Animation Callback with SDL in C/C++\nDESCRIPTION: This code snippet illustrates how to set up an animation callback for iOS applications using `SDL_iPhoneSetAnimationCallback`. This is useful when integrating with Game Center, as it allows yielding control back to the system by running each frame in a callback function instead of an endless main loop. It takes the SDL_Window, interval, a callback function, and a callback parameter as arguments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/ios.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nint SDL_iPhoneSetAnimationCallback(SDL_Window * window, int interval, SDL_iOSAnimationCallback callback, void *callbackParam);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUCubeMapFace Enum in C\nDESCRIPTION: This C enum, SDL_GPUCubeMapFace, defines the possible faces for a cube map texture. It includes positive and negative X, Y, and Z faces, allowing the selection of specific cube map faces during texture operations within the SDL3 GPU API. The enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUCubeMapFace.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUCubeMapFace\n{\n    SDL_GPU_CUBEMAPFACE_POSITIVEX,\n    SDL_GPU_CUBEMAPFACE_NEGATIVEX,\n    SDL_GPU_CUBEMAPFACE_POSITIVEY,\n    SDL_GPU_CUBEMAPFACE_NEGATIVEY,\n    SDL_GPU_CUBEMAPFACE_POSITIVEZ,\n    SDL_GPU_CUBEMAPFACE_NEGATIVEZ\n} SDL_GPUCubeMapFace;\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for specific iOS SDK\nDESCRIPTION: This command configures CMake to build SDL for an iOS device, using a specific SDK version (iOS 12.4 in this case) and targeting the arm64 architecture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos12.4 -DCMAKE_OSX_ARCHITECTURES=arm64\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv_utf8_locale Macro Definition in C\nDESCRIPTION: Defines the SDL_iconv_utf8_locale macro that uses SDL_iconv_string to convert a UTF-8 string to the current locale's character encoding.  It takes the string to convert as input and calculates its length using SDL_strlen before passing it to SDL_iconv_string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iconv_utf8_locale.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_iconv_utf8_locale(S)    SDL_iconv_string(\"\", \"UTF-8\", S, SDL_strlen(S)+1)\n```\n\n----------------------------------------\n\nTITLE: SDL_HasRDTSC Syntax in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_HasRDTSC function in C. The function takes no arguments and returns an SDL_bool value indicating whether the CPU supports the RDTSC instruction. It relies on the SDL_cpuinfo.h header file and SDL_bool, SDL_TRUE, and SDL_FALSE definitions from SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HasRDTSC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_HasRDTSC(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VITA_ENABLE_FRONT_TOUCH Macro in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VITA_ENABLE_FRONT_TOUCH macro, which is a string literal used to reference the hint controlling the PlayStation Vita's front touch panel. Setting the corresponding environment variable to \"0\" disables touch, while \"1\" enables it (default). This hint must be set before SDL initialization to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VITA_ENABLE_FRONT_TOUCH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VITA_ENABLE_FRONT_TOUCH \"SDL_VITA_ENABLE_FRONT_TOUCH\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_WHEEL_DEVICES in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_WHEEL_DEVICES macro which is used as a hint to specify a comma-separated list of USB VID/PID pairs for wheel style controllers. The values are expected to be in hexadecimal format. The hint can also be set using \"@file\" to load the value from a specified file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_WHEEL_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_WHEEL_DEVICES \"SDL_JOYSTICK_WHEEL_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Defining UNICODE_BOM_NATIVE Macro in C\nDESCRIPTION: This code defines a macro named `UNICODE_BOM_NATIVE` in the C programming language. This macro represents the Unicode byte order mark, which helps determine the byte order of a text file. Its value is defined as 0xFEFF.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/UNICODE_BOM_NATIVE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define UNICODE_BOM_NATIVE  0xFEFF\n```\n\n----------------------------------------\n\nTITLE: CMake Copy SDL3 DLL (Windows)\nDESCRIPTION: This CMake code snippet adds a custom command to copy the SDL3 dynamic library (SDL3.dll) to the directory where the target executable (mygame.exe) is built.  It uses CMake generator expressions to dynamically resolve the paths.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32)\n    add_custom_command(\n        TARGET mygame POST_BUILD\n        COMMAND \"${CMAKE_COMMAND}\" -E copy $<TARGET_FILE:SDL3::SDL3-shared> $<TARGET_FILE_DIR:mygame>\n        VERBATIM\n    )\nendif()\n```\n\n----------------------------------------\n\nTITLE: SDL_VERSIONNUM Macro Definition in C\nDESCRIPTION: This macro combines the major, minor, and patch version numbers of SDL into a single numeric value. It multiplies the major version by 1,000,000, the minor version by 1,000, and then adds the patch version. This allows for easy comparison of SDL versions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VERSIONNUM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VERSIONNUM(major, minor, patch) \\\n    ((major) * 1000000 + (minor) * 1000 + (patch))\n```\n\n----------------------------------------\n\nTITLE: SDL_AllocPalette Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_AllocPalette function in C, showcasing how to allocate a color palette with a given number of colors. It returns a pointer to SDL_Palette or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AllocPalette.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Palette* SDL_AllocPalette(int ncolors);\n```\n\n----------------------------------------\n\nTITLE: Valgrind Wrapper Script (Shell)\nDESCRIPTION: This is a shell script used as a wrapper to run an Android application under Valgrind for memory debugging. It sets up the environment and executes Valgrind with specific options, logging the output to a file on the SD card.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n#!/system/bin/sh\nexport TMPDIR=/data/data/org.libsdl.app\nexec /data/local/Inst/bin/valgrind --log-file=/sdcard/valgrind.log --error-limit=no $*\n```\n\n----------------------------------------\n\nTITLE: Retrieving Chroma Location from SDL_Colorspace in C\nDESCRIPTION: This macro retrieves the SDL_ChromaLocation from a given SDL_Colorspace. It shifts the input cspace value to the right by 20 bits and performs a bitwise AND operation with 0x0F to extract the chroma location. The macro is thread-safe and available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_COLORSPACECHROMA.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_COLORSPACECHROMA(cspace)     (SDL_ChromaLocation)(((cspace) >> 20) & 0x0F)\n```\n\n----------------------------------------\n\nTITLE: Getting Text Substring for Point with SDL_ttf in C\nDESCRIPTION: This function retrieves the portion of a text string that is closest to a specified point. It requires a `TTF_Text` pointer, the x and y coordinates of the point, and a pointer to a `TTF_SubString` structure to store the substring. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_84\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSubStringForPoint(TTF_Text *text, int x, int y, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: Creating GPU Text Engine with Properties C\nDESCRIPTION: This function creates a text engine for drawing text with the SDL GPU API, with the specified properties. It requires an SDL_PropertiesID representing the properties to be applied. Returns a pointer to the created TTF_TextEngine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_51\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateGPUTextEngineWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: SDL_iOSSetAnimationCallback Macro (C)\nDESCRIPTION: This code snippet defines the SDL_iOSSetAnimationCallback macro, which is an alias for the SDL_iPhoneSetAnimationCallback function. It provides an alternative way to call the same underlying function, making the code potentially more readable or consistent with other parts of the SDL API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_iPhoneSetAnimationCallback.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_iOSSetAnimationCallback(window, interval, callback, callbackParam) SDL_iPhoneSetAnimationCallback(window, interval, callback, callbackParam)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS hint as a string literal. This hint controls whether Nintendo Switch Joy-Con controllers are in vertical mode when using the HIDAPI driver in SDL. It must be set before SDL_Init(SDL_INIT_GAMECONTROLLER).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS \"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS in C\nDESCRIPTION: Defines the SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS macro. This macro is used as a hint to control whether SDL enumerates all HID devices or only game controllers when using the SDL_hid_enumerate function. It allows developers to specify if they want to enumerate only controllers to avoid potential issues with other HID devices or drivers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS \"SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS\"\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicDecRef Macro Definition in C\nDESCRIPTION: Defines the SDL_AtomicDecRef macro, which decrements an SDL_AtomicInt using SDL_AddAtomicInt and checks if the result is 1 (meaning it was 0 before the decrement). It takes a pointer to the SDL_AtomicInt as input and returns true if the variable reaches zero after decrementing, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AtomicDecRef.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AtomicDecRef(a)    (SDL_AddAtomicInt(a, -1) == 1)\n```\n\n----------------------------------------\n\nTITLE: Get Number of Tracks with Mix_GetNumTracks in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_GetNumTracks function from the SDL_mixer library. It takes a pointer to a Mix_Music object as input and returns the number of tracks in the music object, or -1 if it fails or isn't implemented. This function is specifically intended for GME music formats.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetNumTracks.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint Mix_GetNumTracks(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Emscripten Build Configuration (Enable Threads)\nDESCRIPTION: This bash script configures the SDL build process for Emscripten, enabling pthreads and disabling assembly and cpuinfo. It sets compiler flags to use SDL=0, optimization level 3, and enables pthreads. Linker flags are also set to enable pthreads. The `emconfigure` command is used to configure the build with the emscripten toolchain.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nemconfigure ../configure --host=wasm32-unknown-emscripten --enable-pthreads --disable-assembly --disable-cpuinfo CFLAGS=\"-sUSE_SDL=0 -O3 -pthread\" LDFLAGS=\"-pthread\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SystemCursor Enum in C\nDESCRIPTION: This code snippet defines the SDL_SystemCursor enumeration in C, which specifies the different system cursor types that can be used in SDL.  The enum lists various cursor shapes such as arrow, I-beam, wait, crosshair, resize arrows, and a hand cursor.  This enumeration is used with SDL_CreateSystemCursor to create a cursor with a specific shape.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SystemCursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_SystemCursor\n{\n    SDL_SYSTEM_CURSOR_ARROW,     /**< Arrow */\n    SDL_SYSTEM_CURSOR_IBEAM,     /**< I-beam */\n    SDL_SYSTEM_CURSOR_WAIT,      /**< Wait */\n    SDL_SYSTEM_CURSOR_CROSSHAIR, /**< Crosshair */\n    SDL_SYSTEM_CURSOR_WAITARROW, /**< Small wait cursor (or Wait if not available) */\n    SDL_SYSTEM_CURSOR_SIZENWSE,  /**< Double arrow pointing northwest and southeast */\n    SDL_SYSTEM_CURSOR_SIZENESW,  /**< Double arrow pointing northeast and southwest */\n    SDL_SYSTEM_CURSOR_SIZEWE,    /**< Double arrow pointing west and east */\n    SDL_SYSTEM_CURSOR_SIZENS,    /**< Double arrow pointing north and south */\n    SDL_SYSTEM_CURSOR_SIZEALL,   /**< Four pointed arrow pointing north, south, east, and west */\n    SDL_SYSTEM_CURSOR_NO,        /**< Slashed circle or crossbones */\n    SDL_SYSTEM_CURSOR_HAND,      /**< Hand */\n    SDL_NUM_SYSTEM_CURSORS\n} SDL_SystemCursor;\n```\n\n----------------------------------------\n\nTITLE: Define Joystick HIDAPI Xbox 360 Player LED Hint in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED hint as a string literal. This hint controls whether player LEDs are enabled for Xbox 360 controllers when using HIDAPI. The value can be \"0\" to disable or \"1\" to enable (default).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED \"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED\"\n```\n\n----------------------------------------\n\nTITLE: Uint8 Type Definition and Constants in C\nDESCRIPTION: Defines the Uint8 type as an alias for uint8_t and provides constants for the maximum and minimum values that a Uint8 variable can hold. This type is used to represent unsigned 8-bit integers in SDL. Dependencies: SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Uint8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint8_t Uint8;\n#define SDL_MAX_UINT8   ((Uint8)0xFF)           /* 255 */\n#define SDL_MIN_UINT8   ((Uint8)0x00)           /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Define SDL_PLATFORM_RISCOS in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_RISCOS preprocessor macro. When compiling for RISC OS, this macro is defined with a value of 1. It is included in the SDL3/SDL_platform_defines.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_RISCOS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_RISCOS 1\n```\n\n----------------------------------------\n\nTITLE: Installing a specific test APK (CMake)\nDESCRIPTION: This command installs a single APK, in this case testsprite, onto the Android device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_24\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target install-testsprite\n```\n\n----------------------------------------\n\nTITLE: TTF_SetFontSizeDPI Function\nDESCRIPTION: Dynamically sets the font size of a TTF_Font object with target resolutions, in dots per inch. This allows scaling the font properly across different displays. Returns a boolean indicating success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_15\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetFontSizeDPI(TTF_Font *font, float ptsize, int hdpi, int vdpi);                                                                 // Set font size dynamically with target resolutions, in dots per inch.\n```\n\n----------------------------------------\n\nTITLE: Reading from joystick device\nDESCRIPTION: Attempts to read directly from the joystick device file.  A permission error indicates the need for a udev rule to adjust device permissions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncat /dev/input/event/XX\n```\n\n----------------------------------------\n\nTITLE: Pausing a Channel SDL_mixer C\nDESCRIPTION: Pauses the playback of audio on a particular channel. The function takes an integer identifying the channel to pause. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_Pause(int channel);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontGeneration Function\nDESCRIPTION: Gets the font generation. The generation changes when the font data is modified.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_GetFontGeneration(TTF_Font *font);                                                                                              // Get the font generation.\n```\n\n----------------------------------------\n\nTITLE: Dispatch GPU Compute C\nDESCRIPTION: Dispatches compute work using the provided compute pass and group counts. This function requires a compute pipeline to be bound before it is called. Writes to the same resource region in multiple dispatches within a single compute pass have no guaranteed order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DispatchGPUCompute.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DispatchGPUCompute(\n    SDL_GPUComputePass *compute_pass,\n    Uint32 groupcount_x,\n    Uint32 groupcount_y,\n    Uint32 groupcount_z);\n```\n\n----------------------------------------\n\nTITLE: Get Text Size - SDL_ttf\nDESCRIPTION: Retrieves the size of a text object. The `w` and `h` parameters will be populated with the width and height of the rendered text, respectively.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_106\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSize(TTF_Text *text, int *w, int *h);\n```\n\n----------------------------------------\n\nTITLE: SDL_ulltoa Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ulltoa function in C. It takes an unsigned long long integer, a character buffer, and a radix as input, and returns a pointer to the character buffer containing the converted string. The radix determines the base of the number system used for the conversion (e.g., 10 for decimal, 16 for hexadecimal).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ulltoa.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar * SDL_ulltoa(unsigned long long value, char *str, int radix);\n```\n\n----------------------------------------\n\nTITLE: Get Text Properties C\nDESCRIPTION: This function retrieves the properties associated with a given text object.  It takes a TTF_Text pointer as input and returns an SDL_PropertiesID representing the properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_83\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID TTF_GetTextProperties(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Set Channel Expiration Delay Mix_ExpireChannel C\nDESCRIPTION: Changes the expiration delay for a specific channel. The `ticks` parameter sets how many updates should pass before the channel is automatically stopped.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint Mix_ExpireChannel(int channel, int ticks);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_WinRT_Path enum in C\nDESCRIPTION: Defines the SDL_WinRT_Path enum to represent different paths in a WinRT/Windows Phone environment. The enum includes constants for the installed location, local folder, roaming folder, and temporary folder. Windows Phone does not support roaming or temporary folders.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WinRT_Path.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_WinRT_Path\n{\n    /** \\brief The installed app's root directory.\n        Files here are likely to be read-only. */\n    SDL_WINRT_PATH_INSTALLED_LOCATION,\n\n    /** \\brief The app's local data store.  Files may be written here */\n    SDL_WINRT_PATH_LOCAL_FOLDER,\n\n    /** \\brief The app's roaming data store.  Unsupported on Windows Phone.\n        Files written here may be copied to other machines via a network\n        connection.\n    */\n    SDL_WINRT_PATH_ROAMING_FOLDER,\n\n    /** \\brief The app's temporary data store.  Unsupported on Windows Phone.\n        Files written here may be deleted at any time. */\n    SDL_WINRT_PATH_TEMP_FOLDER\n} SDL_WinRT_Path;\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL2 for RISC OS with Autoconf\nDESCRIPTION: This snippet configures SDL2 for RISC OS using autoconf. It disables GCC atomics due to known issues and sets the installation prefix to the GCCSDK environment. The commands then build and install the library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/riscos.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./configure --host=arm-unknown-riscos --prefix=$GCCSDK_INSTALL_ENV --disable-gcc-atomics\nmake\nmake install\n```\n\n----------------------------------------\n\nTITLE: SDL_UnregisterApp Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for using the SDL_UnregisterApp function in C. It takes no arguments and returns void. It is used to undo the effects of SDL_RegisterApp.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UnregisterApp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UnregisterApp(void);\n```\n\n----------------------------------------\n\nTITLE: CMake tvOS Simulator Build (Latest SDK)\nDESCRIPTION: This CMake command configures SDL3 for the tvOS Simulator, using the latest installed SDK. It sets the target operating system to tvOS, the SDK root to appletvsimulator, specifies the x86_64 architecture, and sets the minimum tvOS deployment target to 9.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=tvOS -DCMAKE_OSX_SYSROOT=appletvsimulator -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Fixing Paths for Deployment\nDESCRIPTION: Fixes up paths in the installed SDL2 library, pkgconfig file, and configuration script to reflect the /usr/local installation directory. Uses perl to perform in-place substitution.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nperl -w -pi -e \"s#$PWD/rpi-sdl2-installed#/usr/local#g;\" ./rpi-sdl2-installed/lib/libSDL2.la ./rpi-sdl2-installed/lib/pkgconfig/sdl2.pc ./rpi-sdl2-installed/bin/sdl2-config\n```\n\n----------------------------------------\n\nTITLE: Define Mouse Double Click Radius Hint Macro in C\nDESCRIPTION: Defines the SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS macro to \"SDL_MOUSE_DOUBLE_CLICK_RADIUS\". This macro is used to set the radius, in pixels, within which two mouse clicks are considered a double click. This hint affects the behavior of mouse click events in SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS    \"SDL_MOUSE_DOUBLE_CLICK_RADIUS\"\n```\n\n----------------------------------------\n\nTITLE: Get Text Substring For Point - SDL_ttf\nDESCRIPTION: Retrieves the portion of a text string that is closest to a point. The `x` and `y` parameters specify the coordinates of the point, and the substring is returned in the `substring` parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_110\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSubStringForPoint(TTF_Text *text, int x, int y, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_XBOX in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX macro, which is a string constant used to set the hint controlling the usage of the HIDAPI driver for XBox controllers. The hint can be set to \"0\" to disable the HIDAPI driver or \"1\" to enable it.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_XBOX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX   \"SDL_JOYSTICK_HIDAPI_XBOX\"\n```\n\n----------------------------------------\n\nTITLE: SDL_tanf Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_tanf function, which calculates the tangent of a floating-point value. It takes a single-precision float 'x' (in radians) as input and returns its tangent as a float.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_tanf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_tanf(float x);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_IOS Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_IOS preprocessor macro. It is set to 1 when the code is compiled for iOS, allowing conditional compilation for platform-specific features. This macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_IOS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_IOS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_GetNumJoystickHats Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_GetNumJoystickHats function. This function takes an SDL_Joystick pointer as input and returns an integer representing the number of POV hats on the joystick, or -1 if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumJoystickHats.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumJoystickHats(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_iconv_string Function Signature in C\nDESCRIPTION: This code snippet shows the function signature of SDL_iconv_string. It takes source and destination encodings, an input buffer, and the number of bytes left in the input buffer as parameters. It returns a pointer to a newly allocated string containing the converted text, which must be freed with SDL_free.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_iconv_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar* SDL_iconv_string(const char *tocode,\n                       const char *fromcode,\n                       const char *inbuf,\n                       size_t inbytesleft);\n```\n\n----------------------------------------\n\nTITLE: Installing Windows Application Package\nDESCRIPTION: This snippet shows how to install a packaged application on Windows using the `wdapp` command.  The PACKAGENAME.msixvc is the name of the created package.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_7\n\nLANGUAGE: batch\nCODE:\n```\nwdapp install PACKAGENAME.msixvc\n```\n\n----------------------------------------\n\nTITLE: Getting Text Font C\nDESCRIPTION: This function gets the font used by a text object. It requires a pointer to the TTF_Text. Returns a pointer to the TTF_Font.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_61\n\nLANGUAGE: C\nCODE:\n```\nTTF_Font * TTF_GetTextFont(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_BlendOperation enum in C\nDESCRIPTION: Defines the SDL_BlendOperation enumeration in C, specifying different blend operations for combining source and destination pixel components.  It includes values for addition, subtraction, reverse subtraction, minimum, and maximum.  The enum is used to set the blend mode for rendering operations in SDL3. Different renderers support different operations, as indicated in the comments.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlendOperation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_BlendOperation\n{\n    SDL_BLENDOPERATION_ADD              = 0x1,  /**< dst + src: supported by all renderers */\n    SDL_BLENDOPERATION_SUBTRACT         = 0x2,  /**< src - dst : supported by D3D, OpenGL, OpenGLES, and Vulkan */\n    SDL_BLENDOPERATION_REV_SUBTRACT     = 0x3,  /**< dst - src : supported by D3D, OpenGL, OpenGLES, and Vulkan */\n    SDL_BLENDOPERATION_MINIMUM          = 0x4,  /**< min(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan */\n    SDL_BLENDOPERATION_MAXIMUM          = 0x5   /**< max(dst, src) : supported by D3D, OpenGL, OpenGLES, and Vulkan */\n} SDL_BlendOperation;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME in C\nDESCRIPTION: This code snippet demonstrates how to define the SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME hint in C. It assigns the string literal \"SDL_AUDIO_DEVICE_APP_ICON_NAME\" to the preprocessor macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME \"SDL_AUDIO_DEVICE_APP_ICON_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Get Timidity Config Path in SDL_mixer (C)\nDESCRIPTION: Retrieves the full path of a previously-specified Timidity config file. The function returns a pointer to a string containing the path, or NULL if no path has been set.  The returned pointer refers to internal memory and should not be modified or freed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetTimidityCfg.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* Mix_GetTimidityCfg(void);\n```\n\n----------------------------------------\n\nTITLE: Define Font Outline Line Join Property (C)\nDESCRIPTION: Defines a constant for setting the font outline line join property. This property corresponds to the FT_Stroker_LineJoin value and controls how the joining points of outline strokes are rendered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontProperties.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_PROP_FONT_OUTLINE_LINE_JOIN_NUMBER          \"SDL_ttf.font.outline.line_join\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES in C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES macro, which represents the name of the environment variable used to specify a list of game controllers to ignore. The value is a string that represents a comma-separated list of USB VID/PID pairs in hexadecimal format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES \"SDL_GAMECONTROLLER_IGNORE_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Disable Linux Input Devices for DirectFB\nDESCRIPTION: This snippet shows how to disable the use of linux input devices, such as multimice and multikeyboards, when using DirectFB.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL_DIRECTFB_LINUX_INPUT=0\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MOUSE_RELATIVE_MODE_CENTER in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MOUSE_RELATIVE_MODE_CENTER macro, which is used as a key to set the hint controlling mouse behavior in relative mode. The hint determines whether the mouse is constrained to the center of the window or the entire window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_RELATIVE_MODE_CENTER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_MODE_CENTER    \"SDL_MOUSE_RELATIVE_MODE_CENTER\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAndroidActivity Syntax (C)\nDESCRIPTION: Declaration of the SDL_GetAndroidActivity function in C. It takes no arguments and returns a void pointer, which represents the Java instance of the Android activity class.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidActivity.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_GetAndroidActivity(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_TextureModulate Enum Definition in C\nDESCRIPTION: Defines the SDL_TextureModulate enum, specifying options for texture modulation during rendering. The enum provides options for no modulation (SDL_TEXTUREMODULATE_NONE), color modulation (SDL_TEXTUREMODULATE_COLOR), and alpha modulation (SDL_TEXTUREMODULATE_ALPHA). This enum is used to control the modulation behavior within SDL_RenderCopy.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TextureModulate.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_TextureModulate\n{\n    SDL_TEXTUREMODULATE_NONE = 0x00000000,     /**< No modulation */\n    SDL_TEXTUREMODULATE_COLOR = 0x00000001,    /**< srcC = srcC * color */\n    SDL_TEXTUREMODULATE_ALPHA = 0x00000002     /**< srcA = srcA * alpha */\n} SDL_TextureModulate;\n```\n\n----------------------------------------\n\nTITLE: Get SDL Revision String in C\nDESCRIPTION: Retrieves the code revision of the linked SDL library. The returned string uniquely identifies the exact revision and is useful for debugging purposes. Prior to SDL 2.0.16, this returned a hash for a Mercurial repository. The string is not intended to be reliable in any way.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetRevision.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char* SDL_GetRevision(void);\n```\n\n----------------------------------------\n\nTITLE: Check for event existence in queue using SDL_HasEvents in C\nDESCRIPTION: This snippet shows the syntax of the SDL_HasEvents function, which checks for the existence of events within a specified range of event types in the SDL3 event queue. It takes a minimum and maximum event type as input and returns a boolean indicating whether such events are present.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasEvents.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_HasEvents(Uint32 minType, Uint32 maxType);\n```\n\n----------------------------------------\n\nTITLE: Configuring SDL2 for RISC OS with CMake\nDESCRIPTION: This snippet configures SDL2 for RISC OS using CMake. It specifies the RISC OS toolchain file, enables RISC OS support, sets the installation prefix to the GCCSDK environment, configures a Release build type, and disables GCC atomics. The commands then build and install the library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/riscos.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake -Bbuild-riscos -DCMAKE_TOOLCHAIN_FILE=$GCCSDK_INSTALL_ENV/toolchain-riscos.cmake -DRISCOS=ON -DCMAKE_INSTALL_PREFIX=$GCCSDK_INSTALL_ENV -DCMAKE_BUILD_TYPE=Release -DSDL_GCC_ATOMICS=OFF\ncmake --build build-riscos\ncmake --build build-riscos --target install\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_XINERAMA in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_X11_XINERAMA macro. It is used to provide a hint to SDL regarding the use of the X11 Xinerama extension, although the hint is no longer actively used by SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_X11_XINERAMA.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_XINERAMA         \"SDL_VIDEO_X11_XINERAMA\"\n```\n\n----------------------------------------\n\nTITLE: Get RTF Author with RTF_GetAuthor in C\nDESCRIPTION: Retrieves the author of an RTF document using the RTF_GetAuthor function. This function takes an RTF_Context as input and returns a const char* representing the author's name in UTF-8 encoding. The returned string is managed by the RTF_Context and should not be freed by the application.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_GetAuthor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * RTF_GetAuthor(RTF_Context *ctx);\n```\n\n----------------------------------------\n\nTITLE: Render Solid Wrapped Text C\nDESCRIPTION: This function renders word-wrapped UTF-8 text at fast quality to a new 8-bit surface. It takes a TTF_Font, the UTF-8 text, text length, an SDL_Color for the foreground color, and a wrap length. It returns an SDL_Surface with the rendered text or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_58\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_Solid_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, int wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Configuring GPU Frames In Flight in SDL3 (C)\nDESCRIPTION: This snippet shows the syntax of the SDL_SetGPUAllowedFramesInFlight function in C. It configures the maximum allowed number of frames in flight for a given SDL_GPUDevice. The function takes a GPU device pointer and the number of allowed frames as input and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetGPUAllowedFramesInFlight.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_SetGPUAllowedFramesInFlight(\n    SDL_GPUDevice *device,\n    Uint32 allowed_frames_in_flight);\n```\n\n----------------------------------------\n\nTITLE: SDL_NS_TO_US Macro Definition in C\nDESCRIPTION: This macro converts nanoseconds (NS) to microseconds by dividing NS by SDL_NS_PER_US. The result is an integer representing the equivalent time in microseconds. It's crucial to consider data types since using integers versus floating-point numbers can significantly affect the outcome due to integer division.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NS_TO_US.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NS_TO_US(NS)        ((NS) / SDL_NS_PER_US)\n```\n\n----------------------------------------\n\nTITLE: Querying Event Processing State with SDL_EventEnabled in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_EventEnabled function in C, which queries the state of processing events by type. It takes a Uint32 representing the event type as input and returns a boolean indicating whether the event is being processed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_EventEnabled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_EventEnabled(Uint32 type);\n```\n\n----------------------------------------\n\nTITLE: SDL_size_add_overflow Function Definition (C)\nDESCRIPTION: Defines the syntax for the SDL_size_add_overflow function, which checks for potential overflow when adding two size_t values. If an overflow occurs, it returns -1; otherwise, it stores the sum in the ret pointer and returns 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_size_add_overflow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE int SDL_size_add_overflow (size_t a, size_t b, size_t *ret);\n```\n\n----------------------------------------\n\nTITLE: SDL_Log Usage with SDL_PRIX32 in C\nDESCRIPTION: Illustrates how to use the SDL_PRIX32 macro within SDL_Log to print a Uint32 variable in uppercase hexadecimal format.  The bottles variable, which represents the number of bottles, is formatted using the SDL_PRIX32 macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIX32.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRIX32 \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: IMG_isXPM Function Signature in C\nDESCRIPTION: This C code snippet shows the syntax for the IMG_isXPM function in the SDL_image library. It takes a pointer to an SDL_IOStream as input, which represents a readable and seekable stream of data, and returns a boolean value indicating whether the stream contains XPM image data. The function is available since SDL_image 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isXPM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isXPM(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Get Window Title in SDL3\nDESCRIPTION: Retrieves the title of a specified SDL window. The function accepts a pointer to an SDL_Window structure and returns a constant character pointer representing the window's title in UTF-8 format. If the window has no title, it returns an empty string. This function should only be called from the main thread.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowTitle.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetWindowTitle(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Create SDL Properties Group in C\nDESCRIPTION: Creates a new group of properties and returns an SDL_PropertiesID. The properties are automatically destroyed upon SDL_Quit() call. This function is thread-safe and part of SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_CreateProperties(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_rand Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_rand function in C. It takes an Sint32 n as input, which must be positive, and returns a random Sint32 value in the range of [0 .. n-1].\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_rand.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSint32 SDL_rand(Sint32 n);\n```\n\n----------------------------------------\n\nTITLE: Wiki Category Tagging Example\nDESCRIPTION: This snippet demonstrates how to tag a wiki page with categories. This helps users find related pages.  The line `----` acts as a separator.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/documentation-rules.md#_snippet_7\n\nLANGUAGE: Default\nCODE:\n```\n----\n[CategoryStuff](CategoryStuff), [CategoryWhatever](CategoryWhatever)\n```\n\n----------------------------------------\n\nTITLE: CMake iOS Device Build (Latest SDK, arm64)\nDESCRIPTION: This CMake command configures SDL3 for an iOS device, using the latest installed SDK and 64-bit architecture. It sets the target operating system to iOS, the SDK root to iphoneos, specifies the arm64 architecture, and sets the minimum iOS deployment target to 9.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/cmake.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_OSX_DEPLOYMENT_TARGET=9.0\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_VISIONOS in C\nDESCRIPTION: This code snippet shows how the SDL_PLATFORM_VISIONOS macro is defined in C when compiling for VisionOS. It sets the macro to 1, indicating that the code is being compiled for the VisionOS platform. This macro is defined in SDL3/SDL_platform_defines.h and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_VISIONOS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_VISIONOS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_ClearProperty Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ClearProperty function, used to clear a property from a given SDL_PropertiesID. It takes the properties ID and the property name as input and returns a boolean indicating success or failure. Dependencies: SDL3/SDL_properties.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClearProperty.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_ClearProperty(SDL_PropertiesID props, const char *name);\n```\n\n----------------------------------------\n\nTITLE: Starting a specific test (CMake)\nDESCRIPTION: This CMake command is used to start a specific test on the connected Android device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target start-testsprite\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_PAUSE in C\nDESCRIPTION: This C macro defines SDL_HAPTIC_PAUSE, which represents a flag indicating a haptic device supports the ability to be paused. The value assigned is (1u<<15).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_PAUSE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_PAUSE      (1u<<15)\n```\n\n----------------------------------------\n\nTITLE: SDL2 Surface Creation (Old)\nDESCRIPTION: This code snippet demonstrates the old way of creating a surface with an indexed pixel format and accessing its palette in SDL2. It highlights how to create an 8-bit indexed surface and then retrieve the palette from the surface's format member.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_36\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *surface = SDL_CreateRGBSurfaceWithFormat(0, 32, 32, 8, SDL_PIXELFORMAT_INDEX8);\nSDL_Palette *palette = surface->format->palette;\n...\n```\n\n----------------------------------------\n\nTITLE: SDL OpenGL Context Release Flags Definition in C\nDESCRIPTION: This snippet shows the definition of SDL_GLContextReleaseFlag and the associated flags SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE and SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH. These are used to control how the OpenGL context is released.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLContextReleaseFlag.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_GLContextReleaseFlag;\n\n#define SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE   0x0000\n#define SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH  0x0001\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_TRACKPAD_IS_TOUCH_ONLY in C\nDESCRIPTION: Defines the SDL_HINT_TRACKPAD_IS_TOUCH_ONLY hint as a string literal. This hint is used to configure whether trackpads are treated as touch devices. Setting this hint before SDL initialization allows you to control how trackpad input is processed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_TRACKPAD_IS_TOUCH_ONLY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_TRACKPAD_IS_TOUCH_ONLY \"SDL_TRACKPAD_IS_TOUCH_ONLY\"\n```\n\n----------------------------------------\n\nTITLE: SDL_MIN_UINT64 Macro Definition\nDESCRIPTION: Defines the SDL_MIN_UINT64 macro, representing the minimum value for a Uint64 (which is zero). This macro provides a convenient way to access the minimum possible value of the Uint64 type. The value is cast to Uint64 for type consistency.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Uint64.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIN_UINT64  ((Uint64)(0x0000000000000000ull))\n```\n\n----------------------------------------\n\nTITLE: Set GPU Text Engine Winding C\nDESCRIPTION: This function sets the winding order of the vertices returned by TTF_GetGPUTextDrawData for a particular GPU text engine. It takes a TTF_TextEngine pointer and a TTF_GPUTextEngineWinding value as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_80\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetGPUTextEngineWinding(TTF_TextEngine *engine, TTF_GPUTextEngineWinding winding);\n```\n\n----------------------------------------\n\nTITLE: Set PATH for standalone NDK toolchain\nDESCRIPTION: Sets the PATH environment variable to include the bin directory of the standalone NDK toolchain. This allows the system to find the cross-compilation tools (e.g., arm-linux-androideabi-gcc) without specifying their full path.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nNDK_STANDALONE=/usr/src/ndk-standalone-14-arm\nPATH=$NDK_STANDALONE/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Retrieving WinRT File System Path with SDL_WinRTGetFSPathUTF8 in C\nDESCRIPTION: This code snippet demonstrates how to use SDL_WinRTGetFSPathUTF8 to retrieve a WinRT defined path on the local file system as a UTF-8 string. The function takes an SDL_WinRT_Path enum value as input and returns a const char* representing the path or NULL on failure. The returned string is encoded in UTF-8 format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WinRTGetFSPathUTF8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_WinRTGetFSPathUTF8(SDL_WinRT_Path pathType);\n```\n\n----------------------------------------\n\nTITLE: Jump to Order in Mod Music Mix_ModMusicJumpToOrder C\nDESCRIPTION: Jumps to a specific order in MOD music. MOD music consists of patterns that are arranged in a specific order.  This function lets the caller change the position in that order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_20\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_ModMusicJumpToOrder(int order);\n```\n\n----------------------------------------\n\nTITLE: Configure Bluetooth Usage Description in Info.plist\nDESCRIPTION: This snippet shows how to add the NSBluetoothPeripheralUsageDescription key to your Info.plist file. This is required when using SDL_JOYSTICK_HIDAPI to access Bluetooth game controllers, as it requests permission from the user to access Bluetooth hardware.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/ios.md#_snippet_2\n\nLANGUAGE: Objective-C\nCODE:\n```\n<key>NSBluetoothPeripheralUsageDescription</key>\n<string>MyApp would like to remain connected to nearby bluetooth Game Controllers and Game Pads even when you're not using the app.</string>\n```\n\n----------------------------------------\n\nTITLE: TTF_GetHarfBuzzVersion Function\nDESCRIPTION: Retrieves the version of the HarfBuzz library currently in use by SDL_ttf. This library is used for complex text layout and shaping, especially for non-Latin scripts.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_3\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_GetHarfBuzzVersion(int *major, int *minor, int *patch);                                                                           // Query the version of the HarfBuzz library in use.\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED hint as a string literal. This hint allows the user to specify a list of joystick devices that should be excluded from being considered wheel-style controllers. The string literal represents the name of the hint that can be used with SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED \"SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: SDL_TextEditingCandidatesEvent Structure Definition in C\nDESCRIPTION: This code snippet defines the SDL_TextEditingCandidatesEvent structure, which is used to represent keyboard IME candidate events in SDL3. It contains fields for the event type, timestamp, window ID, list of candidate strings, number of candidates, the index of the selected candidate, and a boolean indicating if the candidates are horizontally or vertically oriented. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TextEditingCandidatesEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TextEditingCandidatesEvent\n{\n    SDL_EventType type;         /**< SDL_EVENT_TEXT_EDITING_CANDIDATES */\n    Uint32 reserved;\n    Uint64 timestamp;           /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_WindowID windowID;      /**< The window with keyboard focus, if any */\n    const char * const *candidates;    /**< The list of candidates, or NULL if there are no candidates available */\n    Sint32 num_candidates;      /**< The number of strings in `candidates` */\n    Sint32 selected_candidate;  /**< The index of the selected candidate, or -1 if no candidate is selected */\n    bool horizontal;          /**< true if the list is horizontal, false if it's vertical */\n    Uint8 padding1;\n    Uint8 padding2;\n    Uint8 padding3;\n} SDL_TextEditingCandidatesEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_PRILLX Usage Example in C\nDESCRIPTION: This example shows how to use the SDL_PRILLX macro with SDL_Log to print an unsigned long long integer value as uppercase hexadecimal. It requires including SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILLX.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRILLX \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: SDL_log10f Function Syntax in C\nDESCRIPTION: Defines the syntax for using the SDL_log10f function in C. This function takes a float as input (x) and returns the base-10 logarithm of that value. x must be greater than 0. The function is part of the SDL3 library and defined in SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_log10f.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_log10f(float x);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontAscent Function\nDESCRIPTION: Queries the offset from the baseline to the top of a font, in pixels. The ascent is the distance from the baseline to the top of the tallest glyph.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_31\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontAscent(const TTF_Font *font);                                                                                               // Query the offset from the baseline to the top of a font.\n```\n\n----------------------------------------\n\nTITLE: Run evtest to list input devices\nDESCRIPTION: This command runs the evtest utility, which lists all available input devices and their corresponding event paths (e.g., /dev/input/eventXX). This allows you to identify the specific device file associated with your joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo evtest\n```\n\n----------------------------------------\n\nTITLE: SDL_WindowFlags Typedef Definition\nDESCRIPTION: Defines the `SDL_WindowFlags` type as a `Uint64`.  This type is used to store a bitmask of window flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WindowFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint64 SDL_WindowFlags;\n```\n\n----------------------------------------\n\nTITLE: Define Flightstick Devices Hint (SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES) in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES hint as a string macro. This hint is used to specify a comma-separated list of USB VID/PID pairs (in hexadecimal form) representing flightstick style controllers. Alternatively, it can point to a file containing the list.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES \"SDL_JOYSTICK_FLIGHTSTICK_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Text String with SDL_ttf in C\nDESCRIPTION: This function inserts UTF-8 text into a text object at a specified offset. It requires a `TTF_Text` pointer, the offset at which to insert the text, a pointer to the UTF-8 string, and the length of the string. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_77\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_InsertTextString(TTF_Text *text, int offset, const char *string, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER in C\nDESCRIPTION: This code snippet defines the SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER macro, which is used to set the hint that controls whether SDL requires DRM master privileges when initializing the KMSDRM video backend. The hint must be set before initializing the video subsystem. Possible values are \"0\" (allow KMSDRM without DRM master) and \"1\" (require DRM master).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER      \"SDL_KMSDRM_REQUIRE_DRM_MASTER\"\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SDL_PRINTF_VARARG_FUNCV in C\nDESCRIPTION: Shows an example of how to use the SDL_PRINTF_VARARG_FUNCV macro to annotate the vfprintf function.  This annotation informs the compiler that the second parameter is a printf-style format string, allowing for compile-time checks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRINTF_VARARG_FUNCV.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint vfprintf(FILE *f, const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_DEVICE in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_DEVICE macro, which is a string representing the name of the hint used to specify joystick devices. It's utilized by SDL, specifically the Linux joystick driver, to identify joystick devices to open.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_DEVICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_DEVICE \"SDL_JOYSTICK_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_TTF Version Macros\nDESCRIPTION: Defines macros for accessing SDL_ttf version information, including the major, minor, and micro version numbers, a complete version number macro, and a macro for checking if the compiled version meets a minimum requirement.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_TTF_MAJOR_VERSION                                                                                                              // Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO\n#define SDL_TTF_VERSION                                                                                                                    // This is the version number macro for the current SDL_ttf version.\n#define SDL_TTF_VERSION_ATLEAST(X, Y, Z)                                                                                                   // This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.\n```\n\n----------------------------------------\n\nTITLE: IMG_isXPM Function Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_isXPM function from SDL_image. The function checks if the provided SDL_RWops contains XPM image data. It takes a pointer to an SDL_RWops struct as input and returns a non-zero integer if the data is in XPM format, and zero otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isXPM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isXPM(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_PRIX32 Macro Definition in C\nDESCRIPTION: Defines the SDL_PRIX32 macro as the string \"X\". This macro is used with printf-style functions to format Uint32 values as uppercase hexadecimal.  It is part of the SDL3 standard include library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRIX32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRIX32 \"X\"\n```\n\n----------------------------------------\n\nTITLE: SDL_TTF Version Check Macro Definition (C)\nDESCRIPTION: This macro checks if the SDL_ttf library version is at least the specified X.Y.Z version. It uses the SDL_TTF_MAJOR_VERSION, SDL_TTF_MINOR_VERSION, and SDL_TTF_MICRO_VERSION macros for comparison. It returns true if the compiled SDL_ttf version is greater than or equal to X.Y.Z, and false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/SDL_TTF_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_TTF_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_TTF_MAJOR_VERSION >= X) && \\\n     (SDL_TTF_MAJOR_VERSION > X || SDL_TTF_MINOR_VERSION >= Y) && \\\n     (SDL_TTF_MAJOR_VERSION > X || SDL_TTF_MINOR_VERSION > Y || SDL_TTF_MICRO_VERSION >= Z))\n```\n\n----------------------------------------\n\nTITLE: Load WEBP animation from SDL_IOStream in C\nDESCRIPTION: This function loads a WEBP animation directly from an SDL_IOStream. It takes an SDL_IOStream pointer and returns a pointer to an IMG_Animation structure, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadWEBPAnimation_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Defining Metal Low Power Device Hint in C\nDESCRIPTION: This C code defines the SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE hint as a string literal. This hint is used to configure the Metal render driver to prefer a low power device over the default one. Setting this hint allows users to potentially save power when rendering with Metal.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE \"SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_LINUX_HAT_DEADZONES in C\nDESCRIPTION: This C macro defines the SDL_HINT_LINUX_HAT_DEADZONES hint. It's used to configure how digital hats are handled on Linux systems, specifically whether or not deadzones are applied to the underlying input axes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_LINUX_HAT_DEADZONES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_LINUX_HAT_DEADZONES \"SDL_LINUX_HAT_DEADZONES\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Point Structure in C\nDESCRIPTION: This code snippet defines the SDL_Point structure in C. It consists of two integer members, `x` and `y`, representing the coordinates of a point. This structure is used in SDL to represent points in 2D space.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Point.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Point\n{\n    int x;\n    int y;\n} SDL_Point;\n```\n\n----------------------------------------\n\nTITLE: Check for Samsung DeX Mode in SDL (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_IsDeXMode to determine if the application is running on a Samsung DeX docking station. The function takes no arguments and returns an SDL_bool value representing whether DeX mode is active.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_IsDeXMode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_bool SDL_IsDeXMode(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap16 Function Definition in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_Swap16 function. It takes a 16-bit unsigned integer as input and returns a 16-bit unsigned integer with the byte order swapped.  It is defined as an inline function for performance.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Swap16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE Uint16 SDL_Swap16(Uint16 x);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Metrics Functions in C\nDESCRIPTION: Functions for querying font metrics such as height, ascent, and descent. These functions provide information about the dimensions of the font characters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_12\n\nLANGUAGE: c\nCODE:\n```\nint TTF_GetFontHeight(const TTF_Font *font);                                                                                               // Query the total height of a font.\nint TTF_GetFontAscent(const TTF_Font *font);                                                                                               // Query the offset from the baseline to the top of a font.\nint TTF_GetFontDescent(const TTF_Font *font);                                                                                              // Query the offset from the baseline to the bottom of a font.\n```\n\n----------------------------------------\n\nTITLE: SDL_GetStorageFileSize Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetStorageFileSize function, which is used to get the size of a file within a storage container. It takes a SDL_Storage pointer, a file path, and a Uint64 pointer as input.  The function returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetStorageFileSize.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetStorageFileSize(SDL_Storage *storage, const char *path, Uint64 *length);\n```\n\n----------------------------------------\n\nTITLE: SDL_FALLTHROUGH Macro Definition in C\nDESCRIPTION: This code snippet shows the definition of the SDL_FALLTHROUGH macro. It's used to indicate intentional fallthrough in switch case statements, suppressing compiler warnings.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FALLTHROUGH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_FALLTHROUGH [[fallthrough]]\n```\n\n----------------------------------------\n\nTITLE: Command Line Build with CMake (macOS)\nDESCRIPTION: This snippet shows how to build SDL using CMake on macOS.  It creates a build directory, configures the build using CMake with the Release build type, compiles the code with make, and installs the library using sudo make install.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/macos.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake -DCMAKE_BUILD_TYPE=Release ..\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Uint32 Type Definition\nDESCRIPTION: Defines the Uint32 type as an alias for uint32_t in C. Also defines SDL_MAX_UINT32 as the maximum value for Uint32 and SDL_MIN_UINT32 as the minimum value. These definitions are used to represent unsigned 32-bit integers within the SDL library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Uint32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint32_t Uint32;\n#define SDL_MAX_UINT32  ((Uint32)0xFFFFFFFFu)   /* 4294967295 */\n#define SDL_MIN_UINT32  ((Uint32)0x00000000)    /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH C\nDESCRIPTION: This C macro defines the SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH hint. It is used to control whether dispatching OpenGL context updates should block the dispatching thread on macOS. The default is to block.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH \"SDL_MAC_OPENGL_ASYNC_DISPATCH\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_JoystickID in C\nDESCRIPTION: This code snippet defines `SDL_JoystickID` as a signed 32-bit integer (`Sint32`) in C. This type represents a unique identifier assigned to a joystick while it is connected to the system. The identifier is guaranteed to be unique for the duration of the application's lifetime and starts at 0, incrementing for each new joystick connected.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Sint32 SDL_JoystickID;\n```\n\n----------------------------------------\n\nTITLE: TTF Font Weight Function in C\nDESCRIPTION: Function to query a font's weight (lightness/heaviness of strokes). Returns an integer representing the font's weight.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nint TTF_GetFontWeight(const TTF_Font *font);                                                                                               // Query a font's weight, in terms of the lightness/heaviness of the strokes.\n```\n\n----------------------------------------\n\nTITLE: SDL_DestroySemaphore Syntax (C)\nDESCRIPTION: Destroys an SDL semaphore. It's unsafe to destroy a semaphore if threads are waiting on it. Available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroySemaphore.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroySemaphore(SDL_Semaphore *sem);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MIXER_COMPILEDVERSION Macro in C\nDESCRIPTION: This macro defines the compiled version number for SDL_mixer. It uses SDL_VERSIONNUM with the major, minor, and patch level versions of the library to calculate the version number. It's deprecated, and SDL_MIXER_VERSION_ATLEAST or SDL_MIXER_VERSION are recommended instead.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/SDL_MIXER_COMPILEDVERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIXER_COMPILEDVERSION \\\n    SDL_VERSIONNUM(SDL_MIXER_MAJOR_VERSION, SDL_MIXER_MINOR_VERSION, SDL_MIXER_PATCHLEVEL)\n```\n\n----------------------------------------\n\nTITLE: Mix_GroupOldest Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the Mix_GroupOldest function in C. It takes an integer 'tag' as input, which is used to identify a group of channels. The function returns an integer representing the channel number of the oldest playing sample in the group, or -1 if no such channel exists.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GroupOldest.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GroupOldest(int tag);\n```\n\n----------------------------------------\n\nTITLE: Start ADB shell\nDESCRIPTION: This command opens an interactive shell session on the default connected Android device through ADB.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nadb shell\n```\n\n----------------------------------------\n\nTITLE: SDL_free_func Callback Definition in C\nDESCRIPTION: Defines the signature of the SDL_free_func callback function. This callback is used by SDL to free memory that has been allocated. The callback receives a single argument: a pointer to the memory to be freed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_free_func.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_free_func)(void *mem);\n```\n\n----------------------------------------\n\nTITLE: Get Text Engine C\nDESCRIPTION: This function retrieves the text engine used by a text object.  It takes a TTF_Text pointer as input and returns a pointer to the TTF_TextEngine in use.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_85\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_GetTextEngine(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT Definition C\nDESCRIPTION: Defines the SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT macro as a string literal. This macro is used to set the default text of the TextInput window on GDK platforms. It's crucial to set this hint before calling SDL_StartTextInput().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT \"SDL_GDK_TEXTINPUT_DEFAULT_TEXT\"\n```\n\n----------------------------------------\n\nTITLE: Push files to Android device\nDESCRIPTION: This command pushes a local file from the computer to a specified location on the connected Android device using ADB.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nadb push local_file remote_path_and_file\n```\n\n----------------------------------------\n\nTITLE: Building other dependencies for Android\nDESCRIPTION: Builds other dependencies for Android using the standalone NDK toolchain. Configures the build with a target host, prefix, and other options, then compiles and installs the library. The `--disable-shared` flag is recommended to create static builds.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nmkdir cross-android/ && cd cross-android/\n../configure --host=arm-linux-androideabi --prefix=$NDK_STANDALONE/sysroot/usr \\\n  --with-some-option --enable-another-option \\\n  --disable-shared\nmake -j$(nproc)\nmake install\n```\n\n----------------------------------------\n\nTITLE: TTF_PROP_GPU_TEXT_ENGINE_ATLAS_TEXTURE_SIZE macro definition in C\nDESCRIPTION: This macro defines the property key for specifying the size of the texture atlas when creating the text engine. It is used within the SDL_PropertiesID passed to TTF_CreateGPUTextEngineWithProperties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CreateGPUTextEngineWithProperties.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_PROP_GPU_TEXT_ENGINE_ATLAS_TEXTURE_SIZE       \"SDL_ttf.gpu_text_engine.create.atlas_texture_size\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_IOS_HIDE_HOME_INDICATOR Macro in C\nDESCRIPTION: This macro defines the string constant for the SDL_HINT_IOS_HIDE_HOME_INDICATOR hint.  It is used to set or query the hint's value using SDL_SetHint. The hint controls whether the home indicator bar on iPhone X is hidden.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_IOS_HIDE_HOME_INDICATOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_IOS_HIDE_HOME_INDICATOR \"SDL_IOS_HIDE_HOME_INDICATOR\"\n```\n\n----------------------------------------\n\nTITLE: Setting SDL_OS2_JOYSTICK with Spaces in Name\nDESCRIPTION: This snippet demonstrates how to include spaces in the joystick name when setting the SDL_OS2_JOYSTICK environment variable by enclosing the name in single or double quotes. This allows SDL2 to correctly identify joysticks with spaces in their names.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/os2.md#_snippet_2\n\nLANGUAGE: batch\nCODE:\n```\nSET SDL_OS2_JOYSTICK='Gravis GamePad' 4 2 2 0\n```\n\nLANGUAGE: batch\nCODE:\n```\nSET SDL_OS2_JOYSTICK=\"Gravis GamePad\" 4 2 2 0\n```\n\n----------------------------------------\n\nTITLE: Running evtest utility\nDESCRIPTION: Runs the evtest utility to list available input devices. This helps identify the joystick device path, such as /dev/input/eventXX, which is needed for further debugging.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo evtest\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_IRIX macro in C\nDESCRIPTION: This C preprocessor macro is defined as 1 if the code is being compiled for the IRIX operating system.  It allows for platform-specific code execution within SDL3 applications targeting IRIX. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_IRIX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_IRIX 1\n```\n\n----------------------------------------\n\nTITLE: TTF_TagToString Function\nDESCRIPTION: Convert from a 32-bit tag to a 4 character string.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_44\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_TagToString(Uint32 tag, char *string, size_t size);                                                                               // Convert from a 32-bit tag to a 4 character string.\n```\n\n----------------------------------------\n\nTITLE: Creating an macOS Application Bundle with a Makefile\nDESCRIPTION: This Makefile snippet demonstrates how to create a macOS application bundle (.app) for SDL2 applications. It defines rules to create the necessary directory structure (Contents/MacOS, Contents/Resources) and copies the executable into the bundle. Requires `EXE_NAME` and `APP_NAME` to be defined.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/macos.md#_snippet_3\n\nLANGUAGE: make\nCODE:\n```\nbundle_contents = APP_NAME.app/Contents\nAPP_NAME_bundle: EXE_NAME\n\tmkdir -p $(bundle_contents)/MacOS\n\tmkdir -p $(bundle_contents)/Resources\n\techo \"APPL????\" > $(bundle_contents)/PkgInfo\n\t$(INSTALL_PROGRAM) $< $(bundle_contents)/MacOS/\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR macro as a string literal. This macro represents the key used to set the hint via SDL_SetHint. The values for this hint are \"0\" to disable and \"1\" to enable the _NET_WM_BYPASS_COMPOSITOR.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR \"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR\"\n```\n\n----------------------------------------\n\nTITLE: IMG_isLBM Function Signature in C\nDESCRIPTION: This is the function signature for IMG_isLBM. It takes a pointer to an SDL_RWops struct as input, which represents a readable and seekable data stream. It returns an integer indicating whether the data in the stream is LBM image data (non-zero) or not (zero).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_isLBM.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint IMG_isLBM(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_SIMDGetAlignment Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SIMDGetAlignment function in C. It takes no arguments and returns a size_t value representing the required alignment in bytes for SIMD allocations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SIMDGetAlignment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_SIMDGetAlignment(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_X11_XVIDMODE in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_X11_XVIDMODE macro as a string literal. Before SDL 2.0.24, this hint controlled whether SDL used the X11 VidMode extension. The macro is retained for source compatibility, but the hint is no longer used.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_X11_XVIDMODE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_XVIDMODE         \"SDL_VIDEO_X11_XVIDMODE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT Macro in C\nDESCRIPTION: Defines the SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT macro to mark a button as the default when the escape key is pressed in a message box.  This allows the user to select the button by pressing the escape key. The value is a unsigned 32-bit integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MessageBoxButtonFlags.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT 0x00000002u\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AVX_INTRINSICS in C\nDESCRIPTION: Defines the SDL_AVX_INTRINSICS macro to 1 if the compiler supports Intel AVX intrinsics. This macro's presence indicates that SDL has already included the `<immintrin.h>` header file. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AVX_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AVX_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateSensors Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_UpdateSensors function, which updates the state of open sensors. It takes no arguments and returns void. It should be called from the thread that initialized the sensor subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateSensors.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_UpdateSensors(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_HAPTIC_GAIN Macro Definition in C\nDESCRIPTION: This C macro defines the SDL_HAPTIC_GAIN constant, which is used to indicate that a haptic device supports setting a global gain. It is a bit flag that can be checked against device capabilities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_GAIN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_GAIN       (1u<<12)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Unsupported Macro in C\nDESCRIPTION: The SDL_Unsupported macro is defined to call SDL_SetError with a standard message indicating that an operation is not supported. This macro is available since SDL 3.2.0 and provides a consistent way to report unsupported features.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Unsupported.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_Unsupported()               SDL_SetError(\"That operation is not supported\")\n```\n\n----------------------------------------\n\nTITLE: Checking Music Playing Status SDL_mixer C\nDESCRIPTION: Checks the current playing status of the music stream. Returns true if the music is playing, false otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_44\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_PlayingMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Defining Uint32 type and constants in C\nDESCRIPTION: This code snippet defines the Uint32 type as an unsigned 32-bit integer and provides constants for the maximum and minimum values that a Uint32 can hold. It relies on the uint32_t type and defines SDL_MAX_UINT32 and SDL_MIN_UINT32 using preprocessor directives. These definitions are crucial for working with unsigned 32-bit integers within the SDL framework.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Uint32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef uint32_t Uint32;\n#define SDL_MAX_UINT32  ((Uint32)0xFFFFFFFFu)   /* 4294967295 */\n#define SDL_MIN_UINT32  ((Uint32)0x00000000)    /* 0 */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR hint as a string literal. This hint is used to control whether SDL prefers the libdecor library for window decorations on Wayland, even if server-side decorations are available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR \"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_OUT_Z_BYTECAP Macro in C\nDESCRIPTION: This code snippet shows the definition of the SDL_OUT_Z_BYTECAP macro. It maps to `_Out_z_bytecap_(x)` on compilers that support it, and to nothing otherwise. This macro annotates function parameters, specifying the size of output buffers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OUT_Z_BYTECAP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_OUT_Z_BYTECAP(x) _Out_z_bytecap_(x)\n```\n\n----------------------------------------\n\nTITLE: Mix_UnregisterAllEffects Syntax in C\nDESCRIPTION: This code snippet demonstrates the syntax for the Mix_UnregisterAllEffects function in C. The function takes an integer representing the channel to unregister effects from. It returns an integer indicating success (nonzero) or failure (zero).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_UnregisterAllEffects.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_UnregisterAllEffects(int channel);\n```\n\n----------------------------------------\n\nTITLE: Example Usage of SDL_SCANF_VARARG_FUNC with fscanf in C\nDESCRIPTION: Demonstrates how to use the SDL_SCANF_VARARG_FUNC macro to annotate the fscanf function. This tells the compiler that the second argument should be a scanf-style format string, followed by variable arguments. This helps the compiler to check the arguments' format and type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SCANF_VARARG_FUNC.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nint fscanf(FILE *f, const char *fmt, ...) SDL_PRINTF_VARARG_FUNCV(2);\n```\n\n----------------------------------------\n\nTITLE: Iterate SoundFonts SDL_mixer C\nDESCRIPTION: Iterates over the configured SoundFont paths, calling a provided callback function for each path.  Takes a function pointer and a void* data pointer as arguments. Returns true on success.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_47\n\nLANGUAGE: C\nCODE:\n```\nbool Mix_EachSoundFont(Mix_EachSoundFontCallback function, void *data);\n```\n\n----------------------------------------\n\nTITLE: Android Native Logging\nDESCRIPTION: This code snippet demonstrates how to include the Android logging header and use the `__android_log_print` function to log messages from native C/C++ code in an Android application.  This is useful for debugging native code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\n#include <android/log.h>\n\n__android_log_print(ANDROID_LOG_INFO, \"foo\", \"Something happened! x = %d\", x);\n```\n\n----------------------------------------\n\nTITLE: Accessing Window Information (Old Method) in C\nDESCRIPTION: This code snippet demonstrates the older method of accessing window system-specific information using `SDL_GetWindowWMInfo`. It checks the operating system and SDL subsystem to retrieve the native window handle or display information. This method is deprecated and replaced with property-based access.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_43\n\nLANGUAGE: c\nCODE:\n```\nSDL_SysWMinfo info;\nSDL_VERSION(&info.version);\n\n#if defined(__WIN32__)\n    HWND hwnd = NULL;\n    if (SDL_GetWindowWMInfo(window, &info) && info.subsystem == SDL_SYSWM_WINDOWS) {\n        hwnd = info.info.win.window;\n    }\n    if (hwnd) {\n        ...\n    }\n#elif defined(__MACOSX__)\n    NSWindow *nswindow = NULL;\n    if (SDL_GetWindowWMInfo(window, &info) && info.subsystem == SDL_SYSWM_COCOA) {\n        nswindow = (__bridge NSWindow *)info.info.cocoa.window;\n    }\n    if (nswindow) {\n        ...\n    }\n#elif defined(__LINUX__)\n    if (SDL_GetWindowWMInfo(window, &info)) {\n        if (info.subsystem == SDL_SYSWM_X11) {\n            Display *xdisplay = info.info.x11.display;\n            Window xwindow = info.info.x11.window;\n            if (xdisplay && xwindow) {\n                ...\n            }\n        } else if (info.subsystem == SDL_SYSWM_WAYLAND) {\n            struct wl_display *display = info.info.wl.display;\n            struct wl_surface *surface = info.info.wl.surface;\n            if (display && surface) {\n                ...\n            }\n        }\n    }\n#elif defined(__IPHONEOS__)\n    UIWindow *uiwindow = NULL;\n    if (SDL_GetWindowWMInfo(window, &info) && info.subsystem == SDL_SYSWM_UIKIT) {\n        uiwindow = (__bridge UIWindow *)info.info.uikit.window;\n    }\n    if (uiwindow) {\n        GLuint framebuffer = info.info.uikit.framebuffer;\n        GLuint colorbuffer = info.info.uikit.colorbuffer;\n        GLuint resolveFramebuffer = info.info.uikit.resolveFramebuffer;\n        ...\n    }\n#endif\n```\n\n----------------------------------------\n\nTITLE: Reconfiguring Locales\nDESCRIPTION: Reconfigures the locale settings on Raspbian, which impacts how keys are interpreted as letters and affects the CAPS LOCK behavior. This is essential for consistent text input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nsudo dpkg-reconfigure locales\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY macro in C. This hint is used to control the scaling behavior of non-DPI-aware Wayland windows.  It must be set before the video subsystem is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY \"SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY\"\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph_LCD Function Signature (C)\nDESCRIPTION: This code snippet shows the function signature for `TTF_RenderGlyph_LCD` which renders a single 16-bit glyph at LCD subpixel quality to a new ARGB surface. It takes a `TTF_Font` pointer, a 16-bit character code, foreground color, and background color as input. It returns a pointer to a newly allocated `SDL_Surface` or NULL if there was an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderGlyph_LCD.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_LCD(TTF_Font *font,\n                Uint16 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MS_PER_SECOND Macro in C\nDESCRIPTION: This code snippet defines the SDL_MS_PER_SECOND macro, which is a constant representing the number of milliseconds in a second. It is used within the SDL timer API to handle time-related functionalities. The value is always 1000.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MS_PER_SECOND.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MS_PER_SECOND   1000\n```\n\n----------------------------------------\n\nTITLE: Using ADB to Start Shell\nDESCRIPTION: This command starts an interactive command shell on the default Android device using adb shell.  This allows direct interaction with the device's file system and command line.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nadb shell\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER in C\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER macro, which represents the name of the hint used to control the Sony driver for PS3 controllers. The hint value can be set to \"0\" to disable the driver or \"1\" to enable it. This hint should be set before initializing joysticks and gamepads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER \"SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Set Keyboard Modifier State in SDL (C)\nDESCRIPTION: Sets the current key modifier state for the keyboard using the SDL_SetModState function. This function accepts an SDL_Keymod value representing the desired modifier state. It affects the modifier flags reported by SDL but does not change the actual keyboard state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetModState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetModState(SDL_Keymod modstate);\n```\n\n----------------------------------------\n\nTITLE: Event Masking in SDL 1.2\nDESCRIPTION: This code demonstrates the event masking in SDL 1.2, showcasing how to filter events. The `SDL_PeepEvents` function is used with `SDL_EVENTMASK` to retrieve only mouse button down events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nSDL_PeepEvents(&event, 1, SDL_GETEVENT, SDL_EVENTMASK(SDL_MOUSEBUTTONDOWN));\n```\n\n----------------------------------------\n\nTITLE: SDL_Folder Enum Definition in C\nDESCRIPTION: Defines the SDL_Folder enumeration with its members representing various standard directories. Each member corresponds to a specific folder such as home, desktop, documents, etc. The last member SDL_FOLDER_COUNT indicates the total number of folder types and is not a folder type itself. This enumeration is used to specify which directory to retrieve using SDL_GetUserFolder.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Folder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_Folder\n{\n    SDL_FOLDER_HOME,        /**< The folder which contains all of the current user's data, preferences, and documents. It usually contains most of the other folders. If a requested folder does not exist, the home folder can be considered a safe fallback to store a user's documents. */\n    SDL_FOLDER_DESKTOP,     /**< The folder of files that are displayed on the desktop. Note that the existence of a desktop folder does not guarantee that the system does show icons on its desktop; certain GNU/Linux distros with a graphical environment may not have desktop icons. */\n    SDL_FOLDER_DOCUMENTS,   /**< User document files, possibly application-specific. This is a good place to save a user's projects. */\n    SDL_FOLDER_DOWNLOADS,   /**< Standard folder for user files downloaded from the internet. */\n    SDL_FOLDER_MUSIC,       /**< Music files that can be played using a standard music player (mp3, ogg...). */\n    SDL_FOLDER_PICTURES,    /**< Image files that can be displayed using a standard viewer (png, jpg...). */\n    SDL_FOLDER_PUBLICSHARE, /**< Files that are meant to be shared with other users on the same computer. */\n    SDL_FOLDER_SAVEDGAMES,  /**< Save files for games. */\n    SDL_FOLDER_SCREENSHOTS, /**< Application screenshots. */\n    SDL_FOLDER_TEMPLATES,   /**< Template files to be used when the user requests the desktop environment to create a new file in a certain folder, such as \"New Text File.txt\".  Any file in the Templates folder can be used as a starting point for a new file. */\n    SDL_FOLDER_VIDEOS,      /**< Video files that can be played using a standard video player (mp4, webm...). */\n    SDL_FOLDER_COUNT        /**< Total number of types in this enum, not a folder type by itself. */\n} SDL_Folder;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC in C\nDESCRIPTION: This C macro defines the SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC hint, which specifies whether to use the HIDAPI driver for Nintendo Online classic controllers. Setting it to \"0\" disables the driver, while \"1\" enables it. The default value inherits from SDL_HINT_JOYSTICK_HIDAPI.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC \"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC\"\n```\n\n----------------------------------------\n\nTITLE: Set SoundFonts Paths Mix_SetSoundFonts C\nDESCRIPTION: Sets the paths to SoundFont files for use by supported MIDI backends. SoundFonts are used to provide the sound samples for MIDI playback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_31\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_SetSoundFonts(const char *paths);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FPoint Structure in C\nDESCRIPTION: Defines the SDL_FPoint structure, which represents a point with floating-point x and y coordinates. This structure is essential for precise positioning and calculations using floating-point values within SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FPoint.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_FPoint\n{\n    float x;\n    float y;\n} SDL_FPoint;\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenGL during Configuration\nDESCRIPTION: Disables OpenGL support during SDL2 configuration. This is a workaround for OpenGL problems arising from desktop OpenGL headers being present during build time, which can supersede ES/ES2 variants.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n./configure --disable-video-opengl\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED in C\nDESCRIPTION: Defines a hint to exclude specific USB VID/PID pairs from being recognized as ROG gamepad capable mice. The hint accepts a comma-separated list of hexadecimal VID/PID pairs or a file path prefixed with '@'. This hint should be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED \"SDL_ROG_GAMEPAD_MICE_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: Installing Raspbian Build Dependencies\nDESCRIPTION: Installs necessary development libraries on Raspbian, including udev for device management, ALSA for audio, and dbus for inter-process communication. This is a prerequisite for building SDL2 on the Raspberry Pi.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install libudev-dev libasound2-dev libdbus-1-dev\n```\n\n----------------------------------------\n\nTITLE: Loading WEBP Image from IO Stream using IMG_LoadWEBP_IO in C\nDESCRIPTION: This code snippet demonstrates the syntax for loading a WEBP image from an SDL_IOStream using the IMG_LoadWEBP_IO function. It takes an SDL_IOStream as input and returns a pointer to an SDL_Surface containing the loaded image data, or NULL if an error occurred. It's available since SDL_image 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadWEBP_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadWEBP_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Load animation from SDL_IOStream in C\nDESCRIPTION: This function loads an animation from an SDL_IOStream. It takes an SDL_IOStream pointer and a boolean indicating whether to close the IO stream after loading. The function returns a pointer to an IMG_Animation structure, or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_14\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimation_IO(SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_FORCE_RAISEWINDOW Definition in C\nDESCRIPTION: Defines the SDL_HINT_FORCE_RAISEWINDOW macro, which is used as a hint to control window raising behavior.  The value assigned to this macro is a string literal that serves as the key for setting the hint. The available values for the hint are \"0\" (honor OS policy) and \"1\" (force raise).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_FORCE_RAISEWINDOW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_FORCE_RAISEWINDOW \"SDL_FORCE_RAISEWINDOW\"\n```\n\n----------------------------------------\n\nTITLE: Mix_GroupOldest Function Declaration in C\nDESCRIPTION: This code snippet shows the declaration of the `Mix_GroupOldest` function in C. It takes an integer `tag` as input, which is used to identify a group of channels. It returns an integer representing the channel number of the oldest playing sample within the group, or -1 if no such channel is found.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GroupOldest.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_GroupOldest(int tag);\n```\n\n----------------------------------------\n\nTITLE: SDL_Swap64 Function Definition in C\nDESCRIPTION: This snippet showcases the definition of the SDL_Swap64 function, which is designed to byte-swap an unsigned 64-bit integer. It's a forced-inline function available since SDL 3.2.0. The function takes a Uint64 value as input and returns a Uint32 with bytes swapped.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Swap64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE Uint32 SDL_Swap64(Uint64 x);\n```\n\n----------------------------------------\n\nTITLE: Get Window Pixel Density in C\nDESCRIPTION: This C code snippet shows the syntax for using the `SDL_GetWindowPixelDensity` function to retrieve the pixel density of a window. It takes an `SDL_Window` pointer as input and returns a float representing the pixel density or 0.0f on failure. This function should only be called on the main thread and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetWindowPixelDensity.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_GetWindowPixelDensity(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Get Font Height using TTF_GetFontHeight in C\nDESCRIPTION: Retrieves the total height of a specified TTF font. It requires a valid TTF_Font pointer as input and returns an integer representing the height of the font. This function is part of the SDL_ttf library and available since version 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontHeight.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontHeight(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Run SDL Test Programs with DirectFB and OpenGL\nDESCRIPTION: This sets the environment variables required to run SDL test programs using DirectFB as the video driver and utilizes the software OpenGL implementation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL_VIDEODRIVER=directfb\nexport LD_LIBRARY_PATH=/usr/local/dfb_GL/lib\nexport LD_PRELOAD=/usr/local/dfb_GL/libGL.so.7\n\n./testgl\n```\n\n----------------------------------------\n\nTITLE: Defining Mix_OutOfMemory macro in C\nDESCRIPTION: This code defines the Mix_OutOfMemory macro to be equivalent to SDL_OutOfMemory. This macro allows the SDL_mixer library to use the standard SDL error-reporting mechanism for out-of-memory conditions. It's defined in the SDL_mixer.h header file and requires the SDL_mixer library to be included in the project.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_OutOfMemory.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define Mix_OutOfMemory SDL_OutOfMemory\n```\n\n----------------------------------------\n\nTITLE: SDL_PRINTF_FORMAT_STRING Macro Definition in C\nDESCRIPTION: Defines the SDL_PRINTF_FORMAT_STRING macro. This macro is used to annotate function parameters that should be treated as printf-style format strings.  It's typically defined as _Printf_format_string_ if supported by the compiler, otherwise as nothing. This allows static analysis tools to verify the correct usage of format strings, preventing potential security vulnerabilities. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRINTF_FORMAT_STRING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PRINTF_FORMAT_STRING _Printf_format_string_\n```\n\n----------------------------------------\n\nTITLE: Get Platform Name using SDL_GetPlatform in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetPlatform function, which returns the name of the current platform as a const char* in SDL3. The function takes no arguments and returns a string representing the platform name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetPlatform.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * SDL_GetPlatform(void);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GPUCullMode enum in C\nDESCRIPTION: This code defines the `SDL_GPUCullMode` enumeration in C, used to specify which triangle faces should be culled during rendering in SDL3. It provides options for disabling culling (`SDL_GPU_CULLMODE_NONE`), culling front-facing triangles (`SDL_GPU_CULLMODE_FRONT`), and culling back-facing triangles (`SDL_GPU_CULLMODE_BACK`). This enum is used as part of graphics pipeline configuration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUCullMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUCullMode\n{\n    SDL_GPU_CULLMODE_NONE,   /**< No triangles are culled. */\n    SDL_GPU_CULLMODE_FRONT,  /**< Front-facing triangles are culled. */\n    SDL_GPU_CULLMODE_BACK    /**< Back-facing triangles are culled. */\n} SDL_GPUCullMode;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_hid_device struct in C\nDESCRIPTION: This code snippet defines the `SDL_hid_device` struct as an opaque handle. It is a forward declaration, meaning the actual structure definition is hidden. This is typically used to abstract the underlying implementation details of the HID device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_device.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_hid_device SDL_hid_device;\n```\n\n----------------------------------------\n\nTITLE: SDL_isblank Function Signature in C\nDESCRIPTION: This code snippet shows the function signature for SDL_isblank in C. It takes an integer representing a character as input and returns an integer indicating whether the character is a space or tab.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isblank.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isblank(int x);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Width Query Functions in C\nDESCRIPTION: Functions for querying whether a font is fixed-width or scalable. Fixed-width fonts have characters that all occupy the same horizontal space.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_15\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_FontIsFixedWidth(const TTF_Font *font);                                                                                           // Query whether a font is fixed-width.\nbool TTF_FontIsScalable(const TTF_Font *font);                                                                                             // Query whether a font is scalable or not.\n```\n\n----------------------------------------\n\nTITLE: SDL_iscntrl Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_iscntrl function in C. It takes an integer as input, representing the character to check, and returns an integer, which is non-zero if the character is a control character, and zero otherwise. The function only considers ASCII control characters (0-0x1F and 0x7F).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_iscntrl.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_iscntrl(int x);\n```\n\n----------------------------------------\n\nTITLE: Get Original Memory Functions in SDL\nDESCRIPTION: Retrieves the original set of SDL memory functions. This function populates the provided pointers with the original memory allocation functions (malloc, calloc, realloc, and free) used by SDL. It's available since SDL 2.24.0 and defined in SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetOriginalMemoryFunctions.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GetOriginalMemoryFunctions(SDL_malloc_func *malloc_func,\n                                    SDL_calloc_func *calloc_func,\n                                    SDL_realloc_func *realloc_func,\n                                    SDL_free_func *free_func);\n```\n\n----------------------------------------\n\nTITLE: Detecting Image Format in SDL3_image\nDESCRIPTION: Functions to detect the image format from an SDL_IOStream. These functions allow the caller to determine the image type before attempting to load it. They read the stream but do not fully decode the image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_2\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isAVIF(SDL_IOStream *src);                                                                                // Detect AVIF image data on a readable/seekable SDL_IOStream.\nbool IMG_isICO(SDL_IOStream *src);                                                                                 // Detect ICO image data on a readable/seekable SDL_IOStream.\nbool IMG_isCUR(SDL_IOStream *src);                                                                                 // Detect CUR image data on a readable/seekable SDL_IOStream.\nbool IMG_isBMP(SDL_IOStream *src);                                                                                 // Detect BMP image data on a readable/seekable SDL_IOStream.\nbool IMG_isGIF(SDL_IOStream *src);                                                                                 // Detect GIF image data on a readable/seekable SDL_IOStream.\nbool IMG_isJPG(SDL_IOStream *src);                                                                                 // Detect JPG image data on a readable/seekable SDL_IOStream.\nbool IMG_isJXL(SDL_IOStream *src);                                                                                 // Detect JXL image data on a readable/seekable SDL_IOStream.\nbool IMG_isLBM(SDL_IOStream *src);                                                                                 // Detect LBM image data on a readable/seekable SDL_IOStream.\nbool IMG_isPCX(SDL_IOStream *src);                                                                                 // Detect PCX image data on a readable/seekable SDL_IOStream.\nbool IMG_isPNG(SDL_IOStream *src);                                                                                 // Detect PNG image data on a readable/seekable SDL_IOStream.\nbool IMG_isPNM(SDL_IOStream *src);                                                                                 // Detect PNM image data on a readable/seekable SDL_IOStream.\nbool IMG_isSVG(SDL_IOStream *src);                                                                                 // Detect SVG image data on a readable/seekable SDL_IOStream.\nbool IMG_isQOI(SDL_IOStream *src);                                                                                 // Detect QOI image data on a readable/seekable SDL_IOStream.\nbool IMG_isTIF(SDL_IOStream *src);                                                                                 // Detect TIFF image data on a readable/seekable SDL_IOStream.\nbool IMG_isXCF(SDL_IOStream *src);                                                                                 // Detect XCF image data on a readable/seekable SDL_IOStream.\nbool IMG_isXPM(SDL_IOStream *src);                                                                                 // Detect XPM image data on a readable/seekable SDL_IOStream.\nbool IMG_isXV(SDL_IOStream *src);                                                                                  // Detect XV image data on a readable/seekable SDL_IOStream.\nbool IMG_isWEBP(SDL_IOStream *src);                                                                                // Detect WEBP image data on a readable/seekable SDL_IOStream.\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadWEBPAnimation_IO Syntax (SDL_image, C)\nDESCRIPTION: This C code snippet shows the syntax for the IMG_LoadWEBPAnimation_IO function, part of the SDL_image library. It takes an SDL_IOStream pointer as input and returns a pointer to an IMG_Animation structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadWEBPAnimation_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadWEBPAnimation_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL 1.2 Window Creation\nDESCRIPTION: This code snippet demonstrates the SDL 1.2 way of creating a fullscreen OpenGL window and setting its caption.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/MigrationGuide.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_WM_SetCaption(\"My Game Window\", \"game\");\nSDL_Surface *screen = SDL_SetVideoMode(640, 480, 0, SDL_FULLSCREEN | SDL_OPENGL);\n```\n\n----------------------------------------\n\nTITLE: Define SDL Audio Pause Hint (Android)\nDESCRIPTION: Defines the SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO hint string. This hint is used to control whether audio is paused when the application is backgrounded on Android when using non-blocking pause behavior (SDL_ANDROID_BLOCK_ON_PAUSE). It relies on the SDL_hints.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO \"SDL_ANDROID_BLOCK_ON_PAUSE_PAUSEAUDIO\"\n```\n\n----------------------------------------\n\nTITLE: Cross-compiling for armeabi-v7a architecture\nDESCRIPTION: Cross-compiles the project for the `armeabi-v7a` architecture, which supports more advanced ARM processors. Uses specific compiler and linker flags to target this architecture and ensure compatibility, including flags for VFPv3-D16 and Cortex-A8 optimization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nmkdir cross-android-v7a/ && cd cross-android-v7a/\n# .o: -march=armv5te -mtune=xscale -msoft-float -mthumb  =>  -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb\n# .so: -march=armv7-a -Wl,--fix-cortex-a8\nCFLAGS=\"-g -O2 -march=armv7-a -mfpu=vfpv3-d16 -mfloat-abi=softfp -mthumb\" LFDLAGS=\"-march=armv7-a -Wl,--fix-cortex-a8\" \\\n  ../configure --host=arm-linux-androideabi \\\n  ...\n```\n\n----------------------------------------\n\nTITLE: Define SDL_WINDOWPOS_UNDEFINED_MASK in C\nDESCRIPTION: Defines the SDL_WINDOWPOS_UNDEFINED_MASK macro, which is used as a mask for undefined window positions in SDL3. This allows the operating system to determine the initial window position. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINDOWPOS_UNDEFINED_MASK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_UNDEFINED_MASK    0x1FFF0000u\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK in C\nDESCRIPTION: This code snippet defines the SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK hint as a preprocessor macro. This hint determines if holding the Ctrl key while left-clicking on macOS generates a right-click event. The string literal is the value associated with this hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK \"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\"\n```\n\n----------------------------------------\n\nTITLE: Get Sensor Device Non-Portable Type - SDL2 - C\nDESCRIPTION: Retrieves the platform-dependent type of a sensor, identified by its device index, using the SDL_SensorGetDeviceNonPortableType function. The function returns an integer representing the sensor's type or -1 if the device index is out of range. This function is available since SDL 2.0.9.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SensorGetDeviceNonPortableType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_SensorGetDeviceNonPortableType(int device_index);\n```\n\n----------------------------------------\n\nTITLE: Extracting Xcode Archive (bash)\nDESCRIPTION: This bash snippet extracts the Xcode archive. The tar command is used with zxf options to extract the compressed archive in the top-level SDL directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/macos.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd [path_to_SDL_source]\ntar zxf Xcode.tar.gz\n```\n\n----------------------------------------\n\nTITLE: TTF Font Direction Functions in C\nDESCRIPTION: Functions for setting and getting the text direction used for shaping. Allows controlling the layout direction of text (e.g., left-to-right, right-to-left).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_17\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_SetFontDirection(TTF_Font *font, TTF_Direction direction);                                                                        // Set the direction to be used for text shaping by a font.\nTTF_Direction TTF_GetFontDirection(TTF_Font *font);                                                                                        // Get the direction to be used for text shaping by a font.\n```\n\n----------------------------------------\n\nTITLE: Including SDL3 in CMake Project\nDESCRIPTION: This snippet demonstrates how to integrate SDL3 into a CMake project. It finds the SDL3 package, requires the CONFIG and COMPONENTS, and links the target executable to the SDL3 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(SDL3 REQUIRED CONFIG REQUIRED COMPONENTS SDL3)\ntarget_link_libraries(mygame PRIVATE SDL3::SDL3)\n```\n\n----------------------------------------\n\nTITLE: Set Timidity Configuration File Mix_SetTimidityCfg C\nDESCRIPTION: Sets the full path to the Timidity configuration file. Timidity is a software synthesizer used to play MIDI files, and its configuration file controls its behavior.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_34\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_SetTimidityCfg(const char *path);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake with CMAKE_PREFIX_PATH for SDL\nDESCRIPTION: This shell command shows how to configure a CMake project to use a specific SDL installation by setting the `CMAKE_PREFIX_PATH` variable. This ensures that CMake can find the installed SDL libraries and headers. Requires CMake.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/windows.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncmake .. -G Ninja -DCMAKE_PREFIX_PATH=C:/Libraries\n```\n\n----------------------------------------\n\nTITLE: Compiling C code with GCC\nDESCRIPTION: This is a standard GCC command for compiling a C source file into an executable.  It's shown here for comparison to the Emscripten command. It compiles the `mygame.c` source file and outputs an executable named `mygame`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/emscripten.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngcc -o mygame mygame.c  # or whatever\n```\n\n----------------------------------------\n\nTITLE: Get SDL_rtf Version in C\nDESCRIPTION: This C function retrieves the version of the dynamically linked SDL_rtf library. It takes no arguments and returns an integer representing the version number. The function is part of the SDL_rtf library and requires including the SDL3_rtf/SDL_rtf.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_Version.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint RTF_Version(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadBE64 Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadBE64 function. It takes a pointer to an SDL_RWops structure as input, representing the data stream, and returns a 64-bit unsigned integer (Uint64) containing the data read from the stream in native byte order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ReadBE64.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint64 SDL_ReadBE64(SDL_RWops * src);\n```\n\n----------------------------------------\n\nTITLE: SDL_ClipboardCleanupCallback Definition C\nDESCRIPTION: Defines a callback function that is called when the clipboard is cleared, or new data is set. It takes a void pointer `userdata` as a parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ClipboardCleanupCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_ClipboardCleanupCallback)(void *userdata);\n```\n\n----------------------------------------\n\nTITLE: TTF Font SDF Functions in C\nDESCRIPTION: Functions for enabling and querying Signed Distance Field (SDF) rendering for a font. SDF rendering allows for higher-quality text scaling, especially at smaller sizes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_9\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_SetFontSDF(TTF_Font *font, bool enabled);                                                                                         // Enable Signed Distance Field rendering for a font.\nbool TTF_GetFontSDF(const TTF_Font *font);                                                                                                 // Query whether Signed Distance Field rendering is enabled for a font.\n```\n\n----------------------------------------\n\nTITLE: SDL_Log Usage with SDL_PRILLu in C\nDESCRIPTION: Illustrates how to use the SDL_PRILLu macro with the SDL_Log function to print an unsigned long long integer. This is the recommended way to format and log such values using SDL. SDL_Log is part of the SDL library and allows printing messages to the console or debugger.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PRILLu.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nSDL_Log(\"There are %\" SDL_PRILLu \" bottles of beer on the wall.\", bottles);\n```\n\n----------------------------------------\n\nTITLE: SDL_unsetenv_unsafe Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_unsetenv_unsafe function in C. It takes a constant character pointer 'name' as input, which represents the name of the environment variable to unset. It returns an integer, where 0 indicates success and -1 indicates an error. This function is not thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_unsetenv_unsafe.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_unsetenv_unsafe(const char *name);\n```\n\n----------------------------------------\n\nTITLE: Cleaning up sysroot mounts after Chroot\nDESCRIPTION: Unmounts the bound directories (/dev, /proc, /sys) and the mounted image after exiting the chroot environment. This is crucial for cleaning up the environment and preventing issues later on.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexit\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo umount $SYSROOT/dev\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo umount $SYSROOT/proc\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo umount $SYSROOT/sys\n```\n\nLANGUAGE: shell\nCODE:\n```\nsudo umount /mnt\n```\n\n----------------------------------------\n\nTITLE: Rendering LCD Text C\nDESCRIPTION: This function renders UTF-8 text at LCD subpixel quality to a new ARGB surface. It requires a valid TTF_Font pointer, a const char pointer to the text, the length of the text, an SDL_Color structure for the foreground color, and an SDL_Color structure for the background color. Returns an SDL_Surface pointer containing the rendered text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_40\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_LCD(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: SDL_wcscasecmp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_wcscasecmp function in C, which compares two null-terminated wide strings case-insensitively. It takes two constant wchar_t pointers as input (str1 and str2) and returns an integer indicating their relative order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_wcscasecmp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_wcscasecmp(const wchar_t *str1, const wchar_t *str2);\n```\n\n----------------------------------------\n\nTITLE: Get Window Gamma Ramp - SDL2 - C\nDESCRIPTION: Retrieves the gamma ramp for the display associated with the given window. The function populates the provided arrays with the red, green, and blue translation tables. The function returns 0 on success and a negative error code on failure. The window parameter specifies which display to query. Note that this function operates on the entire display, not the individual window.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetWindowGammaRamp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetWindowGammaRamp(SDL_Window * window,\n                           Uint16 * red,\n                           Uint16 * green,\n                           Uint16 * blue);\n```\n\n----------------------------------------\n\nTITLE: SDL_CompilerBarrier Macro Definition in C\nDESCRIPTION: This macro defines a compiler barrier using `DoCompilerSpecificReadWriteBarrier()`. It prevents the compiler from reordering reads and writes to globally visible variables across the call.  While preventing compiler reordering, it doesn't prevent CPU reordering.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CompilerBarrier.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_CompilerBarrier() DoCompilerSpecificReadWriteBarrier()\n```\n\n----------------------------------------\n\nTITLE: Hiding Sections from the Compiler in C\nDESCRIPTION: This code snippet shows how to include information specifically for the wikiheaders documentation without affecting the C compiler. The convention is to put the wikiheaders-specific content within an `#ifdef SDL_WIKI_DOCUMENTATION_SECTION` block. This allows defining a generic version of a symbol with a Doxygen-style comment for documentation purposes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/documentation-rules.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#ifdef SDL_WIKI_DOCUMENTATION_SECTION\n```\n\n----------------------------------------\n\nTITLE: Creating an Android Project with Python Script\nDESCRIPTION: This Python script automates the creation of a basic Android project structure for SDL applications. It takes the application's package name and a list of source files as input. It aggregates the source files into a single directory, so they must have unique names.  Running the script with `--help` will list all available options.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n./create-android-project.py com.yourcompany.yourapp < sources.list\n./create-android-project.py com.yourcompany.yourapp source1.c source2.c ...sourceN.c\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_VITA_ENABLE_BACK_TOUCH Definition in C\nDESCRIPTION: Defines the SDL_HINT_VITA_ENABLE_BACK_TOUCH macro. This macro is used as a key when setting the SDL hint via SDL_SetHint or SDL_SetHintWithPriority to control whether the back touch panel is enabled on the PlayStation Vita. The hint should be set before initializing SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VITA_ENABLE_BACK_TOUCH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VITA_ENABLE_BACK_TOUCH \"SDL_VITA_ENABLE_BACK_TOUCH\"\n```\n\n----------------------------------------\n\nTITLE: Querying Music Fading SDL_mixer C\nDESCRIPTION: Queries the current fading status of the music stream. Returns a Mix_Fading enum value representing the fading state.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_23\n\nLANGUAGE: C\nCODE:\n```\nMix_Fading Mix_FadingMusic(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_StringToTag Function\nDESCRIPTION: Convert from a 4 character string to a 32-bit tag. Returns the 32 bit tag.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_43\n\nLANGUAGE: C\nCODE:\n```\nUint32 TTF_StringToTag(const char *string);                                                                                                // Convert from a 4 character string to a 32-bit tag.\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontWrapAlignment Function\nDESCRIPTION: Queries a font's current wrap alignment option. Returns a TTF_HorizontalAlignment value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_29\n\nLANGUAGE: C\nCODE:\n```\nTTF_HorizontalAlignment TTF_GetFontWrapAlignment(const TTF_Font *font);                                                                    // Query a font's current wrap alignment option.\n```\n\n----------------------------------------\n\nTITLE: Destroying Surface Text Engine C\nDESCRIPTION: This function destroys a text engine created for drawing text on SDL surfaces. It requires a pointer to the TTF_TextEngine to be destroyed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_45\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroySurfaceTextEngine(TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Creating Package Directory\nDESCRIPTION: This command creates a directory named 'Package' which will be used as the output location for the packaged application. This ensures a clean and organized build process.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_6\n\nLANGUAGE: Batchfile\nCODE:\n```\nmkdir Package\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_CUSTOM Macro in C\nDESCRIPTION: Defines the SDL_HAPTIC_CUSTOM macro as a bit flag indicating the support for custom haptic effects. This macro is used to determine if a haptic device can handle user-defined effects. The value (1u<<15) represents a specific bit being set, allowing it to be used as a flag in bitwise operations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_CUSTOM.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HAPTIC_CUSTOM       (1u<<15)\n```\n\n----------------------------------------\n\nTITLE: SDL_round Syntax in C\nDESCRIPTION: The SDL_round function rounds a double-precision floating point value `x` to the nearest integer. Values halfway between integers are rounded away from zero. The function is defined in SDL3/SDL_stdinc.h and is thread-safe.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_round.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble SDL_round(double x);\n```\n\n----------------------------------------\n\nTITLE: Defining Mix_Music Structure in SDL_mixer\nDESCRIPTION: This code snippet defines the Mix_Music structure as a typedef to a structure. This type represents the internal music format in SDL_mixer. This is used internally to handle music data.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Music.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct Mix_Music Mix_Music;\n```\n\n----------------------------------------\n\nTITLE: Get Font Ascent with TTF_GetFontAscent in C\nDESCRIPTION: This function retrieves the ascent of a font, which is the distance from the baseline to the top of the font. It requires a pointer to a TTF_Font structure as input and returns an integer representing the ascent value. The returned value is a positive integer relative to the baseline.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontAscent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_GetFontAscent(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoystickSetVirtualHat Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_JoystickSetVirtualHat function, used to set the value of a hat on a virtual joystick. It takes a joystick pointer, hat index, and hat value as input, and returns 0 on success or -1 on error. The update is applied on next SDL_JoystickUpdate.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickSetVirtualHat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickSetVirtualHat(SDL_Joystick *joystick, int hat, Uint8 value);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MouseWheelDirection Enum in C\nDESCRIPTION: This C code defines the SDL_MouseWheelDirection enumeration, which specifies the possible directions of mouse wheel scrolling: normal and flipped. It is available since SDL 3.2.0 and is used in handling mouse wheel events.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseWheelDirection.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_MouseWheelDirection\n{\n    SDL_MOUSEWHEEL_NORMAL,    /**< The scroll direction is normal */\n    SDL_MOUSEWHEEL_FLIPPED    /**< The scroll direction is flipped / natural */\n} SDL_MouseWheelDirection;\n```\n\n----------------------------------------\n\nTITLE: Destroying a Haptic Effect in SDL3 (C)\nDESCRIPTION: Destroys a haptic effect on a given SDL_Haptic device. The function takes a pointer to the SDL_Haptic device and the ID of the haptic effect to destroy. This function will stop the effect if it's running. Effects are automatically destroyed when the device is closed.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyHapticEffect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyHapticEffect(SDL_Haptic *haptic, SDL_HapticEffectID effect);\n```\n\n----------------------------------------\n\nTITLE: SDL_scalbnf Function Definition\nDESCRIPTION: Defines the syntax for the SDL_scalbnf function, which scales a floating-point value by an integer power of two. The function takes a float x and an integer n as input, and returns a float representing x * 2^n.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_scalbnf.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_scalbnf(float x, int n);\n```\n\n----------------------------------------\n\nTITLE: Sint8 Type Definition and Limits in C\nDESCRIPTION: Defines the Sint8 type as an alias for int8_t and provides macros for the maximum and minimum values that a Sint8 variable can hold. This is a standard way to define a signed 8-bit integer type and its boundaries in C.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/Sint8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int8_t Sint8;\n#define SDL_MAX_SINT8   ((Sint8)0x7F)           /* 127 */\n#define SDL_MIN_SINT8   ((Sint8)(~0x7F))        /* -128 */\n```\n\n----------------------------------------\n\nTITLE: TTF Font Kerning Functions in C\nDESCRIPTION: Functions for enabling/disabling and querying kerning for a font. Kerning adjusts the spacing between specific character pairs for improved readability.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_14\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_SetFontKerning(TTF_Font *font, bool enabled);                                                                                     // Set if kerning is enabled for a font.\nbool TTF_GetFontKerning(const TTF_Font *font);                                                                                             // Query whether or not kerning is enabled for a font.\n```\n\n----------------------------------------\n\nTITLE: Get Text Engine from TTF_Text Object in C\nDESCRIPTION: Retrieves the TTF_TextEngine used by a given TTF_Text object. The function takes a pointer to a TTF_Text object as input and returns a pointer to the TTF_TextEngine in use. If the operation fails, it returns NULL, and SDL_GetError() can be used to retrieve more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetTextEngine.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nTTF_TextEngine * TTF_GetTextEngine(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Get Glyph Kerning C\nDESCRIPTION: This function queries the kerning size between the glyphs of two UNICODE codepoints. It takes a TTF_Font pointer, the two codepoints, and a pointer to an integer to store the kerning size. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_53\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetGlyphKerning(TTF_Font *font, Uint32 previous_ch, Uint32 ch, int *kerning);\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration Example (CMake)\nDESCRIPTION: This example shows how to configure a CMake project for building Android applications, including specifying the toolchain file, Android ABI, SDK home, platform, and enabling tests. It uses variables to pass the necessary paths and settings to CMake.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_21\n\nLANGUAGE: CMake\nCODE:\n```\ncmake .. -DCMAKE_TOOLCHAIN_FILE=<path/to/android.toolchain.cmake> -DANDROID_ABI=<android-abi> -DSDL_ANDROID_HOME=<path-to-android-sdk-home> -DANDROID_PLATFORM=23 -DSDL_TESTS=ON\n```\n\n----------------------------------------\n\nTITLE: Installing Package (Xbox)\nDESCRIPTION: This command installs the generated .xvc package on the Xbox console. The [PACKAGE] placeholder should be replaced with the actual name of the .xvc file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_10\n\nLANGUAGE: Batchfile\nCODE:\n```\nxbapp install [PACKAGE].xvc\n```\n\n----------------------------------------\n\nTITLE: SDL_GetScancodeFromKey Syntax in C\nDESCRIPTION: Retrieves the SDL_Scancode corresponding to the given SDL_Keycode based on the current keyboard layout.  It takes an SDL_Keycode as input and returns the corresponding SDL_Scancode.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GetScancodeFromKey.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_HAIKU in C\nDESCRIPTION: This code snippet shows the definition of the SDL_PLATFORM_HAIKU preprocessor macro. It is defined as 1 when compiling for the Haiku operating system. This allows conditional compilation of code specific to Haiku.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_HAIKU.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_HAIKU 1\n```\n\n----------------------------------------\n\nTITLE: Clone Mesa from Git\nDESCRIPTION: Clones the Mesa repository from Git, which is needed for software OpenGL support with DirectFB.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git://anongit.freedesktop.org/git/mesa/mesa\ncd mesa\ngit checkout 2c9fdaf7292423c157fc79b5ce43f0f199dd753a\n```\n\n----------------------------------------\n\nTITLE: Set UNICODE Byte Swapping in SDL_ttf (C)\nDESCRIPTION: This function sets a boolean flag to indicate whether UNICODE text should generally be treated as byte-swapped. A UNICODE Byte Order Mark (BOM) within a string can override this setting for the remainder of that string. It's available since SDL_ttf 2.0.12.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_ByteSwappedUNICODE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid TTF_ByteSwappedUNICODE(SDL_bool swapped);\n```\n\n----------------------------------------\n\nTITLE: Query Music Paused Status Mix_PausedMusic C\nDESCRIPTION: Queries whether the music stream is currently paused. Returns `true` if the music is paused, `false` otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_19\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_PausedMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Setting Text Engine C\nDESCRIPTION: This function sets the text engine used by a text object. It requires a pointer to the TTF_Text and a pointer to the TTF_TextEngine. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_58\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextEngine(TTF_Text *text, TTF_TextEngine *engine);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DateFormat Enum in C\nDESCRIPTION: This code snippet defines the SDL_DateFormat enumeration in C, specifying the possible date formats (YYYYMMDD, DDMMYYYY, MMDDYYYY). It's used to represent the system's preferred date format.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DateFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_DateFormat\n{\n    SDL_DATE_FORMAT_YYYYMMDD = 0, /**< Year/Month/Day */\n    SDL_DATE_FORMAT_DDMMYYYY = 1, /**< Day/Month/Year */\n    SDL_DATE_FORMAT_MMDDYYYY = 2  /**< Month/Day/Year */\n} SDL_DateFormat;\n```\n\n----------------------------------------\n\nTITLE: TTF_Font Structure Definition in C\nDESCRIPTION: Defines the TTF_Font structure as an opaque pointer within the SDL_ttf library. This structure is used to represent a loaded font. The actual members of the structure are hidden from the user, making it an opaque data type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_Font.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct TTF_Font TTF_Font;\n```\n\n----------------------------------------\n\nTITLE: Using SDL_RunApp with SDL_MAIN_HANDLED for GDK\nDESCRIPTION: If you cannot include `SDL_main.h` in your main source file, you can manually call `SDL_RunApp` from your entry point. This function takes your `SDL_main` function and `NULL` as parameters.  To use `SDL_RunApp`, you must `#define SDL_MAIN_HANDLED` before including `SDL3/SDL_main.h`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\n#define SDL_MAIN_HANDLED\n#include <SDL3/SDL_main.h>\n\n// ...\n\nint main(int argc, char* argv[]) {\n  return SDL_RunApp(SDL_main, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: Quit SDL_ttf - SDL_ttf\nDESCRIPTION: Deinitializes SDL_ttf. This function should be called when the application is shutting down to release resources.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_116\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetFontDPI Function\nDESCRIPTION: Retrieves the target resolutions, in dots per inch. Requires pointers to int variables.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetFontDPI(TTF_Font *font, int *hdpi, int *vdpi);                                                                                 // Get font target resolutions, in dots per inch.\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AssertBreakpoint Macro in C\nDESCRIPTION: Defines the SDL_AssertBreakpoint macro, which expands to SDL_TriggerBreakpoint(). This macro is used internally within SDL to trigger a breakpoint when an assertion fails during development. It's not intended for direct use in application code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AssertBreakpoint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AssertBreakpoint() SDL_TriggerBreakpoint()\n```\n\n----------------------------------------\n\nTITLE: Enabling STL Support with Android NDK\nDESCRIPTION: To enable STL support in your project, create an Application.mk file in the jni folder and add the following line. This uses the c++_shared STL implementation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_8\n\nLANGUAGE: makefile\nCODE:\n```\nAPP_STL := c++_shared\n```\n\n----------------------------------------\n\nTITLE: Valgrind Wrapper Script (Shell)\nDESCRIPTION: This shell script is a wrapper for launching an Android application with Valgrind, a memory debugging tool. It sets the `TMPDIR` and executes Valgrind with specific options, including logging to a file on the SD card.  It requires Valgrind to be built and installed on the device.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_20\n\nLANGUAGE: Shell\nCODE:\n```\n#!/system/bin/sh\nexport TMPDIR=/data/data/org.libsdl.app\nexec /data/local/Inst/bin/valgrind --log-file=/sdcard/valgrind.log --error-limit=no $*\n```\n\n----------------------------------------\n\nTITLE: Freeing an Audio Stream with SDL_FreeAudioStream (C)\nDESCRIPTION: This code snippet shows the syntax for using SDL_FreeAudioStream to free an SDL_AudioStream. It takes a pointer to an SDL_AudioStream as input and releases the memory associated with it. This function is available since SDL 2.0.7.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FreeAudioStream.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FreeAudioStream(SDL_AudioStream *stream);\n```\n\n----------------------------------------\n\nTITLE: Skipping IOP Reset in SDL2 for PS2\nDESCRIPTION: This snippet demonstrates how to skip the IOP reset when debugging an SDL application on the PS2 using ps2client.  Calling `SDL_PS2_SKIP_IOP_RESET()` prevents losing the connection during debugging. A clean compilation is required after enabling or disabling the macro.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/ps2.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n.....\n\nSDL_PS2_SKIP_IOP_RESET();\n\nint main(int argc, char *argv[])\n{\n.....\n```\n\n----------------------------------------\n\nTITLE: Updating Text Layout with SDL_ttf in C\nDESCRIPTION: This function updates the layout of a text object. It requires a `TTF_Text` pointer.  It's likely needed after changes to text, font, or wrap settings. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_87\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_UpdateText(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL 1.2 Surface Creation in C\nDESCRIPTION: This snippet shows how to create a screen surface using SDL_SetVideoMode in SDL 1.2. It sets the screen resolution, color depth, and flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface *screen = SDL_SetVideoMode(640, 480, 32, 0);\n```\n\n----------------------------------------\n\nTITLE: Get Semaphore Value in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetSemaphoreValue function in SDL3. It takes a pointer to an SDL_Semaphore as input and returns the current value of the semaphore as a Uint32. The function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetSemaphoreValue.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint32 SDL_GetSemaphoreValue(SDL_Semaphore *sem);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_Close Syntax in C\nDESCRIPTION: Shows the syntax for the SDLNet_UDP_Close function, which closes a specified UDP socket. The socket must be a valid UDPsocket.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_Close.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_UDP_Close(UDPsocket sock);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TimerID in C\nDESCRIPTION: Defines the SDL_TimerID type as an integer. This type represents the identifier of a timer created using SDL_AddTimer. The header file required is SDL_timer.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TimerID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef int SDL_TimerID;\n```\n\n----------------------------------------\n\nTITLE: Mounting HTML5 filesystem for persistent storage\nDESCRIPTION: This code snippet demonstrates how to mount an HTML5 filesystem at the `/save` directory for persistent storage within a Native Client application. It also shows the required permission to be added to the `manifest.json`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/nacl.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nmount(\"\", \"/save\", \"html5fs\", 0, \"type=PERSISTENT\");\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop Length Time Mix_GetMusicLoopLengthTime C\nDESCRIPTION: Retrieves the loop time length of a music stream, in seconds. The returned value represents the duration of the loop segment within the music.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_28\n\nLANGUAGE: c\nCODE:\n```\ndouble Mix_GetMusicLoopLengthTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Save SDL_Surface to PNG via SDL_IOStream in C\nDESCRIPTION: This function saves an SDL_Surface into PNG image data through an SDL_IOStream. It takes an SDL_Surface pointer, an SDL_IOStream pointer, and a boolean indicating whether to close the IO stream after saving. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_10\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SavePNG_IO(SDL_Surface *surface, SDL_IOStream *dst, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: IMG_isPCX Syntax in C\nDESCRIPTION: The IMG_isPCX function checks if an SDL_IOStream contains PCX image data. It takes an SDL_IOStream pointer as input and returns a boolean indicating whether the stream contains PCX data. The function seeks back to the original position of the stream regardless of the outcome. It requires the SDL_image library, version 3.0.0 or later.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_isPCX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isPCX(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL_AppQuit Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_AppQuit function in C. It takes a void pointer `appstate` and an `SDL_AppResult` as parameters and returns void. This function is used to deinitialize application resources before SDL terminates the program when using SDL_MAIN_USE_CALLBACKS.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AppQuit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AppQuit(void *appstate, SDL_AppResult result);\n```\n\n----------------------------------------\n\nTITLE: TTF_GetPreviousTextSubString Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_GetPreviousTextSubString function in C. This function retrieves the previous substring in a text object. It takes a pointer to a TTF_Text object, a constant pointer to a TTF_SubString object, and a pointer to a TTF_SubString object as parameters and returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetPreviousTextSubString.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool TTF_GetPreviousTextSubString(TTF_Text *text, const TTF_SubString *substring, TTF_SubString *previous);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_GetConnectionStatus Syntax (C)\nDESCRIPTION: Defines the syntax for SDLNet_GetConnectionStatus, a function that checks if a stream socket is connected without blocking. It takes a pointer to an SDLNet_StreamSocket and returns an integer representing the connection status (1 for connected, -1 for failed, 0 for still connecting).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_GetConnectionStatus.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_GetConnectionStatus(SDLNet_StreamSocket *sock);\n```\n\n----------------------------------------\n\nTITLE: Cloning Raspberry Pi Tools for Cross-Compilation\nDESCRIPTION: Clones the Raspberry Pi tools repository to obtain cross-compilation tools, which are essential for building SDL2 for Raspbian on an x86 Linux machine. The depth 1 flag minimizes download size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo git clone --depth 1 https://github.com/raspberrypi/tools /opt/rpi-tools\n```\n\n----------------------------------------\n\nTITLE: SDL_zerop Macro Definition in C\nDESCRIPTION: Defines the SDL_zerop macro using SDL_memset to set the memory of the object pointed to by 'x' to zero. It calculates the size of the object using sizeof(*(x)).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_zerop.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_zerop(x) SDL_memset((x), 0, sizeof(*(x)))\n```\n\n----------------------------------------\n\nTITLE: SDLNet_UDP_Bind Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_UDP_Bind function in C. This function is part of SDL_net and is used to bind an address to the requested channel on the UDP socket. It returns the channel which was bound, or -1 on error. Requires a UDPsocket, an integer representing the channel, and a pointer to an IPaddress structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_UDP_Bind.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_UDP_Bind(UDPsocket sock, int channel, const IPaddress *address);\n```\n\n----------------------------------------\n\nTITLE: Building a Native Client Test Application\nDESCRIPTION: This example command shows how to build a specific test application (testrendercopyex.c) using the naclbuild.sh script. It defines the SOURCE environment variable to specify the test file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/nacl.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nSOURCES=~/sdl/SDL/test/testrendercopyex.c ./naclbuild.sh ~/naclsdk/pepper_35\n```\n\n----------------------------------------\n\nTITLE: Setting Text Position with SDL_ttf in C\nDESCRIPTION: This function sets the position of a text object. It requires a `TTF_Text` pointer and the x and y coordinates as integers. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_70\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextPosition(TTF_Text *text, int x, int y);\n```\n\n----------------------------------------\n\nTITLE: Cloning SDL 1.2 Git Repository\nDESCRIPTION: This command clones the SDL 1.2 Git repository from GitHub. It is recommended to use this over the last official release (1.2.15) to access accumulated fixes. Note that SDL 1.2 is obsolete.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SourceCode.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/libsdl-org/SDL-1.2\n```\n\n----------------------------------------\n\nTITLE: SDL_TTF Version Macros Definition in C\nDESCRIPTION: Defines macros for SDL_ttf versioning, allowing compile-time checks for minimum required versions. Includes macros for major, minor, and micro version numbers, and a macro to check if the current SDL_ttf version is at least a specific version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_TTF_MAJOR_VERSION                                                                                                              // Printable format: \"%d.%d.%d\", MAJOR, MINOR, MICRO\n#define SDL_TTF_VERSION                                                                                                                    // This is the version number macro for the current SDL_ttf version.\n#define SDL_TTF_VERSION_ATLEAST(X, Y, Z)                                                                                                   // This macro will evaluate to true if compiled with SDL_ttf at least X.Y.Z.\n```\n\n----------------------------------------\n\nTITLE: CMake Configuration for SDL2\nDESCRIPTION: This CMake configuration is used to link SDL2, SDL2main and SDL2-static as targets in your project. It's necessary to add SDL as a subproject, link required libraries, and ensures that add_library() is used for the target containing the main function, not add_executable().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(yourgame SDL2 SDL2main)\n```\n\n----------------------------------------\n\nTITLE: Using SDL_BYTEORDER in C\nDESCRIPTION: This example shows how to check the system's byte order at compile time using the SDL_BYTEORDER macro.  It uses preprocessor directives to conditionally execute code based on the value of SDL_BYTEORDER.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BYTEORDER.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#if SDL_BYTEORDER == SDL_BIG_ENDIAN\nSDL_Log(\"This system is bigendian.\");\n#endif\n```\n\n----------------------------------------\n\nTITLE: Get Game Controller Mapping by Index - C\nDESCRIPTION: Retrieves the game controller mapping string associated with a specific device index.  The `joystick_index` parameter specifies the index of the joystick. The returned string must be freed using `SDL_free`. Returns NULL if no mapping is available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerMappingForDeviceIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nchar* SDL_GameControllerMappingForDeviceIndex(int joystick_index);\n```\n\n----------------------------------------\n\nTITLE: SDL_TLSCleanup Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_TLSCleanup function. It's a void function that takes no arguments and cleans up thread-local storage (TLS) for the calling thread. It is part of the SDL2 library and available since SDL 2.0.16.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TLSCleanup.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_TLSCleanup(void);\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_TimerID in C\nDESCRIPTION: Defines the SDL_TimerID type as an alias for Uint32. This type is used to uniquely identify a timer created with SDL_AddTimer. The type is defined in SDL3/SDL_timer.h and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TimerID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_TimerID;\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color Float C\nDESCRIPTION: This function sets the color of a text object using floating-point values. It requires a pointer to the TTF_Text and float values for red, green, blue, and alpha components. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_67\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextColorFloat(TTF_Text *text, float r, float g, float b, float a);\n```\n\n----------------------------------------\n\nTITLE: Building a specific APK (CMake)\nDESCRIPTION: This cmake command will build the apk for a single specified target, in this case testsprite.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_22\n\nLANGUAGE: CMake\nCODE:\n```\ncmake --build . --target testsprite-apk\n```\n\n----------------------------------------\n\nTITLE: SDL_MIXER_VERSION_ATLEAST Macro Definition in C\nDESCRIPTION: This macro checks if the SDL_mixer version is at least X.Y.Z. It compares the major, minor, and patch versions against the provided arguments. The macro relies on SDL_MIXER_MAJOR_VERSION, SDL_MIXER_MINOR_VERSION, and SDL_MIXER_PATCHLEVEL being defined during compilation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/SDL_MIXER_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIXER_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_MIXER_MAJOR_VERSION >= X) && \\\n     (SDL_MIXER_MAJOR_VERSION > X || SDL_MIXER_MINOR_VERSION >= Y) && \\\n     (SDL_MIXER_MAJOR_VERSION > X || SDL_MIXER_MINOR_VERSION > Y || SDL_MIXER_PATCHLEVEL >= Z))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SSE_INTRINSICS in C\nDESCRIPTION: This C macro definition indicates that the compiler supports Intel SSE intrinsics. If defined, SDL includes <xmmintrin.h>. It's available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SSE_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SSE_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: Embedding Data Files with Emscripten\nDESCRIPTION: This command embeds a data file into the application using Emscripten's `--embed-file` option. It packages the 'sample.wav' file and makes it available at the '/sounds/sample.wav' path at runtime within the MEMFS filesystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nemcc -o index.html loopwave.c --embed-file=../test/sample.wav@/sounds/sample.wav\n```\n\n----------------------------------------\n\nTITLE: Getting Text Color (Float) with SDL_ttf in C\nDESCRIPTION: This function retrieves the RGBA color of a text object as floating-point values. It requires a `TTF_Text` pointer and pointers to floats for the red, green, blue, and alpha components. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_69\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextColorFloat(TTF_Text *text, float *r, float *g, float *b, float *a);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_ReceiveDatagram Syntax (C)\nDESCRIPTION: Defines the syntax for the SDLNet_ReceiveDatagram function, which receives a datagram packet from a socket. The function takes a pointer to the datagram socket and a pointer to a datagram pointer as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_ReceiveDatagram.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDLNet_ReceiveDatagram(SDLNet_DatagramSocket *sock, SDLNet_Datagram **dgram);\n```\n\n----------------------------------------\n\nTITLE: Usage Example of SDL_STRINGIFY_ARG in C\nDESCRIPTION: This demonstrates how to use SDL_STRINGIFY_ARG to include the function name in a debug output string. The `__FUNCTION__` macro is converted to a string using `SDL_STRINGIFY_ARG`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_STRINGIFY_ARG.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define LOG_ERROR(X) OutputDebugString(SDL_STRINGIFY_ARG(__FUNCTION__) \": \" X \"\\n\")\n```\n\n----------------------------------------\n\nTITLE: Check for Big-Endian System\nDESCRIPTION: This code snippet demonstrates how to use the SDL_BIG_ENDIAN macro in conjunction with the SDL_BYTEORDER macro to determine if the system is big-endian and log a message accordingly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BIG_ENDIAN.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#if SDL_BYTEORDER == SDL_BIG_ENDIAN\nSDL_Log(\"This system is bigendian.\");\n#endif\n```\n\n----------------------------------------\n\nTITLE: SDL_Cursor Structure Definition in C\nDESCRIPTION: Defines the SDL_Cursor structure in C. This is an opaque structure used to identify an SDL cursor. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Cursor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Cursor SDL_Cursor;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPU Texture Usage Flags Constants in C\nDESCRIPTION: Defines constants for various texture usages such as sampling, color target, depth stencil target, and compute storage read/write. These flags are used when creating textures to specify their intended usage.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureUsageFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GPU_TEXTUREUSAGE_SAMPLER                                 (1u << 0) /**< Texture supports sampling. */\n#define SDL_GPU_TEXTUREUSAGE_COLOR_TARGET                            (1u << 1) /**< Texture is a color render target. */\n#define SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET                    (1u << 2) /**< Texture is a depth stencil target. */\n#define SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ                   (1u << 3) /**< Texture supports storage reads in graphics stages. */\n#define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ                    (1u << 4) /**< Texture supports storage reads in the compute stage. */\n#define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE                   (1u << 5) /**< Texture supports storage writes in the compute stage. */\n#define SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_SIMULTANEOUS_READ_WRITE (1u << 6) /**< Texture supports reads and writes in the same compute shader. This is NOT equivalent to READ | WRITE. */\n```\n\n----------------------------------------\n\nTITLE: SDL_GPU Color Component Macros in C\nDESCRIPTION: Defines macros representing flags for individual color components (Red, Green, Blue, Alpha) which can be combined using bitwise OR to specify a set of color components. These macros are used with SDL_GPUColorComponentFlags to determine which color components are written to the render target.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUColorComponentFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GPU_COLORCOMPONENT_R (1u << 0) /**< the red component */\n#define SDL_GPU_COLORCOMPONENT_G (1u << 1) /**< the green component */\n#define SDL_GPU_COLORCOMPONENT_B (1u << 2) /**< the blue component */\n#define SDL_GPU_COLORCOMPONENT_A (1u << 3) /**< the alpha component */\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE macro in C.  It associates the string \"SDL_MOUSE_RELATIVE_CURSOR_VISIBLE\" with the macro, allowing it to be used with SDL_SetHint to configure cursor visibility in relative mode. The macro is defined in SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE  \"SDL_MOUSE_RELATIVE_CURSOR_VISIBLE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GetAndroidJNIEnv Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_GetAndroidJNIEnv function in C. It returns a void pointer representing the Java Native Interface environment.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetAndroidJNIEnv.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid * SDL_GetAndroidJNIEnv(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SCOPED_CAPABILITY Macro in C\nDESCRIPTION: This code snippet defines the SDL_SCOPED_CAPABILITY macro, which is a wrapper around Clang's thread safety analysis annotations. It utilizes the SDL_THREAD_ANNOTATION_ATTRIBUTE__ macro to define the `scoped_lockable` attribute. This macro is used to indicate that a mutex should be used in a scoped lock.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SCOPED_CAPABILITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SCOPED_CAPABILITY \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(scoped_lockable)\n```\n\n----------------------------------------\n\nTITLE: Using SDL_NULL_WHILE_LOOP_CONDITION in C\nDESCRIPTION: Demonstrates how to use the SDL_NULL_WHILE_LOOP_CONDITION macro with a do-while loop.  The SomethingOnce() function is meant to represent an arbitrary block of code. The macro ensures the code block is executed only once, acting like a simple statement.  This pattern is commonly used in macros that need to behave like a single statement even if they contain multiple statements.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NULL_WHILE_LOOP_CONDITION.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\ndo { SomethingOnce(); } while (SDL_NULL_WHILE_LOOP_CONDITION (0));\n```\n\n----------------------------------------\n\nTITLE: Define SDL_BIG_ENDIAN\nDESCRIPTION: Defines the SDL_BIG_ENDIAN macro to represent big-endian byte order. The macro is assigned the integer value 4321.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BIG_ENDIAN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_BIG_ENDIAN  4321\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_STEERING_AXIS Macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_STEERING_AXIS macro, used to specify the steering wheel axis for haptic effects.  It has a value of 3, which SDL uses to guess the correct axis for haptic feedback. No dependencies are required other than SDL's haptic module.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HAPTIC_STEERING_AXIS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_STEERING_AXIS 3\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RETURN_KEY_HIDES_IME in C\nDESCRIPTION: This code snippet shows how the SDL_HINT_RETURN_KEY_HIDES_IME hint is defined as a macro in C. It associates the string literal \"SDL_RETURN_KEY_HIDES_IME\" with the macro. This macro is used to set the hint using SDL_SetHint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_RETURN_KEY_HIDES_IME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RETURN_KEY_HIDES_IME \"SDL_RETURN_KEY_HIDES_IME\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GPURasterizerState Structure Definition in C\nDESCRIPTION: This code snippet defines the structure `SDL_GPURasterizerState` in C. It encapsulates various parameters controlling the rasterization stage of the graphics pipeline, including fill mode, cull mode, front face orientation, depth bias settings, and depth clipping/clamping behavior. This structure allows developers to configure how primitives are rendered and how depth values are handled. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPURasterizerState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPURasterizerState\n{\n    SDL_GPUFillMode fill_mode;         /**< Whether polygons will be filled in or drawn as lines. */\n    SDL_GPUCullMode cull_mode;         /**< The facing direction in which triangles will be culled. */\n    SDL_GPUFrontFace front_face;       /**< The vertex winding that will cause a triangle to be determined as front-facing. */\n    float depth_bias_constant_factor;  /**< A scalar factor controlling the depth value added to each fragment. */\n    float depth_bias_clamp;            /**< The maximum depth bias of a fragment. */\n    float depth_bias_slope_factor;     /**< A scalar factor applied to a fragment's slope in depth calculations. */\n    bool enable_depth_bias;        /**< true to bias fragment depth values. */\n    bool enable_depth_clip;        /**< true to enable depth clip, false to enable depth clamp. */\n    Uint8 padding1;\n    Uint8 padding2;\n} SDL_GPURasterizerState;\n```\n\n----------------------------------------\n\nTITLE: Defining TTF_COPY_OPERATION_IMAGE Flag in SDL_ttf\nDESCRIPTION: This C code snippet defines the TTF_COPY_OPERATION_IMAGE flag. It is used to indicate that a copy operation within the SDL_ttf library uses an image rather than a glyph. When this flag is set, vertex color should not be applied during the copy operation. This flag is part of the SDL_textengine.h header file and is available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_CopyOperationFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define TTF_COPY_OPERATION_IMAGE    0x00000001  /**< This copy operation uses an image rather than a glyph, and should not have vertex color applied */\n```\n\n----------------------------------------\n\nTITLE: SDL_RaiseWindow Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RaiseWindow function, which raises a specified SDL_Window to the foreground and sets the input focus. It takes a pointer to an SDL_Window as a parameter. The function is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_RaiseWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RaiseWindow(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: TTF Font Name Functions in C\nDESCRIPTION: Functions for querying a font's family and style names. These functions return strings representing the font's name and style.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_16\n\nLANGUAGE: c\nCODE:\n```\nconst char * TTF_GetFontFamilyName(const TTF_Font *font);                                                                                  // Query a font's family name.\nconst char * TTF_GetFontStyleName(const TTF_Font *font);                                                                                   // Query a font's style name.\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_SINE macro in C\nDESCRIPTION: Defines the SDL_HAPTIC_SINE macro as a bit flag. This macro is used to indicate that the haptic device supports sine wave effects. It is used in conjunction with the SDL_HapticPeriodic structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_SINE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SINE         (1u<<1)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_MUSTLOCK Macro in C\nDESCRIPTION: This macro determines if a given SDL surface requires locking before pixel access. It evaluates to true if the SDL_SURFACE_LOCK_NEEDED flag is set in the surface's flags. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MUSTLOCK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MUSTLOCK(S) (((S)->flags & SDL_SURFACE_LOCK_NEEDED) == SDL_SURFACE_LOCK_NEEDED)\n```\n\n----------------------------------------\n\nTITLE: Building SDL for RISC OS with CMake\nDESCRIPTION: These commands build SDL for RISC OS using CMake with the GCCSDK toolchain. It configures the build, compiles the source code, and installs the built binaries to the specified prefix. It may require disabling atomic functions for older versions of GCCSDK.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/riscos.md#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake -Bbuild-riscos -DCMAKE_TOOLCHAIN_FILE=$GCCSDK_INSTALL_ENV/toolchain-riscos.cmake -DRISCOS=ON -DCMAKE_INSTALL_PREFIX=$GCCSDK_INSTALL_ENV -DCMAKE_BUILD_TYPE=Release\ncmake --build build-riscos\ncmake --install build-riscos\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_JoystickType Enum in C\nDESCRIPTION: This code snippet defines the `SDL_JoystickType` enum in C, listing various common joystick types that SDL can identify. It provides a set of symbolic constants representing different categories of joysticks, enabling SDL to report the type of connected input devices. The enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoystickType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_JoystickType\n{\n    SDL_JOYSTICK_TYPE_UNKNOWN,\n    SDL_JOYSTICK_TYPE_GAMEPAD,\n    SDL_JOYSTICK_TYPE_WHEEL,\n    SDL_JOYSTICK_TYPE_ARCADE_STICK,\n    SDL_JOYSTICK_TYPE_FLIGHT_STICK,\n    SDL_JOYSTICK_TYPE_DANCE_PAD,\n    SDL_JOYSTICK_TYPE_GUITAR,\n    SDL_JOYSTICK_TYPE_DRUM_KIT,\n    SDL_JOYSTICK_TYPE_ARCADE_PAD,\n    SDL_JOYSTICK_TYPE_THROTTLE,\n    SDL_JOYSTICK_TYPE_COUNT\n} SDL_JoystickType;\n```\n\n----------------------------------------\n\nTITLE: SDL_RectsEqualEpsilon Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_RectsEqualEpsilon function in C. This function compares two SDL_FRect structures for equality, using a specified epsilon value for floating-point comparisons. It returns a boolean value indicating whether the rectangles are considered equal within the given epsilon.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RectsEqualEpsilon.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_RectsEqualEpsilon(const SDL_FRect *a, const SDL_FRect *b, float epsilon);\n```\n\n----------------------------------------\n\nTITLE: RTF_Load_RW Syntax in C\nDESCRIPTION: Defines the syntax for the RTF_Load_RW function, specifying its return type (int) and parameters: an RTF_Context pointer (ctx), an SDL_RWops pointer (src), and an integer (freesrc). The function loads RTF data from the SDL_RWops stream into the RTF context. The freesrc parameter controls whether the SDL_RWops stream is closed and freed after the function call.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_Load_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint RTF_Load_RW(RTF_Context *ctx, SDL_RWops *src, int freesrc);\n```\n\n----------------------------------------\n\nTITLE: SDL_CreateTraySubmenu Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_CreateTraySubmenu function in C, which is used to create a submenu associated with a specific system tray entry. It takes a pointer to an SDL_TrayEntry as input and returns a pointer to the newly created SDL_TrayMenu.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CreateTraySubmenu.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TrayMenu * SDL_CreateTraySubmenu(SDL_TrayEntry *entry);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_MIXER_VERSION macro in C\nDESCRIPTION: This macro populates a provided SDL_version structure with the major, minor, and patch version numbers of the SDL_mixer library as defined at compile time. The macro expects a pointer to an SDL_version structure as input and assigns the corresponding version components. It relies on the SDL_MIXER_MAJOR_VERSION, SDL_MIXER_MINOR_VERSION, and SDL_MIXER_PATCHLEVEL macros being defined.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/SDL_MIXER_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIXER_VERSION(X)                        \\\n{\n    (X)->major = SDL_MIXER_MAJOR_VERSION;           \\\n    (X)->minor = SDL_MIXER_MINOR_VERSION;           \\\n    (X)->patch = SDL_MIXER_PATCHLEVEL;              \\\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_OUT_BYTECAP Macro Definition in C\nDESCRIPTION: This macro defines SDL_OUT_BYTECAP. It's used to annotate function parameters with output buffer size. If the compiler supports the annotation mechanism, it will expand to _Out_bytecap_(x); otherwise, it will be defined to nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_OUT_BYTECAP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_OUT_BYTECAP(x) _Out_bytecap_(x)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_RTF_MAJOR_VERSION Macro in C\nDESCRIPTION: Defines a preprocessor macro that expands to the major version number of the SDL_rtf library. This is commonly used for version checking and conditional compilation. The macro is defined to be 3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/SDL_RTF_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RTF_MAJOR_VERSION   3\n```\n\n----------------------------------------\n\nTITLE: Get Number of Gamepad Touchpads - SDL3 - C\nDESCRIPTION: Retrieves the number of touchpads available on a given gamepad. The function takes a pointer to an SDL_Gamepad structure as input and returns an integer representing the number of touchpads. This function requires the SDL3 library and is available since version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumGamepadTouchpads.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumGamepadTouchpads(SDL_Gamepad *gamepad);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_FLOATWORDORDER in C\nDESCRIPTION: This macro defines SDL_FLOATWORDORDER to be either SDL_LIL_ENDIAN or SDL_BIG_ENDIAN, representing the floating-point word order of the target system. It is defined in SDL3/SDL_endian.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_FLOATWORDORDER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_FLOATWORDORDER   SDL_LIL_ENDIAN___or_maybe___SDL_BIG_ENDIAN\n```\n\n----------------------------------------\n\nTITLE: TTF String Tag Conversion Functions in C\nDESCRIPTION: Functions for converting between 4-character strings and 32-bit tags. These functions are used for representing font scripts or other identifiers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_18\n\nLANGUAGE: c\nCODE:\n```\nUint32 TTF_StringToTag(const char *string);                                                                                                // Convert from a 4 character string to a 32-bit tag.\nvoid TTF_TagToString(Uint32 tag, char *string, size_t size);                                                                               // Convert from a 32-bit tag to a 4 character string.\n```\n\n----------------------------------------\n\nTITLE: SDL_SetTrayEntryLabel Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_SetTrayEntryLabel function, which sets the label of a specified tray entry. The function takes a pointer to the SDL_TrayEntry and a const char pointer to the new label as input. It is crucial to maintain the thread safety by calling this function on the thread that created the tray. Note that an entry cannot change between a separator and an ordinary entry.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SetTrayEntryLabel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetTrayEntryLabel(SDL_TrayEntry *entry, const char *label);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUBufferUsageFlags Type Definition\nDESCRIPTION: Defines the SDL_GPUBufferUsageFlags type as a Uint32. This type is used to represent the usage flags for GPU buffers in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBufferUsageFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_GPUBufferUsageFlags;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_Mutex structure in C\nDESCRIPTION: Defines the SDL_Mutex structure as an opaque type using a forward declaration. This structure represents a mutex, a synchronization primitive used to protect shared resources from concurrent access by multiple threads. It ensures that only one thread can access the resource at a time, preventing race conditions and data corruption.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Mutex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Mutex SDL_Mutex;\n```\n\n----------------------------------------\n\nTITLE: SDL_TrayEntryFlags Typedef Definition C\nDESCRIPTION: Defines the SDL_TrayEntryFlags as a Uint32, which is used to represent the flags for controlling system tray entries. This typedef provides a standardized way to handle the different flag options. The type `Uint32` represents an unsigned 32-bit integer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TrayEntryFlags.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_TrayEntryFlags;\n```\n\n----------------------------------------\n\nTITLE: Define Audio Device Stream Name Hint in C\nDESCRIPTION: Defines the SDL_HINT_AUDIO_DEVICE_STREAM_NAME macro as a string literal. This hint allows developers to specify a descriptive name for an audio stream, which some audio backends (e.g., PulseAudio) use to identify the stream in the OS.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_AUDIO_DEVICE_STREAM_NAME.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIO_DEVICE_STREAM_NAME \"SDL_AUDIO_DEVICE_STREAM_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Reset OpenGL Attributes in SDL3 (C)\nDESCRIPTION: Resets all previously set OpenGL context attributes to their default values. It is a void function and takes no arguments. This function should only be called on the main thread and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_ResetAttributes.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_GL_ResetAttributes(void);\n```\n\n----------------------------------------\n\nTITLE: Define MIX_CHANNEL_POST Constant in SDL_mixer (C)\nDESCRIPTION: Defines the constant MIX_CHANNEL_POST, which is used to represent a specific channel number or a special operation within the SDL_mixer library. The exact usage context is not provided, but it's likely related to channel handling or posting events related to channels.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_ChannelFinished.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n#define MIX_CHANNEL_POST  (-2)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY in C\nDESCRIPTION: This code snippet defines the SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY hint as a string literal. This hint is used to control menu visibility when a window is fullscreen in Spaces on macOS. It allows for the menu to be hidden, always visible, or automatically managed based on how fullscreen mode was entered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY \"SDL_VIDEO_MAC_FULLSCREEN_MENU_VISIBILITY\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_PS3 in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_PS3 hint as a string literal. This hint controls whether the HIDAPI driver is used for PS3 controllers. It should be set before initializing joysticks and gamepads.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_PS3.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS3 \"SDL_JOYSTICK_HIDAPI_PS3\"\n```\n\n----------------------------------------\n\nTITLE: SDL_memmove Syntax in C\nDESCRIPTION: The SDL_memmove function copies 'len' bytes from the memory area pointed to by 'src' to the memory area pointed to by 'dst'. It handles overlapping memory regions safely.  It requires the SDL3 library and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_memmove.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid * SDL_memmove(void *dst, const void *src, size_t len);\n```\n\n----------------------------------------\n\nTITLE: SDL_Environment Structure Definition in C\nDESCRIPTION: Defines the SDL_Environment structure as an opaque structure, indicating that its internal members are not directly accessible. It is used for managing environment variables in a thread-safe manner. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Environment.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Environment SDL_Environment;\n```\n\n----------------------------------------\n\nTITLE: Example: Setting SDL_OS2_JOYSTICK for Gravis GamePad\nDESCRIPTION: This snippet shows a specific example of setting the SDL_OS2_JOYSTICK environment variable for a Gravis GamePad with 4 axes, 2 buttons, 2 hats, and 0 balls. The syntax uses spaces to separate the values.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/os2.md#_snippet_1\n\nLANGUAGE: batch\nCODE:\n```\nSET SDL_OS2_JOYSTICK=Gravis_GamePad 4 2 2 0\n```\n\n----------------------------------------\n\nTITLE: SDL_GPURenderState Structure Definition in C\nDESCRIPTION: This snippet shows the definition of the `SDL_GPURenderState` structure in C. It is an opaque structure that represents a custom GPU render state.  It's used for advanced rendering techniques.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPURenderState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPURenderState SDL_GPURenderState;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_NS_PER_SECOND Macro in C\nDESCRIPTION: This code snippet defines the SDL_NS_PER_SECOND macro, which represents the number of nanoseconds in a second (1000000000). It's a constant value used for time conversions within the SDL library.  The macro is available since SDL 3.2.0 and is defined in SDL3/SDL_timer.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NS_PER_SECOND.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NS_PER_SECOND   1000000000LL\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUTF8_Blended_Wrapped Syntax in C\nDESCRIPTION: This function renders word-wrapped UTF-8 text to a new ARGB surface with alpha blending. It takes a font, a UTF-8 encoded string, a color, and a wrap length as input. It returns a pointer to the new SDL_Surface, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUTF8_Blended_Wrapped.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderUTF8_Blended_Wrapped(TTF_Font *font,\n                const char *text, SDL_Color fg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Getting Text Engine C\nDESCRIPTION: This function gets the text engine used by a text object. It requires a pointer to the TTF_Text. Returns a pointer to the TTF_TextEngine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_59\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_GetTextEngine(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_WINDOWPOS_CENTERED in C\nDESCRIPTION: Defines the SDL_WINDOWPOS_CENTERED macro, which expands to SDL_WINDOWPOS_CENTERED_DISPLAY(0). This macro is used to center a window on the primary display when creating a window using SDL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WINDOWPOS_CENTERED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_WINDOWPOS_CENTERED         SDL_WINDOWPOS_CENTERED_DISPLAY(0)\n```\n\n----------------------------------------\n\nTITLE: SDL_ISPIXELFORMAT_FOURCC Definition in C\nDESCRIPTION: This macro determines if an SDL_PixelFormat is a \"FourCC\" format. It checks the SDL_PIXELFLAG of the given format. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ISPIXELFORMAT_FOURCC.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ISPIXELFORMAT_FOURCC(format)  /* The flag is set to 1 because 0x1? is not in the printable ASCII range */ \\\n    ((format) && (SDL_PIXELFLAG(format) != 1))\n```\n\n----------------------------------------\n\nTITLE: Finding idVendor and idProduct values\nDESCRIPTION: Commands to find the idVendor and idProduct values of a device using udevadm.  Replace `input/eventXX` with the actual device name.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm info -a --name=input/eventXX | grep idVendor\nsudo udevadm info -a --name=input/eventXX | grep idProduct\n```\n\n----------------------------------------\n\nTITLE: Query Channel Fading Status Mix_FadingChannel C\nDESCRIPTION: Queries the fading status of a channel. The function returns the current fading state of the audio channel, indicating whether it is fading in, fading out, or not fading.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_10\n\nLANGUAGE: c\nCODE:\n```\nMix_Fading Mix_FadingChannel(int which);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DisplayOrientation Enum in C\nDESCRIPTION: Defines the SDL_DisplayOrientation enum, which represents the orientation of a display. The enum includes values for unknown orientation, landscape, landscape flipped, portrait, and portrait flipped.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DisplayOrientation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_DisplayOrientation\n{\n    SDL_ORIENTATION_UNKNOWN,            /**< The display orientation can't be determined */\n    SDL_ORIENTATION_LANDSCAPE,          /**< The display is in landscape mode, with the right side up, relative to portrait mode */\n    SDL_ORIENTATION_LANDSCAPE_FLIPPED,  /**< The display is in landscape mode, with the left side up, relative to portrait mode */\n    SDL_ORIENTATION_PORTRAIT,           /**< The display is in portrait mode */\n    SDL_ORIENTATION_PORTRAIT_FLIPPED    /**< The display is in portrait mode, upside down */\n} SDL_DisplayOrientation;\n```\n\n----------------------------------------\n\nTITLE: Loading SVG Image using SDL_image in C\nDESCRIPTION: This code snippet defines the function signature for IMG_LoadSVG_RW, which loads an SVG image from an SDL_RWops data stream. It returns a pointer to an SDL_Surface containing the image data, or NULL if an error occurs. The function is part of SDL_image library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadSVG_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadSVG_RW(SDL_RWops *src);\n```\n\n----------------------------------------\n\nTITLE: Packaging application for Windows\nDESCRIPTION: This snippet shows how to package an application for Windows using the `makepkg` command.  It uses the PackageLayout.xml file to define the package contents, sets the /lt flag, specifies the directory, disables game os, packages for client, and sets the package output directory.  It requires the 'Desktop VS 2022 Gaming Command Prompt'.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_6\n\nLANGUAGE: batch\nCODE:\n```\nmakepkg pack /f PackageLayout.xml /lt /d . /nogameos /pc /pd Package\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_RTF Version Macro in C\nDESCRIPTION: This code snippet defines the SDL_RTF_VERSION macro using the SDL_VERSIONNUM macro, incorporating the major, minor, and micro version numbers for the SDL_rtf library. It resides within the SDL3_rtf/SDL_rtf.h header file. The macro provides a unified way to check the SDL_rtf library version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/SDL_RTF_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_RTF_VERSION \\\n    SDL_VERSIONNUM(SDL_RTF_MAJOR_VERSION, SDL_RTF_MINOR_VERSION, SDL_RTF_MICRO_VERSION)\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_GetAttribute Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GL_GetAttribute function. It takes an SDL_GLattr enum value specifying the OpenGL attribute to get and a pointer to an integer that will be filled with the current value of the attribute. It returns 0 on success or a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GL_GetAttribute.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GL_GetAttribute(SDL_GLattr attr, int *value);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED in C\nDESCRIPTION: Defines a macro constant for the SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED hint. This hint is used to specify a comma-separated list of USB VID/PID pairs in hexadecimal form, or a file containing such a list, of devices to be treated as joysticks, excluding those devices from being seen as other device types. This overrides SDL_HINT_JOYSTICK_BLACKLIST_DEVICES and the built-in device list. It can be set anytime after SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED \"SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DisplayModeData Structure in C\nDESCRIPTION: This code snippet defines the SDL_DisplayModeData structure as an opaque type using a forward declaration. This structure is used internally by SDL to store display mode specific data and is accessed as a field within the SDL_DisplayMode structure. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DisplayModeData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DisplayModeData SDL_DisplayModeData;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS in C\nDESCRIPTION: Defines a macro for the SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS hint. This hint controls whether the HIDAPI driver for Nintendo Switch Joy-Cons should be used. Requires SDL2.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS \"SDL_JOYSTICK_HIDAPI_JOY_CONS\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_GPUShader struct in C\nDESCRIPTION: This code snippet defines the SDL_GPUShader structure as an opaque handle using a typedef. It provides a way to reference a compiled shader object without exposing its internal implementation details. The struct is defined in SDL3/SDL_gpu.h and is available from SDL 3.2.0 onwards.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUShader.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUShader SDL_GPUShader;\n```\n\n----------------------------------------\n\nTITLE: Using SDL_WPRINTF_VARARG_FUNCV with vfwprintf in C\nDESCRIPTION: Illustrates how to use the SDL_WPRINTF_VARARG_FUNCV macro to annotate the `vfwprintf` function. This annotation informs the compiler that the second parameter of `vfwprintf` should be a wprintf-style format wide string, followed by a va_list, enabling compile-time checks.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WPRINTF_VARARG_FUNCV.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nint vfwprintf(FILE *f, const wchar_t *fmt, va_list ap) SDL_WPRINTF_VARARG_FUNC(2);\n```\n\n----------------------------------------\n\nTITLE: Mix_OpenAudioDevice Equivalent Call (C)\nDESCRIPTION: This snippet demonstrates the equivalent call to Mix_OpenAudioDevice with specific flags set. It shows how Mix_OpenAudio internally calls Mix_OpenAudioDevice, passing NULL for the device name and allowing frequency and channel changes.  Understanding this equivalence helps when needing more control over device selection.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_OpenAudio.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nMix_OpenAudioDevice(frequency, format, nchannels, chunksize, NULL,\n                    SDL_AUDIO_ALLOW_FREQUENCY_CHANGE |\n                    SDL_AUDIO_ALLOW_CHANNELS_CHANGE);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_X11_XRANDR in C\nDESCRIPTION: This C code snippet defines the SDL_HINT_VIDEO_X11_XRANDR macro, which represents a string used to control whether SDL utilizes the X11 XRandR extension. Setting the hint's value to \"0\" disables XRandR, while \"1\" enables it. This hint must be set before SDL is initialized to take effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_X11_XRANDR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_X11_XRANDR \"SDL_VIDEO_X11_XRANDR\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WAVE_TRUNCATION in C\nDESCRIPTION: This code snippet defines the SDL_HINT_WAVE_TRUNCATION macro, which is used to specify the hint string for controlling how SDL handles truncated WAVE files. The value \"SDL_WAVE_TRUNCATION\" is the string to be used when setting the hint using SDL_SetHint or SDL_SetHintWithPriority.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WAVE_TRUNCATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WAVE_TRUNCATION \"SDL_WAVE_TRUNCATION\"\n```\n\n----------------------------------------\n\nTITLE: Saving SDL Surface to AVIF File with SDL_image in C\nDESCRIPTION: This code snippet shows the syntax for the IMG_SaveAVIF function, which saves an SDL_Surface to an AVIF image file using the SDL_image library. The function requires an SDL_Surface pointer, a file path, and an integer representing the desired quality (0-100). It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_SaveAVIF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_SaveAVIF(SDL_Surface *surface, const char *file, int quality);\n```\n\n----------------------------------------\n\nTITLE: SDL_GLContextResetNotification Type Definition (C)\nDESCRIPTION: Defines the SDL_GLContextResetNotification type as an alias for Uint32.  This type is used to represent the OpenGL context reset notification behavior.  It's used in conjunction with SDL_GL_CONTEXT_RESET_NOTIFICATION attribute.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GLContextResetNotification.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_GLContextResetNotification;\n```\n\n----------------------------------------\n\nTITLE: Clean Android NDK build\nDESCRIPTION: This command cleans the build artifacts generated by the Android NDK, removing the library files of your project (but not the SDL library files).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/android.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nndk-build clean\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for iOS Simulator with Tests\nDESCRIPTION: This command configures CMake to build SDL for the iOS Simulator, including the test apps, using the latest installed SDK and targeting the x86_64 architecture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DSDL_TESTS=1 -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphonesimulator -DCMAKE_OSX_ARCHITECTURES=x86_64\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_STEERING_AXIS in C\nDESCRIPTION: This macro defines the value for SDL_HAPTIC_STEERING_AXIS, used to specify the steering wheel axis for haptic effects. It provides compatibility across platforms and devices, allowing SDL to determine the correct axis.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_STEERING_AXIS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_STEERING_AXIS 3\n```\n\n----------------------------------------\n\nTITLE: SDL_TextEditingExtEvent Structure Definition in C\nDESCRIPTION: Defines the structure for an extended text editing event, including the event type, timestamp, window ID, text being edited, start cursor position, and length of selected text. The text member should be freed with SDL_free() after use. It is available in SDL_events.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TextEditingExtEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_TextEditingExtEvent\n{\n    Uint32 type;                                /**< SDL_TEXTEDITING_EXT */\n    Uint32 timestamp;                           /**< In milliseconds, populated using SDL_GetTicks() */\n    Uint32 windowID;                            /**< The window with keyboard focus, if any */\n    char* text;                                 /**< The editing text, which should be freed with SDL_free(), and will not be NULL */\n    Sint32 start;                               /**< The start cursor of selected editing text */\n    Sint32 length;                              /**< The length of selected editing text */\n} SDL_TextEditingExtEvent;\n```\n\n----------------------------------------\n\nTITLE: Halt Music Playback Mix_HaltMusic C\nDESCRIPTION: Halts the playback of the currently playing music stream. This function stops any music playing through the SDL_mixer library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_4\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_HaltMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Getting Glyph Image C\nDESCRIPTION: This function retrieves the pixel image for a given UNICODE codepoint from a font. It requires a valid TTF_Font pointer, a Uint32 representing the codepoint, and a pointer to a TTF_ImageType where the image type is stored. Returns an SDL_Surface pointer containing the image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_24\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_GetGlyphImage(TTF_Font *font, Uint32 ch, TTF_ImageType *image_type);\n```\n\n----------------------------------------\n\nTITLE: Build with NDK\nDESCRIPTION: This command initiates an NDK build for the project.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nndk-build\n```\n\n----------------------------------------\n\nTITLE: Render LCD Wrapped Text C\nDESCRIPTION: This function renders word-wrapped UTF-8 text at LCD subpixel quality to a new ARGB surface. Parameters include a TTF_Font, the text string, its length, foreground and background colors, and wrap width. Returns SDL_Surface or NULL.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_67\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderText_LCD_Wrapped(TTF_Font *font, const char *text, size_t length, SDL_Color fg, SDL_Color bg, int wrap_width);\n```\n\n----------------------------------------\n\nTITLE: Creating Text Object C\nDESCRIPTION: This function creates a text object from UTF-8 text and a text engine. It requires a pointer to the TTF_TextEngine, a pointer to the TTF_Font, a const char pointer to the text, and the length of the text. Returns a pointer to the created TTF_Text.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_56\n\nLANGUAGE: C\nCODE:\n```\nTTF_Text * TTF_CreateText(TTF_TextEngine *engine, TTF_Font *font, const char *text, size_t length);\n```\n\n----------------------------------------\n\nTITLE: Get Music Decoder Name - C\nDESCRIPTION: Retrieves the name of a music decoder based on its index within the SDL_mixer library. The index must be between 0 and Mix_GetNumMusicDecoders()-1. Returns NULL if the index is invalid or if Mix_OpenAudio() hasn't been successfully called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_GetMusicDecoder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * Mix_GetMusicDecoder(int index);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN in C\nDESCRIPTION: This snippet defines the SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN macro in C. This macro is used to set a hint that determines whether the window frame is interactive while the cursor is hidden. The default value is \"1\", meaning the frame is interactive.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN \"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Thread Safety Analysis in Bash\nDESCRIPTION: These environment variables enable thread safety analysis during the CMake configuration. CC is set to clang and CFLAGS are defined to include SDL_THREAD_SAFETY_ANALYSIS and the -Wthread-safety flag.  This setup instructs the compiler to perform static analysis to identify potential thread safety issues.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_THREAD_ANNOTATION_ATTRIBUTE__.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport CC=clang\nexport CFLAGS=\"-DSDL_THREAD_SAFETY_ANALYSIS -Wthread-safety\"\n```\n\n----------------------------------------\n\nTITLE: SDL_BindGPUComputeSamplers Syntax\nDESCRIPTION: Defines the syntax for using the SDL_BindGPUComputeSamplers function within the SDL3 library. This function binds texture-sampler pairs for use in compute shaders, allowing shaders to access textures using samplers during compute operations. It takes a compute pass, a starting slot, an array of bindings, and the number of bindings as parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUComputeSamplers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUComputeSamplers(\n    SDL_GPUComputePass *compute_pass,\n    Uint32 first_slot,\n    const SDL_GPUTextureSamplerBinding *texture_sampler_bindings,\n    Uint32 num_bindings);\n```\n\n----------------------------------------\n\nTITLE: SDL_SwapFloatBE Macro Definition in C\nDESCRIPTION: Defines the SDL_SwapFloatBE macro to swap a floating-point value from big-endian to the native byte order. It uses the SwapOnlyIfNecessary macro internally, which likely handles the endianness check and swapping logic. The macro is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SwapFloatBE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_SwapFloatBE(x) SwapOnlyIfNecessary(x)\n```\n\n----------------------------------------\n\nTITLE: Mix_ModMusicJumpToOrder Syntax (SDL_mixer, C)\nDESCRIPTION: Defines the syntax for the Mix_ModMusicJumpToOrder function, which is used to jump to a specific order in MOD music. The function takes an integer representing the order number as input and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_ModMusicJumpToOrder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint Mix_ModMusicJumpToOrder(int order);\n```\n\n----------------------------------------\n\nTITLE: SDL_MultiGestureEvent Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_MultiGestureEvent` used to represent multi-finger gesture events. It includes members for the event type (`type`), timestamp (`timestamp`), touch ID (`touchId`), rotation (`dTheta`), distance (`dDist`), center coordinates (`x`, `y`), number of fingers (`numFingers`), and padding (`padding`).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MultiGestureEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_MultiGestureEvent\n{\n    Uint32 type;        /**< SDL_MULTIGESTURE */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_TouchID touchId; /**< The touch device id */\n    float dTheta;\n    float dDist;\n    float x;\n    float y;\n    Uint16 numFingers;\n    Uint16 padding;\n} SDL_MultiGestureEvent;\n```\n\n----------------------------------------\n\nTITLE: Setting Text Color C\nDESCRIPTION: This function sets the color of a text object. It requires a pointer to the TTF_Text and Uint8 values for red, green, blue, and alpha components. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_66\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextColor(TTF_Text *text, Uint8 r, Uint8 g, Uint8 b, Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP in C\nDESCRIPTION: This code defines the SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP macro, which is used as a key for SDL hints to control Windows message loop processing. It's a string literal used with SDL_SetHint and SDL_GetHint. The SDL_hints.h header file is required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP \"SDL_WINDOWS_ENABLE_MESSAGELOOP\"\n```\n\n----------------------------------------\n\nTITLE: Handling App Events in C\nDESCRIPTION: This C code demonstrates how to handle application lifecycle events using an event filter. It includes handling for termination, low memory, backgrounding, and foregrounding events. The filter function is then set using SDL_SetEventFilter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nbool HandleAppEvents(void *userdata, SDL_Event *event)\n{\n    switch (event->type)\n    {\n    case SDL_EVENT_TERMINATING:\n        /* Terminate the app.\n           Shut everything down before returning from this function.\n        */\n        return false;\n    case SDL_EVENT_LOW_MEMORY:\n        /* You will get this when your app is paused and iOS wants more memory.\n           Release as much memory as possible.\n        */\n        return false;\n    case SDL_EVENT_WILL_ENTER_BACKGROUND:\n        /* Prepare your app to go into the background.  Stop loops, etc.\n           This gets called when the user hits the home button, or gets a call.\n\n           You should not make any OpenGL graphics calls or use the rendering API,\n           in addition, you should set the render target to NULL, if you're using\n           it, e.g. call SDL_SetRenderTarget(renderer, NULL).\n        */\n        return false;\n    case SDL_EVENT_DID_ENTER_BACKGROUND:\n        /* Your app is NOT active at this point. */\n        return false;\n    case SDL_EVENT_WILL_ENTER_FOREGROUND:\n        /* This call happens when your app is coming back to the foreground.\n           Restore all your state here.\n        */\n        return false;\n    case SDL_EVENT_DID_ENTER_FOREGROUND:\n        /* Restart your loops here.\n           Your app is interactive and getting CPU again.\n\n           You have access to the OpenGL context or rendering API at this point.\n           However, there's a chance (on older hardware, or on systems under heavy load),\n           where the graphics context can not be restored. You should listen for the\n           event SDL_EVENT_RENDER_DEVICE_RESET and recreate your OpenGL context and\n           restore your textures when you get it, or quit the app.\n        */\n        return false;\n    default:\n        /* No special processing, add it to the event queue */\n        return true;\n    }\n}\n\nint main(int argc, char *argv[])\n{\n    SDL_SetEventFilter(HandleAppEvents, NULL);\n\n    ... run your main loop\n\n    return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Basic Window Manager for DirectFB\nDESCRIPTION: This snippet enables a very basic window manager when running DirectFB with the `wm=default` option. It adds window borders to applications.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL_DIRECTFB_WM=1\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_DollarGestureEvent Structure in C\nDESCRIPTION: This code snippet defines the SDL_DollarGestureEvent structure. It is used to store information about dollar gesture events within the SDL (Simple DirectMedia Layer) library. It includes members such as the event type, timestamp, touch ID, gesture ID, number of fingers, error, and normalized center of the gesture (x, y).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_DollarGestureEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_DollarGestureEvent\n{\n    Uint32 type;        /**< SDL_DOLLARGESTURE or SDL_DOLLARRECORD */\n    Uint32 timestamp;   /**< In milliseconds, populated using SDL_GetTicks() */\n    SDL_TouchID touchId; /**< The touch device id */\n    SDL_GestureID gestureId;\n    Uint32 numFingers;\n    float error;\n    float x;            /**< Normalized center of gesture */\n    float y;            /**< Normalized center of gesture */\n} SDL_DollarGestureEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadIO Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadIO function in C, including the function signature with parameters and return type. This function reads a specified number of bytes from an SDL_IOStream into a provided buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ReadIO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_ReadIO(SDL_IOStream *context, void *ptr, size_t size);\n```\n\n----------------------------------------\n\nTITLE: SDL_JoyBatteryEvent Structure Definition in C\nDESCRIPTION: Defines the structure `SDL_JoyBatteryEvent` to represent joystick battery events. It includes the event type, a reserved field, timestamp, joystick instance ID, battery state (`SDL_PowerState`), and remaining battery percentage. This structure is used to provide information about joystick battery changes.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_JoyBatteryEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_JoyBatteryEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_JOYSTICK_BATTERY_UPDATED */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    SDL_PowerState state; /**< The joystick battery state */\n    int percent;          /**< The joystick battery percent charge remaining */\n} SDL_JoyBatteryEvent;\n```\n\n----------------------------------------\n\nTITLE: Load Animation from File C\nDESCRIPTION: This function loads an animation from a file. It takes the file path as a string and returns a pointer to an IMG_Animation object.  It returns NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReferenceNoUnicode.md#_snippet_8\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimation(const char *file);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteLE32 Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_WriteLE32 function, which writes a 32-bit unsigned integer in little-endian format to an SDL_RWops stream. It takes a pointer to an SDL_RWops structure (dst) and a Uint32 value as input and returns a size_t value, indicating the success of the write operation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_WriteLE32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_WriteLE32(SDL_RWops * dst, Uint32 value);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HintPriority Enumeration in C\nDESCRIPTION: This code snippet defines the SDL_HintPriority enumeration in C. The enumeration is used to specify the priority of SDL hints. It includes three values: SDL_HINT_DEFAULT, SDL_HINT_NORMAL, and SDL_HINT_OVERRIDE.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HintPriority.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_HintPriority\n{\n    SDL_HINT_DEFAULT,\n    SDL_HINT_NORMAL,\n    SDL_HINT_OVERRIDE\n} SDL_HintPriority;\n```\n\n----------------------------------------\n\nTITLE: Querying Music Fading Status with Mix_FadingMusic in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_FadingMusic function in SDL_mixer. It takes no arguments and returns a Mix_Fading enum value representing the current fading status of the music stream. The function is available since SDL_mixer 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_FadingMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Fading Mix_FadingMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Getting the Default User Handle\nDESCRIPTION: Demonstrates how to obtain the default XUserHandle pointer for single-player games using `SDL_GDKGetDefaultUser`. Note that this function returns on any OS errors, so validation is necessary.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/gdk.md#_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nSDL_GDKGetDefaultUser();\n```\n\n----------------------------------------\n\nTITLE: Disabling Optimization in Application.mk (Makefile)\nDESCRIPTION: This snippet shows how to create an `Application.mk` file to disable optimization during the build process. Setting `APP_OPTIM` to `debug` helps in debugging by providing more detailed stack traces and easier stepping through the code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_19\n\nLANGUAGE: Makefile\nCODE:\n```\nAPP_OPTIM := debug\n```\n\n----------------------------------------\n\nTITLE: Get Font Ascent with TTF_FontAscent in C\nDESCRIPTION: This code snippet shows the function signature of `TTF_FontAscent` which returns the ascent of a font, a positive value indicating the offset from the baseline to the top of the font. It takes a `TTF_Font` pointer as input and returns an integer representing the ascent.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_FontAscent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_FontAscent(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ALPHA_TRANSPARENT in C\nDESCRIPTION: This code snippet shows the definition of the SDL_ALPHA_TRANSPARENT macro in C. It defines a constant representing a fully transparent alpha value, typically used in pixel manipulation and rendering with SDL. The value '0' indicates full transparency.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_ALPHA_TRANSPARENT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_ALPHA_TRANSPARENT 0\n```\n\n----------------------------------------\n\nTITLE: SDL_MouseID Type Definition in C\nDESCRIPTION: Defines SDL_MouseID as an unsigned 32-bit integer type (Uint32) in C. This ID is used to uniquely identify a mouse within the application.  It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_MouseID.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint32 SDL_MouseID;\n```\n\n----------------------------------------\n\nTITLE: SDL_AudioQuit Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_AudioQuit function in C. This function takes no arguments and returns nothing (void). It is used to shut down the audio subsystem previously initialized with SDL_AudioInit.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AudioQuit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_AudioQuit(void);\n```\n\n----------------------------------------\n\nTITLE: Traditional Main Loop in C\nDESCRIPTION: This shows a traditional main loop structure in C, which is not compatible with Emscripten's event-driven model. This needs to be refactored for Emscripten.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/emscripten.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\nvoid main(void)\n{\n    initialize_the_game();\n    while (game_is_still_running) {\n        check_for_new_input();\n        think_about_stuff();\n        draw_the_next_frame();\n    }\n    deinitialize_the_game();\n}\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUNICODE_Shaded_Wrapped Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for using TTF_RenderUNICODE_Shaded_Wrapped function in SDL_ttf library. The function renders word-wrapped UCS-2 text to a new 8-bit surface using the specified font, foreground color, background color, and maximum wrap length.  The function depends on SDL_ttf library and requires a valid TTF_Font pointer and UCS-2 encoded text. It returns a pointer to the newly created SDL_Surface, or NULL if an error occurred.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUNICODE_Shaded_Wrapped.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderUNICODE_Shaded_Wrapped(TTF_Font *font,\n                const Uint16 *text, SDL_Color fg, SDL_Color bg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: Getting Text Position with SDL_ttf in C\nDESCRIPTION: This function retrieves the position of a text object. It requires a `TTF_Text` pointer and pointers to integers to store the x and y coordinates. It returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_71\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextPosition(TTF_Text *text, int *x, int *y);\n```\n\n----------------------------------------\n\nTITLE: Query SDF Rendering Status of a Font - TTF_GetFontSDF - C\nDESCRIPTION: This code snippet demonstrates how to use the `TTF_GetFontSDF` function to check if Signed Distance Field (SDF) rendering is enabled for a given font. It requires a `TTF_Font` pointer as input and returns a boolean value indicating the SDF status. The function is part of the SDL_ttf library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFontSDF.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetFontSDF(const TTF_Font *font);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_RENDER_DIRECT3D_THREADSAFE in C\nDESCRIPTION: This code snippet shows the definition of the SDL_HINT_RENDER_DIRECT3D_THREADSAFE hint as a string literal. Setting this hint controls whether the Direct3D rendering context is thread-safe. This macro is defined within the SDL_hints.h header file, part of the SDL library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_DIRECT3D_THREADSAFE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_DIRECT3D_THREADSAFE \"SDL_RENDER_DIRECT3D_THREADSAFE\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUBuffer Structure Definition in C\nDESCRIPTION: This code defines the `SDL_GPUBuffer` structure as an opaque handle in C. It is used to represent a GPU buffer for storing vertices, indices, indirect draw commands, and general compute data. The actual implementation details of the structure are hidden, making it an opaque type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUBuffer SDL_GPUBuffer;\n```\n\n----------------------------------------\n\nTITLE: Renaming Storage Path with SDL_RenameStoragePath in C\nDESCRIPTION: This snippet shows the syntax of the SDL_RenameStoragePath function, which renames a file or directory in a writable storage container.  It takes an SDL_Storage pointer, the old path, and the new path as input. It returns true on success and false on failure; use SDL_GetError to get more information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenameStoragePath.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nbool SDL_RenameStoragePath(SDL_Storage *storage, const char *oldpath, const char *newpath);\n```\n\n----------------------------------------\n\nTITLE: SDL_UIKitRunApp Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UIKitRunApp function in C, which initializes and launches an SDL application. It takes the argc and argv parameters from the application's main() function, as well as the application's main() function itself as an SDL_main_func.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_UIKitRunApp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_UIKitRunApp(int argc, char *argv[], SDL_main_func mainFunction);\n```\n\n----------------------------------------\n\nTITLE: Detecting Amazon Luna Controller (SDL)\nDESCRIPTION: This C code snippet defines a function to identify Amazon Luna controllers based on their vendor and product IDs. It checks if the vendor ID is 0x1949 and the product ID is 0x0419, or if the vendor ID is 0x0171 and the product ID is 0x0419. It returns `true` if a Luna controller is detected, `false` otherwise.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_17\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_IsJoystickAmazonLunaController(Uint16 vendor_id, Uint16 product_id)\n{\n    return ((vendor_id == 0x1949 && product_id == 0x0419) ||\n            (vendor_id == 0x0171 && product_id == 0x0419));\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_HasExactlyOneBitSet32 Syntax - C\nDESCRIPTION: This snippet shows the syntax for the SDL_HasExactlyOneBitSet32 function in C. It takes a Uint32 as input and returns a boolean value indicating whether exactly one bit is set.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HasExactlyOneBitSet32.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE bool SDL_HasExactlyOneBitSet32(Uint32 x);\n```\n\n----------------------------------------\n\nTITLE: Get Music Loop Start Time - SDL_mixer (C)\nDESCRIPTION: Retrieves the loop start time of a music stream in seconds using SDL_mixer. Requires a `Mix_Music` object as input and returns a double representing the start time or -1.0 if not supported. If a NULL pointer is passed as music, the duration of the current playing music is returned.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_GetMusicLoopStartTime.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_GetMusicLoopStartTime(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: Checking Byte Order in C\nDESCRIPTION: This code snippet demonstrates how to check the byte order of the system using the SDL_BYTEORDER macro and SDL_LIL_ENDIAN. If the SDL_BYTEORDER macro is equal to SDL_LIL_ENDIAN, it logs a message indicating that the system is little-endian.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LIL_ENDIAN.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#if SDL_BYTEORDER == SDL_LIL_ENDIAN\nSDL_Log(\"This system is littleendian.\");\n#endif\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AssertState Enum in C\nDESCRIPTION: This code snippet defines the SDL_AssertState enumeration in C. This enum specifies the possible actions to take when an assertion fails within SDL. These actions include retrying the assertion, triggering a debugger breakpoint, aborting the program, ignoring the assertion once, or ignoring the assertion from then on. The SDL_SetAssertionHandler function is used to customize how these options are presented to the user.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AssertState.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_AssertState\n{\n    SDL_ASSERTION_RETRY,  /**< Retry the assert immediately. */\n    SDL_ASSERTION_BREAK,  /**< Make the debugger trigger a breakpoint. */\n    SDL_ASSERTION_ABORT,  /**< Terminate the program. */\n    SDL_ASSERTION_IGNORE,  /**< Ignore the assert. */\n    SDL_ASSERTION_ALWAYS_IGNORE  /**< Ignore the assert from now on. */\n} SDL_AssertState;\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_MAC_OPTION_AS_ALT in C\nDESCRIPTION: Defines the SDL_HINT_MAC_OPTION_AS_ALT macro as a string literal. This macro is used as the name of the hint to control the behavior of the Option key on macOS, allowing it to be remapped to the Alt key. It's defined in SDL3/SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MAC_OPTION_AS_ALT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MAC_OPTION_AS_ALT \"SDL_MAC_OPTION_AS_ALT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderTexture9GridTiled Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_RenderTexture9GridTiled function in C. It requires the SDL3 library and defines the parameters for rendering a texture using the 9-grid scaling algorithm. The function returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderTexture9GridTiled.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderTexture9GridTiled(SDL_Renderer *renderer, SDL_Texture *texture, const SDL_FRect *srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, const SDL_FRect *dstrect, float tileScale);\n```\n\n----------------------------------------\n\nTITLE: SDL_ReadLE16 Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_ReadLE16 function in C. This function reads a 16-bit little-endian value from the given SDL_RWops stream and returns it as a Uint16 in native byte order. It requires a pointer to an initialized SDL_RWops structure as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ReadLE16.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_ReadLE16(SDL_RWops * src);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUNICODE_Shaded Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the TTF_RenderUNICODE_Shaded function in C. It renders UCS-2 encoded text with a shaded effect into a new 8-bit surface. The function takes a TTF_Font pointer, a Uint16 pointer representing the text, and SDL_Color structures for the foreground and background colors as input.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUNICODE_Shaded.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUNICODE_Shaded(TTF_Font *font,\n                const Uint16 *text, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Audio Device Management\nDESCRIPTION: These functions manage the audio device. Mix_OpenAudio opens an audio device for playback, specifying the device ID and audio specifications. Mix_PauseAudio suspends or resumes audio output. Mix_QuerySpec retrieves the actual audio device parameters.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nbool Mix_OpenAudio(SDL_AudioDeviceID devid, const SDL_AudioSpec *spec);                   // Open an audio device for playback.\nvoid Mix_PauseAudio(int pause_on);                                                        // Suspend or resume the whole audio output.\nbool Mix_QuerySpec(int *frequency, SDL_AudioFormat *format, int *channels);               // Find out what the actual audio device parameters are.\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE in C\nDESCRIPTION: Defines the SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE macro, which is used to set the hint controlling whether SDL clears the window contents on WM_ERASEBKGND messages. This hint must be set before creating the window. The values are 0/\"never\", 1/\"initial\", or 2/\"always\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE \"SDL_WINDOWS_ERASE_BACKGROUND_MODE\"\n```\n\n----------------------------------------\n\nTITLE: TTF_ClearFallbackFonts Function\nDESCRIPTION: Removes all fallback fonts from a given font. This is useful for resetting the font's rendering behavior to only use its own glyphs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_13\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_ClearFallbackFonts(TTF_Font *font);                                                                                               // Remove all fallback fonts.\n```\n\n----------------------------------------\n\nTITLE: SDL_max Macro Definition in C\nDESCRIPTION: This macro returns the larger of two provided values, x and y. It's defined using a ternary operator for comparison. Be cautious of side effects, as parameters are evaluated twice.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_max.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_max(x, y) (((x) > (y)) ? (x) : (y))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HapticEffectType in C\nDESCRIPTION: This code snippet shows the type definition of `SDL_HapticEffectType` as `Uint16`. This type is used to specify the type of haptic effect. It is defined in the `SDL_haptic.h` header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HapticEffectType.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef Uint16 SDL_HapticEffectType;\n```\n\n----------------------------------------\n\nTITLE: Finalize HIDAPI Library - SDL_hid_exit (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_hid_exit function, which is used to finalize the HIDAPI library. It takes no arguments and returns an integer indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_exit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_exit(void);\n```\n\n----------------------------------------\n\nTITLE: Get Serial Number String from HID Device in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_hid_get_serial_number_string function. It retrieves the serial number string from a HID device identified by its handle (`dev`) and stores it in the provided wide character string buffer (`string`). The `maxlen` parameter specifies the maximum length of the buffer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_hid_get_serial_number_string.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_hid_get_serial_number_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);\n```\n\n----------------------------------------\n\nTITLE: Setting GPU Text Engine Winding C\nDESCRIPTION: This function sets the winding order of the vertices returned by TTF_GetGPUTextDrawData for a particular GPU text engine. It requires a pointer to the TTF_TextEngine and a TTF_GPUTextEngineWinding value representing the desired winding order.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_54\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetGPUTextEngineWinding(TTF_TextEngine *engine, TTF_GPUTextEngineWinding winding);\n```\n\n----------------------------------------\n\nTITLE: SDL_TLSCreate Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_TLSCreate function in C. It creates a thread-local storage identifier. Returns the newly created thread local storage identifier or 0 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TLSCreate.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_TLSID SDL_TLSCreate(void);\n```\n\n----------------------------------------\n\nTITLE: Building SDL for PS2 with CMake\nDESCRIPTION: This bash script outlines the commands needed to build the SDL library for the PS2. It uses CMake to configure the build with specific settings for the PS2 development environment, then builds and installs the library. Requires a PS2Dev environment and CMake.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/ps2.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PS2DEV/ps2sdk/ps2dev.cmake\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_SPRING Macro in C\nDESCRIPTION: This code defines the SDL_HAPTIC_SPRING macro, which is used to indicate that a haptic device supports the spring effect. The spring effect simulates a spring force based on the position of the device's axes. This macro is a bit flag that can be used in conjunction with other haptic flags.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_SPRING.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SPRING       (1u<<7)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_SystemTheme Enum in C\nDESCRIPTION: Defines the `SDL_SystemTheme` enumeration in C, which is used to represent the system's color theme. It includes values for unknown, light, and dark themes. This enum is available starting from SDL 3.2.0 and is part of the video subsystem.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SystemTheme.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_SystemTheme\n{\n    SDL_SYSTEM_THEME_UNKNOWN,   /**< Unknown system theme */\n    SDL_SYSTEM_THEME_LIGHT,     /**< Light colored system theme */\n    SDL_SYSTEM_THEME_DARK       /**< Dark colored system theme */\n} SDL_SystemTheme;\n```\n\n----------------------------------------\n\nTITLE: Check Game Controller Sensor Availability in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_GameControllerHasSensor function to determine if a game controller has a particular sensor type. It takes a pointer to an SDL_GameController and an SDL_SensorType as input, returning SDL_TRUE if the sensor exists, and SDL_FALSE otherwise. This function is part of the SDL game controller API.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerHasSensor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GameControllerHasSensor(SDL_GameController *gamecontroller, SDL_SensorType type);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerGetVendor Syntax (C)\nDESCRIPTION: This snippet shows the syntax for the SDL_GameControllerGetVendor function. It takes a pointer to an SDL_GameController object and returns a Uint16 representing the USB vendor ID. The function is available since SDL 2.0.6.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetVendor.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUint16 SDL_GameControllerGetVendor(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: SDL_GetRectUnionFloat Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GetRectUnionFloat function.  It takes two constant SDL_FRect pointers, A and B, representing the rectangles to union, and an SDL_FRect pointer, result, to store the union rectangle. Returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRectUnionFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GetRectUnionFloat(const SDL_FRect *A, const SDL_FRect *B, SDL_FRect *result);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderUNICODE_Blended_Wrapped Syntax in C\nDESCRIPTION: Defines the syntax for the TTF_RenderUNICODE_Blended_Wrapped function in C, which renders UCS-2 text with alpha blending and word wrapping using a specified font, color, and wrap length. It returns a pointer to an SDL_Surface containing the rendered text or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_RenderUNICODE_Blended_Wrapped.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderUNICODE_Blended_Wrapped(TTF_Font *font,\n                const Uint16 *text, SDL_Color fg, Uint32 wrapLength);\n```\n\n----------------------------------------\n\nTITLE: SDL_isprint Syntax in C\nDESCRIPTION: This snippet shows the syntax for the SDL_isprint function in C.  It takes an integer representing a character as input and returns an integer value (non-zero if the character is printable, zero otherwise). It relies on SDL3/SDL_stdinc.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_isprint.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_isprint(int x);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_COLORSPACEMATRIX Macro in C\nDESCRIPTION: This macro retrieves the SDL_MatrixCoefficients associated with a given SDL_Colorspace. It takes an SDL_Colorspace value as input and returns the corresponding matrix coefficients. This macro is used to extract the matrix coefficients from the colorspace value by performing a bitwise AND operation with 0x1F.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_COLORSPACEMATRIX.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_COLORSPACEMATRIX(cspace)     (SDL_MatrixCoefficients)((cspace) & 0x1F)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_ORIENTATIONS in C\nDESCRIPTION: This code snippet defines the SDL_HINT_ORIENTATIONS macro. This macro is used to set or get the allowed orientations for an SDL application running on iOS or Android. The value should be a space-delimited string of orientation names.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ORIENTATIONS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_ORIENTATIONS \"SDL_IOS_ORIENTATIONS\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HintCallback Function\nDESCRIPTION: Defines the type definition for the SDL_HintCallback function in C. This callback is triggered when an SDL hint is changed, providing access to user data, the hint's name, the old value, and the new value. It's used with SDL_AddHintCallback to register the callback function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HintCallback.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef void (SDLCALL *SDL_HintCallback)(void *userdata, const char *name, const char *oldValue, const char *newValue);\n```\n\n----------------------------------------\n\nTITLE: SDL_WriteSurfacePixel Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_WriteSurfacePixel function in C. It takes an SDL_Surface pointer, x and y coordinates, and RGBA values as input and returns a boolean indicating success or failure. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_WriteSurfacePixel.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_WriteSurfacePixel(SDL_Surface *surface, int x, int y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUDevice Typedef Definition in C\nDESCRIPTION: Defines the SDL_GPUDevice as an opaque handle using a typedef for a struct. This handle represents the SDL_GPU context, allowing interaction with GPU functionalities within SDL3. It is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUDevice.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUDevice SDL_GPUDevice;\n```\n\n----------------------------------------\n\nTITLE: SDL3 Texture Creation (SDL_CreateTexture) for Software Rendering\nDESCRIPTION: This code snippet creates an SDL_Texture for use with software-rendered games. The texture is created with SDL_TEXTUREACCESS_STREAMING, indicating that its contents will be updated frequently.  This texture is uploaded with the final rendered frame and blitted to the screen.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL12MigrationGuide.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nsdlTexture = SDL_CreateTexture(sdlRenderer,\n                               SDL_PIXELFORMAT_ARGB8888,\n                               SDL_TEXTUREACCESS_STREAMING,\n                               640, 480);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_AllocPacket Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_AllocPacket function, which allocates a UDP packet with a specified maximum payload size. It returns a pointer to the allocated UDPpacket structure or NULL if memory allocation fails. The size parameter determines the maximum number of bytes the packet can hold.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_AllocPacket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nUDPpacket * SDLNet_AllocPacket(int size);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_AUDIO_MASK_BITSIZE in C\nDESCRIPTION: This code snippet shows the definition of the SDL_AUDIO_MASK_BITSIZE macro. It masks bits in an SDL_AudioFormat to extract the format bit size. Use SDL_AUDIO_BITSIZE instead of this macro directly.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_MASK_BITSIZE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_MASK_BITSIZE       (0xFFu)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_AUDIO_MASK_FLOAT in C\nDESCRIPTION: This code snippet defines the SDL_AUDIO_MASK_FLOAT macro as a bitmask to check for floating-point audio formats within an SDL_AudioFormat. It's recommended to use SDL_AUDIO_ISFLOAT instead of directly using this mask. The macro shifts the unsigned integer 1 by 8 bits to the left, creating the mask.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_AUDIO_MASK_FLOAT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_AUDIO_MASK_FLOAT         (1u<<8)\n```\n\n----------------------------------------\n\nTITLE: Create symbolic links to SDL binaries in Android project\nDESCRIPTION: Creates symbolic links to the SDL binaries within the Android project's libs/armeabi/ directory. This ensures that the SDL libraries are included in the Android application package.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p libs/armeabi/\nfor i in /usr/src/SDL3/build/org.libsdl/libs/armeabi/*; do ln -nfs $i libs/armeabi/; done\n```\n\n----------------------------------------\n\nTITLE: Retrieving SDL_TransferCharacteristics from SDL_Colorspace in C\nDESCRIPTION: This macro extracts the SDL_TransferCharacteristics from a given SDL_Colorspace value. It achieves this by bitwise operations on the input cspace.  It requires the SDL3 library and the SDL_pixels.h header file.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_COLORSPACETRANSFER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_COLORSPACETRANSFER(cspace)   (SDL_TransferCharacteristics)(((cspace) >> 5) & 0x1F)\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GamepadTouchpadEvent Structure in C\nDESCRIPTION: Defines the SDL_GamepadTouchpadEvent structure, which contains information about gamepad touchpad events such as touch down, motion, and up events. It includes members like event type, timestamp, joystick ID, touchpad and finger indices, normalized x and y coordinates, and pressure. The structure is used to represent gamepad touchpad events and is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GamepadTouchpadEvent.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GamepadTouchpadEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN or SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION or SDL_EVENT_GAMEPAD_TOUCHPAD_UP */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_JoystickID which; /**< The joystick instance id */\n    Sint32 touchpad;    /**< The index of the touchpad */\n    Sint32 finger;      /**< The index of the finger on the touchpad */\n    float x;            /**< Normalized in the range 0...1 with 0 being on the left */\n    float y;            /**< Normalized in the range 0...1 with 0 being at the top */\n    float pressure;     /**< Normalized in the range 0...1 */\n} SDL_GamepadTouchpadEvent;\n```\n\n----------------------------------------\n\nTITLE: SDL_SubmitGPUCommandBufferAndAcquireFence Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SubmitGPUCommandBufferAndAcquireFence function in C. It defines the function signature, including the input parameter (a pointer to an SDL_GPUCommandBuffer) and the return type (a pointer to an SDL_GPUFence). The function submits the command buffer for processing on the GPU and returns a fence that can be used to synchronize with the GPU's execution of the commands in the buffer. It is part of SDL3 and available since version 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_SubmitGPUCommandBufferAndAcquireFence.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_GPUFence * SDL_SubmitGPUCommandBufferAndAcquireFence(\n    SDL_GPUCommandBuffer *command_buffer);\n```\n\n----------------------------------------\n\nTITLE: Drawing Renderer Text C\nDESCRIPTION: This function draws text to an SDL renderer using a text engine. It requires a TTF_Text pointer and the x and y coordinates for the text's position as floats. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_48\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_DrawRendererText(TTF_Text *text, float x, float y);\n```\n\n----------------------------------------\n\nTITLE: SDL_BlitGPUTexture Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_BlitGPUTexture function in C. This function blits from a source texture region to a destination texture region using the specified command buffer and blit information.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BlitGPUTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BlitGPUTexture(\n    SDL_GPUCommandBuffer *command_buffer,\n    const SDL_GPUBlitInfo *info);\n```\n\n----------------------------------------\n\nTITLE: Get Text Position - SDL_ttf\nDESCRIPTION: Retrieves the position of a text object. The `x` and `y` parameters will be populated with the current coordinates of the text object's top-left corner.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_97\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextPosition(TTF_Text *text, int *x, int *y);\n```\n\n----------------------------------------\n\nTITLE: Destroying Text Object with SDL_ttf in C\nDESCRIPTION: This function destroys a text object created by the text engine. It requires a `TTF_Text` pointer. This function should be called to free the resources allocated for the text object.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_88\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_DestroyText(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: TTF_RenderGlyph_Solid Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the TTF_RenderGlyph_Solid function. It takes a font, a Unicode character, and a color as input and returns a pointer to an SDL_Surface, which is the rendered glyph. It returns NULL if there was an error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_RenderGlyph_Solid.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Solid(TTF_Font *font, Uint32 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Defining GameCube Rumble Brake Hint (SDL)\nDESCRIPTION: This code snippet defines the SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE hint as a string literal. This hint is used to control whether rumble is used to implement the GameCube controller's rumble modes (Stop, Rumble, and StopHard).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE \"SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE hint as a string literal. This hint is used to control whether SDL uses the HIDAPI driver when handling Xbox One controllers. Setting this hint affects how SDL interacts with these controllers at runtime. The hint takes a value of \"0\" to disable and \"1\" to enable the HIDAPI driver.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE   \"SDL_JOYSTICK_HIDAPI_XBOX_ONE\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HAPTIC_SAWTOOTHUP Macro in C\nDESCRIPTION: This code snippet defines the SDL_HAPTIC_SAWTOOTHUP macro, which represents a sawtooth up wave effect for haptic devices. It uses a bitwise left shift to define the macro's value. The macro is used to configure periodic haptic effects using SDL_HapticPeriodic.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_SAWTOOTHUP.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_SAWTOOTHUP   (1u<<4)\n```\n\n----------------------------------------\n\nTITLE: SDL_AtomicCASPtr Syntax in C\nDESCRIPTION: Defines the syntax for SDL_AtomicCASPtr function, which atomically compares the value pointed to by 'a' with 'oldval', and if they are equal, replaces the value pointed to by 'a' with 'newval'. It returns SDL_TRUE if the swap occurred, and SDL_FALSE otherwise. Requires SDL2 library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_AtomicCASPtr.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_AtomicCASPtr(void **a, void *oldval, void *newval);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HAPTIC_POLAR Macro in C\nDESCRIPTION: Defines the SDL_HAPTIC_POLAR macro, which is used to specify that a haptic effect's direction is defined using polar coordinates. This is available starting from SDL 3.2.0 and is defined as 0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HAPTIC_POLAR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HAPTIC_POLAR      0\n```\n\n----------------------------------------\n\nTITLE: Setting up SDL_main\nDESCRIPTION: It is recommended to use SDL's implementation of `WinMain` by including `<SDL3/SDL_main.h>` and declaring a standard `main` function. Alternatively, manually call `SDL_RunApp` and define `SDL_MAIN_HANDLED` before including `SDL_main.h`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char* argv[]) {\n    // Your game code here\n    return 0;\n}\n```\n\nLANGUAGE: C++\nCODE:\n```\n#define SDL_MAIN_HANDLED\n#include <SDL3/SDL_main.h>\n\nint main(int argc, char* argv[]) {\n    return SDL_RunApp(SDL_main, NULL);\n}\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadICO_IO Syntax in C\nDESCRIPTION: This code snippet shows the function signature for IMG_LoadICO_IO.  It takes an SDL_IOStream as input and returns an SDL_Surface pointer, or NULL on error. This function is part of the SDL_image library and requires SDL3_image/SDL_image.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadICO_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadICO_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: Wait for Stream Socket to Drain in SDLNet (C)\nDESCRIPTION: Blocks until all pending data of a stream socket is sent, or until a timeout is reached. Takes a SDLNet_StreamSocket and a timeout value in milliseconds. Returns the number of bytes still pending transmission, or -1 on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_WaitUntilStreamSocketDrained.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_WaitUntilStreamSocketDrained(SDLNet_StreamSocket *sock, Sint32 timeout);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_JOYSTICK_ROG_CHAKRAM in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_ROG_CHAKRAM macro, used to control whether ROG Chakram mice are exposed as joysticks. It is defined as \"SDL_JOYSTICK_ROG_CHAKRAM\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_ROG_CHAKRAM.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_JOYSTICK_ROG_CHAKRAM \"SDL_JOYSTICK_ROG_CHAKRAM\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GDK_TEXTINPUT_DESCRIPTION in C\nDESCRIPTION: Defines the SDL_HINT_GDK_TEXTINPUT_DESCRIPTION macro. This macro is used to set the description for the TextInput window on GDK platforms. It is used with SDL_SetHint() to configure the text input hint. It requires SDL3 and SDL_GDK_TEXTINPUT to be defined.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GDK_TEXTINPUT_DESCRIPTION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GDK_TEXTINPUT_DESCRIPTION \"SDL_GDK_TEXTINPUT_DESCRIPTION\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_RENDER_SCALE_QUALITY in C\nDESCRIPTION: This code defines the SDL_HINT_RENDER_SCALE_QUALITY macro as a string literal.  This hint is used to control the scaling quality of the SDL renderer.  It can be set to \"0\" or \"nearest\" for nearest pixel sampling, \"1\" or \"linear\" for linear filtering, or \"2\" or \"best\", which is currently the same as \"linear\".\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_RENDER_SCALE_QUALITY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_RENDER_SCALE_QUALITY       \"SDL_RENDER_SCALE_QUALITY\"\n```\n\n----------------------------------------\n\nTITLE: Get Number of Joystick Balls in C\nDESCRIPTION: This code snippet shows the syntax for using the SDL_GetNumJoystickBalls function in C to retrieve the number of trackballs on a given SDL_Joystick. It takes a pointer to an SDL_Joystick structure as input and returns an integer representing the number of trackballs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumJoystickBalls.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumJoystickBalls(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_TTF_VERSION Macro in C\nDESCRIPTION: This macro, SDL_TTF_VERSION, populates an SDL_version structure (pointed to by X) with the major, minor, and patch version numbers of the SDL_ttf library.  It relies on the preprocessor definitions SDL_TTF_MAJOR_VERSION, SDL_TTF_MINOR_VERSION, and SDL_TTF_PATCHLEVEL. The input parameter X must be a pointer to a valid SDL_version structure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/SDL_TTF_VERSION.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_TTF_VERSION(X)                          \\\n{\n    (X)->major = SDL_TTF_MAJOR_VERSION;             \\\n    (X)->minor = SDL_TTF_MINOR_VERSION;             \\\n    (X)->patch = SDL_TTF_PATCHLEVEL;                \\\n}\n```\n\n----------------------------------------\n\nTITLE: SDL_modff Syntax in C\nDESCRIPTION: This code snippet shows the syntax of the SDL_modff function, which is used to split a single-precision floating point value `x` into its integer and fractional parts. The integer part is stored in the memory location pointed to by `y`, and the fractional part is returned by the function.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_modff.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nfloat SDL_modff(float x, float *y);\n```\n\n----------------------------------------\n\nTITLE: TTF_Font Structure Definition in C\nDESCRIPTION: This code snippet defines the TTF_Font structure as an opaque type in C. It's used to represent a loaded font within the SDL_ttf library. The actual members of the structure are not exposed, making it an opaque data type.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_Font.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct TTF_Font TTF_Font;\n```\n\n----------------------------------------\n\nTITLE: SDL_NORETURN Macro Definition in C\nDESCRIPTION: Defines the SDL_NORETURN macro using the __attribute__((noreturn)) compiler attribute. This attribute tells the compiler that the function will not return, allowing for certain optimizations. If the compiler does not support the noreturn attribute, the macro is defined as nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_NORETURN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NORETURN __attribute__((noreturn))\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WIN_D3DCOMPILER in C\nDESCRIPTION: Defines the SDL_HINT_VIDEO_WIN_D3DCOMPILER hint as a string literal. This hint is used to specify which shader compiler DLL to preload when using Chrome ANGLE binaries on Windows. The hint should be set before SDL initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_VIDEO_WIN_D3DCOMPILER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WIN_D3DCOMPILER \"SDL_VIDEO_WIN_D3DCOMPILER\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_AUDIODRIVER in SDL\nDESCRIPTION: This code snippet defines the SDL_HINT_AUDIODRIVER macro in C. It associates the string \"SDL_AUDIODRIVER\" with this hint, which can then be used to set the audio driver via SDL_SetHint. This hint needs to be set before SDL_Init is called.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_AUDIODRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_AUDIODRIVER \"SDL_AUDIODRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_TIMER_RESOLUTION in C\nDESCRIPTION: This code snippet defines the SDL_HINT_TIMER_RESOLUTION macro as a string literal. This hint is used to control the timer resolution in milliseconds, specifically on Windows systems. A higher resolution leads to more frequent timer interrupts, increasing precision but also consuming more power and CPU time.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_TIMER_RESOLUTION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_TIMER_RESOLUTION \"SDL_TIMER_RESOLUTION\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_STORAGE_TITLE_DRIVER in C\nDESCRIPTION: Defines the SDL_HINT_STORAGE_TITLE_DRIVER macro, which is a string constant used as a hint to specify the storage driver for title information. This allows applications to override the default storage backend selection by SDL. The hint should be set before SDL is initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_STORAGE_TITLE_DRIVER.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_STORAGE_TITLE_DRIVER \"SDL_STORAGE_TITLE_DRIVER\"\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION in C\nDESCRIPTION: This code snippet defines the SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION macro.  It specifies the string to be used as the key when setting the hint via SDL_SetHint. It's crucial for configuring SDL to look for resources in Android APK expansion files, alongside the patch file version hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_HINT_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION \"SDL_ANDROID_APK_EXPANSION_MAIN_FILE_VERSION\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH C Macro\nDESCRIPTION: Defines the SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH macro, which is used to set the maximum input length for text input on GDK platforms. The value should be a stringified integer.  This hint is only available when SDL_GDK_TEXTINPUT is defined and needs to be set before calling SDL_StartTextInput().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH \"SDL_GDK_TEXTINPUT_MAX_LENGTH\"\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Device Player Index - C\nDESCRIPTION: Retrieves the player index associated with a given joystick device index. The `SDL_JoystickGetDevicePlayerIndex` function takes an integer `device_index` as input, representing the index of the joystick device. It returns the player index as an integer, or -1 if the player index is not available. This function can be called before any joysticks are opened.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_JoystickGetDevicePlayerIndex.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_JoystickGetDevicePlayerIndex(int device_index);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadJXL_IO Function Signature in C\nDESCRIPTION: This is the function signature for IMG_LoadJXL_IO, which loads a JXL image from an SDL_IOStream. It takes an SDL_IOStream pointer as input, representing the source of the image data.  It returns a pointer to an SDL_Surface on success, or NULL on failure.  This function is part of SDL_image and requires the SDL3_image/SDL_image.h header.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_LoadJXL_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * IMG_LoadJXL_IO(SDL_IOStream *src);\n```\n\n----------------------------------------\n\nTITLE: SDL TLS Destructor Callback Function in C\nDESCRIPTION: This snippet defines the function prototype for the destructor callback used with SDL_TLSSet. The destructor is called when the thread exits to free the memory associated with the thread-local storage value. It takes a void pointer representing the value as its argument.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_TLSSet.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nvoid destructor(void *value)\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_BitmapOrder Enum in C\nDESCRIPTION: This code snippet defines the `SDL_BitmapOrder` enumeration in C, which is used to specify the order of bits within a bitmap. The enumeration includes options for no specific order (`SDL_BITMAPORDER_NONE`), the order 4321 (`SDL_BITMAPORDER_4321`), and the order 1234 (`SDL_BITMAPORDER_1234`). This enum is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BitmapOrder.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_BitmapOrder\n{\n    SDL_BITMAPORDER_NONE,\n    SDL_BITMAPORDER_4321,\n    SDL_BITMAPORDER_1234\n} SDL_BitmapOrder;\n```\n\n----------------------------------------\n\nTITLE: Destroying an SDL RWLock in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_DestroyRWLock function, which is used to destroy a read/write lock. It takes a pointer to an SDL_RWLock as a parameter, freeing the associated resources. Failure to destroy an RWLock results in a memory leak.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_DestroyRWLock.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_DestroyRWLock(SDL_RWLock *rwlock);\n```\n\n----------------------------------------\n\nTITLE: SDL_RemoveEventWatch Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_RemoveEventWatch function in C. It takes an SDL_EventFilter and a void pointer as input, which were originally passed to SDL_AddEventWatch. This function removes the specified event watch callback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RemoveEventWatch.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_RemoveEventWatch(SDL_EventFilter filter, void *userdata);\n```\n\n----------------------------------------\n\nTITLE: SDL_Has3DNow Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_Has3DNow function in C. It takes no arguments and returns an SDL_bool value, which indicates whether the CPU has 3DNow! support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_Has3DNow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_Has3DNow(void);\n```\n\n----------------------------------------\n\nTITLE: Retrieving RTF Document Subject with RTF_GetSubject in C\nDESCRIPTION: This C code snippet shows the syntax for retrieving the subject of an RTF document using the RTF_GetSubject function from the SDL_rtf library. It takes an RTF_Context pointer as input and returns a pointer to a UTF-8 encoded string containing the document's subject. The returned string's memory is managed by the RTF_Context and should not be freed by the user.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL_rtf/RTF_GetSubject.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nconst char * RTF_GetSubject(RTF_Context *ctx);\n```\n\n----------------------------------------\n\nTITLE: Create Renderer Text Engine C\nDESCRIPTION: This function creates a text engine for drawing text on an SDL renderer. It takes an SDL_Renderer pointer as input and returns a TTF_TextEngine pointer or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_72\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateRendererTextEngine(SDL_Renderer *renderer);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_LASX_INTRINSICS in C\nDESCRIPTION: Defines the SDL_LASX_INTRINSICS macro to 1 if the compiler supports Loongarch LSX intrinsics. This definition indicates to SDL that `<lasxintrin.h>` has been included.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_LASX_INTRINSICS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_LASX_INTRINSICS 1\n```\n\n----------------------------------------\n\nTITLE: SDL_CondSignal Syntax in C\nDESCRIPTION: Shows the syntax of SDL_CondSignal function in C. This function restarts one of the threads that are waiting on the specified condition variable. It returns 0 on success and a negative error code on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_CondSignal.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_CondSignal(SDL_cond * cond);\n```\n\n----------------------------------------\n\nTITLE: Removing dummy source file\nDESCRIPTION: Removes the dummy source file that was created during the initial build setup. This step is necessary to prepare the project for integrating SDL libraries.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf jni/src/\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK in C\nDESCRIPTION: This C macro definition assigns the string \"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\" to the SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK macro. This macro is used as a key when setting the hint value using SDL_SetHint. The possible values are \"0\" (disable) or \"1\" (enable).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK \"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK\"\n```\n\n----------------------------------------\n\nTITLE: SDL_GUARDED_BY Macro Definition in C\nDESCRIPTION: This macro defines SDL_GUARDED_BY as a wrapper for Clang's thread safety analysis annotation. It takes a mutex name `x` as an argument and expands to `SDL_THREAD_ANNOTATION_ATTRIBUTE__(guarded_by(x))`.  It requires the Clang thread safety analysis tools to be available.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GUARDED_BY.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_GUARDED_BY(x) \\\n  SDL_THREAD_ANNOTATION_ATTRIBUTE__(guarded_by(x))\n```\n\n----------------------------------------\n\nTITLE: Get Glyph Image C\nDESCRIPTION: This function retrieves the pixel image of a glyph for a UNICODE codepoint. It takes a TTF_Font pointer, a Uint32 representing the codepoint, and a TTF_ImageType pointer to store the image type. It returns an SDL_Surface pointer containing the glyph image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_50\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_GetGlyphImage(TTF_Font *font, Uint32 ch, TTF_ImageType *image_type);\n```\n\n----------------------------------------\n\nTITLE: Set Text Wrap Whitespace Visibility - SDL_ttf\nDESCRIPTION: Sets whether whitespace is visible when wrapping a text object. If `visible` is true, whitespace will be rendered even at the end of wrapped lines.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_100\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextWrapWhitespaceVisible(TTF_Text *text, bool visible);\n```\n\n----------------------------------------\n\nTITLE: IMG_LoadAnimationTyped_RW Syntax (C)\nDESCRIPTION: This code snippet shows the syntax for the IMG_LoadAnimationTyped_RW function in C. It takes an SDL_RWops pointer, an integer for freeing the source, and a const char pointer for the file type as input. It returns an IMG_Animation pointer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_image/IMG_LoadAnimationTyped_RW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nIMG_Animation * IMG_LoadAnimationTyped_RW(SDL_RWops *src, int freesrc, const char *type);\n```\n\n----------------------------------------\n\nTITLE: Adding User to TTY Group\nDESCRIPTION: Adds the current user to the 'tty' group. This workaround allows SDL applications running from a pseudo terminal (e.g., SSH) to receive SDL_TEXTINPUT messages. Necessary for text input API support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -aG tty `whoami`\n```\n\n----------------------------------------\n\nTITLE: Find Vendor ID and Product ID\nDESCRIPTION: These commands search for the vendor ID and product ID of an input device (e.g., /dev/input/eventXX) by querying the udev database and filtering the output using grep. These IDs are necessary for creating udev rules that target specific devices.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/linux.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm info -a --name=input/eventXX | grep idVendor\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo udevadm info -a --name=input/eventXX | grep idProduct\n```\n\n----------------------------------------\n\nTITLE: SDL_MIXER_VERSION_ATLEAST Macro Definition in C\nDESCRIPTION: Defines a macro that checks if the SDL_mixer version is at least X.Y.Z. It compares the major, minor, and micro versions of SDL_mixer against the given input parameters. This macro is used for conditional compilation based on the SDL_mixer version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/SDL_MIXER_VERSION_ATLEAST.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_MIXER_VERSION_ATLEAST(X, Y, Z) \\\n    ((SDL_MIXER_MAJOR_VERSION >= X) && \\\n     (SDL_MIXER_MAJOR_VERSION > X || SDL_MIXER_MINOR_VERSION >= Y) && \\\n     (SDL_MIXER_MAJOR_VERSION > X || SDL_MIXER_MINOR_VERSION > Y || SDL_MIXER_MICRO_VERSION >= Z))\n```\n\n----------------------------------------\n\nTITLE: SDL_MemoryBarrierReleaseFunction Syntax (C)\nDESCRIPTION: Defines the syntax for the SDL_MemoryBarrierReleaseFunction. This function ensures that memory writes complete no later than a subsequent flag is written in multi-threaded scenarios. It takes no arguments and returns nothing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_MemoryBarrierReleaseFunction.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_MemoryBarrierReleaseFunction(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_PLATFORM_PS2 Macro in C\nDESCRIPTION: Defines the SDL_PLATFORM_PS2 macro to 1 if compiling for the Sony PlayStation 2. This allows platform-specific code to be included or excluded during compilation. It's defined in SDL3/SDL_platform_defines.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PLATFORM_PS2.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PLATFORM_PS2 1\n```\n\n----------------------------------------\n\nTITLE: Set Window Always On Top in C\nDESCRIPTION: This C code snippet shows the syntax for the SDL_SetWindowAlwaysOnTop function, which sets a specified SDL window to always be on top of other windows, or disables this behavior. It takes a pointer to an SDL_Window and an SDL_bool value as input. The SDL_video.h header file is required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowAlwaysOnTop.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetWindowAlwaysOnTop(SDL_Window * window,\n                              SDL_bool on_top);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_HIDAPI_IGNORE_DEVICES in C\nDESCRIPTION: This C macro definition sets the value of SDL_HINT_HIDAPI_IGNORE_DEVICES to \"SDL_HIDAPI_IGNORE_DEVICES\". This allows SDL to identify the hint by its string representation. The hint is used to configure which HIDAPI devices SDL should ignore during enumeration.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_HIDAPI_IGNORE_DEVICES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_HIDAPI_IGNORE_DEVICES \"SDL_HIDAPI_IGNORE_DEVICES\"\n```\n\n----------------------------------------\n\nTITLE: Close Audio Mixer Mix_CloseAudio C\nDESCRIPTION: Closes the SDL_mixer audio mixer, halting all playing audio. This function releases all resources used by the mixer and stops any currently playing music or sound effects.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_37\n\nLANGUAGE: c\nCODE:\n```\nvoid Mix_CloseAudio(void);\n```\n\n----------------------------------------\n\nTITLE: Close Audio SDL_mixer C\nDESCRIPTION: Closes the mixer, halting all playing audio. It releases audio resources, so it should be called before the program exits.  No arguments, no return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_51\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_CloseAudio(void);\n```\n\n----------------------------------------\n\nTITLE: Get Chunk from Channel SDL_mixer C\nDESCRIPTION: Retrieves the Mix_Chunk currently associated with a specific mixer channel. Takes the channel ID as a parameter. Returns a pointer to the Mix_Chunk, or NULL if none is associated.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_50\n\nLANGUAGE: C\nCODE:\n```\nMix_Chunk * Mix_GetChunk(int channel);\n```\n\n----------------------------------------\n\nTITLE: Setting SDL_RENDER_DRIVER Environment Variable\nDESCRIPTION: Sets the SDL_RENDER_DRIVER environment variable to opengles2. This forces the application to use OpenGL ES 2.0 for rendering, bypassing potential issues with desktop OpenGL support.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nexport SDL_RENDER_DRIVER=opengles2\n```\n\n----------------------------------------\n\nTITLE: Documenting struct/union/enum typedefs correctly in C\nDESCRIPTION: This code snippet highlights the correct way to declare struct/union/enum typedefs for compatibility with the wikiheaders script. The typedef name must appear on the first line of the declaration. This is because wikiheaders isn't a full C parser.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/documentation-rules.md#_snippet_3\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_MyStruct\n{\n    int a;\n    int b;\n} SDL_MyStruct;\n```\n\n----------------------------------------\n\nTITLE: Define Wayland display pointer property in SDL3\nDESCRIPTION: Defines the `SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER` macro, which represents the string key used to access the Wayland wl_display pointer property within SDL. This allows importing/exporting the Wayland display before/after SDL video initialization. Setting the property after initialization has no effect.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER \"SDL.video.wayland.wl_display\"\n```\n\n----------------------------------------\n\nTITLE: Packaging Application (Xbox)\nDESCRIPTION: This command packages the application for Xbox using the specified PackageLayout.xml file, generating an .xvc package.  It includes options for setting the layout template, data directory, and package output directory.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/gdk.md#_snippet_9\n\nLANGUAGE: Batchfile\nCODE:\n```\nmakepkg pack /f PackageLayout.xml /lt /d . /pd Package\n```\n\n----------------------------------------\n\nTITLE: Define SDL_NET_MAJOR_VERSION in C\nDESCRIPTION: Defines the SDL_NET_MAJOR_VERSION macro to represent the major version number of the SDL_net library. This macro is typically used to check for compatibility or to conditionally compile code based on the version of SDL_net being used. The value is an integer representing the major version.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDL_NET_MAJOR_VERSION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_NET_MAJOR_VERSION   3\n```\n\n----------------------------------------\n\nTITLE: SDL_GL_SwapWindow Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_GL_SwapWindow function in C. It takes a pointer to an SDL_Window as input and returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GL_SwapWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GL_SwapWindow(SDL_Window *window);\n```\n\n----------------------------------------\n\nTITLE: Building SDL2 for PSP with CMake\nDESCRIPTION: This snippet shows how to build SDL2 library for the PSP using CMake. It defines the source and build directories, build type, and toolchain file. PSPDev must be properly installed before executing these commands.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/psp.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$PSPDEV/psp/share/pspdev.cmake\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Get Music Duration SDL_mixer C\nDESCRIPTION: Retrieves the total duration of a Mix_Music object, in seconds. Requires a valid Mix_Music pointer. Returns the duration as a double.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_39\n\nLANGUAGE: C\nCODE:\n```\ndouble Mix_MusicDuration(Mix_Music *music);\n```\n\n----------------------------------------\n\nTITLE: SDL_TouchFingerEvent Structure Definition (C)\nDESCRIPTION: Defines the structure SDL_TouchFingerEvent, which contains information about a touch event, including the event type, timestamp, touch and finger IDs, normalized coordinates (x, y), normalized delta coordinates (dx, dy), pressure, and the window ID.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_TouchFingerEvent.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef struct SDL_TouchFingerEvent\n{\n    SDL_EventType type; /**< SDL_EVENT_FINGER_DOWN, SDL_EVENT_FINGER_UP, SDL_EVENT_FINGER_MOTION, or SDL_EVENT_FINGER_CANCELED */\n    Uint32 reserved;\n    Uint64 timestamp;   /**< In nanoseconds, populated using SDL_GetTicksNS() */\n    SDL_TouchID touchID; /**< The touch device id */\n    SDL_FingerID fingerID;\n    float x;            /**< Normalized in the range 0...1 */\n    float y;            /**< Normalized in the range 0...1 */\n    float dx;           /**< Normalized in the range -1...1 */\n    float dy;           /**< Normalized in the range -1...1 */\n    float pressure;     /**< Normalized in the range 0...1 */\n    SDL_WindowID windowID; /**< The window underneath the finger, if any */\n} SDL_TouchFingerEvent;\n```\n\n----------------------------------------\n\nTITLE: Handling NSApplicationDelegate in macOS with SDL2 (Objective-C)\nDESCRIPTION: This Objective-C snippet addresses issues when using a custom NSApplicationDelegate with SDL. It manually forwards terminate and open file events to SDL, ensuring that SDL_Quit and SDL_EVENT_DROP_FILE events are properly handled. It depends on the SDL library and the Cocoa framework.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/macos.md#_snippet_2\n\nLANGUAGE: objective-c\nCODE:\n```\n- (NSApplicationTerminateReply)applicationShouldTerminate:(NSApplication *)sender\n{\n    if (SDL_GetEventState(SDL_EVENT_QUIT) == SDL_ENABLE) {\n        SDL_Event event;\n        SDL_zero(event);\n        event.type = SDL_EVENT_QUIT;\n        SDL_PushEvent(&event);\n    }\n\n    return NSTerminateCancel;\n}\n\n- (BOOL)application:(NSApplication *)theApplication openFile:(NSString *)filename\n{\n    if (SDL_GetEventState(SDL_EVENT_DROP_FILE) == SDL_ENABLE) {\n        SDL_Event event;\n        SDL_zero(event);\n        event.type = SDL_EVENT_DROP_FILE;\n        event.drop.file = SDL_strdup([filename UTF8String]);\n        return SDL_PushEvent(&event);\n    }\n\n    return NO;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Glyph Image by Index C\nDESCRIPTION: This function retrieves the pixel image for a character index from a font. It requires a valid TTF_Font pointer, a Uint32 representing the glyph index, and a pointer to a TTF_ImageType where the image type is stored. Returns an SDL_Surface pointer containing the image.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_25\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_GetGlyphImageForIndex(TTF_Font *font, Uint32 glyph_index, TTF_ImageType *image_type);\n```\n\n----------------------------------------\n\nTITLE: Building SDL for PSVita with CMake\nDESCRIPTION: These commands configure, build, and install the SDL library for the PSVita using CMake. It requires vitasdk and cmake to be installed. The VITASDK environment variable must be set to the location of the vitasdk installation.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/vita.md#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_TOOLCHAIN_FILE=${VITASDK}/share/vita.toolchain.cmake -DCMAKE_BUILD_TYPE=Release\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: SDL2 Audio Conversion Example\nDESCRIPTION: This example shows the old way of doing audio conversion, using `SDL_AudioCVT` structure, in SDL2. This is not the recommended way in SDL3.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/migration.md#_snippet_11\n\nLANGUAGE: c\nCODE:\n```\nSDL_AudioCVT cvt;\n    SDL_BuildAudioCVT(&cvt, src_format, src_channels, src_rate, dst_format, dst_channels, dst_rate);\n    cvt.len = src_len;\n    cvt.buf = (Uint8 *) SDL_malloc(src_len * cvt.len_mult);\n    SDL_memcpy(cvt.buf, src_data, src_len);\n    SDL_ConvertAudio(&cvt);\n    do_something(cvt.buf, cvt.len_cvt);\n```\n\n----------------------------------------\n\nTITLE: Adding permissions to manifest.json for persistent storage\nDESCRIPTION: This JSON snippet shows how to add the `unlimitedStorage` permission to the `manifest.json` file. This allows the Native Client application to use persistent storage without limitations.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/nacl.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"permissions\": [\n        \"unlimitedStorage\"\n    ]\n```\n\n----------------------------------------\n\nTITLE: Enable Hardware Accelerated YUV Overlays for DirectFB\nDESCRIPTION: This snippet enables hardware accelerated YUV overlays for YUV textures in DirectFB. Note that only the first YUV texture will be hardware accelerated; others will be rendered in software.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/directfb.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport SDL_DIRECTFB_YUV_DIRECT=1\n```\n\n----------------------------------------\n\nTITLE: Set Global Script for Text Shaping in SDL_ttf (Deprecated)\nDESCRIPTION: Sets a global script to be used for text shaping using HarfBuzz. This function is deprecated and affects all fonts globally. It expects an hb_script_t value (from HarfBuzz) cast to an integer. Use TTF_SetFontScriptName instead, which operates on a per-font basis.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetScript.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint TTF_SetScript(int script); /* hb_script_t */\n```\n\n----------------------------------------\n\nTITLE: Building SDL for PS Vita with CMake\nDESCRIPTION: These commands use CMake to build and install SDL for the PS Vita. It requires vitasdk and cmake to be installed and properly configured. The build type is set to Release.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/vita.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncmake -S. -Bbuild -DCMAKE_TOOLCHAIN_FILE=${VITASDK}/share/vita.toolchain.cmake -DCMAKE_BUILD_TYPE=Release\ncmake --build build\ncmake --install build\n```\n\n----------------------------------------\n\nTITLE: Rendering Shaded Glyph C\nDESCRIPTION: This function renders a single UNICODE codepoint at high quality to a new 8-bit surface. It requires a valid TTF_Font pointer, a Uint32 representing the codepoint, an SDL_Color structure for the foreground color, and an SDL_Color structure for the background color. Returns an SDL_Surface pointer containing the rendered glyph.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_36\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Shaded(TTF_Font *font, Uint32 ch, SDL_Color fg, SDL_Color bg);\n```\n\n----------------------------------------\n\nTITLE: Log Available Renderer Drivers in C\nDESCRIPTION: This C code snippet iterates through available rendering drivers using SDL_GetNumRenderDrivers() and SDL_GetRenderDriver(). It logs the index and name of each driver to the console, which is useful for debugging and determining the drivers supported in a specific SDL build. The code assumes that SDL has been properly initialized.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetRenderDriver.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n// Log drivers that are available, in the order of priority SDL chooses them.\n// Useful for e.g. debugging which ones a particular build of SDL contains.\nSDL_Log(\"Available renderer drivers:\");\nfor (int i = 0; i < SDL_GetNumRenderDrivers(); i++) {\n    SDL_Log(\"%d. %s\", i + 1, SDL_GetRenderDriver(i));\n}\n```\n\n----------------------------------------\n\nTITLE: Build SDL2_gfx library for Android\nDESCRIPTION: Downloads, extracts, configures, builds, and installs the SDL2_gfx library for Android using the standalone NDK toolchain. Configuration options include disabling shared libraries and MMX instructions.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Android.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nExample with SDL2_gfx:\nVERSION=1.0.3\nwget http://www.ferzkopp.net/Software/SDL2_gfx/SDL2_gfx-$VERSION.tar.gz\ntar xf SDL2_gfx-$VERSION.tar.gz\nmv SDL2_gfx-$VERSION/ SDL2_gfx/\ncd SDL2_gfx/\nmkdir cross-android/ && cd cross-android/\n../configure --host=arm-linux-androideabi --prefix=$NDK_STANDALONE/sysroot/usr \\\n  --disable-shared --disable-mmx\nmake -j$(nproc)\nmake install\n```\n\n----------------------------------------\n\nTITLE: HIDAPI License Declaration\nDESCRIPTION: This snippet shows the license under which the HIDAPI source code is distributed.  It's a permissive license allowing use for any reason as long as the copyright notice remains intact.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/CategoryHIDAPI.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nHIDAPI - Multi-Platform library for\ncommunication with HID devices.\n\nCopyright 2009, Alan Ott, Signal 11 Software.\nAll Rights Reserved.\n\nThis software may be used by anyone for any reason so\nlong as the copyright notice in the source files\nremains intact.\n```\n\n----------------------------------------\n\nTITLE: Getting Text Properties C\nDESCRIPTION: This function gets the properties associated with a text object. It requires a pointer to the TTF_Text. Returns an SDL_PropertiesID representing the properties.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_57\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID TTF_GetTextProperties(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_ResizePacket Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDLNet_ResizePacket function in C. It takes a UDPpacket pointer and an integer representing the new size as input. The function returns an integer representing the new maximum payload size.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_ResizePacket.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDLNet_ResizePacket(UDPpacket *packet, int newsize);\n```\n\n----------------------------------------\n\nTITLE: SDLNet_CreateClient Syntax in C\nDESCRIPTION: Defines the syntax for the SDLNet_CreateClient function, which is used to initiate a client connection to a remote server.  It takes an SDLNet_Address and port as input and returns a new SDLNet_StreamSocket pointer, or NULL on error. The connection process is asynchronous.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_CreateClient.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDLNet_StreamSocket * SDLNet_CreateClient(SDLNet_Address *address, Uint16 port);\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for iOS Device (mixed)\nDESCRIPTION: This command configures CMake to build SDL for an iOS device, using the latest installed SDK and targeting both arm64 and armv7s architectures.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/cmake.md#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ncmake ~/sdl -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=iphoneos -DCMAKE_OSX_ARCHITECTURES=\"arm64;armv7s\"\n```\n\n----------------------------------------\n\nTITLE: Get Timidity Configuration File Mix_GetTimidityCfg C\nDESCRIPTION: Retrieves the full path of the Timidity configuration file that was previously set. This function allows retrieval of the configuration path specified using `Mix_SetTimidityCfg`.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_35\n\nLANGUAGE: c\nCODE:\n```\nconst char * Mix_GetTimidityCfg(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_Init Default Implementation in C\nDESCRIPTION: This snippet illustrates the default implementation of SDL_Init, which calls SDL_InitDynamicAPI to populate the jump table with actual SDL function pointers. This ensures that the `_DEFAULT` function is only called once during initialization.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/dynapi.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\nUint32 SDL_Init_DEFAULT(Uint32 flags)\n{\n    SDL_InitDynamicAPI();\n    return jump_table.SDL_Init(flags);\n}\n```\n\n----------------------------------------\n\nTITLE: Fade Out Channel Mix_FadeOutChannel C\nDESCRIPTION: Halts a channel after fading it out over a specified time period. This function smoothly reduces the volume of the channel before stopping playback.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReference.md#_snippet_6\n\nLANGUAGE: c\nCODE:\n```\nint Mix_FadeOutChannel(int which, int ms);\n```\n\n----------------------------------------\n\nTITLE: Getting Text Substring for Line with SDL_ttf in C\nDESCRIPTION: This function retrieves the substring of a text object that contains the given line. It requires a `TTF_Text` pointer, the line number, and a pointer to a `TTF_SubString` structure to store the substring. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_82\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_GetTextSubStringForLine(TTF_Text *text, int line, TTF_SubString *substring);\n```\n\n----------------------------------------\n\nTITLE: Setting Whitespace Visibility on Wrap with SDL_ttf in C\nDESCRIPTION: This function sets whether whitespace should be visible when wrapping a text object. It requires a `TTF_Text` pointer and a boolean value indicating whether whitespace should be visible. Returns true on success, false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_74\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_SetTextWrapWhitespaceVisible(TTF_Text *text, bool visible);\n```\n\n----------------------------------------\n\nTITLE: Creating GPU Text Engine C\nDESCRIPTION: This function creates a text engine for drawing text with the SDL GPU API. It requires a pointer to the SDL_GPUDevice. Returns a pointer to the created TTF_TextEngine.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReferenceNoUnicode.md#_snippet_50\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateGPUTextEngine(SDL_GPUDevice *device);\n```\n\n----------------------------------------\n\nTITLE: Render Solid Glyph C\nDESCRIPTION: This function renders a single 32-bit glyph at fast quality to a new 8-bit surface. It takes a TTF_Font, the glyph code, and an SDL_Color for the foreground color. It returns an SDL_Surface with the rendered glyph, or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_59\n\nLANGUAGE: C\nCODE:\n```\nSDL_Surface * TTF_RenderGlyph_Solid(TTF_Font *font, Uint32 ch, SDL_Color fg);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_ScaleMode Enum in C\nDESCRIPTION: This code snippet defines the SDL_ScaleMode enumeration in C. It includes three possible values: SDL_ScaleModeNearest for nearest pixel sampling, SDL_ScaleModeLinear for linear filtering, and SDL_ScaleModeBest for anisotropic filtering. It is used to determine how textures are scaled when rendered.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ScaleMode.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_ScaleMode\n{\n    SDL_ScaleModeNearest, /**< nearest pixel sampling */\n    SDL_ScaleModeLinear,  /**< linear filtering */\n    SDL_ScaleModeBest     /**< anisotropic filtering */\n} SDL_ScaleMode;\n```\n\n----------------------------------------\n\nTITLE: Clean NDK Build\nDESCRIPTION: This command cleans the NDK build, removing library files of your project (but not the SDL lib files).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/android.md#_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nndk-build clean\n```\n\n----------------------------------------\n\nTITLE: Detecting Image Types via SDL_IOStream\nDESCRIPTION: These functions detect the image data format on a readable/seekable SDL_IOStream. Each function checks for a specific image format (e.g., AVIF, ICO, BMP, GIF, JPG, PNG, WEBP).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/QuickReference.md#_snippet_4\n\nLANGUAGE: C\nCODE:\n```\nbool IMG_isAVIF(SDL_IOStream *src);                                                                                // Detect AVIF image data on a readable/seekable SDL_IOStream.\nbool IMG_isICO(SDL_IOStream *src);                                                                                 // Detect ICO image data on a readable/seekable SDL_IOStream.\nbool IMG_isCUR(SDL_IOStream *src);                                                                                 // Detect CUR image data on a readable/seekable SDL_IOStream.\nbool IMG_isBMP(SDL_IOStream *src);                                                                                 // Detect BMP image data on a readable/seekable SDL_IOStream.\nbool IMG_isGIF(SDL_IOStream *src);                                                                                 // Detect GIF image data on a readable/seekable SDL_IOStream.\nbool IMG_isJPG(SDL_IOStream *src);                                                                                 // Detect JPG image data on a readable/seekable SDL_IOStream.\nbool IMG_isJXL(SDL_IOStream *src);                                                                                 // Detect JXL image data on a readable/seekable SDL_IOStream.\nbool IMG_isLBM(SDL_IOStream *src);                                                                                 // Detect LBM image data on a readable/seekable SDL_IOStream.\nbool IMG_isPCX(SDL_IOStream *src);                                                                                 // Detect PCX image data on a readable/seekable SDL_IOStream.\nbool IMG_isPNG(SDL_IOStream *src);                                                                                 // Detect PNG image data on a readable/seekable SDL_IOStream.\nbool IMG_isPNM(SDL_IOStream *src);                                                                                 // Detect PNM image data on a readable/seekable SDL_IOStream.\nbool IMG_isSVG(SDL_IOStream *src);                                                                                 // Detect SVG image data on a readable/seekable SDL_IOStream.\nbool IMG_isQOI(SDL_IOStream *src);                                                                                 // Detect QOI image data on a readable/seekable SDL_IOStream.\nbool IMG_isTIF(SDL_IOStream *src);                                                                                 // Detect TIFF image data on a readable/seekable SDL_IOStream.\nbool IMG_isXCF(SDL_IOStream *src);                                                                                 // Detect XCF image data on a readable/seekable SDL_IOStream.\nbool IMG_isXPM(SDL_IOStream *src);                                                                                 // Detect XPM image data on a readable/seekable SDL_IOStream.\nbool IMG_isXV(SDL_IOStream *src);                                                                                  // Detect XV image data on a readable/seekable SDL_IOStream.\nbool IMG_isWEBP(SDL_IOStream *src);                                                                                // Detect WEBP image data on a readable/seekable SDL_IOStream.\n```\n\n----------------------------------------\n\nTITLE: SDL_SwapFloat Syntax (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_SwapFloat function in C. It demonstrates how to call the function with a float argument and indicates its return type, which is also a float.  The function is declared as SDL_FORCE_INLINE to encourage inlining by the compiler.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SwapFloat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_FORCE_INLINE float SDL_SwapFloat(float x);\n```\n\n----------------------------------------\n\nTITLE: Installing VideoCore Binary Packages\nDESCRIPTION: Installs VideoCore binary packages required for EGL and OpenGL ES 2.x support on Raspberry Pi. These packages provide hardware acceleration capabilities.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt-get install libraspberrypi0 libraspberrypi-bin libraspberrypi-dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies within Chroot\nDESCRIPTION: Installs necessary dependencies for SDL2 within the chroot environment. Includes development libraries for udev, alsa, dbus, raspberrypi, x11, xext, xrandr, xcursor, xi, and xss.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/raspberrypi.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\napt-get install libudev-dev libasound2-dev libdbus-1-dev libraspberrypi0 libraspberrypi-bin libraspberrypi-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxi-dev libxss-dev\n```\n\n----------------------------------------\n\nTITLE: Get Number of Touchpad Fingers - SDL2 - C\nDESCRIPTION: Retrieves the number of supported simultaneous fingers on a specific touchpad of a given game controller. This function requires a valid SDL_GameController pointer and the touchpad index as input. The return value is an integer representing the number of fingers, available since SDL 2.0.14.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetNumTouchpadFingers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GameControllerGetNumTouchpadFingers(SDL_GameController *gamecontroller, int touchpad);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION in C\nDESCRIPTION: This snippet defines the SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION macro, which represents the string used to enable or disable video mode emulation under Wayland. This hint can be set to \"0\" to disable emulation or \"1\" to enable it. By default, video mode emulation is enabled.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION \"SDL_VIDEO_WAYLAND_MODE_EMULATION\"\n```\n\n----------------------------------------\n\nTITLE: Fading Out Group SDL_mixer C\nDESCRIPTION: Halts a playing group of channels, identified by a tag, after fading them out over a specified time. Takes the tag and fade-out duration in milliseconds. Returns 0 on success, -1 on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_21\n\nLANGUAGE: C\nCODE:\n```\nint Mix_FadeOutGroup(int tag, int ms);\n```\n\n----------------------------------------\n\nTITLE: Freeing an SDL_RWops structure in C\nDESCRIPTION: This code snippet demonstrates how to use the SDL_FreeRW function to free an SDL_RWops structure that was previously allocated using SDL_AllocRW.  It takes a pointer to the SDL_RWops structure as input and releases the memory associated with the structure. This function should only be used on pointers returned by SDL_AllocRW().\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FreeRW.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FreeRW(SDL_RWops * area);\n```\n\n----------------------------------------\n\nTITLE: Get Joystick Properties in C\nDESCRIPTION: Retrieves the properties associated with a joystick. The function takes a pointer to an SDL_Joystick and returns an SDL_PropertiesID. This ID can then be used with other SDL property functions to get specific information about the joystick's capabilities, such as LED and rumble support. Requires SDL3 and an opened joystick.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetJoystickProperties.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_PropertiesID SDL_GetJoystickProperties(SDL_Joystick *joystick);\n```\n\n----------------------------------------\n\nTITLE: SDL_HapticLeftRight Structure Definition in C\nDESCRIPTION: Defines the SDL_HapticLeftRight structure, which is used to specify parameters for the SDL_HAPTIC_LEFTRIGHT effect. It includes members for the effect type, duration, and magnitude control for both large and small motors.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HapticLeftRight.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_HapticLeftRight\n{\n    /* Header */\n    Uint16 type;            /**< SDL_HAPTIC_LEFTRIGHT */\n\n    /* Replay */\n    Uint32 length;          /**< Duration of the effect in milliseconds. */\n\n    /* Rumble */\n    Uint16 large_magnitude; /**< Control of the large controller motor. */\n    Uint16 small_magnitude; /**< Control of the small controller motor. */\n} SDL_HapticLeftRight;\n```\n\n----------------------------------------\n\nTITLE: Set Font Outline in SDL_ttf (C)\nDESCRIPTION: Sets the outline thickness of the specified font. The 'font' parameter is a pointer to the TTF_Font structure, and 'outline' specifies the thickness of the outline. A value of 0 sets the outline to the default (no outline), while a positive value sets the outline thickness in pixels. This function is available since SDL_ttf 2.0.12.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_SetFontOutline.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_SetFontOutline(TTF_Font *font, int outline);\n```\n\n----------------------------------------\n\nTITLE: Definition of SDL_GPUTextureFormat Enum (C)\nDESCRIPTION: This code snippet defines the `SDL_GPUTextureFormat` enumeration in C, used to specify the pixel format of a texture within the SDL3 GPU rendering API. It lists all the supported formats including various UNORM, SNORM, FLOAT, UINT, INT, SRGB, Depth, and Compressed texture formats.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureFormat.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef enum SDL_GPUTextureFormat\n{\n    SDL_GPU_TEXTUREFORMAT_INVALID,\n\n    /* Unsigned Normalized Float Color Formats */\n    SDL_GPU_TEXTUREFORMAT_A8_UNORM,\n    SDL_GPU_TEXTUREFORMAT_R8_UNORM,\n    SDL_GPU_TEXTUREFORMAT_R8G8_UNORM,\n    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM,\n    SDL_GPU_TEXTUREFORMAT_R16_UNORM,\n    SDL_GPU_TEXTUREFORMAT_R16G16_UNORM,\n    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM,\n    SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM,\n    SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM,\n    SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM,\n    SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM,\n    SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM,\n    /* Compressed Unsigned Normalized Float Color Formats */\n    SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM,\n    SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM,\n    SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM,\n    SDL_GPU_TEXTUREFORMAT_BC4_R_UNORM,\n    SDL_GPU_TEXTUREFORMAT_BC5_RG_UNORM,\n    SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM,\n    /* Compressed Signed Float Color Formats */\n    SDL_GPU_TEXTUREFORMAT_BC6H_RGB_FLOAT,\n    /* Compressed Unsigned Float Color Formats */\n    SDL_GPU_TEXTUREFORMAT_BC6H_RGB_UFLOAT,\n    /* Signed Normalized Float Color Formats  */\n    SDL_GPU_TEXTUREFORMAT_R8_SNORM,\n    SDL_GPU_TEXTUREFORMAT_R8G8_SNORM,\n    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM,\n    SDL_GPU_TEXTUREFORMAT_R16_SNORM,\n    SDL_GPU_TEXTUREFORMAT_R16G16_SNORM,\n    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_SNORM,\n    /* Signed Float Color Formats */\n    SDL_GPU_TEXTUREFORMAT_R16_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_R32_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT,\n    /* Unsigned Float Color Formats */\n    SDL_GPU_TEXTUREFORMAT_R11G11B10_UFLOAT,\n    /* Unsigned Integer Color Formats */\n    SDL_GPU_TEXTUREFORMAT_R8_UINT,\n    SDL_GPU_TEXTUREFORMAT_R8G8_UINT,\n    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT,\n    SDL_GPU_TEXTUREFORMAT_R16_UINT,\n    SDL_GPU_TEXTUREFORMAT_R16G16_UINT,\n    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT,\n    SDL_GPU_TEXTUREFORMAT_R32_UINT,\n    SDL_GPU_TEXTUREFORMAT_R32G32_UINT,\n    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_UINT,\n    /* Signed Integer Color Formats */\n    SDL_GPU_TEXTUREFORMAT_R8_INT,\n    SDL_GPU_TEXTUREFORMAT_R8G8_INT,\n    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_INT,\n    SDL_GPU_TEXTUREFORMAT_R16_INT,\n    SDL_GPU_TEXTUREFORMAT_R16G16_INT,\n    SDL_GPU_TEXTUREFORMAT_R16G16B16A16_INT,\n    SDL_GPU_TEXTUREFORMAT_R32_INT,\n    SDL_GPU_TEXTUREFORMAT_R32G32_INT,\n    SDL_GPU_TEXTUREFORMAT_R32G32B32A32_INT,\n    /* SRGB Unsigned Normalized Color Formats */\n    SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB,\n    /* Compressed SRGB Unsigned Normalized Color Formats */\n    SDL_GPU_TEXTUREFORMAT_BC1_RGBA_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_BC2_RGBA_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_BC3_RGBA_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_BC7_RGBA_UNORM_SRGB,\n    /* Depth Formats */\n    SDL_GPU_TEXTUREFORMAT_D16_UNORM,\n    SDL_GPU_TEXTUREFORMAT_D24_UNORM,\n    SDL_GPU_TEXTUREFORMAT_D32_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT,\n    SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT,\n    /* Compressed ASTC Normalized Float Color Formats*/\n    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM,\n    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM,\n    /* Compressed SRGB ASTC Normalized Float Color Formats*/\n    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_UNORM_SRGB,\n    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_UNORM_SRGB,\n    /* Compressed ASTC Signed Float Color Formats*/\n    SDL_GPU_TEXTUREFORMAT_ASTC_4x4_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_5x4_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_5x5_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_6x5_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_6x6_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x5_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x6_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_8x8_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x5_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x6_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x8_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_10x10_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_12x10_FLOAT,\n    SDL_GPU_TEXTUREFORMAT_ASTC_12x12_FLOAT\n} SDL_GPUTextureFormat;\n```\n\n----------------------------------------\n\nTITLE: Freeing SDL_PixelFormat in C\nDESCRIPTION: Frees a pixel format structure that was allocated by SDL_AllocFormat. The format pointer to the structure to be freed. This function is available since SDL 2.0.0. Requires SDL_pixels.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_FreeFormat.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_FreeFormat(SDL_PixelFormat *format);\n```\n\n----------------------------------------\n\nTITLE: SDL_GameControllerHasRumble Syntax in C\nDESCRIPTION: This C code snippet shows the syntax for using the SDL_GameControllerHasRumble function, which determines if a given SDL_GameController has rumble capabilities. It returns SDL_TRUE if rumble is supported, and SDL_FALSE otherwise. The function takes a pointer to the SDL_GameController as its parameter.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerHasRumble.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_bool SDL_GameControllerHasRumble(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Free Local Addresses in SDL_net (C)\nDESCRIPTION: Frees the results from a call to SDLNet_GetLocalAddresses. It unreferences all addresses in the array and frees the array itself. Passing NULL is safe and will be ignored. This function is thread-safe and available since SDL_Net 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_net/SDLNet_FreeLocalAddresses.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nvoid SDLNet_FreeLocalAddresses(SDLNet_Address **addresses);\n```\n\n----------------------------------------\n\nTITLE: Get FreeType Version with TTF_GetFreeTypeVersion in C\nDESCRIPTION: Retrieves the major, minor, and patch version numbers of the FreeType library currently in use by SDL_ttf. TTF_Init() must be called before calling this function. It takes pointers to integers where the version numbers will be stored. Null pointers can be passed if a specific version number is not required.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_GetFreeTypeVersion.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid TTF_GetFreeTypeVersion(int *major, int *minor, int *patch);\n```\n\n----------------------------------------\n\nTITLE: TTF_TextWrapWhitespaceVisible Syntax in C\nDESCRIPTION: This snippet shows the syntax for the TTF_TextWrapWhitespaceVisible function in C. It takes a pointer to a TTF_Text object as input and returns a boolean value indicating whether whitespace is visible when wrapping text. The function is part of the SDL_ttf library.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_TextWrapWhitespaceVisible.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool TTF_TextWrapWhitespaceVisible(TTF_Text *text);\n```\n\n----------------------------------------\n\nTITLE: SDL_strlen Function Definition in C\nDESCRIPTION: Defines the syntax for the SDL_strlen function, which calculates the length of a null-terminated string.  It takes a const char pointer 'str' as input, which represents the string to be measured, and returns a size_t representing the length of the string (excluding the null terminator).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_strlen.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nsize_t SDL_strlen(const char *str);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_GPUTransferBufferLocation Structure in C\nDESCRIPTION: Defines the SDL_GPUTransferBufferLocation structure, which is used to specify a location in a transfer buffer for GPU operations. It contains a pointer to the SDL_GPUTransferBuffer and an offset value. This struct is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTransferBufferLocation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_GPUTransferBufferLocation\n{\n    SDL_GPUTransferBuffer *transfer_buffer;  /**< The transfer buffer used in the transfer operation. */\n    Uint32 offset;                           /**< The starting byte of the buffer data in the transfer buffer. */\n} SDL_GPUTransferBufferLocation;\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_IDLE_TIMER_DISABLED in C\nDESCRIPTION: Defines the SDL_HINT_IDLE_TIMER_DISABLED macro, which represents the hint string used to control the iOS idle timer. The macro is defined as \"SDL_IOS_IDLE_TIMER_DISABLED\". This allows developers to use a symbolic name instead of a string literal when setting the hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_IDLE_TIMER_DISABLED.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_IDLE_TIMER_DISABLED \"SDL_IOS_IDLE_TIMER_DISABLED\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Text Input Rectangle using SDL_SetTextInputRect in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_SetTextInputRect function, which defines the rectangle used for text input.  The function takes a pointer to an SDL_Rect structure as input, specifying the area where text will be entered. The input `rect` parameter represents the SDL_Rect structure indicating the text input rectangle.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetTextInputRect.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_SetTextInputRect(const SDL_Rect *rect);\n```\n\n----------------------------------------\n\nTITLE: SDL_PenInputFlags Bit Definitions in C\nDESCRIPTION: Defines several macros representing individual bits within the SDL_PenInputFlags that correspond to different pen input states. These states include pen down, multiple button presses, and eraser tip usage. These macros can be combined using bitwise operations to represent complex pen states.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PenInputFlags.md#_snippet_1\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_PEN_INPUT_DOWN       (1u << 0)  /**< pen is pressed down */\n#define SDL_PEN_INPUT_BUTTON_1   (1u << 1)  /**< button 1 is pressed */\n#define SDL_PEN_INPUT_BUTTON_2   (1u << 2)  /**< button 2 is pressed */\n#define SDL_PEN_INPUT_BUTTON_3   (1u << 3)  /**< button 3 is pressed */\n#define SDL_PEN_INPUT_BUTTON_4   (1u << 4)  /**< button 4 is pressed */\n#define SDL_PEN_INPUT_BUTTON_5   (1u << 5)  /**< button 5 is pressed */\n#define SDL_PEN_INPUT_ERASER_TIP (1u << 30) /**< eraser tip is used */\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_JOYSTICK_HIDAPI_PS3 in C\nDESCRIPTION: Defines the SDL_HINT_JOYSTICK_HIDAPI_PS3 hint as a string literal. This hint is used to control whether SDL should use the HIDAPI driver for PS3 controllers. Setting it to \"1\" enables the driver, and \"0\" disables it. The default value depends on the platform.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_JOYSTICK_HIDAPI_PS3.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_JOYSTICK_HIDAPI_PS3 \"SDL_JOYSTICK_HIDAPI_PS3\"\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_LINUX_JOYSTICK_DEADZONES in C\nDESCRIPTION: Defines the SDL_HINT_LINUX_JOYSTICK_DEADZONES macro, which is used as a hint to control how joysticks on Linux handle deadzones. This allows the user to specify whether to use HID-defined deadzones or return raw, unfiltered values.  The hint is a string constant.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_LINUX_JOYSTICK_DEADZONES.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_LINUX_JOYSTICK_DEADZONES \"SDL_LINUX_JOYSTICK_DEADZONES\"\n```\n\n----------------------------------------\n\nTITLE: Deinitializing SDL_mixer in C\nDESCRIPTION: This snippet demonstrates the syntax for deinitializing the SDL_mixer library using the Mix_Quit function. It takes no arguments and returns nothing. It's crucial to call this function after releasing all other SDL_mixer resources and closing audio devices to unload shared libraries used for codecs.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_Quit.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_Quit(void);\n```\n\n----------------------------------------\n\nTITLE: Define TTF_TextData struct in C\nDESCRIPTION: Defines the TTF_TextData structure as a typedef for a struct, allowing it to be used as a pointer type. This structure is used internally in SDL_ttf to manage text rendering data. It's available since SDL_ttf 3.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_TextData.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct TTF_TextData TTF_TextData;\n```\n\n----------------------------------------\n\nTITLE: SDL_UpdateNVTexture Syntax in C\nDESCRIPTION: Defines the syntax for the SDL_UpdateNVTexture function, which updates a rectangle within a planar NV12 or NV21 texture. It takes a texture, rectangle, Y plane data, Y plane pitch, UV plane data, and UV plane pitch as input. It returns a boolean indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_UpdateNVTexture.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_UpdateNVTexture(SDL_Texture *texture,\n                     const SDL_Rect *rect,\n                     const Uint8 *Yplane, int Ypitch,\n                     const Uint8 *UVplane, int UVpitch);\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies on openSUSE Tumbleweed\nDESCRIPTION: Installs the development packages required for building SDL2 on openSUSE Tumbleweed. Uses zypper to install packages like libunwind-devel, graphics libraries, audio libraries, and input-related libraries.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/README/linux.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper in libunwind-devel libusb-1_0-devel Mesa-libGL-devel libxkbcommon-devel libdrm-devel \\\nlibgbm-devel pipewire-devel libpulse-devel sndio-devel Mesa-libEGL-devel\n```\n\n----------------------------------------\n\nTITLE: Binding GPU Index Buffer in SDL3 (C)\nDESCRIPTION: This code snippet shows the syntax for the SDL_BindGPUIndexBuffer function, which binds an index buffer to a render pass for use in subsequent draw calls. It requires a render pass handle, a pointer to a buffer binding containing the index buffer and offset, and the index element size. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_BindGPUIndexBuffer.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_BindGPUIndexBuffer(\n    SDL_GPURenderPass *render_pass,\n    const SDL_GPUBufferBinding *binding,\n    SDL_GPUIndexElementSize index_element_size);\n\n```\n\n----------------------------------------\n\nTITLE: Setting a Window Hit Test Callback in SDL2 (C)\nDESCRIPTION: This code snippet demonstrates how to use the `SDL_SetWindowHitTest` function to set a callback function that determines if a window region has special properties. The callback function (`SDL_HitTest`) is invoked during event processing to determine how the OS should handle input events in specific regions of the window. Specifying NULL disables hit-testing.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_SetWindowHitTest.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint SDL_SetWindowHitTest(SDL_Window * window,\n                         SDL_HitTest callback,\n                         void *callback_data);\n```\n\n----------------------------------------\n\nTITLE: Create GPU Text Engine with Properties C\nDESCRIPTION: This function creates a text engine for drawing text with the SDL GPU API, using specified properties. It requires a valid SDL_GPUDevice and an SDL_PropertiesID for customization. The function returns a pointer to the created text engine or NULL on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/QuickReference.md#_snippet_77\n\nLANGUAGE: C\nCODE:\n```\nTTF_TextEngine * TTF_CreateGPUTextEngineWithProperties(SDL_PropertiesID props);\n```\n\n----------------------------------------\n\nTITLE: Showing an SDL Window in C\nDESCRIPTION: This code snippet demonstrates the syntax for using SDL_ShowWindow to display an SDL window. It takes a pointer to an SDL_Window as input and makes the window visible.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_ShowWindow.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_ShowWindow(SDL_Window * window);\n```\n\n----------------------------------------\n\nTITLE: Mix_RewindMusic Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the Mix_RewindMusic function. It takes no arguments and returns void. This function rewinds the currently playing music stream to the beginning.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/Mix_RewindMusic.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_RewindMusic(void);\n```\n\n----------------------------------------\n\nTITLE: Set Error Message with SDLNet_SetError in C\nDESCRIPTION: This code snippet shows the syntax of the SDLNet_SetError function in C. It takes a printf-style format string as input and sets the internal error message for SDL_net. The function does not return any value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_net/SDLNet_SetError.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDLNet_SetError(const char *fmt, ...);\n```\n\n----------------------------------------\n\nTITLE: TTF_SubStringFlags Type Definition\nDESCRIPTION: This code defines the `TTF_SubStringFlags` type as an unsigned 32-bit integer (`Uint32`) for storing flags related to text substrings in SDL_ttf. These flags are used to specify information about the substring, such as its flow direction and its position within the overall text (e.g., start/end of text or line).\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_ttf/TTF_SubStringFlags.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\ntypedef Uint32 TTF_SubStringFlags;\n```\n\n----------------------------------------\n\nTITLE: Get Number of Gamepad Touchpad Fingers - C\nDESCRIPTION: This code snippet shows the syntax of the `SDL_GetNumGamepadTouchpadFingers` function in C. It takes a `SDL_Gamepad` pointer and a touchpad index as input and returns the number of supported simultaneous fingers on that touchpad.  This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumGamepadTouchpadFingers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad *gamepad, int touchpad);\n```\n\n----------------------------------------\n\nTITLE: Adding Linker Flags for Release Builds in MSVC\nDESCRIPTION: This code snippet shows the linker flags that should be added to Release builds in MSVC to resolve the \"error LNK2038: mismatch detected for 'vccorlib_lib_should_be_specified_before_msvcrt_lib_to_linker'\" error.  These flags disable default libraries and explicitly specify the correct libraries to use for the build.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/README/winrt.md#_snippet_1\n\nLANGUAGE: linker flags\nCODE:\n```\n/nodefaultlib:vccorlib /nodefaultlib:msvcrt vccorlib.lib msvcrt.lib\n```\n\n----------------------------------------\n\nTITLE: Check Sample Count Support for Texture C\nDESCRIPTION: This code snippet shows the syntax for the SDL_GPUTextureSupportsSampleCount function. It takes an SDL_GPUDevice pointer, an SDL_GPUTextureFormat, and an SDL_GPUSampleCount as input and returns a boolean indicating whether the sample count is supported for the texture format on the specified device. This function is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUTextureSupportsSampleCount.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_GPUTextureSupportsSampleCount(\n    SDL_GPUDevice *device,\n    SDL_GPUTextureFormat format,\n    SDL_GPUSampleCount sample_count);\n```\n\n----------------------------------------\n\nTITLE: Defining IMG_Animation Structure in C\nDESCRIPTION: This C code snippet defines the `IMG_Animation` structure, which is used to store data for animated images within the SDL_image library. It includes the width and height of the frames, the number of frames, an array of SDL_Surface pointers to each frame, and an array of delays (in milliseconds) for each frame. This structure is specifically used for animated GIFs and WEBP images.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_image/IMG_Animation.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct IMG_Animation\n{\n    int w;                  /**< The width of the frames */\n    int h;                  /**< The height of the frames */\n    int count;              /**< The number of frames */\n    SDL_Surface **frames;   /**< An array of frames */\n    int *delays;            /**< An array of frame delays, in milliseconds */\n} IMG_Animation;\n```\n\n----------------------------------------\n\nTITLE: Halting Music SDL_mixer C\nDESCRIPTION: Halts the playback of the currently playing music stream. The function takes no arguments. No return value.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/QuickReferenceNoUnicode.md#_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nvoid Mix_HaltMusic(void);\n```\n\n----------------------------------------\n\nTITLE: SDL_CleanupTLS Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the `SDL_CleanupTLS` function in C. This function is used to clean up all Thread Local Storage (TLS) data for the current thread. It should be called before a thread exits, especially if the thread was created outside of SDL's thread management.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_CleanupTLS.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nvoid SDL_CleanupTLS(void);\n```\n\n----------------------------------------\n\nTITLE: Get Number of Video Drivers in SDL (C)\nDESCRIPTION: This code snippet shows the syntax of the SDL_GetNumVideoDrivers function. It's a C function that takes no arguments and returns an integer representing the number of video drivers.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GetNumVideoDrivers.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint SDL_GetNumVideoDrivers(void);\n```\n\n----------------------------------------\n\nTITLE: Defining SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN in C\nDESCRIPTION: This macro defines the SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN hint, which is used to control whether SDL adds the SDL_WINDOW_VULKAN flag when creating a window from a foreign window using SDL_CreateWindowFrom(). Setting this hint allows you to make the window compatible with Vulkan. The header file for this macro is SDL_hints.h.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_VIDEO_FOREIGN_WINDOW_VULKAN \"SDL_VIDEO_FOREIGN_WINDOW_VULKAN\"\n```\n\n----------------------------------------\n\nTITLE: Extract Major Version Number from SDL Version\nDESCRIPTION: This macro extracts the major version number from an SDL version number. It takes a version number as input and returns the major version component.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_VERSIONNUM_MAJOR.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_VERSIONNUM_MAJOR(version) ((version) / 1000000)\n```\n\n----------------------------------------\n\nTITLE: SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT Definition in C\nDESCRIPTION: This code snippet defines the SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT macro, which can be used to set the corresponding hint to force X11 windows as override-redirect. This macro is a string literal that represents the name of the hint.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT \"SDL_X11_FORCE_OVERRIDE_REDIRECT\"\n```\n\n----------------------------------------\n\nTITLE: SDL_RenderPoints Syntax in C\nDESCRIPTION: This code snippet shows the syntax for the SDL_RenderPoints function in C. It takes an SDL_Renderer pointer, a pointer to an array of SDL_FPoint structures representing the points to draw, and the number of points to draw as input. It returns a boolean value indicating success or failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_RenderPoints.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_RenderPoints(SDL_Renderer *renderer, const SDL_FPoint *points, int count);\n```\n\n----------------------------------------\n\nTITLE: Define Mix_Music Structure in C\nDESCRIPTION: Defines the `Mix_Music` structure as an opaque type using a typedef. This hides the internal implementation details of the structure from the user and allows SDL_mixer to manage music data efficiently. The actual implementation is handled internally by SDL_mixer.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_mixer/_Mix_Music.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct _Mix_Music Mix_Music;\n```\n\n----------------------------------------\n\nTITLE: Get Joystick from Game Controller (SDL_GameControllerGetJoystick) in C\nDESCRIPTION: Retrieves the SDL_Joystick object associated with a given SDL_GameController.  The returned SDL_Joystick pointer is owned by the SDL_GameController and should not be closed using SDL_JoystickClose(). It is available since SDL 2.0.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2/SDL_GameControllerGetJoystick.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nSDL_Joystick* SDL_GameControllerGetJoystick(SDL_GameController *gamecontroller);\n```\n\n----------------------------------------\n\nTITLE: Define SDL_HINT_GAMECONTROLLERTYPE in C\nDESCRIPTION: Defines the SDL_HINT_GAMECONTROLLERTYPE macro as a string literal. This macro is used as a hint name when using SDL_SetHint to override the automatic game controller type detection. The value should be a comma-separated list of VID/PID pairs mapped to specific controller types.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_HINT_GAMECONTROLLERTYPE.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\n#define SDL_HINT_GAMECONTROLLERTYPE \"SDL_GAMECONTROLLERTYPE\"\n```\n\n----------------------------------------\n\nTITLE: TTF_MeasureUTF8 Syntax in C\nDESCRIPTION: This is the function signature for TTF_MeasureUTF8, used to calculate how many characters from a UTF-8 string will fit within a specified width, using a given font. It populates the extent and count parameters with the latest calculated width and number of characters that can be rendered, respectively.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL2_ttf/TTF_MeasureUTF8.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nint TTF_MeasureUTF8(TTF_Font *font, const char *text, int measure_width, int *extent, int *count);\n```\n\n----------------------------------------\n\nTITLE: SDL_Tray Structure Definition in C\nDESCRIPTION: Defines the SDL_Tray structure as an opaque handle using a typedef. This structure represents a toplevel system tray object. The structure is available since SDL 3.2.0.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_Tray.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef struct SDL_Tray SDL_Tray;\n```\n\n----------------------------------------\n\nTITLE: Mix_LoadWAV_IO Function Signature (C)\nDESCRIPTION: Loads a supported audio format into a chunk from an SDL_IOStream. The `src` parameter is the SDL_IOStream to read from, and `closeio` indicates whether to close the stream after reading. Returns a new chunk or NULL on error.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3_mixer/Mix_LoadWAV_IO.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nMix_Chunk * Mix_LoadWAV_IO(SDL_IOStream *src, bool closeio);\n```\n\n----------------------------------------\n\nTITLE: SDL_GPUStoreOp Enumeration Definition (C)\nDESCRIPTION: Defines the SDL_GPUStoreOp enumeration, which specifies how the contents of a texture attached to a render pass are treated at the end of the render pass. The enumeration provides options for storing, discarding, resolving, and resolving with storing the contents of the texture.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_GPUStoreOp.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\ntypedef enum SDL_GPUStoreOp\n{\n    SDL_GPU_STOREOP_STORE,             /**< The contents generated during the render pass will be written to memory. */\n    SDL_GPU_STOREOP_DONT_CARE,         /**< The contents generated during the render pass are not needed and may be discarded. The contents will be undefined. */\n    SDL_GPU_STOREOP_RESOLVE,           /**< The multisample contents generated during the render pass will be resolved to a non-multisample texture. The contents in the multisample texture may then be discarded and will be undefined. */\n    SDL_GPU_STOREOP_RESOLVE_AND_STORE  /**< The multisample contents generated during the render pass will be resolved to a non-multisample texture. The contents in the multisample texture will be written to memory. */\n} SDL_GPUStoreOp;\n```\n\n----------------------------------------\n\nTITLE: SDL_PremultiplyAlpha Syntax in C\nDESCRIPTION: The SDL_PremultiplyAlpha function premultiplies the alpha values of a block of pixels. It takes source and destination pixel formats, buffers, dimensions, pitches, and a boolean to determine if the alpha multiplication should occur in linear or sRGB space. It returns true on success and false on failure.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/SDL_PremultiplyAlpha.md#_snippet_0\n\nLANGUAGE: C\nCODE:\n```\nbool SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, const void *src, int src_pitch, SDL_PixelFormat dst_format, void *dst, int dst_pitch, bool linear);\n```\n\n----------------------------------------\n\nTITLE: SDL_MIN_SINT16 Macro Definition (C)\nDESCRIPTION: Defines the SDL_MIN_SINT16 macro as the minimum value for a Sint16, which is -32768. This macro provides a constant expression to represent the minimum value for a signed 16-bit integer in SDL3 applications. It's vital for checking lower bounds and maintaining data integrity in SDL3-based C code.\nSOURCE: https://github.com/libsdl-org/sdlwiki/blob/main/SDL3/Sint16.md#_snippet_2\n\nLANGUAGE: c\nCODE:\n```\n#define SDL_MIN_SINT16  ((Sint16)(~0x7FFF))     /* -32768 */\n```"
  }
]