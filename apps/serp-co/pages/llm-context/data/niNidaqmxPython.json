[
  {
    "owner": "ni",
    "repo": "nidaqmx-python",
    "content": "TITLE: Adding and Reading a Single Analog Input Channel in Python\nDESCRIPTION: Adds an analog input voltage channel to a task with specified voltage range (-10V to 10V) and performs a single reading. This demonstrates basic channel configuration and data acquisition.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import nidaqmx\n>>> with nidaqmx.Task() as task:\n...     task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\", min_val=-10.0, max_val=10.0)\n...     task.read()\n...\nAIChannel(name=Dev1/ai0)\n-0.14954069643238624\n```\n\n----------------------------------------\n\nTITLE: Plotting Waveform Data with Matplotlib\nDESCRIPTION: Example showing how to acquire voltage data and create a waveform plot using matplotlib. Configures an analog input channel, acquires 50 samples at 1kHz, and displays the data.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport nidaqmx\nfrom nidaqmx.constants import AcquisitionType, READ_ALL_AVAILABLE\nimport matplotlib.pyplot as plt\nwith nidaqmx.Task() as task:\n    task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\")\n    task.timing.cfg_samp_clk_timing(1000.0, sample_mode=AcquisitionType.FINITE, samps_per_chan=50)\n    data = task.read(READ_ALL_AVAILABLE)\n    plt.plot(data)\n    plt.ylabel('Amplitude')\n    plt.title('Waveform')\n    plt.show()\n```\n\n----------------------------------------\n\nTITLE: Adding and Reading Multiple Analog Input Channels in Python\nDESCRIPTION: Configures multiple analog input channels with different voltage ranges and reads data from all channels simultaneously. Returns data as a list with one value per channel.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import nidaqmx\n>>> with nidaqmx.Task() as task:\n...     task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\", min_val=-5.0, max_val=5.0)\n...     task.ai_channels.add_ai_voltage_chan(\"Dev1/ai1\", min_val=-10.0, max_val=10.0)\n...     task.read()\n...\nAIChannel(name=Dev1/ai0)\nAIChannel(name=Dev1/ai1)\n[-0.07477034821619312, 0.8642841883602405]\n```\n\n----------------------------------------\n\nTITLE: Hardware-Timed Finite Acquisition in Python\nDESCRIPTION: Configures a task for hardware-timed acquisition using a sample clock with a specific rate (1000 Hz) and finite number of samples (10). Uses READ_ALL_AVAILABLE flag to read complete data set.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import nidaqmx\n>>> from nidaqmx.constants import AcquisitionType, READ_ALL_AVAILABLE\n>>> with nidaqmx.Task() as task:\n...     task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\")\n...     task.timing.cfg_samp_clk_timing(1000.0, sample_mode=AcquisitionType.FINITE, samps_per_chan=10)\n...     data = task.read(READ_ALL_AVAILABLE)\n...     print(\"Acquired data: [\" + \", \".join(f\"{value:f}\" for value in data) + \"]\")\n...\nAIChannel(name=Dev1/ai0)\nAcquired data: [-0.149693, 2.869503, 4.520249, 4.704886, 2.875912, -0.006104, -2.895596, -4.493698, -4.515671, -2.776574]\n```\n\n----------------------------------------\n\nTITLE: Basic NI-DAQmx Task Reading\nDESCRIPTION: Demonstrates different ways to read data from an analog input channel using nidaqmx Task objects. Shows single value reads, multiple samples, and digital line reads with channel grouping.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport nidaqmx\nwith nidaqmx.Task() as task:\n    task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\")\n    task.read()\n\nwith nidaqmx.Task() as task:\n    task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\")\n    task.read(number_of_samples_per_channel=2)\n\nfrom nidaqmx.constants import LineGrouping\nwith nidaqmx.Task() as task:\n    task.di_channels.add_di_chan(\n        \"cDAQ2Mod4/port0/line0:1\", line_grouping=LineGrouping.CHAN_PER_LINE)\n    task.read(number_of_samples_per_channel=2)\n```\n\n----------------------------------------\n\nTITLE: NI-DAQmx Task Writing\nDESCRIPTION: Examples of writing data to output channels using nidaqmx Task objects. Shows writing counter pulse timing values and analog voltage samples.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport nidaqmx\nfrom nidaqmx.types import CtrTime\nwith nidaqmx.Task() as task:\n    task.co_channels.add_co_pulse_chan_time(\"Dev1/ctr0\")\n    sample = CtrTime(high_time=0.001, low_time=0.001)\n    task.write(sample)\n\nwith nidaqmx.Task() as task:\n    task.ao_channels.add_ao_voltage_chan(\"Dev1/ao0\")\n    task.write([1.1, 2.2, 3.3, 4.4, 5.5], auto_start=True)\n```\n\n----------------------------------------\n\nTITLE: TDMS Data Logging with NI-DAQmx in Python\nDESCRIPTION: Configures a task to log acquired data to a TDMS file while also reading the data. Uses LOG_AND_READ mode to simultaneously store data to disk and return it to the application.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import nidaqmx\n>>> from nidaqmx.constants import AcquisitionType, LoggingMode, LoggingOperation, READ_ALL_AVAILABLE\n>>> with nidaqmx.Task() as task:\n...     task.ai_channels.add_ai_voltage_chan(\"Dev1/ai0\")\n...     task.timing.cfg_samp_clk_timing(1000.0, sample_mode=AcquisitionType.FINITE, samps_per_chan=10)\n...     task.in_stream.configure_logging(\"TestData.tdms\", LoggingMode.LOG_AND_READ, operation=LoggingOperation.CREATE_OR_REPLACE)\n...     data = task.read(READ_ALL_AVAILABLE)\n...     print(\"Acquired data: [\" + \", \".join(f\"{value:f}\" for value in data) + \"]\")\n...\nAIChannel(name=Dev1/ai0)\nAcquired data: [-0.149693, 2.869503, 4.520249, 4.704886, 2.875912, -0.006104, -2.895596, -4.493698, -4.515671, -2.776574]\n```\n\n----------------------------------------\n\nTITLE: Reading TDMS Files with npTDMS in Python\nDESCRIPTION: Demonstrates how to read a TDMS file created by NI-DAQmx using the third-party npTDMS module. Opens the file and iterates through all groups and channels to access the recorded data.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> from nptdms import TdmsFile\n>>> with TdmsFile.read(\"TestData.tdms\") as tdms_file:\n...   for group in tdms_file.groups():\n...     for channel in group.channels():\n...       data = channel[:]\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic NI-DAQmx Task in Python\nDESCRIPTION: Creates an empty NI-DAQmx task using a context manager to ensure proper resource cleanup. Tasks are collections of channels with timing, triggering, and other properties.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import nidaqmx\n>>> with nidaqmx.Task() as task:\n...     pass\n```\n\n----------------------------------------\n\nTITLE: NI-DAQmx System Information\nDESCRIPTION: Example showing how to query system-level information like driver version, available devices and channel configurations using the nidaqmx.system classes.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/README.rst#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport nidaqmx.system\nsystem = nidaqmx.system.System.local()\nsystem.driver_version\n\nfor device in system.devices:\n    print(device)\n\nimport collections\nisinstance(system.devices, collections.Sequence)\ndevice = system.devices['Dev1']\ndevice == nidaqmx.system.Device('Dev1')\nisinstance(device.ai_physical_chans, collections.Sequence)\nphys_chan = device.ai_physical_chans['ai0']\nphys_chan\nphys_chan == nidaqmx.system.PhysicalChannel('Dev1/ai0')\nphys_chan.ai_term_cfgs\nfrom enum import Enum\nisinstance(phys_chan.ai_term_cfgs[0], Enum)\n```\n\n----------------------------------------\n\nTITLE: Implementing GrpcSessionOptions Class for NI-DAQmx in Python\nDESCRIPTION: Defines a class for specifying gRPC session options in NI-DAQmx. It includes parameters for the gRPC channel, session name, and initialization behavior. This class is used to configure gRPC sessions for NI-DAQmx tasks.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/grpc_session_options.rst#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass GrpcSessionOptions(self, grpc_channel, session_name, initialization_behavior=SessionInitializationBehavior.AUTO):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Defining SessionInitializationBehavior Enum for NI-DAQmx gRPC in Python\nDESCRIPTION: Defines an enumeration for session initialization behavior when using NI-DAQmx over gRPC. It includes options for automatic behavior, initializing a new server session, or attaching to an existing session.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/grpc_session_options.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SessionInitializationBehavior:\n    AUTO = ...\n    INITIALIZE_SERVER_SESSION = ...\n    ATTACH_TO_SERVER_SESSION = ...\n```\n\n----------------------------------------\n\nTITLE: Importing NI-DAQmx Errors Module in Python\nDESCRIPTION: This snippet demonstrates how to import the errors module from the nidaqmx package. The module likely contains error handling and exception classes specific to NI-DAQmx operations.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/errors.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom nidaqmx import errors\n```\n\n----------------------------------------\n\nTITLE: Importing nidaqmx.constants Module in Python\nDESCRIPTION: This snippet demonstrates how to import the constants module from the nidaqmx package. The constants module likely contains various constant values and enumerations used throughout the nidaqmx-python project.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/constants.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom nidaqmx import constants\n```\n\n----------------------------------------\n\nTITLE: Importing the physical_channel module from nidaqmx.system\nDESCRIPTION: This snippet shows how to import the physical_channel module from the nidaqmx.system package. The module likely contains classes and functions for interacting with physical channels in NI-DAQmx.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/physical_channel.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom nidaqmx.system import physical_channel\n```\n\n----------------------------------------\n\nTITLE: Importing nidaqmx.system Module in Python\nDESCRIPTION: This snippet shows how to import the nidaqmx.system module. It is used to access system-level functionality in the NI-DAQmx Python API.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/system.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom nidaqmx.system import system\n```\n\n----------------------------------------\n\nTITLE: Running tests across all supported Python versions\nDESCRIPTION: Command to run the regression tests in all Python interpreters supported by nidaqmx using tox.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npoetry run tox\n```\n\n----------------------------------------\n\nTITLE: Running nidaqmx tests with pytest\nDESCRIPTION: Command to run the nidaqmx regression tests in the current Python environment using pytest.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npoetry run pytest\n```\n\n----------------------------------------\n\nTITLE: Running type checking with mypy\nDESCRIPTION: Command to statically type-check the updated code using mypy.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npoetry run mypy\n```\n\n----------------------------------------\n\nTITLE: Running linting checks with ni-python-styleguide\nDESCRIPTION: Command to check that code follows NI's Python coding conventions using the ni-python-styleguide linter.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npoetry run ni-python-styleguide lint\n```\n\n----------------------------------------\n\nTITLE: Automatically fixing code style issues\nDESCRIPTION: Command to automatically sort imports and format code with Black using the ni-python-styleguide fix command.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npoetry run ni-python-styleguide fix\n```\n\n----------------------------------------\n\nTITLE: Installing nidaqmx dependencies using Poetry\nDESCRIPTION: Command to install all dependencies for the nidaqmx project using Poetry package manager.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Publishing nidaqmx to PyPI\nDESCRIPTION: Command to build and publish the nidaqmx package to PyPI using a token for authentication.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npoetry publish --build -u __token__ -p <pypi-token>\n```\n\n----------------------------------------\n\nTITLE: Updating package version number\nDESCRIPTION: Command to update the version in pyproject.toml using Poetry's version command, which supports semantic versioning increments.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\npoetry version [patch|minor|major|<semver>]\n```\n\n----------------------------------------\n\nTITLE: Checking current package version\nDESCRIPTION: Command to display the current version of the nidaqmx package as defined in pyproject.toml.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npoetry version\n```\n\n----------------------------------------\n\nTITLE: Building documentation with Sphinx\nDESCRIPTION: Command to build the HTML documentation using Sphinx, with output directed to the docs\\_build directory.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\npoetry run sphinx-build -b html docs docs\\_build\n```\n\n----------------------------------------\n\nTITLE: Installing documentation dependencies\nDESCRIPTION: Command to install the optional documentation packages using Poetry's extras feature.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npoetry install -E docs\n```\n\n----------------------------------------\n\nTITLE: Running code generation for nidaqmx\nDESCRIPTION: Command to update auto-generated code using the codegen script, which ensures the latest files are present in the generated folder.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npoetry run python src/codegen --dest generated/nidaqmx\n```\n\n----------------------------------------\n\nTITLE: Generating Python API Documentation for NI-DAQmx Watchdog Module\nDESCRIPTION: This code snippet uses Sphinx automodule directives to generate documentation for the nidaqmx.system.watchdog module. It includes all members, shows inheritance, and includes special members.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/watchdog.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: nidaqmx.system.watchdog\n    :members:\n    :show-inheritance:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Including Submodule Documentation for NI-DAQmx Watchdog\nDESCRIPTION: This code snippet uses a toctree directive to include documentation for the expiration_state and expiration_states_collection submodules of the watchdog module.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/watchdog.rst#2025-04-22_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   \n   expiration_state\n   expiration_states_collection\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for nidaqmx.utils\nDESCRIPTION: ReStructuredText documentation directive that sets up automated documentation generation for the nidaqmx.utils module. Enables member documentation and inheritance visualization.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/utils.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: nidaqmx.utils\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Documentation Directives for nidaqmx.task.triggering Module\nDESCRIPTION: This code snippet defines documentation directives for Sphinx to auto-generate API documentation for the nidaqmx.task.triggering module. It specifies that all members should be included, inheritance information should be shown, and members should be ordered as they appear in the source code.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/task_triggering.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: nidaqmx.task.triggering\n    :members:\n    :show-inheritance:\n    :member-order: bysource\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Configuration for nidaqmx.stream_writers\nDESCRIPTION: ReStructuredText configuration block that sets up automatic module documentation generation. It includes all members, inherited members, and inheritance information for the stream_writers module.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/stream_writers.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: nidaqmx.stream_writers\n    :members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx automodule directive for nidaqmx.stream_readers\nDESCRIPTION: RST documentation directive that automatically generates API documentation for the nidaqmx.stream_readers module. Shows all module members, inheritance relationships, and inherited members.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/stream_readers.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: nidaqmx.stream_readers\n    :members:\n    :show-inheritance:\n    :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for NI-DAQmx Scale Module\nDESCRIPTION: ReStructuredText directives for automatically generating documentation for the nidaqmx.scale module, including all members, inheritance details, and special members.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/scale.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: nidaqmx.scale\n    :members:\n    :show-inheritance:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting the Persisted Task Module in Python\nDESCRIPTION: This code snippet uses Sphinx's automodule directive to generate documentation for the persisted_task module. It includes all members, shows inheritance, and documents special members.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/persisted_task.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: nidaqmx.system.storage.persisted_task\n    :members:\n    :show-inheritance:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation Configuration for NI DAQmx Persisted Scale Module\nDESCRIPTION: RST directive for auto-documenting the persisted_scale module, including all members, inheritance relationships, and special class members.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/persisted_scale.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: nidaqmx.system.storage.persisted_scale\n    :members:\n    :show-inheritance:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Directive for nidaqmx Persisted Channel\nDESCRIPTION: Sphinx documentation directive that auto-generates API documentation for the persisted_channel module, including all members, inheritance information, and special class members.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/persisted_channel.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: nidaqmx.system.storage.persisted_channel\n    :members:\n    :show-inheritance:\n    :special-members:\n```\n\n----------------------------------------\n\nTITLE: Importing Physical Channel Collection Module\nDESCRIPTION: Module import path for the NI-DAQmx physical channel collection functionality.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/physical_channel_collection.rst#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnidaqmx.system._collections.physical_channel_collection\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Table of Contents Configuration\nDESCRIPTION: Sphinx documentation configuration that defines the table of contents tree structure and includes API reference documentation sections.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/index.rst#2025-04-22_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n   :caption: API Reference:\n\n   constants\n   errors\n   grpc_session_options\n   scale\n   stream_readers\n   stream_writers\n   system\n   task\n   types\n   utils\n```\n\n----------------------------------------\n\nTITLE: Importing and Documenting NI-DAQmx Expiration State Module in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc to generate documentation for the expiration_state module. It includes all members and shows inheritance relationships.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/expiration_state.rst#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: nidaqmx.system._watchdog_modules.expiration_state\n    :members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: RestructuredText Table of Contents\nDESCRIPTION: A RestructuredText directive defining the table of contents tree structure for collection-related documentation modules.\nSOURCE: https://github.com/ni/nidaqmx-python/blob/master/docs/collections.rst#2025-04-22_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   \n   device_collection\n   persisted_channel_collection\n   persisted_scale_collection\n   persisted_task_collection\n   physical_channel_collection\n```"
  }
]