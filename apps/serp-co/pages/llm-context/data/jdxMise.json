[
  {
    "owner": "jdx",
    "repo": "mise",
    "content": "TITLE: Installing mise on Linux/macOS via curl\nDESCRIPTION: A simple curl command to download and install mise on Linux or macOS systems. The installer script will place mise in ~/.local/bin by default.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl https://mise.run | sh\n```\n\n----------------------------------------\n\nTITLE: Installing mise using curl\nDESCRIPTION: Command to download and install mise using curl. It also shows how to check the installed version.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ curl https://mise.run | sh\n$ ~/.local/bin/mise --version\n2025.4.4 macos-arm64 (a1b2d3e 2025-04-15)\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with mise exec\nDESCRIPTION: Example of using mise to execute Node.js with a specific version. This command will display the Node.js version after installing Node.js 22 if needed.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmise exec node@22 -- node -v\n# v22.x.x\n```\n\n----------------------------------------\n\nTITLE: Basic Mise Configuration Structure in TOML\nDESCRIPTION: Demonstrates the basic structure of a mise.toml configuration file with environment variables, tool versions, and a simple task definition.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nNODE_ENV = 'production'\n\n[tools]\nterraform = '1.0.0'\nerlang = '24.0'\n\n[tasks.build]\nrun = 'echo \"running build tasks\"'\n```\n\n----------------------------------------\n\nTITLE: Complete Python Installation Script for Homebrew Users with Mise\nDESCRIPTION: Full script to install Python with Mise for Homebrew users, handling pkg-config unlinking and OpenSSL paths to avoid common installation issues.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/python.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nbrew unlink pkg-config\nCFLAGS=\"-I$(brew --prefix openssl)/include\" \\\n  LDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\n  mise install python@latest\nbrew link pkg-config\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js LTS globally with mise\nDESCRIPTION: Shows how to install the LTS version of Node.js and set it as the global default using mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmise use --global node@lts\n# v22.14.0\n```\n\n----------------------------------------\n\nTITLE: Activating mise in zsh with curl installation\nDESCRIPTION: Command to add mise activation to the zsh configuration file when installed via curl. This enables mise to manage the shell environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(~/.local/bin/mise activate zsh)\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Hierarchical Tool Configuration Example in TOML\nDESCRIPTION: Shows how tool configuration is hierarchical across different directories, with the current directory's configuration overriding parent directories.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nnode = '20'\npython = '3.10'\n```\n\n----------------------------------------\n\nTITLE: Installing Mise via curl script\nDESCRIPTION: This snippet shows how to install Mise using a curl command that downloads and executes an installation script. It also includes options for customizing the installation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://mise.run | sh\n\n# or with options\ncurl https://mise.run | MISE_INSTALL_PATH=/usr/local/bin/mise sh\n```\n\n----------------------------------------\n\nTITLE: Using Node.js after mise activation\nDESCRIPTION: Example showing how to use Node.js directly after mise has been activated. The commands install Node.js 22 as the global default and then use it directly.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nmise use --global node@22\nnode -v\n# v22.x.x\n```\n\n----------------------------------------\n\nTITLE: Comprehensive mise Project Configuration\nDESCRIPTION: A complete mise.toml configuration example showing tool versions, environment variables, and multiple task definitions for a Terraform project.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n# mise.toml\n[tools]\nterraform = \"1\"\naws-cli = \"2\"\n\n[env]\nTF_WORKSPACE = \"development\"\nAWS_REGION = \"us-west-2\"\nAWS_PROFILE = \"dev\"\n\n[tasks.plan]\ndescription = \"Run terraform plan with configured workspace\"\nrun = \"\"\"\nterraform init\nterraform workspace select $TF_WORKSPACE\nterraform plan\n\"\"\"\n\n[tasks.validate]\ndescription = \"Validate AWS credentials and terraform config\"\nrun = \"\"\"\naws sts get-caller-identity\nterraform validate\n\"\"\"\n\n[tasks.deploy]\ndescription = \"Deploy infrastructure after validation\"\ndepends = [\"validate\", \"plan\"]\nrun = \"terraform apply -auto-approve\"\n```\n\n----------------------------------------\n\nTITLE: Setting up a global tool with mise\nDESCRIPTION: Commands to install Node.js 22 as a global default and then run a script with it. The mise exec command uses the installed version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nmise use --global node@22 # install node 22 and set it as the global default\nmise exec -- node my-script.js\n# run my-script.js with node 22...\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using dnf package manager\nDESCRIPTION: These snippets show how to install Mise on Fedora, CentOS, Amazon Linux, RHEL, and other dnf-based distributions using the dnf package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndnf install -y dnf-plugins-core\ndnf config-manager --add-repo https://mise.jdx.dev/rpm/mise.repo\ndnf install -y mise\n```\n\nLANGUAGE: sh\nCODE:\n```\ndnf install -y dnf-plugins-core\ndnf config-manager addrepo --from-repofile=https://mise.jdx.dev/rpm/mise.repo\ndnf install -y mise\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Environment Variables in TOML Configuration\nDESCRIPTION: Shows how to define environment variables in a mise.toml file, which is placed in the root of a project directory to manage project-specific environment settings.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nNODE_ENV = 'production'\n```\n\n----------------------------------------\n\nTITLE: Running Python with mise exec\nDESCRIPTION: Example of using mise to execute Python with a specific version. This command will install Python 3 if not already present and launch the Python REPL.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmise exec python@3 -- python\n# this will download and install Python if it is not already installed\n# Python 3.13.2\n# >>> ...\n```\n\n----------------------------------------\n\nTITLE: Running Deployment Task with mise\nDESCRIPTION: Commands to install tools and run the deployment task defined in the mise.toml configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmise install # install tools specified in mise.toml\nmise run deploy\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with Mise\nDESCRIPTION: Command to install the latest version of node-20.x and make it the global default for your system.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/node.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g node@20\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow with Mise-Action\nDESCRIPTION: GitHub Actions workflow configuration that uses the mise-action to install and configure Mise, with options for version pinning, caching, and tool specification.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nname: test\non:\n  pull_request:\n    branches:\n      - main\n  push:\n    branches:\n      - main\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: jdx/mise-action@v2\n        with:\n          version: 2024.12.14 # [default: latest] mise version to install\n          install: true # [default: true] run `mise install`\n          cache: true # [default: true] cache mise using GitHub's cache\n          experimental: true # [default: false] enable experimental features\n          # automatically write this mise.toml file\n          mise_toml: |\n            [tools]\n            shellcheck = \"0.9.0\"\n          # or, if you prefer .tool-versions:\n          tool_versions: |\n            shellcheck 0.9.0\n      - run: shellcheck scripts/*.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Project with mise and virtualenv\nDESCRIPTION: This TOML configuration sets up a Python project with mise, including automatic virtualenv activation, tool versions, and various tasks for installing dependencies, running the application, testing, and linting.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/python.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nmin_version = \"2024.9.5\"\n\n[env]\n# Use the project name derived from the current directory\nPROJECT_NAME = \"{{ config_root | basename }}\"\n\n# Automatic virtualenv activation\n_.python.venv = { path = \".venv\", create = true }\n\n[tools]\npython = \"{{ get_env(name='PYTHON_VERSION', default='3.11') }}\"\nruff = \"latest\"\n\n[tasks.install]\ndescription = \"Install dependencies\"\nalias = \"i\"\nrun = \"uv pip install -r requirements.txt\"\n\n[tasks.run]\ndescription = \"Run the application\"\nrun = \"python app.py\"\n\n[tasks.test]\ndescription = \"Run tests\"\nrun = \"pytest tests/\"\n\n[tasks.lint]\ndescription = \"Lint the code\"\nrun = \"ruff src/\"\n\n[tasks.info]\ndescription = \"Print project information\"\nrun = '''\necho \"Project: $PROJECT_NAME\"\necho \"Virtual Environment: $VIRTUAL_ENV\"\n'''\n```\n\n----------------------------------------\n\nTITLE: Installing Tool Versions with Mise in Bash\nDESCRIPTION: Examples of using the 'mise install' command to install various tool versions. This includes installing specific versions, fuzzy versions, versions specified in mise.toml, and installing all tools specified in mise.toml.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/install.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise install node@20.0.0  # install specific node version\nmise install node@20      # install fuzzy node version\nmise install node         # install version specified in mise.toml\nmise install              # installs everything specified in mise.toml\n```\n\n----------------------------------------\n\nTITLE: Executing Commands with Specific Tool Versions\nDESCRIPTION: Example of using mise to execute a command with a specific version of Node.js.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ mise exec node@22 -- node -v\nmise node@22.x.x ✓ installed\nv22.x.x\n```\n\n----------------------------------------\n\nTITLE: Activating mise in bash with curl installation\nDESCRIPTION: Command to add mise activation to the bash configuration file when installed via curl. This enables mise to manage the shell environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(~/.local/bin/mise activate bash)\"' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using apt package manager\nDESCRIPTION: These snippets demonstrate how to install Mise on Ubuntu/Debian systems using the apt package manager for both AMD64 and ARM64 architectures.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update -y && sudo apt install -y gpg sudo wget curl\nsudo install -dm 755 /etc/apt/keyrings\nwget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1> /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=amd64] https://mise.jdx.dev/deb stable main\" | sudo tee /etc/apt/sources.list.d/mise.list\nsudo apt update\nsudo apt install -y mise\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update -y && apt install -y gpg sudo wget curl\nsudo install -dm 755 /etc/apt/keyrings\nwget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1> /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=arm64] https://mise.jdx.dev/deb stable main\" | sudo tee /etc/apt/sources.list.d/mise.list\nsudo apt update\nsudo apt install -y mise\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Node.js Project Configuration (TOML)\nDESCRIPTION: A complete mise.toml configuration for a Node.js project, including environment variables, tool installations, and task definitions for common operations like install, start, lint, test, and build.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/nodejs.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nmin_version = \"2024.9.5\"\n\n[env]\n_.path = ['{{config_root}}/node_modules/.bin']\n\n# Use the project name derived from the current directory\nPROJECT_NAME = \"{{ config_root | basename }}\"\n\n# Set up the path for node module binaries\nBIN_PATH = \"{{ config_root }}/node_modules/.bin\"\n\nNODE_ENV = \"{{ env.NODE_ENV | default(value='development') }}\"\n\n[tools]\n# Install Node.js using the specified version\nnode = \"{{ env['NODE_VERSION'] | default(value='lts') }}\"\n\n# Install some npm packages globally if needed\n\"npm:typescript\" = \"latest\"\n\"npm:eslint\" = \"latest\"\n\"npm:jest\" = \"latest\"\n\n[tasks.install]\nalias = \"i\"\ndescription = \"Install npm dependencies\"\nrun = \"npm install\"\n\n[tasks.start]\nalias = \"s\"\ndescription = \"Start the development server\"\nrun = \"npm run start\"\n\n[tasks.lint]\nalias = \"l\"\ndescription = \"Run ESLint\"\nrun = \"eslint src/\"\n\n[tasks.test]\ndescription = \"Run tests\"\nalias = \"t\"\nrun = \"jest\"\n\n[tasks.build]\ndescription = \"Build the project\"\nalias = \"b\"\nrun = \"npm run build\"\n\n[tasks.info]\ndescription = \"Print project information\"\nrun = '''\necho \"Project: $PROJECT_NAME\"\necho \"NODE_ENV: $NODE_ENV\"\n'''\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in TOML Configuration\nDESCRIPTION: Example of defining a build task in mise.toml that runs a cargo build command. Shows basic task configuration with description and run command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/index.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\ndescription = \"Build the CLI\"\nrun = \"cargo build\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell for mise Activation\nDESCRIPTION: Commands to add mise activation to various shell configuration files (bash, zsh, fish, powershell).\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(~/.local/bin/mise activate bash)\"' >> ~/.bashrc\necho 'eval \"$(~/.local/bin/mise activate zsh)\"' >> ~/.zshrc\necho '~/.local/bin/mise activate fish | source' >> ~/.config/fish/config.fish\necho '~/.local/bin/mise activate mise activate pwsh | Out-String | Invoke-Expression' >> ~/.config/powershell/Microsoft.PowerShell_profile.ps1\n```\n\n----------------------------------------\n\nTITLE: PNPM Project Configuration with mise (TOML)\nDESCRIPTION: A mise.toml configuration for a Node.js project using pnpm as the package manager. It includes tool specifications, hooks for corepack, environment setup, and task definitions for dependency installation and development.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/nodejs.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nnode = '22'\n\n[hooks]\n# Enabling corepack will install the `pnpm` package manager specified in your package.json\n# alternatively, you can also install `pnpm` with mise\npostinstall = 'npx corepack enable'\n\n[env]\n_.path = ['./node_modules/.bin']\n\n[tasks.pnpm-install]\ndescription = 'Installs dependencies with pnpm'\nrun = 'pnpm install'\nsources = ['package.json', 'pnpm-lock.yaml', 'mise.toml']\noutputs = ['node_modules/.pnpm/lock.yaml']\n\n[tasks.dev]\ndescription = 'Calls your dev script in `package.json`'\nrun = 'node --run dev'\ndepends = ['pnpm-install']\n```\n\n----------------------------------------\n\nTITLE: Installing mise on Debian/Ubuntu (arm64) via apt\nDESCRIPTION: Script to install mise on Debian/Ubuntu-based systems with arm64 architecture using apt. Sets up the repository and installs mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update -y && sudo apt install -y gpg sudo wget curl\nsudo install -dm 755 /etc/apt/keyrings\nwget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1> /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=arm64] https://mise.jdx.dev/deb stable main\" | sudo tee /etc/apt/sources.list.d/mise.list\nsudo apt update\nsudo apt install -y mise\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js with mise (Shell)\nDESCRIPTION: Commands to install Node.js using mise, either locally or globally. This creates a mise.toml file for local installations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/nodejs.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise use node\n```\n\nLANGUAGE: shell\nCODE:\n```\nmise use -g node@22\n```\n\n----------------------------------------\n\nTITLE: Global Mise Configuration Example\nDESCRIPTION: A comprehensive example of global mise configuration options including tool versions, settings, trusted paths, and various behavioral flags.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n# global tool versions go here\n# you can set these with `mise use -g`\nnode = 'lts'\npython = ['3.10', '3.11']\n\n[settings]\n# plugins can read the versions files used by other version managers (if enabled by the plugin)\n# for example, .nvmrc in the case of node's nvm\nidiomatic_version_file = true                     # enabled by default (unlike asdf)\nidiomatic_version_file_disable_tools = ['python'] # disable for specific tools\n\n# configure `mise install` to always keep the downloaded archive\nalways_keep_download = false        # deleted after install by default\nalways_keep_install = false         # deleted on failure by default\n\n# configure how frequently (in minutes) to fetch updated plugin repository changes\n# this is updated whenever a new runtime is installed\n# (note: this isn't currently implemented but there are plans to add it: https://github.com/jdx/mise/issues/128)\nplugin_autoupdate_last_check_duration = '1 week' # set to 0 to disable updates\n\n# config files with these prefixes will be trusted by default\ntrusted_config_paths = [\n    '~/work/my-trusted-projects',\n]\n\nverbose = false       # set to true to see full installation output, see `MISE_VERBOSE`\nhttp_timeout = \"30s\"  # set the timeout for http requests as duration string, see `MISE_HTTP_TIMEOUT`\njobs = 4              # number of plugins or runtimes to install in parallel. The default is `4`.\nraw = false           # set to true to directly pipe plugins to stdin/stdout/stderr\nyes = false           # set to true to automatically answer yes to all prompts\n\nnot_found_auto_install = true # see MISE_NOT_FOUND_AUTO_INSTALL\ntask_output = \"prefix\" # see Tasks Runner for more information\nparanoid = false       # see MISE_PARANOID\n\nshorthands_file = '~/.config/mise/shorthands.toml' # path to the shorthands file, see `MISE_SHORTHANDS_FILE`\ndisable_default_shorthands = false # disable the default shorthands, see `MISE_DISABLE_DEFAULT_SHORTHANDS`\ndisable_tools = ['node']           # disable specific tools, generally used to turn off core tools\n\nenv_file = '.env' # load env vars from a dotenv file, see `MISE_ENV_FILE`\n\nexperimental = true # enable experimental features\n\n# configure messages displayed when entering directories with config files\nstatus = { missing_tools = \"if_other_versions_installed\", show_env = false, show_tools = false }\n\n# \"_\" is a special key for information you'd like to put into mise.toml that mise will never parse\n[_]\nfoo = \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Upgrade Examples in Bash\nDESCRIPTION: Various examples demonstrating different ways to use the mise upgrade command, including upgrading specific tools, using flags like --bump and --dry-run, and interactive upgrades.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/upgrade.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Upgrades node to the latest version matching the range in mise.toml\n$ mise upgrade node\n\n# Upgrades node to the latest version and bumps the version in mise.toml\n$ mise upgrade node --bump\n\n# Upgrades all tools to the latest versions\n$ mise upgrade\n\n# Upgrades all tools to the latest versions and bumps the version in mise.toml\n$ mise upgrade --bump\n\n# Just print what would be done, don't actually do it\n$ mise upgrade --dry-run\n\n# Upgrades node and python to the latest versions\n$ mise upgrade node python\n\n# Show a multiselect menu to choose which tools to upgrade\n$ mise upgrade --interactive\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Tool Versions with mise CLI Examples\nDESCRIPTION: Examples demonstrating how to uninstall specific, current, and all versions of tools using the mise uninstall command. Shows syntax for targeting specific versions, defaulting to the current version, and using the --all flag for removing all versions of a tool.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/uninstall.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# will uninstall specific version\n$ mise uninstall node@18.0.0\n\n# will uninstall the current node version (if only one version is installed)\n$ mise uninstall node\n\n# will uninstall all installed versions of node\n$ mise uninstall --all node@18.0.0 # will uninstall all node versions\n```\n\n----------------------------------------\n\nTITLE: Activating Mise in Bash\nDESCRIPTION: This snippet shows how to activate Mise in the Bash shell by adding an activation command to the .bashrc file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(mise activate bash)\"' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Configuring Mise for Ruby on Rails Project Management\nDESCRIPTION: This TOML configuration file sets up a Mise environment for a Ruby on Rails project. It specifies the minimum Mise version, sets environment variables, defines the Ruby version to use, and creates task aliases for common Rails commands like installing dependencies, starting the server, running tests, and linting.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/ruby.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nmin_version = \"2024.9.5\"\n\n[env]\n# Project information\nPROJECT_NAME = \"{{ config_root | basename }}\"\n\n[tools]\n# Install Ruby with the specified version\nruby = \"{{ get_env(name='RUBY_VERSION', default='3.3.3') }}\"\n\n[tasks.\"bundle:install\"]\ndescription = \"Install gem dependencies\"\nrun = \"bundle install\"\n\n[tasks.server]\ndescription = \"Start the Rails server\"\nalias = \"s\"\nrun = \"rails server\"\n\n[tasks.test]\ndescription = \"Run tests\"\nalias = \"t\"\nrun = \"rails test\"\n\n[tasks.lint]\ndescription = \"Run lint using Rubocop\"\nalias = \"l\"\nrun = \"rubocop\"\n```\n\n----------------------------------------\n\nTITLE: Running mise use Command Examples\nDESCRIPTION: Provides various examples of using the 'mise use' command, including interactive selection, setting node versions with different flags, and using environment-specific configuration files.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/use.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# run with no arguments to use the interactive selector\n$ mise use\n\n# set the current version of node to 20.x in mise.toml of current directory\n# will write the fuzzy version (e.g.: 20)\n$ mise use node@20\n\n# set the current version of node to 20.x in ~/.config/mise/config.toml\n# will write the precise version (e.g.: 20.0.0)\n$ mise use -g --pin node@20\n\n# sets .mise.local.toml (which is intended not to be committed to a project)\n$ mise use --env local node@20\n\n# sets .mise.staging.toml (which is used if MISE_ENV=staging)\n$ mise use --env staging node@20\n```\n\n----------------------------------------\n\nTITLE: Installing mise via Homebrew\nDESCRIPTION: Command to install mise using the Homebrew package manager for macOS.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbrew install mise\n```\n\n----------------------------------------\n\nTITLE: Xcode Cloud Build Script with Mise\nDESCRIPTION: Custom Xcode Cloud build script (ci_post_clone.sh) that installs Mise, activates it in the environment, and runs tools like SwiftLint.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\ncurl https://mise.run | sh\nexport PATH=\"$HOME/.local/bin:$PATH\"\n\nmise install # Installs the tools in mise.toml\neval \"$(mise activate bash --shims)\" # Adds the activated tools to $PATH\n\nswiftlint {args}\n```\n\n----------------------------------------\n\nTITLE: Installing All Tools with mise\nDESCRIPTION: Demonstrates how mise can install all plugins and runtimes defined in configuration files with a single command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/comparison-to-asdf.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmise install\n```\n\n----------------------------------------\n\nTITLE: Installing Tools via Alternative Backends in mise\nDESCRIPTION: Demonstrates how mise can install tools directly from package managers like cargo and npm using alternative backends.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/comparison-to-asdf.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g cargo:ripgrep@14\nmise use -g npm:prettier@3\n```\n\n----------------------------------------\n\nTITLE: Executing Plugin Updates in MISE CLI\nDESCRIPTION: Demonstrates different ways to update MISE plugins, including updating all plugins, a single plugin, or a specific plugin reference. The command supports parallel processing with customizable job count.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/plugins/update.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise plugins update            # update all plugins\nmise plugins update node       # update only node\nmise plugins update node#beta  # specify a ref\n```\n\n----------------------------------------\n\nTITLE: Activating Mise in Fish shell\nDESCRIPTION: This snippet shows how to activate Mise in the Fish shell by adding an activation command to the Fish config file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\necho 'mise activate fish | source' >> ~/.config/fish/config.fish\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Tasks in TOML\nDESCRIPTION: Examples of defining various types of tasks in a mise.toml file, including hidden tasks, tasks with dependencies, and tasks with multiple commands.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.cleancache]\nrun = \"rm -rf .cache\"\nhide = true # hide this task from the list\n\n[tasks.clean]\ndepends = ['cleancache']\nrun = \"cargo clean\" # runs as a shell command\n\n[tasks.build]\ndescription = 'Build the CLI'\nrun = \"cargo build\"\nalias = 'b' # `mise run b`\n\n[tasks.test]\ndescription = 'Run automated tests'\n# multiple commands are run in series\nrun = [\n    'cargo test',\n    './scripts/test-e2e.sh',\n]\ndir = \"{{cwd}}\" # run in user's cwd, default is the project's base directory\n\n[tasks.lint]\ndescription = 'Lint with clippy'\nenv = { RUST_BACKTRACE = '1' } # env vars for the script\n# you can specify a multiline script instead of individual commands\nrun = \"\"\"\n#!/usr/bin/env bash\ncargo clippy\n\"\"\"\n\n[tasks.ci] # only dependencies to be run\ndescription = 'Run CI tasks'\ndepends = ['build', 'lint', 'test']\n\n[tasks.release]\nconfirm = 'Are you sure you want to cut a new release?'\ndescription = 'Cut a new release'\nfile = 'scripts/release.sh' # execute an external script\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using Cargo\nDESCRIPTION: These snippets demonstrate how to install Mise using Cargo, Rust's package manager, including options for building from source and installing from the latest commit.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncargo install mise\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo install cargo-binstall\ncargo binstall mise\n```\n\nLANGUAGE: sh\nCODE:\n```\ncargo install mise --git https://github.com/jdx/mise --branch main\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using Homebrew\nDESCRIPTION: This snippet shows how to install Mise using the Homebrew package manager for macOS.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nbrew install mise\n```\n\n----------------------------------------\n\nTITLE: CLI Commands for Managing Environment Variables\nDESCRIPTION: Illustrates various CLI commands to get, set, and unset environment variables, as well as viewing the current environment configuration through the mise command line interface.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmise set NODE_ENV=development\n# mise set NODE_ENV\n# development\n\nmise set\n# key       value        source\n# NODE_ENV  development  mise.toml\n\ncat mise.toml\n# [env]\n# NODE_ENV = 'development'\n\nmise unset NODE_ENV\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Options in mise use Command\nDESCRIPTION: Demonstrates how to set tool options when using the 'mise use' command. This example shows how to specify the executable name for the ripgrep tool.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/use.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise use ubi:BurntSushi/ripgrep[exe=rg]\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in TOML\nDESCRIPTION: Demonstrates various ways to define tasks in mise.toml, showing equivalent configurations for simplicity.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntasks.a = \"echo hello\"\ntasks.b = [\"echo hello\"]\ntasks.c.run = \"echo hello\"\n[tasks.d]\nrun = \"echo hello\"\n[tasks.e]\nrun = [\"echo hello\"]\n```\n\n----------------------------------------\n\nTITLE: Using Mise Outdated Command Examples in Bash\nDESCRIPTION: Examples demonstrating how to use the `mise outdated` command to check for outdated tool versions. Shows basic usage, filtering by tool, and JSON output format options.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/outdated.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise outdated\nPlugin  Requested  Current  Latest\npython  3.11       3.11.0   3.11.1\nnode    20         20.0.0   20.1.0\n\n$ mise outdated node\nPlugin  Requested  Current  Latest\nnode    20         20.0.0   20.1.0\n\n$ mise outdated --json\n{\"python\": {\"requested\": \"3.11\", \"current\": \"3.11.0\", \"latest\": \"3.11.1\"}, ...}\n```\n\n----------------------------------------\n\nTITLE: Using Templates in Environment Variable Values\nDESCRIPTION: Shows how to use templates in environment variable values, which allows for dynamic construction of values that can reference other environment variables or mise-specific variables.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nLD_LIBRARY_PATH = \"/some/path:{{env.LD_LIBRARY_PATH}}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mise autocompletion for Bash\nDESCRIPTION: This snippet demonstrates how to install autocompletion for Mise in the Bash shell.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\n# This requires bash-completion to be installed\nmkdir -p /etc/bash_completion.d/\nmise completion bash --include-bash-completion-lib | sudo tee /etc/bash_completion.d/mise > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Running Node.js with mise exec\nDESCRIPTION: Demonstrates how to execute a specific version of Node.js using the mise exec command. This runs Node.js v22 in an isolated environment without installing it globally.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise exec node@22 -- node -v\n# mise node@22.14.0 ✓ installed\n# v22.14.0\n```\n\n----------------------------------------\n\nTITLE: mise run Command Examples\nDESCRIPTION: Various examples showing different ways to use the mise run command including parallel task execution, force running, raw output mode, and running tasks with arguments\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks/run.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Runs the \"lint\" tasks. This needs to either be defined in mise.toml\n# or as a standalone script. See the project README for more information.\n$ mise run lint\n\n# Forces the \"build\" tasks to run even if its sources are up-to-date.\n$ mise run build --force\n\n# Run \"test\" with stdin/stdout/stderr all connected to the current terminal.\n# This forces `--jobs=1` to prevent interleaving of output.\n$ mise run test --raw\n\n# Runs the \"lint\", \"test\", and \"check\" tasks in parallel.\n$ mise run lint ::: test ::: check\n\n# Execute multiple tasks each with their own arguments.\n$ mise tasks cmd1 arg1 arg2 ::: cmd2 arg1 arg2\n```\n\n----------------------------------------\n\nTITLE: Installing Mise from GitHub Releases\nDESCRIPTION: This snippet shows how to download and install a specific version of Mise directly from GitHub Releases.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://github.com/jdx/mise/releases/download/v2024.1.0/mise-v2024.1.0-linux-x64 > /usr/local/bin/mise\nchmod +x /usr/local/bin/mise\n```\n\n----------------------------------------\n\nTITLE: Adding mise activation to shell configuration\nDESCRIPTION: Example of how to add mise activation to a shell configuration file (zsh in this case). This adds the necessary initialization to make mise available in all new shell sessions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/activate.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\necho 'eval \"$(mise activate zsh)\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Starting Shell Session with Environment Variables\nDESCRIPTION: Demonstrates how to use the mise en command to start a new shell session with all defined environment variables already set, making them immediately available.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmise set FOO=bar\nmise en\n> echo $FOO\n# bar\n```\n\n----------------------------------------\n\nTITLE: Removing Environment Variables with mise unset\nDESCRIPTION: Examples showing how to remove environment variables from local and global mise configuration files using the mise unset command. Demonstrates removing NODE_ENV from both local and global contexts.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/unset.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Remove NODE_ENV from the current directory's config\n$ mise unset NODE_ENV\n\n# Remove NODE_ENV from the global config\n$ mise unset NODE_ENV -g\n```\n\n----------------------------------------\n\nTITLE: Verifying mise installation\nDESCRIPTION: Command to check if mise was installed correctly by displaying its version information.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n~/.local/bin/mise --version\n# mise 2024.x.x\n```\n\n----------------------------------------\n\nTITLE: Installing Mise in a Debian-based Docker Image\nDESCRIPTION: This Dockerfile sets up a Debian-based image with mise installed. It configures necessary environment variables and uses curl to install mise from the official source.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/docker.md#2025-04-17_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:12-slim\n\nRUN apt-get update  \\\n    && apt-get -y --no-install-recommends install  \\\n        # install any other dependencies you might need\n        sudo curl git ca-certificates build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\nENV MISE_DATA_DIR=\"/mise\"\nENV MISE_CONFIG_DIR=\"/mise\"\nENV MISE_CACHE_DIR=\"/mise/cache\"\nENV MISE_INSTALL_PATH=\"/usr/local/bin/mise\"\nENV PATH=\"/mise/shims:$PATH\"\n# ENV MISE_VERSION=\"...\"\n\nRUN curl https://mise.run | sh\n```\n\n----------------------------------------\n\nTITLE: Running a Single Task\nDESCRIPTION: Example of running a defined 'lint' task using the mise run command. The task must be defined in mise.toml or as a standalone script.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/run.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mise run lint\n```\n\n----------------------------------------\n\nTITLE: Generating and Using mise Bootstrap Script in Shell\nDESCRIPTION: This snippet demonstrates how to generate a bootstrap script for mise, save it to a file, make it executable, and then use it to install mise. The script is designed to automatically download mise to a .mise directory if it's not already installed.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate/bootstrap.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise generate bootstrap >./bin/mise\nchmod +x ./bin/mise\n./bin/mise install\n```\n\n----------------------------------------\n\nTITLE: Mise Self-Update Command Usage\nDESCRIPTION: Basic usage pattern for the `mise self-update` command that updates mise itself. The command connects to GitHub Releases API to download and install updates. It accepts an optional VERSION argument to target a specific version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/self-update.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise self-update [FLAGS] [VERSION]\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Options in TOML\nDESCRIPTION: Examples of various task configuration options including run commands, directory specification, descriptions, aliases, dependencies, and environment variables.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.test]\nrun = 'cargo test'\nrun_windows = 'cargo test --features windows'\n\n[tasks.test]\nrun = 'cargo test'\ndir = \"{{cwd}}\"\n\n[tasks.build]\ndescription = 'Build the CLI'\nrun = \"cargo build\"\nalias = 'b' # `mise run b`\n\n[tasks.test]\ndepends = ['build']\n\n[tasks.lint]\ndescription = 'Lint with clippy'\nenv = { RUST_BACKTRACE = '1' } # env vars for the script\nrun = \"\"\"\n#!/usr/bin/env bash\ncargo clippy\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Environment Variables from Secret File in TOML Configuration\nDESCRIPTION: TOML configuration snippet showing how to import environment variables from a .env.json file into a mise configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/secrets.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n_.file = \".env.json\"\n```\n\n----------------------------------------\n\nTITLE: Symlinking Node.js and Homebrew installations with mise link\nDESCRIPTION: Examples of using the 'mise link' command to integrate externally built Node.js installations and Homebrew-managed packages into mise. The first example shows linking a Node.js version built with node-build, while the second demonstrates linking a Homebrew-installed Node.js version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/link.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# build node-20.0.0 with node-build and link it into mise\n$ node-build 20.0.0 ~/.nodes/20.0.0\n$ mise link node@20.0.0 ~/.nodes/20.0.0\n\n# have mise use the python version provided by Homebrew\n$ brew install node\n$ mise link node@brew $(brew --prefix node)\n$ mise use node@brew\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Java Versions with mise CLI\nDESCRIPTION: Commands to install and set the latest version of OpenJDK 21 as the global default, along with alternative ways to specify different JDK vendors.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/java.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g java@openjdk-21\nmise use -g java@21         # alternate shorthands for openjdk-only\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in Different Programming Languages\nDESCRIPTION: Examples of defining tasks using different programming languages like Python, Node.js, Bun, Deno, and Ruby.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\npython = 'latest'\n\n[tasks.python_task]\nrun = '''\n#!/usr/bin/env python\nfor i in range(10):\n    print(i)\n'''\n\n[tools]\nuv = 'latest'\n\n[tasks.python_uv_task]\nrun = \"\"\"\n#!/usr/bin/env -S uv run --script\n# /// script\n# dependencies = [\"requests<3\", \"rich\"]\n# ///\n\nimport requests\nfrom rich.pretty import pprint\n\nresp = requests.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n\"\"\"\n\n[tools]\nnode = 'lts'\n\n[tasks.node_task]\nshell = 'node -e'\nrun = [\n  \"console.log('First line')\",\n  \"console.log('Second line')\",\n]\n\n[tools]\nbun = 'latest'\n\n[tasks.bun_shell]\ndescription = \"https://bun.sh/docs/runtime/shell\"\nrun = \"\"\"\n#!/usr/bin/env bun\n\nimport { $ } from \"bun\";\nconst response = await fetch(\"https://example.com\");\nawait $`cat < ${response} | wc -c`; // 1256\n\"\"\"\n\n[tools]\ndeno = 'latest'\n\n[tasks.deno_task]\ndescription = \"A more complex task using Deno imports\"\nrun = '''\n#!/usr/bin/env -S deno run\nimport ProgressBar from \"jsr:@deno-library/progress\";\nimport { delay } from \"jsr:@std/async\";\n\nif (!confirm('Start download?')) {\n    Deno.exit(1);\n}\n\nconst progress = new ProgressBar({ title:  \"downloading:\", total: 100 });\nlet completed = 0;\nasync function download() {\n  while (completed <= 100) {\n    await progress.render(completed++);\n    await delay(10);\n  }\n}\nawait download();\n'''\n\n[tools]\nruby = 'latest'\n\n[tasks.ruby_task]\nrun = \"\"\"\n#!/usr/bin/env ruby\nputs 'Hello, ruby!'\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mise Activation in Bash\nDESCRIPTION: Instructions for setting up both shims and PATH activation in Bash shell configuration files for both interactive and non-interactive sessions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# note that bash will read from ~/.profile or ~/.bash_profile if the latter exists\n# ergo, you may want to check to see which is defined on your system and only append to the existing file\necho 'eval \"$(mise activate bash --shims)\"' >> ~/.bash_profile # this sets up non-interactive sessions\necho 'eval \"$(mise activate bash)\"' >> ~/.bashrc       # this sets up interactive sessions\n```\n\n----------------------------------------\n\nTITLE: Setting and Displaying Environment Variables\nDESCRIPTION: Commands to set an environment variable using mise and display its value.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ mise set SOME_VAR=bar\n$ echo $SOME_VAR\nbar\n```\n\n----------------------------------------\n\nTITLE: Generic Dockerfile for GitLab CI with Bootstrap\nDESCRIPTION: Simplified Dockerfile for GitLab CI that relies on the bootstrap script approach rather than pre-installing Mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_7\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:12-slim\n\nRUN apt-get update  \\\n    && apt-get -y --no-install-recommends install sudo curl git ca-certificates build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n```\n\n----------------------------------------\n\nTITLE: Subdirectory Tool Configuration Override Example\nDESCRIPTION: Demonstrates how a subdirectory can override parent directory tool configurations while inheriting non-conflicting settings.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nnode = '18'\nruby = '3.1'\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables in mise.toml\nDESCRIPTION: Shows how to define variables in the [vars] section of mise.toml and use them in tasks. Variables can be shared between tasks but are not passed as environment variables to scripts.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_21\n\nLANGUAGE: toml\nCODE:\n```\n[vars]\ne2e_args = '--headless'\n[tasks.test]\nrun = './scripts/test-e2e.sh {{vars.e2e_args}}'\n```\n\n----------------------------------------\n\nTITLE: Linking Plugins in mise\nDESCRIPTION: Examples showing how to symlink a plugin into mise for plugin development. The first example explicitly names the plugin, while the second lets mise infer the plugin name from the directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/plugins/link.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# essentially just `ln -s ./mise-node ~/.local/share/mise/plugins/node`\n$ mise plugins link node ./mise-node\n\n# infer plugin name as \"node\"\n$ mise plugins link ./mise-node\n```\n\n----------------------------------------\n\nTITLE: Installing Go Version with Prefix Syntax\nDESCRIPTION: Command to install Go versions 1.20 and below using the 'prefix' syntax, required because early versions didn't use a .0 suffix for first releases.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/go.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g go@prefix:1.20\n```\n\n----------------------------------------\n\nTITLE: Downloading Mise binary directly for different platforms\nDESCRIPTION: These snippets show how to download the Mise binary directly for different operating systems and architectures, including macOS (ARM64 and x64) and Linux (x64 and ARM64).\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://mise.jdx.dev/mise-latest-macos-arm64 > ~/.local/bin/mise\nchmod +x ~/.local/bin/mise\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://mise.jdx.dev/mise-latest-macos-x64 > ~/.local/bin/mise\nchmod +x ~/.local/bin/mise\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://mise.jdx.dev/mise-latest-linux-x64 > ~/.local/bin/mise\nchmod +x ~/.local/bin/mise\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://mise.jdx.dev/mise-latest-linux-arm64 > ~/.local/bin/mise\nchmod +x ~/.local/bin/mise\n```\n\n----------------------------------------\n\nTITLE: Installing Go packages with mise\nDESCRIPTION: Example of installing the 'hivemind' Go package globally using mise and then verifying installation. This demonstrates the package installation workflow.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/go.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g go:github.com/DarthSim/hivemind\n$ hivemind --help\nHivemind version 1.1.0\n```\n\n----------------------------------------\n\nTITLE: Activating mise Environment in Bash and Zsh\nDESCRIPTION: Examples of how to use the `mise env` command to activate the mise environment in Bash and Zsh shells. The command output is evaluated to set the environment variables.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/env.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(mise env -s bash)\"\n```\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(mise env -s zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Setting Mise Configuration\nDESCRIPTION: Commands to configure Mise's idiomatic version file behavior. These settings can be used to enable or disable version file parsing globally or for specific tools.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nmise settings idiomatic_version_file false\n```\n\nLANGUAGE: shell\nCODE:\n```\nmise settings idiomatic_version_file_disable_tools python\n```\n\n----------------------------------------\n\nTITLE: Generated Mise Configuration File\nDESCRIPTION: The resulting mise.toml configuration file that defines tool versions, hooks, and environment settings for the Python project.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/presets.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\npdm = \"latest\"\npre-commit = \"latest\"\npython = \"3.10\"\n\n[hooks]\npostinstall = \"pdm sync\"\n\n[env]\n[env._]\n[env._.python]\n[env._.python.venv]\npath = \".venv\"\ncreate = true\n\n[tasks.lint]\nrun = \"pre-commit run -a\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Python Packages in Mise\nDESCRIPTION: Example of a default-python-packages file that Mise will use to automatically install packages after setting up a Python version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/python.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nansible\npipenv\n```\n\n----------------------------------------\n\nTITLE: Default Gems Configuration Example\nDESCRIPTION: Sample configuration for a .default-gems file that instructs Mise to automatically install specified gems after installing a new Ruby version. Supports comments, version constraints, and prerelease versions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/ruby.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# supports comments\npry\nbcat ~> 0.6.0 # supports version constraints\nrubocop --pre # install prerelease version\n```\n\n----------------------------------------\n\nTITLE: Executing mise shell Command with Node.js Version in Bash\nDESCRIPTION: This snippet demonstrates how to use the 'mise shell' command to set a specific version of Node.js for the current shell session and verify the version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/shell.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise shell node@20\n$ node -v\nv20.0.0\n```\n\n----------------------------------------\n\nTITLE: Using mise exec to run commands with specific tool versions\nDESCRIPTION: Examples showing how to use mise exec to run commands with specific tool versions, including using the shorter alias, specifying commands as strings, and running commands in different directories.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/exec.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise exec node@20 -- node ./app.js  # launch app.js using node-20.x\n$ mise x node@20 -- node ./app.js     # shorter alias\n\n# Specify command as a string:\n$ mise exec node@20 python@3.11 --command \"node -v && python -V\"\n\n# Run a command in a different directory:\n$ mise x -C /path/to/project node@20 -- node ./app.js\n```\n\n----------------------------------------\n\nTITLE: Installing and Using NPM Package with mise\nDESCRIPTION: Example of installing and checking the version of the Prettier package using mise\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/npm.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g npm:prettier\n$ prettier --version\n3.1.0\n```\n\n----------------------------------------\n\nTITLE: Adding mise activation with explicit path\nDESCRIPTION: Example of adding mise activation to shell configuration when mise is not in the system PATH. This uses the full path to the mise executable.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/activate.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\necho 'eval \"$(/path/to/mise activate zsh)\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Installing Go Version with mise\nDESCRIPTION: Command to install the latest 1.21.x version of Go and set it as the global default.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/go.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g go@1.21\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables and Vars in Tasks\nDESCRIPTION: Demonstrates how to use environment variables and vars to define common arguments for tasks in mise.toml.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nVERBOSE_ARGS = '--verbose'\n\n# Vars can be shared between tasks like environment variables,\n# but they are not passed as environment variables to the scripts\n[vars]\ne2e_args = '--headless'\n\n[tasks.test]\nrun = './scripts/test-e2e.sh {{vars.e2e_args}} $VERBOSE_ARGS'\n```\n\n----------------------------------------\n\nTITLE: Installing a Node.js Version to a Custom Directory in Bash\nDESCRIPTION: This example demonstrates how to install Node.js 20.0.0 to a custom directory './mynode' and then verify the installation by checking the version. The command allows using the installed tool outside of mise's normal tool management.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/install-into.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# install node@20.0.0 into ./mynode\n$ mise install-into node@20.0.0 ./mynode && ./mynode/bin/node -v\n20.0.0\n```\n\n----------------------------------------\n\nTITLE: Listing Mise Configuration Files with Config Command\nDESCRIPTION: Example showing how to list all configuration files using the `mise config ls` command. The output displays the path of each configuration file and the tools configured in each file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/config.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise config ls\nPath                        Tools\n~/.config/mise/config.toml  pitchfork\n~/src/mise/mise.toml        actionlint, bun, cargo-binstall, cargo:cargo-edit, cargo:cargo-insta\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby with Mise\nDESCRIPTION: Command to install the latest version of Ruby 3.2.x and set it as the global default version. Mise uses ruby-build behind the scenes to compile Ruby from source.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/ruby.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g ruby@3.2\n```\n\n----------------------------------------\n\nTITLE: Listing Available Versions with mise ls-remote Command\nDESCRIPTION: Examples of using the mise ls-remote command to list available versions of tools that can be installed, with different filtering options including specifying tool, version prefix, or both.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/ls-remote.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mise ls-remote node\n18.0.0\n20.0.0\n\n$ mise ls-remote node@20\n20.0.0\n20.1.0\n\n$ mise ls-remote node 20\n20.0.0\n20.1.0\n```\n\n----------------------------------------\n\nTITLE: Activating Mise in Zsh\nDESCRIPTION: This snippet demonstrates how to activate Mise in the Zsh shell by adding an activation command to the .zshrc file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(mise activate zsh)\"' >> \"${ZDOTDIR-$HOME}/.zshrc\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mise on Windows using Scoop\nDESCRIPTION: This snippet shows how to install Mise on Windows using the Scoop package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nscoop install mise\n```\n\n----------------------------------------\n\nTITLE: Defining and Using Variables in Tasks\nDESCRIPTION: Shows how to define and use variables that can be shared between tasks, similar to environment variables but not passed as such to scripts.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[vars]\ne2e_args = '--headless'\n\n[tasks.test]\nrun = './scripts/test-e2e.sh {{vars.e2e_args}}'\n```\n\n----------------------------------------\n\nTITLE: Installing Go with mise\nDESCRIPTION: Command to install Go globally using mise. This is a prerequisite for using Go packages with mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/go.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g go\n```\n\n----------------------------------------\n\nTITLE: Configuring Default NPM Packages\nDESCRIPTION: Example configuration file for automatically installing default npm packages when a new Node.js version is installed. Create this file at $HOME/.default-npm-packages.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/node.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nlodash\nrequest\nexpress\n```\n\n----------------------------------------\n\nTITLE: Using mise tasks info command to get task information\nDESCRIPTION: Examples showing how to use the mise tasks info command to retrieve information about a task, with both standard output and JSON formatted output using the --json flag.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks/info.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mise tasks info\nName: test\nAliases: t\nDescription: Test the application\nSource: ~/src/myproj/mise.toml\n\n$ mise tasks info test --json\n{\n  \"name\": \"test\",\n  \"aliases\": \"t\",\n  \"description\": \"Test the application\",\n  \"source\": \"~/src/myproj/mise.toml\",\n  \"depends\": [],\n  \"env\": {},\n  \"dir\": null,\n  \"hide\": false,\n  \"raw\": false,\n  \"sources\": [],\n  \"outputs\": [],\n  \"run\": [\n    \"echo \\\"testing!\\\"\"\n  ],\n  \"file\": null,\n  \"usage_spec\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unofficial Node.js Builds\nDESCRIPTION: Commands to configure Mise to use unofficial Node.js builds for platforms not supported by official binaries.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/node.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmise settings node.mirror_url=https://unofficial-builds.nodejs.org/download/release/\n```\n\n----------------------------------------\n\nTITLE: Deactivating Mise Shell Session\nDESCRIPTION: Command to temporarily disable mise in the current shell session. This allows users to return to system default behavior without removing mise completely.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/deactivate.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise deactivate\n```\n\n----------------------------------------\n\nTITLE: Installing Rust via Mise\nDESCRIPTION: Command to install Rust using mise package manager\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g rust\n```\n\n----------------------------------------\n\nTITLE: Combining Environment Variables with Tool Versions\nDESCRIPTION: Demonstrates how to combine environment variables with tool version specifications in mise.toml and access them in a Node.js script execution.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmise use node@22\nmise set MY_VAR=123\ncat mise.toml\n# [tools]\n# node = '22'\n# [env]\n# MY_VAR = '123'\nmise exec -- node --eval 'console.log(process.env.MY_VAR)'\n# 123\n```\n\n----------------------------------------\n\nTITLE: Specifying Rust Targets in mise.toml\nDESCRIPTION: This snippet shows how to specify multiple Rust targets for cross-compilation in the mise.toml configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/rust.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"rust\" = { version = \"1.83.0\", targets = \"wasm32-unknown-unknown,thumbv2-none-eabi\" }\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Mise Setup\nDESCRIPTION: YAML configuration for setting up mise in GitHub Actions workflows\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tips-and-tricks.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    steps:\n      - run: |\n          curl https://mise.run | sh\n          echo \"$HOME/.local/bin\" >> $GITHUB_PATH\n          echo \"$HOME/.local/share/mise/shims\" >> $GITHUB_PATH\n```\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: jdx/mise-action@v2\n      - run: node -v # will be the node version from `mise.toml`/`.tool-versions`\n```\n\n----------------------------------------\n\nTITLE: Using Latest Stable Rust Version with mise\nDESCRIPTION: This snippet demonstrates how to use the latest stable version of Rust with mise and run a cargo build command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/rust.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g rust\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Task Script\nDESCRIPTION: Demonstrates creating a standalone build task script in the .mise/tasks directory that executes npm build command\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks/run.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cat .mise/tasks/build<<EOF\n#!/usr/bin/env bash\nnpm run build\nEOF\n$ mise run build\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Shell for Task Execution\nDESCRIPTION: Shows how to specify a custom shell for running a task, useful for tasks that require a specific shell environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.hello]\nrun = '''\n#!/usr/bin/env node\nconsole.log('hello world')\n'''\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using npm\nDESCRIPTION: These snippets demonstrate how to install Mise globally using npm and how to use it with npx for a single command without full installation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g @jdxcode/mise\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx @jdxcode/mise exec python@3.11 -- python some_script.py\n```\n\n----------------------------------------\n\nTITLE: Using Bootstrap Script in CI\nDESCRIPTION: YAML script demonstrating how to use the generated bootstrap script to install Mise and run tools in a CI environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nscript: |\n  ./bin/mise install\n  ./bin/mise x -- npm test\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in mise.toml\nDESCRIPTION: Demonstrates how to define tasks in the mise.toml configuration file for easy execution.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/walkthrough.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tasks]\nbuild = \"npm run build\"\ntest = \"npm test\"\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in TOML Configuration\nDESCRIPTION: Demonstrates how to define a build task in mise.toml with run command, source files, and output patterns. The task will only run if source files have changed since the last execution.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/run.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\nrun = \"npm run build\"\nsources = [\"src/**/*.ts\"]\noutputs = [\"dist/**/*.js\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Dependencies\nDESCRIPTION: Illustrates how to set up task dependencies, ensuring certain tasks run before others.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\nrun = \"cargo build\"\n[tasks.test]\ndepends = [\"build\"]\nrun = \"cargo test\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Includes in mise.toml\nDESCRIPTION: Demonstrates how to add toml files or directories containing tasks to be included when looking for tasks. This allows for organizing tasks in separate files or directories.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_18\n\nLANGUAGE: toml\nCODE:\n```\n[task_config]\nincludes = [\n    \"tasks.toml\", # a task toml file\n    \"mytasks\"     # a directory containing file tasks (in addition to the default file tasks directories)\n]\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Python Installation with Homebrew and OpenSSL in Mise\nDESCRIPTION: Command to install Python with Mise while specifying Homebrew's OpenSSL paths to avoid installation errors.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/python.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nCFLAGS=\"-I$(brew --prefix openssl)/include\" \\\nLDFLAGS=\"-L$(brew --prefix openssl)/lib\" \\\nmise install python@latest;\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with mise set Command\nDESCRIPTION: This snippet demonstrates various ways to use the 'mise set' command for setting and viewing environment variables in mise.toml. It shows how to set a variable, view its value, and list all set variables.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/set.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mise set NODE_ENV=production\n\n$ mise set NODE_ENV\nproduction\n\n$ mise set\nkey       value       source\nNODE_ENV  production  ~/.config/mise/config.toml\n```\n\n----------------------------------------\n\nTITLE: Basic Template Usage in mise.toml\nDESCRIPTION: Example showing basic template usage in mise.toml file to set environment variables and tool versions using template expressions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/templates.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nPROJECT_NAME = \"{{ cwd | basename }}\"\n\n[tools]\nnode = \"{{ get_env(name='NODE_VERSION', default='20') }}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Hooks in TOML\nDESCRIPTION: Configuration showing different syntax options for defining multiple hooks in the same file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/hooks.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[hooks]\nenter = [\n  \"echo 'I entered the project'\",\n  \"echo 'I am in the project'\"\n]\n\n[[hooks.cd]]\nscript = \"echo 'I changed directories'\"\n[[hooks.cd]]\nscript = \"echo 'I also directories'\"\n```\n\n----------------------------------------\n\nTITLE: Using Specific Rust Version with mise\nDESCRIPTION: This snippet illustrates how to use a specific version of Rust (1.82) with mise and run a cargo build command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/rust.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g rust@1.82\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Tool-Versions Configuration Syntax Example\nDESCRIPTION: Shows the syntax supported in .tool-versions files for asdf compatibility, including comments, fuzzy versions, and various version scopes.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nnode        20.0.0       # comments are allowed\nruby        3            # can be fuzzy version\nshellcheck  latest       # also supports \"latest\"\njq          1.6\nerlang      ref:master   # compile from vcs ref\ngo          prefix:1.19  # uses the latest 1.19.x version—needed in case \"1.19\" is an exact match\nshfmt       path:./shfmt # use a custom runtime\nnode        lts          # use lts version of node (not supported by all plugins)\n\nnode        sub-2:lts      # install 2 versions behind the latest lts (e.g.: 18 if lts is 20)\npython      sub-0.1:latest # install python-3.10 if the latest is 3.11\n```\n\n----------------------------------------\n\nTITLE: Installing Plugins with mise Command-Line Interface in Shell\nDESCRIPTION: This snippet demonstrates various ways to use the 'mise plugins install' command to install plugins. It shows how to install plugins using shorthands, specific git URLs, and with different options.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/plugins/install.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# install the node via shorthand\n$ mise plugins install node\n\n# install the node plugin using a specific git url\n$ mise plugins install node https://github.com/mise-plugins/rtx-nodejs.git\n\n# install the node plugin using the git url only\n# (node is inferred from the url)\n$ mise plugins install https://github.com/mise-plugins/rtx-nodejs.git\n\n# install the node plugin using a specific ref\n$ mise plugins install node https://github.com/mise-plugins/rtx-nodejs.git#v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Generating mise.toml Configuration File using Terminal Commands\nDESCRIPTION: Examples showing how to generate a mise.toml configuration file. The first command outputs to stdout, while the second one writes directly to a file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate/config.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise cf generate > mise.toml\nmise cf generate --output=mise.toml\n```\n\n----------------------------------------\n\nTITLE: Generating mise.toml file using mise config generate command\nDESCRIPTION: These examples demonstrate how to use the 'mise config generate' command to create a mise.toml file. The first example outputs to stdout, while the second specifies an output file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/config/generate.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise cf generate > mise.toml\n```\n\nLANGUAGE: bash\nCODE:\n```\nmise cf generate --output=mise.toml\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Black with Pipx Backend\nDESCRIPTION: Example of installing the latest version of Black (a Python code formatter) using the pipx backend and verifying its installation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/pipx.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g pipx:psf/black\n$ black --version\nblack, 24.3.0\n```\n\n----------------------------------------\n\nTITLE: Installing mise on Windows with winget\nDESCRIPTION: Command to install mise on Windows using the winget package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nwinget install jdx.mise\n```\n\n----------------------------------------\n\nTITLE: Using the mise watch Command with Basic Syntax\nDESCRIPTION: Basic usage of the mise watch command to run tasks and watch for changes. The command supports running multiple tasks by separating them with ':::'.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/watch.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise watch [FLAGS] [TASK] [ARGS]...\n```\n\n----------------------------------------\n\nTITLE: Setting mise environment variables in direnv configuration in Shell\nDESCRIPTION: This code demonstrates how to set mise-specific environment variables directly in a .envrc file. It sets versions for Node.js and Python, which mise will use when activating the environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/direnv.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport MISE_NODE_VERSION=20.0.0\nexport MISE_PYTHON_VERSION=3.11\n```\n\n----------------------------------------\n\nTITLE: Mise Dockerfile for GitLab CI\nDESCRIPTION: Dockerfile for creating a Debian-based Docker image with Mise pre-installed for use in GitLab CI pipelines.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_5\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM debian:12-slim\n\nRUN apt-get update  \\\n    && apt-get -y --no-install-recommends install  \\\n      # install any tools you need\n      sudo curl git ca-certificates build-essential \\\n    && rm -rf /var/lib/apt/lists/*\n\nRUN curl https://mise.run | MISE_VERSION=v... MISE_INSTALL_PATH=/usr/local/bin/mise sh\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Working Directory for Tasks\nDESCRIPTION: Demonstrates how to set a custom working directory for a task using MISE comments or environment variables.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/file-tasks.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n#MISE dir=\"{{cwd}}\"\n```\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\ncd \"$MISE_ORIGINAL_CWD\"\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with Mise Exec Command\nDESCRIPTION: Shows how to access environment variables when executing commands through mise exec, which makes the defined variables available within the execution context.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmise set MY_VAR=123\nmise exec -- echo $MY_VAR\n# 123\n```\n\n----------------------------------------\n\nTITLE: Installing Global Erlang Version with mise\nDESCRIPTION: Command to install Erlang and set it as the global default version using mise. Uses version 26 as an example.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/erlang.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g erlang@26\n```\n\n----------------------------------------\n\nTITLE: Tool Version Aliases Configuration in TOML\nDESCRIPTION: Demonstrates how to create custom aliases for tool versions, which also creates corresponding symbolic links in the installation directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\nmy_custom_node = '20'\n```\n\n----------------------------------------\n\nTITLE: Installing and Using GitVersion.Tool with mise\nDESCRIPTION: This snippet demonstrates how to install a specific version of GitVersion.Tool using mise and how to use it.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/dotnet.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g dotnet:GitVersion.Tool@5.12.0\n$ dotnet-gitversion /version\n5.12.0+Branch.support-5.x.Sha.3f75764963eb3d7956dcd5a40488c074dd9faf9e\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Package Version in mise\nDESCRIPTION: TOML configuration example showing how to set the version of an NPM package in mise's config file\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/npm.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"npm:prettier\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Node.js with Mise\nDESCRIPTION: Demonstrates how to install and use a specific version of Node.js using Mise's 'use' command. This also shows how Mise automatically creates a mise.toml configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/walkthrough.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir example-project && cd example-project\nmise use node@22\nnode -v\n# v22.0.0\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nnode = \"22\"\n```\n\n----------------------------------------\n\nTITLE: Generating use_mise function for direnv in Shell\nDESCRIPTION: This command generates a use_mise function that can be used in .envrc files. It uses mise to create the function and saves it to a configuration file for direnv.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/direnv.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise direnv activate > ~/.config/direnv/lib/use_mise.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Tool Options in mise\nDESCRIPTION: Example of setting tool options in mise.toml configuration file, demonstrating virtualenv configuration for Python.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/plugins.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\npython = { version='3.11', virtualenv='.venv' }\n```\n\n----------------------------------------\n\nTITLE: Unsetting Environment Variables in TOML Configuration\nDESCRIPTION: Demonstrates how to clear or unset a previously defined environment variable by setting its value to false in the mise.toml file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nNODE_ENV = false # unset a previously set NODE_ENV\n```\n\n----------------------------------------\n\nTITLE: Usage of mise plugins command\nDESCRIPTION: Shows the basic command syntax, aliases, and source code location for the mise plugins command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `mise plugins`\n\n- **Usage**: `mise plugins [FLAGS] <SUBCOMMAND>`\n- **Aliases**: `p`\n- **Source code**: [`src/cli/plugins/mod.rs`](https://github.com/jdx/mise/blob/main/src/cli/plugins/mod.rs)\n```\n\n----------------------------------------\n\nTITLE: Using mise reshim Command Example\nDESCRIPTION: Example showing how to use the mise reshim command and verify the shim creation by checking node version through the created shim.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/reshim.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mise reshim\n$ ~/.local/share/mise/shims/node -v\nv20.0.0\n```\n\n----------------------------------------\n\nTITLE: Using mise en command with bash examples\nDESCRIPTION: Examples demonstrating how to use the 'mise en' command to start a new shell with mise environment. Shows basic usage, running with bash while skipping bashrc loading, and running with zsh while skipping zshrc loading.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/en.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise en .\n$ node -v\nv20.0.0\n\nSkip loading bashrc:\n$ mise en -s \"bash --norc\"\n\nSkip loading zshrc:\n$ mise en -s \"zsh -f\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Virtualenv Activation in Mise\nDESCRIPTION: TOML configuration for automatic Python virtualenv activation with Mise, showing various options for path specification, creation flags, and uv integration.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/python.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\npython = \"3.11\" # [optional] will be used for the venv\n\n[env]\n_.python.venv = \".venv\" # relative to this file's directory\n_.python.venv = \"/root/.venv\" # can be absolute\n_.python.venv = \"{{env.HOME}}/.cache/venv/myproj\" # can use templates\n_.python.venv = { path = \".venv\", create = true } # create the venv if it doesn't exist\n_.python.venv = { path = \".venv\", create = true, python = \"3.10\" } # use a specific python version\n_.python.venv = { path = \".venv\", create = true, python_create_args = [\"--without-pip\"] } # pass args to python -m venv\n_.python.venv = { path = \".venv\", create = true, uv_create_args = [\"--system-site-packages\"] } # pass args to uv venv\n# Install seed packages (pip, setuptools, and wheel) into the virtual environment.\n_.python.venv = { path = \".venv\", create = true, uv_create_args = ['--seed'] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Enter Hook in TOML\nDESCRIPTION: Configuration for executing a script when entering a project directory for the first time.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/hooks.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[hooks]\nenter = \"echo 'I entered the project'\"\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from External File\nDESCRIPTION: Shows how to use the env._.file directive to load environment variables from external dotenv, JSON, or YAML files, allowing for better organization and separation of configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n_.file = '.env'\n```\n\n----------------------------------------\n\nTITLE: Installing Mise in Any CI Provider\nDESCRIPTION: YAML script for installing Mise via curl and running the install command to provision the necessary tools in a CI environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscript: |\n  curl https://mise.run | sh\n  mise install\n```\n\n----------------------------------------\n\nTITLE: Generating Shell Completion Scripts\nDESCRIPTION: Examples showing how to generate and install completion scripts for different shells. The scripts are written to appropriate locations based on shell type. For bash completions, an optional completion library can be included.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/completion.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise completion bash > /etc/bash_completion.d/mise\nmise completion zsh  > /usr/local/share/zsh/site-functions/_mise\nmise completion fish > ~/.config/fish/completions/mise.fish\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex Task with Usage Spec\nDESCRIPTION: Shows how to create a more complex task with usage specifications, including descriptions, flags, and custom completions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/walkthrough.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nset -e\n\n#MISE description=\"Greet a user with a message\"\n#USAGE flag \"-g --greeting <greeting>\" help=\"The greeting word to use\" {\n#USAGE   choices \"hi\" \"hello\" \"hey\"\n#USAGE }\n#USAGE flag \"-u --user <user>\" help=\"The user to greet\"\n#USAGE flag \"--dir <dir>\" help=\"The directory to greet from\" default=\".\"\n#USAGE complete \"dir\" run=\"find . -maxdepth 1 -type d\"\n#USAGE arg \"<message>\" help=\"Greeting message\"\n\necho \"all available options are in the env with the prefix 'usage_'\"\nenv | grep usage_\n\necho \"$usage_greeting, $usage_user! Your message is: $usage_message\"\n```\n\n----------------------------------------\n\nTITLE: JSON Output Format of Tool Versions\nDESCRIPTION: Shows the JSON-formatted output using the --json flag, which includes detailed information about installed tools including their paths and sources.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/ls.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n$ mise ls --json\n{\n  \"node\": [\n    {\n      \"version\": \"20.0.0\",\n      \"install_path\": \"/Users/jdx/.mise/installs/node/20.0.0\",\n      \"source\": {\n        \"type\": \"mise.toml\",\n        \"path\": \"/Users/jdx/mise.toml\"\n      }\n    }\n  ],\n  \"python\": [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node and NPM with mise\nDESCRIPTION: Command to install Node.js and NPM using mise global installation\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/npm.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g node\n```\n\n----------------------------------------\n\nTITLE: PATH After Mise Activate\nDESCRIPTION: Example showing how the PATH environment variable is modified after mise activation, with the Python bin directory added to the beginning of the PATH.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPATH=\"$HOME/.local/share/mise/installs/python/3.13.0/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n```\n\n----------------------------------------\n\nTITLE: Mise global configuration file\nDESCRIPTION: Example of a mise global configuration file in TOML format that specifies Node.js 22 as the default version to use.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nnode = \"22\"\n```\n\n----------------------------------------\n\nTITLE: Querying Tool Information with mise CLI\nDESCRIPTION: Example showing how to use the 'mise tool' command to get information about Node.js installation. The output displays the backend type, installed versions, active version, requested version, configuration source, and tool options.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tool.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise tool node\nBackend:            core\nInstalled Versions: 20.0.0 22.0.0\nActive Version:     20.0.0\nRequested Version:  20\nConfig Source:      ~/.config/mise/mise.toml\nTool Options:       [none]\n```\n\n----------------------------------------\n\nTITLE: Example Preset Usage Command Output\nDESCRIPTION: Terminal output showing the execution of the PDM preset command and its effects, including virtual environment creation and activation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/presets.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd my-project\nmise preset:pdm 3.10\n# [preset:python] $ ~/.config/mise/tasks/preset/python\n# mise WARN  No untrusted config files found.\n# mise ~/my-project/mise.toml tools: pre-commit@4.0.1\n# [preset:pdm] $ ~/.config/mise/tasks/preset/pdm 3.10\n# mise WARN  No untrusted config files found.\n# mise ~/my-project/mise.toml tools: python@3.10.15\n# mise ~/my-project/mise.toml tools: pdm@2.21.0\n# mise creating venv with uv at: ~/my-project/.venv\n# Using CPython 3.10.15 interpreter at: /Users/simon/.local/share/mise/installs/python/3.10.15/bin/python\n# Creating virtual environment at: .venv\n# Activate with: source .venv/bin/activate.fish\n\n~/my-project via 🐍 v3.10.15 (.venv)\n# we are in the virtual environment ^\n```\n\n----------------------------------------\n\nTITLE: Configuring Install Hooks in TOML\nDESCRIPTION: Configuration for executing scripts before and after tool installation, without requiring mise activate.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/hooks.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[hooks]\npreinstall = \"echo 'I am about to install tools'\"\npostinstall = \"echo 'I just installed tools'\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using apk package manager\nDESCRIPTION: This snippet shows how to install Mise on Alpine Linux using the apk package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\napk add mise\n```\n\n----------------------------------------\n\nTITLE: Configuring Mise for Terraform/Opentofu Project Management\nDESCRIPTION: This TOML configuration defines Terraform version, sets up various Terraform tasks like init, plan, apply, destroy, validate, and format. It also configures environment variables from a .env file. The tasks are designed to work with a 'terraform/' subdirectory structure.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/terraform.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nterraform = \"1\"\n\n[tasks.\"terraform:init\"]\ndescription = \"Initializes a Terraform working directory\"\nrun = \"terraform -chdir=terraform init\"\n\n[tasks.\"terraform:plan\"]\ndescription = \"Generates an execution plan for Terraform\"\nrun = \"terraform -chdir=terraform plan\"\n\n[tasks.\"terraform:apply\"]\ndescription = \"Applies the changes required to reach the desired state of the configuration\"\nrun = \"terraform -chdir=terraform apply\"\n\n[tasks.\"terraform:destroy\"]\ndescription = \"Destroy Terraform-managed infrastructure\"\nrun = \"terraform -chdir=terraform destroy\"\n\n[tasks.\"terraform:validate\"]\ndescription = \"Validates the Terraform files\"\nrun = \"terraform -chdir=terraform validate\"\n\n[tasks.\"terraform:format\"]\ndescription = \"Formats the Terraform files\"\nrun = \"terraform -chdir=terraform fmt\"\n\n[tasks.\"terraform:check\"]\ndescription = \"Checks the Terraform files\"\ndepends = [\"terraform:format\", \"terraform:validate\"]\n\n[env]\n_.file = \".env\"\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation Prompt to Tasks\nDESCRIPTION: Demonstrates how to add a confirmation prompt before running a task, useful for destructive or time-consuming operations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.release]\nconfirm = \"Are you sure you want to cut a release?\"\ndescription = 'Cut a new release'\nfile = 'scripts/release.sh'\n```\n\n----------------------------------------\n\nTITLE: Integrating Java with macOS JAVA_HOME\nDESCRIPTION: Commands to make Java installations managed by mise visible to macOS applications that rely on /usr/libexec/java_home for discovering Java runtimes.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/java.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir /Library/Java/JavaVirtualMachines/openjdk-21.jdk\nsudo ln -s ~/.local/share/mise/installs/java/openjdk-21/Contents /Library/Java/JavaVirtualMachines/openjdk-21.jdk/Contents\n```\n\n----------------------------------------\n\nTITLE: Defining a Mise Task for Running Docker Container\nDESCRIPTION: This TOML configuration defines a mise task named 'docker' that runs a Docker container with the latest mise image. It's useful for reproducing issues in a clean environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/docker.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.docker]\nrun = \"docker run --pull=always -it --rm --entrypoint bash jdxcode/mise:latest\"\n```\n\n----------------------------------------\n\nTITLE: Installing mise on Debian/Ubuntu (amd64) via apt\nDESCRIPTION: Script to install mise on Debian/Ubuntu-based systems with amd64 architecture using apt. Sets up the repository and installs mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update -y && sudo apt install -y gpg sudo wget curl\nsudo install -dm 755 /etc/apt/keyrings\nwget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1> /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=amd64] https://mise.jdx.dev/deb stable main\" | sudo tee /etc/apt/sources.list.d/mise.list\nsudo apt update\nsudo apt install -y mise\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Input and Output Sources\nDESCRIPTION: Shows how to specify input sources and output files for a task, used for determining when a task needs to be re-run based on file modifications.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\nrun = \"cargo build\"\nsources = [\"Cargo.toml\", \"src/**/*.rs\"]\noutputs = [\"target/debug/mycli\"]\n```\n\n----------------------------------------\n\nTITLE: Examining project mise configuration file\nDESCRIPTION: Shows the contents of the mise.toml configuration file that defines project-specific tool versions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncat mise.toml\n# [tools]\n# node = \"23\"\n# pnpm = \"10\"\n```\n\n----------------------------------------\n\nTITLE: Trusting Config Files with mise trust Command in Bash\nDESCRIPTION: Examples of using the `mise trust` command to trust specific config files or all config files in the current directory and its parents. It demonstrates how to trust a specific file and how to trust the nearest mise.toml file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/trust.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# trusts ~/some_dir/mise.toml\n$ mise trust ~/some_dir/mise.toml\n\n# trusts mise.toml in the current or parent directory\n$ mise trust\n```\n\n----------------------------------------\n\nTITLE: Generating and Using Git Pre-Commit Hook with mise in Bash\nDESCRIPTION: This snippet demonstrates how to generate a Git pre-commit hook using mise and then use it in a Git commit. The hook is configured to run the 'pre-commit' task when triggered.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate/git-pre-commit.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise generate git-pre-commit --write --task=pre-commit\ngit commit -m \"feat: add new feature\" # runs `mise run pre-commit`\n```\n\n----------------------------------------\n\nTITLE: Installing mise on Windows with scoop\nDESCRIPTION: Command to install mise on Windows using the scoop package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# https://github.com/ScoopInstaller/Main/pull/6374\nscoop install mise\n```\n\n----------------------------------------\n\nTITLE: Sourcing Environment Variables from Bash Scripts\nDESCRIPTION: Shows how to use the env._.source directive to source external bash scripts and import their exported environment variables into mise configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n_.source = \"./script.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing and using Aqua tools with mise in shell\nDESCRIPTION: Example showing how to install and verify the latest version of ripgrep using Aqua backend in mise. This demonstrates the command syntax for installing an Aqua tool globally.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/aqua.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g aqua:BurntSushi/ripgrep\n$ rg --version\nripgrep 14.1.1\n```\n\n----------------------------------------\n\nTITLE: Advanced Usage Spec with Completion\nDESCRIPTION: Demonstrates advanced usage specification including argument completion\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.add-user]\ndescription = \"Add a user\"\nusage = '''\narg \"<user>\" default=\"unknown\"\ncomplete \"user\" run=\"mise run list-users-completion\"\n'''\nrun = 'echo {{arg(name=\"user\")}}'\n\n[tasks.list-users-completion]\nhide = true\nquiet = true\ndescription = \"List users\"\nrun = 'echo \"alice\\nbob\\ncharlie\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Deno Versions with mise CLI\nDESCRIPTION: Commands to install and set global Deno versions using mise. Shows how to install the latest 1.x release or the most recent Deno version globally.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/deno.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g deno@1       # install deno 1.x\nmise use -g deno@latest  # install latest deno\n```\n\n----------------------------------------\n\nTITLE: Running Watchexec with Mise for Development Tasks\nDESCRIPTION: Examples of using Watchexec with the 'mise' tool to watch for file changes and execute development tasks. This includes building projects, watching specific file patterns, and running servers with automatic restarts.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/watch.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ mise watch build\n$ mise watch build --glob src/**/*.rs\n$ mise watch build --clear\n$ mise watch serve --watch src --exts rs --restart\n```\n\n----------------------------------------\n\nTITLE: Activating mise in bash with Homebrew installation\nDESCRIPTION: Command to add mise activation to the bash configuration file when installed via Homebrew. This enables mise to manage the shell environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(mise activate bash)\"' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Using mise where Command with Bash\nDESCRIPTION: Examples of using the 'mise where' command to display installation paths for specific tool versions. The first example shows how to find the latest installed version path with a version prefix, while the second example shows how to find the current active version path.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/where.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Show the latest installed version of node\n# If it is is not installed, errors\n$ mise where node@20\n/home/jdx/.local/share/mise/installs/node/20.0.0\n\n# Show the current, active install directory of node\n# Errors if node is not referenced in any .tool-version file\n$ mise where node\n/home/jdx/.local/share/mise/installs/node/20.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing multiple tools globally with mise\nDESCRIPTION: Demonstrates how to install multiple tools (Terraform, jq, and Go) globally with a single mise command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmise use -g terraform jq go\n# mise jq@1.7.1 ✓ installed\n# mise terraform@1.11.3 ✓ installed\n# mise go@1.24.1 ✓ installed\n# mise ~/.config/mise/config.toml tools: go@1.24.1, jq@1.7.1, terraform@1.11.3\n```\n\n----------------------------------------\n\nTITLE: Executing GitHub Action Generation with mise CLI\nDESCRIPTION: Example showing how to generate a GitHub Action workflow file, commit it, and trigger the workflow. The workflow will run the specified mise task (ci in this example) when changes are pushed to the repository.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate/github-action.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise generate github-action --write --task=ci\ngit commit -m \"feat: add new feature\"\ngit push # runs `mise run ci` on GitHub\n```\n\n----------------------------------------\n\nTITLE: Listing all installed tools with mise\nDESCRIPTION: Demonstrates how to list all tools installed and managed by mise, showing their versions and sources.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nmise ls\n# Tool       Version  Source                      Requested\n# go         1.24.1   ~/.config/mise/config.toml  latest\n# jq         1.7.1    ~/.config/mise/config.toml  latest\n# node       22.14.0  ~/.config/mise/config.toml  lts\n# terraform  1.11.3   ~/.config/mise/config.toml  latest\n```\n\n----------------------------------------\n\nTITLE: Activating mise in zsh with Homebrew installation\nDESCRIPTION: Command to add mise activation to the zsh configuration file when installed via Homebrew. This enables mise to manage the shell environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(mise activate zsh)\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Using Latest Version of GitVersion.Tool with mise\nDESCRIPTION: This example demonstrates how to use the latest version of GitVersion.Tool with mise and how to check the installed version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/dotnet.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g dotnet:GitVersion.Tool\n$ dotnet-gitversion /version\n6.1.0+Branch.main.Sha.8856e3041dbb768118a55a31ad4e465ae70c6767\n```\n\n----------------------------------------\n\nTITLE: Using Latest Stable Swift Version with mise\nDESCRIPTION: This snippet demonstrates how to use mise to set the global Swift version to the latest stable release and verify the installation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/swift.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g swift\nswift --version\n```\n\n----------------------------------------\n\nTITLE: Creating .ruby-version File\nDESCRIPTION: Command to generate a .ruby-version file with the current Ruby version, which Mise can read for auto-switching between Ruby versions in a project directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/ruby.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nruby -v > .ruby-version\n```\n\n----------------------------------------\n\nTITLE: Creating a New Task with Dependencies using mise tasks add\nDESCRIPTION: This example demonstrates how to add a new task named 'pre-commit' with dependencies on 'test' and 'render' tasks. The task execution is a simple echo command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks/add.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise task add pre-commit --depends \"test\" --depends \"render\" -- echo pre-commit\n```\n\n----------------------------------------\n\nTITLE: Configuration Format for Ruby Gems in mise\nDESCRIPTION: Example TOML configuration showing how gem tool versions are stored in the mise config file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/gem.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"gem:rubocop\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Generating and Using Mise Task Stubs in Bash\nDESCRIPTION: This snippet demonstrates how to add a Mise task, generate task stubs, and execute the generated stub. It creates a 'test' task that echoes a message, generates stubs, and then runs the 'test' stub.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate/task-stubs.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise task add test -- echo 'running tests'\n$ mise generate task-stubs\n$ ./bin/test\nrunning tests\n```\n\n----------------------------------------\n\nTITLE: Basic Version Listing with mise ls\nDESCRIPTION: Shows the basic usage of mise ls command displaying tool versions with their sources and latest available versions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/ls.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise ls\nnode    20.0.0 ~/src/myapp/.tool-versions latest\npython  3.11.0 ~/.tool-versions           3.10\npython  3.10.0\n```\n\n----------------------------------------\n\nTITLE: Activating Mise in PowerShell\nDESCRIPTION: This snippet demonstrates how to activate Mise in PowerShell by adding an activation command to the PowerShell profile.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_21\n\nLANGUAGE: powershell\nCODE:\n```\necho 'mise activate pwsh | Out-String | Invoke-Expression' >> $HOME\\Documents\\PowerShell\\Microsoft.PowerShell_profile.ps1\n```\n\n----------------------------------------\n\nTITLE: Configuring Node.js version in mise.toml (TOML)\nDESCRIPTION: TOML configuration to specify the Node.js version to be used in the project.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/nodejs.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nnode = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Activating mise Environment in Fish Shell\nDESCRIPTION: Example of how to use the `mise env` command to activate the mise environment in the Fish shell. The command output is piped to the `source` command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/env.md#2025-04-17_snippet_1\n\nLANGUAGE: fish\nCODE:\n```\nmise env -s fish | source\n```\n\n----------------------------------------\n\nTITLE: Using Latest Beta Rust Version with mise\nDESCRIPTION: This snippet shows how to use the latest beta version of Rust with mise and run a cargo build command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/rust.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g rust@beta\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Modifying PATH in mise.toml\nDESCRIPTION: Shows how to add a directory to the PATH environment variable using mise.toml configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/walkthrough.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n_.path = \"./node_modules/.bin\"\n```\n\n----------------------------------------\n\nTITLE: Loading Variables from File in mise.toml\nDESCRIPTION: Demonstrates how to load variables from an external file, similar to the [env] section. This allows for storing variables in separate files for better organization or security.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n[vars]\n_.file = \".env\"\n```\n\n----------------------------------------\n\nTITLE: Mise Tool Configuration\nDESCRIPTION: TOML configuration for setting eza as the latest version in mise config file\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"cargo:eza\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Setting Task Execution Directory\nDESCRIPTION: Demonstrates how to set the directory from which a task should be executed, commonly used to run tasks from the user's current directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.test]\ndir = \"{{cwd}}\"\nrun = \"cargo test\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Version with mise Command Examples\nDESCRIPTION: Examples demonstrating how to use the 'mise latest' command to get the latest version of Node.js. Shows how to specify a major version prefix or get the overall latest stable version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/latest.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise latest node@20  # get the latest version of node 20\n20.0.0\n\n$ mise latest node     # get the latest stable version of node\n20.0.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Task Dependencies with mise CLI\nDESCRIPTION: Examples of using the 'mise tasks deps' command to show dependencies between tasks in different formats. This includes showing all task dependencies, filtering specific tasks, and outputting in DOT format for graph visualization.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks/deps.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Show dependencies for all tasks\n$ mise tasks deps\n\n# Show dependencies for the \"lint\", \"test\" and \"check\" tasks\n$ mise tasks deps lint test check\n\n# Show dependencies in DOT format\n$ mise tasks deps --dot\n```\n\n----------------------------------------\n\nTITLE: Configuring Leave Hook in TOML\nDESCRIPTION: Configuration for executing a script when leaving a project directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/hooks.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[hooks]\nleave = \"echo 'I left the project'\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with Mise\nDESCRIPTION: Demonstrates how to set environment variables using Mise's CLI and mise.toml configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/walkthrough.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmise set MY_VAR=123\necho $MY_VAR\n# 123\n```\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nMY_VAR = \"123\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Task-Specific Tools\nDESCRIPTION: Shows how to specify tools to be installed and activated before running a task, useful for tasks requiring specific tool versions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\ntools.rust = \"1.50.0\"\nrun = \"cargo build\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby with mise\nDESCRIPTION: Command to install Ruby globally using the mise tool, which is a prerequisite for using the gem backend.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/gem.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g ruby\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Version with mise unuse Command\nDESCRIPTION: This example demonstrates how to use the 'mise unuse' command to uninstall a specific version of a tool. It removes Node.js version 18.0.0 from the local configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/unuse.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# will uninstall specific version\n$ mise unuse node@18.0.0\n```\n\n----------------------------------------\n\nTITLE: Named Option Definition\nDESCRIPTION: Example of defining a named option for a cargo test command\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_12\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.test]\nrun = 'cargo test {{option(name=\"file\")}}'\n```\n\n----------------------------------------\n\nTITLE: Using mise settings ls Command in Bash\nDESCRIPTION: Examples showing how to use the 'mise settings ls' command to view all settings or filter for specific setting categories. The first example shows listing all settings, while the second demonstrates filtering for Python-specific settings.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/settings/ls.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise settings ls\nidiomatic_version_file = false\n...\n\n$ mise settings ls python\ndefault_packages_file = \"~/.default-python-packages\"\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Aqua tools in mise configuration file\nDESCRIPTION: Example of the TOML configuration that defines an Aqua tool in the mise configuration file. This shows how tools are referenced in the config after installation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/aqua.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"aqua:BurntSushi/ripgrep\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Mise Configuration for Pipx Tool in Config File\nDESCRIPTION: Example configuration in mise's config.toml file for setting Black as a globally available tool using the pipx backend.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/pipx.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"pipx:psf/black\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Querying Binary Paths in Mise CLI\nDESCRIPTION: Examples demonstrating how to use the 'mise which' command to show binary paths, plugin names, and versions of installed tools. Shows different output formats based on command flags.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/which.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise which node\n/home/username/.local/share/mise/installs/node/20.0.0/bin/node\n\n$ mise which node --plugin\nnode\n\n$ mise which node --version\n20.0.0\n```\n\n----------------------------------------\n\nTITLE: Enabling Gradle Toolchains Detection for mise Java Installations\nDESCRIPTION: Command to create a symbolic link that allows Gradle to detect Java installations managed by mise, by leveraging the similarity to asdf's directory layout.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/java.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p ~/.asdf/installs/ && ln -s ~/.local/share/mise/installs/java ~/.asdf/installs/\n```\n\n----------------------------------------\n\nTITLE: Running mise doctor Command\nDESCRIPTION: Example showing how to run the mise doctor command which performs a system check and displays warnings about missing components like plugins.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/doctor.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise doctor\n[WARN] plugin node is not installed\n```\n\n----------------------------------------\n\nTITLE: Adding mise shims to PATH in Windows PowerShell\nDESCRIPTION: PowerShell commands to add mise shims directory to the user PATH environment variable on Windows. This enables running tools managed by mise directly.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\n$shimPath = \"$env:USERPROFILE\\AppData\\Local\\mise\\shims\"\n$currentPath = [Environment]::GetEnvironmentVariable('Path', 'User')\n$newPath = $currentPath + \";\" + $shimPath\n[Environment]::SetEnvironmentVariable('Path', $newPath, 'User')\n```\n\n----------------------------------------\n\nTITLE: Activating mise in fish with other package managers\nDESCRIPTION: Command to add mise activation to the fish configuration file when installed via package managers other than curl or Homebrew.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\necho 'mise activate fish | source' >> ~/.config/fish/config.fish\n```\n\n----------------------------------------\n\nTITLE: Installing Community Plugins in Paranoid Mode\nDESCRIPTION: This snippet shows how to install a community plugin (shfmt) in Paranoid mode. It requires specifying the full git repository URL instead of just the plugin name.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/paranoid.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmise plugin install shfmt https://github.com/luizm/asdf-shfmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Task Directory\nDESCRIPTION: Demonstrates how to change the default directory for all tasks in a configuration file using the task_config section.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[task_config]\ndir = \"{{cwd}}\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Checking Eza Version\nDESCRIPTION: Commands to install eza package using mise and verify its version\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g cargo:eza\n$ eza --version\neza - A modern, maintained replacement for ls\nv0.17.1 [+git]\nhttps://github.com/eza-community/eza\n```\n\n----------------------------------------\n\nTITLE: Default Go Packages Configuration Example\nDESCRIPTION: Example of a $HOME/.default-go-packages file that lists packages to be automatically installed after installing a new Go version. Each package is listed on a separate line.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/go.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngithub.com/Dreamacro/clash # allows comments\ngithub.com/jesseduffield/lazygit\n```\n\n----------------------------------------\n\nTITLE: Running Tools Through Mise in CI\nDESCRIPTION: YAML script showing how to run tools installed by Mise using the 'mise x' command to ensure the correct versions are used.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nscript: |\n  mise x -- npm test\n```\n\n----------------------------------------\n\nTITLE: Setting mise Configuration Values\nDESCRIPTION: Examples of using the mise config set command to configure different settings including Python version, environment variables, and tool configurations. Shows various use cases with different data types.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/config/set.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise config set tools.python 3.12\n$ mise config set settings.always_keep_download true\n$ mise config set env.TEST_ENV_VAR ABC\n$ mise config set settings.disable_tools --type list node,rust\n\n# Type for `settings` is inferred\n$ mise config set settings.jobs 4\n```\n\n----------------------------------------\n\nTITLE: Using mise in direnv configuration in Shell\nDESCRIPTION: This snippet shows how to use the previously generated use_mise function in a .envrc file. It allows direnv to call mise for exporting environment variables.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/direnv.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nuse mise\n```\n\n----------------------------------------\n\nTITLE: Using Automatic Output Tracking\nDESCRIPTION: Demonstrates the use of auto output tracking, which is useful when you want mise run to execute when sources change but don't want to manually specify output files.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\nrun = \"cargo build\"\nsources = [\"Cargo.toml\", \"src/**/*.rs\"]\noutputs = { auto = true }\n```\n\n----------------------------------------\n\nTITLE: Setting project-specific tool versions\nDESCRIPTION: Shows how to configure project-specific versions of Node.js and pnpm using mise in a project directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncd myproj\nmise use node@23 pnpm@10\n# mise node@23.10.0 ✓ installed\n# mise pnpm@10.7.0 ✓ installed\n```\n\n----------------------------------------\n\nTITLE: Using Node and Prettier via Mise Shims\nDESCRIPTION: Example showing how to install Node.js and Prettier globally with mise, and how to run these tools directly from the shims directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g node@20\nnpm install -g prettier@3.1.0\n\n~/.local/share/mise/shims/node -v\n# v20.0.0\n~/.local/share/mise/shims/prettier -v\n# 3.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Tool Aliases in TOML Configuration\nDESCRIPTION: Example of how to define aliases in the mise configuration file. This snippet shows how to create a 'lts' alias for Node.js that points to version 22.0.0.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/alias/ls.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[alias.node.versions]\nlts = \"22.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Version from Global Config with mise unuse Command\nDESCRIPTION: This example shows how to use the 'mise unuse' command with the global flag to remove a specific version of a tool from the global configuration. It removes Node.js version 18.0.0 from the global config.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/unuse.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# will uninstall specific version from global config\n$ mise unuse -g node@18.0.0\n```\n\n----------------------------------------\n\nTITLE: Verifying global Node.js installation\nDESCRIPTION: Demonstrates how to verify that Node.js is now available globally after using mise to set it as the global default.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n# v22.14.0\n```\n\n----------------------------------------\n\nTITLE: Executing mise test-tool Command in Shell\nDESCRIPTION: This example demonstrates how to use the 'mise test-tool' command to test the installation and execution of the 'ripgrep' tool.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/test-tool.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise test-tool ripgrep\n```\n\n----------------------------------------\n\nTITLE: Specifying Matching Pattern for Ubi Downloads\nDESCRIPTION: Examples showing how to specify matching patterns for Ubi packages to select the correct tarball.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nmise use ubi:tamasfe/taplo[matching=full]\n# or with ubi directly\nubi -p tamasfe/taplo -m full\n```\n\n----------------------------------------\n\nTITLE: Auto-setting Environment Variables with Activated Mise\nDESCRIPTION: Explains how environment variables are automatically set in the current shell session when mise is activated and you navigate to a directory with a configured mise.toml file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd /path/to/project\nmise set NODE_ENV=production\ncat mise.toml\n# [env]\n# NODE_ENV = 'production'\n\necho $NODE_ENV\n# production\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Configuration with Bootstrap Script\nDESCRIPTION: GitLab CI configuration that uses the bootstrap script approach with appropriate caching of Mise installations for improved performance.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n.mise-cache: &mise-cache\n  key:\n    prefix: mise-\n    files: [\"mise.toml\", \"./bin/mise\"]\n  paths:\n    - .mise/installs\n    - .mise/mise-2025.1.3\n\nbuild-job:\n  stage: build\n  image: my-debian-slim-image # Use the image you created\n  cache:\n    - <<: *mise-cache\n      policy: pull-push\n  script:\n    - ./bin/mise install\n    - ./bin/mise exec --command 'npm build'\n```\n\n----------------------------------------\n\nTITLE: Configuring mise in RC Files with hook-env\nDESCRIPTION: Setup for using mise in shell rc files using the hook-env approach. This method activates mise for the shell and sets up environment hooks.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\neval \"$(mise activate zsh)\"\neval \"$(mise hook-env -s zsh)\"\nnode some_script.js\n```\n\n----------------------------------------\n\nTITLE: Reverting to global tool versions\nDESCRIPTION: Demonstrates how leaving the project directory automatically reverts to using the globally configured tool versions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncd ..\nnode -v\n# v22.14.0\n```\n\n----------------------------------------\n\nTITLE: Listing Tasks with mise\nDESCRIPTION: Example command showing how to list all tasks configured in mise using the tasks ls subcommand.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise tasks ls\n```\n\n----------------------------------------\n\nTITLE: Adding Mise Shims to PATH\nDESCRIPTION: Example showing how to manually add the mise shims directory to the PATH environment variable to make all dev tools accessible.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport PATH=\"$HOME/.local/share/mise/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Aliases in TOML\nDESCRIPTION: Demonstrates how to configure tool backend aliases in Mise's config.toml file. This allows mapping standard tool names to custom implementations or sources.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/aliases.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[alias]\nnode = 'asdf:company/our-custom-node' # shorthand for https://github.com/company/our-custom-node\nerlang = 'asdf:https://github.com/company/our-custom-erlang'\n```\n\n----------------------------------------\n\nTITLE: Verifying Terraform installation\nDESCRIPTION: Shows how to check the installed version of Terraform after using mise to install it globally.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nterraform -v\n# Terraform v1.11.3\n```\n\n----------------------------------------\n\nTITLE: Setting Vfox as Default Plugin Backend in mise\nDESCRIPTION: Commands to configure mise to use Vfox as the default plugin backend instead of asdf. This is particularly useful on Windows systems.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/vfox.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmise settings asdf=false\nmise settings vfox=true\n```\n\n----------------------------------------\n\nTITLE: Filtering Versions with Regular Expressions\nDESCRIPTION: Example showing how to filter available versions using regular expressions to exclude unrelated releases.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nmise use 'ubi:cargo-bins/cargo-binstall[tag_regex=^\\d+\\.]'\n```\n\n----------------------------------------\n\nTITLE: Adding Node modules binaries to PATH (TOML)\nDESCRIPTION: TOML configuration to add node_modules/.bin to the PATH, allowing direct use of installed CLI tools without npx.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/nodejs.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n_.path = ['{{config_root}}/node_modules/.bin']\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Python Versions Simultaneously with Mise\nDESCRIPTION: Example of using multiple Python versions at the same time with Mise by setting global versions and checking which versions are active.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/python.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g python@3.10 python@3.11\n$ python -V\n3.10.0\n$ python3.11 -V\n3.11.0\n```\n\n----------------------------------------\n\nTITLE: Mise Sync Subcommands for Different Languages\nDESCRIPTION: Lists the available subcommands for synchronizing different programming languages including Node.js, Python, and Ruby, with their respective flags and options.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/sync.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`mise sync node [FLAGS]`](/cli/sync/node.md)\n- [`mise sync python [--pyenv] [--uv]`](/cli/sync/python.md)\n- [`mise sync ruby [--brew]`](/cli/sync/ruby.md)\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Examples for mise tasks edit Command\nDESCRIPTION: Demonstrates typical usage of the mise tasks edit command for editing build and test tasks using the system's default editor.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks/edit.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise tasks edit build\nmise tasks edit test\n```\n\n----------------------------------------\n\nTITLE: Configuring Mise for C++ Project Management with CMake\nDESCRIPTION: A comprehensive TOML configuration that defines the project environment, required tools (CMake and make), and common development tasks including build, clean, and run commands. It sets up project variables and build directory paths, while providing aliases for frequent operations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/cpp.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nmin_version = \"2024.9.5\"\n\n[env]\n# Project information\nPROJECT_NAME = \"{{ config_root | basename }}\"\n\n# Build directory\nBUILD_DIR = \"{{ config_root }}/build\"\n\n[tools]\n# Install CMake and make\ncmake = \"latest\"\nmake = \"latest\"\n\n[tasks.configure]\ndescription = \"Configure the project\"\nrun = \"mkdir -p $BUILD_DIR && cd $BUILD_DIR && cmake ..\"\n\n[tasks.build]\ndescription = \"Build the project\"\nalias = \"b\"\nrun = \"cd $BUILD_DIR && make\"\n\n[tasks.clean]\ndescription = \"Clean the build directory\"\nalias = \"c\"\nrun = \"rm -rf $BUILD_DIR\"\n\n[tasks.run]\nalias = \"r\"\ndescription = \"Run the application\"\nrun = \"$BUILD_DIR/bin/$PROJECT_NAME\"\n\n[tasks.info]\ndescription = \"Print project information\"\nrun = '''\necho \"Project: $PROJECT_NAME\"\necho \"Build Directory: $BUILD_DIR\"\n'''\n```\n\n----------------------------------------\n\nTITLE: Configuring CD Hook in TOML\nDESCRIPTION: Configuration for executing a script when changing directories within a Mise activation session.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/hooks.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[hooks]\ncd = \"echo 'I changed directories'\"\n```\n\n----------------------------------------\n\nTITLE: Installing mise on Fedora via dnf\nDESCRIPTION: Commands to install mise on Fedora-based systems using dnf. Adds the mise repository and installs the package.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install -y dnf-plugins-core\nsudo dnf config-manager addrepo --from-repofile=https://mise.jdx.dev/rpm/mise.repo\nsudo dnf install -y mise\n```\n\n----------------------------------------\n\nTITLE: Function Usage in Alias Configuration\nDESCRIPTION: Example of using the exec function in a tool alias configuration to get current node version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/templates.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[alias.node.versions]\ncurrent = \"{{ exec(command='node --version') }}\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Tool and Version for bin-paths Command\nDESCRIPTION: Example of how to filter bin-paths results for a specific tool and version. This format allows targeting a specific runtime installation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/bin-paths.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nruby@3\n```\n\n----------------------------------------\n\nTITLE: Specifying Executable Name for Ubi Packages\nDESCRIPTION: Examples showing how to specify the executable name when it differs from the repository name.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nmise use ubi:BurntSushi/ripgrep[exe=rg]\n# or with ubi directly\nubi -p BurntSushi/ripgrep -e rg\n```\n\n----------------------------------------\n\nTITLE: Setting Post-Execution Dependencies\nDESCRIPTION: Demonstrates the use of depends_post to run tasks after the main task and its dependencies complete.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.lint]\nrun = \"eslint .\"\ndepends_post = [\"postlint\"]\n[tasks.postlint]\nrun = \"echo 'linting complete'\"\n```\n\n----------------------------------------\n\nTITLE: Running Terraform with mise exec\nDESCRIPTION: Demonstrates how to execute Terraform using mise exec, which allows running a specific version without installing it globally.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmise exec terraform -- terraform -v\n# mise terraform@1.11.3 ✓ installed\n# Terraform v1.11.3\n```\n\n----------------------------------------\n\nTITLE: Activating mise in fish with curl installation\nDESCRIPTION: Command to add mise activation to the fish configuration file when installed via curl. This enables mise to manage the shell environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\necho '~/.local/bin/mise activate fish | source' >> ~/.config/fish/config.fish\n```\n\n----------------------------------------\n\nTITLE: Constructing File Paths in TOML Configuration\nDESCRIPTION: Demonstrates how to use split(), concat(), and join_path filters to construct a file path in a Mise TOML configuration file. This example creates a PROJECT_CONFIG environment variable by joining paths.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/templates.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nPROJECT_CONFIG = \"{{ config_root | concat(with='bar.txt') | join_path }}\"\n```\n\n----------------------------------------\n\nTITLE: Adding mise shims to PATH in Bash\nDESCRIPTION: This snippet demonstrates how to add mise shims to PATH in the Bash shell profile.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(mise activate bash --shims)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Shell Hook in TOML\nDESCRIPTION: Configuration for executing shell-specific scripts when entering a directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/hooks.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[hooks.enter]\nshell = \"bash\"\nscript = \"source completions.sh\"\n```\n\n----------------------------------------\n\nTITLE: Executing mise fmt Command in Shell\nDESCRIPTION: This snippet demonstrates how to use the 'mise fmt' command to format mise.toml files. The command sorts keys and cleans up whitespace in the configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/fmt.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise fmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Xcode for mise integration\nDESCRIPTION: This shell script demonstrates how to activate mise tools in an Xcode build phase script.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\neval \"$($HOME/.local/share/mise/bin/mise activate -C $SRCROOT bash --shims)\"\n\nswiftlint\n```\n\n----------------------------------------\n\nTITLE: Installing and Using SPM Package with mise\nDESCRIPTION: Demonstrates how to install the latest version of 'tuist' using mise with SPM backend and view its help information. The package is installed globally and made available on the PATH.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/spm.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g spm:tuist/tuist\n$ tuist --help\nOVERVIEW: Generate, build and test your Xcode projects.\n\nUSAGE: tuist <subcommand>\n...\n```\n\n----------------------------------------\n\nTITLE: Cargo Bin Selection Configuration\nDESCRIPTION: TOML configuration for specifying the binary name when installing from a Git repository\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"cargo:https://github.com/username/demo\" = { version = \"tag:v1.0.0\", bin = \"demo\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in TOML Configuration\nDESCRIPTION: Shows how to define a build task in mise.toml with run command, source files tracking, and output specification\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks/run.md#2025-04-17_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\nrun = \"npm run build\"\nsources = [\"src/**/*.ts\"]\noutputs = [\"dist/**/*.js\"]\n```\n\n----------------------------------------\n\nTITLE: Generating Mise Bootstrap Script\nDESCRIPTION: Shell command to generate a bootstrap script that can be committed and used to install Mise in CI environments without relying on curl.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmise generate bootstrap -l -w\n```\n\n----------------------------------------\n\nTITLE: Activating mise in bash with other package managers\nDESCRIPTION: Command to add mise activation to the bash configuration file when installed via package managers other than curl or Homebrew.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(mise activate bash)\"' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Configuring mise in RC Files with shims\nDESCRIPTION: Alternative setup for using mise in shell rc files using the shims approach. This method ensures proper tool availability through shims before activating mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\neval \"$(mise activate zsh --shims)\" # should be first\neval \"$(mise activate zsh)\"\nnode some_script.js\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mise Activation in Fish\nDESCRIPTION: Instructions for setting up both shims and PATH activation in Fish shell configuration files.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\necho 'mise activate fish --shims | source' >> ~/.config/fish/config.fish\necho 'mise activate fish | source' >> ~/.config/fish/fish.config\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Variables with mise hook-env in Shell\nDESCRIPTION: This snippet demonstrates how mise updates environment variables like JAVA_HOME and PATH when changing Java versions. It shows the output of 'mise hook-env' when switching from Java 17 to 18.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/faq.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport JAVA_HOME=$HOME/.local/share/installs/java/18\nexport PATH=$HOME/.local/share/installs/java/18/bin:$PATH\n```\n\n----------------------------------------\n\nTITLE: Verifying Go installation\nDESCRIPTION: Shows how to check the installed version of Go after using mise to install it globally.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngo version\n# go version go1.24.1 linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring File Tasks with MISE Comments\nDESCRIPTION: Shows how to provide additional configuration for file tasks using MISE comments at the top of the file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/file-tasks.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#MISE description=\"Build the CLI\"\n#MISE alias=\"b\"\n#MISE sources=[\"Cargo.toml\", \"src/**/*.rs\"]\n#MISE outputs=[\"target/debug/mycli\"]\n#MISE env={RUST_BACKTRACE = \"1\"}\n#MISE depends=[\"lint\", \"test\"]\n```\n\n----------------------------------------\n\nTITLE: Shell activation examples for different shell types\nDESCRIPTION: Examples of how to activate mise in different shell environments including bash, zsh, fish, xonsh, and PowerShell. Each shell requires a slightly different syntax for evaluation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/activate.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(mise activate bash)\"\neval \"$(mise activate zsh)\"\nmise activate fish | source\nexecx($(mise activate xonsh))\n(&mise activate pwsh) | Out-String | Invoke-Expression\n```\n\n----------------------------------------\n\nTITLE: Syncing Node.js Versions from Homebrew Example\nDESCRIPTION: Shows how to install Node.js versions via Homebrew and sync them into mise for version management. Demonstrates installing multiple Node.js versions and setting a global version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/sync/node.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install node@18 node@20\nmise sync node --brew\nmise use -g node@18 - uses Homebrew-provided node\n```\n\n----------------------------------------\n\nTITLE: Extracting All Files from Ubi Packages\nDESCRIPTION: Configuration example showing how to extract all files from a package instead of just the binary.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:helix-editor/helix\" = { version = \"latest\", extract_all = \"true\" }\n```\n\n----------------------------------------\n\nTITLE: Using the mise version command in Bash\nDESCRIPTION: Various ways to invoke the mise version command to display version information including version number, OS, architecture, and build date. The command will also warn if the current version is outdated.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/version.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise version\nmise --version\nmise -v\nmise -V\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Task Scripts\nDESCRIPTION: Shows how to define a task as a standalone bash script in the .mise/tasks directory. The name of the script becomes the name of the task that can be invoked with mise run.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/run.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Activating mise in zsh with other package managers\nDESCRIPTION: Command to add mise activation to the zsh configuration file when installed via package managers other than curl or Homebrew.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(mise activate zsh)\"' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Implementing a Rust CLI Build Task with Arguments\nDESCRIPTION: Advanced example of a file task for building a Rust CLI, demonstrating usage of the 'usage' spec for argument parsing and autocompletion.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/file-tasks.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\nset -e\n\n#USAGE flag \"-c --clean\" help=\"Clean the build directory before building\"\n#USAGE flag \"-p --profile <profile>\" help=\"Build with the specified profile\" {\n#USAGE   choices \"debug\" \"release\"\n#USAGE }\n#USAGE flag \"-u --user <user>\" help=\"The user to build for\"\n#USAGE complete \"user\" run=\"mycli users\"\n#USAGE arg \"<target>\" help=\"The target to build\"\n\nif [ \"$usage_clean\" = \"true\" ]; then\n  cargo clean\nfi\n\ncargo build --profile \"${usage_profile:-debug}\" --target \"$usage_target\"\n```\n\n----------------------------------------\n\nTITLE: Using shims instead of PATH modification\nDESCRIPTION: Example of what using the --shims flag effectively does. It adds the mise shims directory to the PATH instead of modifying the PATH directly.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/activate.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPATH=\"$HOME/.local/share/mise/shims:$PATH\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Usage Specifications\nDESCRIPTION: Demonstrates how to add more advanced usage specifications to a task, allowing for custom arguments and descriptions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.test]\nusage = '''\narg \"file\" description=\"The file to test\" default=\"src/main.rs\"\n'''\nrun = 'cargo test {{arg(name=\"file\")}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Components in mise.toml\nDESCRIPTION: This snippet shows how to specify Rust components to install in the mise.toml configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/rust.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"rust\" = { version = \"1.83.0\", components = \"rust-src,llvm-tools\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using MacPorts\nDESCRIPTION: This snippet demonstrates how to install Mise using the MacPorts package manager on macOS.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo port install mise\n```\n\n----------------------------------------\n\nTITLE: Executing mise settings unset command in Bash\nDESCRIPTION: This snippet demonstrates how to use the 'mise settings unset' command to remove a setting from the mise configuration. It specifically shows removing the 'idiomatic_version_file' setting.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/settings/unset.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise settings unset idiomatic_version_file\n```\n\n----------------------------------------\n\nTITLE: Configuring mise to Use uv Virtual Environment\nDESCRIPTION: This TOML configuration enables mise to use the virtual environment created by uv by setting the python.uv_venv_auto setting to true.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/python.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[settings]\npython.uv_venv_auto = true\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Shell Script Task\nDESCRIPTION: Example of creating a build task as a standalone shell script in the mise-tasks directory. Shows how to include task description using MISE comment and execute cargo build command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/index.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n#!/usr/bin/env bash\n#MISE description=\"Build the CLI\"\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Latest Stable Elixir Version with mise\nDESCRIPTION: This command installs and activates the latest stable version of Elixir globally. Note that Erlang must be installed as a prerequisite for Elixir to function properly.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/elixir.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g erlang elixir\n```\n\n----------------------------------------\n\nTITLE: Installing Free-Threaded Python with Mise\nDESCRIPTION: Commands to install free-threaded Python using either precompiled binaries or python-build with Mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/python.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nMISE_PYTHON_COMPILE=0 MISE_PYTHON_PRECOMPILED_FLAVOR=freethreaded+pgo-full mise install python\n```\n\n----------------------------------------\n\nTITLE: Activating Mise in Nushell\nDESCRIPTION: This snippet shows how to activate Mise in Nushell by appending activation commands to the Nushell configuration files.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_22\n\nLANGUAGE: nushell\nCODE:\n```\n'\nlet mise_path = $nu.default-config-dir | path join mise.nu\n^mise activate nu | save $mise_path --force\n' | save $nu.env-path --append\n\"\\nuse ($nu.default-config-dir | path join mise.nu)\" | save $nu.config-path --append\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Tools with Ubi Backend in mise\nDESCRIPTION: Example showing how to install and use the goreleaser tool using the Ubi backend with mise, and how the version gets stored in the configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g ubi:goreleaser/goreleaser\n$ goreleaser --version\n1.25.1\n```\n\n----------------------------------------\n\nTITLE: Basic Argument Passing in mise Tasks\nDESCRIPTION: Demonstrates default argument passing behavior where arguments are passed to the last script in the run array\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.test]\nrun = ['cargo test', './scripts/test-e2e.sh']\n```\n\n----------------------------------------\n\nTITLE: Setting Rust Profile in mise.toml\nDESCRIPTION: This snippet demonstrates how to set the Rust profile to 'minimal' in the mise.toml configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/rust.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"rust\" = { version = \"1.83.0\", profile = \"minimal\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using pacman package manager\nDESCRIPTION: This snippet shows how to install Mise on Arch Linux using the pacman package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo pacman -S mise\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Wait Conditions\nDESCRIPTION: Shows how to use wait_for to make a task wait for other tasks to complete before running, without adding them as dependencies.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.lint]\nwait_for = [\"render\"] # creates some js files, so if it's running, wait for it to finish\nrun = \"eslint .\"\n```\n\n----------------------------------------\n\nTITLE: Setting Task-Specific Environment Variables\nDESCRIPTION: Demonstrates how to set environment variables specific to a task, which are not passed to dependent tasks.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.test]\nenv.TEST_ENV_VAR = \"ABC\"\nrun = [\n    \"echo $TEST_ENV_VAR\",\n    \"mise run some-other-task\", # running tasks this will _will_ have TEST_ENV_VAR set of course\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Version Aliases in TOML\nDESCRIPTION: Shows how to create custom version aliases for tools in the Mise configuration file, allowing for human-readable version names.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/aliases.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[alias.node.versions]\nmy_custom_20 = '20'\n```\n\n----------------------------------------\n\nTITLE: Installing Zig Versions with mise\nDESCRIPTION: This snippet demonstrates various commands to install different versions of Zig using mise, including stable releases, latest versions, nightly builds, and specific dev versions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/zig.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g zig@0.13     # install zig 0.13.x\nmise use -g zig@latest  # install latest zig release\nmise use -g zig@ref:master # install latest nightly from master\nmise use -g zig@ref:mach-latest # install latest nominated zig\nmise use -g zig@0.14.0-dev.2577+271452d22 # install dev version\n```\n\n----------------------------------------\n\nTITLE: Enabling Mise Completion for Zsh Shell\nDESCRIPTION: This snippet demonstrates how to set up Mise completion for Zsh shell. It creates a directory for site-functions if it doesn't exist and generates the completion script.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\n# if you installed zsh with `apt-get` for example, this will work:\nmkdir -p /usr/local/share/zsh/site-functions\nmise completion zsh  > /usr/local/share/zsh/site-functions/_mise\n```\n\n----------------------------------------\n\nTITLE: Executing 'mise alias get' Command in Bash\nDESCRIPTION: This example demonstrates how to use the 'mise alias get' command to retrieve the value of an alias for a specific plugin. In this case, it shows the Node.js version associated with the 'lts-hydrogen' alias.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/alias/get.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise alias get node lts-hydrogen\n20.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Java from Different Vendors with mise\nDESCRIPTION: Commands to install Java distributions from different vendors including Temurin, Zulu, and Amazon Corretto.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/java.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g java@temurin-21\nmise use -g java@zulu-21\nmise use -g java@corretto-21\n```\n\n----------------------------------------\n\nTITLE: Template-based Argument Configuration\nDESCRIPTION: Shows how to use templates to explicitly define argument passing behavior for different commands\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.test]\nrun = [\n    'cargo test {{arg(name=\"cargo_test_args\", var=true)}}',\n    './scripts/test-e2e.sh {{option(name=\"e2e_args\")}}',\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode launch.json for mise\nDESCRIPTION: This JSON configuration for VSCode's launch.json uses mise exec to run Node.js programs.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Launch Program\",\n      \"program\": \"${file}\",\n      \"args\": [],\n      \"osx\": {\n        \"runtimeExecutable\": \"mise\"\n      },\n      \"linux\": {\n        \"runtimeExecutable\": \"mise\"\n      },\n      \"runtimeArgs\": [\"exec\", \"--\", \"node\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Plugin Repository Configuration in TOML\nDESCRIPTION: Shows how to configure custom plugin repository URLs for specific tools, including support for specific git references.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[plugins]\nelixir = \"https://github.com/my-org/mise-elixir.git\"\nnode = \"https://github.com/my-org/mise-node.git#DEADBEEF\" # supports specific gitref\n```\n\n----------------------------------------\n\nTITLE: Manual Shell Hook Activation\nDESCRIPTION: Commands to manually activate Mise shell hooks when prompt-based activation isn't suitable\nSOURCE: https://github.com/jdx/mise/blob/main/docs/troubleshooting.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\neval \"$(mise activate bash)\"\neval \"$(mise hook-env)\"\npython --version # will work only after calling hook-env explicitly\n```\n\n----------------------------------------\n\nTITLE: Adding Tasks via Command Line\nDESCRIPTION: Shows how to add tasks using the mise tasks add command, which adds the task definition to mise.toml.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmise task add pre-commit --depends \"test\" --depends \"render\" -- echo pre-commit\n```\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.pre-commit]\ndepends = [\"test\", \"render\"]\nrun = \"echo pre-commit\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Environment Directives\nDESCRIPTION: Demonstrates how to use array-of-tables syntax with [[env]] to define multiple environment directives, which is useful when needing to source multiple scripts or define multiple directive groups.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[[env]]\n_.source = \"./script_1.sh\"\n[[env]]\n_.source = \"./script_2.sh\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Using Vfox Plugins in mise\nDESCRIPTION: Example of installing a cmake plugin via Vfox and verifying its installation. This demonstrates the basic usage pattern for installing tools through the Vfox backend.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/vfox.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use -g vfox:version-fox/vfox-cmake\n$ cmake --version\ncmake version 3.21.3\n```\n\n----------------------------------------\n\nTITLE: Listing Remote Mise Plugins\nDESCRIPTION: Example command showing how to list all available remote plugins for mise. This command displays both installed and available plugins, with installed plugins marked with an asterisk.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/plugins/ls-remote.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise plugins ls-remote\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing Environment Variables with Mise\nDESCRIPTION: Example showing how to set environment variables with mise and access them directly from the shell with PATH activation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n$ mise set NODE_ENV=production\n$ echo $NODE_ENV\nproduction\n```\n\n----------------------------------------\n\nTITLE: Compiling Free-Threaded Python with Python-Build in Mise\nDESCRIPTION: Command to compile free-threaded Python using python-build in Mise by setting the appropriate environment variables.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/python.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nMISE_PYTHON_COMPILE=1 PYTHON_BUILD_FREE_THREADING=1 mise install python\n```\n\n----------------------------------------\n\nTITLE: PDM Preset Script Configuration\nDESCRIPTION: Extended preset script that depends on the python preset and configures PDM with a specific Python version. Sets up post-install hooks for PDM sync.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/presets.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env bash\n#MISE dir=\"{{cwd}}\"\n#MISE depends=[\"preset:python\"]\n#USAGE arg \"<version>\"\n\nmise use python@$usage_version\nmise use pdm@latest\nmise config set hooks.postinstall \"pdm sync\"\n```\n\n----------------------------------------\n\nTITLE: Installing x86_64 Mise on macOS\nDESCRIPTION: Commands to download and install x86_64 version of mise for Rosetta compatibility on Apple Silicon\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tips-and-tricks.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ mkdir -p ~/.local/bin\n$ curl https://mise.jdx.dev/mise-latest-macos-x64 > ~/.local/bin/mise-x64\n$ chmod +x ~/.local/bin/mise-x64\n$ ~/.local/bin/mise-x64 --version\nmise 2024.x.x\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in TOML\nDESCRIPTION: Example of setting environment variables in a mise.toml configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n# mise.toml\n[env]\nSOME_VAR = \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring API URL for Self-hosted Instances\nDESCRIPTION: Configuration example showing how to specify a custom API URL for self-hosted GitHub or GitLab instances.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:acme/my-tool\" = { version = \"latest\", provider= \"gitlab\", api_url = \"https://gitlab.acme.com/api/v4\" }\n```\n\n----------------------------------------\n\nTITLE: Adding Confirmation to Tasks\nDESCRIPTION: Shows how to add a confirmation prompt before running a task.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.release]\nconfirm = 'Are you sure you want to cut a new release?'\ndescription = 'Cut a new release'\nfile = 'scripts/release.sh'\n```\n\n----------------------------------------\n\nTITLE: Installing NPM and Cargo Packages with Mise\nDESCRIPTION: Shows how to use Mise to install packages from NPM and Cargo registries using their respective backends.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/walkthrough.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise use npm:@antfu/ni\nmise use cargo:starship\n```\n\n----------------------------------------\n\nTITLE: Installing and Using a Ruby Gem with mise\nDESCRIPTION: Commands to install the latest version of the rubocop gem and verify its installation by checking the version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/gem.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g gem:rubocop\nrubocop --version\n```\n\n----------------------------------------\n\nTITLE: Listing Installed Plugins with mise CLI in Bash\nDESCRIPTION: Demonstrates how to use the 'mise plugins ls' command to list installed plugins. The first example shows the basic usage, while the second example uses the '--urls' flag to display the git URLs for each plugin.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/plugins/ls.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise plugins ls\nnode\nruby\n\n$ mise plugins ls --urls\nnode    https://github.com/asdf-vm/asdf-nodejs.git\nruby    https://github.com/asdf-vm/asdf-ruby.git\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Arguments to Pipx Installation\nDESCRIPTION: Configuration example for passing additional arguments to pipx when installing a package.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/pipx.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"pipx:black\" = { version = \"latest\", pipx_args = \"--preinstall\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring uv Script Task in mise.toml\nDESCRIPTION: This TOML configuration sets up a task that uses uv to run a Python script with specific dependencies. It demonstrates how to use uv run in a shebang for mise tasks.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/python.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\nuv = 'latest'\n\n[tasks.print_peps]\nrun = \"\"\"\n#!/usr/bin/env -S uv run --script\n# /// script\n# dependencies = [\"requests<3\", \"rich\"]\n# ///\n\nimport requests\nfrom rich.pretty import pprint\n\nresp = requests.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Cargo Features Configuration\nDESCRIPTION: TOML configuration for installing cargo-edit with specific features\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"cargo:cargo-edit\" = { version = \"latest\", features = \"add\" }\n```\n\n----------------------------------------\n\nTITLE: Building Node.js from Source with Mise\nDESCRIPTION: Commands to enable compilation from source for Node.js installations and install the latest version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/node.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmise settings node.compile=1\nmise use node@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Release Type in mise.toml\nDESCRIPTION: Configuration in mise.toml to specify the release type (Early Access vs General Availability) for Java installations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/java.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"java\" = { version = \"openjdk-21\", release_type = \"ea\" }\n```\n\n----------------------------------------\n\nTITLE: Configuration in mise config.toml\nDESCRIPTION: Shows how the SPM package configuration appears in the mise configuration file. This example specifies that the latest version of tuist should be used globally.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/spm.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"spm:tuist/tuist\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Auto-install Hook Configuration\nDESCRIPTION: TOML configuration for automatically installing tools when entering a project\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tips-and-tricks.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[hooks]\nenter = \"mise i -q\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mise on Windows using winget\nDESCRIPTION: This snippet demonstrates how to install Mise on Windows using the winget package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nwinget install jdx.mise\n```\n\n----------------------------------------\n\nTITLE: Uninstalling a plugin with mise command\nDESCRIPTION: Example of uninstalling a specific plugin (node) using the mise command. This removes the plugin but preserves its installs, downloads, and cache by default.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/plugins/uninstall.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise uninstall node\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Node with mise\nDESCRIPTION: Shows how mise simplifies runtime installation into a single command that installs the plugin, the runtime, and sets the version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/comparison-to-asdf.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmise use node@20\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Reshim with npm Shell Function\nDESCRIPTION: Shell function definition that automatically calls mise reshim after npm commands to ensure shims are updated when new packages are installed.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/reshim.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm() {\n  command npm \"$@\"\n  mise reshim\n}\n```\n\n----------------------------------------\n\nTITLE: GitLab CI Job Configuration with Mise\nDESCRIPTION: GitLab CI configuration that sets up caching for Mise directories and runs the build process using tools installed by Mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/continuous-integration.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuild-job:\n  stage: build\n  image: mise-debian-slim # Use the image you created\n  variables:\n    MISE_DATA_DIR: $CI_PROJECT_DIR/.mise/mise-data\n  cache:\n    - key:\n        prefix: mise-\n        files: [\"mise.toml\", \"mise.lock\"] # mise.lock is optional, only if using `lockfile = true`\n      paths:\n        - $MISE_DATA_DIR\n  script:\n    - mise install\n    - mise exec --command 'npm build'\n```\n\n----------------------------------------\n\nTITLE: Cargo Default Features Configuration\nDESCRIPTION: TOML configuration for disabling default features when installing cargo-edit\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"cargo:cargo-edit\" = { version = \"latest\", default-features = false }\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in Included TOML File\nDESCRIPTION: Shows the format for defining tasks in an included TOML file. Tasks are listed directly without the [task] prefix used in mise.toml.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_19\n\nLANGUAGE: toml\nCODE:\n```\ntask1 = \"echo task1\"\ntask2 = \"echo task2\"\ntask3 = \"echo task3\"\n\n[task4]\nrun = \"echo task4\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Unsupported Java Versions with mise\nDESCRIPTION: Steps to manually configure an unsupported Java version by creating symlinks from an existing installation to the mise directory structure.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/java.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nln -s ~/.sdkman/candidates/java/21.0.1-open ~/.local/share/mise/installs/java/21.0.1-open\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js Build Flavor\nDESCRIPTION: Commands to set specific Node.js build flavors like musl or glibc-217 when using unofficial builds.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/node.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmise settings node.flavor=musl\nmise settings node.flavor=glibc-217\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Evaluation for Environment Variables\nDESCRIPTION: Shows how to configure environment variables to be resolved after tools are installed, allowing access to tool-produced environment variables using the tools=true option.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nMY_VAR = { value = \"tools path: {{env.PATH}}\", tools = true }\n_.path = { path = [\"{{env.GEM_HOME}}/bin\"], tools = true } # directives may also set tools = true\n```\n\n----------------------------------------\n\nTITLE: Using npm-installed CLI tools (Shell)\nDESCRIPTION: Examples of using npm-installed tools with and without npx, demonstrating the effect of the PATH configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/nodejs.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save eslint\neslint --version # doesn't work\nnpx eslint --version # works\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save eslint\neslint --version # works\n```\n\n----------------------------------------\n\nTITLE: Using Mise Docker Task and Configuring Clean Environment\nDESCRIPTION: This shell script demonstrates how to use the mise docker task, activate mise in the container, and set up a clean environment by overwriting the configuration and pruning existing installations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/docker.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n❯ mise docker\n[docker] $ docker run --pull=always -it --rm --entrypoint bash jdxcode/mise:latest\n# latest: Pulling from jdxcode/mise\n# Digest: sha256:eecc479b6259479ffca5a4f9c68dbfe8631ca62dc59aa60c9ab5e4f6e9982701\n# Status: Image is up to date for jdxcode/mise:latest\nroot@75f179a190a1:/mise# eval \"$(mise activate bash)\"\n# overwrite configuration and prune to give us a clean state\nroot@75f179a190a1:/mise# echo \"\" >/mise/config.toml\nroot@75f179a190a1:/mise# mise prune --yes\n# mise pruned configuration links\n# mise python@3.13.1 ✓ remove /mise/cache/python/3.13.1\n# ...\n```\n\n----------------------------------------\n\nTITLE: Verifying jq installation\nDESCRIPTION: Shows how to check the installed version of jq after using mise to install it globally.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njq --version\n# jq-1.7\n```\n\n----------------------------------------\n\nTITLE: Reinstalling a Single Gem After Ruby Upgrade\nDESCRIPTION: Command to force reinstallation of a specific gem after the Ruby version has changed.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/gem.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmise install -f gem:rubocop\n```\n\n----------------------------------------\n\nTITLE: Installing Python and Pipx with Mise\nDESCRIPTION: Commands to install pipx using mise to manage the Python version. This is a prerequisite for using the pipx backend in mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/pipx.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g python\npip install --user pipx\n```\n\n----------------------------------------\n\nTITLE: Git-based Package Installation\nDESCRIPTION: Commands showing different ways to install packages from Git repositories using specific tags, branches, or commit revisions\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Install a specific tag\nmise use cargo:https://github.com/username/demo@tag:<release_tag>\n\n# Install the latest from a branch\nmise use cargo:https://github.com/username/demo@branch:<branch_name>\n\n# Install a specific commit revision\nmise use cargo:https://github.com/username/demo@rev:<commit_hash>\n```\n\n----------------------------------------\n\nTITLE: Record-Query Tool Configuration for Mise\nDESCRIPTION: TOML configuration to install the latest version of record-query cargo package for environment inspection.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/shell-tricks.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"cargo:record-query\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Mise Completion for Fish Shell\nDESCRIPTION: This snippet shows how to set up Mise completion for Fish shell. It generates the completion script and saves it to the appropriate Fish completions directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nmise completion fish > ~/.config/fish/completions/mise.fish\n```\n\n----------------------------------------\n\nTITLE: Usage Environment Variables Example\nDESCRIPTION: Shows how usage-defined arguments are set in the environment\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_16\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.usage-env-example]\nusage = '''\narg \"myarg\" \"myarg description\" default=\"foo\"\n'''\nrun = 'echo myarg=$usage_myarg'\n```\n\n----------------------------------------\n\nTITLE: Adding Settings via mise CLI\nDESCRIPTION: Example showing how to add a setting using the mise settings add command. In this case, it adds python_multi to the disable_hints setting array in the config file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/settings/add.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise settings add disable_hints python_multi\n```\n\n----------------------------------------\n\nTITLE: Template-based Version Alias\nDESCRIPTION: Demonstrates how to use templates in version aliases to dynamically determine version values using shell commands.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/aliases.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[alias.node.versions]\ncurrent = \"{{exec(command='node --version')}}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Mise Activation in Zsh\nDESCRIPTION: Instructions for setting up both shims and PATH activation in Zsh shell configuration files for both interactive and non-interactive sessions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(mise activate zsh --shims)\"' >> ~/.zprofile # this sets up non-interactive sessions\necho 'eval \"$(mise activate zsh)\"' >> ~/.zshrc    # this sets up interactive sessions\n```\n\n----------------------------------------\n\nTITLE: Installing Rust via Rustup\nDESCRIPTION: Command to install Rust using the official rustup installer script\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n```\n\n----------------------------------------\n\nTITLE: Adding Task Description\nDESCRIPTION: Demonstrates how to add a description to a task, which is used in help output, completions, and other mise commands.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\ndescription = \"Build the CLI\"\nrun = \"cargo build\"\n```\n\n----------------------------------------\n\nTITLE: Using Remote Scripts for Tasks\nDESCRIPTION: Demonstrates how to use remote scripts for tasks, including HTTP and Git sources.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\nfile = \"https://example.com/build.sh\"\n\n[tasks.build]\nfile = \"git::ssh://git@github.com:myorg/example.git//myfile?ref=v1.0.0\"\n\n[tasks.build]\nfile = \"git::https://github.com/myorg/example.git//myfile?ref=v1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Subcommands of mise generate\nDESCRIPTION: Lists all available subcommands of the mise generate command, including bootstrap, config, devcontainer, git-pre-commit, github-action, task-docs, and task-stubs, with their respective flags and options.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`mise generate bootstrap [FLAGS]`](/cli/generate/bootstrap.md)\n- [`mise generate config [-t --tool-versions <TOOL_VERSIONS>] [-o --output <OUTPUT>]`](/cli/generate/config.md)\n- [`mise generate devcontainer [FLAGS]`](/cli/generate/devcontainer.md)\n- [`mise generate git-pre-commit [FLAGS]`](/cli/generate/git-pre-commit.md)\n- [`mise generate github-action [FLAGS]`](/cli/generate/github-action.md)\n- [`mise generate task-docs [FLAGS]`](/cli/generate/task-docs.md)\n- [`mise generate task-stubs [-m --mise-bin <MISE_BIN>] [-d --dir <DIR>]`](/cli/generate/task-stubs.md)\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Type for Ubi Packages\nDESCRIPTION: Configuration example showing how to specify the provider type (GitHub or GitLab) for fetching assets and release information.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:gitlab-org/cli\" = { version = \"latest\", exe = \"glab\", provider = \"gitlab\" }\n```\n\n----------------------------------------\n\nTITLE: Using the mise generate devcontainer Command in Bash\nDESCRIPTION: A basic example of how to use the 'mise generate devcontainer' command to create a devcontainer configuration. This command generates a devcontainer.json file with default settings unless additional flags are specified.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate/devcontainer.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise generate devcontainer\n```\n\n----------------------------------------\n\nTITLE: Renaming Executables from Ubi Packages\nDESCRIPTION: Configuration example showing how to rename executables after extraction from downloaded packages.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:cli/cli\" = { version = \"latest\", exe = \"gh\", rename_exe = \"github\" } # github's cli\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSH Prompt Color Based on Mise Updates\nDESCRIPTION: A ZSH script that changes the prompt color to blue when mise updates the environment, and shows green/red for success/failure states otherwise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/shell-tricks.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# activate mise like normal\nsource <(command mise activate zsh)\n\ntypeset -i _mise_updated\n\n# replace default mise hook\nfunction _mise_hook {\n  local diff=${__MISE_DIFF}\n  source <(command mise hook-env -s zsh)\n  [[ ${diff} == ${__MISE_DIFF} ]]\n  _mise_updated=$?\n}\n\n_PROMPT=\"❱ \"  # or _PROMPT=${PROMPT} to keep the default\n\nfunction _prompt {\n  if (( ${_mise_updated} )); then\n    PROMPT='%F{blue}${_PROMPT}%f'\n  else\n    PROMPT='%(?.%F{green}${_PROMPT}%f.%F{red}${_PROMPT}%f)'\n  fi\n}\n\nadd-zsh-hook precmd _prompt\n```\n\n----------------------------------------\n\nTITLE: Adding mise shims to PATH in Zsh\nDESCRIPTION: This snippet shows how to add mise shims to PATH in the Zsh shell profile.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\neval \"$(mise activate zsh --shims)\"\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Tasks in Parallel\nDESCRIPTION: Example of running multiple tasks ('lint', 'test', and 'check') in parallel. The ':::' separator is used to denote separate tasks.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/run.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ mise run lint ::: test ::: check\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration Values with mise config get\nDESCRIPTION: Example of using the mise config get command to retrieve a configuration value from a mise.toml file. This specific example retrieves the Python version configured in the tools section.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/config/get.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise toml get tools.python\n3.12\n```\n\n----------------------------------------\n\nTITLE: Adding Mise Shims to PATH\nDESCRIPTION: Example showing how to add Mise shims directory to PATH for early tool access\nSOURCE: https://github.com/jdx/mise/blob/main/docs/troubleshooting.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport PATH=\"$HOME/.local/share/mise/shims:$PATH\"\npython --version # will work after adding shims to PATH\n```\n\n----------------------------------------\n\nTITLE: Installing Bun Versions with mise CLI\nDESCRIPTION: Commands to install specific versions of Bun and set them as global defaults. The first command installs Bun version 0.7.x while the second installs the latest available version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/bun.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g bun@0.7     # install bun 0.7.x\nmise use -g bun@latest  # install latest bun\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js installation path\nDESCRIPTION: Shows how to find the actual installation path of Node.js managed by mise, confirming it's using the mise-managed version rather than a shim.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nwhich node\n# /root/.local/share/mise/installs/node/22.14.0/bin/node\n```\n\n----------------------------------------\n\nTITLE: Forcing Task Execution\nDESCRIPTION: Example of forcing a 'build' task to run even if its source files are up-to-date, bypassing the normal dependency checking mechanism.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/run.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mise run build --force\n```\n\n----------------------------------------\n\nTITLE: Installing Mise on Windows using Chocolatey\nDESCRIPTION: This snippet shows how to install Mise on Windows using the Chocolatey package manager, though it notes that the version may be outdated.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nchoco install mise\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Pipx Packages After Python Upgrade\nDESCRIPTION: Commands to reinstall pipx packages after a Python version change, either for a specific package or for all pipx packages.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/pipx.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmise install -f pipx:psf/black\n```\n\nLANGUAGE: sh\nCODE:\n```\nmise install -f \"pipx:*\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Otter.nvim for LSP Support\nDESCRIPTION: Lua configuration for enabling LSP features in embedded code blocks within Mise TOML files using Otter.nvim and lazy.nvim package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/neovim.md#2025-04-17_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"jmbuhr/otter.nvim\",\n  dependencies = {\n    \"nvim-treesitter/nvim-treesitter\",\n  },\n  config = function()\n    vim.api.nvim_create_autocmd({ \"FileType\" }, {\n      pattern = { \"toml\" },\n      group = vim.api.nvim_create_augroup(\"EmbedToml\", {}),\n      callback = function()\n        require(\"otter\").activate()\n      end,\n    })\n  end,\n},\n```\n\n----------------------------------------\n\nTITLE: Running Tasks with Raw I/O\nDESCRIPTION: Example of running a 'test' task with stdin/stdout/stderr connected directly to the terminal. This automatically forces jobs=1 to prevent output interleaving.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/run.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ mise run test --raw\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows-Specific Task Run Command\nDESCRIPTION: Shows how to specify an alternative script to run when mise run is executed on Windows.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\nrun = \"cargo build\"\nrun_windows = \"cargo build --features windows\"\n```\n\n----------------------------------------\n\nTITLE: Trusting Config Files in Mise\nDESCRIPTION: This snippet demonstrates the prompt that appears when Mise encounters an untrusted config file. It asks the user to confirm whether they want to trust and load the file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/paranoid.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ mise install\nmise ~/src/mise/.tool-versions is not trusted. Trust it [y/n]?\n```\n\n----------------------------------------\n\nTITLE: Activating Mise in Elvish\nDESCRIPTION: This snippet shows how to activate Mise in the Elvish shell by adding activation commands to the Elvish configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nvar mise: = (ns [&])\neval (mise activate elvish | slurp) &ns=$mise: &on-end={|ns| set mise: = $ns }\nmise:activate\n```\n\n----------------------------------------\n\nTITLE: Listing Current Tool Versions\nDESCRIPTION: Demonstrates using the --current flag to show only currently active tool versions from configuration files.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/ls.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mise ls --current\nnode    20.0.0 ~/src/myapp/.tool-versions 20\npython  3.11.0 ~/.tool-versions           3.11.0\n```\n\n----------------------------------------\n\nTITLE: Verifying project-specific tool versions\nDESCRIPTION: Demonstrates that the project-specific versions of Node.js and pnpm are active within the project directory.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n# v23.10.0\npnpm -v\n# 10.7.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim to use mise shims\nDESCRIPTION: This Vim configuration snippet prepends mise shims to the PATH environment variable.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_3\n\nLANGUAGE: vim\nCODE:\n```\n\" Prepend mise shims to PATH\nlet $PATH = $HOME . '/.local/share/mise/shims:' . $PATH\n```\n\n----------------------------------------\n\nTITLE: Defining Tasks in TOML Configuration\nDESCRIPTION: Example of defining a build task in a mise.toml configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n# mise.toml\n[tasks.build]\ndescription = \"build the project\"\nrun = \"echo building...\"\n```\n\n----------------------------------------\n\nTITLE: Additional macOS Configuration for Unsupported Java Versions\nDESCRIPTION: Additional commands required to properly set up an unsupported Java version on macOS, including creating necessary directory structure and symlinks.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/java.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmkdir ~/.local/share/mise/installs/java/21.0.1-open/Contents\nmkdir ~/.local/share/mise/installs/java/21.0.1-open/Contents/MacOS\n\nln -s ~/.sdkman/candidates/java/21.0.1-open ~/.local/share/mise/installs/java/21.0.1-open/Contents/Home\ncp ~/.local/share/mise/installs/java/21.0.1-open/lib/libjli.dylib ~/.local/share/mise/installs/java/21.0.1-open/Contents/MacOS/libjli.dylib\n```\n\n----------------------------------------\n\nTITLE: Configuring Emacs to use mise shims\nDESCRIPTION: This Emacs Lisp snippet adds mise shims to the PATH and exec-path variables.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_5\n\nLANGUAGE: lisp\nCODE:\n```\n(setenv \"PATH\" (concat (getenv \"PATH\") \":/home/user/.local/share/mise/shims\"))\n(setq exec-path (append exec-path '(\"/home/user/.local/share/mise/shims\")))\n```\n\n----------------------------------------\n\nTITLE: Running Tasks with Arguments\nDESCRIPTION: Example of executing multiple commands with their own specific arguments. The ':::' separator divides different tasks and their respective arguments.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/run.md#2025-04-17_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ mise tasks cmd1 arg1 arg2 ::: cmd2 arg1 arg2\n```\n\n----------------------------------------\n\nTITLE: Configuring PATH Environment Variable\nDESCRIPTION: Demonstrates how to configure the PATH environment variable using the env._.path directive, which accepts absolute paths, relative paths, and template paths to be added to the system PATH.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n_.path = [\n    # adds an absolute path\n    \"~/.local/share/bin\",\n    # adds paths relative to directory in which this file was found (see below for details), not PWD\n    \"{{config_root}}/node_modules/.bin\",\n    # adds paths relative to the exact file that this is found in (not PWD)\n    \"tools/bin\",\n]\n```\n\n----------------------------------------\n\nTITLE: Syncing Ruby Versions from Homebrew with Mise\nDESCRIPTION: This snippet demonstrates how to install Ruby using Homebrew, sync it with mise, and use the latest Homebrew-installed Ruby version globally. It requires Homebrew and mise to be installed on the system.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/sync/ruby.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install ruby\nmise sync ruby --brew\nmise use -g ruby\n```\n\n----------------------------------------\n\nTITLE: Specifying Shell or Interpreter for Tasks\nDESCRIPTION: Examples of specifying a shell or interpreter for task execution, including using shebangs for different programming languages.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.echo]\nrun = '''\nset +e\ncd /nonexistent\necho \"This will not fail the task\"\n'''\n\n[tasks.lint]\nshell = 'bash -c'\nrun = \"cargo clippy\"\n\n[tasks.lint]\nrun = \"\"\"\n#!/usr/bin/env bash\ncargo clippy\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using the mise alias command\nDESCRIPTION: The basic syntax for using the mise alias command, showing the main command along with its usage pattern, aliases, and source code location.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/alias.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmise alias [-p --plugin <PLUGIN>] [--no-header] <SUBCOMMAND>\n```\n\n----------------------------------------\n\nTITLE: Configuring Emacs with mise.el package\nDESCRIPTION: This Emacs Lisp snippet sets up the mise.el package for per-buffer environment variable management.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_6\n\nLANGUAGE: lisp\nCODE:\n```\n(require 'mise)\n(add-hook 'after-init-hook #'global-mise-mode)\n```\n\n----------------------------------------\n\nTITLE: Listing Runtime Binary Paths with mise bin-paths\nDESCRIPTION: This command lists all active runtime binary paths managed by mise. It can be used without arguments to show all paths, or with specific tool@version arguments to filter the output for particular runtimes.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/bin-paths.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise bin-paths [TOOL@VERSION]...\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubi Tools in mise.toml\nDESCRIPTION: Shows how tool versions are stored in the mise configuration file when using the Ubi backend.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:goreleaser/goreleaser\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Neovim to use mise shims\nDESCRIPTION: This Lua snippet for Neovim prepends mise shims to the PATH environment variable.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_4\n\nLANGUAGE: lua\nCODE:\n```\n-- Prepend mise shims to PATH\nvim.env.PATH = vim.env.HOME .. \"/.local/share/mise/shims:\" .. vim.env.PATH\n```\n\n----------------------------------------\n\nTITLE: Defining a Rust CLI Build Task in Bash\nDESCRIPTION: Example of a file task that builds a Rust CLI. It demonstrates basic task definition and MISE configuration comments.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/file-tasks.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n#MISE description=\"Build the CLI\"\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Creating a File Task for uv Script Execution\nDESCRIPTION: This Python script demonstrates how to create a file task that uses uv to run a Python script with specific dependencies. It can be executed using mise run print_peps.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/python.md#2025-04-17_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env -S uv run --script\n# /// script\n# dependencies = [\"requests<3\", \"rich\"]\n# ///\n\nimport requests\nfrom rich.pretty import pprint\n\nresp = requests.get(\"https://peps.python.org/api/peps.json\")\ndata = resp.json()\npprint([(k, v[\"title\"]) for k, v in data.items()][:10])\n```\n\n----------------------------------------\n\nTITLE: Listing a Mise Shim\nDESCRIPTION: Shows how to view a mise shim using ls, demonstrating that the shim is a symbolic link to the mise binary.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nls -l ~/.local/share/mise/shims/node\n# [...] ~/.local/share/mise/shims/node -> ~/.local/bin/mise\n```\n\n----------------------------------------\n\nTITLE: Reinstalling All Gems After Ruby Upgrade\nDESCRIPTION: Command to force reinstallation of all gems after the Ruby version has changed, using a wildcard pattern.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/gem.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmise install -f \"gem:*\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Task Sources and Outputs\nDESCRIPTION: Demonstrates how to specify sources and outputs for a task to skip execution if files haven't changed.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\ndescription = 'Build the CLI'\nrun = \"cargo build\"\nsources = ['Cargo.toml', 'src/**/*.rs'] # skip running if these files haven't changed\noutputs = ['target/debug/mycli']\n```\n\n----------------------------------------\n\nTITLE: Specifying Executable Name for Ubi Tools\nDESCRIPTION: Configuration example showing how to specify the executable name when the archive contains multiple executables or the name doesn't match expectations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:cli/cli\" = { version = \"latest\", exe = \"gh\" } # github's cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Latest Dotnet Tool Version in mise\nDESCRIPTION: This snippet illustrates the TOML configuration for setting the latest version of a Dotnet tool in mise's config file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/dotnet.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"dotnet:GitVersion.Tool\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Zsh-style Function Hooks for Bash\nDESCRIPTION: This code snippet defines functions to implement Zsh-style function hooks in Bash. It creates 'add-zsh-hook' and 'run-hooks' functions to mimic Zsh behavior, allowing for more consistent shell scripting across Bash and Zsh environments.\nSOURCE: https://github.com/jdx/mise/blob/main/src/assets/bash_zsh_support/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nif [ -n \"${BASH_VERSION-}\" ]; then\n  function add-zsh-hook() {\n    emulate -L sh\n    local -a hooktypes\n    hooktypes=(chpwd precmd preexec periodic zshaddhistory zshexit)\n    local usage=\"Usage: add-zsh-hook hook function\\n   Available hooks: ${(j:, :)hooktypes}\"\n    local opt\n    local -A optionmap\n    local -a posargs\n    while getopts \":ULk\" opt; do\n      case $opt in\n        (U) optionmap[-U]=1;;\n        (L) optionmap[-L]=1;;\n        (k) optionmap[-k]=1;;\n        (*) return 1;;\n      esac\n    done\n    shift $(( OPTIND - 1 ))\n    if (( $# != 2 )); then\n      printf '%s\\n' ${usage} >&2\n      return 1\n    fi\n    local hook=\"$1\"\n    local fn=\"$2\"\n    if [[ ${hooktypes[(r)$hook]} != $hook ]]; then\n      printf '%s\\n' ${usage} >&2\n      return 1\n    fi\n    if [[ \"${precmd_functions[(r)$fn]}\" == \"$fn\" &&\n          \"${preexec_functions[(r)$fn]}\" == \"$fn\" &&\n          \"${chpwd_functions[(r)$fn]}\" == \"$fn\" &&\n          \"${periodic_functions[(r)$fn]}\" == \"$fn\" &&\n          \"${zshaddhistory_functions[(r)$fn]}\" == \"$fn\" &&\n          \"${zshexit_functions[(r)$fn]}\" == \"$fn\" ]]; then\n      if [[ -n ${optionmap[-L]} ]]; then\n        # append\n        typeset -ga ${hook}_functions\n        typeset -g ${hook}_functions+=(\"$fn\")\n      elif [[ -n ${optionmap[-U]} ]]; then\n        # prepend\n        typeset -ga ${hook}_functions\n        typeset -g ${hook}_functions=(\"$fn\" ${${hook}_functions[@]})\n      elif [[ -n ${optionmap[-k]} ]]; then\n        # keep, do nothing\n      else\n        # replace\n        typeset -ga ${hook}_functions\n        typeset -g ${hook}_functions=(\"$fn\")\n      fi\n    else\n      return 1\n    fi\n  }\n\n  function run-hooks() {\n    emulate -L sh\n    local hook=\"$1\"\n    shift\n    local fn\n    for fn in ${(P)${hook}_functions}; do\n      ${fn} \"$@\"\n    done\n  }\nfi\n```\n\n----------------------------------------\n\nTITLE: Running Alpine Docker Container for mise Project\nDESCRIPTION: This command runs an Alpine Docker container for the mise project, mounting the current directory to /work/mise inside the container.\nSOURCE: https://github.com/jdx/mise/blob/main/packaging/alpine/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -it --rm -v $(pwd):/work/mise ghcr.io/jdx/mise:alpine\n```\n\n----------------------------------------\n\nTITLE: Executing mise config ls Command in Bash\nDESCRIPTION: This snippet demonstrates how to use the 'mise config ls' command to list config files currently in use. The output shows the path of the config files and the tools configured in each file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/config/ls.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise config ls\nPath                        Tools\n~/.config/mise/config.toml  pitchfork\n~/src/mise/mise.toml        actionlint, bun, cargo-binstall, cargo:cargo-edit, cargo:cargo-insta\n```\n\n----------------------------------------\n\nTITLE: Referencing Environment Variables Within Other Variables\nDESCRIPTION: Demonstrates how to reference the values of previously defined environment variables within subsequent variable definitions, enabling the creation of dependent configurations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_15\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nMY_PROJ_LIB = \"{{config_root}}/lib\"\nLD_LIBRARY_PATH = \"/some/path:{{env.MY_PROJ_LIB}}\"\n```\n\n----------------------------------------\n\nTITLE: Adding mise shims to PATH in Fish\nDESCRIPTION: This snippet shows how to add mise shims to PATH in the Fish shell configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/ide-integration.md#2025-04-17_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nif status is-interactive\n  mise activate fish | source\nelse\n  mise activate fish --shims | source\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Task Alias\nDESCRIPTION: Shows how to set an alias for a task, allowing it to be run with a shorter command.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.build]\nalias = \"b\" # run with `mise run b` or `mise b`\nrun = \"cargo build\"\n```\n\n----------------------------------------\n\nTITLE: Executing mise tasks ls Command in Bash\nDESCRIPTION: This command lists available tasks to execute in the mise project. It displays tasks from both global and project-specific configurations, with project-specific tasks overriding global ones if they have the same name.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/tasks/ls.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise tasks ls\n```\n\n----------------------------------------\n\nTITLE: Listing Node Versions in Mise\nDESCRIPTION: Example of using mise ls command to check installed and requested Node versions\nSOURCE: https://github.com/jdx/mise/blob/main/docs/troubleshooting.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise ls node\nPlugin  Version  Config Source       Requested\nnode    22.0.0  ~/.mise/config.toml  22.0.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Dotnet Tool Version in mise\nDESCRIPTION: This snippet shows the TOML configuration for setting a specific version of a Dotnet tool in mise's config file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/dotnet.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"dotnet:GitVersion.Tool\" = \"5.12.0\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Virtual Environment Path in mise.toml\nDESCRIPTION: This TOML configuration specifies the path to the virtual environment created by uv using the _.python.venv setting.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/python.md#2025-04-17_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[env]\n_.python.venv = { path = \".venv\" }\n```\n\n----------------------------------------\n\nTITLE: Specifying Binary Path in Archives\nDESCRIPTION: Configuration example showing how to specify the directory within an archive where binaries are located.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:BurntSushi/ripgrep\" = { version = \"latest\", extract_all = \"true\", bin_path = \"target/release\" }\n```\n\n----------------------------------------\n\nTITLE: Removing Plugin Alias in mise\nDESCRIPTION: Example showing how to remove an alias 'lts-jod' from the node plugin using the mise alias unset command. This modifies the ~/.config/mise/config.toml file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/alias/unset.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise alias unset node lts-jod\n```\n\n----------------------------------------\n\nTITLE: Listing Tool Aliases Using mise Command\nDESCRIPTION: Example of using the 'mise aliases' command to list configured aliases. The output shows that Node.js has an alias called 'lts-jod' that points to version 22.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/alias/ls.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mise aliases\nnode  lts-jod      22\n```\n\n----------------------------------------\n\nTITLE: Displaying Mise Backends Command Usage in Markdown\nDESCRIPTION: Shows the command signature, alias, and source code location for the 'mise backends' command, which is used to manage backends in the mise tool.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/backends.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `mise backends`\n\n- **Usage**: `mise backends <SUBCOMMAND>`\n- **Aliases**: `b`\n- **Source code**: [`src/cli/backends/mod.rs`](https://github.com/jdx/mise/blob/main/src/cli/backends/mod.rs)\n\nManage backends\n\n## Subcommands\n\n- [`mise backends ls`](/cli/backends/ls.md)\n```\n\n----------------------------------------\n\nTITLE: Using mise in Multiple Directory Changes\nDESCRIPTION: Example showing how directory changes and node version checks behave with mise activate in different shells. This demonstrates potential limitations when running multiple commands in a single line.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncd ~\ncd ~/src/proj1 && node -v && cd ~/src/proj2 && node -v\n```\n\n----------------------------------------\n\nTITLE: Symlinking Custom Plugin in mise (Shell)\nDESCRIPTION: This command demonstrates how to manually symlink a custom plugin into the mise plugins directory. It's useful for developers working on their own mise plugins.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/directories.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nln -s ~/src/mise-my-tool ~/.local/share/mise/plugins/my-tool\n```\n\n----------------------------------------\n\nTITLE: Building and Running Debian-Mise Docker Image\nDESCRIPTION: These shell commands demonstrate how to build the Debian-mise Docker image and run a container from it. This is useful for testing mise in a clean environment.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/docker.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t debian-mise .\ndocker run -it --rm debian-mise\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Links for Mise Configuration\nDESCRIPTION: A set of shell commands that create symbolic links to centralize all mise configuration directories to a single ~/.mise directory. This simplifies access to mise's internals during development.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/how-i-use-mise.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nln -s ~/.mise ~/.config/mise\nln -s ~/.mise ~/.local/share/mise\nln -s ~/.mise ~/.local/state/mise\nln -s ~/.mise/cache ~/.cache/mise\n```\n\n----------------------------------------\n\nTITLE: Listing Built-in Backends with mise Command\nDESCRIPTION: This code snippet demonstrates the output of the 'mise backends ls' command. It lists various built-in backends supported by the mise tool.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/backends/ls.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ mise backends ls\naqua\nasdf\ncargo\ncore\ndotnet\ngem\ngo\nnpm\npipx\nspm\nubi\nvfox\n```\n\n----------------------------------------\n\nTITLE: Enabling Paranoid Mode in Mise\nDESCRIPTION: This snippet shows how to enable Paranoid mode in Mise using the settings command. It sets the 'paranoid' setting to 1.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/paranoid.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise settings paranoid=1\n```\n\n----------------------------------------\n\nTITLE: Creating a Greeting Task in Node.js with Arguments\nDESCRIPTION: Example of a Node.js file task that writes a greeting to a file, demonstrating usage of the 'usage' spec for argument parsing in JavaScript.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/file-tasks.md#2025-04-17_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env -S node\n//MISE description=\"Write a greeting to a file\"\n//USAGE flag \"-f --force\" help=\"Overwrite existing <file>\"\n//USAGE flag \"-u --user <user>\" help=\"User to run as\"\n//USAGE arg \"<output_file>\" help=\"The file to write\" default=\"file.txt\" {\n//USAGE   choices \"greeting.txt\" \"file.txt\"\n//USAGE }\n\nconst fs = require(\"fs\");\n\nconst { usage_user, usage_force, usage_output_file } = process.env;\n\nif (usage_force === \"true\") {\n  fs.rmSync(usage_output_file, { force: true });\n}\n\nconst user = usage_user ?? \"world\";\nfs.appendFileSync(usage_output_file, `Hello, ${user}\\n`);\nconsole.log(`Greeting written to ${usage_output_file}`);\n```\n\n----------------------------------------\n\nTITLE: Plugin Alias Script Implementation\nDESCRIPTION: Example of a plugin's list-aliases script that defines LTS version aliases for Node.js. This script allows plugins to provide their own version aliases.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/aliases.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/usr/bin/env bash\n\necho \"lts-hydrogen 18\"\necho \"lts-gallium 16\"\necho \"lts-fermium 14\"\n```\n\n----------------------------------------\n\nTITLE: Using the mise generate Command\nDESCRIPTION: Shows the basic usage syntax, aliases, and source code location of the mise generate command, which is used for generating files for various tools and services.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `mise generate`\n\n- **Usage**: `mise generate <SUBCOMMAND>`\n- **Aliases**: `gen`\n- **Source code**: [`src/cli/generate/mod.rs`](https://github.com/jdx/mise/blob/main/src/cli/generate/mod.rs)\n```\n\n----------------------------------------\n\nTITLE: Installing Usage CLI Tool with Mise\nDESCRIPTION: Command to install the usage CLI tool globally using mise package manager. This is required for enabling autocompletion functionality.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/faq.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmise use -g usage\n```\n\n----------------------------------------\n\nTITLE: Displaying mise Usage in Markdown\nDESCRIPTION: Shows the basic usage syntax for the mise command-line tool, including the general format for flags, tasks, and subcommands.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/index.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `mise`\n\n**Usage**: `mise [FLAGS] [TASK] <SUBCOMMAND>`\n\n- **Usage**: `mise [FLAGS] [TASK] <SUBCOMMAND>`\n```\n\n----------------------------------------\n\nTITLE: MISE Reshim Command\nDESCRIPTION: Command to update shims after migrating from rtx to mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/rtx.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise reshim\n```\n\n----------------------------------------\n\nTITLE: Example Secret Environment Variables JSON Structure\nDESCRIPTION: Example JSON structure showing how to format environment variables in a .env.json file that can be encrypted with sops and used by mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/secrets.md#2025-04-17_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"AWS_ACCESS_KEY_ID\": \"AKIAIOSFODNN7EXAMPLE\",\n  \"AWS_SECRET_ACCESS_KEY\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Mise Activation in Zsh Shell\nDESCRIPTION: A shell command snippet demonstrating how to test the mise activation functionality in a Zsh shell environment. It uses the custom @mise script to run the latest code build.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/how-i-use-mise.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzsh\neval \"$(@mise activate zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Hello World Tasks in Various Languages\nDESCRIPTION: Examples of simple Hello World tasks in Node.js, Python, Deno, and PowerShell, demonstrating shebang usage for different interpreters.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/file-tasks.md#2025-04-17_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\n//MISE description=\"Hello, World in Node.js\"\n\nconsole.log(\"Hello, World!\");\n```\n\nLANGUAGE: python\nCODE:\n```\n#!/usr/bin/env python\n#MISE description=\"Hello, World in Python\"\n\nprint('Hello, World!')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env -S deno run --allow-env\n//MISE description=\"Hello, World in Deno\"\n\nconsole.log(`PATH, ${Deno.env.get(\"PATH\")}`);\n```\n\nLANGUAGE: powershell\nCODE:\n```\n#!/usr/bin/env pwsh\n#MISE description=\"Hello, World in Powershell\"\n\n$current_directory = Get-Location\nWrite-Host \"Hello from Powershell, current directory is $current_directory\"\n```\n\n----------------------------------------\n\nTITLE: Manually Updating ruby-build\nDESCRIPTION: Commands to force an update of ruby-build by cleaning the Mise cache and listing available remote Ruby versions. Useful when you need access to newly released Ruby versions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/ruby.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmise cache clean\nmise ls-remote ruby\n```\n\n----------------------------------------\n\nTITLE: Environment Change Inspection Function\nDESCRIPTION: Shell function to parse and inspect mise environment changes using record-query tool.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/shell-tricks.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfunction mise_parse_env {\n  rq -m < <(\n    zcat -q < <(\n      printf $'\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00'\n      base64 -d <<< \"$1\"\n    )\n  )\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ mise_parse_env \"${__MISE_DIFF}\"\n{\n  \"new\": {\n    ...\n  },\n  \"old\": {\n    ...\n  },\n  \"path\": [\n    ...\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Activating mise Environment in Xonsh Shell\nDESCRIPTION: Example of how to use the `mise env` command to activate the mise environment in the Xonsh shell. The command output is executed using the `execx` function.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/env.md#2025-04-17_snippet_2\n\nLANGUAGE: xonsh\nCODE:\n```\nexecx($(mise env -s xonsh))\n```\n\n----------------------------------------\n\nTITLE: Mise Bootstrap Script Download\nDESCRIPTION: Commands to download and set up the mise bootstrap script\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tips-and-tricks.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://mise.run > setup-mise.sh\nchmod +x setup-mise.sh\n./setup-mise.sh\n```\n\n----------------------------------------\n\nTITLE: Using asdf-Compatible Commands in mise\nDESCRIPTION: Shows how mise supports asdf-style commands for users transitioning from asdf who are familiar with that syntax.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/comparison-to-asdf.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmise install node 20.0.0\nmise local node 20.0.0\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Node.js is not globally available\nDESCRIPTION: Shows that Node.js is not available in the global environment after using mise exec, confirming that mise exec creates an isolated environment for the command execution.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/demo.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode -v\n# bash: node: command not found\n```\n\n----------------------------------------\n\nTITLE: Python Preset Script Configuration\nDESCRIPTION: Base preset script that configures Python virtual environment settings and pre-commit hooks in mise.toml. Sets up virtual environment path and creation flags.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/presets.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env bash\n#MISE dir=\"{{cwd}}\"\n\nmise use pre-commit\nmise config set env._.python.venv.path .venv\nmise config set env._.python.venv.create true -t bool\nmise tasks add lint -- pre-commit run -a\n```\n\n----------------------------------------\n\nTITLE: Minimum Mise Version Specification in TOML\nDESCRIPTION: Shows how to specify the minimum supported version of mise required for a configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration.md#2025-04-17_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\nmin_version = '2024.11.1'\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Setting with mise settings get Command in Bash\nDESCRIPTION: This snippet demonstrates how to use the 'mise settings get' command to retrieve a specific setting from the mise configuration. In this example, it retrieves the value of the 'idiomatic_version_file' setting.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/settings/get.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise settings get idiomatic_version_file\ntrue\n```\n\n----------------------------------------\n\nTITLE: Disabling uvx for a Specific Tool\nDESCRIPTION: Configuration example to disable the use of uvx for a specific tool, forcing the use of pipx instead.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/pipx.md#2025-04-17_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"pipx:ansible\" = { version = \"latest\", uvx = \"false\", pipx_args = \"--include-deps\" }\n```\n\n----------------------------------------\n\nTITLE: Executing mise prune Command with Dry Run\nDESCRIPTION: Example showing dry run output of the mise prune command, which displays which tool versions would be deleted without actually removing them.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/prune.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mise prune --dry-run\nrm -rf ~/.local/share/mise/versions/node/20.0.0\nrm -rf ~/.local/share/mise/versions/node/20.0.1\n```\n\n----------------------------------------\n\nTITLE: Displaying PATH Environment Variable in Shell\nDESCRIPTION: Example showing how to view the default PATH environment variable in a shell, which determines where the system looks for executable programs.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho $PATH\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\n```\n\n----------------------------------------\n\nTITLE: Software Verification Setup\nDESCRIPTION: Commands to install and configure software verification tools\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tips-and-tricks.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nbrew install gpg\nmise use -g cosign slsa-verifier\n```\n\n----------------------------------------\n\nTITLE: Simple Flag Usage\nDESCRIPTION: Example of using a basic flag in an echo command\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_13\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.echo]\nrun = 'echo {{flag(name=\"myflag\")}}'\n```\n\n----------------------------------------\n\nTITLE: Migrating Global .tool-versions from asdf to mise\nDESCRIPTION: This shell script demonstrates how to migrate the global .tool-versions file from asdf to mise. It moves the existing file to a backup and converts its contents to mise's 'use' command format.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/faq.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmv ~/.tool-versions ~/.tool-versions.bak\ncat ~/.tool-versions.bak | tr ' ' '@' | xargs -n2 mise use -g\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using yum package manager\nDESCRIPTION: This snippet demonstrates how to install Mise using the yum package manager on CentOS, RHEL, and similar systems.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nyum install -y yum-utils\nyum-config-manager --add-repo https://mise.jdx.dev/rpm/mise.repo\nyum install -y mise\n```\n\n----------------------------------------\n\nTITLE: Setting Extras for Pipx Tool in Mise Configuration\nDESCRIPTION: Configuration example for installing a pipx package with additional components using the extras option.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/pipx.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"pipx:harlequin\" = { version = \"latest\", extras = \"postgres,s3\" }\n```\n\n----------------------------------------\n\nTITLE: Listing Available Vfox Plugins in mise Registry\nDESCRIPTION: Example of using the mise registry command to list available Vfox plugins. This shows how to discover tools that can be installed through the Vfox backend.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/vfox.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ mise registry | grep vfox:\nclang          vfox:version-fox/vfox-clang\ncmake          vfox:version-fox/vfox-cmake\ncrystal        vfox:yanecc/vfox-crystal\ndart           vfox:version-fox/vfox-dart\ndotnet         vfox:version-fox/vfox-dotnet\nelixir         vfox:version-fox/vfox-elixir\netcd           vfox:version-fox/vfox-etcd\nflutter        vfox:version-fox/vfox-flutter\ngolang         vfox:version-fox/vfox-golang\ngradle         vfox:version-fox/vfox-gradle\ngroovy         vfox:version-fox/vfox-groovy\njulia          vfox:ahai-code/vfox-julia\nkotlin         vfox:version-fox/vfox-kotlin\nkubectl        vfox:ahai-code/vfox-kubectl\nmaven          vfox:version-fox/vfox-maven\nmongo          vfox:yeshan333/vfox-mongo\nphp            vfox:version-fox/vfox-php\nprotobuf       vfox:ahai-code/vfox-protobuf\nscala          vfox:version-fox/vfox-scala\nterraform      vfox:enochchau/vfox-terraform\nvlang          vfox:ahai-code/vfox-vlang\n```\n\n----------------------------------------\n\nTITLE: Displaying Node.js Installation Directory Structure (Shell)\nDESCRIPTION: This command shows the directory structure for Node.js installations managed by mise. It illustrates how mise creates symlinks for version prefixes and aliases.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/directories.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ tree ~/.local/share/mise/installs/node\n20 -> ./20.15.0\n20.15 -> ./20.15.0\nlts -> ./20.15.0\nlatest -> ./20.15.0\n```\n\n----------------------------------------\n\nTITLE: Accessing Mise Environment Variables in Node.js\nDESCRIPTION: Example showing how to access mise environment variables in Node.js, which works with both activation methods.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n$ mise set NODE_ENV=production\n$ node -p process.env.NODE_ENV\nproduction\n```\n\n----------------------------------------\n\nTITLE: Generating Age Keypair for Sops Encryption\nDESCRIPTION: Shell command for generating an age keypair that can be used for encrypting secrets with sops. The private key is stored in ~/.config/mise/age.txt.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/secrets.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ age-keygen -o ~/.config/mise/age.txt\nPublic key: <public key>\n```\n\n----------------------------------------\n\nTITLE: Installation Command for DNF5\nDESCRIPTION: Shell command example showing DNF5 package installation.\nSOURCE: https://github.com/jdx/mise/blob/main/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndnf5 install\n```\n\n----------------------------------------\n\nTITLE: Hiding Tasks from Output\nDESCRIPTION: Shows how to hide a task from help, completion, and other output, useful for deprecated or internal tasks.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_10\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.internal]\nhide = true\nrun = \"echo my internal task\"\n```\n\n----------------------------------------\n\nTITLE: Loading Bash chpwd Hook Files\nDESCRIPTION: Instructions for sourcing the required function and load files to enable chpwd hook functionality in Bash\nSOURCE: https://github.com/jdx/mise/blob/main/src/assets/bash_zsh_support/chpwd/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsource chpwd/functions.sh\nsource chpwd/load.sh\n```\n\n----------------------------------------\n\nTITLE: JSON Event Emission Format Example\nDESCRIPTION: Example JSON structure showing how Watchexec emits events when monitoring filesystem changes. Demonstrates the format used when a new folder is created on Linux.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/watch.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\n    {\n      \"kind\": \"path\",\n      \"absolute\": \"/home/user/your/new-folder\",\n      \"filetype\": \"dir\"\n    },\n    {\n      \"kind\": \"fs\",\n      \"simple\": \"create\",\n      \"full\": \"Create(Folder)\"\n    },\n    {\n      \"kind\": \"source\",\n      \"source\": \"filesystem\"\n    }\n  ],\n  \"metadata\": {\n    \"notify-backend\": \"inotify\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Environment File with Sops and Age\nDESCRIPTION: Shell command for encrypting a .env.json file with sops using an age public key. The -i flag overwrites the original file with the encrypted version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/secrets.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsops encrypt -i --age \"<public key>\" .env.json\n```\n\n----------------------------------------\n\nTITLE: Setting Node.js LTS Alias in Mise\nDESCRIPTION: Example showing how to create an alias 'lts-jod' for Node.js version 22.0.0. The command modifies the ~/.config/mise/config.toml configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/alias/set.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise alias set node lts-jod 22.0.0\n```\n\n----------------------------------------\n\nTITLE: Running Docker Commands for mise Development\nDESCRIPTION: Examples of using Docker for various development tasks in the mise project, including building, testing, and running E2E tests.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmise run docker:cargo build\nmise run docker:cargo test\nmise run docker:mise --help # run `mise --help` in the dev container\nmise run docker:mise run test:e2e # run the e2e tests inside of the docker container\nmise run docker:e2e # shortcut for `mise run docker:mise run test:e2e`\n```\n\n----------------------------------------\n\nTITLE: Activating Mise in Xonsh\nDESCRIPTION: These snippets demonstrate how to activate Mise in the Xonsh shell using either a Python import or by adding an activation command to the Xonsh configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom pathlib         import Path\nfrom xonsh.built_ins import XSH\n\nctx = XSH.ctx\nmise_init = subprocess.run([Path('~/bin/mise').expanduser(),'activate','xonsh'],capture_output=True,encoding=\"UTF-8\").stdout\nXSH.builtins.execx(mise_init,'exec',ctx,filename='mise')\n```\n\nLANGUAGE: sh\nCODE:\n```\necho 'execx($(~/bin/mise activate xonsh))' >> ~/.config/xonsh/rc.xsh # or ~/.xonshrc\n```\n\n----------------------------------------\n\nTITLE: Running Mise in Docker\nDESCRIPTION: This snippet demonstrates how to run Mise inside a Docker container, executing a Node.js command as an example.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker run jdxcode/mise x node@20 -- node -v\n```\n\n----------------------------------------\n\nTITLE: Managing Mise Settings with CLI Commands\nDESCRIPTION: Examples demonstrating how to list all settings, get specific setting values, and set configuration options using the mise settings CLI. Shows both simple boolean settings and complex URL configurations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/settings.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# list all settings\n$ mise settings\n\n# get the value of the setting \"always_keep_download\"\n$ mise settings always_keep_download\n\n# set the value of the setting \"always_keep_download\" to \"true\"\n$ mise settings always_keep_download=true\n\n# set the value of the setting \"node.mirror_url\" to \"https://npm.taobao.org/mirrors/node\"\n$ mise settings node.mirror_url https://npm.taobao.org/mirrors/node\n```\n\n----------------------------------------\n\nTITLE: Zinit Installation Configuration\nDESCRIPTION: Zinit plugin manager configuration for installing mise with shell completion\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tips-and-tricks.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nzinit as=\"command\" lucid from=\"gh-r\" for \\\n    id-as=\"usage\" \\\n    atpull=\"%atclone\" \\\n    jdx/usage\n    #atload='eval \"$(mise activate zsh)\"' \\\n\nzinit as=\"command\" lucid from=\"gh-r\" for \\\n    id-as=\"mise\" mv=\"mise* -> mise\" \\\n    atclone=\"./mise* completion zsh > _mise\" \\\n    atpull=\"%atclone\" \\\n    atload='eval \"$(mise activate zsh)\"' \\\n    jdx/mise\n```\n\n----------------------------------------\n\nTITLE: Raw Template Block Example\nDESCRIPTION: Demonstrates how to use raw blocks to skip template rendering for specific content.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/templates.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{% raw %}\n  Hello {{ name }}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Cargo Crate Selection Configuration\nDESCRIPTION: TOML configuration for specifying the crate name when installing from a Git repository\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_8\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"cargo:https://github.com/username/demo\" = { version = \"tag:v1.0.0\", crate = \"demo\" }\n```\n\n----------------------------------------\n\nTITLE: Listing Installed mise Plugins with URLs\nDESCRIPTION: Command to display all installed mise plugins with their repository URLs, reference branches, and SHA hashes.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/plugins.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise plugins ls --urls\n# Plugin                          Url                                                     Ref  Sha\n# 1password                       https://github.com/mise-plugins/mise-1password-cli.git  HEAD f5d5aab\n# vfox-mise-plugins-vfox-dart     https://github.com/mise-plugins/vfox-dart               HEAD 1424253\n# ...\n```\n\n----------------------------------------\n\nTITLE: Initializing Team Members Data in Vue Setup Script\nDESCRIPTION: Sets up team member data structures including the BDFL and advisory board members using Vue's script setup syntax. Configures member avatars, names, titles, and social links for display using VitePress team components.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/team.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { VPTeamPage, VPTeamPageTitle, VPTeamPageSection, VPTeamMembers } from 'vitepress/theme'\n\nconst members = [\n  {\n    avatar: 'https://www.github.com/jdx.png',\n    name: 'Jeff Dickey',\n    title: 'BDFL',\n    links: [\n      { icon: 'github', link: 'https://github.com/jdx' },\n      { icon: 'twitter', link: 'https://twitter.com/jdxcode' },\n      { icon: 'mastodon', link: 'https://fosstodon.org/@jdx' }\n    ]\n  }\n]\nconst board = [\n  {\n    avatar: 'https://www.github.com/booniepepper.png',\n    name: 'Justin \"J.R.\" Hill',\n    links: [\n      { icon: 'github', link: 'https://github.com/booniepepper' },\n    ]\n  },\n  {\n    avatar: 'https://www.github.com/pepicrft.png',\n    name: 'Pedro Piñera Buendía',\n    links: [\n      { icon: 'github', link: 'https://github.com/pepicrft' },\n    ]\n  },\n  {\n    avatar: 'https://www.github.com/chadac.png',\n    name: 'Chad Crawford',\n    links: [\n      { icon: 'github', link: 'https://github.com/chadac' },\n    ]\n  }\n]\n</script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Vfox Plugins in mise Configuration\nDESCRIPTION: Example of how mise stores Vfox plugin configuration in the config.toml file. This shows the format used for referencing Vfox-managed tools.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/vfox.md#2025-04-17_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"vfox:version-fox/vfox-cmake\" = \"latest\"\n```\n\n----------------------------------------\n\nTITLE: Matching Specific Release Variants with Ubi\nDESCRIPTION: Configuration example showing how to match specific release variants (like GNU or musl) when multiple options are available.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:BurntSushi/ripgrep\" = { version = \"latest\", matching = \"musl\" }\n```\n\n----------------------------------------\n\nTITLE: Testing Package Installation for mise on Ubuntu\nDESCRIPTION: Shell commands to test the installation of mise using apt on Ubuntu, including setting up the repository and installing the package.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -ti --rm ubuntu\napt update -y\napt install -y gpg sudo wget curl\nsudo install -dm 755 /etc/apt/keyrings\nwget -qO - https://mise.jdx.dev/gpg-key.pub | gpg --dearmor | sudo tee /etc/apt/keyrings/mise-archive-keyring.gpg 1> /dev/null\necho \"deb [signed-by=/etc/apt/keyrings/mise-archive-keyring.gpg arch=arm64] https://mise.jdx.dev/deb stable main\" | sudo tee /etc/apt/sources.list.d/mise.list\napt update\napt install -y mise\nmise -V\n```\n\n----------------------------------------\n\nTITLE: Creating RTX to MISE Symlink in Bash\nDESCRIPTION: Creates a symbolic link to maintain compatibility for users still calling rtx activate in shell rc scripts.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/rtx.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nln -s /path/to/mise /path/to/rtx\n```\n\n----------------------------------------\n\nTITLE: Installing Zig Language Server with mise\nDESCRIPTION: This snippet shows how to install the Zig Language Server (ZLS) using mise. It's important to note that ZLS needs to be installed separately and should match the version of Zig being used.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/zig.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g zls@0.13\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for mise Project in Rust\nDESCRIPTION: Instructions for running unit tests locally using Cargo, with a note to disable mise if it's being used.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Template Test Condition Example\nDESCRIPTION: Shows how to use template test conditions to check variable properties.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/templates.md#2025-04-17_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{% if my_number is not odd %}\n  Even\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Referencing mise cache Source Code in Markdown\nDESCRIPTION: Provides a link to the source code file for the 'mise cache' command implementation in GitHub repository.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/cache.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[`src/cli/cache/mod.rs`](https://github.com/jdx/mise/blob/main/src/cli/cache/mod.rs)\n```\n\n----------------------------------------\n\nTITLE: Generating Alpine Release Keys\nDESCRIPTION: These commands switch to the packager user and generate new Alpine release keys using abuild-keygen.\nSOURCE: https://github.com/jdx/mise/blob/main/packaging/alpine/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo su - packager\nabuild-keygen -a -n\n```\n\n----------------------------------------\n\nTITLE: GitHub API Rate Limit Error\nDESCRIPTION: Example of rate limit error message when installing tools from GitHub\nSOURCE: https://github.com/jdx/mise/blob/main/docs/troubleshooting.md#2025-04-17_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHTTP status client error (403 Forbidden) for url\n403 API rate limit exceeded for\n```\n\n----------------------------------------\n\nTITLE: Positional Argument Definition\nDESCRIPTION: Example of defining a positional argument for a cargo test command\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.test]\nrun = 'cargo test {{arg(name=\"file\")}}'\n```\n\n----------------------------------------\n\nTITLE: Using Mise Exec to Access Environment Variables\nDESCRIPTION: Example showing how to use mise exec to access mise environment variables in a bash subshell.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n$ mise set NODE_ENV=production\n$ mise x -- bash -c \"echo \\$NODE_ENV\"\nproduction\n$ mise r some_task_that_uses_NODE_ENV\nproduction\n```\n\n----------------------------------------\n\nTITLE: Using the Development Shim for mise CLI\nDESCRIPTION: Examples of using the @mise shim to run various mise commands during development, including help, Docker commands, and shell activations.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n@mise --help\n@mise run docker:e2e\neval \"$(@mise activate zsh)\"\n@mise activate fish | source\n```\n\n----------------------------------------\n\nTITLE: Setting Default MISE_ENV for Powerline-go Integration\nDESCRIPTION: Bash configuration to set a default empty MISE_ENV variable to prevent issues with powerline-go shell-var module.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/shell-tricks.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport MISE_ENV=\n```\n\n----------------------------------------\n\nTITLE: Using the Mise Registry Command with Examples\nDESCRIPTION: Examples of using the `mise registry` command to list all available tools and to query a specific tool (poetry). The output shows the shorthand name and full tool identifier.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/registry.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise registry\nnode    core:node\npoetry  asdf:mise-plugins/mise-poetry\nubi     cargo:ubi-cli\n\n$ mise registry poetry\nasdf:mise-plugins/mise-poetry\n```\n\n----------------------------------------\n\nTITLE: Configuring VitePress Homepage with YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a VitePress homepage, defining layout, title, hero section with project name and actions, and feature sections describing the mise project capabilities.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\n# https://vitepress.dev/reference/default-theme-home-page\nlayout: home\ntitle: Home\n\nhero:\n  name: mise-en-place\n  tagline: |\n    The front-end to your dev env\n    <span class=\"formerly\">Pronounced \"MEEZ ahn plahs\"</span>\n  actions:\n    - theme: brand\n      text: Getting Started\n      link: /getting-started\n    - theme: alt\n      text: Demo\n      link: /demo\n    - theme: alt\n      text: About\n      link: /about\n\nfeatures:\n  - title: Dev Tools\n    link: /dev-tools/\n    icon: 🛠️\n    details: mise is a polyglot tool version manager. It replaces tools like asdf, nvm, pyenv, rbenv, etc.\n  - title: Environments\n    details: mise allows you to switch sets of env vars in different project directories. It can replace direnv.\n    icon: ⚙\n    link: /environments/\n  - title: Tasks\n    link: /tasks/\n    details: mise is a task runner that can replace make, or npm scripts.\n    icon: ⚡\n---\n```\n\n----------------------------------------\n\nTITLE: Decoding Compressed MessagePack Cache Data in Shell\nDESCRIPTION: This command demonstrates how to view the compressed MessagePack cache files used by mise to store plugin data. It uses perl to decompress the zlib content and msgpack-cli to decode the result, providing a way to inspect cached remote versions data.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cache-behavior.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncat ~/$MISE_CACHE_DIR/node/remote_versions.msgpack.z | perl -e 'use Compress::Raw::Zlib;my $d=new Compress::Raw::Zlib::Inflate();my $o;undef $/;$d->inflate(<>,$o);print $o;' | msgpack-cli decode\n```\n\n----------------------------------------\n\nTITLE: Displaying Available Tasks in mise Project\nDESCRIPTION: Example output of the 'mise tasks' command, showing available tasks defined in the project's configuration files.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n~/src/mise ❯ mise tasks\nbuild                                                        ~/src/mise/.mise.toml\nclean                                                        ~/src/mise/.mise.toml\nformat                                                       ~/src/mise/.mise.toml\nlint                                                         ~/src/mise/.mise/config.toml\nlint:fix                                                     ~/src/mise/.mise.toml\nrelease                                                      ~/src/mise/.mise.toml\nrender                                                       ~/src/mise/.mise.toml\nrender:completions                                           ~/src/mise/.mise.toml\nrender:help                                                  ~/src/mise/.mise.toml\nrender:mangen                                                ~/src/mise/.mise.toml\nsignal-test                                                  ~/src/mise/.mise.toml\nsnapshots           Update test snapshots                    ~/src/mise/.mise.toml\ntest                                                         ~/src/mise/.mise.toml\ntest:e2e                                                     ~/src/mise/.mise.toml\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Shim for mise CLI in Bash\nDESCRIPTION: A Bash script to create a shim for running the mise CLI directly from the source code, useful for development and testing.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/sh\nexec cargo run -q --all-features --manifest-path ~/src/mise/Cargo.toml -- \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Displaying uv Project Structure\nDESCRIPTION: This shell snippet shows the typical structure of a uv project and the contents of the .python-version file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/python.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n.\n├── .gitignore\n├── .python-version\n├── hello.py\n├── pyproject.toml\n└── README.md\n\ncat .python-version\n# 3.12\n```\n\n----------------------------------------\n\nTITLE: Verifying Mise install script with GPG\nDESCRIPTION: This snippet demonstrates how to verify the Mise installation script using GPG to ensure it hasn't been tampered with before installation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngpg --keyserver hkps://keyserver.ubuntu.com --recv-keys 0x7413A06D\ncurl https://mise.jdx.dev/install.sh.sig | gpg --decrypt > install.sh\n# ensure the above is signed with the mise release key\nsh ./install.sh\n```\n\n----------------------------------------\n\nTITLE: Registering Bash chpwd Hook Function\nDESCRIPTION: Pattern for adding a custom function to the chpwd hooks array while preventing duplicate entries. The hook will be called when changing directories.\nSOURCE: https://github.com/jdx/mise/blob/main/src/assets/bash_zsh_support/chpwd/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport -a chpwd_functions\n[[ \" ${chpwd_functions[*]} \" == *\" _hook_name \"* ]] ||\nchpwd_functions+=(_hook_name)\n```\n\n----------------------------------------\n\nTITLE: Syncing Python Versions with mise\nDESCRIPTION: Examples showing how to sync Python versions between mise and external tools (pyenv and uv). Demonstrates installation, syncing, and version usage patterns across different tools.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/sync/python.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npyenv install 3.11.0\nmise sync python --pyenv\nmise use -g python@3.11.0 - uses pyenv-provided python\n\nuv python install 3.11.0\nmise install python@3.10.0\nmise sync python --uv\nmise x python@3.11.0 -- python -V - uses uv-provided python\nuv run -p 3.10.0 -- python -V - uses mise-provided python\n```\n\n----------------------------------------\n\nTITLE: Rendering Settings Component with Level Prop\nDESCRIPTION: Vue template code that renders the Settings component with a level prop set to 2 to control heading hierarchy.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration/settings.md#2025-04-17_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<Settings :level=\"2\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Treesitter Queries for Mise TOML Files\nDESCRIPTION: Tree-sitter query configuration for syntax highlighting in Mise run commands within TOML files. Handles different shebang patterns and defaults to bash highlighting when no shebang is present.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/neovim.md#2025-04-17_snippet_0\n\nLANGUAGE: scm\nCODE:\n```\n; extends\n\n(pair\n  (bare_key) @key (#eq? @key \"run\")\n  (string) @injection.content @injection.language\n\n  (#is-mise?)\n  (#match? @injection.language \"^\\\"\\\"\\\"\\n*#!(/\\\\w+)+/env\\\\s+\\\\w+\") ; multiline shebang using env\n  (#gsub! @injection.language \"^.*#!/.*/env%s+([^%s]+).*\" \"%1\") ; extract lang\n  (#offset! @injection.content 0 3 0 -3) ; rm quotes\n)\n\n(pair\n  (bare_key) @key (#eq? @key \"run\")\n  (string) @injection.content @injection.language\n\n  (#is-mise?)\n  (#match? @injection.language \"^\\\"\\\"\\\"\\n*#!(/\\\\w+)+\\s*\\n\") ; multiline shebang\n  (#gsub! @injection.language \"^.*#!/.*/([^/%s]+).*\" \"%1\") ; extract lang\n  (#offset! @injection.content 0 3 0 -3) ; rm quotes\n)\n\n(pair\n  (bare_key) @key (#eq? @key \"run\")\n  (string) @injection.content\n\n  (#is-mise?)\n  (#match? @injection.content \"^\\\"\\\"\\\"\\n*.*\") ; multiline\n  (#not-match? @injection.content \"^\\\"\\\"\\\"\\n*#!\") ; no shebang\n  (#offset! @injection.content 0 3 0 -3) ; rm quotes\n  (#set! injection.language \"bash\") ; default to bash\n)\n\n(pair\n  (bare_key) @key (#eq? @key \"run\")\n  (string) @injection.content\n\n  (#is-mise?)\n  (#not-match? @injection.content \"^\\\"\\\"\\\"\" ; not multiline\n  (#offset! @injection.content 0 1 0 -1) ; rm quotes\n  (#set! injection.language \"bash\") ; default to bash\n)\n```\n\n----------------------------------------\n\nTITLE: Verifying Cache Setup for Unsupported Java Versions\nDESCRIPTION: Command to verify the mise cache directory structure for an unsupported Java version, ensuring it's properly recognized by mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/java.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n$ ls -R $MISE_CACHE_DIR/java\n21.0.1-open\n\nmise/java/21.0.1-open:\n```\n\n----------------------------------------\n\nTITLE: Clarification on Environment Variables for Rust\nDESCRIPTION: Documentation note specifying important environment variables RUSTUP_HOME and CARGO_HOME for Rust setup.\nSOURCE: https://github.com/jdx/mise/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRUSTUP_HOME\nCARGO_HOME\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests for mise Project\nDESCRIPTION: Command to run end-to-end tests using mise's task runner, with an option to enable slow tests.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmise run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Using mise cache Command in Shell\nDESCRIPTION: Demonstrates the usage syntax for the 'mise cache' command. It can be used with various subcommands to manage the mise cache.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/cache.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmise cache <SUBCOMMAND>\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key Block for mise Release Signing\nDESCRIPTION: The GPG public key used to cryptographically sign release artifacts for the mise project. This key is specifically used for signing Debian packages and SHASUMS verification files included in releases.\nSOURCE: https://github.com/jdx/mise/blob/main/SECURITY.md#2025-04-17_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\nmQINBGWUNRYBEAC1Sz9QTV039Kxez3Olzf0bLPKFjyRovwx1sTCUZUfkYid9qlSw\n4VyWb5M51Og3mSwwD+p55aMMESapqIAer16Mh+rVy2TfYcQ42HfYjoDrgrBlV8Cw\nFutPowt7FpdmUEH4I4ax4fE4gvlHzRXksHQHqDNFcBxSKGnwakknLEOQqW0FEIMH\nBJSPyFTOp8tPqvOXlYXWuL1Kk4dc0MQujk5NbKznWP4VSTBEJgamTDlOg9FEYBQq\nH/zSN7X8X2GBA+D9LqHX+ZBzlvQen2LSD4nl4EhKNOZy7C/bfaOKt4olxhGSrw9+\nd7s/LfqmgjN508Wnzih3PS8VwvfDI04ch0s0SDUfYh8z8atEddc9mXCv9/YSNtl3\n/QAHIEX4E5arqY7OYlRyazR7otCihPeL5rjTSfhw/g1In6IfZsY+CmobvCuBQj9B\nSDJQR+mOawV4T758oDkOtbg1Got0vXGog9yXKulYgzC6/8eX7rcXIsK7qdQTrjy5\nN/vwjevcZB2Y7rpD+9GZzMj112W9X6eFDxMrV+Os6DsS7FRPtCzUlm8Yth/BQoSr\nFx90eBTSxCeEtpDDnpUtcYX0jTJHChenoxNnTTCeQVdtcJPcZL8Kf5yVq/JFu/07\nZD4LlvPIzpI1myjQyDlXWdsn/N10xDEFl067dkpLvF01fayI7A2UbUOl9QARAQAB\ntCRtaXNlIHJlbGVhc2VzIDxyZWxlYXNlQG1pc2UuamR4LmRldj6JAlQEEwEIAD4W\nIQQkhT7J9lXOgLSObDqLgcnRdBOgbQUCZZQ1FgIbAwUJB4YfbAULCQgHAgYVCgkI\nCwIEFgIDAQIeAQIXgAAKCRCLgcnRdBOgbSpGEACYUWzLT0rJU+BB4K8qF80l5GCz\npffI2CkTVgmrdIVIlDnKFjNYFDd3RJsFx5oK77cnyHzKhQzZ0vsm9Q7EGgTMPC7t\n2m2dNMo8t8YGMveUO9JNhr5GE9OuXGWkxW0FC5lOkkzR1CqsqBAGRa/962t6TAdI\nWjxB0U/Dw/CI7Mx59hRDi4em7Fal366DkBw2didyz8xnRatCsBuua+tgIklAawfl\ny4kVO99ezGveFElAizns1h7GwANyw5OSQWRDiqXuqnsvC3jMC35aYJmbyBDYgzdD\nMQke/uxqvvAWLmmZLEO66urkvDPcgVtC1RJyLVqLSybq6eyBgCs7GwPugKq+T9Gx\ncW/LPodyWzCqXSua1yC/JXAivbcHOyO//hhwNVtaSSfkV6jqQJwiXizFSFiEvhRj\ntD8tWo2Ivq4j/77J8gpWw0ca/PUPu5hSSSSp/HH89/8S/o67IeqK5t9EpiIBF0j8\nilX2k0veGA1bOgHuMoB6HYOSlEObhDcCqqNcrRPYBhWH2V2U6u4iQptahOTRGO0d\nTU+oLDAo+bwB8Xo8ZTEm3QaZVhK/FWzJLVj2lxQodAf0NRbu2JtMdNnovLjI8Czm\n/7N/0rvtcWOu2fCKE5NtEgVZzN4GC1KNSnc4M1ml6KyRDI+/ooIdUiKKfkqmSeih\nXHj/dpbh3RKIaDuzErkCDQRllDUWARAAxZLN856RxZH4FbPQDZZQn/TgGfrLZehu\ng1M5DyEP5UNj2r+/l2dWybWzkE7jVK2sbaqHeGUuH18e0jpWIWCNHg0Y4aqZc8HK\n/Sgn7APWzNOSbl2ZAjXwoEtKpP7RyOSPr+1f3t1S5qy0DjdGCeCbnnQ2Ju5//lR5\nN2QdiuM+XtBW7oW0g5qkmsonCLpjqrAaQwnHJUw5TUTlQODz3OX6ZG1gIksI4kdw\nwmTGqzpxDx58gfptYHQ+U55k4qUDG4d7XGOo4KAiJ990s+W3D+O6I//z7eKQMfbC\n30+K/sizvi46QICuj44BtCA9fy6h9fRiK1f0gDqBopUNR9QHIP5RPvQtVjAtaYFl\nAD5ZWcnFyrF79dzCC/SbGtAwi249UdCbuVwTH1U+csjkp11K0KMzcD60RQXEKi0U\nISF4STqsPyN0Dp08M6qS8i5334f4AZN61piFkrxDiEsvGE11WsWDDXzkvNNGLN1f\npG+O58pBHbAVsUxDmuUrbHXAtXhxiXsqU1PA9l6QZnB0qe6/i2EjCXM+/0eF2jfP\ndfRGCJEb9SdBR2fBZufbE7ytCBwTSNpN7h5GyMPCIq4vLluEQVRm3izwU5RMrvj6\nBaNgE9gnCspmRmpVABodRbzAflBrGb4Bole5iUwT7puB1J87rkxe+8m6XcJFAGJN\niX0CLLUEKHkAEQEAAYkCPAQYAQgAJhYhBCSFPsn2Vc6AtI5sOouBydF0E6BtBQJl\nlDUWAhsMBQkHhh9sAAoJEIuBydF0E6BtoV4P/193pUjxgyojg0G2ELaxrBqtKAVN\ng1FJABox/C2Lx334W1UyoMiSFkMIdky6xl8zzz3HciQHVeGzRvW//eM810LxLkVK\nWNkVoTgyJV5Voo+TmXyfjaghFQqygCv/MboTcRE3mJh2P0ND+aEJKaXs/2l5suyB\nlq/yOWPFYxR5DhVpQLfuctTUAoxQsi6gYu1b7h3d4x22RFo3RL4g/fDvNGIeDpmQ\nBEOfUDrHfoFt5jZiYmW9E+yrP4hMeV4ujiIb3a0iSx0u4NBGHmGVg+QQ6E6knF6w\niz4LPL6Ze/F8eg7b9gvqeDMh7sJ0eJIkBKly/0OUKWedH+FSZASdTK183QuPB3x3\nsgna2IHECprmdWPWdnGet+8cbQB5R59Qs8WgV9k2JOzUOjzKkl5mQv2uHcSRGGze\n8Uosc4bAr0dDtCUsIY6w8E7lq2V75EV/BWtbyySWjt1ZXHsykNh1QBUZw7e/krBZ\nj4Mt0KoL2YxkI4qnqoVAEqd20Rxvisd+RyeA7L3AnxGlaPVj7iibu4XW9P5stUom\njLQEDnl7ewfTeBbeIH7+EXuTGZttnKN7BOestODBGsD1r7zTKrJfL+MvGO4rG9KT\n9/Q4udpmXDdm4Lze+xm7bLfl3wkXpLLoVs2fndegkj/sSBL2IbhtMjOerEbafK6K\nS1GIqgTqW7TRaQRg\n=yIM2\n-----END PGP PUBLIC KEY BLOCK-----\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Build Shell Script for Mise in Fish\nDESCRIPTION: A bash shim script that rebuilds and runs the mise tool directly from the source code repository using Cargo. This allows testing the latest code changes without installing the built binary.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/how-i-use-mise.md#2025-04-17_snippet_0\n\nLANGUAGE: fish\nCODE:\n```\n#!/usr/bin/env bash\nset -euo pipefail\n\nexec cargo run -q --all-features --manifest-path ~/src/mise/Cargo.toml -- \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redactions for Sensitive Information\nDESCRIPTION: Demonstrates how to set up redactions to hide sensitive information like API keys or passwords from task output. Redactions can be specific environment variables or glob patterns.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/task-configuration.md#2025-04-17_snippet_20\n\nLANGUAGE: toml\nCODE:\n```\nredactions = [\"API_KEY\", \"PASSWORD\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Treesitter for Mise File Detection\nDESCRIPTION: Lua configuration for Treesitter to detect Mise files using lazy.nvim package manager. Adds a custom predicate to identify TOML files containing 'mise' in their filename.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/mise-cookbook/neovim.md#2025-04-17_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n{\n  \"nvim-treesitter/nvim-treesitter\",\n  init = function()\n    require(\"vim.treesitter.query\").add_predicate(\"is-mise?\", function(_, _, bufnr, _)\n      local filepath = vim.api.nvim_buf_get_name(tonumber(bufnr) or 0)\n      local filename = vim.fn.fnamemodify(filepath, \":t\")\n      return string.match(filename, \".*mise.*%.toml$\")\n    end, { force = true, all = false })\n  end,\n},\n```\n\n----------------------------------------\n\nTITLE: Listing mise cache Subcommands in Markdown\nDESCRIPTION: Enumerates the available subcommands for 'mise cache', including 'clear' and 'prune', with links to their respective documentation pages.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/cache.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- [`mise cache clear [PLUGIN]...`](/cli/cache/clear.md)\n- [`mise cache prune [--dry-run] [-v --verbose...] [PLUGIN]...`](/cli/cache/prune.md)\n```\n\n----------------------------------------\n\nTITLE: Mise Shebang Usage in TypeScript\nDESCRIPTION: Example of using mise in a shebang to specify Node.js version for script execution\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tips-and-tricks.md#2025-04-17_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n#!/usr/bin/env -S mise x node@20 -- node\n// \"env -S\" allows multiple arguments in a shebang\nconsole.log(`Running node: ${process.version}`);\n```\n\n----------------------------------------\n\nTITLE: Testing Package Installation for mise on Amazon Linux 2\nDESCRIPTION: Shell commands to test the installation of mise using yum on Amazon Linux 2, including setting up the repository and installing the package.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -ti --rm amazonlinux\nyum install -y yum-utils\nyum-config-manager --add-repo https://mise.jdx.dev/rpm/mise.repo\nyum install -y mise\nmise -v\n```\n\n----------------------------------------\n\nTITLE: Setting a Configuration Value with mise settings set Command\nDESCRIPTION: Example of using the mise settings set command to enable the idiomatic_version_file setting in the mise configuration file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/settings/set.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise settings idiomatic_version_file=true\n```\n\n----------------------------------------\n\nTITLE: Running Windows E2E Tests for mise Project in PowerShell\nDESCRIPTION: PowerShell commands to run Windows-specific end-to-end tests, including an option to run tests matching a specific pattern.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\npwsh e2e-win\\run.ps1\npwsh e2e-win\\run.ps1 task # run tests matching `*task*`\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables Through Shims\nDESCRIPTION: Shows how environment variables defined in mise are available when using tool shims, which are executable proxies that mise creates for installed tools.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmise set NODE_ENV=production\nmise use node@22\n# using the absolute path for the example\n~/.local/share/mise/shims/node --eval 'console.log(process.env.NODE_ENV)'\n```\n\n----------------------------------------\n\nTITLE: Inline ASDF Reference\nDESCRIPTION: Simple inline code reference to asdf tool used in context of the documentation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/asdf.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`asdf`\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Node with asdf\nDESCRIPTION: Demonstrates the multi-step process required in asdf to install a plugin, install a runtime, and set it as the local version.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/comparison-to-asdf.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nasdf plugin add node\nasdf install node latest:20\nasdf local node latest:20\n```\n\n----------------------------------------\n\nTITLE: Plugin Repository Template Configuration\nDESCRIPTION: Example of using templates in plugin repository URLs to include environment variables for authentication.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/plugins.md#2025-04-17_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[plugins]\nmy-plugin = \"https://{{ get_env(name='GIT_USR', default='empty') }}:{{ get_env(name='GIT_PWD', default='empty') }}@github.com/foo/my-plugin.git\"\n```\n\n----------------------------------------\n\nTITLE: Displaying PGP Public Key for Security Communications\nDESCRIPTION: This code block contains the PGP public key for the project maintainer (@jdx). It can be used to encrypt security-related communications sent to the project.\nSOURCE: https://github.com/jdx/mise/blob/main/SECURITY.md#2025-04-17_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-----BEGIN PGP PUBLIC KEY BLOCK-----\n\nmQINBGQfPjUBEADAtjLxcoJlHYNwvN8xYEai/waWZpnKvNWP86kYuX5xqb/GR1wZ\nTQ4usQPcpTj60XQaF3jUwtW8/1PH/gQv0516qAIlqHVvvMyGD/u2iwr+U8JtIGWf\nB87mL2aMvg6GqXoR3dgCtYkHd839Z0wVFOvgkzWdx3jOWE73KQpN0PeunBNsCw/K\n4wR/gEBNfiAbi0i3RIbpSKHTtRZ1e/1+1o2jxz48a/IdCzFzN9zOplfhASo0C/AB\nPSjlFnvlB5jjWqyGln6ycunEn0dhdzi7f1MdfNmj19tqqQYKYIy3AOFiRNqKLlWo\ndOPTJMYdCD8CkLh5GTOWq0xZZ/s5bHiw2KuQxyZsm2eo4MH7pOEHuH1yFjyrbli7\n/8/iLfaGx89aK7Krt+dd60XMPQh8rGjClVdC8GQS8XMjerjdk5g22dd7s5n7shGm\ngZalidw3CFppO2po1YR8yNc5UJz7gzGCZsQfyC1Ao376BFM/cXlnje6RG2Unsy8O\nuKE2O5vFOmppoWmaM5KcCFLa7NP2Wu8Y8CaoDZaBZeGFHffvxSKh/J69ECVvTM91\nXn8B0COiiqkYKpqNf+KgGXzQvj3ABKG0Q27T5VUHW3F1jdPKjbMmdbqorRDr7v0a\nPZSwqrlTenZVCVdEsRHsHevIZ6+neZ3hHEk66EtaG45Qkna2EahhS+IPGQARAQAB\ntCBKZWZmcmV5IERpY2tleSA8Z3BnQGpkeGNvZGUuY29tPokCVAQTAQgAPhYhBDFB\nttCiFJlyWolR/FCs4PPr5+BHBQJkHz41AhsDBQkHhh9cBQsJCAcCBhUKCQgLAgQW\nAgMBAh4BAheAAAoJEFCs4PPr5+BHUsIP/0AL/lTNZ22yynIE7EXwWsLTolrNHiaz\n79s/MH04i1IazkElvY7MVL0iTqozYnSaEJ7BhtNPUkoCX79cLHKv/nD9CJF8qwcK\nGgYCirXGEol30P1s2K2c1Rr4wcul+SamQ2vHrBes+/0ksuvK9yAZV6y8nWCukO4Z\n5B4DVHuvQ0UmJ6tWf53sFpRnLWB+8VB1n931uZXeHjxo2s5/x3E2FknH6/l8/+Ey\nd9T44RzlOwkZYTrw08O1PLLNGkOxdD3sGi7Q/JSPHmlhBBqpnqxT4wOFJQnluJji\ned4qlB4oXa2CM2VkbSdmQ6ls67Qju0/LKsYwd7QNpo/fODXR3MLIQDUo9ZzKmvgB\nr9L2BQDz4vOKdYSm2MLyGsB6W9GsVHVjnGnZWhiKOOH1jxnI2y6btJZNQYemMtLo\nY7DlTogRaq1h62WHkm3cbPqXYpfEBH9AJRAZgyUbc703BJfr5i8epoRajP/jxTVi\nPtIak2/kJu6adxJ+nutz+1ycc8XBlfAnSTj87wKXM0nsboK3Kyd5cZ2m7CFF7tIY\ny/Ti7jVbVNMH6OugoCLYXnINIW3QFBKhM7/uouukN3ww5zJ58w0mqkySzxiY4jr8\nOOLW9oARmq4gvevRmnd97hmmu1h0A3TPOzbr97zF8xCjKkf04IpdfMPEccNg1jWK\nQEqn+1m3XNdDuQINBGQfPjUBEACu7zv4/gNxUDCwbnkkK7wQL3sX7yZKkhGZgpXR\nH9h+mAf/DlhKo8yqJiR0C6z+QcsSM1a3RvHHBdRnsun/jEzScP2o5ShQKLCq68qb\nJlSh/FSQQTYTEjC/t4ccMLIYbsccJd+Xg9cRuqGN/jE/SWNwUGrf2FuKQQkTTcrN\ntiHwXHLxUlIHYckyKq4UggL8icaONSpwAWLEwi0u2muMMZHzFnHT33W8+iFHmjCd\nosHZaArWXiQlYQFeoxvnT2hkUK/uQC7ZANup4ebuQr4ZLgo7kWUOKlwpucNFscFy\noIVuNeVYq0ijz1urNMnzGF6Pz0SVjr91lyHGmAdODpYz6vZZ5ipDDrXXDHTyET5c\nj8zUYkbbtxEaE0+MpAN8wrtxmtXt3QMV4MfncJzvKmhFcaRFjvgG+PtC4cxVsmLK\nBD9WKxni0e1jcWPtoRw5LvAinqgTzCF4iw9rUwITWBVg+T2d6kTokTW7J2mrGNSp\nWiE/Gq2+3kzs0BOIPc9h2tzTkhHbsZz9ZTFXLzutxKzfamBVGr0B7MR9wnOyVgQW\ncohmCEhcEIgKiPnmcobXiWE/NpvbtyE7KBVXVFEDvIdpWUf9OaUZNau5gwg6MJRF\nzdWLj2Y7LYK1NbmJWrzg8V3KeBCMxKlVS463DPWMQzfmpMYYravpW1gkekXqxMP6\ngBvRfwARAQABiQI8BBgBCAAmFiEEMUG20KIUmXJaiVH8UKzg8+vn4EcFAmQfPjUC\nGwwFCQeGH1wACgkQUKzg8+vn4EdAbxAAr4SMo8VvAhFlJd/WQlifgREj0On6UFee\nYCKNA8/1cJnXCxb+kQJXLCcYBHGq07NV9OkzCZBLiGM13f0DF/YfcDbUq1ISivoo\nJwTUII48Q1aQseWc3JxkgLPi9CjxE48ynEeFi582Bsz0auzUGk1dbVfJbbpDKd83\n/vZImxN+sfa9no/7l5wsNVIOhPSQrv3BDjMAuqkUIZHNYsp6i3Fo4cj7e6qy4HpG\nXaUnyTsivI2ifr3AYgbg6sgcXmgi0WRipnrX9D99usXfNxi5PNEI3mJF8Tq8bOjy\nJDZd5duJ2Or4yH/LrAOmrCQxC5nNmsHm2uGHRcab4lUDMoPWkDFOzbtY/iAJtQGZ\nVg9o7cVhAXFSgHzSwC8bjGwPwNdmL719wzAvpOB0qmeHo5oqrKcCyz7qgryYvOhH\nZjHmfc++FDuQGhYv8yNAMpPkg2ZfZSD7AM0KigNp0bsOYPhM6n0EqCzoX5SjzSp3\nv+asbUPbVC5G7/YbkNhyohf9iNXqyMrWnYL86LnXIMTi6Sto01BLfRs0QiqztahQ\nJuSHoeBpoXY/yMoHYQCd/O7D12Ha5XDdYfXP0Yf9glS+r+YaVYXxcJ6O/DfV6QEk\nMFPobhR7zlCShd7TdY1a41uxTGB+Wmn4DO0s/wzSgdgxIzG+TM1X47owe7l5RiI1\n1wxfuzN2+ao=\n=/CHf\n-----END PGP PUBLIC KEY BLOCK-----\n\n```\n\n----------------------------------------\n\nTITLE: Viewing Decrypted Environment Variables with Mise\nDESCRIPTION: Example output of the 'mise env' command showing how mise automatically decrypts and provides access to the environment variables from the encrypted file.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/secrets.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ mise env\nexport AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nexport AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\n```\n\n----------------------------------------\n\nTITLE: Importing Settings Component in Vue\nDESCRIPTION: Vue script setup block that imports the Settings component from the components directory to display mise configuration options.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/configuration/settings.md#2025-04-17_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport Settings from '/components/settings.vue';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Using the Mise Sync Command\nDESCRIPTION: Shows the basic usage syntax for the `mise sync` command and its source code location in the repository.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/sync.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `mise sync`\n\n- **Usage**: `mise sync <SUBCOMMAND>`\n- **Source code**: [`src/cli/sync/mod.rs`](https://github.com/jdx/mise/blob/main/src/cli/sync/mod.rs)\n```\n\n----------------------------------------\n\nTITLE: Redacting Sensitive Environment Variables\nDESCRIPTION: Demonstrates how to mark certain environment variables as sensitive by setting redact=true, which prevents their values from being displayed in command outputs.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/environments/index.md#2025-04-17_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[env]\nSECRET = { value = \"my_secret\", redact = true }\n_.file = { path = [\".env.json\"], redact = true }\n```\n\n----------------------------------------\n\nTITLE: Installing Mise using Nix package manager\nDESCRIPTION: This snippet shows how to install Mise using the Nix package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/installing-mise.md#2025-04-17_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnix-env -iA mise\n```\n\n----------------------------------------\n\nTITLE: Displaying mise PATH Entries Example\nDESCRIPTION: Example showing how to use the mise path command to display the current PATH entries that are being managed by mise. The output shows binary paths for different installed tools like Node.js, Rust, and Python.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/doctor/path.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mise path\n/home/user/.local/share/mise/installs/node/24.0.0/bin\n/home/user/.local/share/mise/installs/rust/1.90.0/bin\n/home/user/.local/share/mise/installs/python/3.10.0/bin\n```\n\n----------------------------------------\n\nTITLE: Testing Package Installation for mise on Fedora\nDESCRIPTION: Shell commands to test the installation of mise using dnf on Fedora, including setting up the repository and installing the package.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/contributing.md#2025-04-17_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -ti --rm fedora\ndnf install -y dnf-plugins-core\ndnf config-manager addrepo --from-repofile=https://mise.jdx.dev/rpm/mise.repo\ndnf install -y mise\nmise -v\n```\n\n----------------------------------------\n\nTITLE: Filtering Tags with Regular Expressions\nDESCRIPTION: Configuration example showing how to filter release tags using regular expressions to exclude unwanted versions.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"ubi:cargo-bins/cargo-binstall\" = { version = \"latest\", tag_regex = \"^\\\\d+\\\\.\" }\n```\n\n----------------------------------------\n\nTITLE: Cargo Lock Configuration\nDESCRIPTION: TOML configuration for disabling locked mode when installing from a Git repository\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/cargo.md#2025-04-17_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"cargo:https://github.com/username/demo\" = { version = \"latest\", locked = false }\n```\n\n----------------------------------------\n\nTITLE: Using the Mise Cache Prune Command\nDESCRIPTION: Command usage syntax for the mise cache prune command, showing the basic format and available flags for removing stale cache files.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/cache/prune.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nmise cache prune [--dry-run] [-v --verbose...] [PLUGIN]...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Arguments to uvx Installation\nDESCRIPTION: Configuration example for passing additional arguments to uvx when installing a package.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/pipx.md#2025-04-17_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[tools]\n\"pipx:ansible-core\" = { version = \"latest\", uvx_args = \"--with ansible\" }\n```\n\n----------------------------------------\n\nTITLE: Basic Task Documentation Generation in Bash\nDESCRIPTION: Example showing the basic usage of the mise generate task-docs command without any flags or options.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/cli/generate/task-docs.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmise generate task-docs\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Experimental Flag Usage in Markdown\nDESCRIPTION: Illustrates how new functionality and changes can be opted into using settings like 'experimental = true'. This allows testing of new features without waiting for a major release.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/roadmap.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n`experimental = true`\n```\n\n----------------------------------------\n\nTITLE: Using Which Command with Mise PATH Activation\nDESCRIPTION: Example showing how the which command returns the actual executable path with mise PATH activation.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n$ which node\n~/.mise/installs/node/20/bin/node\n```\n\n----------------------------------------\n\nTITLE: Conditional Flag Usage\nDESCRIPTION: Shows how to use a flag in a conditional statement\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_14\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.maybeClean]\nrun = \"\"\"\nif [ '{{flag(name='clean')}}' = 'true' ]; then\n  echo 'cleaning'\nfi\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Watch Files Hook in TOML\nDESCRIPTION: Configuration for watching file changes and executing scripts when specified patterns match.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/hooks.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n[[watch_files]]\npatterns = [\"src/**/*.rs\"]\nrun = \"cargo fmt\"\n```\n\n----------------------------------------\n\nTITLE: Flag Environment Variables Example\nDESCRIPTION: Demonstrates how flags are accessible in the environment and via templates\nSOURCE: https://github.com/jdx/mise/blob/main/docs/tasks/toml-tasks.md#2025-04-17_snippet_17\n\nLANGUAGE: toml\nCODE:\n```\n[tasks.usage-env-example]\nusage = '''\nflag \"-m --myflag <myflag>\" default=\"false\"\n'''\nrun = [\n'echo \"Command 1: $usage_myflag\"',\n'echo \"Command 2: {{flag(name=\"myflag\", default=\"false\")}} $usage_myflag\"',\n]\n```\n\n----------------------------------------\n\nTITLE: Performance Impact Example with Shims in Loops\nDESCRIPTION: Example of a bash script using node in a loop, demonstrating a performance consideration when using shims.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/shims.md#2025-04-17_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nfor i in {1..500}; do\n    node script.js\ndone\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Ubi with Direct Commands\nDESCRIPTION: Example showing how to use the ubi command directly to troubleshoot issues with resolving packages.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/dev-tools/backends/ubi.md#2025-04-17_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nubi -p jdx/mise\n./bin/mise -v # yes this technically means you could do `mise use ubi:jdx/mise` though I don't know why you would\n```\n\n----------------------------------------\n\nTITLE: Displaying Calver Version Format in Markdown\nDESCRIPTION: Shows the Calver versioning format used by Mise, which follows the pattern YYYY.MM.RELEASE. This format represents the date of release rather than compatibility or feature count.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/roadmap.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`2024.1.0`\n```\n\n----------------------------------------\n\nTITLE: Styling CSS for the VitePress Homepage\nDESCRIPTION: CSS styling for the 'formerly' class used in the homepage to style the pronunciation guide for the project name with a smaller font size and gray color.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/index.md#2025-04-17_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n<style>\n.formerly {\n    font-size: 0.7em;\n    color: #666;\n}\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Multiple Tools Globally\nDESCRIPTION: Commands to install specific versions of Node.js and Go globally using mise.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ mise use --global node@22 go@1\n$ node -v\nv22.x.x\n$ go version\ngo version go1.x.x macos/arm64\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Global Python Version with Mise\nDESCRIPTION: Command to install the latest version of Python 3.11.x and make it the global default in Mise.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/lang/python.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmise use -g python@3.11\n```\n\n----------------------------------------\n\nTITLE: Installing mise on Windows with chocolatey\nDESCRIPTION: Command to install mise on Windows using the chocolatey package manager.\nSOURCE: https://github.com/jdx/mise/blob/main/docs/getting-started.md#2025-04-17_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nchoco install mise\n```\n\n----------------------------------------\n\nTITLE: Running a Defined Task\nDESCRIPTION: Command to run a task defined in the mise.toml configuration.\nSOURCE: https://github.com/jdx/mise/blob/main/README.md#2025-04-17_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n$ mise run build\nbuilding...\n```"
  }
]