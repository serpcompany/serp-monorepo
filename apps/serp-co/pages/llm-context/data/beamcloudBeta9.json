[
  {
    "owner": "beam-cloud",
    "repo": "beta9",
    "content": "TITLE: Defining Serverless AI Endpoint in Python with Beam\nDESCRIPTION: This snippet demonstrates how to create a serverless endpoint function using the Beta9 framework. The code defines a function that squares an integer input and decorates it with @endpoint to specify resource requirements, including GPU type.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beta9 import endpoint\n\n\n# This will run on a remote A100-40 in your cluster\n@endpoint(cpu=1, memory=128, gpu=\"A100-40\")\ndef square(i: int):\n    return i**2\n```\n\n----------------------------------------\n\nTITLE: Implementing Parallel Function Execution with Beta9 SDK in Python\nDESCRIPTION: Demonstrates how to decorate and execute a function in parallel using Beta9's infrastructure. The example shows a square function running with specified CPU and GPU resources, mapped across multiple inputs. Each function invocation runs in an isolated runc container.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/sdk/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom beta9 import function\n\n@function(\n    cpu=0.25,\n    gpu=\"L4\",\n)\ndef square(i: int):\n    return i**2\n\ndef main():\n    numbers = list(range(10))\n    squared = []\n\n    for result in square.map(numbers):\n        squared.append(result)\n\n    print(\"numbers:\", numbers)\n    print(\"squared:\", sorted(squared))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Sample Beta9 Application Using Remote Function Execution\nDESCRIPTION: Python code demonstrating a sample Beta9 application. It defines a remote function for squaring numbers and uses it to process a list of integers in parallel.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/docs/zh/zh_cn/README.md#2025-04-18_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom beta9 import function\n\n\n@function(cpu=8)\ndef square(i: int):\n    return i**2\n\n\ndef main():\n    numbers = list(range(10))\n    squared = []\n\n     # 为列表中的每个项目运行远程容器\n    for result in square.map(numbers):\n        squared.append(result)\n```\n\n----------------------------------------\n\nTITLE: Running a Python Function on an On-Prem Worker Pool\nDESCRIPTION: This Python example shows how to define a function that will run on a specific GPU type (H100) in your worker pool. The code uses Beam's function decorator to specify hardware requirements and remote execution.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/docs/opa/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom beam import function\n\n@function(gpu=\"H100\")\ndef handler():\n    return {\"message\": \"This is running on your worker pool!\"}\n\nif __name__ == \"__main__\":\n    handler.remote()\n```\n\n----------------------------------------\n\nTITLE: Deploying Functions with the Beta9 CLI\nDESCRIPTION: This snippet shows the command to deploy a Python function to Beam and the resulting curl command for invoking the deployed endpoint. It illustrates the deployment process and authentication requirements.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ beta9 deploy app.py:square --name inference\n=> Building image\n=> Using cached image\n=> Deployed 🎉\n\ncurl -X POST 'https://inference.beam.cloud/v1' \\\n-H 'Authorization: Bearer [YOUR_AUTH_TOKEN]' \\\n-H 'Content-Type: application/json' \\\n-d '{}'\n```\n\n----------------------------------------\n\nTITLE: Connecting Bare-Metal Servers to Beam Cluster\nDESCRIPTION: This snippet demonstrates how to connect a GPU server to a Beam cluster using the CLI and an installation script. It shows the machine creation command and the resulting cURL command that needs to be run on the target machine.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ beta9 machine create --pool lambda-a100-40\n\n=> Created machine with ID: '9541cbd2'. Use the following command to set up the node:\n\n#!/bin/bash\nsudo curl -L -o agent https://release.beam.cloud/agent/agent && \\\nsudo chmod +x agent && \\\nsudo ./agent --token \"AUTH_TOKEN\" \\\n  --machine-id \"9541cbd2\" \\\n  --tailscale-url \"\" \\\n  --tailscale-auth \"AUTH_TOKEN\" \\\n  --pool-name \"lambda-a100-40\" \\\n  --provider-name \"lambda\"\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Machines in Beam Cluster\nDESCRIPTION: This snippet shows how to view all machines in a Beam cluster using the CLI. It displays information about each connected server including CPU, memory, GPU type, status, and pool assignment.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ beta9 machine list\n\n| ID       | CPU     | Memory     | GPU     | Status     | Pool        |\n|----------|---------|------------|---------|------------|-------------|\n| edc9c2d2 | 30,000m | 222.16 GiB | A10G    | registered | lambda-a10g |\n| d87ad026 | 30,000m | 216.25 GiB | A100-40 | registered | gcp-a100-40 |\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Machine and Adding to a Worker Pool\nDESCRIPTION: This command creates a new machine entry in Beam and returns the necessary setup command to configure the agent on your physical hardware. The output includes tokens for authentication and network setup.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/docs/opa/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ beam machine create --pool my-h100-pool\n\n=> Created machine with ID: 'c11d3030'. Use the following command to setup the node:\n# -- Agent setup\nsudo curl -L -o agent https://release.beam.cloud/agent/agent && \\\nsudo chmod +x agent && \\\nsudo ./agent --token \"MY_TOKEN\" \\\n    --machine-id \"c11d3030\" \\\n    --tailscale-url \"\" \\\n    --tailscale-auth \"tskey-auth\" \\\n    --pool-name \"my-h100-pool\" \\\n    --provider-name \"generic\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Worker Pool in Beam\nDESCRIPTION: This command creates a new worker pool with specified GPU type and count. The pool is a logical grouping of workers with similar attributes and is the first step in setting up on-premise resources.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/docs/opa/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbeam pool create --name my-h100-pool --gpu-type A100 --default-gpu-count 1\n```\n\n----------------------------------------\n\nTITLE: Defining Entity-Relationship Diagram for Beam Cloud Beta9 using Mermaid\nDESCRIPTION: This Mermaid code defines an entity-relationship diagram for the Beam Cloud Beta9 project. It outlines seven main entities (WORKSPACE, TOKEN, VOLUME, DEPLOYMENT, TASK, STUB, and OBJECT) with their attributes, primary keys, foreign keys, and relationships. The diagram helps visualize the database structure and connections between different components of the system.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/docs/datamodels/backend.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n\n    WORKSPACE {\n        varchar name\n        uint id PK\n        varchar external_id\n        datetime created_at\n        datetime updated_at\n    }\n\n    TOKEN {\n        uint id PK\n        varchar external_id\n        varchar key\n        datetime created_at\n        datetime updated_at\n        bool active\n        bool resuable\n        uint workspace_id FK\n    }\n\n    VOLUME {\n        uint id PK\n        varchar external_id\n        varchar name\n        datetime created_at\n        uint workspace_id FK\n    }\n\n    DEPLOYMENT {\n        uint id PK\n        varchar external_id\n        uint version\n        enum status\n        datetime created_at\n        datetime updated_at\n        uint stub_id FK\n        uint workspace_id FK\n    }\n\n    TASK {\n        uint id PK\n        varchar external_id\n        datetime created_at\n        datetime started_at\n        bool ended_at\n        uint stub_id FK\n        uint workspace_id FK\n    }\n\n    STUB {\n        uint id PK\n        varchar external_id\n        varchar name\n        enum type\n        JSON config\n        uint object_id FK\n        uint workspace_id FK\n        datetime created_at\n        datetime updated_at\n    }\n\n    OBJECT {\n        uint id PK\n        varchar external_id\n        varchar hash\n        int64 size\n        datetime created_at\n        uint workspace_id FK\n    }\n\n    WORKSPACE ||--o{ TOKEN : \" \"\n    WORKSPACE ||--o{ VOLUME : \" \"\n    WORKSPACE ||--o{ DEPLOYMENT : \" \"\n    WORKSPACE ||--o{ TASK : \" \"\n    WORKSPACE ||--o{ OBJECT : \" \"\n    OBJECT ||--|| STUB : \" \"\n    TASK ||--|| STUB : \" \"\n    DEPLOYMENT ||--|| STUB : \" \"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Machines in Beam\nDESCRIPTION: This command lists all machines registered in your Beam inventory, showing their hardware specifications, status, and which pool they belong to. This is useful for verifying that machines are properly connected.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/docs/opa/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ beam machine list\n\n| ID       | CPU     | Memory     | GPU     | Status     | Pool         |\n|----------|---------|------------|---------|------------|------------|\n| edc9c2d2 | 30,000m | 222.16 GiB | H100    | registered | my-h100-pool |\n```\n\n----------------------------------------\n\nTITLE: Setting Up Beta9 SDK with Make\nDESCRIPTION: This bash command runs the setup-sdk make target to install and configure the Beta9 Python SDK. It sets up the necessary Python environment for working with the Beta9 platform.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nmake setup-sdk\n```\n\n----------------------------------------\n\nTITLE: Setting Up Beta9 SDK\nDESCRIPTION: Bash command to set up the Beta9 SDK using the 'setup-sdk' make target. This command installs the Poetry package manager.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/docs/zh/zh_cn/README.md#2025-04-18_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nmake setup-sdk\n```\n\n----------------------------------------\n\nTITLE: Setting Up Beta9 Server with Make\nDESCRIPTION: This is a simple bash command to set up the Beta9 server using the make utility. It runs the setup target which automates the installation process for local development with k3d.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Setting Up Beta9 Server Environment\nDESCRIPTION: Bash command to set up the Beta9 server environment using the 'setup' make target. This command may override some existing tools.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/docs/zh/zh_cn/README.md#2025-04-18_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nmake setup\n```\n\n----------------------------------------\n\nTITLE: Testing Beta9 Gateway Health Endpoint\nDESCRIPTION: This shell command demonstrates how to verify that the local Beta9 gateway is functioning correctly by making a curl request to the health endpoint. It's used after DNS configuration to confirm the setup works.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://beta9-gateway.beta9.svc.cluster.local:1994/api/v1/health\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Documentation for Beta9 SDK\nDESCRIPTION: Commands to generate markdown documentation for the Beta9 SDK. Two options are provided - one to simply generate the markdown and another to generate and copy the output to clipboard on macOS systems.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/sdk/bin/docgen.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Generates markdown\n./bin/docgen.py\n\n# Generates markdown and copies to your clipboard (on macOS)\n./bin/docgen.py | pbcopy\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local DNS Configuration for Beta9\nDESCRIPTION: This snippet provides shell commands to configure local DNS using dnsmasq for multipart uploads and range downloads. It sets up DNS resolution for the .cluster.local domain to point to the local machine.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nbrew install dnsmasq\necho 'address=/cluster.local/127.0.0.1' >> /opt/homebrew/etc/dnsmasq.conf\nsudo bash -c 'mkdir -p /etc/resolver'\nsudo bash -c 'echo \"nameserver 127.0.0.1\" > /etc/resolver/cluster.local'\nsudo brew services start dnsmasq\n```\n\n----------------------------------------\n\nTITLE: Initializing and Applying Terraform Configuration for Beta9 Deployment\nDESCRIPTION: Commands to initialize the Terraform environment and apply the configuration to provision resources on Crusoe Cloud for Beta9. This creates the necessary infrastructure based on the defined configuration.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/deploy/crusoe/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nterraform init\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Deploying and Scaling Fly.io Application\nDESCRIPTION: Imports secrets, deploys the application, and scales it to run one instance in the IAD region. This multi-step process configures the complete deployment.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/deploy/fly-io/README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncat .env | fly secrets import\nfly deploy\nfly scale count 1 --max-per-region=1 --region=iad\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdomain URLs in YAML\nDESCRIPTION: This YAML configuration snippet shows how to enable host-based URLs in the Beta9 gateway. The configuration sets the invokeURLType to 'host' for the gateway component.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngateway:\n  invokeURLType: host\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Secret Configuration for JuiceFS Gateway\nDESCRIPTION: Creates a .env file containing necessary configuration secrets including Tailscale auth key, JuiceFS credentials, and MinIO root credentials. These environment variables are required for the gateway deployment.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/deploy/fly-io/README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat <<'EOF' | tee > .env\nTAILSCALE_AUTHKEY=\"my-tailscale-authkey\"\nJUICEFS_NAME=\"my-filesystem\"\nJUICEFS_REDIS_URI=\"rediss://username:password@hostname:6379/0\"\nJUICEFS_BUCKET=\"https://fly.storage.tigris.dev/my-bucket-name\"\nJUICEFS_ACCESS_KEY=\"my-access-key\"\nJUICEFS_SECRET_KEY=\"my-secret-key\"\nMINIO_ROOT_USER=\"my-username\"\nMINIO_ROOT_PASSWORD=\"my-password\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Python Requirements List\nDESCRIPTION: Specifies Python package dependencies with pinned versions for a cloud application. Includes web frameworks (FastAPI), ASGI servers (uvicorn, gunicorn), networking libraries, and utility packages.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/pkg/abstractions/image/base_requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfastapi==0.109.0\ngunicorn==22.0.0\nuvicorn==0.29.0\nrequests==2.32.2\npackaging==21.3\nMarkupSafe==2.0.0\nwebsockets==11.0.3\npydantic==2.5.3\nbetterproto-beta9==2.0.0b7\ngrpcio==1.60.0\nhttpx==0.24.1\nbson==0.5.10\npsutil==5.9.6\ncloudpickle==3.0.0\nrich==13.7.0\nwatchdog==4.0.0\nsix==1.16.0\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Poetry for Beta9 Documentation Generator\nDESCRIPTION: Installs all dependencies, including development dependencies, using Poetry package management tool. This is a prerequisite step before generating the documentation.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/sdk/bin/docgen.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Configuring Tailscale Environment File\nDESCRIPTION: Instructions for creating and placing a .tailscale.env file containing Tailscale configuration environment variables. The file must be present in the directory before applying the configuration.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/manifests/kustomize/components/tailscale/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# tailscale\\n\\nThis requires a secret .env file named `.tailscale.env`. This should contain environment variables used to configure tailscale.\\n\\nWrite the file to this directory before applying.\n```\n\n----------------------------------------\n\nTITLE: Monitoring Beta9 Setup via SSH Log Tailing\nDESCRIPTION: Command to monitor the Beta9 setup process by tailing the user-data log file over SSH. This allows real-time visibility into the deployment and configuration process on the Crusoe Cloud instance.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/deploy/crusoe/README.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nssh -i ~/.ssh/id_crusoecloud ubuntu@<instance-ip> 'tail -n+1 -f /var/log/user-data.log'\n```\n\n----------------------------------------\n\nTITLE: Launching Fly.io Application\nDESCRIPTION: Initializes a new fly.io application with specified organization and name. This command modifies the fly.toml configuration file without deploying.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/deploy/fly-io/README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfly launch --org my-org --name my-deployment --no-deploy --copy-config --yes\n```\n\n----------------------------------------\n\nTITLE: Required Environment File Reference\nDESCRIPTION: Specifies the requirement for a .fluent-bit.env file containing configuration environment variables for Fluent Bit setup.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/manifests/kustomize/components/monitoring/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# monitoring\\n\\nThis requires a secret .env file named `.fluent-bit.env`. This should contain environment variables used to configure fluent-bit.\\n\\nWrite the file to this directory before applying.\n```\n\n----------------------------------------\n\nTITLE: Destroying Fly.io Application\nDESCRIPTION: Removes the deployed application from fly.io platform completely.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/deploy/fly-io/README.md#2025-04-18_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nfly app destroy --yes my-deployment\n```\n\n----------------------------------------\n\nTITLE: Creating Terraform Variables File for Crusoe Cloud Deployment\nDESCRIPTION: Defines the SSH key path in the terraform.tfvars file which is required for the Beta9 deployment on Crusoe Cloud. The SSH key is used for secure access to the deployed instance.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/deploy/crusoe/README.md#2025-04-18_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nssh_key_path  = \"~/.ssh/id_crusoecloud.pub\"\n```\n\n----------------------------------------\n\nTITLE: Specifying pathspec Package Dependency in Python\nDESCRIPTION: This line specifies that the project requires the pathspec Python package with exact version 0.12.1. The pathspec library provides utilities for matching pathname patterns, often used for gitignore-style pattern matching.\nSOURCE: https://github.com/beam-cloud/beta9/blob/main/sdk/vendors.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npathspec==0.12.1\n```"
  }
]