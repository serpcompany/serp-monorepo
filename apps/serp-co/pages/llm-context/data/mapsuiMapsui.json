[
  {
    "owner": "mapsui",
    "repo": "mapsui",
    "content": "TITLE: Initializing MapControl in MAUI C#\nDESCRIPTION: C# code to initialize a MapControl and add an OpenStreetMap tile layer in a MAUI application.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic MainPage()\n{\n    InitializeComponent();\n    \n    var mapControl = new Mapsui.UI.Maui.MapControl();\n    mapControl.Map?.Layers.Add(Mapsui.Tiling.OpenStreetMap.CreateTileLayer());\n    Content = mapControl;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MapControl in WinUI C#\nDESCRIPTION: C# code to initialize a MapControl and add an OpenStreetMap tile layer in a WinUI application.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic MainPage()\n{\n    this.InitializeComponent();\n    MyMap.Map.Layers.Add(OpenStreetMap.CreateTileLayer());\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying a Map with Mapsui on iOS - C#\nDESCRIPTION: Initializes a Mapsui MapControl within the ViewDidLoad method of a ViewController in an iOS app. It creates a new map, adds an OpenStreetMap tile layer, and assigns the map to the control, which is set as the root view. Dependencies include Mapsui and Mapsui.UI.iOS, with required parameters being the View's bounds for layout. Output is an interactive map displayed on the device.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\npublic override void ViewDidLoad()\n{\n    base.ViewDidLoad();\n\n    var mapControl = new MapControl(View.Bounds);\n    var map = new Map();\n    map.Layers.Add(OpenStreetMap.CreateTileLayer());\n    mapControl.Map = map;\n    View = mapControl;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MapControl to WinUI XAML\nDESCRIPTION: XAML code to add a MapControl to the Grid in a WinUI application.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_16\n\nLANGUAGE: xml\nCODE:\n```\n<Grid>\n    <winui:MapControl x:Name=\"MyMap\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Stretch\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Initializing Mapsui MapControl in Windows Forms - C#\nDESCRIPTION: Sets up a Mapsui MapControl inside the constructor of a Windows Forms Form (typically Form1.cs). The control is added to the form's Controls collection, an OpenStreetMap tile layer is appended, and the map appears in the form's UI. Dependencies include Mapsui.WindowsForms and Mapsui.Tiling.OpenStreetMap; no parameters are required beyond usage in a form constructor.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_28\n\nLANGUAGE: csharp\nCODE:\n```\nvar mapControl = new MapControl();\nControls.Add(mapControl);\nmapControl.Map.Layers.Add(Mapsui.Tiling.OpenStreetMap.CreateTileLayer());\n```\n\n----------------------------------------\n\nTITLE: Adding MapControl to Blazor Component\nDESCRIPTION: Razor markup and C# code to add a MapControl to a Blazor component and initialize it with an OpenStreetMap tile layer.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n@using Mapsui.UI.Blazor\n\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col border rounded p-2 canvas-container\">\n            <MapControlComponent @ref=\"_mapControl\" />\n        </div>\n    </div>\n</div>\n\n<style>\n    .canvas-container canvas {\n        width: 100%;\n        height: 80vh;\n    }\n</style>\n\n@code \n{\n    private MapControl? _mapControl;\n\n    protected override void OnAfterRender(bool firstRender)\n    {\n        base.OnAfterRender(firstRender);\n        if (firstRender)\n        {\n            if (_mapControl != null)\n                _mapControl.Map?.Layers.Add(Mapsui.Tiling.OpenStreetMap.CreateTileLayer());\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Point Projection in Mapsui with C#\nDESCRIPTION: This code snippet demonstrates how to create a map with point projection in Mapsui. It includes setting up the map, adding layers, and projecting points using different coordinate systems.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/codesamples/ProjectionSample.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n[!code-csharp[Main](../../Samples/Mapsui.Samples.Common/Maps/Projection/PointProjectionSample.cs \"Projection Sample\")]\n```\n\n----------------------------------------\n\nTITLE: Adding MapControl to Uno Platform XAML\nDESCRIPTION: XAML code to add a MapControl to the Grid in an Uno Platform application.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<Grid>\n    <mapsui:MapControl x:Name=\"MyMap\" VerticalAlignment=\"Stretch\" HorizontalAlignment=\"Stretch\" />\n</Grid>\n```\n\n----------------------------------------\n\nTITLE: Initializing and Displaying a Map with Mapsui on Android - C#\nDESCRIPTION: Sets up and binds a Mapsui MapControl in the MainActivity of an Android project after loading the layout. It locates the MapControl by ID, creates a new Map instance, adds an OpenStreetMap tile layer, and assigns the map to the control. Dependencies include Mapsui, Mapsui.UI.Android, and Mapsui.Utilities.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nprotected override void OnCreate(Bundle savedInstanceState)\n{\n    base.OnCreate(savedInstanceState);\n\n    // Set our view from the \\\"main\\\" layout resource\n    SetContentView(Resource.Layout.Main);\n\n    var mapControl = FindViewById<MapControl>(Resource.Id.mapcontrol);\n    var map = new Map();\n    map.Layers.Add(OpenStreetMap.CreateTileLayer());\n    mapControl.Map = map;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the ISkiaStyleRenderer Interface - C#\nDESCRIPTION: This interface defines the contract for custom style renderers using SkiaSharp in Mapsui. Any class implementing 'ISkiaStyleRenderer' must provide the 'Draw' method, which receives the SkiaSharp canvas, the viewport, the map layer, the feature to render, the applied style, a render service, and the rendering iteration. Dependencies include SkiaSharp ('SKCanvas') and Mapsui types. The method returns a boolean indicating whether rendering succeeded. Proper implementation of this interface allows for customized drawing logic for map features using custom styles.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/custom-style-renders.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ISkiaStyleRenderer : IStyleRenderer\n{\n  bool Draw(SKCanvas canvas, IReadOnlyViewport viewport, ILayer layer, IFeature feature, IStyle style, IRenderService renderService, long iteration);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Mapsui MapControl in Eto.Forms MainForm - C#\nDESCRIPTION: This code instantiates a Mapsui.UI.Eto.MapControl within the constructor of an Eto.Forms MainForm. It subsequently adds an OpenStreetMap tile layer to the map, then sets the form's Content property to the control, rendering the map. Dependencies include Mapsui.Eto, and usage assumes the application has access to Mapsui.Tiling.OpenStreetMap.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nvar mapControl = new Mapsui.UI.Eto.MapControl();\nmapControl.Map.Layers.Add(Mapsui.Tiling.OpenStreetMap.CreateTileLayer());\nContent = mapControl;\n```\n\n----------------------------------------\n\nTITLE: Initializing MapControl in WPF C#\nDESCRIPTION: C# code to initialize a MapControl and add an OpenStreetMap tile layer in a WPF application.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar mapControl = new Mapsui.UI.Wpf.MapControl();\nmapControl.Map?.Layers.Add(Mapsui.Tiling.OpenStreetMap.CreateTileLayer());\nContent = mapControl;\n```\n\n----------------------------------------\n\nTITLE: Implementing Projection in Mapsui with C#\nDESCRIPTION: This code sample demonstrates how to set up a map with projection in Mapsui. It creates a map, adds a tile layer and a point layer, and handles the projection of coordinates from EPSG:4326 to EPSG:3857.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/projections.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic static Map CreateMap()\n{\n    var map = new Map\n    {\n        CRS = \"EPSG:3857\",\n        Transformation = new MinimalTransformation()\n    };\n\n    map.Layers.Add(OpenStreetMap.CreateTileLayer());\n    map.Layers.Add(CreatePointLayer());\n    return map;\n}\n\nprivate static ILayer CreatePointLayer()\n{\n    var dataSource = new MemoryProvider(new[]{ new Feature(new Point(0, 0)) });\n    return new Layer\n    {\n        Name = \"Point Layer\",\n        DataSource = new ProjectingProvider(dataSource)\n        {\n            CRS = \"EPSG:4326\"\n        },\n        Style = SymbolStyles.CreatePinStyle()\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MapControl in Avalonia C#\nDESCRIPTION: C# code to initialize a MapControl and add an OpenStreetMap tile layer in an Avalonia application.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar mapControl = new Mapsui.UI.Avalonia.MapControl();\nmapControl.Map?.Layers.Add(Mapsui.Tiling.OpenStreetMap.CreateTileLayer());\nContent = mapControl;\n```\n\n----------------------------------------\n\nTITLE: Setting Custom User-Agent for OpenStreetMap Tile Layer in C#\nDESCRIPTION: This snippet demonstrates how to add an OpenStreetMap tile layer with a custom user-agent to prevent API blocking. It's recommended to use an app-specific user-agent.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMapControl.Map.Layers.Add(OpenStreetMap.CreateTileLayer(\"your-user-agent\"));\n```\n\n----------------------------------------\n\nTITLE: Initializing MapControl in Uno Platform C#\nDESCRIPTION: C# code to initialize a MapControl and add an OpenStreetMap tile layer in an Uno Platform application.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic MainPage()\n{\n    this.InitializeComponent();\n    MyMap.Map.Layers.Add(OpenStreetMap.CreateTileLayer());\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning ImageSource in C# for Mapsui v5\nDESCRIPTION: Demonstrates various ways to assign ImageSource to a style object in Mapsui v5. It shows examples of using different path schemes including http(s), file, embedded resources, SVG content, and base64 content.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/imagesource.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmyStyle.ImageSource = \"https://mapsui.com/images/logo.svg\";\nmyStyle.ImageSource = $\"file://{Environment.SpecialFolder.LocalApplicationData}/example.png\"\nmyStyle.ImageSource = \"embedded://Mapsui.Resources.Images.Pin.svg\"\nmyStyle.ImageSource = \"svg-content://<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"36\\\" height=\\\"56\\\"><path d=\\\"M18 .34C8.325.34.5 8.168.5 17.81c0 3.339.962 6.441 2.594 9.094H3l7.82 15.117L18 55.903l7.187-13.895L33 26.903h-.063c1.632-2.653 2.594-5.755 2.594-9.094C35.531 8.169 27.675.34 18 .34zm0 9.438a6.5 6.5 0 1 1 0 13 6.5 6.5 0 0 1 0-13z\\\" fill=\\\"#ffffff\\\" stroke=\\\"#000000\\\"/></svg>)]\"\nmyStyle.ImageSource = \"base64-content://PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIzNiIgaGVpZ2h0PSI1NiI+PHBhdGggZD0iTTE4IC4zNEM4LjMyNS4zNC41IDguMTY4LjUgMTcuODFjMCAzLjMzOS45NjIgNi40NDEgMi41OTQgOS4wOTRIM2w3LjgyIDE1LjExN0wxOCA1NS45MDNsNy4xODctMTMuODk1TDMzIDI2LjkwM2gtLjA2M2MxLjYzMi0yLjY1MyAyLjU5NC01Ljc1NSAyLjU5NC05LjA5NEMzNS41MzEgOC4xNjkgMjcuNjc1LjM0IDE4IC4zNHptMCA5LjQzOGE2LjUgNi41IDAgMSAxIDAgMTMgNi41IDYuNSAwIDAgMSAwLTEzeiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjMDAwMDAwIi8+PC9zdmc+)]\"\nmyStyle.ImageSource = \"base64-content://iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAIAAAAC64paAAAACXBIWXMAAC4jAAAuIwF4pT92AAAAcUlEQVQ4y+VUyw7AIAgrxgtf4v9/HZ5kF90M6JK9siVruGGlNFVSVZxFwAXMyURrlZwPTy4i2F3qIdmfJsfNW4/mVmAetqI/alV5w9uku3buUlGzIQJAU7ItS1a11cmraTHdf4dkeDEzAAJmL4te+0kWaRI0VGH3VHwAAAAASUVORK5CYII=\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Mapsui Logging in C#\nDESCRIPTION: This snippet demonstrates how to set up basic logging for Mapsui. It attaches a delegate to the Mapsui.Logging.Logger.LogDelegate event to capture and output log messages.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/logging.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMapsui.Logging.Logger.LogDelegate += (level, message, ex) =>\n{\n    Console.WriteLine($\"{message} {ex?.Message}\"); // <-- Put a break point here, most UI platforms do not show the console logging.\n    // todo: Forward to your own logger\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Style Renderers in Mapsui v5\nDESCRIPTION: Use the static MapRenderer.RegisterStyleRenderer(...) method for registering and mapControl.Renderer.TryGetStyleRenderer method when drawing.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/v5.0-upgrade-guide.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n'IRenderer' does not contain a definition for 'StyleRenderers'\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Asset File Using FileSystem\nDESCRIPTION: Demonstrates how to load a MAUI asset file asynchronously using the FileSystem API and read its contents using StreamReader.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Maui.MapView/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Style Renderer in Mapsui - C#\nDESCRIPTION: This snippet demonstrates how to associate a custom style type with its corresponding style renderer in a Mapsui map control. The 'StyleRenderers.Add' method registers the 'CustomStyle' type with an instance of 'SkiaCustomStyleRenderer', allowing Mapsui to route rendering requests for this style to the appropriate implementation. Required dependencies include the Mapsui map control infrastructure and custom classes implementing 'IStyle' and 'ISkiaStyleRenderer'. Input parameters are the type of the custom style and the instance of the renderer; there are no outputs, but the effect is that custom style features are rendered with the specified logic.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/custom-style-renders.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nmapControl.Renderer.StyleRenderers.Add(typeof(CustomStyle), new SkiaCustomStyleRenderer());\n```\n\n----------------------------------------\n\nTITLE: Loading MAUI Assets Using FileSystem\nDESCRIPTION: C# code demonstrating how to load raw assets at runtime using the FileSystem class from MAUI Essentials. Shows async file access pattern with proper stream handling.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Maui/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nasync Task LoadMauiAsset()\n{\n\tusing var stream = await FileSystem.OpenAppPackageFileAsync(\"AboutAssets.txt\");\n\tusing var reader = new StreamReader(stream);\n\n\tvar contents = reader.ReadToEnd();\n}\n```\n\n----------------------------------------\n\nTITLE: Complete PerformanceWidget Implementation in C#\nDESCRIPTION: Provides a complete code snippet for implementing the PerformanceWidget, including initialization, event handling, and renderer registration. This snippet combines all the previous steps into a single, cohesive implementation.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/performance-widget.md#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nif (mapControl.Performance == null)\n    mapControl. Performance = new Utilities.Performance();\n\nvar widget = new Widgets.Performance.PerformanceWidget(mapControl.Performance);\n\nwidget.WidgetTouched += (sender, args) =>\n{\n    mapControl?.Performance.Clear();\n    mapControl?.RefreshGraphics();\n\n    args.Handled = true;\n};\n\nmapControl.Map.Widgets.Add(widget);\nMapsui.Rendering.SkiaMapRenderer.RegisterWidgetRenderer(typeof(Widgets.Performance.PerformanceWidget), \n  new Rendering.Skia.SkiaWidgets.PerformanceWidgetRenderer(10, 10, 12, SkiaSharp.SKColors.Black, SkiaSharp.SKColors.White));\n```\n\n----------------------------------------\n\nTITLE: Initializing Performance Object for MapControl in C#\nDESCRIPTION: Creates a new Performance object for the MapControl to store performance values. The Performance object is initialized with a capacity of 10 recent measurements.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/performance-widget.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nif (mapControl.Performance == null)\n    mapControl.Performance = new Utilities.Performance(10);\n```\n\n----------------------------------------\n\nTITLE: Forwarding Mapsui Logs to ILogger in C#\nDESCRIPTION: This code shows how to forward Mapsui logs to the Microsoft.Extensions.Logging.ILogger. It creates an extension method that attaches to the Mapsui.Logging.Logger.LogDelegate and maps Mapsui log levels to ILogger log levels.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/logging.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void AttachMapsuiLogging(this IServiceProvider serviceProvider)\n{\n    var logger = serviceProvider.GetRequiredService<ILogger<MyLoggerCategory>>();\n\n    var mapsuiPrefix = \"[Mapsui]\";\n\n    Mapsui.Logging.Logger.LogDelegate += (level, message, ex) => {\n        if (level == Mapsui.Logging.LogLevel.Error)\n            logger.LogError(ex, $\"{mapsuiPrefix} {message}\");\n        else if (level == Mapsui.Logging.LogLevel.Warning)\n            logger.LogWarning(ex, $\"{mapsuiPrefix} {message}\");\n        else if (level == Mapsui.Logging.LogLevel.Information)\n            logger.LogInformation(ex, $\"{mapsuiPrefix} {message}\");\n        else if (level == Mapsui.Logging.LogLevel.Debug)\n            logger.LogDebug(ex, $\"{mapsuiPrefix} {message}\");\n        else if (level == Mapsui.Logging.LogLevel.Trace)\n            logger.LogTrace(ex, $\"{mapsuiPrefix} {message}\");\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding PerformanceWidget to MapControl in C#\nDESCRIPTION: Adds the created PerformanceWidget to the list of widgets in the MapControl. This makes the widget available for rendering on the map.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/performance-widget.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nmapControl.Map.Widgets.Add(widget);\n```\n\n----------------------------------------\n\nTITLE: Adding Mapsui Namespaces in Android Project - C#\nDESCRIPTION: Imports the required Mapsui and Mapsui UI namespaces as well as utility functions needed for Android setup. These using statements enable access to map and control-related types used to set up the map and integrate with OpenStreetMap in the activity. There are no parameters or outputs.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nusing Mapsui;\nusing Mapsui.Utilities;\nusing Mapsui.UI.Android;\n```\n\n----------------------------------------\n\nTITLE: Resolving 'IsMapInfoLayer' Compile Error in Mapsui v5\nDESCRIPTION: This error occurs because 'IsMapInfoLayer' was deprecated. Instead, use GetMapInfo on the EventArgs and supply the list of layers you want MapInfo of.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/v5.0-upgrade-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n'Layer' does not contain a definition for 'IsMapInfoLayer'\n```\n\n----------------------------------------\n\nTITLE: Adding Mapsui Namespaces in iOS Project - C#\nDESCRIPTION: These using statements import the Mapsui core library, the iOS UI integration, and utility functions required for map setup. Including these namespaces in the ViewController.cs file enables subsequent code to reference Mapsui types and helpers. There are no parameters or outputs; the dependencies are Mapsui, Mapsui.UI.iOS, and Mapsui.Utilities.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nusing Mapsui;\nusing Mapsui.UI.iOS;\nusing Mapsui.Utilities;\n```\n\n----------------------------------------\n\nTITLE: Handling PerformanceWidget Touch Events in C#\nDESCRIPTION: Adds an event handler for the WidgetTouched event of the PerformanceWidget. When touched, it clears the Performance object's values and refreshes the map graphics.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/performance-widget.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nwidget.WidgetTouched += (sender, args) =>\n{\n    mapControl?.Performance.Clear();\n    mapControl?.RefreshGraphics();\n\n    args.Handled = true;\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving MapInfo in Mapsui V5\nDESCRIPTION: Demonstrates how to obtain MapInfo by calling the GetMapInfo function on event handlers in Mapsui V5. This method allows for more flexible specification of which layers to include in the MapInfo.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/mapinfo.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nThe `MapInfo` class contains information about what is visible on a specific location on the map. You can get `MapInfo` by calling the `GetMapInfo` function on the EventArgs of manipulation event handlers (like `Info`, `Tapped`, `PointerPressed`, `PointerReleased`, `PointerMoved`). GetMapInfo takes a parameter to specify which layers to include in the MapInfo.\n```\n\n----------------------------------------\n\nTITLE: Registering Widget Renderers in Mapsui v5\nDESCRIPTION: Use the static MapRenderer.RegisterWidgetRenderer(...) method for registering and mapControl.Renderer.TryGetWidgetRenderer method when drawing.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/v5.0-upgrade-guide.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n'IRenderer' does not contain a definition for 'WidgetRenders'\n```\n\n----------------------------------------\n\nTITLE: Registering PerformanceWidget Renderer in C#\nDESCRIPTION: Registers a custom renderer for the PerformanceWidget using SkiaSharp. This renderer defines the widget's position, text size, and colors for display on the map.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/performance-widget.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMapsui.Rendering.SkiaMapRenderer.RegisterWidgetRenderer(typeof(Widgets.Performance.PerformanceWidget), \n  new Rendering.Skia.SkiaWidgets.PerformanceWidgetRenderer(10, 10, 12, SkiaSharp.SKColors.Black, SkiaSharp.SKColors.White));\n```\n\n----------------------------------------\n\nTITLE: Replacing RectFeature in Mapsui v5\nDESCRIPTION: RectFeature was removed to simplify the code. Use GeometryFeature with a polygon instead.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/v5.0-upgrade-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnew GeometryFeature(myRect.ToPolygon())\n```\n\n----------------------------------------\n\nTITLE: Accessing MapControl Dimensions in Mapsui v5\nDESCRIPTION: ScreenWidth and ScreenHeight properties were removed. Use MapControl.Map.Navigator.Viewport.Width and Height instead.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/v5.0-upgrade-guide.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nMapControl.Map.Navigator.Viewport.Width\n```\n\n----------------------------------------\n\nTITLE: Declaring Mapsui MapControl in Android Layout XML - XML\nDESCRIPTION: Defines the Mapsui MapControl UI element within a LinearLayout block in the Main.axml resource file for an Android app. This configuration enables the map control to be referenced and manipulated in the activity code. The layout uses match_parent for width and height to fill the screen, and assigns an id 'mapcontrol' for access from C#.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<LinearLayout xmlns:android=\\\"http://schemas.android.com/apk/res/android\\\"\\n    android:orientation=\\\"vertical\\\"\\n    android:layout_width=\\\"match_parent\\\"\\n    android:layout_height=\\\"match_parent\\\">\\n    <Mapsui.UI.Android.MapControl\\n        android:id=\\\"@+id/mapcontrol\\\"\\n        android:layout_width=\\\"match_parent\\\"\\n        android:layout_height=\\\"match_parent\\\" />\\n</LinearLayout>\n```\n\n----------------------------------------\n\nTITLE: Updating SymbolStyle BitmapId Usage in Mapsui v5\nDESCRIPTION: In v5, you can directly specify the path to the image source instead of using BitmapId and BitmapRegistry.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/v5.0-upgrade-guide.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n'SymbolStyle' does not contain a definition for 'BitmapId'\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.Android via NuGet Package Manager Console - Console\nDESCRIPTION: Installs the Mapsui.Android library into a .NET Android project using the NuGet Package Manager console. This package must be installed before any Mapsui Android UI controls or classes can be utilized. After installation, the Mapsui.Android types become available.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_21\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.Android\n```\n\n----------------------------------------\n\nTITLE: Enabling Mapsui Map and Widget Event Logging in C#\nDESCRIPTION: This snippet shows how to enable logging for Map and Widget pointer events in Mapsui. It sets the LogMapEvents and LogWidgetEvents properties of Logger.Settings to true.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/logging.md#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nLogger.Settings.LogMapEvents = true;\nLogger.Settings.LogWidgetEvents = true;\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.Eto via NuGet Package Manager Console - Console\nDESCRIPTION: Installs the Mapsui.Eto library into an Eto.Forms application using the NuGet Package Manager console. This dependency is required before referencing Mapsui controls or types in your Eto.Forms project code.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_25\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.Eto\n```\n\n----------------------------------------\n\nTITLE: Disabling Mapsui Logging Display in Map in C#\nDESCRIPTION: This code demonstrates how to disable the display of Mapsui logs in the map. It sets the LoggingWidget.ShowLoggingInMap property to ActiveMode.No to prevent logs from being shown in the map.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/logging.md#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nLoggingWidget.ShowLoggingInMap = ActiveMode.No;\n```\n\n----------------------------------------\n\nTITLE: Enabling Mapsui Logging Display in Map in C#\nDESCRIPTION: This snippet shows how to enable the display of Mapsui logs directly in the map. It sets the LoggingWidget.ShowLoggingInMap property to ActiveMode.Yes to show logs in all cases.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/logging.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nLoggingWidget.ShowLoggingInMap = ActiveMode.Yes;\n```\n\n----------------------------------------\n\nTITLE: Creating PerformanceWidget in C#\nDESCRIPTION: Instantiates a new PerformanceWidget using the Performance object from the MapControl. This widget will display the performance metrics.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/performance-widget.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar widget = new Widgets.Performance.PerformanceWidget(mapControl.Performance);\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Builder for SkiaSharp in C#\nDESCRIPTION: Code snippet to configure the MAUI builder to use SkiaSharp, which is required for Mapsui.Maui.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nbuilder\n    .UseMauiApp<App>()\n    .UseSkiaSharp()\n    .ConfigureFonts(fonts =>  \n```\n\n----------------------------------------\n\nTITLE: Resolving 'Home' Method Compile Error in Mapsui v5\nDESCRIPTION: The 'Home' method was removed in v5. Use Navigator methods to specify the startup view, such as Map.Navigator.ZoomToBox(startupBox).\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/v5.0-upgrade-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n'Map' does not contain a definition for 'Home'\n```\n\n----------------------------------------\n\nTITLE: Searching for Sample Class in Mapsui Project\nDESCRIPTION: This snippet demonstrates how to search for a specific sample class in the Mapsui project. It uses the example of searching for the 'Points' sample, which would lead to the PointsSample.cs file.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/samples.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n\"Points\"\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.Wpf Package via NuGet\nDESCRIPTION: Command to install the Mapsui.Wpf NuGet package using the Package Manager Console.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_13\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.Wpf\n```\n\n----------------------------------------\n\nTITLE: Configuring Nullable Reference Types in C# Project\nDESCRIPTION: This code snippet shows how to enable nullable reference types in a C# project using the Nullable tag in the project file. It's mentioned as a future task for Mapsui 5 to improve code quality and reduce null reference exceptions.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/roadmap.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<Nullable>enable</Nullable>\n```\n\n----------------------------------------\n\nTITLE: Configuring MAUI Asset in Build Configuration\nDESCRIPTION: Shows how to include a raw asset file in the MAUI project build configuration using MauiAsset build action.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Maui.MapView/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"AboutAssets.txt\" />\n```\n\n----------------------------------------\n\nTITLE: Locating Generated Test Images in Mapsui\nDESCRIPTION: Specifies the file path where generated test images are written for comparison in Mapsui's rendering tests. This path is used for storing newly generated images during test execution.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/rendering-tests.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{test project folder}\\bin\\Debug\\net6.0\\Resources\\Images\\Generated\n```\n\n----------------------------------------\n\nTITLE: Structuring Scale-Specific Image Assets in Cross-Platform Projects\nDESCRIPTION: Two examples showing different approaches to organizing image assets for multiple display densities. The first approach uses filename suffixes with scale indicators, while the second approach uses separate folders for each scale.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Uno.WinUI/Mapsui.Samples.Uno.WinUI/Assets/SharedAssets.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\\Assets\\Images\\logo.scale-100.png\n\\Assets\\Images\\logo.scale-200.png\n\\Assets\\Images\\logo.scale-400.png\n\n\\Assets\\Images\\scale-100\\logo.png\n\\Assets\\Images\\scale-200\\logo.png\n\\Assets\\Images\\scale-400\\logo.png\n```\n\n----------------------------------------\n\nTITLE: Locating Original Test Images in Mapsui\nDESCRIPTION: Specifies the file path where original test images are stored for comparison in Mapsui's rendering tests. These images are deployed with the build and serve as the baseline for regression testing.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/rendering-tests.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n{test project folder}\\bin\\Debug\\net6.0\\Resources\\Images\\Original\\\n```\n\n----------------------------------------\n\nTITLE: Importing SkiaSharp Namespace in C#\nDESCRIPTION: C# using statement to import the SkiaSharp.Views.Maui.Controls.Hosting namespace.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing SkiaSharp.Views.Maui.Controls.Hosting;\n```\n\n----------------------------------------\n\nTITLE: Installing MAUI Workload with Specific Manifest\nDESCRIPTION: Command to install MAUI workload using a specific manifest version, skipping manifest update\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Maui.MapView/Readme.txt#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndotnet workload install maui --skip-manifest-update\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Workload on MacOS\nDESCRIPTION: Command to install the iOS workload using dotnet CLI with sudo privileges. This is required for iOS development with Mapsui on MacOS.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.iOS/Readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo dotnet workload install ios\n```\n\n----------------------------------------\n\nTITLE: Installing MAUI Workload Using dotnet CLI\nDESCRIPTION: Command to install the MAUI workload for .NET development\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Maui.MapView/Readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet workload install maui\n```\n\n----------------------------------------\n\nTITLE: Creating New Avalonia Project via .NET CLI\nDESCRIPTION: Command to create a new Avalonia project using the .NET CLI.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_8\n\nLANGUAGE: console\nCODE:\n```\ndotnet new avalonia.app -o MyApp\n```\n\n----------------------------------------\n\nTITLE: Adding Local NuGet Source in Bash\nDESCRIPTION: This command adds a local directory as a NuGet package source. It should be run in the solution folder after placing the downloaded .nupkg file in the specified local directory.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/nuget-of-latest-build.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndotnet nuget add source \"C:\\LocalNuGets\" --name LocalNuGet\n```\n\n----------------------------------------\n\nTITLE: Updating Original Test Images in Mapsui\nDESCRIPTION: Specifies the file path where updated original test images should be copied when committing changes to git. This ensures that the repository contains the most up-to-date reference images for future tests.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/rendering-tests.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n{test project folder}\\Resources\\Images\\Original\\\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.Maui Package via NuGet\nDESCRIPTION: Command to install the Mapsui.Maui NuGet package using the Package Manager Console.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.Maui\n```\n\n----------------------------------------\n\nTITLE: Running Image Copy Script for Mapsui Tests\nDESCRIPTION: Provides the command to run a script that automates the process of copying updated test images to the correct location for git commits. This script simplifies the workflow for updating reference images.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/rendering-tests.md#2025-04-23_snippet_3\n\nLANGUAGE: batch\nCODE:\n```\nscripts\\test-image-copier.cmd\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.WinUI Package via NuGet\nDESCRIPTION: Command to install the Mapsui.WinUI NuGet package using the Package Manager Console.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_15\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.WinUI\n```\n\n----------------------------------------\n\nTITLE: Generated R Class for Android Resource References in C#\nDESCRIPTION: Example of the automatically generated R class that Android creates to expose resource IDs. This class contains nested classes for different resource types (drawable, layout, strings) with constants representing each resource item.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Uno.WinUI/Mapsui.Samples.Uno.WinUI/Platforms/Android/Resources/AboutResources.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class R {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.Uno.WinUI Package via NuGet\nDESCRIPTION: Command to install the Mapsui.Uno.WinUI NuGet package using the Package Manager Console.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.Uno.WinUI\n```\n\n----------------------------------------\n\nTITLE: Including C# Projection Test Sample for Mapsui\nDESCRIPTION: This placeholder indicates the inclusion of C# code from the 'ProjectionTestSample.cs' file. This file is part of the Mapsui test suite and likely contains code samples or unit tests related to map projection transformations.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/codesamples/ProjectionTestSample.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n��[ ! c o d e - c s h a r p [ M a i n ] ( . . / . . / T e s t s / M a p s u i . T e s t s . C o m m o n / M a p s / P r o j e c t i o n T e s t S a m p l e . c s   \" P r o j e c t i o n T e s t S a m p l e \" ) ]\n```\n\n----------------------------------------\n\nTITLE: Adding Mapsui.Avalonia Package via .NET CLI\nDESCRIPTION: Command to add the Mapsui.Avalonia NuGet package to an Avalonia project using the .NET CLI.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_9\n\nLANGUAGE: console\nCODE:\n```\ndotnet add MyApp package Mapsui.Avalonia\n```\n\n----------------------------------------\n\nTITLE: Creating an Automatic Redirect in HTML for Mapsui Documentation\nDESCRIPTION: This HTML snippet creates an automatic page redirect using the meta refresh tag. It redirects users to the 'pages/Mapsui.html' page with a zero-second delay, effectively sending visitors immediately to the main Mapsui documentation page.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/api/index.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"refresh\" content=\"0; url=pages/Mapsui.html\">\n</head>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.Blazor Package via NuGet\nDESCRIPTION: Command to install the Mapsui.Blazor NuGet package using the Package Manager Console.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_11\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.Blazor\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Links and Images in Markdown\nDESCRIPTION: This snippet demonstrates how to create clickable image links in Markdown for showcasing projects. It includes the project name as a header, followed by an image that serves as a link to the project's website or app store page.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/projects-that-use-mapsui.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Breath Companion\n\n[![Breath Companion website](images/breath-companion.png)](https://software-notion.de/apps/breath-companion)\n\n### Squadra\n\n[![Squadra](images/squadra.png)](https://bertt.github.io/squadra/)\n\n### Rutas Tarija\n\n[![Rutas Tarija](images/rutas-tarija.png)](https://play.google.com/store/apps/details?id=com.eliandev.rtarija)\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.iOS via NuGet Package Manager Console - Console\nDESCRIPTION: Installs the Mapsui.iOS library into a .NET iOS project using the NuGet Package Manager console. This step is required before using Mapsui's map functionalities on iOS. No input or output is provided, but successful installation makes the Mapsui namespaces and controls available for use in project code.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_18\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.iOS\n```\n\n----------------------------------------\n\nTITLE: Coloring SVG Icons\nDESCRIPTION: CSS example for changing icon color using the fill property.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Blazor/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.icon-account-login {\n  fill: #f00;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mapsui.WindowsForms via NuGet Package Manager Console - Console\nDESCRIPTION: Installs the Mapsui.WindowsForms library in a Windows Forms project via the NuGet console, preparing the environment for usage of Mapsui's Windows Forms components. After this step, Mapsui map controls and types can be referenced in the form code.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_27\n\nLANGUAGE: console\nCODE:\n```\nPM> Install-Package Mapsui.WindowsForms\n```\n\n----------------------------------------\n\nTITLE: Installing Avalonia Templates via .NET CLI\nDESCRIPTION: Command to install Avalonia templates using the .NET CLI.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/docs/general/markdown/index.md#2025-04-23_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ndotnet new install Avalonia.Templates\n```\n\n----------------------------------------\n\nTITLE: Reading Android Assets in C#\nDESCRIPTION: This code snippet demonstrates how to read an asset file in an Android activity using the AssetManager. It shows the basic setup of an activity and how to open an input stream from an asset file.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Uno.WinUI/Mapsui.Samples.Uno.WinUI/Platforms/Android/Assets/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ReadAsset : Activity\n{\n\tprotected override void OnCreate (Bundle bundle)\n\t{\n\t\tbase.OnCreate (bundle);\n\n\t\tInputStream input = Assets.Open (\"my_asset.txt\");\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resources via Generated Resource Class in Android (C#)\nDESCRIPTION: This code snippet demonstrates the structure of the automatically generated Resource class in Android applications. The class provides constants with resource IDs for accessing drawable resources, layouts, and string values, allowing developers to reference resources without using direct file paths.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Mapsui.UI.Android/Resources/AboutResources.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Class for Android Resources in C#\nDESCRIPTION: This snippet shows the structure of the automatically generated Resource class in C# for Android applications. It demonstrates how different resource types (Drawable, Layout, Strings) are represented as nested classes with constant integer IDs for each resource.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Droid/Resources/AboutResources.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Resource {\n    public class Drawable {\n        public const int icon = 0x123;\n    }\n\n    public class Layout {\n        public const int main = 0x456;\n    }\n\n    public class Strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MauiAsset Build Action for Raw Assets\nDESCRIPTION: XML configuration in .csproj file that defines how raw assets should be included and deployed with the MAUI application. The LogicalName attribute determines the deployment path structure.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Maui/Resources/Raw/AboutAssets.txt#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<MauiAsset Include=\"Resources\\Raw\\**\" LogicalName=\"%(RecursiveDir)%(Filename)%(Extension)\" />\n```\n\n----------------------------------------\n\nTITLE: Using SVG Icons in HTML\nDESCRIPTION: Basic example of displaying an SVG icon from Open Iconic as an image element with alt text for accessibility.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Blazor/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"/open-iconic/svg/icon-name.svg\" alt=\"icon name\">\n```\n\n----------------------------------------\n\nTITLE: Implementing SVG Sprite Icons\nDESCRIPTION: Example of using icons from the SVG sprite sheet using SVG use element with proper class naming for styling.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Blazor/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<svg class=\"icon\">\n  <use xlink:href=\"open-iconic.svg#account-login\" class=\"icon-account-login\"></use>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Styling SVG Icon Dimensions\nDESCRIPTION: CSS rules for setting consistent icon dimensions using width and height properties.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Blazor/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.icon {\n  width: 16px;\n  height: 16px;\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Icon Font Integration\nDESCRIPTION: Examples of including and using Open Iconic with Bootstrap, including stylesheet linking and icon usage.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Blazor/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-bootstrap.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi oi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Foundation Icon Font Integration\nDESCRIPTION: Examples of including and using Open Iconic with Foundation, including stylesheet linking and icon usage.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Blazor/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic-foundation.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"fi-icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Standalone Icon Font Usage\nDESCRIPTION: Examples of using Open Iconic icon font without any framework, including stylesheet linking and basic icon implementation.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Blazor/wwwroot/css/open-iconic/README.md#2025-04-23_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/open-iconic/font/css/open-iconic.css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"oi\" data-glyph=\"icon-name\" title=\"icon name\" aria-hidden=\"true\"></span>\n```\n\n----------------------------------------\n\nTITLE: Android R Class Structure Example in C#\nDESCRIPTION: Example of how the Android build system generates an R class that contains resource IDs for accessing app resources. The class includes inner classes for different resource types (drawable, layout, strings) with constants representing each resource file.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Avalonia/Mapsui.Samples.Avalonia.Android/Resources/AboutResources.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class R {\n    public class drawable {\n        public const int icon = 0x123;\n    }\n\n    public class layout {\n        public const int main = 0x456;\n    }\n\n    public class strings {\n        public const int first_string = 0xabc;\n        public const int second_string = 0xbcd;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Custom Fonts from Assets in Android\nDESCRIPTION: This code snippet shows how to load a custom font from the assets folder in Android. It demonstrates the use of Typeface.CreateFromAsset method to create a Typeface object from a font file stored in the assets.\nSOURCE: https://github.com/mapsui/mapsui/blob/main/Samples/Mapsui.Samples.Uno.WinUI/Mapsui.Samples.Uno.WinUI/Platforms/Android/Assets/AboutAssets.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nTypeface tf = Typeface.CreateFromAsset (Context.Assets, \"fonts/samplefont.ttf\");\n```"
  }
]