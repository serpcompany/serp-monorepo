[
  {
    "owner": "volatilityfoundation",
    "repo": "volatility3",
    "content": "TITLE: Using windows.pslist Plugin in Volatility 3\nDESCRIPTION: This example demonstrates the use of the windows.pslist plugin to list running processes from a memory dump, showing the first 10 lines of output.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-windows-tutorial.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f MemDump.DMP windows.pslist | head -n 10\n    \n    Volatility 3 Framework 2.0.1\tPDB scanning finished                                \n\n    PID\tPPID\tImageFileName\tOffset(V)       Threads\tHandles\tSessionId\tWow64\tCreateTime\t    ExitTime            File output\n\n    4\t0\t    System\t        0xfa8000cbc040\t85\t    492\t    N/A\t        False\t2022-02-07      16:30:12.000000 \tN/A\tDisabled\n    276\t4\t    smss.exe\t    0xfa8001e04040\t2\t    29\t    N/A\t        False\t2022-02-07      16:30:12.000000 \tN/A\tDisabled\n    352\t336\t    csrss.exe\t    0xfa8002110b30\t9\t    375\t    0\t        False\t2022-02-07      16:30:13.000000 \tN/A\tDisabled\n    404\t336\t    wininit.exe\t    0xfa800219f060\t3\t    74\t    0\t        False\t2022-02-07      16:30:13.000000 \tN/A\tDisabled\n    412\t396\t    csrss.exe\t    0xfa80021c5b30\t9\t    224\t    1\t        False\t2022-02-07      16:30:13.000000 \tN/A\tDisabled\n    468\t396\t    winlogon.exe    0xfa8002284060\t5\t    113\t    1\t        False\t2022-02-07      16:30:14.000000 \tN/A\tDisabled\n```\n\n----------------------------------------\n\nTITLE: Using windows.pstree Plugin in Volatility 3\nDESCRIPTION: This example shows the use of the windows.pstree plugin to display parent-child relationships between processes, limited to the first 20 lines of output.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-windows-tutorial.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f MemDump.DMP windows.pstree | head -n 20\n    Volatility 3 Framework 2.0.1\tPDB scanning finished                                \n    \n    PID\tPPID\tImageFileName\tOffset(V)\tThreads\tHandles\tSessionId\tWow64\tCreateTime\tExitTime\n    \n    4\t0\tSystem\t0xfa8000cbc040\t85\t492\tN/A\tFalse\t2022-02-07 16:30:12.000000 \tN/A\n    * 276\t4\tsmss.exe\t0xfa8001e04040\t2\t29\tN/A\tFalse\t2022-02-07 16:30:12.000000 \tN/A\n    352\t336\tcsrss.exe\t0xfa8002110b30\t9\t375\t0\tFalse\t2022-02-07 16:30:13.000000 \tN/A\n    404\t336\twininit.exe\t0xfa800219f060\t3\t74\t0\tFalse\t2022-02-07 16:30:13.000000 \tN/A\n    * 504\t404\tservices.exe\t0xfa80022ccb30\t7\t190\t0\tFalse\t2022-02-07 16:30:14.000000 \tN/A\n    ** 960\t504\tsvchost.exe\t0xfa8001c17b30\t39\t1003\t0\tFalse\t2022-02-07 16:30:14.000000 \tN/A\n    ** 1216\t504\tsvchost.exe\t0xfa80026e0b30\t18\t311\t0\tFalse\t2022-02-07 16:30:15.000000 \tN/A\n    ** 1312\t504\tsvchost.exe\t0xfa8002740380\t19\t287\t0\tFalse\t2022-02-07 16:30:15.000000 \tN/A\n    ** 1984\t504\ttaskhost.exe\t0xfa8002eb1b30\t8\t129\t1\tFalse\t2022-02-07 16:30:27.000000 \tN/A\n    ** 804\t504\tsvchost.exe\t0xfa80024ca5f0\t20\t450\t0\tFalse\t2022-02-07 16:30:14.000000 \tN/A\n    *** 100\t804\taudiodg.exe\t0xfa80025b4b30\t6\t131\t0\tFalse\t2022-02-07 16:30:14.000000 \tN/A\n    ** 1568\t504\tSearchIndexer.\t0xfa800254b480\t12\t616\t0\tFalse\t2022-02-07 16:30:32.000000 \tN/A\n    ** 744\t504\tsvchost.exe\t0xfa8002477b30\t8\t265\t0\tFalse\t2022-02-07 16:30:14.000000 \tN/A\n    ** 1096\t504\tsvchost.exe\t0xfa800260db30\t14\t357\t0\tFalse\t2022-02-07 16:30:14.000000 \tN/A\n    ** 616\t504\tsvchost.exe\t0xfa8002b86ab0\t13\t314\t0\tFalse\t2022-02-07 16:32:16.000000 \tN/A\n    ** 624\t504\tsvchost.exe\t0xfa8002410630\t10\t350\t0\tFalse\t2022-02-07 16:30:14.000000 \tN/A\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Requirements in Volatility 3\nDESCRIPTION: Implements the get_requirements class method to specify the plugin's requirements, including module, list, and version requirements. This method is used to define configuration options and dependencies.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/simple-plugin.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n    _version = (1, 0, 0)\n    _required_framework_version = (2, 0, 0)\n\n    @classmethod\n    def get_requirements(cls):\n        return [\n            requirements.ModuleRequirement(\n                name = 'kernel',\n                description = 'Windows kernel',\n                architectures = [\"Intel32\", \"Intel64\"]\n            ),\n            requirements.ListRequirement(\n                name = 'pid',\n                element_type = int,\n                description = \"Process IDs to include (all other processes are excluded)\",\n                optional = True\n            ),\n            requirements.VersionRequirement(\n                name = 'pslist',\n                component = pslist.PsList,\n                version = (2, 0, 0)\n            ),\n        ]\n```\n\n----------------------------------------\n\nTITLE: Using windows.hashdump Plugin in Volatility 3\nDESCRIPTION: This example demonstrates the use of the windows.hashdump plugin to extract user account hashes from the memory dump.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-windows-tutorial.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f MemDump.DMP windows.hashdump \nVolatility 3 Framework 2.0.3\nProgress:  100.00\t\tPDB scanning finished\nUser\trid\tlmhash\tnthash\n\nAdministrator\t500\t    aad3b435b51404eeaad3b435b51404ee\t31d6cfe0d16ae931b73c59d7e0c089c0\nGuest\t        501\t    aad3b435b51404eeaad3b435b51404ee\t31d6cfe0d16ae931b73c59d7e0c089c0\nFrank Reynolds\t1000\taad3b435b51404eeaad3b435b51404ee\ta88d1e18706d3aa676e01e5943d15911\nHomeGroupUser$\t1002\taad3b435b51404eeaad3b435b51404ee\taf10ecac6ea817d2bb56e3e5c33ce1cd\nDennis\t        1003\taad3b435b51404eeaad3b435b51404ee\tcf96684bbc7877920adaa9663698bf54\n```\n\n----------------------------------------\n\nTITLE: Inheriting from PluginInterface in Python\nDESCRIPTION: Defines a DllList class that inherits from the PluginInterface, which is the base class for all Volatility 3 plugins.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/simple-plugin.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom volatility3.framework import interfaces\n\nclass DllList(interfaces.plugins.PluginInterface):\n```\n\n----------------------------------------\n\nTITLE: Running Volatility Windows Information Plugin\nDESCRIPTION: Executes the windows.info plugin on a memory sample to gather basic information and verify compatibility. This plugin helps determine if Volatility supports the sample type and provides system details.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvol -f /home/user/samples/stuxnet.vmem windows.info\n```\n\n----------------------------------------\n\nTITLE: Importing Volatility Plugins from Custom Paths\nDESCRIPTION: Adds custom plugin paths to the Volatility plugins module and imports all available plugins. The function returns any import failures encountered during the process.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nvolatility3.plugins.__path__ = <new_plugin_path> + constants.PLUGINS_PATH\nfailures = framework.import_files(volatility3.plugins, True)\n```\n\n----------------------------------------\n\nTITLE: Running Linux PSList Plugin in Volatility 3\nDESCRIPTION: This command uses the linux.pslist plugin to list running processes with their PIDs and PPIDs.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-linux-tutorial.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f memory.vmem linux.pslist\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Requirements Satisfaction\nDESCRIPTION: Verifies whether all configuration requirements for a plugin have been satisfied before running it. Returns an empty list if all requirements are met.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nunsatisfied = plugin.unsatisfied(context, plugin_config_path)\n```\n\n----------------------------------------\n\nTITLE: Using Linux PSTree Plugin in Volatility 3\nDESCRIPTION: This command demonstrates the linux.pstree plugin to display parent-child relationships between processes.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-linux-tutorial.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f memory.vmem linux.pstree\n```\n\n----------------------------------------\n\nTITLE: Rendering TreeGrid Results in Volatility3\nDESCRIPTION: Demonstrates a simple text renderer implementation for TreeGrid results. The code iterates through columns and uses a visitor pattern to display hierarchical data with proper indentation.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfor column in grid.columns:\n    print(column.name)\n\ndef visitor(node, _accumulator):\n    # Nodes always have a path value, giving them a path_depth of at least 1, we use max just in case\n    print(\"*\" * max(0, node.path_depth - 1), end = \" \")\n    for column_index in range(len(grid.columns)):\n        column = grid.columns[column_index]\n        print(repr(node.values[column_index]), end = '\\t')\n\n    print('')\n    return None\n\ngrid.populate(visitor, None)\n```\n\n----------------------------------------\n\nTITLE: Analyzing Bash History with Linux Bash Plugin in Volatility 3\nDESCRIPTION: This command uses the linux.bash plugin to retrieve bash command history from the memory dump.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-linux-tutorial.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f memory.vmem linux.bash\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Values in Volatility Context\nDESCRIPTION: Sets configuration values in the context hierarchy for a specific plugin parameter, using path_join to ensure proper configuration path construction.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfig_path = path_join(base_config_path, plugin.__class__.__name__, <plugin_parameter>)\ncontext.config['plugins.<plugin_class_name>.<plugin_parameter>'] = value\n```\n\n----------------------------------------\n\nTITLE: Examining Network Configuration with mac.ifconfig\nDESCRIPTION: Shows how to use the mac.ifconfig.Ifconfig plugin to retrieve network interface configurations from a macOS memory dump, including IP addresses, MAC addresses, and promiscuous mode status.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-mac-tutorial.rst#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f contact_me mac.ifconfig.Ifconfig\n\n    Volatility 3 Framework 2.4.2\n    Progress:  100.00               Stacking attempts finished\n    Interface       IP Address      Mac Address     Promiscuous\n\n    lo0                     False\n    lo0     127.0.0.1               False\n    lo0     ::1             False\n    lo0     fe80:1::1               False\n    gif0                    False\n    stf0                    False\n    en0     00:0C:29:89:8B:F0       00:0C:29:89:8B:F0       False\n    en0     fe80:4::10fb:c89d:217f:52ae     00:0C:29:89:8B:F0       False\n    en0     192.168.140.128 00:0C:29:89:8B:F0       False\n    utun0                   False\n    utun0   fe80:5::2a95:bb15:87e3:977c             False\n```\n\n----------------------------------------\n\nTITLE: Finding Available Automagic Modules in Volatility\nDESCRIPTION: Retrieves a list of pre-instantiated automagic objects with their configuration paths and contexts already provided.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\navailable_automagics = automagic.available(ctx)\n```\n\n----------------------------------------\n\nTITLE: Using Banners Plugin for Kernel Version Identification\nDESCRIPTION: Example of using the banners.Banners plugin to identify the Darwin kernel version in a macOS memory dump. This helps in locating or creating the correct symbol table for analysis.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-mac-tutorial.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f contact_me banners.Banners\n    \n    Volatility 3 Framework 2.4.2\n\n    Progress:  100.00               PDB scanning finished\n    Offset  Banner\n    \n    0x4d2c7d0       Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64\n    0xb42b180       Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64\n    0xcda9100       Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64\n    0x1275e7d0      Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64\n    0x1284fba4      Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64\n    0x34ad0180      Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64\n```\n\n----------------------------------------\n\nTITLE: Setting Up Volatility 3 Development Environment\nDESCRIPTION: Clones the Volatility 3 repository, creates a virtual environment, and installs the package in development mode with development dependencies. This allows for using the latest development version with proper isolation.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/volatilityfoundation/volatility3.git\ncd volatility3/\npython3 -m venv venv && . venv/bin/activate\npip install -e \".[dev]\"\n```\n\n----------------------------------------\n\nTITLE: Constructing and Running a Volatility Plugin\nDESCRIPTION: Instantiates a plugin with the configured context and sets up handlers for progress reporting and file output before execution.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nconstructed = plugin(context, plugin_config_path, progress_callback = progress_callback)\nconstructed.set_open_method(file_handler)\n```\n\n----------------------------------------\n\nTITLE: Installing Volatility 3 Dependencies with pip\nDESCRIPTION: Installs all required dependencies for Volatility 3 including optional components. The 'full' extra ensures all optional dependencies are installed, and the --user flag installs packages in the user's home directory.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --user -e \".[full]\"\n```\n\n----------------------------------------\n\nTITLE: Constructing and Running Volatility3 Plugin\nDESCRIPTION: Shows how to construct a plugin using the construct_plugin method and run it. The method handles automagics and configuration, accepting optional progress callback and file consumer parameters.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nconstructed = plugins.construct_plugin(ctx, automagics, plugin, base_config_path, progress_callback, file_consumer)\n\ntreegrid = constructed.run()\n```\n\n----------------------------------------\n\nTITLE: Installing Volatility 3 from PyPI\nDESCRIPTION: Installs the latest stable release of Volatility 3 from the Python Package Index (PyPI) using pip. Requires Python 3.8.0 or later.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install volatility3\n```\n\n----------------------------------------\n\nTITLE: Volshell Script Example for Extracting Memory\nDESCRIPTION: Example script that can be run within Volshell to load a custom layer and extract bytes from a particular offset into a new file. Demonstrates working with layers and file operations.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nimport volatility3.framework.layers.mynewlayer as mynewlayer\n\nlayer = cc(mynewlayer.MyNewLayer, on_top_of = 'primary', other_parameter = 'important')\nwith open('output.dmp', 'wb') as fp:\n    for i in range(0, 0x4000000, 0x1000):\n        data = layer.read(i, 0x1000, pad = True)\n        fp.write(data)\n```\n\n----------------------------------------\n\nTITLE: Displaying Volatility Command Syntax\nDESCRIPTION: Shows the command syntax for the Volatility3 command line tool, including all available options and parameters that can be specified when running the tool.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/vol-cli.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvolatility [-h] [-c CONFIG] [--parallelism [{processes,threads,off}]]\n           [-e EXTEND] [-p PLUGIN_DIRS] [-s SYMBOL_DIRS] [-v] [-l LOG]\n           [-o OUTPUT_DIR] [-q] [-r RENDERER] [-f FILE]\n           [--write-config] [--save-config SAVE_CONFIG]\n           [--clear-cache] [--cache-path CACHE_PATH]\n           [--offline]\n           [--single-location SINGLE_LOCATION]\n           [--stackers [STACKERS ...]]\n           [--single-swap-locations SINGLE_SWAP_LOCATIONS]\n           <plugin> ...\n```\n\n----------------------------------------\n\nTITLE: Running Plugins with Parameters in Volshell\nDESCRIPTION: Example of running a plugin with the required parameters. Shows how to pass the kernel parameter and view the output of the pslist plugin.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> display_plugin_output(pslist.PsList, kernel = self.config['kernel'])\n\nPID\tPPID\tImageFileName\tOffset(V)\tThreads\tHandles\tSessionId\tWow64\tCreateTime\tExitTime\tFile output\n\n4\t0\tSystem\t0x8c0bcac87040\t143\t-\tN/A\tFalse\t2021-03-13 17:25:33.000000 \tN/A\tDisabled\n92\t4\tRegistry\t0x8c0bcac5d080\t4\t-\tN/A\tFalse\t2021-03-13 17:25:28.000000 \tN/A\tDisabled\n356\t4\tsmss.exe\t0x8c0bccf8d040\t3\t-\tN/A\tFalse\t2021-03-13 17:25:33.000000 \tN/A\tDisabled\n...\n```\n\n----------------------------------------\n\nTITLE: Memory Mapping Example in Volatility 3\nDESCRIPTION: An example illustrating how memory mapping works across different processes and the operating system. Shows how virtual addresses are mapped to physical memory locations across different contexts.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/basics.rst#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nOperating system map                        Physical Memory\n1 -> 9                                      1  - Free\n2 -> 3                                      2  - OS.4, Process 1.4, Process 2.4\n3 -> 7                                      3  - OS.2\n4 -> 2                                      4  - Free\n                                            5  - Free\nProcess 1 map                               6  - Process 1.2, Process 2.3\n1 -> 12                                     7  - OS.3\n2 -> 6                                      8  - Process1.3\n3 -> 8                                      9  - OS.1\n4 -> 2                                      10 - Process2.1\n                                            11 - Free\nProcess 2 map                               12 - Process1.1\n1 -> 10                                     13 - Free\n2 -> 15                                     14 - Free\n3 -> 6                                      15 - Process2.2\n4 -> 2                                      16 - Free\n```\n\n----------------------------------------\n\nTITLE: Initializing TreeGrid with Process Module Data\nDESCRIPTION: Sets up filter function and creates a TreeGrid renderer with column definitions for displaying process module information. Uses PsList plugin to gather process data.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/simple-plugin.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfilter_func = pslist.PsList.create_pid_filter(self.config.get('pid', None))\n\nreturn renderers.TreeGrid(\n    [\n        (\"PID\", int),\n        (\"Process\", str),\n        (\"Base\", format_hints.Hex),\n        (\"Size\", format_hints.Hex),\n        (\"Name\", str),\n        (\"Path\", str),\n    ],\n    self._generator(\n        pslist.PsList.list_processes(\n            context=self.context,\n            kernel_module_name=self.config['kernel'],\n            filter_func = filter_func\n        )\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Process Objects in Volshell\nDESCRIPTION: Example of accessing process objects in Volshell. Shows how to get the first process from the process list and view its basic information.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> proc = ps()[0]\n(layer_name) >>> proc\n<EPROCESS symbol_table_name1!_EPROCESS: layer_name @ 0xe08ff2459040 #1968>\n```\n\n----------------------------------------\n\nTITLE: Processing Module Data Generator\nDESCRIPTION: Generator function that processes each process's loaded modules, extracting DLL names and handling memory read errors. Returns formatted data for TreeGrid display.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/simple-plugin.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef _generator(self, procs):\n\n    for proc in procs:\n\n        for entry in proc.load_order_modules():\n\n            BaseDllName = FullDllName = renderers.UnreadableValue()\n            try:\n                BaseDllName = entry.BaseDllName.get_string()\n                # We assume that if the BaseDllName points to an invalid buffer, so will FullDllName\n                FullDllName = entry.FullDllName.get_string()\n            except exceptions.InvalidAddressException:\n                pass\n\n            yield (0, (proc.UniqueProcessId,\n                       proc.ImageFileName.cast(\"string\", max_length = proc.ImageFileName.vol.count,\n                                               errors = 'replace'),\n                       format_hints.Hex(entry.DllBase), format_hints.Hex(entry.SizeOfImage),\n                       BaseDllName, FullDllName))\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Attributes in Volshell\nDESCRIPTION: Example of directly accessing object attributes in Volshell. Shows how to access the UniqueProcessId and nested DirectoryTableBase attributes.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> proc.UniqueProcessId\n356\n\n(layer_name) >>> proc.Pcb.DirectoryTableBase\n4355817472\n```\n\n----------------------------------------\n\nTITLE: Running Automagic to Configure Volatility Plugins\nDESCRIPTION: Executes selected automagic modules to automatically configure layers and other requirements for a plugin. Returns any errors encountered during the process.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nerrors = automagic.run(automagics, context, plugin, base_config_path, progress_callback = progress_callback)\n```\n\n----------------------------------------\n\nTITLE: Using Regex Scanning in Volshell\nDESCRIPTION: Example of using the regex_scan (rx) command to search for patterns in memory. Shows how to search for Linux or Darwin kernel version strings.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> rx(rb\"(Linux version|Darwin Kernel Version) [0-9]+\\.[0-9]+\\.[0-9]+\")\n0x880001400070    4c 69 6e 75 78 20 76 65 72 73 69 6f 6e 20 33 2e    Linux.version.3.\n0x880001400080    32 2e 30 2d 34 2d 61 6d 64 36 34 20 28 64 65 62    2.0-4-amd64.(deb\n0x880001400090    69 61 6e 2d 6b 65 72 6e 65 6c 40 6c 69 73 74 73    ian-kernel@lists\n0x8800014000a0    2e 64 65 62 69 61 6e 2e 6f 72 67 29 20 28 67 63    .debian.org).(gc\n0x8800014000b0    63 20 76 65 72 73 69 6f 6e 20 34 2e 36 2e 33 20    c.version.4.6.3.\n0x8800014000c0    28 44 65 62 69 61 6e 20 34 2e 36 2e 33 2d 31 34    (Debian.4.6.3-14\n0x8800014000d0    29 20 29 20 23 31 20 53 4d 50 20 44 65 62 69 61    ).).#1.SMP.Debia\n0x8800014000e0    6e 20 33 2e 32 2e 35 37 2d 33 2b 64 65 62 37 75    n.3.2.57-3+deb7u\n\n0x880001769027    4c 69 6e 75 78 20 76 65 72 73 69 6f 6e 20 33 2e    Linux.version.3.\n0x880001769037    32 2e 30 2d 34 2d 61 6d 64 36 34 20 28 64 65 62    2.0-4-amd64.(deb\n0x880001769047    69 61 6e 2d 6b 65 72 6e 65 6c 40 6c 69 73 74 73    ian-kernel@lists\n0x880001769057    2e 64 65 62 69 61 6e 2e 6f 72 67 29 20 28 67 63    .debian.org).(gc\n```\n\n----------------------------------------\n\nTITLE: Selecting Appropriate Automagic Modules for a Plugin\nDESCRIPTION: Chooses appropriate automagic modules for a specific plugin based on its operating system requirements, filtering out incompatible automagics.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nautomagics = automagic.choose_automagic(available_automagics, plugin)\n```\n\n----------------------------------------\n\nTITLE: Viewing Plugin Requirements in Volshell\nDESCRIPTION: Demonstrates how to view the requirements for a Volatility plugin using the get_requirements() method.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> pslist.PsList.get_requirements()\n[<ModuleRequirement: kernel>, <BooleanRequirement: physical>, <ListRequirement: pid>, <BooleanRequirement: dump>]\n```\n\n----------------------------------------\n\nTITLE: Scanning Data Layers in Volatility 3 using Python\nDESCRIPTION: Shows how to perform scanning operations in Volatility 3 using scanner objects like BytesScanner or RegExScanner. The scan method is called on the layer to be searched after priming the scanner with search data.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/vol2to3.rst#2025-04-23_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nlayer.scan()\n```\n\n----------------------------------------\n\nTITLE: Generating TreeGrid Objects in Volshell\nDESCRIPTION: Shows how to generate a TreeGrid object to access plugin results programmatically rather than displaying them directly.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> treegrid = gt(pslist.PsList, kernel = self.config['kernel'])\n(layer_name) >>> treegrid.populate()\n```\n\n----------------------------------------\n\nTITLE: Implementing the run Method for Volatility 3 Plugin\nDESCRIPTION: Stub for the run method, which is the primary method called on a plugin. It takes no parameters and returns an unpopulated TreeGrid object.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/simple-plugin.rst#2025-04-23_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n    def run(self):\n```\n\n----------------------------------------\n\nTITLE: Displaying Object Instance Information\nDESCRIPTION: Using the dt command to display information about a specific object instance. Shows the actual data values for each field in the process object.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> dt(proc)\nsymbol_table_name1!_EPROCESS (1968 bytes)\n   0x0 :   Pcb                                         symbol_table_name1!_KPROCESS                           0xe08ff2459040\n 0x2d8 :   ProcessLock                                 symbol_table_name1!_EX_PUSH_LOCK                       0xe08ff2459318\n 0x2e0 :   RundownProtect                              symbol_table_name1!_EX_RUNDOWN_REF                     0xe08ff2459320\n 0x2e8 :   UniqueProcessId                             symbol_table_name1!pointer                             4\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Available Volatility Plugins\nDESCRIPTION: Retrieves a dictionary of available plugin names and their corresponding classes after plugins have been imported.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nplugin_list = framework.list_plugins()\n```\n\n----------------------------------------\n\nTITLE: Basic Volatility3 CLI Command Syntax\nDESCRIPTION: The basic syntax for running Volatility3 commands on a memory image, specifying the file path, plugin name, and optional plugin parameters.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-mac-tutorial.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f <path to memory image> <plugin_name> <plugin_option>\n```\n\n----------------------------------------\n\nTITLE: Displaying Volatility Help Information\nDESCRIPTION: Shows available options and commands in Volatility 3 by running the help command. This displays the general usage syntax and available plugins.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvol -h\n```\n\n----------------------------------------\n\nTITLE: Listing Running Processes with mac.pslist\nDESCRIPTION: Demonstrates using the mac.pslist.PsList plugin to list all running processes in a macOS memory dump, showing process IDs (PIDs) and parent process IDs (PPIDs).\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-mac-tutorial.rst#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f contact_me mac.pslist.PsList\n\n    Volatility 3 Framework 2.4.2\n    Progress:  100.00               Stacking attempts finished\n\n    PID     PPID    COMM\n\n    0       0       kernel_task\n    1       0       launchd\n    35      1       UserEventAgent\n    38      1       kextd\n    39      1       fseventsd\n    37      1       uninstalld\n    45      1       configd\n    46      1       powerd\n    52      1       logd\n    58      1       warmd\n    .....\n```\n\n----------------------------------------\n\nTITLE: Listing Windows Plugins in Volatility 3\nDESCRIPTION: This command lists the available Windows plugins in Volatility 3, piped through grep and head to show the first 4 results.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-windows-tutorial.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py --help | grep windows | head -n 4\n    windows.bigpools.BigPools\n    windows.cmdline.CmdLine\n    windows.crashinfo.Crashinfo\n    windows.dlllist.DllList\n```\n\n----------------------------------------\n\nTITLE: Visualizing Process Hierarchy with mac.pstree\nDESCRIPTION: Example of using the mac.pstree.PsTree plugin to display parent-child relationships between processes in a hierarchical format, helping to understand the process execution chain.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-mac-tutorial.rst#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f contact_me mac.pstree.PsTree\n    Volatility 3 Framework 2.4.2\n    Progress:  100.00               Stacking attempts finished\n    PID     PPID    COMM\n\n    35      1       UserEventAgent\n    38      1       kextd\n    39      1       fseventsd\n    37      1       uninstalld\n    204     1       softwareupdated\n    * 449   204     SoftwareUpdateCo\n    337     1       system_installd\n    * 455   337     update_dyld_shar\n```\n\n----------------------------------------\n\nTITLE: Listing Linux Plugins in Volatility 3\nDESCRIPTION: This command lists the available Linux plugins in Volatility 3, using grep and head to limit the output.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-linux-tutorial.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py --help | grep -i linux. | head -n 5\n```\n\n----------------------------------------\n\nTITLE: Running Volatility 3 CLI\nDESCRIPTION: This snippet shows the general syntax for running Volatility 3 CLI with a memory image and plugin.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-linux-tutorial.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f <path to memory image> <plugin_name> <plugin_option>\n```\n\n----------------------------------------\n\nTITLE: Listing macOS Plugins in Volatility3\nDESCRIPTION: Command to list available macOS-specific plugins in Volatility3. It uses grep and head to filter the output to show only the beginning of the macOS plugin list.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-mac-tutorial.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py --help | grep -i mac. | head -n 4\n    mac.bash.Bash       Recovers bash command history from memory.\n    mac.check_syscall.Check_syscall\n    mac.check_sysctl.Check_sysctl\n    mac.check_trap_table.Check_trap_table\n```\n\n----------------------------------------\n\nTITLE: Running dwarf2json for Mac Kernel Symbol Table Creation\nDESCRIPTION: This command uses dwarf2json to convert a Mac kernel debug file into a JSON symbol table for Volatility 3. It specifies the Mac format and outputs to a JSON file.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/symbol-tables.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndwarf2json mac --elf [path to debug kernel] > [kernel name].json\n```\n\n----------------------------------------\n\nTITLE: Starting Volshell Command Line Example\nDESCRIPTION: The command line syntax for starting Volshell with a memory image. The -w, -m, or -l flags can be used to specify Windows, Mac, or Linux operating systems respectively.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ volshell.py -f <path-to-memory-image> [-w|-m|-l]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Linux Task Address Space Layer in Python\nDESCRIPTION: Addition of get_address_space_layer method to the Linux task_struct class for accessing the task's address space layer.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nlinux_task_struct.get_address_space_layer()\n```\n\n----------------------------------------\n\nTITLE: Importing and Running Plugins in Volshell\nDESCRIPTION: Example of importing a Volatility plugin and attempting to run it without parameters. Shows the requirements validation error.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> from volatility3.plugins.windows import pslist\n(layer_name) >>> display_plugin_output(pslist.PsList)\nUnable to validate the plugin requirements: ['plugins.Volshell.VH3FSA1JBG0QP9E62Z8OT5UCIMLNYKW4.PsList.kernel']\n```\n\n----------------------------------------\n\nTITLE: Getting Threads from Linux Task in Python\nDESCRIPTION: Addition of get_threads method to the Linux task object for retrieving associated threads.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nlinux_task.get_threads()\n```\n\n----------------------------------------\n\nTITLE: Running Volatility 3 CLI\nDESCRIPTION: This snippet shows the basic syntax for running the Volatility 3 command-line interface with a memory image and plugin.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-windows-tutorial.rst#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f <path to memory image> plugin_name plugin_option\n```\n\n----------------------------------------\n\nTITLE: Checking ETHREAD Validity and Timestamps in Windows for Python\nDESCRIPTION: Addition of is_valid, get_create_time, and get_exit_time methods to the Windows ETHREAD structure for thread validation and timing information.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nwindows_ethread.is_valid()\nwindows_ethread.get_create_time()\nwindows_ethread.get_exit_time()\n```\n\n----------------------------------------\n\nTITLE: Using Banners Plugin in Volatility 3\nDESCRIPTION: This command demonstrates the use of the banners plugin to identify Linux kernel versions in a memory dump.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/getting-started-linux-tutorial.rst#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python3 vol.py -f memory.vmem banners\n```\n\n----------------------------------------\n\nTITLE: Accessing Owning Process in Windows EPROCESS for Python\nDESCRIPTION: Update to the windows _EPROCESS.owning_process method to support Windows Vista and later versions for retrieving the owning process.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nwindows_eprocess.owning_process()\n```\n\n----------------------------------------\n\nTITLE: Accessing Volatility 3 Object Metadata in Python\nDESCRIPTION: Demonstrates how to access Volatility-specific metadata for objects in Volatility 3 using the 'vol' dictionary. This read-only dictionary contains information such as the object's layer or offset.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/vol2to3.rst#2025-04-23_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nobject.vol\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Test Memory Image\nDESCRIPTION: Commands to download a Windows XP test memory image from the Volatility Foundation website and extract it for testing purposes. This uses curl to download the image and gunzip to decompress it.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/test/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -sLO \"https://downloads.volatilityfoundation.org/volatility3/images/win-xp-laptop-2005-06-25.img.gz\"\ngunzip win-xp-laptop-2005-06-25.img.gz\n```\n\n----------------------------------------\n\nTITLE: Displaying Structure Type Information\nDESCRIPTION: Using the display_type or dt command to show information about a structure type. The example shows type information for the _EPROCESS structure.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n(layer_name) >>> dt('_EPROCESS')\nsymbol_table_name1!_EPROCESS (1968 bytes)\n   0x0 :   Pcb                                         symbol_table_name1!_KPROCESS\n 0x2d8 :   ProcessLock                                 symbol_table_name1!_EX_PUSH_LOCK\n 0x2e0 :   RundownProtect                              symbol_table_name1!_EX_RUNDOWN_REF\n 0x2e8 :   UniqueProcessId                             symbol_table_name1!pointer\n...\n```\n\n----------------------------------------\n\nTITLE: Import Statements Example\nDESCRIPTION: Demonstrates the proper way to structure import statements in Volatility3, showing preferred patterns and aliases usage.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/CODING_STYLE.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport x\nfrom x import y\nfrom x import y as z\nfrom storage.file_system import options as fs_options\n```\n\n----------------------------------------\n\nTITLE: Requiring Volatility Interface Version in Python\nDESCRIPTION: Verifies that the Volatility framework version meets the minimum required version using semantic versioning. This ensures compatibility with the expected API.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nvolatility3.framework.require_interface_version(1, 0, 0)\n```\n\n----------------------------------------\n\nTITLE: Global Constants Declaration\nDESCRIPTION: Shows the correct naming convention for module-level constants in Python code.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/CODING_STYLE.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n_MAX_HOLY_HANDGRENADE_COUNT = 3\nSIR_LANCELOTS_FAVORITE_COLOR = \"blue\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Context in Volatility 3\nDESCRIPTION: Creates a blank context object which serves as the foundation for running Volatility plugins. Multiple contexts can be created to operate independently.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/using-as-a-library.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nctx = contexts.Context()  # Construct a blank context\n```\n\n----------------------------------------\n\nTITLE: Volshell Startup Display Example\nDESCRIPTION: Example of the startup display when Volshell is launched. Shows version information, available mode, current layer, symbol table, and kernel name.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nVolshell (Volatility 3 Framework) 2.0.2\nReadline imported successfully\tPDB scanning finished\n\n    Call help() to see available functions\n\n    Volshell mode        : Generic\n    Current Layer        : primary\n    Current Symbol Table : None\n    Current Kernel Name  : None\n\n(primary) >>>\n```\n\n----------------------------------------\n\nTITLE: Running Volatility 3 Tests with py.test\nDESCRIPTION: Command to execute specific Volatility 3 tests using py.test. This example runs Windows-specific tests on the downloaded memory image, with options to specify the volatility executable, the image file, and filter tests by name.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/test/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npy.test ./test/test_volatility.py --volatility=vol.py --image win-xp-laptop-2005-06-25.img -k test_windows\n```\n\n----------------------------------------\n\nTITLE: Displaying Hexadecimal Memory Dump of Linux Kernel Version\nDESCRIPTION: This code snippet shows a hexadecimal memory dump containing the Linux kernel version string. It appears at multiple memory addresses, indicating it's a common string stored in various locations in memory.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/volshell.rst#2025-04-23_snippet_12\n\nLANGUAGE: hex\nCODE:\n```\n0x880001769067    63 20 76 65 72 73 69 6f 6e 20 34 2e 36 2e 33 20    c.version.4.6.3.\n0x880001769077    28 44 65 62 69 61 6e 20 34 2e 36 2e 33 2d 31 34    (Debian.4.6.3-14\n0x880001769087    29 20 29 20 23 31 20 53 4d 50 20 44 65 62 69 61    ).).#1.SMP.Debia\n0x880001769097    6e 20 33 2e 32 2e 35 37 2d 33 2b 64 65 62 37 75    n.3.2.57-3+deb7u\n\n0xffff81400070    4c 69 6e 75 78 20 76 65 72 73 69 6f 6e 20 33 2e    Linux.version.3.\n0xffff81400080    32 2e 30 2d 34 2d 61 6d 64 36 34 20 28 64 65 62    2.0-4-amd64.(deb\n0xffff81400090    69 61 6e 2d 6b 65 72 6e 65 6c 40 6c 69 73 74 73    ian-kernel@lists\n0xffff814000a0    2e 64 65 62 69 61 6e 2e 6f 72 67 29 20 28 67 63    .debian.org).(gc\n0xffff814000b0    63 20 76 65 72 73 69 6f 6e 20 34 2e 36 2e 33 20    c.version.4.6.3.\n0xffff814000c0    28 44 65 62 69 61 6e 20 34 2e 36 2e 33 2d 31 34    (Debian.4.6.3-14\n0xffff814000d0    29 20 29 20 23 31 20 53 4d 50 20 44 65 62 69 61    ).).#1.SMP.Debia\n0xffff814000e0    6e 20 33 2e 32 2e 35 37 2d 33 2b 64 65 62 37 75    n.3.2.57-3+deb7u\n\n0xffff81769027    4c 69 6e 75 78 20 76 65 72 73 69 6f 6e 20 33 2e    Linux.version.3.\n0xffff81769037    32 2e 30 2d 34 2d 61 6d 64 36 34 20 28 64 65 62    2.0-4-amd64.(deb\n0xffff81769047    69 61 6e 2d 6b 65 72 6e 65 6c 40 6c 69 73 74 73    ian-kernel@lists\n0xffff81769057    2e 64 65 62 69 61 6e 2e 6f 72 67 29 20 28 67 63    .debian.org).(gc\n0xffff81769067    63 20 76 65 72 73 69 6f 6e 20 34 2e 36 2e 33 20    c.version.4.6.3.\n0xffff81769077    28 44 65 62 69 61 6e 20 34 2e 36 2e 33 2d 31 34    (Debian.4.6.3-14\n0xffff81769087    29 20 29 20 23 31 20 53 4d 50 20 44 65 62 69 61    ).).#1.SMP.Debia\n0xffff81769097    6e 20 33 2e 32 2e 35 37 2d 33 2b 64 65 62 37 75    n.3.2.57-3+deb7u\n```\n\n----------------------------------------\n\nTITLE: Installing Volatility 3 Testing Dependencies with pip\nDESCRIPTION: Command to install the required dependencies for the Volatility 3 Testing Framework. This installs all the test dependencies in development mode.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/test/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip3 install -e .[test]\n```\n\n----------------------------------------\n\nTITLE: Accessing BPF JIT Binary Header Address in Python\nDESCRIPTION: Addition of bpf_jit_binary_hdr_address method to the Linux bpf_prog class for retrieving the BPF JIT binary header address.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlinux_bpf_prog.bpf_jit_binary_hdr_address()\n```\n\n----------------------------------------\n\nTITLE: Running pdbconv.py for Windows Symbol Table Creation\nDESCRIPTION: This command runs the pdbconv.py script to create Windows symbol tables. It sets the PYTHONPATH environment variable to include the current directory and executes the script.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/symbol-tables.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPYTHONPATH=\".\" python volatility3/framework/symbols/windows/pdbconv.py\n```\n\n----------------------------------------\n\nTITLE: Running dwarf2json for Linux Kernel Symbol Table Creation\nDESCRIPTION: This command uses dwarf2json to convert a Linux kernel debug ELF file into a JSON symbol table for Volatility 3. It specifies the Linux format and outputs to a JSON file.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/doc/source/symbol-tables.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndwarf2json linux --elf [path to debug kernel] > [kernel name].json\n```\n\n----------------------------------------\n\nTITLE: F-String Formatting Example\nDESCRIPTION: Demonstrates the preferred way to format strings using f-strings with hex values.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/CODING_STYLE.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nf\"0x{offset:x}\"  # Preferred\nf\"{hex(offset)}\"  # Not preferred\n```\n\n----------------------------------------\n\nTITLE: Accessing Attached Devices and Drivers in Windows for Python\nDESCRIPTION: Addition of get_attached_devices method to DEVICE_OBJECT and get_devices method to DRIVER_OBJECT in Windows for retrieving attached devices and associated drivers.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nwindows_device_object.get_attached_devices()\nwindows_driver_object.get_devices()\n```\n\n----------------------------------------\n\nTITLE: Getting VAD Size in Windows for Python\nDESCRIPTION: Addition of get_size() method to Windows VAD structures for calculating the size of virtual address descriptors.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nwindows_vad.get_size()\n```\n\n----------------------------------------\n\nTITLE: Converting Array to String with Encoding in Python\nDESCRIPTION: Addition of an 'encoding' parameter to the objects.utility.array_to_string function for specifying string encoding during array conversion.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nobjects.utility.array_to_string(encoding=...)\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw Pointer Value in Python\nDESCRIPTION: Addition of a new method get_raw_value() to the Pointer class for accessing raw pointer values.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPointer.get_raw_value()\n```\n\n----------------------------------------\n\nTITLE: Getting Registry Key Type in Windows for Python\nDESCRIPTION: Addition of get_type method to the Windows CM_KEY_NODE registry structure for retrieving the key type.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nwindows_cm_key_node.get_type()\n```\n\n----------------------------------------\n\nTITLE: Converting FOURCC Code in Linux Utilities for Python\nDESCRIPTION: Addition of convert_fourcc_code method to the LinuxUtilities class for converting FOURCC codes.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nLinuxUtilities.convert_fourcc_code(...)\n```\n\n----------------------------------------\n\nTITLE: Specifying Type Override for Object from Symbol in Python\nDESCRIPTION: Addition of support for specifying a type override when creating an object from a symbol using object_from_symbol.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nobject_from_symbol(..., type_override=...)\n```\n\n----------------------------------------\n\nTITLE: Accessing Linux Module Address Boundaries in Python\nDESCRIPTION: Addition of get_module_address_boundaries method to the Linux module class for retrieving module address ranges.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nlinux_module.get_module_address_boundaries()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Parent Process ID in Linux Task for Python\nDESCRIPTION: Addition of getppid method to the Linux task object extension for getting the parent process ID.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nlinux_task.getppid()\n```\n\n----------------------------------------\n\nTITLE: Generating UUID in Linux Extensions for Python\nDESCRIPTION: Addition of a 'uuid' method to the linux.extensions module for generating unique identifiers.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nlinux.extensions.uuid()\n```\n\n----------------------------------------\n\nTITLE: Getting Absolute Symbol Address from Module in Python\nDESCRIPTION: Addition of get_absolute_symbol_address method to Module class for retrieving absolute symbol addresses, and update to object_from_symbol method to support absolute addressing.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nmodule.get_absolute_symbol_address(...)\nmodule.object_from_symbol(absolute=False, ...)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Object Header with Symbol Table Name in Python\nDESCRIPTION: Addition of a symbol_table_name parameter to the ExecutiveObject.get_object_header() method for specifying the symbol table to use.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nExecutiveObject.get_object_header(symbol_table_name=...)\n```\n\n----------------------------------------\n\nTITLE: Accessing Module Collections and Symbols in Python\nDESCRIPTION: Additions to support module collections, context.modules, ModuleRequirement, and retrieving symbols by absolute location.\nSOURCE: https://github.com/volatilityfoundation/volatility3/blob/develop/API_CHANGES.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ncontext.modules\nModuleRequirement(...)\nget_symbols_by_absolute_location(...)\n```"
  }
]